%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCCUCAGGGGGGGGGGAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUxxxxxxxxxxUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCCCCCCCCCCCUUCCCACUCA\
) } def
/len { sequence length } bind def

/coor [
[77.18844604 444.33520508]
[63.96825027 437.06274414]
[53.08144760 426.61572266]
[45.27031708 413.70648193]
[41.06743622 399.21517944]
[40.75936127 384.12982178]
[44.36710358 369.47900391]
[51.64467621 356.26162720]
[62.09588623 345.37884521]
[75.00814819 337.57269287]
[89.50108337 333.37542725]
[89.18902588 318.37866211]
[88.87696838 303.38189697]
[88.56491089 288.38516235]
[88.25286102 273.38839722]
[87.94080353 258.39163208]
[87.62874603 243.39489746]
[87.31668854 228.39813232]
[87.00463104 213.40138245]
[86.69257355 198.40463257]
[86.38052368 183.40788269]
[74.05522919 191.95698547]
[59.62681961 187.85565186]
[53.64128876 174.10160828]
[60.47357559 160.74797058]
[75.12983704 157.55514526]
[86.89723206 166.85624695]
[88.14410400 151.90815735]
[89.39097595 136.96008301]
[90.63785553 122.01198578]
[91.88472748 107.06390381]
[90.01711273 92.18062592]
[85.11556244 78.00406647]
[80.21401215 63.82750702]
[75.31246185 49.65094757]
[70.41091156 35.47438812]
[65.50936127 21.29783249]
[60.60781097 7.12127352]
[44.02615356 7.07803965]
[28.47706985 1.39188397]
[15.81845379 -9.23922253]
[7.55649948 -23.52757263]
[4.66649103 -39.75168991]
[7.47770119 -55.96371078]
[15.63597775 -70.22326660]
[28.14825439 -80.82969666]
[22.66122246 -94.79008484]
[17.17419052 -108.75048065]
[9.05264854 -121.36160278]
[-1.38716412 -132.13241577]
[-11.82697678 -142.90322876]
[-22.26678848 -153.67402649]
[-32.70660019 -164.44483948]
[-43.14641571 -175.21565247]
[-59.10052109 -176.90266418]
[-67.60696411 -190.50486755]
[-62.14032364 -205.58781433]
[-46.89414215 -210.58116150]
[-33.56398392 -201.65443420]
[-32.37560654 -185.65545654]
[-21.93579292 -174.88465881]
[-11.49598026 -164.11384583]
[-1.05616808 -153.34303284]
[9.38364410 -142.57221985]
[19.82345772 -131.80142212]
[16.54791260 -146.43940735]
[17.64933395 -161.39891052]
[23.03343391 -175.39932251]
[32.23930359 -187.24212646]
[44.47887421 -195.91351318]
[58.70437241 -200.67117310]
[73.69801331 -201.10780334]
[88.17626953 -197.18605042]
[100.89971924 -189.24163818]
[110.77916718 -177.95462036]
[116.96887970 -164.29125977]
[118.93898773 -149.42120361]
[116.52083588 -134.61740112]
[109.92143250 -121.14714813]
[99.70572662 -110.16355896]
[86.74822235 -102.60688782]
[72.15817261 -99.12403870]
[57.18454361 -100.01315308]
[43.10916901 -105.19812012]
[31.13458061 -114.23751068]
[36.62161255 -100.27712250]
[42.10864258 -86.31672668]
[55.60361099 -87.34926605]
[68.85621643 -84.51987457]
[80.78256989 -78.05020142]
[90.40448761 -68.46002197]
[96.92971039 -56.52550125]
[99.81718445 -43.21636963]
[98.82183838 -29.61711884]
[94.01543427 -16.83865738]
[85.78141785 -5.92754316]
[74.78437042 2.21972275]
[79.68592072 16.39628029]
[84.58747101 30.57283974]
[89.48902130 44.74939728]
[94.39057159 58.92595673]
[99.29212189 73.10251617]
[104.19367218 87.27906799]
[107.37911224 72.62120819]
[114.49490356 59.41645432]
[124.98571777 48.69532013]
[138.03285217 41.29449081]
[152.61810303 37.79153824]
[167.60321045 38.45983124]
[181.81872559 43.24721909]
[194.15525818 51.78008652]
[203.65007019 63.39252090]
[209.56214905 77.17828369]
[211.43014526 92.06151581]
[209.10824585 106.88072205]
[202.77767944 120.47939301]
[192.93247986 131.79627991]
[180.34097290 139.94821167]
[165.98580933 144.29898071]
[150.98727417 144.50907898]
[136.51588440 140.56208801]
[123.70098114 132.76605225]
[113.54265594 121.72936249]
[106.83281708 108.31077576]
[105.58593750 123.25886536]
[104.33906555 138.20695496]
[103.09219360 153.15504456]
[101.84531403 168.10311890]
[101.37727356 183.09582520]
[101.68933105 198.09257507]
[102.00138855 213.08932495]
[102.31344604 228.08607483]
[102.62549591 243.08283997]
[102.93755341 258.07958984]
[103.24961090 273.07635498]
[103.56166840 288.07308960]
[103.87372589 303.06985474]
[104.18578339 318.06658936]
[104.49783325 333.06335449]
[119.15283203 336.65411377]
[132.37863159 343.91638184]
[143.27349854 354.35498047]
[151.09460449 367.25817871]
[155.30867004 381.74624634]
[155.62838745 396.83135986]
[152.03196716 411.48495483]
[144.76460266 424.70794678]
[134.32180786 435.59878540]
[121.41557312 443.41491699]
[106.92588043 447.62338257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[46 87]
[47 86]
[48 85]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
