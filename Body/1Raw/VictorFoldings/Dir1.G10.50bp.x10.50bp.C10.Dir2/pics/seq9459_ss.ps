%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUAACCUGGGGGGGGGGGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAxxxxxxxxxxUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.78619385]
[71.19830322 375.77017212]
[59.48964310 366.24075317]
[50.78712082 353.90509033]
[45.73651886 339.67855835]
[44.71262741 324.61688232]
[47.79142761 309.83770752]
[54.74444962 296.43780518]
[65.05573273 285.41146851]
[77.96011353 277.57693481]
[92.50000000 273.51562500]
[92.50000000 258.51562500]
[92.50000000 243.51564026]
[92.50000000 228.51564026]
[92.50000000 213.51564026]
[92.50000000 198.51564026]
[92.50000000 183.51564026]
[92.50000000 168.51564026]
[92.50000000 153.51564026]
[92.50000000 138.51564026]
[92.50000000 123.51563263]
[88.35588074 121.76348877]
[84.59867096 119.28818512]
[81.35321808 116.17197418]
[67.57083893 122.09193420]
[53.78845596 128.01190186]
[41.62133026 139.81857300]
[26.90787506 131.39535522]
[30.92881966 114.92512512]
[47.86849213 114.22951508]
[61.65087128 108.30955505]
[75.43325043 102.38958740]
[75.35069275 101.28324127]
[75.31792450 100.17430878]
[60.99533081 95.71749115]
[46.67273331 91.26067352]
[37.74006653 103.48713684]
[25.32004929 112.14865112]
[10.75990677 116.30568695]
[-4.36098385 115.50732422]
[-18.40242195 109.84016418]
[-29.84129715 99.91893005]
[-37.43680573 86.81980896]
[-40.36504364 71.96369934]
[-38.30838013 56.96207047]
[-31.48990250 43.44219208]
[-20.64923096 32.87060165]
[-6.96227837 26.39402199]
[8.08629513 24.71498680]
[22.86413383 28.01562500]
[35.76824570 35.93790817]
[45.39889526 47.62248611]
[50.71141434 61.80190277]
[51.12954712 76.93807983]
[65.45214844 81.39489746]
[79.77474213 85.85170746]
[93.40521240 76.21463013]
[110.05213165 77.45693207]
[120.03485107 66.26116943]
[130.01757812 55.06540298]
[140.00030518 43.86963654]
[149.98303223 32.67387009]
[159.96575928 21.47810364]
[169.94848633 10.28233814]
[159.86703491 -0.84404236]
[151.02537537 -12.97899818]
[143.52369690 -25.98503113]
[137.44699097 -39.71477127]
[132.86412048 -54.01265335]
[129.82701111 -68.71666718]
[128.37007141 -83.66020966]
[128.50981140 -98.67395782]
[130.24465942 -113.58779144]
[133.55494690 -128.23272705]
[138.40315247 -142.44282532]
[144.73437500 -156.05706787]
[152.47683716 -168.92121887]
[161.54284668 -180.88949585]
[171.82966614 -191.82629395]
[183.22073364 -201.60768127]
[195.58697510 -210.12284851]
[208.78828430 -217.27529907]
[222.67506409 -222.98399353]
[237.08999634 -227.18424988]
[251.86972046 -229.82847595]
[266.84677124 -230.88670349]
[281.85147095 -230.34693909]
[296.71377563 -228.21531677]
[311.26528931 -224.51597595]
[325.34115601 -219.29083252]
[338.78189087 -212.59909058]
[351.43515015 -204.51658630]
[363.15759277 -195.13488770]
[373.81640625 -184.56028748]
[383.29080200 -172.91262817]
[391.47341919 -160.32388306]
[398.27157593 -146.93667603]
[403.60818481 -132.90269470]
[407.42285156 -118.38097382]
[409.67230225 -103.53604126]
[410.33105469 -88.53610229]
[409.39169312 -73.55111694]
[406.86477661 -58.75088882]
[402.77899170 -44.30310059]
[397.18063354 -30.37146568]
[390.13314819 -17.11383820]
[381.71633911 -4.68043470]
[372.02560425 6.78786182]
[361.17074585 17.16110802]
[349.27474976 26.32176590]
[336.47244263 34.16603851]
[322.90884399 40.60504913]
[308.73764038 45.56583023]
[294.11941528 48.99217606]
[279.21981812 50.84526825]
[264.20767212 51.10410309]
[249.25303650 49.76574707]
[234.52539062 46.84537125]
[220.19160461 42.37606430]
[206.41409302 36.40846252]
[193.34896851 29.01018715]
[181.14425659 20.26506424]
[171.16152954 31.46083069]
[161.17880249 42.65659714]
[151.19607544 53.85236359]
[141.21334839 65.04812622]
[131.23062134 76.24389648]
[121.24789429 87.43965912]
[123.06467438 108.78952789]
[107.50000000 123.51563263]
[107.50000000 138.51564026]
[107.50000000 153.51564026]
[107.50000000 168.51564026]
[107.50000000 183.51564026]
[107.50000000 198.51564026]
[107.50000000 213.51564026]
[107.50000000 228.51564026]
[107.50000000 243.51564026]
[107.50000000 258.51562500]
[107.50000000 273.51562500]
[122.03988647 277.57693481]
[134.94427490 285.41146851]
[145.25555420 296.43780518]
[152.20857239 309.83770752]
[155.28736877 324.61688232]
[154.26348877 339.67855835]
[149.21287537 353.90509033]
[140.51036072 366.24075317]
[128.80169678 375.77017212]
[114.95575714 381.78619385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 32]
[25 31]
[26 30]
[34 56]
[35 55]
[36 54]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
[63 123]
[64 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
