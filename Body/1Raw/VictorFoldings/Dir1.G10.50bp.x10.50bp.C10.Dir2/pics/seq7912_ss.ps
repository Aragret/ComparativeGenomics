%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCUACCGGGGGGGGGGCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAxxxxxxxxxxUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCCCCCCCCCCCUCUACC\
) } def
/len { sequence length } bind def

/coor [
[134.48651123 379.04943848]
[131.08131409 364.42465210]
[129.33503723 349.51052856]
[129.26960754 334.49468994]
[130.88586426 319.56591797]
[134.16346741 304.91201782]
[139.06123352 290.71722412]
[145.51753235 277.16009521]
[153.45117188 264.41107178]
[162.76240540 252.63053894]
[173.33410645 241.96661377]
[163.93025208 230.28041077]
[154.52639771 218.59420776]
[145.12254333 206.90798950]
[135.71867371 195.22178650]
[126.31481934 183.53558350]
[111.62992096 180.47718811]
[102.99571228 193.73466492]
[88.13130951 192.78654480]
[74.84397125 199.74690247]
[61.55662918 206.70726013]
[48.26928711 213.66761780]
[46.14843369 229.03906250]
[35.37326431 240.20487976]
[20.08704948 242.87156677]
[6.16764784 236.01373291]
[-1.03264356 222.26835632]
[1.25483334 206.92080688]
[12.15049744 195.87254333]
[27.46474266 193.37184143]
[41.30892944 200.38027954]
[54.59627151 193.41992188]
[67.88361359 186.45956421]
[81.17095184 179.49920654]
[88.85476685 166.73957825]
[104.66957092 167.18983459]
[110.23150635 153.25912476]
[105.39168549 139.06137085]
[100.55187225 124.86361694]
[89.30604553 128.54483032]
[75.68581390 126.67680359]
[62.46395874 118.18080139]
[52.79747009 103.32900238]
[38.98388672 97.48220825]
[25.17030525 91.63542175]
[11.35672283 85.78863525]
[-5.58639956 85.18287659]
[-9.69463348 68.73419952]
[4.97394419 60.23307419]
[17.20351028 71.97505188]
[31.01709366 77.82183838]
[44.83067703 83.66863251]
[58.64426041 89.51541901]
[67.80659485 77.63806152]
[76.96813202 65.76177216]
[67.80619812 53.88494492]
[58.64426041 42.00812149]
[49.48232269 30.13129807]
[34.11790848 24.39834785]
[31.66778946 8.18326283]
[44.65244293 -1.83326530]
[59.71436691 4.65290785]
[61.35914612 20.96936417]
[70.52108002 32.84618759]
[79.68302155 44.72301102]
[88.84495544 56.59983444]
[103.46395874 53.24057770]
[106.52235413 38.55567932]
[109.58074951 23.87078094]
[112.63914490 9.18588257]
[99.16238403 2.40065908]
[87.90161896 -7.64213181]
[79.62464142 -20.25775528]
[74.89577484 -34.58605576]
[74.03744507 -49.65010834]
[77.10817719 -64.42282104]
[83.89860535 -77.89696503]
[93.94573975 -89.15384674]
[106.56455994 -97.42595673]
[120.89468384 -102.14929199]
[135.95907593 -103.00180817]
[150.73059082 -99.92536926]
[164.20211792 -93.12973785]
[175.45512390 -83.07825470]
[183.72235107 -70.45624542]
[188.44015503 -56.12429428]
[189.28684998 -41.05958176]
[186.20471191 -26.28924751]
[179.40388489 -12.82035255]
[169.34805298 -1.57123101]
[156.72285461 6.69113398]
[142.38908386 11.40340042]
[127.32404327 12.24427891]
[124.26564789 26.92917633]
[121.20725250 41.61407471]
[118.14885712 56.29897308]
[135.83247375 95.65661621]
[114.74962616 120.02380371]
[119.58943939 134.22155762]
[124.42926025 148.41931152]
[133.00457764 152.24963379]
[138.46759033 159.06776428]
[140.06115723 166.99212646]
[138.00103760 174.13171387]
[147.40489197 185.81793213]
[156.80874634 197.50413513]
[166.21260071 209.19035339]
[175.61645508 220.87655640]
[185.02030945 232.56275940]
[197.69897461 224.51718140]
[211.19876099 217.94177246]
[225.34988403 212.91923523]
[239.97436523 209.51272583]
[254.88832092 207.76510620]
[269.90414429 207.69831848]
[284.83306885 209.31324768]
[299.48727417 212.58953857]
[313.68249512 217.48602295]
[327.24023438 223.94110107]
[339.98992920 231.87361145]
[351.77130127 241.18377686]
[362.43618774 251.75453186]
[371.85040283 263.45291138]
[379.89562988 276.13180542]
[386.47061157 289.63180542]
[391.49273682 303.78305054]
[394.89880371 318.40765381]
[396.64599609 333.32165527]
[396.71231079 348.33749390]
[395.09695435 363.26635742]
[391.82022095 377.92047119]
[386.92330933 392.11553955]
[380.46780396 405.67306519]
[372.53494263 418.42254639]
[363.22439575 430.20364380]
[352.65335083 440.86819458]
[340.95468140 450.28207397]
[328.27554321 458.32690430]
[314.77536011 464.90151978]
[300.62393188 469.92321777]
[285.99923706 473.32882690]
[271.08520508 475.07556152]
[256.06933594 475.14144897]
[241.14054871 473.52563477]
[226.48652649 470.24847412]
[212.29159546 465.35113525]
[198.73425293 458.89523315]
[185.98501587 450.96197510]
[174.20419312 441.65109253]
[163.53996277 431.07971191]
[154.12643433 419.38076782]
[146.08198547 406.70138550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 36]
[19 34]
[20 33]
[21 32]
[22 31]
[37 100]
[38 99]
[39 98]
[43 53]
[44 52]
[45 51]
[46 50]
[55 66]
[56 65]
[57 64]
[58 63]
[67 96]
[68 95]
[69 94]
[70 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
