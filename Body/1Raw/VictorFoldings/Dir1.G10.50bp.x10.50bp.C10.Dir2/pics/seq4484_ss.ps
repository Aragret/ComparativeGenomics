%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUAAUAGGAGGGGGGGGGGGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGACCCCCCCCCCUGAAUAAUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[83.88713074 405.35116577]
[70.18659973 399.08673096]
[58.22384262 389.93029785]
[48.59892273 378.34115601]
[41.79461670 364.90057373]
[38.15222168 350.28274536]
[37.85444260 335.22091675]
[40.91621399 320.47055054]
[47.18395996 306.77151489]
[56.34329605 294.81100464]
[67.93478394 285.18887329]
[81.37701416 278.38781738]
[95.99571991 274.74896240]
[95.69558716 259.75198364]
[95.39545441 244.75497437]
[95.09532166 229.75798035]
[94.79518890 214.76098633]
[94.49505615 199.76399231]
[94.19492340 184.76699829]
[93.89479065 169.76998901]
[93.59465790 154.77299500]
[93.29452515 139.77600098]
[85.30412292 127.20609283]
[92.76374817 113.25386810]
[85.83719635 126.55886078]
[81.37371826 140.87937927]
[68.90116882 149.21217346]
[53.96279526 147.85383606]
[43.19777679 137.40805054]
[41.39048386 122.51732635]
[49.34414673 109.79964447]
[63.52574158 104.90724182]
[76.61687469 97.58451843]
[61.61762619 97.73458862]
[46.61837387 97.88466644]
[36.82750702 110.07781219]
[21.47966957 113.07413483]
[7.82164717 105.45886230]
[2.30233693 90.82769012]
[7.52778959 76.08901215]
[21.03070641 68.20198059]
[36.43542099 70.89060974]
[46.46830368 82.88541412]
[61.46755219 82.73534393]
[76.46679688 82.58526611]
[88.65277863 84.96163177]
[97.04724121 92.13371277]
[103.16656494 78.43868256]
[109.28588867 64.74365234]
[115.40521240 51.04862213]
[121.52454376 37.35359192]
[108.36631012 30.13459778]
[95.84028625 21.86709976]
[84.02983093 12.60611725]
[73.01352692 2.41328096]
[62.86470032 -8.64357662]
[53.65088654 -20.49087334]
[45.43340302 -33.04976273]
[38.26693344 -46.23667145]
[32.19917679 -59.96384048]
[27.27050781 -74.13990784]
[23.51373100 -88.67054749]
[20.95384407 -103.45905304]
[19.60788345 -118.40699768]
[19.48480797 -133.41491699]
[20.58543396 -148.38293457]
[22.90244102 -163.21142578]
[26.42040634 -177.80172729]
[31.11591721 -192.05671692]
[36.95772934 -205.88156128]
[43.90696335 -219.18421936]
[51.91736984 -231.87619019]
[60.93564606 -243.87300110]
[70.90177155 -255.09481812]
[81.74942780 -265.46694946]
[93.40641785 -274.92037964]
[105.79516602 -283.39221191]
[118.83322906 -290.82601929]
[132.43383789 -297.17239380]
[146.50648499 -302.38903809]
[160.95750427 -306.44128418]
[175.69075012 -309.30212402]
[190.60815430 -310.95254517]
[205.61044312 -311.38159180]
[220.59777832 -310.58633423]
[235.47042847 -308.57211304]
[250.12940979 -305.35235596]
[264.47717285 -300.94842529]
[278.41824341 -295.38967896]
[291.85980225 -288.71310425]
[304.71246338 -280.96310425]
[316.89062500 -272.19128418]
[328.31329346 -262.45602417]
[338.90444946 -251.82208252]
[348.59356689 -240.36024475]
[357.31619263 -228.14677429]
[365.01428223 -215.26298523]
[371.63659668 -201.79458618]
[377.13906860 -187.83122253]
[381.48507690 -173.46580505]
[384.64569092 -158.79396057]
[386.59991455 -143.91329956]
[387.33468628 -128.92288208]
[386.84515381 -113.92243958]
[385.13458252 -99.01181793]
[382.21432495 -84.29023743]
[378.10385132 -69.85566711]
[372.83047485 -55.80418015]
[366.42932129 -42.22927856]
[358.94296265 -29.22130585]
[350.42123413 -16.86682701]
[340.92086792 -5.24806166]
[330.50506592 5.55766869]
[319.24313354 15.47845173]
[307.21005249 24.44826698]
[294.48587036 32.40741730]
[281.15530396 39.30294037]
[267.30700684 45.08894348]
[253.03318787 49.72692108]
[238.42881775 53.18601227]
[223.59111023 55.44318771]
[208.61877441 56.48343658]
[193.61146545 56.29982758]
[178.66906738 54.89358902]
[163.89102173 52.27407455]
[149.37565613 48.45872116]
[135.21957397 43.47291565]
[129.10025024 57.16794586]
[122.98091888 70.86297607]
[116.86159515 84.55800629]
[110.74227142 98.25303650]
[107.76074219 112.95373535]
[115.77262115 126.59632874]
[108.29152679 139.47587585]
[108.59165955 154.47286987]
[108.89179230 169.46986389]
[109.19192505 184.46685791]
[109.49205017 199.46385193]
[109.79218292 214.46086121]
[110.09231567 229.45785522]
[110.39244843 244.45484924]
[110.69258118 259.45184326]
[110.99271393 274.44885254]
[125.74530029 277.49987793]
[139.44886780 283.75769043]
[151.41606140 292.90832520]
[161.04660034 304.49279785]
[167.85742188 317.93008423]
[171.50689697 332.54614258]
[171.81196594 347.60784912]
[168.75735474 362.35968018]
[162.49624634 376.06173706]
[153.34269714 388.02670288]
[141.75587463 397.65444946]
[128.31694031 404.46200562]
[113.70000458 408.10794067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 143]
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[24 132]
[33 45]
[34 44]
[35 43]
[47 131]
[48 130]
[49 129]
[50 128]
[51 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
