%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUCUAAGGGGGGGGGGAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACxxxxxxxxxxAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUCCCCCCCCCCAACCCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[155.59873962 469.00317383]
[141.75279236 462.98715210]
[130.04412842 453.45773315]
[121.34160614 441.12207031]
[116.29100800 426.89553833]
[115.26711273 411.83386230]
[118.34591675 397.05468750]
[125.29893494 383.65478516]
[135.61021423 372.62844849]
[148.51460266 364.79394531]
[163.05448914 360.73260498]
[163.05448914 345.73260498]
[163.05448914 330.73260498]
[163.05448914 315.73260498]
[163.05448914 300.73260498]
[163.05448914 285.73260498]
[163.05448914 270.73260498]
[163.05448914 255.73262024]
[163.05448914 240.73262024]
[163.05448914 225.73262024]
[163.05448914 210.73262024]
[159.04675293 196.27792358]
[151.32266235 183.41952515]
[147.94143677 182.22172546]
[144.99099731 179.28971863]
[143.29704285 174.85317993]
[143.54679871 169.50929260]
[136.63980103 156.19413757]
[129.73280334 142.87898254]
[122.82580566 129.56382751]
[115.91880798 116.24866486]
[89.15513611 116.59478760]
[84.19419861 94.01406097]
[73.98072052 83.02839661]
[60.63891602 90.05915833]
[45.94322968 93.39414978]
[30.89673805 92.81189728]
[16.52487946 88.35810089]
[3.80555797 80.34207916]
[-6.39739752 69.31535339]
[-13.39289284 56.03365326]
[-16.70938492 41.40514755]
[-16.12665367 26.42833328]
[-11.69042683 12.12390327]
[-3.70884132 -0.53483945]
[-13.92232132 -11.52050400]
[-24.13580132 -22.50616837]
[-34.34928131 -33.49183273]
[-44.56275940 -44.47749710]
[-54.77624130 -55.46316147]
[-64.98972321 -66.44882965]
[-75.20320129 -77.43449402]
[-85.41667938 -88.42015839]
[-95.63015747 -99.40582275]
[-111.43111420 -99.73057556]
[-122.31400299 -111.19086456]
[-121.82221222 -126.98750305]
[-110.24750519 -137.74862671]
[-94.45694733 -137.08984375]
[-83.81880951 -125.40200806]
[-84.64449310 -109.61930084]
[-74.43101501 -98.63363647]
[-64.21753693 -87.64797211]
[-54.00405502 -76.66230774]
[-43.79057693 -65.67664337]
[-33.57709503 -54.69097900]
[-23.36361694 -43.70531464]
[-13.15013599 -32.71965027]
[-2.93665648 -21.73398399]
[7.27682352 -10.74831963]
[20.48271179 -17.78777885]
[35.07198715 -21.17154312]
[50.05150604 -20.66310692]
[64.39995575 -16.29112053]
[77.13751221 -8.34786701]
[87.39270782 2.63028860]
[94.46210480 15.89910126]
[97.85848999 30.55690384]
[97.34450531 45.60588074]
[92.94918060 60.01999283]
[84.96638489 72.81491852]
[95.17986298 83.80058289]
[105.96032715 81.09305573]
[117.81802368 85.85978699]
[126.32910919 73.50820923]
[134.84019470 61.15663910]
[143.35128784 48.80506516]
[141.87261963 32.83030319]
[153.53962708 21.81847000]
[169.40238953 24.21690750]
[177.29234314 38.18573761]
[171.15699768 53.00926590]
[155.70286560 57.31615829]
[147.19177246 69.66773224]
[138.68067932 82.01930237]
[130.16958618 94.37087250]
[129.23396301 109.34166718]
[136.14096069 122.65682220]
[143.04795837 135.97196960]
[149.95495605 149.28713989]
[156.86195374 162.60229492]
[164.18106079 175.69544983]
[171.90515137 188.55384827]
[172.03999329 173.55445862]
[175.44731140 158.94656372]
[181.96260071 145.43542480]
[191.27134705 133.67330933]
[202.92411804 124.22806549]
[216.35838318 117.55567932]
[230.92553711 113.97827148]
[245.92234802 113.66856384]
[260.62478638 116.64148712]
[274.32305908 122.75354004]
[286.35586548 131.70962524]
[296.14227295 143.07739258]
[303.20983887 156.30801392]
[307.21737671 170.76277161]
[307.97137451 185.74380493]
[305.43542480 200.52789307]
[299.73199463 214.40127563]
[291.13641357 226.69419861]
[280.06365967 236.81320190]
[267.04827881 244.26972961]
[252.71864319 248.70384216]
[237.76652527 249.90145874]
[222.91378784 247.80474854]
[208.87748718 242.51495361]
[196.33523560 234.28742981]
[185.89256287 223.51940918]
[178.05448914 210.73262024]
[178.05448914 225.73262024]
[178.05448914 240.73262024]
[178.05448914 255.73262024]
[178.05448914 270.73260498]
[178.05448914 285.73260498]
[178.05448914 300.73260498]
[178.05448914 315.73260498]
[178.05448914 330.73260498]
[178.05448914 345.73260498]
[178.05448914 360.73260498]
[192.59437561 364.79394531]
[205.49874878 372.62844849]
[215.81004333 383.65478516]
[222.76306152 397.05468750]
[225.84185791 411.83386230]
[224.81796265 426.89553833]
[219.76736450 441.12207031]
[211.06484985 453.45773315]
[199.35618591 462.98715210]
[185.51023865 469.00317383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 103]
[23 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[33 82]
[34 81]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
