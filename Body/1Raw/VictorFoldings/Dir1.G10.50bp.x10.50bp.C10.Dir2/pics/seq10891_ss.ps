%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGCCAUAGGGGGGGGGGGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUxxxxxxxxxxUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCCCCCCCCCCCUCAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[17.99806023 352.87890625]
[3.98967052 347.89935303]
[-9.71844101 342.14443970]
[-23.08340263 335.63223267]
[-36.06341171 328.38305664]
[-48.61787415 320.41958618]
[-60.70752716 311.76675415]
[-72.29455566 302.45159912]
[-83.34272003 292.50326538]
[-93.81747437 281.95288086]
[-103.68605042 270.83343506]
[-112.91758728 259.17965698]
[-125.17995453 267.81878662]
[-137.44232178 276.45791626]
[-149.70469666 285.09701538]
[-156.52998352 299.37026978]
[-171.39064026 300.37527466]
[-183.65301514 309.01437378]
[-195.91537476 317.65350342]
[-208.17774963 326.29260254]
[-212.32363892 341.79071045]
[-227.08255005 348.07992554]
[-241.13269043 340.33572388]
[-243.69601440 324.49874878]
[-232.80613708 312.71783447]
[-216.81686401 314.03024292]
[-204.55448914 305.39114380]
[-192.29212952 296.75201416]
[-180.02975464 288.11288452]
[-174.08155823 274.45755005]
[-158.34381104 272.83465576]
[-146.08143616 264.19552612]
[-133.81906128 255.55642700]
[-121.55670166 246.91729736]
[-129.07998657 234.88670349]
[-135.95066833 222.47183228]
[-142.14915466 209.70803833]
[-147.65777588 196.63171387]
[-152.46086121 183.28010559]
[-156.54472351 169.69123840]
[-159.89772034 155.90382385]
[-162.51031494 141.95715332]
[-164.37504578 127.89094543]
[-165.48660278 113.74528503]
[-165.84181213 99.56046295]
[-165.43969727 85.37689209]
[-164.28137207 71.23498535]
[-162.37013245 57.17502594]
[-159.71144104 43.23706818]
[-156.31288147 29.46081924]
[-152.18409729 15.88552856]
[-147.33688354 2.54986811]
[-141.78504944 -10.50817013]
[-135.54438782 -23.25138474]
[-128.63270569 -35.64347458]
[-121.06967163 -47.64913177]
[-112.87683868 -59.23415756]
[-104.07755280 -70.36554718]
[-94.69686890 -81.01158142]
[-84.76152802 -91.14194489]
[-74.29981995 -100.72776794]
[-63.34156036 -109.74174500]
[-51.91795731 -118.15819550]
[-40.06156540 -125.95314789]
[-27.80615234 -133.10438538]
[-15.18663788 -139.59153748]
[-2.23897219 -145.39611816]
[10.99995899 -150.50161743]
[24.49243927 -154.89346313]
[38.20003128 -158.55914307]
[52.08367920 -161.48822021]
[66.10383606 -163.67236328]
[80.22056580 -165.10533142]
[94.39363861 -165.78306580]
[108.58267975 -165.70359802]
[122.74727631 -164.86718750]
[136.84706116 -163.27619934]
[150.84188843 -160.93518066]
[164.69186401 -157.85078430]
[178.35752869 -154.03181458]
[191.79998779 -149.48913574]
[204.98089600 -144.23570251]
[217.86274719 -138.28646851]
[230.40881348 -131.65838623]
[238.13290405 -144.51678467]
[245.85697937 -157.37518311]
[245.60014343 -173.77232361]
[259.80908203 -181.96000671]
[273.86685181 -173.51544189]
[273.31204224 -157.12568665]
[258.71539307 -149.65110779]
[250.99130249 -136.79269409]
[243.26721191 -123.93429565]
[257.63619995 -114.06282806]
[271.32730103 -103.27081299]
[284.28161621 -91.60466766]
[296.44348145 -79.11455536]
[307.76055908 -65.85419464]
[318.18420410 -51.88059998]
[327.66958618 -37.25387192]
[336.17590332 -22.03690338]
[343.66659546 -6.29513693]
[350.10943604 9.90373516]
[355.47671509 26.49005127]
[359.74536133 43.39248276]
[362.89703369 60.53834915]
[364.91812134 77.85391235]
[365.80001831 95.26470947]
[380.79919434 95.42074585]
[395.79837036 95.57678223]
[406.91256714 84.34065247]
[422.71685791 84.33795929]
[433.83483887 95.57031250]
[433.67044067 111.37374878]
[422.32116699 122.37236786]
[406.52035522 122.04089355]
[395.64233398 110.57597351]
[380.64315796 110.41993713]
[365.64398193 110.26390076]
[364.65478516 125.09807587]
[362.83786011 139.85374451]
[360.19891357 154.48478699]
[356.74618530 168.94541931]
[352.49044800 183.19041443]
[347.44503784 197.17521667]
[341.62573242 210.85610962]
[335.05072021 224.19029236]
[327.74057007 237.13607788]
[319.71813965 249.65293884]
[311.00854492 261.70175171]
[301.63900757 273.24484253]
[291.63882446 284.24609375]
[281.03927612 294.67111206]
[269.87353516 304.48727417]
[258.17648315 313.66390991]
[245.98474121 322.17227173]
[233.33641052 329.98580933]
[220.27107239 337.08001709]
[206.82957458 343.43276978]
[193.05395508 349.02413940]
[178.98730469 353.83670044]
[164.67362976 357.85537720]
[150.15766907 361.06756592]
[135.48484802 363.46325684]
[120.70103455 365.03497314]
[105.85248566 365.77774048]
[90.98562622 365.68930054]
[76.14696503 364.76989746]
[61.38290787 363.02239990]
[46.73962402 360.45230103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 34]
[13 33]
[14 32]
[15 31]
[17 29]
[18 28]
[19 27]
[20 26]
[84 93]
[85 92]
[86 91]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
