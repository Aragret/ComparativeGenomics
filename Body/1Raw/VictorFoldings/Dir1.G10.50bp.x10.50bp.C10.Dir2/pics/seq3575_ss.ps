%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCCUCGGGGGGGGGGCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAACCCCCCCCCCAACCCCACUC\
) } def
/len { sequence length } bind def

/coor [
[124.29276276 255.57139587]
[111.00589752 248.61013794]
[99.23829651 239.30833435]
[89.39720154 227.98786926]
[81.82316589 215.04051208]
[76.77829742 200.91432190]
[74.43717957 186.09814453]
[74.88082123 171.10470581]
[78.09376526 156.45324707]
[85.26739502 143.27983093]
[92.44102478 130.10641479]
[79.82989502 138.22795105]
[67.21877289 146.34950256]
[54.60764313 154.47103882]
[41.99651337 162.59257507]
[29.38538551 170.71412659]
[21.38324547 187.26542664]
[3.86347628 187.50550842]
[-8.57596397 195.88766479]
[-21.01540375 204.26980591]
[-23.79179192 219.82830811]
[-36.80411911 228.79797363]
[-52.33240509 225.85725403]
[-61.16399384 212.75080872]
[-58.05925751 197.25448608]
[-44.86018372 188.56196594]
[-29.39754677 191.83036804]
[-16.95810699 183.44821167]
[-4.51866674 175.06607056]
[-1.87816310 163.21977234]
[8.47271633 156.14317322]
[21.26384354 158.10299683]
[33.87497330 149.98144531]
[46.48609924 141.85990906]
[59.09722900 133.73837280]
[71.70835876 125.61682892]
[84.31948090 117.49528503]
[82.14264679 102.65407562]
[67.73043060 98.49619293]
[53.31821442 94.33830261]
[41.15834808 103.97766113]
[25.65355873 104.59503937]
[12.76575756 95.95303345]
[7.45056438 81.37468719]
[11.75178146 66.46565247]
[24.01550102 56.95877457]
[39.52607727 56.50963211]
[52.31937027 65.29093170]
[57.47610474 79.92608643]
[71.88832092 84.08397675]
[86.30053711 88.24185944]
[94.02462006 75.38346100]
[83.58480835 64.61264801]
[73.14499664 53.84184265]
[62.70518112 43.07103348]
[47.33974838 35.90586090]
[49.97132874 19.15739250]
[66.79375458 17.04969406]
[73.47599030 32.63122177]
[83.91580200 43.40203094]
[94.35561371 54.17283630]
[104.79542542 64.94364929]
[100.79743195 50.48625946]
[96.79943848 36.02887344]
[87.30708313 24.41443253]
[80.43914795 11.07908440]
[76.49626923 -3.39343047]
[75.65103149 -18.36959839]
[77.94044495 -33.19385529]
[83.26428986 -47.21728897]
[91.38951874 -59.82604218]
[101.96046448 -70.46818542]
[114.51438904 -78.67786407]
[128.50177002 -84.09571838]
[143.31033325 -86.48458862]
[158.29182434 -85.73990631]
[172.79048157 -81.89425659]
[186.17163086 -75.11599731]
[197.84953308 -65.70182037]
[207.31298828 -54.06382751]
[214.14776611 -40.71145630]
[218.05468750 -26.22919083]
[218.86270142 -11.25096989]
[216.53646851 3.56755280]
[211.17779541 17.57771492]
[203.02125549 30.16624069]
[192.42390442 40.78208160]
[179.84962463 48.96054840]
[165.84881592 54.34363174]
[151.03179932 56.69583511]
[138.42614746 64.82587433]
[125.82049561 72.95591736]
[140.78074646 71.86460114]
[155.74099731 70.77329254]
[170.70124817 69.68198395]
[185.66149902 68.59067535]
[200.62173462 67.49935913]
[213.82241821 58.77854919]
[227.07888794 65.56938171]
[240.27957153 56.84857178]
[253.53602600 63.63940430]
[268.49627686 62.54809570]
[283.45651245 61.45678329]
[298.41677856 60.36547470]
[303.16354370 45.92467117]
[313.07901001 34.40287399]
[326.65115356 27.55707169]
[341.81033325 26.43120003]
[356.24490356 31.19694710]
[367.75363159 41.12756729]
[374.58157349 54.70871735]
[375.68750000 69.86936951]
[370.90277100 84.29763794]
[360.95703125 95.79330444]
[347.36691284 102.60337830]
[332.20480347 103.68936157]
[317.78283691 98.88565826]
[306.30026245 88.92478943]
[299.50808716 75.32572174]
[284.54785156 76.41703033]
[269.58758545 77.50834656]
[254.62733459 78.59965515]
[242.49671936 87.24240875]
[228.17019653 80.52963257]
[216.03956604 89.17238617]
[201.71305847 82.45960999]
[186.75280762 83.55091858]
[171.79255676 84.64223480]
[156.83230591 85.73354340]
[141.87205505 86.82485199]
[126.91181183 87.91616058]
[140.56385803 94.13077545]
[154.21592712 100.34538269]
[169.16230774 101.61237335]
[183.61541748 105.62582397]
[197.07507324 112.24683380]
[209.07548523 121.24627686]
[219.20137024 132.31272888]
[227.10232544 145.06321716]
[232.50491333 159.05650330]
[235.22218323 173.80833435]
[235.16007996 188.80821228]
[232.32078552 203.53703308]
[226.80253601 217.48512268]
[218.79629517 230.16975403]
[208.57914734 241.15200806]
[196.50463867 250.05178833]
[182.99063110 256.56115723]
[168.50479126 260.45480347]
[153.54841614 261.59802246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[18 29]
[19 28]
[20 27]
[38 51]
[39 50]
[40 49]
[52 62]
[53 61]
[54 60]
[55 59]
[92 131]
[93 130]
[94 129]
[95 128]
[96 127]
[97 126]
[99 124]
[101 122]
[102 121]
[103 120]
[104 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
