%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCACCCUGGGGGGGGGGAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGxxxxxxxxxxCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCCCCCCCCCCCAUCACCCU\
) } def
/len { sequence length } bind def

/coor [
[101.73748016 627.47424316]
[87.89154053 621.45825195]
[76.18287659 611.92883301]
[67.48035431 599.59313965]
[62.42975235 585.36663818]
[61.40586090 570.30493164]
[64.48465729 555.52575684]
[71.43768311 542.12585449]
[81.74896240 531.09954834]
[94.65334320 523.26501465]
[109.19322968 519.20367432]
[109.19322968 504.20370483]
[109.19322968 489.20370483]
[109.19322968 474.20370483]
[109.19322968 459.20370483]
[109.19322968 444.20370483]
[109.19322968 429.20370483]
[109.19322968 414.20370483]
[109.19322968 399.20370483]
[109.19322968 384.20370483]
[94.12272644 381.08505249]
[80.01860809 374.91308594]
[67.49236298 365.95281982]
[57.08761215 354.59024048]
[49.25648880 341.31567383]
[44.34000778 326.70257568]
[42.55321121 311.38281250]
[43.97576904 296.01925659]
[48.54842377 281.27725220]
[56.07545090 267.79562378]
[66.23304749 256.15914917]
[78.58325958 246.87310791]
[92.59284973 240.34132385]
[107.65633392 236.84867859]
[107.34427643 221.85192871]
[107.03221893 206.85517883]
[106.72016144 191.85841370]
[105.31785583 176.92411804]
[102.83274078 162.13140869]
[100.34762573 147.33869934]
[86.95567322 145.50733948]
[74.62712860 139.96611023]
[64.36705017 131.16674805]
[57.01186371 119.82657623]
[53.16118240 106.87009430]
[53.12892532 93.35354614]
[56.91772079 80.37882996]
[64.21869659 69.00368500]
[74.43666077 60.15544128]
[86.73861694 54.55543137]
[84.87100220 39.67215347]
[83.00338745 24.78887177]
[81.13578033 9.90559292]
[79.11344147 -4.95745420]
[69.45533752 -17.48867798]
[75.26371765 -31.20407104]
[73.08687592 -46.04527664]
[70.91004181 -60.88648224]
[68.57893372 -75.70423889]
[66.09381866 -90.49694824]
[63.60869980 -105.28965759]
[61.12358093 -120.08235931]
[46.15769577 -122.29085541]
[32.60765457 -129.01779175]
[21.80095673 -139.60412598]
[14.79632950 -153.01271057]
[12.28001499 -167.92993164]
[14.49853706 -182.89433289]
[21.23454666 -196.43986511]
[31.82811737 -207.23947144]
[45.24140167 -214.23510742]
[60.16030121 -216.74142456]
[75.12321472 -214.51287842]
[88.66423035 -207.76779175]
[99.45672607 -197.16699219]
[106.44338226 -183.74902344]
[108.93970490 -168.82844543]
[106.70112610 -153.86701965]
[99.94696808 -140.33053589]
[89.33893585 -129.54513550]
[75.91629028 -122.56748199]
[78.40140533 -107.77477264]
[80.88652802 -92.98206329]
[83.37164307 -78.18936157]
[87.60885620 -72.07448578]
[85.75124359 -63.06332016]
[87.92808533 -48.22211456]
[90.10491943 -33.38090897]
[99.60732269 -21.91122627]
[93.95465088 -7.13429117]
[98.06373596 -0.93259197]
[96.01905823 8.03797913]
[97.88667297 22.92125893]
[99.75428772 37.80453873]
[101.62189484 52.68782043]
[117.64683533 56.07207870]
[131.55947876 64.71441650]
[141.69451904 77.58036804]
[146.83882141 93.12990570]
[146.37660217 109.50177765]
[140.36320496 124.73630524]
[129.51841736 137.00994873]
[115.14032745 144.85357666]
[117.62545013 159.64628601]
[120.11056519 174.43899536]
[129.13278198 162.45568848]
[143.70646667 158.90495300]
[157.22959900 165.39530945]
[163.57608032 178.98655701]
[159.87088013 193.52174377]
[147.79249573 202.41627502]
[132.81254578 201.64083862]
[121.71691895 191.54635620]
[122.02897644 206.54312134]
[122.34102631 221.53987122]
[122.65308380 236.53662109]
[137.05580139 239.16700745]
[150.65876770 244.56800842]
[162.93478394 252.52819824]
[173.40853882 262.73703003]
[181.67491150 274.79690552]
[187.41473389 288.23873901]
[190.40702820 302.54010010]
[190.53759766 317.14559937]
[187.80332947 331.48837280]
[182.31225586 345.01223755]
[174.27926636 357.19302368]
[164.01774597 367.55917358]
[151.92730713 375.70971680]
[138.47824097 381.32998657]
[124.19322968 384.20370483]
[124.19322968 399.20370483]
[124.19322968 414.20370483]
[124.19322968 429.20370483]
[124.19322968 444.20370483]
[124.19322968 459.20370483]
[124.19322968 474.20370483]
[124.19322968 489.20370483]
[124.19322968 504.20370483]
[124.19322968 519.20367432]
[138.73312378 523.26501465]
[151.63749695 531.09954834]
[161.94879150 542.12585449]
[168.90180969 555.52575684]
[171.98060608 570.30493164]
[170.95671082 585.36663818]
[165.90611267 599.59313965]
[157.20358276 611.92883301]
[145.49491882 621.45825195]
[131.64898682 627.47424316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 116]
[35 115]
[36 114]
[37 113]
[38 105]
[39 104]
[40 103]
[50 95]
[51 94]
[52 93]
[53 92]
[54 90]
[56 88]
[57 87]
[58 86]
[59 84]
[60 83]
[61 82]
[62 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
