%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAAACCCGGGGGGGGGGCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGCCCCCCCCCCACUUAAACCC\
) } def
/len { sequence length } bind def

/coor [
[77.72662354 384.77322388]
[63.88068008 378.75717163]
[52.17201996 369.22778320]
[43.46949387 356.89208984]
[38.41889191 342.66558838]
[37.39500046 327.60391235]
[40.47380066 312.82473755]
[47.42682266 299.42480469]
[57.73810577 288.39846802]
[70.64248657 280.56396484]
[85.18237305 276.50265503]
[85.18237305 261.50265503]
[85.18237305 246.50265503]
[85.18237305 231.50265503]
[85.18237305 216.50265503]
[85.18237305 201.50265503]
[85.18237305 186.50265503]
[85.18237305 171.50265503]
[85.18237305 156.50265503]
[85.18237305 141.50265503]
[85.18237305 126.50265503]
[74.30355072 116.17545319]
[59.32383728 116.95529938]
[44.34412003 117.73513794]
[29.36440659 118.51498413]
[26.23266411 133.27488708]
[19.38662529 146.72085571]
[9.29306316 157.93612671]
[-3.35982490 166.15603638]
[-17.70934486 170.82012939]
[-32.77712250 171.61038208]
[-47.53580856 168.47294617]
[-60.97913742 161.62171936]
[-72.19051361 151.52381897]
[-80.40553284 138.86776733]
[-85.06407928 124.51644135]
[-85.84852600 109.44836426]
[-82.70538330 94.69088745]
[-75.84896851 81.25020599]
[-65.74674225 70.04273224]
[-53.08751297 61.83259583]
[-38.73439789 57.17959213]
[-23.66601562 56.40096664]
[-8.90975380 59.54980087]
[4.52827883 66.41141510]
[15.73185635 76.51795959]
[23.93709946 89.18035889]
[28.58456230 103.53527069]
[43.56427765 102.75542450]
[58.54399109 101.97557831]
[73.52370453 101.19573975]
[85.35231781 82.52829742]
[104.17704010 81.36682892]
[112.94324493 69.19499207]
[121.70945740 57.02315521]
[130.34857178 44.76078415]
[138.85966492 32.40921402]
[147.37075806 20.05764008]
[152.71226501 6.04092741]
[154.57987976 -8.84235191]
[156.44749451 -23.72563171]
[158.31510925 -38.60891342]
[160.18270874 -53.49219131]
[152.88298035 -64.17712402]
[154.78611755 -76.57054901]
[164.32476807 -84.07531738]
[166.50160217 -98.91651917]
[168.67843628 -113.75772858]
[154.88186646 -119.88610840]
[143.25105286 -129.51039124]
[134.64909363 -141.91639709]
[129.71430969 -156.18351746]
[128.81289673 -171.25302124]
[132.01173401 -186.00665283]
[139.07345581 -199.34962463]
[149.47404480 -210.29176331]
[162.44168091 -218.02111816]
[177.01409912 -221.96409607]
[192.10993958 -221.82810974]
[206.60896301 -217.62326050]
[219.43525696 -209.66157532]
[229.63703918 -198.53384399]
[236.45726013 -185.06582642]
[239.38980103 -170.25695801]
[238.21707153 -155.20613098]
[233.02607727 -141.03024292]
[224.20202637 -128.78120422]
[212.39973450 -119.36799622]
[198.49499512 -113.48914337]
[183.51963806 -111.58088684]
[181.34280396 -96.73968506]
[179.16596985 -81.89847565]
[186.52757263 -65.99858093]
[175.06599426 -51.62458038]
[173.19837952 -36.74129868]
[171.33076477 -21.85801888]
[169.46315002 -6.97473907]
[167.59555054 7.90854073]
[176.90670776 -3.85165572]
[188.80703735 -12.98303795]
[202.57646179 -18.93307877]
[217.38180542 -21.34174919]
[232.32722473 -20.06330109]
[246.50839233 -15.17509651]
[259.06723022 -6.97291136]
[269.24380493 4.04695177]
[276.42233276 17.21769524]
[280.16848755 31.74237442]
[280.25558472 46.74212265]
[276.67834473 61.30932236]
[269.65322876 74.56253052]
[259.60528564 85.69982147]
[247.14256287 94.04728699]
[233.01911926 99.09983826]
[218.08955383 100.55174255]
[203.25723267 98.31515503]
[189.41964722 92.52540588]
[177.41407776 83.53282928]
[167.96697998 71.88154602]
[161.64997864 58.27656555]
[158.84532166 43.54110336]
[159.72232056 28.56873131]
[151.21122742 40.92030334]
[142.70014954 53.27187729]
[141.48681641 60.61173248]
[133.88128662 65.78936005]
[125.11508179 77.96119690]
[116.34887695 90.13303375]
[119.89304352 111.13919830]
[100.18237305 126.50265503]
[100.18237305 141.50265503]
[100.18237305 156.50265503]
[100.18237305 171.50265503]
[100.18237305 186.50265503]
[100.18237305 201.50265503]
[100.18237305 216.50265503]
[100.18237305 231.50265503]
[100.18237305 246.50265503]
[100.18237305 261.50265503]
[100.18237305 276.50265503]
[114.72225952 280.56396484]
[127.62664032 288.39846802]
[137.93792725 299.42480469]
[144.89094543 312.82473755]
[147.96974182 327.60391235]
[146.94586182 342.66558838]
[141.89524841 356.89208984]
[133.19273376 369.22778320]
[121.48406982 378.75717163]
[107.63813019 384.77322388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 51]
[23 50]
[24 49]
[25 48]
[53 128]
[54 127]
[55 126]
[56 124]
[57 123]
[58 122]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[66 92]
[67 91]
[68 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
