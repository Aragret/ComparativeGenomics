%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUCAUAGGGGGGGGGGAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCxxxxxxxxxxAUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGACCCCCCCCCCACUAAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.05313110]
[71.19830322 351.03710938]
[59.48964310 341.50769043]
[50.78712082 329.17202759]
[45.73651886 314.94549561]
[44.71262741 299.88381958]
[47.79142761 285.10464478]
[54.74444962 271.70474243]
[65.05573273 260.67840576]
[77.96011353 252.84388733]
[92.50000000 248.78257751]
[92.50000000 233.78257751]
[92.50000000 218.78257751]
[92.50000000 203.78257751]
[92.50000000 188.78257751]
[92.50000000 173.78257751]
[92.50000000 158.78257751]
[92.50000000 143.78257751]
[92.50000000 128.78257751]
[92.50000000 113.78257751]
[87.06058502 108.61897278]
[72.67755890 112.87673950]
[76.18176270 98.29177094]
[70.74234772 93.12816620]
[55.76263428 93.90801239]
[40.78292084 94.68785858]
[25.80320740 95.46770477]
[10.82349205 96.24755096]
[6.41034031 110.74926758]
[-2.69902730 122.86517334]
[-15.40461063 131.13221741]
[-30.17214775 134.55210876]
[-45.21838760 132.71186829]
[-58.72642517 125.83373260]
[-69.06509399 114.74826050]
[-74.98595428 100.79408264]
[-75.77403259 85.65621948]
[-71.33416748 71.16265869]
[-62.20248413 59.06356049]
[-49.48168945 50.81994629]
[-34.70787430 47.42728043]
[-19.66505051 49.29523849]
[-6.16971207 56.19825745]
[4.14851189 67.30276489]
[10.04364681 81.26783752]
[25.02336121 80.48799133]
[40.00307465 79.70814514]
[54.98279190 78.92829895]
[69.96250153 78.14845276]
[56.44269180 71.65117645]
[50.62954712 57.82339859]
[51.42377472 42.84444046]
[58.66658401 29.70892715]
[70.90998077 21.04294205]
[85.70623016 18.57901001]
[100.09723663 22.80972481]
[111.20590973 32.88927460]
[116.81138611 46.80252838]
[115.79299927 61.76791763]
[108.35636139 74.79135132]
[103.46436310 88.97120667]
[114.55567932 78.87255859]
[125.64699554 68.77391052]
[136.73831177 58.67525864]
[127.76765442 46.63805771]
[120.02007294 33.77953339]
[113.57015991 20.22352028]
[108.48004913 6.10057640]
[104.79875946 -8.45328522]
[102.56174469 -23.29789734]
[101.79054260 -38.29029846]
[102.49258423 -53.28609467]
[104.66110992 -68.14086914]
[108.27523041 -82.71155548]
[113.30014801 -96.85782623]
[119.68746185 -110.44344330]
[127.37566376 -123.33757019]
[136.29069519 -135.41601562]
[146.34671021 -146.56246948]
[157.44686890 -156.66957092]
[169.48423767 -165.63996887]
[182.34292603 -173.38729858]
[195.89906311 -179.83694458]
[210.02210999 -184.92677307]
[224.57604980 -188.60777283]
[239.42070007 -190.84449768]
[254.41311646 -191.61540222]
[269.40890503 -190.91305542]
[284.26364136 -188.74423218]
[298.83425903 -185.12980652]
[312.98040771 -180.10461426]
[326.56591797 -173.71702576]
[339.45986938 -166.02857971]
[351.53814697 -157.11329651]
[362.68438721 -147.05705261]
[372.79125977 -135.95671082]
[381.76144409 -123.91914368]
[389.50851440 -111.06031036]
[395.95788574 -97.50403595]
[401.04742432 -83.38088989]
[404.72814941 -68.82688141]
[406.96456909 -53.98217773]
[407.73516846 -38.98974991]
[407.03253174 -23.99398041]
[404.86340332 -9.13929367]
[401.24868774 5.43124819]
[396.22320557 19.57732010]
[389.83535767 33.16268158]
[382.14663696 46.05649948]
[373.23110962 58.13459015]
[363.17465210 69.28063965]
[352.07409668 79.38729095]
[340.03637695 88.35722351]
[327.17736816 96.10403442]
[313.62097168 102.55313110]
[299.49774170 107.64239502]
[284.94363403 111.32281494]
[270.09890747 113.55894470]
[255.10644531 114.32924652]
[240.11070251 113.62630463]
[225.25605774 111.45688629]
[210.68559265 107.84188843]
[196.53961182 102.81612396]
[182.95437622 96.42799377]
[170.06071472 88.73902130]
[157.98280334 79.82325745]
[146.83695984 69.76657867]
[135.74565125 79.86522675]
[124.65432739 89.96387482]
[113.56301117 100.06252289]
[107.50000000 113.78257751]
[107.50000000 128.78257751]
[107.50000000 143.78257751]
[107.50000000 158.78257751]
[107.50000000 173.78257751]
[107.50000000 188.78257751]
[107.50000000 203.78257751]
[107.50000000 218.78257751]
[107.50000000 233.78257751]
[107.50000000 248.78257751]
[122.03988647 252.84388733]
[134.94427490 260.67840576]
[145.25555420 271.70474243]
[152.20857239 285.10464478]
[155.28736877 299.88381958]
[154.26348877 314.94549561]
[149.21287537 329.17202759]
[140.51036072 341.50769043]
[128.80169678 351.03710938]
[114.95575714 357.05313110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[61 130]
[62 129]
[63 128]
[64 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
