%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUUUCACGGGGGGGGGGUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUxxxxxxxxxxCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCCCCCCCCCCCACUUUCAC\
) } def
/len { sequence length } bind def

/coor [
[93.38887787 379.70294189]
[79.54293823 373.68692017]
[67.83427429 364.15750122]
[59.13174820 351.82183838]
[54.08114624 337.59530640]
[53.05725479 322.53363037]
[56.13605499 307.75445557]
[63.08907700 294.35452271]
[73.40036011 283.32821655]
[86.30474091 275.49368286]
[100.84462738 271.43237305]
[100.84462738 256.43237305]
[100.84462738 241.43238831]
[100.84462738 226.43238831]
[100.84462738 211.43238831]
[100.84462738 196.43238831]
[100.84462738 181.43238831]
[100.84462738 166.43238831]
[100.84462738 151.43238831]
[100.84462738 136.43238831]
[100.84462738 121.43238068]
[88.31866455 113.18009186]
[74.53628540 119.10005188]
[60.75390625 125.02001953]
[46.97152328 130.93998718]
[39.71382904 145.24751282]
[23.97412872 148.35256958]
[11.82657623 137.87324524]
[12.58973408 121.84834290]
[25.67817116 112.57083130]
[41.05155945 117.15760040]
[54.83394241 111.23764038]
[68.61632538 105.31767273]
[82.39870453 99.39771271]
[92.02722931 87.89590454]
[95.43020630 73.28701782]
[98.83318329 58.67812347]
[102.23616791 44.06922913]
[96.95213318 40.37747955]
[92.59369659 35.67388535]
[89.34862518 30.18195724]
[87.35227203 24.15862465]
[86.68194580 17.88223267]
[87.35401917 11.63967896]
[73.82983398 5.15151405]
[60.30564117 -1.33665097]
[44.00432968 0.45199081]
[34.52415848 -12.92928028]
[41.61751556 -27.71495819]
[57.98736572 -28.69480705]
[66.79380798 -14.86084080]
[80.31799316 -8.37267590]
[93.84218597 -1.88451076]
[102.57203674 -8.85719299]
[113.27410889 -12.06567574]
[124.40013123 -11.04578972]
[132.12422180 -23.90419197]
[139.84831238 -36.76259613]
[140.32192993 -52.57670975]
[153.50831604 -59.50263214]
[161.23240662 -72.36103058]
[168.95649719 -85.21943665]
[176.68057251 -98.07784271]
[184.40466309 -110.93624115]
[179.09483337 -129.06922913]
[188.50585938 -145.08578491]
[206.31109619 -149.13188171]
[213.49360657 -162.30047607]
[220.67610168 -175.46905518]
[209.26319885 -185.28353882]
[200.14395142 -197.25192261]
[193.71502686 -210.84956360]
[190.25526428 -225.48106384]
[189.91349792 -240.50631714]
[192.70227051 -255.26850891]
[198.49725342 -269.12280273]
[207.04292297 -281.46459961]
[217.96374512 -291.75576782]
[230.78068542 -299.54824829]
[244.93225098 -304.50354004]
[259.79904175 -306.40731812]
[274.73095703 -305.17877197]
[289.07546997 -300.87405396]
[296.25796509 -314.04263306]
[291.55831909 -329.13198853]
[298.97885132 -343.08590698]
[314.11706543 -347.62573242]
[327.99172974 -340.05810547]
[332.37127686 -324.87274170]
[324.65737915 -311.07885742]
[309.42654419 -306.86013794]
[302.24404907 -293.69152832]
[313.62985229 -283.96224976]
[322.74740601 -272.07354736]
[329.19625854 -258.54364014]
[332.69229126 -243.96284485]
[333.08035278 -228.96797180]
[330.34106445 -214.21437073]
[324.59176636 -200.34738159]
[316.08148193 -187.97407532]
[305.18023682 -177.63665771]
[292.36282349 -169.78877258]
[278.18826294 -164.77552795]
[263.27532959 -162.81832886]
[248.27551270 -164.00515747]
[233.84469604 -168.28654480]
[226.66218567 -155.11796570]
[219.47967529 -141.94937134]
[225.02232361 -131.89108276]
[224.99142456 -120.28647614]
[219.27809143 -110.04774475]
[209.21406555 -103.80079651]
[197.26306152 -103.21215820]
[189.53897095 -90.35375214]
[181.81489563 -77.49535370]
[174.09080505 -64.63694763]
[166.36672974 -51.77854538]
[166.44557190 -36.88415146]
[152.70671082 -29.03850937]
[144.98262024 -16.18010712]
[137.25854492 -3.32170534]
[145.89311218 17.22471428]
[137.62051392 38.17457199]
[116.84505463 47.47220612]
[113.44207764 62.08110046]
[110.03910065 76.68999481]
[106.63612366 91.29888153]
[115.45024872 95.19654083]
[120.35356140 106.66331482]
[115.84462738 121.43238068]
[115.84462738 136.43238831]
[115.84462738 151.43238831]
[115.84462738 166.43238831]
[115.84462738 181.43238831]
[115.84462738 196.43238831]
[115.84462738 211.43238831]
[115.84462738 226.43238831]
[115.84462738 241.43238831]
[115.84462738 256.43237305]
[115.84462738 271.43237305]
[130.38452148 275.49368286]
[143.28889465 283.32821655]
[153.60017395 294.35452271]
[160.55320740 307.75445557]
[163.63200378 322.53363037]
[162.60810852 337.59530640]
[157.55751038 351.82183838]
[148.85498047 364.15750122]
[137.14631653 373.68692017]
[123.30038452 379.70294189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 34]
[23 33]
[24 32]
[25 31]
[35 127]
[36 126]
[37 125]
[38 124]
[44 53]
[45 52]
[46 51]
[56 121]
[57 120]
[58 119]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[67 108]
[68 107]
[69 106]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
