%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACACGAGAAAGCACGGGGGGGGGGAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAxxxxxxxxxxAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUCCCCCCCCCCUCACACGAGAAAACAC\
) } def
/len { sequence length } bind def

/coor [
[104.18537903 449.68518066]
[89.68624115 445.68334961]
[76.13475037 439.15670776]
[63.96654892 430.31506348]
[53.57278061 419.44265747]
[45.28756332 406.88897705]
[39.37723541 393.05755615]
[36.03179169 378.39306641]
[35.35876846 363.36685181]
[37.37980652 348.46197510]
[42.02993393 334.15756226]
[49.15967178 320.91345215]
[58.53982162 309.15536499]
[69.86885834 299.26129150]
[82.78259277 291.54928589]
[96.86591339 286.26724243]
[111.66608429 283.58496094]
[111.66608429 268.58496094]
[111.66608429 253.58496094]
[111.66608429 238.58496094]
[111.66608429 223.58496094]
[111.66608429 208.58496094]
[111.66608429 193.58496094]
[111.66608429 178.58496094]
[111.66608429 163.58496094]
[111.66608429 148.58496094]
[111.66608429 133.58496094]
[111.66608429 118.58496094]
[101.20543671 120.84082794]
[91.47340393 117.87913513]
[84.78023529 110.93513489]
[82.45421600 102.12007141]
[68.20633698 97.42986298]
[53.95846558 92.73965454]
[39.71059036 88.04943848]
[25.46271706 83.35923004]
[11.21484375 78.66902161]
[-0.42736822 91.23588562]
[-16.33141708 97.45214081]
[-33.29975891 96.11962128]
[-47.94330215 87.55268097]
[-57.35831451 73.50579071]
[-59.70217514 56.81442642]
[-74.12021637 52.67678070]
[-88.53825378 48.53913116]
[-103.21183777 55.02492523]
[-117.36417389 47.46906662]
[-120.13880157 31.66777039]
[-109.40726471 19.74243546]
[-93.40187836 20.84115601]
[-84.40060425 34.12108994]
[-69.98256683 38.25873947]
[-55.56452942 42.39638901]
[-47.70304489 31.99134636]
[-36.73859787 24.87202454]
[-23.97278595 21.90958405]
[-10.92995548 23.48017502]
[0.82481945 29.41731834]
[9.87353706 39.02925873]
[15.11631489 51.17949677]
[15.90505505 64.42114258]
[30.15292931 69.11135864]
[44.40080261 73.80156708]
[58.64867783 78.49177551]
[72.89655304 83.18199158]
[87.14442444 87.87220001]
[104.87855530 80.80192566]
[121.21357727 94.38905334]
[131.45646667 83.43080139]
[132.65170288 78.25101471]
[135.45602417 74.45288086]
[139.06060791 72.42095947]
[142.62207031 72.15707397]
[153.48110962 61.80905914]
[164.34013367 51.46104431]
[157.04971313 40.13480377]
[151.87725830 27.70197296]
[148.98435974 14.55449104]
[148.46072388 1.10656679]
[150.32148743 -12.21837616]
[154.50671387 -25.00102806]
[160.88333130 -36.83938599]
[169.24938965 -47.36140442]
[179.34043884 -56.23667526]
[190.83787537 -63.18681717]
[203.37902832 -67.99419403]
[216.56858826 -70.50873566]
[229.99104309 -70.65262604]
[243.22383118 -68.42270660]
[255.85057068 -63.89052963]
[267.47421265 -57.20006561]
[277.72949219 -48.56314087]
[289.35324097 -58.04407501]
[300.97702026 -67.52501678]
[312.60076904 -77.00595093]
[318.40429688 -91.72428894]
[333.15734863 -93.77295685]
[344.78112793 -103.25389099]
[341.17098999 -118.08392334]
[344.36129761 -133.00990295]
[353.71859741 -145.06825256]
[367.38494873 -151.86479187]
[382.64694214 -152.05006409]
[396.47427368 -145.58726501]
[406.12152100 -133.75961304]
[409.67321777 -118.91548157]
[406.42416382 -104.00218964]
[397.01947021 -91.98077393]
[383.32641602 -85.23810577]
[368.06381226 -85.11293793]
[354.26205444 -91.63012695]
[342.63827515 -82.14919281]
[337.66616821 -68.10899353]
[322.08169556 -65.38218689]
[310.45794678 -55.90125275]
[298.83419800 -46.42031479]
[287.21041870 -36.93937683]
[294.83312988 -22.16262436]
[299.04141235 -6.07046032]
[299.62881470 10.55876923]
[296.56423950 26.92011833]
[289.99325562 42.22100830]
[280.23150635 55.71961594]
[267.74932861 66.76084900]
[253.14918518 74.80812836]
[237.13653564 79.46945953]
[220.48583984 80.51655579]
[204.00297546 77.89596558]
[188.48634338 71.73185730]
[174.68815613 62.32007980]
[163.82911682 72.66809082]
[152.97007751 83.01610565]
[142.41471863 93.67369080]
[132.17182922 104.63194275]
[126.66608429 118.58496094]
[126.66608429 133.58496094]
[126.66608429 148.58496094]
[126.66608429 163.58496094]
[126.66608429 178.58496094]
[126.66608429 193.58496094]
[126.66608429 208.58496094]
[126.66608429 223.58496094]
[126.66608429 238.58496094]
[126.66608429 253.58496094]
[126.66608429 268.58496094]
[126.66608429 283.58496094]
[141.46626282 286.26724243]
[155.54957581 291.54928589]
[168.46331787 299.26129150]
[179.79235840 309.15536499]
[189.17250061 320.91345215]
[196.30224609 334.15756226]
[200.95236206 348.46197510]
[202.97340393 363.36685181]
[202.30038452 378.39306641]
[198.95494080 393.05755615]
[193.04461670 406.88897705]
[184.75939941 419.44265747]
[174.36563110 430.31506348]
[162.19741821 439.15670776]
[148.64593506 445.68334961]
[134.14678955 449.68518066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[28 135]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[43 53]
[44 52]
[45 51]
[68 134]
[69 133]
[73 132]
[74 131]
[75 130]
[92 117]
[93 116]
[94 115]
[95 114]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
