%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGUUAAAGGGGGGGGGGUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAxxxxxxxxxxUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGCCCCCCCCCCAACAGCUAAA\
) } def
/len { sequence length } bind def

/coor [
[52.85600662 348.17169189]
[40.97173691 338.89660645]
[31.65302658 327.04647827]
[25.44166183 313.31030273]
[22.69875908 298.48669434]
[23.58378983 283.43743896]
[28.04529572 269.03747559]
[35.82389450 256.12405396]
[46.46734619 245.44789124]
[59.35685349 237.62971497]
[73.74304199 233.12403870]
[72.80741119 218.15324402]
[71.87178802 203.18244934]
[70.93615723 188.21166992]
[70.00052643 173.24087524]
[69.06489563 158.27008057]
[86.78639221 93.30121613]
[78.79647064 80.60628510]
[70.80655670 67.91135406]
[62.81663895 55.21642685]
[54.82672501 42.52149963]
[46.83680725 29.82656860]
[39.96598816 31.61206245]
[32.89590836 32.06559753]
[25.88186646 31.17626190]
[19.17610741 28.98152733]
[13.01874733 25.56571579]
[7.62917757 21.05677032]
[3.19825244 15.62145996]
[-0.11847154 9.45923138]
[-2.20619011 2.79487777]
[-2.99481916 -4.12965202]
[-17.76087570 -6.76851606]
[-32.52693176 -9.40738010]
[-47.29298401 -12.04624462]
[-62.05904007 -14.68510914]
[-73.10903168 -7.95075178]
[-85.38675690 -10.49564552]
[-92.38545990 -20.41156387]
[-107.09342194 -23.35704613]
[-122.44739532 -17.59617424]
[-134.93984985 -28.22023201]
[-131.71961975 -44.30010223]
[-116.09940338 -49.29418945]
[-104.14794159 -38.06500626]
[-89.43997955 -35.11952591]
[-73.17885590 -41.64454651]
[-59.42017746 -29.45116425]
[-44.65412140 -26.81229973]
[-29.88806534 -24.17343521]
[-15.12201023 -21.53457069]
[-0.35595495 -18.89570808]
[4.44712210 -27.36284447]
[11.30905724 -34.26761246]
[19.74614334 -39.12328339]
[29.16364098 -41.58757401]
[30.41051483 -56.53565979]
[31.65738869 -71.48374939]
[32.90426254 -86.43183136]
[34.15113831 -101.37992096]
[23.04566193 -109.60594940]
[17.51431656 -122.15255737]
[18.91031837 -135.68406677]
[26.76051712 -146.66067505]
[38.91756439 -152.26443481]
[40.47514725 -167.18334961]
[42.03272629 -182.10224915]
[27.99316216 -187.65141296]
[15.97206593 -196.78355408]
[6.86148310 -208.82098389]
[1.33747971 -222.87046814]
[-0.19002649 -237.88943481]
[2.39231563 -252.76336670]
[8.89287853 -266.38854980]
[18.82927895 -277.75387573]
[31.46416855 -286.01596069]
[45.85995483 -290.56170654]
[60.94837189 -291.05380249]
[75.60976410 -287.45574951]
[88.75615692 -280.03448486]
[99.41200256 -269.34078979]
[106.78656006 -256.16812134]
[110.33259583 -241.49406433]
[109.78697205 -226.40748596]
[105.19016266 -212.02792358]
[96.88330078 -199.42242432]
[85.48279572 -189.52641296]
[71.83464813 -183.07423401]
[56.95163727 -180.54467773]
[55.39405823 -165.62576294]
[53.83647537 -150.70684814]
[66.37496948 -140.15736389]
[70.21594238 -124.05728149]
[63.66036987 -108.67852783]
[49.09922409 -100.13304901]
[47.85235214 -85.18495941]
[46.60547638 -70.23686981]
[45.35860062 -55.28878784]
[44.11172867 -40.34069824]
[64.42746735 -25.59356499]
[70.59654999 -1.08135045]
[59.53173828 21.83665276]
[67.52165222 34.53158188]
[75.51157379 47.22651291]
[83.50148773 59.92144012]
[91.49140167 72.61637115]
[99.48131561 85.31130219]
[112.57447052 92.63040924]
[127.57366180 92.78644562]
[136.71600342 80.24861145]
[151.49217224 75.51106262]
[166.22044373 80.39550018]
[175.23748779 93.02373505]
[175.07608032 108.53997040]
[165.79826355 120.97789764]
[150.97157288 125.55486298]
[136.29714966 120.51094818]
[127.41762543 107.78562927]
[112.41843414 107.62959290]
[110.41456604 114.85694122]
[104.40295410 136.53897095]
[117.34101105 144.12887573]
[130.27906799 151.71879578]
[146.10391235 149.08181763]
[157.93539429 159.91674805]
[156.69738770 175.91195679]
[143.33959961 184.79730225]
[128.10899353 179.75668335]
[122.68916321 164.65684509]
[109.75110626 157.06694031]
[96.81304932 149.47702026]
[84.03569031 157.33445740]
[84.97132111 172.30525208]
[85.90694427 187.27603149]
[86.84257507 202.24682617]
[87.77820587 217.21762085]
[88.71383667 232.18841553]
[103.54906464 234.86782837]
[117.31169891 241.02033997]
[129.20159912 250.28823853]
[138.52748108 262.13269043]
[144.74717712 275.86508179]
[147.49906921 290.68704224]
[146.62315369 305.73684692]
[142.17037964 320.13949585]
[134.39961243 333.05764771]
[123.76264191 343.74026489]
[110.87786865 351.56625366]
[96.49442291 356.08062744]
[81.44851685 357.02096558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[39 46]
[40 45]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[65 91]
[66 90]
[67 89]
[108 119]
[109 118]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
