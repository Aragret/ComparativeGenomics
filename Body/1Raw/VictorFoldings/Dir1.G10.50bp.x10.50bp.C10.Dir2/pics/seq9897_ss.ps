%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCCUAGGGGGGGGGGAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCAxxxxxxxxxxUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCCCCCCCCCCCACCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[70.02237701 388.44070435]
[56.17643738 382.42468262]
[44.46777344 372.89526367]
[35.76525116 360.55960083]
[30.71464729 346.33306885]
[29.69075775 331.27139282]
[32.76955414 316.49224854]
[39.72257614 303.09231567]
[50.03386307 292.06597900]
[62.93824387 284.23147583]
[77.47812653 280.17016602]
[77.47812653 265.17016602]
[77.47812653 250.17015076]
[77.47812653 235.17015076]
[77.47812653 220.17015076]
[77.47812653 205.17015076]
[77.47812653 190.17015076]
[77.47812653 175.17015076]
[77.47812653 160.17015076]
[77.47812653 145.17015076]
[77.47812653 130.17015076]
[72.27433014 113.40213776]
[76.06948090 99.30560303]
[85.07382202 91.68448639]
[94.36504364 91.45964050]
[89.75948334 77.18418121]
[85.15391541 62.90871811]
[73.90114594 62.50785065]
[63.26185989 58.92884064]
[54.11153412 52.48709488]
[47.19717026 43.73270798]
[43.07629395 33.40354156]
[42.07206345 22.36303329]
[27.49936104 18.80827141]
[12.92665863 15.25350952]
[4.53490114 27.87706757]
[-7.67012358 36.86668015]
[-22.21459961 41.13681412]
[-37.34220886 40.17182541]
[-51.22622299 34.08824158]
[-62.19007492 23.62068558]
[-68.90982819 10.03316498]
[-70.57404327 -5.03356028]
[-66.98175049 -19.76010895]
[-58.56674576 -32.36817932]
[-46.34517670 -41.33528900]
[-31.79285431 -45.57860947]
[-16.66704941 -44.58574295]
[-2.79427075 -38.47658539]
[8.15027332 -27.98884010]
[14.84497643 -14.38895988]
[16.48142052 0.68080634]
[31.05412292 4.23556805]
[45.62682724 7.79033041]
[59.33305740 -8.09426308]
[79.33758545 -14.41881561]
[81.82270050 -29.21152306]
[84.30782318 -44.00423050]
[86.79293823 -58.79693604]
[89.27806091 -73.58964539]
[91.76317596 -88.38235474]
[77.54731750 -93.27716827]
[64.33107758 -100.44521332]
[52.47500610 -109.69093323]
[42.30253983 -120.76210785]
[34.09120178 -133.35670471]
[28.06499290 -147.13111877]
[24.38831711 -161.70959473]
[23.16147804 -176.69441223]
[24.41794205 -191.67677307]
[28.12343216 -206.24795532]
[34.17686081 -220.01043701]
[42.41308594 -232.58876038]
[52.60741806 -243.63980103]
[64.48175049 -252.86206055]
[77.71213531 -260.00396729]
[91.93764496 -264.87066650]
[106.77019501 -267.32940674]
[121.80513763 -267.31307983]
[136.63230896 -264.82217407]
[150.84722900 -259.92462158]
[164.06208801 -252.75402832]
[175.91638184 -243.50602722]
[186.08671570 -232.43289185]
[194.29562378 -219.83671570]
[200.31918335 -206.06114197]
[203.99304199 -191.48196411]
[205.21699524 -176.49690247]
[203.95765686 -161.51478577]
[200.24934387 -146.94432068]
[194.19326782 -133.18301392]
[185.95462036 -120.60626221]
[175.75816345 -109.55718994]
[163.88204956 -100.33721161]
[150.65029907 -93.19786072]
[136.42384338 -88.33390045]
[121.59082794 -85.87802887]
[106.55588531 -85.89723206]
[104.07076263 -71.10452271]
[101.58564758 -56.31181717]
[99.10052490 -41.51911163]
[96.61540985 -26.72640419]
[94.13028717 -11.93369675]
[106.54434967 -4.42306042]
[115.32551575 7.18435574]
[119.20034790 21.26104927]
[117.58628845 35.81760025]
[110.67901611 48.78381348]
[99.42937469 58.30315399]
[104.03494263 72.57861328]
[108.64051056 86.85407257]
[119.62617493 97.06755829]
[134.19886780 100.62231445]
[148.77157593 104.17707825]
[163.34428406 107.73184204]
[175.84049988 98.33086395]
[191.45317078 99.21334076]
[202.81045532 109.96258545]
[204.54977417 125.50313568]
[195.84991455 138.49722290]
[180.81864929 142.80943298]
[166.55329895 136.40367126]
[159.78952026 122.30454254]
[145.21681213 118.74978638]
[130.64411926 115.19502258]
[116.07141113 111.64025879]
[110.17308807 116.27273560]
[112.29847717 131.12139893]
[98.37644958 125.53768158]
[92.47812653 130.17015076]
[92.47812653 145.17015076]
[92.47812653 160.17015076]
[92.47812653 175.17015076]
[92.47812653 190.17015076]
[92.47812653 205.17015076]
[92.47812653 220.17015076]
[92.47812653 235.17015076]
[92.47812653 250.17015076]
[92.47812653 265.17016602]
[92.47812653 280.17016602]
[107.01801300 284.23147583]
[119.92239380 292.06597900]
[130.23368835 303.09231567]
[137.18670654 316.49224854]
[140.26550293 331.27139282]
[139.24160767 346.33306885]
[134.19100952 360.55960083]
[125.48848724 372.89526367]
[113.77982330 382.42468262]
[99.93388367 388.44070435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 111]
[26 110]
[27 109]
[33 54]
[34 53]
[35 52]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
