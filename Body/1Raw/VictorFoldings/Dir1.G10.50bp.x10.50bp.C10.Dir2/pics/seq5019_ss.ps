%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCCUUUCGGGGGGGGGGACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGxxxxxxxxxxGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGACCCCCCCCCCAGCCCCCAUUC\
) } def
/len { sequence length } bind def

/coor [
[64.43585205 368.73825073]
[50.41390991 363.18524170]
[38.21395493 354.31890869]
[28.60288239 342.69659424]
[22.18485641 329.04891968]
[19.36331940 314.23373413]
[20.31563568 299.18234253]
[24.98194122 284.84091187]
[33.06890869 272.11096191]
[44.06818390 261.79269409]
[57.28834152 254.53471375]
[71.89835358 250.79327393]
[71.89835358 235.79327393]
[71.89835358 220.79327393]
[71.89835358 205.79327393]
[71.89835358 190.79327393]
[71.89835358 175.79327393]
[71.89835358 160.79327393]
[71.89835358 145.79327393]
[71.89835358 130.79327393]
[71.89835358 115.79328156]
[67.79341125 101.36589050]
[59.89692688 88.61264038]
[46.05368805 80.95265961]
[45.93202591 66.05854797]
[38.03554535 53.30529404]
[19.87328911 44.65310669]
[19.96492958 25.35313416]
[11.55152035 12.93481922]
[3.13811016 0.51650524]
[-5.27530003 -11.90180874]
[-13.68871021 -24.32012367]
[-30.70978355 -28.52273560]
[-38.12751389 -43.76036835]
[-52.27482986 -48.74568939]
[-66.42214966 -53.73101425]
[-80.56946564 -58.71633530]
[-94.71678162 -63.70165634]
[-108.86409760 -68.68698120]
[-118.99203491 -57.35148621]
[-132.68910217 -50.75915527]
[-147.86659241 -49.91526413]
[-162.21005249 -54.94850540]
[-173.53221130 -65.09133911]
[-180.10652161 -78.79706573]
[-180.93045044 -93.97565460]
[-175.87834167 -108.31248474]
[-165.72061157 -119.62129211]
[-152.00625610 -126.17756653]
[-136.82659912 -126.98152161]
[-122.49642181 -121.91056061]
[-111.20098877 -111.73797607]
[-104.66276550 -98.01499939]
[-103.87877655 -82.83429718]
[-89.73146057 -77.84897614]
[-75.58414459 -72.86364746]
[-61.43682480 -67.87832642]
[-47.28950882 -62.89300537]
[-33.14219284 -57.90768433]
[-30.18404961 -60.60052109]
[-26.74190712 -62.63856506]
[-27.35773277 -77.62591553]
[-40.42910385 -89.20721436]
[-41.09818649 -106.32106781]
[-29.43865013 -118.40238953]
[-30.36206436 -133.37393188]
[-38.93424225 -146.67161560]
[-31.99511719 -159.85107422]
[-46.27706146 -165.13746643]
[-57.16955566 -175.78047180]
[-62.78540802 -189.93611145]
[-62.15164566 -205.15182495]
[-55.37806702 -218.79142761]
[-43.63823700 -228.49174500]
[-28.96614838 -232.57215881]
[-13.90383434 -230.32569885]
[-1.06092894 -222.14158630]
[7.33745623 -209.43777466]
[9.83625031 -194.41525269]
[6.00252151 -179.67678833]
[-3.49951291 -167.77589417]
[-17.02356720 -160.77447510]
[-8.51744080 -148.54766846]
[-15.39051437 -134.29734802]
[-14.46710110 -119.32579803]
[-3.68817687 -112.20069885]
[1.07196212 -99.97900391]
[-2.14232206 -87.06198120]
[-12.37037849 -78.24174500]
[-11.75455284 -63.25439072]
[0.90365583 -50.90142822]
[-1.27039587 -32.73353195]
[7.14301443 -20.31521988]
[15.55642414 -7.89690495]
[23.96983528 4.52140951]
[32.38324356 16.93972397]
[42.62445831 17.97642708]
[50.75351715 24.64429665]
[53.90289307 34.90614700]
[50.78879929 45.40880966]
[58.68528366 58.16206741]
[71.96371460 64.90985107]
[72.65018463 80.71615601]
[80.54666901 93.46941376]
[88.70133972 83.95858765]
[100.36772156 81.28171539]
[110.82745361 85.84318542]
[116.24277496 95.24833679]
[131.01489258 97.85306549]
[145.78700256 100.45778656]
[160.55912781 103.06250763]
[175.33123779 105.66722870]
[190.10336304 108.27194977]
[204.92584229 110.57283020]
[219.79243469 112.56888580]
[234.65904236 114.56494141]
[251.16189575 110.68009949]
[259.46337891 125.46258545]
[247.55665588 137.53182983]
[232.66297913 129.43153381]
[217.79638672 127.43548584]
[202.92977905 125.43943024]
[198.61396790 127.61265564]
[192.88020325 127.05422211]
[187.49864197 123.04406738]
[172.72651672 120.43934631]
[157.95440674 117.83462524]
[143.18228149 115.22990417]
[128.41017151 112.62517548]
[113.63805389 110.02045441]
[102.28414917 118.58203125]
[86.89835358 115.79328156]
[86.89835358 130.79327393]
[86.89835358 145.79327393]
[86.89835358 160.79327393]
[86.89835358 175.79327393]
[86.89835358 190.79327393]
[86.89835358 205.79327393]
[86.89835358 220.79327393]
[86.89835358 235.79327393]
[86.89835358 250.79327393]
[101.50836945 254.53471375]
[114.72852325 261.79269409]
[125.72779846 272.11096191]
[133.81477356 284.84091187]
[138.48107910 299.18234253]
[139.43338013 314.23373413]
[136.61184692 329.04891968]
[130.19383240 342.69659424]
[120.58275604 354.31890869]
[108.38279724 363.18524170]
[94.36085510 368.73825073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 104]
[23 103]
[25 101]
[26 100]
[28 96]
[29 95]
[30 94]
[31 93]
[32 92]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[61 90]
[62 89]
[65 85]
[66 84]
[68 82]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
