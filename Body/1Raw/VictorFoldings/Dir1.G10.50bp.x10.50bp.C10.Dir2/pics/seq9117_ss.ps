%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAAUUCAGGGGGGGGGGAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGxxxxxxxxxxCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUCCCCCCCCCCAAAUUAUUCA\
) } def
/len { sequence length } bind def

/coor [
[77.06716919 461.72201538]
[63.22123337 455.70599365]
[51.51257324 446.17657471]
[42.81004715 433.84091187]
[37.75944519 419.61437988]
[36.73555374 404.55270386]
[39.81435394 389.77352905]
[46.76737595 376.37359619]
[57.07865906 365.34729004]
[69.98303986 357.51275635]
[84.52292633 353.45144653]
[84.52292633 338.45144653]
[84.52292633 323.45144653]
[84.52292633 308.45144653]
[84.52292633 293.45144653]
[84.52292633 278.45144653]
[84.52292633 263.45144653]
[84.52292633 248.45146179]
[84.52292633 233.45146179]
[84.52292633 218.45146179]
[84.52292633 203.45146179]
[82.56925964 201.35609436]
[81.35588837 198.33587646]
[81.24877930 194.67932129]
[82.49881744 190.80525208]
[85.19881439 187.21755981]
[86.44569397 172.26948547]
[73.21347046 168.47685242]
[60.91998672 162.28442383]
[49.99607468 153.90922546]
[40.82456970 143.64476013]
[33.72687912 131.85075378]
[28.95175362 118.94052124]
[26.66653442 105.36651611]
[26.95130920 91.60444641]
[29.79609489 78.13659668]
[35.10120010 65.43495178]
[42.68070221 53.94465637]
[52.26897430 44.06838226]
[63.52999496 36.15224838]
[76.06912231 30.47367668]
[89.44690704 27.23167610]
[103.19453430 26.53986359]
[97.54185486 11.76292801]
[107.04426575 0.29324678]
[109.22109985 -14.54795837]
[111.39793396 -29.38916397]
[113.57477570 -44.23036957]
[99.46894836 -49.48436737]
[86.76878357 -57.55336380]
[76.02812195 -68.08260345]
[67.71472168 -80.61010742]
[62.18995667 -94.58694458]
[59.69305038 -109.40129089]
[60.33074951 -124.40518951]
[64.07274628 -138.94291687]
[70.75311279 -152.37962341]
[80.07769012 -164.12905884]
[91.63696289 -173.67918396]
[104.92414093 -180.61439514]
[119.35729218 -184.63372803]
[134.30488586 -185.56382751]
[136.48171997 -200.40502930]
[138.65856934 -215.24624634]
[140.83540344 -230.08744812]
[143.01223755 -244.92864990]
[129.00550842 -250.48817444]
[116.65879059 -259.12850952]
[106.63793182 -270.38369751]
[99.48333740 -283.64672852]
[95.58084869 -298.20239258]
[95.14093018 -313.26571655]
[98.18729401 -328.02429199]
[104.55565643 -341.68228149]
[113.90258026 -353.50311279]
[125.72400665 -362.84927368]
[139.38240051 -369.21676636]
[154.14120483 -372.26214600]
[169.20448303 -371.82125854]
[183.75988770 -367.91784668]
[197.02247620 -360.76239014]
[208.27700806 -350.74078369]
[216.91654968 -338.39352417]
[222.47515869 -324.38641357]
[224.65307617 -309.47491455]
[223.33287048 -294.46313477]
[218.58570862 -280.16064453]
[210.66761780 -267.33874512]
[200.00559998 -256.68896484]
[187.17465210 -248.78556824]
[172.86672974 -244.05482483]
[157.85343933 -242.75181580]
[155.67660522 -227.91061401]
[153.49977112 -213.06939697]
[151.32293701 -198.22819519]
[149.14608765 -183.38699341]
[163.19697571 -178.20353699]
[175.86795044 -170.20869446]
[186.60385132 -159.74989319]
[194.93371582 -147.28253174]
[200.49140930 -133.35023499]
[203.03175354 -118.56107330]
[202.44129944 -103.56109619]
[198.74342346 -89.00605011]
[192.09742737 -75.53274536]
[182.79161072 -63.73118210]
[171.23083496 -54.11872482]
[157.91886902 -47.11741257]
[143.43644714 -43.03542709]
[128.41598511 -42.05353165]
[126.23914337 -27.21232796]
[124.06230164 -12.37112141]
[121.88546753 2.47008371]
[127.69384766 16.18547630]
[118.03573608 28.71669960]
[133.23196411 34.40858841]
[146.80966187 43.29504013]
[158.10754395 54.94325256]
[166.57534790 68.78590393]
[171.80067444 84.14881134]
[173.52902222 100.28373718]
[171.67620850 116.40483856]
[166.33247375 131.72695923]
[157.75808716 145.50384521]
[146.37065125 157.06452942]
[132.72477722 165.84593201]
[117.48506927 171.42036438]
[101.39377594 173.51635742]
[100.14690399 188.46444702]
[99.52292633 203.45146179]
[99.52292633 218.45146179]
[99.52292633 233.45146179]
[99.52292633 248.45146179]
[99.52292633 263.45144653]
[99.52292633 278.45144653]
[99.52292633 293.45144653]
[99.52292633 308.45144653]
[99.52292633 323.45144653]
[99.52292633 338.45144653]
[99.52292633 353.45144653]
[114.06281281 357.51275635]
[126.96719360 365.34729004]
[137.27847290 376.37359619]
[144.23150635 389.77352905]
[147.31030273 404.55270386]
[146.28640747 419.61437988]
[141.23580933 433.84091187]
[132.53327942 446.17657471]
[120.82462311 455.70599365]
[106.97868347 461.72201538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 129]
[27 128]
[43 115]
[45 113]
[46 112]
[47 111]
[48 110]
[62 96]
[63 95]
[64 94]
[65 93]
[66 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
