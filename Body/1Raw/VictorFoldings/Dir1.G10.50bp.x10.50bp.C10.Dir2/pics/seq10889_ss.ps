%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCAGCCAGGGGGGGGGGUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUxxxxxxxxxxUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCCCCCCCCCCCUCACCCA\
) } def
/len { sequence length } bind def

/coor [
[85.27723694 372.84719849]
[71.25528717 367.29418945]
[59.05533218 358.42785645]
[49.44426346 346.80557251]
[43.02623749 333.15786743]
[40.20470047 318.34268188]
[41.15701675 303.29129028]
[45.82332230 288.94985962]
[53.91028595 276.21990967]
[64.90956116 265.90164185]
[78.12972260 258.64367676]
[92.73973083 254.90223694]
[92.73973083 239.90223694]
[92.73973083 224.90223694]
[92.73973083 209.90223694]
[92.73973083 194.90223694]
[92.73973083 179.90223694]
[92.73973083 164.90223694]
[92.73973083 149.90223694]
[92.73973083 134.90223694]
[92.73973083 119.90222931]
[92.73973083 104.90222931]
[90.71220398 102.53531647]
[89.52458191 99.36089325]
[89.48390198 95.69757080]
[90.77175140 91.97507477]
[93.40612793 88.68426514]
[94.63673401 73.73483276]
[95.86734772 58.78539658]
[81.01972961 56.61796188]
[66.33750916 53.52251053]
[51.87862396 49.51126099]
[37.70014191 44.60004425]
[23.85801506 38.80823898]
[10.40687370 32.15870667]
[-2.60019565 24.67768860]
[-15.11185932 16.39470863]
[-27.07873917 7.34245777]
[-38.45360947 -2.44333959]
[-49.19157410 -12.92406368]
[-59.25025940 -24.05834961]
[-68.58996582 -35.80225754]
[-77.17382812 -48.10943985]
[-84.96798706 -60.93132019]
[-91.94165802 -74.21730042]
[-98.06733704 -87.91494751]
[-103.32084656 -101.97019958]
[-107.68144226 -116.32759094]
[-111.13192749 -130.93045044]
[-113.65868378 -145.72116089]
[-115.25172424 -160.64134216]
[-115.90477753 -175.63211060]
[-115.61526489 -190.63429260]
[-114.38432312 -205.58869934]
[-112.21681213 -220.43630981]
[-109.12128448 -235.11851501]
[-105.10995483 -249.57737732]
[-100.19866180 -263.75582886]
[-94.40679169 -277.59793091]
[-87.75718689 -291.04904175]
[-80.27610016 -304.05606079]
[-71.99305725 -316.56768799]
[-62.94074249 -328.53451538]
[-53.15488434 -339.90933228]
[-42.67410660 -350.64724731]
[-31.53976631 -360.70587158]
[-19.79580879 -370.04553223]
[-7.48858356 -378.62933350]
[5.33333921 -386.42340088]
[18.61935806 -393.39700317]
[32.31703568 -399.52261353]
[46.37231827 -404.77606201]
[60.72972870 -409.13656616]
[75.33261108 -412.58697510]
[90.12332916 -415.11364746]
[105.04351807 -416.70663452]
[120.03428650 -417.35961914]
[135.03646851 -417.07000732]
[149.99087524 -415.83898926]
[164.83847046 -413.67138672]
[179.52066040 -410.57580566]
[193.97949219 -406.56439209]
[208.15792847 -401.65301514]
[222.00000000 -395.86108398]
[235.45106506 -389.21139526]
[248.45805359 -381.73025513]
[260.96963501 -373.44714355]
[272.93643188 -364.39477539]
[284.31118774 -354.60885620]
[295.04904175 -344.12802124]
[305.10760498 -332.99362183]
[314.44720459 -321.24963379]
[323.03094482 -308.94235229]
[330.82495117 -296.12039185]
[337.79849243 -282.83432007]
[343.92404175 -269.13662720]
[349.17739868 -255.08131409]
[353.53784180 -240.72387695]
[356.98815918 -226.12097168]
[359.51477051 -211.33024597]
[361.10766602 -196.41004944]
[361.76055908 -181.41928101]
[361.47088623 -166.41709900]
[360.23977661 -151.46270752]
[358.07211304 -136.61511230]
[354.97644043 -121.93294525]
[350.96496582 -107.47412109]
[346.05352783 -93.29571533]
[340.26150513 -79.45368195]
[333.61175537 -66.00263977]
[326.13052368 -52.99568939]
[317.84735107 -40.48415756]
[308.79492188 -28.51741791]
[299.00894165 -17.14270210]
[288.52804565 -6.40490055]
[277.39361572 3.65360975]
[265.64956665 12.99313164]
[253.34223938 21.57680702]
[240.52023315 29.37075806]
[227.23414612 36.34422684]
[213.53640747 42.46969223]
[199.48106384 47.72297668]
[185.12361145 52.08335114]
[170.52069092 55.53360748]
[155.72994995 58.06012726]
[140.80973816 59.65293884]
[125.81896973 60.30575943]
[110.81678009 60.01601028]
[109.58617401 74.96544647]
[108.35556030 89.91487885]
[107.73973083 104.90222931]
[107.73973083 119.90222931]
[107.73973083 134.90223694]
[107.73973083 149.90223694]
[107.73973083 164.90223694]
[107.73973083 179.90223694]
[107.73973083 194.90223694]
[107.73973083 209.90223694]
[107.73973083 224.90223694]
[107.73973083 239.90223694]
[107.73973083 254.90223694]
[122.34974670 258.64367676]
[135.56990051 265.90164185]
[146.56918335 276.21990967]
[154.65614319 288.94985962]
[159.32244873 303.29129028]
[160.27476501 318.34268188]
[157.45323181 333.15786743]
[151.03520203 346.80557251]
[141.42413330 358.42785645]
[129.22418213 367.29418945]
[115.20223236 372.84719849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 130]
[28 129]
[29 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
