%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUUCUAGCAGGGGGGGGGGAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUxxxxxxxxxxACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUCCCCCCCCCCAGGACUUCUAACA\
) } def
/len { sequence length } bind def

/coor [
[84.08740234 432.10656738]
[69.81562805 427.29714966]
[56.91164780 419.53173828]
[45.97899246 409.17361450]
[37.52900696 396.70718384]
[31.95691109 382.71554565]
[29.52332115 367.85311890]
[30.34206200 352.81503296]
[34.37483978 338.30468750]
[41.43303299 325.00070190]
[51.18651581 313.52532959]
[63.17910385 304.41534424]
[76.84988403 298.09680176]
[91.55944061 294.86526489]
[91.55944061 279.86526489]
[91.55944061 264.86526489]
[91.55944061 249.86524963]
[91.55944061 234.86524963]
[91.55944061 219.86524963]
[91.55944061 204.86524963]
[91.55944061 189.86524963]
[91.55944061 174.86524963]
[91.55944061 159.86524963]
[91.55944061 144.86524963]
[91.55944061 129.86524963]
[82.56743622 101.55460358]
[68.11141968 97.55165100]
[61.82984161 111.20954132]
[53.43861389 123.68285370]
[43.15509033 134.64849854]
[31.24564171 143.82243347]
[18.01874542 150.96704102]
[3.81701541 155.89724731]
[-10.99169254 158.48536682]
[-26.02379608 158.66435242]
[-40.88992691 156.42955017]
[-55.20501709 151.83888245]
[-68.59827423 145.01121521]
[-80.72277832 136.12344360]
[-91.26447296 125.40575409]
[-99.95030212 113.13577271]
[-106.55529022 99.63131714]
[-110.90834808 85.24218750]
[-112.89671326 70.34109497]
[-112.46889496 55.31401062]
[-109.63596344 40.55018234]
[-104.47130585 26.43202019]
[-97.10870361 13.32522011]
[-87.73885345 1.56928217]
[-76.60446167 -8.53128910]
[-63.99393845 -16.71486282]
[-50.23392487 -22.76946640]
[-35.68083954 -26.53826904]
[-20.71164322 -27.92365265]
[-5.71407080 -26.88972855]
[8.92340279 -23.46328163]
[22.82163239 -17.73306274]
[35.62061691 -9.84749985]
[46.98883820 -0.01084657]
[56.63182831 11.52210331]
[64.29981232 24.45261955]
[69.79416656 38.44576645]
[72.97257233 53.13909531]
[73.75271606 68.15200806]
[72.11437225 83.09563446]
[86.57038879 87.09858704]
[100.07560730 80.57102203]
[105.91968536 66.75629425]
[111.76376343 52.94156265]
[99.00533295 44.99366760]
[87.64739227 35.14767075]
[77.96963501 23.64604187]
[70.21038055 10.77201939]
[64.56071472 -3.15736508]
[61.15975952 -17.79908562]
[60.09126663 -32.79257965]
[61.38155746 -47.76861572]
[64.99884796 -62.35839462]
[70.85406494 -76.20263672]
[78.80300903 -88.96040344]
[88.64994049 -100.31753540]
[100.15237427 -109.99434662]
[113.02703094 -117.75253296]
[126.95688629 -123.40105438]
[141.59889221 -126.80080414]
[156.59246826 -127.86804962]
[171.56838989 -126.57653046]
[186.15788269 -122.95803833]
[200.00163269 -117.10167694]
[212.75874329 -109.15167999]
[224.11506653 -99.30381012]
[233.79092407 -87.80058289]
[241.54804993 -74.92527771]
[247.19541931 -60.99496078]
[250.59396362 -46.35268021]
[251.65997314 -31.35901070]
[250.36721802 -16.38318634]
[246.74752808 -1.79400373]
[240.89001465 12.04926872]
[232.93896484 24.80572701]
[223.09016418 36.16123199]
[211.58613586 45.83614349]
[198.71018982 53.59220886]
[184.77940369 59.23843002]
[170.13684082 62.63576126]
[155.14309692 63.70053864]
[140.16737366 62.40654373]
[125.57849121 58.78564072]
[119.73441315 72.60037231]
[113.89033508 86.41510010]
[122.23947906 98.87670898]
[137.23872375 98.72663879]
[152.23797607 98.57656860]
[167.23722839 98.42649078]
[182.23648071 98.27642059]
[196.07290649 89.47383881]
[210.48730469 97.29415131]
[210.65136719 113.69247437]
[196.39633179 121.79962921]
[182.38655090 113.27566528]
[167.38729858 113.42574310]
[152.38804626 113.57581329]
[137.38880920 113.72589111]
[122.38955688 113.87596130]
[137.37400818 114.55883026]
[148.80506897 124.27122498]
[151.89904785 138.94866943]
[145.36114502 152.44888306]
[131.92738342 159.12225342]
[117.21955872 156.17608643]
[107.39266205 144.84329224]
[106.55944061 129.86524963]
[106.55944061 144.86524963]
[106.55944061 159.86524963]
[106.55944061 174.86524963]
[106.55944061 189.86524963]
[106.55944061 204.86524963]
[106.55944061 219.86524963]
[106.55944061 234.86524963]
[106.55944061 249.86524963]
[106.55944061 264.86526489]
[106.55944061 279.86526489]
[106.55944061 294.86526489]
[121.26899719 298.09680176]
[134.93977356 304.41534424]
[146.93235779 313.52532959]
[156.68585205 325.00070190]
[163.74403381 338.30468750]
[167.77680969 352.81503296]
[168.59555054 367.85311890]
[166.16197205 382.71554565]
[160.58987427 396.70718384]
[152.13989258 409.17361450]
[141.20722961 419.53173828]
[128.30325317 427.29714966]
[114.03147888 432.10656738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 66]
[27 65]
[67 110]
[68 109]
[69 108]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
