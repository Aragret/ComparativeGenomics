%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUCCUCGGGGGGGGGGUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUxxxxxxxxxxCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCCCCCCCCCCCAUUAUCCUC\
) } def
/len { sequence length } bind def

/coor [
[101.28872681 391.15225220]
[87.44278717 385.13623047]
[75.73412323 375.60681152]
[67.03160095 363.27114868]
[61.98099899 349.04461670]
[60.95710754 333.98294067]
[64.03591156 319.20376587]
[70.98892975 305.80383301]
[81.30021667 294.77749634]
[94.20459747 286.94299316]
[108.74448395 282.88168335]
[108.74448395 267.88168335]
[108.74448395 252.88168335]
[108.74448395 237.88168335]
[108.74448395 222.88168335]
[108.74448395 207.88168335]
[108.74448395 192.88168335]
[108.74448395 177.88168335]
[108.74448395 162.88168335]
[108.74448395 147.88168335]
[108.74448395 132.88168335]
[92.98626709 132.26214600]
[79.67444611 124.72474670]
[71.55563354 112.32060242]
[70.07457733 98.04496002]
[75.13176727 85.11936951]
[64.69195557 74.34856415]
[54.25214386 63.57775497]
[39.09159470 59.05355072]
[35.78937149 44.52962112]
[25.34955978 33.75881195]
[12.91012001 25.37666702]
[-0.99243599 19.74471092]
[-14.89499187 14.11275387]
[-28.79754829 8.48079777]
[-42.70010376 2.84884095]
[-58.64593506 9.96697330]
[-74.50655365 3.50748706]
[-80.69351959 -12.09954071]
[-94.71023560 -17.44105339]
[-108.72695160 -22.78256607]
[-120.58874512 -13.02585602]
[-135.74234009 -10.52302837]
[-150.11149597 -15.94732857]
[-159.83097839 -27.83964920]
[-162.28628540 -43.00101471]
[-156.81697083 -57.35309219]
[-144.89424133 -67.03524780]
[-129.72526550 -69.44303131]
[-115.39039612 -63.92875671]
[-105.74565887 -51.97573853]
[-103.38543701 -36.79927826]
[-89.36872101 -31.45776558]
[-75.35201263 -26.11625290]
[-64.40995789 -32.99144363]
[-51.31164169 -32.27835083]
[-40.87482834 -24.01391602]
[-37.06814575 -11.05371475]
[-23.16559219 -5.42175817]
[-9.26303577 0.21019830]
[4.63952065 5.84215498]
[18.54207611 11.47411156]
[9.59590149 -0.56606919]
[4.32935762 -14.61112213]
[3.15344906 -29.56495857]
[6.15994549 -44.26057053]
[13.11421776 -57.55109787]
[23.47354698 -68.39933777]
[36.42948532 -75.95867920]
[50.97093582 -79.63919067]
[65.96307373 -79.15364075]
[80.23590088 -74.53992462]
[92.67555237 -66.15809631]
[102.31123352 -54.66228104]
[108.39095306 -40.94962311]
[110.44025421 -26.09027100]
[108.29920959 -11.24385929]
[102.13490295 2.43098378]
[92.42840576 13.86706161]
[79.93721771 22.17189407]
[65.63616180 26.69736481]
[50.64131165 27.09030151]
[36.12036896 23.31899834]
[46.56018066 34.08980560]
[60.97400284 37.84360886]
[65.02294922 53.13794327]
[75.46276093 63.90874863]
[85.90257263 74.67955780]
[94.64337921 70.78605652]
[104.40564728 69.89913177]
[114.15952301 72.26296997]
[122.82764435 77.77085114]
[129.40391541 85.96125793]
[133.06936646 96.05390930]
[133.29183960 107.02314758]
[148.27156067 106.24330139]
[163.23181152 105.15199280]
[177.95643616 94.14450073]
[193.61889648 101.99864197]
[208.52079773 100.28595734]
[223.42269897 98.57326508]
[238.28575134 96.55093384]
[253.10350037 94.21982574]
[267.92126465 91.88872528]
[282.73901367 89.55761719]
[297.55676270 87.22651672]
[306.65582275 74.30432129]
[322.24124146 71.68330383]
[335.06652832 80.91845703]
[337.52261353 96.53073120]
[328.15237427 109.25764465]
[312.51501465 111.54853821]
[299.88787842 102.04427338]
[285.07012939 104.37537384]
[270.25238037 106.70648193]
[255.43460083 109.03758240]
[240.61685181 111.36869049]
[237.09957886 114.68597412]
[231.44108582 115.78722382]
[225.13539124 113.47516632]
[210.23348999 115.18785858]
[195.33158875 116.90054321]
[187.53283691 126.20037842]
[175.08605957 127.71588135]
[164.63410950 120.08630371]
[160.91677856 123.17773438]
[155.20060730 123.92388916]
[149.05140686 121.22301483]
[134.07168579 122.00286102]
[123.74448395 132.88168335]
[123.74448395 147.88168335]
[123.74448395 162.88168335]
[123.74448395 177.88168335]
[123.74448395 192.88168335]
[123.74448395 207.88168335]
[123.74448395 222.88168335]
[123.74448395 237.88168335]
[123.74448395 252.88168335]
[123.74448395 267.88168335]
[123.74448395 282.88168335]
[138.28436279 286.94299316]
[151.18875122 294.77749634]
[161.50003052 305.80383301]
[168.45304871 319.20376587]
[171.53186035 333.98294067]
[170.50796509 349.04461670]
[165.45736694 363.27114868]
[156.75483704 375.60681152]
[145.04617310 385.13623047]
[131.20024109 391.15225220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 88]
[27 87]
[28 86]
[30 84]
[31 83]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[39 54]
[40 53]
[41 52]
[95 129]
[96 128]
[97 125]
[99 122]
[100 121]
[101 120]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
