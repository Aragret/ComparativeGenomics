%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCACCCUCCUCAAGGGGGGGGGGGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGxxxxxxxxxxCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCCCCCCCCCCCAUCACCCUCCUUAA\
) } def
/len { sequence length } bind def

/coor [
[90.86114502 185.45639038]
[76.16115570 182.57131958]
[62.18545532 177.17755127]
[49.35864258 169.43894958]
[38.07043076 159.59062195]
[28.66378021 147.93180847]
[21.42448807 134.81671143]
[16.57250023 120.64379883]
[14.25522995 105.84368896]
[14.54308224 90.86602783]
[17.42731094 76.16587830]
[22.82028770 62.18986511]
[30.55816078 49.36260986]
[40.40583420 38.07383728]
[52.06411743 28.66652107]
[65.17880249 21.42647743]
[79.35143280 16.57367897]
[94.15141296 14.25556374]
[94.44049835 -0.74165016]
[94.72958374 -15.73886395]
[95.01866913 -30.73607826]
[95.30775452 -45.73329163]
[95.59683990 -60.73050690]
[95.88592529 -75.72772217]
[96.17501068 -90.72493744]
[96.46409607 -105.72214508]
[96.75318146 -120.71936035]
[97.04226685 -135.71658325]
[82.08243561 -136.86940002]
[67.21385956 -138.88218689]
[52.48594666 -141.74822998]
[37.94761276 -145.45802307]
[23.64715767 -149.99925232]
[9.63208294 -155.35679626]
[-4.05105352 -161.51289368]
[-17.35679626 -168.44708252]
[-30.24094772 -176.13632202]
[-42.66070557 -184.55506897]
[-54.57481003 -193.67536926]
[-65.94368744 -203.46690369]
[-76.72956848 -213.89717102]
[-86.89662933 -224.93151855]
[-96.41108704 -236.53327942]
[-105.24134064 -248.66390991]
[-113.35805511 -261.28314209]
[-120.73426819 -274.34899902]
[-127.34547424 -287.81814575]
[-133.16972351 -301.64578247]
[-138.18765259 -315.78601074]
[-142.38258362 -330.19186401]
[-145.74061584 -344.81546021]
[-148.25056458 -359.60821533]
[-149.90411377 -374.52102661]
[-150.69573975 -389.50430298]
[-150.62284851 -404.50833130]
[-149.68565369 -419.48321533]
[-147.88728333 -434.37924194]
[-145.23371887 -449.14691162]
[-141.73374939 -463.73718262]
[-137.39901733 -478.10156250]
[-132.24392700 -492.19238281]
[-126.28560638 -505.96279907]
[-119.54383087 -519.36706543]
[-112.04100037 -532.36065674]
[-103.80204773 -544.90039062]
[-94.85433960 -556.94464111]
[-85.22760010 -568.45343018]
[-74.95380402 -579.38842773]
[-64.06707764 -589.71337891]
[-52.60359573 -599.39398193]
[-40.60142899 -608.39813232]
[-28.10045624 -616.69580078]
[-15.14219856 -624.25946045]
[-1.76970422 -631.06402588]
[11.97260475 -637.08685303]
[26.03907585 -642.30798340]
[40.38298416 -646.71002197]
[54.95668030 -650.27838135]
[69.71174622 -653.00122070]
[84.59917450 -654.86938477]
[99.56951141 -655.87683105]
[114.57301331 -656.02008057]
[129.55986023 -655.29870605]
[144.48023987 -653.71514893]
[159.28460693 -651.27459717]
[173.92379761 -647.98516846]
[188.34915161 -643.85784912]
[202.51275635 -638.90631104]
[216.36756897 -633.14697266]
[229.86755371 -626.59899902]
[242.96789551 -619.28411865]
[255.62503052 -611.22668457]
[267.79693604 -602.45343018]
[279.44320679 -592.99346924]
[290.52511597 -582.87829590]
[301.00582886 -572.14141846]
[310.85058594 -560.81860352]
[320.02667236 -548.94738770]
[328.50357056 -536.56726074]
[336.25314331 -523.71936035]
[343.24966431 -510.44625854]
[349.46984863 -496.79214478]
[354.89309692 -482.80233765]
[359.50131226 -468.52334595]
[363.27926636 -454.00256348]
[366.21435547 -439.28826904]
[368.29684448 -424.42929077]
[369.51980591 -409.47503662]
[369.87921143 -394.47512817]
[369.37384033 -379.47946167]
[368.00537109 -364.53781128]
[365.77835083 -349.69979858]
[362.70019531 -335.01477051]
[358.78109741 -320.53146362]
[354.03411865 -306.29797363]
[348.47497559 -292.36163330]
[342.12216187 -278.76870728]
[334.99679565 -265.56436157]
[327.12255859 -252.79243469]
[318.52554321 -240.49539185]
[309.23437500 -228.71406555]
[299.27987671 -217.48759460]
[288.69512939 -206.85327148]
[277.51528931 -196.84640503]
[265.77752686 -187.50025940]
[253.52079773 -178.84588623]
[240.78582764 -170.91201782]
[227.61492920 -163.72502136]
[214.05183411 -157.30874634]
[200.14163208 -151.68455505]
[185.93049622 -146.87107849]
[171.46565247 -142.88433838]
[156.79515076 -139.73757935]
[141.96772766 -137.44123840]
[127.03263855 -136.00294495]
[112.03948212 -135.42749023]
[111.75039673 -120.43027496]
[111.46131134 -105.43305969]
[111.17222595 -90.43585205]
[110.88314056 -75.43863678]
[110.59405518 -60.44142151]
[110.30496979 -45.44420624]
[110.01588440 -30.44699287]
[109.72679901 -15.44977856]
[109.43771362 -0.45256442]
[109.14862823 14.54465008]
[123.84828186 17.43140030]
[137.82336426 22.82677269]
[150.64929199 30.56684494]
[161.93638611 40.41645432]
[171.34170532 52.07634735]
[178.57949829 65.19227600]
[183.42985535 79.36573792]
[185.74543762 94.16611481]
[185.45587158 109.14374542]
[182.56996155 123.84355927]
[177.17538452 137.81895447]
[169.43605042 150.64532471]
[159.58708191 161.93298340]
[147.92773438 171.33895874]
[134.81221008 178.57749939]
[120.63903046 183.42868042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 146]
[19 145]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[28 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
