%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCUCAAGGGGGGGGGGACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAxxxxxxxxxxUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACCCCCCCCCCCUCCACCUCAA\
) } def
/len { sequence length } bind def

/coor [
[83.36727142 363.85733032]
[70.14707184 356.58483887]
[59.26026917 346.13784790]
[51.44913864 333.22860718]
[47.24625778 318.73727417]
[46.93818665 303.65194702]
[50.54592896 289.00112915]
[57.82350159 275.78372192]
[68.27471161 264.90097046]
[81.18697357 257.09481812]
[95.67990875 252.89753723]
[95.36785126 237.90078735]
[95.05579376 222.90402222]
[94.74373627 207.90727234]
[94.43167877 192.91052246]
[94.11962891 177.91377258]
[93.80757141 162.91700745]
[93.49551392 147.92025757]
[93.18345642 132.92350769]
[92.87139893 117.92675018]
[86.87798309 113.41798401]
[82.00591278 127.60470581]
[67.00799561 127.35500336]
[62.61088562 113.01396179]
[74.89115143 104.40045929]
[68.89773560 99.89169312]
[54.40213776 103.74884796]
[39.90654373 107.60601044]
[32.19851303 121.40317535]
[16.96949387 125.62840271]
[3.25459146 117.77493286]
[-0.80938596 102.50209045]
[7.18864727 88.87098694]
[22.50360107 84.96871185]
[36.04938126 93.11041260]
[50.54497910 89.25325775]
[65.04057312 85.39609528]
[65.66401672 77.92205048]
[50.71594620 76.67492676]
[51.96331787 61.72688293]
[66.91088867 62.97396469]
[67.53432465 55.49991989]
[53.87808228 49.29451370]
[40.22184372 43.08910751]
[26.56560135 36.88370132]
[11.10011864 41.14965439]
[-1.79247952 31.60185623]
[-2.22209406 15.56455612]
[10.14083862 5.34019995]
[25.81253433 8.77203846]
[32.77100754 23.22745895]
[46.42724991 29.43286705]
[60.08349228 35.63827515]
[73.73973083 41.84368134]
[91.60283661 56.01924133]
[101.20481110 74.28812408]
[101.86780548 93.56044769]
[111.85053253 82.36468506]
[121.83325958 71.16891479]
[131.81597900 59.97315216]
[135.22520447 44.52362823]
[149.47039795 40.17348099]
[159.45312500 28.97771645]
[149.33355713 17.88724709]
[140.40798950 5.81504250]
[132.77101135 -7.11092615]
[126.50360107 -20.75363731]
[121.67218018 -34.96846771]
[118.32797241 -49.60473633]
[116.50643158 -64.50728607]
[116.22686005 -79.51814270]
[117.49222565 -94.47818756]
[120.28911591 -109.22882843]
[124.58787537 -123.61370850]
[130.34294128 -137.48033142]
[137.49330139 -150.68170166]
[145.96316528 -163.07789612]
[155.66275024 -174.53749084]
[166.48921204 -184.93899536]
[178.32781982 -194.17218018]
[191.05303955 -202.13914490]
[204.53001404 -208.75544739]
[218.61584473 -213.95095825]
[233.16123962 -217.67057800]
[248.01199341 -219.87487793]
[263.01068115 -220.54051208]
[277.99835205 -219.66041565]
[292.81604004 -217.24392700]
[307.30676270 -213.31663513]
[321.31683350 -207.92019653]
[334.69778442 -201.11180115]
[347.30776978 -192.96363831]
[359.01309204 -183.56207275]
[369.68966675 -173.00677490]
[379.22433472 -161.40960693]
[387.51605225 -148.89355469]
[394.47683716 -135.59124756]
[400.03298950 -121.64373016]
[404.12554932 -107.19883728]
[406.71118164 -92.40969849]
[407.76245117 -77.43309021]
[407.26818848 -62.42776489]
[405.23367310 -47.55279160]
[401.68048096 -32.96585464]
[396.64624023 -18.82158279]
[390.18432617 -5.26991224]
[382.36325073 7.54550076]
[373.26593018 19.48880577]
[362.98876953 30.43339729]
[351.64071655 40.26325607]
[339.34210205 48.87418365]
[326.22326660 56.17489243]
[312.42330933 62.08799744]
[298.08847046 66.55081177]
[283.37075806 69.51602936]
[268.42614746 70.95221710]
[253.41307068 70.84414673]
[238.49067688 69.19297028]
[223.81716919 66.01618958]
[209.54806519 61.34748077]
[195.83464050 55.23632812]
[182.82228088 47.74752045]
[170.64889526 38.96044159]
[160.66616821 50.15620804]
[157.97097778 64.80493927]
[143.01174927 69.95587921]
[133.02902222 81.15164185]
[123.04629517 92.34741211]
[113.06356812 103.54317474]
[107.86815643 117.61469269]
[108.18021393 132.61145020]
[108.49226379 147.60820007]
[108.80432129 162.60494995]
[109.11637878 177.60171509]
[109.42843628 192.59846497]
[109.74049377 207.59521484]
[110.05255127 222.59196472]
[110.36460114 237.58872986]
[110.67665863 252.58547974]
[125.33164978 256.17623901]
[138.55746460 263.43850708]
[149.45233154 273.87710571]
[157.27342224 286.78030396]
[161.48750305 301.26837158]
[161.80722046 316.35348511]
[158.21080017 331.00708008]
[150.94343567 344.23007202]
[140.50062561 355.12091064]
[127.59439850 362.93704224]
[113.10470581 367.14550781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 37]
[27 36]
[28 35]
[42 54]
[43 53]
[44 52]
[45 51]
[57 129]
[58 128]
[59 127]
[60 126]
[62 124]
[63 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
