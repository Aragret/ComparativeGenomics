%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUACCCGGGGGGGGGGCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAxxxxxxxxxxUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCCCCCCCCCCCUCUACAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.82565308]
[71.19830322 367.80963135]
[59.48964310 358.28021240]
[50.78712082 345.94454956]
[45.73651886 331.71801758]
[44.71262741 316.65634155]
[47.79142761 301.87719727]
[54.74444962 288.47726440]
[65.05573273 277.45092773]
[77.96011353 269.61642456]
[92.50000000 265.55511475]
[92.50000000 250.55509949]
[92.50000000 235.55509949]
[92.50000000 220.55509949]
[92.50000000 205.55509949]
[92.50000000 190.55509949]
[92.50000000 175.55509949]
[92.50000000 160.55509949]
[92.50000000 145.55509949]
[92.50000000 130.55509949]
[87.94543457 131.54656982]
[83.04201508 131.84687805]
[77.89487457 131.38667297]
[72.62069702 130.11247253]
[67.34534454 127.98844147]
[52.84975052 131.84559631]
[41.50323486 142.87135315]
[27.21434021 138.66697693]
[12.71874428 142.52412415]
[1.49097395 154.47692871]
[-14.41033268 150.46687317]
[-18.62727356 134.61917114]
[-6.82182312 123.23658752]
[8.86158466 128.02853394]
[23.35718155 124.17137146]
[33.66687393 113.42151642]
[48.99258804 117.35000610]
[63.48818588 113.49284363]
[63.80017471 105.99933624]
[64.42415619 91.01232147]
[64.73614502 83.51881409]
[50.61133957 78.47005463]
[36.48653412 73.42129517]
[22.36173248 68.37254333]
[5.41165781 68.73490143]
[0.37120888 52.54755783]
[14.53061295 43.22298813]
[27.41048813 54.24773788]
[41.53528976 59.29649353]
[55.66009521 64.34525299]
[69.78489685 69.39400482]
[77.11849213 67.59668732]
[84.17549896 67.29993439]
[74.42784882 55.89891434]
[64.68019867 44.49789047]
[54.93254471 33.09687042]
[39.29924774 28.14388466]
[36.03673935 12.07254028]
[48.50120544 1.41566157]
[63.87027359 7.13613033]
[66.33356476 23.34921837]
[76.08121490 34.75024033]
[85.82886505 46.15126038]
[95.57652283 57.55228043]
[110.53676605 58.64359283]
[121.83577728 48.77787018]
[133.13478088 38.91214752]
[144.43377686 29.04642296]
[155.73278809 19.18070030]
[149.36898804 7.59592915]
[145.43296814 -5.01608753]
[144.07922363 -18.15279007]
[145.35937500 -31.29118156]
[149.22024536 -43.90864182]
[155.50604248 -55.50372314]
[163.96466064 -65.61608124]
[174.25776672 -73.84473419]
[185.97433472 -79.86399078]
[198.64709473 -83.43630981]
[211.77113342 -84.42169952]
[224.82400513 -82.78318787]
[237.28656006 -78.58820343]
[248.66358948 -72.00582886]
[258.50347900 -63.29993439]
[270.58346558 -72.19228363]
[282.66345215 -81.08463287]
[279.28829956 -93.93172455]
[280.49710083 -107.12747955]
[286.12289429 -119.08955383]
[295.47045898 -128.39105225]
[307.40203857 -133.93067932]
[320.47592163 -135.06318665]
[333.12045288 -131.67437744]
[343.82318115 -124.19226074]
[356.26260376 -132.57440186]
[368.70205688 -140.95654297]
[373.16946411 -156.36503601]
[388.05603027 -162.34585571]
[401.94201660 -154.31101990]
[404.17532349 -138.42416382]
[393.04272461 -126.87233734]
[377.08419800 -128.51710510]
[364.64474487 -120.13495636]
[352.20532227 -111.75281525]
[355.12539673 -95.16698456]
[350.51773071 -78.91139221]
[339.25555420 -66.24245453]
[323.55001831 -59.71974182]
[306.51632690 -60.68897247]
[291.55578613 -69.00464630]
[279.47579956 -60.11229324]
[267.39581299 -51.21994400]
[273.88507080 -35.61137390]
[276.18933105 -18.85535622]
[274.15185547 -2.05480576]
[267.90176392 13.68313122]
[257.84603882 27.32003593]
[244.64291382 37.95473862]
[229.15881348 44.88286209]
[212.41149902 47.64348602]
[195.50318909 46.04980087]
[179.54798889 40.20172882]
[165.59851074 30.47970581]
[154.29949951 40.34542847]
[143.00050354 50.21115112]
[131.70149231 60.07687378]
[120.40248871 69.94259644]
[132.36271667 86.38151550]
[133.36047363 105.99557495]
[123.82212830 122.36946106]
[107.50000000 130.55509949]
[107.50000000 145.55509949]
[107.50000000 160.55509949]
[107.50000000 175.55509949]
[107.50000000 190.55509949]
[107.50000000 205.55509949]
[107.50000000 220.55509949]
[107.50000000 235.55509949]
[107.50000000 250.55509949]
[107.50000000 265.55511475]
[122.03988647 269.61642456]
[134.94427490 277.45092773]
[145.25555420 288.47726440]
[152.20857239 301.87719727]
[155.28736877 316.65634155]
[154.26348877 331.71801758]
[149.21287537 345.94454956]
[140.51036072 358.28021240]
[128.80169678 367.80963135]
[114.95575714 373.82565308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 38]
[26 37]
[28 35]
[29 34]
[41 51]
[42 50]
[43 49]
[44 48]
[53 64]
[54 63]
[55 62]
[56 61]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[84 112]
[85 111]
[86 110]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
