%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAAAACUCAAAGGGGGGGGGGGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAxxxxxxxxxxCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCCCCCCCCCCCGCAUAAAACUUAAA\
) } def
/len { sequence length } bind def

/coor [
[83.72136688 651.27960205]
[69.35911560 646.77288818]
[56.19822311 639.46697998]
[44.77762604 629.66113281]
[35.56498718 617.75683594]
[28.93755913 604.24157715]
[25.16672897 589.66882324]
[24.40691376 574.63525391]
[26.68922234 559.75653076]
[31.92020035 545.64196777]
[39.88563919 532.86944580]
[50.25936127 521.96209717]
[62.61656570 513.36651611]
[76.45124054 507.43466187]
[91.19685364 504.40948486]
[91.19685364 489.40948486]
[91.19685364 474.40948486]
[91.19685364 459.40948486]
[91.19685364 444.40948486]
[91.19685364 429.40948486]
[91.19685364 414.40948486]
[91.19685364 399.40948486]
[91.19685364 384.40948486]
[91.19685364 369.40948486]
[91.19685364 354.40948486]
[91.19685364 339.40948486]
[90.90049744 324.41241455]
[90.30789948 309.42410278]
[89.71530151 294.43582153]
[81.48122406 282.02416992]
[88.66728973 267.92907715]
[88.07469177 252.94079590]
[87.48209381 237.95251465]
[76.40193939 228.06484985]
[75.58744812 212.87303162]
[86.03366089 201.31819153]
[85.44106293 186.32989502]
[84.84846497 171.34161377]
[84.25586700 156.35331726]
[82.23346710 154.33970642]
[80.90897369 151.38256836]
[80.65385437 147.75187683]
[81.73195648 143.84974670]
[84.25586700 140.16812134]
[84.84846497 125.17983246]
[85.44106293 110.19154358]
[77.81309509 97.27588654]
[64.40122223 90.55862427]
[50.98935318 83.84135437]
[34.65997696 85.35245514]
[25.40878868 71.81185913]
[32.75262070 57.14897919]
[49.13676834 56.44771957]
[57.70662308 70.42948151]
[71.11849213 77.14675140]
[84.53036499 83.86402130]
[97.66638947 76.62213898]
[91.32794952 62.12611008]
[100.28283691 50.22404099]
[101.76230621 35.29718018]
[103.24178314 20.37031937]
[104.72126007 5.44345856]
[106.20072937 -9.48340225]
[107.68020630 -24.41026306]
[109.15967560 -39.33712387]
[110.63915253 -54.26398087]
[96.21629333 -58.55090714]
[82.86550903 -65.49014282]
[71.06941223 -74.83084106]
[61.25443268 -86.23533630]
[53.77536774 -99.29137421]
[48.90258789 -113.52698517]
[46.81223679 -128.42755127]
[47.57988358 -143.45443726]
[51.17777252 -158.06442261]
[57.47584534 -171.72937012]
[66.24642944 -183.95529175]
[77.17247772 -194.30024719]
[89.85901642 -202.39025879]
[103.84743500 -207.93287659]
[118.63206482 -210.72773743]
[133.67845154 -210.67381287]
[148.44265747 -207.77307129]
[162.39099121 -202.13034058]
[175.01922607 -193.94961548]
[185.87084961 -183.52661133]
[194.55358887 -171.23814392]
[200.75357056 -157.52841187]
[204.24665833 -142.89302063]
[204.90658569 -127.86101532]
[202.70950317 -112.97581482]
[197.73481750 -98.77549744]
[190.16236877 -85.77339172]
[180.26589966 -74.43952942]
[168.40316772 -65.18361664]
[155.00299072 -58.34024048]
[140.54978943 -54.15679550]
[125.56600952 -52.78450775]
[124.08654022 -37.85764694]
[122.60706329 -22.93078804]
[121.12759399 -8.00392818]
[119.64811707 6.92293215]
[118.16864014 21.84979248]
[116.68917084 36.77665329]
[115.20969391 51.70351410]
[121.65396118 65.13186646]
[112.59325409 78.10160828]
[117.53226471 84.42287445]
[119.90226746 91.49316406]
[119.76978302 98.38640594]
[117.50576019 104.30343628]
[113.71054077 108.66355133]
[109.11413574 111.16133881]
[104.46598816 111.78331757]
[100.42935181 110.78414154]
[99.83675385 125.77243042]
[99.24415588 140.76072693]
[99.24415588 155.76072693]
[99.83675385 170.74900818]
[100.42935181 185.73730469]
[101.02194977 200.72558594]
[112.34783173 211.41961670]
[112.73529816 226.62831116]
[102.47038269 237.35990906]
[103.06298065 252.34820557]
[103.65557861 267.33648682]
[111.93203735 280.82022095]
[104.70359039 293.84323120]
[105.29618835 308.83151245]
[105.88878632 323.81979370]
[109.13134766 329.68017578]
[108.91891479 335.42642212]
[106.19685364 339.40948486]
[106.19685364 354.40948486]
[106.19685364 369.40948486]
[106.19685364 384.40948486]
[106.19685364 399.40948486]
[106.19685364 414.40948486]
[106.19685364 429.40948486]
[106.19685364 444.40948486]
[106.19685364 459.40948486]
[106.19685364 474.40948486]
[106.19685364 489.40948486]
[106.19685364 504.40948486]
[120.94246674 507.43466187]
[134.77714539 513.36651611]
[147.13435364 521.96209717]
[157.50807190 532.86944580]
[165.47351074 545.64196777]
[170.70448303 559.75653076]
[172.98680115 574.63525391]
[172.22697449 589.66882324]
[168.45614624 604.24157715]
[161.82872009 617.75683594]
[152.61608887 629.66113281]
[141.19548035 639.46697998]
[128.03459167 646.77288818]
[113.67234039 651.27960205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 130]
[28 129]
[29 128]
[31 126]
[32 125]
[33 124]
[36 121]
[37 120]
[38 119]
[39 118]
[44 117]
[45 116]
[46 115]
[47 56]
[48 55]
[49 54]
[57 107]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
