%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUACUCUCGGGGGGGGGGAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACxxxxxxxxxxCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCCCCCCCCCCCUAUUACUAUC\
) } def
/len { sequence length } bind def

/coor [
[106.03712463 385.62942505]
[93.11796570 377.87106323]
[82.33666992 367.34204102]
[74.27465820 354.61016846]
[69.36669159 340.36206055]
[67.87747192 325.36608887]
[69.88729858 310.43099976]
[75.28778076 296.36218262]
[83.78768158 283.91836548]
[94.92861938 273.77062988]
[108.10976410 266.46624756]
[122.62028503 262.39913940]
[122.00445557 247.41177368]
[121.38863373 232.42442322]
[120.77280426 217.43705750]
[120.15698242 202.44970703]
[119.54115295 187.46235657]
[118.92533112 172.47500610]
[118.30950165 157.48765564]
[117.69367981 142.50030518]
[117.07785797 127.51294708]
[104.65898132 119.09916687]
[92.24122620 110.68612671]
[78.09391022 115.67144775]
[75.95274353 130.82644653]
[67.00454712 143.24369812]
[53.30554581 150.06982422]
[38.00367355 149.73622131]
[24.61518669 142.31954956]
[16.21666336 129.52410889]
[14.73802090 114.29019165]
[20.51904106 100.11844635]
[32.23128891 90.26543427]
[47.18337250 86.99530792]
[61.93941498 91.05950928]
[73.10858917 101.52413177]
[87.25590515 96.53881073]
[97.58680725 85.66349792]
[101.83965302 71.27901459]
[106.09249878 56.89453125]
[110.34534454 42.51005173]
[114.30195618 28.04128456]
[117.96066284 13.49432945]
[121.61936951 -1.05262446]
[125.27807617 -15.59957886]
[128.93678284 -30.14653206]
[123.47109985 -47.70093155]
[136.10238647 -59.84568787]
[139.46163940 -74.46469879]
[142.82090759 -89.08370209]
[128.58294678 -93.84144592]
[114.87065125 -99.95115662]
[101.81205750 -107.35578156]
[89.52908325 -115.98619843]
[78.13641357 -125.76181030]
[67.74042511 -136.59135437]
[58.43818283 -148.37370300]
[50.31654739 -160.99885559]
[43.45133972 -174.34893799]
[37.90666962 -188.29927063]
[33.73430252 -202.71963501]
[30.97319794 -217.47537231]
[29.64913559 -232.42872620]
[29.77447510 -247.44004822]
[31.34804916 -262.36920166]
[34.35516739 -277.07675171]
[38.76774597 -291.42544556]
[44.54459000 -305.28125000]
[51.63175964 -318.51483154]
[59.96308517 -331.00262451]
[69.46077728 -342.62799072]
[80.03614807 -353.28240967]
[91.59046173 -362.86642456]
[104.01583862 -371.29052734]
[117.19625854 -378.47607422]
[131.00866699 -384.35595703]
[145.32408142 -388.87530518]
[160.00885010 -391.99188232]
[174.92585754 -393.67660522]
[189.93583679 -393.91372681]
[204.89862061 -392.70108032]
[219.67451477 -390.04995728]
[234.12554932 -385.98510742]
[248.11680603 -380.54449463]
[261.51763916 -373.77893066]
[274.20294189 -365.75155640]
[286.05426025 -356.53732300]
[296.96093750 -346.22229004]
[306.82113647 -334.90274048]
[315.54278564 -322.68438721]
[323.04446411 -309.68130493]
[329.25613403 -296.01489258]
[334.11981201 -281.81277466]
[337.59002686 -267.20751953]
[339.63442993 -252.33554077]
[340.23391724 -237.33567810]
[339.38290405 -222.34797668]
[337.08932495 -207.51237488]
[333.37457275 -192.96740723]
[328.27337646 -178.84886169]
[321.83331299 -165.28857422]
[314.11456299 -152.41316223]
[305.18917847 -140.34281921]
[295.14047241 -129.19027710]
[284.06231689 -119.05964661]
[272.05810547 -110.04551697]
[259.23992920 -102.23205566]
[245.72749329 -95.69222260]
[231.64694214 -90.48707581]
[217.12976074 -86.66521454]
[202.31146240 -84.26232147]
[187.33044434 -83.30083466]
[172.32656860 -83.78972626]
[157.43991089 -85.72444153]
[154.08065796 -71.10543823]
[150.72138977 -56.48643112]
[156.88449097 -46.03280258]
[154.16094971 -33.79541779]
[143.48373413 -26.48782730]
[139.82502747 -11.94087315]
[136.16632080 2.60608125]
[132.50761414 17.15303612]
[128.84890747 31.69998932]
[130.52194214 36.23322296]
[129.32090759 41.86752701]
[124.72982788 46.76289749]
[120.47698212 61.14738083]
[116.22413635 75.53186035]
[111.97129059 89.91634369]
[132.06520081 126.89711761]
[132.68103027 141.88447571]
[133.29685974 156.87182617]
[133.91268921 171.85917664]
[134.52850342 186.84652710]
[135.14433289 201.83389282]
[135.76016235 216.82124329]
[136.37599182 231.80859375]
[136.99180603 246.79594421]
[137.60763550 261.78329468]
[152.40290833 264.64627075]
[166.13888550 270.84463501]
[178.07478333 280.04412842]
[187.56694031 291.74865723]
[194.10343933 305.32699585]
[197.33177185 320.04684448]
[197.07785034 335.11444092]
[193.35536194 349.71719360]
[186.36505127 363.06753540]
[176.48391724 374.44558716]
[164.24481201 383.23770142]
[150.30778503 388.96969604]
[135.42443848 391.33251953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 37]
[24 36]
[38 129]
[39 128]
[40 127]
[41 126]
[42 123]
[43 122]
[44 121]
[45 120]
[46 119]
[48 116]
[49 115]
[50 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
