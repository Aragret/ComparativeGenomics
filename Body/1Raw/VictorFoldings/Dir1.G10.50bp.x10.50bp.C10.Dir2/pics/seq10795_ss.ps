%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUCAAGCAGGGGGGGGGGAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGxxxxxxxxxxCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCCCCCCCCCCCACUCAAGCA\
) } def
/len { sequence length } bind def

/coor [
[136.49473572 486.84408569]
[122.47279358 481.29107666]
[110.27283478 472.42477417]
[100.66176605 460.80245972]
[94.24373627 447.15475464]
[91.42220306 432.33956909]
[92.37451935 417.28817749]
[97.04082489 402.94674683]
[105.12779236 390.21679688]
[116.12706757 379.89852905]
[129.34722900 372.64056396]
[143.95722961 368.89910889]
[143.95722961 353.89910889]
[143.95722961 338.89910889]
[143.95722961 323.89910889]
[143.95722961 308.89910889]
[143.95722961 293.89910889]
[143.95722961 278.89910889]
[143.95722961 263.89910889]
[143.95722961 248.89912415]
[143.95722961 233.89912415]
[143.95722961 218.89912415]
[127.62461090 207.70126343]
[122.33481598 188.38833618]
[130.86851501 170.02886963]
[123.50227356 156.96217346]
[116.13603210 143.89547729]
[108.76979828 130.82878113]
[90.38743591 130.57649231]
[75.16746521 120.26496887]
[68.11705780 103.28655243]
[53.25045776 101.29049683]
[38.38385773 99.29443359]
[23.51725960 97.29837799]
[8.65066147 95.30232239]
[-6.23564625 93.45899963]
[-21.14009285 91.76860046]
[-36.04454041 90.07820129]
[-50.94898987 88.38780975]
[-67.36860657 92.61066437]
[-75.97183990 78.00173950]
[-64.31544495 65.69057465]
[-49.25859070 73.48336029]
[-34.35414505 75.17375946]
[-19.44969559 76.86415100]
[-4.54524851 78.55455017]
[2.49886227 76.16861725]
[10.64671803 80.43572235]
[25.51331711 82.43177795]
[40.37991714 84.42784119]
[55.24651337 86.42389679]
[70.11311340 88.41995239]
[69.63706970 78.55769348]
[72.41156006 67.94811249]
[64.25489807 55.35967255]
[56.09822845 42.77123260]
[52.03072357 40.88574600]
[49.10306549 38.06575012]
[47.47082520 34.79733658]
[47.11104202 31.56627083]
[47.83851624 28.79827309]
[40.74211121 15.58308983]
[26.52202225 7.41479206]
[26.75651550 -8.98267937]
[41.20436478 -16.74101067]
[55.00286102 -7.87909508]
[53.95729446 8.48668671]
[61.05369949 21.70186996]
[68.68666840 34.61456680]
[76.84333801 47.20300674]
[85.00000000 59.79144669]
[92.50000000 59.79144669]
[91.37707520 44.83353806]
[90.25414276 29.87562943]
[89.13121796 14.91772079]
[83.92789459 0.84912318]
[92.49938965 -11.46060467]
[107.49938965 -11.46123981]
[116.07193756 0.84776163]
[110.86878204 14.91772079]
[109.74585724 29.87562943]
[108.62292480 44.83353806]
[107.50000000 59.79144669]
[115.00000000 59.79144669]
[123.15666199 47.20300674]
[131.31332397 34.61456680]
[139.47000122 22.02612877]
[135.92353821 6.62488747]
[144.37686157 -6.72865438]
[159.81472778 -10.11207771]
[173.07815552 -1.51805770]
[176.29817200 13.95472622]
[167.56439209 27.12654686]
[152.05844116 30.18279457]
[143.90176392 42.77123260]
[135.74510193 55.35967255]
[127.58843994 67.94811249]
[137.14505005 88.52436829]
[134.26515198 109.14535522]
[121.83648682 123.46254730]
[129.20272827 136.52925110]
[136.56896973 149.59593201]
[143.93521118 162.66262817]
[159.57197571 163.16015625]
[172.59880066 171.51066589]
[179.42674255 185.20518494]
[194.40698242 185.97485352]
[209.38722229 186.74450684]
[215.56225586 172.87968445]
[226.33160400 162.18455505]
[240.23881531 156.10557556]
[255.40304565 155.46487427]
[269.77346802 160.34909058]
[281.40658569 170.09767151]
[288.72912598 183.39221191]
[290.75076294 198.43472290]
[287.19812012 213.19084167]
[278.55163574 225.66491699]
[265.98065186 234.16993713]
[251.18534851 237.55566406]
[236.16662598 235.36421204]
[222.95565796 227.89193726]
[213.33912659 216.14942932]
[208.61756897 201.72474670]
[193.63732910 200.95509338]
[178.65708923 200.18542480]
[176.37579346 205.35778809]
[173.12237549 209.98086548]
[169.02375793 213.87431335]
[164.23983765 216.88623047]
[158.95722961 218.89912415]
[158.95722961 233.89912415]
[158.95722961 248.89912415]
[158.95722961 263.89910889]
[158.95722961 278.89910889]
[158.95722961 293.89910889]
[158.95722961 308.89910889]
[158.95722961 323.89910889]
[158.95722961 338.89910889]
[158.95722961 353.89910889]
[158.95722961 368.89910889]
[173.56724548 372.64056396]
[186.78741455 379.89852905]
[197.78668213 390.21679688]
[205.87364197 402.94674683]
[210.53994751 417.28817749]
[211.49226379 432.33956909]
[208.67073059 447.15475464]
[202.25270081 460.80245972]
[192.64163208 472.42477417]
[180.44168091 481.29107666]
[166.41973877 486.84408569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 103]
[26 102]
[27 101]
[28 100]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 46]
[37 45]
[38 44]
[39 43]
[54 71]
[55 70]
[56 69]
[61 68]
[62 67]
[84 97]
[85 96]
[86 95]
[87 94]
[106 126]
[107 125]
[108 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
