%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAUAUAGUGGGGGGGGGGACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACxxxxxxxxxxAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGCCCCCCCCCCUAAAUAUAGU\
) } def
/len { sequence length } bind def

/coor [
[75.38375092 490.89862061]
[60.89405823 486.69015503]
[47.98782730 478.87402344]
[37.54502869 467.98318481]
[30.27766228 454.76019287]
[26.68123627 440.10659790]
[27.00095749 425.02148438]
[31.21502876 410.53341675]
[39.03612518 397.63021851]
[49.93099213 387.19161987]
[63.15680313 379.92935181]
[77.81179810 376.33859253]
[78.12384796 361.34182739]
[78.43590546 346.34509277]
[78.74796295 331.34832764]
[79.06002045 316.35156250]
[79.37207794 301.35482788]
[79.68413544 286.35806274]
[79.99618530 271.36132812]
[80.30824280 256.36456299]
[78.08463287 253.54977417]
[77.14936066 249.49674988]
[78.07888794 244.83967590]
[81.13675690 240.45002747]
[82.38362885 225.50193787]
[83.63050842 210.55384827]
[84.87738037 195.60577393]
[86.12425232 180.65768433]
[87.21556854 165.69743347]
[88.15119171 150.72663879]
[89.08682251 135.75584412]
[90.02245331 120.78505707]
[90.95807648 105.81427002]
[88.93574524 90.95121765]
[77.11370850 80.43694305]
[80.26737213 65.88002777]
[75.36582184 51.70347214]
[70.46427155 37.52691269]
[54.87157059 35.94572449]
[41.61811447 26.30266190]
[34.73330688 10.64092350]
[36.74661636 -7.07128716]
[23.80856133 -14.66119576]
[10.87050533 -22.25110435]
[-2.06755090 -29.84101295]
[-15.00560665 -37.43091965]
[-29.17013550 -31.09485054]
[-44.34674835 -34.32749939]
[-54.69972992 -45.88584518]
[-56.24814987 -61.32546997]
[-48.39660263 -74.70952606]
[-34.16417313 -80.89156342]
[-19.02352142 -77.49446869]
[-8.79653454 -65.82449341]
[-7.41569853 -50.36897659]
[5.52235746 -42.77906799]
[18.46041298 -35.18915939]
[31.39846992 -27.59925079]
[44.33652496 -20.00934410]
[57.50510788 -27.19185257]
[58.12908554 -42.17886734]
[58.75306320 -57.16588593]
[59.37704086 -72.15290070]
[51.21438217 -82.19406128]
[52.08073044 -94.70279694]
[60.96253204 -102.97448730]
[61.89816284 -117.94528198]
[62.83378983 -132.91607666]
[63.76942062 -147.88685608]
[49.97387314 -154.21516418]
[39.39876175 -165.10237122]
[33.47427750 -179.07609558]
[33.00166321 -194.24650574]
[38.04483414 -208.56190491]
[47.92174149 -220.08627319]
[61.29661560 -227.26103210]
[76.36061096 -229.11585999]
[91.07645416 -225.39988708]
[103.45394135 -216.61569214]
[111.81912231 -203.95123291]
[115.04067993 -189.11930847]
[112.68290710 -174.12580872]
[105.06468964 -160.99845886]
[93.21633148 -151.51263428]
[78.74021149 -146.95123291]
[77.80458069 -131.98043823]
[76.86894989 -117.00965118]
[75.93332672 -102.03885651]
[84.59113312 -86.80592346]
[74.36405945 -71.52892303]
[73.74008179 -56.54190826]
[73.11610413 -41.55488968]
[72.49212646 -26.56787491]
[90.63488007 -16.89656639]
[99.58668518 0.68583757]
[96.95991516 19.40320206]
[84.64082336 32.62536240]
[89.54238129 46.80192184]
[94.44393158 60.97847748]
[105.91537476 70.47875214]
[103.11230469 86.04966736]
[115.80723572 94.03958893]
[130.70913696 92.32689667]
[145.61103821 90.61420441]
[160.51293945 88.90151978]
[166.54974365 74.77874756]
[178.84877014 65.57932281]
[194.10165405 63.77783585]
[208.20542908 69.85887909]
[217.36625671 82.18668365]
[219.11991882 97.44512939]
[212.99470520 111.52977753]
[200.63824463 120.65191650]
[185.37437439 122.35774994]
[171.30899048 116.18840790]
[162.22563171 103.80342102]
[147.32373047 105.51610565]
[132.42182922 107.22879791]
[117.51992035 108.94149017]
[111.30947876 108.79516602]
[105.92887115 106.74989319]
[104.99324036 121.72068787]
[104.05761719 136.69148254]
[103.12198639 151.66227722]
[102.18635559 166.63305664]
[104.78659058 175.45863342]
[101.07234192 181.90455627]
[99.82546997 196.85264587]
[98.57859039 211.80073547]
[97.33171844 226.74880981]
[96.08484650 241.69689941]
[95.30500031 256.67660522]
[94.99294281 271.67337036]
[94.68088531 286.67013550]
[94.36882782 301.66687012]
[94.05677032 316.66363525]
[93.74472046 331.66040039]
[93.43266296 346.65713501]
[93.12060547 361.65390015]
[92.80854797 376.65063477]
[107.30148315 380.84793091]
[120.21374512 388.65408325]
[130.66494751 399.53683472]
[137.94253540 412.75424194]
[141.55026245 427.40505981]
[141.24220276 442.49038696]
[137.03932190 456.98171997]
[129.22817993 469.89096069]
[118.34138489 480.33795166]
[105.12118530 487.61044312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[34 101]
[36 99]
[37 98]
[38 97]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[60 93]
[61 92]
[62 91]
[63 90]
[66 88]
[67 87]
[68 86]
[69 85]
[102 119]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
