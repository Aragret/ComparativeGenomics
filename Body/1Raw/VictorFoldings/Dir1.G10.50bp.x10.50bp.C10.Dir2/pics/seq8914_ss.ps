%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAACCAGGGGGGGGGGACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAxxxxxxxxxxCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCCCCCCCCCCCUAGUAACCA\
) } def
/len { sequence length } bind def

/coor [
[105.76074982 462.70407104]
[91.91481018 456.68804932]
[80.20614624 447.15863037]
[71.50362396 434.82296753]
[66.45302582 420.59643555]
[65.42913055 405.53475952]
[68.50793457 390.75561523]
[75.46095276 377.35568237]
[85.77223969 366.32934570]
[98.67662048 358.49484253]
[113.21650696 354.43353271]
[113.21650696 339.43353271]
[113.21650696 324.43353271]
[113.21650696 309.43353271]
[113.21650696 294.43353271]
[113.21650696 279.43353271]
[113.21650696 264.43353271]
[113.21650696 249.43353271]
[113.21650696 234.43353271]
[113.21650696 219.43353271]
[110.05092621 212.70115662]
[113.37578583 204.12228394]
[113.68784332 189.12553406]
[113.99990082 174.12876892]
[114.31195831 159.13201904]
[113.53211212 144.15229797]
[111.66449738 129.26902771]
[91.32270050 132.15834045]
[72.36010742 121.64933014]
[63.09869766 100.79949951]
[48.09950638 100.64346313]
[33.10031891 100.48742676]
[18.10113144 100.33139038]
[9.71202374 113.27845764]
[-4.35445261 119.61389160]
[-19.60973549 117.31609344]
[-31.18592072 107.11827850]
[-35.38908768 92.27452850]
[-30.87802505 77.52143097]
[-19.09219170 67.56665039]
[-3.79240775 65.58671570]
[10.13922310 72.21341705]
[18.25716782 85.33220673]
[33.25635529 85.48824310]
[48.25554276 85.64427948]
[63.25473404 85.80031586]
[68.41833496 80.36090088]
[53.83337402 76.85678101]
[49.57545853 62.47380066]
[59.90246201 51.59478378]
[74.48748779 55.09863281]
[78.74553680 69.48207855]
[83.90914154 64.04266357]
[82.97351074 49.07187271]
[82.03788757 34.10108185]
[81.10225677 19.13028908]
[69.53448486 8.69839287]
[68.79888916 -6.49744701]
[78.81539917 -17.46125984]
[77.87976837 -32.43205261]
[76.94413757 -47.40284348]
[76.00851440 -62.37363434]
[61.19357681 -65.19647980]
[47.54644012 -71.61571503]
[35.92498016 -81.22781372]
[27.05972672 -93.42855835]
[21.50795937 -107.45098877]
[19.61866379 -122.41365814]
[21.51060677 -137.37599182]
[27.06485558 -151.39744568]
[35.93226624 -163.59661865]
[47.55543137 -173.20664978]
[61.20370102 -179.62347412]
[76.01913452 -182.44369507]
[91.07042694 -181.49005127]
[105.41143799 -176.82247925]
[118.14067841 -168.73439026]
[128.45797729 -157.73420715]
[135.71478271 -144.51339722]
[139.45492554 -129.90306091]
[139.44329834 -114.82158661]
[135.68063354 -100.21702576]
[128.40344238 -87.00743103]
[118.06919098 -76.02317047]
[105.32749176 -67.95471954]
[90.97930145 -63.30926132]
[91.91493225 -48.33847046]
[92.85056305 -33.36767960]
[93.78618622 -18.39688873]
[105.08982849 -8.76551914]
[106.25195312 6.40366411]
[96.07305145 18.19466019]
[97.00867462 33.16545105]
[97.94430542 48.13624191]
[98.87993622 63.10703659]
[117.09087372 69.33146667]
[128.84562683 83.34516907]
[131.50410461 100.47713470]
[146.07681274 96.92237854]
[160.64950562 93.36761475]
[175.22221375 89.81285095]
[178.34666443 74.87295532]
[187.65068054 62.77344894]
[201.28695679 55.91670609]
[216.54797363 55.66413498]
[230.40367126 62.06588364]
[240.10298157 73.85087585]
[243.72010803 88.67920685]
[240.53684998 103.60668182]
[231.18525696 115.66945648]
[217.52209473 122.47244263]
[202.26017761 122.66491699]
[188.42980957 116.20865631]
[178.77697754 104.38555145]
[164.20426941 107.94031525]
[149.63157654 111.49507904]
[135.05886841 115.04984283]
[126.54777527 127.40141296]
[128.41539001 142.28469849]
[137.92828369 130.68705750]
[152.63705444 127.74564362]
[165.87849426 134.79292297]
[171.65409851 148.63642883]
[167.34747314 163.00489807]
[154.90954590 171.38928223]
[139.97482300 169.99137878]
[129.30871582 159.44407654]
[128.99665833 174.44082642]
[128.68460083 189.43757629]
[128.37254333 204.43434143]
[128.21650696 219.43353271]
[128.21650696 234.43353271]
[128.21650696 249.43353271]
[128.21650696 264.43353271]
[128.21650696 279.43353271]
[128.21650696 294.43353271]
[128.21650696 309.43353271]
[128.21650696 324.43353271]
[128.21650696 339.43353271]
[128.21650696 354.43353271]
[142.75639343 358.49484253]
[155.66076660 366.32934570]
[165.97206116 377.35568237]
[172.92507935 390.75561523]
[176.00387573 405.53475952]
[174.97998047 420.59643555]
[169.92938232 434.82296753]
[161.22686768 447.15863037]
[149.51820374 456.68804932]
[135.67225647 462.70407104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[25 127]
[26 119]
[27 118]
[30 46]
[31 45]
[32 44]
[33 43]
[53 95]
[54 94]
[55 93]
[56 92]
[59 89]
[60 88]
[61 87]
[62 86]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
