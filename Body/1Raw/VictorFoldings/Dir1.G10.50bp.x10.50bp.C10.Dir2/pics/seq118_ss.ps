%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCUAUUAUGGGGGGGGGGUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGxxxxxxxxxxGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGAAACCCCCCCCCCCAUCCUAUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 412.37091064]
[71.01555634 406.81790161]
[58.81560135 397.95156860]
[49.20452881 386.32925415]
[42.78650284 372.68154907]
[39.96496582 357.86636353]
[40.91728210 342.81497192]
[45.58358765 328.47357178]
[53.67055511 315.74362183]
[64.66983032 305.42532349]
[77.88998413 298.16735840]
[92.50000000 294.42593384]
[92.50000000 279.42593384]
[92.50000000 264.42593384]
[92.50000000 249.42591858]
[92.50000000 234.42591858]
[92.50000000 219.42591858]
[92.50000000 204.42591858]
[92.50000000 189.42591858]
[92.50000000 174.42591858]
[92.50000000 159.42591858]
[92.50000000 144.42591858]
[92.50000000 129.42591858]
[77.00970459 119.83888245]
[69.79322815 103.11216736]
[73.44764709 85.26543427]
[86.65781403 72.72142029]
[83.59941864 58.03652573]
[80.54102325 43.35162735]
[60.84674072 43.74641800]
[46.20391083 32.03537750]
[42.64666748 14.59249306]
[50.64189529 -0.24458492]
[43.54549408 -13.45976830]
[36.44908905 -26.67495155]
[29.35268593 -39.89013290]
[22.25628281 -53.10531616]
[14.62331200 -66.01801300]
[6.46664667 -78.60645294]
[-7.52151871 -73.06361389]
[-22.31756783 -70.35725403]
[-37.35249710 -70.58955383]
[-52.04848862 -73.74971008]
[-65.84111023 -79.71443176]
[-78.20101166 -88.25276184]
[-88.65422058 -99.03498840]
[-96.80032349 -111.64541626]
[-102.32780457 -125.59836578]
[-105.02597046 -140.35687256]
[-104.79296112 -155.35337830]
[-101.63960266 -170.01156616]
[-95.68892670 -183.76841736]
[-87.17135620 -196.09599304]
[-76.41578674 -206.52153015]
[-84.57245636 -219.10997009]
[-92.72911835 -231.69841003]
[-100.88578796 -244.28684998]
[-109.04244995 -256.87527466]
[-117.19911957 -269.46371460]
[-125.35578156 -282.05215454]
[-140.19807434 -289.02630615]
[-141.30963135 -305.38772583]
[-127.54698181 -314.30523682]
[-113.06796265 -306.60522461]
[-112.76734161 -290.20883179]
[-104.61067963 -277.62039185]
[-96.45401001 -265.03195190]
[-88.29734802 -252.44351196]
[-80.14067841 -239.85507202]
[-71.98401642 -227.26663208]
[-63.82735062 -214.67819214]
[-49.91702271 -220.23489380]
[-35.18516922 -222.97177124]
[-20.19765091 -222.78178406]
[-5.53051519 -219.67037964]
[8.25213814 -213.75529480]
[20.61985016 -205.26216125]
[31.09622765 -194.51585388]
[39.27727890 -181.92807007]
[44.84701157 -167.98159790]
[47.58961487 -153.21174622]
[47.39784241 -138.18585205]
[44.27718735 -123.48142242]
[38.34576416 -109.66399384]
[29.82981110 -97.26536560]
[19.05508614 -86.76312256]
[27.21175194 -74.17468262]
[29.98754311 -73.47753906]
[32.64485168 -71.60458374]
[34.72141266 -68.59882355]
[35.78057098 -64.67431641]
[35.47146606 -60.20172119]
[42.56786728 -46.98653793]
[49.66427231 -33.77135468]
[56.76067352 -20.55617142]
[63.85707855 -7.34098816]
[73.96164703 -8.43045235]
[84.18239594 -5.17118406]
[92.64218140 2.30979538]
[97.60683441 13.07921982]
[111.75415039 8.09389782]
[125.90146637 3.10857582]
[140.04878235 -1.87674630]
[146.64775085 -16.23742676]
[161.49726868 -21.64735794]
[175.78738403 -14.89692497]
[181.04000854 0.00896030]
[174.13887024 14.22690105]
[159.17828369 19.32164383]
[145.03410339 12.27056980]
[130.88679504 17.25589180]
[116.73947144 22.24121475]
[102.59215546 27.22653580]
[95.22591400 40.29323196]
[98.28430939 54.97813034]
[101.34270477 69.66302490]
[113.43897247 72.76897430]
[123.26222229 80.48068237]
[129.15098572 91.49381256]
[130.10925293 103.94564819]
[144.03996277 109.50759125]
[159.28973389 104.52519226]
[172.61346436 113.46149445]
[173.79035950 129.46131897]
[161.91757202 140.25097656]
[146.10292053 137.55355835]
[138.47802734 123.43830109]
[124.54730988 117.87636566]
[117.03248596 125.14019012]
[107.50000000 129.42591858]
[107.50000000 144.42591858]
[107.50000000 159.42591858]
[107.50000000 174.42591858]
[107.50000000 189.42591858]
[107.50000000 204.42591858]
[107.50000000 219.42591858]
[107.50000000 234.42591858]
[107.50000000 249.42591858]
[107.50000000 264.42593384]
[107.50000000 279.42593384]
[107.50000000 294.42593384]
[122.11001587 298.16735840]
[135.33016968 305.42532349]
[146.32945251 315.74362183]
[154.41641235 328.47357178]
[159.08271790 342.81497192]
[160.03503418 357.86636353]
[157.21350098 372.68154907]
[150.79547119 386.32925415]
[141.18440247 397.95156860]
[128.98443604 406.81790161]
[114.96250153 412.37091064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[27 116]
[28 115]
[29 114]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[38 87]
[39 86]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[100 113]
[101 112]
[102 111]
[103 110]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
