%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCCUCAUGGGGGGGGGGUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAxxxxxxxxxxGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCCCCCCCCCCCUACUCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[83.77433014 395.90127563]
[70.07217407 389.64038086]
[58.10705948 380.48703003]
[48.47914886 368.90036011]
[41.67136765 355.46154785]
[38.02519989 340.84466553]
[37.72353363 325.78289795]
[40.78149796 311.03173828]
[47.04570770 297.33111572]
[56.20195389 285.36822510]
[67.79096222 275.74310303]
[81.23143005 268.93859863]
[95.84918976 265.29595947]
[95.54518890 250.29904175]
[95.24118042 235.30212402]
[94.93717957 220.30520630]
[94.63317871 205.30828857]
[94.32917023 190.31137085]
[94.02516937 175.31445312]
[93.72116089 160.31753540]
[93.41716003 145.32061768]
[93.11315155 130.32368469]
[92.80915070 115.32677460]
[82.92372894 104.04499817]
[68.09670258 101.77358246]
[53.26967621 99.50216675]
[40.61519623 108.58522034]
[25.61084175 106.07046509]
[17.02952194 93.95037842]
[2.20249677 91.67896271]
[-12.62452793 89.40754700]
[-27.45155334 87.13613129]
[-41.32740021 97.74256897]
[-58.25261688 95.11297607]
[-67.87000275 81.34878540]
[-82.74002075 79.37833405]
[-97.61003113 77.40788269]
[-106.58851624 79.38980865]
[-112.76028442 75.24385071]
[-127.58730316 72.97243500]
[-142.66247559 79.42778015]
[-155.62660217 69.38470459]
[-153.14331055 53.17466736]
[-137.76719666 47.47316360]
[-125.31588745 58.14540863]
[-110.48886108 60.41682434]
[-95.63957977 62.53786850]
[-80.76956940 64.50831604]
[-65.89955139 66.47876740]
[-56.83759308 57.27063370]
[-43.93090439 54.94648743]
[-31.87274742 60.57999802]
[-25.18013573 72.30910492]
[-10.35311127 74.58052063]
[4.47391319 76.85193634]
[19.30093765 79.12335205]
[31.11701965 70.12803650]
[46.18608856 72.22035980]
[55.54109192 84.67514038]
[70.36811829 86.94655609]
[85.19514465 89.21797180]
[92.42566681 85.91135406]
[99.38159180 86.33761597]
[106.12364197 72.93818665]
[112.86569214 59.53874969]
[113.94056702 50.40716553]
[119.88257599 45.93814850]
[126.89480591 32.67811203]
[133.90702820 19.41807175]
[140.91926575 6.15803242]
[128.89280701 -2.85921693]
[118.42510986 -13.64688778]
[109.77395630 -25.93932343]
[103.15238190 -39.43381500]
[98.72344971 -53.79804230]
[96.59622955 -68.67827606]
[96.82311249 -83.70808411]
[99.39849854 -98.51733398]
[104.25896454 -112.74134064]
[111.28483582 -126.02981567]
[120.30307770 -138.05552673]
[131.09161377 -148.52233887]
[143.38476562 -157.17248535]
[156.87979126 -163.79293823]
[171.24438477 -168.22068787]
[186.12480164 -170.34667969]
[201.15458679 -170.11856079]
[215.96362305 -167.54194641]
[230.18722534 -162.68029785]
[243.47512817 -155.65333557]
[255.50010681 -146.63410950]
[265.96600342 -135.84471130]
[274.61514282 -123.55084229]
[281.23449707 -110.05525970]
[285.66104126 -95.69029999]
[287.78579712 -80.80971527]
[287.55645752 -65.77994537]
[284.97863770 -50.97112274]
[280.11581421 -36.74792099]
[273.08773804 -23.46060181]
[264.06750488 -11.43637562]
[253.27725220 -0.97135115]
[240.98268127 7.67676163]
[227.48655701 14.29499435]
[213.12123108 18.72036743]
[198.24046326 20.84390259]
[183.21070862 20.61330605]
[168.40209961 18.03425407]
[154.17930603 13.17026138]
[147.16706848 26.43030167]
[140.15484619 39.69034195]
[133.14260864 52.95037842]
[126.26512146 66.28079987]
[119.52307892 79.68022919]
[112.78102875 93.07966614]
[122.13516998 81.35362244]
[135.01145935 73.65940857]
[149.76969910 70.97711945]
[164.52990723 73.64845276]
[177.41191101 81.33310699]
[186.77476501 93.05220032]
[191.42578125 107.31291962]
[190.77250671 122.29869080]
[184.89816284 136.10057068]
[174.55104065 146.96044922]
[161.04917908 153.49496460]
[146.11248779 154.87171936]
[131.64366150 150.91534424]
[119.48576355 142.12982178]
[111.18750763 129.63426208]
[107.80606842 115.02276611]
[108.11007690 130.01968384]
[108.41407776 145.01660156]
[108.71807861 160.01351929]
[109.02208710 175.01043701]
[109.32608795 190.00737000]
[109.63009644 205.00428772]
[109.93409729 220.00120544]
[110.23810577 234.99812317]
[110.54210663 249.99504089]
[110.84611511 264.99194336]
[125.59948730 268.03918457]
[139.30467224 274.29345703]
[151.27421570 283.44100952]
[160.90774536 295.02301025]
[167.72204590 308.45852661]
[171.37528992 323.07363892]
[171.68424988 338.13525391]
[168.63343811 352.88787842]
[162.37586975 366.59155273]
[153.22541809 378.55889893]
[141.64108276 388.18960571]
[128.20391846 395.00064087]
[113.58791351 398.65036011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 61]
[25 60]
[26 59]
[29 56]
[30 55]
[31 54]
[32 53]
[35 49]
[36 48]
[37 47]
[39 46]
[40 45]
[63 115]
[64 114]
[65 113]
[67 112]
[68 111]
[69 110]
[70 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
