%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAUUCUGGGGGGGGGGCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAxxxxxxxxxxCCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCCCCCCCCCCCUCCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[93.45172119 386.94128418]
[80.23152924 379.66879272]
[69.34471893 369.22180176]
[61.53359222 356.31256104]
[57.33071136 341.82122803]
[57.02263641 326.73590088]
[60.63037872 312.08508301]
[67.90795135 298.86767578]
[78.35916138 287.98492432]
[91.27142334 280.17877197]
[105.76435852 275.98147583]
[105.45230103 260.98474121]
[105.14024353 245.98797607]
[104.82818604 230.99122620]
[104.51613617 215.99447632]
[104.20407867 200.99771118]
[103.89202118 186.00096130]
[103.57996368 171.00421143]
[103.26790619 156.00746155]
[102.95584869 141.01069641]
[74.97799683 128.60444641]
[65.17466736 102.14300537]
[76.30240631 78.82732391]
[67.79132080 66.47575378]
[59.28022766 54.12417984]
[46.23476791 61.54694366]
[32.59949875 67.82077026]
[18.47537041 72.89920044]
[3.96696067 76.74465179]
[-10.81831741 79.32864380]
[-25.77099609 80.63204193]
[-40.78036880 80.64520264]
[-55.73530960 79.36801910]
[-70.52509308 76.80996704]
[-85.04022980 72.98995972]
[-99.17323303 67.93630219]
[-112.81948853 61.68639374]
[-125.87794495 54.28651810]
[-138.25192261 45.79146194]
[-149.84980774 36.26411438]
[-160.58575439 25.77501678]
[-170.38023376 14.40182781]
[-179.16076660 2.22875381]
[-186.86233521 -10.65408039]
[-193.42790222 -24.15129089]
[-198.80886841 -38.16295242]
[-202.96540833 -52.58531952]
[-205.86671448 -67.31161499]
[-207.49134827 -82.23281097]
[-207.82723999 -97.23842621]
[-206.87193298 -112.21737671]
[-204.63249207 -127.05874634]
[-201.12548828 -141.65266418]
[-196.37689209 -155.89106750]
[-190.42185974 -169.66856384]
[-183.30448914 -182.88311768]
[-175.07746887 -195.43690491]
[-165.80171204 -207.23696899]
[-155.54589844 -218.19596863]
[-144.38595581 -228.23275757]
[-132.40449524 -237.27301025]
[-119.69024658 -245.24980164]
[-106.33733368 -252.10408020]
[-92.44461823 -257.78509521]
[-78.11496735 -262.25079346]
[-63.45446014 -265.46810913]
[-48.57165146 -267.41320801]
[-33.57672119 -268.07168579]
[-18.58069801 -267.43869019]
[-3.69460297 -265.51889038]
[10.97134876 -262.32650757]
[25.30857468 -257.88516235]
[39.21092606 -252.22778320]
[52.57546616 -245.39620972]
[65.30326080 -237.44102478]
[77.30005646 -228.42115784]
[88.47705078 -218.40335083]
[98.75148010 -207.46180725]
[108.04728699 -195.67752075]
[116.29563141 -183.13772583]
[123.43544769 -169.93528748]
[129.41387939 -156.16793823]
[134.18667603 -141.93762207]
[137.71847534 -127.34969330]
[139.98313904 -112.51215363]
[140.96391296 -97.53485107]
[140.65351868 -82.52867889]
[139.05426025 -67.60474396]
[136.17797852 -52.87353897]
[132.04595947 -38.44412994]
[126.68881226 -24.42334366]
[120.14619446 -10.91499138]
[112.46654510 1.98091435]
[103.70671844 14.16889572]
[93.93157196 25.55871391]
[83.21347809 36.06604385]
[71.63179779 45.61309052]
[80.14289093 57.96466446]
[88.65397644 70.31623840]
[95.54358673 67.48809052]
[103.13209534 66.29164124]
[111.02606964 66.89679718]
[118.79170227 69.37722778]
[125.97856903 73.70102692]
[132.14550781 79.72733307]
[136.88708496 87.20919800]
[139.85908508 95.80302429]
[140.80155945 105.08398438]
[155.76181030 106.17530060]
[170.72206116 107.26660919]
[185.68231201 108.35791779]
[196.44834900 97.01655579]
[211.99145508 95.30020905]
[224.97265625 104.01929474]
[229.26261902 119.05691528]
[222.83576965 133.31277466]
[208.72665405 140.05569458]
[193.59716797 136.10186768]
[184.59100342 123.31816864]
[169.63075256 122.22686005]
[154.67050171 121.13554382]
[139.71025085 120.04423523]
[134.27084351 125.20783997]
[149.12783813 127.27418518]
[156.77560425 140.17811584]
[151.45536804 154.20292664]
[137.17326355 158.78784180]
[124.68379211 150.48043823]
[123.39202118 135.53504944]
[117.95260620 140.69863892]
[118.26466370 155.69540405]
[118.57672119 170.69215393]
[118.88877106 185.68890381]
[119.20082855 200.68565369]
[119.51288605 215.68241882]
[119.82494354 230.67916870]
[120.13700104 245.67591858]
[120.44905853 260.67266846]
[120.76110840 275.66943359]
[135.41610718 279.26019287]
[148.64190674 286.52246094]
[159.53677368 296.96105957]
[167.35787964 309.86425781]
[171.57194519 324.35232544]
[171.89166260 339.43743896]
[168.29524231 354.09103394]
[161.02787781 367.31402588]
[150.58508301 378.20486450]
[137.67884827 386.02099609]
[123.18915558 390.22946167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 99]
[24 98]
[25 97]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
