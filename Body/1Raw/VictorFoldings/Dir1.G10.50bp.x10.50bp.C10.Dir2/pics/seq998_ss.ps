%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUAAAUGGGGGGGGGGCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAxxxxxxxxxxGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCCUAAAU\
) } def
/len { sequence length } bind def

/coor [
[94.44151306 585.23541260]
[80.59557343 579.21942139]
[68.88691711 569.69000244]
[60.18439102 557.35430908]
[55.13378906 543.12780762]
[54.10989761 528.06610107]
[57.18869781 513.28698730]
[64.14171600 499.88702393]
[74.45300293 488.86071777]
[87.35738373 481.02618408]
[101.89727020 476.96487427]
[101.89727020 461.96487427]
[101.89727020 446.96487427]
[101.89727020 431.96487427]
[101.89727020 416.96487427]
[101.89727020 401.96487427]
[101.89727020 386.96487427]
[101.89727020 371.96487427]
[101.89727020 356.96487427]
[101.89727020 341.96487427]
[86.46013641 339.02096558]
[71.87789917 333.14978027]
[58.70013428 324.57073975]
[47.42385101 313.60534668]
[38.47475052 300.66513062]
[32.19113159 286.23623657]
[28.81113052 270.86117554]
[28.46367073 255.11828613]
[31.16356468 239.60021973]
[36.81088257 224.89140320]
[45.19464874 211.54618835]
[56.00073242 200.06784058]
[68.82360840 190.88966370]
[83.18157196 184.35855103]
[98.53484344 180.72193909]
[97.91086578 165.73492432]
[97.28688812 150.74790955]
[96.19557953 135.78765869]
[94.63800049 120.86875153]
[86.33161926 116.65626526]
[80.57902527 109.33174896]
[78.45501709 100.26369476]
[64.33021545 95.21493530]
[49.27286148 100.75169373]
[35.63122177 92.30863953]
[33.86999512 76.36255646]
[45.34024048 65.14591217]
[61.24296951 67.26316833]
[69.37896729 81.09013367]
[83.50377655 86.13889313]
[86.93824768 82.86388397]
[91.00635529 80.42015839]
[95.51074982 78.92626190]
[97.68758392 64.08505249]
[99.86442566 49.24385071]
[102.04125977 34.40264511]
[104.21809387 19.56143951]
[98.56542206 4.78450394]
[108.06782532 -6.68517685]
[110.24465942 -21.52638245]
[112.42150116 -36.36758804]
[110.30732727 -42.74236298]
[111.58460236 -48.36373901]
[115.01001740 -51.77578354]
[117.80233765 -66.51358795]
[120.59466553 -81.25139618]
[106.74379730 -87.16472626]
[94.48820496 -95.91770172]
[84.40111542 -107.10093689]
[76.95430756 -120.19135284]
[72.49609375 -134.57670593]
[71.23498535 -149.58416748]
[73.22996521 -164.51179504]
[78.38773346 -178.66140747]
[86.46704102 -191.37120056]
[97.09001160 -202.04670715]
[109.75978851 -210.18862915]
[123.88378143 -215.41613770]
[138.80139160 -217.48475647]
[153.81488037 -216.29769897]
[168.22206116 -211.91050720]
[181.34906006 -204.52838135]
[192.58192444 -194.49658203]
[201.39526367 -182.28433228]
[207.37684631 -168.46279907]
[210.24693298 -153.67846680]
[209.87127686 -138.62280273]
[206.26744080 -124.00000000]
[199.60397339 -110.49398804]
[190.19255066 -98.73647308]
[178.47335815 -89.27736664]
[164.99452209 -82.55909729]
[150.38648987 -78.89588928]
[135.33247375 -78.45906830]
[132.54014587 -63.72126389]
[129.74781799 -48.98345947]
[127.26270294 -34.19075012]
[125.08586884 -19.34954643]
[122.90902710 -4.50833988]
[128.71740723 9.20705318]
[119.05930328 21.73827744]
[116.88246155 36.57948303]
[114.70562744 51.42068863]
[112.52879333 66.26189423]
[110.35195160 81.10309601]
[121.54193115 100.44824982]
[109.55690765 119.31117249]
[111.11449432 134.23008728]
[114.26301575 138.55516052]
[115.28923035 143.19189453]
[114.43847656 147.26348877]
[112.27390289 150.12393188]
[112.89788055 165.11094666]
[113.52185822 180.09796143]
[127.70458221 182.10142517]
[141.31239319 186.56100464]
[153.92355347 193.33717346]
[165.14743042 202.21859741]
[174.63659668 212.92877197]
[182.09762573 225.13459778]
[187.30015564 238.45678711]
[190.08392334 252.48156738]
[190.36384583 266.77362061]
[188.13247681 280.88958740]
[183.46028137 294.39166260]
[176.49340820 306.86148071]
[167.44906616 317.91278076]
[156.60882568 327.20352173]
[144.30979919 334.44641113]
[130.93414307 339.41787720]
[116.89727020 341.96487427]
[116.89727020 356.96487427]
[116.89727020 371.96487427]
[116.89727020 386.96487427]
[116.89727020 401.96487427]
[116.89727020 416.96487427]
[116.89727020 431.96487427]
[116.89727020 446.96487427]
[116.89727020 461.96487427]
[116.89727020 476.96487427]
[131.43716431 481.02618408]
[144.34153748 488.86071777]
[154.65281677 499.88702393]
[161.60585022 513.28698730]
[164.68464661 528.06610107]
[163.66075134 543.12780762]
[158.61015320 557.35430908]
[149.90762329 569.69000244]
[138.19895935 579.21942139]
[124.35302734 585.23541260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[35 114]
[36 113]
[37 112]
[38 108]
[39 107]
[42 50]
[43 49]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
[59 99]
[60 98]
[61 97]
[64 96]
[65 95]
[66 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
