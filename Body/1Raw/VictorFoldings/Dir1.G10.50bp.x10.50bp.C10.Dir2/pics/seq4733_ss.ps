%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGUAGGCGGGGGGGGGGCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAAxxxxxxxxxxAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCCCCCCCCCCCUGAGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[82.99343872 345.89175415]
[69.77323914 338.61929321]
[58.88644028 328.17227173]
[51.07530975 315.26303101]
[46.87242508 300.77169800]
[46.56435394 285.68637085]
[50.17209625 271.03555298]
[57.44966888 257.81817627]
[67.90087891 246.93539429]
[80.81314087 239.12924194]
[95.30607605 234.93196106]
[94.99401855 219.93521118]
[94.68196106 204.93844604]
[94.36990356 189.94169617]
[94.05784607 174.94494629]
[93.74579620 159.94819641]
[93.43373871 144.95143127]
[93.12168121 129.95468140]
[92.80962372 114.95793152]
[80.54725647 106.31881714]
[66.32048035 111.07263184]
[52.09369659 115.82644653]
[37.86692047 120.58026123]
[23.64014053 125.33407593]
[17.16393089 136.53730774]
[5.16666937 140.18212891]
[-5.72561121 134.82810974]
[-20.04820824 139.28492737]
[-30.76904106 151.69442749]
[-46.82339478 148.34931946]
[-51.69592667 132.69076538]
[-40.37419510 120.82693481]
[-24.50502396 124.96232605]
[-10.18242645 120.50550842]
[0.96889865 106.99078369]
[18.88632584 111.10729218]
[33.11310577 106.35347748]
[47.33988190 101.59966278]
[61.56666183 96.84584808]
[75.79344177 92.09203339]
[81.01447296 89.20580292]
[86.28524017 88.01511383]
[91.15567780 88.39942169]
[95.23038483 90.13058472]
[98.19255829 92.89066315]
[105.37506866 79.72208405]
[112.55757904 66.55349731]
[119.74008179 53.38491440]
[111.85023499 31.50364113]
[123.22258759 11.70835114]
[118.02717590 -2.36316800]
[112.83175659 -16.43468666]
[107.63634491 -30.50620651]
[92.71800232 -28.44292068]
[77.70493317 -29.63532639]
[63.29932404 -34.02765274]
[50.17495728 -41.41446686]
[38.94567490 -51.45026779]
[30.13669395 -63.66566467]
[24.16002846 -77.48932648]
[21.29521751 -92.27468872]
[21.67625046 -107.33021545]
[25.28530884 -121.95172882]
[31.95358849 -135.45536804]
[41.36920547 -147.20951843]
[53.09177017 -156.66444397]
[66.57299805 -163.37789917]
[81.18234253 -167.03590393]
[96.23651123 -167.46734619]
[111.03138733 -164.65206909]
[124.87497711 -158.72172546]
[137.11981201 -149.95370483]
[147.19316101 -138.75808716]
[154.62387085 -125.65852356]
[159.06440735 -111.26770782]
[160.30708313 -96.25872040]
[158.29376221 -81.33354950]
[153.11862183 -67.19028473]
[145.02371216 -54.49042511]
[134.38763428 -43.82797241]
[121.70786285 -35.70162201]
[126.90328217 -21.63010216]
[132.09869385 -7.55858374]
[137.29411316 6.51293564]
[149.82882690 8.62899113]
[159.99340820 16.26299286]
[173.77578735 10.34303093]
[187.55816650 4.42306757]
[201.34056091 -1.49689555]
[200.74230957 -15.76023865]
[205.04980469 -29.33937073]
[213.72389221 -40.60239410]
[225.70199585 -48.20310593]
[239.52818298 -51.24189377]
[253.53015137 -49.37217712]
[266.02154541 -42.83979416]
[275.50494385 -32.45090485]
[289.40750122 -38.08286285]
[303.31005859 -43.71482086]
[317.21261597 -49.34677505]
[331.11517334 -54.97873306]
[338.66894531 -69.13217926]
[354.46981812 -71.90912628]
[366.39672852 -61.17934036]
[365.30038452 -45.17379379]
[352.02175903 -36.17057419]
[336.74713135 -41.07617569]
[322.84457397 -35.44422150]
[308.94201660 -29.81226349]
[295.03945923 -24.18030739]
[281.13690186 -18.54834938]
[281.26409912 -2.73162961]
[275.30966187 11.96352673]
[264.15432739 23.28525925]
[249.47808838 29.48649597]
[233.50741577 29.59450912]
[218.67741394 23.56337929]
[207.26051331 12.28548622]
[193.47813416 18.20544815]
[179.69575500 24.12541199]
[165.91337585 30.04537582]
[165.76454163 38.65380096]
[162.89419556 46.82874298]
[157.56207275 53.72689819]
[150.28367615 58.62527466]
[141.78050232 60.99691772]
[132.90866089 60.56742477]
[125.72615814 73.73600769]
[118.54364777 86.90458679]
[111.36113739 100.07317352]
[107.80638123 114.64587402]
[108.11843109 129.64262390]
[108.43048859 144.63938904]
[108.74254608 159.63613892]
[109.05460358 174.63288879]
[109.36666107 189.62963867]
[109.67871857 204.62640381]
[109.99076843 219.62315369]
[110.30282593 234.61990356]
[124.95781708 238.21067810]
[138.18362427 245.47293091]
[149.07849121 255.91152954]
[156.89959717 268.81472778]
[161.11366272 283.30279541]
[161.43338013 298.38790894]
[157.83695984 313.04150391]
[150.56959534 326.26449585]
[140.12680054 337.15533447]
[127.22056580 344.97146606]
[112.73087311 349.17993164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[27 34]
[28 33]
[45 130]
[46 129]
[47 128]
[48 127]
[50 84]
[51 83]
[52 82]
[53 81]
[86 121]
[87 120]
[88 119]
[89 118]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
