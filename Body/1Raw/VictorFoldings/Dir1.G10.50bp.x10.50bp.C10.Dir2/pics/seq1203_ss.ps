%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCGGCGGGGGGGGGGGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGxxxxxxxxxxUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCCCCCCCCCCCGAAGCCGCCG\
) } def
/len { sequence length } bind def

/coor [
[81.66995239 352.11276245]
[69.57501221 343.07864380]
[60.36687851 331.11566162]
[54.72884369 317.11154175]
[53.07929611 302.10549927]
[55.54064178 287.21105957]
[61.93022537 273.53350830]
[71.77391052 262.08776855]
[84.34121704 253.72325134]
[98.69956970 249.06060791]
[98.07559204 234.07359314]
[97.45161438 219.08657837]
[96.82763672 204.09956360]
[96.20365906 189.11254883]
[95.57968140 174.12553406]
[94.95570374 159.13851929]
[94.33172607 144.15150452]
[93.70774841 129.16448975]
[93.08377838 114.17746735]
[89.22661591 99.68186951]
[82.31961823 86.36671448]
[75.41262054 73.05155945]
[68.50562286 59.73640442]
[61.59862137 46.42124939]
[54.69162369 33.10609436]
[46.57007980 20.49496651]
[37.30513000 8.69832611]
[28.04018211 -3.09831429]
[15.86834526 -11.86452103]
[1.74354196 -16.91327858]
[-12.38126087 -21.96203423]
[-26.50606346 -27.01078987]
[-40.63086700 -32.05954742]
[-54.75566864 -37.10830307]
[-68.88047028 -42.15705872]
[-84.47970581 -39.51611710]
[-93.86013794 -51.08576584]
[-103.29367065 -39.24147797]
[-116.06324005 -31.10411263]
[-130.78370667 -27.55635262]
[-145.85830688 -28.98302841]
[-159.65184021 -35.22938919]
[-170.66810608 -45.61787415]
[-177.71212769 -59.02161789]
[-180.01985168 -73.98668671]
[-177.34091187 -88.88977051]
[-169.96594238 -102.11431122]
[-158.69488525 -112.22579193]
[-144.75036621 -118.12741089]
[-129.64497375 -119.17899323]
[-115.01722717 -115.26647186]
[-102.45383453 -106.81425476]
[-93.31758881 -94.73917389]
[-88.59950256 -80.35103607]
[-88.81137848 -65.21057129]
[-74.22245026 -68.21263123]
[-63.83171844 -56.28186417]
[-49.70691299 -51.23310471]
[-35.58211136 -46.18434906]
[-21.45730782 -41.13559341]
[-7.33250475 -36.08683777]
[6.79229832 -31.03808022]
[20.91710091 -25.98932457]
[11.54709339 -37.70269012]
[4.85913515 -51.12920380]
[1.15428233 -65.66447449]
[0.59930634 -80.65420532]
[3.21918941 -95.42363739]
[8.89599895 -109.30793762]
[17.37419510 -121.68211365]
[28.27213860 -131.98913574]
[41.09926224 -139.76506042]
[55.27816010 -144.65983582]
[70.17057800 -146.45314026]
[85.10614014 -145.06423950]
[99.41252136 -140.55566406]
[112.44574738 -133.13035583]
[123.61911774 -123.12257385]
[132.42967224 -110.98279572]
[138.48080444 -97.25750732]
[141.50013733 -82.56452179]
[141.35174561 -67.56526184]
[138.04232788 -52.93489075]
[131.72082520 -39.33199692]
[122.67182922 -27.36890793]
[111.30265045 -17.58413315]
[98.12507629 -10.41812992]
[83.73229218 -6.19347334]
[68.77217865 -5.10033369]
[53.91815186 -7.18791723]
[39.83682251 -12.36326313]
[49.10177231 -0.56662357]
[58.36672211 11.23001671]
[59.01931763 -3.75578070]
[67.54870605 -16.09472466]
[81.33731842 -22.00015259]
[96.15361786 -19.65976334]
[107.45065308 -9.79179192]
[111.76152802 4.57540751]
[107.76327515 19.03272247]
[96.68291473 29.14339066]
[81.92086029 31.80457306]
[68.00677490 26.19909477]
[74.91378021 39.51425171]
[81.82077789 52.82940674]
[88.72777557 66.14456177]
[95.63477325 79.45971680]
[102.54177094 92.77487183]
[109.94466400 84.51058960]
[120.97990417 79.75527954]
[134.32522583 79.65293884]
[148.96871948 82.90376282]
[163.61222839 86.15458679]
[178.25572205 89.40541840]
[192.89923096 92.65624237]
[206.09460449 83.95809937]
[221.55862427 87.21992493]
[230.11677551 100.50652313]
[226.69163513 115.93519592]
[213.31530762 124.35238647]
[197.92370605 120.76432800]
[189.64840698 107.29974365]
[175.00489807 104.04891968]
[160.36140442 100.79808807]
[145.71789551 97.54726410]
[131.07440186 94.29644012]
[125.32349396 99.11070251]
[127.91144562 113.88576508]
[113.82169342 108.73922729]
[108.07079315 113.55348969]
[108.69477081 128.54051208]
[109.31874847 143.52752686]
[109.94272614 158.51454163]
[110.56670380 173.50155640]
[111.19068146 188.48857117]
[111.81465149 203.47558594]
[112.43862915 218.46260071]
[113.06260681 233.44961548]
[113.68658447 248.43663025]
[128.38282776 251.88960266]
[141.60194397 259.18051147]
[152.36299133 269.76837158]
[159.86740112 282.86746216]
[163.55833435 297.50576782]
[163.16186523 312.59698486]
[158.70744324 327.02130127]
[150.52558899 339.70831299]
[139.22348022 349.71655273]
[125.63977814 356.30331421]
[110.78250885 358.97988892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[26 93]
[27 92]
[28 91]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[37 55]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
