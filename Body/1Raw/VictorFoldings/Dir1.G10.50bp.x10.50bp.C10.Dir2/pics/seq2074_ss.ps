%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGGACUAGGGGGGGGGGACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAxxxxxxxxxxCCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCCCCCCCCCCCGCACGGACUA\
) } def
/len { sequence length } bind def

/coor [
[25.46938705 512.97680664]
[12.24918938 505.70434570]
[1.36238563 495.25732422]
[-6.44874477 482.34808350]
[-10.65162563 467.85678101]
[-10.95969868 452.77142334]
[-7.35195732 438.12060547]
[-0.07438432 424.90322876]
[10.37682343 414.02044678]
[23.28908539 406.21429443]
[37.78202057 402.01702881]
[37.46996689 387.02026367]
[37.15790939 372.02349854]
[36.84585190 357.02676392]
[36.53379822 342.02999878]
[36.22174072 327.03326416]
[35.90968323 312.03649902]
[35.59762955 297.03973389]
[35.28557205 282.04299927]
[34.97351456 267.04623413]
[34.66146088 252.04948425]
[26.59967613 264.69888306]
[14.37243557 273.38766479]
[-0.22488153 276.83996582]
[-15.04887962 274.54885864]
[-27.92288017 266.85079956]
[-36.95653534 254.87611389]
[-40.82338715 240.38310242]
[-38.95564651 225.49984741]
[-31.62756538 212.41171265]
[-19.91515923 203.04049683]
[-5.53821898 198.76223755]
[9.39222336 200.20510864]
[22.68385887 207.15725708]
[32.38501358 218.59786987]
[37.07113647 232.84640503]
[33.01562881 218.51455688]
[44.15881348 207.28334045]
[48.16655350 192.82865906]
[52.17429352 178.37396240]
[56.18203354 163.91928101]
[60.18977356 149.46458435]
[64.19750977 135.00990295]
[68.20525360 120.55521393]
[62.71822357 106.59482574]
[49.94086456 98.73739624]
[37.16350555 90.87997437]
[22.38442802 95.99004364]
[7.79684973 90.35652161]
[0.28858000 76.63938141]
[3.40479469 61.31544113]
[15.67411232 51.62018967]
[31.30333710 52.13143539]
[42.91282654 62.60778046]
[45.02093124 78.10261536]
[57.79829025 85.96003723]
[70.57564545 93.81746674]
[78.50727844 81.40683746]
[90.78200531 74.86579132]
[103.86782837 75.17607117]
[110.49633026 61.72010803]
[117.12482452 48.26414108]
[123.75332642 34.80817795]
[130.38182068 21.35221100]
[117.93319702 12.94117451]
[106.74587250 2.91333842]
[97.02825928 -8.54448414]
[88.96138763 -21.21884155]
[82.69553375 -34.87361526]
[78.34744263 -49.25443268]
[75.99810028 -64.09337616]
[75.69128418 -79.11402130]
[77.43270111 -94.03652191]
[81.18991852 -108.58290100]
[86.89293671 -122.48215485]
[94.43551636 -135.47535706]
[103.67713928 -147.32044983]
[114.44564056 -157.79676819]
[126.54040527 -166.70913696]
[139.73612976 -173.89152527]
[153.78697205 -179.21014404]
[168.43116760 -182.56588745]
[183.39591980 -183.89627075]
[198.40245056 -183.17646790]
[213.17117310 -180.41993713]
[227.42697144 -175.67799377]
[240.90425110 -169.03898621]
[253.35197449 -160.62660217]
[264.53820801 -150.59754944]
[274.25457764 -139.13867188]
[282.32009888 -126.46344757]
[288.58447266 -112.80799866]
[292.93099976 -98.42671204]
[295.27871704 -83.58750916]
[295.58392334 -68.56683350]
[293.84088135 -53.64451599]
[290.08209229 -39.09854889]
[284.37756348 -25.19990730]
[276.83358765 -12.20752335]
[267.59069824 -0.36343223]
[256.82104492 10.11171627]
[244.72531128 19.02277756]
[231.52882385 26.20374107]
[217.47740173 31.52083397]
[202.83283997 34.87500000]
[187.86793518 36.20375061]
[172.86149597 35.48233795]
[158.09307861 32.72419739]
[143.83778381 27.98070908]
[137.20928955 41.43667603]
[130.58079529 54.89263916]
[123.95229340 68.34860229]
[117.32379150 81.80457306]
[123.96773529 90.37096405]
[126.50789642 101.21769714]
[124.24079132 112.43034363]
[117.33472443 121.92286682]
[106.84280396 127.82541656]
[94.54770660 128.84997559]
[82.65994263 124.56295013]
[78.65219879 139.01763916]
[74.64446259 153.47233582]
[70.63671875 167.92701721]
[66.62898254 182.38171387]
[62.62123871 196.83639526]
[58.61349869 211.29107666]
[62.38235092 226.65682983]
[51.52582550 236.85414124]
[49.65821457 251.73742676]
[49.97026825 266.73419189]
[50.28232574 281.73092651]
[50.59438324 296.72769165]
[50.90643692 311.72442627]
[51.21849442 326.72119141]
[51.53055191 341.71795654]
[51.84260559 356.71469116]
[52.15466309 371.71145630]
[52.46672058 386.70822144]
[52.77877426 401.70495605]
[67.43376923 405.29574585]
[80.65957642 412.55798340]
[91.55444336 422.99658203]
[99.37554169 435.89978027]
[103.58961487 450.38784790]
[103.90933228 465.47296143]
[100.31290436 480.12655640]
[93.04553986 493.34957886]
[82.60274506 504.24041748]
[69.69651031 512.05651855]
[55.20682144 516.26501465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[36 128]
[38 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[45 57]
[46 56]
[47 55]
[60 113]
[61 112]
[62 111]
[63 110]
[64 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
