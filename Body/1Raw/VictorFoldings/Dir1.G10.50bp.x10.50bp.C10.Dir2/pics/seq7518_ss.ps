%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUAUCUGCUUCGGGGGGGGGGCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACxxxxxxxxxxUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUACCCCCCCCCCUUCUUUAUCUGCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.02166748 425.46194458]
[70.58479309 421.22247314]
[57.21125412 414.32717896]
[45.38450623 405.02529907]
[35.53207397 393.65313721]
[28.01011658 380.62176514]
[23.09054756 366.40228271]
[20.95120811 351.50866699]
[21.66943169 336.47933960]
[25.21925735 321.85760498]
[31.47235870 308.17199707]
[40.20269394 295.91729736]
[51.09466171 285.53646851]
[63.75452805 277.40478516]
[77.72463989 271.81619263]
[92.50000000 268.97274780]
[92.50000000 253.97273254]
[92.50000000 238.97273254]
[92.50000000 223.97273254]
[92.50000000 208.97273254]
[92.50000000 193.97273254]
[92.50000000 178.97273254]
[92.50000000 163.97273254]
[92.50000000 148.97273254]
[92.50000000 133.97273254]
[72.38142395 121.15682220]
[65.24627686 98.39514160]
[50.76372147 94.48929596]
[36.28116608 90.58345795]
[21.79861259 86.67761993]
[8.21271324 94.29740143]
[-6.41901684 90.13001251]
[-13.59959126 77.13097382]
[-28.08214569 73.22513580]
[-42.56470108 69.31929779]
[-51.71717834 70.10532379]
[-57.29029846 65.19337463]
[-71.69388580 61.00569916]
[-80.18441010 73.52632904]
[-92.12970734 82.80884552]
[-106.35949707 87.94383240]
[-121.47970581 88.42822266]
[-136.00898743 84.21455383]
[-148.52392578 75.71564484]
[-157.79843140 63.76412964]
[-162.92388916 49.53089523]
[-163.39814758 34.41037369]
[-159.17474365 19.88391113]
[-150.66744995 7.37466860]
[-138.70973206 -1.89182794]
[-124.47306061 -7.00774097]
[-109.35221863 -7.47186565]
[-94.82859802 -3.23873186]
[-82.32505798 5.27694130]
[-73.06657410 17.24087524]
[-67.96019745 31.48096466]
[-67.50621033 46.60211182]
[-53.10261917 50.78978729]
[-38.65885925 54.83673859]
[-24.17630577 58.74258041]
[-9.69375038 62.64842224]
[3.04919529 55.02261353]
[17.79220581 58.77738190]
[25.70445251 72.19506073]
[40.18700790 76.10089874]
[54.66956329 80.00674438]
[69.15212250 83.91258240]
[75.56069183 72.65717316]
[86.10530090 64.03548431]
[99.67756653 59.56375122]
[99.97024536 44.56660843]
[100.26291656 29.56946182]
[100.55559540 14.57231808]
[86.50132751 8.84152794]
[75.46899414 -1.58210552]
[68.95063782 -15.28887177]
[67.82780457 -30.42504311]
[72.25234985 -44.94357681]
[81.62589264 -56.88095856]
[94.68074036 -64.62275696]
[109.65132904 -67.12196350]
[124.51300049 -64.04057312]
[137.25585938 -55.79531479]
[146.15650940 -43.50130081]
[150.01123047 -28.82119370]
[148.29870605 -13.74035645]
[141.25051880 -0.29834789]
[129.81990051 9.68691063]
[115.55274200 14.86499405]
[115.26006317 29.86213875]
[114.96738434 44.85928345]
[114.67471313 59.85642624]
[127.64063263 67.39863586]
[140.53234863 59.73028564]
[153.42407227 52.06193924]
[166.31579590 44.39358902]
[179.13208008 36.59983063]
[191.87171936 28.68140221]
[204.61137390 20.76297379]
[217.35101318 12.84454536]
[215.66487122 -2.32515168]
[220.73571777 -16.72131157]
[231.55668640 -27.48556519]
[245.97930908 -32.48066330]
[261.13992310 -30.71482468]
[274.02841187 -22.53865814]
[282.08575439 -9.57554626]
[283.71212769 5.60067320]
[278.58462524 19.97675133]
[267.72134399 30.69831085]
[253.27917480 35.63657379]
[238.12562561 33.81104660]
[225.26943970 25.58418846]
[212.52980042 33.50261688]
[199.79014587 41.42104340]
[187.05050659 49.33947372]
[183.00929260 55.57287979]
[173.98414612 57.28530884]
[161.09242249 64.95365906]
[148.20069885 72.62200928]
[135.30897522 80.29035187]
[136.61082458 91.37034607]
[134.75372314 101.60485840]
[149.23628235 105.51070404]
[163.71882629 109.41654205]
[179.41825867 104.67731476]
[191.18539429 116.09951019]
[186.91522217 131.93293762]
[171.00053406 135.88954163]
[159.81298828 123.89910126]
[145.33042908 119.99325562]
[130.84788513 116.08741760]
[126.63388824 122.38375854]
[121.15682220 127.61857605]
[114.67641449 131.54360962]
[107.50000000 133.97273254]
[107.50000000 148.97273254]
[107.50000000 163.97273254]
[107.50000000 178.97273254]
[107.50000000 193.97273254]
[107.50000000 208.97273254]
[107.50000000 223.97273254]
[107.50000000 238.97273254]
[107.50000000 253.97273254]
[107.50000000 268.97274780]
[122.27536011 271.81619263]
[136.24546814 277.40478516]
[148.90533447 285.53646851]
[159.79730225 295.91729736]
[168.52763367 308.17199707]
[174.78074646 321.85760498]
[178.33056641 336.47933960]
[179.04879761 351.50866699]
[176.90945435 366.40228271]
[171.98988342 380.62176514]
[164.46792603 393.65313721]
[154.61549377 405.02529907]
[142.78874207 414.32717896]
[129.41520691 421.22247314]
[114.97833252 425.46194458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[27 67]
[28 66]
[29 65]
[30 64]
[33 61]
[34 60]
[35 59]
[37 58]
[38 57]
[70 92]
[71 91]
[72 90]
[73 89]
[93 121]
[94 120]
[95 119]
[96 118]
[97 116]
[98 115]
[99 114]
[100 113]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
