%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCCUGGGGGGGGGGGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUxxxxxxxxxxCAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCCCCCCCCCCCACCUUGG\
) } def
/len { sequence length } bind def

/coor [
[79.18392944 148.21990967]
[66.44388580 140.40367126]
[56.42148590 129.31521606]
[49.92840958 115.85260010]
[47.49051666 101.10610962]
[49.30525208 86.27003479]
[55.22564316 72.54592896]
[64.77220917 61.04525757]
[77.17179108 52.69944763]
[91.42018127 48.18440247]
[91.10813141 33.18764877]
[90.79607391 18.19089699]
[90.48401642 3.19414306]
[90.17195892 -11.80261040]
[89.85990143 -26.79936409]
[89.54784393 -41.79611969]
[89.23579407 -56.79287338]
[88.92373657 -71.78962708]
[88.61167908 -86.78637695]
[88.29962158 -101.78313446]
[87.98756409 -116.77988434]
[72.99355316 -117.33237457]
[58.05627060 -118.74778748]
[43.22534561 -121.02141571]
[28.55004501 -124.14570618]
[14.07911396 -128.11029053]
[-0.13937347 -132.90197754]
[-14.05818462 -138.50486755]
[-27.63108253 -144.90036011]
[-40.81298065 -152.06716919]
[-53.56008530 -159.98152161]
[-65.83005524 -168.61712646]
[-77.58213043 -177.94528198]
[-88.77727509 -187.93499756]
[-99.37828827 -198.55310059]
[-109.34996796 -209.76431274]
[-118.65918732 -221.53140259]
[-127.27500916 -233.81526184]
[-135.16882324 -246.57510376]
[-142.31440735 -259.76852417]
[-148.68801880 -273.35168457]
[-154.26849365 -287.27951050]
[-159.03727722 -301.50570679]
[-162.97854614 -315.98300171]
[-166.07920837 -330.66329956]
[-168.32894897 -345.49789429]
[-169.72029114 -360.43740845]
[-170.24864197 -375.43231201]
[-169.91221619 -390.43270874]
[-168.71214294 -405.38885498]
[-166.65242004 -420.25097656]
[-163.73986816 -434.96978760]
[-159.98417664 -449.49630737]
[-155.39781189 -463.78234863]
[-149.99601746 -477.78045654]
[-143.79675293 -491.44406128]
[-136.82057190 -504.72784424]
[-129.09068298 -517.58764648]
[-120.63275146 -529.98077393]
[-111.47487640 -541.86602783]
[-101.64746857 -553.20391846]
[-91.18318939 -563.95678711]
[-80.11679840 -574.08892822]
[-68.48504639 -583.56671143]
[-56.32658386 -592.35858154]
[-43.68179703 -600.43542480]
[-30.59268570 -607.77032471]
[-17.10273743 -614.33898926]
[-3.25676155 -620.11950684]
[10.89924622 -625.09277344]
[25.31826019 -629.24218750]
[39.95238113 -632.55401611]
[54.75299835 -635.01721191]
[69.67094421 -636.62365723]
[84.65666199 -637.36798096]
[99.66036987 -637.24768066]
[114.63222504 -636.26324463]
[129.52249146 -634.41778564]
[144.28172302 -631.71759033]
[158.86087036 -628.17156982]
[173.21150208 -623.79150391]
[187.28594971 -618.59191895]
[201.03746033 -612.59014893]
[214.42036438 -605.80609131]
[227.39019775 -598.26226807]
[239.90386963 -589.98376465]
[251.91979980 -580.99804688]
[263.39810181 -571.33502197]
[274.30062866 -561.02673340]
[284.59115601 -550.10742188]
[294.23553467 -538.61346436]
[303.20166016 -526.58288574]
[311.45980835 -514.05578613]
[318.98254395 -501.07369995]
[325.74484253 -487.67977905]
[331.72424316 -473.91851807]
[336.90090942 -459.83563232]
[341.25762939 -445.47787476]
[344.77993774 -430.89300537]
[347.45614624 -416.12939453]
[349.27731323 -401.23614502]
[350.23745728 -386.26269531]
[350.33331299 -371.25881958]
[349.56463623 -356.27435303]
[347.93392944 -341.35903931]
[345.44665527 -326.56243896]
[342.11102295 -311.93371582]
[337.93814087 -297.52148438]
[332.94189453 -283.37356567]
[327.13882446 -269.53701782]
[320.54824829 -256.05776978]
[313.19207764 -242.98060608]
[305.09469604 -230.34898376]
[296.28302002 -218.20483398]
[286.78634644 -206.58851624]
[276.63619995 -195.53862000]
[265.86630249 -185.09184265]
[254.51245117 -175.28289795]
[242.61231995 -166.14436340]
[230.20547485 -157.70658875]
[217.33311462 -149.99763489]
[204.03800964 -143.04307556]
[190.36431885 -136.86602783]
[176.35746765 -131.48701477]
[162.06398010 -126.92389679]
[147.53135681 -123.19184113]
[132.80784607 -120.30323792]
[117.94237518 -118.26768494]
[102.98432159 -117.09194183]
[103.29637909 -102.09519196]
[103.60842896 -87.09843445]
[103.92048645 -72.10168457]
[104.23254395 -57.10492706]
[104.54460144 -42.10817337]
[104.85665894 -27.11142159]
[105.16871643 -12.11466694]
[105.48076630 2.88208675]
[105.79282379 17.87883949]
[106.10488129 32.87559509]
[106.41693878 47.87234879]
[120.84081268 51.79077148]
[133.57684326 59.61355591]
[143.59355164 70.70714569]
[150.07972717 84.17309570]
[152.51004028 98.92083740]
[150.68769836 113.75597382]
[144.76026917 127.47704315]
[135.20779419 138.97280884]
[122.80393219 147.31225586]
[108.55322266 151.81999207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
