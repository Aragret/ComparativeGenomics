%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCCCUUAGGGGGGGGGGCGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAxxxxxxxxxxACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUCCCCCCCCCCUCCACCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[95.29535675 385.19952393]
[81.27341461 379.64651489]
[69.07345581 370.78018188]
[59.46238327 359.15786743]
[53.04435730 345.51019287]
[50.22282028 330.69500732]
[51.17513657 315.64361572]
[55.84144211 301.30218506]
[63.92840958 288.57223511]
[74.92768097 278.25396729]
[88.14784241 270.99600220]
[102.75785828 267.25454712]
[102.75785828 252.25454712]
[102.75785828 237.25454712]
[102.75785828 222.25454712]
[102.75785828 207.25454712]
[102.75785828 192.25454712]
[102.75785828 177.25454712]
[102.75785828 162.25454712]
[102.75785828 147.25454712]
[102.75785828 132.25454712]
[76.63818359 117.73410034]
[75.37338257 90.80113983]
[63.40312576 81.76161957]
[51.43286514 72.72209930]
[39.46260834 63.68257904]
[25.31529236 58.69725418]
[10.32240582 58.23532867]
[-4.67047977 57.77340317]
[-19.66336632 57.31147766]
[-24.99881172 71.48228455]
[-34.64834595 83.15126801]
[-47.56525421 91.05267334]
[-62.34841156 94.32940674]
[-77.39424896 92.62602997]
[-91.07070923 86.12732697]
[-101.89427185 75.53821564]
[-108.69087219 62.00732803]
[-110.72327423 47.00239182]
[-107.77101135 32.15103531]
[-100.15432739 19.06421471]
[-88.69941711 9.16149616]
[-74.64883423 3.51705098]
[-59.52666855 2.74314594]
[-44.97327042 6.92372894]
[-32.56727600 15.60532093]
[-23.65439987 27.84620857]
[-19.20143890 42.31859207]
[-4.20855379 42.78051758]
[10.78433228 43.24244308]
[25.77721786 43.70436859]
[13.31531239 35.35566330]
[2.68264413 24.77519035]
[-5.72729111 12.35452366]
[-11.60325527 -1.44667387]
[-14.72778893 -16.11764145]
[-14.98525810 -31.11543083]
[-12.36613369 -45.88500214]
[-6.96734715 -59.87975311]
[1.01130366 -72.58176422]
[11.27454090 -83.52095795]
[23.44254112 -92.29249573]
[37.06498337 -98.57174683]
[51.63772964 -102.12633514]
[66.62146759 -102.82470703]
[81.46166229 -100.64102173]
[95.60911560 -95.65608978]
[108.54025269 -88.05439758]
[119.77651215 -78.11726379]
[128.90205383 -66.21246338]
[135.57916260 -52.78054810]
[139.56072998 -38.31863022]
[140.69940186 -23.36191177]
[138.95304871 -8.46391773]
[134.38627625 5.82400227]
[127.16812134 18.97307587]
[117.56569672 30.49667931]
[105.93437195 39.96834183]
[92.70461273 47.03753662]
[78.36602783 51.44263840]
[63.44926453 53.02062988]
[48.50212860 51.71231842]
[60.47238541 60.75183868]
[72.44264221 69.79135895]
[84.41290283 78.83087921]
[89.82968903 75.75842285]
[95.81719971 74.04631805]
[102.03943634 73.79064941]
[108.14722443 75.00576019]
[113.79782104 77.62345886]
[124.98611450 67.63236237]
[136.17440796 57.64126587]
[133.64958191 42.42190933]
[139.77474976 28.26260757]
[152.59539795 19.68153954]
[168.02049255 19.41689491]
[181.12794495 27.55311966]
[187.73521423 41.49397659]
[185.73396301 56.79098511]
[175.76275635 68.56292725]
[161.00338745 73.05342102]
[146.16551208 68.82956696]
[134.97721863 78.82066345]
[123.78891754 88.81175995]
[129.18341064 97.06713867]
[131.44979858 107.67279816]
[146.27229309 109.97367096]
[161.09477234 112.27454376]
[170.11810303 110.49263763]
[176.19670105 114.77783966]
[190.96881104 117.38256073]
[205.74092102 119.98728943]
[214.22181702 107.33839417]
[227.11770630 99.23803711]
[242.19432068 97.08965302]
[256.83953857 101.26546478]
[268.51599121 111.04198456]
[275.20065308 124.72537231]
[275.73538208 139.94490051]
[270.02752686 154.06369019]
[259.06600952 164.63557434]
[244.74995422 169.82891846]
[229.55973816 168.74392700]
[216.12715149 161.56860352]
[206.77944946 149.54611206]
[203.13619995 134.75939941]
[188.36408997 132.15467834]
[173.59197998 129.54995728]
[158.79389954 127.09703064]
[143.97140503 124.79615021]
[129.14892578 122.49527740]
[117.75785828 132.25454712]
[117.75785828 147.25454712]
[117.75785828 162.25454712]
[117.75785828 177.25454712]
[117.75785828 192.25454712]
[117.75785828 207.25454712]
[117.75785828 222.25454712]
[117.75785828 237.25454712]
[117.75785828 252.25454712]
[117.75785828 267.25454712]
[132.36787415 270.99600220]
[145.58802795 278.25396729]
[156.58729553 288.57223511]
[164.67427063 301.30218506]
[169.34057617 315.64361572]
[170.29289246 330.69500732]
[167.47135925 345.51019287]
[161.05332947 359.15786743]
[151.44226074 370.78018188]
[139.24229431 379.64651489]
[125.22035217 385.19952393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 85]
[24 84]
[25 83]
[26 82]
[27 51]
[28 50]
[29 49]
[30 48]
[90 104]
[91 103]
[92 102]
[106 131]
[107 130]
[108 129]
[110 128]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
