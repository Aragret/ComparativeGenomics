%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACAUAGGGGGGGGGGAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCxxxxxxxxxxUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCCCCCCCCCCCACAACAAAUA\
) } def
/len { sequence length } bind def

/coor [
[80.95862579 364.81967163]
[69.07434845 355.54455566]
[59.75564194 343.69445801]
[53.54427719 329.95828247]
[50.80137634 315.13464355]
[51.68640518 300.08538818]
[56.14791107 285.68545532]
[63.92650986 272.77203369]
[74.56996155 262.09585571]
[87.45947266 254.27767944]
[101.84565735 249.77200317]
[100.91002655 234.80122375]
[99.97440338 219.83042908]
[99.03877258 204.85963440]
[98.10314178 189.88883972]
[97.16751862 174.91804504]
[96.23188782 159.94726562]
[95.29625702 144.97647095]
[94.36062622 130.00567627]
[93.42500305 115.03488159]
[81.31779480 95.91693878]
[100.39488220 78.16690826]
[95.19947052 64.09538269]
[80.05928802 64.11097717]
[65.85395050 58.95536041]
[54.29135895 49.26893997]
[46.75465775 36.23558807]
[44.13676453 21.43801880]
[46.73463821 6.66555929]
[54.21572113 -6.30218935]
[65.66037750 -15.90974712]
[60.46496201 -29.98126602]
[55.26954651 -44.05278397]
[50.07413101 -58.12430573]
[44.87871552 -72.19582367]
[39.97021103 -76.77993774]
[38.39982986 -82.32657623]
[39.77322388 -86.96223450]
[35.16765976 -101.23769379]
[30.56209373 -115.51315308]
[15.85167122 -112.50205994]
[0.89928436 -111.12754059]
[-14.11355972 -111.40628052]
[-29.00461960 -113.33489227]
[-43.59312820 -116.88996887]
[-57.70199966 -122.02835083]
[-71.15995789 -128.68766785]
[-83.80364990 -136.78706360]
[-95.47957611 -146.22825623]
[-106.04600525 -156.89660645]
[-115.37467957 -168.66261292]
[-123.35234833 -181.38346863]
[-129.88217163 -194.90472412]
[-134.88488770 -209.06227112]
[-138.29977417 -223.68423462]
[-140.08535767 -238.59312439]
[-140.21997070 -253.60794067]
[-138.70199585 -268.54644775]
[-135.54983521 -283.22729492]
[-130.80177307 -297.47225952]
[-124.51542664 -311.10842896]
[-116.76712799 -323.97027588]
[-107.65091705 -335.90164185]
[-97.27746582 -346.75775146]
[-85.77269745 -356.40676880]
[-73.27626801 -364.73156738]
[-59.93986893 -371.63110352]
[-45.92539978 -377.02163696]
[-31.40297699 -380.83770752]
[-16.54889107 -383.03302002]
[-1.54345798 -383.58090210]
[13.43117046 -382.47470093]
[28.19321632 -379.72784424]
[42.56348419 -375.37368774]
[56.36752701 -369.46508789]
[69.43778229 -362.07376099]
[81.61557770 -353.28942871]
[92.75310516 -343.21875000]
[102.71514893 -331.98394775]
[111.38078308 -319.72140503]
[118.64481354 -306.57998657]
[124.41907501 -292.71920776]
[128.63345337 -278.30731201]
[131.23680115 -263.51928711]
[132.19750977 -248.53462219]
[131.50392151 -233.53521729]
[129.16447449 -218.70315552]
[125.20752716 -204.21847534]
[119.68113708 -190.25701904]
[112.65239716 -176.98826599]
[104.20661163 -164.57327271]
[94.44631195 -153.16276550]
[83.48998260 -142.89524841]
[71.47062683 -133.89533997]
[58.53413391 -126.27232361]
[44.83755493 -120.11872101]
[49.44311905 -105.84326172]
[54.04868317 -91.56779480]
[58.95023346 -77.39124298]
[64.14565277 -63.31972122]
[69.34106445 -49.24819946]
[74.53648376 -35.17668152]
[79.73189545 -21.10516167]
[94.67401886 -21.23999977]
[108.78716278 -16.24516106]
[120.36150360 -6.70529699]
[127.98783875 6.24308538]
[130.72906494 21.04699516]
[128.23536682 35.92320633]
[120.78868866 49.07307053]
[109.27098846 58.89997101]
[114.46640778 72.97148895]
[125.55771637 83.07013702]
[140.05331421 86.92729950]
[154.54891968 90.78446198]
[166.50561523 80.89421082]
[181.99420166 79.95441437]
[195.05900574 88.32643127]
[200.67633057 102.79105377]
[196.68620300 117.78633881]
[184.62292480 127.54628754]
[169.12504578 128.31800842]
[156.15184021 119.80476379]
[150.69175720 105.28005219]
[136.19615173 101.42289734]
[121.70056152 97.56573486]
[117.12687683 108.50683594]
[108.39579010 114.09925842]
[109.33142090 129.07005310]
[110.26705170 144.04083252]
[111.20267487 159.01162720]
[112.13830566 173.98242188]
[113.07393646 188.95321655]
[114.00956726 203.92401123]
[114.94519043 218.89479065]
[115.88082123 233.86558533]
[116.81645203 248.83638000]
[131.65168762 251.51579285]
[145.41432190 257.66830444]
[157.30421448 266.93618774]
[166.63009644 278.78067017]
[172.84979248 292.51306152]
[175.60168457 307.33502197]
[174.72576904 322.38482666]
[170.27299500 336.78747559]
[162.50222778 349.70559692]
[151.86524963 360.38821411]
[138.98048401 368.21420288]
[124.59703827 372.72860718]
[109.55113220 373.66894531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[22 112]
[23 111]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[38 98]
[39 97]
[40 96]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
