%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUUUCAGGGGGGGGGGCUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCxxxxxxxxxxCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCCCCCCCCCCCUUCCA\
) } def
/len { sequence length } bind def

/coor [
[87.54787445 363.89178467]
[73.70193481 357.87576294]
[61.99327087 348.34634399]
[53.29074860 336.01068115]
[48.24014664 321.78417969]
[47.21625519 306.72247314]
[50.29505157 291.94332886]
[57.24807358 278.54339600]
[67.55935669 267.51705933]
[80.46373749 259.68255615]
[95.00362396 255.62124634]
[95.00362396 240.62124634]
[95.00362396 225.62124634]
[95.00362396 210.62124634]
[95.00362396 195.62124634]
[95.00362396 180.62124634]
[95.00362396 165.62124634]
[95.00362396 150.62124634]
[95.00362396 135.62124634]
[95.00362396 120.62123871]
[89.02622223 134.37881470]
[74.83740997 139.24479675]
[61.67489624 132.05117798]
[58.10818481 117.48138428]
[66.45940399 105.02116394]
[81.29102325 102.78266907]
[66.79542542 98.92551422]
[52.26049423 95.21935272]
[37.68778992 91.66458893]
[31.14328384 93.17354584]
[25.66593552 91.37634277]
[22.58906746 87.64694214]
[8.17685127 83.48905945]
[-6.23536444 79.33116913]
[-20.64758110 75.17327881]
[-35.05979538 71.01539612]
[-49.47201157 66.85750580]
[-58.92668152 78.76035309]
[-72.21910095 86.13462830]
[-87.32228088 87.85581970]
[-101.93308258 83.66145325]
[-113.82347870 74.19113159]
[-121.18026733 60.88902664]
[-122.88159180 45.78359604]
[-118.66800690 31.17831993]
[-109.18205261 19.30039024]
[-95.87027740 11.96110821]
[-80.76262665 10.27965927]
[-66.16290283 14.51245403]
[-54.29746246 24.01402092]
[-46.97570038 37.33543777]
[-45.31412506 52.44528961]
[-30.90190887 56.60317993]
[-16.48969269 60.76106644]
[-2.07747722 64.91895294]
[12.33473873 69.07684326]
[26.74695587 73.23472595]
[41.24254990 77.09188843]
[55.81525421 80.64665222]
[63.10603333 79.16670990]
[70.65258789 84.42991638]
[85.14818573 88.28707886]
[99.68312073 84.58091736]
[110.56194305 74.25370789]
[121.44077301 63.92650604]
[129.16485596 51.06810379]
[133.17259216 36.61341476]
[137.18034363 22.15872574]
[141.18807983 7.70403719]
[145.19581604 -6.75065088]
[133.51855469 2.66431713]
[118.94058228 6.19738102]
[104.24860382 3.17316079]
[92.25115204 -5.83023453]
[85.24165344 -19.09171677]
[84.56004333 -34.07622147]
[90.33660889 -47.91931534]
[101.46711731 -57.97475052]
[115.82385254 -62.32033539]
[130.66238403 -60.12536621]
[143.14619446 -51.80943298]
[150.88885498 -38.96220779]
[152.41046143 -24.04103851]
[159.86537170 -37.05735016]
[167.32028198 -50.07365799]
[164.51882935 -65.87022400]
[175.23011780 -77.81375885]
[191.23733521 -76.74221802]
[200.26113892 -63.47758484]
[195.37924194 -48.19535446]
[180.33659363 -42.61874771]
[172.88168335 -29.60243797]
[165.42677307 -16.58612823]
[159.65051270 -2.74291086]
[155.64276123 11.71177769]
[151.63502502 26.16646576]
[147.62728882 40.62115479]
[143.61953735 55.07584381]
[154.59075928 44.84684753]
[167.53106689 37.26078033]
[181.81575012 32.68387985]
[196.75517273 31.33710670]
[211.62809753 33.28547668]
[225.71649170 38.43492889]
[238.34022522 46.53686523]
[248.88986206 57.20013809]
[256.85604858 69.90995789]
[261.85427856 84.05272675]
[263.64315796 98.94567871]
[262.13638306 113.86980438]
[257.40670776 128.10461426]
[249.68241882 140.96290588]
[239.33645630 151.82389832]
[226.86828613 160.16323853]
[212.87983704 165.57835388]
[198.04644775 167.80780029]
[183.08421326 166.74395752]
[168.71549988 162.43817139]
[155.63395691 155.09832764]
[144.47114563 145.07876587]
[135.76597595 132.86320496]
[129.93870544 119.04137421]
[127.27066040 104.28056335]
[127.89064789 89.29338074]
[131.76797485 74.80532837]
[120.88915253 85.13253784]
[110.01032257 95.45973969]
[113.96284485 99.44714355]
[115.94706726 105.76085663]
[114.81848145 113.33877563]
[110.00362396 120.62123871]
[110.00362396 135.62124634]
[110.00362396 150.62124634]
[110.00362396 165.62124634]
[110.00362396 180.62124634]
[110.00362396 195.62124634]
[110.00362396 210.62124634]
[110.00362396 225.62124634]
[110.00362396 240.62124634]
[110.00362396 255.62124634]
[124.54351044 259.68255615]
[137.44789124 267.51705933]
[147.75918579 278.54339600]
[154.71220398 291.94332886]
[157.79100037 306.72247314]
[156.76710510 321.78417969]
[151.71650696 336.01068115]
[143.01397705 348.34634399]
[131.30531311 357.87576294]
[117.45938110 363.89178467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 62]
[27 61]
[28 59]
[29 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[63 127]
[64 126]
[65 125]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
