%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCAACAAGGGGGGGGGGUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUxxxxxxxxxxCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCCCCCCCCCCCUCAUCAACAA\
) } def
/len { sequence length } bind def

/coor [
[93.99273682 534.05029297]
[79.97079468 528.49731445]
[67.77083588 519.63098145]
[58.15976334 508.00863647]
[51.74173737 494.36093140]
[48.92020035 479.54574585]
[49.87251663 464.49438477]
[54.53882217 450.15295410]
[62.62578964 437.42300415]
[73.62506104 427.10473633]
[86.84522247 419.84674072]
[101.45523071 416.10531616]
[101.45523071 401.10531616]
[101.45523071 386.10531616]
[101.45523071 371.10531616]
[101.45523071 356.10531616]
[101.45523071 341.10531616]
[101.45523071 326.10531616]
[101.45523071 311.10531616]
[101.45523071 296.10531616]
[101.45523071 281.10531616]
[101.30123901 266.10610962]
[100.99326324 251.10926819]
[100.68527985 236.11242676]
[84.42837524 231.05374146]
[70.84149933 220.75282288]
[61.55456543 206.42449951]
[57.68876266 189.76795959]
[59.72119904 172.76524353]
[67.42611694 157.44541931]
[79.89979553 145.64242554]
[95.66657257 138.77554321]
[94.43595886 123.82611084]
[93.20534515 108.87667847]
[91.82131958 93.94066620]
[90.28402710 79.01965332]
[88.74673462 64.09863281]
[87.20944214 49.17761612]
[73.42712402 47.05548096]
[60.57122040 41.67920303]
[49.39725113 33.36992264]
[40.56063461 22.62100601]
[34.57825851 10.06873131]
[31.79823112 -3.54536223]
[32.37963486 -17.41828156]
[36.28343201 -30.73295021]
[43.27505112 -42.70631790]
[52.93845749 -52.63542938]
[64.70093536 -59.93867874]
[77.86700439 -64.18988800]
[76.94359589 -79.16143799]
[76.02017975 -94.13298798]
[75.09676361 -109.10453796]
[61.78674316 -113.95324707]
[51.36945724 -123.48840332]
[45.40184021 -136.23999023]
[44.75859451 -150.26074219]
[49.50412750 -163.42353821]
[58.88781357 -173.74406433]
[71.46251678 -179.67994690]
[70.84669495 -194.66731262]
[70.23086548 -209.65466309]
[69.61504364 -224.64201355]
[61.31769562 -238.11289978]
[68.52595520 -251.14709473]
[67.91013336 -266.13446045]
[67.29430389 -281.12179565]
[66.67848206 -296.10916138]
[52.39564896 -301.31195068]
[41.19443893 -311.58819580]
[34.78295517 -325.37084961]
[34.13890457 -340.55813599]
[39.36049271 -354.83410645]
[49.65147018 -366.02178955]
[63.44253922 -372.41513062]
[78.63066101 -373.03921509]
[92.89974976 -367.79885864]
[104.07388306 -357.49316406]
[110.44908905 -343.69369507]
[111.05317688 -328.50476074]
[105.79405212 -314.24258423]
[95.47367096 -303.08203125]
[81.66583252 -296.72497559]
[82.28166199 -281.73760986]
[82.89748383 -266.75027466]
[83.51330566 -251.76292419]
[91.76660156 -239.36402893]
[84.60239410 -225.25784302]
[85.21821594 -210.27049255]
[85.83404541 -195.28312683]
[86.44986725 -180.29577637]
[101.21514893 -174.26000977]
[111.91999817 -162.35598755]
[116.39232635 -146.92353821]
[113.69181061 -131.02580261]
[104.30710602 -117.84117126]
[90.06831360 -110.02795410]
[90.99172974 -95.05640411]
[91.91514587 -80.08485413]
[92.83855438 -65.11330414]
[108.60908508 -61.76397705]
[122.82342529 -54.12667465]
[134.34095764 -42.80540466]
[142.23498535 -28.70015526]
[145.86732483 -12.93533897]
[144.93983459 3.22983956]
[139.51895142 18.50195694]
[130.03092957 31.65686417]
[117.22835541 41.63780975]
[102.13046265 47.64032364]
[103.66774750 62.56134033]
[105.20503998 77.48236084]
[106.74233246 92.40337372]
[110.65670776 99.51109314]
[108.15477753 107.64606476]
[109.38539124 122.59550476]
[110.61600494 137.54493713]
[123.43535614 140.20515442]
[135.10678101 146.10729980]
[144.82728577 154.83741760]
[151.93017578 165.78723145]
[155.93072510 178.19653320]
[156.55935669 191.20602417]
[153.77967834 203.91674805]
[147.79063416 215.45222473]
[139.01213074 225.01895142]
[128.05577087 231.96086121]
[115.68212128 235.80444336]
[115.99009705 250.80128479]
[116.29807281 265.79812622]
[119.61979675 274.37493896]
[116.45523071 281.10531616]
[116.45523071 296.10531616]
[116.45523071 311.10531616]
[116.45523071 326.10531616]
[116.45523071 341.10531616]
[116.45523071 356.10531616]
[116.45523071 371.10531616]
[116.45523071 386.10531616]
[116.45523071 401.10531616]
[116.45523071 416.10531616]
[131.06524658 419.84674072]
[144.28540039 427.10473633]
[155.28468323 437.42300415]
[163.37164307 450.15295410]
[168.03794861 464.49438477]
[168.99026489 479.54574585]
[166.16873169 494.36093140]
[159.75070190 508.00863647]
[150.13963318 519.63098145]
[137.93968201 528.49731445]
[123.91773224 534.05029297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 130]
[23 129]
[24 128]
[32 117]
[33 116]
[34 115]
[35 113]
[36 112]
[37 111]
[38 110]
[50 100]
[51 99]
[52 98]
[53 97]
[60 91]
[61 90]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[68 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
