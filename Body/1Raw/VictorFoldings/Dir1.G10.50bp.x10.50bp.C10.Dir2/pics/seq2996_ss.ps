%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAUUCUAGGGGGGGGGGGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCxxxxxxxxxxCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCCCCCCCCCCCUCCUAUUCUUG\
) } def
/len { sequence length } bind def

/coor [
[88.38306427 442.65081787]
[77.17858887 432.57330322]
[68.60066223 420.18313599]
[63.11188126 406.14852905]
[61.00825500 391.22634888]
[62.40322113 376.22134399]
[67.22155762 361.94265747]
[75.20341492 349.16036987]
[85.91834259 338.56381226]
[98.78849030 330.72445679]
[113.11980438 326.06500244]
[111.88919067 311.11557007]
[110.65857697 296.16613770]
[109.42796326 281.21670532]
[108.19734955 266.26727295]
[106.96673584 251.31784058]
[105.73612976 236.36840820]
[104.50551605 221.41897583]
[103.27490234 206.46952820]
[101.89087677 191.53352356]
[100.35358429 176.61250305]
[98.81629181 161.69148254]
[97.27899933 146.77047729]
[95.74170685 131.84945679]
[86.89759827 130.11073303]
[78.70186615 125.91374207]
[71.83744812 119.48847198]
[66.90825653 111.25422668]
[64.38690948 101.79302216]
[64.57133484 91.80876923]
[67.55384827 82.07492828]
[53.12646484 77.96997833]
[38.69908142 73.86503601]
[24.27169609 69.76009369]
[9.84431076 65.65514374]
[-1.20762241 76.22879791]
[-15.97072124 79.82708740]
[-30.45646095 75.58094788]
[-40.80267334 64.72682953]
[-44.30321121 50.24884796]
[-58.73059464 46.14390564]
[-73.15798187 42.03895950]
[-87.81681824 48.55800629]
[-101.98625183 41.03425980]
[-104.79669952 25.23929596]
[-94.09223175 13.28965664]
[-78.08439636 14.35208416]
[-69.05303192 27.61157417]
[-54.62564850 31.71652031]
[-40.19826508 35.82146454]
[-29.60037422 25.35483551]
[-15.08989239 21.57305527]
[-0.53856277 25.58867264]
[10.11902046 36.41977310]
[13.94925594 51.22776413]
[28.37664032 55.33270645]
[42.80402374 59.43765259]
[57.23141098 63.54259491]
[71.65879822 67.64754486]
[84.49244690 59.88240433]
[87.55084229 45.19750977]
[85.82202148 38.71261978]
[87.42945099 33.18052673]
[91.04804993 29.97819138]
[94.70674896 15.43123722]
[98.36545563 0.88428271]
[94.22789764 -14.38631535]
[104.83586884 -24.84195137]
[108.49456787 -39.38890457]
[95.06566620 -46.21622467]
[83.49301147 -55.86098480]
[74.35707855 -67.83940125]
[68.11612701 -81.55065155]
[65.08320618 -96.30696869]
[65.41043091 -111.36820221]
[69.08139801 -125.97887421]
[75.91197205 -139.40612793]
[85.55953217 -150.97644043]
[97.54016113 -160.10946655]
[111.25292206 -166.34709167]
[126.00997925 -169.37644958]
[141.07113647 -169.04557800]
[155.68090820 -165.37106323]
[169.10650635 -158.53724670]
[180.67448425 -148.88687134]
[189.80461121 -136.90403748]
[196.03892517 -123.18975830]
[199.06469727 -108.43196869]
[198.73016357 -93.37090302]
[195.05212402 -78.76200867]
[188.21504211 -65.33807373]
[178.56187439 -53.77242661]
[166.57681274 -44.64520645]
[152.86103821 -38.41422272]
[138.10250854 -35.39202499]
[123.04152679 -35.73019791]
[119.38282013 -21.18324471]
[123.78207397 -6.95314264]
[112.91241455 4.54298830]
[109.25370789 19.08994293]
[105.59500122 33.63689804]
[102.23574066 48.25590515]
[99.17734528 62.94080353]
[108.97351074 65.05244446]
[117.58589935 69.63003540]
[124.42914581 76.19857788]
[129.08377075 84.15493774]
[131.32067871 92.82117462]
[146.31990051 92.97517395]
[161.31910706 93.12916565]
[176.31831360 93.28316498]
[186.35432434 81.29098511]
[201.75975037 78.60638428]
[215.26060486 86.49694824]
[220.48219299 101.23699188]
[214.95906067 115.86672211]
[201.29904175 123.47842407]
[185.95199585 120.47808075]
[176.16432190 108.28237152]
[161.16510010 108.12837982]
[146.16589355 107.97438049]
[131.16668701 107.82038116]
[123.74647522 121.64776611]
[110.66271973 130.31216431]
[112.20001221 145.23318481]
[113.73730469 160.15419006]
[115.27459717 175.07521057]
[116.81188965 189.99623108]
[120.82606506 198.27162170]
[118.22433472 205.23892212]
[119.45494843 220.18835449]
[120.68556213 235.13778687]
[121.91617584 250.08721924]
[123.14678192 265.03665161]
[124.37739563 279.98608398]
[125.60800934 294.93551636]
[126.83862305 309.88494873]
[128.06922913 324.83441162]
[142.96957397 327.08752441]
[156.94844055 332.71673584]
[169.25196838 341.41845703]
[179.21664429 352.72341919]
[186.30508423 366.02194214]
[190.13502502 380.59686279]
[190.49992371 395.66217041]
[187.38008118 410.40542603]
[180.94377136 424.03152466]
[171.53808594 435.80563354]
[159.67025757 445.09280396]
[145.98031616 451.39218140]
[131.20652771 454.36404419]
[116.14563751 453.84811401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[40 50]
[41 49]
[42 48]
[60 103]
[61 102]
[64 101]
[65 100]
[66 99]
[68 97]
[69 96]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
