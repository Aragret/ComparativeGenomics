%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGACCUAACCGGGGGGGGGGAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAxxxxxxxxxxCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCCCCCCCCCCCUAGACCAAACC\
) } def
/len { sequence length } bind def

/coor [
[15.06364727 521.88653564]
[1.57476735 515.15502930]
[-9.91073322 505.39047241]
[-18.72510147 493.16055298]
[-24.35588455 479.17636108]
[-26.47571182 464.25088501]
[-24.96134377 449.25189209]
[-19.90081978 435.05139160]
[-11.58835506 422.47494507]
[-0.50722420 412.25381470]
[12.69833088 404.98217773]
[27.26055527 401.08279419]
[26.95257759 386.08596802]
[26.64459991 371.08911133]
[26.33662224 356.09228516]
[26.02864456 341.09545898]
[25.72066689 326.09860229]
[25.41268921 311.10177612]
[25.10471153 296.10491943]
[24.79673386 281.10809326]
[24.48875618 266.11126709]
[17.02018738 279.11972046]
[6.37201118 289.68460083]
[-6.69472647 297.05075073]
[-21.24612427 300.69174194]
[-36.24216843 300.34735107]
[-50.61106873 296.04214478]
[-63.32585526 288.08386230]
[-73.47777557 277.04129028]
[-80.34126282 263.70364380]
[-83.42576599 249.02421570]
[-82.51082611 234.05213928]
[-77.66184998 219.85751343]
[-69.22538757 207.45484924]
[-57.80441666 197.73059082]
[-44.21520615 191.37973022]
[-29.42900658 188.85618591]
[-14.50260925 190.34031677]
[-0.50282967 195.72604370]
[11.56974411 204.62846375]
[20.85226440 216.41128540]
[26.68129539 230.23236084]
[28.64023781 245.09945679]
[34.62853622 231.34663391]
[40.61683273 217.59379578]
[46.60512924 203.84097290]
[52.59342575 190.08815002]
[46.91963196 176.36430359]
[52.79670334 162.33168030]
[67.22999573 156.47354126]
[73.21829224 142.72070312]
[79.20658875 128.96788025]
[69.73236084 118.85136414]
[64.83110809 105.88669586]
[65.24334717 92.03263855]
[70.90677643 79.38232422]
[80.96575165 69.84703064]
[93.90051270 64.86739349]
[107.75681305 65.19574738]
[114.02622223 51.56877136]
[120.29562378 37.94179153]
[126.56503296 24.31481361]
[132.83442688 10.68783474]
[139.10383606 -2.93914437]
[133.85972595 -17.60669327]
[140.41191101 -31.33707809]
[154.42749023 -36.24615097]
[160.69689941 -49.87313080]
[166.96630859 -63.50011063]
[173.23570251 -77.12709045]
[161.57383728 -85.92584229]
[152.01065063 -96.96149445]
[144.96601868 -109.74568176]
[140.74839783 -123.71337891]
[139.54133606 -138.24783325]
[141.39556885 -152.70783997]
[146.22677612 -166.45600891]
[153.81950378 -178.88687134]
[163.83673096 -189.45349121]
[175.83483887 -197.69163513]
[189.28323364 -203.24006653]
[203.58786011 -205.85644531]
[218.11738586 -205.42785645]
[232.23109436 -201.97576904]
[238.77897644 -215.47116089]
[237.06239319 -231.78021240]
[250.48542786 -241.20115662]
[265.23962402 -234.04252625]
[266.14709473 -217.66850281]
[252.27435303 -208.92327881]
[245.72648621 -195.42790222]
[257.81698608 -185.84780884]
[267.48870850 -173.82157898]
[274.25854492 -159.94511414]
[277.78720093 -144.90679932]
[277.89624023 -129.45347595]
[274.57717896 -114.35329437]
[267.99200439 -100.35749817]
[258.46524048 -88.16312408]
[246.46803284 -78.37821198]
[232.59481812 -71.49155426]
[217.53379822 -67.84822845]
[202.03292847 -67.63233185]
[186.86268616 -70.85768127]
[180.59327698 -57.23070526]
[174.32388306 -43.60372543]
[168.05447388 -29.97674561]
[173.44529724 -16.13931084]
[167.28134155 -2.23030519]
[152.73081970 3.33026075]
[146.46141052 16.95723915]
[140.19200134 30.58421898]
[133.92260742 44.21119690]
[127.65319824 57.83817673]
[121.38378906 71.46515656]
[131.65908813 83.59249115]
[135.64356995 98.98008728]
[132.54550171 114.57033539]
[122.98047638 127.26538849]
[108.84912872 134.54267883]
[92.95941925 134.95617676]
[86.97112274 148.70899963]
[80.98282623 162.46183777]
[86.52698517 177.01861572]
[80.25808716 190.88063049]
[66.34625244 196.07644653]
[60.35795593 209.82926941]
[54.36965942 223.58209229]
[48.38136292 237.33493042]
[42.39306641 251.08775330]
[39.48559570 265.80328369]
[39.79357147 280.80010986]
[40.10155106 295.79696655]
[40.40952682 310.79379272]
[40.71750641 325.79061890]
[41.02548218 340.78747559]
[41.33346176 355.78430176]
[41.64143753 370.78115845]
[41.94941711 385.77798462]
[42.25739288 400.77481079]
[56.96743011 404.07305908]
[70.46038818 410.79638672]
[81.95180511 420.55401611]
[90.77359009 432.77856445]
[96.41284943 446.75933838]
[98.54172516 461.68350220]
[97.03644562 476.68344116]
[91.98453522 490.88702393]
[83.67969513 503.46847534]
[72.60476685 513.69635010]
[59.40361786 520.97601318]
[44.84376144 524.88415527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
[50 123]
[51 122]
[52 121]
[59 115]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
[67 107]
[68 106]
[69 105]
[70 104]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
