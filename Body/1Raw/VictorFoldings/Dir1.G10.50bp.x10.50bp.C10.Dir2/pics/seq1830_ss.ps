%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACUUAACGGGGGGGGGGUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCxxxxxxxxxxGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCACCCCCCCCCCUCAACUGAAC\
) } def
/len { sequence length } bind def

/coor [
[74.77642822 357.85528564]
[62.89215469 348.58016968]
[53.57344818 336.73007202]
[47.36208344 322.99389648]
[44.61917877 308.17025757]
[45.50421143 293.12100220]
[49.96571732 278.72106934]
[57.74431610 265.80761719]
[68.38776398 255.13146973]
[81.27727509 247.31327820]
[95.66345978 242.80761719]
[94.72783661 227.83682251]
[93.79220581 212.86602783]
[92.85657501 197.89523315]
[91.92095184 182.92443848]
[90.98532104 167.95365906]
[90.04969025 152.98286438]
[78.75068665 143.11714172]
[63.79043961 144.20845032]
[48.83018875 145.29975891]
[33.86994171 146.39106750]
[18.90969276 147.48237610]
[30.55874825 156.93222046]
[34.58340073 171.38221741]
[29.49662018 185.49336243]
[17.17786980 194.05189514]
[2.17868471 193.89558411]
[-9.95903683 185.08221436]
[-14.75064659 170.86811829]
[-10.42574215 156.50512695]
[1.41688967 147.30039978]
[-13.51741791 145.89810181]
[-30.03377533 153.97212219]
[-43.96036530 143.33961487]
[-58.92061234 142.24830627]
[-73.88085938 141.15699768]
[-88.84111023 140.06568909]
[-103.35832977 147.69342041]
[-117.07635498 138.70744324]
[-115.88324738 122.35174561]
[-101.00638580 115.45168304]
[-87.74980164 125.10544586]
[-72.78955078 126.19675446]
[-57.82930374 127.28806305]
[-42.86905289 128.37937927]
[-33.47541809 120.69387054]
[-20.96408844 121.52188873]
[-12.11511421 130.96379089]
[2.81919336 132.36610413]
[17.81838226 132.52214050]
[32.77862930 131.43081665]
[47.73888016 130.33950806]
[62.69912720 129.24819946]
[77.65937805 128.15689087]
[69.89363861 117.59018707]
[66.62446594 105.29955292]
[68.02626801 93.05692291]
[73.62019348 82.52269745]
[82.37860107 75.02057648]
[92.90129089 71.37242126]
[103.63446045 71.81355286]
[109.41072845 57.97033310]
[115.18700409 44.12711334]
[120.96327972 30.28389740]
[126.73954773 16.44067955]
[114.35318756 24.90106010]
[99.77037048 28.41409492]
[84.89014435 26.52229691]
[71.65029144 19.47202682]
[61.77497482 8.18140602]
[56.55020523 -5.87924099]
[56.65638351 -20.87886620]
[62.07968140 -34.86413956]
[72.11384583 -46.01382446]
[85.45217896 -52.87595367]
[100.35769653 -54.55690765]
[114.88932037 -50.83778000]
[127.15467072 -42.20289612]
[135.55648804 -29.77673721]
[139.00064087 -15.17749786]
[137.03916931 -0.30805787]
[146.78681946 -11.70907879]
[145.08918762 -29.08881950]
[156.24226379 -42.08470535]
[173.00555420 -43.00655365]
[182.51391602 -54.60789490]
[192.02227783 -66.20923615]
[187.17388916 -80.85494232]
[191.03535461 -95.79122925]
[202.37449646 -106.25197601]
[217.57304382 -108.89920807]
[231.78118896 -102.88819122]
[240.46514893 -90.13703156]
[240.85392761 -74.71456909]
[232.82347107 -61.54205322]
[218.93623352 -54.82279587]
[203.62361145 -56.70087814]
[194.11524963 -45.09953690]
[184.60690308 -33.49819565]
[187.65991211 -20.94129181]
[182.83245850 -8.74416542]
[171.68638611 -1.46452069]
[158.18785095 -1.96142673]
[148.44018555 9.43959427]
[140.58276367 22.21695137]
[134.80648804 36.06016922]
[129.03022766 49.90338516]
[123.25395203 63.74660492]
[117.47767639 77.58982086]
[129.56727600 90.92845917]
[131.81044006 110.29673004]
[121.66667938 128.67872620]
[135.89346313 133.43254089]
[150.12023926 138.18635559]
[164.34701538 142.94017029]
[175.34394836 132.29469299]
[190.03170776 127.99024963]
[205.03515625 131.01597595]
[216.90661621 140.67655945]
[222.91812134 154.75209045]
[221.68824768 170.00810242]
[213.49961853 182.93888855]
[200.23393250 190.57302856]
[184.93954468 191.15628052]
[171.13098145 184.55458069]
[161.98136902 172.28498840]
[159.59320068 157.16694641]
[145.36642456 152.41313171]
[131.13964844 147.65931702]
[116.91286469 142.90550232]
[105.02048492 152.04724121]
[105.95610809 167.01802063]
[106.89173889 181.98881531]
[107.82736969 196.95960999]
[108.76300049 211.93040466]
[109.69862366 226.90119934]
[110.63425446 241.87197876]
[125.46949005 244.55140686]
[139.23211670 250.70390320]
[151.12200928 259.97180176]
[160.44790649 271.81625366]
[166.66760254 285.54867554]
[169.41947937 300.37063599]
[168.54357910 315.42041016]
[164.09080505 329.82305908]
[156.32003784 342.74121094]
[145.68305969 353.42382812]
[132.79829407 361.24981689]
[118.41484070 365.76422119]
[103.36893463 366.70452881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[31 49]
[32 48]
[34 45]
[35 44]
[36 43]
[37 42]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[81 104]
[82 103]
[85 99]
[86 98]
[87 97]
[112 130]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
