%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACUCAUAGGGGGGGGGGCACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGxxxxxxxxxxCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCCCCCCCCCCCAACACAUA\
) } def
/len { sequence length } bind def

/coor [
[41.68993759 228.40248108]
[33.83878708 224.49403381]
[26.24794388 220.10629272]
[18.94662666 215.25648499]
[11.96290779 209.96362305]
[5.32362318 204.24844360]
[-5.33800316 214.79972839]
[-15.99962902 225.35102844]
[-26.66125488 235.90231323]
[-37.32288361 246.45359802]
[-47.98450851 257.00488281]
[-58.64613342 267.55618286]
[-69.30776215 278.10748291]
[-79.96938324 288.65875244]
[-90.63101196 299.21005249]
[-94.99726105 314.41683960]
[-109.48606110 317.86996460]
[-116.49100494 333.30911255]
[-133.26594543 330.85189819]
[-135.54852295 314.05230713]
[-120.03734589 307.20834351]
[-116.43368530 292.75625610]
[-101.18230438 288.54843140]
[-90.52067566 277.99713135]
[-79.85904694 267.44586182]
[-69.19742584 256.89456177]
[-58.53579712 246.34326172]
[-47.87417221 235.79197693]
[-37.21254730 225.24069214]
[-26.55091858 214.68939209]
[-15.88929367 204.13810730]
[-5.22766685 193.58682251]
[-10.80249310 186.96560669]
[-15.96121216 180.01289368]
[-20.68414879 172.75480652]
[-24.95326614 165.21861267]
[-28.75223160 157.43267822]
[-32.06648254 149.42630005]
[-34.88328552 141.22962952]
[-37.19177246 132.87353516]
[-38.98299789 124.38951874]
[-40.24996567 115.80959320]
[-40.98765182 107.16610718]
[-41.19303513 98.49170685]
[-40.86510086 89.81913757]
[-40.00485611 81.18116760]
[-38.61530685 72.61045074]
[-36.70146942 64.13938904]
[-34.27034378 55.80003738]
[-31.33088303 47.62395477]
[-27.89396667 39.64210510]
[-23.97235489 31.88472748]
[-19.58065033 24.38123322]
[-14.73523426 17.16007996]
[-9.45421314 10.24867344]
[-3.75734305 3.67326522]
[2.33403778 -2.54115558]
[8.79709148 -8.37095070]
[15.60756683 -13.79392433]
[22.73988724 -18.78940964]
[30.16724968 -23.33834076]
[37.86172485 -27.42333794]
[45.79436493 -31.02875900]
[53.93530273 -34.14077377]
[62.25387573 -36.74740219]
[70.71873474 -38.83857346]
[79.29797363 -40.40616226]
[87.95921326 -41.44401169]
[96.66978455 -41.94796753]
[105.39678955 -41.91588593]
[114.10727692 -41.34765244]
[122.76831818 -40.24517822]
[131.34718323 -38.61239243]
[139.81141663 -36.45522308]
[148.12899780 -33.78159332]
[156.26843262 -30.60137558]
[164.19889832 -26.92635727]
[171.89031982 -22.77020645]
[179.31356812 -18.14841080]
[186.44044495 -13.07822514]
[193.24392700 -7.57860756]
[199.69815063 -1.67014420]
[205.77857971 4.62502289]
[211.46206665 11.28328228]
[216.72698975 18.27963829]
[227.38861084 7.72834873]
[238.05024719 -2.82294178]
[248.71186829 -13.37423229]
[259.37350464 -23.92552185]
[263.30627441 -32.24328232]
[270.36837769 -34.58253479]
[281.24722290 -44.90974045]
[292.12603760 -55.23694229]
[299.45065308 -70.52701569]
[316.17083740 -67.72135162]
[318.10342407 -50.87791061]
[302.45324707 -44.35811996]
[291.57440186 -34.03091431]
[280.69558716 -23.70370865]
[269.92477417 -13.26389599]
[259.26315308 -2.71260571]
[248.60153198 7.83868456]
[237.93991089 18.38997459]
[227.27827454 28.94126511]
[233.90676880 42.39723206]
[248.76982117 40.37489700]
[263.63287354 38.35256195]
[278.49591064 36.33022690]
[293.37524414 28.20362282]
[305.30328369 40.25180054]
[297.02795410 55.04894257]
[280.51824951 51.19327545]
[265.65521240 53.21560669]
[250.79216003 55.23794174]
[235.92910767 57.26027679]
[238.28472900 65.80294800]
[240.10418701 74.47312927]
[241.38073730 83.23720551]
[242.10977173 92.06124115]
[242.28875732 100.91105652]
[241.91729736 109.75241852]
[240.99716187 118.55113220]
[239.53221130 127.27318573]
[237.52839661 135.88488770]
[234.99378967 144.35299683]
[231.93846130 152.64482117]
[228.37455750 160.72842407]
[224.31613159 168.57261658]
[219.77914429 176.14720154]
[214.78141785 183.42304993]
[209.34255981 190.37216187]
[203.48382568 196.96786499]
[197.22811890 203.18484497]
[190.59986877 208.99923706]
[183.62492371 214.38880920]
[176.33042908 219.33294678]
[168.74481201 223.81275940]
[160.89753723 227.81120300]
[152.81913757 231.31306458]
[144.54098511 234.30508423]
[136.09518433 236.77597046]
[127.51452637 238.71646118]
[118.83226013 240.11935425]
[110.08203125 240.97952271]
[101.29771423 241.29393005]
[92.51330566 241.06169128]
[83.76278687 240.28398132]
[75.07998657 238.96414185]
[66.49845123 237.10757446]
[58.05130768 234.72175598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[17 21]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[91 99]
[92 98]
[93 97]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
