%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUUCCCCCGGGGGGGGGGUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCAxxxxxxxxxxACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCCCCCCCCCCCUAUAUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.13472748 423.38314819]
[71.21556854 415.62478638]
[60.43427277 405.09576416]
[52.37225723 392.36389160]
[47.46429825 378.11578369]
[45.97507477 363.11981201]
[47.98489761 348.18472290]
[53.38538361 334.11590576]
[61.88528824 321.67208862]
[73.02622223 311.52438354]
[86.20736694 304.22000122]
[100.71788788 300.15286255]
[100.10205841 285.16549683]
[99.48623657 270.17816162]
[98.87040710 255.19079590]
[98.25458527 240.20344543]
[97.63875580 225.21609497]
[97.02293396 210.22874451]
[96.40711212 195.24137878]
[95.79128265 180.25402832]
[95.17546082 165.26667786]
[94.55963135 150.27932739]
[93.94380951 135.29197693]
[80.06261444 129.74392700]
[69.65620422 119.01196289]
[64.53826141 104.96649933]
[49.57698441 103.88943481]
[34.61570358 102.81236267]
[19.65442276 101.73529053]
[4.69314241 100.65822601]
[-0.77328831 114.75111389]
[-10.15211868 126.60560608]
[-22.60938835 135.16760254]
[-37.03740692 139.67578125]
[-52.15324402 139.72927856]
[-66.61280823 135.32333374]
[-79.13037109 126.84972382]
[-88.59287262 115.06191254]
[-94.15891266 101.00806427]
[-95.33357239 85.93784332]
[-92.01239014 71.19127655]
[-84.49069214 58.07962418]
[-73.43729401 47.76876450]
[-59.83506775 41.17552948]
[-44.89350128 38.88618469]
[-29.94120026 41.10430145]
[-16.30770493 47.63264084]
[-5.20530033 57.89071274]
[2.37879610 70.96636963]
[5.77021217 85.69694519]
[20.73149300 86.77400970]
[35.69277191 87.85108185]
[50.65405273 88.92815399]
[65.61533356 90.00521851]
[72.51690674 77.04611969]
[84.03907776 67.94614410]
[98.24467468 64.23522186]
[112.74538422 66.53724670]
[120.90205383 53.94880676]
[129.05871582 41.36036682]
[137.08570862 28.68885040]
[144.98219299 15.93559361]
[152.87867737 3.18233657]
[141.09510803 -6.12599945]
[130.44943237 -16.71691132]
[121.08045197 -28.45232582]
[113.11030579 -41.17924881]
[106.64289856 -54.73175430]
[101.76255798 -68.93316650]
[98.53289795 -83.59832764]
[96.99602509 -98.53605652]
[97.17197418 -113.55161285]
[99.05845642 -128.44923401]
[102.63088226 -143.03468323]
[107.84266663 -157.11782837]
[114.62586212 -170.51507568]
[122.89205170 -183.05172729]
[132.53344727 -194.56437683]
[143.42437744 -204.90292358]
[155.42283630 -213.93258667]
[168.37240601 -221.53562927]
[182.10426331 -227.61296082]
[196.43939209 -232.08531189]
[211.19088745 -234.89440918]
[226.16645813 -236.00360107]
[241.17083740 -235.39845276]
[256.00842285 -233.08685303]
[270.48580933 -229.09892273]
[284.41418457 -223.48664856]
[297.61203003 -216.32321167]
[309.90725708 -207.70201111]
[321.13958740 -197.73542786]
[331.16253662 -186.55339050]
[339.84548950 -174.30169678]
[347.07522583 -161.14006042]
[352.75750732 -147.24006653]
[356.81820679 -132.78294373]
[359.20443726 -117.95716858]
[359.88507080 -102.95601654]
[358.85122681 -87.97506714]
[356.11636353 -73.20962524]
[351.71618652 -58.85218048]
[345.70803833 -45.08992004]
[338.17022705 -32.10226440]
[329.20104980 -20.05852699]
[318.91741943 -9.11573029]
[307.45343018 0.58346754]
[294.95849609 8.91261768]
[281.59555054 15.76313114]
[267.53878784 21.04569817]
[252.97149658 24.69145012]
[238.08355713 26.65285683]
[223.06909180 26.90434837]
[208.12380981 25.44264412]
[193.44258118 22.28680038]
[179.21681213 17.47796059]
[165.63194275 11.07881927]
[157.73545837 23.83207703]
[149.83897400 36.58533478]
[148.98645020 43.97352600]
[141.64715576 49.51703262]
[133.49049377 62.10547256]
[125.33382416 74.69390869]
[133.45996094 87.24728394]
[135.75053406 102.02478790]
[131.80607605 116.44915771]
[122.31448364 128.00473022]
[108.93115997 134.67614746]
[109.54698181 149.66349792]
[110.16281128 164.65084839]
[110.77863312 179.63821411]
[111.39446259 194.62556458]
[112.01028442 209.61291504]
[112.62611389 224.60026550]
[113.24193573 239.58761597]
[113.85776520 254.57496643]
[114.47358704 269.56231689]
[115.08941650 284.54968262]
[115.70523834 299.53704834]
[130.50051880 302.39999390]
[144.23648071 308.59835815]
[156.17239380 317.79788208]
[165.66453552 329.50241089]
[172.20103455 343.08071899]
[175.42938232 357.80059814]
[175.17544556 372.86819458]
[171.45295715 387.47091675]
[164.46266174 400.82128906]
[154.58151245 412.19931030]
[142.34240723 420.99142456]
[128.40538025 426.72344971]
[113.52204895 429.08627319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[58 123]
[59 122]
[60 121]
[61 119]
[62 118]
[63 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
