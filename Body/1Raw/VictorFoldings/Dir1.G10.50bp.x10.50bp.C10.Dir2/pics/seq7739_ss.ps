%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAACCUAGGGGGGGGGGCGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCxxxxxxxxxxCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGCCCCCCCCCCACUGAACCGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.22940063]
[71.19830322 367.21337891]
[59.48964310 357.68395996]
[50.78712082 345.34829712]
[45.73651886 331.12176514]
[44.71262741 316.06008911]
[47.79142761 301.28094482]
[54.74444962 287.88101196]
[65.05573273 276.85467529]
[77.96011353 269.02017212]
[92.50000000 264.95886230]
[92.50000000 249.95884705]
[92.50000000 234.95884705]
[92.50000000 219.95884705]
[92.50000000 204.95884705]
[92.50000000 189.95884705]
[92.50000000 174.95884705]
[92.50000000 159.95884705]
[92.50000000 144.95884705]
[92.50000000 129.95884705]
[92.50000000 114.95885468]
[82.50781250 108.30185699]
[78.53824615 95.20526123]
[63.77219009 97.84412384]
[49.00613403 100.48298645]
[36.78237534 110.52739716]
[22.89242172 105.14981079]
[10.66865921 115.19422150]
[-3.22129297 109.81662750]
[-17.98734856 112.45549774]
[-32.75340271 115.09436035]
[-44.93589020 126.07247162]
[-60.44882965 120.75450897]
[-63.33383942 104.61112976]
[-50.62306595 94.24925995]
[-35.39226913 100.32830048]
[-20.62621307 97.68943787]
[-5.86015749 95.05057526]
[5.30743742 85.19490814]
[20.25355721 90.38375092]
[31.42115211 80.52809143]
[46.36727142 85.71693420]
[61.13332748 83.07806396]
[75.89938354 80.43920135]
[87.88621521 71.42167664]
[94.51471710 57.96570969]
[101.14321136 44.50974274]
[107.77171326 31.05377769]
[114.40020752 17.59781075]
[119.74172211 3.58109832]
[123.74945831 -10.87359047]
[127.75720215 -25.32827759]
[127.03600311 -34.50061417]
[132.00158691 -40.04034042]
[136.30917358 -54.40852356]
[140.61676025 -68.77671051]
[137.16839600 -84.21753693]
[148.23471069 -94.18679047]
[152.54229736 -108.55496979]
[156.39945984 -123.05056763]
[159.80242920 -137.65945435]
[155.39765930 -152.85513306]
[165.82058716 -163.49523926]
[169.22357178 -178.10412598]
[172.62654114 -192.71301270]
[176.02952576 -207.32191467]
[162.35469055 -213.61347961]
[150.22647095 -222.52926636]
[140.14151001 -233.70416260]
[132.51277161 -246.68057251]
[127.65265656 -260.92712402]
[125.76017761 -275.86041260]
[126.91283417 -290.86895752]
[131.06343079 -305.33813477]
[138.04199219 -318.67547607]
[147.56275940 -330.33480835]
[159.23585510 -339.83868408]
[172.58328247 -346.79794312]
[187.05847168 -350.92758179]
[202.06866455 -352.05850220]
[216.99920654 -350.14440918]
[231.23870850 -345.26367188]
[244.20405579 -337.61614990]
[255.36434937 -327.51501465]
[264.26254272 -315.37390137]
[270.53430176 -301.68997192]
[273.92279053 -287.02355957]
[274.28924561 -271.97531128]
[271.61868286 -257.16134644]
[266.02041626 -243.18836975]
[257.72372437 -230.62852478]
[247.06832886 -219.99613953]
[234.49058533 -211.72659302]
[220.50553894 -206.15853882]
[205.68586731 -203.51997375]
[190.63841248 -203.91893005]
[187.23542786 -189.31004333]
[183.83245850 -174.70114136]
[180.42947388 -160.09225464]
[185.07766724 -145.94151306]
[174.41133118 -134.25648499]
[171.00834656 -119.64759064]
[172.60260010 -116.43420410]
[172.68054199 -112.27540588]
[170.80911255 -107.91075897]
[166.91047668 -104.24738312]
[162.60289001 -89.87920380]
[166.35937500 -75.46607971]
[154.98495483 -64.46912384]
[150.67736816 -50.10093689]
[146.36978149 -35.73275375]
[142.21188354 -21.32053757]
[138.20414734 -6.86584997]
[134.19641113 7.58883858]
[146.65184021 -0.76953280]
[161.64520264 -1.21535397]
[174.57525635 6.38819218]
[181.47390747 19.70767403]
[180.22406006 34.65551376]
[171.20927429 46.64440536]
[157.19606018 51.99511719]
[142.48492432 49.06557846]
[131.59049988 38.75483322]
[127.85617828 24.22631073]
[121.22767639 37.68227386]
[114.59917450 51.13824081]
[107.97068024 64.59420776]
[101.34217834 78.05017090]
[118.96921539 96.11843872]
[107.50000000 114.95885468]
[107.50000000 129.95884705]
[107.50000000 144.95884705]
[107.50000000 159.95884705]
[107.50000000 174.95884705]
[107.50000000 189.95884705]
[107.50000000 204.95884705]
[107.50000000 219.95884705]
[107.50000000 234.95884705]
[107.50000000 249.95884705]
[107.50000000 264.95886230]
[122.03988647 269.02017212]
[134.94427490 276.85467529]
[145.25555420 287.88101196]
[152.20857239 301.28094482]
[155.28736877 316.06008911]
[154.26348877 331.12176514]
[149.21287537 345.34829712]
[140.51036072 357.68395996]
[128.80169678 367.21337891]
[114.95575714 373.22940063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 44]
[24 43]
[25 42]
[27 40]
[29 38]
[30 37]
[31 36]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[50 114]
[51 113]
[52 112]
[54 111]
[55 110]
[56 109]
[58 107]
[59 106]
[60 102]
[61 101]
[63 99]
[64 98]
[65 97]
[66 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
