%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACACAAUGGGGGGGGGGAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACxxxxxxxxxxACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAACCCCCCCCCCAACACAUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 376.52542114]
[71.19830322 370.50939941]
[59.48964310 360.97998047]
[50.78712082 348.64431763]
[45.73651886 334.41778564]
[44.71262741 319.35610962]
[47.79142761 304.57693481]
[54.74444962 291.17700195]
[65.05573273 280.15069580]
[77.96011353 272.31616211]
[92.50000000 268.25485229]
[92.50000000 253.25486755]
[92.50000000 238.25486755]
[92.50000000 223.25486755]
[92.50000000 208.25486755]
[92.50000000 193.25486755]
[92.50000000 178.25486755]
[92.50000000 163.25486755]
[92.50000000 148.25486755]
[92.50000000 133.25486755]
[73.63393402 121.60939789]
[65.91984558 100.82387543]
[51.21188354 97.87838745]
[36.50392151 94.93290710]
[21.79595947 91.98742676]
[7.08799791 89.04194641]
[-7.61996317 86.09645844]
[-21.50720024 102.74140167]
[-48.94591904 101.07321167]
[-63.76367569 103.40431213]
[-78.58143616 105.73542023]
[-93.39919281 108.06652069]
[-108.10624695 116.50091553]
[-120.28233337 104.70349121]
[-112.31663513 89.73739624]
[-95.73029327 93.24876404]
[-80.91253662 90.91766357]
[-66.09477997 88.58655548]
[-51.27702332 86.25545502]
[-50.18860245 78.83484650]
[-48.01176834 63.99364471]
[-46.92334747 56.57304001]
[-60.44754028 50.08487701]
[-73.97172546 43.59671021]
[-87.56054688 51.08827972]
[-102.95335388 49.12837219]
[-114.23129272 38.47061920]
[-117.05776978 23.21314049]
[-110.34594727 9.22274971]
[-96.67665863 1.87903619]
[-81.30602264 4.00580835]
[-70.14436340 14.78527927]
[-67.48356628 30.07252121]
[-53.95937347 36.56068802]
[-40.43518448 43.04885101]
[-20.10582733 44.86647415]
[-7.11019421 56.74930954]
[-4.67448092 71.38849640]
[10.03348064 74.33398438]
[24.74144173 77.27946472]
[39.44940186 80.22494507]
[54.15736389 83.17043304]
[68.86532593 86.11591339]
[77.75572205 74.16731262]
[90.89170837 67.14920044]
[105.76613617 66.40107727]
[119.54001617 72.06572723]
[130.63133240 61.96707916]
[141.72265625 51.86843109]
[132.96908569 39.66630936]
[125.69133759 26.53045082]
[119.98780823 12.63850117]
[115.93563080 -1.82166505]
[113.58961487 -16.65449142]
[112.98148346 -31.65937996]
[114.11946869 -46.63340759]
[116.98816681 -61.37406921]
[121.54879761 -75.68201447]
[127.73966980 -89.36373901]
[135.47706604 -102.23421478]
[144.65634155 -114.11939240]
[155.15336609 -124.85852814]
[166.82617188 -134.30638123]
[179.51690674 -142.33520508]
[193.05392456 -148.83639526]
[207.25418091 -153.72204590]
[221.92559814 -156.92607117]
[236.86979675 -158.40515137]
[251.88464355 -158.13926697]
[266.76708984 -156.13203430]
[281.31588745 -152.41059875]
[295.33425903 -147.02526855]
[308.63262939 -140.04888916]
[321.03115845 -131.57579041]
[332.36215210 -121.72059631]
[342.47238159 -110.61655426]
[351.22512817 -98.41384888]
[358.50201416 -85.27750397]
[364.20462036 -71.38517761]
[368.25582886 -56.92473602]
[370.60086060 -42.09175491]
[371.20797729 -27.08682442]
[370.06900024 -12.11287308]
[367.19931030 2.62759614]
[362.63772583 16.93523407]
[356.44595337 30.61654663]
[348.70770264 43.48650742]
[339.52761841 55.37107086]
[329.02987671 66.10950470]
[317.35644531 75.55658722]
[304.66516113 83.58455658]
[291.12771606 90.08484650]
[276.92715454 94.96954346]
[262.25549316 98.17259216]
[247.31121826 99.65067291]
[232.29637146 99.38379669]
[217.41406250 97.37556458]
[202.86550903 93.65315247]
[188.84750366 88.26688385]
[175.54959106 81.28961945]
[163.15164185 72.81570435]
[151.82130432 62.95974731]
[140.72998047 73.05839539]
[129.63867188 83.15704346]
[133.02838135 91.55831146]
[134.08558655 100.55574036]
[132.73562622 109.51392365]
[129.07383728 117.80022430]
[123.35881805 124.82944489]
[115.99417114 130.10517883]
[107.50000000 133.25486755]
[107.50000000 148.25486755]
[107.50000000 163.25486755]
[107.50000000 178.25486755]
[107.50000000 193.25486755]
[107.50000000 208.25486755]
[107.50000000 223.25486755]
[107.50000000 238.25486755]
[107.50000000 253.25486755]
[107.50000000 268.25485229]
[122.03988647 272.31616211]
[134.94427490 280.15069580]
[145.25555420 291.17700195]
[152.20857239 304.57693481]
[155.28736877 319.35610962]
[154.26348877 334.41778564]
[149.21287537 348.64431763]
[140.51036072 360.97998047]
[128.80169678 370.50939941]
[114.95575714 376.52542114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 39]
[30 38]
[31 37]
[32 36]
[42 55]
[43 54]
[44 53]
[67 124]
[68 123]
[69 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
