%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCCCGGGGGGGGGGCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCxxxxxxxxxxAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAACCCCCCCCCCACCAAACCAC\
) } def
/len { sequence length } bind def

/coor [
[107.51622009 485.18698120]
[93.67028046 479.17095947]
[81.96162415 469.64154053]
[73.25909424 457.30587769]
[68.20849609 443.07934570]
[67.18460083 428.01766968]
[70.26340485 413.23852539]
[77.21642303 399.83859253]
[87.52770996 388.81225586]
[100.43209076 380.97775269]
[114.97197723 376.91644287]
[114.97197723 361.91644287]
[114.97197723 346.91644287]
[114.97197723 331.91644287]
[114.97197723 316.91644287]
[114.97197723 301.91644287]
[114.97197723 286.91644287]
[114.97197723 271.91644287]
[114.97197723 256.91644287]
[114.97197723 241.91644287]
[113.72509766 226.96835327]
[111.23998260 212.17564392]
[96.53393555 209.52656555]
[83.59730530 201.99180603]
[74.00116730 190.46408081]
[68.91854858 176.32234192]
[68.98105621 161.26690674]
[74.20044708 147.11494446]
[83.96487427 135.58117676]
[97.11057281 128.07011414]
[94.62545776 113.27741241]
[85.87400818 102.37311554]
[90.58184052 89.20770264]
[88.09671783 74.41500092]
[85.61160278 59.62229156]
[83.12648010 44.82958603]
[79.57171631 30.25688171]
[74.96615601 15.98142147]
[70.36058807 1.70596075]
[64.29757690 -12.01409245]
[56.84266663 -25.03040314]
[49.38775635 -38.04671097]
[41.93284607 -51.06302261]
[34.47793579 -64.07933044]
[20.40417099 -58.79489136]
[5.66494703 -55.83660507]
[-9.35795498 -55.28110504]
[-24.27540588 -57.14278030]
[-38.70100784 -61.37340546]
[-52.26110077 -67.86339569]
[-64.60445404 -76.44464874]
[-75.41133118 -86.89488983]
[-84.40181732 -98.94342804]
[-91.34304047 -112.27818298]
[-96.05519867 -126.55374146]
[-98.41623688 -141.40034485]
[-98.36500549 -156.43342590]
[-95.90281677 -171.26359558]
[-91.09346771 -185.50671387]
[-84.06151581 -198.79383850]
[-74.98910522 -210.78082275]
[-64.11124420 -221.15715027]
[-51.70969009 -229.65406799]
[-38.10567474 -236.05148315]
[-23.65156937 -240.18368530]
[-8.72177601 -241.94363403]
[6.29699087 -241.28573608]
[21.01570892 -238.22705078]
[35.05312729 -232.84680176]
[48.04563904 -225.28434753]
[59.65671539 -215.73558044]
[69.58559418 -204.44781494]
[77.57509613 -191.71345520]
[83.41828156 -177.86233521]
[86.96378326 -163.25325012]
[88.11977386 -148.26458740]
[86.85630798 -133.28460693]
[83.20610809 -118.70132446]
[77.26373291 -104.89247131]
[69.18309784 -92.21574402]
[59.17351151 -80.99948883]
[47.49424362 -71.53424072]
[54.94915390 -58.51793289]
[62.40406799 -45.50162125]
[69.85897827 -32.48531342]
[77.31388855 -19.46900368]
[79.60545349 -34.29292679]
[88.89430237 -46.07075882]
[102.77603912 -51.75384140]
[117.65741730 -49.87112808]
[129.68643188 -40.90995407]
[135.74942017 -27.18988800]
[134.27699280 -12.26233196]
[125.65028381 0.00876484]
[112.10227966 6.44706488]
[97.13985443 5.38603401]
[84.63604736 -2.89960361]
[89.24161530 11.37585735]
[93.84718323 25.65131760]
[101.03482819 12.48554039]
[114.93894196 6.85742617]
[129.26081848 11.31656456]
[137.51249695 23.84292221]
[135.95591736 38.76193619]
[125.29618835 49.31515121]
[110.36228943 50.72185135]
[97.91918945 42.34446716]
[100.40430450 57.13717270]
[102.88942719 71.92987823]
[105.37454224 86.72258759]
[114.12599182 97.62688446]
[109.41815948 110.79229736]
[111.90328217 125.58499908]
[126.78172302 128.38810730]
[139.77900696 136.09799194]
[149.33631897 147.76753235]
[154.31506348 161.97605896]
[154.13255310 177.00230408]
[148.83012390 191.03294373]
[139.06579590 202.38137817]
[126.03269196 209.69052124]
[128.51780701 224.48323059]
[136.83723450 212.00175476]
[150.84768677 206.64384460]
[165.37258911 210.38914490]
[175.04527283 221.85383606]
[176.29188538 236.80194092]
[168.65180969 249.71043396]
[154.94792175 255.80989075]
[140.24353027 252.84667969]
[129.97196960 241.91644287]
[129.97196960 256.91644287]
[129.97196960 271.91644287]
[129.97196960 286.91644287]
[129.97196960 301.91644287]
[129.97196960 316.91644287]
[129.97196960 331.91644287]
[129.97196960 346.91644287]
[129.97196960 361.91644287]
[129.97196960 376.91644287]
[144.51185608 380.97775269]
[157.41624451 388.81225586]
[167.72752380 399.83859253]
[174.68054199 413.23852539]
[177.75935364 428.01766968]
[176.73545837 443.07934570]
[171.68486023 457.30587769]
[162.98233032 469.64154053]
[151.27366638 479.17095947]
[137.42773438 485.18698120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 122]
[22 121]
[30 113]
[31 112]
[33 110]
[34 109]
[35 108]
[36 107]
[37 99]
[38 98]
[39 97]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
