%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAUCGCUGGGGGGGGGGCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAAxxxxxxxxxxACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCCCCCCCCCCCUCCAUCGCU\
) } def
/len { sequence length } bind def

/coor [
[224.71746826 150.94793701]
[216.57797241 144.32577515]
[208.77990723 137.30465698]
[201.34281921 129.90216064]
[194.28532410 122.13681793]
[187.62512207 114.02807617]
[181.37887573 105.59623718]
[175.56224060 96.86241150]
[170.18980408 87.84846497]
[165.27500916 78.57697296]
[151.61875916 84.78238678]
[137.96252441 90.98779297]
[124.30628204 97.19319916]
[110.65003967 103.39860535]
[97.05908966 109.74573517]
[83.53489685 116.23390198]
[70.01071167 122.72206116]
[56.48651886 129.21023560]
[42.96232986 135.69839478]
[29.43814087 142.18655396]
[23.00326729 148.76258850]
[15.56443119 148.66574097]
[1.90819013 154.87115479]
[-11.74805069 161.07655334]
[-17.06371880 175.96008301]
[-31.38226891 182.64996338]
[-46.20875931 177.17724609]
[-52.74689484 162.78875732]
[-47.11771774 148.02096558]
[-32.66091919 141.63531494]
[-17.95345879 147.42031860]
[-4.29721689 141.21490479]
[9.35902405 135.00950623]
[22.94997597 128.66236877]
[36.47416687 122.17420197]
[49.99835587 115.68604279]
[63.52254486 109.19787598]
[77.04673767 102.70970917]
[90.57092285 96.22154236]
[95.94005585 90.13414001]
[104.44463348 89.74236298]
[118.10087585 83.53695679]
[131.75711060 77.33155060]
[145.41336060 71.12614441]
[159.06959534 64.92073822]
[148.73783875 32.56558990]
[143.76586914 -1.03008938]
[144.28317261 -34.98464203]
[150.27517700 -68.40715027]
[161.58366394 -100.42082977]
[177.91094971 -130.18600464]
[198.82778931 -156.92216492]
[188.16615295 -167.47344971]
[177.50453186 -178.02474976]
[161.51362610 -181.66107178]
[156.92648315 -197.40559387]
[168.46195984 -209.06170654]
[184.25334167 -204.63859558]
[188.05581665 -188.68637085]
[198.71745300 -178.13508606]
[209.37907410 -167.58378601]
[217.19435120 -174.57647705]
[225.34973145 -181.16947937]
[233.82478333 -187.34625244]
[242.59828186 -193.09133911]
[251.64828491 -198.39035034]
[260.95211792 -203.22999573]
[270.48645020 -207.59815979]
[280.22747803 -211.48388672]
[290.15072632 -214.87744141]
[300.23141479 -217.77033997]
[310.44427490 -220.15528870]
[320.76370239 -222.02635193]
[331.16390991 -223.37881470]
[341.61880493 -224.20927429]
[352.10223389 -224.51567078]
[362.58792114 -224.29721069]
[373.04962158 -223.55444336]
[383.46112061 -222.28919983]
[393.79635620 -220.50468445]
[404.02944946 -218.20532227]
[414.13473511 -215.39688110]
[424.08694458 -212.08638000]
[433.86114502 -208.28211975]
[443.43283081 -203.99360657]
[452.77804565 -199.23158264]
[461.87338257 -194.00794983]
[470.69607544 -188.33581543]
[479.22399902 -182.22935486]
[487.43579102 -175.70385742]
[495.31091309 -168.77566528]
[502.82958984 -161.46212769]
[509.97302246 -153.78155518]
[516.72332764 -145.75317383]
[523.06353760 -137.39707947]
[528.97784424 -128.73422241]
[534.45135498 -119.78625488]
[539.47045898 -110.57560730]
[544.02246094 -101.12534332]
[548.09600830 -91.45911407]
[551.68090820 -81.60114288]
[554.76818848 -71.57609558]
[557.35003662 -61.40909195]
[559.42004395 -51.12558746]
[560.97302246 -40.75133514]
[562.00506592 -30.31231308]
[562.51354980 -19.83466530]
[562.49719238 -9.34463215]
[561.95611572 1.13151610]
[560.89154053 11.56754208]
[559.30621338 21.93730927]
[557.20410156 32.21484756]
[554.59045410 42.37441635]
[551.47174072 52.39056778]
[547.85589600 62.23822021]
[543.75183105 71.89270782]
[539.16986084 81.32984924]
[534.12152100 90.52600098]
[528.61938477 99.45813751]
[522.67724609 108.10388184]
[516.30999756 116.44158173]
[509.53350830 124.45034790]
[502.36483765 132.11012268]
[494.82186890 139.40170288]
[486.92349243 146.30685425]
[478.68954468 152.80824280]
[470.14056396 158.88961792]
[461.29800415 164.53570557]
[452.18399048 169.73239136]
[442.82138062 174.46664429]
[433.23355103 178.72659302]
[423.44454956 182.50157166]
[413.47891235 185.78211975]
[403.36154175 188.56001282]
[393.11779785 190.82829285]
[382.77334595 192.58126831]
[372.35409546 193.81454468]
[361.88610840 194.52502441]
[351.39562988 194.71090698]
[340.90893555 194.37174988]
[330.45223999 193.50837708]
[320.05178833 192.12295532]
[309.73361206 190.21893311]
[299.52352905 187.80107117]
[289.44711304 184.87542725]
[279.52963257 181.44932556]
[269.79589844 177.53134155]
[260.27032471 173.13127136]
[250.97673035 168.26013184]
[241.93841553 162.93011475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[22 33]
[23 32]
[24 31]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
