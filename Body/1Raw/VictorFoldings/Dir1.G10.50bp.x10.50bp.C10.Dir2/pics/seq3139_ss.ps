%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAUACCCAGGGGGGGGGGCACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAxxxxxxxxxxGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACCCCCCCCCCCUAUUAAACCCA\
) } def
/len { sequence length } bind def

/coor [
[83.42167664 372.73898315]
[69.93280029 366.00744629]
[58.44729996 356.24288940]
[49.63293076 344.01296997]
[44.00214767 330.02877808]
[41.88232040 315.10330200]
[43.39668655 300.10430908]
[48.45721054 285.90380859]
[56.76967621 273.32736206]
[67.85080719 263.10623169]
[81.05635834 255.83457947]
[95.61858368 251.93521118]
[95.31060791 236.93838501]
[95.00263214 221.94154358]
[94.69465637 206.94470215]
[94.38667297 191.94786072]
[94.07869720 176.95101929]
[93.77072144 161.95419312]
[93.46274567 146.95735168]
[93.15476227 131.96051025]
[92.84678650 116.96367645]
[81.67951202 110.07945251]
[76.91081238 96.13658905]
[62.40218353 99.94445038]
[47.89355850 103.75231171]
[33.38493347 107.56016541]
[30.00765610 122.48841858]
[20.07089996 134.12969971]
[5.85805941 139.80892944]
[-9.36486053 138.22108459]
[-22.09974289 129.73100281]
[-29.42020607 116.28967285]
[-29.64406013 100.98580170]
[-22.71986580 87.33610535]
[-10.23875237 78.47719574]
[4.93121290 76.44477081]
[19.30408287 81.70587158]
[29.57707596 93.05154419]
[44.08570099 89.24368286]
[58.59432602 85.43582916]
[73.10295105 81.62796783]
[84.18808746 71.52252960]
[89.31838989 57.42714310]
[86.76763916 41.81291199]
[98.39130402 32.49950027]
[103.52160645 18.40410995]
[108.65190887 4.30872059]
[113.78221130 -9.78666878]
[116.53845978 -24.53126526]
[116.84643555 -39.52810287]
[117.15441132 -54.52494049]
[117.46238708 -69.52178192]
[117.77037048 -84.51861572]
[102.91514587 -86.74364471]
[88.46643066 -90.85010529]
[74.66148376 -96.77056122]
[61.72699738 -104.40779114]
[49.87536240 -113.63639069]
[39.30119705 -124.30481720]
[30.17813301 -136.23788452]
[22.65598488 -149.23963928]
[16.85827255 -163.09658813]
[12.88019753 -177.58116150]
[10.78708553 -192.45555115]
[10.61330509 -207.47547913]
[12.36171246 -222.39430237]
[16.00359535 -236.96705627]
[21.47915077 -250.95442200]
[28.69846725 -264.12673950]
[37.54299545 -276.26770020]
[47.86749649 -287.17791748]
[59.50244141 -296.67825317]
[72.25676727 -304.61270142]
[85.92103577 -310.85098267]
[100.27087402 -315.29061890]
[115.07063293 -317.85876465]
[130.07730103 -318.51321411]
[145.04444885 -317.24322510]
[159.72630310 -314.06964111]
[173.88175964 -309.04458618]
[187.27839661 -302.25057983]
[199.69622803 -293.79919434]
[210.93132019 -283.82919312]
[220.79919434 -272.50430298]
[229.13781738 -260.01046753]
[235.81025696 -246.55288696]
[240.70695496 -232.35250854]
[243.74748230 -217.64251709]
[244.88191223 -202.66448975]
[244.09164429 -187.66436768]
[241.38963318 -172.88845825]
[236.82023621 -158.57940674]
[230.45851135 -144.97216797]
[222.40892029 -132.29020691]
[212.80364990 -120.74174500]
[201.80039978 -110.51643372]
[189.57987976 -101.78218842]
[176.34274292 -94.68241882]
[162.30636597 -89.33371735]
[147.70124817 -85.82391357]
[132.76721191 -84.21063995]
[132.45922852 -69.21379852]
[132.15124512 -54.21696472]
[131.84327698 -39.22012711]
[131.53529358 -24.22328758]
[142.62042236 -14.11785316]
[157.52487183 -15.80825043]
[172.42932129 -17.49864769]
[180.91557312 -30.63324165]
[195.87432861 -35.19064331]
[210.24250793 -29.01898193]
[217.23590088 -15.03233242]
[213.55244446 0.16523969]
[200.93136597 9.39790440]
[185.33192444 8.30628109]
[174.11972046 -2.59420037]
[159.21527100 -0.90380299]
[144.31082153 0.78659451]
[139.37715149 0.64729148]
[134.89843750 -0.39834815]
[131.02490234 -2.21805000]
[127.87760162 -4.65636683]
[122.74729919 9.43902302]
[117.61699677 23.53441238]
[112.48669434 37.62980270]
[115.40439606 52.23583603]
[103.41378021 62.55744553]
[98.28347778 76.65283203]
[116.35790253 85.67521667]
[119.65350342 104.10118103]
[107.84362793 116.65570068]
[108.15160370 131.65254211]
[108.45957947 146.64936829]
[108.76755524 161.64620972]
[109.07553864 176.64305115]
[109.38351440 191.63989258]
[109.69149017 206.63671875]
[109.99946594 221.63356018]
[110.30744934 236.63040161]
[110.61542511 251.62724304]
[125.32546234 254.92546082]
[138.81842041 261.64883423]
[150.30982971 271.40643311]
[159.13162231 283.63098145]
[164.77087402 297.61175537]
[166.89974976 312.53591919]
[165.39448547 327.53585815]
[160.34255981 341.73944092]
[152.03771973 354.32089233]
[140.96279907 364.54876709]
[127.76165009 371.82839966]
[113.20178986 375.73660278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 41]
[24 40]
[25 39]
[26 38]
[42 128]
[43 127]
[45 125]
[46 124]
[47 123]
[48 122]
[49 105]
[50 104]
[51 103]
[52 102]
[53 101]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
