%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACACCCUGGGGGGGGGGCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACxxxxxxxxxxGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUCCCCCCCCCCUAAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[59.99820328 473.44622803]
[46.77800369 466.17373657]
[35.89120102 455.72674561]
[28.08007050 442.81750488]
[23.87718964 428.32617188]
[23.56911659 413.24084473]
[27.17685890 398.59002686]
[34.45442963 385.37261963]
[44.90563965 374.48986816]
[57.81790161 366.68371582]
[72.31083679 362.48641968]
[71.99877930 347.48968506]
[71.68672180 332.49291992]
[71.37467194 317.49615479]
[71.06261444 302.49942017]
[70.75055695 287.50265503]
[70.43849945 272.50592041]
[70.12644196 257.50915527]
[69.81438446 242.51240540]
[69.34634399 227.51969910]
[68.72236633 212.53268433]
[60.73459244 225.22895813]
[48.33671951 233.67247009]
[33.59699249 236.45463562]
[18.97432899 233.11132812]
[6.90811539 224.20030212]
[-0.58873212 211.20809937]
[-2.26557064 196.30212402]
[2.15733361 181.96900940]
[11.94214153 170.59986877]
[25.45652771 164.09130859]
[40.44598770 163.52909851]
[54.40994644 169.00704956]
[65.01889801 179.61129761]
[70.50279236 193.57142639]
[73.90577698 178.96252441]
[77.30875397 164.35363770]
[80.71173096 149.74475098]
[84.11470795 135.13584900]
[70.61623383 124.96928406]
[62.76119995 110.00711823]
[62.05823517 93.12299347]
[68.64235687 77.55966187]
[81.24901581 66.30621338]
[76.64345551 52.03075027]
[71.88964081 37.80397034]
[66.98809052 23.62741470]
[62.08653641 9.45085621]
[57.18498611 -4.72570229]
[52.28343582 -18.90225983]
[47.38188553 -33.07881927]
[32.50333786 -30.85543060]
[17.46958542 -31.40406418]
[2.79267740 -34.70603561]
[-11.02749920 -40.64887619]
[-23.52023506 -49.03017807]
[-34.26002884 -59.56447601]
[-42.88109207 -71.89297485]
[-49.08979034 -85.59577942]
[-52.67465973 -100.20616150]
[-53.51359940 -115.22650909]
[-51.57803726 -130.14523315]
[-46.93389511 -144.45419312]
[-39.73935699 -157.66606140]
[-30.23945808 -169.33081055]
[-18.75776672 -179.05117798]
[-5.68534279 -186.49606323]
[8.53257084 -191.41191101]
[23.41171837 -193.63130188]
[38.44532013 -193.07861328]
[53.12133789 -189.77268982]
[66.93991089 -183.82611084]
[79.43038940 -175.44145203]
[90.16734314 -164.90425110]
[98.78507996 -152.57342529]
[104.99008179 -138.86895752]
[108.57101440 -124.25760651]
[109.40590668 -109.23703003]
[107.46632385 -94.31883240]
[102.81832886 -80.01111603]
[95.62022400 -66.80120087]
[86.11717987 -55.13899994]
[74.63287354 -45.42173386]
[61.55844116 -37.98036957]
[66.45999146 -23.80381203]
[71.36154175 -9.62725353]
[76.26309204 4.54930496]
[81.16464233 18.72586250]
[86.06619263 32.90242004]
[91.25793457 38.23078918]
[90.91891479 47.42518616]
[95.52447510 61.70064545]
[102.04999542 61.49456787]
[108.51673889 62.39234543]
[114.73933411 64.36823273]
[120.53939056 67.36560059]
[125.75063324 71.29850769]
[130.22366333 76.05422211]
[133.83027649 81.49639130]
[136.46704102 87.46901703]
[149.09805298 77.94178772]
[162.75228882 83.89252472]
[177.61532593 81.87019348]
[192.47837830 79.84786224]
[207.34143066 77.82552338]
[222.20446777 75.80319214]
[237.06752014 73.78085327]
[247.88409424 61.93259430]
[263.88119507 63.14578629]
[272.78726196 76.48976898]
[267.77026367 91.72818756]
[252.67884827 97.17143250]
[239.08985901 88.64390564]
[224.22680664 90.66623688]
[209.36375427 92.68856812]
[194.50071716 94.71090698]
[179.63766479 96.73323822]
[164.77462769 98.75557709]
[153.20671082 108.13815308]
[138.48937988 102.33206940]
[132.35966492 120.96955872]
[117.85251617 134.17832947]
[98.72360229 138.53883362]
[95.32062531 153.14772034]
[91.91764069 167.75662231]
[88.51466370 182.36550903]
[85.11168671 196.97439575]
[83.70938110 211.90870667]
[84.33335876 226.89572144]
[87.83597565 235.40357971]
[84.81114197 242.20034790]
[85.12319946 257.19708252]
[85.43525696 272.19384766]
[85.74730682 287.19061279]
[86.05936432 302.18734741]
[86.37142181 317.18411255]
[86.68347931 332.18087769]
[86.99553680 347.17761230]
[87.30759430 362.17437744]
[101.96258545 365.76513672]
[115.18839264 373.02740479]
[126.08325958 383.46600342]
[133.90435791 396.36920166]
[138.11842346 410.85726929]
[138.43815613 425.94235229]
[134.84172058 440.59597778]
[127.57435608 453.81896973]
[117.13156128 464.70980835]
[104.22532654 472.52593994]
[89.73564148 476.73440552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
[44 92]
[45 91]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[100 120]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
