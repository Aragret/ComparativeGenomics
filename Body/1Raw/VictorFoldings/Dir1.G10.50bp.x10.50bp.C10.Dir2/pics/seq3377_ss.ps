%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUACAACGGGGGGGGGGUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCxxxxxxxxxxACCCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAACCCCCCCCCCUAUAUACACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 424.73867798]
[71.19830322 418.72265625]
[59.48964310 409.19323730]
[50.78712082 396.85757446]
[45.73651886 382.63104248]
[44.71262741 367.56936646]
[47.79142761 352.79022217]
[54.74444962 339.39028931]
[65.05573273 328.36395264]
[77.96011353 320.52944946]
[92.50000000 316.46813965]
[92.50000000 301.46813965]
[92.50000000 286.46813965]
[92.50000000 271.46813965]
[92.50000000 256.46813965]
[92.50000000 241.46812439]
[92.50000000 226.46812439]
[92.50000000 211.46812439]
[92.50000000 196.46812439]
[92.50000000 181.46812439]
[92.50000000 166.46812439]
[73.47261810 161.40489197]
[56.74373245 151.02114868]
[43.76284027 136.21662903]
[35.65467834 118.27406311]
[33.12178802 98.74813080]
[36.38364410 79.33066559]
[22.72740173 73.12525940]
[9.07116127 66.91985321]
[-4.58508015 60.71444702]
[0.31093433 74.89291382]
[-4.88836956 88.96299744]
[-17.82765579 96.55081177]
[-32.64530182 94.21899414]
[-42.62876892 83.02388763]
[-43.25544739 68.03698730]
[-34.24144745 56.04749680]
[-19.66979790 52.48682404]
[-32.28092575 44.36528397]
[-44.89205551 36.24374008]
[-57.50318146 28.12219810]
[-70.11431122 20.00065613]
[-82.72544098 11.87911320]
[-95.33656311 3.75757146]
[-108.11392212 -4.09985447]
[-121.05197906 -11.68976307]
[-133.99003601 -19.27967072]
[-146.92808533 -26.86957932]
[-163.32167053 -26.44217300]
[-171.65670776 -40.56517410]
[-163.35884094 -54.71004486]
[-146.96420288 -54.32575989]
[-139.33818054 -39.80763626]
[-126.40013123 -32.21772766]
[-113.46207428 -24.62781906]
[-100.52401733 -17.03791046]
[-95.70088959 -17.37401390]
[-90.62641144 -14.63887978]
[-87.21502686 -8.85355663]
[-74.60389709 -0.73201466]
[-61.99276733 7.38952732]
[-49.38164139 15.51106930]
[-36.77051163 23.63261223]
[-24.15938377 31.75415421]
[-11.54825592 39.87569427]
[1.62032676 47.05820465]
[15.27656841 53.26361084]
[28.93280983 59.46902084]
[42.58905029 65.67442322]
[46.70566559 59.57752991]
[51.46690369 53.96956635]
[56.81517792 48.91836548]
[62.68579483 44.48502731]
[69.00775146 40.72317123]
[75.70457458 37.67829895]
[82.69525909 35.38724518]
[89.89525604 33.87771606]
[97.21748352 33.16797256]
[104.57335663 33.26660156]
[111.87391663 34.17240524]
[119.03085327 35.87443161]
[125.95760345 38.35208893]
[132.57038879 41.57541275]
[138.78919983 45.50541687]
[144.53884888 50.09455872]
[149.74977112 55.28733826]
[154.35894775 61.02093887]
[167.45210266 53.70183182]
[180.54525757 46.38272858]
[176.68225098 31.80438614]
[176.56692505 16.72335434]
[180.20651245 2.08763933]
[187.37223816 -11.18274689]
[197.61366272 -22.25361633]
[210.28698730 -30.42904472]
[224.59556580 -35.19511795]
[239.63993835 -36.25223541]
[254.47442627 -33.53394699]
[268.16650391 -27.21112823]
[279.85546875 -17.68123436]
[288.80654907 -5.54332256]
[294.45706177 8.43960667]
[296.45184326 23.38857651]
[294.66549683 38.36388016]
[289.21026611 52.42415619]
[280.42910767 64.68556976]
[268.87402344 74.37734985]
[255.27134705 80.89026642]
[240.47618103 83.81491852]
[225.41853333 82.96745300]
[211.04495239 78.40113831]
[198.25898743 70.40303040]
[187.86436462 59.47588348]
[174.77120972 66.79499054]
[161.67805481 74.11408997]
[166.65843201 94.43977356]
[165.11433411 115.30969238]
[179.23913574 120.35844421]
[193.36393738 125.40720367]
[209.39138794 121.93552399]
[220.20980835 134.26005554]
[214.69012451 149.70236206]
[198.51051331 152.37673950]
[188.31517029 139.53201294]
[174.19036865 134.48324585]
[160.06556702 129.43449402]
[150.88581848 143.41539001]
[138.52465820 154.68193054]
[123.75491333 162.52972412]
[107.50000000 166.46812439]
[107.50000000 181.46812439]
[107.50000000 196.46812439]
[107.50000000 211.46812439]
[107.50000000 226.46812439]
[107.50000000 241.46812439]
[107.50000000 256.46813965]
[107.50000000 271.46813965]
[107.50000000 286.46813965]
[107.50000000 301.46813965]
[107.50000000 316.46813965]
[122.03988647 320.52944946]
[134.94427490 328.36395264]
[145.25555420 339.39028931]
[152.20857239 352.79022217]
[155.28736877 367.56936646]
[154.26348877 382.63104248]
[149.21287537 396.85757446]
[140.51036072 409.19323730]
[128.80169678 418.72265625]
[114.95575714 424.73867798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 69]
[28 68]
[29 67]
[30 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 56]
[46 55]
[47 54]
[48 53]
[87 115]
[88 114]
[89 113]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
