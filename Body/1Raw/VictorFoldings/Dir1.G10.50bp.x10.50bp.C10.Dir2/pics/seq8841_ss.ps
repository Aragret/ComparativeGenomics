%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUCAGCCGGGGGGGGGGCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACxxxxxxxxxxCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCCCCCCCCCCCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.45816040]
[71.19830322 365.44213867]
[59.48964310 355.91271973]
[50.78712082 343.57705688]
[45.73651886 329.35052490]
[44.71262741 314.28884888]
[47.79142761 299.50967407]
[54.74444962 286.10974121]
[65.05573273 275.08343506]
[77.96011353 267.24890137]
[92.50000000 263.18759155]
[92.50000000 248.18759155]
[92.50000000 233.18759155]
[92.50000000 218.18759155]
[92.50000000 203.18759155]
[92.50000000 188.18759155]
[92.50000000 173.18759155]
[92.50000000 158.18759155]
[92.50000000 143.18759155]
[92.50000000 128.18759155]
[74.79029846 114.67179871]
[71.78672791 92.59717560]
[85.24141693 74.84100342]
[81.23368073 60.38631821]
[77.22593689 45.93162918]
[73.21819305 31.47694206]
[69.21045685 17.02225304]
[65.20271301 2.56756449]
[65.77077484 17.55680466]
[57.04462433 29.75739098]
[42.67602158 34.06357574]
[28.67798996 28.67329407]
[20.90848160 15.84228611]
[22.61890984 0.94012386]
[33.09348679 -9.79687977]
[47.95001221 -11.87522507]
[33.01570511 -13.27752876]
[18.08139610 -14.67983246]
[1.74637711 -10.14072418]
[-7.13732433 -24.58081436]
[4.27918768 -37.11474991]
[19.48369980 -29.61413956]
[34.41800690 -28.21183586]
[49.35231400 -26.80953217]
[56.48288727 -22.43417740]
[63.30701447 -17.62135887]
[64.55388641 -32.56944656]
[65.33373260 -47.54916000]
[65.64579010 -62.54591370]
[65.95784760 -77.54266357]
[66.26990509 -92.53942108]
[66.58195496 -107.53617096]
[66.89401245 -122.53292847]
[56.23342896 -133.89028931]
[56.76353455 -149.09468079]
[67.65673828 -159.18792725]
[67.96879578 -174.18469238]
[59.73820114 -161.64445496]
[49.19261169 -150.97720337]
[36.74762344 -142.60328674]
[22.89369392 -136.85275269]
[8.17680168 -133.95222473]
[-6.82306290 -134.01599121]
[-21.51475906 -137.04156494]
[-35.31929016 -142.90968323]
[-47.69262695 -151.38911438]
[-58.14713287 -162.14566040]
[-66.27080536 -174.75541687]
[-71.74348450 -188.72143555]
[-74.34949493 -203.49333191]
[-73.98614502 -218.48892212]
[-70.66773987 -233.11726379]
[-64.52506256 -246.80183411]
[-55.80020142 -259.00332642]
[-44.83699036 -269.24090576]
[-32.06749344 -277.11111450]
[-17.99494934 -282.30374146]
[-3.17395806 -284.61419678]
[11.81139183 -283.95141602]
[26.37053108 -280.34149170]
[39.92968369 -273.92672729]
[51.95449448 -264.95989990]
[61.97106171 -253.79440308]
[69.58464050 -240.87025452]
[74.49517059 -226.69680786]
[76.50914764 -211.83262634]
[75.54753113 -196.86561584]
[84.31373596 -209.03746033]
[85.42078400 -225.39918518]
[100.26115417 -232.37741089]
[113.56833649 -222.79353333]
[111.65304565 -206.50660706]
[96.48557281 -200.27124023]
[87.71936798 -188.09941101]
[82.96555328 -173.87263489]
[82.65349579 -158.87586975]
[93.11740875 -148.33822632]
[93.01457214 -133.12493896]
[81.89076996 -122.22087097]
[81.57871246 -107.22412109]
[81.26665497 -92.22736359]
[80.95459747 -77.23061371]
[80.64253998 -62.23385620]
[80.33049011 -47.23710251]
[82.55409241 -44.42231369]
[83.48937225 -40.36929703]
[82.55984497 -35.71221924]
[79.50197601 -31.32257080]
[78.25510406 -16.37448311]
[79.65740204 -1.44017589]
[83.66514587 13.01451302]
[87.67288208 27.46920013]
[91.68062592 41.92388916]
[95.68836212 56.37857819]
[99.69610596 70.83326721]
[109.70294189 72.49284363]
[118.53634644 77.47901917]
[125.12804413 85.18878174]
[128.68086243 94.68975067]
[128.76515198 104.83291626]
[142.42138672 111.03832245]
[158.68196106 108.91094208]
[168.43846130 122.09208679]
[161.65423584 137.02214050]
[145.30831909 138.34233093]
[136.21597290 124.69456482]
[122.55973816 118.48915863]
[119.41213226 121.77062225]
[115.79277802 124.52302551]
[111.78964233 126.67948914]
[107.50000000 128.18759155]
[107.50000000 143.18759155]
[107.50000000 158.18759155]
[107.50000000 173.18759155]
[107.50000000 188.18759155]
[107.50000000 203.18759155]
[107.50000000 218.18759155]
[107.50000000 233.18759155]
[107.50000000 248.18759155]
[107.50000000 263.18759155]
[122.03988647 267.24890137]
[134.94427490 275.08343506]
[145.25555420 286.10974121]
[152.20857239 299.50967407]
[155.28736877 314.28884888]
[154.26348877 329.35052490]
[149.21287537 343.57705688]
[140.51036072 355.91271973]
[128.80169678 365.44213867]
[114.95575714 371.45816040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[36 44]
[37 43]
[38 42]
[46 109]
[47 108]
[48 104]
[49 103]
[50 102]
[51 101]
[52 100]
[53 99]
[56 96]
[57 95]
[87 94]
[88 93]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
