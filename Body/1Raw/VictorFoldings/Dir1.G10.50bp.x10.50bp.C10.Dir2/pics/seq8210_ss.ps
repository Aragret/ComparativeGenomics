%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAGGCCUAGGGGGGGGGGCCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCxxxxxxxxxxAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCCCCCCCCCCCAUCCUAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[89.54032135 562.16821289]
[75.83816528 555.90734863]
[63.87305069 546.75402832]
[54.24513626 535.16735840]
[47.43735886 521.72851562]
[43.79119110 507.11163330]
[43.48952484 492.04986572]
[46.54748535 477.29870605]
[52.81169510 463.59808350]
[61.96794128 451.63516235]
[73.55694580 442.01007080]
[86.99742126 435.20553589]
[101.61518097 431.56292725]
[101.31118011 416.56600952]
[101.00717163 401.56909180]
[100.70317078 386.57217407]
[100.39916229 371.57525635]
[100.09516144 356.57833862]
[99.79116058 341.58142090]
[99.48715210 326.58450317]
[99.18315125 311.58755493]
[98.87914276 296.59063721]
[83.74189758 293.97207642]
[69.39678192 288.46267700]
[56.39040756 280.27044678]
[45.21873856 269.70568848]
[36.30818939 257.16912842]
[29.99935150 243.13685608]
[26.53397179 228.14219666]
[26.04569435 212.75541687]
[28.55489922 197.56207275]
[33.96786499 183.14067078]
[42.08026886 170.04072571]
[52.58488846 158.76174927]
[65.08325958 149.73422241]
[79.10074615 143.30317688]
[94.10462952 139.71502686]
[93.49674988 124.72734833]
[92.88886261 109.73966980]
[91.97734833 94.76739502]
[90.76258087 79.81666565]
[89.54781342 64.86592865]
[78.72640228 50.00062943]
[86.78355408 34.43880844]
[85.26602936 19.51576805]
[83.74850464 4.59272814]
[82.23097992 -10.33031178]
[80.71345520 -25.25335121]
[65.69810486 -25.44611740]
[50.80261230 -27.34928131]
[36.22116470 -30.93803024]
[22.14385986 -36.16558075]
[8.75422668 -42.96377945]
[-3.77317381 -51.24399567]
[-15.27502155 -60.89828110]
[-25.60136604 -71.80077362]
[-34.61758423 -83.80934143]
[-42.20612717 -96.76741791]
[-48.26806641 -110.50607300]
[-52.72437286 -124.84619141]
[-55.51694489 -139.60083008]
[-56.60937500 -154.57762146]
[-55.98742676 -169.58132935]
[-53.65920639 -184.41632080]
[-49.65506744 -198.88920593]
[-44.02721024 -212.81130981]
[-36.84900665 -226.00112915]
[-28.21403694 -238.28669739]
[-18.23487854 -249.50784302]
[-7.04163027 -259.51828003]
[5.21978235 -268.18750000]
[18.38950539 -275.40249634]
[32.29584503 -281.06921387]
[46.75750351 -285.11373901]
[61.58594513 -287.48333740]
[76.58785248 -288.14718628]
[91.56763458 -287.09655762]
[106.33000946 -284.34518433]
[120.68251801 -279.92892456]
[134.43803406 -273.90536499]
[147.41725159 -266.35302734]
[159.45092773 -257.37036133]
[170.38220215 -247.07447815]
[180.06855774 -235.59962463]
[188.38371277 -223.09539795]
[195.21926880 -209.72479248]
[200.48608398 -195.66212463]
[204.11552429 -181.09075928]
[206.06027222 -166.20063782]
[206.29493713 -151.18588257]
[204.81651306 -136.24226379]
[201.64422607 -121.56457520]
[196.81945801 -107.34418488]
[190.40510559 -93.76648712]
[182.48480225 -81.00849152]
[173.16178894 -69.23651886]
[162.55763245 -58.60405350]
[150.81054688 -49.24970245]
[138.07369995 -41.29542160]
[124.51314545 -34.84490967]
[110.30567169 -29.98226357]
[95.63648987 -26.77087593]
[97.15401459 -11.84783649]
[98.67153931 3.07520318]
[100.18906403 17.99824333]
[101.70658875 32.92128372]
[110.90145874 40.83788681]
[112.25703430 53.29932404]
[104.49854279 63.65116501]
[105.71331024 78.60189056]
[106.92807770 93.55262756]
[110.09505463 97.81352997]
[110.61579132 103.55199432]
[107.87654114 109.13179016]
[108.48442841 124.11946869]
[109.09230804 139.10714722]
[123.59544373 141.28137207]
[137.44380188 146.09490967]
[150.16160583 153.38073730]
[161.31222534 162.88697815]
[170.51313782 174.28552246]
[177.44911194 187.18339539]
[181.88293457 201.13629150]
[183.66358948 215.66384888]
[182.73132324 230.26628113]
[179.11973572 244.44145203]
[172.95451355 257.70223999]
[164.44906616 269.59320068]
[153.89717102 279.70626831]
[141.66279602 287.69473267]
[128.16751099 293.28515625]
[113.87606049 296.28665161]
[114.18006897 311.28356934]
[114.48406982 326.28048706]
[114.78807831 341.27740479]
[115.09207916 356.27432251]
[115.39608765 371.27124023]
[115.70008850 386.26815796]
[116.00408936 401.26507568]
[116.30809784 416.26199341]
[116.61209869 431.25891113]
[131.36547852 434.30615234]
[145.07066345 440.56039429]
[157.04020691 449.70794678]
[166.67373657 461.28994751]
[173.48802185 474.72549438]
[177.14128113 489.34060669]
[177.45024109 504.40222168]
[174.39942932 519.15484619]
[168.14186096 532.85852051]
[158.99140930 544.82586670]
[147.40707397 554.45654297]
[133.96990967 561.26757812]
[119.35390472 564.91729736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[37 116]
[38 115]
[39 114]
[40 111]
[41 110]
[42 109]
[44 106]
[45 105]
[46 104]
[47 103]
[48 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
