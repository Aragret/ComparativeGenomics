%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACACUUAGGGGGGGGGGGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCxxxxxxxxxxGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCCCCCCCCCCCUUACACCUAG\
) } def
/len { sequence length } bind def

/coor [
[98.70492554 451.92834473]
[84.68298340 446.37533569]
[72.48302460 437.50900269]
[62.87195206 425.88668823]
[56.45392609 412.23898315]
[53.63238907 397.42379761]
[54.58470535 382.37240601]
[59.25101089 368.03100586]
[67.33798218 355.30102539]
[78.33724976 344.98275757]
[91.55741119 337.72479248]
[106.16742706 333.98336792]
[106.16742706 318.98336792]
[106.16742706 303.98336792]
[106.16742706 288.98336792]
[106.16742706 273.98336792]
[106.16742706 258.98336792]
[106.16742706 243.98335266]
[106.16742706 228.98335266]
[106.16742706 213.98335266]
[106.16742706 198.98335266]
[106.16742706 183.98335266]
[106.16742706 168.98335266]
[106.16742706 153.98335266]
[106.16742706 138.98335266]
[89.03138733 136.16448975]
[75.49251556 126.52603912]
[67.93737030 112.56686401]
[53.11489105 114.86773682]
[38.29240799 117.16860962]
[23.46992493 119.46949005]
[14.34454536 132.37309265]
[-1.24620366 134.96231079]
[-14.05260754 125.70101929]
[-16.47685242 110.08377075]
[-7.08067942 97.37599945]
[8.56133080 95.11700439]
[21.16905022 104.64700317]
[35.99153137 102.34613037]
[50.81401443 100.04525757]
[65.63649750 97.74437714]
[69.46092224 84.08451080]
[78.46691132 73.12502289]
[91.12642670 66.72541809]
[90.51060486 51.73806381]
[89.89477539 36.75070953]
[89.27895355 21.76335716]
[83.14978027 8.07273102]
[72.38110352 -2.36927843]
[54.44570160 -6.41305923]
[50.24367905 -23.42445374]
[39.26287842 -33.64316177]
[28.28207397 -43.86186981]
[17.30127144 -54.08057404]
[1.20618057 -57.22383118]
[-3.86258435 -72.81997681]
[7.30928802 -84.82502747]
[23.22913361 -80.88922119]
[27.51997948 -65.06137848]
[38.50078201 -54.84267044]
[49.48158264 -44.62396240]
[60.46238708 -34.40525436]
[72.59704590 -34.51584625]
[81.83315277 -26.03848648]
[82.82311249 -13.13795757]
[93.59178925 -2.69594812]
[101.07756042 -3.15765500]
[96.63332367 -17.48415947]
[92.18908691 -31.81066513]
[87.74485016 -46.13716888]
[78.58315277 -58.01417542]
[76.85457611 -72.91424561]
[83.05381775 -86.57328796]
[95.40677643 -95.08237457]
[110.37828827 -96.00637817]
[123.68382263 -89.08087158]
[131.51562500 -76.28778839]
[131.63238525 -61.28824234]
[123.99909210 -48.37325668]
[121.34909821 -33.60919189]
[118.69910431 -18.84513092]
[116.04911041 -4.08106852]
[123.53488922 -4.54277515]
[132.93875122 -16.22898483]
[142.34260559 -27.91519165]
[151.74645996 -39.60140228]
[161.15031433 -51.28760910]
[154.99269104 -65.29982758]
[156.06376648 -80.56781769]
[164.11740112 -93.58309937]
[177.30293274 -101.35485840]
[192.59042358 -102.09720612]
[206.46691895 -95.63955688]
[215.74371338 -83.46582031]
[218.28906250 -68.37344360]
[213.51805115 -53.83053970]
[202.52702332 -43.17896271]
[187.84165955 -38.86636734]
[172.83653259 -41.88375092]
[163.43266296 -30.19754410]
[154.02880859 -18.51133537]
[144.62495422 -6.82512665]
[135.22109985 4.86108160]
[104.26630402 21.14753151]
[104.88213348 36.13488388]
[105.49795532 51.12223816]
[106.11378479 66.10958862]
[114.76827240 68.09621429]
[122.79636383 72.29931641]
[129.62954712 78.52506256]
[134.75856018 86.43384552]
[137.77055359 95.55815887]
[138.38119507 105.33001709]
[136.45872498 115.11621857]
[151.04248047 118.62538910]
[165.62622070 122.13455200]
[177.34281921 111.96101379]
[192.80448914 110.65083313]
[206.06588745 118.70780182]
[212.02775574 133.03385925]
[208.39762878 148.12033081]
[196.57135010 158.16616821]
[181.09638977 159.30854797]
[167.92315674 151.10818481]
[162.11706543 136.71830750]
[147.53330994 133.20913696]
[132.94955444 129.69996643]
[121.16742706 138.98335266]
[121.16742706 153.98335266]
[121.16742706 168.98335266]
[121.16742706 183.98335266]
[121.16742706 198.98335266]
[121.16742706 213.98335266]
[121.16742706 228.98335266]
[121.16742706 243.98335266]
[121.16742706 258.98336792]
[121.16742706 273.98336792]
[121.16742706 288.98336792]
[121.16742706 303.98336792]
[121.16742706 318.98336792]
[121.16742706 333.98336792]
[135.77743530 337.72479248]
[148.99758911 344.98275757]
[159.99687195 355.30102539]
[168.08383179 368.03100586]
[172.75013733 382.37240601]
[173.70245361 397.42379761]
[170.88092041 412.23898315]
[164.46289062 425.88668823]
[154.85182190 437.50900269]
[142.65187073 446.37533569]
[128.62992859 451.92834473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[28 41]
[29 40]
[30 39]
[31 38]
[44 107]
[45 106]
[46 105]
[47 104]
[48 66]
[49 65]
[51 62]
[52 61]
[53 60]
[54 59]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
