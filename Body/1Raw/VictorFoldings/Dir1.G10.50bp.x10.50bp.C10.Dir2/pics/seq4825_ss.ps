%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAUAAUCCGGGGGGGGGGUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAxxxxxxxxxxACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGCCCCCCCCCCUCCAUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.20767212]
[71.19830322 367.19165039]
[59.48964310 357.66223145]
[50.78712082 345.32656860]
[45.73651886 331.10003662]
[44.71262741 316.03836060]
[47.79142761 301.25918579]
[54.74444962 287.85925293]
[65.05573273 276.83291626]
[77.96011353 268.99841309]
[92.50000000 264.93710327]
[92.50000000 249.93710327]
[92.50000000 234.93710327]
[92.50000000 219.93710327]
[92.50000000 204.93710327]
[92.50000000 189.93710327]
[92.50000000 174.93710327]
[92.50000000 159.93710327]
[92.50000000 144.93710327]
[92.50000000 129.93710327]
[92.50000000 114.93711090]
[89.70195007 129.67382812]
[77.74426270 138.72996521]
[62.80071259 137.42982483]
[52.58669281 126.44465637]
[52.37572479 111.44614410]
[62.27672577 100.17803955]
[77.17977905 98.45861053]
[62.21953201 97.36730194]
[53.36739349 99.87558746]
[46.96045303 96.09448242]
[32.02614212 94.69218445]
[17.09183693 93.28987885]
[9.66099358 106.58282471]
[-2.53803587 115.69894409]
[-17.39169502 119.05880737]
[-32.32649994 116.08029938]
[-44.75490189 107.27946472]
[-52.52360916 94.18109894]
[-54.28664398 79.05458069]
[-49.73855209 64.52066803]
[-39.66731262 53.09743881]
[-25.81783485 46.76404953]
[-10.58962059 46.61779404]
[3.37894869 52.68400955]
[13.66773319 63.91168976]
[18.49414062 78.35556793]
[33.42844772 79.75787354]
[48.36275482 81.16017914]
[63.31084061 82.40705109]
[78.27108765 83.49835968]
[88.28968811 82.52999878]
[96.20415497 85.71699524]
[100.60491180 91.49559784]
[109.86985779 79.69895935]
[119.13481140 67.90232086]
[128.39976501 56.10568237]
[116.56822968 48.58386612]
[110.95581818 36.31814194]
[112.84676361 23.49929428]
[121.06185913 14.17571068]
[132.51864624 10.97499466]
[137.12420654 -3.30046630]
[141.72976685 -17.57592773]
[146.33534241 -31.85138702]
[133.00949097 -38.81773376]
[121.05275726 -47.93608856]
[110.80913544 -58.94409943]
[102.57336426 -71.52503967]
[96.58240509 -85.31694031]
[93.00862885 -99.92296600]
[91.95485687 -114.92288971]
[93.45140839 -129.88511658]
[97.45523071 -144.37916565]
[103.85111237 -157.98800659]
[112.45504761 -170.32009888]
[123.01947784 -181.02059937]
[135.24043274 -189.78166199]
[148.76631165 -196.35119629]
[163.20793152 -200.54017639]
[178.14978027 -202.22810364]
[193.16195679 -201.36639404]
[207.81253052 -197.97982788]
[221.67997742 -192.16587830]
[234.36528015 -184.09179688]
[245.50349426 -173.98989868]
[254.77412415 -162.15083313]
[261.91046143 -148.91525269]
[266.70712280 -134.66394043]
[269.02618408 -119.80695343]
[268.80084229 -104.77175140]
[266.03762817 -89.99092865]
[260.81604004 -75.88976288]
[253.28628540 -62.87397003]
[243.66503906 -51.31803894]
[232.22909546 -41.55445480]
[219.30752563 -33.86413956]
[205.27209473 -28.46835899]
[190.52661133 -25.52235794]
[175.49536133 -25.11089897]
[160.61079407 -27.24582291]
[156.00523376 -12.97036266]
[151.39967346 1.30509806]
[146.79409790 15.58055878]
[156.33738708 27.57993698]
[155.38108826 44.51636124]
[170.31538391 45.91866302]
[185.24969482 47.32096481]
[200.19778442 48.56784058]
[215.15803528 49.65915298]
[230.11828613 50.75046158]
[245.07853699 51.84177399]
[258.10916138 42.48323441]
[273.51071167 46.97454453]
[279.46841431 61.87035370]
[271.41204834 75.74387360]
[255.52177429 77.95252228]
[243.98722839 66.80202484]
[229.02697754 65.71070862]
[214.06672668 64.61940002]
[199.10647583 63.52809143]
[192.16163635 66.19547272]
[183.84739685 62.25527573]
[168.91308594 60.85297012]
[153.97877502 59.45066833]
[140.19639587 65.37062836]
[130.93144226 77.16726685]
[121.66650391 88.96391296]
[112.40155029 100.76055145]
[107.50000000 114.93711090]
[107.50000000 129.93710327]
[107.50000000 144.93710327]
[107.50000000 159.93710327]
[107.50000000 174.93710327]
[107.50000000 189.93710327]
[107.50000000 204.93710327]
[107.50000000 219.93710327]
[107.50000000 234.93710327]
[107.50000000 249.93710327]
[107.50000000 264.93710327]
[122.03988647 268.99841309]
[134.94427490 276.83291626]
[145.25555420 287.85925293]
[152.20857239 301.25918579]
[155.28736877 316.03836060]
[154.26348877 331.10003662]
[149.21287537 345.32656860]
[140.51036072 357.66223145]
[128.80169678 367.19165039]
[114.95575714 373.20767212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 51]
[29 50]
[31 49]
[32 48]
[33 47]
[54 129]
[55 128]
[56 127]
[57 126]
[62 104]
[63 103]
[64 102]
[65 101]
[106 125]
[107 124]
[108 123]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
