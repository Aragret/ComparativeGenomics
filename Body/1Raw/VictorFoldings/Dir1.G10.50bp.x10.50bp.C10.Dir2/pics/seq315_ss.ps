%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCCUCCCCGGGGGGGGGGCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAxxxxxxxxxxCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCCCCCCCCCCCACCCCCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 384.21420288]
[70.87159729 379.05920410]
[58.28185654 370.77700806]
[47.94191742 359.81423950]
[40.40940475 346.76211548]
[36.09054184 332.32449341]
[35.21823120 317.28005981]
[37.83952332 302.44006348]
[43.81304932 288.60482788]
[52.81666565 276.52047729]
[64.36482239 266.83868408]
[77.83473969 260.08160400]
[92.50000000 256.61364746]
[92.50000000 241.61363220]
[92.50000000 226.61363220]
[92.50000000 211.61363220]
[92.50000000 196.61363220]
[92.50000000 181.61363220]
[92.50000000 166.61363220]
[92.50000000 151.61363220]
[92.50000000 136.61363220]
[92.50000000 121.61363220]
[86.55269623 118.50862885]
[81.76184082 113.81190491]
[67.49599457 118.44715881]
[53.23014450 123.08241272]
[49.40776062 138.02874756]
[38.09601974 148.51913452]
[22.90445518 151.20611572]
[8.68063736 145.23228455]
[-0.03666256 132.50387573]
[-0.46578625 117.08248901]
[7.53019810 103.88901520]
[21.39980125 97.13344574]
[36.71728134 98.97146606]
[48.59489059 108.81656647]
[62.86073685 104.18131256]
[77.12658691 99.54605865]
[83.74110413 83.90504456]
[99.31427765 77.13236237]
[103.80472565 62.82027054]
[100.55352783 47.33672333]
[111.74606323 37.50939560]
[116.23651123 23.19730568]
[120.72695923 8.88521671]
[125.21740723 -5.42687225]
[129.70785522 -19.73896027]
[134.19830322 -34.05104828]
[133.78489685 -43.23638153]
[138.92750549 -48.60603714]
[143.70709229 -62.82418060]
[148.48667908 -77.04232025]
[152.83184814 -91.39917755]
[152.04655457 -100.56021118]
[156.96731567 -106.13386536]
[161.16677856 -120.53401947]
[165.36624146 -134.93417358]
[151.51173401 -140.72491455]
[138.39271545 -148.03047180]
[126.17416382 -156.75898743]
[115.00974274 -166.80068970]
[105.03986359 -178.02929688]
[96.38990021 -190.30357361]
[89.16864014 -203.46919250]
[83.46689606 -217.36056519]
[79.35636902 -231.80299377]
[76.88876343 -246.61483765]
[76.09510803 -261.60983276]
[76.98538208 -276.59942627]
[79.54838562 -291.39505005]
[83.75189209 -305.81069946]
[89.54303741 -319.66503906]
[96.84899139 -332.78384399]
[105.57787323 -345.00213623]
[115.61991119 -356.16625977]
[126.84880829 -366.13580322]
[139.12335205 -374.78540039]
[152.28918457 -382.00625610]
[166.18072510 -387.70758057]
[180.62327576 -391.81768799]
[195.43519592 -394.28485107]
[210.43022156 -395.07803345]
[225.41976929 -394.18731689]
[240.21534729 -391.62387085]
[254.63084412 -387.41992188]
[268.48501587 -381.62838745]
[281.60360718 -374.32202148]
[293.82162476 -365.59277344]
[304.98544312 -355.55041504]
[314.95465088 -344.32122803]
[323.60388184 -332.04641724]
[330.82437134 -318.88037109]
[336.52526855 -304.98864746]
[340.63491821 -290.54598999]
[343.10165405 -275.73397827]
[343.89440918 -260.73892212]
[343.00323486 -245.74940491]
[340.43936157 -230.95391846]
[336.23498535 -216.53854370]
[330.44299316 -202.68455505]
[323.13626099 -189.56617737]
[314.40664673 -177.34841919]
[304.36395264 -166.18489075]
[293.13446045 -156.21601868]
[280.85940552 -147.56715393]
[267.69314575 -140.34707642]
[253.80125427 -134.64657593]
[239.35845947 -130.53735352]
[224.54638672 -128.07107544]
[209.55131531 -127.27876282]
[194.56181335 -128.17037964]
[179.76640320 -130.73471069]
[175.56694031 -116.33455658]
[171.36747742 -101.93440247]
[167.31416321 -87.49243164]
[168.79153442 -84.22978210]
[168.72613525 -80.07838440]
[166.71293640 -75.78803253]
[162.70481873 -72.26273346]
[157.92523193 -58.04459381]
[153.14564514 -43.82645035]
[148.51039124 -29.56060219]
[144.01994324 -15.24851418]
[139.52949524 -0.93642533]
[135.03904724 13.37566376]
[130.54859924 27.68775177]
[126.05815125 41.99983978]
[129.63053894 56.45969391]
[118.11681366 67.31071472]
[113.62637329 81.62280273]
[122.37731171 95.24024200]
[119.92617035 111.24040985]
[107.50000000 121.61363220]
[107.50000000 136.61363220]
[107.50000000 151.61363220]
[107.50000000 166.61363220]
[107.50000000 181.61363220]
[107.50000000 196.61363220]
[107.50000000 211.61363220]
[107.50000000 226.61363220]
[107.50000000 241.61363220]
[107.50000000 256.61364746]
[122.16526031 260.08160400]
[135.63517761 266.83868408]
[147.18333435 276.52047729]
[156.18695068 288.60482788]
[162.16047668 302.44006348]
[164.78176880 317.28005981]
[163.90945435 332.32449341]
[159.59059143 346.76211548]
[152.05809021 359.81423950]
[141.71813965 370.77700806]
[129.12840271 379.05920410]
[114.96779633 384.21420288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 38]
[25 37]
[26 36]
[40 130]
[41 129]
[43 127]
[44 126]
[45 125]
[46 124]
[47 123]
[48 122]
[50 121]
[51 120]
[52 119]
[53 115]
[55 114]
[56 113]
[57 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
