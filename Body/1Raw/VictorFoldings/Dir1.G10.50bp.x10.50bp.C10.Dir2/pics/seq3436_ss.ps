%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAAACUGGGGGGGGGGCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAxxxxxxxxxxUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCCCCCCCCCCCAUAACACU\
) } def
/len { sequence length } bind def

/coor [
[-4.10040665 297.96752930]
[-19.37498283 289.14978027]
[-33.90731049 279.15597534]
[-47.60702515 268.04818726]
[-60.38894653 255.89553833]
[-72.17359924 242.77352905]
[-82.88771057 228.76379395]
[-92.46466064 213.95343018]
[-100.84490204 198.43452454]
[-107.97632599 182.30357361]
[-122.10112762 187.35232544]
[-136.22593689 192.40109253]
[-146.61666870 204.33186340]
[-161.20559692 201.32980347]
[-175.33039856 206.37855530]
[-189.45520020 211.42730713]
[-203.29841614 217.20358276]
[-216.82260132 223.69174194]
[-230.34680176 230.17991638]
[-243.87098694 236.66807556]
[-257.39517212 243.15623474]
[-270.91937256 249.64440918]
[-272.72363281 264.96591187]
[-282.54254150 276.86517334]
[-297.24288940 281.54519653]
[-312.13391113 277.51263428]
[-322.46386719 266.05419922]
[-324.93655396 250.82629395]
[-318.76290894 236.68804932]
[-305.91296387 228.15093994]
[-290.48703003 227.93914795]
[-277.40753174 236.12022400]
[-263.88333130 229.63204956]
[-250.35914612 223.14389038]
[-236.83496094 216.65571594]
[-223.31077576 210.16755676]
[-209.78659058 203.67939758]
[-222.66871643 195.99496460]
[-224.90374756 181.16239929]
[-214.85803223 170.02313232]
[-199.87417603 170.71902466]
[-190.90417480 182.74147034]
[-194.50395203 197.30250549]
[-180.37915039 192.25375366]
[-166.25434875 187.20498657]
[-156.87391663 175.63534546]
[-141.27468872 178.27629089]
[-127.14988708 173.22752380]
[-113.02508545 168.17877197]
[-116.76826477 155.13212585]
[-119.71320343 141.88247681]
[-121.84905243 128.47857666]
[-123.16795349 114.96981049]
[-123.66505432 101.40592194]
[-123.33850861 87.83685303]
[-122.18952942 74.31257629]
[-120.22235107 60.88289261]
[-117.44420624 47.59725571]
[-113.86534119 34.50459290]
[-109.49891663 21.65310860]
[-104.36102295 9.09013653]
[-98.47058105 -3.13806391]
[-91.84927368 -14.98646259]
[-84.52149200 -26.41142845]
[-76.51422119 -37.37088776]
[-67.85694122 -47.82448578]
[-58.58153534 -57.73372650]
[-48.72215652 -67.06211853]
[-38.31511688 -75.77531433]
[-27.39873505 -83.84121704]
[-16.01321411 -91.23014069]
[-4.20047855 -97.91485596]
[7.99597073 -103.87076569]
[20.53122139 -109.07592773]
[33.35911179 -113.51117706]
[46.43240356 -117.16017914]
[59.70296097 -120.00949860]
[73.12190247 -122.04864502]
[86.63983154 -123.27009583]
[100.20695496 -123.66937256]
[113.77330780 -123.24499512]
[127.28894806 -121.99852753]
[140.70410156 -119.93455505]
[153.96936035 -117.06068420]
[167.03587341 -113.38749695]
[179.85554504 -108.92851257]
[192.38113403 -103.70016479]
[204.56654358 -97.72169495]
[216.36688232 -91.01512909]
[227.73872375 -83.60514832]
[238.64015198 -75.51905823]
[249.03105164 -66.78662109]
[258.87313843 -57.44000244]
[268.13021851 -47.51361465]
[276.76812744 -37.04401398]
[284.75509644 -26.06975365]
[292.06173706 -14.63124657]
[298.66110229 -2.77061582]
[304.52890015 9.46846390]
[309.64355469 22.04092216]
[323.87033081 17.28710747]
[338.09710693 12.53329277]
[352.32388306 7.77947855]
[362.78424072 -4.85037279]
[378.90469360 -1.83997929]
[384.10192871 13.71382427]
[373.02944946 25.81061745]
[357.07769775 22.00625801]
[342.85092163 26.76007271]
[328.62414551 31.51388741]
[314.39736938 36.26770020]
[318.00576782 49.98484802]
[320.73751831 63.90311813]
[322.58157349 77.96655273]
[323.53057861 92.11858368]
[323.58065796 106.30231476]
[322.73165894 120.46070099]
[320.98696899 134.53680420]
[318.35360718 148.47402954]
[314.84216309 162.21632385]
[310.46679688 175.70841980]
[305.24502563 188.89605713]
[299.19790649 201.72622681]
[292.34973145 214.14730835]
[284.72805786 226.10935974]
[276.36352539 237.56428528]
[267.28979492 248.46601868]
[278.16860962 258.79321289]
[289.04742432 269.12042236]
[305.11053467 272.42330933]
[310.02423096 288.06900024]
[298.73373413 299.96255493]
[282.85375977 295.86892700]
[278.72024536 279.99926758]
[267.84140015 269.67205811]
[256.96258545 259.34484863]
[243.91952515 271.21682739]
[229.98161316 282.02420044]
[215.23550415 291.69979858]
[199.77287292 300.18341064]
[183.68988037 307.42236328]
[167.08651733 313.37158203]
[150.06602478 317.99407959]
[132.73423767 321.26116943]
[115.19889832 323.15246582]
[97.56906891 323.65625000]
[79.95434570 322.76940918]
[62.46426773 320.49740601]
[45.20757675 316.85437012]
[28.29157829 311.86300659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 49]
[11 48]
[12 47]
[14 45]
[15 44]
[16 43]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[100 111]
[101 110]
[102 109]
[103 108]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
