%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUCUAAAUCACCGGGGGGGGGGACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCxxxxxxxxxxCGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCACCCCCCCCCCUCACCCUCUACAUCACC\
) } def
/len { sequence length } bind def

/coor [
[87.89733887 558.52685547]
[73.34571075 554.73767090]
[59.64384460 548.54351807]
[47.18597031 540.12280273]
[36.33052444 529.71759033]
[27.38984299 517.62744141]
[20.62116432 504.20013428]
[16.21923828 489.82199097]
[14.31071758 474.90670776]
[14.95051193 459.88342285]
[18.12021446 445.18441772]
[23.72862625 431.23257446]
[31.61438370 418.42935181]
[41.55059433 407.14306641]
[53.25137711 397.69851685]
[66.38007355 390.36740112]
[80.55895233 385.36065674]
[95.38005066 382.82232666]
[95.38005066 367.82232666]
[95.38005066 352.82232666]
[95.38005066 337.82232666]
[95.38005066 322.82232666]
[95.38005066 307.82232666]
[95.38005066 292.82232666]
[95.38005066 277.82232666]
[95.38005066 262.82232666]
[95.38005066 247.82234192]
[80.91519165 243.98600769]
[67.92633057 236.53038025]
[57.30186462 225.95848083]
[49.77025604 212.98669434]
[45.85010910 198.49624634]
[45.81444168 183.47334290]
[49.67169189 168.94203186]
[57.16473389 155.89437866]
[67.78799438 145.22282410]
[80.82157898 137.65901184]
[95.38005066 133.72377014]
[95.38005066 118.72377777]
[85.26189423 129.79730225]
[70.37458038 127.96212006]
[63.24855804 114.76287842]
[69.88170624 101.30920410]
[84.69107056 98.92489624]
[72.15003967 90.69551849]
[59.60900879 82.46614838]
[44.32393265 85.46683502]
[31.72277451 76.94242859]
[28.95627785 62.35194778]
[16.41524887 54.12257385]
[-1.96800911 53.51836014]
[-9.28181171 37.58734131]
[-21.97724533 29.59822464]
[-37.87653732 31.74114227]
[-49.36487198 20.54302979]
[-47.62938309 4.59412336]
[-34.00138855 -3.87094283]
[-18.93512154 1.64150643]
[-13.98812962 16.90279198]
[-1.29269624 24.89190674]
[10.59741592 22.51708794]
[21.25002289 29.10737610]
[24.64462280 41.58154297]
[37.18564987 49.81091690]
[51.67173386 46.54151154]
[64.50735474 54.70861435]
[67.83838654 69.92511749]
[80.37940979 78.15449524]
[92.92044067 86.38386536]
[83.63629150 74.60233307]
[86.07269287 59.80152130]
[98.64341736 51.61757278]
[113.16423035 55.37868500]
[120.18129730 68.63616943]
[115.12642670 82.75834656]
[124.39881134 70.96755219]
[115.70797729 59.95618057]
[109.70817566 47.28485489]
[106.70119476 33.59917831]
[106.83643341 19.59556961]
[110.10350800 5.98581791]
[116.33290863 -6.53909731]
[125.20484161 -17.34408760]
[136.26559448 -25.88215637]
[148.95080566 -31.72209358]
[162.61418152 -34.57024765]
[176.56047058 -34.28529358]
[190.08084106 -30.88524246]
[202.48889160 -24.54633522]
[212.20343018 -35.97557831]
[197.31607056 -34.14083099]
[184.12286377 -41.27801514]
[177.51210022 -54.74270248]
[179.93316650 -69.54602814]
[190.48899841 -80.20314789]
[205.26853943 -82.76544189]
[218.79573059 -76.28353882]
[226.05856323 -63.15908813]
[224.36576843 -48.25424194]
[235.70201111 -58.07715225]
[247.03825378 -67.90006256]
[258.37448120 -77.72297668]
[260.94860840 -93.55817413]
[275.00399780 -101.29282379]
[289.75863647 -94.99356079]
[293.89398193 -79.49264526]
[284.23776245 -66.68104553]
[268.19741821 -66.38673401]
[256.86117554 -56.56381989]
[245.52491760 -46.74090958]
[234.18867493 -36.91799927]
[223.63267517 -26.26103020]
[213.91813660 -14.83178806]
[223.19439697 -1.75899100]
[228.80044556 13.26972580]
[230.35401917 29.24532318]
[227.74511719 45.09367752]
[221.14382935 59.74780273]
[210.98918152 72.21966553]
[197.96002197 81.66684723]
[182.92955017 87.44937897]
[166.90689087 89.17314911]
[150.96925354 86.71673584]
[136.18960571 80.23993683]
[126.91722107 92.03073120]
[110.38005066 118.72377777]
[110.38005066 133.72377014]
[124.93852234 137.65901184]
[137.97210693 145.22282410]
[148.59536743 155.89437866]
[156.08840942 168.94203186]
[159.94566345 183.47334290]
[159.90998840 198.49624634]
[155.98983765 212.98669434]
[148.45823669 225.95848083]
[137.83377075 236.53038025]
[124.84490204 243.98600769]
[110.38005066 247.82234192]
[110.38005066 262.82232666]
[110.38005066 277.82232666]
[110.38005066 292.82232666]
[110.38005066 307.82232666]
[110.38005066 322.82232666]
[110.38005066 337.82232666]
[110.38005066 352.82232666]
[110.38005066 367.82232666]
[110.38005066 382.82232666]
[125.20114899 385.36065674]
[139.38002014 390.36740112]
[152.50872803 397.69851685]
[164.20950317 407.14306641]
[174.14572144 418.42935181]
[182.03147888 431.23257446]
[187.63987732 445.18441772]
[190.80958557 459.88342285]
[191.44938660 474.90670776]
[189.54086304 489.82199097]
[185.13893127 504.20013428]
[178.37025452 517.62744141]
[169.42958069 529.71759033]
[158.57412720 540.12280273]
[146.11625671 548.54351807]
[132.41438293 554.73767090]
[117.86276245 558.52685547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[38 127]
[39 126]
[44 69]
[45 68]
[46 67]
[49 64]
[50 63]
[52 60]
[53 59]
[75 125]
[76 124]
[89 113]
[90 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
