%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCCAGGGGGGGGGGCAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGxxxxxxxxxxAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCCCCCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[163.77709961 448.10433960]
[150.55690002 440.83184814]
[139.67010498 430.38485718]
[131.85896301 417.47561646]
[127.65608978 402.98428345]
[127.34801483 387.89895630]
[130.95574951 373.24813843]
[138.23332214 360.03073120]
[148.68453979 349.14797974]
[161.59680176 341.34182739]
[176.08973694 337.14453125]
[175.77767944 322.14779663]
[175.46562195 307.15103149]
[175.15356445 292.15426636]
[174.84150696 277.15753174]
[174.52944946 262.16076660]
[174.21739197 247.16401672]
[173.90533447 232.16726685]
[173.59329224 217.17051697]
[173.28123474 202.17375183]
[168.37968445 187.99719238]
[159.36215210 176.01036072]
[149.73362732 164.50856018]
[139.52014160 153.52290344]
[129.30665588 142.53723145]
[119.09318542 131.55157471]
[108.87969971 120.56590271]
[94.44879150 125.96461487]
[77.36811829 120.74604034]
[65.41426086 104.30138397]
[50.45401001 103.21007538]
[35.49376297 102.11876678]
[20.53351402 101.02745819]
[5.57326460 99.93614197]
[-2.98704314 112.68827057]
[-16.78360939 119.43737030]
[-32.10522461 118.36796570]
[-44.83045578 109.76773071]
[-51.53627777 95.95008087]
[-50.41885757 80.63188934]
[-41.77877426 67.93367767]
[-27.94016838 61.27120209]
[-12.62555599 62.43663406]
[0.04550925 71.11647797]
[6.66457510 84.97589874]
[21.62482452 86.06720734]
[36.58507156 87.15851593]
[51.54532242 88.24982452]
[66.50556946 89.34114075]
[71.61231232 83.84830475]
[59.00666046 75.71826172]
[44.95802689 70.46127319]
[41.51119995 55.86266327]
[51.72488022 44.87718201]
[66.53548431 47.25330353]
[72.80018616 60.88188934]
[81.82579041 72.86264038]
[86.93253326 67.36981201]
[84.75569153 52.52860260]
[82.57885742 37.68739700]
[67.58054352 36.10581207]
[53.44704056 30.84321213]
[41.06679535 22.23041153]
[31.21803665 10.80881882]
[24.51986694 -2.70359540]
[21.39334106 -17.45742989]
[22.03499222 -32.52524567]
[26.40448570 -46.95986938]
[34.22715378 -59.85392761]
[45.01125336 -70.39688873]
[58.07889175 -77.92601013]
[72.60861969 -81.96800232]
[87.68709564 -82.26879883]
[102.36646271 -78.80947113]
[115.72397614 -71.80748749]
[126.91996002 -61.70299911]
[135.25062561 -49.13117599]
[140.19230652 -34.88229370]
[141.43437195 -19.85205460]
[138.89872742 -4.98526859]
[132.74476624 8.78352547]
[123.35935211 20.58880806]
[111.33244324 29.68849182]
[97.42005920 35.51055908]
[99.59690094 50.35176468]
[101.77373505 65.19297028]
[124.84645844 85.78254700]
[119.86536407 110.35242462]
[130.07884216 121.33808899]
[140.29232788 132.32374573]
[150.50581360 143.30941772]
[160.71928406 154.29507446]
[164.22912598 139.71150208]
[177.72776794 133.17034912]
[191.34880066 139.45268250]
[195.13633728 153.96661377]
[186.32200623 166.10365295]
[171.34898376 166.99282837]
[180.36651611 178.97967529]
[179.15705872 164.02850342]
[180.83226013 149.12234497]
[185.33013916 134.81259155]
[192.48431396 121.62859344]
[202.03015137 110.05805969]
[213.61450195 100.52901459]
[226.80885315 93.39395142]
[241.12510681 88.91680908]
[256.03369141 87.26321411]
[270.98306274 88.49433899]
[285.42028809 92.56462860]
[298.81121826 99.32352448]
[310.66055298 108.52099609]
[320.52990723 119.81681061]
[328.05426025 132.79312134]
[332.95520020 146.96987915]
[335.05148315 161.82267761]
[334.26553345 176.80207825]
[330.62643433 191.35394287]
[324.26879883 204.93998718]
[315.42779541 217.05761719]
[304.43051147 227.25859070]
[291.68374634 235.16552734]
[277.65902710 240.48596191]
[262.87515259 243.02305603]
[247.87899780 242.68298340]
[233.22532654 239.47828674]
[219.45620728 233.52754211]
[207.08099365 225.05087280]
[196.55744934 214.36184692]
[188.27798462 201.86169434]
[188.59004211 216.85845947]
[188.90209961 231.85520935]
[189.21415710 246.85195923]
[189.52621460 261.84872437]
[189.83825684 276.84545898]
[190.15031433 291.84222412]
[190.46237183 306.83898926]
[190.77442932 321.83572388]
[191.08648682 336.83248901]
[205.74148560 340.42324829]
[218.96728516 347.68551636]
[229.86215210 358.12411499]
[237.68325806 371.02731323]
[241.89732361 385.51538086]
[242.21704102 400.60046387]
[238.62062073 415.25408936]
[231.35325623 428.47708130]
[220.91046143 439.36791992]
[208.00422668 447.18405151]
[193.51454163 451.39251709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 99]
[22 98]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[58 86]
[59 85]
[60 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
