%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCUCACGGGGGGGGGGAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACxxxxxxxxxxAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUCUCCCCCCCCCCUUCUUUUCAC\
) } def
/len { sequence length } bind def

/coor [
[81.04459381 558.06359863]
[67.19865417 552.04754639]
[55.48999405 542.51812744]
[46.78747177 530.18249512]
[41.73686981 515.95593262]
[40.71297836 500.89425659]
[43.79177475 486.11511230]
[50.74479675 472.71517944]
[61.05608368 461.68884277]
[73.96046448 453.85433960]
[88.50035095 449.79302979]
[88.50035095 434.79302979]
[88.50035095 419.79302979]
[88.50035095 404.79302979]
[88.50035095 389.79302979]
[88.50035095 374.79302979]
[88.50035095 359.79302979]
[88.50035095 344.79302979]
[88.50035095 329.79302979]
[88.50035095 314.79302979]
[88.50035095 299.79302979]
[85.33477020 293.06066895]
[88.65962982 284.48178101]
[88.97168732 269.48501587]
[78.50777435 258.94738770]
[78.61061096 243.73408508]
[89.73441315 232.83001709]
[90.04647064 217.83326721]
[79.58255768 207.29562378]
[79.68539429 192.08233643]
[90.80919647 181.17826843]
[91.12125397 166.18151855]
[91.43331146 151.18475342]
[91.74536896 136.18800354]
[82.26790619 132.60803223]
[74.11147308 126.59877014]
[67.88372040 118.60793304]
[64.04860687 109.23080444]
[62.89184570 99.16599274]
[64.49961853 89.16331482]
[68.75215149 79.96796417]
[75.33262634 72.26498413]
[83.75080109 66.62824249]
[80.04463959 52.09330750]
[76.33847809 37.55837250]
[63.17640686 24.72327042]
[68.50107574 8.03052235]
[64.49333191 -6.42416573]
[60.48559570 -20.87885475]
[56.47785568 -35.33354187]
[52.47011566 -49.78823090]
[48.46237564 -64.24291992]
[33.48358917 -62.87333298]
[18.50098801 -64.20053101]
[3.99620128 -68.18185425]
[-9.56450272 -74.68932343]
[-21.74520493 -83.51373291]
[-32.15434265 -94.37142944]
[-40.45730972 -106.91338348]
[-46.38719940 -120.73641205]
[-49.75338364 -135.39617920]
[-50.44766235 -150.42141724]
[-48.44771194 -165.32913208]
[-43.81782532 -179.64010620]
[-36.70683289 -192.89428711]
[-27.34332466 -204.66563416]
[-16.02829742 -214.57572937]
[-3.12548232 -222.30599976]
[10.95034790 -227.60795593]
[25.74671364 -230.31117249]
[40.78797150 -230.32873535]
[55.59061050 -227.66007996]
[69.67878723 -222.39100647]
[82.59961700 -214.69088745]
[93.93775940 -204.80725098]
[103.32873535 -193.05781555]
[110.47065735 -179.82026672]
[115.13395691 -165.52014160]
[117.16871643 -150.61714172]
[116.50952911 -135.59031677]
[113.17758942 -120.92273712]
[107.27999878 -107.08589935]
[99.00634766 -94.52458954]
[88.62258911 -83.64260864]
[76.46253204 -74.78977203]
[62.91706085 -68.25065613]
[66.92480469 -53.79597092]
[70.93254089 -39.34128189]
[74.94028473 -24.88659477]
[78.94802094 -10.43190575]
[82.95576477 4.02278233]
[93.35459137 10.28151798]
[96.78598785 22.34155273]
[90.87341309 33.85221100]
[94.57957458 48.38714600]
[98.28573608 62.92208481]
[109.27538300 64.06008148]
[119.44321442 68.38240814]
[127.88834381 75.50610352]
[133.86253357 84.80000305]
[148.50602722 81.54917908]
[163.14953613 78.29835510]
[170.90849304 73.35363007]
[178.13139343 75.13556671]
[192.83935547 72.19008636]
[207.54731750 69.24460602]
[219.49877930 58.01542282]
[235.11900330 63.00951004]
[238.33923340 79.08937836]
[225.84677124 89.71343994]
[210.49279785 83.95256805]
[195.78483582 86.89804840]
[181.07687378 89.84352875]
[166.40036011 92.94185638]
[151.75685120 96.19268036]
[137.11335754 99.44350433]
[128.70753479 123.52845001]
[106.74211884 136.50006104]
[106.43006134 151.49681091]
[106.11801147 166.49356079]
[105.80595398 181.49032593]
[116.46653748 192.84768677]
[115.93643188 208.05207825]
[105.04322815 218.14532471]
[104.73117065 233.14207458]
[115.39175415 244.49943542]
[114.86164856 259.70382690]
[103.96844482 269.79708862]
[103.65638733 284.79382324]
[103.50035095 299.79302979]
[103.50035095 314.79302979]
[103.50035095 329.79302979]
[103.50035095 344.79302979]
[103.50035095 359.79302979]
[103.50035095 374.79302979]
[103.50035095 389.79302979]
[103.50035095 404.79302979]
[103.50035095 419.79302979]
[103.50035095 434.79302979]
[103.50035095 449.79302979]
[118.04023743 453.85433960]
[130.94461060 461.68884277]
[141.25590515 472.71517944]
[148.20892334 486.11511230]
[151.28771973 500.89425659]
[150.26382446 515.95593262]
[145.21322632 530.18249512]
[136.51071167 542.51812744]
[124.80204010 552.04754639]
[110.95610809 558.06359863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[24 128]
[27 125]
[28 124]
[31 121]
[32 120]
[33 119]
[34 118]
[43 96]
[44 95]
[45 94]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[100 116]
[101 115]
[102 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
