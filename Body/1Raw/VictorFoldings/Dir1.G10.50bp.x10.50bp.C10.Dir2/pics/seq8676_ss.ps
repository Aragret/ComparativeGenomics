%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCUAGCAGGGGGGGGGGAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUxxxxxxxxxxAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCCCCCCCCCCCUACCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.05211639 374.81060791]
[71.03017426 369.25759888]
[58.83021545 360.39126587]
[49.21914673 348.76895142]
[42.80112076 335.12124634]
[39.97958374 320.30606079]
[40.93190002 305.25469971]
[45.59820557 290.91326904]
[53.68516922 278.18331909]
[64.68444824 267.86505127]
[77.90460205 260.60705566]
[92.51461792 256.86563110]
[92.51461792 241.86563110]
[92.51461792 226.86563110]
[92.51461792 211.86563110]
[92.51461792 196.86563110]
[92.51461792 181.86563110]
[92.51461792 166.86563110]
[92.51461792 151.86563110]
[92.51461792 136.86563110]
[92.51461792 121.86563110]
[92.51461792 106.86563110]
[89.34930420 99.39417267]
[92.67177582 91.55844116]
[92.97975159 76.56160736]
[93.28773499 61.56476593]
[78.33287048 60.34285355]
[63.48032379 58.21150208]
[48.78533936 55.17863846]
[34.30258179 51.25555420]
[20.08592987 46.45683670]
[6.18827343 40.80033493]
[-7.33869028 34.30710220]
[-20.44463730 27.00128174]
[-33.08081436 18.91005898]
[-45.20021439 10.06353283]
[-56.75775146 0.49461266]
[-67.71042633 -9.76110458]
[-78.01750183 -20.66546631]
[-87.64062500 -32.17790604]
[-96.54400635 -44.25559998]
[-104.69451904 -56.85361481]
[-112.06184387 -69.92508698]
[-118.61857605 -83.42138672]
[-124.34031677 -97.29231262]
[-129.20579529 -111.48625183]
[-133.19689941 -125.95041656]
[-136.29876709 -140.63098145]
[-138.49989319 -155.47335815]
[-139.79206848 -170.42230225]
[-140.17050171 -185.42222595]
[-139.63375854 -200.41732788]
[-138.18385315 -215.35180664]
[-135.82618713 -230.17010498]
[-132.56950378 -244.81712341]
[-128.42594910 -259.23834229]
[-123.41091919 -273.38012695]
[-117.54306793 -287.18988037]
[-110.84423828 -300.61624146]
[-103.33934784 -313.60919189]
[-95.05630493 -326.12048340]
[-86.02593231 -338.10351562]
[-76.28181458 -349.51373291]
[-65.86021423 -360.30868530]
[-54.79988861 -370.44821167]
[-43.14199066 -379.89462280]
[-30.92988396 -388.61270142]
[-18.20900154 -396.57009888]
[-5.02666378 -403.73718262]
[8.56808758 -410.08724976]
[22.52467918 -415.59674072]
[36.79119110 -420.24511719]
[51.31455612 -424.01510620]
[66.04073334 -426.89266968]
[80.91495514 -428.86712646]
[95.88188171 -429.93112183]
[110.88582611 -430.08068848]
[125.87098694 -429.31524658]
[140.78161621 -427.63769531]
[155.56222534 -425.05426025]
[170.15785217 -421.57452393]
[184.51419067 -417.21145630]
[198.57783508 -411.98129272]
[212.29647827 -405.90344238]
[225.61906433 -399.00057983]
[238.49603271 -391.29837036]
[250.87950134 -382.82543945]
[262.72338867 -373.61331177]
[273.98364258 -363.69625854]
[284.61834717 -353.11120605]
[294.58798218 -341.89749146]
[303.85543823 -330.09683228]
[312.38623047 -317.75317383]
[320.14865112 -304.91238403]
[327.11380005 -291.62225342]
[333.25573730 -277.93222046]
[338.55169678 -263.89318848]
[342.98190308 -249.55743408]
[346.52990723 -234.97825623]
[349.18249512 -220.20988464]
[350.92980957 -205.30728149]
[351.76535034 -190.32586670]
[351.68603516 -175.32138062]
[350.69210815 -160.34963989]
[348.78729248 -145.46633911]
[345.97866821 -130.72685242]
[342.27667236 -116.18601227]
[337.69512939 -101.89789581]
[332.25100708 -87.91567230]
[325.96463013 -74.29135132]
[318.85934448 -61.07561493]
[310.96157837 -48.31763077]
[302.30072021 -36.06485748]
[292.90899658 -24.36287498]
[282.82131958 -13.25521851]
[272.07528687 -2.78320718]
[260.71078491 7.01420069]
[248.77014160 16.10055923]
[236.29776001 24.44206429]
[223.34005737 32.00768661]
[209.94522095 38.76927948]
[196.16307068 44.70169067]
[182.04490662 49.78285217]
[167.64323425 53.99385834]
[153.01162720 57.31904984]
[138.20451355 59.74604797]
[123.27698517 61.26583099]
[108.28456879 61.87274170]
[107.97659302 76.86958313]
[107.66861725 91.86641693]
[107.51461792 106.86563110]
[107.51461792 121.86563110]
[107.51461792 136.86563110]
[107.51461792 151.86563110]
[107.51461792 166.86563110]
[107.51461792 181.86563110]
[107.51461792 196.86563110]
[107.51461792 211.86563110]
[107.51461792 226.86563110]
[107.51461792 241.86563110]
[107.51461792 256.86563110]
[122.12462616 260.60705566]
[135.34478760 267.86505127]
[146.34407043 278.18331909]
[154.43103027 290.91326904]
[159.09733582 305.25469971]
[160.04965210 320.30606079]
[157.22811890 335.12124634]
[150.81008911 348.76895142]
[141.19902039 360.39126587]
[128.99905396 369.25759888]
[114.97711945 374.81060791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 130]
[25 129]
[26 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
