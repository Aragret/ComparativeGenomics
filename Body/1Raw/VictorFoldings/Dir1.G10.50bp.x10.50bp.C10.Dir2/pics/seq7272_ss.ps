%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUAAUUUUGGGGGGGGGGCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGxxxxxxxxxxUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCCCCCCCCCCCUUAAUCAUUUU\
) } def
/len { sequence length } bind def

/coor [
[105.44309998 576.77337646]
[92.52394867 569.01501465]
[81.74265289 558.48596191]
[73.68063354 545.75408936]
[68.77267456 531.50598145]
[67.28344727 516.51000977]
[69.29327393 501.57492065]
[74.69375610 487.50610352]
[83.19366455 475.06231689]
[94.33459473 464.91458130]
[107.51573944 457.61019897]
[122.02626038 453.54306030]
[121.41043854 438.55572510]
[120.79460907 423.56835938]
[120.17878723 408.58099365]
[119.56295776 393.59365845]
[118.94713593 378.60629272]
[118.33130646 363.61895752]
[117.71548462 348.63159180]
[117.09965515 333.64422607]
[116.48383331 318.65689087]
[113.04562378 312.06213379]
[116.01242065 303.35614014]
[115.70444489 288.35931396]
[115.39646912 273.36248779]
[114.31939697 258.40118408]
[112.47607422 243.51489258]
[100.60823059 234.58796692]
[98.52677917 219.51739502]
[107.97062683 207.12983704]
[106.12730408 192.24353027]
[104.28398132 177.35722351]
[102.44065094 162.47091675]
[100.29207611 147.62559509]
[97.83914948 132.82751465]
[81.69659424 127.33679199]
[70.47068024 114.50289917]
[67.17689514 97.77326202]
[52.83683014 93.37296295]
[38.49676895 88.97266388]
[24.15670776 84.57236481]
[9.81664753 80.17206573]
[-4.52341366 75.77175903]
[-20.37615204 79.96970367]
[-31.74458313 68.15061188]
[-26.93383789 52.47296524]
[-10.89280033 49.06457138]
[-0.12311357 61.43170166]
[14.21694756 65.83200073]
[28.55700874 70.23229980]
[42.89707184 74.63259888]
[57.23713303 79.03290558]
[71.57719421 83.43320465]
[78.37434387 75.20794678]
[87.44644928 69.59073639]
[97.83914948 67.17249298]
[100.29207611 52.37440872]
[102.74500275 37.57633209]
[105.19792938 22.77825165]
[107.65085602 7.98017311]
[100.77873993 -2.98238206]
[103.16703796 -15.28958988]
[112.99100494 -22.41362190]
[115.74725342 -37.15821838]
[118.50349426 -51.90281296]
[121.25973511 -66.64740753]
[107.32106781 -72.33058167]
[94.81192780 -80.70353699]
[84.24456787 -91.42340851]
[76.05170441 -104.05123138]
[70.56883240 -118.06989288]
[68.02046967 -132.90534973]
[68.51097870 -147.95008850]
[72.02026367 -162.58805847]
[78.40462494 -176.21980286]
[87.40263367 -188.28715515]
[98.64581299 -198.29592896]
[111.67377472 -205.83630371]
[125.95303345 -210.59947205]
[140.89884949 -212.39041138]
[155.89920044 -211.13577271]
[170.33985901 -206.88693237]
[183.62945557 -199.81788635]
[195.22380066 -190.21809387]
[204.64811707 -178.48066711]
[211.51647949 -165.08625793]
[215.54765320 -150.58332825]
[216.57653809 -135.56579590]
[214.56100464 -120.64861298]
[209.58360291 -106.44261932]
[201.84814453 -93.52954102]
[191.67138672 -82.43816376]
[179.47007751 -73.62268066]
[165.74383545 -67.44406128]
[151.05474854 -64.15533447]
[136.00433350 -63.89116669]
[133.24809265 -49.14657211]
[130.49185181 -34.40197372]
[127.73560333 -19.65737915]
[134.46824646 -3.47973514]
[122.44893646 10.43310070]
[119.99600983 25.23118019]
[117.54308319 40.02925873]
[115.09015656 54.82733917]
[112.63722229 69.62541962]
[125.03628540 78.65756989]
[131.99195862 92.32998657]
[131.99195862 107.67001343]
[125.03628540 121.34243011]
[112.63722229 130.37458801]
[115.09015656 145.17266846]
[119.04484558 150.59512329]
[119.54438782 156.33430481]
[117.32695770 160.62759399]
[119.17028809 175.51390076]
[121.01361084 190.40020752]
[122.85693359 205.28651428]
[135.03704834 214.99644470]
[136.69438171 230.11953735]
[127.36238098 241.67156982]
[129.20570374 256.55786133]
[140.58143616 246.78071594]
[155.35597229 249.37161255]
[162.72613525 262.43609619]
[157.30282593 276.42135620]
[143.05157471 281.10131836]
[130.39331055 273.05450439]
[130.70127869 288.05133057]
[131.00926208 303.04818726]
[131.47119141 318.04104614]
[132.08700562 333.02841187]
[132.70283508 348.01577759]
[133.31866455 363.00311279]
[133.93449402 377.99047852]
[134.55030823 392.97781372]
[135.16613770 407.96517944]
[135.78196716 422.95254517]
[136.39779663 437.93988037]
[137.01361084 452.92724609]
[151.80888367 455.79022217]
[165.54486084 461.98858643]
[177.48075867 471.18807983]
[186.97291565 482.89260864]
[193.50941467 496.47091675]
[196.73774719 511.19079590]
[196.48382568 526.25836182]
[192.76133728 540.86114502]
[185.77102661 554.21148682]
[175.88989258 565.58953857]
[163.65078735 574.38165283]
[149.71376038 580.11364746]
[134.83041382 582.47644043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[24 128]
[25 127]
[26 121]
[27 120]
[30 117]
[31 116]
[32 115]
[33 114]
[34 111]
[35 110]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[56 105]
[57 104]
[58 103]
[59 102]
[60 101]
[63 99]
[64 98]
[65 97]
[66 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
