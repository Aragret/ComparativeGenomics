%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUCACAAGGGGGGGGGGCACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAxxxxxxxxxxCUCACCAUAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCCCCCCCCCCCUUAUUACAA\
) } def
/len { sequence length } bind def

/coor [
[85.67694855 389.44320679]
[71.83100891 383.42715454]
[60.12235260 373.89773560]
[51.41982651 361.56207275]
[46.36922455 347.33557129]
[45.34533310 332.27386475]
[48.42413330 317.49472046]
[55.37715530 304.09478760]
[65.68843842 293.06845093]
[78.59281921 285.23394775]
[93.13270569 281.17263794]
[93.13270569 266.17263794]
[93.13270569 251.17263794]
[93.13270569 236.17263794]
[93.13270569 221.17263794]
[93.13270569 206.17263794]
[93.13270569 191.17263794]
[93.13270569 176.17263794]
[93.13270569 161.17263794]
[93.13270569 146.17263794]
[93.13270569 131.17263794]
[93.13270569 116.17263794]
[83.50418091 104.67082977]
[68.73812103 102.03196716]
[53.97206879 99.39310455]
[39.20601273 96.75424194]
[25.07433701 107.01255798]
[8.22151756 103.96845245]
[-1.05573857 89.97594452]
[-15.87349701 87.64483643]
[-19.99883652 89.41770172]
[-24.05879211 89.71403503]
[-27.58580589 88.74343109]
[-30.23243332 86.84887695]
[-31.80511665 84.45429993]
[-46.37781906 80.89953613]
[-60.95052338 77.34477997]
[-75.52322388 73.79001617]
[-86.07793427 84.94768524]
[-100.80199432 89.31777954]
[-115.73470306 85.72475433]
[-126.85923767 75.13511658]
[-131.18315125 60.39743423]
[-127.54333496 45.47606277]
[-116.91888428 34.38477707]
[-102.16771698 30.10707855]
[-87.25782776 33.79364395]
[-76.19990540 44.45281219]
[-71.96846008 59.21731186]
[-57.39575958 62.77207184]
[-42.82305908 66.32683563]
[-28.25035477 69.88159943]
[-13.54239273 72.82707977]
[1.27536523 75.15818024]
[10.56135082 66.17111969]
[23.52449226 64.16332245]
[35.44329453 70.09375763]
[41.84487915 81.98818207]
[56.61093140 84.62704468]
[71.37699127 87.26591492]
[86.14304352 89.90477753]
[100.41850281 85.29920959]
[110.85831451 74.52840424]
[101.17189789 63.05879974]
[92.67562866 50.68172073]
[85.45395660 37.52018356]
[79.57865906 23.70499229]
[75.10812378 9.37345600]
[72.08678436 -5.33198833]
[70.54466248 -20.26518822]
[70.49709320 -35.27772903]
[71.94454956 -50.22040176]
[74.87263489 -64.94470215]
[79.25226593 -79.30427551]
[85.03989410 -93.15641785]
[92.17801666 -106.36345673]
[100.59568024 -118.79412842]
[110.20922089 -130.32489014]
[120.92309570 -140.84114075]
[132.63082886 -150.23835754]
[145.21604919 -158.42314148]
[158.55368042 -165.31416321]
[172.51116943 -170.84291077]
[186.94979858 -174.95445251]
[201.72605896 -177.60792542]
[216.69308472 -178.77694702]
[231.70213318 -178.44992065]
[246.60403442 -176.63006592]
[261.25070190 -173.33547974]
[275.49652100 -168.59892273]
[289.19992065 -162.46745300]
[302.22476196 -155.00201416]
[314.44152832 -146.27679443]
[325.72882080 -136.37854004]
[335.97445679 -125.40559387]
[345.07659912 -113.46703339]
[352.94482422 -100.68149567]
[359.50088501 -87.17607117]
[364.67965698 -73.08497620]
[368.42965698 -58.54825592]
[370.71359253 -43.71039200]
[371.50878906 -28.71885300]
[370.80734253 -13.72263432]
[368.61624146 1.12922168]
[364.95721436 15.68910503]
[359.86666870 29.81231117]
[353.39517212 43.35847092]
[345.60708618 56.19295502]
[336.57974243 68.18820190]
[326.40292358 79.22499847]
[315.17776489 89.19364929]
[303.01577759 97.99508667]
[290.03790283 105.54182434]
[276.37310791 111.75886536]
[262.15716553 116.58441925]
[247.53140259 119.97052765]
[232.64117432 121.88352966]
[217.63446045 122.30441284]
[202.66041565 121.22900391]
[187.86785889 118.66798401]
[173.40380859 114.64681244]
[159.41201782 109.20544434]
[146.03155518 102.39796448]
[133.39538574 94.29203796]
[121.62912750 84.96821594]
[111.18931580 95.73902130]
[113.90560913 101.75744629]
[113.11414337 109.26931000]
[108.13270569 116.17263794]
[108.13270569 131.17263794]
[108.13270569 146.17263794]
[108.13270569 161.17263794]
[108.13270569 176.17263794]
[108.13270569 191.17263794]
[108.13270569 206.17263794]
[108.13270569 221.17263794]
[108.13270569 236.17263794]
[108.13270569 251.17263794]
[108.13270569 266.17263794]
[108.13270569 281.17263794]
[122.67259216 285.23394775]
[135.57698059 293.06845093]
[145.88825989 304.09478760]
[152.84127808 317.49472046]
[155.92007446 332.27386475]
[154.89619446 347.33557129]
[149.84558105 361.56207275]
[141.14306641 373.89773560]
[129.43440247 383.42715454]
[115.58846283 389.44320679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 61]
[24 60]
[25 59]
[26 58]
[29 54]
[30 53]
[35 52]
[36 51]
[37 50]
[38 49]
[62 126]
[63 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
