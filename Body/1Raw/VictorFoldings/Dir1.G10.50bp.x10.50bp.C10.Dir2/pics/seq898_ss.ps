%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCCCAGGGGGGGGGGUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUAxxxxxxxxxxGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCCCCCCCCCCCAUCACCUCA\
) } def
/len { sequence length } bind def

/coor [
[111.50914764 669.75213623]
[97.66320801 663.73608398]
[85.95454407 654.20666504]
[77.25202179 641.87103271]
[72.20142365 627.64447021]
[71.17752838 612.58282471]
[74.25632477 597.80364990]
[81.20935059 584.40374756]
[91.52063751 573.37738037]
[104.42501831 565.54290771]
[118.96490479 561.48156738]
[118.96490479 546.48156738]
[118.96490479 531.48156738]
[118.96490479 516.48156738]
[118.96490479 501.48156738]
[118.96490479 486.48156738]
[118.96490479 471.48156738]
[118.96490479 456.48156738]
[118.96490479 441.48156738]
[118.96490479 426.48156738]
[103.98883057 422.23406982]
[90.79685974 413.94268799]
[80.45584869 402.26834106]
[73.80480194 388.14590454]
[71.38677979 372.70941162]
[73.40458679 357.20092773]
[79.70376587 342.87057495]
[89.78442383 330.87588501]
[102.84085083 322.18820190]
[117.82595062 317.51397705]
[117.51389313 302.51724243]
[117.20183563 287.52047729]
[116.88977814 272.52374268]
[116.57772827 257.52697754]
[116.26567078 242.53022766]
[115.95361328 227.53346252]
[115.64155579 212.53671265]
[115.32949829 197.53996277]
[107.32910156 184.97640991]
[114.77763367 171.01824951]
[114.46557617 156.02149963]
[111.06259918 141.41261292]
[104.71546936 127.82166290]
[98.36833954 114.23070526]
[87.02159882 106.06106567]
[88.04071045 92.11641693]
[81.69358063 78.52546692]
[75.34645081 64.93451691]
[68.99932098 51.34356689]
[60.87778091 38.73244095]
[46.02895355 33.27140427]
[43.63909531 18.56977654]
[33.89144135 7.16875553]
[24.14379120 -4.23226547]
[16.13419724 -8.75976658]
[14.31494427 -15.97336197]
[4.80658531 -27.57470322]
[-9.91006756 -35.99233246]
[-5.89537907 -52.46408463]
[11.04402637 -53.16612625]
[16.40792656 -37.08306122]
[25.91628456 -25.48171997]
[35.54481125 -13.97991753]
[45.29246521 -2.57889652]
[55.04011536 8.82212448]
[69.19172668 13.46768379]
[72.27880096 28.98478699]
[70.71870422 14.06613827]
[75.25367737 -0.23190382]
[85.12718964 -11.52410507]
[98.69210815 -17.92667198]
[113.68551636 -18.37151337]
[127.60615540 -12.78442001]
[138.13177490 -2.09744406]
[143.50643921 11.90658760]
[142.83355713 26.89148712]
[136.22537231 40.35743713]
[124.78427124 50.05801773]
[110.41889191 54.37495041]
[95.52570343 52.58807755]
[82.59027100 44.99643707]
[88.93740082 58.58739090]
[95.28453064 72.17833710]
[101.63166046 85.76929474]
[112.97840118 93.93893433]
[111.95928955 107.88358307]
[118.30641937 121.47453308]
[124.65354919 135.06547546]
[126.29971313 120.15608215]
[132.00587463 106.28382111]
[141.32670593 94.53128815]
[153.53482056 85.81566620]
[167.67747498 80.81713867]
[182.65097046 79.92578888]
[197.28675842 83.21117401]
[210.44264221 90.41690063]
[221.09194946 100.98063660]
[228.40356445 114.07796478]
[231.80691528 128.68676758]
[231.03637695 143.66697693]
[226.15209961 157.84948730]
[217.53526306 170.12751770]
[205.85830688 179.54286194]
[192.03251648 185.36073303]
[177.13688660 187.12712097]
[162.33386230 184.70416260]
[148.77871704 178.28094482]
[137.52926636 168.35874939]
[129.46232605 155.70944214]
[129.77438354 170.70620728]
[137.79710388 184.34242249]
[130.32624817 197.22790527]
[130.63830566 212.22465515]
[130.95036316 227.22140503]
[131.26242065 242.21817017]
[131.57447815 257.21490479]
[131.88653564 272.21166992]
[132.19859314 287.20843506]
[132.51065063 302.20516968]
[132.82270813 317.20193481]
[146.86018372 320.78109741]
[159.47630310 327.87640381]
[169.80876160 337.99557495]
[177.15322876 350.44006348]
[181.01136780 364.35299683]
[181.12460327 378.77835083]
[177.49148560 392.72662354]
[170.36734009 405.24258423]
[160.24632263 415.47088623]
[147.82714844 422.71435547]
[133.96490479 426.48156738]
[133.96490479 441.48156738]
[133.96490479 456.48156738]
[133.96490479 471.48156738]
[133.96490479 486.48156738]
[133.96490479 501.48156738]
[133.96490479 516.48156738]
[133.96490479 531.48156738]
[133.96490479 546.48156738]
[133.96490479 561.48156738]
[148.50479126 565.54290771]
[161.40916443 573.37738037]
[171.72045898 584.40374756]
[178.67347717 597.80364990]
[181.75227356 612.58282471]
[180.72837830 627.64447021]
[175.67778015 641.87103271]
[166.97525024 654.20666504]
[155.26660156 663.73608398]
[141.42065430 669.75213623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[40 110]
[41 109]
[42 88]
[43 87]
[44 86]
[46 84]
[47 83]
[48 82]
[49 81]
[50 67]
[52 65]
[53 64]
[54 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
