%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCCAUGGGGGGGGGGCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAxxxxxxxxxxCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCCCCCCCCCCCAGCCCAU\
) } def
/len { sequence length } bind def

/coor [
[94.76556396 372.65814209]
[80.91963196 366.64212036]
[69.21096802 357.11270142]
[60.50844193 344.77703857]
[55.45783997 330.55050659]
[54.43394852 315.48883057]
[57.51274872 300.70968628]
[64.46576691 287.30975342]
[74.77705383 276.28341675]
[87.68143463 268.44891357]
[102.22132111 264.38760376]
[102.22132111 249.38760376]
[102.22132111 234.38760376]
[102.22132111 219.38760376]
[102.22132111 204.38760376]
[102.22132111 189.38760376]
[102.22132111 174.38760376]
[102.22132111 159.38760376]
[102.22132111 144.38760376]
[102.22132111 129.38760376]
[96.72849274 124.28086090]
[93.37628174 138.90148926]
[79.03836823 143.30879211]
[68.05251312 133.09550476]
[71.40445709 118.47482300]
[85.74282837 114.06738281]
[80.24999237 108.96063995]
[65.28974152 110.05194855]
[50.32949448 111.14325714]
[35.36924744 112.23457336]
[29.31979561 126.29383087]
[17.42231178 135.92234802]
[2.41074824 138.90757751]
[-12.26534653 134.56352234]
[-23.23351288 123.88841248]
[-27.97334862 109.33531952]
[-25.39567184 94.24842834]
[-16.09281540 82.09460449]
[-2.20250607 75.66670227]
[13.08336353 76.44181061]
[26.25221252 84.24181366]
[34.27793503 97.27432251]
[49.23818588 96.18301392]
[64.19843292 95.09169769]
[79.15868378 94.00038910]
[91.42105103 85.36127472]
[97.48406219 71.64122009]
[103.54707336 57.92116547]
[90.36679840 50.74203873]
[77.82439423 42.49900436]
[66.00553894 33.24837112]
[54.99097061 23.05333519]
[44.85592651 11.98353672]
[35.66964340 0.11459671]
[27.49487305 -12.47240734]
[20.38745880 -25.69149208]
[14.39595222 -39.45235443]
[9.56128120 -53.66099548]
[5.91647196 -68.22035217]
[3.48642373 -83.03097534]
[2.28773570 -97.99167633]
[2.32859635 -113.00026703]
[3.60872650 -127.95422363]
[6.11938190 -142.75138855]
[9.84341145 -157.29069519]
[14.75537586 -171.47279358]
[20.82172203 -185.20083618]
[28.00100708 -198.38102722]
[36.24419022 -210.92332458]
[45.49496460 -222.74206543]
[55.69013214 -233.75651550]
[66.76004791 -243.89143372]
[78.62909698 -253.07757568]
[91.21620178 -261.25219727]
[104.43537140 -268.35946655]
[118.19630432 -274.35079956]
[132.40499878 -279.18530273]
[146.96440125 -282.82992554]
[161.77505493 -285.25979614]
[176.73577881 -286.45831299]
[191.74436951 -286.41726685]
[206.69830322 -285.13696289]
[221.49543762 -282.62612915]
[236.03469849 -278.90194702]
[250.21673584 -273.98980713]
[263.94470215 -267.92327881]
[277.12481689 -260.74383545]
[289.66702271 -252.50051880]
[301.48565674 -243.24960327]
[312.49996948 -233.05430603]
[322.63476562 -221.98426819]
[331.82077026 -210.11509705]
[339.99523926 -197.52790833]
[347.10232544 -184.30865479]
[353.09350586 -170.54763794]
[357.92785645 -156.33888245]
[361.57229614 -141.77943420]
[364.00201416 -126.96876526]
[365.20031738 -112.00803375]
[365.15911865 -96.99944305]
[363.87863159 -82.04551697]
[361.36761475 -67.24840546]
[357.64324951 -52.70920181]
[352.73092651 -38.52721024]
[346.66427612 -24.79931831]
[339.48468018 -11.61930084]
[331.24118042 0.92280859]
[321.99014282 12.74133301]
[311.79470825 23.75553894]
[300.72454834 33.89018631]
[288.85525513 43.07604599]
[276.26797485 51.25036621]
[263.04864502 58.35730743]
[249.28755188 64.34832764]
[235.07875061 69.18248749]
[220.51925659 72.82677460]
[205.70855713 75.25629425]
[190.74780273 76.45444489]
[175.73921204 76.41304779]
[160.78529358 75.13238525]
[145.98822021 72.62120056]
[131.44906616 68.89665222]
[117.26712799 63.98418045]
[111.20411682 77.70423126]
[105.14110565 91.42428589]
[110.84455109 91.13131714]
[116.98664093 93.98632050]
[122.02996063 100.10995483]
[124.45985413 108.93511963]
[123.07167816 119.25555420]
[117.22132111 129.38760376]
[117.22132111 144.38760376]
[117.22132111 159.38760376]
[117.22132111 174.38760376]
[117.22132111 189.38760376]
[117.22132111 204.38760376]
[117.22132111 219.38760376]
[117.22132111 234.38760376]
[117.22132111 249.38760376]
[117.22132111 264.38760376]
[131.76121521 268.44891357]
[144.66558838 276.28341675]
[154.97686768 287.30975342]
[161.92990112 300.70968628]
[165.00869751 315.48883057]
[163.98480225 330.55050659]
[158.93420410 344.77703857]
[150.23167419 357.11270142]
[138.52301025 366.64212036]
[124.67707825 372.65814209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 45]
[28 44]
[29 43]
[30 42]
[46 125]
[47 124]
[48 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
