%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAUCCCCGGGGGGGGGGUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGxxxxxxxxxxUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCCCCCCCCCCCUAAUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.72810364 429.95822144]
[72.16987610 421.60708618]
[62.08365631 410.39462280]
[55.10346222 397.02572632]
[51.66807938 382.34072876]
[51.99345779 367.26275635]
[56.05913925 352.73965454]
[63.60956192 339.68429565]
[74.17008972 328.91741943]
[87.07688141 321.11578369]
[101.51861572 316.76983643]
[100.89463806 301.78280640]
[100.27066040 286.79577637]
[99.64668274 271.80877686]
[99.02270508 256.82174683]
[98.39872742 241.83474731]
[97.77474976 226.84773254]
[97.15077209 211.86070251]
[96.52679443 196.87368774]
[95.90281677 181.88667297]
[84.80198669 172.02223206]
[83.95568848 156.83215332]
[94.37769318 145.25547791]
[93.75371552 130.26846313]
[88.57524872 129.92489624]
[83.35551453 128.67660522]
[78.25491333 126.50344849]
[73.43883514 123.41397095]
[69.07255554 119.44643402]
[65.31587219 114.66887665]
[50.49811554 116.99997711]
[35.68035889 119.33108521]
[20.97330475 127.76547241]
[8.79721642 115.96804810]
[16.76291656 101.00195312]
[33.34925461 104.51332092]
[48.16701126 102.18222046]
[62.98477173 99.85112000]
[66.08309174 85.17459106]
[53.47196579 77.05304718]
[40.86083603 68.93150330]
[28.24970818 60.80996323]
[15.63857937 52.68842316]
[3.02745128 44.56687927]
[-9.58367634 36.44533920]
[-22.19480515 28.32379532]
[-34.80593491 20.20225334]
[-47.41706085 12.08071136]
[-62.80835724 15.67008400]
[-76.18540955 7.25403023]
[-79.61185455 -8.17435265]
[-71.05484009 -21.46168137]
[-55.59109497 -24.72481728]
[-42.39498138 -16.02779961]
[-39.29552078 -0.53041649]
[-26.68439102 7.59112549]
[-14.07326317 15.71266747]
[-1.46213460 23.83420944]
[11.14899349 31.95575142]
[23.76012230 40.07729340]
[36.37125015 48.19883728]
[48.98237610 56.32037735]
[61.59350586 64.44191742]
[74.20463562 72.56346130]
[85.36027527 67.14346313]
[97.13247681 65.83775330]
[108.11686707 68.43252563]
[117.12030792 74.26887512]
[128.21162415 64.17022705]
[139.30293274 54.07157898]
[131.55513000 41.17338562]
[126.47429657 27.01596642]
[124.25392914 12.14407825]
[124.97751617 -2.87041974]
[128.61538696 -17.45055580]
[135.02589417 -31.03641701]
[143.96096802 -43.10664368]
[155.07569885 -53.19845200]
[167.94165039 -60.92536163]
[182.06336975 -65.99200439]
[196.89746094 -68.20541382]
[211.87353516 -67.48236847]
[226.41610718 -63.85253525]
[239.96667480 -57.45723724]
[252.00526428 -48.54396057]
[263.09658813 -58.64261246]
[274.18789673 -68.74126434]
[285.27920532 -78.83991241]
[280.09271240 -93.12866974]
[280.77407837 -108.31432343]
[287.21939087 -122.08117676]
[298.44580078 -132.32987976]
[312.74139404 -137.49758911]
[327.92611694 -136.79624939]
[341.68447876 -130.33282471]
[351.91842651 -119.09293365]
[357.06732178 -104.79058075]
[356.34600830 -89.60676575]
[349.86447144 -75.85691833]
[338.61114502 -65.63778687]
[324.30203247 -60.50770950]
[309.11917114 -61.24899292]
[295.37786865 -67.74859619]
[284.28656006 -57.64994431]
[273.19522095 -47.55129623]
[262.10391235 -37.45264816]
[269.85269165 -24.63350487]
[274.95318604 -10.54439831]
[277.20758057 4.27381659]
[276.52740479 19.25190353]
[272.93688965 33.81411362]
[266.57223511 47.40031815]
[257.67639160 59.48755264]
[246.58969116 69.61016083]
[233.73699951 77.37769318]
[219.61134338 82.49002838]
[204.75497437 84.74890900]
[189.73858643 84.06566620]
[175.13940430 80.46469879]
[161.51898193 74.08258057]
[149.40158081 65.16289520]
[138.31027222 75.26154327]
[127.21895599 85.36019135]
[128.52278137 111.90151978]
[108.74073029 129.64448547]
[109.36470795 144.63150024]
[120.71295166 155.30178833]
[121.13225555 170.50964355]
[110.88983154 181.26269531]
[111.51380920 196.24971008]
[112.13778687 211.23672485]
[112.76176453 226.22375488]
[113.38574219 241.21076965]
[114.00971985 256.19778442]
[114.63369751 271.18478394]
[115.25767517 286.17181396]
[115.88165283 301.15881348]
[116.50563049 316.14584351]
[131.25863647 319.27627563]
[144.76927185 325.97802734]
[156.18824768 335.82983398]
[164.79776001 348.21237183]
[170.05661011 362.34725952]
[171.63421631 377.34600830]
[169.43141174 392.26571655]
[163.58666992 406.16860962]
[154.46737671 418.18066406]
[142.64680481 427.54681396]
[128.86799622 433.67831421]
[113.99710083 436.18969727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 126]
[24 125]
[30 38]
[31 37]
[32 36]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[68 123]
[69 122]
[70 121]
[85 106]
[86 105]
[87 104]
[88 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
