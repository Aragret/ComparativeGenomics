%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGAAUCGAGGGGGGGGGGACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCxxxxxxxxxxAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUCCCCCCCCCCUGACAAUCGA\
) } def
/len { sequence length } bind def

/coor [
[86.79576111 441.33380127]
[72.94982910 435.31777954]
[61.24116516 425.78836060]
[52.53863907 413.45269775]
[47.48803711 399.22616577]
[46.46414566 384.16448975]
[49.54294586 369.38531494]
[56.49596786 355.98538208]
[66.80725098 344.95904541]
[79.71163177 337.12454224]
[94.25151825 333.06323242]
[94.25151825 318.06323242]
[94.25151825 303.06323242]
[94.25151825 288.06323242]
[94.25151825 273.06323242]
[94.25151825 258.06323242]
[94.25151825 243.06323242]
[94.25151825 228.06323242]
[94.25151825 213.06323242]
[94.25151825 198.06323242]
[94.25151825 183.06323242]
[94.25151825 168.06323242]
[84.66041565 153.39999390]
[93.91466522 137.51483154]
[93.60261536 122.51807404]
[89.23512268 136.86816406]
[75.69470978 143.32238770]
[61.79690933 137.67871094]
[56.58995438 123.61145020]
[63.46385956 110.27918243]
[77.94289398 106.36186218]
[62.96318054 105.58201599]
[47.98346329 104.80216980]
[33.00374985 104.02232361]
[18.02403641 103.24248505]
[3.04432201 102.46263885]
[-9.78879452 112.09023285]
[-25.28044510 107.92031097]
[-31.54676247 93.15166473]
[-23.78076363 79.11354828]
[-7.93985796 76.57479095]
[3.82416701 87.48292542]
[18.80388069 88.26276398]
[33.78359604 89.04261017]
[48.76330948 89.82245636]
[63.74302292 90.60230255]
[78.72274017 91.38214874]
[91.07431030 82.87105560]
[95.67987823 68.59559631]
[100.28543854 54.32013702]
[104.14260101 39.82453918]
[107.24092102 25.14801407]
[110.33924103 10.47148800]
[96.08644867 5.74518633]
[82.45246887 -0.54723310]
[69.60875702 -8.32663631]
[57.71684265 -17.49518967]
[46.92627716 -27.93758774]
[37.37276077 -39.52250671]
[29.17644119 -52.10425186]
[22.44039536 -65.52459717]
[17.24933815 -79.61476898]
[13.66854954 -94.19757080]
[11.74306393 -109.08959961]
[11.49709606 -124.10357666]
[12.93373775 -139.05068970]
[16.03492355 -153.74295044]
[20.76165199 -167.99560547]
[27.05447960 -181.62939453]
[34.83426666 -194.47286987]
[44.00317383 -206.36451721]
[54.44589615 -217.15476990]
[66.03109741 -226.70793152]
[78.61309052 -234.90388489]
[92.03363800 -241.63952637]
[106.12397003 -246.83015442]
[120.70687103 -250.41050720]
[135.59895325 -252.33555603]
[150.61294556 -252.58106995]
[165.56001282 -251.14398193]
[180.25218201 -248.04235840]
[194.50468445 -243.31520081]
[208.13829041 -237.02197266]
[220.98153687 -229.24179077]
[232.87290955 -220.07252502]
[243.66285706 -209.62948608]
[253.21566772 -198.04400635]
[261.41125488 -185.46176147]
[268.14648438 -172.04101562]
[273.33670044 -157.95053101]
[276.91662598 -143.36752319]
[278.84121704 -128.47537231]
[279.08627319 -113.46138000]
[277.64874268 -98.51435852]
[274.54669189 -83.82228088]
[269.81909180 -69.56991577]
[263.52545166 -55.93649292]
[255.74490356 -43.09348297]
[246.57528687 -31.20238876]
[236.13191223 -20.41275978]
[224.54614258 -10.86028290]
[211.96365356 -2.66509223]
[198.54270935 4.06974888]
[184.45207214 9.25954247]
[169.86894226 12.83902264]
[154.97674561 14.76317215]
[139.96275330 15.00779343]
[125.01576996 13.56980991]
[121.91744995 28.24633598]
[118.81912231 42.92286301]
[132.76254272 37.39284134]
[145.88429260 44.66054535]
[148.59346008 59.41386414]
[138.90983582 70.86932373]
[123.91137695 70.65390015]
[114.56089783 58.92570114]
[109.95533752 73.20116425]
[105.34976959 87.47662354]
[110.18753815 88.88887024]
[114.58277893 92.21438599]
[117.77984619 97.27558136]
[119.10733032 103.60137177]
[118.08918762 110.46890259]
[114.53565216 116.98617554]
[108.59936523 122.20601654]
[108.91142273 137.20277405]
[117.68450165 146.71522522]
[117.60007477 159.25364685]
[109.25151825 168.06323242]
[109.25151825 183.06323242]
[109.25151825 198.06323242]
[109.25151825 213.06323242]
[109.25151825 228.06323242]
[109.25151825 243.06323242]
[109.25151825 258.06323242]
[109.25151825 273.06323242]
[109.25151825 288.06323242]
[109.25151825 303.06323242]
[109.25151825 318.06323242]
[109.25151825 333.06323242]
[123.79140472 337.12454224]
[136.69578552 344.95904541]
[147.00706482 355.98538208]
[153.96009827 369.38531494]
[157.03889465 384.16448975]
[156.01499939 399.22616577]
[150.96440125 413.45269775]
[142.26187134 425.78836060]
[130.55320740 435.31777954]
[116.70727539 441.33380127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 126]
[25 125]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[48 118]
[49 117]
[50 116]
[51 110]
[52 109]
[53 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
