%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUAACAAGGGGGGGGGGACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCxxxxxxxxxxCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCACCCCCCCCCCUAUCUAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.26998901]
[71.19830322 349.25396729]
[59.48964310 339.72454834]
[50.78712082 327.38888550]
[45.73651886 313.16235352]
[44.71262741 298.10067749]
[47.79142761 283.32150269]
[54.74444962 269.92156982]
[65.05573273 258.89523315]
[77.96011353 251.06074524]
[92.50000000 246.99942017]
[92.50000000 231.99942017]
[92.50000000 216.99942017]
[92.50000000 201.99942017]
[92.50000000 186.99942017]
[92.50000000 171.99942017]
[92.50000000 156.99942017]
[92.50000000 141.99942017]
[92.50000000 126.99942780]
[92.50000000 111.99942780]
[82.99163818 100.39808655]
[68.28367615 97.45259857]
[53.57571793 94.50711823]
[38.01990128 107.16555023]
[18.32328606 105.31194305]
[5.75246668 90.38921356]
[-9.24022961 90.85725403]
[-24.23292542 91.32529449]
[-39.22562027 91.79334259]
[-54.21831894 92.26138306]
[-59.93626785 106.37609100]
[-70.90534210 116.94013977]
[-85.22509766 122.12325287]
[-100.41453552 121.02741241]
[-113.84199524 113.84249115]
[-123.18109894 101.81331635]
[-126.81378174 87.02400970]
[-124.11065674 72.03691864]
[-115.54006958 59.44863510]
[-102.58690643 51.44016647]
[-87.49539948 49.39901733]
[-72.88024139 53.67884064]
[-61.27358246 63.53812027]
[-54.68635941 77.26868439]
[-39.69366455 76.80064392]
[-24.70096779 76.33260345]
[-9.70827198 75.86455536]
[5.28442430 75.39651489]
[5.70113993 74.02222443]
[6.19431639 72.67347717]
[-5.50530720 63.28631210]
[-17.20493126 53.89915085]
[-33.34292221 48.70284653]
[-32.81712723 31.75705338]
[-16.38803101 27.57123566]
[-7.81776905 42.19952774]
[3.88185453 51.58668900]
[15.58147812 60.97385025]
[27.97604370 56.35506439]
[41.16320038 58.53172684]
[51.63059616 67.06350708]
[56.52120209 79.79915619]
[71.22916412 82.74464417]
[85.93712616 85.69012451]
[104.98676300 86.65107727]
[116.87914276 77.50934601]
[128.77153015 68.36761475]
[140.66390991 59.22587967]
[152.55628967 50.08414459]
[144.74551392 37.26076126]
[138.36700439 23.66804695]
[133.49554443 9.46536636]
[130.18826294 -5.18076134]
[128.48390198 -20.09861755]
[128.40248108 -35.11329651]
[129.94491577 -50.04875946]
[133.09315491 -64.72989655]
[137.81028748 -78.98458099]
[144.04098511 -92.64568329]
[151.71220398 -105.55303192]
[160.73400879 -117.55529022]
[171.00061035 -128.51174927]
[182.39166260 -138.29394531]
[194.77359009 -146.78717041]
[208.00123596 -153.89187622]
[221.91949463 -159.52474976]
[236.36520386 -163.61973572]
[251.16896057 -166.12884521]
[266.15722656 -167.02264404]
[281.15429688 -166.29066467]
[295.98428345 -163.94146729]
[310.47332764 -160.00262451]
[324.45156860 -154.52029419]
[337.75512695 -147.55877686]
[350.22799683 -139.19966125]
[361.72396851 -129.54098511]
[372.10821533 -118.69596863]
[381.25903320 -106.79177856]
[389.06912231 -93.96797180]
[395.44689941 -80.37491608]
[400.31759644 -66.17197418]
[403.62408447 -51.52566910]
[405.32763672 -36.60771942]
[405.40826416 -21.59303665]
[403.86502075 -6.65765524]
[400.71597290 8.02331352]
[395.99807739 22.27774239]
[389.76666260 35.93850708]
[382.09475708 48.84543991]
[373.07229614 60.84721756]
[362.80508423 71.80312347]
[351.41351318 81.58470154]
[339.03112793 90.07727051]
[325.80310059 97.18125916]
[311.88455200 102.81338501]
[297.43862915 106.90760040]
[282.63470459 109.41590881]
[267.64639282 110.30889893]
[252.64938354 109.57611084]
[237.81953430 107.22612000]
[223.33068848 103.28649902]
[209.35273743 97.80342102]
[196.04956055 90.84117889]
[183.57713318 82.48139954]
[172.08169556 72.82209778]
[161.69801331 61.97652435]
[149.80563354 71.11825562]
[137.91325378 80.25999451]
[126.02088165 89.40172577]
[114.12850189 98.54345703]
[107.50000000 111.99942780]
[107.50000000 126.99942780]
[107.50000000 141.99942017]
[107.50000000 156.99942017]
[107.50000000 171.99942017]
[107.50000000 186.99942017]
[107.50000000 201.99942017]
[107.50000000 216.99942017]
[107.50000000 231.99942017]
[107.50000000 246.99942017]
[122.03988647 251.06074524]
[134.94427490 258.89523315]
[145.25555420 269.92156982]
[152.20857239 283.32150269]
[155.28736877 298.10067749]
[154.26348877 313.16235352]
[149.21287537 327.38888550]
[140.51036072 339.72454834]
[128.80169678 349.25396729]
[114.95575714 355.26998901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 64]
[22 63]
[23 62]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[50 58]
[51 57]
[52 56]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
