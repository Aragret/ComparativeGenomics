%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCACAGCGGGGGGGGGGGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCxxxxxxxxxxAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCCCCCCCCCCCUAAUCACAGC\
) } def
/len { sequence length } bind def

/coor [
[77.79605103 411.02722168]
[63.77410889 405.47421265]
[51.57415390 396.60787964]
[41.96308136 384.98559570]
[35.54505539 371.33789062]
[32.72351837 356.52270508]
[33.67583466 341.47131348]
[38.34214020 327.12988281]
[46.42910767 314.39993286]
[57.42837906 304.08166504]
[70.64853668 296.82369995]
[85.25855255 293.08224487]
[85.25855255 278.08224487]
[85.25855255 263.08224487]
[85.25855255 248.08226013]
[85.25855255 233.08226013]
[85.25855255 218.08226013]
[85.25855255 203.08226013]
[85.25855255 188.08226013]
[85.25855255 173.08226013]
[85.25855255 158.08226013]
[85.25855255 143.08226013]
[75.92549896 154.82508850]
[62.02181625 160.45426941]
[47.14809036 158.51203918]
[35.15610504 149.50135803]
[29.15137100 135.75569153]
[30.68891525 120.83470154]
[39.37055969 108.60240936]
[52.94806290 102.22656250]
[67.90530396 103.35827637]
[80.36888123 111.70449066]
[87.11094666 125.10284424]
[90.16934204 110.41794586]
[85.97695923 97.07944489]
[95.14575958 86.52365875]
[98.20415497 71.83876038]
[101.26255035 57.15386581]
[88.60802460 50.22277451]
[78.43717194 40.01147461]
[71.57156372 27.35757828]
[68.56220245 13.29548740]
[69.64524841 -1.02817404]
[74.72354889 -14.44805336]
[83.37529755 -25.87487984]
[94.88898468 -34.38387680]
[108.32199097 -39.28960037]
[122.57769012 -40.20116043]
[125.93695068 -54.82016754]
[129.29620361 -69.43917847]
[123.11198425 -80.80399323]
[126.25339508 -92.94083405]
[136.49729919 -99.44657898]
[140.15600586 -113.99353027]
[143.81471252 -128.54048157]
[129.75358582 -133.80973816]
[116.37086487 -140.62022400]
[103.83483887 -148.88629150]
[92.30316925 -158.50401306]
[81.92086792 -169.35241699]
[72.81851196 -181.29508972]
[65.11057281 -194.18180847]
[58.89398193 -207.85052490]
[54.24692535 -222.12934875]
[51.22783661 -236.83871460]
[49.87469101 -251.79360962]
[50.20450211 -266.80596924]
[52.21312332 -281.68701172]
[55.87529373 -296.24960327]
[61.14495850 -310.31054688]
[67.95584869 -323.69308472]
[76.22229767 -336.22885132]
[85.84036255 -347.76025391]
[96.68907928 -358.14221191]
[108.63201141 -367.24420166]
[121.51896667 -374.95178223]
[135.18788147 -381.16793823]
[149.46684265 -385.81457520]
[164.17628479 -388.83322144]
[179.13122559 -390.18591309]
[194.14358521 -389.85568237]
[209.02456665 -387.84658813]
[223.58703613 -384.18399048]
[237.64784241 -378.91390991]
[251.03015137 -372.10263062]
[263.56567383 -363.83578491]
[275.09677124 -354.21737671]
[285.47842407 -343.36834717]
[294.58007812 -331.42514038]
[302.28723145 -318.53796387]
[308.50302124 -304.86886597]
[313.14923096 -290.58978271]
[316.16741943 -275.88021851]
[317.51968384 -260.92526245]
[317.18896484 -245.91290283]
[315.17947388 -231.03198242]
[311.51641846 -216.46961975]
[306.24591064 -202.40898132]
[299.43423462 -189.02687073]
[291.16702271 -176.49157715]
[281.54827881 -164.96076965]
[270.69894409 -154.57945251]
[258.75546265 -145.47816467]
[245.86804199 -137.77137756]
[232.19876099 -131.55601501]
[217.91950989 -126.91024017]
[203.20988464 -123.89247131]
[188.25486755 -122.54066467]
[173.24252319 -122.87182617]
[158.36166382 -124.88178253]
[154.70295715 -110.33482361]
[151.04425049 -95.78787231]
[156.76820374 -79.22644806]
[143.91520691 -66.07991791]
[140.55595398 -51.46091080]
[137.19670105 -36.84189987]
[150.69300842 -28.94937706]
[161.10993958 -17.26449966]
[167.42286682 -2.91865182]
[169.00529480 12.69418430]
[165.69102478 28.05287170]
[157.79151917 41.65732956]
[146.06668091 52.17504120]
[131.65176392 58.57155991]
[115.94744873 60.21226120]
[112.88905334 74.89715576]
[109.83065796 89.58205414]
[114.02304077 102.92055511]
[104.85424042 113.47634125]
[101.79584503 128.16123962]
[100.25855255 143.08226013]
[100.25855255 158.08226013]
[100.25855255 173.08226013]
[100.25855255 188.08226013]
[100.25855255 203.08226013]
[100.25855255 218.08226013]
[100.25855255 233.08226013]
[100.25855255 248.08226013]
[100.25855255 263.08224487]
[100.25855255 278.08224487]
[100.25855255 293.08224487]
[114.86856842 296.82369995]
[128.08872986 304.08166504]
[139.08799744 314.39993286]
[147.17497253 327.12988281]
[151.84126282 341.47131348]
[152.79357910 356.52270508]
[149.97204590 371.33789062]
[143.55403137 384.98559570]
[133.94294739 396.60787964]
[121.74299622 405.47421265]
[107.72105408 411.02722168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[33 130]
[34 129]
[36 127]
[37 126]
[38 125]
[48 116]
[49 115]
[50 114]
[53 112]
[54 111]
[55 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
