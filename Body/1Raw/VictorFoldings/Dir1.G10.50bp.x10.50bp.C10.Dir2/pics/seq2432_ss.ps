%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCAAACAGGGGGGGGGGUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAxxxxxxxxxxUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACCCCCCCCCCCAACCCAAACA\
) } def
/len { sequence length } bind def

/coor [
[83.61108398 375.57427979]
[70.39088440 368.30181885]
[59.50408173 357.85479736]
[51.69295120 344.94555664]
[47.49007034 330.45425415]
[47.18199539 315.36889648]
[50.78973770 300.71807861]
[58.06731033 287.50070190]
[68.51851654 276.61791992]
[81.43077850 268.81179810]
[95.92371368 264.61450195]
[95.61166382 249.61773682]
[95.29960632 234.62098694]
[94.98754883 219.62423706]
[94.67549133 204.62748718]
[94.36343384 189.63072205]
[94.05137634 174.63397217]
[93.73932648 159.63722229]
[93.42726898 144.64047241]
[93.11521149 129.64370728]
[92.80315399 114.64695740]
[89.09699249 100.11202240]
[82.18999481 86.79686737]
[75.28299713 73.48171234]
[68.37599945 60.16655731]
[61.46899796 46.85140228]
[54.56200027 33.53624725]
[38.58296585 35.02176666]
[23.29002571 30.28577805]
[11.00641632 20.07858086]
[3.58638692 5.97927618]
[2.13532376 -9.84848022]
[6.84516525 -24.98849678]
[16.96960640 -37.14088058]
[9.78709793 -50.30946350]
[2.19718981 -63.24752045]
[-5.79272652 -75.94245148]
[-13.78264236 -88.63738251]
[-21.77255821 -101.33231354]
[-36.16662979 -95.78979492]
[-51.35824203 -93.14769745]
[-66.76912689 -93.50476837]
[-81.81301880 -96.84561920]
[-95.91796875 -103.04138947]
[-108.54808044 -111.85471344]
[-119.22386169 -122.94882202]
[-127.54046631 -135.90039062]
[-133.18299866 -150.21569824]
[-135.93846130 -165.34947205]
[-135.70379639 -180.72563171]
[-132.48973083 -195.75920105]
[-126.42028809 -209.87863159]
[-117.72805786 -222.54743958]
[-106.74520111 -233.28468323]
[-114.99748993 -245.81063843]
[-123.24977875 -258.33660889]
[-131.50205994 -270.86254883]
[-139.75434875 -283.38851929]
[-155.28314209 -286.32659912]
[-164.11695862 -299.43154907]
[-161.01486206 -314.92840576]
[-147.81726074 -323.62316895]
[-132.35408020 -320.35739136]
[-123.79932404 -307.06860352]
[-127.22839355 -291.64080811]
[-118.97610474 -279.11483765]
[-110.72381592 -266.58889771]
[-102.47152710 -254.06292725]
[-94.21923828 -241.53697205]
[-80.74237823 -247.16809082]
[-66.45332336 -250.21421814]
[-51.84337234 -250.56907654]
[-37.41512680 -248.21890259]
[-23.66523933 -243.24307251]
[-11.06728935 -235.81134033]
[-0.05547860 -226.17805481]
[8.99032879 -214.67352295]
[15.75771427 -201.69259644]
[20.01249504 -187.68118286]
[21.60682869 -173.12089539]
[20.48434067 -158.51249695]
[16.68213272 -144.35873413]
[10.32954311 -131.14692688]
[1.64375484 -119.33229828]
[-9.07762909 -109.32222748]
[-1.08771300 -96.62729645]
[6.90220308 -83.93236542]
[14.89211941 -71.23743439]
[18.29754066 -70.11022949]
[21.30833435 -67.24024963]
[23.09421921 -62.83990860]
[22.95568085 -57.49197388]
[30.13818932 -44.32339096]
[44.05828476 -46.34695816]
[57.86021805 -43.48108292]
[69.87486267 -36.05144119]
[78.64208221 -24.93688583]
[83.08820343 -11.46551895]
[82.65742493 2.74398661]
[77.38124847 15.97687626]
[67.87715912 26.62924767]
[74.78415680 39.94440460]
[81.69115448 53.25955963]
[88.59815216 66.57471466]
[95.50514984 79.88986969]
[102.41214752 93.20502472]
[107.49515533 86.81266022]
[114.76629639 82.20125580]
[123.72404480 79.91452789]
[133.74899292 80.36988831]
[148.45695496 83.31537628]
[163.16491699 86.26085663]
[172.75083923 74.32901764]
[186.78837585 68.22933197]
[202.05180359 69.36346436]
[215.03370667 77.47079468]
[222.75093079 90.68832397]
[223.43011475 105.97875214]
[216.91519165 119.82846069]
[204.70324707 129.05488586]
[189.60047913 131.53785706]
[175.07740784 126.70680237]
[164.47132874 115.67187500]
[160.21943665 100.96881866]
[145.51147461 98.02333832]
[130.80351257 95.07785034]
[125.05261230 99.89211273]
[113.55081177 109.52064514]
[107.79991150 114.33490753]
[108.11196136 129.33166504]
[108.42401886 144.32841492]
[108.73607635 159.32516479]
[109.04813385 174.32191467]
[109.36019135 189.31867981]
[109.67224884 204.31542969]
[109.98429871 219.31217957]
[110.29635620 234.30892944]
[110.60841370 249.30569458]
[110.92047119 264.30242920]
[125.57546234 267.89321899]
[138.80126953 275.15545654]
[149.69613647 285.59405518]
[157.51724243 298.49728394]
[161.73130798 312.98535156]
[162.05102539 328.07043457]
[158.45460510 342.72402954]
[151.18724060 355.94705200]
[140.74443054 366.83789062]
[127.83821106 374.65399170]
[113.34851837 378.86245728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[34 93]
[35 92]
[36 88]
[37 87]
[38 86]
[39 85]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[110 126]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
