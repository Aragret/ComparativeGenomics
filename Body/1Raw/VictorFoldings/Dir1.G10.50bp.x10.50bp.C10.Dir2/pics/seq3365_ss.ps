%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAAUUCUGGGGGGGGGGAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCxxxxxxxxxxACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGACCCCCCCCCCGAAAAAGUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.26330566]
[71.19830322 366.24728394]
[59.48964310 356.71786499]
[50.78712082 344.38220215]
[45.73651886 330.15567017]
[44.71262741 315.09399414]
[47.79142761 300.31484985]
[54.74444962 286.91491699]
[65.05573273 275.88858032]
[77.96011353 268.05407715]
[92.50000000 263.99276733]
[92.50000000 248.99276733]
[92.50000000 233.99276733]
[92.50000000 218.99276733]
[92.50000000 203.99276733]
[92.50000000 188.99276733]
[92.50000000 173.99276733]
[92.50000000 158.99276733]
[92.50000000 143.99276733]
[92.50000000 128.99276733]
[77.23815155 119.46094513]
[70.19393158 102.90320587]
[55.37617493 100.57209778]
[40.55841827 98.24099731]
[25.74065971 95.90988922]
[20.75138855 97.84037018]
[16.00669289 97.63977051]
[12.29078007 95.77063751]
[10.08313179 92.94331360]
[-4.56036949 89.69248199]
[-19.20387077 86.44165802]
[-33.84737396 83.19083405]
[-48.49087524 79.94001007]
[-63.13437653 76.68917847]
[-71.01979828 89.61585236]
[-82.67684937 99.27980804]
[-96.84104156 104.63276672]
[-111.97596741 105.09409332]
[-126.43989563 100.61373901]
[-138.66387939 91.67769623]
[-147.32196045 79.25528717]
[-151.47499084 64.69400024]
[-150.67245483 49.57332993]
[-145.00140381 35.53345490]
[-135.07701111 24.09732056]
[-121.97579956 16.50543022]
[-107.11888123 13.58129406]
[-92.11782074 15.64210224]
[-78.59982300 22.46431160]
[-68.03122711 33.30790329]
[-61.55842972 46.99664307]
[-59.88354874 62.04568100]
[-45.24004745 65.29650879]
[-30.59654617 68.54733276]
[-15.95304489 71.79815674]
[-1.30954397 75.04898071]
[13.33395767 78.29981232]
[28.07176399 81.09213257]
[42.88952255 83.42324066]
[57.70727921 85.75434113]
[72.52503967 88.08544159]
[83.52451324 74.99223328]
[99.89598846 70.05305481]
[103.60214996 55.51811981]
[99.51445007 40.23410034]
[110.15647888 29.81314087]
[113.86264038 15.27820492]
[117.56880188 0.74326861]
[104.16225433 -6.12784147]
[92.62113190 -15.81031609]
[83.52434540 -27.81848526]
[77.32817841 -41.55002594]
[74.34342194 -56.31616974]
[74.71980286 -71.37625122]
[78.43843079 -85.97486877]
[85.31278992 -99.37975311]
[94.99806213 -110.91852570]
[107.00843811 -120.01240540]
[120.74147797 -126.20524597]
[135.50834656 -129.18641663]
[150.56832886 -128.80639648]
[165.16604614 -125.08422852]
[178.56925964 -118.20661926]
[190.10568237 -108.51855469]
[199.19665527 -96.50597382]
[205.38616943 -82.77143097]
[208.36376953 -68.00384521]
[207.98008728 -52.94394684]
[204.25439453 -38.34713745]
[197.37353516 -24.94558716]
[187.68267822 -13.41150856]
[175.66789246 -4.32344961]
[161.93185425 1.86273718]
[147.16354370 4.83675575]
[132.10374451 4.44942999]
[128.39758301 18.98436546]
[124.69142151 33.51930237]
[129.04420471 47.76368713]
[118.13708496 59.22428131]
[114.43092346 73.75921631]
[124.30076599 82.49848938]
[129.46157837 94.62921906]
[144.42182922 95.72052765]
[159.38208008 96.81183624]
[170.60293579 82.63772583]
[187.92158508 78.02831268]
[204.41333008 84.63307953]
[213.59941101 99.65585327]
[228.59211731 100.12389374]
[243.58480835 100.59193420]
[258.57751465 101.05997467]
[271.20755005 91.16748810]
[286.78259277 95.01422882]
[293.35479736 109.64930725]
[285.88253784 123.84595490]
[270.09786987 126.71370697]
[258.10946655 116.05267334]
[243.11676025 115.58463287]
[228.12406921 115.11659241]
[213.13137817 114.64854431]
[207.15361023 125.29781342]
[197.14147949 132.41624451]
[184.97698975 134.58987427]
[172.97938538 131.34144592]
[163.46298218 123.23352814]
[158.29077148 111.77208710]
[143.33052063 110.68077850]
[128.37026978 109.58946228]
[123.72169495 118.27871704]
[116.50443268 124.98867798]
[107.50000000 128.99276733]
[107.50000000 143.99276733]
[107.50000000 158.99276733]
[107.50000000 173.99276733]
[107.50000000 188.99276733]
[107.50000000 203.99276733]
[107.50000000 218.99276733]
[107.50000000 233.99276733]
[107.50000000 248.99276733]
[107.50000000 263.99276733]
[122.03988647 268.05407715]
[134.94427490 275.88858032]
[145.25555420 286.91491699]
[152.20857239 300.31484985]
[155.28736877 315.09399414]
[154.26348877 330.15567017]
[149.21287537 344.38220215]
[140.51036072 356.71786499]
[128.80169678 366.24728394]
[114.95575714 372.26330566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 61]
[23 60]
[24 59]
[25 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[63 100]
[64 99]
[66 97]
[67 96]
[68 95]
[102 128]
[103 127]
[104 126]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
