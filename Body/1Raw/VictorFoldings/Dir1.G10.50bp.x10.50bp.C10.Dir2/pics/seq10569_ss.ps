%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUUCUCAGGGGGGGGGGACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGxxxxxxxxxxCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCACCCCCCCCCCGGAUUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 361.76821899]
[71.19830322 355.75219727]
[59.48964310 346.22277832]
[50.78712082 333.88711548]
[45.73651886 319.66058350]
[44.71262741 304.59890747]
[47.79142761 289.81976318]
[54.74444962 276.41983032]
[65.05573273 265.39349365]
[77.96011353 257.55899048]
[92.50000000 253.49766541]
[92.50000000 238.49766541]
[92.50000000 223.49766541]
[92.50000000 208.49766541]
[92.50000000 193.49766541]
[92.50000000 178.49766541]
[92.50000000 163.49766541]
[92.50000000 148.49766541]
[92.50000000 133.49766541]
[92.50000000 118.49766541]
[81.50798035 110.21196747]
[78.05774689 96.08697510]
[84.65457153 82.26479340]
[99.20634460 75.39623260]
[92.02383423 62.22764969]
[84.84132385 49.05906677]
[77.65881348 35.89048386]
[70.47630310 22.72190285]
[50.12051392 19.35709572]
[37.71846390 3.33042502]
[22.72576904 3.79846716]
[7.73307228 4.26650953]
[-7.25962353 4.73455143]
[-22.25231934 5.20259380]
[-34.24073029 15.86362553]
[-50.02539062 12.99587250]
[-57.49766159 -1.20077074]
[-50.92546082 -15.83585453]
[-35.35041046 -19.68259621]
[-22.72036171 -9.79010296]
[-7.72766590 -10.25814438]
[7.26503038 -10.72618675]
[22.25772667 -11.19422913]
[37.25042343 -11.66227150]
[39.35684204 -17.33414650]
[42.65357971 -22.40747833]
[46.98077011 -26.63625717]
[52.12858963 -29.81542587]
[49.64347076 -44.60813522]
[47.15835571 -59.40084076]
[42.62370300 -67.40638733]
[44.77875137 -74.52687836]
[42.60191345 -89.36808777]
[40.42507935 -104.20928955]
[38.24824142 -119.05049896]
[23.21548653 -119.55654144]
[8.51471710 -122.73886108]
[-5.38149786 -128.49516296]
[-18.02645302 -136.64039612]
[-29.01366615 -146.91273499]
[-37.98994446 -158.98196411]
[-44.66673279 -172.46009827]
[-48.82940674 -186.91387939]
[-50.34415054 -201.87869263]
[-49.16226959 -216.87345886]
[-45.32176208 -231.41615295]
[-38.94607544 -245.03932190]
[-30.24016953 -257.30499268]
[-19.48390007 -267.81890869]
[-7.02303839 -276.24307251]
[6.74185276 -282.30670166]
[21.36828804 -285.81488037]
[36.38608932 -286.65478516]
[51.31249237 -284.79946899]
[65.66767883 -280.30853271]
[78.99018860 -273.32638550]
[90.85176086 -264.07745361]
[100.87108612 -252.85902405]
[108.72608948 -240.03175354]
[114.16426849 -226.00799561]
[117.01080322 -211.23854065]
[117.17419434 -196.19815063]
[114.64918518 -181.37033081]
[109.51695251 -167.23173523]
[101.94245911 -154.23686218]
[92.16921234 -142.80343628]
[80.51136780 -133.29898071]
[67.34368134 -126.02905273]
[53.08944702 -121.22733307]
[55.26628494 -106.38613129]
[57.44311905 -91.54492188]
[59.61995697 -76.70372009]
[61.95106125 -61.88595963]
[64.43618011 -47.09325409]
[66.92129517 -32.30054474]
[81.26273346 -26.61207008]
[90.39224243 -14.00093746]
[91.33461761 1.68004596]
[83.64488983 15.53939342]
[90.82740021 28.70797539]
[98.00990295 41.87655640]
[105.19241333 55.04513931]
[112.37492371 68.21372223]
[124.81436157 76.59586334]
[139.71626282 78.30855560]
[150.95468140 65.70894623]
[167.32130432 62.30085754]
[182.35369873 69.22855377]
[190.23567200 83.59448242]
[205.16998291 84.99678802]
[220.10427856 86.39909363]
[230.25718689 74.66460419]
[245.37603760 71.17173004]
[259.64730835 77.26354218]
[267.58343506 90.59761810]
[266.13278198 106.04673767]
[255.85317993 117.67039490]
[240.69734192 120.99905396]
[226.49298096 114.75278473]
[218.70198059 101.33339691]
[203.76766968 99.93109894]
[188.83335876 98.52879333]
[180.95147705 109.34877014]
[168.64706421 114.89070129]
[155.10488892 113.60240173]
[143.88871765 105.71502686]
[138.00357056 93.21045685]
[123.10167694 91.49777222]
[122.76952362 103.67681885]
[116.82378387 113.40683746]
[107.50000000 118.49766541]
[107.50000000 133.49766541]
[107.50000000 148.49766541]
[107.50000000 163.49766541]
[107.50000000 178.49766541]
[107.50000000 193.49766541]
[107.50000000 208.49766541]
[107.50000000 223.49766541]
[107.50000000 238.49766541]
[107.50000000 253.49766541]
[122.03988647 257.55899048]
[134.94427490 265.39349365]
[145.25555420 276.41983032]
[152.20857239 289.81976318]
[155.28736877 304.59890747]
[154.26348877 319.66058350]
[149.21287537 333.88711548]
[140.51036072 346.22277832]
[128.80169678 355.75219727]
[114.95575714 361.76821899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[48 95]
[49 94]
[50 93]
[52 92]
[53 91]
[54 90]
[55 89]
[104 128]
[105 127]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
