%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAACAAAAGGGGGGGGGGAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUxxxxxxxxxxUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[73.46302795 158.74172974]
[60.63259506 151.03929138]
[49.92410278 140.58578491]
[41.91474533 127.94467926]
[37.03623581 113.79732513]
[35.55152893 98.90628052]
[37.54064941 84.07418823]
[42.89638901 70.10051727]
[51.33005905 57.73844910]
[62.38708496 47.65431976]
[75.47148132 40.39166641]
[89.87798309 36.34195709]
[89.26216125 21.35460281]
[88.64633179 6.36724949]
[88.03050995 -8.62010384]
[87.41468048 -23.60745811]
[86.79885864 -38.59481049]
[86.18302917 -53.58216476]
[85.56720734 -68.56951904]
[84.95137787 -83.55686951]
[84.33555603 -98.54421997]
[69.33337402 -98.78496552]
[54.36940002 -99.88176727]
[39.49245071 -101.83106232]
[24.75104332 -104.62648773]
[10.19326878 -108.25892639]
[-4.13339281 -112.71652985]
[-18.18220901 -117.98475647]
[-31.90735435 -124.04641724]
[-45.26406097 -130.88175964]
[-58.20876312 -138.46846008]
[-70.69923401 -146.78179932]
[-82.69474030 -155.79463196]
[-94.15614319 -165.47758484]
[-105.04606628 -175.79907227]
[-115.32898712 -186.72541809]
[-124.97136688 -198.22097778]
[-133.94174194 -210.24827576]
[-142.21087646 -222.76805115]
[-149.75177002 -235.73950195]
[-156.53984070 -249.12028503]
[-162.55294800 -262.86676025]
[-167.77148438 -276.93411255]
[-172.17840576 -291.27645874]
[-175.75936890 -305.84698486]
[-178.50265503 -320.59817505]
[-180.39935303 -335.48193359]
[-181.44325256 -350.44967651]
[-181.63095093 -365.45260620]
[-180.96185303 -380.44180298]
[-179.43811035 -395.36834717]
[-177.06472778 -410.18356323]
[-173.84942627 -424.83911133]
[-169.80270386 -439.28720093]
[-164.93774414 -453.48071289]
[-159.27044678 -467.37335205]
[-152.81925964 -480.91976929]
[-145.60523987 -494.07580566]
[-137.65193176 -506.79855347]
[-128.98526001 -519.04650879]
[-119.63349915 -530.77972412]
[-109.62715912 -541.95989990]
[-98.99887085 -552.55059814]
[-87.78330231 -562.51727295]
[-76.01704407 -571.82739258]
[-63.73846436 -580.45062256]
[-50.98762131 -588.35882568]
[-37.80610275 -595.52618408]
[-24.23690414 -601.92932129]
[-10.32428837 -607.54736328]
[3.88636684 -612.36199951]
[18.34870720 -616.35748291]
[33.01556015 -619.52087402]
[47.83908844 -621.84173584]
[62.77093506 -623.31256104]
[77.76239777 -623.92858887]
[92.76457977 -623.68774414]
[107.72854614 -622.59082031]
[122.60547638 -620.64135742]
[137.34686279 -617.84582520]
[151.90460205 -614.21331787]
[166.23123169 -609.75555420]
[180.28001404 -604.48724365]
[194.00511169 -598.42547607]
[207.36175537 -591.59002686]
[220.30641174 -584.00323486]
[232.79681396 -575.68981934]
[244.79225159 -566.67687988]
[256.25357056 -556.99383545]
[267.14343262 -546.67224121]
[277.42623901 -535.74578857]
[287.06854248 -524.25018311]
[296.03881836 -512.22283936]
[304.30786133 -499.70297241]
[311.84866333 -486.73147583]
[318.63662720 -473.35061646]
[324.64962769 -459.60409546]
[329.86804199 -445.53671265]
[334.27484131 -431.19433594]
[337.85568237 -416.62377930]
[340.59887695 -401.87255859]
[342.49545288 -386.98880005]
[343.53921509 -372.02102661]
[343.72680664 -357.01809692]
[343.05758667 -342.02890015]
[341.53375244 -327.10238647]
[339.16024780 -312.28720093]
[335.94482422 -297.63165283]
[331.89797974 -283.18359375]
[327.03292847 -268.99014282]
[321.36550903 -255.09754944]
[314.91421509 -241.55117798]
[307.70010376 -228.39518738]
[299.74667358 -215.67250061]
[291.07992554 -203.42462158]
[281.72805786 -191.69149780]
[271.72164917 -180.51138306]
[261.09326172 -169.92077637]
[249.87762451 -159.95419312]
[238.11128235 -150.64414978]
[225.83264160 -142.02102661]
[213.08174133 -134.11294556]
[199.90016174 -126.94568634]
[186.33091736 -120.54264069]
[172.41825867 -114.92469788]
[158.20756531 -110.11017609]
[143.74519348 -106.11477661]
[129.07830811 -102.95153046]
[114.25476837 -100.63076782]
[99.32290649 -99.16004944]
[99.93873596 -84.17269897]
[100.55455780 -69.18534088]
[101.17038727 -54.19799042]
[101.78620911 -39.21063614]
[102.40203094 -24.22328186]
[103.01786041 -9.23592949]
[103.63368225 5.75142384]
[104.24951172 20.73877716]
[104.86533356 35.72613144]
[119.55551910 38.58026886]
[133.19163513 44.74498367]
[145.03869629 53.88799286]
[154.45812988 65.51647949]
[160.94223022 79.00366211]
[164.14147949 93.62255859]
[163.88345337 108.58521271]
[160.18205261 123.08511353]
[153.23678589 136.34069824]
[143.42199707 147.63749695]
[131.26673889 156.36659241]
[117.42617035 162.05747986]
[102.64631653 164.40341187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
