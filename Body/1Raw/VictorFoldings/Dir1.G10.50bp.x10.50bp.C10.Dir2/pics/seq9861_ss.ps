%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAACAACCGGGGGGGGGGCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGxxxxxxxxxxGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCCCCCCCCCCCGCUAACAACC\
) } def
/len { sequence length } bind def

/coor [
[84.79347229 372.04495239]
[70.63287354 366.88995361]
[58.04312515 358.60772705]
[47.70318604 347.64495850]
[40.17067719 334.59283447]
[35.85181046 320.15524292]
[34.97950363 305.11077881]
[37.60079193 290.27078247]
[43.57431793 276.43554688]
[52.57793808 264.35119629]
[64.12609100 254.66941833]
[77.59600830 247.91233826]
[92.26126862 244.44436646]
[92.26126862 229.44436646]
[92.26126862 214.44436646]
[92.26126862 199.44436646]
[92.26126862 184.44436646]
[92.26126862 169.44436646]
[92.26126862 154.44436646]
[92.26126862 139.44436646]
[92.26126862 124.44436646]
[92.26126862 109.44436646]
[83.81091309 121.83757019]
[71.10873413 129.81596375]
[56.27563477 132.04736328]
[41.78832245 128.15921021]
[30.06575966 118.80072021]
[23.06528091 105.53446960]
[21.95576859 90.57556152]
[26.92247772 76.42169952]
[37.13611221 65.43618011]
[50.89128113 59.45326233]
[65.89127350 59.47193146]
[79.63150787 65.48906708]
[89.81776428 76.49997711]
[94.74941254 90.66760254]
[98.65616608 76.18529510]
[102.56291962 61.70298386]
[106.46966553 47.22067261]
[110.37641907 32.73836517]
[114.28317261 18.25605583]
[100.11421967 13.31252480]
[86.33892059 7.35947561]
[73.02908325 0.42794484]
[60.25411606 -7.44592905]
[48.08060837 -16.22109604]
[36.57203674 -25.85180473]
[25.78840256 -36.28784561]
[15.78592014 -47.47480774]
[6.61674404 -59.35436630]
[-1.67132378 -71.86459351]
[-9.03507233 -84.94025421]
[-15.43610954 -98.51318359]
[-20.84106255 -112.51261902]
[-25.22175407 -126.86557770]
[-28.55534363 -141.49722290]
[-30.82445145 -156.33126831]
[-32.01724625 -171.29037476]
[-32.12751007 -186.29655457]
[-31.15467072 -201.27157593]
[-29.10379601 -216.13737488]
[-25.98558235 -230.81642151]
[-21.81628227 -245.23220825]
[-16.61763573 -259.30953979]
[-10.41674614 -272.97509766]
[-3.24594188 -286.15753174]
[4.85739136 -298.78820801]
[13.85100555 -310.80123901]
[23.68801308 -322.13397217]
[34.31712723 -332.72735596]
[45.68292999 -342.52615356]
[57.72616959 -351.47924805]
[70.38404846 -359.54000854]
[83.59058380 -366.66638184]
[97.27692413 -372.82122803]
[111.37169647 -377.97244263]
[125.80143738 -382.09317017]
[140.49090576 -385.16192627]
[155.36351013 -387.16271973]
[170.34173584 -388.08514404]
[185.34745789 -387.92434692]
[200.30245972 -386.68118286]
[215.12878418 -384.36212158]
[229.74911499 -380.97927856]
[244.08723450 -376.55029297]
[258.06838989 -371.09820557]
[271.61968994 -364.65151978]
[284.67050171 -357.24377441]
[297.15274048 -348.91363525]
[309.00134277 -339.70449829]
[320.15457153 -329.66439819]
[330.55422974 -318.84567261]
[340.14611816 -307.30474854]
[348.88024902 -295.10174561]
[356.71105957 -282.30035400]
[363.59774780 -268.96725464]
[369.50436401 -255.17198181]
[374.40014648 -240.98645020]
[378.25958252 -226.48463440]
[381.06253052 -211.74214172]
[382.79437256 -196.83581543]
[383.44607544 -181.84338379]
[383.01428223 -166.84300232]
[381.50119019 -151.91288757]
[378.91473389 -137.13087463]
[375.26837158 -122.57403564]
[370.58111572 -108.31824493]
[364.87741089 -94.43785095]
[358.18698120 -81.00520325]
[350.54470825 -68.09033966]
[341.99047852 -55.76059341]
[332.56884766 -44.08024597]
[322.32891846 -33.11019516]
[311.32412720 -22.90763474]
[299.61181641 -13.52575588]
[287.25308228 -5.01347017]
[274.31231689 2.58484101]
[260.85699463 9.22956371]
[246.95729065 14.88605499]
[232.68565369 19.52482414]
[218.11650085 23.12168694]
[203.32577515 25.65789032]
[188.39060974 27.12021065]
[173.38885498 27.50102615]
[158.39871216 26.79834938]
[143.49836731 25.01584625]
[128.76548767 22.16280746]
[124.85873413 36.64511871]
[120.95198059 51.12742615]
[117.04522705 65.60973358]
[113.13847351 80.09204865]
[109.23171997 94.57435608]
[107.26126862 109.44436646]
[107.26126862 124.44436646]
[107.26126862 139.44436646]
[107.26126862 154.44436646]
[107.26126862 169.44436646]
[107.26126862 184.44436646]
[107.26126862 199.44436646]
[107.26126862 214.44436646]
[107.26126862 229.44436646]
[107.26126862 244.44436646]
[121.92652893 247.91233826]
[135.39645386 254.66941833]
[146.94461060 264.35119629]
[155.94822693 276.43554688]
[161.92175293 290.27078247]
[164.54304504 305.11077881]
[163.67073059 320.15524292]
[159.35186768 334.59283447]
[151.81935120 347.64495850]
[141.47941589 358.60772705]
[128.88966370 366.88995361]
[114.72906494 372.04495239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[36 132]
[37 131]
[38 130]
[39 129]
[40 128]
[41 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
