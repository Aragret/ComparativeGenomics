%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAACCAAAGGGGGGGGGGUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCxxxxxxxxxxUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCCCCCCCCCCCGAAACCACA\
) } def
/len { sequence length } bind def

/coor [
[69.69325256 371.42095947]
[56.47306061 364.14846802]
[45.58625412 353.70147705]
[37.77512360 340.79223633]
[33.57224274 326.30090332]
[33.26417160 311.21557617]
[36.87191391 296.56475830]
[44.14948654 283.34735107]
[54.60069275 272.46459961]
[67.51295471 264.65844727]
[82.00588989 260.46115112]
[81.69383240 245.46440125]
[81.38178253 230.46765137]
[81.06972504 215.47090149]
[80.75766754 200.47413635]
[80.44561005 185.47738647]
[80.13355255 170.48063660]
[79.82149506 155.48388672]
[79.50944519 140.48712158]
[67.42945099 131.59477234]
[53.01723862 135.75267029]
[38.60502243 139.91055298]
[24.19280434 144.06843567]
[9.78058910 148.22633362]
[4.85151052 152.78831482]
[-0.79468131 153.95098877]
[-5.31813335 152.24397278]
[-19.89083672 155.79873657]
[-34.46353912 159.35350037]
[-49.03624344 162.90826416]
[-62.99128723 172.53598022]
[-76.10589600 161.79153442]
[-69.41181946 146.21508789]
[-52.59100342 148.33555603]
[-38.01829910 144.78079224]
[-23.44559860 141.22602844]
[-8.87289524 137.67126465]
[5.62270164 133.81411743]
[20.03491783 129.65621948]
[34.44713211 125.49833679]
[48.85934830 121.34045410]
[63.27156448 117.18256378]
[61.01560593 108.64641571]
[60.68551254 99.95823669]
[62.23866272 91.54062653]
[65.54221344 83.79038239]
[70.38228607 77.05976105]
[76.47686005 71.64051819]
[83.49169159 67.75141907]
[91.05834961 65.52970886]
[90.43437195 50.54269409]
[85.38561249 36.41789246]
[76.36808777 24.43105888]
[67.35055542 12.44422626]
[58.33302307 0.45739412]
[42.95553207 1.69687068]
[29.35983658 -5.59426069]
[21.88427353 -19.08942604]
[22.91426849 -34.48236847]
[32.12115097 -46.86125565]
[46.56704330 -52.27602768]
[61.64231110 -48.99885178]
[72.53649139 -38.07546616]
[75.77329254 -22.99147797]
[70.31985474 -8.56013584]
[79.33738708 3.42669678]
[88.35491943 15.41352940]
[97.37244415 27.40036201]
[96.09970093 12.45445538]
[97.80442810 -2.44835973]
[102.41944122 -16.72076797]
[109.76287079 -29.80029678]
[119.54531097 -41.17148590]
[131.38122559 -50.38619614]
[144.80418396 -57.08128357]
[159.28518677 -60.99288940]
[174.25354004 -61.96686554]
[189.11932373 -59.96482468]
[203.29670715 -55.06566620]
[216.22695923 -47.46246338]
[227.40049744 -37.45486069]
[236.37696838 -25.43725014]
[242.80262756 -11.88324738]
[246.42422485 2.67298961]
[247.09902954 17.65780258]
[244.80047607 32.48064423]
[239.61912537 46.55735016]
[231.75918579 59.33315659]
[221.53041077 70.30458069]
[209.33590698 79.03923035]
[195.65626526 85.19288635]
[181.03059387 88.52303314]
[166.03529358 88.89841461]
[151.26132202 86.30426025]
[137.29090881 80.84278870]
[124.67463684 72.72924042]
[113.90970612 62.28337097]
[105.42138672 49.91871643]
[106.04536438 64.90573120]
[115.01452637 67.70885468]
[122.93820953 72.76045990]
[129.26466370 79.70879364]
[133.55339050 88.07003021]
[135.50573730 97.26196289]
[150.36877441 99.28430176]
[165.23182678 101.30663300]
[180.09487915 103.32897186]
[186.65031433 89.69513702]
[197.09945679 78.75572968]
[210.41860962 71.58248901]
[225.30288696 68.87816620]
[240.29408264 70.90770721]
[253.92352295 77.47227478]
[264.85592651 87.92874908]
[272.02023315 101.25270081]
[274.71459961 116.13879395]
[272.67501831 131.12863159]
[266.10131836 144.75366211]
[255.63751221 155.67906189]
[242.30876160 162.83444214]
[227.42086792 165.51881409]
[212.43240356 163.46919250]
[198.81176758 156.88635254]
[187.89338684 146.41525269]
[180.74693298 133.08171082]
[178.07254028 118.19201660]
[163.20948792 116.16968536]
[148.34645081 114.14734650]
[133.48339844 112.12501526]
[119.70004272 132.58833313]
[94.50619507 140.17507935]
[94.81825256 155.17182922]
[95.13031006 170.16857910]
[95.44236755 185.16532898]
[95.75441742 200.16209412]
[96.06647491 215.15884399]
[96.37853241 230.15559387]
[96.69058990 245.15234375]
[97.00264740 260.14910889]
[111.65763855 263.73986816]
[124.88344574 271.00213623]
[135.77832031 281.44073486]
[143.59941101 294.34393311]
[147.81347656 308.83200073]
[148.13320923 323.91708374]
[144.53677368 338.57070923]
[137.26940918 351.79370117]
[126.82661438 362.68453979]
[113.92037964 370.50067139]
[99.43069458 374.70913696]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[27 37]
[28 36]
[29 35]
[30 34]
[50 99]
[51 98]
[52 68]
[53 67]
[54 66]
[55 65]
[104 129]
[105 128]
[106 127]
[107 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
