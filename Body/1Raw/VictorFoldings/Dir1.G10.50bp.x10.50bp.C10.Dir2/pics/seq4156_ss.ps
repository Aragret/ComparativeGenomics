%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAAUCUUGGGGGGGGGGCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUxxxxxxxxxxUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCCCCCCCCCCCUACCAUCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.83489990]
[71.19830322 354.81887817]
[59.48964310 345.28945923]
[50.78712082 332.95379639]
[45.73651886 318.72726440]
[44.71262741 303.66558838]
[47.79142761 288.88641357]
[54.74444962 275.48651123]
[65.05573273 264.46017456]
[77.96011353 256.62567139]
[92.50000000 252.56434631]
[92.50000000 237.56434631]
[92.50000000 222.56434631]
[92.50000000 207.56434631]
[92.50000000 192.56434631]
[92.50000000 177.56434631]
[92.50000000 162.56434631]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[92.50000000 52.43565369]
[82.73059082 63.81803894]
[68.40140533 68.25362396]
[53.90988541 64.38117981]
[43.70329285 53.38911819]
[40.91389847 38.65075684]
[46.39773941 24.68911171]
[58.47188950 15.78883457]
[73.43094635 14.68130779]
[86.68416595 21.70641518]
[94.16449738 34.70902252]
[96.95682526 19.97121620]
[99.74914551 5.23340988]
[102.54147339 -9.50439644]
[105.33379364 -24.24220276]
[108.12612152 -38.98000717]
[93.64159393 -42.90771866]
[79.50499725 -47.94606400]
[65.80134583 -54.06474686]
[52.61306000 -61.22696304]
[40.01945114 -69.38964081]
[28.09626198 -78.50369263]
[16.91520119 -88.51429749]
[6.54351425 -99.36125183]
[-2.95642257 -110.97931671]
[-11.52747440 -123.29862976]
[-19.11809349 -136.24508667]
[-25.68262672 -149.74082947]
[-31.18159676 -163.70471191]
[-35.58192825 -178.05271912]
[-38.85715866 -192.69857788]
[-40.98759079 -207.55419922]
[-41.96041107 -222.53024292]
[-41.76977158 -237.53663635]
[-40.41681290 -252.48313904]
[-37.90967560 -267.27984619]
[-34.26343536 -281.83776855]
[-29.50002480 -296.06936646]
[-23.64809227 -309.88903809]
[-16.74283028 -323.21365356]
[-8.82576942 -335.96310425]
[0.05547663 -348.06069946]
[9.84749317 -359.43368530]
[20.49139023 -370.01367188]
[31.92315292 -379.73699951]
[44.07402802 -388.54519653]
[56.87093735 -396.38531494]
[70.23691559 -403.21017456]
[84.09158325 -408.97875977]
[98.35161591 -413.65634155]
[112.93124390 -417.21484375]
[127.74278259 -419.63278198]
[142.69715881 -420.89569092]
[157.70443726 -420.99594116]
[172.67434692 -419.93292236]
[187.51687622 -417.71304321]
[202.14273071 -414.34963989]
[216.46397400 -409.86294556]
[230.39447021 -404.27996826]
[243.85043335 -397.63424683]
[256.75091553 -389.96578979]
[269.01837158 -381.32067871]
[280.57901001 -371.75091553]
[291.36328125 -361.31408691]
[301.30636597 -350.07293701]
[310.34841919 -338.09506226]
[318.43508911 -325.45248413]
[325.51773071 -312.22131348]
[331.55374146 -298.48104858]
[336.50683594 -284.31436157]
[340.34722900 -269.80642700]
[343.05181885 -255.04454041]
[344.60430908 -240.11744690]
[344.99539185 -225.11492920]
[344.22271729 -210.12722778]
[342.29092407 -195.24446106]
[339.21163940 -180.55616760]
[335.00335693 -166.15065002]
[329.69140625 -152.11457825]
[323.30776978 -138.53233337]
[315.89074707 -125.48563385]
[307.48504639 -113.05292511]
[298.14114380 -101.30899048]
[287.91528320 -90.32444763]
[276.86895752 -80.16537476]
[265.06857300 -70.89286804]
[252.58512878 -62.56268692]
[239.49369812 -55.22492981]
[225.87300110 -48.92373657]
[211.80497742 -43.69699478]
[197.37420654 -39.57614517]
[182.66751099 -36.58596802]
[167.77331543 -34.74444580]
[152.78118896 -34.06266022]
[137.78132629 -34.54470444]
[122.86392975 -36.18768311]
[120.07160187 -21.44987679]
[117.27927399 -6.71207190]
[114.48695374 8.02573395]
[111.69462585 22.76354027]
[108.90230560 37.50134659]
[107.50000000 52.43565369]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[107.50000000 162.56434631]
[107.50000000 177.56434631]
[107.50000000 192.56434631]
[107.50000000 207.56434631]
[107.50000000 222.56434631]
[107.50000000 237.56434631]
[107.50000000 252.56434631]
[122.03988647 256.62567139]
[134.94427490 264.46017456]
[145.25555420 275.48651123]
[152.20857239 288.88641357]
[155.28736877 303.66558838]
[154.26348877 318.72726440]
[149.21287537 332.95379639]
[140.51036072 345.28945923]
[128.80169678 354.81887817]
[114.95575714 360.83489990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 126]
[35 125]
[36 124]
[37 123]
[38 122]
[39 121]
[40 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
