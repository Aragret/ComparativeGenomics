%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAUACGGGGGGGGGGCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCxxxxxxxxxxCCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGCCCCCCCCCCACCCCAAUAC\
) } def
/len { sequence length } bind def

/coor [
[99.58918762 465.50189209]
[85.74324799 459.48587036]
[74.03459167 449.95645142]
[65.33206177 437.62078857]
[60.28146362 423.39425659]
[59.25757217 408.33258057]
[62.33637238 393.55340576]
[69.28939056 380.15347290]
[79.60067749 369.12716675]
[92.50505829 361.29263306]
[107.04494476 357.23132324]
[107.04494476 342.23132324]
[107.04494476 327.23132324]
[107.04494476 312.23132324]
[107.04494476 297.23132324]
[107.04494476 282.23132324]
[107.04494476 267.23132324]
[107.04494476 252.23133850]
[107.04494476 237.23133850]
[107.04494476 222.23133850]
[107.04494476 207.23133850]
[105.95363617 192.27108765]
[103.77679443 177.42988586]
[101.59996033 162.58866882]
[99.42312622 147.74746704]
[85.06441498 145.35505676]
[72.09368134 138.74778748]
[61.71630096 128.53965759]
[54.89664459 115.67931366]
[40.13058853 118.31817627]
[25.36453438 120.95704651]
[13.18204689 131.93516541]
[-2.33089137 126.61719513]
[-5.21589994 110.47380829]
[7.49487162 100.11193848]
[22.72566986 106.19098663]
[37.49172592 103.55212402]
[52.25778198 100.91326141]
[54.10601807 86.81304932]
[60.02469254 73.88241577]
[69.48886871 63.26821136]
[81.65914154 55.91183472]
[95.45611572 52.46573257]
[96.39173889 37.49494171]
[97.32736969 22.52414894]
[98.26300049 7.55335808]
[99.19862366 -7.41743326]
[100.13425446 -22.38822556]
[83.74542999 -22.96680450]
[68.26866913 -37.43146133]
[59.00372314 -49.22810364]
[49.73877335 -61.02474213]
[40.47382355 -72.82138062]
[31.20887566 -84.61802673]
[16.01651573 -82.36241150]
[1.73764455 -88.02009583]
[-7.78679419 -100.06919098]
[-9.99477386 -115.26854706]
[-4.29235935 -129.52961731]
[7.78652906 -139.01623535]
[22.99273109 -141.17655945]
[37.23585510 -135.42947388]
[46.68457031 -123.32090759]
[48.79722214 -108.10800934]
[43.00551605 -93.88297272]
[52.27046585 -82.08633423]
[61.53541565 -70.28969574]
[70.80036163 -58.49305344]
[80.06531525 -46.69641113]
[87.55882263 -46.38442230]
[85.08367157 -61.17880249]
[82.60852814 -75.97318268]
[75.44227600 -89.15061951]
[78.50158691 -103.83532715]
[90.33384705 -113.05474091]
[105.32089233 -112.43131256]
[116.34658813 -102.26107025]
[118.17575836 -87.37301636]
[109.93856049 -74.83531189]
[106.24220276 -60.29787827]
[102.54583740 -45.76044464]
[110.03934479 -45.44845963]
[120.25282288 -56.43412399]
[130.46630859 -67.41978455]
[140.67977905 -78.40544891]
[150.89326477 -89.39111328]
[161.10675049 -100.37677765]
[171.32022095 -111.36244965]
[166.73101807 -126.01969147]
[170.10093689 -141.00431824]
[180.52346802 -152.28555298]
[195.19502258 -156.82879639]
[210.16902161 -153.41192627]
[221.41752625 -142.95408630]
[225.91476440 -128.26835632]
[222.45097351 -113.30514526]
[211.95791626 -102.08946991]
[197.25817871 -97.63829803]
[182.30589294 -101.14896393]
[172.09240723 -90.16329956]
[161.87893677 -79.17763519]
[151.66545105 -68.19197083]
[141.45196533 -57.20630646]
[131.23849487 -46.22064209]
[121.02500916 -35.23497772]
[115.10504913 -21.45259666]
[114.16941833 -6.48180485]
[113.23378754 8.48898697]
[112.29816437 23.45977783]
[111.36253357 38.43056870]
[110.42690277 53.40135956]
[124.85275269 59.22630692]
[136.64051819 69.37931824]
[144.53894043 82.78267670]
[147.70962524 98.01363373]
[145.81599426 113.45543671]
[139.05905151 127.46896362]
[128.15605164 138.56669617]
[114.26432800 145.57063293]
[116.44116211 160.41183472]
[118.61800385 175.25303650]
[120.79483795 190.09425354]
[130.06439209 178.30122375]
[144.70880127 175.05444336]
[158.09397888 181.82473755]
[164.15634155 195.54507446]
[160.14955139 210.00003052]
[147.88873291 218.64135742]
[132.92817688 217.55445862]
[122.04494476 207.23133850]
[122.04494476 222.23133850]
[122.04494476 237.23133850]
[122.04494476 252.23133850]
[122.04494476 267.23132324]
[122.04494476 282.23132324]
[122.04494476 297.23132324]
[122.04494476 312.23132324]
[122.04494476 327.23132324]
[122.04494476 342.23132324]
[122.04494476 357.23132324]
[136.58483887 361.29263306]
[149.48921204 369.12716675]
[159.80049133 380.15347290]
[166.75352478 393.55340576]
[169.83232117 408.33258057]
[168.80842590 423.39425659]
[163.75782776 437.62078857]
[155.05529785 449.95645142]
[143.34663391 459.48587036]
[129.50070190 465.50189209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 122]
[23 121]
[24 120]
[25 119]
[29 38]
[30 37]
[31 36]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[48 106]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
