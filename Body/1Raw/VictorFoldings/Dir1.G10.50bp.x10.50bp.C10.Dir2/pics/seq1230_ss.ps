%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCCAGGGGGGGGGGAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCCCCCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[136.10424805 482.07638550]
[122.25830841 476.06036377]
[110.54964447 466.53094482]
[101.84712219 454.19528198]
[96.79651642 439.96875000]
[95.77262878 424.90707397]
[98.85142517 410.12789917]
[105.80445099 396.72796631]
[116.11573029 385.70162964]
[129.02011108 377.86712646]
[143.55999756 373.80581665]
[143.55999756 358.80581665]
[143.55999756 343.80581665]
[143.55999756 328.80581665]
[143.55999756 313.80581665]
[143.55999756 298.80581665]
[143.55999756 283.80581665]
[143.55999756 268.80581665]
[143.55999756 253.80581665]
[143.55999756 238.80581665]
[135.82269287 226.07855225]
[143.55999756 212.27838135]
[131.39311218 203.57522583]
[126.78927612 189.08435059]
[131.86311340 174.49119568]
[118.40003204 168.11981201]
[117.26897430 152.33908081]
[109.01668549 139.81312561]
[100.76439667 127.28716278]
[92.51210785 114.76119995]
[79.26952362 107.71606445]
[64.27033234 107.87210083]
[49.27114868 108.02813721]
[34.27195740 108.18417358]
[19.27276993 108.34020996]
[5.43984413 117.14828491]
[-8.97766113 109.33370972]
[-9.14825249 92.93545532]
[5.10355997 84.82263184]
[19.11673355 93.34102631]
[34.11592102 93.18498993]
[49.11510849 93.02894592]
[64.11429596 92.87290955]
[79.11348724 92.71687317]
[82.51646423 78.10798645]
[69.13018036 71.33986664]
[53.50062561 74.95879364]
[41.01636124 64.88294220]
[41.25424576 48.84165573]
[54.03179550 39.14042664]
[69.54716492 43.22121429]
[75.89829254 57.95358276]
[89.28457642 64.72170258]
[95.46036530 60.46615219]
[86.94947815 48.11444092]
[99.30133820 39.60375977]
[107.81193542 51.95506287]
[113.98772430 47.69952011]
[112.43014526 32.78060532]
[110.87256622 17.86169434]
[109.31497955 2.94278216]
[107.75740051 -11.97613049]
[92.87438965 -14.50568485]
[79.22624969 -20.95786667]
[67.82574463 -30.85388184]
[59.51887512 -43.45937729]
[54.92207336 -57.83894730]
[54.37644196 -72.92552185]
[57.92247772 -87.59959412]
[65.29703522 -100.77223206]
[75.95288086 -111.46595001]
[89.09927368 -118.88719940]
[103.76066589 -122.48526764]
[118.84908295 -121.99317169]
[133.24487305 -117.44741058]
[145.87976074 -109.18531799]
[155.81616211 -97.81999969]
[162.31672668 -84.19482422]
[164.89906311 -69.32088470]
[163.37156677 -54.30192184]
[157.84756470 -40.25244141]
[148.73696899 -28.21500397]
[136.71588135 -19.08287239]
[122.67631531 -13.53371143]
[124.23389435 1.38520122]
[125.79147339 16.30411339]
[127.34905243 31.22302628]
[128.90663147 46.14193726]
[139.29876709 68.21107483]
[138.38781738 88.87464905]
[129.19119263 103.40068054]
[116.37894440 109.24864960]
[105.03807068 106.50891113]
[113.29035950 119.03487396]
[121.54264832 131.56083679]
[129.79493713 144.08679199]
[143.84828186 151.35412598]
[144.38908386 166.23890686]
[162.42837524 168.75453186]
[173.41806030 182.72930908]
[188.41725159 182.88534546]
[195.23791504 169.27507019]
[207.24258423 160.01359558]
[222.01748657 156.89547729]
[236.62103271 160.48678589]
[248.16949463 170.02316284]
[254.40638733 183.57183838]
[269.40557861 183.72787476]
[284.40475464 183.88391113]
[299.40396118 184.03994751]
[310.51812744 172.80381775]
[326.32241821 172.80113220]
[337.44042969 184.03347778]
[337.27600098 199.83691406]
[325.92675781 210.83552551]
[310.12594604 210.50405884]
[299.24792480 199.03913879]
[284.24871826 198.88310242]
[269.24954224 198.72706604]
[254.25035095 198.57102966]
[247.73294067 211.98701477]
[235.98858643 221.28108215]
[221.31349182 224.56779480]
[206.60665894 221.14299011]
[194.79727173 211.63377380]
[188.26121521 197.88453674]
[173.26202393 197.72850037]
[167.59715271 206.70721436]
[158.55999756 212.27838135]
[166.29730225 226.07855225]
[158.55999756 238.80581665]
[158.55999756 253.80581665]
[158.55999756 268.80581665]
[158.55999756 283.80581665]
[158.55999756 298.80581665]
[158.55999756 313.80581665]
[158.55999756 328.80581665]
[158.55999756 343.80581665]
[158.55999756 358.80581665]
[158.55999756 373.80581665]
[173.09988403 377.86712646]
[186.00427246 385.70162964]
[196.31555176 396.72796631]
[203.26856995 410.12789917]
[206.34736633 424.90707397]
[205.32348633 439.96875000]
[200.27287292 454.19528198]
[191.57035828 466.53094482]
[179.86169434 476.06036377]
[166.01576233 482.07638550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[25 98]
[27 96]
[28 95]
[29 94]
[30 93]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[45 53]
[46 52]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[100 127]
[101 126]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
