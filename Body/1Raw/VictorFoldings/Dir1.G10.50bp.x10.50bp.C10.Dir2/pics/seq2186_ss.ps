%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACACCCGGGGGGGGGGGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCUAxxxxxxxxxxAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUCCCCCCCCCCAACACACCCG\
) } def
/len { sequence length } bind def

/coor [
[86.91307068 372.82333374]
[73.06713104 366.80731201]
[61.35846710 357.27789307]
[52.65594482 344.94223022]
[47.60534286 330.71569824]
[46.58145142 315.65402222]
[49.66024780 300.87487793]
[56.61326981 287.47494507]
[66.92455292 276.44860840]
[79.82893372 268.61410522]
[94.36882019 264.55279541]
[94.36882019 249.55278015]
[94.36882019 234.55278015]
[94.36882019 219.55278015]
[94.36882019 204.55278015]
[94.36882019 189.55278015]
[94.36882019 174.55278015]
[94.36882019 159.55278015]
[94.36882019 144.55278015]
[94.36882019 129.55278015]
[77.66022491 117.95748138]
[72.77053070 99.22763824]
[58.64572906 104.27639008]
[44.52092361 109.32514954]
[30.39612198 114.37390137]
[26.16230202 129.30221558]
[13.94165421 138.86439514]
[-1.56673253 139.38360596]
[-14.39956665 130.66018677]
[-19.62236214 116.04847717]
[-15.22684765 101.16697693]
[-2.90318775 91.73793030]
[12.60991859 91.38698578]
[25.34736443 100.24909973]
[39.47216797 95.20034790]
[53.59696960 90.15158844]
[67.72177124 85.10282898]
[76.73930359 73.11599731]
[77.67493439 58.14520645]
[78.61055756 43.17441559]
[79.54618835 28.20362473]
[70.96073914 11.94724178]
[81.15351868 -2.30432987]
[81.77749634 -17.29134560]
[73.61483765 -27.33250618]
[74.48118591 -39.84123993]
[83.36299133 -48.11293411]
[84.29861450 -63.08372498]
[85.23424530 -78.05451202]
[86.16987610 -93.02530670]
[87.10549927 -107.99610138]
[87.72947693 -122.98311615]
[88.04153442 -137.97987366]
[88.35359192 -152.97662354]
[76.70856476 -150.99566650]
[63.43374634 -156.06210327]
[52.27949524 -168.72062683]
[44.82458496 -181.73693848]
[37.36967468 -194.75325012]
[21.94816589 -197.34381104]
[11.83917141 -209.27453613]
[11.81585121 -224.91210938]
[21.88921738 -236.87292480]
[37.30293274 -239.50947571]
[50.77911377 -231.57684326]
[55.95471954 -216.82058716]
[50.38598633 -202.20816040]
[57.84089661 -189.19184875]
[65.29580688 -176.17553711]
[72.79215240 -175.94151306]
[72.49020386 -190.93847656]
[72.18825531 -205.93544006]
[71.88630676 -220.93240356]
[66.38316345 -234.88644409]
[75.01514435 -247.15383911]
[90.00784302 -246.68591309]
[97.85805511 -233.90412903]
[91.49524689 -220.32025146]
[90.25844574 -205.37132263]
[89.02165222 -190.42239380]
[87.78485107 -175.47348022]
[95.28119659 -175.23945618]
[103.53348541 -187.76541138]
[111.78577423 -200.29138184]
[120.03806305 -212.81733704]
[114.44697571 -227.29211426]
[118.46427917 -242.28015137]
[130.54524231 -252.01821899]
[146.04449463 -252.76184082]
[159.00224304 -244.22508240]
[164.43597412 -229.69049072]
[160.25631714 -214.74693298]
[148.07043457 -205.14048767]
[132.56402588 -204.56504822]
[124.31173706 -192.03909302]
[116.05944824 -179.51312256]
[107.80715942 -166.98716736]
[103.35034180 -152.66456604]
[103.03829193 -137.66781616]
[102.72623444 -122.67105865]
[105.37300873 -118.62506104]
[105.46161652 -112.86108398]
[102.07629395 -107.06047058]
[101.14066315 -92.08967590]
[100.20503235 -77.11888885]
[99.26940918 -62.14809418]
[98.33377838 -47.17730331]
[106.99158478 -31.94437027]
[96.76451111 -16.66736794]
[96.14053345 -1.68035245]
[104.11540222 7.46889973]
[103.67816925 19.99997330]
[94.51698303 29.13925362]
[93.58135223 44.11004257]
[92.64572144 59.08083725]
[91.71009827 74.05162811]
[111.25485992 74.15591431]
[126.35975647 87.58640289]
[128.91429138 108.30907440]
[142.30058289 115.07718658]
[155.68685913 121.84529877]
[170.62223816 116.67712402]
[184.80088806 123.65862274]
[189.81088257 138.64781189]
[182.67987061 152.75184631]
[167.63854980 157.60308838]
[153.61068726 150.32334900]
[148.91874695 135.23158264]
[135.53247070 128.46347046]
[122.14617920 121.69535828]
[109.36882019 129.55278015]
[109.36882019 144.55278015]
[109.36882019 159.55278015]
[109.36882019 174.55278015]
[109.36882019 189.55278015]
[109.36882019 204.55278015]
[109.36882019 219.55278015]
[109.36882019 234.55278015]
[109.36882019 249.55278015]
[109.36882019 264.55279541]
[123.90870667 268.61410522]
[136.81309509 276.44860840]
[147.12437439 287.47494507]
[154.07739258 300.87487793]
[157.15618896 315.65402222]
[156.13230896 330.71569824]
[151.08169556 344.94223022]
[142.37918091 357.27789307]
[130.67051697 366.80731201]
[116.82457733 372.82333374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 37]
[23 36]
[24 35]
[25 34]
[38 116]
[39 115]
[40 114]
[41 113]
[43 110]
[44 109]
[47 107]
[48 106]
[49 105]
[50 104]
[51 103]
[52 100]
[53 99]
[54 98]
[57 69]
[58 68]
[59 67]
[82 97]
[83 96]
[84 95]
[85 94]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
