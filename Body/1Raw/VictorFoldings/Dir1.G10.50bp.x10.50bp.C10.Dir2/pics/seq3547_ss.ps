%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGCUCUUGGGGGGGGGGCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUxxxxxxxxxxAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCCCCCCCCCCCAUCGCCCUU\
) } def
/len { sequence length } bind def

/coor [
[-3.37305069 276.62509155]
[-13.31848335 270.41519165]
[-22.89196014 263.64590454]
[-32.06205368 256.33947754]
[-40.79867172 248.51986694]
[-49.07313156 240.21275330]
[-56.85827255 231.44541931]
[-64.12854004 222.24662781]
[-70.86007690 212.64656067]
[-77.03078461 202.67675781]
[-90.27336884 209.72189331]
[-103.51595306 216.76702881]
[-116.75854492 223.81216431]
[-130.00112915 230.85729980]
[-143.16970825 238.03981018]
[-156.26286316 245.35891724]
[-169.35601807 252.67802429]
[-182.44917297 259.99713135]
[-195.54232788 267.31622314]
[-208.63548279 274.63534546]
[-208.76828003 289.99365234]
[-216.57626343 303.21978760]
[-229.95912170 310.75601196]
[-245.31695557 310.57507324]
[-258.51855469 302.72567749]
[-266.01278687 289.31924438]
[-265.78372192 273.96206665]
[-257.89297485 260.78512573]
[-244.46311951 253.33296204]
[-229.10673523 253.61016846]
[-215.95458984 261.54217529]
[-202.86143494 254.22306824]
[-189.76828003 246.90397644]
[-176.67512512 239.58486938]
[-163.58197021 232.26576233]
[-150.48881531 224.94665527]
[-146.15690613 218.89849854]
[-137.04626465 217.61471558]
[-123.80368042 210.56958008]
[-110.56108856 203.52444458]
[-97.31850433 196.47930908]
[-84.07592010 189.43417358]
[-95.55551147 160.33621216]
[-102.46646118 129.82864380]
[-104.64731598 98.62421417]
[-102.04711914 67.45191956]
[-94.72662354 37.04003143]
[-82.85684967 8.09903622]
[-66.71511078 -18.69493484]
[-78.60749054 -27.83666801]
[-90.49987030 -36.97840118]
[-106.81909943 -38.59544754]
[-113.33086395 -53.64632416]
[-103.33641815 -66.64798737]
[-87.11719513 -64.22543335]
[-81.35813904 -48.87078094]
[-69.46575928 -39.72904968]
[-57.57337570 -30.58731461]
[-50.49062347 -38.69025803]
[-42.99169922 -46.40966415]
[-35.09733963 -53.72418594]
[-26.82937622 -60.61359024]
[-18.21067429 -67.05883026]
[-9.26506996 -73.04207611]
[-0.01729970 -78.54679108]
[9.50706196 -83.55773926]
[19.28167725 -88.06107330]
[29.27951241 -92.04434204]
[39.47291946 -95.49652100]
[49.83371353 -98.40806580]
[60.33323669 -100.77091980]
[70.94245911 -102.57856750]
[81.63203430 -103.82598877]
[92.37240601 -104.50974274]
[103.13387299 -104.62794495]
[113.88666534 -104.18025208]
[124.60106659 -103.16792297]
[135.24742126 -101.59373474]
[145.79631042 -99.46205902]
[156.21856689 -96.77878571]
[166.48533630 -93.55133057]
[176.56825256 -89.78862000]
[186.43940735 -85.50106049]
[196.07153320 -80.70051575]
[205.43798828 -75.40024567]
[214.51284790 -69.61492920]
[223.27104187 -63.36054611]
[231.68832397 -56.65439987]
[239.74143982 -49.51503754]
[247.40809631 -41.96220398]
[254.66711426 -34.01678085]
[261.49841309 -25.70074081]
[267.88311768 -17.03708649]
[280.49423218 -25.15862846]
[293.10534668 -33.28017044]
[305.71649170 -41.40171432]
[308.81594849 -56.89909744]
[322.01205444 -65.59611511]
[337.47579956 -62.33297729]
[346.03283691 -49.04565048]
[342.60638428 -33.61726761]
[329.22930908 -25.20121193]
[313.83804321 -28.79058456]
[301.22689819 -20.66904259]
[288.61578369 -12.54750061]
[276.00463867 -4.42595816]
[281.69613647 5.82498026]
[286.79119873 16.38503838]
[291.27316284 27.21955490]
[295.12728882 38.29296494]
[298.34091187 49.56892014]
[300.90353394 61.01041412]
[302.80670166 72.57988739]
[304.04415894 84.23935699]
[304.61187744 95.95056915]
[304.50796509 107.67506409]
[303.73278809 119.37437439]
[302.28887939 131.01008606]
[300.18096924 142.54400635]
[297.41598511 153.93829346]
[294.00302124 165.15551758]
[289.95324707 176.15888977]
[285.27999878 186.91226196]
[279.99856567 197.38037109]
[274.12628174 207.52882385]
[267.68249512 217.32434082]
[260.68826294 226.73474121]
[253.16662598 235.72915649]
[245.14221191 244.27804565]
[236.64138794 252.35336304]
[227.69206238 259.92858887]
[218.32359314 266.97888184]
[208.56674194 273.48104858]
[198.45352173 279.41381836]
[188.01715088 284.75765991]
[177.29187012 289.49508667]
[166.31288147 293.61047363]
[155.11622620 297.09036255]
[143.73866272 299.92333984]
[132.21754456 302.10009766]
[120.59065247 303.61346436]
[108.89618683 304.45849609]
[97.17251587 304.63241577]
[85.45812988 304.13464355]
[73.79147339 302.96682739]
[62.21084213 301.13278198]
[50.75424957 298.63854980]
[39.45930481 295.49230957]
[28.36307716 291.70437622]
[17.50198936 287.28720093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[49 58]
[50 57]
[51 56]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
