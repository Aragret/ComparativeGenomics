%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUUACCCAAAUAGGGGGGGGGGAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAxxxxxxxxxxUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCCCCCCCCCCCAAUUACCCACAUA\
) } def
/len { sequence length } bind def

/coor [
[88.01342010 535.79913330]
[73.65116882 531.29241943]
[60.49027634 523.98651123]
[49.06967926 514.18066406]
[39.85704041 502.27636719]
[33.22961044 488.76110840]
[29.45878220 474.18835449]
[28.69896698 459.15478516]
[30.98127556 444.27609253]
[36.21225357 430.16149902]
[44.17769241 417.38900757]
[54.55141449 406.48162842]
[66.90862274 397.88601685]
[80.74329376 391.95419312]
[95.48890686 388.92901611]
[95.48890686 373.92901611]
[95.48890686 358.92901611]
[95.48890686 343.92901611]
[95.48890686 328.92901611]
[95.48890686 313.92901611]
[95.48890686 298.92901611]
[95.48890686 283.92901611]
[95.48890686 268.92901611]
[95.48890686 253.92900085]
[95.48890686 238.92900085]
[95.19255066 223.93193054]
[94.59995270 208.94363403]
[94.00735474 193.95535278]
[93.41474915 178.96705627]
[92.82215118 163.97877502]
[89.94486237 160.10635376]
[89.50558472 154.37298584]
[92.51408386 148.38909912]
[92.51408386 133.38909912]
[84.77678680 120.66182709]
[92.51408386 106.86165619]
[89.35098267 99.39728546]
[92.66519928 91.56603241]
[92.96155548 76.56896210]
[93.25791168 61.57188797]
[82.58544922 50.22568893]
[83.09963226 35.02074814]
[93.98226929 24.91610527]
[94.27862549 9.91903210]
[94.57498169 -5.07804012]
[80.35180664 -13.46012497]
[72.32878113 -27.78156853]
[72.60567474 -44.10113525]
[81.01285553 -57.98183823]
[95.18302155 -65.69729614]
[95.18302155 -80.69729614]
[95.18302155 -95.69729614]
[95.18302155 -110.69729614]
[80.78245544 -113.45677948]
[67.14274597 -118.82595825]
[54.73226929 -126.61882782]
[43.97689056 -136.56616211]
[35.24534988 -148.32485962]
[28.83661652 -161.48973083]
[24.96965599 -175.60749817]
[23.77594566 -190.19239807]
[25.29500580 -204.74284363]
[29.47309113 -218.75875854]
[36.16510010 -231.75869751]
[45.13959503 -243.29641724]
[56.08683395 -252.97618103]
[68.62942505 -260.46633911]
[82.33538055 -265.51068115]
[96.73294067 -267.93722534]
[97.02929688 -282.93429565]
[97.32565308 -297.93139648]
[89.86251831 -311.88171387]
[97.84976196 -324.45364380]
[98.14611816 -339.45071411]
[84.70630646 -346.77395630]
[76.21887207 -359.51062012]
[74.63417053 -374.73385620]
[80.31635284 -388.94552612]
[91.95969391 -398.87985229]
[106.88864136 -402.25405884]
[121.67263031 -398.29272461]
[132.91441345 -387.90612793]
[138.03070068 -373.48107910]
[135.84582520 -358.33233643]
[126.86183167 -345.94094849]
[113.14318848 -339.15435791]
[112.84683228 -324.15728760]
[120.33116913 -311.27963257]
[112.32273102 -297.63500977]
[112.02636719 -282.63793945]
[111.73001099 -267.64086914]
[126.75276947 -264.41787720]
[140.86793518 -258.33709717]
[153.53741455 -249.62846375]
[164.27783203 -238.62200928]
[172.67898560 -225.73550415]
[178.41952515 -211.45860291]
[181.27922058 -196.33415222]
[181.14744568 -180.93765259]
[178.02738953 -165.85530090]
[172.03610229 -151.66166687]
[163.40000916 -138.89781189]
[152.44642639 -128.05070496]
[139.59107971 -119.53459930]
[125.32243347 -113.67521667]
[110.18302155 -110.69729614]
[110.18302155 -95.69729614]
[110.18302155 -80.69729614]
[110.18302155 -65.69729614]
[122.45800018 -59.64604187]
[130.96008301 -48.83745575]
[133.97900391 -35.35323715]
[130.86766052 -21.82203484]
[122.17968750 -10.90700722]
[109.57205963 -4.78168249]
[109.27569580 10.21538925]
[108.97933960 25.21246147]
[119.45428467 35.73915482]
[119.36737061 50.95253754]
[108.25498962 61.86824417]
[107.95862579 76.86531830]
[107.66226959 91.86238861]
[107.51408386 106.86165619]
[115.25138855 120.66182709]
[107.51408386 133.38909912]
[107.51408386 148.38909912]
[107.81044006 163.38616943]
[108.40304565 178.37446594]
[108.99564362 193.36274719]
[109.58824158 208.35104370]
[110.18083954 223.33932495]
[113.42340088 229.19969177]
[113.21096802 234.94593811]
[110.48890686 238.92900085]
[110.48890686 253.92900085]
[110.48890686 268.92901611]
[110.48890686 283.92901611]
[110.48890686 298.92901611]
[110.48890686 313.92901611]
[110.48890686 328.92901611]
[110.48890686 343.92901611]
[110.48890686 358.92901611]
[110.48890686 373.92901611]
[110.48890686 388.92901611]
[125.23451996 391.95419312]
[139.06919861 397.88601685]
[151.42640686 406.48162842]
[161.80012512 417.38900757]
[169.76556396 430.16149902]
[174.99653625 444.27609253]
[177.27885437 459.15478516]
[176.51902771 474.18835449]
[172.74819946 488.76110840]
[166.12077332 502.27636719]
[156.90814209 514.18066406]
[145.48753357 523.98651123]
[132.32664490 531.29241943]
[117.96439362 535.79913330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 131]
[27 130]
[28 129]
[29 128]
[30 127]
[33 126]
[34 125]
[36 123]
[38 122]
[39 121]
[40 120]
[43 117]
[44 116]
[45 115]
[50 109]
[51 108]
[52 107]
[53 106]
[69 91]
[70 90]
[71 89]
[73 87]
[74 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
