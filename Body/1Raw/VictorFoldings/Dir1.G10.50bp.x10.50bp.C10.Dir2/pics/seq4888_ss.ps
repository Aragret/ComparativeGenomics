%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCAAUACGGGGGGGGGGUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACxxxxxxxxxxAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACCCCCCCCCCCUAACCAACAC\
) } def
/len { sequence length } bind def

/coor [
[83.81815338 385.52569580]
[70.59795380 378.25320435]
[59.71115112 367.80621338]
[51.90002060 354.89697266]
[47.69713974 340.40563965]
[47.38906860 325.32031250]
[50.99680710 310.66949463]
[58.27437973 297.45208740]
[68.72558594 286.56933594]
[81.63784790 278.76318359]
[96.13079071 274.56588745]
[95.81873322 259.56915283]
[95.50667572 244.57238770]
[95.19461823 229.57563782]
[94.88256073 214.57888794]
[94.57050323 199.58213806]
[94.25845337 184.58537292]
[93.94639587 169.58862305]
[93.63433838 154.59187317]
[93.32228088 139.59512329]
[93.01022339 124.59836578]
[92.69816589 109.60160828]
[92.07418823 94.61459351]
[91.13856506 79.64379883]
[76.13368225 79.64704132]
[61.15762329 78.71742249]
[46.26832581 76.85854340]
[31.52340126 74.07759857]
[16.97988892 70.38533783]
[2.69405723 65.79605865]
[-11.27882481 60.32750320]
[-24.88469887 54.00083542]
[-38.07092667 46.84053421]
[-50.78649139 38.87429428]
[-62.98219681 30.13294220]
[-74.61086273 20.65029526]
[-85.62750244 10.46303749]
[-95.98948669 -0.38941595]
[-105.65673828 -11.86507893]
[-114.59184265 -23.91955566]
[-122.76023865 -36.50620651]
[-130.13032532 -49.57633972]
[-136.67358398 -63.07938385]
[-142.36471558 -76.96310425]
[-147.18167114 -91.17378235]
[-151.10585022 -105.65644073]
[-154.12203979 -120.35504913]
[-156.21859741 -135.21273804]
[-157.38739014 -150.17202759]
[-157.62390137 -165.17504883]
[-156.92723083 -180.16375732]
[-155.30006409 -195.08013916]
[-152.74868774 -209.86653137]
[-149.28297424 -224.46568298]
[-144.91635132 -238.82113647]
[-139.66567993 -252.87734985]
[-133.55131531 -266.57992554]
[-126.59687805 -279.87588501]
[-118.82929230 -292.71377563]
[-110.27859497 -305.04391479]
[-100.97788239 -316.81857300]
[-90.96313477 -327.99227905]
[-80.27308655 -338.52172852]
[-68.94910431 -348.36621094]
[-57.03499603 -357.48764038]
[-44.57685852 -365.85073853]
[-31.62288857 -373.42312622]
[-18.22320175 -380.17553711]
[-4.42963934 -386.08181763]
[9.70443249 -391.11914062]
[24.12433243 -395.26797485]
[38.77427292 -398.51232910]
[53.59757233 -400.83963013]
[68.53688812 -402.24084473]
[83.53441620 -402.71057129]
[98.53213501 -402.24700928]
[113.47202301 -400.85195923]
[128.29627991 -398.53076172]
[142.94755554 -395.29244995]
[157.36915588 -391.14953613]
[171.50531006 -386.11801147]
[185.30130005 -380.21740723]
[198.70376587 -373.47055054]
[211.66084290 -365.90347290]
[224.12242126 -357.54550171]
[236.04028320 -348.42898560]
[247.36831665 -338.58914185]
[258.06271362 -328.06408691]
[268.08206177 -316.89453125]
[277.38760376 -305.12368774]
[285.94338989 -292.79705811]
[293.71624756 -279.96237183]
[300.67614746 -266.66931152]
[306.79617310 -252.96922302]
[312.05261230 -238.91517639]
[316.42514038 -224.56152344]
[319.89685059 -209.96379089]
[322.45431519 -195.17846680]
[324.08764648 -180.26274109]
[324.79046631 -165.27432251]
[324.56015015 -150.27120972]
[323.39749146 -135.31144714]
[321.30706787 -120.45288849]
[318.29690552 -105.75303650]
[314.37872314 -91.26876831]
[309.56759644 -77.05610657]
[303.88220215 -63.17004776]
[297.34448242 -49.66431046]
[289.97976685 -36.59114456]
[281.81655884 -24.00113297]
[272.88641357 -11.94298077]
[263.22390747 -0.46333921]
[252.86637878 10.39337826]
[241.85392761 20.58516884]
[230.22917175 30.07260323]
[218.03706360 38.81897354]
[205.32476807 46.79044342]
[192.14149475 53.95617294]
[178.53822327 60.28844070]
[164.56759644 65.76274109]
[150.28366089 70.35791016]
[135.74166870 74.05615234]
[120.99788666 76.84317017]
[106.10935211 78.70817566]
[107.04498291 93.67896271]
[110.13608551 98.00306702]
[110.54741669 103.75767517]
[107.69492340 109.28955078]
[108.00698090 124.28630829]
[108.31903839 139.28306580]
[108.63108826 154.27981567]
[108.94314575 169.27656555]
[109.25520325 184.27331543]
[109.56726074 199.27008057]
[109.87931824 214.26683044]
[110.19137573 229.26358032]
[110.50342560 244.26033020]
[110.81548309 259.25708008]
[111.12754059 274.25384521]
[125.78253174 277.84460449]
[139.00834656 285.10687256]
[149.90321350 295.54547119]
[157.72430420 308.44866943]
[161.93838501 322.93673706]
[162.25810242 338.02185059]
[158.66166687 352.67544556]
[151.39430237 365.89843750]
[140.95150757 376.78927612]
[128.04527283 384.60540771]
[113.55558777 388.81387329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 125]
[24 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
