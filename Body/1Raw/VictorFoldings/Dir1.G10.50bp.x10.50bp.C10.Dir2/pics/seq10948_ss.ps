%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUCCAAAGGGGGGGGGGCUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCCCCCCCCCCCUACUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[90.44970703 378.13729858]
[76.60376740 372.12127686]
[64.89510345 362.59185791]
[56.19258118 350.25619507]
[51.14197922 336.02966309]
[50.11808777 320.96798706]
[53.19688797 306.18881226]
[60.14990997 292.78890991]
[70.46119690 281.76257324]
[83.36557770 273.92807007]
[97.90546417 269.86672974]
[97.90546417 254.86674500]
[97.90546417 239.86674500]
[97.90546417 224.86674500]
[97.90546417 209.86674500]
[97.90546417 194.86674500]
[97.90546417 179.86674500]
[97.90546417 164.86674500]
[97.90546417 149.86674500]
[97.90546417 134.86674500]
[77.23234558 121.25321960]
[72.63890076 99.75982666]
[83.04924774 83.61054230]
[76.14225006 70.29538727]
[69.23524475 56.98023605]
[62.32825089 43.66507721]
[55.04951859 56.78072357]
[40.29392624 59.47747421]
[28.84661484 49.78422546]
[29.07464218 34.78596115]
[40.81134033 25.44519234]
[55.47760773 28.58887100]
[49.99057770 14.62848091]
[44.50354385 0.66809106]
[39.01651382 -13.29229927]
[32.92606735 -20.18855286]
[33.56387329 -27.60062790]
[28.36845589 -41.67214584]
[23.17304039 -55.74366760]
[17.97762489 -69.81518555]
[12.63611317 -83.83190155]
[7.14908123 -97.79228973]
[-7.50863552 -108.88874054]
[-4.30377388 -126.11455536]
[-10.08004665 -139.95777893]
[-18.20158958 -152.56890869]
[-28.41506767 -163.55456543]
[-41.29384613 -164.81590271]
[-49.57533646 -174.23056030]
[-49.20701599 -186.36199951]
[-59.18974304 -197.55776978]
[-69.17247009 -208.75352478]
[-79.27111816 -219.84484863]
[-89.48459625 -230.83050537]
[-99.69808197 -241.81617737]
[-115.52388000 -246.11454773]
[-119.45211029 -262.03625488]
[-107.44174194 -273.20242310]
[-91.84801483 -268.12625122]
[-88.71241760 -252.02964783]
[-78.49893188 -241.04399109]
[-68.28545380 -230.05831909]
[-61.38299561 -227.28312683]
[-57.97670364 -218.73625183]
[-47.99397659 -207.54049683]
[-38.01125336 -196.34472656]
[-21.09399033 -191.78334045]
[-17.42940331 -173.76805115]
[-7.21592379 -162.78237915]
[-10.04339790 -177.51348877]
[-8.02512074 -192.37709045]
[-1.37187946 -205.82083130]
[9.22146511 -216.44067383]
[22.64855194 -223.12748718]
[37.50706100 -225.18287659]
[52.24518204 -222.39221191]
[65.32366943 -215.04693604]
[75.37662506 -203.91418457]
[81.35411072 -190.15666199]
[82.63184357 -175.21118164]
[79.07638550 -160.63864136]
[71.05906677 -147.96099854]
[59.41720200 -138.50230408]
[45.36666870 -133.25039673]
[30.37488937 -132.75381470]
[16.00760269 -137.06437683]
[3.76317120 -145.73405457]
[9.53944397 -131.89082336]
[20.63661194 -126.97552490]
[25.54287910 -115.43656921]
[21.10947037 -103.27931976]
[26.59650230 -89.31893158]
[32.00539780 -84.21114349]
[32.04914474 -75.01060486]
[37.24456024 -60.93908310]
[42.43997574 -46.86756134]
[47.63539124 -32.79604340]
[52.97690582 -18.77933121]
[58.46393585 -4.81894064]
[63.95096588 9.14144897]
[69.43799591 23.10183907]
[75.64340210 36.75807953]
[82.55040741 50.07323456]
[89.45740509 63.38839340]
[96.36440277 76.70354462]
[118.70230865 77.50508881]
[134.91511536 98.99442291]
[149.90782166 99.46246338]
[164.90051270 99.93050385]
[179.89320374 100.39855194]
[194.88591003 100.86659241]
[207.51596069 90.97409821]
[223.09100342 94.82083893]
[229.66320801 109.45592499]
[222.19093323 123.65256500]
[206.40626526 126.52031708]
[194.41786194 115.85928345]
[179.42517090 115.39124298]
[164.43246460 114.92320251]
[149.43977356 114.45516205]
[134.44708252 113.98712158]
[129.06167603 119.20702362]
[141.99461365 126.80564880]
[156.29649353 131.32850647]
[162.66232300 144.91070557]
[156.98818970 158.79609680]
[142.93208313 164.03306580]
[129.55567932 157.24545288]
[125.48224640 142.81057739]
[118.29086304 129.64683533]
[112.90546417 134.86674500]
[112.90546417 149.86674500]
[112.90546417 164.86674500]
[112.90546417 179.86674500]
[112.90546417 194.86674500]
[112.90546417 209.86674500]
[112.90546417 224.86674500]
[112.90546417 239.86674500]
[112.90546417 254.86674500]
[112.90546417 269.86672974]
[127.44535065 273.92807007]
[140.34973145 281.76257324]
[150.66101074 292.78890991]
[157.61402893 306.18881226]
[160.69284058 320.96798706]
[159.66894531 336.02966309]
[154.61834717 350.25619507]
[145.91581726 362.59185791]
[134.20715332 372.12127686]
[120.36121368 378.13729858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 105]
[24 104]
[25 103]
[26 102]
[32 101]
[33 100]
[34 99]
[35 98]
[37 97]
[38 96]
[39 95]
[40 94]
[41 92]
[42 91]
[44 88]
[45 87]
[46 69]
[47 68]
[50 66]
[51 65]
[52 64]
[53 62]
[54 61]
[55 60]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
