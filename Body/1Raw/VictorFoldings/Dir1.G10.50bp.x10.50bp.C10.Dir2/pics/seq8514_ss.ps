%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCAUGGCCGGGGGGGGGGAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAxxxxxxxxxxUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAACCCCCCCCCCUAGCCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[85.27723694 584.27490234]
[71.25528717 578.72186279]
[59.05533218 569.85552979]
[49.44426346 558.23321533]
[43.02623749 544.58551025]
[40.20470047 529.77032471]
[41.15701675 514.71899414]
[45.82332230 500.37756348]
[53.91028595 487.64761353]
[64.90956116 477.32931519]
[78.12972260 470.07135010]
[92.73973083 466.32992554]
[92.73973083 451.32992554]
[92.73973083 436.32992554]
[92.73973083 421.32992554]
[92.73973083 406.32992554]
[92.73973083 391.32992554]
[92.73973083 376.32992554]
[92.73973083 361.32992554]
[92.73973083 346.32992554]
[92.73973083 331.32992554]
[78.50299072 326.76086426]
[66.35910797 318.00323486]
[57.50472260 305.90447998]
[52.81713486 291.64202881]
[52.76736450 276.60870361]
[57.37287140 262.27679443]
[66.19460297 250.05363464]
[78.37882996 241.14369202]
[92.73973083 236.42967224]
[92.73973083 221.42967224]
[92.73973083 206.42967224]
[92.73973083 191.42967224]
[92.73973083 176.42967224]
[85.00243378 163.70240784]
[92.73973083 149.90223694]
[92.73973083 134.90223694]
[92.73973083 119.90222931]
[92.73973083 104.90222931]
[90.71220398 102.53531647]
[89.52458191 99.36089325]
[89.48390198 95.69757080]
[90.77175140 91.97507477]
[93.40612793 88.68426514]
[94.63673401 73.73483276]
[95.86734772 58.78539658]
[97.09796143 43.83596039]
[95.02900696 39.85863876]
[94.43336487 35.83760071]
[95.13730621 32.25274277]
[96.82595062 29.47466660]
[99.09264374 27.72733879]
[101.54557037 12.92925930]
[99.85639191 3.88810420]
[104.20377350 -2.14617181]
[106.96001434 -16.89076805]
[109.71626282 -31.63536453]
[112.47250366 -46.37996292]
[115.22874451 -61.12455750]
[100.98715210 -65.91237640]
[87.55052948 -72.63571167]
[75.18041992 -81.16370392]
[64.11762238 -91.33033752]
[54.57746124 -102.93772888]
[46.74564743 -115.75993347]
[40.77463150 -129.54734802]
[36.78063583 -144.03163147]
[34.84140778 -158.93080139]
[34.99469376 -173.95487976]
[37.23751068 -188.81138611]
[41.52620316 -203.21115112]
[47.77728653 -216.87387085]
[55.86908722 -229.53361511]
[65.64408875 -240.94393921]
[76.91202545 -250.88273621]
[89.45355225 -259.15655518]
[103.02455902 -265.60433960]
[117.36087036 -270.10058594]
[132.18344116 -272.55776978]
[147.20372009 -272.92807007]
[162.12936401 -271.20425415]
[176.66981506 -267.41989136]
[190.54205322 -261.64865112]
[203.47604370 -254.00288391]
[215.22003174 -244.63137817]
[225.54539490 -233.71658325]
[234.25119019 -221.47094727]
[241.16790771 -208.13284302]
[246.16094971 -193.96189880]
[249.13310242 -179.23394775]
[250.02651978 -164.23568726]
[248.82380676 -149.25904846]
[245.54838562 -134.59556580]
[240.26399231 -120.53067017]
[233.07351685 -107.33812714]
[224.11689758 -95.27474213]
[213.56849670 -84.57533264]
[201.63363647 -75.44816589]
[188.54463196 -68.07089996]
[174.55625916 -62.58713913]
[159.94081116 -59.10362625]
[144.98278809 -57.68816757]
[129.97334290 -58.36831665]
[127.21710205 -43.62371826]
[124.46085358 -28.87912178]
[121.70461273 -14.13452530]
[118.94837189 0.61007094]
[116.34365082 15.38218689]
[113.89071655 30.18026543]
[112.04739380 45.06657410]
[110.81678009 60.01601028]
[109.58617401 74.96544647]
[108.35556030 89.91487885]
[107.73973083 104.90222931]
[107.73973083 119.90222931]
[107.73973083 134.90223694]
[107.73973083 149.90223694]
[115.47703552 163.70240784]
[107.73973083 176.42967224]
[107.73973083 191.42967224]
[107.73973083 206.42967224]
[107.73973083 221.42967224]
[107.73973083 236.42967224]
[122.10063934 241.14369202]
[134.28486633 250.05363464]
[143.10659790 262.27679443]
[147.71209717 276.60870361]
[147.66233826 291.64202881]
[142.97474670 305.90447998]
[134.12036133 318.00323486]
[121.97647095 326.76086426]
[107.73973083 331.32992554]
[107.73973083 346.32992554]
[107.73973083 361.32992554]
[107.73973083 376.32992554]
[107.73973083 391.32992554]
[107.73973083 406.32992554]
[107.73973083 421.32992554]
[107.73973083 436.32992554]
[107.73973083 451.32992554]
[107.73973083 466.32992554]
[122.34974670 470.07135010]
[135.56990051 477.32931519]
[146.56918335 487.64761353]
[154.65614319 500.37756348]
[159.32244873 514.71899414]
[160.27476501 529.77032471]
[157.45323181 544.58551025]
[151.03520203 558.23321533]
[141.42413330 569.85552979]
[129.22418213 578.72186279]
[115.20223236 584.27490234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[30 123]
[31 122]
[32 121]
[33 120]
[34 119]
[36 117]
[37 116]
[38 115]
[39 114]
[44 113]
[45 112]
[46 111]
[47 110]
[52 109]
[53 108]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
