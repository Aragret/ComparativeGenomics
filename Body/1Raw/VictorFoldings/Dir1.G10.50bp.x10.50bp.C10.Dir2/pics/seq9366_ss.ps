%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUUAUUGGGGGGGGGGACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUAxxxxxxxxxxCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGCCCCCCCCCCAAUAAUUCUU\
) } def
/len { sequence length } bind def

/coor [
[104.69503021 371.99261475]
[90.84909058 365.97659302]
[79.14042664 356.44717407]
[70.43790436 344.11151123]
[65.38729858 329.88497925]
[64.36341095 314.82330322]
[67.44220734 300.04412842]
[74.39523315 286.64419556]
[84.70651245 275.61785889]
[97.61089325 267.78335571]
[112.15077972 263.72204590]
[112.15077972 248.72204590]
[112.15077972 233.72204590]
[112.15077972 218.72204590]
[112.15077972 203.72204590]
[112.15077972 188.72204590]
[112.15077972 173.72204590]
[112.15077972 158.72204590]
[112.15077972 143.72204590]
[112.15077972 128.72204590]
[106.50128174 123.78919220]
[100.60983276 137.58378601]
[85.66985321 136.24325562]
[82.32823944 121.62020874]
[95.20227814 113.92346954]
[89.55277252 108.99060822]
[74.68972778 111.01293945]
[59.82667923 113.03527069]
[44.96363068 115.05760956]
[39.22193909 129.30290222]
[27.11695480 138.75621033]
[11.90485764 140.87461853]
[-2.32237387 135.08830261]
[-11.73768616 122.95375061]
[-13.80840683 107.73508453]
[-7.97752380 93.52606201]
[4.18648577 84.14883423]
[19.41156387 82.12582397]
[33.60224152 88.00122070]
[42.94129562 100.19456482]
[57.80434418 98.17222595]
[72.66738892 96.14989471]
[87.53044128 94.12755585]
[99.79280853 85.48844147]
[106.69980621 72.17328644]
[113.18797302 58.64909744]
[119.25098419 44.92904282]
[125.31399536 31.20899010]
[131.37701416 17.48893547]
[120.26599884 -8.41862297]
[141.28002930 -32.59966660]
[137.57386780 -47.13460541]
[133.86770630 -61.66954041]
[130.16154480 -76.20447540]
[126.45538330 -90.73941040]
[111.41143799 -90.12843323]
[96.56927490 -92.65900421]
[82.57772827 -98.22050476]
[70.04844666 -106.56980896]
[59.52916336 -117.34192657]
[51.47973633 -130.06593323]
[46.25204468 -144.18559265]
[44.07462692 -159.08366394]
[45.04266739 -174.10887146]
[49.11384964 -188.60435486]
[56.11019516 -201.93644714]
[65.72586060 -213.52233887]
[77.54048157 -222.85551453]
[91.03758240 -229.52799988]
[105.62712097 -233.24809265]
[120.67131042 -233.85314941]
[135.51248169 -231.31674194]
[149.50183105 -225.74972534]
[162.02783203 -217.39549255]
[172.54287720 -206.61924744]
[180.58729553 -193.89207458]
[185.80943298 -179.77035522]
[187.98098755 -164.87142944]
[187.00703430 -149.84660339]
[182.93014526 -135.35272217]
[175.92855835 -122.02338409]
[166.30833435 -110.44128418]
[154.49005127 -101.11274719]
[140.99032593 -94.44557190]
[144.69648743 -79.91063690]
[148.40264893 -65.37570190]
[152.10881042 -50.84076309]
[155.81497192 -36.30582809]
[159.53092957 -50.83826447]
[158.88677979 -65.82442474]
[167.01495361 -78.43127441]
[180.93098450 -84.02986145]
[195.52520752 -80.56450653]
[205.43896484 -69.30761719]
[207.03213501 -54.39246368]
[199.71974182 -41.29555511]
[186.18707275 -34.82582474]
[175.10256958 -24.71970177]
[189.67527771 -28.27446365]
[204.24797058 -31.82922554]
[218.82067871 -35.38398743]
[221.94512939 -50.32388687]
[231.24914551 -62.42338943]
[244.88542175 -69.28013611]
[260.14645386 -69.53270721]
[274.00213623 -63.13095474]
[283.70144653 -51.34595871]
[287.31857300 -36.51763535]
[284.13531494 -21.59015656]
[274.78372192 -9.52738476]
[261.12054443 -2.72439384]
[245.85864258 -2.53192163]
[232.02827454 -8.98818398]
[222.37544250 -20.81128502]
[207.80273438 -17.25652313]
[193.23004150 -13.70176029]
[178.65733337 -10.14699841]
[178.30448914 2.20142817]
[173.42242432 12.92565536]
[165.17494202 20.52288818]
[155.15635681 24.11760330]
[145.09706116 23.55194855]
[139.03404236 37.27200317]
[132.97103882 50.99205780]
[126.90802002 64.71211243]
[127.87621307 68.16610718]
[127.17861176 72.26671600]
[124.52739716 76.20669556]
[120.01496124 79.08028412]
[113.10796356 92.39543915]
[127.15077972 128.72204590]
[127.15077972 143.72204590]
[127.15077972 158.72204590]
[127.15077972 173.72204590]
[127.15077972 188.72204590]
[127.15077972 203.72204590]
[127.15077972 218.72204590]
[127.15077972 233.72204590]
[127.15077972 248.72204590]
[127.15077972 263.72204590]
[141.69067383 267.78335571]
[154.59504700 275.61785889]
[164.90634155 286.64419556]
[171.85935974 300.04412842]
[174.93815613 314.82330322]
[173.91426086 329.88497925]
[168.86366272 344.11151123]
[160.16113281 356.44717407]
[148.45246887 365.97659302]
[134.60653687 371.99261475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 43]
[27 42]
[28 41]
[29 40]
[44 130]
[45 129]
[46 125]
[47 124]
[48 123]
[49 122]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
