%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCAUGGGGGGGGGGGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCxxxxxxxxxxUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCCCCCCCCCCCAACUCAUG\
) } def
/len { sequence length } bind def

/coor [
[91.77791595 357.38244629]
[78.90464020 349.47955322]
[68.78034210 338.26904297]
[62.22576141 324.65972900]
[59.77224350 309.75479126]
[61.61867905 294.76254272]
[67.61539459 280.89834595]
[77.27625275 269.28610229]
[89.81809998 260.86712646]
[104.22422028 256.32397461]
[103.91216278 241.32722473]
[103.60011292 226.33047485]
[103.28805542 211.33370972]
[102.97599792 196.33695984]
[102.66394043 181.34020996]
[102.35188293 166.34346008]
[102.03982544 151.34669495]
[101.72777557 136.34994507]
[101.41571808 121.35319519]
[88.72078705 113.36327362]
[75.06454468 119.56867981]
[64.74514771 134.78347778]
[47.37601089 132.47851562]
[33.85181808 138.96667480]
[27.19557762 153.56373596]
[11.59866905 157.32086182]
[-0.97429299 147.35591125]
[-0.87840748 131.31314087]
[11.81276989 121.49919891]
[27.36365509 125.44248962]
[40.88784409 118.95432281]
[45.21956253 107.61662292]
[56.48783493 102.11708069]
[68.85913849 105.91244507]
[82.51538086 99.70703125]
[80.33853912 84.86582947]
[65.47549438 82.84349060]
[54.02300644 93.49124146]
[38.40311050 94.23474121]
[25.99103928 84.72293091]
[22.64739609 69.44699860]
[29.95094681 55.61977386]
[44.45317841 49.77004623]
[59.30657959 54.65988159]
[67.49783325 67.98044586]
[82.36087799 70.00278473]
[95.13823700 62.14535522]
[100.03978729 47.96879959]
[99.89212036 38.76934052]
[105.19358063 33.55012894]
[110.38899231 19.47861099]
[115.58441162 5.40709162]
[120.77982330 -8.66442776]
[112.48486328 -18.11482620]
[109.04015350 -30.13290787]
[111.04607391 -42.39956665]
[118.05735016 -52.57509995]
[128.68003845 -58.74545288]
[140.84826660 -59.78217316]
[146.62454224 -73.62538910]
[152.40081787 -87.46860504]
[140.28602600 -78.62372589]
[126.37857819 -73.00386810]
[111.51998138 -70.94908905]
[96.60931396 -72.58371735]
[82.54879761 -77.80883789]
[70.18922424 -86.30830383]
[60.27843857 -97.56780243]
[53.41614532 -110.90605164]
[50.01756287 -125.51596832]
[50.28833771 -140.51351929]
[54.21208572 -154.99124146]
[61.55138397 -168.07308960]
[71.86214447 -178.96749878]
[84.52047729 -187.01527405]
[98.76043701 -191.72944641]
[113.72039795 -192.82476807]
[128.49513245 -190.23497009]
[142.19065857 -184.11676025]
[153.97827148 -174.84033203]
[163.14471436 -162.96697998]
[169.13536072 -149.21517944]
[171.58769226 -134.41699219]
[170.35333252 -119.46787262]
[165.50785828 -105.27412415]
[177.00965881 -114.90264893]
[188.51145935 -124.53118134]
[200.01325989 -134.15969849]
[211.51507568 -143.78823853]
[212.89292908 -148.06175232]
[215.33999634 -151.31488037]
[218.39089966 -153.33328247]
[221.55873108 -154.08082581]
[224.39685059 -153.69053650]
[236.65922546 -162.32965088]
[239.11134338 -177.94255066]
[251.93424988 -187.18096924]
[267.52035522 -184.56393433]
[276.62268066 -171.64405823]
[273.84100342 -156.08650208]
[260.82562256 -147.12126160]
[245.29833984 -150.06727600]
[233.03598022 -141.42816162]
[221.14360046 -132.28642273]
[209.64178467 -122.65789795]
[198.13998413 -113.02937317]
[186.63818359 -103.40084839]
[175.13638306 -93.77232361]
[166.24403381 -81.69233704]
[160.46775818 -67.84911346]
[154.69148254 -54.00589752]
[164.56823730 -39.42791367]
[163.75878906 -21.68121338]
[152.39768982 -7.82091665]
[134.85134888 -3.46901226]
[129.65592957 10.60250759]
[124.46051788 24.67402649]
[119.26509857 38.74554443]
[114.21633911 52.87034988]
[109.31478882 67.04690552]
[121.31449127 58.04650497]
[135.93032837 54.67347717]
[150.66062927 57.50515366]
[162.98411560 66.05686188]
[170.79147339 78.86486816]
[172.74638367 93.73693085]
[168.51425171 108.12751770]
[158.81944275 119.57350159]
[145.32133484 126.11576843]
[130.33030701 126.63452911]
[116.41246796 121.04113770]
[116.72452545 136.03788757]
[117.03658295 151.03463745]
[117.34864044 166.03140259]
[117.66069794 181.02815247]
[117.97274780 196.02490234]
[118.28480530 211.02165222]
[118.59686279 226.01841736]
[118.90892029 241.01516724]
[119.22097778 256.01193237]
[133.80361938 259.95187378]
[146.68482971 267.84182739]
[156.82037354 279.04214478]
[163.38862610 292.64489746]
[165.85711670 307.54733276]
[164.02574158 322.54144287]
[158.04296875 336.41165161]
[148.39376831 348.03359985]
[135.86038208 356.46514893]
[121.45883942 361.02279663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 35]
[21 34]
[23 31]
[24 30]
[36 46]
[37 45]
[47 120]
[48 119]
[50 118]
[51 117]
[52 116]
[53 115]
[59 111]
[60 110]
[61 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
