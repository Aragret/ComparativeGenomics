%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAGCCUACGGGGGGGGGGUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAxxxxxxxxxxAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCCCCCCCCCCCAUCUGCCUAC\
) } def
/len { sequence length } bind def

/coor [
[86.22416687 381.78927612]
[72.06356812 376.63427734]
[59.47382355 368.35205078]
[49.13388443 357.38928223]
[41.60137177 344.33715820]
[37.28250885 329.89956665]
[36.41019821 314.85510254]
[39.03149033 300.01510620]
[45.00501633 286.17987061]
[54.00863266 274.09552002]
[65.55679321 264.41375732]
[79.02670288 257.65667725]
[93.69197083 254.18869019]
[93.69197083 239.18869019]
[93.69197083 224.18869019]
[93.69197083 209.18869019]
[93.69197083 194.18869019]
[93.69197083 179.18869019]
[93.69197083 164.18869019]
[93.69197083 149.18869019]
[93.69197083 134.18869019]
[93.69197083 119.18869781]
[86.50058746 132.35243225]
[83.19508362 146.98368835]
[73.68779755 158.58590698]
[59.99161911 164.70266724]
[45.00630951 164.03892517]
[31.90457153 156.73519897]
[23.46030998 144.33782959]
[21.46134758 129.47163391]
[26.33090782 115.28404999]
[37.03800201 104.77890015]
[51.31572342 100.18034363]
[66.14334106 102.46286011]
[81.02623749 100.59220886]
[67.06842804 95.09861755]
[53.11061859 89.60503387]
[39.15280533 84.11144257]
[24.21685791 94.30496216]
[6.30660105 93.54458618]
[-7.46898365 82.31948853]
[-11.75417709 65.23530579]
[-25.92315292 60.31187439]
[-40.09212875 55.38844681]
[-55.09983826 61.05838013]
[-68.81574249 52.73650360]
[-70.71816254 36.80664444]
[-59.34773254 25.48883247]
[-43.42687225 27.46512032]
[-35.16870117 41.21947098]
[-20.99972534 46.14289856]
[-6.83074951 51.06632614]
[2.04875135 42.69168472]
[13.72239685 38.88657379]
[25.97511292 40.43801880]
[36.45409012 47.11040115]
[43.12057495 57.67884064]
[44.64639664 70.15363312]
[58.60420609 75.64721680]
[72.56201935 81.14080811]
[86.51982880 86.63439941]
[74.33942413 77.88010406]
[69.18254852 63.79441071]
[72.83128357 49.24495316]
[84.02472687 39.25962067]
[98.89472198 37.28906631]
[112.30261993 44.01426315]
[119.61502075 57.11116409]
[118.30495453 72.05384827]
[108.82485199 83.67871857]
[120.87013245 74.73941803]
[114.59178925 60.55623245]
[111.61361694 45.34127045]
[112.08065033 29.85156631]
[115.96659851 14.85713387]
[123.07527161 1.10268140]
[133.05052185 -10.72937107]
[145.39402771 -20.05275154]
[159.49028015 -26.40638733]
[174.63714600 -29.47720337]
[190.08099365 -29.11554337]
[205.05403137 -25.34247208]
[218.81262207 -18.34856224]
[230.67410278 -8.48427963]
[242.53573608 -17.66586876]
[254.39736938 -26.84745789]
[266.25900269 -36.02904892]
[260.02468872 -49.74874878]
[257.12301636 -64.53647614]
[257.71044922 -79.59475708]
[261.75527954 -94.11150360]
[269.03942871 -107.30384827]
[279.17001343 -118.46035767]
[291.60076904 -126.97936249]
[305.66125488 -132.40144348]
[320.59326172 -134.43420410]
[335.59149170 -132.96800232]
[349.84713745 -128.08193970]
[362.59136963 -120.03948212]
[373.13693237 -109.27436829]
[380.91513062 -96.36714172]
[385.50646973 -82.01387024]
[386.66336060 -66.98860931]
[384.32339478 -52.10166168]
[378.61279297 -38.15584946]
[369.83947754 -25.90325928]
[358.47662354 -16.00465393]
[345.13702393 -8.99385452]
[330.54000854 -5.24894524]
[315.47283936 -4.97188377]
[300.74801636 -8.17761135]
[287.15966797 -14.69324780]
[275.44058228 -24.16741180]
[263.57894897 -14.98582268]
[251.71733093 -5.80423307]
[239.85568237 3.37735677]
[246.13418579 16.47905350]
[249.53970337 30.60891724]
[249.91963196 45.14449692]
[247.25466919 59.44492722]
[241.65982056 72.87917328]
[233.37947083 84.85388947]
[222.77661133 94.83962250]
[210.31703186 102.39419556]
[196.54882812 107.18234253]
[182.07826233 108.99052429]
[167.54306030 107.73648834]
[153.58439636 103.47300720]
[140.81846619 96.38565063]
[129.80943298 86.78469849]
[117.76415253 95.72400665]
[117.67068481 108.63701630]
[108.69197083 119.18869781]
[108.69197083 134.18869019]
[108.69197083 149.18869019]
[108.69197083 164.18869019]
[108.69197083 179.18869019]
[108.69197083 194.18869019]
[108.69197083 209.18869019]
[108.69197083 224.18869019]
[108.69197083 239.18869019]
[108.69197083 254.18869019]
[123.35723114 257.65667725]
[136.82714844 264.41375732]
[148.37530518 274.09552002]
[157.37892151 286.17987061]
[163.35244751 300.01510620]
[165.97373962 314.85510254]
[165.10142517 329.89956665]
[160.78256226 344.33715820]
[153.25004578 357.38928223]
[142.91011047 368.35205078]
[130.32037354 376.63427734]
[116.15976715 381.78927612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[35 61]
[36 60]
[37 59]
[38 58]
[42 52]
[43 51]
[44 50]
[70 131]
[71 130]
[84 116]
[85 115]
[86 114]
[87 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
