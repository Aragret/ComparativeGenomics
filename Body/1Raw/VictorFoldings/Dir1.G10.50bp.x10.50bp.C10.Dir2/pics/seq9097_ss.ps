%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUCAAUCGGGGGGGGGGACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAxxxxxxxxxxGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUCCCCCCCCCCAGUCUCAAUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 396.14932251]
[71.19830322 390.13330078]
[59.48964310 380.60388184]
[50.78712082 368.26821899]
[45.73651886 354.04168701]
[44.71262741 338.98001099]
[47.79142761 324.20083618]
[54.74444962 310.80093384]
[65.05573273 299.77459717]
[77.96011353 291.94009399]
[92.50000000 287.87875366]
[92.50000000 272.87875366]
[92.50000000 257.87875366]
[92.50000000 242.87876892]
[92.50000000 227.87876892]
[92.50000000 212.87876892]
[92.50000000 197.87876892]
[92.50000000 182.87876892]
[92.50000000 167.87876892]
[92.50000000 152.87876892]
[92.50000000 137.87876892]
[77.80181122 131.59574890]
[66.90760040 119.89833832]
[61.68424988 104.79106140]
[63.02686310 88.86276245]
[70.70536041 74.84299469]
[61.44040680 63.04635620]
[52.05324554 51.34673309]
[42.54488754 39.74539185]
[30.01651192 48.01847076]
[16.70388222 54.95950317]
[2.74811769 60.49490356]
[-11.70284081 64.56600189]
[-26.49580574 67.12963867]
[-41.47396088 68.15863800]
[-56.47853470 67.64208984]
[-71.35046387 65.58547211]
[-85.93210602 62.01058578]
[-100.06887817 56.95532608]
[-113.61093140 50.47328186]
[-126.41470337 42.63316727]
[-138.34448242 33.51809311]
[-149.27378845 23.22467995]
[-159.08676147 11.86204815]
[-167.67939758 -0.44935486]
[-174.96060181 -13.57902050]
[-180.85319519 -27.38776588]
[-185.29469299 -41.72921371]
[-188.23803711 -56.45133209]
[-189.65200806 -71.39806366]
[-189.52162170 -86.41095734]
[-187.84826660 -101.33087158]
[-184.64968872 -115.99964905]
[-179.95976257 -130.26179504]
[-173.82824707 -143.96611023]
[-166.32009888 -156.96734619]
[-157.51493835 -169.12765503]
[-147.50608826 -180.31813049]
[-136.39965820 -190.42018127]
[-124.31337738 -199.32669067]
[-111.37536621 -206.94323730]
[-97.72277832 -213.18910217]
[-83.50034332 -217.99807739]
[-68.85881042 -221.31916809]
[-53.95340347 -223.11718750]
[-38.94212341 -223.37306213]
[-23.98409653 -222.08407593]
[-9.23788738 -219.26390076]
[5.14018488 -214.94244385]
[18.99770546 -209.16548157]
[32.18777466 -201.99429321]
[44.57057571 -193.50486755]
[56.01483917 -183.78721619]
[66.39925385 -172.94433594]
[75.61373138 -161.09117126]
[83.56060028 -148.35337830]
[90.15561676 -134.86598206]
[95.32887268 -120.77196503]
[99.02552032 -106.22071838]
[101.20638275 -91.36649323]
[101.84833527 -76.36676788]
[100.94458008 -61.38053131]
[98.50469208 -46.56665421]
[94.55453491 -32.08216858]
[89.13598633 -18.08062172]
[82.30648041 -4.71043491]
[74.13841248 7.88665867]
[64.71837616 19.57712364]
[54.14622879 30.23703384]
[63.65458679 41.83837509]
[70.37049866 45.03871155]
[73.23704529 53.78140640]
[82.50199890 65.57804871]
[101.58886719 59.51943970]
[122.12182617 63.81746292]
[138.61413574 78.27322388]
[152.84091187 73.51940918]
[167.06768799 68.76559448]
[181.29446411 64.01177979]
[195.52124023 59.25796127]
[202.72480774 53.53428650]
[210.09370422 54.55657959]
[224.41630554 50.09976196]
[238.73890686 45.64294815]
[252.06623840 35.16352081]
[265.82550049 45.06903076]
[260.11605835 61.03269196]
[243.19570923 59.96554565]
[228.87312317 64.42236328]
[214.55052185 68.87917328]
[200.27505493 73.48474121]
[186.04827881 78.23855591]
[171.82150269 82.99237061]
[157.59472656 87.74618530]
[143.36795044 92.50000000]
[143.36795044 107.50000000]
[157.59472656 112.25381470]
[171.82150269 117.00762939]
[186.04827881 121.76144409]
[202.98715210 121.04653168]
[208.36326599 137.12551880]
[194.40090942 146.74264526]
[181.29446411 135.98822021]
[167.06768799 131.23440552]
[152.84091187 126.48059082]
[138.61413574 121.72677612]
[132.00680542 128.54081726]
[124.32151031 133.57736206]
[116.00236511 136.70030212]
[107.50000000 137.87876892]
[107.50000000 152.87876892]
[107.50000000 167.87876892]
[107.50000000 182.87876892]
[107.50000000 197.87876892]
[107.50000000 212.87876892]
[107.50000000 227.87876892]
[107.50000000 242.87876892]
[107.50000000 257.87875366]
[107.50000000 272.87875366]
[107.50000000 287.87875366]
[122.03988647 291.94009399]
[134.94427490 299.77459717]
[145.25555420 310.80093384]
[152.20857239 324.20083618]
[155.28736877 338.98001099]
[154.26348877 354.04168701]
[149.21287537 368.26821899]
[140.51036072 380.60388184]
[128.80169678 390.13330078]
[114.95575714 396.14932251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 93]
[27 92]
[28 90]
[29 89]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[102 110]
[103 109]
[104 108]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
