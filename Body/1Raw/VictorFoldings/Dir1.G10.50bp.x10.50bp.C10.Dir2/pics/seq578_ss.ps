%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCACUCCGGGGGGGGGGCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACxxxxxxxxxxGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACCCCCCCCCCCUUCCACUCC\
) } def
/len { sequence length } bind def

/coor [
[2.65285921 263.01205444]
[-8.86823273 255.55419922]
[-19.82049561 247.28356934]
[-30.14670753 238.24339294]
[-39.79291153 228.48091125]
[-48.70870590 218.04711914]
[-56.84751129 206.99653625]
[-64.16680145 195.38691711]
[-70.62832642 183.27890015]
[-76.19833374 170.73574829]
[-80.84772491 157.82302856]
[-84.55219269 144.60816956]
[-99.26015472 147.55364990]
[-113.96811676 150.49913025]
[-125.98027039 160.79566956]
[-139.97909546 155.70820618]
[-154.68705750 158.65368652]
[-169.39501953 161.59918213]
[-184.10298157 164.54466248]
[-198.81094360 167.49014282]
[-199.33163452 182.55087280]
[-203.31213379 197.08538818]
[-210.53775024 210.30989075]
[-220.61883545 221.51115417]
[-233.01171875 230.08514404]
[-247.04806519 235.56947327]
[-261.97091675 237.66835022]
[-276.97549438 236.26861572]
[-291.25262451 231.44575500]
[-304.03237915 223.45982361]
[-314.62551880 212.74154663]
[-322.46081543 199.86889648]
[-327.11569214 185.53610229]
[-328.33914185 170.51612854]
[-326.06515503 155.61895752]
[-320.41638184 141.64797974]
[-311.69744873 129.35664368]
[-300.37857056 119.40779877]
[-287.07012939 112.33797455]
[-272.48986816 108.52843475]
[-257.42407227 108.18462372]
[-242.68519592 111.32508850]
[-229.06811523 117.78046417]
[-217.30717468 127.20262146]
[-208.03662109 139.08343506]
[-201.75642395 152.78218079]
[-187.04846191 149.83670044]
[-172.34049988 146.89122009]
[-157.63253784 143.94572449]
[-142.92457581 141.00024414]
[-131.96443176 130.91438293]
[-116.91359711 135.79116821]
[-102.20563507 132.84568787]
[-87.49767303 129.90020752]
[-89.29336548 114.74528503]
[-89.86612701 99.49509430]
[-89.21226501 84.24816895]
[-87.33599854 69.10301208]
[-84.24945831 54.15745544]
[-79.97257233 39.50806808]
[-74.53298187 25.24948883]
[-67.96582794 11.47383213]
[-60.31352997 -1.72990394]
[-51.62553024 -14.27641582]
[-41.95795822 -26.08464813]
[-31.37327194 -37.07831192]
[-19.93985176 -47.18638611]
[-7.73156214 -56.34356689]
[5.17272425 -64.49069214]
[18.68964005 -71.57513428]
[32.73186111 -77.55111694]
[47.20866394 -82.38002777]
[62.02652359 -86.03068542]
[77.08971405 -88.47949219]
[92.30091095 -89.71063232]
[107.56185150 -89.71615601]
[122.77393341 -88.49601746]
[137.83888245 -86.05810547]
[152.65939331 -82.41817474]
[167.13967896 -77.59973145]
[181.18621826 -71.63391113]
[194.70825195 -64.55924988]
[202.69816589 -77.25418091]
[210.68809509 -89.94911194]
[218.67800903 -102.64404297]
[213.72193909 -117.47547913]
[219.50691223 -132.00366211]
[233.30140686 -139.36883545]
[248.59210205 -136.09338379]
[258.15921021 -123.72387695]
[257.48541260 -108.10081482]
[246.88885498 -96.60093689]
[231.37294006 -94.65412140]
[223.38301086 -81.95919037]
[215.39309692 -69.26426697]
[207.40318298 -56.56933594]
[217.62313843 -49.04427719]
[227.31753540 -40.85327148]
[236.44306946 -32.03291321]
[244.95895386 -22.62260818]
[252.82713318 -12.66441059]
[260.01245117 -2.20281148]
[266.48281860 8.71544552]
[272.20932007 20.04157448]
[277.16635132 31.72496986]
[281.33178711 43.71342850]
[284.68701172 55.95338058]
[287.21704102 68.39014435]
[288.91052246 80.96813965]
[289.75994873 93.63117981]
[289.76150513 106.32266998]
[304.72174072 107.41397858]
[319.68197632 108.50529480]
[335.91903687 103.62733459]
[345.10122681 117.87948608]
[333.94793701 130.64822388]
[318.59066772 123.46553802]
[303.63043213 122.37422943]
[288.67019653 121.28292084]
[284.17401123 146.14471436]
[276.41668701 170.18943787]
[265.53555298 192.99131775]
[278.31289673 200.84873962]
[291.09027100 208.70616150]
[307.48916626 208.61990356]
[315.52859497 222.91323853]
[306.93826294 236.88243103]
[290.55517578 236.15715027]
[283.23281860 221.48352051]
[270.45547485 213.62609863]
[257.67813110 205.76867676]
[249.62583923 216.88246155]
[240.79177856 227.38554382]
[231.22209167 237.22303772]
[220.96678162 246.34356689]
[210.07942200 254.69946289]
[198.61691284 262.24703979]
[186.63912964 268.94692993]
[174.20866394 274.76403809]
[161.39047241 279.66806030]
[148.25151062 283.63330078]
[134.86044312 286.63909912]
[121.28723907 288.66970825]
[107.60280609 289.71450806]
[93.87864685 289.76809692]
[80.18647003 288.83013916]
[66.59781647 286.90557861]
[53.18369293 284.00442505]
[40.01417542 280.14190674]
[27.15808296 275.33810425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[82 96]
[83 95]
[84 94]
[85 93]
[111 119]
[112 118]
[113 117]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
