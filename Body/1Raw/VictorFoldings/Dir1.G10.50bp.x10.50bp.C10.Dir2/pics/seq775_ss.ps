%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAAACCCCGGGGGGGGGGAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUxxxxxxxxxxAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCCCCCCCCCCCAUCCAAACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.96671295 431.27774048]
[71.80611420 426.12274170]
[59.21636963 417.84054565]
[48.87643051 406.87774658]
[41.34391785 393.82562256]
[37.02505493 379.38803101]
[36.15274429 364.34356689]
[38.77403641 349.50357056]
[44.74756241 335.66833496]
[53.75118256 323.58398438]
[65.29933929 313.90222168]
[78.76925659 307.14514160]
[93.43451691 303.67715454]
[93.43451691 288.67715454]
[93.43451691 273.67715454]
[93.43451691 258.67715454]
[93.43451691 243.67716980]
[93.43451691 228.67716980]
[93.43451691 213.67716980]
[93.43451691 198.67716980]
[93.43451691 183.67716980]
[93.43451691 168.67716980]
[93.43451691 153.67716980]
[93.28250122 138.67793274]
[92.97850037 123.68102264]
[84.68379211 119.37797546]
[78.58119202 112.30149078]
[63.91959381 115.46971130]
[59.29926682 130.11717224]
[47.96337891 140.48023987]
[32.96122742 143.77131653]
[18.32832146 139.10508728]
[8.00083542 127.73677826]
[4.75681067 112.72438812]
[9.46887493 98.10617828]
[20.86950684 87.81437683]
[35.89199066 84.61742401]
[50.49535751 89.37528229]
[60.75137329 100.80812073]
[75.41297150 97.63990021]
[83.35189819 78.21299744]
[105.10297394 70.29604340]
[103.88820648 55.34531403]
[102.67343903 40.39458466]
[101.45866394 25.44385338]
[100.24389648 10.49312305]
[91.41441345 -2.63511896]
[98.09558105 -15.94718838]
[96.88081360 -30.89791870]
[95.66604614 -45.84864807]
[80.30855560 -48.02296066]
[65.82111359 -53.54372025]
[52.92291260 -62.13356400]
[42.25349808 -73.36286163]
[34.34109497 -86.67121124]
[29.57643890 -101.39537811]
[28.19347954 -116.80236816]
[30.25790787 -132.12590027]
[35.66403198 -146.60456848]
[44.14018631 -159.51957703]
[55.26238251 -170.23054504]
[68.47551727 -178.20716858]
[83.12108612 -183.05549622]
[81.60356140 -197.97853088]
[80.08602905 -212.90158081]
[78.56850433 -227.82461548]
[77.05097961 -242.74765015]
[62.40831757 -246.74224854]
[50.19977951 -255.75979614]
[42.07646942 -268.58071899]
[39.13699722 -283.47113037]
[41.77890778 -298.41717529]
[49.64490128 -311.39758301]
[61.67116547 -320.65679932]
[76.23124695 -324.94262695]
[91.35601807 -323.67544556]
[104.99997711 -317.02664185]
[115.31788635 -305.89535522]
[120.91433716 -291.78704834]
[121.03244781 -276.60977173]
[115.65625763 -262.41607666]
[105.51284790 -251.12554932]
[91.97402191 -244.26518250]
[93.49154663 -229.34213257]
[95.00907135 -214.41909790]
[96.52659607 -199.49606323]
[98.04412079 -184.57301331]
[112.48390198 -182.97090149]
[126.27652740 -178.38679504]
[138.81303406 -171.02041626]
[149.53933716 -161.19439697]
[157.98075867 -149.34013367]
[163.76303101 -135.97885132]
[166.62882996 -121.69870758]
[166.44931030 -107.12886810]
[163.22985840 -92.91180420]
[157.10993958 -79.67497253]
[148.35713196 -68.00310516]
[137.35531616 -58.41238022]
[124.58795166 -51.32761002]
[110.61677551 -47.06341934]
[111.83154297 -32.11268616]
[113.04631805 -17.16195679]
[121.78890991 -5.10309172]
[115.19462585 9.27835369]
[116.40940094 24.22908401]
[117.62416840 39.17981339]
[118.83893585 54.13054657]
[120.05370331 69.08127594]
[130.71391296 79.63399506]
[145.67619324 80.69718933]
[152.80360413 67.23911285]
[164.79270935 57.84864044]
[179.56634521 54.15272141]
[194.56486511 56.79170609]
[207.18969727 65.30836487]
[215.25350952 78.22714996]
[217.35919189 93.30978394]
[213.14193726 107.94312286]
[203.33239746 119.59185028]
[189.63014221 126.23775482]
[174.40916443 126.72938538]
[160.30659485 120.98156738]
[149.76577759 109.99015808]
[144.61299133 95.65946198]
[129.65071106 94.59626770]
[127.11210632 108.20369720]
[119.07235718 118.41704559]
[107.97541809 123.37701416]
[108.27942657 138.37393188]
[111.59808350 146.94876099]
[108.43451691 153.67716980]
[108.43451691 168.67716980]
[108.43451691 183.67716980]
[108.43451691 198.67716980]
[108.43451691 213.67716980]
[108.43451691 228.67716980]
[108.43451691 243.67716980]
[108.43451691 258.67715454]
[108.43451691 273.67715454]
[108.43451691 288.67715454]
[108.43451691 303.67715454]
[123.09977722 307.14514160]
[136.56968689 313.90222168]
[148.11784363 323.58398438]
[157.12145996 335.66833496]
[163.09498596 349.50357056]
[165.71627808 364.34356689]
[164.84397888 379.38803101]
[160.52511597 393.82562256]
[152.99259949 406.87774658]
[142.65266418 417.84054565]
[130.06291199 426.12274170]
[115.90231323 431.27774048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 130]
[25 129]
[27 40]
[28 39]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[48 103]
[49 102]
[50 101]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
