%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGAUACUGGGGGGGGGGGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAxxxxxxxxxxCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUCCCCCCCCCCGCCUGAUCCU\
) } def
/len { sequence length } bind def

/coor [
[133.27919006 482.47488403]
[119.43325043 476.45886230]
[107.72458649 466.92944336]
[99.02206421 454.59378052]
[93.97146606 440.36724854]
[92.94757080 425.30557251]
[96.02637482 410.52639771]
[102.97939301 397.12646484]
[113.29067993 386.10015869]
[126.19506073 378.26562500]
[140.73493958 374.20431519]
[140.73493958 359.20431519]
[140.73493958 344.20431519]
[140.73493958 329.20431519]
[140.73493958 314.20431519]
[140.73493958 299.20431519]
[140.73493958 284.20431519]
[140.73493958 269.20431519]
[140.73493958 254.20431519]
[140.73493958 239.20431519]
[140.57890320 224.20513916]
[140.26684570 209.20837402]
[139.95480347 194.21162415]
[116.61564636 173.40203857]
[126.15312195 147.21134949]
[120.37684631 133.36813354]
[114.60057068 119.52492523]
[97.63099670 124.32066345]
[81.82357788 116.41456604]
[75.45358276 99.88515472]
[61.79734039 93.67974091]
[48.14109802 87.47433472]
[34.48485565 81.26892853]
[20.82861519 75.06352234]
[7.17237377 68.85811615]
[-2.00060105 68.14511108]
[-6.70133495 62.37893677]
[-20.22552490 55.89076996]
[-25.55902290 56.30715561]
[-30.04626083 54.75246048]
[-33.06889343 51.89494705]
[-34.37162018 48.55273438]
[-47.46477509 41.23363113]
[-60.55792999 33.91452408]
[-73.34434509 42.32678604]
[-88.57666779 43.82178879]
[-102.75461578 38.05599213]
[-112.62020111 26.35433197]
[-115.90637970 11.40576744]
[-111.85802460 -3.35463190]
[-101.40541077 -14.53503513]
[-86.95046997 -19.56626701]
[-71.81484222 -17.29218674]
[-59.47659302 -8.23536205]
[-52.77094650 5.52301455]
[-53.23882294 20.82136917]
[-40.14567184 28.14047623]
[-27.05251503 35.45957947]
[-13.73736000 42.36658096]
[-0.21316990 48.85474396]
[13.37778091 55.20187378]
[27.03402138 61.40727997]
[40.69026184 67.61268616]
[54.34650421 73.81809235]
[68.00274658 80.02350616]
[81.65898895 86.22891235]
[94.67529297 78.77400208]
[96.23287964 63.85508728]
[97.79045868 48.93617630]
[84.04797363 42.57827759]
[73.11622620 32.10089111]
[66.18101501 18.64052200]
[63.99460983 3.65725255]
[66.79418182 -11.22364521]
[74.27605438 -24.38800240]
[85.62865448 -34.40784836]
[99.62052155 -40.19630432]
[114.73394012 -41.12548447]
[129.32951355 -37.09459305]
[141.82402039 -28.54087639]
[150.86213684 -16.39217567]
[155.46351624 -1.96629095]
[155.12898254 13.17196560]
[149.89486694 27.38051033]
[140.32890320 39.11810303]
[127.46875000 47.11154175]
[112.70937347 50.49375534]
[111.15178680 65.41266632]
[109.59420776 80.33158112]
[122.76279449 87.51409149]
[134.46241760 78.12693024]
[146.16203308 68.73976898]
[157.86166382 59.35260391]
[158.02413940 43.71586609]
[168.23890686 31.87557220]
[183.68286133 29.42234993]
[197.06384277 37.51453400]
[202.06375122 52.33124542]
[196.32179260 66.87648010]
[182.54914856 74.28243256]
[167.24882507 71.05223083]
[155.54919434 80.43939209]
[143.84957886 89.82655334]
[132.14994812 99.21371460]
[128.44378662 113.74864960]
[134.22006226 127.59186554]
[139.99633789 141.43508911]
[147.28540039 141.03135681]
[154.64718628 142.94322205]
[161.33767700 147.16656494]
[166.62638855 153.45680237]
[169.87405396 161.33839417]
[170.60534668 170.13902283]
[185.10095215 173.99618530]
[194.26528931 173.17961121]
[199.85636902 178.08731079]
[214.26858521 182.24519348]
[228.95124817 175.78001404]
[243.09297180 183.35572815]
[245.84541321 199.16090393]
[235.09713745 211.07116699]
[219.09330750 209.94996643]
[210.11068726 196.65740967]
[195.69847107 192.49952698]
[181.24378967 188.49177551]
[166.74818420 184.63461304]
[154.95155334 193.89956665]
[155.26361084 208.89631653]
[155.57566833 223.89308167]
[158.90052795 232.47195435]
[155.73493958 239.20431519]
[155.73493958 254.20431519]
[155.73493958 269.20431519]
[155.73493958 284.20431519]
[155.73493958 299.20431519]
[155.73493958 314.20431519]
[155.73493958 329.20431519]
[155.73493958 344.20431519]
[155.73493958 359.20431519]
[155.73493958 374.20431519]
[170.27482605 378.26562500]
[183.17921448 386.10015869]
[193.49049377 397.12646484]
[200.44351196 410.52639771]
[203.52232361 425.30557251]
[202.49842834 440.36724854]
[197.44783020 454.59378052]
[188.74530029 466.92944336]
[177.03663635 476.45886230]
[163.19070435 482.47488403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
[25 107]
[26 106]
[27 105]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[37 60]
[38 59]
[42 58]
[43 57]
[44 56]
[67 89]
[68 88]
[69 87]
[90 104]
[91 103]
[92 102]
[93 101]
[113 126]
[114 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
