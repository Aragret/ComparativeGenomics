%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCACCUCGGGGGGGGGGUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACxxxxxxxxxxGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGCCCCCCCCCCAAAAUCACCUC\
) } def
/len { sequence length } bind def

/coor [
[76.53759003 414.22851562]
[62.51564407 408.67550659]
[50.31568527 399.80917358]
[40.70461655 388.18688965]
[34.28659058 374.53918457]
[31.46505165 359.72399902]
[32.41736984 344.67260742]
[37.08367538 330.33117676]
[45.17063904 317.60122681]
[56.16991425 307.28295898]
[69.39007568 300.02499390]
[84.00008392 296.28353882]
[84.00008392 281.28353882]
[84.00008392 266.28353882]
[84.00008392 251.28355408]
[84.00008392 236.28355408]
[84.00008392 221.28355408]
[84.00008392 206.28355408]
[84.00008392 191.28355408]
[84.00008392 176.28355408]
[84.00008392 161.28355408]
[84.00008392 146.28355408]
[84.00008392 131.28355408]
[72.41104126 121.76020813]
[57.69551468 124.66767883]
[45.65679932 134.93315125]
[31.67116928 129.80953979]
[16.95564651 132.71701050]
[12.07604504 147.28015137]
[0.55799437 157.44036865]
[-14.50020885 160.46461487]
[-29.04798317 155.53939819]
[-39.17205048 143.98954773]
[-42.14908600 128.92195129]
[-37.17828369 114.38967896]
[-25.59676743 104.30186462]
[-10.51990032 101.37207794]
[3.99671125 106.38840485]
[14.04817295 118.00148773]
[28.76369667 115.09400940]
[39.74985886 105.03650665]
[54.78804398 109.95215607]
[69.50356293 107.04468536]
[69.70222473 93.07549286]
[75.93553162 80.68299103]
[86.87551880 72.31549072]
[100.27423096 69.58380890]
[97.21583557 54.89891434]
[94.15744019 40.21401596]
[91.09904480 25.52911949]
[88.04064941 10.84422207]
[84.98225403 -3.84067583]
[81.92385864 -18.52557373]
[66.90103149 -17.92180634]
[51.98373795 -19.79910088]
[37.57893372 -24.10624313]
[24.07959175 -30.72573090]
[11.85398388 -39.47698212]
[1.23563325 -50.12125015]
[-7.48578310 -62.36816025]
[-14.07233906 -75.88359833]
[-18.34434700 -90.29886627]
[-20.18526649 -105.22068787]
[-19.54487419 -120.24199677]
[-16.44063950 -134.95300293]
[-10.95724869 -148.95236206]
[-3.24429417 -161.85818481]
[6.48781061 -173.31837463]
[17.97356606 -183.02030945]
[30.89963150 -190.69927979]
[44.91337585 -196.14582825]
[59.63249588 -199.21134949]
[74.65544128 -199.81221008]
[89.57236481 -197.93205261]
[103.97634125 -193.62213135]
[117.47441101 -187.00004578]
[129.69833374 -178.24642944]
[140.31463623 -167.60012817]
[149.03369141 -155.35153198]
[155.61764526 -141.83482361]
[159.88687134 -127.41873932]
[161.72491455 -112.49655914]
[161.08163452 -97.47537231]
[157.97456360 -82.76496887]
[152.48847961 -68.76665497]
[144.77302551 -55.86232376]
[135.03871155 -44.40400696]
[123.55109406 -34.70429611]
[110.62355042 -27.02781105]
[96.60875702 -21.58396912]
[99.66715240 -6.89907122]
[102.72554779 7.78582621]
[105.78394318 22.47072411]
[108.84233856 37.15562057]
[111.90073395 51.84051895]
[114.95912933 66.52541351]
[127.11246490 75.31726074]
[142.01690674 73.62686157]
[156.92135620 71.93646240]
[171.82580566 70.24606323]
[186.73025513 68.55567169]
[195.39367676 58.94584274]
[207.88464355 57.87494278]
[217.42518616 65.37430573]
[232.36119080 63.99028015]
[247.29721069 62.60625458]
[262.18350220 60.76293182]
[277.00601196 58.46205521]
[291.82849121 56.16117859]
[306.55270386 47.75680542]
[318.70471191 59.57904053]
[310.70849609 74.52885437]
[294.12936401 70.98366547]
[279.30688477 73.28453827]
[264.48440552 75.58541107]
[262.10012817 78.26168823]
[258.27520752 79.88636017]
[253.53230286 79.78332520]
[248.68122864 77.54226685]
[233.74522400 78.92629242]
[218.80920410 80.31031799]
[205.09161377 91.21316528]
[188.42065430 83.46011353]
[173.51620483 85.15051270]
[158.61175537 86.84091187]
[143.70730591 88.53131104]
[128.80285645 90.22171021]
[129.19021606 109.54591370]
[117.79737854 125.38885498]
[99.00008392 131.28355408]
[99.00008392 146.28355408]
[99.00008392 161.28355408]
[99.00008392 176.28355408]
[99.00008392 191.28355408]
[99.00008392 206.28355408]
[99.00008392 221.28355408]
[99.00008392 236.28355408]
[99.00008392 251.28355408]
[99.00008392 266.28353882]
[99.00008392 281.28353882]
[99.00008392 296.28353882]
[113.61009979 300.02499390]
[126.83026123 307.28295898]
[137.82952881 317.60122681]
[145.91650391 330.33117676]
[150.58280945 344.67260742]
[151.53512573 359.72399902]
[148.71357727 374.53918457]
[142.29556274 388.18688965]
[132.68449402 399.80917358]
[120.48452759 408.67550659]
[106.46258545 414.22851562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 43]
[25 42]
[27 40]
[28 39]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[104 121]
[105 120]
[106 119]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
