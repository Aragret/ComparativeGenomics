%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUAAAUAGGGGGGGGGGCUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCxxxxxxxxxxAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACCCCCCCCCCCAACUUAAUA\
) } def
/len { sequence length } bind def

/coor [
[86.56092072 370.48574829]
[72.71498108 364.46972656]
[61.00631714 354.94030762]
[52.30379486 342.60464478]
[47.25319290 328.37811279]
[46.22930145 313.31643677]
[49.30809784 298.53726196]
[56.26111984 285.13735962]
[66.57240295 274.11102295]
[79.47678375 266.27651978]
[94.01667023 262.21517944]
[94.01667023 247.21519470]
[94.01667023 232.21519470]
[94.01667023 217.21519470]
[94.01667023 202.21519470]
[94.01667023 187.21519470]
[94.01667023 172.21519470]
[94.01667023 157.21519470]
[94.01667023 142.21519470]
[94.01667023 127.21519470]
[80.77408600 120.17005920]
[74.06849670 135.13558960]
[57.72974396 136.54174805]
[48.56574249 122.94199371]
[56.00363159 108.32659912]
[72.39194489 107.73062134]
[75.15740204 93.37595367]
[84.05435944 83.77191162]
[95.23740387 80.78984833]
[97.41424561 65.94863892]
[99.59107971 51.10743332]
[101.76792145 36.26622772]
[87.09759521 33.11230087]
[72.66778564 28.99569511]
[58.54160309 23.93441200]
[44.78080750 17.95058250]
[31.44557381 11.07037449]
[18.59421539 3.32387233]
[6.28292847 -5.25505018]
[-5.43445349 -14.62887859]
[-16.50669289 -24.75662422]
[-26.88537216 -35.59400177]
[-36.52510834 -47.09361649]
[-45.38374710 -59.20518875]
[-53.42255783 -71.87575531]
[-60.60638046 -85.04991150]
[-66.90380859 -98.67005157]
[-72.28730011 -112.67661285]
[-76.73331451 -127.00834656]
[-80.22241211 -141.60258484]
[-82.73933411 -156.39552307]
[-84.27307892 -171.32244873]
[-84.81694031 -186.31811523]
[-84.36853027 -201.31694031]
[-82.92981720 -216.25332642]
[-80.50708771 -231.06198120]
[-77.11094666 -245.67813110]
[-72.75623322 -260.03787231]
[-67.46199036 -274.07839966]
[-61.25137711 -287.73834229]
[-54.15154648 -300.95794678]
[-46.19353867 -313.67944336]
[-37.41216278 -325.84713745]
[-27.84580803 -337.40786743]
[-17.53631210 -348.31109619]
[-6.52875376 -358.50909424]
[5.12873220 -367.95730591]
[17.38517189 -376.61441040]
[30.18696785 -384.44253540]
[43.47814178 -391.40747070]
[57.20057678 -397.47875977]
[71.29426575 -402.62985229]
[85.69757843 -406.83822632]
[100.34753418 -410.08544922]
[115.18006897 -412.35736084]
[130.13032532 -413.64398193]
[145.13293457 -413.93972778]
[160.12228394 -413.24331665]
[175.03283691 -411.55773926]
[189.79939270 -408.89041138]
[204.35737610 -405.25299072]
[218.64312744 -400.66134644]
[232.59417725 -395.13562012]
[246.14952087 -388.69992065]
[259.24987793 -381.38238525]
[271.83798218 -373.21505737]
[283.85879517 -364.23364258]
[295.25970459 -354.47735596]
[305.99090576 -343.98895264]
[316.00546265 -332.81420898]
[325.25958252 -321.00204468]
[333.71276855 -308.60409546]
[341.32809448 -295.67456055]
[348.07223511 -282.27001953]
[353.91571045 -268.44903564]
[358.83297729 -254.27207947]
[362.80255127 -239.80113220]
[365.80700684 -225.09947205]
[367.83328247 -210.23138428]
[368.87246704 -195.26188660]
[368.92004395 -180.25643921]
[367.97576904 -165.28065491]
[366.04382324 -150.40002441]
[363.13259888 -135.67961121]
[359.25488281 -121.18378448]
[354.42758179 -106.97593689]
[348.67184448 -93.11819458]
[342.01281738 -79.67114258]
[334.47964478 -66.69360352]
[326.10519409 -54.24230576]
[316.92617798 -42.37170410]
[306.98266602 -31.13370895]
[296.31820679 -20.57745934]
[284.97933960 -10.74911308]
[273.01574707 -1.69164860]
[260.47967529 6.55532694]
[247.42594910 13.95575237]
[233.91168213 20.47726631]
[219.99594116 26.09135246]
[205.73959351 30.77346039]
[191.20497131 34.50311661]
[176.45562744 37.26401520]
[161.55606079 39.04407883]
[146.57142639 39.83552551]
[131.56724548 39.63489532]
[116.60912323 38.44306564]
[114.43228912 53.28427124]
[112.25544739 68.12547302]
[110.07861328 82.96668243]
[124.09179688 102.59215546]
[109.01667023 127.21519470]
[109.01667023 142.21519470]
[109.01667023 157.21519470]
[109.01667023 172.21519470]
[109.01667023 187.21519470]
[109.01667023 202.21519470]
[109.01667023 217.21519470]
[109.01667023 232.21519470]
[109.01667023 247.21519470]
[109.01667023 262.21517944]
[123.55655670 266.27651978]
[136.46093750 274.11102295]
[146.77223206 285.13735962]
[153.72525024 298.53726196]
[156.80404663 313.31643677]
[155.78015137 328.37811279]
[150.72955322 342.60464478]
[142.02702332 354.94030762]
[130.31835938 364.46972656]
[116.47242737 370.48574829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 26]
[29 129]
[30 128]
[31 127]
[32 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
