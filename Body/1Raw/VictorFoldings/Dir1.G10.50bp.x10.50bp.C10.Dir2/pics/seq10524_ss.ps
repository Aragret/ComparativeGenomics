%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCUCAACGGGGGGGGGGCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACxxxxxxxxxxCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCCCCCCCCCCCAACCCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[80.06818390 374.28161621]
[66.84799194 367.00915527]
[55.96118546 356.56213379]
[48.15005493 343.65289307]
[43.94717407 329.16159058]
[43.63910294 314.07623291]
[47.24684143 299.42541504]
[54.52441406 286.20803833]
[64.97562408 275.32525635]
[77.88788605 267.51910400]
[92.38082123 263.32183838]
[92.06876373 248.32507324]
[91.75670624 233.32832336]
[91.44465637 218.33157349]
[91.13259888 203.33480835]
[90.82054138 188.33805847]
[90.50848389 173.34130859]
[90.19642639 158.34455872]
[89.88436890 143.34779358]
[89.57231903 128.35104370]
[77.22074127 119.83995819]
[63.09593964 124.88871002]
[48.97113800 129.93746948]
[34.84633255 134.98622131]
[32.17089462 150.11029053]
[22.27957916 161.86007690]
[7.83309889 167.07495117]
[-7.28251410 164.35211182]
[-19.00123596 154.42401123]
[-24.17078972 139.96125793]
[-21.40059090 124.85425568]
[-11.43581009 113.16670990]
[3.04307842 108.04251862]
[18.14132500 110.86005402]
[29.79757690 120.86141968]
[43.92238235 115.81266785]
[58.04718399 110.76390839]
[72.17198944 105.71514893]
[76.14949036 90.23749542]
[87.10620880 80.79298401]
[99.99723816 79.50414276]
[105.48426819 65.54375458]
[103.33135223 49.86971283]
[115.18806458 40.85485458]
[120.67509460 26.89446640]
[125.13191223 12.57186890]
[128.53488159 -2.03702354]
[131.93786621 -16.64591599]
[135.34083557 -31.25480843]
[138.74382019 -45.86370087]
[142.14680481 -60.47259521]
[145.54977417 -75.08148956]
[131.37152100 -80.02205658]
[117.79875183 -86.44171143]
[104.98525238 -94.26772308]
[93.07621765 -103.41139984]
[82.20658112 -113.76915741]
[72.49950409 -125.22362518]
[64.06497955 -137.64500427]
[56.99856949 -150.89257812]
[51.38034821 -164.81620789]
[47.27397156 -179.25816345]
[44.72596741 -194.05476379]
[43.76520920 -209.03839111]
[44.40258408 -224.03926086]
[46.63086319 -238.88739014]
[50.42480469 -253.41453552]
[55.74141693 -267.45611572]
[62.52046204 -280.85299683]
[70.68512726 -293.45339966]
[80.14289856 -305.11456299]
[90.78661346 -315.70434570]
[102.49567413 -325.10275269]
[115.13739777 -333.20330811]
[128.56855774 -339.91418457]
[142.63694763 -345.15942383]
[157.18319702 -348.87948608]
[172.04244995 -351.03231812]
[187.04635620 -351.59347534]
[202.02490234 -350.55661011]
[216.80838013 -347.93347168]
[231.22927856 -343.75378418]
[245.12419128 -338.06488037]
[258.33569336 -330.93127441]
[270.71408081 -322.43374634]
[282.11907959 -312.66860962]
[292.42147827 -301.74649048]
[301.50454712 -289.79116821]
[309.26535034 -276.93807983]
[315.61596680 -263.33285522]
[320.48443604 -249.12969971]
[323.81561279 -234.48950195]
[325.57171631 -219.57815552]
[325.73287964 -204.56462097]
[324.29724121 -189.61901855]
[321.28112793 -174.91069031]
[316.71862793 -160.60627747]
[310.66152954 -146.86788940]
[303.17840576 -133.85116577]
[294.35406494 -121.70362091]
[284.28848267 -110.56287384]
[273.09570312 -100.55516815]
[260.90258789 -91.79389191]
[247.84727478 -84.37832642]
[234.07766724 -78.39248657]
[219.74981689 -73.90420532]
[205.02604675 -70.96433258]
[190.07321167 -69.60618591]
[175.06071472 -69.84514618]
[160.15867615 -71.67850494]
[156.75569153 -57.06961441]
[153.35270691 -42.46072388]
[149.94973755 -27.85183144]
[146.54675293 -13.24293804]
[143.14378357 1.36595452]
[139.74079895 15.97484684]
[152.68182373 8.38999176]
[167.49893188 10.72519016]
[177.47984314 21.92257500]
[178.10310364 36.90962219]
[169.08636475 48.89704895]
[154.51429749 52.45443726]
[140.98820496 45.97025681]
[134.63548279 32.38149643]
[129.14845276 46.34188843]
[131.69383240 61.01738739]
[119.44465637 71.03078461]
[113.95762634 84.99117279]
[123.40460205 107.08106995]
[104.56906891 128.03898621]
[104.88112640 143.03573608]
[105.19318390 158.03250122]
[105.50524139 173.02925110]
[105.81729126 188.02600098]
[106.12934875 203.02275085]
[106.44140625 218.01951599]
[106.75346375 233.01626587]
[107.06552124 248.01301575]
[107.37757874 263.00976562]
[122.03256989 266.60055542]
[135.25837708 273.86279297]
[146.15324402 284.30139160]
[153.97433472 297.20458984]
[158.18841553 311.69265747]
[158.50813293 326.77777100]
[154.91171265 341.43136597]
[147.64434814 354.65438843]
[137.20153809 365.54522705]
[124.29531097 373.36132812]
[109.80561829 377.56979370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 38]
[22 37]
[23 36]
[24 35]
[41 128]
[42 127]
[44 125]
[45 124]
[46 116]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
