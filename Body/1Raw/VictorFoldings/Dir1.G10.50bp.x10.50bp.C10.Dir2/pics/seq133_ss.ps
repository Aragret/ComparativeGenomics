%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUUAUCGGGGGGGGGGGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUxxxxxxxxxxUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCCCCCCCCCCCUUAUUUACCG\
) } def
/len { sequence length } bind def

/coor [
[81.32057953 371.51437378]
[70.77666473 360.73123169]
[63.24638748 347.66424561]
[59.20310211 333.13488770]
[58.90097809 318.05642700]
[62.35900497 303.37673950]
[69.35980225 290.01861572]
[79.46330261 278.82174683]
[92.03439331 270.48995972]
[106.28283691 265.54702759]
[105.03595734 250.59893799]
[103.78908539 235.65084839]
[102.54221344 220.70275879]
[101.29533386 205.75466919]
[100.04846191 190.80657959]
[98.80158997 175.85850525]
[97.55471039 160.91041565]
[96.30783844 145.96232605]
[95.06096649 131.01423645]
[93.81408691 116.06614685]
[86.12548065 113.00912476]
[80.12664032 106.21673584]
[77.61700439 96.68874359]
[62.97350693 99.93957520]
[48.33000565 103.19039917]
[45.72918701 118.16719055]
[37.59075165 131.00596619]
[25.15575409 139.74893188]
[10.32043934 143.06282043]
[-4.65291405 140.44229126]
[-17.48097992 132.28698730]
[-26.20756912 119.84049225]
[-29.50194168 105.00083160]
[-26.86173058 90.03093719]
[-18.68954659 77.21361542]
[-6.23158932 68.50340271]
[8.61239243 65.22855377]
[23.57880020 67.88845825]
[36.38536453 76.07749176]
[45.07917786 88.54689789]
[59.72267914 85.29607391]
[74.36618042 82.04524231]
[85.66518402 72.17951965]
[90.86060333 58.10800171]
[87.30583954 43.53530121]
[76.21452332 33.43664932]
[65.12320709 23.33800125]
[54.03189468 13.23935223]
[42.94057846 3.14070249]
[31.84926414 -6.95794725]
[20.75794792 -17.05659676]
[9.66663265 -27.15524673]
[-1.42468262 -37.25389481]
[-17.55301476 -40.22187805]
[-22.79114151 -55.76195908]
[-11.75052452 -67.88783264]
[4.21119404 -64.12544250]
[8.67396736 -48.34521103]
[19.76528168 -38.24656296]
[30.85659790 -28.14791107]
[41.94791412 -18.04926300]
[53.03923035 -7.95061302]
[64.13054657 2.14803672]
[75.22186279 12.24668598]
[86.31317139 22.34533501]
[97.40448761 32.44398499]
[92.51249695 18.26412582]
[81.90845490 7.65496588]
[75.70578766 -6.00251913]
[74.69469452 -20.96840286]
[79.00398254 -35.33607483]
[88.08467102 -47.27513123]
[100.77989960 -55.26457596]
[115.47233582 -58.28656769]
[130.29019165 -55.95611572]
[143.34573364 -48.57011795]
[152.97570801 -37.06952667]
[157.95327759 -22.91948128]
[157.64433289 -7.92266369]
[152.08822632 6.01037598]
[141.99276733 17.10460854]
[128.64057922 23.94773293]
[119.63112640 35.94063950]
[133.28736877 29.73523331]
[146.94360352 23.52982712]
[160.53456116 17.18269730]
[174.05874634 10.69453239]
[173.07254028 -5.32307243]
[178.28340149 -20.46079063]
[188.86891174 -32.41992569]
[203.19288635 -39.39640427]
[219.05821228 -40.35289001]
[234.04389954 -35.17293167]
[245.87445068 -24.67423058]
[259.26074219 -31.44234657]
[272.64703369 -38.21046066]
[286.03329468 -44.97857666]
[299.41958618 -51.74668884]
[312.80587769 -58.51480484]
[326.19216919 -65.28292084]
[337.59915161 -77.82552338]
[352.80935669 -70.33646393]
[349.82357788 -53.64750290]
[332.96026611 -51.89663315]
[319.57400513 -45.12852097]
[306.18771362 -38.36040497]
[292.80142212 -31.59229088]
[279.41513062 -24.82417488]
[266.02883911 -18.05606079]
[252.64256287 -11.28794575]
[254.23080444 2.68851209]
[250.93566895 16.39430237]
[243.13475037 28.17127037]
[231.75204468 36.58741760]
[218.14849854 40.61102295]
[203.95936584 39.73707962]
[190.89755249 34.05057526]
[180.54692078 24.21872139]
[167.02272034 30.70688820]
[162.32199097 36.47306061]
[153.14901733 37.18606949]
[139.49278259 43.39147568]
[125.83653259 49.59688187]
[104.93212128 63.30342102]
[99.73670959 77.37493896]
[119.18452454 94.63253021]
[108.76217651 114.81927490]
[110.00904846 129.76736450]
[111.25592804 144.71545410]
[112.50279999 159.66354370]
[113.74967194 174.61161804]
[114.99655151 189.55970764]
[116.24342346 204.50779724]
[117.49029541 219.45588684]
[118.73717499 234.40397644]
[119.98404694 249.35205078]
[121.23091888 264.30014038]
[136.10137939 266.81417847]
[149.87910461 272.94812012]
[161.69801331 282.31634521]
[170.81517029 294.33001709]
[176.65745544 308.23391724]
[178.85762024 323.15405273]
[177.27735901 338.15249634]
[172.01602173 352.28646851]
[163.40431213 364.66748047]
[151.98359680 374.51724243]
[138.47177124 381.21661377]
[123.71820831 384.34445190]
[108.65033722 383.70413208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[23 42]
[24 41]
[25 40]
[43 125]
[44 124]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[83 123]
[84 122]
[85 121]
[86 119]
[87 118]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
