%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCUCAAGGGGGGGGGGCAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAxxxxxxxxxxCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUCCCCCCCCCCUAAAACUCAA\
) } def
/len { sequence length } bind def

/coor [
[67.63686371 390.67071533]
[54.41666794 383.39822388]
[43.52986526 372.95123291]
[35.71873474 360.04199219]
[31.51585388 345.55065918]
[31.20778084 330.46533203]
[34.81552124 315.81451416]
[42.09309387 302.59710693]
[52.54430389 291.71435547]
[65.45656586 283.90820312]
[79.94950104 279.71090698]
[79.63744354 264.71417236]
[79.32538605 249.71740723]
[79.01333618 234.72065735]
[78.70127869 219.72389221]
[78.38922119 204.72714233]
[78.07716370 189.73039246]
[77.76510620 174.73364258]
[77.45304871 159.73687744]
[76.98500824 144.74418640]
[76.36103058 129.75717163]
[85.98291016 93.18376160]
[77.99299622 80.48883057]
[70.00307465 67.79390717]
[62.01316071 55.09897614]
[47.59576035 59.52319717]
[32.53612137 60.06422043]
[17.86102486 56.69116974]
[4.56947756 49.63982391]
[-6.43529415 39.39615631]
[-14.40722656 26.66284370]
[-18.80798912 12.31105614]
[-19.34333992 -2.67913318]
[-15.98278713 -17.28567886]
[-8.96126270 -30.51424789]
[1.23729539 -41.46590805]
[-6.75262070 -54.16083908]
[-14.74253750 -66.85576630]
[-22.73245430 -79.55069733]
[-33.61127853 -89.87789917]
[-46.70443344 -97.19700623]
[-59.79758835 -104.51611328]
[-72.89073944 -111.83522034]
[-85.98389435 -119.15432739]
[-98.62786865 -116.40046692]
[-109.40000153 -122.81764221]
[-112.77427673 -134.47618103]
[-125.71233368 -142.06608582]
[-142.10591125 -141.63868713]
[-150.44094849 -155.76168823]
[-142.14308167 -169.90655518]
[-125.74844360 -169.52227783]
[-118.12242889 -155.00415039]
[-105.18437195 -147.41424561]
[-87.68373871 -148.26741028]
[-78.66478729 -132.24748230]
[-65.57164001 -124.92837524]
[-52.47848129 -117.60926819]
[-39.38532639 -110.29016113]
[-26.29217339 -102.97105408]
[-33.68261719 -116.02407837]
[-37.80013275 -130.44787598]
[-38.41429520 -145.43530273]
[-35.49074173 -160.14762878]
[-29.19306946 -173.76158142]
[-19.87370491 -185.51527405]
[-8.05416298 -194.75099182]
[5.60412741 -200.95188904]
[20.33684158 -203.77095032]
[35.31952667 -203.05044556]
[49.71374512 -198.83067322]
[62.71398544 -191.34777832]
[73.59275055 -181.02050781]
[81.74125671 -168.42678833]
[86.70350647 -154.27136230]
[88.20181274 -139.34637451]
[86.15232849 -124.48704529]
[80.66974640 -110.52490997]
[72.06087494 -98.24129486]
[60.80746078 -88.32359314]
[47.53926468 -81.32681274]
[32.99877930 -77.64249420]
[17.99969292 -77.47680664]
[3.38136792 -80.83903503]
[-10.03752327 -87.54061127]
[-2.04760742 -74.84568787]
[5.94230890 -62.15075302]
[13.93222523 -49.45582581]
[28.21771049 -53.91389465]
[43.18187714 -54.52264786]
[57.80490875 -51.23458481]
[71.08869171 -44.26798630]
[82.12492371 -34.09241867]
[90.15722656 -21.39710045]
[94.63298798 -7.04421806]
[95.24138641 7.98962736]
[91.93494415 22.67987442]
[84.93318939 36.02381897]
[74.70809174 47.10905838]
[82.69800568 59.80398941]
[90.68791962 72.49891663]
[98.67784119 85.19384766]
[111.84642029 92.37635803]
[126.84561157 92.22032166]
[141.84480286 92.06428528]
[156.84397888 91.90824890]
[171.84317017 91.75221252]
[181.44638062 83.07855225]
[193.98324585 83.29340363]
[202.70550537 91.73315430]
[217.70469666 91.88919067]
[231.71786499 83.37079620]
[245.96968079 91.48361969]
[245.79908752 107.88188171]
[231.38159180 115.69645691]
[217.54866028 106.88838196]
[202.54946899 106.73234558]
[187.78726196 116.17039490]
[171.99920654 106.75139618]
[157.00003052 106.90743256]
[142.00083923 107.06346893]
[127.00164795 107.21950531]
[112.00245667 107.37554169]
[106.83885193 112.81495667]
[117.71752167 123.14232635]
[107.38997650 134.02084351]
[96.51165009 123.69377899]
[91.34804535 129.13319397]
[91.97202301 144.12020874]
[95.47463989 152.62806702]
[92.44980621 159.42483521]
[92.76186371 174.42158508]
[93.07391357 189.41833496]
[93.38597107 204.41508484]
[93.69802856 219.41184998]
[94.01008606 234.40859985]
[94.32214355 249.40534973]
[94.63420105 264.40209961]
[94.94625854 279.39886475]
[109.60124969 282.98962402]
[122.82705688 290.25189209]
[133.72192383 300.69049072]
[141.54301453 313.59368896]
[145.75709534 328.08175659]
[146.07681274 343.16683960]
[142.48039246 357.82046509]
[135.21302795 371.04345703]
[124.77022552 381.93429565]
[111.86399078 389.75042725]
[97.37429810 393.95889282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 102]
[23 101]
[24 100]
[25 99]
[36 88]
[37 87]
[38 86]
[39 85]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[47 54]
[48 53]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
