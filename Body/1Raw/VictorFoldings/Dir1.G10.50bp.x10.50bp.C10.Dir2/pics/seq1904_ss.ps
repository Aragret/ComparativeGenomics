%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUCCACGGGGGGGGGGCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGxxxxxxxxxxACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCCCCCCCCCCCACACUCCAC\
) } def
/len { sequence length } bind def

/coor [
[83.73248291 381.40844727]
[70.51228333 374.13598633]
[59.62548065 363.68896484]
[51.81435013 350.77972412]
[47.61146545 336.28842163]
[47.30339432 321.20306396]
[50.91113663 306.55224609]
[58.18870926 293.33486938]
[68.63991547 282.45208740]
[81.55217743 274.64593506]
[96.04511261 270.44866943]
[95.73305511 255.45190430]
[95.42100525 240.45515442]
[95.10894775 225.45840454]
[94.79689026 210.46163940]
[94.48483276 195.46488953]
[94.17277527 180.46813965]
[93.86071777 165.47138977]
[93.54866791 150.47462463]
[93.23661041 135.47787476]
[92.92455292 120.48112488]
[78.52900696 102.92144012]
[87.70957184 82.15388489]
[84.00341034 67.61894989]
[80.29724884 53.08401489]
[76.59108734 38.54907990]
[65.31251526 34.55323792]
[57.46635818 25.67930794]
[54.93395233 14.23113155]
[58.23686600 3.10645461]
[66.43452454 -4.93648481]
[63.33620071 -19.61301041]
[60.23788071 -34.28953552]
[51.72196960 -21.94128799]
[37.30860519 -17.78738403]
[23.52718163 -23.70958138]
[16.62082291 -37.02507019]
[19.71817398 -51.70179749]
[31.41610527 -61.09107208]
[46.41534042 -60.93944931]
[57.92127991 -51.31527710]
[56.98565292 -66.28606415]
[56.05002213 -81.25685883]
[41.04783630 -81.81635284]
[26.17591095 -83.86682129]
[11.58205128 -87.38787842]
[-2.58869624 -92.34454346]
[-16.19549370 -98.68754578]
[-29.10310745 -106.35384369]
[-41.18325043 -115.26725006]
[-52.31586456 -125.33916473]
[-62.39030075 -136.46949768]
[-71.30643463 -148.54762268]
[-78.97566223 -161.45350647]
[-85.32173920 -175.05886841]
[-90.28160858 -189.22848511]
[-93.80597687 -203.82154846]
[-95.85980988 -218.69300842]
[-96.42269897 -233.69506836]
[-95.48904419 -248.67861938]
[-93.06813812 -263.49475098]
[-89.18402100 -277.99621582]
[-83.87531281 -292.03887939]
[-77.19477081 -305.48315430]
[-69.20878601 -318.19546509]
[-59.99673462 -330.04943848]
[-49.65017319 -340.92727661]
[-38.27192688 -350.72085571]
[-25.97508812 -359.33285522]
[-12.88186646 -366.67764282]
[0.87760580 -372.68228149]
[15.16657829 -377.28704834]
[29.84303665 -380.44616699]
[44.76111603 -382.12829590]
[59.77254868 -382.31668091]
[74.72814178 -381.00946045]
[89.47925568 -378.21960449]
[103.87928009 -373.97485352]
[117.78510284 -368.31741333]
[131.05851746 -361.30349731]
[143.56759644 -353.00280762]
[155.18801880 -343.49783325]
[165.80430603 -332.88305664]
[175.31091309 -321.26400757]
[183.61338806 -308.75610352]
[190.62921143 -295.48367310]
[196.28863525 -281.57867432]
[200.53543091 -267.17926025]
[203.32739258 -252.42852783]
[204.63674927 -237.47312927]
[204.45050049 -222.46166992]
[202.77050781 -207.54335022]
[199.61346436 -192.86643982]
[195.01072693 -178.57681274]
[189.00807190 -164.81648254]
[181.66513062 -151.72221375]
[173.05488586 -139.42414856]
[163.26293945 -128.04450989]
[152.38658142 -117.69639587]
[140.53392029 -108.48265076]
[127.82274628 -100.49485779]
[114.37940979 -93.81240082]
[100.33750916 -88.50168610]
[85.83660126 -84.61550903]
[71.02081299 -82.19248962]
[71.95644379 -67.22169495]
[72.89207458 -52.25090408]
[74.91440582 -37.38785934]
[78.01272583 -22.71133232]
[81.11105347 -8.03480625]
[97.00438690 0.95404118]
[101.41947937 18.99855042]
[91.12602234 34.84291840]
[94.83218384 49.37785339]
[98.53834534 63.91279221]
[102.24450684 78.44773102]
[110.17485809 80.86859894]
[116.61537933 86.09073639]
[120.62302399 93.34951019]
[121.61100006 101.58206177]
[135.26724243 107.78747559]
[151.52781677 105.66008759]
[161.28431702 118.84123993]
[154.50009155 133.77128601]
[138.15417480 135.09147644]
[129.06182861 121.44371033]
[115.40559387 115.23830414]
[111.92116547 118.09486389]
[107.92130280 120.16906738]
[108.23336029 135.16581726]
[108.54541779 150.16256714]
[108.85747528 165.15933228]
[109.16953278 180.15608215]
[109.48159027 195.15283203]
[109.79364014 210.14958191]
[110.10569763 225.14634705]
[110.41775513 240.14309692]
[110.72981262 255.13984680]
[111.04187012 270.13659668]
[125.69686127 273.72735596]
[138.92266846 280.98962402]
[149.81753540 291.42822266]
[157.63864136 304.33142090]
[161.85270691 318.81948853]
[162.17242432 333.90460205]
[158.57600403 348.55819702]
[151.30863953 361.78121948]
[140.86582947 372.67202759]
[127.95960999 380.48815918]
[113.46991730 384.69662476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 116]
[24 115]
[25 114]
[26 113]
[31 110]
[32 109]
[33 108]
[41 107]
[42 106]
[43 105]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
