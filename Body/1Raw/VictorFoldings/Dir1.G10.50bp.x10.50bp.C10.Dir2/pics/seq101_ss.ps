%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCCCCCCCCCCCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[86.28825378 383.32620239]
[72.44231415 377.31018066]
[60.73365021 367.78076172]
[52.03112793 355.44509888]
[46.98052597 341.21856689]
[45.95663452 326.15689087]
[49.03543472 311.37771606]
[55.98845673 297.97778320]
[66.29973602 286.95147705]
[79.20411682 279.11694336]
[93.74401093 275.05563354]
[93.74401093 260.05563354]
[93.74401093 245.05564880]
[93.74401093 230.05564880]
[93.74401093 215.05564880]
[93.74401093 200.05564880]
[93.74401093 185.05564880]
[93.74401093 170.05564880]
[93.74401093 155.05564880]
[93.74401093 140.05564880]
[93.74401093 125.05564117]
[82.24220276 115.42711639]
[67.47615051 118.06597900]
[52.71009445 120.70484161]
[37.94403839 123.34371185]
[31.10502243 137.14710999]
[17.60725594 144.19436646]
[2.72403646 141.96865845]
[-7.86793327 131.53083801]
[-22.63398933 134.16970825]
[-31.46223068 147.27838135]
[-46.98976517 150.22308350]
[-60.00438309 141.25672913]
[-62.78474045 125.69893646]
[-53.68130112 112.77984619]
[-38.09497833 110.16412354]
[-25.27285194 119.40364838]
[-10.50679779 116.76477814]
[-4.18571281 103.30439758]
[9.00535870 96.06149292]
[24.10852242 97.99742889]
[35.30517197 108.57765198]
[50.07122803 105.93878937]
[64.83728790 103.29992676]
[79.60334015 100.66106415]
[74.15097809 90.59325409]
[74.22122192 76.91031647]
[81.52297974 62.60855103]
[96.21901703 51.33904648]
[94.97214508 36.39095688]
[93.72526550 21.44287109]
[92.47839355 6.49478436]
[89.99327087 -8.29792309]
[86.28710938 -22.83285904]
[82.58094788 -37.36779404]
[67.53700256 -36.75681686]
[52.69483566 -39.28739166]
[38.70328903 -44.84889221]
[26.17401314 -53.19819641]
[15.65472984 -63.97030640]
[7.60529995 -76.69431305]
[2.37761021 -90.81398010]
[0.20019205 -105.71205139]
[1.16823304 -120.73725128]
[5.23941469 -135.23274231]
[12.23576164 -148.56483459]
[21.85142517 -160.15071106]
[33.66604996 -169.48390198]
[47.16314697 -176.15638733]
[61.75268555 -179.87646484]
[76.79687500 -180.48153687]
[91.63804626 -177.94511414]
[105.62740326 -172.37811279]
[118.15339661 -164.02388000]
[128.66844177 -153.24763489]
[136.71286011 -140.52046204]
[141.93499756 -126.39873505]
[144.10655212 -111.49980927]
[143.13259888 -96.47499084]
[139.05570984 -81.98110962]
[132.05412292 -68.65176392]
[122.43390656 -57.06966400]
[110.61560822 -47.74112701]
[97.11589050 -41.07395554]
[100.82205200 -26.53902054]
[104.52821350 -12.00408459]
[111.78131866 -25.13391495]
[125.29790497 -31.63790131]
[140.08386230 -29.11294937]
[150.67608643 -18.49197960]
[153.16093445 -3.69922900]
[146.62033081 9.79967690]
[133.47088623 17.01716042]
[118.57105255 15.28650475]
[107.42648315 5.24790955]
[108.67335510 20.19599724]
[109.92022705 35.14408493]
[111.16710663 50.09217072]
[123.60654449 58.47431564]
[137.92913818 54.01749802]
[152.25173950 49.56068420]
[166.57434082 45.10386658]
[180.89692688 40.64705276]
[189.60107422 27.17049599]
[205.57810974 25.71660614]
[216.57183838 37.40068054]
[214.14878845 53.25970078]
[200.16773987 61.12797928]
[185.35374451 54.96965027]
[171.03115845 59.42646408]
[156.70855713 63.88328171]
[142.38595581 68.34009552]
[128.06335449 72.79691315]
[127.75137329 80.29042053]
[127.12739563 95.27743530]
[126.81540680 102.77094269]
[140.71795654 108.40290070]
[154.62051392 114.03485870]
[167.71559143 105.71027374]
[183.20066833 106.70623016]
[195.12142944 116.63977051]
[198.89408875 131.69123840]
[193.06799316 146.07302856]
[179.88337708 154.25506592]
[164.41001892 153.09118652]
[152.59771729 143.02891541]
[148.98855591 127.93741608]
[135.08599854 122.30545807]
[121.18344879 116.67350006]
[108.74401093 125.05564117]
[108.74401093 140.05564880]
[108.74401093 155.05564880]
[108.74401093 170.05564880]
[108.74401093 185.05564880]
[108.74401093 200.05564880]
[108.74401093 215.05564880]
[108.74401093 230.05564880]
[108.74401093 245.05564880]
[108.74401093 260.05563354]
[108.74401093 275.05563354]
[123.28389740 279.11694336]
[136.18827820 286.95147705]
[146.49955750 297.97778320]
[153.45257568 311.37771606]
[156.53138733 326.15689087]
[155.50749207 341.21856689]
[150.45689392 355.44509888]
[141.75436401 367.78076172]
[130.04570007 377.31018066]
[116.19976044 383.32620239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 45]
[23 44]
[24 43]
[25 42]
[29 38]
[30 37]
[49 98]
[50 97]
[51 96]
[52 95]
[53 86]
[54 85]
[55 84]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
