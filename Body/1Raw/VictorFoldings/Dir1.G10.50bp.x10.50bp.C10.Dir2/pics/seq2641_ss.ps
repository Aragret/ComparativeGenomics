%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCACUGGGGGGGGGGGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGxxxxxxxxxxCCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCCCCCCCCCCCACCCCCACUG\
) } def
/len { sequence length } bind def

/coor [
[83.50414276 366.95788574]
[70.63087463 359.05502319]
[60.50657654 347.84451294]
[53.95199585 334.23516846]
[51.49847412 319.33023071]
[53.34490967 304.33798218]
[59.34162140 290.47378540]
[69.00248718 278.86154175]
[81.54433441 270.44259644]
[95.95045471 265.89941406]
[95.63839722 250.90267944]
[95.32633972 235.90591431]
[95.01428223 220.90916443]
[94.70223236 205.91241455]
[94.39017487 190.91566467]
[94.07811737 175.91889954]
[93.76605988 160.92214966]
[93.45400238 145.92539978]
[93.14194489 130.92864990]
[92.82989502 115.93189240]
[86.69870758 111.61233521]
[78.05940247 123.87456512]
[65.79730225 115.23506927]
[74.43634033 102.97321320]
[68.30515289 98.65365601]
[54.07837677 103.40747070]
[48.50999451 118.02004242]
[34.82649231 125.58943939]
[19.48880005 122.54162598]
[9.73890400 110.31568909]
[10.18041039 94.68433380]
[20.60485268 83.02822113]
[36.09012604 80.85099792]
[49.32456207 89.18069458]
[63.55134201 84.42687988]
[63.23935318 76.93337250]
[62.61537552 61.94635391]
[62.30338669 54.45284653]
[47.06271362 58.69931793]
[36.53161621 48.16626358]
[21.95891190 44.61149979]
[6.37858868 49.72868347]
[-5.66110754 38.59415436]
[-1.77477002 22.66216278]
[14.03967094 18.32217407]
[25.51367378 30.03879929]
[40.08637619 33.59355927]
[54.28470993 29.09283066]
[65.85814667 39.88014221]
[89.69282532 63.21646118]
[99.78265381 92.74056244]
[108.29374695 80.38898468]
[116.80484009 68.03741455]
[125.31592560 55.68584061]
[126.23638916 49.03300476]
[129.86627197 44.55469513]
[134.44686890 43.00756454]
[143.46440125 31.02073288]
[152.48193359 19.03389931]
[161.49946594 7.04706764]
[152.98075867 -12.91604424]
[162.06311035 -35.40879440]
[186.73059082 -45.92216873]
[190.13356018 -60.53106308]
[193.53654480 -75.13995361]
[196.93951416 -89.74884796]
[200.34249878 -104.35774231]
[202.36483765 -119.22078705]
[202.98881531 -134.20780945]
[203.61279297 -149.19482422]
[190.12438965 -156.33805847]
[181.07801819 -168.63139343]
[178.26983643 -183.63395691]
[182.25740051 -198.36697388]
[192.24899292 -209.90521240]
[206.26075745 -215.95773315]
[221.51066589 -215.32281494]
[234.97082520 -208.12651062]
[243.96871948 -195.79765320]
[246.71780396 -180.78414917]
[242.67224121 -166.06694031]
[232.63529968 -154.56814575]
[218.59980774 -148.57084656]
[217.97583008 -133.58383179]
[217.35185242 -118.59680939]
[227.58628845 -129.56294250]
[242.08758545 -133.39862061]
[256.40548706 -128.92669678]
[266.14599609 -117.51957703]
[268.31985474 -102.67794037]
[262.25997925 -88.95649719]
[249.82604980 -80.56619263]
[234.83387756 -80.08190155]
[221.88435364 -87.65223694]
[214.95138550 -100.95475769]
[211.54841614 -86.34587097]
[208.14543152 -71.73697662]
[204.74246216 -57.12808228]
[201.33947754 -42.51919174]
[205.97195435 -36.62087250]
[215.96221924 -47.80990601]
[223.33860779 -60.87088013]
[238.29550171 -62.00710678]
[247.56024170 -50.21029663]
[242.91131592 -35.94889832]
[228.47473145 -31.87829018]
[215.23690796 -24.82423019]
[219.86938477 -18.92591095]
[234.86856079 -18.76987457]
[249.86775208 -18.61383820]
[260.98193359 -29.84996986]
[276.78622437 -29.85265923]
[287.90420532 -18.62030983]
[287.73980713 -2.81687689]
[276.39053345 8.18174458]
[260.58972168 7.85026741]
[249.71171570 -3.61464930]
[234.71252441 -3.77068591]
[219.71334839 -3.92672253]
[207.92666626 13.58050919]
[190.06292725 20.37986755]
[173.48629761 16.06459808]
[164.46876526 28.05142975]
[155.45123291 40.03826141]
[146.43370056 52.02509689]
[137.66749573 64.19692993]
[129.15640259 76.54850769]
[120.64531708 88.90007782]
[112.13423157 101.25164795]
[107.82664490 115.61983490]
[108.13870239 130.61659241]
[108.45075989 145.61334229]
[108.76281738 160.61009216]
[109.07486725 175.60684204]
[109.38692474 190.60360718]
[109.69898224 205.60035706]
[110.01103973 220.59710693]
[110.32309723 235.59385681]
[110.63515472 250.59062195]
[110.94720459 265.58737183]
[125.52984619 269.52731323]
[138.41105652 277.41726685]
[148.54660034 288.61758423]
[155.11485291 302.22033691]
[157.58335876 317.12280273]
[155.75198364 332.11688232]
[149.76919556 345.98712158]
[140.12001038 357.60906982]
[127.58662415 366.04061890]
[113.18507385 370.59823608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 35]
[26 34]
[38 49]
[40 47]
[41 46]
[51 129]
[52 128]
[53 127]
[54 126]
[57 125]
[58 124]
[59 123]
[60 122]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 85]
[69 84]
[70 83]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
