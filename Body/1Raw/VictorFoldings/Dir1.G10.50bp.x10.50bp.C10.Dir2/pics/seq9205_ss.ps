%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACUAAUAGGGGGGGGGGUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUAxxxxxxxxxxCGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCCCCCCCCCCCACUAAUA\
) } def
/len { sequence length } bind def

/coor [
[94.89094543 475.66390991]
[81.04500580 469.64788818]
[69.33634949 460.11846924]
[60.63382339 447.78280640]
[55.58322144 433.55627441]
[54.55932999 418.49459839]
[57.63812637 403.71545410]
[64.59114838 390.31552124]
[74.90243530 379.28918457]
[87.80681610 371.45468140]
[102.34670258 367.39337158]
[102.34670258 352.39337158]
[102.34670258 337.39337158]
[102.34670258 322.39337158]
[102.34670258 307.39337158]
[102.34670258 292.39337158]
[102.34670258 277.39337158]
[102.34670258 262.39337158]
[102.34670258 247.39335632]
[102.34670258 232.39335632]
[87.63942719 226.57264709]
[76.25507355 215.53637695]
[69.95010376 200.94627380]
[69.71296692 185.01545715]
[75.60926056 170.17269897]
[86.76726532 158.69216919]
[101.50666046 152.34501648]
[101.19461060 137.34825134]
[100.88255310 122.35150146]
[93.46055603 135.38661194]
[78.53562927 136.88545227]
[68.66987610 125.58646393]
[72.16716766 110.99986267]
[86.08396912 105.40299225]
[71.26620483 103.07189178]
[56.44845200 100.74079132]
[41.63069153 98.40968323]
[26.81293488 96.07858276]
[14.18580246 105.58284760]
[-1.45156789 103.29195404]
[-10.82180119 90.56504059]
[-8.36570549 74.95276642]
[4.45956182 65.71761322]
[20.04499626 68.33863068]
[29.14403725 81.26081848]
[43.96179581 83.59192657]
[58.77955246 85.92302704]
[73.59731293 88.25413513]
[88.41506958 90.58523560]
[77.61791229 80.17267609]
[79.85315704 65.34015656]
[93.23942566 58.57200623]
[106.50968170 65.56488800]
[108.49449921 80.43306732]
[115.40149689 67.11791229]
[122.30849457 53.80275345]
[129.21549988 40.48759842]
[117.83249664 50.25628662]
[103.13365936 53.24697876]
[88.83851624 48.70288086]
[78.56443024 37.77387238]
[74.91125488 23.22552872]
[78.80342102 8.73929214]
[89.25602722 -2.01910758]
[103.62403870 -6.32726908]
[118.27175140 -3.09496260]
[122.57933807 -17.46314621]
[126.88692474 -31.83133125]
[131.19450378 -46.19951630]
[119.32390594 -37.02951431]
[104.67558289 -33.80049133]
[90.04970551 -37.12970734]
[78.24214935 -46.38074493]
[71.51005554 -59.78517914]
[71.14032745 -74.78062439]
[77.20363617 -88.50054932]
[88.54092407 -98.32225037]
[102.98495483 -102.36821747]
[117.77462006 -99.86502838]
[130.08271790 -91.29118347]
[137.55642700 -78.28565979]
[138.76730347 -63.33606720]
[146.49137878 -76.19447327]
[154.08129883 -89.13253021]
[161.53620911 -102.14883423]
[168.99111938 -115.16514587]
[171.61633301 -131.91461182]
[188.43795776 -134.02870178]
[195.12611389 -118.44971466]
[182.00743103 -107.71023560]
[174.55252075 -94.69392395]
[167.09761047 -81.67761993]
[166.49859619 -74.26230621]
[159.34979248 -68.47038269]
[151.62570190 -55.61198425]
[145.56268311 -41.89192963]
[141.25511169 -27.52374649]
[136.94752502 -13.15556240]
[132.63993835 1.21262193]
[137.57279968 6.86212444]
[152.29081726 3.96735477]
[147.43852234 18.16112900]
[152.37138367 23.81063080]
[167.18913269 21.47952843]
[182.00689697 19.14842415]
[196.82466125 16.81731987]
[205.92369080 3.89512944]
[221.50914001 1.27410841]
[234.33439636 10.50926208]
[236.79049683 26.12153816]
[227.42025757 38.84844971]
[211.78289795 41.13934326]
[199.15576172 31.63507843]
[184.33799744 33.96618271]
[169.52024841 36.29728699]
[154.70248413 38.62839127]
[142.53065491 47.39459610]
[135.62365723 60.70975113]
[128.71665955 74.02490997]
[121.80965424 87.34006500]
[115.87930298 122.03944397]
[116.19136047 137.03619385]
[116.50341797 152.03295898]
[129.94783020 156.83384705]
[140.91616821 165.92466736]
[148.09834290 178.19299316]
[150.64562988 192.14852905]
[148.27085876 206.10411072]
[141.28070068 218.37965393]
[130.53617859 227.50445557]
[117.34670258 232.39335632]
[117.34670258 247.39335632]
[117.34670258 262.39337158]
[117.34670258 277.39337158]
[117.34670258 292.39337158]
[117.34670258 307.39337158]
[117.34670258 322.39337158]
[117.34670258 337.39337158]
[117.34670258 352.39337158]
[117.34670258 367.39337158]
[131.88658142 371.45468140]
[144.79096985 379.28918457]
[155.10224915 390.31552124]
[162.05528259 403.71545410]
[165.13407898 418.49459839]
[164.11018372 433.55627441]
[159.05958557 447.78280640]
[150.35705566 460.11846924]
[138.64839172 469.64788818]
[124.80245972 475.66390991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 123]
[28 122]
[29 121]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[54 120]
[55 119]
[56 118]
[57 117]
[66 99]
[67 98]
[68 97]
[69 96]
[82 95]
[83 94]
[84 92]
[85 91]
[86 90]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
