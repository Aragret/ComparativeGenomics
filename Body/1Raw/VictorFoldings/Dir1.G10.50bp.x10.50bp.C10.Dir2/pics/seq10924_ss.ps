%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCCCUAGCAGGGGGGGGGGGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACCCCCCCCCCCAACCCCCUAGGA\
) } def
/len { sequence length } bind def

/coor [
[97.50040436 505.21380615]
[83.22863007 500.40438843]
[70.32464600 492.63897705]
[59.39199448 482.28085327]
[50.94200897 469.81442261]
[45.36991119 455.82278442]
[42.93632126 440.96035767]
[43.75506210 425.92227173]
[47.78784180 411.41192627]
[54.84603500 398.10794067]
[64.59951782 386.63256836]
[76.59210968 377.52258301]
[90.26288605 371.20404053]
[104.97244263 367.97250366]
[104.97244263 352.97250366]
[104.97244263 337.97250366]
[104.97244263 322.97250366]
[104.97244263 307.97250366]
[104.97244263 292.97250366]
[104.97244263 277.97250366]
[104.97244263 262.97250366]
[104.97244263 247.97248840]
[104.97244263 232.97248840]
[99.09535980 228.31309509]
[93.86488342 242.37162781]
[78.87812805 241.74143982]
[74.84632874 227.29344177]
[87.34120178 218.99430847]
[81.46411896 214.33491516]
[66.85952759 217.75628662]
[52.25492859 221.17765808]
[40.67427444 232.78887939]
[24.90017700 228.30447388]
[21.15967751 212.33760071]
[33.30067825 201.31362915]
[48.83356094 206.57305908]
[63.43815994 203.15168762]
[78.04275513 199.73033142]
[88.59616852 189.07080078]
[91.87124634 174.43269348]
[95.14632416 159.79460144]
[98.42140198 145.15650940]
[92.37478638 158.88380432]
[81.25288391 168.94874573]
[66.99195862 173.59912109]
[52.07474899 172.02528381]
[39.09826660 164.50126648]
[30.32164764 152.33694458]
[27.27284813 137.65003967]
[30.48264885 122.99749756]
[39.39224243 110.93022156]
[52.45124817 103.54883575]
[40.33366013 94.70779419]
[23.97445679 90.25662994]
[23.72298622 73.30455017]
[39.94296265 68.37010193]
[49.17470169 82.59020233]
[61.29228973 91.43125153]
[67.83692932 87.76822662]
[80.92620087 80.44218445]
[87.47084045 76.77915955]
[86.27150726 61.82718277]
[85.07218170 46.87520599]
[83.87285614 31.92322731]
[80.04882050 23.56471252]
[82.80217743 16.66058922]
[81.90225983 1.68760765]
[81.00234985 -13.28537273]
[66.40600586 -17.31345558]
[53.90985107 -25.86476898]
[44.86938858 -38.01173401]
[40.26524734 -52.43673325]
[40.59685516 -67.57505035]
[45.82824326 -81.78459930]
[55.39194870 -93.52404022]
[68.25056458 -101.51995087]
[83.00930023 -104.90499878]
[98.06722260 -103.31200409]
[111.79096985 -96.91376495]
[122.69189453 -86.40431213]
[129.58753967 -72.92362976]
[131.72991943 -57.93400192]
[128.88664246 -43.06138992]
[121.36612701 -29.91906929]
[109.98414612 -19.93261719]
[95.97532654 -14.18528843]
[96.87524414 0.78769195]
[97.77516174 15.76067257]
[98.82483673 30.72389984]
[100.02416229 45.67587662]
[101.22348785 60.62785339]
[102.42281342 75.57983398]
[115.65605164 82.64250946]
[128.74533081 75.31646729]
[141.83459473 67.99041748]
[154.92387390 60.66437531]
[152.19863892 45.76968384]
[154.45983887 30.79751778]
[161.46217346 17.37194824]
[172.44610596 6.94927835]
[186.22016907 0.66008300]
[201.29025269 -0.81343400]
[216.02166748 2.68856382]
[228.81646729 10.78620529]
[238.28677368 22.60112000]
[243.40528870 36.85171509]
[243.61683655 51.99218750]
[238.89842224 66.38021851]
[229.76191711 78.45510101]
[217.19833374 86.90703583]
[202.57049561 90.81922913]
[187.46513367 89.76731110]
[173.52073669 83.86537933]
[162.24990845 73.75364685]
[149.16064453 81.07968903]
[136.07136536 88.40573883]
[122.98209381 95.73178101]
[124.25160217 103.12355804]
[128.06011963 125.29888916]
[142.84367371 127.83789825]
[159.47769165 124.55985260]
[167.23239136 139.63635254]
[154.89178467 151.26159668]
[140.30465698 142.62144470]
[125.52111053 140.08244324]
[113.05949402 148.43157959]
[109.78441620 163.06968689]
[106.50933838 177.70777893]
[103.23426056 192.34587097]
[110.87261963 195.63102722]
[117.45775604 201.96649170]
[121.79036713 210.94319153]
[122.85150909 221.69322205]
[119.97244263 232.97248840]
[119.97244263 247.97248840]
[119.97244263 262.97250366]
[119.97244263 277.97250366]
[119.97244263 292.97250366]
[119.97244263 307.97250366]
[119.97244263 322.97250366]
[119.97244263 337.97250366]
[119.97244263 352.97250366]
[119.97244263 367.97250366]
[134.68199158 371.20404053]
[148.35276794 377.52258301]
[160.34536743 386.63256836]
[170.09884644 398.10794067]
[177.15704346 411.41192627]
[181.18981934 425.92227173]
[182.00856018 440.96035767]
[179.57496643 455.82278442]
[174.00286865 469.81442261]
[165.55288696 482.28085327]
[154.62023926 492.63897705]
[141.71624756 500.40438843]
[127.44448090 505.21380615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[29 38]
[30 37]
[31 36]
[39 129]
[40 128]
[41 127]
[42 126]
[52 58]
[53 57]
[61 92]
[62 91]
[63 90]
[64 89]
[66 88]
[67 87]
[68 86]
[93 117]
[94 116]
[95 115]
[96 114]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
