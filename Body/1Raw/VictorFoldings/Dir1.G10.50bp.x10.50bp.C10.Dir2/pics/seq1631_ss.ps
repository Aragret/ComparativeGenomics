%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGGGCUAGGGGGGGGGGCAUUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGxxxxxxxxxxCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCCCCCCCCCCCAAAUGGGCCA\
) } def
/len { sequence length } bind def

/coor [
[69.68712616 420.73593140]
[57.80284882 411.46081543]
[48.48414230 399.61071777]
[42.27277756 385.87454224]
[39.52987289 371.05093384]
[40.41490555 356.00167847]
[44.87641144 341.60171509]
[52.65501022 328.68829346]
[63.29845810 318.01211548]
[76.18796539 310.19393921]
[90.57415771 305.68826294]
[89.63852692 290.71746826]
[88.70289612 275.74667358]
[87.76727295 260.77590942]
[86.83164215 245.80509949]
[85.89601135 230.83432007]
[84.96038818 215.86352539]
[84.02475739 200.89273071]
[83.08912659 185.92193604]
[82.15350342 170.95114136]
[81.21787262 155.98036194]
[80.28224182 141.00956726]
[68.01987457 132.37045288]
[53.60765839 136.52833557]
[39.19544220 140.68621826]
[24.78322601 144.84411621]
[10.37101078 149.00199890]
[-4.04120541 153.15988159]
[-13.02382183 166.45243835]
[-29.02764893 167.57363892]
[-39.77592087 155.66337585]
[-37.02347946 139.85820007]
[-22.88176727 132.28248596]
[-8.19909286 138.74766541]
[6.21312332 134.58978271]
[20.62533951 130.43190002]
[35.03755569 126.27400970]
[49.44977188 122.11611938]
[63.86198807 117.95822906]
[59.04426193 104.61843872]
[59.09578323 90.13698578]
[64.21434784 76.27162170]
[73.97053528 64.77480316]
[63.30891037 54.22351074]
[52.64728546 43.67222214]
[47.47051239 42.32292175]
[43.73763275 39.38727951]
[41.81468582 35.69892502]
[41.67560577 32.11449432]
[31.69287872 20.91872978]
[21.71015167 9.72296333]
[11.72742558 -1.47280216]
[1.74469864 -12.66856766]
[-8.23802757 -23.86433411]
[-23.86206818 -23.21364594]
[-36.21741104 -32.79902649]
[-39.47024155 -48.09455109]
[-32.08467484 -61.87814331]
[-17.54794502 -67.64160919]
[-2.72385550 -62.66362000]
[5.38811350 -49.29462433]
[2.95773816 -33.84706116]
[12.94046497 -22.65129471]
[22.92319107 -11.45552826]
[32.90591812 -0.25976273]
[42.88864517 10.93600273]
[52.87136841 22.13176918]
[63.19857407 33.01059341]
[73.86019897 43.56188583]
[84.52182770 54.11317444]
[92.02142334 54.03515625]
[87.72352600 39.66407394]
[77.70938110 28.49639511]
[76.56589508 13.54004288]
[84.76591492 0.97980148]
[98.91855621 -3.99039316]
[113.17137909 0.68474495]
[121.63053894 13.07194233]
[120.79797363 28.04881859]
[111.01860809 39.42173386]
[107.02060699 53.87911987]
[114.52020264 53.80110168]
[124.96001434 43.03029251]
[128.99859619 25.09513855]
[146.00709534 20.88668251]
[156.22056580 9.90101814]
[166.43405151 -1.08464706]
[176.64752197 -12.07031155]
[186.86100769 -23.05597687]
[197.07449341 -34.04164124]
[196.24879456 -49.82434464]
[206.88694763 -61.51218033]
[222.67749023 -62.17095947]
[234.25219727 -51.40983963]
[234.74400330 -35.61320496]
[223.86109924 -24.15291595]
[208.06015015 -23.82816124]
[197.84667969 -12.84249687]
[187.63319397 -1.85683191]
[177.41970825 9.12883282]
[167.20623779 20.11449814]
[156.99275208 31.10016251]
[157.10861206 43.23663330]
[148.63305664 52.47697067]
[135.73081970 53.47010422]
[125.29101562 64.24091339]
[130.48727417 71.51646423]
[133.84819031 79.35671234]
[135.37080383 87.33380127]
[135.14634705 95.04390717]
[150.10659790 96.13521576]
[165.06684875 97.22652435]
[178.09747314 87.86798859]
[193.49902344 92.35929871]
[199.45674133 107.25510406]
[191.40037537 121.12862396]
[175.51008606 123.33728027]
[163.97554016 112.18677521]
[149.01528931 111.09546661]
[134.05503845 110.00415039]
[131.51338196 118.02476501]
[127.07017517 125.39016724]
[120.89680481 131.64743042]
[113.27284241 136.38903809]
[104.57382965 139.27870178]
[95.25303650 140.07392883]
[96.18865967 155.04472351]
[97.12429047 170.01551819]
[98.05992126 184.98631287]
[98.99555206 199.95710754]
[99.93117523 214.92788696]
[100.86680603 229.89868164]
[101.80243683 244.86947632]
[102.73806000 259.84027100]
[103.67369080 274.81106567]
[104.60932159 289.78186035]
[105.54494476 304.75265503]
[120.38018036 307.43206787]
[134.14282227 313.58456421]
[146.03271484 322.85247803]
[155.35859680 334.69692993]
[161.57829285 348.42932129]
[164.33018494 363.25128174]
[163.45426941 378.30108643]
[159.00149536 392.70373535]
[151.23072815 405.62188721]
[140.59375000 416.30447388]
[127.70898438 424.13049316]
[113.32553101 428.64486694]
[98.27963257 429.58520508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[43 70]
[44 69]
[45 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[82 106]
[83 105]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
