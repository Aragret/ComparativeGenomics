%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCUAACAGGGGGGGGGGACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCxxxxxxxxxxCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAACCCCCCCCCCACCGCAAACA\
) } def
/len { sequence length } bind def

/coor [
[77.04258728 409.84164429]
[63.19664764 403.82562256]
[51.48798370 394.29620361]
[42.78546143 381.96054077]
[37.73485947 367.73400879]
[36.71096802 352.67233276]
[39.78976440 337.89318848]
[46.74278641 324.49325562]
[57.05407333 313.46691895]
[69.95845032 305.63241577]
[84.49833679 301.57110596]
[84.49833679 286.57110596]
[84.49833679 271.57110596]
[84.49833679 256.57110596]
[84.49833679 241.57109070]
[84.49833679 226.57109070]
[84.49833679 211.57109070]
[84.49833679 196.57109070]
[84.49833679 181.57109070]
[84.49833679 166.57109070]
[71.99786377 174.86193848]
[57.65789795 170.46133423]
[51.95979691 156.58575439]
[59.06841278 143.37713623]
[73.78791809 140.48989868]
[85.35927582 150.03379822]
[86.91685486 135.11488342]
[88.47443390 120.19597626]
[82.17352295 110.99401855]
[81.39147186 100.98796082]
[85.27532959 92.94986725]
[91.80293274 88.63070679]
[86.31589508 74.67031860]
[80.82886505 60.70992661]
[75.34183502 46.74953842]
[67.31334686 45.67791748]
[60.15077591 42.06671524]
[54.62403107 36.36157608]
[51.30815887 29.22987175]
[50.52376556 21.48287773]
[36.50705338 16.14136505]
[20.85625839 18.45721436]
[11.71854877 6.69492102]
[-2.29816413 1.35340834]
[-18.39437866 4.49090576]
[-28.95405769 -8.05601501]
[-23.11430740 -23.38015747]
[-6.88256311 -25.71735764]
[3.04334831 -12.66330433]
[17.06006050 -7.32179213]
[31.70828819 -10.01970100]
[41.84856796 2.12465286]
[55.86528015 7.46616554]
[60.58484650 3.14711547]
[66.30141449 0.27494437]
[66.30141449 -14.72505569]
[66.30141449 -29.72505569]
[66.30141449 -44.72505569]
[66.30141449 -59.72505569]
[51.60974503 -66.64595795]
[41.43119812 -79.22605896]
[37.75566864 -94.92563629]
[41.26670456 -110.60333252]
[51.21503830 -123.14471436]
[65.57779694 -130.08094788]
[65.26574707 -145.07769775]
[64.95368958 -160.07444763]
[64.64163208 -175.07119751]
[50.58716965 -180.93566895]
[40.13779449 -192.01405334]
[35.10392380 -206.38694763]
[36.35770798 -221.56416321]
[43.68191910 -234.91615295]
[55.80759430 -244.12962341]
[70.63388824 -247.60826111]
[85.59204865 -244.74937439]
[98.09049988 -236.04830933]
[105.96379089 -223.01254272]
[107.84783936 -207.90061951]
[103.41621399 -193.33076477]
[93.43672943 -181.82730103]
[79.63838196 -175.38325500]
[79.95043945 -160.38650513]
[80.26249695 -145.38975525]
[80.57455444 -130.39300537]
[93.49356079 -125.24517822]
[103.49798584 -115.52296448]
[109.04768372 -102.67682648]
[109.27071381 -88.64154053]
[104.10009003 -75.54483032]
[94.28903961 -65.38478851]
[81.30141449 -59.72505569]
[81.30141449 -44.72505569]
[81.30141449 -29.72505569]
[81.30141449 -14.72505569]
[81.30141449 0.27494437]
[97.30126953 18.07336426]
[89.30222321 41.26250458]
[94.78925323 55.22289658]
[100.27629089 69.18328857]
[105.76332092 83.14367676]
[118.45825195 91.13359070]
[133.41850281 90.04228210]
[148.36894226 79.34349823]
[163.86460876 87.52178192]
[178.79891968 86.11947632]
[193.73323059 84.71717072]
[202.47149658 71.74887848]
[217.51545715 67.48115540]
[231.76179504 73.92909241]
[238.48382568 88.04816437]
[234.50762939 103.17178345]
[221.71061707 112.15903473]
[206.13517761 110.76641846]
[195.13552856 99.65148163]
[180.20121765 101.05378723]
[165.26692200 102.45608521]
[157.27638245 111.59166718]
[144.80078125 112.84790039]
[134.50981140 105.00253296]
[119.54956055 106.09384155]
[134.34129333 108.58470154]
[143.64424133 120.35140228]
[142.65525818 135.31877136]
[131.88496399 145.75910950]
[116.89408875 146.28205872]
[105.42244720 136.61761475]
[103.39334869 121.75355530]
[101.83576202 136.67247009]
[100.27818298 151.59138489]
[99.49833679 166.57109070]
[99.49833679 181.57109070]
[99.49833679 196.57109070]
[99.49833679 211.57109070]
[99.49833679 226.57109070]
[99.49833679 241.57109070]
[99.49833679 256.57110596]
[99.49833679 271.57110596]
[99.49833679 286.57110596]
[99.49833679 301.57110596]
[114.03822327 305.63241577]
[126.94260406 313.46691895]
[137.25389099 324.49325562]
[144.20690918 337.89318848]
[147.28570557 352.67233276]
[146.26182556 367.73400879]
[141.21121216 381.96054077]
[132.50869751 394.29620361]
[120.80003357 403.82562256]
[106.95409393 409.84164429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 130]
[27 129]
[28 128]
[32 101]
[33 100]
[34 99]
[35 98]
[40 53]
[41 52]
[43 50]
[44 49]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[65 85]
[66 84]
[67 83]
[68 82]
[102 121]
[103 120]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
