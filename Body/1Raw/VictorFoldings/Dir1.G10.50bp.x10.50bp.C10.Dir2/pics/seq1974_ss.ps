%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUACCCAAGGGGGGGGGGAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCxxxxxxxxxxAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUCCCCCCCCCCAUUUACCAAA\
) } def
/len { sequence length } bind def

/coor [
[92.72388458 395.41656494]
[78.87795258 389.40054321]
[67.16928864 379.87112427]
[58.46676254 367.53546143]
[53.41616058 353.30892944]
[52.39226913 338.24725342]
[55.47106934 323.46807861]
[62.42409134 310.06817627]
[72.73537445 299.04183960]
[85.63975525 291.20733643]
[100.17964172 287.14599609]
[100.17964172 272.14599609]
[100.17964172 257.14599609]
[100.17964172 242.14601135]
[100.17964172 227.14601135]
[100.17964172 212.14601135]
[100.17964172 197.14601135]
[100.17964172 182.14601135]
[100.17964172 167.14601135]
[100.17964172 152.14601135]
[100.17964172 137.14601135]
[100.17964172 122.14601135]
[92.22183228 134.86108398]
[77.24747467 135.73777771]
[67.86028290 124.03817749]
[71.96132660 109.60968018]
[86.09889984 104.59657288]
[71.45539856 101.34574890]
[56.81189728 98.09492493]
[45.49133301 104.36378479]
[33.33010101 101.31036377]
[26.74994087 91.11189270]
[12.17723751 87.55712891]
[-2.39546561 84.00236511]
[-17.63613701 88.24884033]
[-28.16723633 77.71578217]
[-42.73994064 74.16102600]
[-57.31264114 70.60626221]
[-67.86735535 81.76393127]
[-82.59140778 86.13402557]
[-97.52411652 82.54100037]
[-108.64865112 71.95136261]
[-112.97256470 57.21368027]
[-109.33275604 42.29230881]
[-98.70830536 31.20102310]
[-83.95713806 26.92332458]
[-69.04724884 30.60989189]
[-57.98931885 41.26905823]
[-53.75788116 56.03355789]
[-39.18517685 59.58832169]
[-24.61247444 63.14308167]
[-10.41414070 58.64235306]
[1.15929627 69.42966461]
[15.73199940 72.98442841]
[30.30470276 76.53919220]
[46.82317734 70.69625092]
[60.06272125 83.45142365]
[74.70622253 86.70224762]
[89.34972382 89.95307159]
[103.71791077 85.64548492]
[114.15772247 74.87467957]
[124.59753418 64.10387421]
[128.35641479 55.70609283]
[135.36834717 53.22043228]
[146.02996826 42.66913986]
[150.39622498 27.46235275]
[164.88500977 24.00922394]
[150.11940002 26.65057945]
[135.52931213 23.16786385]
[123.54870605 14.14207268]
[116.17620087 1.07891071]
[114.64170837 -13.84239388]
[119.20121002 -28.13263321]
[129.09408569 -39.40787125]
[142.66998291 -45.78715134]
[157.66412354 -46.20626068]
[171.57514954 -40.59528732]
[182.08241272 -29.89026451]
[187.43304443 -15.87702942]
[186.73445129 -0.89330620]
[180.10403442 12.56016541]
[193.19718933 5.24106026]
[206.29034424 -2.07804561]
[219.38349915 -9.39715099]
[232.47665405 -16.71625710]
[245.56980896 -24.03536224]
[258.66296387 -31.35446739]
[271.75610352 -38.67357254]
[284.84927368 -45.99267960]
[283.45233154 -60.09088898]
[287.53359985 -73.61222076]
[296.44244385 -84.51595306]
[308.80236816 -91.16966248]
[322.72338867 -92.59360504]
[336.09121704 -88.60483551]
[346.88836670 -79.83996582]
[360.13095093 -86.88509369]
[373.37353516 -93.93022919]
[386.61611938 -100.97536469]
[394.83944702 -115.16369629]
[411.23590088 -114.86565399]
[418.93817139 -100.38784790]
[410.02285767 -86.62379456]
[393.66125488 -87.73278046]
[380.41867065 -80.68764496]
[367.17608643 -73.64250946]
[353.93350220 -66.59737396]
[354.88717651 -50.67598343]
[348.79431152 -35.87286758]
[336.82278442 -25.15838623]
[321.32553101 -20.70621300]
[305.37811279 -23.45249176]
[292.16836548 -32.89952469]
[279.07522583 -25.58041954]
[265.98205566 -18.26131439]
[252.88891602 -10.94220829]
[239.79576111 -3.62310243]
[226.70260620 3.69600320]
[213.60945129 11.01510906]
[200.51629639 18.33421516]
[187.42314148 25.65332031]
[175.43630981 34.67084885]
[171.83264160 49.12294006]
[156.58125305 53.33076859]
[145.91963196 63.88205719]
[135.36834717 74.54368591]
[124.92852783 85.31449127]
[114.48871613 96.08530426]
[115.17964172 122.14601135]
[115.17964172 137.14601135]
[115.17964172 152.14601135]
[115.17964172 167.14601135]
[115.17964172 182.14601135]
[115.17964172 197.14601135]
[115.17964172 212.14601135]
[115.17964172 227.14601135]
[115.17964172 242.14601135]
[115.17964172 257.14599609]
[115.17964172 272.14599609]
[115.17964172 287.14599609]
[129.71952820 291.20733643]
[142.62391663 299.04183960]
[152.93519592 310.06817627]
[159.88821411 323.46807861]
[162.96701050 338.24725342]
[161.94313049 353.30892944]
[156.89251709 367.53546143]
[148.19000244 379.87112427]
[136.48133850 389.40054321]
[122.63539886 395.41656494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 59]
[28 58]
[29 57]
[32 55]
[33 54]
[34 53]
[36 51]
[37 50]
[38 49]
[60 128]
[61 127]
[62 126]
[64 125]
[65 124]
[67 122]
[81 121]
[82 120]
[83 119]
[84 118]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
