%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCCAUUAGGGGGGGGGGCAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGxxxxxxxxxxUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUCCCCCCCCCCAUACCUAUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 375.84072876]
[71.19830322 369.82470703]
[59.48964310 360.29528809]
[50.78712082 347.95962524]
[45.73651886 333.73309326]
[44.71262741 318.67141724]
[47.79142761 303.89224243]
[54.74444962 290.49234009]
[65.05573273 279.46600342]
[77.96011353 271.63146973]
[92.50000000 267.57015991]
[92.50000000 252.57017517]
[92.50000000 237.57017517]
[92.50000000 222.57017517]
[92.50000000 207.57017517]
[92.50000000 192.57017517]
[92.50000000 177.57017517]
[92.50000000 162.57017517]
[92.50000000 147.57017517]
[92.50000000 132.57017517]
[79.12783051 126.10399628]
[69.87802124 114.48214722]
[66.57746124 100.00000000]
[69.87802124 85.51785278]
[79.12783051 73.89600372]
[92.50000000 67.42983246]
[92.50000000 52.42982864]
[92.50000000 37.42982864]
[92.50000000 22.42982864]
[84.69049072 35.23652649]
[74.18492126 45.94320679]
[61.52859116 53.99413300]
[47.37844467 58.97141266]
[32.46894836 60.61669922]
[17.57399559 58.84459305]
[3.46671724 53.74707413]
[-9.12063694 45.58873367]
[-19.53471184 34.79303741]
[-27.23495483 21.92034340]
[-31.82168198 7.63881874]
[-33.05681610 -7.31024313]
[-30.87624168 -22.15089989]
[-25.39314651 -36.11283875]
[-16.89213562 -48.47134781]
[-5.81446028 -58.58495712]
[7.26488638 -65.92871094]
[21.66700935 -70.12142181]
[36.64435959 -70.94546509]
[51.41951752 -68.35807800]
[65.22557831 -62.49354553]
[77.34592438 -53.65627670]
[87.15143585 -42.30498123]
[94.13315582 -29.02885056]
[97.92868805 -14.51699638]
[98.34085083 0.47932193]
[105.79576111 -12.53698730]
[113.25067139 -25.55329704]
[120.70558167 -38.56960678]
[128.16049194 -51.58591461]
[135.61540222 -64.60222626]
[123.48524475 -73.45222473]
[112.40229797 -83.58294678]
[102.50110626 -94.87141418]
[93.90185547 -107.18060303]
[86.70893860 -120.36108398]
[81.00966644 -134.25286865]
[76.87321472 -148.68730164]
[74.34981537 -163.48918152]
[73.47008514 -178.47882080]
[74.24470520 -193.47425842]
[76.66427612 -208.29345703]
[80.69942474 -222.75654602]
[86.30117035 -236.68794250]
[93.40151215 -249.91851807]
[101.91425323 -262.28768921]
[111.73606110 -273.64529419]
[122.74771118 -283.85348511]
[134.81552124 -292.78829956]
[147.79301453 -300.34130859]
[161.52264404 -306.42080688]
[175.83775330 -310.95300293]
[190.56455994 -313.88290405]
[205.52430725 -315.17492676]
[220.53538513 -314.81335449]
[235.41558838 -312.80261230]
[249.98425293 -309.16711426]
[264.06457520 -303.95098877]
[277.48559570 -297.21752930]
[290.08438110 -289.04849243]
[301.70806885 -279.54302979]
[312.21548462 -268.81655884]
[321.47909546 -256.99926758]
[329.38647461 -244.23458862]
[335.84158325 -230.67750549]
[340.76614380 -216.49258423]
[344.10028076 -201.85200500]
[345.80358887 -186.93348694]
[345.85537720 -171.91815186]
[344.25500488 -156.98825073]
[341.02191162 -142.32501221]
[336.19531250 -128.10646057]
[329.83386230 -114.50518036]
[322.01470947 -101.68627930]
[312.83282471 -89.80536652]
[302.39962769 -79.00666809]
[290.84179688 -69.42127228]
[278.29965210 -61.16553497]
[264.92538452 -54.33966827]
[250.88139343 -49.02653885]
[236.33813477 -45.29063797]
[221.47216797 -43.17731857]
[206.46394348 -42.71223831]
[191.49563599 -43.90103531]
[176.74897766 -46.72928238]
[162.40295410 -51.16264725]
[148.63171387 -57.14731598]
[141.17680359 -44.13100433]
[133.72189331 -31.11469650]
[126.26698303 -18.09838676]
[118.81207275 -5.08207703]
[111.35716248 7.93423223]
[107.50000000 22.42982864]
[107.50000000 37.42982864]
[107.50000000 52.42982864]
[107.50000000 67.42983246]
[120.87216949 73.89600372]
[130.12197876 85.51785278]
[133.42253113 100.00000000]
[130.12197876 114.48214722]
[120.87216949 126.10399628]
[107.50000000 132.57017517]
[107.50000000 147.57017517]
[107.50000000 162.57017517]
[107.50000000 177.57017517]
[107.50000000 192.57017517]
[107.50000000 207.57017517]
[107.50000000 222.57017517]
[107.50000000 237.57017517]
[107.50000000 252.57017517]
[107.50000000 267.57015991]
[122.03988647 271.63146973]
[134.94427490 279.46600342]
[145.25555420 290.49234009]
[152.20857239 303.89224243]
[155.28736877 318.67141724]
[154.26348877 333.73309326]
[149.21287537 347.95962524]
[140.51036072 360.29528809]
[128.80169678 369.82470703]
[114.95575714 375.84072876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 125]
[27 124]
[28 123]
[29 122]
[55 121]
[56 120]
[57 119]
[58 118]
[59 117]
[60 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
