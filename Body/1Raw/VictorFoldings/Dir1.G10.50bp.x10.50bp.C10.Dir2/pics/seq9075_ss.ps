%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUCCUAAGGGGGGGGGGACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUxxxxxxxxxxAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCCCCUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[83.91297150 411.03421021]
[70.42408752 404.30267334]
[58.93858719 394.53808594]
[50.12421799 382.30819702]
[44.49343491 368.32400513]
[42.37360764 353.39852905]
[43.88797760 338.39953613]
[48.94850159 324.19900513]
[57.26096344 311.62258911]
[68.34209442 301.40145874]
[81.54765320 294.12979126]
[96.10987854 290.23043823]
[95.80189514 275.23361206]
[95.49391937 260.23675537]
[95.18594360 245.23992920]
[94.87796783 230.24308777]
[94.56998444 215.24624634]
[94.26200867 200.24940491]
[93.95403290 185.25257874]
[93.64605713 170.25573730]
[93.33807373 155.25889587]
[87.54355621 150.49722290]
[87.32373810 165.49562073]
[75.46057892 174.67523193]
[60.88705826 171.12382507]
[54.57707596 157.51557922]
[61.28205490 144.09756470]
[75.95450592 140.97389221]
[70.15998077 136.21221924]
[55.38786316 138.81694031]
[47.72628784 152.44905090]
[33.07646942 157.91868591]
[18.35560608 152.64324951]
[10.51444054 139.11364746]
[13.25533009 123.71813965]
[25.28411102 113.72602081]
[40.92115784 113.85525513]
[52.78314209 124.04483032]
[67.55525970 121.44010925]
[69.00899506 114.08234406]
[71.91646576 99.36682129]
[73.37020111 92.00906372]
[60.69868469 83.98206329]
[48.02717209 75.95507050]
[35.35565567 67.92807007]
[22.68413925 59.90107346]
[9.45510197 67.59854889]
[-5.83632660 68.25490570]
[-19.67628860 61.71930695]
[-28.88446236 49.49359131]
[-31.34487724 34.38713837]
[-26.49214745 19.87129974]
[-15.44139576 9.28170776]
[-0.73200256 5.05177402]
[14.25592041 8.15350723]
[26.07825851 17.87415123]
[32.01832581 31.97997093]
[30.71113586 47.22955704]
[43.38265228 55.25655365]
[56.05416870 63.28355026]
[68.72568512 71.31054688]
[81.39720154 79.33754730]
[94.95909882 72.92856598]
[96.80242157 58.04226303]
[98.64574432 43.15595245]
[84.41291809 38.24469757]
[71.51242828 30.48125648]
[60.50822449 20.20501328]
[51.88136292 7.86520243]
[46.00897598 -5.99873400]
[43.14777374 -20.78072357]
[43.42284012 -35.83456039]
[46.82215118 -50.50215912]
[53.19709778 -64.14231110]
[62.26900101 -76.15872192]
[73.64127350 -86.02610016]
[86.81676483 -93.31307983]
[101.21950531 -97.70110321]
[116.21987152 -98.99834442]
[131.16209412 -97.14809418]
[145.39299011 -92.23123932]
[158.29042053 -84.46272278]
[169.29058838 -74.18215179]
[177.91259766 -61.83894730]
[183.77952576 -47.97269821]
[186.63491821 -33.18958664]
[186.35392761 -18.13585663]
[182.94885254 -3.46959949]
[176.56852722 10.16804218]
[167.49189758 22.18088913]
[156.11575317 32.04379272]
[142.93739319 39.32558441]
[128.53292847 43.70793915]
[113.53205109 44.99927902]
[111.68872833 59.88558578]
[109.84540558 74.77189636]
[120.17630768 85.64720917]
[135.13758850 84.57013702]
[150.09886169 83.49306488]
[165.06015015 82.41600037]
[167.46614075 67.53957367]
[173.23857117 53.61923981]
[182.06614685 41.40569687]
[193.47279358 31.55760574]
[206.84339905 24.60606575]
[221.45686340 20.92596054]
[236.52513123 20.71575546]
[251.23556519 23.98678589]
[264.79486084 30.56264877]
[276.47180176 40.08871841]
[285.63662720 52.05126572]
[291.79513550 65.80516052]
[294.61517334 80.60868073]
[293.94464111 95.66348267]
[289.81976318 110.15769196]
[282.46292114 123.30963898]
[272.27090454 134.41006470]
[259.79333496 142.86033630]
[245.70312500 148.20474243]
[230.76013184 150.15505981]
[215.77021790 148.60610962]
[201.54176331 143.64143372]
[188.84210205 135.52877808]
[178.35610962 124.70562744]
[170.64927673 111.75566864]
[166.13722229 97.37728119]
[151.17593384 98.45434570]
[136.21466064 99.53141785]
[121.25337219 100.60848999]
[128.77209473 125.46215820]
[108.33491516 154.95091248]
[108.64289093 169.94775391]
[108.95086670 184.94459534]
[109.25885010 199.94143677]
[109.56682587 214.93827820]
[109.87480164 229.93510437]
[110.18277740 244.93194580]
[110.49076080 259.92877197]
[110.79873657 274.92562866]
[111.10671234 289.92245483]
[125.81674957 293.22067261]
[139.30970764 299.94403076]
[150.80113220 309.70162964]
[159.62290955 321.92617798]
[165.26216125 335.90698242]
[167.39103699 350.83114624]
[165.88577271 365.83108521]
[160.83386230 380.03466797]
[152.52902222 392.61611938]
[141.45408630 402.84399414]
[128.25294495 410.12362671]
[113.69308472 414.03182983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[29 39]
[30 38]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[63 96]
[64 95]
[65 94]
[97 129]
[98 128]
[99 127]
[100 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
