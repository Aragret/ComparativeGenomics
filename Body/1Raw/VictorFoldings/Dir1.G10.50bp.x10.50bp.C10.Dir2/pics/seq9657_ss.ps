%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUGUGCCUAGGGGGGGGGGUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUAxxxxxxxxxxCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACCCCCCCCCCCUAUUCUGCCUA\
) } def
/len { sequence length } bind def

/coor [
[73.76173401 519.74383545]
[60.27285767 513.01226807]
[48.78735733 503.24771118]
[39.97298813 491.01782227]
[34.34220505 477.03363037]
[32.22237778 462.10815430]
[33.73674774 447.10913086]
[38.79726791 432.90863037]
[47.10973358 420.33221436]
[58.19086456 410.11105347]
[71.39642334 402.83941650]
[85.95864105 398.94006348]
[85.65066528 383.94320679]
[85.34268951 368.94638062]
[85.03471375 353.94952393]
[84.72673035 338.95269775]
[84.41875458 323.95587158]
[84.11077881 308.95901489]
[83.80280304 293.96218872]
[83.49481964 278.96533203]
[83.18684387 263.96850586]
[82.87886810 248.97166443]
[68.94355774 245.49037170]
[56.37929916 238.50460815]
[46.05083466 228.48791504]
[38.67088699 216.12272644]
[34.75100327 202.25384521]
[34.56608963 187.83067322]
[38.13513565 173.84230042]
[45.21948624 161.24960327]
[55.33879852 150.91931152]
[67.80358887 143.56428528]
[81.76220703 139.69439697]
[81.76220703 124.69440460]
[72.23886871 113.10535431]
[57.52334976 110.19788361]
[42.80782700 107.29041290]
[28.09230423 104.38293457]
[13.37678242 101.47546387]
[-1.33874059 98.56799316]
[-15.41333675 106.26768494]
[-30.15225792 99.93177795]
[-34.24906540 84.42063141]
[-24.56103706 71.63307190]
[-8.52000237 71.37861633]
[1.56873178 83.85247040]
[16.28425407 86.75994110]
[30.99977684 89.66741180]
[45.71529770 92.57489014]
[60.43082047 95.48236084]
[75.14634705 98.38983154]
[84.67973328 84.85472107]
[98.61635590 81.87299347]
[103.74665833 67.77760315]
[108.87696075 53.68221664]
[105.23914337 35.66009140]
[119.04859161 24.87381744]
[123.88840485 10.67606544]
[128.72822571 -3.52168751]
[133.56803894 -17.71944046]
[138.40785217 -31.91719246]
[143.24766541 -46.11494446]
[146.00390625 -60.85954285]
[146.61973572 -75.84689331]
[137.68965149 -91.91812134]
[147.57936096 -106.38318634]
[147.88734436 -121.38002014]
[148.19532776 -136.37686157]
[133.97048950 -141.56654358]
[122.20304871 -151.09576416]
[114.16945648 -163.93087769]
[110.74111938 -178.67961121]
[112.28993988 -193.74214172]
[118.64788818 -207.48460388]
[129.12532043 -218.41630554]
[142.58572388 -225.35147095]
[157.56900024 -227.53781128]
[172.44989014 -224.73817444]
[185.61421204 -217.25624084]
[195.63401794 -205.90361023]
[201.42240906 -191.91171265]
[202.35151672 -176.79829407]
[198.32057190 -162.20272827]
[189.76679993 -149.70826721]
[177.61807251 -140.67018127]
[163.19215393 -136.06887817]
[162.88418579 -121.07204437]
[162.57620239 -106.07520294]
[170.74127197 -97.09778595]
[170.57003784 -84.56215668]
[161.60708618 -75.23107147]
[160.99127197 -60.24371719]
[167.56208801 -56.62786484]
[180.70372009 -49.39616394]
[187.27453613 -45.78031158]
[199.60581970 -54.32077026]
[211.93710327 -62.86122894]
[216.20719910 -78.32556915]
[231.01608276 -84.49617004]
[245.00364685 -76.63948059]
[247.43983459 -60.78247833]
[236.45579529 -49.08929443]
[220.47755432 -50.52994537]
[208.14627075 -41.98948669]
[195.81498718 -33.44902802]
[172.85063171 -31.02121544]
[157.44541931 -41.27512741]
[152.60560608 -27.07737541]
[147.76579285 -12.87962341]
[142.92597961 1.31812882]
[138.08615112 15.51588154]
[133.24633789 29.71363449]
[138.30564880 40.74385071]
[134.34226990 52.63767242]
[122.97235107 58.81251907]
[117.84204865 72.90790558]
[112.71174622 87.00329590]
[119.37609863 109.41577148]
[96.76220703 124.69440460]
[96.76220703 139.69439697]
[111.84256744 144.05644226]
[125.07771301 152.47192383]
[135.40582275 164.25604248]
[142.00099182 178.45410156]
[144.33930969 193.91889954]
[142.24046326 209.40339661]
[135.88157654 223.66125488]
[125.78237915 235.54719543]
[112.76264191 244.10899353]
[97.87570953 248.66369629]
[98.18368530 263.66052246]
[98.49166107 278.65737915]
[98.79963684 293.65420532]
[99.10762024 308.65103149]
[99.41559601 323.64788818]
[99.72357178 338.64471436]
[100.03154755 353.64157104]
[100.33953094 368.63839722]
[100.64750671 383.63522339]
[100.95548248 398.63208008]
[115.66551971 401.93029785]
[129.15847778 408.65365601]
[140.64988708 418.41125488]
[149.47167969 430.63580322]
[155.11093140 444.61657715]
[157.23980713 459.54077148]
[155.73454285 474.54067993]
[150.68261719 488.74426270]
[142.37779236 501.32571411]
[131.30285645 511.55358887]
[118.10170746 518.83325195]
[103.54184723 522.74145508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[33 120]
[34 119]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[53 117]
[54 116]
[55 115]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[62 107]
[63 92]
[64 91]
[66 88]
[67 87]
[68 86]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
