%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACUUCUCGGGGGGGGGGCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUxxxxxxxxxxCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUCCCCCCCCCCUCUACUACUC\
) } def
/len { sequence length } bind def

/coor [
[76.99267578 375.80761719]
[63.14673615 369.79159546]
[51.43807220 360.26217651]
[42.73554993 347.92651367]
[37.68494797 333.69998169]
[36.66105652 318.63830566]
[39.73985672 303.85913086]
[46.69287872 290.45922852]
[57.00416183 279.43289185]
[69.90853882 271.59838867]
[84.44843292 267.53704834]
[84.44843292 252.53706360]
[84.44843292 237.53706360]
[84.44843292 222.53706360]
[84.44843292 207.53706360]
[84.44843292 192.53706360]
[84.44843292 177.53706360]
[84.44843292 162.53706360]
[84.44843292 147.53706360]
[84.44843292 132.53706360]
[72.55605316 123.39533234]
[58.06045151 127.25248718]
[43.56485748 131.10964966]
[29.06925964 134.96681213]
[14.57366276 138.82395935]
[11.76069641 153.82563782]
[2.71040583 166.11607361]
[-10.78026581 173.25502014]
[-26.03273582 173.82502747]
[-40.01861572 167.71290588]
[-49.96099854 156.13224792]
[-53.88581848 141.38238525]
[-51.01379776 126.39190674]
[-41.91517639 114.13719940]
[-28.39649582 107.05143738]
[-13.14190006 106.54150391]
[0.81980222 112.70864105]
[10.71650410 124.32836914]
[25.21210098 120.47121429]
[39.70769882 116.61405182]
[54.20329285 112.75688934]
[68.69889069 108.89973450]
[77.15491486 81.59443665]
[101.63468933 73.91881561]
[106.83010864 59.84729767]
[103.27467346 41.81015015]
[117.13076782 31.08595085]
[122.03231812 16.90939331]
[126.93387604 2.73283434]
[131.83541870 -11.44372368]
[125.17691040 -25.52569771]
[130.34973145 -39.83292007]
[143.81578064 -46.09400940]
[148.71733093 -60.27056885]
[141.45854187 -71.66213226]
[142.09767151 -84.95948029]
[150.17547607 -95.29502106]
[162.55107117 -99.01539612]
[167.74649048 -113.08691406]
[172.94190979 -127.15843201]
[177.99066162 -141.28323364]
[182.89221191 -155.45979309]
[187.79376221 -169.63635254]
[191.34852600 -184.20906067]
[193.52536011 -199.05026245]
[191.66775513 -208.06143188]
[195.90496826 -214.17630005]
[198.39009094 -228.96900940]
[200.87519836 -243.76171875]
[187.28089905 -250.34742737]
[176.09361267 -260.49737549]
[168.22021484 -273.38870239]
[164.29899597 -287.97637939]
[164.64781189 -303.07788086]
[169.23840332 -317.46896362]
[177.69862366 -329.98300171]
[189.34263611 -339.60556030]
[203.22651672 -345.55657959]
[218.22476196 -347.35363770]
[233.12152100 -344.85101318]
[246.70919800 -338.25164795]
[257.88629150 -328.09048462]
[265.74673462 -315.19125366]
[269.65328979 -300.59963989]
[269.28930664 -285.49850464]
[264.68426514 -271.11203003]
[256.21148682 -258.60650635]
[244.55780029 -248.99563599]
[230.66795349 -243.05857849]
[215.66790771 -241.27659607]
[213.18280029 -226.48388672]
[210.69767761 -211.69117737]
[208.36657715 -196.87342834]
[206.18972778 -182.03221130]
[217.50755310 -191.87634277]
[232.32875061 -194.18548584]
[246.10488892 -188.25099182]
[254.60823059 -175.89408875]
[255.22923279 -160.90695190]
[247.77729797 -147.88893127]
[234.53933716 -140.83511353]
[219.57791138 -141.91020203]
[207.48449707 -150.78428650]
[201.97032166 -164.73480225]
[197.06877136 -150.55824280]
[192.16722107 -136.38168335]
[192.95909119 -128.98448181]
[187.01342773 -121.96302032]
[181.81800842 -107.89149475]
[176.62260437 -93.81997681]
[184.30958557 -78.89456177]
[178.74354553 -62.69878387]
[162.89389038 -55.36901855]
[157.99232483 -41.19245911]
[164.71536255 -27.95098877]
[159.94644165 -13.50411892]
[146.01197815 -6.54217291]
[141.11042786 7.63438511]
[136.20887756 21.81094360]
[131.30732727 35.98750305]
[136.31887817 47.04153824]
[132.30148315 58.91923141]
[120.90162659 65.04271698]
[115.70620728 79.11423492]
[122.81680298 85.47460175]
[127.36206055 94.23100281]
[128.54927063 104.35313416]
[125.99717712 114.55612183]
[119.81397247 123.46360016]
[110.61122131 129.79283142]
[99.44843292 132.53706360]
[99.44843292 147.53706360]
[99.44843292 162.53706360]
[99.44843292 177.53706360]
[99.44843292 192.53706360]
[99.44843292 207.53706360]
[99.44843292 222.53706360]
[99.44843292 237.53706360]
[99.44843292 252.53706360]
[99.44843292 267.53704834]
[113.98831940 271.59838867]
[126.89270020 279.43289185]
[137.20397949 290.45922852]
[144.15699768 303.85913086]
[147.23580933 318.63830566]
[146.21191406 333.69998169]
[141.16131592 347.92651367]
[132.45878601 360.26217651]
[120.75012207 369.79159546]
[106.90418243 375.80761719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[44 124]
[45 123]
[47 120]
[48 119]
[49 118]
[50 117]
[53 114]
[54 113]
[58 110]
[59 109]
[60 108]
[61 106]
[62 105]
[63 104]
[64 94]
[65 93]
[67 92]
[68 91]
[69 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
