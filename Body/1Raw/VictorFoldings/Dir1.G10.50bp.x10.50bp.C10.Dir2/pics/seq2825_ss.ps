%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUGCAAACGGGGGGGGGGAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUxxxxxxxxxxAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACCCCCCCCCCCUAAUCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[72.70552826 408.39797974]
[58.85958862 402.38195801]
[47.15092850 392.85253906]
[38.44840240 380.51687622]
[33.39780045 366.29034424]
[32.37390900 351.22866821]
[35.45270920 336.44949341]
[42.40573120 323.04959106]
[52.71701431 312.02325439]
[65.62139893 304.18875122]
[80.16128540 300.12741089]
[80.16128540 285.12741089]
[80.16128540 270.12741089]
[80.16128540 255.12742615]
[80.16128540 240.12742615]
[80.16128540 225.12742615]
[80.16128540 210.12742615]
[80.16128540 195.12742615]
[80.16128540 180.12742615]
[80.16128540 165.12742615]
[76.99570465 158.39506531]
[80.32056427 149.81617737]
[80.63262177 134.81942749]
[69.13082123 125.19090271]
[54.42285919 128.13638306]
[39.71489716 131.08186340]
[25.00693512 134.02734375]
[20.75503922 148.73040771]
[10.14895821 159.76533508]
[-4.37411213 164.59638977]
[-19.47687531 162.11341858]
[-31.68882561 152.88699341]
[-38.20374680 139.03729248]
[-37.52456284 123.74685669]
[-29.80733490 110.52932739]
[-16.82543373 102.42199707]
[-1.56200325 101.28786469]
[12.47553349 107.38755035]
[22.06145096 119.31938934]
[36.76941299 116.37390137]
[51.47737503 113.42842102]
[66.18533325 110.48294067]
[65.40606689 100.04588318]
[67.70310211 90.08142090]
[72.73164368 81.45446014]
[79.91649628 74.87049866]
[88.51455688 70.81832886]
[97.69021606 69.53521729]
[106.59592438 70.99669647]
[113.50292206 57.68153763]
[120.40991974 44.36638260]
[112.41502380 34.13374329]
[108.91868591 21.67638969]
[110.41069031 8.87119102]
[116.63203430 -2.36658382]
[126.61903381 -10.36973476]
[138.85246277 -13.96644211]
[151.48857117 -12.65175152]
[158.94348145 -25.66806030]
[166.39839172 -38.68437195]
[173.85330200 -51.70067978]
[161.75773621 -60.59983826]
[150.75546265 -70.81980133]
[140.98991394 -82.22734070]
[132.58840942 -94.67372894]
[125.66048431 -107.99669647]
[120.29645538 -122.02256775]
[116.56624603 -136.56846619]
[114.51850128 -151.44477844]
[114.17990875 -166.45755005]
[115.55487823 -181.41104126]
[118.62549591 -196.11033630]
[123.35171509 -210.36376953]
[129.67193604 -223.98554993]
[137.50375366 -236.79804993]
[146.74507141 -248.63426208]
[157.27539062 -259.33987427]
[168.95744324 -268.77529907]
[181.63893127 -276.81756592]
[195.15451050 -283.36175537]
[209.32798767 -288.32263184]
[223.97459412 -291.63546753]
[238.90335083 -293.25711060]
[253.91966248 -293.16635132]
[268.82775879 -291.36447144]
[283.43325806 -287.87487793]
[297.54574585 -282.74310303]
[310.98126221 -276.03604126]
[323.56463623 -267.84115601]
[335.13183594 -258.26522827]
[345.53201294 -247.43316650]
[354.62960815 -235.48614502]
[362.30603027 -222.57992554]
[368.46118164 -208.88278198]
[373.01483154 -194.57327271]
[375.90759277 -179.83795166]
[377.10177612 -164.86892700]
[376.58178711 -149.86134338]
[374.35443115 -135.01086426]
[370.44873047 -120.51110077]
[364.91558838 -106.55107880]
[357.82717896 -93.31279755]
[349.27590942 -80.96884155]
[339.37322998 -69.68013763]
[328.24826050 -59.59387207]
[316.04602051 -50.84152603]
[302.92562866 -43.53720856]
[289.05813599 -37.77614975]
[274.62426758 -33.63344955]
[259.81228638 -31.16312218]
[244.81523132 -30.39737129]
[229.82865906 -31.34618187]
[215.04792786 -33.99718094]
[200.66574097 -38.31581116]
[186.86961365 -44.24576950]
[179.41470337 -31.22945976]
[171.95979309 -18.21315002]
[164.50488281 -5.19684124]
[173.69174194 9.30163193]
[174.31216431 26.54311371]
[166.10728455 41.82050705]
[151.23991394 50.91779327]
[133.72508240 51.27338409]
[126.81807709 64.58853912]
[119.91107941 77.90369415]
[130.50993347 93.67587280]
[129.62683105 113.53725433]
[116.56867981 129.67562866]
[95.62937927 135.13148499]
[95.31732178 150.12823486]
[95.16128540 165.12742615]
[95.16128540 180.12742615]
[95.16128540 195.12742615]
[95.16128540 210.12742615]
[95.16128540 225.12742615]
[95.16128540 240.12742615]
[95.16128540 255.12742615]
[95.16128540 270.12741089]
[95.16128540 285.12741089]
[95.16128540 300.12741089]
[109.70117188 304.18875122]
[122.60555267 312.02325439]
[132.91683960 323.04959106]
[139.86985779 336.44949341]
[142.94865417 351.22866821]
[141.92475891 366.29034424]
[136.87416077 380.51687622]
[128.17164612 392.85253906]
[116.46297455 402.38195801]
[102.61703491 408.39797974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 42]
[25 41]
[26 40]
[27 39]
[49 125]
[50 124]
[51 123]
[58 118]
[59 117]
[60 116]
[61 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
