%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAACCCCCGGGGGGGGGGUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCxxxxxxxxxxACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACCCCCCCCCCCUUAAACCCAC\
) } def
/len { sequence length } bind def

/coor [
[47.01375961 493.29129028]
[32.99181747 487.73828125]
[20.79185867 478.87194824]
[11.18078804 467.24963379]
[4.76276255 453.60192871]
[1.94122589 438.78674316]
[2.89354181 423.73535156]
[7.55984688 409.39395142]
[15.64681339 396.66397095]
[26.64608765 386.34570312]
[39.86624527 379.08773804]
[54.47626114 375.34628296]
[54.47626114 360.34628296]
[54.47626114 345.34628296]
[54.47626114 330.34628296]
[54.47626114 315.34628296]
[54.47626114 300.34628296]
[54.47626114 285.34628296]
[54.47626114 270.34628296]
[54.47626114 255.34629822]
[54.47626114 240.34629822]
[54.47626114 225.34629822]
[48.73092651 220.52539062]
[34.63564301 225.65599060]
[37.24026108 210.88357544]
[31.49492645 206.06266785]
[16.72281075 208.66738892]
[1.95069373 211.27210999]
[-12.82142258 213.87683105]
[-18.68673325 228.14573669]
[-31.34836769 236.95973206]
[-46.76604462 237.50631714]
[-60.02004242 229.61105347]
[-66.88105774 215.79330444]
[-65.15975952 200.46226501]
[-55.40541458 188.51002502]
[-40.73059845 183.75047302]
[-25.81798744 187.70239258]
[-15.42614555 199.10472107]
[-0.65402895 196.50000000]
[14.11808777 193.89527893]
[28.89020348 191.29055786]
[15.37854862 184.77632141]
[11.07475853 170.40699768]
[18.78083611 157.53779602]
[33.47970581 154.54727173]
[45.60159683 163.38241577]
[47.25463486 178.29063416]
[54.62087250 165.22393799]
[61.98711395 152.15725708]
[69.35335541 139.09056091]
[76.71958923 126.02385712]
[65.47625732 105.22778320]
[70.05859375 82.03528595]
[88.36606598 67.07781219]
[86.52274323 52.19150543]
[84.67942047 37.30519867]
[82.83609772 22.41889000]
[78.43579865 8.07882977]
[71.61222076 -5.27927017]
[64.78864288 -18.63736916]
[57.96506882 -31.99546814]
[43.20648575 -38.28544235]
[39.06138611 -53.78375244]
[48.70953369 -66.60142517]
[64.74970245 -66.90583801]
[74.87723541 -54.46347427]
[71.32316589 -38.81904602]
[78.14674377 -25.46094513]
[84.97032166 -12.10284519]
[91.79389191 1.25525403]
[93.05423737 -13.69170380]
[99.01683044 -27.45569611]
[109.05863190 -38.59850311]
[122.13037109 -45.95579147]
[136.86614990 -48.75879288]
[151.72621155 -46.71461105]
[165.15779114 -40.03684998]
[175.75741577 -29.42328072]
[182.41751099 -15.98292637]
[184.44215393 -1.12019348]
[181.61979675 13.61188793]
[174.24531555 26.67394066]
[163.08932495 36.70108795]
[149.31750488 42.64558029]
[134.36889648 43.88626862]
[119.80551910 40.29351044]
[107.14910889 32.24271774]
[97.72240448 20.57556534]
[99.56572723 35.46187210]
[101.40904999 50.34818268]
[103.25238037 65.23448944]
[108.95377350 64.61387634]
[114.91449738 64.95641327]
[120.96842194 66.32527924]
[126.93648529 68.75466156]
[139.60800171 60.72766113]
[152.27951050 52.70066452]
[157.18090820 37.42467117]
[172.23063660 31.86724854]
[185.88385010 40.29157639]
[187.66697693 56.23522949]
[176.21212769 67.46759796]
[160.30650330 65.37217712]
[147.63499451 73.39917755]
[134.96348572 81.42617035]
[139.36378479 95.76623535]
[154.35665894 95.30430603]
[169.34954834 94.84238434]
[177.19824219 81.56075287]
[190.99180603 74.65128326]
[206.32879639 76.31874847]
[218.31521606 86.03108215]
[223.12623596 100.68910217]
[219.22669983 115.61548615]
[207.86091614 126.04729462]
[192.65567017 128.65576172]
[178.46290588 122.60853577]
[169.81147766 109.83526611]
[154.81858826 110.29719543]
[139.82569885 110.75911713]
[133.34548950 122.06752014]
[123.90479279 130.45851135]
[112.65424347 135.24917603]
[100.86495972 136.17419434]
[89.78628540 133.39010620]
[82.42004395 146.45678711]
[75.05381012 159.52348328]
[67.68756866 172.59017944]
[60.32132721 185.65687561]
[69.47625732 225.34629822]
[69.47625732 240.34629822]
[69.47625732 255.34629822]
[69.47625732 270.34628296]
[69.47625732 285.34628296]
[69.47625732 300.34628296]
[69.47625732 315.34628296]
[69.47625732 330.34628296]
[69.47625732 345.34628296]
[69.47625732 360.34628296]
[69.47625732 375.34628296]
[84.08627319 379.08773804]
[97.30643463 386.34570312]
[108.30570221 396.66397095]
[116.39266968 409.39395142]
[121.05897522 423.73535156]
[122.01129150 438.78674316]
[119.18975830 453.60192871]
[112.77172852 467.24963379]
[103.16065979 478.87194824]
[90.96070099 487.73828125]
[76.93875885 493.29129028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[26 42]
[27 41]
[28 40]
[29 39]
[48 130]
[49 129]
[50 128]
[51 127]
[52 126]
[55 92]
[56 91]
[57 90]
[58 89]
[59 71]
[60 70]
[61 69]
[62 68]
[96 106]
[97 105]
[98 104]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
