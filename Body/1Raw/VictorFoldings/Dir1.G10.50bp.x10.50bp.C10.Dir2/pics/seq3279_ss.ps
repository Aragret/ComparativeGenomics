%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCCUAGGGGGGGGGGCUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACCCCCCCCCCCAACCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.52041626]
[71.19830322 376.50439453]
[59.48964310 366.97497559]
[50.78712082 354.63928223]
[45.73651886 340.41278076]
[44.71262741 325.35110474]
[47.79142761 310.57192993]
[54.74444962 297.17199707]
[65.05573273 286.14566040]
[77.96011353 278.31115723]
[92.50000000 274.24984741]
[92.50000000 259.24984741]
[92.50000000 244.24984741]
[92.50000000 229.24984741]
[92.50000000 214.24984741]
[92.50000000 199.24984741]
[92.50000000 184.24984741]
[92.50000000 169.24984741]
[92.50000000 154.24984741]
[92.50000000 139.24984741]
[83.90434265 137.54580688]
[75.70691681 133.94329834]
[68.32980347 128.53820801]
[62.17137909 121.52072144]
[57.58518219 113.16928864]
[54.86034393 103.83991241]
[39.86115646 103.68387604]
[24.86196709 103.52783966]
[9.86277771 103.37180328]
[-5.13641024 103.21576691]
[-20.13559914 103.05973053]
[-26.43574905 116.92436218]
[-37.83478165 127.02297211]
[-52.35774612 131.60591125]
[-67.48844910 129.87916565]
[-80.60540771 122.14190674]
[-89.43603516 109.73464966]
[-92.45035553 94.80703735]
[-89.12613678 79.94535828]
[-80.03930664 67.72449493]
[-66.76422119 60.26178741]
[-51.60086823 58.85019302]
[-37.17638779 63.73427963]
[-25.98991203 74.06784821]
[-19.97956276 88.06054688]
[-4.98037386 88.21658325]
[10.01881504 88.37261963]
[25.01800346 88.52865601]
[40.01719284 88.68469238]
[55.01638031 88.84072876]
[60.93634415 75.05834198]
[50.49653244 64.28753662]
[40.05671692 53.51672745]
[29.61690521 42.74591827]
[19.17709351 31.97511101]
[3.81165743 24.80993652]
[6.44323778 8.06147003]
[23.26566124 5.95377064]
[29.94790077 21.53529739]
[40.38771439 32.30610657]
[50.82752609 43.07691574]
[61.26733780 53.84772491]
[71.70715332 64.61853027]
[98.89317322 57.38303375]
[123.30254364 67.53784180]
[127.98421478 52.42517471]
[142.54170227 49.27421570]
[153.42053223 38.94701004]
[164.29936218 28.61980629]
[155.31980896 16.58219337]
[147.82705688 3.56701326]
[141.92626953 -10.24302292]
[137.70030212 -24.65404320]
[135.20846558 -39.46374130]
[134.48574829 -54.46421051]
[135.54229736 -69.44486237]
[138.36328125 -84.19540405]
[142.90910339 -98.50875092]
[149.11593628 -112.18396759]
[156.89663696 -125.02908325]
[166.14199829 -136.86376953]
[176.72222900 -147.52186584]
[188.48878479 -156.85377502]
[201.27648926 -164.72848511]
[214.90580750 -171.03544617]
[229.18544006 -175.68611145]
[243.91488647 -178.61520386]
[258.88739014 -179.78160095]
[273.89276123 -179.16891479]
[288.72033691 -176.78576660]
[303.16195679 -172.66560364]
[317.01489258 -166.86625671]
[330.08468628 -159.46914673]
[342.18783569 -150.57812500]
[353.15441895 -140.31800842]
[362.83053589 -128.83282471]
[371.08029175 -116.28380585]
[377.78787231 -102.84712219]
[382.85916138 -88.71141052]
[386.22296143 -74.07511139]
[387.83200073 -59.14368820]
[387.66372681 -44.12676239]
[385.72048950 -29.23514748]
[382.02960205 -14.67789745]
[376.64282227 -0.65937179]
[369.63580322 12.62362957]
[361.10690308 24.98463440]
[351.17590332 36.25011444]
[339.98214722 46.26191711]
[327.68280029 54.87949371]
[314.45053101 61.98186874]
[300.47113037 67.46933746]
[285.94079590 71.26485443]
[271.06353760 73.31514740]
[256.04821777 73.59143066]
[241.10560608 72.08982849]
[226.44549561 68.83141327]
[212.27366638 63.86193085]
[198.78909302 57.25114441]
[186.18104553 49.09186554]
[174.62657166 39.49863052]
[163.74774170 49.82583618]
[152.86891174 60.15304184]
[148.96537781 74.52703094]
[133.62974548 78.41666412]
[138.76516724 90.30142975]
[139.83131409 103.20428467]
[136.71624756 115.77077484]
[129.74699402 126.68177032]
[119.65512085 134.79190063]
[107.50000000 139.24984741]
[107.50000000 154.24984741]
[107.50000000 169.24984741]
[107.50000000 184.24984741]
[107.50000000 199.24984741]
[107.50000000 214.24984741]
[107.50000000 229.24984741]
[107.50000000 244.24984741]
[107.50000000 259.24984741]
[107.50000000 274.24984741]
[122.03988647 278.31115723]
[134.94427490 286.14566040]
[145.25555420 297.17199707]
[152.20857239 310.57192993]
[155.28736877 325.35110474]
[154.26348877 340.41278076]
[149.21287537 354.63928223]
[140.51036072 366.97497559]
[128.80169678 376.50439453]
[114.95575714 382.52041626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[65 125]
[67 123]
[68 122]
[69 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
