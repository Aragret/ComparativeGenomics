%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGUACCCACGGGGGGGGGGGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUxxxxxxxxxxUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCCCCCCCCCCCAAUUACCCAC\
) } def
/len { sequence length } bind def

/coor [
[48.33033752 445.32672119]
[34.30839539 439.77371216]
[22.10843658 430.90737915]
[12.49736500 419.28506470]
[6.07933998 405.63735962]
[3.25780320 390.82217407]
[4.21011925 375.77078247]
[8.87642384 361.42938232]
[16.96339035 348.69940186]
[27.96266556 338.38113403]
[41.18282318 331.12316895]
[55.79283524 327.38174438]
[55.79283524 312.38174438]
[55.79283524 297.38174438]
[55.79283524 282.38174438]
[55.79283524 267.38174438]
[55.79283524 252.38172913]
[55.79283524 237.38172913]
[55.79283524 222.38172913]
[55.79283524 207.38172913]
[55.79283524 192.38172913]
[49.85442352 187.80076599]
[44.81102371 201.92747498]
[29.81722260 201.49629211]
[25.59399223 187.10308838]
[37.97760010 178.63882446]
[32.03918839 174.05786133]
[17.53056335 177.86572266]
[3.02193880 181.67356873]
[-6.27975893 194.74484253]
[-22.30603409 195.47837830]
[-32.76289749 183.31147766]
[-29.62874222 167.57754517]
[-15.30782127 160.34629822]
[-0.78591996 167.16494751]
[13.72270584 163.35708618]
[28.23133087 159.54924011]
[47.18958664 161.99607849]
[59.30216980 172.47930908]
[64.43247223 158.38392639]
[69.56277466 144.28852844]
[66.64507294 129.68249512]
[78.63569641 119.36088562]
[83.76599884 105.26550293]
[80.70760345 90.58060455]
[70.37670135 79.70528412]
[60.04579544 68.82997131]
[49.71489334 57.95465851]
[39.38399124 47.07934570]
[29.05308914 36.20403290]
[18.72218513 25.32871819]
[4.38355112 30.45935631]
[-10.80177212 29.30790520]
[-24.20283508 22.07386017]
[-33.49782181 10.01056576]
[-37.07632065 -4.79194212]
[-34.31833649 -19.76903725]
[-25.70170403 -32.32585144]
[-12.71930695 -40.28683472]
[2.37957430 -42.27270126]
[16.97896767 -37.93938828]
[28.54944038 -28.03767014]
[35.08633804 -14.28307629]
[35.45710373 0.94132555]
[29.59749985 14.99781609]
[39.92840195 25.87313080]
[50.25930405 36.74844360]
[60.59020615 47.62375641]
[70.92111206 58.49907303]
[81.25201416 69.37438202]
[91.58291626 80.24970245]
[87.73059845 65.75281525]
[83.87828064 51.25593185]
[75.41010284 38.87489700]
[73.75362396 23.96664238]
[79.29746246 10.02871132]
[90.74099731 0.33100984]
[105.39953613 -2.85133672]
[119.83410645 1.22826529]
[130.65829468 11.61272240]
[135.33268738 25.86579132]
[132.76066589 40.64363480]
[123.54714966 52.47811508]
[118.80969238 66.71035004]
[114.07224274 80.94258881]
[125.05304718 70.72387695]
[129.88449097 55.65843582]
[144.47254944 52.65213394]
[155.45335388 42.43342590]
[166.43415833 32.21472168]
[171.39289856 14.51043797]
[188.59748840 11.18681526]
[199.36616516 0.74480635]
[201.04992676 -15.20964527]
[214.65039062 -23.71886063]
[229.73446655 -18.25529861]
[234.73091125 -3.01013541]
[225.80691528 10.32184315]
[209.80816650 11.51348495]
[199.03948975 21.95549393]
[198.52729797 34.07984543]
[189.58720398 42.86880875]
[176.65286255 43.19552231]
[165.67205811 53.41423035]
[154.69126892 63.63293839]
[150.64523315 77.96747589]
[135.27175903 81.70468140]
[124.29095459 91.92339325]
[126.71086121 99.02227020]
[131.55067444 113.22001648]
[133.97058105 120.31889343]
[148.90660095 121.70291901]
[158.32795715 109.48647308]
[172.86607361 104.32444000]
[187.88189697 107.86400604]
[198.58393860 118.97570801]
[201.55718994 134.11384583]
[195.85293579 148.44789124]
[183.29135132 157.40391541]
[167.88079834 158.12405396]
[154.53874207 150.37854004]
[147.52256775 136.63893127]
[132.58656311 135.25491333]
[114.80926514 132.31120300]
[102.61231995 122.93009186]
[97.86138916 110.39579773]
[92.73108673 124.49118805]
[95.28182983 140.10542297]
[83.65816498 149.41883850]
[78.52786255 163.51422119]
[73.39756012 177.60961914]
[70.79283905 192.38172913]
[70.79283905 207.38172913]
[70.79283905 222.38172913]
[70.79283905 237.38172913]
[70.79283905 252.38172913]
[70.79283905 267.38174438]
[70.79283905 282.38174438]
[70.79283905 297.38174438]
[70.79283905 312.38174438]
[70.79283905 327.38174438]
[85.40284729 331.12316895]
[98.62300873 338.38113403]
[109.62228394 348.69940186]
[117.70925140 361.42938232]
[122.37555695 375.77078247]
[123.32787323 390.82217407]
[120.50633240 405.63735962]
[114.08831024 419.28506470]
[104.47723389 430.90737915]
[92.27728271 439.77371216]
[78.25533295 445.32672119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 37]
[28 36]
[29 35]
[39 131]
[40 130]
[41 129]
[43 127]
[44 126]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[85 108]
[86 107]
[88 105]
[89 104]
[90 103]
[92 100]
[93 99]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
