%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUCACCUGGGGGGGGGGCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGAxxxxxxxxxxAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGCCCCCCCCCCUAUUUCAACU\
) } def
/len { sequence length } bind def

/coor [
[93.06728363 397.83102417]
[79.22134399 391.81500244]
[67.51268005 382.28558350]
[58.81015778 369.94992065]
[53.75955582 355.72338867]
[52.73566437 340.66171265]
[55.81446457 325.88253784]
[62.76748657 312.48260498]
[73.07877350 301.45629883]
[85.98315430 293.62176514]
[100.52304077 289.56045532]
[100.52304077 274.56045532]
[100.52304077 259.56045532]
[100.52304077 244.56047058]
[100.52304077 229.56047058]
[100.52304077 214.56047058]
[100.52304077 199.56047058]
[100.52304077 184.56047058]
[100.52304077 169.56047058]
[100.52304077 154.56047058]
[100.52304077 139.56047058]
[85.44635773 135.92948914]
[73.21968079 126.91208649]
[65.62008667 114.12278748]
[63.63241577 99.69769287]
[67.32704163 85.93914795]
[75.88651276 74.94839478]
[87.77086639 68.30487823]
[85.59402466 53.46366882]
[83.41719055 38.62246323]
[81.24035645 23.78125763]
[76.87322998 15.68310547]
[79.17594147 8.60898781]
[77.30833435 -6.27429247]
[75.44071960 -21.15757179]
[72.95559692 -35.95027924]
[69.85727692 -50.62680435]
[66.75895691 -65.30332947]
[51.10416412 -66.45606232]
[36.41722870 -71.95519257]
[23.87823486 -81.35018921]
[14.49223900 -93.87781525]
[9.00870895 -108.52417755]
[7.86168385 -124.10673523]
[11.13542938 -139.36982727]
[18.55830574 -153.08580017]
[29.52528381 -164.15379333]
[43.14725876 -171.68809509]
[39.74428177 -186.29698181]
[36.34130478 -200.90588379]
[32.78654099 -215.47857666]
[29.08038139 -230.01351929]
[25.37421989 -244.54844666]
[19.45425606 -258.33084106]
[11.46434021 -271.02575684]
[3.47442389 -283.72070312]
[-11.77891731 -282.45809937]
[-25.86731148 -288.43936157]
[-35.55334854 -300.29006958]
[-38.61125183 -315.28701782]
[-34.33832932 -329.98397827]
[-23.71647644 -341.00372314]
[-9.18651104 -345.81399536]
[5.91268444 -343.30941772]
[18.11142731 -334.06555176]
[24.60653305 -320.20654297]
[23.90547562 -304.91708374]
[16.16935349 -291.71060181]
[24.15926933 -279.01568604]
[32.14918518 -266.32073975]
[32.36671448 -281.31918335]
[37.89368439 -295.26379395]
[48.01034164 -306.33868408]
[61.39925385 -313.10162354]
[76.31683350 -314.67187500]
[90.82044983 -310.84497070]
[103.02136230 -302.11926270]
[111.33069611 -289.63107300]
[114.66638184 -275.00668335]
[112.59401703 -260.15051270]
[105.38348389 -246.99725342]
[93.97377014 -237.25978088]
[79.85070801 -232.20614624]
[64.85347748 -232.49447632]
[50.93510056 -238.08720398]
[39.90915680 -248.25460815]
[43.61531830 -233.71968079]
[47.32147980 -219.18473816]
[52.05232620 -213.44325256]
[50.95019531 -204.30885315]
[54.35317612 -189.69996643]
[57.75615311 -175.09106445]
[72.11161041 -174.56694031]
[85.85025024 -170.32981873]
[98.02782440 -162.66432190]
[107.80565643 -152.09091187]
[114.50841522 -139.33056641]
[117.67074585 -125.25563049]
[117.06957245 -110.83018494]
[112.73981476 -97.04397583]
[104.97245789 -84.84455872]
[94.29496765 -75.07212067]
[81.43547821 -68.40164948]
[84.53380585 -53.72512817]
[87.63212585 -39.04860306]
[89.97646332 -37.40196609]
[91.78751373 -34.69751358]
[92.64759064 -31.14193153]
[92.22472382 -27.09319878]
[90.32399750 -23.02518463]
[92.19161224 -8.14190578]
[94.05922699 6.74137449]
[96.08155823 21.60442162]
[98.25839233 36.44562531]
[100.43523407 51.28683090]
[102.61206818 66.12803650]
[119.10951233 70.23609161]
[132.15640259 82.17114258]
[138.16311646 99.52468109]
[135.06851196 118.31675720]
[148.45480347 125.08486938]
[161.84107971 131.85298157]
[178.17607117 130.40385437]
[187.37580872 143.97946167]
[179.97639465 158.61436462]
[163.58970642 159.25344849]
[155.07296753 145.23927307]
[141.68667603 138.47116089]
[128.30039978 131.70303345]
[115.52304077 139.56047058]
[115.52304077 154.56047058]
[115.52304077 169.56047058]
[115.52304077 184.56047058]
[115.52304077 199.56047058]
[115.52304077 214.56047058]
[115.52304077 229.56047058]
[115.52304077 244.56047058]
[115.52304077 259.56045532]
[115.52304077 274.56045532]
[115.52304077 289.56045532]
[130.06292725 293.62176514]
[142.96730042 301.45629883]
[153.27859497 312.48260498]
[160.23161316 325.88253784]
[163.31040955 340.66171265]
[162.28651428 355.72338867]
[157.23591614 369.94992065]
[148.53340149 382.28558350]
[136.82473755 391.81500244]
[122.97879028 397.83102417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 116]
[29 115]
[30 114]
[31 113]
[33 112]
[34 111]
[35 110]
[36 105]
[37 104]
[38 103]
[48 92]
[49 91]
[50 90]
[51 88]
[52 87]
[53 86]
[54 70]
[55 69]
[56 68]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
