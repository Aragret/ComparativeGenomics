%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCUCCCCGGGGGGGGGGCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAxxxxxxxxxxCCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACCCCCCCCCCCACCCCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.23557281 384.17272949]
[66.21362305 378.61972046]
[54.01366806 369.75338745]
[44.40259933 358.13107300]
[37.98457336 344.48336792]
[35.16303635 329.66818237]
[36.11535263 314.61682129]
[40.78165817 300.27539062]
[48.86862183 287.54544067]
[59.86789703 277.22717285]
[73.08805847 269.96917725]
[87.69806671 266.22775269]
[87.69806671 251.22775269]
[87.69806671 236.22775269]
[87.69806671 221.22775269]
[87.69806671 206.22775269]
[87.69806671 191.22775269]
[87.69806671 176.22775269]
[87.69806671 161.22775269]
[87.69806671 146.22775269]
[87.69806671 131.22775269]
[73.80784607 103.30582428]
[88.72341919 84.41549683]
[85.36416626 69.79648590]
[82.00490570 55.17747879]
[76.87460327 41.08208847]
[70.05102539 27.72398949]
[63.22745132 14.36589050]
[56.40387726 1.00779128]
[49.03763580 -12.05890369]
[41.14115524 -24.81216049]
[33.24467087 -37.56541824]
[19.75748634 -30.97190094]
[5.68081331 -25.75405884]
[-8.84544373 -21.96374702]
[-23.67691422 -19.63863945]
[-38.66618729 -18.80184174]
[-53.66429520 -19.46167374]
[-68.52217102 -21.61157417]
[-83.09215546 -25.23017883]
[-97.22943115 -30.28152275]
[-110.79349518 -36.71540070]
[-123.64953613 -44.46786880]
[-135.66978455 -53.46187592]
[-146.73477173 -63.60803986]
[-156.73454285 -74.80551147]
[-165.56968689 -86.94300842]
[-173.15240479 -99.89989471]
[-179.40733337 -113.54740143]
[-184.27230835 -127.74989319]
[-187.69898987 -142.36619568]
[-189.65328979 -157.25106812]
[-190.11581421 -172.25656128]
[-189.08195496 -187.23353577]
[-186.56199646 -202.03314209]
[-182.58096313 -216.50828552]
[-177.17843628 -230.51512146]
[-170.40811157 -243.91442871]
[-162.33728027 -256.57302856]
[-153.04614258 -268.36511230]
[-142.62704468 -279.17349243]
[-131.18354797 -288.89074707]
[-118.82937622 -297.42028809]
[-105.68731689 -304.67733765]
[-91.88798523 -310.58978271]
[-77.56852722 -315.09887695]
[-62.87126541 -318.15975952]
[-47.94226837 -319.74206543]
[-32.92991257 -319.83001709]
[-17.98339844 -318.42279053]
[-3.25127625 -315.53433228]
[11.12003422 -311.19335938]
[24.98770142 -305.44302368]
[38.21390152 -298.34045410]
[50.66717529 -289.95626831]
[62.22376251 -280.37380981]
[72.76879883 -269.68826294]
[82.19747925 -258.00585938]
[90.41610718 -245.44270325]
[97.34298706 -232.12365723]
[102.90927124 -218.18109131]
[107.05965424 -203.75358582]
[109.75287628 -188.98452759]
[110.96216583 -174.02069092]
[110.67551422 -159.01081848]
[108.89576721 -144.10406494]
[105.64060974 -129.44860840]
[100.94239807 -115.19008636]
[94.84782410 -101.47021484]
[87.41745758 -88.42536163]
[78.72515106 -76.18516541]
[68.85729218 -64.87127686]
[57.91195679 -54.59614944]
[45.99792862 -45.46189880]
[53.89440918 -32.70864487]
[61.79089355 -19.95538521]
[64.55178833 -19.20139885]
[67.17008209 -17.27428436]
[69.18448639 -14.22651577]
[70.16284180 -10.28109169]
[69.76197815 -5.81578398]
[76.58554840 7.54231548]
[83.40912628 20.90041542]
[90.23270416 34.25851440]
[92.43355560 19.42085266]
[100.75566101 6.94116354]
[113.60746002 -0.79389817]
[128.53114319 -2.30505729]
[142.67266846 2.69668484]
[153.32756042 13.25477982]
[158.45814514 27.35006714]
[157.08323669 42.28692245]
[149.46577454 55.20877457]
[137.06254578 63.64441681]
[122.24558258 65.98058319]
[107.84852600 61.77050400]
[96.62390900 51.81821823]
[99.98316956 66.43722534]
[103.34243011 81.05623627]
[120.43602753 83.28695679]
[133.55293274 100.84322357]
[147.36651611 106.69001007]
[163.56600952 104.13886261]
[173.66328430 117.06082153]
[167.27113342 132.16288757]
[150.96524048 133.90934753]
[141.51972961 120.50359344]
[127.70613861 114.65680695]
[121.45412445 118.79953766]
[122.37756348 133.77108765]
[108.95008850 127.08501434]
[102.69806671 131.22775269]
[102.69806671 146.22775269]
[102.69806671 161.22775269]
[102.69806671 176.22775269]
[102.69806671 191.22775269]
[102.69806671 206.22775269]
[102.69806671 221.22775269]
[102.69806671 236.22775269]
[102.69806671 251.22775269]
[102.69806671 266.22775269]
[117.30808258 269.96917725]
[130.52824402 277.22717285]
[141.52751160 287.54544067]
[149.61448669 300.27539062]
[154.28079224 314.61682129]
[155.23310852 329.66818237]
[152.41156006 344.48336792]
[145.99354553 358.13107300]
[136.38247681 369.75338745]
[124.18251038 378.61972046]
[110.16056824 384.17272949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 119]
[24 118]
[25 117]
[26 104]
[27 103]
[28 102]
[29 101]
[30 96]
[31 95]
[32 94]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
