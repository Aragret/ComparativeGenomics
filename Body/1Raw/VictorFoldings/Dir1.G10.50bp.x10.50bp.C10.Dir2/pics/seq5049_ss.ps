%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUCUUCGGGGGGGGGGUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCxxxxxxxxxxUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCCCCCCCCCCCUGCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.43304443]
[71.19830322 384.41699219]
[59.48964310 374.88757324]
[50.78712082 362.55191040]
[45.73651886 348.32540894]
[44.71262741 333.26370239]
[47.79142761 318.48455811]
[54.74444962 305.08462524]
[65.05573273 294.05828857]
[77.96011353 286.22378540]
[92.50000000 282.16247559]
[92.50000000 267.16247559]
[92.50000000 252.16247559]
[92.50000000 237.16247559]
[92.50000000 222.16247559]
[92.50000000 207.16247559]
[92.50000000 192.16247559]
[92.50000000 177.16247559]
[92.50000000 162.16247559]
[92.50000000 147.16247559]
[92.50000000 132.16247559]
[83.43433380 128.57015991]
[75.81295776 122.48693085]
[70.30033875 114.44316864]
[67.37710571 105.14017487]
[52.41685486 104.04886627]
[37.45660400 102.95755005]
[22.49635696 101.86624146]
[17.55126381 116.12136078]
[9.08437157 128.61032104]
[-2.32703471 138.48161316]
[-15.90490627 145.06216431]
[-30.72348213 147.90333557]
[-45.77240372 146.81140137]
[-60.02561569 141.86080933]
[-72.51130676 133.38909912]
[-82.37818146 121.97387695]
[-88.95349884 108.39346313]
[-91.78894806 93.57379150]
[-90.69120026 78.52529144]
[-85.73509979 64.27399445]
[-77.25856781 51.79157639]
[-65.83953857 41.92910767]
[-52.25659180 35.35903168]
[-37.43582916 32.52930450]
[-22.38775253 33.63286591]
[-8.13836956 38.59446716]
[4.34077549 47.07582092]
[14.19883251 58.49865341]
[20.76366425 72.08413696]
[23.58766747 86.90599060]
[38.54791641 87.99730682]
[53.50816345 89.08861542]
[68.46841431 90.17992401]
[73.81954193 79.86896515]
[82.41001129 72.04884338]
[93.17691040 67.68714905]
[104.78803253 67.32356262]
[115.80673218 71.00306702]
[125.78945923 59.80730057]
[135.77218628 48.61153412]
[145.75491333 37.41577148]
[155.73764038 26.22000504]
[165.72036743 15.02423859]
[175.70309448 3.82847261]
[163.31336975 12.28392696]
[148.82414246 16.16497231]
[133.86679077 15.03463459]
[120.12538147 9.02018166]
[109.14707947 -1.20121086]
[102.16794586 -14.47869968]
[99.97377777 -29.31735229]
[102.81161499 -44.04646301]
[110.36194611 -57.00765610]
[121.77465820 -66.74161530]
[135.76478577 -72.15236664]
[150.75715637 -72.63072205]
[165.06376648 -68.12281799]
[177.07377625 -59.13619614]
[185.43501282 -46.68268204]
[189.20629883 -32.16128159]
[200.70809937 -41.78981018]
[212.20989990 -51.41833496]
[223.71170044 -61.04686356]
[235.21350098 -70.67538452]
[246.71531677 -80.30391693]
[258.21710205 -89.93244171]
[269.71893311 -99.56096649]
[281.22073364 -109.18949127]
[292.72253418 -118.81801605]
[288.92343140 -133.60076904]
[291.92294312 -148.56623840]
[301.12557983 -160.74304199]
[314.70407104 -167.71347046]
[329.96246338 -168.09352112]
[343.87115479 -161.80773926]
[353.66857910 -150.10418701]
[357.40945435 -135.30659485]
[354.35101318 -120.35304260]
[345.10049438 -108.21257019]
[331.49465942 -101.29567719]
[316.23489380 -100.97571564]
[302.35104370 -107.31621552]
[290.84924316 -97.68769073]
[279.34744263 -88.05916595]
[267.84564209 -78.43063354]
[256.34384155 -68.80210876]
[244.84204102 -59.17358398]
[233.34022522 -49.54505920]
[221.83842468 -39.91653061]
[210.33662415 -30.28800583]
[198.83482361 -20.65947914]
[202.99270630 -6.24726343]
[217.85575867 -4.22492886]
[232.82049561 -10.93229103]
[245.95129395 -1.10814011]
[243.74032593 15.14128017]
[228.46203613 21.09995842]
[215.83341980 10.63811779]
[200.97036743 8.61578369]
[186.89884949 13.81119919]
[176.91612244 25.00696564]
[166.93339539 36.20273209]
[156.95066833 47.39849472]
[146.96794128 58.59426117]
[136.98522949 69.79003143]
[127.00249481 80.98579407]
[133.00125122 101.26200867]
[125.47150421 121.02088165]
[107.50000000 132.16247559]
[107.50000000 147.16247559]
[107.50000000 162.16247559]
[107.50000000 177.16247559]
[107.50000000 192.16247559]
[107.50000000 207.16247559]
[107.50000000 222.16247559]
[107.50000000 237.16247559]
[107.50000000 252.16247559]
[107.50000000 267.16247559]
[107.50000000 282.16247559]
[122.03988647 286.22378540]
[134.94427490 294.05828857]
[145.25555420 305.08462524]
[152.20857239 318.48455811]
[155.28736877 333.26370239]
[154.26348877 348.32540894]
[149.21287537 362.55191040]
[140.51036072 374.88757324]
[128.80169678 384.41699219]
[114.95575714 390.43304443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 54]
[26 53]
[27 52]
[28 51]
[59 127]
[60 126]
[61 125]
[62 124]
[63 123]
[64 122]
[65 121]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
