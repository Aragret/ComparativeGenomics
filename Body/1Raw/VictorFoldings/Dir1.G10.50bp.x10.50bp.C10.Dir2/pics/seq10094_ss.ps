%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCAUCGGGGGGGGGGGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUCxxxxxxxxxxAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCCCCCCCCCCCUACACAUCG\
) } def
/len { sequence length } bind def

/coor [
[81.02164459 344.11355591]
[68.46796417 335.75558472]
[58.38784409 324.53765869]
[51.41492462 311.16494751]
[47.98752594 296.47808838]
[48.32110596 281.40029907]
[52.39468765 266.87939453]
[59.95220947 253.82817078]
[70.51859283 243.06701660]
[83.42962646 235.27239990]
[97.87371826 230.93431091]
[97.25789642 215.94696045]
[96.64206696 200.95960999]
[96.02624512 185.97224426]
[95.41041565 170.98489380]
[94.79459381 155.99754333]
[94.17876434 141.01019287]
[93.56294250 126.02283478]
[92.94711304 111.03548431]
[91.71650696 96.08605194]
[89.87317657 81.19973755]
[88.02985382 66.31343079]
[86.18653107 51.42712402]
[71.21021271 52.35097885]
[56.20542526 52.35112000]
[41.22908783 51.42755127]
[26.33801079 49.58377075]
[11.58868408 46.82678223]
[-2.96294427 43.16703415]
[-17.26167488 38.61841202]
[-31.25326729 33.19817352]
[-44.88464737 26.92687798]
[-58.10410309 19.82831573]
[-70.86148834 11.92941093]
[-83.10842133 3.26012921]
[-94.79842377 -6.14664364]
[-105.88716888 -16.25522423]
[-116.33258820 -27.02726746]
[-126.09505463 -38.42191315]
[-135.13752747 -50.39593124]
[-143.42573547 -62.90390396]
[-150.92820740 -75.89838409]
[-157.61650085 -89.33007812]
[-163.46522522 -103.14804077]
[-168.45222473 -117.29984283]
[-172.55856323 -131.73181152]
[-175.76864624 -146.38919067]
[-178.07034302 -161.21640015]
[-179.45487976 -176.15716553]
[-179.91702271 -191.15483093]
[-179.45501709 -206.15251160]
[-178.07060242 -221.09329224]
[-175.76905823 -235.92051697]
[-172.55909729 -250.57792664]
[-168.45289612 -265.00994873]
[-163.46603394 -279.16177368]
[-157.61741638 -292.97979736]
[-150.92924500 -306.41156006]
[-143.42689514 -319.40609741]
[-135.13880920 -331.91415405]
[-126.09643555 -343.88824463]
[-116.33407593 -355.28298950]
[-105.88875580 -366.05511475]
[-94.80010223 -376.16378784]
[-83.11017609 -385.57067871]
[-70.86333466 -394.24008179]
[-58.10601425 -402.13909912]
[-44.88662338 -409.23776245]
[-31.25530052 -415.50918579]
[-17.26375580 -420.92956543]
[-2.96506715 -425.47830200]
[11.58652878 -429.13818359]
[26.33583069 -431.89532471]
[41.22689056 -433.73922729]
[56.20321655 -434.66293335]
[71.20800781 -434.66293335]
[86.18433380 -433.73919678]
[101.07539368 -431.89529419]
[115.82469177 -429.13815308]
[130.37628174 -425.47827148]
[144.67497253 -420.92950439]
[158.66650391 -415.50912476]
[172.29782104 -409.23770142]
[185.51721191 -402.13900757]
[198.27452087 -394.23995972]
[210.52136230 -385.57055664]
[222.21127319 -376.16366577]
[233.29992676 -366.05499268]
[243.74523926 -355.28283691]
[253.50758362 -343.88809204]
[262.54995728 -331.91400146]
[270.83804321 -319.40594482]
[278.34036255 -306.41137695]
[285.02853394 -292.97961426]
[290.87713623 -279.16162109]
[295.86398315 -265.00976562]
[299.97018433 -250.57774353]
[303.18011475 -235.92033386]
[305.48165894 -221.09310913]
[306.86605835 -206.15232849]
[307.32806396 -191.15464783]
[306.86590576 -176.15698242]
[305.48135376 -161.21620178]
[303.17965698 -146.38900757]
[299.96954346 -131.73162842]
[295.86318970 -117.29965973]
[290.87619019 -103.14786530]
[285.02746582 -89.32991028]
[278.33914185 -75.89822388]
[270.83666992 -62.90374374]
[262.54846191 -50.39577866]
[253.50596619 -38.42176437]
[243.74349976 -27.02712822]
[233.29806519 -16.25509453]
[222.20932007 -6.14652157]
[210.51930237 3.26024222]
[198.27236938 11.92951393]
[185.51496887 19.82840919]
[172.29551697 26.92696190]
[158.66412354 33.19824600]
[144.67253113 38.61847687]
[130.37379456 43.16708374]
[115.82216644 46.82682037]
[101.07283783 49.58380127]
[102.91616058 64.47010803]
[104.75948334 79.35641479]
[106.60281372 94.24272156]
[108.90583801 96.34253693]
[110.47456360 99.34695435]
[110.96511078 102.97751617]
[110.14447021 106.83005524]
[107.93447113 110.41965485]
[108.55029297 125.40701294]
[109.16612244 140.39436340]
[109.78194427 155.38171387]
[110.39777374 170.36906433]
[111.01359558 185.35643005]
[111.62942505 200.34378052]
[112.24524689 215.33113098]
[112.86106873 230.31848145]
[127.61237335 233.45695496]
[141.11935425 240.16604614]
[152.53297424 250.02404785]
[161.13575745 262.41125488]
[166.38691711 276.54901123]
[167.95635986 291.54861450]
[165.74543762 306.46713257]
[159.89312744 320.36682129]
[150.76731873 332.37393188]
[138.94165039 341.73364258]
[125.15951538 347.85766602]
[110.28724670 350.36096191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 127]
[21 126]
[22 125]
[23 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
