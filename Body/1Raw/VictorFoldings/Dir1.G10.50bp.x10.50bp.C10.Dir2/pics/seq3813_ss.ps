%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCAUCGGGGGGGGGGAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUxxxxxxxxxxGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCCCCCCCCCCCUAACCAUC\
) } def
/len { sequence length } bind def

/coor [
[82.87475586 440.02856445]
[69.02881622 434.01251221]
[57.32015610 424.48309326]
[48.61763000 412.14743042]
[43.56702805 397.92092896]
[42.54314041 382.85922241]
[45.62193680 368.08007812]
[52.57495880 354.68014526]
[62.88624191 343.65380859]
[75.79062653 335.81930542]
[90.33051300 331.75799561]
[90.33051300 316.75799561]
[90.33051300 301.75799561]
[90.33051300 286.75799561]
[90.33051300 271.75799561]
[90.33051300 256.75799561]
[90.33051300 241.75799561]
[90.33051300 226.75799561]
[90.33051300 211.75799561]
[90.33051300 196.75799561]
[87.60013580 192.76792908]
[87.39163208 187.00704956]
[90.65554810 181.13726807]
[91.27952576 166.15025330]
[91.90350342 151.16323853]
[92.52748108 136.17620850]
[93.15145874 121.18920135]
[85.41870880 134.04238892]
[81.55796051 148.53703308]
[70.65036774 158.83384705]
[55.95753479 161.85388184]
[41.87291718 156.69409180]
[32.60810852 144.89733887]
[30.93347931 129.99110413]
[37.34977722 116.43267822]
[49.93839645 108.27628326]
[64.93444824 107.96070862]
[79.25403595 103.49423981]
[64.54607391 100.54875946]
[49.83811569 97.60327148]
[34.48414612 103.36414337]
[21.99168968 92.74008942]
[25.21191597 76.66021729]
[40.83213043 71.66613007]
[52.78359604 82.89530945]
[67.49155426 85.84079742]
[82.19951630 88.78627777]
[95.44210815 81.74114227]
[101.21837616 67.89792633]
[106.99465179 54.05470657]
[112.77091980 40.21149063]
[118.54719543 26.36827087]
[124.32347107 12.52505398]
[111.23419952 3.59406471]
[100.26797485 -7.83664274]
[91.89310455 -21.27569580]
[86.46656036 -36.14602661]
[84.21875763 -51.80965805]
[85.24381256 -67.59505463]
[89.49555969 -82.82594299]
[96.78963470 -96.85026550]
[106.81150818 -109.06808472]
[119.12997437 -118.95729065]
[133.21578979 -126.09584808]
[148.46432495 -130.17987061]
[164.22158813 -131.03651428]
[179.81224060 -128.63130188]
[185.00764465 -142.70281982]
[190.20306396 -156.77433777]
[195.39848328 -170.84585571]
[182.71871948 -178.97221375]
[172.08264160 -189.63465881]
[163.98771667 -202.33451843]
[158.81257629 -216.47778320]
[156.79925537 -231.40295410]
[158.04193115 -246.41194153]
[162.48246765 -260.80276489]
[169.91319275 -273.90231323]
[179.98654175 -285.09793091]
[192.23136902 -293.86596680]
[206.07496643 -299.79629517]
[220.86982727 -302.61160278]
[235.92399597 -302.18014526]
[250.53335571 -298.52215576]
[264.01458740 -291.80868530]
[275.73715210 -282.35375977]
[285.15277100 -270.59960938]
[291.82104492 -257.09597778]
[295.43008423 -242.47445679]
[295.81112671 -227.41893005]
[292.94631958 -212.63356018]
[286.96966553 -198.80990601]
[278.16067505 -186.59449768]
[266.93139648 -176.55870056]
[253.80702209 -169.17189026]
[239.40141296 -164.77957153]
[224.38833618 -163.58715820]
[209.47000122 -165.65045166]
[204.27458191 -151.57891846]
[199.07917786 -137.50740051]
[193.88375854 -123.43589020]
[206.03683472 -116.08477020]
[216.61784363 -106.60317993]
[225.25811768 -95.31931305]
[231.65626526 -82.62419891]
[235.58857727 -68.95815277]
[236.91691589 -54.79546738]
[235.59355164 -40.62800980]
[231.66287231 -26.94809914]
[225.25990295 -14.23140335]
[216.60565186 -2.92041326]
[205.99951172 6.59096670]
[193.80885315 13.97113037]
[180.45635986 18.96233368]
[166.40531921 21.38969040]
[152.14361572 21.16731071]
[138.16668701 18.30132675]
[132.39041138 32.14454269]
[126.61414337 45.98776245]
[120.83786774 59.83097839]
[115.06159210 73.67419434]
[109.28532410 87.51741791]
[116.14183044 93.27022552]
[119.22631836 102.73351288]
[116.63584137 113.38304901]
[108.13847351 121.81317902]
[107.51450348 136.80018616]
[106.89052582 151.78720093]
[106.26654816 166.77423096]
[105.64257050 181.76124573]
[105.33051300 196.75799561]
[105.33051300 211.75799561]
[105.33051300 226.75799561]
[105.33051300 241.75799561]
[105.33051300 256.75799561]
[105.33051300 271.75799561]
[105.33051300 286.75799561]
[105.33051300 301.75799561]
[105.33051300 316.75799561]
[105.33051300 331.75799561]
[119.87039948 335.81930542]
[132.77478027 343.65380859]
[143.08605957 354.68014526]
[150.03907776 368.08007812]
[153.11788940 382.85922241]
[152.09399414 397.92092896]
[147.04339600 412.14743042]
[138.34086609 424.48309326]
[126.63220215 434.01251221]
[112.78627014 440.02856445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[38 47]
[39 46]
[40 45]
[48 122]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[67 101]
[68 100]
[69 99]
[70 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
