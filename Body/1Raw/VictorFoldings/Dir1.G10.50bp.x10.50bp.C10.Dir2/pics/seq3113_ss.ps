%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAUGAUAGGGGGGGGGGUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUxxxxxxxxxxUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGACCCCCCCCCCGUAAAUAAUA\
) } def
/len { sequence length } bind def

/coor [
[105.01346588 482.15679932]
[91.16752625 476.14074707]
[79.45886993 466.61132812]
[70.75634003 454.27566528]
[65.70574188 440.04916382]
[64.68185425 424.98745728]
[67.76065063 410.20831299]
[74.71366882 396.80838013]
[85.02495575 385.78204346]
[97.92933655 377.94754028]
[112.46922302 373.88623047]
[112.46922302 358.88623047]
[112.46922302 343.88623047]
[112.46922302 328.88623047]
[112.46922302 313.88623047]
[112.46922302 298.88623047]
[112.46922302 283.88623047]
[112.46922302 268.88623047]
[112.46922302 253.88623047]
[112.46922302 238.88623047]
[112.46922302 223.88623047]
[112.46922302 208.88623047]
[112.31318665 193.88703918]
[112.00112915 178.89028931]
[111.68907166 163.89353943]
[109.05020905 149.12747192]
[104.14865875 134.95091248]
[99.24710846 120.77436066]
[86.00461578 115.37108612]
[79.38700867 102.69172668]
[64.81430054 99.13696289]
[50.24160004 95.58219910]
[32.72836685 101.17385101]
[20.49222374 88.63285065]
[5.84872293 85.38202667]
[-2.54661345 98.02650452]
[-14.94499969 106.78118134]
[-29.66965485 110.46207428]
[-44.72919083 108.57136536]
[-58.08692932 101.36475372]
[-67.93634796 89.81687164]
[-72.94538879 75.48949432]
[-72.43662262 60.32025909]
[-66.47885895 46.36069489]
[-55.87783051 35.49871063]
[-42.06724548 29.20330620]
[-26.91486740 28.32587814]
[-12.46993256 32.98509598]
[-0.68600023 42.55083466]
[6.84324980 55.72940826]
[9.09954834 70.73852539]
[23.74304962 73.98934937]
[34.15258026 67.74843597]
[46.41129684 70.38336945]
[53.79636002 81.00949860]
[68.36906433 84.56426239]
[82.94176483 88.11901855]
[89.48139954 82.06958008]
[97.95276642 79.31304932]
[101.96051025 64.85836792]
[105.96824646 50.40367508]
[108.76057434 35.66587067]
[110.31815338 20.74695778]
[111.87573242 5.82804537]
[113.43331909 -9.09086704]
[114.99089813 -24.00977898]
[116.54847717 -38.92869186]
[118.10605621 -53.84760284]
[104.19622803 -59.76435471]
[92.64943695 -69.51950836]
[84.49241638 -82.24563599]
[80.45048523 -96.81115723]
[80.88305664 -111.92089844]
[85.75166321 -126.23131561]
[94.62338257 -138.46994019]
[106.70935822 -147.54852295]
[120.93490601 -152.65979004]
[136.03511047 -153.34927368]
[150.66725159 -149.55564880]
[163.53027344 -141.61624146]
[173.48039246 -130.23703003]
[179.63284302 -116.42982483]
[181.44058228 -101.42237854]
[178.74282837 -86.54912567]
[171.77949524 -73.13259888]
[161.16973877 -62.36577225]
[147.85697937 -55.20603561]
[133.02497864 -52.29002380]
[131.46739197 -37.37110901]
[129.90980530 -22.45219803]
[128.35223389 -7.53328562]
[126.79464722 7.38562632]
[125.23706818 22.30453873]
[123.67948914 37.22344971]
[135.03129578 27.41853333]
[149.96395874 25.99875450]
[162.96012878 33.48869705]
[169.21801758 47.12097168]
[166.42543030 61.85872650]
[155.61418152 72.25666046]
[140.77880859 74.47293091]
[127.40070343 67.68868256]
[120.42293549 54.41141510]
[116.41519928 68.86610413]
[112.40745544 83.32079315]
[120.77787781 99.35135651]
[113.42366791 115.87281036]
[118.32521820 130.04936218]
[123.22676849 144.22592163]
[127.98188019 141.01072693]
[134.08872986 139.21662903]
[141.13311768 139.24499512]
[155.84107971 142.19047546]
[170.54904175 145.13595581]
[185.25700378 148.08143616]
[199.35144043 140.41813660]
[214.07394409 146.79209900]
[218.13066101 162.31378174]
[208.40962219 175.07626343]
[192.36799622 175.28927612]
[182.31152344 162.78939819]
[167.60356140 159.84391785]
[152.89559937 156.89843750]
[138.18763733 153.95295715]
[126.68582916 163.58148193]
[126.99788666 178.57823181]
[127.30994415 193.57498169]
[130.63479614 202.15386963]
[127.46922302 208.88623047]
[127.46922302 223.88623047]
[127.46922302 238.88623047]
[127.46922302 253.88623047]
[127.46922302 268.88623047]
[127.46922302 283.88623047]
[127.46922302 298.88623047]
[127.46922302 313.88623047]
[127.46922302 328.88623047]
[127.46922302 343.88623047]
[127.46922302 358.88623047]
[127.46922302 373.88623047]
[142.00910950 377.94754028]
[154.91349792 385.78204346]
[165.22477722 396.80838013]
[172.17779541 410.20831299]
[175.25659180 424.98745728]
[174.23271179 440.04916382]
[169.18209839 454.27566528]
[160.47958374 466.61132812]
[148.77091980 476.14074707]
[134.92497253 482.15679932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 127]
[24 126]
[25 125]
[26 109]
[27 108]
[28 107]
[30 57]
[31 56]
[32 55]
[34 52]
[35 51]
[59 105]
[60 104]
[61 103]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
