%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCCCAUCGGGGGGGGGGGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACxxxxxxxxxxCUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACCCCCCCCCCCAUGCCUAUC\
) } def
/len { sequence length } bind def

/coor [
[72.70392609 363.16116333]
[58.85799026 357.14514160]
[47.14933014 347.61572266]
[38.44680405 335.28005981]
[33.39620209 321.05352783]
[32.37231064 305.99185181]
[35.45111084 291.21267700]
[42.40413284 277.81274414]
[52.71541595 266.78640747]
[65.61979675 258.95190430]
[80.15968323 254.89059448]
[80.15968323 239.89059448]
[80.15968323 224.89059448]
[80.15968323 209.89059448]
[80.15968323 194.89059448]
[80.15968323 179.89059448]
[80.15968323 164.89059448]
[80.15968323 149.89059448]
[80.15968323 134.89059448]
[80.15968323 119.89059448]
[84.34282684 89.52900696]
[77.43582916 76.21385193]
[70.52883148 62.89869308]
[61.38709641 51.00631332]
[50.29578018 40.90766525]
[39.20446396 30.80901527]
[28.11314964 20.71036530]
[17.02183342 10.61171627]
[5.93051815 0.51306635]
[-6.33185005 -8.12605000]
[-22.14920235 -7.77686405]
[-29.75131416 -20.58534431]
[-42.99390030 -27.63047981]
[-56.23648453 -34.67561340]
[-72.05384064 -34.32642746]
[-79.65594482 -47.13491058]
[-93.11191559 -53.76340866]
[-106.76815796 -59.96881485]
[-120.42439270 -66.17422485]
[-134.08064270 -72.37963104]
[-147.73687744 -78.58503723]
[-159.10353088 -68.44999695]
[-173.61175537 -63.82059860]
[-188.74790955 -65.49890900]
[-201.88957214 -73.19415283]
[-210.75984192 -85.57308960]
[-213.82192993 -100.49098206]
[-210.54528809 -115.36322021]
[-201.49761963 -127.61309814]
[-188.24649048 -135.11825562]
[-173.08772278 -136.57836914]
[-158.64768982 -131.74047852]
[-147.42819214 -121.44276428]
[-141.37309265 -107.46936798]
[-141.53146362 -92.24127960]
[-127.87522888 -86.03587341]
[-114.21898651 -79.83045959]
[-100.56274414 -73.62505341]
[-86.90650940 -67.41964722]
[-83.44262695 -68.35186005]
[-79.34949493 -67.61164093]
[-75.43730164 -64.91957855]
[-72.61081696 -60.37749481]
[-57.74065781 -61.23059464]
[-49.19134903 -47.91820145]
[-35.94876480 -40.87306595]
[-22.70617867 -33.82793045]
[-7.83602428 -34.68103027]
[0.71328491 -21.36863518]
[-5.94720602 -34.80879211]
[-6.23693657 -49.80599594]
[-0.10052190 -63.49337769]
[11.28900146 -73.25446320]
[25.75441551 -77.22332001]
[40.53050995 -74.64126587]
[52.79269028 -66.00188446]
[60.19692230 -52.95667648]
[61.32780838 -37.99936676]
[55.96917343 -23.98919296]
[45.14537048 -13.60433388]
[30.92547798 -8.82995987]
[16.02916718 -10.57824898]
[27.12048340 -0.47959945]
[38.21179962 9.61905003]
[49.30311203 19.71769905]
[60.39442825 29.81634903]
[71.48574829 39.91499710]
[70.31091309 24.96107674]
[83.20812988 17.30197525]
[95.77625275 25.48991203]
[93.98087311 40.38308334]
[105.48268127 30.75455666]
[104.28384399 15.28386116]
[112.43608093 2.08080602]
[126.80468750 -3.77776432]
[141.86463928 -0.03911012]
[151.82507324 11.85917950]
[152.85600281 27.34197044]
[144.56101990 40.45581055]
[130.12971497 46.15816498]
[115.11120605 42.25635910]
[103.60939789 51.88488770]
[96.95796967 55.07546234]
[90.23664093 56.42059326]
[83.84398651 55.99169540]
[90.75098419 69.30685425]
[97.65798187 82.62200928]
[95.81616974 67.73551178]
[101.96112823 54.05196762]
[114.31122589 45.53873444]
[129.28570557 44.66411209]
[142.54292297 51.68168640]
[150.23910522 64.55680084]
[150.14286804 79.55649567]
[142.28210449 92.33180237]
[128.93594360 99.17868805]
[113.97621918 98.11281586]
[127.63246155 104.31822205]
[141.28869629 110.52362823]
[154.71873474 102.75098419]
[170.14897156 104.39023590]
[181.64619446 114.81105804]
[184.78947449 130.00643921]
[178.37014771 144.13343811]
[164.85659790 151.75993347]
[149.44503784 149.95338440]
[138.06155396 139.40844727]
[135.08329773 124.17987061]
[121.42705536 117.97446442]
[107.77081299 111.76905823]
[95.15968323 119.89059448]
[95.15968323 134.89059448]
[95.15968323 149.89059448]
[95.15968323 164.89059448]
[95.15968323 179.89059448]
[95.15968323 194.89059448]
[95.15968323 209.89059448]
[95.15968323 224.89059448]
[95.15968323 239.89059448]
[95.15968323 254.89059448]
[109.69956970 258.95190430]
[122.60395050 266.78640747]
[132.91523743 277.81274414]
[139.86825562 291.21267700]
[142.94705200 305.99185181]
[141.92317200 321.05352783]
[136.87255859 335.28005981]
[128.17004395 347.61572266]
[116.46138000 357.14514160]
[102.61544037 363.16116333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 107]
[22 106]
[23 105]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 69]
[32 67]
[33 66]
[34 65]
[36 63]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[91 102]
[92 101]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
