%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAUCUACGGGGGGGGGGXUUCAAAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCAxxxxxxxxxxGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACCCCCCCCCCCUUCUACCUAC\
) } def
/len { sequence length } bind def

/coor [
[75.72575378 376.84844971]
[62.50555420 369.57598877]
[51.61875153 359.12896729]
[43.80762100 346.21972656]
[39.60474014 331.72842407]
[39.29666519 316.64306641]
[42.90440750 301.99224854]
[50.18198013 288.77487183]
[60.63319016 277.89208984]
[73.54544830 270.08593750]
[88.03838348 265.88867188]
[87.72633362 250.89190674]
[87.41427612 235.89515686]
[87.10221863 220.89839172]
[86.79016113 205.90164185]
[86.47810364 190.90489197]
[86.16604614 175.90814209]
[85.85399628 160.91137695]
[85.54193878 145.91462708]
[85.22988129 130.91787720]
[78.31391144 144.22837830]
[73.62753296 158.47750854]
[61.04210281 166.63882446]
[46.12075424 165.10475159]
[35.45916748 154.55342102]
[33.77008057 139.64883423]
[41.80012512 126.97924042]
[55.99960709 122.14499664]
[69.23744202 115.09094238]
[54.23825455 114.93490601]
[39.23906326 114.77886963]
[24.23987579 114.62283325]
[17.04268646 128.13056946]
[4.38600683 136.73680115]
[-10.82174969 138.46385193]
[-25.08595276 132.91487122]
[-35.12879181 121.36499023]
[-38.64249802 106.46826172]
[-34.81964493 91.64785767]
[-24.53869820 80.30939484]
[-10.16214275 75.05837250]
[5.00639391 77.10143280]
[17.48129272 85.96910095]
[24.39591217 99.62364197]
[39.39509964 99.77967834]
[54.39429092 99.93571472]
[69.39347839 100.09175110]
[77.07331085 84.62893677]
[90.72597504 77.21669006]
[104.43901825 78.86673737]
[112.42893219 66.17180634]
[120.41884613 53.47687912]
[128.40876770 40.78194809]
[123.92359924 28.04064178]
[127.56275940 15.23500061]
[137.77471924 7.00152016]
[150.67167664 6.18574619]
[158.92396545 -6.34021568]
[167.17625427 -18.86617851]
[175.42854309 -31.39213943]
[183.68083191 -43.91810226]
[172.10853577 -53.48520279]
[161.63850403 -64.24742889]
[152.39346313 -76.07859039]
[144.48181152 -88.83997345]
[137.99630737 -102.38196564]
[133.01300049 -116.54579163]
[129.59030151 -131.16537476]
[127.76836395 -146.06933594]
[127.56853485 -161.08290100]
[128.99314880 -176.03007507]
[132.02551270 -190.73558044]
[136.63008118 -205.02702332]
[142.75285339 -218.73683167]
[150.32205200 -231.70426941]
[159.24891663 -243.77729797]
[169.42880249 -254.81437683]
[180.74235535 -264.68609619]
[193.05693054 -273.27670288]
[206.22813416 -280.48550415]
[220.10153198 -286.22796631]
[234.51449585 -290.43673706]
[249.29801941 -293.06253052]
[264.27877808 -294.07449341]
[279.28112793 -293.46078491]
[294.12918091 -291.22863770]
[308.64886475 -287.40417480]
[322.66989136 -282.03222656]
[336.02792358 -275.17584229]
[348.56634521 -266.91534424]
[360.13809204 -257.34762573]
[370.60757446 -246.58483887]
[379.85198975 -234.75318909]
[387.76293945 -221.99136353]
[394.24771118 -208.44903564]
[399.23025513 -194.28494263]
[402.65216064 -179.66516113]
[404.47329712 -164.76110840]
[404.67233276 -149.74752808]
[403.24691772 -134.80044556]
[400.21374512 -120.09510040]
[395.60842896 -105.80390930]
[389.48489380 -92.09442902]
[381.91500854 -79.12739563]
[372.98748779 -67.05484009]
[362.80700684 -56.01831055]
[351.49291992 -46.14720154]
[339.17788696 -37.55724716]
[326.00631714 -30.34916115]
[312.13259888 -24.60745430]
[297.71939087 -20.39944458]
[282.93572998 -17.77447128]
[267.95492554 -16.76330757]
[252.95260620 -17.37780952]
[238.10467529 -19.61077309]
[223.58520508 -23.43601799]
[209.56445312 -28.80869484]
[196.20678711 -35.66581345]
[187.95449829 -23.13985062]
[179.70220947 -10.61388874]
[171.44992065 1.91207337]
[163.19763184 14.43803501]
[167.29814148 30.71820068]
[158.20297241 45.22895050]
[141.10369873 48.77186584]
[133.11378479 61.46679306]
[125.12386322 74.16172028]
[117.13394928 86.85665131]
[123.45060730 111.45894623]
[100.22663116 130.60581970]
[100.53868866 145.60256958]
[100.85074615 160.59933472]
[101.16280365 175.59608459]
[101.47486115 190.59283447]
[101.78691864 205.58958435]
[102.09896851 220.58634949]
[102.41102600 235.58309937]
[102.72308350 250.57984924]
[103.03514099 265.57659912]
[117.69013214 269.16735840]
[130.91593933 276.42962646]
[141.81080627 286.86822510]
[149.63191223 299.77142334]
[153.84597778 314.25949097]
[154.16569519 329.34460449]
[150.56927490 343.99819946]
[143.30191040 357.22122192]
[132.85910034 368.11203003]
[119.95288086 375.92816162]
[105.46318817 380.13662720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 47]
[30 46]
[31 45]
[32 44]
[50 128]
[51 127]
[52 126]
[53 125]
[57 122]
[58 121]
[59 120]
[60 119]
[61 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
