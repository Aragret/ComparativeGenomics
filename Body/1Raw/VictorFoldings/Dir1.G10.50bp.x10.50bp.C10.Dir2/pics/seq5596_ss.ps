%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCAUCAUGGGGGGGGGGAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUxxxxxxxxxxAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCCCCCCCCCCCACCAUAAU\
) } def
/len { sequence length } bind def

/coor [
[87.32504272 350.79455566]
[72.76518250 346.88635254]
[59.56404114 339.60671997]
[48.48910904 329.37884521]
[40.18426895 316.79739380]
[35.13235474 302.59381104]
[33.62707901 287.59390259]
[35.75595856 272.66970825]
[41.39521408 258.68893433]
[50.21699905 246.46437073]
[61.70841599 236.70677185]
[75.20137787 229.98342896]
[89.91140747 226.68519592]
[90.21939087 211.68835449]
[90.52736664 196.69152832]
[90.83534241 181.69468689]
[91.14331818 166.69784546]
[91.45130157 151.70100403]
[91.75927734 136.70416260]
[92.06725311 121.70732880]
[92.37522888 106.71049500]
[89.36398315 99.17562103]
[92.84664154 91.40975952]
[93.46246338 76.42240906]
[94.07829285 61.43505096]
[94.69411469 46.44770050]
[79.76669312 44.92775345]
[64.95828247 42.50928116]
[50.32290649 39.20111084]
[35.91397858 35.01530838]
[21.78407288 29.96715355]
[7.98474550 24.07506371]
[-5.43364811 17.36053848]
[-18.42214584 9.84807873]
[-30.93335533 1.56509614]
[-42.92162323 -7.45818424]
[-54.34320450 -17.18883896]
[-65.15642548 -27.59135818]
[-75.32182312 -38.62778854]
[-84.80231476 -50.25785446]
[-93.56330109 -62.43912506]
[-101.57281494 -75.12714386]
[-108.80162811 -88.27561951]
[-115.22335815 -101.83657074]
[-120.81459045 -115.76052094]
[-125.55490875 -129.99665833]
[-129.42701721 -144.49302673]
[-132.41679382 -159.19674683]
[-134.51332092 -174.05416870]
[-135.70895386 -189.01106262]
[-135.99932861 -204.01284790]
[-135.38337708 -219.00480652]
[-133.86335754 -233.93222046]
[-131.44482422 -248.74063110]
[-128.13658142 -263.37597656]
[-123.95071411 -277.78488159]
[-118.90249634 -291.91476440]
[-113.01034546 -305.71408081]
[-106.29575348 -319.13244629]
[-98.78323364 -332.12091064]
[-90.50019073 -344.63208008]
[-81.47686005 -356.62030029]
[-71.74615479 -368.04183960]
[-61.34358215 -378.85501099]
[-50.30710602 -389.02035522]
[-38.67699432 -398.50079346]
[-26.49568367 -407.26171875]
[-13.80762577 -415.27117920]
[-0.65911692 -422.49993896]
[12.90186596 -428.92160034]
[26.82584000 -434.51275635]
[41.06199646 -439.25302124]
[55.55839157 -443.12506104]
[70.26212311 -446.11477661]
[85.11954498 -448.21121216]
[100.07644653 -449.40679932]
[115.07823944 -449.69708252]
[130.07019043 -449.08108521]
[144.99760437 -447.56100464]
[159.80599976 -445.14239502]
[174.44132996 -441.83407593]
[188.85021973 -437.64813232]
[202.98008728 -432.59985352]
[216.77935791 -426.70764160]
[230.19769287 -419.99298096]
[243.18612671 -412.48040771]
[255.69725037 -404.19729614]
[267.68542480 -395.17391968]
[279.10693359 -385.44314575]
[289.92004395 -375.04052734]
[300.08535767 -364.00399780]
[309.56573486 -352.37384033]
[318.32659912 -340.19250488]
[326.33599854 -327.50442505]
[333.56469727 -314.35586548]
[339.98629761 -300.79486084]
[345.57739258 -286.87084961]
[350.31759644 -272.63467407]
[354.18954468 -258.13827515]
[357.17919922 -243.43452454]
[359.27557373 -228.57708740]
[360.47106934 -213.62017822]
[360.76132202 -198.61837769]
[360.14523315 -183.62643433]
[358.62506104 -168.69903564]
[356.20639038 -153.89065552]
[352.89801025 -139.25532532]
[348.71203613 -124.84645844]
[343.66366577 -110.71662140]
[337.77139282 -96.91737366]
[331.05667114 -83.49906921]
[323.54403687 -70.51068115]
[315.26089478 -57.99958420]
[306.23742676 -46.01144409]
[296.50662231 -34.58999634]
[286.10394287 -23.77692223]
[275.06738281 -13.61167431]
[263.43716431 -4.13134623]
[251.25578308 4.62946892]
[238.56765747 12.63880444]
[225.41908264 19.86743355]
[211.85803223 26.28898239]
[197.93400574 31.88001633]
[183.69781494 36.62013626]
[169.20138550 40.49204636]
[154.49761963 43.48161316]
[139.64018250 45.57793427]
[124.68326569 46.77336121]
[109.68147278 47.06352615]
[109.06564331 62.05087662]
[108.44982147 77.03823090]
[107.83399200 92.02558136]
[107.37207031 107.01847076]
[107.06409454 122.01531219]
[106.75611115 137.01214600]
[106.44813538 152.00898743]
[106.14015961 167.00582886]
[105.83218384 182.00265503]
[105.52420044 196.99949646]
[105.21622467 211.99633789]
[104.90824890 226.99317932]
[119.47047424 230.89253235]
[132.67602539 238.16418457]
[143.75715637 248.38533020]
[152.06962585 260.96176147]
[157.13014221 275.16226196]
[158.64451599 290.16128540]
[156.52468872 305.08673096]
[150.89390564 319.07095337]
[142.07952881 331.30084229]
[130.59403992 341.06539917]
[117.10515594 347.79693604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[23 132]
[24 131]
[25 130]
[26 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
