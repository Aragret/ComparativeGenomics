%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCAAACUGGGGGGGGGGAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUxxxxxxxxxxUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCACCCCCCCCCCUAAUUAAACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.83489990]
[71.19830322 354.81887817]
[59.48964310 345.28945923]
[50.78712082 332.95379639]
[45.73651886 318.72726440]
[44.71262741 303.66558838]
[47.79142761 288.88641357]
[54.74444962 275.48651123]
[65.05573273 264.46017456]
[77.96011353 256.62567139]
[92.50000000 252.56434631]
[92.50000000 237.56434631]
[92.50000000 222.56434631]
[92.50000000 207.56434631]
[92.50000000 192.56434631]
[92.50000000 177.56434631]
[92.50000000 162.56434631]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[92.50000000 52.43565369]
[77.52366638 51.51208878]
[62.63258743 49.66831589]
[47.88325882 46.91133118]
[33.33162689 43.25159073]
[19.03289604 38.70297623]
[5.04130173 33.28274155]
[-8.59008026 27.01145172]
[-21.80953979 19.91289330]
[-34.56692886 12.01399326]
[-46.81386185 3.34471703]
[-58.50387192 -6.06205130]
[-69.59262085 -16.17062759]
[-80.03804016 -26.94266701]
[-89.80050659 -38.33730698]
[-98.84299469 -50.31132126]
[-107.13120270 -62.81929398]
[-114.63368225 -75.81377411]
[-121.32197571 -89.24546051]
[-127.17071533 -103.06342316]
[-132.15771484 -117.21521759]
[-136.26405334 -131.64718628]
[-139.47415161 -146.30456543]
[-141.77584839 -161.13177490]
[-143.16038513 -176.07254028]
[-143.62252808 -191.07020569]
[-143.16053772 -206.06788635]
[-141.77613831 -221.00866699]
[-139.47459412 -235.83589172]
[-136.26463318 -250.49330139]
[-132.15843201 -264.92532349]
[-127.17157745 -279.07717896]
[-121.32297516 -292.89517212]
[-114.63481140 -306.32693481]
[-107.13246155 -319.32150269]
[-98.84438324 -331.82952881]
[-89.80200958 -343.80364990]
[-80.03964996 -355.19839478]
[-69.59433746 -365.97052002]
[-58.50569153 -376.07922363]
[-46.81577301 -385.48608398]
[-34.56892776 -394.15548706]
[-21.81161308 -402.05450439]
[-8.59222317 -409.15319824]
[5.03909636 -415.42462158]
[19.03063774 -420.84500122]
[33.32932663 -425.39376831]
[47.88092041 -429.05364990]
[62.63021851 -431.81076050]
[77.52127838 -433.65469360]
[92.49760437 -434.57839966]
[107.50239563 -434.57839966]
[122.47872162 -433.65469360]
[137.36978149 -431.81076050]
[152.11907959 -429.05364990]
[166.67066956 -425.39376831]
[180.96936035 -420.84500122]
[194.96090698 -415.42462158]
[208.59222412 -409.15319824]
[221.81161499 -402.05450439]
[234.56892395 -394.15548706]
[246.81576538 -385.48608398]
[258.50567627 -376.07922363]
[269.59432983 -365.97052002]
[280.03964233 -355.19839478]
[289.80200195 -343.80364990]
[298.84439087 -331.82952881]
[307.13247681 -319.32150269]
[314.63482666 -306.32693481]
[321.32296753 -292.89517212]
[327.17156982 -279.07717896]
[332.15844727 -264.92532349]
[336.26464844 -250.49330139]
[339.47457886 -235.83589172]
[341.77612305 -221.00866699]
[343.16052246 -206.06788635]
[343.62252808 -191.07020569]
[343.16040039 -176.07254028]
[341.77584839 -161.13177490]
[339.47415161 -146.30456543]
[336.26403809 -131.64718628]
[332.15771484 -117.21521759]
[327.17071533 -103.06342316]
[321.32196045 -89.24546051]
[314.63366699 -75.81377411]
[307.13119507 -62.81929398]
[298.84298706 -50.31132126]
[289.80050659 -38.33730698]
[280.03802490 -26.94266701]
[269.59262085 -16.17062759]
[258.50387573 -6.06205130]
[246.81385803 3.34471703]
[234.56692505 12.01399326]
[221.80953979 19.91289330]
[208.59007263 27.01145172]
[194.95869446 33.28274155]
[180.96710205 38.70297623]
[166.66836548 43.25159073]
[152.11674500 46.91133118]
[137.36741638 49.66831589]
[122.47633362 51.51208878]
[107.50000000 52.43565369]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[107.50000000 162.56434631]
[107.50000000 177.56434631]
[107.50000000 192.56434631]
[107.50000000 207.56434631]
[107.50000000 222.56434631]
[107.50000000 237.56434631]
[107.50000000 252.56434631]
[122.03988647 256.62567139]
[134.94427490 264.46017456]
[145.25555420 275.48651123]
[152.20857239 288.88641357]
[155.28736877 303.66558838]
[154.26348877 318.72726440]
[149.21287537 332.95379639]
[140.51036072 345.28945923]
[128.80169678 354.81887817]
[114.95575714 360.83489990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
