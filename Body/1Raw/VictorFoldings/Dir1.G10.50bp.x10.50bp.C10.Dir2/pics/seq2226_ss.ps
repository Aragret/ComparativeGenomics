%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCCUCUAGGGGGGGGGGAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGAxxxxxxxxxxUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGACCCCCCCCCCAGAACCCUCCA\
) } def
/len { sequence length } bind def

/coor [
[33.87121582 520.88140869]
[19.84927368 515.32843018]
[7.64931583 506.46209717]
[-1.96175575 494.83978271]
[-8.37978077 481.19207764]
[-11.20131779 466.37689209]
[-10.24900246 451.32550049]
[-5.58269691 436.98410034]
[2.50426984 424.25415039]
[13.50354385 413.93585205]
[26.72370338 406.67788696]
[41.33371735 402.93646240]
[41.33371735 387.93646240]
[41.33371735 372.93646240]
[41.33371735 357.93646240]
[41.33371735 342.93646240]
[41.33371735 327.93646240]
[41.33371735 312.93646240]
[41.33371735 297.93646240]
[41.33371735 282.93646240]
[41.33371735 267.93646240]
[29.00243187 259.39599609]
[14.96045589 264.67074585]
[0.91847920 269.94546509]
[-1.51394629 285.11053467]
[-11.21546173 297.01751709]
[-25.57640839 302.46350098]
[-40.73376465 299.98355103]
[-52.61027527 290.24475098]
[-58.01122284 275.86682129]
[-55.48377609 260.71731567]
[-45.70780563 248.87136841]
[-31.31299973 243.51551819]
[-16.17148781 246.09043884]
[-4.35626221 255.90350342]
[9.68571377 250.62875366]
[23.72768974 245.35401917]
[25.58472252 225.39189148]
[38.26195526 211.40480042]
[55.64949799 208.05725098]
[60.19678879 193.76312256]
[64.74407959 179.46899414]
[69.29136658 165.17485046]
[73.83866119 150.88072205]
[78.38594818 136.58659363]
[82.93324280 122.29246521]
[87.48052979 107.99833679]
[84.57305908 93.28281403]
[74.93124390 81.79214478]
[65.28942871 70.30148315]
[55.64761353 58.81081390]
[46.00580215 47.32014847]
[36.36398697 35.82947922]
[26.72217178 24.33881378]
[17.08035851 12.84814739]
[7.43854427 1.35748112]
[-8.32546902 0.22989897]
[-18.61170197 -11.76880741]
[-17.31751633 -27.52001762]
[-5.21072912 -37.67881775]
[10.52591801 -36.21817398]
[20.55615044 -24.00465775]
[18.92921066 -8.28433323]
[28.57102585 3.20633364]
[38.21283722 14.69700050]
[47.85465240 26.18766785]
[57.49646759 37.67833328]
[67.13828278 49.16899872]
[76.78009796 60.65966797]
[86.42191315 72.15033722]
[96.06372070 83.64099884]
[103.51594543 82.79579926]
[100.56337738 68.08926392]
[97.61080933 53.38272095]
[88.28202820 41.63649368]
[90.97357941 26.87994766]
[103.84861755 19.18362617]
[118.12063599 23.79984665]
[124.04975891 37.57829285]
[117.58847046 51.11693954]
[118.00443268 66.11117554]
[118.42039490 81.10540771]
[125.87261963 80.26020813]
[132.69619751 66.90210724]
[139.51977539 53.54400635]
[135.96569824 37.89957809]
[146.09324646 25.45721054]
[162.13340759 25.76162338]
[171.78155518 38.57929611]
[167.63645935 54.07761002]
[152.87786865 60.36758041]
[146.05429077 73.72567749]
[139.23071289 87.08377838]
[148.98999023 98.47485352]
[163.23667908 93.78105164]
[166.46801758 80.34560394]
[175.85343933 70.35153961]
[188.85234070 66.34732819]
[202.02281189 69.28090668]
[211.93280029 78.27780914]
[226.27285767 73.87751007]
[240.61291504 69.47721100]
[254.95298767 65.07691193]
[269.29302979 60.67660904]
[283.63311768 56.27630997]
[294.40280151 43.90917969]
[310.44381714 47.31757355]
[315.25457764 62.99522400]
[303.88613892 74.81430817]
[288.03341675 70.61637115]
[273.69332886 75.01667023]
[259.35327148 79.41696930]
[245.01321411 83.81726837]
[230.67315674 88.21757507]
[216.33309937 92.61787415]
[211.52563477 108.28434753]
[198.20735168 118.11465454]
[181.48825073 118.09189606]
[167.93048096 108.02774811]
[153.68379211 112.72154999]
[101.77465820 112.54562378]
[97.22737122 126.83975983]
[92.68007660 141.13388062]
[88.13278961 155.42802429]
[83.58550262 169.72215271]
[79.03820801 184.01628113]
[74.49092102 198.31040955]
[69.94362640 212.60453796]
[81.65583038 225.25596619]
[83.74719238 243.24055481]
[74.40325165 259.75119019]
[56.33371735 267.93646240]
[56.33371735 282.93646240]
[56.33371735 297.93646240]
[56.33371735 312.93646240]
[56.33371735 327.93646240]
[56.33371735 342.93646240]
[56.33371735 357.93646240]
[56.33371735 372.93646240]
[56.33371735 387.93646240]
[56.33371735 402.93646240]
[70.94372559 406.67788696]
[84.16388702 413.93585205]
[95.16316223 424.25415039]
[103.25012970 436.98410034]
[107.91643524 451.32550049]
[108.86875153 466.37689209]
[106.04721069 481.19207764]
[99.62918854 494.83978271]
[90.01811981 506.46209717]
[77.81816101 515.32843018]
[63.79621506 520.88140869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 37]
[23 36]
[24 35]
[40 128]
[41 127]
[42 126]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[83 93]
[84 92]
[85 91]
[94 120]
[95 119]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
