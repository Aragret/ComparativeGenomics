%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCACAACGGGGGGGGGGCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAxxxxxxxxxxUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGACCCCCCCCCCGACCCACAAC\
) } def
/len { sequence length } bind def

/coor [
[88.60906982 353.99502563]
[75.38887787 346.72256470]
[64.50207520 336.27554321]
[56.69094086 323.36630249]
[52.48806000 308.87500000]
[52.17998886 293.78964233]
[55.78772736 279.13882446]
[63.06530380 265.92144775]
[73.51651001 255.03866577]
[86.42877197 247.23251343]
[100.92170715 243.03523254]
[100.60964966 228.03848267]
[100.29759216 213.04173279]
[99.98554230 198.04496765]
[99.67348480 183.04821777]
[99.36142731 168.05146790]
[99.04936981 153.05471802]
[98.73731232 138.05795288]
[98.42525482 123.06120300]
[85.64790344 115.20378113]
[72.12371063 121.69194031]
[71.63643646 136.98970032]
[64.08567047 150.30300903]
[51.20652008 158.57260132]
[35.95852280 159.89816284]
[21.84555244 153.97509766]
[12.11067104 142.16448975]
[8.99088001 127.18030548]
[13.20308685 112.46582794]
[23.77935410 101.40232086]
[38.28933716 96.53210449]
[53.39874268 98.97431946]
[65.63554382 108.16775513]
[79.15973663 101.67958832]
[64.17689514 102.39693451]
[53.54176712 91.81893921]
[54.17839050 76.83245850]
[65.67229462 67.19450378]
[80.54032135 69.17991638]
[89.10248566 81.49564362]
[86.00416565 66.81911469]
[82.90583801 52.14258957]
[79.80751801 37.46606445]
[76.70919800 22.78953743]
[61.75516891 24.16560555]
[46.74250412 23.79627609]
[31.87422943 21.68654251]
[17.35142517 17.86493683]
[3.37049389 12.38314247]
[-9.87948895 5.31529427]
[-22.21933174 -3.24302340]
[-33.48215103 -13.17606926]
[-43.51563263 -24.34951019]
[-52.18408585 -36.61223602]
[-59.37027359 -49.79841232]
[-64.97702026 -63.72970581]
[-68.92848969 -78.21771240]
[-71.17125702 -93.06650543]
[-71.67497253 -108.07525635]
[-70.43284607 -123.04100800]
[-67.46165466 -137.76135254]
[-62.80159760 -152.03721619]
[-56.51568604 -165.67553711]
[-48.68893433 -178.49188232]
[-39.42718887 -190.31289673]
[-28.85570335 -200.97874451]
[-17.11744690 -210.34516907]
[-4.37116623 -218.28549194]
[9.21076107 -224.69235229]
[23.44465446 -229.47908020]
[38.13801575 -232.58096313]
[53.09213638 -233.95603943]
[68.10477448 -233.58569336]
[82.97290802 -231.47497559]
[97.49546051 -227.65240479]
[111.47602081 -222.16967773]
[124.72553253 -215.10093689]
[137.06480408 -206.54179382]
[148.32696533 -196.60800171]
[158.35969543 -185.43388367]
[167.02732849 -173.17059326]
[174.21264648 -159.98393250]
[179.81845093 -146.05226135]
[183.76896667 -131.56399536]
[186.01072693 -116.71504974]
[186.51345825 -101.70626068]
[185.27032471 -86.74059296]
[182.29815674 -72.02044678]
[177.63714600 -57.74489594]
[171.35032654 -44.10699081]
[163.52270508 -31.29117775]
[154.26017761 -19.47077179]
[143.68798828 -8.80563259]
[131.94909668 0.56000626]
[119.20228577 8.49948597]
[105.61993408 14.90543365]
[91.38571930 19.69121552]
[94.48404694 34.36774063]
[97.58236694 49.04426575]
[100.68068695 63.72079468]
[103.77900696 78.39731598]
[114.97477722 88.38004303]
[129.90908813 89.78234863]
[144.84338379 91.18465424]
[159.77769470 92.58695221]
[174.71200562 93.98925781]
[189.17507935 87.57598114]
[201.12327576 96.46923065]
[216.05758667 97.87152863]
[223.89242554 84.77275085]
[236.63943481 76.37773895]
[251.76771545 74.35333252]
[266.27349854 79.10147095]
[277.27667236 89.67941284]
[282.59255981 103.98690033]
[281.16564941 119.18317413]
[273.27926636 132.25100708]
[260.49929810 140.59574890]
[245.36317444 142.56057739]
[230.87620544 137.75534058]
[219.91476440 127.13415527]
[214.65527344 112.80583954]
[199.72096252 111.40353394]
[186.32609558 117.91711426]
[173.30970764 108.92356873]
[158.37539673 107.52126312]
[143.44108582 106.11895752]
[128.50677490 104.71665955]
[113.57247162 103.31435394]
[116.21268463 112.03670502]
[113.42201233 122.74914551]
[113.73406982 137.74589539]
[114.04612732 152.74266052]
[114.35817719 167.73941040]
[114.67023468 182.73616028]
[114.98229218 197.73291016]
[115.29434967 212.72967529]
[115.60640717 227.72642517]
[115.91846466 242.72317505]
[130.57345581 246.31394958]
[143.79927063 253.57620239]
[154.69413757 264.01480103]
[162.51522827 276.91799927]
[166.72929382 291.40606689]
[167.04902649 306.49118042]
[163.45259094 321.14477539]
[156.18522644 334.36776733]
[145.74243164 345.25860596]
[132.83619690 353.07473755]
[118.34651184 357.28320312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 34]
[21 33]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
