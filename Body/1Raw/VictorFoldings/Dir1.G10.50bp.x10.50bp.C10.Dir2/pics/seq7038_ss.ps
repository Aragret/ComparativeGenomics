%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCACUAGGGGGGGGGGUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUxxxxxxxxxxGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUCCCCCCCCCCACUCCCACUA\
) } def
/len { sequence length } bind def

/coor [
[118.82900238 556.35015869]
[104.98306274 550.33416748]
[93.27439880 540.80474854]
[84.57187653 528.46905518]
[79.52127838 514.24255371]
[78.49738312 499.18084717]
[81.57617950 484.40170288]
[88.52920532 471.00177002]
[98.84049225 459.97543335]
[111.74487305 452.14093018]
[126.28475952 448.07962036]
[126.28475952 433.07962036]
[126.28475952 418.07962036]
[126.28475952 403.07962036]
[126.28475952 388.07962036]
[126.28475952 373.07962036]
[126.28475952 358.07962036]
[126.28475952 343.07962036]
[126.28475952 328.07962036]
[126.28475952 313.07962036]
[118.54745483 300.35235596]
[126.28475952 286.55218506]
[124.88245392 271.61785889]
[122.09012604 256.88006592]
[119.29780579 242.14225769]
[116.50547791 227.40444946]
[101.87221527 224.43850708]
[89.45569611 216.07337952]
[81.16539764 203.55795288]
[78.29061127 188.78218079]
[81.29995728 173.99172974]
[89.76538086 161.44662476]
[102.42270660 153.07597351]
[99.63037872 138.33816528]
[96.83805084 123.60035706]
[94.04573059 108.86255646]
[89.73814392 94.49436951]
[83.96187592 80.65115356]
[78.18560028 66.80793762]
[72.40932465 52.96471786]
[66.63305664 39.12149811]
[63.75719452 53.84323120]
[55.55575943 66.40254974]
[43.23300171 74.95529938]
[28.59832954 78.24565887]
[13.80062485 75.79046631]
[1.01270509 67.95024109]
[-7.88771963 55.87620163]
[-11.59375763 41.34123611]
[-9.56123352 26.47957802]
[-2.08859205 13.47344112]
[9.72692299 4.23257446]
[24.15038300 0.11386047]
[39.06392288 1.72206926]
[52.27771378 8.82106018]
[61.85120010 20.36787033]
[60.29361725 5.44895887]
[58.73603821 -9.46995354]
[57.02334976 -24.37185669]
[55.15573502 -39.25513458]
[53.13339996 -54.11818314]
[50.95656204 -68.95938873]
[48.77972794 -83.80059052]
[33.89242554 -86.56591034]
[20.71088409 -94.01747131]
[10.66493797 -105.34696960]
[4.84429502 -119.32548523]
[3.88033605 -134.43672180]
[7.87762403 -149.04153442]
[16.40256310 -161.55569458]
[28.53042984 -170.62174988]
[42.94568634 -175.25630188]
[58.08467484 -174.95663452]
[72.30522919 -169.75521851]
[84.06480408 -160.21630859]
[92.08782196 -147.37457275]
[95.50399017 -132.62301636]
[93.94276428 -117.56176758]
[87.57347870 -103.82455444]
[77.08704376 -92.90148926]
[63.62093353 -85.97743225]
[65.79776764 -71.13622284]
[67.97460938 -56.29502106]
[72.08369446 -50.09331894]
[70.03901672 -41.12274933]
[71.90663147 -26.23946953]
[75.88580322 -19.95362854]
[73.65495300 -11.02753448]
[75.21253204 3.89137769]
[76.77011108 18.81028938]
[80.47627258 33.34522629]
[86.25254822 47.18844223]
[92.02881622 61.03166199]
[97.80509186 74.87487793]
[103.58135986 88.71809387]
[107.70079041 74.29483795]
[118.38378906 63.76519012]
[132.86509705 59.85470963]
[147.39625549 63.57561493]
[158.21594238 73.96476746]
[162.52349854 88.33295441]
[159.20393372 102.96102905]
[149.11650085 114.06254578]
[134.87231445 118.76392365]
[120.15841675 115.84821320]
[108.78353882 106.07022858]
[111.57585907 120.80803680]
[114.36818695 135.54583740]
[117.16050720 150.28364563]
[132.00259399 153.44407654]
[144.47032166 162.02304077]
[152.68148804 174.68759155]
[155.41093445 189.49089050]
[152.27339172 204.17150879]
[143.77740479 216.49885559]
[131.24328613 224.61212158]
[134.03561401 239.34992981]
[136.82794189 254.08773804]
[139.62025452 268.82553101]
[147.10002136 255.82350159]
[160.35302734 248.79798889]
[175.31211853 249.90507507]
[187.38653564 258.80499268]
[192.87078857 272.76647949]
[190.08183289 287.50491333]
[179.87556458 298.49728394]
[165.38415527 302.37014771]
[151.05484009 297.93499756]
[141.28475952 286.55218506]
[149.02206421 300.35235596]
[141.28475952 313.07962036]
[141.28475952 328.07962036]
[141.28475952 343.07962036]
[141.28475952 358.07962036]
[141.28475952 373.07962036]
[141.28475952 388.07962036]
[141.28475952 403.07962036]
[141.28475952 418.07962036]
[141.28475952 433.07962036]
[141.28475952 448.07962036]
[155.82464600 452.14093018]
[168.72901917 459.97543335]
[179.04031372 471.00177002]
[185.99333191 484.40170288]
[189.07212830 499.18084717]
[188.04823303 514.24255371]
[182.99763489 528.46905518]
[174.29510498 540.80474854]
[162.58645630 550.33416748]
[148.74050903 556.35015869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 119]
[24 118]
[25 117]
[26 116]
[33 109]
[34 108]
[35 107]
[36 106]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[56 90]
[57 89]
[58 88]
[59 86]
[60 85]
[61 83]
[62 82]
[63 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
