%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUUACGGGGGGGGGGCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUxxxxxxxxxxGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCCCCCCCCCCCACCCUUAC\
) } def
/len { sequence length } bind def

/coor [
[79.98081207 622.39355469]
[66.13487244 616.37750244]
[54.42620850 606.84808350]
[45.72368240 594.51239014]
[40.67308044 580.28588867]
[39.64918900 565.22424316]
[42.72798920 550.44506836]
[49.68101120 537.04510498]
[59.99229431 526.01879883]
[72.89667511 518.18426514]
[87.43656158 514.12298584]
[87.43656158 499.12298584]
[87.43656158 484.12298584]
[87.43656158 469.12298584]
[87.43656158 454.12298584]
[87.43656158 439.12298584]
[87.43656158 424.12298584]
[87.43656158 409.12298584]
[87.43656158 394.12298584]
[87.43656158 379.12298584]
[72.42226410 375.22750854]
[58.91095352 367.58596802]
[47.81969070 356.71041870]
[39.90297699 343.33264160]
[35.70142746 328.35491943]
[35.50485611 312.78918457]
[39.33229446 297.68859863]
[46.93032074 284.07635498]
[57.78982162 272.87631226]
[71.18010712 264.85031128]
[86.19808197 260.54632568]
[85.88602448 245.54956055]
[85.57396698 230.55281067]
[85.26191711 215.55604553]
[84.94985962 200.55929565]
[72.62456512 209.10839844]
[58.19615555 205.00706482]
[52.21062469 191.25303650]
[59.04291534 177.89938354]
[73.69917297 174.70655823]
[85.46656799 184.00767517]
[86.71343994 169.05958557]
[87.96031952 154.11149597]
[89.20719147 139.16340637]
[90.45406342 124.21532440]
[77.96394348 113.85347748]
[74.04002380 98.10628510]
[80.20767212 83.09525299]
[94.06930542 74.65570068]
[95.00493622 59.68490601]
[95.94056702 44.71411514]
[87.35511780 28.45773315]
[97.54788971 14.20616245]
[98.17186737 -0.78085411]
[98.79584503 -15.76786995]
[99.41982269 -30.75488663]
[95.56266785 -45.25048447]
[87.57274628 -57.94541168]
[72.05682373 -59.89222336]
[61.46027756 -71.39210510]
[60.78647995 -87.01516724]
[70.35357666 -99.38467407]
[85.64427185 -102.66012573]
[99.43877411 -95.29495239]
[105.22373199 -80.76676178]
[100.26767731 -65.93532562]
[108.25759125 -53.24039841]
[108.23162842 -68.24037933]
[111.16925049 -82.94991302]
[116.95468903 -96.78929901]
[125.35993958 -109.21314240]
[136.05375671 -119.73181152]
[148.61468506 -127.93077087]
[162.54771423 -133.48690796]
[177.30375671 -136.18124390]
[192.30125427 -135.90760803]
[206.94917297 -132.67677307]
[220.67025757 -126.61607361]
[232.92373657 -117.96435547]
[243.22671509 -107.06258392]
[251.17317200 -94.34040070]
[256.44989014 -80.29917145]
[258.84896851 -65.49227142]
[258.27584839 -50.50322342]
[254.75309753 -35.92274857]
[248.41955566 -22.32546043]
[239.52482605 -10.24722481]
[228.41944885 -0.16404021]
[215.54107666 7.52671623]
[201.39726257 12.52195454]
[186.54539490 14.62481213]
[171.57078552 13.75241661]
[157.06358337 9.93914986]
[143.59550476 3.33529067]
[131.69734192 -5.79890442]
[121.83797455 -17.10345840]
[114.40683746 -30.13090897]
[113.78285980 -15.14389324]
[113.15888214 -0.15687670]
[112.53491211 14.83013916]
[120.50977325 23.97939110]
[120.07254791 36.51046371]
[110.91135406 45.64974594]
[109.97573090 60.62053680]
[109.04010010 75.59133148]
[119.89914703 83.22113037]
[125.58497620 95.21297455]
[124.61942291 108.44931030]
[117.25350189 119.48905945]
[105.40215302 125.46219635]
[104.15528107 140.41027832]
[102.90840149 155.35836792]
[101.66152954 170.30645752]
[100.41464996 185.25454712]
[99.94660950 200.24723816]
[100.25866699 215.24398804]
[100.57072449 230.24075317]
[100.88278198 245.23750305]
[101.19483948 260.23425293]
[115.35195923 263.52404785]
[128.29582214 270.11404419]
[139.27044678 279.61422729]
[147.63613892 291.46484375]
[152.90667725 304.96920776]
[154.77763367 319.33480835]
[153.14398193 333.71981812]
[148.10591125 347.28228760]
[139.96272278 359.22955322]
[129.19506836 368.86450195]
[116.43658447 375.62631226]
[102.43656158 379.12298584]
[102.43656158 394.12298584]
[102.43656158 409.12298584]
[102.43656158 424.12298584]
[102.43656158 439.12298584]
[102.43656158 454.12298584]
[102.43656158 469.12298584]
[102.43656158 484.12298584]
[102.43656158 499.12298584]
[102.43656158 514.12298584]
[116.97644806 518.18426514]
[129.88082886 526.01879883]
[140.19212341 537.04510498]
[147.14514160 550.44506836]
[150.22393799 565.22424316]
[149.20004272 580.28588867]
[144.14944458 594.51239014]
[135.44691467 606.84808350]
[123.73825836 616.37750244]
[109.89231873 622.39355469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 110]
[49 105]
[50 104]
[51 103]
[53 100]
[54 99]
[55 98]
[56 97]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
