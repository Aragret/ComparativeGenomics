%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACUACCGGGGGGGGGGUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUxxxxxxxxxxGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUACCCCCCCCCCACCCAAUACC\
) } def
/len { sequence length } bind def

/coor [
[77.19030762 702.19403076]
[63.34436798 696.17797852]
[51.63570786 686.64855957]
[42.93318176 674.31292725]
[37.88257980 660.08636475]
[36.85868835 645.02471924]
[39.93748856 630.24554443]
[46.89051056 616.84564209]
[57.20179367 605.81927490]
[70.10617065 597.98480225]
[84.64606476 593.92346191]
[84.64606476 578.92346191]
[84.64606476 563.92346191]
[84.64606476 548.92346191]
[84.64606476 533.92346191]
[84.64606476 518.92346191]
[84.64606476 503.92346191]
[84.64606476 488.92346191]
[84.64606476 473.92346191]
[84.64606476 458.92346191]
[84.64606476 443.92346191]
[84.64606476 428.92346191]
[70.36105347 426.04977417]
[56.91198349 420.42947388]
[44.82154465 412.27893066]
[34.56002426 401.91281128]
[26.52703857 389.73199463]
[21.03595924 376.20816040]
[18.30169106 361.86535645]
[18.43226433 347.25988770]
[21.42456436 332.95852661]
[27.16437912 319.51669312]
[35.43075562 307.45678711]
[45.90450668 297.24795532]
[58.18053436 289.28778076]
[71.78349304 283.88677979]
[86.18621063 281.25640869]
[86.49826813 266.25964355]
[86.81031799 251.26289368]
[87.12237549 236.26612854]
[78.95890045 227.28477478]
[79.13533783 214.74731445]
[88.10441589 205.41941833]
[88.72839355 190.43240356]
[89.35237122 175.44538879]
[74.04924011 171.63754272]
[59.85776138 164.76094055]
[47.38586044 155.11016846]
[37.16779709 143.09864807]
[29.64128494 129.24090576]
[25.12873459 114.13055420]
[23.82345200 98.41490173]
[25.78135300 82.76714325]
[30.91856384 67.85759735]
[39.01502228 54.32493591]
[49.72390366 42.74885941]
[62.58646393 33.62525940]
[77.05171204 27.34495926]
[92.50000000 24.17698860]
[92.50000000 9.17698956]
[92.50000000 -5.82301044]
[92.03195953 -20.81570625]
[91.09632874 -35.78649902]
[90.16069794 -50.75728989]
[81.57767487 -64.04797363]
[88.50604248 -77.23307800]
[87.57041931 -92.20387268]
[73.28416443 -97.47861481]
[62.38299179 -108.11272430]
[56.75558853 -122.26377869]
[57.37693787 -137.48001099]
[64.13938904 -151.12512207]
[75.87129974 -160.83502197]
[90.54005432 -164.92739868]
[105.60419464 -162.69323730]
[118.45377350 -154.51960754]
[126.86251831 -141.82264709]
[129.37356567 -126.80217743]
[125.55186462 -112.06058502]
[116.05954742 -100.15194702]
[102.54120636 -93.13949585]
[103.47683716 -78.16870880]
[111.99293518 -65.94883728]
[105.13149261 -51.69291687]
[106.06712341 -36.72212601]
[107.00274658 -21.75133514]
[109.45264435 -19.13112259]
[110.72158813 -15.16987991]
[110.18239594 -10.45165443]
[107.50000000 -5.82301044]
[107.50000000 9.17698956]
[107.50000000 24.17698860]
[121.43830872 26.88517380]
[134.63211060 32.13251114]
[146.62319946 39.73677063]
[156.99513245 49.43386459]
[165.38772583 60.88703918]
[171.50952148 73.69853210]
[175.14791870 87.42343903]
[176.17654419 101.58509827]
[174.55970764 115.69171906]
[170.35353088 129.25338745]
[163.70408630 141.79913330]
[154.84231567 152.89328003]
[144.07597351 162.15052795]
[131.77894592 169.24938965]
[118.37828827 173.94334412]
[104.33938599 176.06936646]
[103.71540833 191.05638123]
[103.09143066 206.04339600]
[112.01321411 222.11766052]
[102.11913300 236.57818604]
[101.80707550 251.57495117]
[101.49501801 266.57168579]
[101.18296051 281.56845093]
[116.24644470 285.06109619]
[130.25602722 291.59286499]
[142.60624695 300.87893677]
[152.76383972 312.51541138]
[160.29087830 325.99700928]
[164.86352539 340.73904419]
[166.28608704 356.10256958]
[164.49928284 371.42236328]
[159.58280945 386.03546143]
[151.75167847 399.31002808]
[141.34692383 410.67257690]
[128.82067871 419.63284302]
[114.71656036 425.80484009]
[99.64606476 428.92346191]
[99.64606476 443.92346191]
[99.64606476 458.92346191]
[99.64606476 473.92346191]
[99.64606476 488.92346191]
[99.64606476 503.92346191]
[99.64606476 518.92346191]
[99.64606476 533.92346191]
[99.64606476 548.92346191]
[99.64606476 563.92346191]
[99.64606476 578.92346191]
[99.64606476 593.92346191]
[114.18595123 597.98480225]
[127.09033203 605.81927490]
[137.40161133 616.84564209]
[144.35462952 630.24554443]
[147.43344116 645.02471924]
[146.40954590 660.08636475]
[141.35894775 674.31292725]
[132.65641785 686.64855957]
[120.94775391 696.17797852]
[107.10181427 702.19403076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[37 115]
[38 114]
[39 113]
[40 112]
[43 110]
[44 109]
[45 108]
[59 92]
[60 91]
[61 90]
[62 86]
[63 85]
[64 84]
[66 82]
[67 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
