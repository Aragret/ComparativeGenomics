%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAACAACAGGGGGGGGGGUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGxxxxxxxxxxAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCCCCCCCCCCCUUAAAAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.85379028]
[71.19830322 349.83776855]
[59.48964310 340.30834961]
[50.78712082 327.97268677]
[45.73651886 313.74615479]
[44.71262741 298.68447876]
[47.79142761 283.90530396]
[54.74444962 270.50537109]
[65.05573273 259.47903442]
[77.96011353 251.64454651]
[92.50000000 247.58322144]
[92.50000000 232.58322144]
[92.50000000 217.58322144]
[92.50000000 202.58322144]
[92.50000000 187.58322144]
[92.50000000 172.58322144]
[92.50000000 157.58322144]
[92.50000000 142.58322144]
[92.50000000 127.58322906]
[92.50000000 112.58322906]
[86.55381012 108.01235962]
[79.36242676 121.17610168]
[72.50569916 134.51721191]
[57.54407883 133.44479370]
[52.66018295 119.26214600]
[63.78956985 109.20516205]
[74.66143036 98.87062836]
[68.71524048 94.29975891]
[54.21964264 98.15692139]
[42.99187469 110.10971069]
[27.09056854 106.09966278]
[22.87362671 90.25196838]
[34.67907715 78.86937714]
[50.36248398 83.66132355]
[64.85807800 79.80416107]
[82.65682983 82.84665680]
[95.80856323 92.88896942]
[100.71011353 78.71240997]
[105.61166382 64.53585052]
[110.51321411 50.35929489]
[100.88292694 37.58404922]
[100.10668945 21.75881958]
[108.27993011 8.36564255]
[122.42778015 1.94666231]
[124.60462189 -12.89454269]
[126.78145599 -27.73574829]
[128.95829773 -42.57695389]
[131.13513184 -57.41815948]
[106.41905975 -92.75949860]
[102.41132355 -107.21418762]
[98.40357971 -121.66887665]
[94.39584351 -136.12356567]
[90.57427216 -139.86724854]
[88.79405212 -144.26988220]
[88.95848846 -148.42616272]
[90.61923981 -151.60568237]
[87.52091980 -166.28221130]
[84.42259979 -180.95874023]
[69.35557556 -181.45686340]
[54.84576797 -185.54696655]
[41.73676300 -192.99125671]
[30.79070282 -203.35693359]
[22.64397430 -216.04135132]
[17.77021790 -230.30703735]
[16.45278931 -245.32461548]
[18.76827812 -260.22100830]
[24.58206940 -274.13009644]
[33.55615234 -286.24328613]
[45.16878891 -295.85629272]
[58.74483490 -302.41027832]
[73.49499512 -305.52413940]
[88.56172180 -305.01687622]
[103.06904602 -300.91796875]
[116.17353058 -293.46572876]
[127.11330414 -283.09341431]
[135.25233459 -270.40408325]
[140.11744690 -256.13543701]
[141.42578125 -241.11705017]
[139.10125732 -226.22209167]
[133.27903748 -212.31651306]
[124.29760742 -200.20877075]
[112.67914581 -190.60278320]
[99.09912872 -184.05705261]
[102.19744873 -169.38053894]
[105.29576874 -154.70401001]
[108.85053253 -140.13130188]
[112.85826874 -125.67661285]
[116.86601257 -111.22193146]
[120.87374878 -96.76724243]
[127.93614960 -94.24285889]
[139.37071228 -103.95115662]
[142.06095886 -89.19410706]
[149.12335205 -86.66972351]
[161.38572693 -95.30884552]
[173.64808655 -103.94795990]
[185.91046143 -112.58707428]
[192.30326843 -127.68886566]
[208.60922241 -129.43463135]
[218.05416870 -116.02846527]
[210.92195129 -101.26149750]
[194.54957581 -100.32470703]
[182.28721619 -91.68559265]
[170.02484131 -83.04647827]
[157.76246643 -74.40735626]
[172.74674988 -73.72086334]
[182.34640503 -62.19495010]
[180.31153870 -47.33361816]
[167.96693420 -38.81240082]
[153.34963989 -42.17908096]
[145.97633362 -55.24132156]
[143.79949951 -40.40011597]
[141.62266541 -25.55891228]
[139.44583130 -10.71770668]
[137.26898193 4.12349939]
[148.44075012 13.96153164]
[152.47856140 28.28951645]
[166.80116272 32.74633026]
[181.12374878 37.20314789]
[196.99291992 33.06775284]
[208.31465149 44.93157959]
[203.44212341 60.59014130]
[187.38777161 63.93524933]
[176.66694641 51.52574539]
[162.34434509 47.06892776]
[148.02174377 42.61211395]
[138.15354919 51.96167755]
[124.68977356 55.26084518]
[119.78822327 69.43740082]
[114.88667297 83.61396027]
[109.98511505 97.79051971]
[107.50000000 112.58322906]
[107.50000000 127.58322906]
[107.50000000 142.58322144]
[107.50000000 157.58322144]
[107.50000000 172.58322144]
[107.50000000 187.58322144]
[107.50000000 202.58322144]
[107.50000000 217.58322144]
[107.50000000 232.58322144]
[107.50000000 247.58322144]
[122.03988647 251.64454651]
[134.94427490 259.47903442]
[145.25555420 270.50537109]
[152.20857239 283.90530396]
[155.28736877 298.68447876]
[154.26348877 313.74615479]
[149.21287537 327.97268677]
[140.51036072 340.30834961]
[128.80169678 349.83776855]
[114.95575714 355.85379028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 35]
[29 34]
[37 130]
[38 129]
[39 128]
[40 127]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[49 89]
[50 88]
[51 87]
[52 86]
[56 85]
[57 84]
[58 83]
[93 104]
[94 103]
[95 102]
[96 101]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
