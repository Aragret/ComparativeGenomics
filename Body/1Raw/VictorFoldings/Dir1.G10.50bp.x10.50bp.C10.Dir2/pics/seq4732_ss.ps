%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGAGUAGGGGGGGGGGGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAxxxxxxxxxxAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUACCCCCCCCCCACCUGACUAG\
) } def
/len { sequence length } bind def

/coor [
[83.17251587 351.02038574]
[70.29924011 343.11749268]
[60.17494583 331.90701294]
[53.62036133 318.29766846]
[51.16684341 303.39273071]
[53.01327896 288.40048218]
[59.00999069 274.53628540]
[68.67085266 262.92404175]
[81.21269989 254.50508118]
[95.61882019 249.96191406]
[95.30676270 234.96516418]
[94.99471283 219.96841431]
[94.68265533 204.97164917]
[94.37059784 189.97489929]
[94.05854034 174.97814941]
[93.74648285 159.98139954]
[93.43442535 144.98463440]
[93.12237549 129.98788452]
[92.81031799 114.99113464]
[86.32215118 101.46694183]
[74.82035065 91.83841705]
[63.31854248 82.20989227]
[51.81674194 72.58136749]
[40.31493759 62.95283890]
[28.81313324 53.32431030]
[17.31133080 43.69578552]
[5.80952644 34.06726074]
[-5.81147814 43.61652374]
[-18.98585320 50.86580276]
[-33.26421356 55.56949615]
[-48.15982437 57.56880188]
[-63.16519165 56.79708099]
[-77.76934814 53.28208160]
[-91.47527313 47.14493942]
[-103.81678772 38.59600067]
[-114.37439728 27.92762184]
[-122.78959656 15.50416851]
[-128.77699280 1.74956512]
[-132.13403320 -12.86716366]
[-132.74780273 -27.84788895]
[-130.59886169 -42.68235397]
[-125.76184845 -56.86555099]
[-118.40289307 -69.91491699]
[-129.90469360 -79.54344177]
[-141.40650940 -89.17197418]
[-152.90830994 -98.80049896]
[-166.01460266 -91.18466949]
[-180.93580627 -88.51380920]
[-195.87010193 -91.11042786]
[-209.01411438 -98.66097260]
[-218.78063965 -110.25368500]
[-223.99031067 -124.48867798]
[-224.01403809 -139.64701843]
[-218.84895325 -153.89825439]
[-209.11877441 -165.52148438]
[-195.99847412 -173.11314392]
[-181.07237244 -175.75651550]
[-166.14288330 -173.13237000]
[-153.01280212 -165.55761719]
[-143.26766968 -153.94692993]
[-138.08424377 -139.70234680]
[-138.08845520 -124.54399872]
[-143.27978516 -110.30229950]
[-131.77796936 -100.67377472]
[-120.27617645 -91.04524994]
[-108.77436829 -81.41672516]
[-97.22314453 -90.95660400]
[-84.11209869 -98.21334076]
[-69.88704681 -102.93850708]
[-55.03199005 -104.96978760]
[-40.05264282 -104.23654938]
[-25.45923042 -100.76229858]
[-11.74909878 -94.66393280]
[0.61023176 -86.14780426]
[11.19700909 -75.50274658]
[19.64964104 -63.09025574]
[25.67904663 -49.33223724]
[29.07853889 -34.69666672]
[29.73091507 -19.68164444]
[27.61249161 -4.79848003]
[22.79396629 9.44574833]
[15.43805313 22.56545639]
[26.93985558 32.19398117]
[38.44165802 41.82250977]
[49.94346237 51.45103455]
[61.44526672 61.07955933]
[72.94706726 70.70808411]
[84.44887543 80.33661652]
[95.95067596 89.96514130]
[103.99321747 82.10868073]
[118.94232941 82.42167664]
[133.65028381 79.47619629]
[148.35824585 76.53071594]
[154.51100159 64.50568390]
[166.30384827 58.32857513]
[179.30595398 60.06626129]
[188.77690125 68.85819244]
[203.54295349 66.21932983]
[218.30900574 63.58046722]
[220.13819885 48.57561874]
[226.31040955 34.77724075]
[236.27679443 23.41227150]
[249.15116882 15.49127769]
[263.78872681 11.71858978]
[278.88790894 12.42967224]
[293.10614014 17.56129646]
[305.17910767 26.65715981]
[314.03332520 38.90846634]
[318.88143921 53.22583771]
[319.29238892 68.33618164]
[315.22964478 82.89589691]
[307.05441284 95.61035156]
[295.49368286 105.34896851]
[281.57537842 111.24581146]
[266.53717041 112.77652740]
[251.71617126 109.80501556]
[238.43031311 102.59548950]
[227.86093140 91.78902435]
[220.94787598 78.34651947]
[206.18180847 80.98538971]
[191.41575623 83.62425232]
[182.43161011 97.80673981]
[165.64576721 101.20078278]
[151.30374146 91.23867798]
[136.59577942 94.18415833]
[121.88780975 97.12963867]
[136.02532959 102.14269257]
[140.12644958 116.57115936]
[130.73931885 128.27081299]
[115.76495361 127.39419556]
[107.80706787 114.67907715]
[108.11912537 129.67582703]
[108.43118286 144.67257690]
[108.74324036 159.66934204]
[109.05529785 174.66609192]
[109.36734772 189.66284180]
[109.67940521 204.65959167]
[109.99146271 219.65635681]
[110.30352020 234.65310669]
[110.61557770 249.64985657]
[125.19821930 253.58981323]
[138.07942200 261.47976685]
[148.21498108 272.68008423]
[154.78323364 286.28283691]
[157.25172424 301.18530273]
[155.42034912 316.17938232]
[149.43756104 330.04959106]
[139.78837585 341.67153931]
[127.25498962 350.10308838]
[112.85343933 354.66073608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[43 66]
[44 65]
[45 64]
[46 63]
[91 126]
[92 125]
[93 124]
[97 121]
[98 120]
[99 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
