%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAACCACAGGGGGGGGGGAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAxxxxxxxxxxCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCACCCCCCCCCCACCAACCACA\
) } def
/len { sequence length } bind def

/coor [
[86.57239532 626.98718262]
[72.72645569 620.97113037]
[61.01779556 611.44171143]
[52.31526947 599.10607910]
[47.26466751 584.87951660]
[46.24077606 569.81787109]
[49.31957626 555.03869629]
[56.27259827 541.63879395]
[66.58388519 530.61242676]
[79.48826599 522.77795410]
[94.02815247 518.71661377]
[94.02815247 503.71661377]
[94.02815247 488.71661377]
[94.02815247 473.71661377]
[94.02815247 458.71661377]
[94.02815247 443.71661377]
[94.02815247 428.71661377]
[94.02815247 413.71661377]
[94.02815247 398.71661377]
[94.02815247 383.71661377]
[80.33424377 371.63876343]
[79.74153900 353.07141113]
[93.08574677 339.69491577]
[84.82570648 327.30050659]
[91.98224640 313.19042969]
[91.20240021 298.21069336]
[90.26676941 283.23989868]
[89.33114624 268.26913452]
[88.39551544 253.29832458]
[79.87941742 241.07846069]
[86.74085999 226.82254028]
[85.80522919 211.85174561]
[84.86959839 196.88095093]
[75.29909515 208.43107605]
[60.80802155 212.30520630]
[46.75054550 207.07189941]
[38.32062531 194.66479492]
[38.63294601 179.66804504]
[47.57211685 167.62266541]
[61.83528519 162.97917175]
[76.15249634 167.45324707]
[85.23353577 179.39099121]
[86.79111481 164.47207642]
[88.34870148 149.55317688]
[89.90628052 134.63426208]
[91.46385956 119.71534729]
[93.02143860 104.79643250]
[83.20663452 105.20950317]
[73.30228424 99.98503876]
[62.21096802 89.88639069]
[51.11965561 79.78774261]
[40.02833939 69.68909454]
[24.25507736 70.67891693]
[12.45721245 60.16292953]
[11.63420963 44.38008499]
[22.27434158 32.69406128]
[38.06500626 32.03797150]
[49.63788223 42.80105972]
[50.12698746 58.59777832]
[61.21830368 68.69642639]
[72.30961609 78.79507446]
[83.40093231 88.89372253]
[98.07746124 85.79540253]
[104.14047241 72.07534790]
[110.20348358 58.35529709]
[116.26650238 44.63524246]
[122.32951355 30.91518974]
[128.39253235 17.19513702]
[134.45553589 3.47508264]
[140.51855469 -10.24497128]
[128.20185852 -18.89282990]
[117.80917358 -29.77759933]
[109.73994446 -42.48089981]
[104.30434418 -56.51444626]
[101.71128845 -71.33882904]
[102.06046295 -86.38423920]
[105.33843231 -101.07236481]
[111.41920471 -114.83863831]
[120.06906128 -127.15393066]
[130.95550537 -137.54486084]
[143.66011047 -145.61203003]
[157.69454956 -151.04536438]
[172.51934814 -153.63601685]
[187.56469727 -153.28440857]
[202.25228882 -150.00405884]
[216.01759338 -143.92105103]
[228.33146667 -135.26921082]
[238.72064209 -124.38108063]
[246.78575134 -111.67516327]
[252.21681213 -97.63986206]
[254.80506897 -82.81464386]
[254.45103455 -67.76934814]
[251.16830444 -53.08227921]
[245.08306885 -39.31797028]
[236.42922974 -27.00548553]
[225.53941345 -16.61808205]
[212.83219910 -8.55502319]
[198.79602051 -3.12623286]
[183.97038269 -0.54037893]
[168.92514038 -0.89685458]
[154.23860168 -4.18195772]
[148.17559814 9.53809547]
[142.11257935 23.25815010]
[136.04956055 36.97820282]
[129.98655701 50.69825745]
[123.92353821 64.41831207]
[117.86052704 78.13836670]
[111.79751587 91.85841370]
[107.94035339 106.35401154]
[106.38277435 121.27292633]
[104.82519531 136.19183350]
[103.26760864 151.11074829]
[101.71002960 166.02966309]
[100.15245056 180.94857788]
[99.84039307 195.94532776]
[100.77602386 210.91612244]
[101.71164703 225.88691711]
[110.29467010 239.17759705]
[103.36630249 252.36270142]
[104.30193329 267.33349609]
[105.23756409 282.30429077]
[106.17319489 297.27508545]
[109.85204315 305.70822144]
[106.96926117 312.56643677]
[115.27393341 326.03280640]
[108.07276154 339.07092285]
[118.28275299 345.31024170]
[124.12676239 355.61346436]
[124.23987579 367.33782959]
[118.71033478 377.54037476]
[109.02815247 383.71661377]
[109.02815247 398.71661377]
[109.02815247 413.71661377]
[109.02815247 428.71661377]
[109.02815247 443.71661377]
[109.02815247 458.71661377]
[109.02815247 473.71661377]
[109.02815247 488.71661377]
[109.02815247 503.71661377]
[109.02815247 518.71661377]
[123.56803894 522.77795410]
[136.47241211 530.61242676]
[146.78370667 541.63879395]
[153.73672485 555.03869629]
[156.81552124 569.81787109]
[155.79162598 584.87951660]
[150.74102783 599.10607910]
[142.03851318 611.44171143]
[130.32984924 620.97113037]
[116.48390198 626.98718262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 126]
[25 124]
[26 122]
[27 121]
[28 120]
[29 119]
[31 117]
[32 116]
[33 115]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[49 62]
[50 61]
[51 60]
[52 59]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
[69 102]
[70 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
