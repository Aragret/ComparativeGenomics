%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACACCACGGGGGGGGGGAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAxxxxxxxxxxUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCCCCCCCCCCCACACACCAC\
) } def
/len { sequence length } bind def

/coor [
[83.40489960 365.66546631]
[70.18470001 358.39300537]
[59.29789352 347.94601440]
[51.48676300 335.03674316]
[47.28388214 320.54544067]
[46.97581100 305.46011353]
[50.58355331 290.80926514]
[57.86112595 277.59188843]
[68.31233215 266.70910645]
[81.22459412 258.90298462]
[95.71752930 254.70568848]
[95.40547180 239.70893860]
[95.09342194 224.71218872]
[94.78136444 209.71542358]
[94.46930695 194.71867371]
[94.15724945 179.72192383]
[93.84519196 164.72517395]
[93.53313446 149.72840881]
[93.22108459 134.73165894]
[92.90902710 119.73490906]
[76.70820618 99.80354309]
[91.74623871 75.75115204]
[76.75354004 76.21919250]
[61.76084137 76.68723297]
[46.76814651 77.15527344]
[39.44720078 90.58476257]
[26.47288322 98.49449158]
[11.38172531 98.84571075]
[-1.77100646 91.64421082]
[-9.50104809 78.91188812]
[-24.49374390 79.37992859]
[-39.48643875 79.84796906]
[-54.47913742 80.31601715]
[-69.47183228 80.78405762]
[-81.46024323 91.44509125]
[-97.24490356 88.57733917]
[-104.71717834 74.38069153]
[-98.14497375 59.74560928]
[-82.56992340 55.89886856]
[-69.93987274 65.79135895]
[-54.94717789 65.32331848]
[-39.95448303 64.85527802]
[-24.96178627 64.38723755]
[-9.96909046 63.91919327]
[-3.04828215 50.72949982]
[9.62964344 42.72161865]
[24.71332169 42.13084030]
[38.15575027 49.21589279]
[46.30010605 62.16257858]
[61.29280090 61.69453812]
[76.28549957 61.22649384]
[91.27819061 60.75845337]
[103.26502228 51.74092484]
[107.87059021 37.46546173]
[112.47615814 23.19000244]
[117.08171844 8.91454220]
[121.68728638 -5.36091900]
[126.29284668 -19.63637924]
[130.45072937 -34.04859543]
[126.36303711 -49.33261490]
[137.00506592 -59.75357437]
[140.71122742 -74.28851318]
[144.41738892 -88.82344818]
[147.82037354 -103.43234253]
[150.91868591 -118.10886383]
[149.62677002 -127.21835327]
[154.23715210 -133.05702209]
[143.60072327 -122.48033142]
[130.14656067 -115.84815979]
[115.27982330 -113.85317230]
[100.55316925 -116.70372009]
[87.50464630 -124.10209656]
[77.49703217 -135.27561951]
[71.57551575 -149.05734253]
[70.35854340 -164.00788879]
[73.97320557 -178.56584167]
[82.04199219 -191.21080017]
[93.72220612 -200.62210083]
[107.79397583 -205.81683350]
[122.78764343 -206.25248718]
[137.13729858 -201.88354492]
[149.34425354 -193.16630554]
[158.13362122 -181.01118469]
[162.58744812 -166.68766785]
[162.24003601 -151.68872070]
[170.49232483 -164.21467590]
[178.74461365 -176.74064636]
[179.17008972 -193.13426208]
[193.70732117 -200.72378540]
[207.40167236 -191.70175171]
[206.16554260 -175.34925842]
[191.27058411 -168.48835754]
[183.01829529 -155.96238708]
[174.76600647 -143.43643188]
[168.84603882 -129.65405273]
[165.59521484 -115.01054382]
[162.49688721 -100.33402252]
[164.34422302 -95.86603546]
[163.35829163 -90.18630981]
[158.95233154 -85.11728668]
[155.24617004 -70.58235168]
[151.54000854 -56.04741669]
[155.89279175 -41.80303192]
[144.98567200 -30.34243393]
[146.51272583 -27.09657669]
[146.50413513 -22.93705559]
[144.54229736 -18.61228752]
[140.56831360 -15.03081512]
[135.96273804 -0.75535440]
[131.35717773 13.52010632]
[126.75161743 27.79556656]
[122.14604950 42.07102585]
[117.54048920 56.34648895]
[124.44748688 69.66164398]
[138.77008057 74.11846161]
[150.00019836 63.64086533]
[164.96817017 60.19770432]
[179.64768982 64.71516418]
[190.09002686 75.97807312]
[193.48626709 90.95676422]
[188.92280579 105.62204742]
[177.62722778 116.02902985]
[162.63795471 119.37828827]
[147.98706055 114.76889801]
[137.61552429 103.44074249]
[134.31326294 88.44105530]
[119.99066925 83.98423767]
[124.02964020 98.66371918]
[119.02675629 112.04426575]
[107.90577698 119.42285156]
[108.21783447 134.41960144]
[108.52989197 149.41635132]
[108.84194946 164.41311646]
[109.15400696 179.40986633]
[109.46605682 194.40661621]
[109.77811432 209.40336609]
[110.09017181 224.40013123]
[110.40222931 239.39688110]
[110.71428680 254.39363098]
[125.36927795 257.98440552]
[138.59509277 265.24667358]
[149.48995972 275.68524170]
[157.31105042 288.58847046]
[161.52511597 303.07653809]
[161.84484863 318.16162109]
[158.24841309 332.81524658]
[150.98104858 346.03823853]
[140.53825378 356.92907715]
[127.63201904 364.74517822]
[113.14233398 368.95367432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 52]
[23 51]
[24 50]
[25 49]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[59 104]
[61 102]
[62 101]
[63 100]
[64 97]
[65 96]
[67 95]
[85 94]
[86 93]
[87 92]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
