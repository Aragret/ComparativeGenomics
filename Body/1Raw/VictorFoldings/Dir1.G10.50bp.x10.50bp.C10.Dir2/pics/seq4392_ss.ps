%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCAGGGGGGGGGGUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCxxxxxxxxxxUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACCCCCCCCCCCACCCUAGUA\
) } def
/len { sequence length } bind def

/coor [
[83.05111694 557.55908203]
[69.20517731 551.54309082]
[57.49651718 542.01367188]
[48.79399109 529.67797852]
[43.74338913 515.45147705]
[42.71949768 500.38977051]
[45.79829788 485.61062622]
[52.75131989 472.21069336]
[63.06260300 461.18435669]
[75.96697998 453.34985352]
[90.50687408 449.28854370]
[90.50687408 434.28854370]
[90.50687408 419.28854370]
[90.50687408 404.28854370]
[90.50687408 389.28854370]
[90.50687408 374.28854370]
[90.50687408 359.28854370]
[90.50687408 344.28854370]
[90.50687408 329.28854370]
[90.50687408 314.28854370]
[90.50687408 299.28854370]
[75.96447754 295.73788452]
[62.68652344 288.80563354]
[51.44684601 278.89093018]
[42.90166473 266.56680298]
[37.55126190 252.54721069]
[35.71071243 237.64550781]
[37.49131012 222.72738647]
[42.79386139 208.66053772]
[51.31420135 196.26417542]
[62.56063461 186.26132202]
[75.88230133 179.23669434]
[90.50687408 175.60246277]
[90.50687408 160.60246277]
[90.50687408 145.60246277]
[90.50687408 130.60246277]
[90.50687408 115.60245514]
[86.86175537 130.15281677]
[79.15807343 143.02345276]
[68.05640411 153.11073303]
[54.50870514 159.54966736]
[39.67667007 161.78813171]
[24.83212662 159.63420105]
[11.24796677 153.27253723]
[0.08901705 143.24867249]
[-7.68786049 130.42213440]
[-11.41580963 115.89277649]
[-10.77516365 100.90646362]
[-5.82085705 86.74825287]
[3.02228498 74.63219452]
[14.99597645 65.59722137]
[29.07349014 60.41807175]
[44.04769897 59.53884506]
[58.63459015 63.03493881]
[71.58499908 70.60788727]
[71.89705658 55.61112976]
[72.20911407 40.61437607]
[64.10540009 53.23697281]
[53.44064331 63.78509521]
[40.72970200 71.74951172]
[26.58622551 76.74571991]
[11.69302750 78.53252411]
[-3.23088956 77.02365112]
[-17.46504021 72.29195404]
[-30.32223511 64.56586456]
[-41.18176651 54.21836853]
[-49.51936340 41.74902725]
[-54.93250656 27.75982094]
[-57.15987015 12.92611408]
[-56.09391403 -2.03596234]
[-51.78610992 -16.40407944]
[-44.44441986 -29.48458481]
[-34.42328262 -40.64598465]
[-22.20649338 -49.34943390]
[-8.38384628 -55.17475891]
[6.37734079 -57.84072495]
[21.36443520 -57.21862411]
[35.85390091 -53.33849716]
[49.14622498 -46.38766098]
[60.59968567 -36.70167923]
[69.66134644 -24.74817467]
[75.89373779 -11.10422611]
[78.99596405 3.57147455]
[78.81851959 18.56833267]
[86.80843353 5.87340403]
[94.79835510 -6.82152557]
[92.65644073 -22.72095299]
[103.85527802 -34.20858002]
[119.80406952 -32.47208786]
[128.26828003 -18.84356117]
[122.75488281 -3.77763939]
[107.49328613 1.16839039]
[99.50336456 13.86332035]
[91.51345062 26.55825043]
[87.20586395 40.92643356]
[86.89380646 55.92318726]
[86.58175659 70.91994476]
[92.52794647 75.49080658]
[104.42032623 84.63254547]
[110.36651611 89.20340729]
[124.77873230 85.04552460]
[139.19094849 80.88763428]
[153.60316467 76.72974396]
[168.01538086 72.57186127]
[178.99205017 60.38807678]
[194.97334290 64.06645203]
[199.51905823 79.82299042]
[187.95297241 91.44871521]
[172.17326355 86.98407745]
[157.76104736 91.14196014]
[143.34883118 95.29985046]
[128.93661499 99.45774078]
[114.52439880 103.61562347]
[105.50687408 115.60245514]
[105.50687408 130.60246277]
[105.50687408 145.60246277]
[105.50687408 160.60246277]
[105.50687408 175.60246277]
[120.13143921 179.23669434]
[133.45310974 186.26132202]
[144.69953918 196.26417542]
[153.21987915 208.66053772]
[158.52243042 222.72738647]
[160.30302429 237.64550781]
[158.46247864 252.54721069]
[153.11207581 266.56680298]
[144.56689453 278.89093018]
[133.32722473 288.80563354]
[120.04926300 295.73788452]
[105.50687408 299.28854370]
[105.50687408 314.28854370]
[105.50687408 329.28854370]
[105.50687408 344.28854370]
[105.50687408 359.28854370]
[105.50687408 374.28854370]
[105.50687408 389.28854370]
[105.50687408 404.28854370]
[105.50687408 419.28854370]
[105.50687408 434.28854370]
[105.50687408 449.28854370]
[120.04676056 453.34985352]
[132.95114136 461.18435669]
[143.26242065 472.21069336]
[150.21543884 485.61062622]
[153.29425049 500.38977051]
[152.27035522 515.45147705]
[147.21975708 529.67797852]
[138.51722717 542.01367188]
[126.80856323 551.54309082]
[112.96262360 557.55908203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[33 118]
[34 117]
[35 116]
[36 115]
[37 114]
[55 97]
[56 96]
[57 95]
[84 94]
[85 93]
[86 92]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
