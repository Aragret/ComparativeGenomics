%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAACCAUGGGGGGGGGGUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAxxxxxxxxxxAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUCCCCCCCCCCGAAAAACCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.26766968]
[71.19830322 376.25164795]
[59.48964310 366.72222900]
[50.78712082 354.38653564]
[45.73651886 340.16003418]
[44.71262741 325.09835815]
[47.79142761 310.31918335]
[54.74444962 296.91925049]
[65.05573273 285.89291382]
[77.96011353 278.05841064]
[92.50000000 273.99710083]
[92.50000000 258.99710083]
[92.50000000 243.99710083]
[92.50000000 228.99710083]
[92.50000000 213.99710083]
[92.50000000 198.99710083]
[92.50000000 183.99710083]
[92.50000000 168.99710083]
[92.50000000 153.99710083]
[92.50000000 138.99710083]
[84.95236206 136.75041199]
[77.99645233 133.05854797]
[71.90580750 128.06671143]
[66.91992950 121.97118378]
[63.23488235 115.01166534]
[48.52692032 117.95714569]
[33.81895828 120.90263367]
[19.11099815 123.84811401]
[4.40303612 126.79359436]
[-10.30492592 129.73907471]
[-25.01288795 132.68455505]
[-39.35634995 141.72344971]
[-52.01265717 130.44273376]
[-44.67641830 115.15823364]
[-27.95837021 117.97660065]
[-13.25040817 115.03112030]
[1.45755363 112.08563232]
[16.16551590 109.14015198]
[30.87347603 106.19467163]
[45.58143997 103.24918365]
[60.28939819 100.30370331]
[59.45824051 93.82527924]
[59.70896912 87.09654999]
[61.09864807 80.30171204]
[63.65252686 73.63643646]
[51.76014709 64.49469757]
[39.86776733 55.35296631]
[27.97538757 46.21123123]
[16.08300781 37.06949615]
[4.19062757 27.92776108]
[-11.44576645 30.22531128]
[-24.07694054 20.72641754]
[-26.20904350 5.06660604]
[-16.57713699 -7.46343422]
[-0.89565861 -9.42985344]
[11.53184700 0.33399084]
[13.33236217 16.03538322]
[25.22474098 25.17711639]
[37.11712265 34.31885147]
[49.00950241 43.46058655]
[60.90188217 52.60231781]
[72.79425812 61.74405289]
[86.25022888 55.11555481]
[86.25022888 40.11555481]
[86.25022888 25.11555481]
[86.09419250 10.11636639]
[85.78213501 -4.88038731]
[85.47007751 -19.87714195]
[71.41561127 -25.74160767]
[60.96623993 -36.81998444]
[55.93236923 -51.19287872]
[57.18615341 -66.37009430]
[64.51036072 -79.72209167]
[76.63603973 -88.93555450]
[91.46233368 -92.41419220]
[106.42049408 -89.55531311]
[118.91894531 -80.85424042]
[126.79223633 -67.81847382]
[128.67628479 -52.70655060]
[124.24465942 -38.13669968]
[114.26517487 -26.63323212]
[100.46682739 -20.18919754]
[100.77888489 -5.19244337]
[101.09094238 9.80430984]
[104.39589691 16.46936417]
[101.25022888 25.11555481]
[101.25022888 40.11555481]
[101.25022888 55.11555481]
[124.44030762 65.46686554]
[137.06945801 85.75643158]
[151.83551025 83.11756897]
[166.60157776 80.47870636]
[181.36763000 77.83984375]
[196.13368225 75.20098114]
[210.89973450 72.56211090]
[215.70555115 61.60414505]
[225.12680054 54.42438889]
[236.72888184 52.73159790]
[247.58378601 56.83512497]
[255.00898743 65.59621429]
[269.87203979 63.57387924]
[284.73507690 61.55154419]
[288.23120117 46.78192902]
[296.82986450 34.27483368]
[309.36816406 25.72173691]
[324.15042114 22.27938080]
[339.17739868 24.41331100]
[352.41690063 31.83493423]
[362.07833862 43.54053497]
[366.85510254 57.94702530]
[366.10116577 73.10604858]
[359.91848755 86.96747589]
[349.14324951 97.65665436]
[335.23266602 103.72795868]
[320.06808472 104.36030579]
[305.70037842 99.46817017]
[294.07263184 89.71316528]
[286.75741577 76.41458893]
[271.89437866 78.43692780]
[257.03134155 80.45925903]
[246.91000366 95.65650177]
[228.59208679 98.74708557]
[213.53860474 87.32817078]
[198.77255249 89.96703339]
[184.00648499 92.60589600]
[169.24043274 95.24475861]
[154.47438049 97.88362885]
[139.70832825 100.52249146]
[135.42306519 117.95078278]
[123.90259552 131.71261597]
[107.50000000 138.99710083]
[107.50000000 153.99710083]
[107.50000000 168.99710083]
[107.50000000 183.99710083]
[107.50000000 198.99710083]
[107.50000000 213.99710083]
[107.50000000 228.99710083]
[107.50000000 243.99710083]
[107.50000000 258.99710083]
[107.50000000 273.99710083]
[122.03988647 278.05841064]
[134.94427490 285.89291382]
[145.25555420 296.91925049]
[152.20857239 310.31918335]
[155.28736877 325.09835815]
[154.26348877 340.16003418]
[149.21287537 354.38653564]
[140.51036072 366.72222900]
[128.80169678 376.25164795]
[114.95575714 382.26766968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[63 88]
[64 87]
[65 86]
[66 84]
[67 83]
[68 82]
[90 128]
[91 127]
[92 126]
[93 125]
[94 124]
[95 123]
[100 120]
[101 119]
[102 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
