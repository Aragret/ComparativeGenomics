%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCAGAAGGGGGGGGGGACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUxxxxxxxxxxUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCCCCCCCCCCCUACUCAGUA\
) } def
/len { sequence length } bind def

/coor [
[72.30580139 484.06289673]
[58.45986557 478.04684448]
[46.75120544 468.51742554]
[38.04867935 456.18176270]
[32.99807739 441.95526123]
[31.97418785 426.89355469]
[35.05298615 412.11441040]
[42.00600815 398.71447754]
[52.31729126 387.68814087]
[65.22167206 379.85363770]
[79.76155853 375.79232788]
[79.76155853 360.79232788]
[79.76155853 345.79232788]
[79.76155853 330.79232788]
[79.76155853 315.79232788]
[79.76155853 300.79232788]
[79.76155853 285.79232788]
[79.76155853 270.79232788]
[79.76155853 255.79232788]
[79.76155853 240.79232788]
[67.23503876 232.53967285]
[54.70963669 224.28775024]
[40.92725372 230.20771790]
[34.22439575 236.51037598]
[26.79603004 236.10415649]
[12.89347458 241.73611450]
[3.24128413 254.99383545]
[-13.03557014 252.99482727]
[-19.19285583 237.79548645]
[-8.89648533 225.03160095]
[7.26151800 227.83355713]
[21.16407394 222.20159912]
[35.00728989 216.42532349]
[48.78967285 210.50537109]
[33.97282028 208.16850281]
[24.54797745 196.49922180]
[25.38121033 181.52238464]
[36.04231644 170.97056580]
[51.02694702 170.29170227]
[62.59850311 179.83628845]
[64.78211212 194.67843628]
[70.84512329 180.95837402]
[76.90814209 167.23832703]
[82.97115326 153.51826477]
[89.03416443 139.79821777]
[95.09717560 126.07816315]
[62.57389069 83.76085663]
[56.79761887 69.91764069]
[48.28652954 57.56607056]
[37.40770340 47.23886490]
[26.52887726 36.91165924]
[15.65005302 26.58445549]
[0.13417424 28.53163910]
[-12.97519302 20.00646973]
[-17.48820686 5.03427172]
[-11.27395916 -9.31554127]
[2.73337126 -16.26742744]
[17.91995239 -12.53891659]
[27.11514282 0.10950089]
[25.97725677 15.70562935]
[36.85608292 26.03283501]
[47.73490906 36.36003876]
[58.61373520 46.68724442]
[54.69191742 32.20900726]
[54.92809296 17.21086693]
[59.30382919 2.86329031]
[67.47763824 -9.71402359]
[78.81163025 -19.53953171]
[92.42129517 -25.84644318]
[107.24451447 -28.14256096]
[122.12447357 -26.24869347]
[135.89993286 -20.31264114]
[147.49583435 -10.79765606]
[156.00724792 1.55370140]
[160.76989746 15.77752209]
[161.41213989 30.76376724]
[157.88381958 45.34289551]
[150.46031189 58.37714386]
[139.72096252 68.84930420]
[126.50385284 75.94211578]
[111.84046936 79.10206604]
[96.87516022 78.08252716]
[82.77581787 72.96308136]
[70.64083862 64.14137268]
[76.41710663 77.98458862]
[83.75537109 79.53374481]
[98.43190002 82.63207245]
[105.77015686 84.18122864]
[116.64898682 73.85402679]
[127.52780914 63.52682114]
[138.40663147 53.19961548]
[149.28546143 42.87240982]
[151.13835144 26.93671608]
[164.82830811 18.57223129]
[179.85357666 24.19547462]
[184.68804932 39.49277496]
[175.62313843 52.72935104]
[159.61267090 53.75123596]
[148.73384094 64.07843781]
[137.85501099 74.40564728]
[126.97618866 84.73284912]
[116.09736633 95.06005859]
[121.58439636 109.02044678]
[136.58358765 109.17648315]
[151.58277893 109.33251953]
[166.58195496 109.48855591]
[158.42160034 96.90251160]
[162.97114563 82.60910034]
[176.90524292 77.05564880]
[190.03919983 84.30127716]
[192.77316284 99.05002594]
[183.10940552 110.52146912]
[198.01130676 112.23416138]
[212.91320801 113.94684601]
[229.33912659 109.74855042]
[237.92050171 124.37033081]
[226.24569702 136.66404724]
[211.20051575 128.84875488]
[196.29861450 127.13606262]
[181.39671326 125.42337036]
[166.42591858 124.48774719]
[151.42674255 124.33171082]
[136.42755127 124.17567444]
[121.42835999 124.01963806]
[108.81723022 132.14117432]
[102.75421906 145.86123657]
[96.69120789 159.58128357]
[90.62818909 173.30133057]
[84.56517792 187.02139282]
[78.50216675 200.74143982]
[94.76155853 240.79232788]
[94.76155853 255.79232788]
[94.76155853 270.79232788]
[94.76155853 285.79232788]
[94.76155853 300.79232788]
[94.76155853 315.79232788]
[94.76155853 330.79232788]
[94.76155853 345.79232788]
[94.76155853 360.79232788]
[94.76155853 375.79232788]
[109.30144501 379.85363770]
[122.20582581 387.68814087]
[132.51710510 398.71447754]
[139.47013855 412.11441040]
[142.54893494 426.89355469]
[141.52503967 441.95526123]
[136.47444153 456.18176270]
[127.77191162 468.51742554]
[116.06325531 478.04684448]
[102.21731567 484.06289673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 34]
[23 33]
[25 32]
[26 31]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[46 125]
[47 85]
[48 84]
[49 63]
[50 62]
[51 61]
[52 60]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[103 124]
[104 123]
[105 122]
[106 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
