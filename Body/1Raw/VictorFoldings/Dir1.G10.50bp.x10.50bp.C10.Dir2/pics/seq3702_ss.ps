%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUAUUUAGGGGGGGGGGUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAxxxxxxxxxxUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCCCCCCCCCCCUCCUACUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 363.14849854]
[71.19830322 357.13247681]
[59.48964310 347.60305786]
[50.78712082 335.26739502]
[45.73651886 321.04086304]
[44.71262741 305.97918701]
[47.79142761 291.20001221]
[54.74444962 277.80007935]
[65.05573273 266.77377319]
[77.96011353 258.93923950]
[92.50000000 254.87794495]
[92.50000000 239.87794495]
[92.50000000 224.87794495]
[92.50000000 209.87794495]
[92.50000000 194.87794495]
[92.50000000 179.87794495]
[92.50000000 164.87794495]
[92.50000000 149.87794495]
[92.50000000 134.87794495]
[92.50000000 119.87793732]
[83.41596985 117.43809509]
[75.35472107 110.74044037]
[70.29891205 100.34072876]
[56.17411041 105.38948822]
[42.04930878 110.43824005]
[27.92450333 115.48699951]
[21.39004135 129.87715149]
[6.56494856 135.35365295]
[-7.75530815 128.66741943]
[-13.07477474 113.78525543]
[-6.23750687 99.53649139]
[8.70006657 94.37466431]
[22.87574768 101.36219788]
[37.00054932 96.31343842]
[51.12535477 91.26467896]
[65.25016022 86.21592712]
[66.96284485 71.31402588]
[54.35171890 63.19248199]
[41.74058914 55.07093811]
[28.14963913 48.72380829]
[13.82704163 44.26699448]
[0.76876062 52.87020874]
[-14.75845718 51.01561356]
[-25.42313385 39.57888794]
[-26.18973541 23.96010590]
[-16.69629478 11.53397846]
[-1.42532694 8.16774368]
[12.41268635 15.45083427]
[18.28385735 29.94439697]
[32.60645294 34.40121460]
[36.60141373 28.05374718]
[44.59132767 15.35881805]
[48.58628845 9.01135349]
[38.37280655 -1.97431111]
[28.15932846 -12.95997620]
[12.33352661 -17.25835419]
[8.40529823 -33.18007278]
[20.41566658 -44.34622955]
[36.00939560 -39.27004242]
[39.14499283 -23.17345619]
[49.35847092 -12.18779087]
[59.57195282 -1.20212626]
[63.19305038 26.25864029]
[49.86213303 42.45981216]
[62.47325897 50.58135223]
[75.08438873 58.70289612]
[90.07708740 58.23485184]
[102.15707397 49.34250259]
[114.23706055 40.45015335]
[126.31704712 31.55780411]
[121.15522766 18.60040665]
[119.26917267 4.79083824]
[120.76530457 -9.05639648]
[125.55066681 -22.12574005]
[133.33876038 -33.64860916]
[143.66661072 -42.94859695]
[155.92236328 -49.48118210]
[169.38148499 -52.86559296]
[183.24958801 -52.90702820]
[196.70938110 -49.60783005]
[208.96875000 -43.16709137]
[219.30741882 -33.96863174]
[231.74685669 -42.35077667]
[244.18629456 -50.73292160]
[256.62573242 -59.11506271]
[269.06518555 -67.49720764]
[281.50460815 -75.87934875]
[293.94406128 -84.26148987]
[306.38351440 -92.64363861]
[292.52255249 -98.37722778]
[288.15866089 -112.72840881]
[296.48147583 -125.20762634]
[311.40768433 -126.69358063]
[322.02743530 -116.10015869]
[320.57891846 -101.17086792]
[333.82150269 -108.21600342]
[347.06408691 -115.26113892]
[349.08663940 -130.64582825]
[359.79025269 -141.88027954]
[375.05911255 -144.64460754]
[389.02203369 -137.87586975]
[396.31002808 -124.17678833]
[394.12069702 -108.81494141]
[383.29586792 -97.69726562]
[367.99792480 -95.09873962]
[354.10922241 -102.01854706]
[340.86663818 -94.97341156]
[327.62405396 -87.92828369]
[314.76565552 -80.20419312]
[302.32620239 -71.82205200]
[289.88677979 -63.43991089]
[277.44732666 -55.05776596]
[265.00787354 -46.67562103]
[252.56845093 -38.29347992]
[240.12899780 -29.91133690]
[227.68955994 -21.52919388]
[232.79255676 -6.23858976]
[233.41188049 9.88306427]
[229.49024963 25.54705811]
[221.33366394 39.49908066]
[209.58758545 50.61967468]
[195.18579102 58.01403427]
[179.27626038 61.08402252]
[163.12956238 59.57654190]
[148.03741455 53.60437393]
[135.20939636 43.63779449]
[123.12940979 52.53014374]
[111.04942322 61.42249298]
[98.96943665 70.31484222]
[124.97795868 94.99532318]
[107.50000000 119.87793732]
[107.50000000 134.87794495]
[107.50000000 149.87794495]
[107.50000000 164.87794495]
[107.50000000 179.87794495]
[107.50000000 194.87794495]
[107.50000000 209.87794495]
[107.50000000 224.87794495]
[107.50000000 239.87794495]
[107.50000000 254.87794495]
[122.03988647 258.93923950]
[134.94427490 266.77377319]
[145.25555420 277.80007935]
[152.20857239 291.20001221]
[155.28736877 305.97918701]
[154.26348877 321.04086304]
[149.21287537 335.26739502]
[140.51036072 347.60305786]
[128.80169678 357.13247681]
[114.95575714 363.14849854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 36]
[24 35]
[25 34]
[26 33]
[37 66]
[38 65]
[39 64]
[40 50]
[41 49]
[53 62]
[54 61]
[55 60]
[67 129]
[68 128]
[69 127]
[70 126]
[82 116]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
