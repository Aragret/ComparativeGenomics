%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACCAGACGGGGGGGGGGAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAxxxxxxxxxxAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACCCCCCCCCCCUACUAACAGAC\
) } def
/len { sequence length } bind def

/coor [
[91.98019409 531.45898438]
[78.49131012 524.72747803]
[67.00581360 514.96289062]
[58.19144440 502.73300171]
[52.56066132 488.74880981]
[50.44083405 473.82333374]
[51.95520401 458.82434082]
[57.01572418 444.62384033]
[65.32819366 432.04739380]
[76.40932465 421.82626343]
[89.61487579 414.55462646]
[104.17710114 410.65524292]
[103.86912537 395.65841675]
[103.56114197 380.66156006]
[103.25316620 365.66473389]
[102.94519043 350.66790771]
[102.63721466 335.67105103]
[102.32923126 320.67422485]
[102.02125549 305.67736816]
[101.71327972 290.68054199]
[101.40530396 275.68371582]
[85.77265930 270.70785522]
[72.75413513 260.68313599]
[63.92149353 246.79779053]
[60.34862518 230.70758057]
[62.48099899 214.33822632]
[70.08018494 199.65490723]
[82.25041199 188.42642212]
[97.54407501 182.01205444]
[96.62066650 167.04051208]
[95.69725037 152.06895447]
[94.77383423 137.09741211]
[84.69917297 134.19671631]
[75.82274628 128.61801147]
[68.83967590 120.79818726]
[64.29682922 111.34962463]
[62.54995728 101.01224518]
[47.77784348 98.40752411]
[33.00572586 95.80280304]
[18.23361015 93.19808197]
[3.01690483 99.31231689]
[-9.71778584 88.97985840]
[-6.87010384 72.82984924]
[8.63049984 67.47603607]
[20.83833313 78.42596436]
[35.61045074 81.03068542]
[50.38256454 83.63540649]
[65.15467834 86.24012756]
[71.51920319 75.66126251]
[80.97666168 67.72550964]
[92.50000000 63.29468536]
[92.50000000 48.29468536]
[82.91764069 32.60363388]
[92.20515442 17.74474335]
[91.89717102 2.74790549]
[91.58919525 -12.24893284]
[91.28121948 -27.24577141]
[90.97324371 -42.24260712]
[88.50756073 -45.98694992]
[87.50295258 -49.92576981]
[87.83579254 -53.56389618]
[89.23083496 -56.50040436]
[91.30650330 -58.47083664]
[92.22991943 -73.44239044]
[93.15333557 -88.41394043]
[94.07674408 -103.38549042]
[79.72476959 -108.01923370]
[66.97649384 -116.07728577]
[56.63328552 -127.05311584]
[49.34532166 -140.25677490]
[45.57073975 -154.85824585]
[45.54680634 -169.93971252]
[49.27502823 -184.55310059]
[56.52104568 -197.77981567]
[66.82936859 -208.78842163]
[79.55200195 -216.88688660]
[93.88919830 -221.56616211]
[108.93971252 -222.53208923]
[123.75743866 -219.72395325]
[137.41094971 -213.31826782]
[149.04194641 -203.71771240]
[157.91929626 -191.52578735]
[163.48498535 -177.50886536]
[165.38914490 -162.54808044]
[163.51205444 -147.58387756]
[157.97172546 -133.55691528]
[149.11643982 -121.34895325]
[137.50282288 -111.72737122]
[123.86092377 -105.29700470]
[109.04829407 -102.46207428]
[108.12488556 -87.49052429]
[107.20146942 -72.51897430]
[106.27805328 -57.54742432]
[105.97007751 -42.55058670]
[106.27805328 -27.55374718]
[106.58603668 -12.55691051]
[106.89401245 2.43992782]
[107.20198822 17.43676567]
[115.72872925 26.07139778]
[116.07230377 38.60348892]
[107.50000000 48.29468536]
[107.50000000 63.29468536]
[119.02333832 67.72550964]
[128.48080444 75.66126251]
[134.84532166 86.24012756]
[149.61743164 83.63540649]
[164.38955688 81.03068542]
[179.16166687 78.42596436]
[191.36950684 67.47603607]
[206.87010193 72.82984924]
[209.71778870 88.97985840]
[196.98309326 99.31231689]
[181.76638794 93.19808197]
[166.99427795 95.80280304]
[152.22215271 98.40752411]
[137.45004272 101.01224518]
[129.42684937 123.18601227]
[109.74538422 136.17399597]
[110.66880035 151.14553833]
[111.59221649 166.11709595]
[112.51562500 181.08863831]
[125.79640961 184.38261414]
[137.58940125 191.28866577]
[146.93704224 201.23495483]
[153.08348083 213.40330505]
[155.53561401 226.79638672]
[154.10272217 240.31953430]
[148.91123962 252.87016296]
[140.39361572 263.42773438]
[129.25238037 271.13668823]
[116.40213776 275.37573242]
[116.71012115 290.37255859]
[117.01809692 305.36941528]
[117.32607269 320.36624146]
[117.63404846 335.36306763]
[117.94203186 350.35992432]
[118.25000763 365.35675049]
[118.55798340 380.35360718]
[118.86595917 395.35043335]
[119.17394257 410.34725952]
[133.88397217 413.64550781]
[147.37693787 420.36883545]
[158.86834717 430.12646484]
[167.69013977 442.35101318]
[173.32939148 456.33178711]
[175.45826721 471.25595093]
[173.95298767 486.25588989]
[168.90107727 500.45947266]
[160.59623718 513.04089355]
[149.52131653 523.26879883]
[136.32015991 530.54846191]
[121.76030731 534.45660400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[29 121]
[30 120]
[31 119]
[32 118]
[37 48]
[38 47]
[39 46]
[40 45]
[51 102]
[52 101]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[63 93]
[64 92]
[65 91]
[66 90]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
