%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUAUCCCCACGGGGGGGGGGCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAxxxxxxxxxxCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCCCCCCCCCCCGCUAUCACCAC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 392.21585083]
[70.87159729 387.06085205]
[58.28185654 378.77865601]
[47.94191742 367.81588745]
[40.40940475 354.76373291]
[36.09054184 340.32614136]
[35.21823120 325.28170776]
[37.83952332 310.44168091]
[43.81304932 296.60647583]
[52.81666565 284.52209473]
[64.36482239 274.84033203]
[77.83473969 268.08325195]
[92.50000000 264.61529541]
[92.50000000 249.61528015]
[92.50000000 234.61528015]
[92.50000000 219.61528015]
[92.50000000 204.61528015]
[92.50000000 189.61528015]
[92.50000000 174.61528015]
[92.50000000 159.61528015]
[92.50000000 144.61528015]
[92.50000000 129.61528015]
[92.50000000 114.61528015]
[81.52393341 104.39148712]
[66.56166077 105.45468140]
[51.59939194 106.51787567]
[36.63711929 107.58106995]
[21.69946480 108.94728851]
[6.79257059 110.61596680]
[-8.11432457 112.28463745]
[-13.61589527 126.56719208]
[-25.13237000 136.64833069]
[-40.01734543 140.21148682]
[-54.85036087 136.43788147]
[-66.22290802 126.19464874]
[-71.52164459 111.83560944]
[-69.52896881 96.66036987]
[-60.70278168 84.15608978]
[-47.07127762 77.19615936]
[-31.76687241 77.37992096]
[-18.30640793 84.66514587]
[-9.78300190 97.37774658]
[5.12389326 95.70906830]
[20.03078842 94.04039001]
[23.68924904 90.88773346]
[29.38349342 90.03848267]
[35.57392120 92.61879730]
[50.53619385 91.55560303]
[65.49846649 90.49240875]
[80.46073914 89.42920685]
[86.35884857 87.16583252]
[91.94344330 87.05923462]
[96.54964447 88.75975037]
[99.67899323 91.73416901]
[108.24801636 79.42271423]
[93.29486847 80.60732269]
[81.76298523 71.01484680]
[80.20507050 56.09596634]
[89.50637054 44.32796860]
[104.38166046 42.39772034]
[116.37841797 51.40203857]
[118.67977905 66.22451019]
[128.67903137 55.04349899]
[138.67826843 43.86248398]
[148.67752075 32.68147278]
[158.67675781 21.50045776]
[148.59233093 10.37741661]
[139.72584534 -1.73881555]
[132.17443848 -14.71548557]
[126.02085876 -28.41041565]
[121.33251190 -42.67355728]
[118.16078186 -57.34863281]
[116.54041290 -72.27485657]
[116.48915863 -87.28868103]
[118.00758362 -102.22562408]
[121.07905579 -116.92200470]
[125.66990662 -131.21682739]
[131.72984314 -144.95344543]
[139.19248962 -157.98136902]
[147.97604370 -170.15785217]
[157.98429871 -181.34948730]
[169.10758972 -191.43363953]
[181.22402954 -200.29983521]
[194.20088196 -207.85092163]
[207.89596558 -214.00418091]
[222.15921021 -218.69218445]
[236.83436584 -221.86355591]
[251.76063538 -223.48355103]
[266.77447510 -223.53443909]
[281.71136475 -222.01565552]
[296.40768433 -218.94383240]
[310.70239258 -214.35263062]
[324.43884277 -208.29235840]
[337.46658325 -200.82940674]
[349.64288330 -192.04554749]
[360.83425903 -182.03703308]
[370.91815186 -170.91349792]
[379.78405762 -158.79682922]
[387.33480835 -145.81979370]
[393.48773193 -132.12457275]
[398.17538452 -117.86119843]
[401.34640503 -103.18597412]
[402.96606445 -88.25966644]
[403.01657104 -73.24583435]
[401.49743652 -58.30897522]
[398.42523193 -43.61273575]
[393.83370972 -29.31814194]
[387.77307129 -15.58181381]
[380.30981445 -2.55425215]
[371.52566528 9.62180519]
[361.51687622 20.81295013]
[350.39309692 30.89656639]
[338.27621460 39.76217270]
[325.29898071 47.31263351]
[311.60360718 53.46522141]
[297.34014893 58.15252304]
[282.66482544 61.32318497]
[267.73849487 62.94246674]
[252.72465515 62.99262238]
[237.78782654 61.47311020]
[223.09165955 58.40057373]
[208.79718018 53.80867767]
[195.06100464 47.74773407]
[182.03361511 40.28415298]
[169.85777283 31.49970245]
[159.85853577 42.68071747]
[149.85928345 53.86173248]
[139.86004639 65.04274750]
[129.86079407 76.22376251]
[120.55947113 87.99173737]
[111.99044800 100.30319214]
[107.50000000 114.61528015]
[107.50000000 129.61528015]
[107.50000000 144.61528015]
[107.50000000 159.61528015]
[107.50000000 174.61528015]
[107.50000000 189.61528015]
[107.50000000 204.61528015]
[107.50000000 219.61528015]
[107.50000000 234.61528015]
[107.50000000 249.61528015]
[107.50000000 264.61529541]
[122.16526031 268.08325195]
[135.63517761 274.84033203]
[147.18333435 284.52209473]
[156.18695068 296.60647583]
[162.16047668 310.44168091]
[164.78176880 325.28170776]
[163.90945435 340.32614136]
[159.59059143 354.76373291]
[152.05809021 367.81588745]
[141.71813965 378.77865601]
[129.12840271 387.06085205]
[114.96779633 392.21585083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 50]
[25 49]
[26 48]
[27 47]
[28 44]
[29 43]
[30 42]
[54 131]
[55 130]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
