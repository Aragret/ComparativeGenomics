%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUCCAUCGGGGGGGGGGCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAxxxxxxxxxxUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAACCCCCCCCCCUAAUUACAUC\
) } def
/len { sequence length } bind def

/coor [
[109.23251343 203.18940735]
[107.01490784 188.35424805]
[106.77108002 173.35621643]
[108.50404358 158.46356201]
[106.93640900 143.54571533]
[105.36877441 128.62785339]
[99.59249878 142.47106934]
[102.22622681 158.65734863]
[89.35591888 168.82037354]
[74.22145844 162.50532532]
[72.39186859 146.20855713]
[85.74928284 136.69479370]
[91.52555847 122.85157776]
[82.01719666 111.25023651]
[70.00504303 121.54677582]
[56.00622177 116.45931244]
[41.29825974 119.40479279]
[26.59029961 122.35027313]
[11.88233757 125.29576111]
[-2.82562447 128.24124146]
[-17.53358650 131.18672180]
[-32.24154663 134.13220215]
[-45.74358368 146.60917664]
[-62.13692856 140.42385864]
[-76.78043365 143.67468262]
[-91.42393494 146.92552185]
[-106.06743622 150.17634583]
[-120.71093750 153.42716980]
[-135.35443115 156.67799377]
[-143.62973022 170.14257812]
[-159.02133179 173.73063660]
[-172.39767456 165.31344604]
[-175.82279968 149.88476562]
[-167.26466370 136.59817505]
[-151.80062866 133.33634949]
[-138.60525513 142.03448486]
[-123.96176147 138.78366089]
[-109.31826019 135.53283691]
[-94.67475891 132.28201294]
[-80.03125763 129.03118896]
[-65.38775635 125.78036499]
[-58.59685135 115.72099304]
[-46.37472916 112.92122650]
[-35.18703079 119.42424011]
[-20.47906876 116.47875977]
[-5.77110672 113.53327942]
[8.93685436 110.58779907]
[23.64481544 107.64231110]
[38.35277939 104.69683075]
[53.06073761 101.75135040]
[64.02088165 91.66548920]
[79.07171631 96.54227448]
[82.17441559 89.71415710]
[67.26900482 88.03228760]
[64.26271820 73.33663177]
[77.31021118 65.93643951]
[88.37982178 76.05791473]
[91.48252869 69.22978973]
[84.02761841 56.21348190]
[76.57270813 43.19717407]
[61.53006744 37.62056351]
[56.64816284 22.33833504]
[65.67196655 9.07370281]
[81.67919922 8.00215816]
[92.39047241 19.94569969]
[89.58901978 35.74226379]
[97.04393005 48.75857162]
[104.49884033 61.77487946]
[104.19689178 46.77791977]
[103.89494324 31.78096008]
[103.59299469 16.78400040]
[103.29104614 1.78703892]
[97.26431274 -11.94898987]
[96.26631165 -26.91575241]
[100.41592407 -41.33035278]
[109.21884155 -53.47566986]
[121.62641907 -61.90490341]
[136.16061401 -65.61393738]
[151.09008789 -64.16093445]
[164.63633728 -57.71898270]
[175.18572998 -47.05546951]
[181.48155212 -33.44067764]
[182.77383423 -18.49644661]
[178.90863037 -4.00299263]
[170.34637451 8.31316948]
[158.10630798 16.98524284]
[150.12493896 29.68555641]
[142.14358521 42.38586807]
[134.16223145 55.08617783]
[126.18087006 67.78649139]
[139.27403259 60.46738434]
[152.36717224 53.14828110]
[165.46032715 45.82917404]
[178.55348206 38.51007080]
[191.64663696 31.19096375]
[204.58470154 23.60105515]
[217.36206055 15.74362946]
[230.13941956 7.88620377]
[240.46432495 -5.56119919]
[256.24441528 0.63759369]
[254.65623474 17.51699066]
[237.99684143 20.66356087]
[225.21948242 28.52098656]
[212.44212341 36.37841415]
[210.47354126 40.79431534]
[205.67550659 43.98963928]
[198.96574402 44.28411865]
[185.87258911 51.60322189]
[172.77943420 58.92232895]
[159.68627930 66.24143219]
[146.59312439 73.56053925]
[133.49996948 80.87964630]
[148.49926758 80.73371887]
[163.49855042 80.58779144]
[176.96003723 73.97050476]
[191.17597961 69.18437958]
[205.89855957 66.31283569]
[220.87112427 65.40594482]
[235.83265686 66.47950745]
[250.52233887 69.51481628]
[264.68411255 74.45894623]
[278.07107544 81.22572327]
[290.44985962 89.69717407]
[301.60467529 99.72562408]
[311.34109497 111.13625336]
[319.48934937 123.73013306]
[325.90740967 137.28773499]
[330.48336792 151.57270813]
[333.13751221 166.33602905]
[333.82351685 181.32032776]
[332.52941895 196.26440430]
[329.27783203 210.90774536]
[324.12539673 224.99505615]
[317.16195679 238.28077698]
[308.50888062 250.53329468]
[298.31701660 261.53903198]
[286.76406860 271.10610962]
[274.05139160 279.06777954]
[260.40063477 285.28518677]
[246.04972839 289.65002441]
[231.24887085 292.08615112]
[216.25607300 292.55111694]
[201.33270264 291.03680420]
[186.73892212 287.56964111]
[172.72911072 282.21002197]
[159.54753113 275.05142212]
[147.42393494 266.21859741]
[136.56970215 255.86557007]
[127.17401886 244.17277527]
[119.40069580 231.34408569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 13]
[7 12]
[14 52]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[58 68]
[59 67]
[60 66]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
