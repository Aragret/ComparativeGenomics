%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAACUCCAGGGGGGGGGGGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACUAxxxxxxxxxxUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCCCCCCCCCCCUUUAACUCCA\
) } def
/len { sequence length } bind def

/coor [
[79.14062500 386.42691040]
[65.11868286 380.87390137]
[52.91872406 372.00756836]
[43.30765152 360.38525391]
[36.88962555 346.73754883]
[34.06808853 331.92236328]
[35.02040482 316.87097168]
[39.68671036 302.52957153]
[47.77367783 289.79959106]
[58.77295303 279.48132324]
[71.99311066 272.22335815]
[86.60312653 268.48190308]
[86.60312653 253.48191833]
[86.60312653 238.48191833]
[86.60312653 223.48191833]
[86.60312653 208.48191833]
[86.60312653 193.48191833]
[86.60312653 178.48191833]
[86.60312653 163.48191833]
[86.60312653 148.48191833]
[86.60312653 133.48191833]
[86.60312653 118.48191833]
[81.61625671 92.78347778]
[71.97444153 81.29280853]
[74.09349823 96.14237213]
[71.36480713 110.89208984]
[64.07349396 124.00074768]
[52.98144150 134.09858704]
[39.24767685 140.13047791]
[24.30726051 141.46614075]
[9.72134209 137.96600342]
[-2.98597550 129.99580383]
[-12.48688412 118.38835907]
[-17.78862000 104.35655212]
[-18.33719444 89.36658478]
[-14.07528687 74.98478699]
[-5.44823122 62.71393204]
[6.64251804 53.83621979]
[20.93358040 49.27929688]
[35.93165970 49.51932144]
[50.06958389 54.53121948]
[61.86972046 63.79091263]
[56.73941803 49.69552612]
[51.60911560 35.60013580]
[46.47881317 21.50474548]
[31.80346298 24.71683311]
[16.83091736 25.94416046]
[1.82838118 25.16482925]
[-12.93640804 22.39274406]
[-27.19995499 17.67737770]
[-40.70771027 11.10288239]
[-53.21860886 2.78658581]
[-64.50938416 -7.12309742]
[-74.37854004 -18.44931602]
[-82.64994812 -30.98994255]
[-89.17598724 -44.52117538]
[-93.84020233 -58.80152893]
[-96.55935669 -73.57615662]
[-97.28491211 -88.58139038]
[-96.00392914 -103.54943848]
[-92.73927307 -118.21318817]
[-87.54918671 -132.31092834]
[-80.52631378 -145.59109497]
[-71.79598236 -157.81666565]
[-61.51398087 -168.76947021]
[-49.86381912 -178.25404358]
[-37.05340195 -186.10112000]
[-23.31134415 -192.17066956]
[-8.88289165 -196.35435486]
[5.97446203 -198.57751465]
[20.99557114 -198.80049133]
[35.91236496 -197.01930237]
[50.45864105 -193.26571655]
[64.37479401 -187.60675049]
[77.41248322 -180.14335632]
[89.33903503 -171.00875854]
[99.94160461 -160.36596680]
[109.03096771 -148.40492249]
[116.44493103 -135.33905029]
[122.05116272 -121.40157318]
[125.74963379 -106.84118652]
[127.47432709 -91.91775513]
[127.19447327 -76.89759827]
[124.91506195 -62.04876709]
[120.67676544 -47.63626099]
[114.55522919 -33.91728973]
[106.65969849 -21.13667870]
[97.13107300 -9.52251434]
[86.13941193 0.71793234]
[73.88086700 9.40191078]
[60.57420349 16.37444496]
[65.70450592 30.46983337]
[70.83480835 44.56522369]
[75.96511078 58.66061401]
[83.46511078 71.65099335]
[93.10692596 83.14166260]
[92.45375824 68.15588379]
[103.07720947 57.56616211]
[118.06082916 58.26697540]
[127.64946747 69.80205536]
[125.60038757 84.66143799]
[113.24810028 93.17077637]
[128.22833252 93.94042969]
[143.20857239 94.71009064]
[158.18882751 95.47975159]
[173.16906738 96.24941254]
[188.14930725 97.01907349]
[203.12954712 97.78873444]
[209.30456543 83.92390442]
[220.07391357 73.22878265]
[233.98112488 67.14980316]
[249.14535522 66.50909424]
[263.51577759 71.39331055]
[275.14889526 81.14189148]
[282.47143555 94.43643188]
[284.49310303 109.47895050]
[280.94042969 124.23506927]
[272.29394531 136.70915222]
[259.72299194 145.21417236]
[244.92767334 148.59988403]
[229.90895081 146.40843201]
[216.69798279 138.93617249]
[207.08143616 127.19364929]
[202.35987854 112.76897430]
[187.37963867 111.99931335]
[172.39939880 111.22965240]
[157.41915894 110.45999146]
[142.43891907 109.69033051]
[127.45867920 108.92067719]
[112.47843933 108.15101624]
[101.60312653 118.48191833]
[101.60312653 133.48191833]
[101.60312653 148.48191833]
[101.60312653 163.48191833]
[101.60312653 178.48191833]
[101.60312653 193.48191833]
[101.60312653 208.48191833]
[101.60312653 223.48191833]
[101.60312653 238.48191833]
[101.60312653 253.48191833]
[101.60312653 268.48190308]
[116.21313477 272.22335815]
[129.43328857 279.48132324]
[140.43257141 289.79959106]
[148.51953125 302.52957153]
[153.18583679 316.87097168]
[154.13815308 331.92236328]
[151.31661987 346.73754883]
[144.89859009 360.38525391]
[135.28752136 372.00756836]
[123.08757019 380.87390137]
[109.06562042 386.42691040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 96]
[24 95]
[42 94]
[43 93]
[44 92]
[45 91]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
