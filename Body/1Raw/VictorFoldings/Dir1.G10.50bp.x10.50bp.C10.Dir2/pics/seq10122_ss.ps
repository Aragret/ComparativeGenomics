%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUCACUGGGGGGGGGGGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACxxxxxxxxxxUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGACCCCCCCCCCAUUCUCACUG\
) } def
/len { sequence length } bind def

/coor [
[87.05226898 377.11019897]
[73.20632935 371.09417725]
[61.49766541 361.56475830]
[52.79514313 349.22909546]
[47.74454117 335.00256348]
[46.72064972 319.94088745]
[49.79944992 305.16174316]
[56.75247192 291.76181030]
[67.06375122 280.73547363]
[79.96813202 272.90097046]
[94.50802612 268.83966064]
[94.50802612 253.83964539]
[94.50802612 238.83964539]
[94.50802612 223.83964539]
[94.50802612 208.83964539]
[94.50802612 193.83964539]
[94.50802612 178.83964539]
[94.50802612 163.83964539]
[94.50802612 148.83964539]
[94.50802612 133.83964539]
[88.37683868 129.52009583]
[83.94965363 143.85186768]
[68.95124054 144.06994629]
[64.10925293 129.87294006]
[76.11447144 120.88097382]
[69.98328400 116.56141663]
[55.85848236 121.61017609]
[45.66314697 134.45491028]
[29.48353767 131.78053284]
[23.96385002 116.33821106]
[34.78226852 104.01368713]
[50.80972672 107.48536682]
[64.93453217 102.43661499]
[69.83810425 89.58509064]
[78.71991730 80.78913116]
[89.29354858 76.93566132]
[99.27368164 77.82434082]
[103.87924194 63.54887772]
[98.69615936 51.69183350]
[102.87313080 39.86931610]
[113.64208984 34.27139664]
[118.54364014 20.09483910]
[123.44519806 5.91828108]
[127.90200806 -8.40431595]
[131.90974426 -22.85900497]
[135.91749573 -37.31369400]
[139.92523193 -51.76838303]
[142.71755981 -66.50618744]
[144.27513123 -81.42510223]
[145.83271790 -96.34400940]
[147.39030457 -111.26292419]
[132.72979736 -114.51367950]
[118.53542328 -119.41445160]
[104.99223328 -125.90134430]
[92.27678680 -133.88978577]
[80.55486298 -143.27563477]
[69.97927856 -153.93653870]
[60.68790054 -165.73348999]
[52.80187225 -178.51271057]
[46.42399597 -192.10757446]
[41.63742447 -206.34086609]
[38.50455856 -221.02700806]
[37.06624222 -235.97454834]
[37.34122849 -250.98861694]
[39.32593155 -265.87347412]
[42.99447250 -280.43502808]
[48.29903030 -294.48352051]
[55.17044830 -307.83572388]
[63.51914215 -320.31759644]
[73.23626709 -331.76638794]
[84.19514465 -342.03289795]
[96.25289917 -350.98321533]
[109.25233459 -358.50067139]
[123.02397919 -364.48730469]
[137.38829041 -368.86502075]
[152.15800476 -371.57675171]
[167.14054871 -372.58715820]
[182.14060974 -371.88305664]
[196.96264648 -369.47363281]
[211.41339111 -365.39028931]
[225.30447388 -359.68627930]
[238.45477295 -352.43597412]
[250.69287109 -343.73385620]
[261.85919189 -333.69338989]
[271.80819702 -322.44549561]
[280.41015625 -310.13681030]
[287.55291748 -296.92776489]
[293.14340210 -282.99060059]
[297.10867310 -268.50701904]
[299.39706421 -253.66581726]
[299.97872925 -238.66050720]
[298.84609985 -223.68669128]
[296.01391602 -208.93960571]
[291.51913452 -194.61149597]
[285.42031860 -180.88916016]
[277.79702759 -167.95150757]
[268.74859619 -155.96719360]
[258.39303589 -145.09245300]
[246.86531067 -135.46908569]
[234.31571960 -127.22252655]
[220.90788269 -120.46029663]
[206.81660461 -115.27056122]
[192.22557068 -111.72097015]
[177.32501221 -109.85779572]
[162.30920410 -109.70534515]
[160.75163269 -94.78643036]
[159.19404602 -79.86751556]
[157.63647461 -64.94860840]
[168.98828125 -74.75352478]
[183.92092896 -76.17330170]
[196.91711426 -68.68336487]
[203.17500305 -55.05108643]
[200.38241577 -40.31333160]
[189.57116699 -29.91540146]
[174.73579407 -27.69912529]
[161.35768127 -34.48337555]
[154.37991333 -47.76064301]
[150.37217712 -33.30595398]
[146.36444092 -18.85126495]
[142.35670471 -4.39657593]
[143.81588745 -1.11965168]
[143.72076416 3.03878927]
[141.66940308 7.32180929]
[137.62174988 10.81983185]
[132.72019958 24.99638939]
[127.81864929 39.17294693]
[132.09173584 56.16532135]
[118.15470123 68.15444183]
[113.54914093 82.42990112]
[128.14474487 105.45641327]
[109.50802612 133.83964539]
[109.50802612 148.83964539]
[109.50802612 163.83964539]
[109.50802612 178.83964539]
[109.50802612 193.83964539]
[109.50802612 208.83964539]
[109.50802612 223.83964539]
[109.50802612 238.83964539]
[109.50802612 253.83964539]
[109.50802612 268.83966064]
[124.04791260 272.90097046]
[136.95228577 280.73547363]
[147.26358032 291.76181030]
[154.21659851 305.16174316]
[157.29539490 319.94088745]
[156.27149963 335.00256348]
[151.22090149 349.22909546]
[142.51837158 361.56475830]
[130.80972290 371.09417725]
[116.96377563 377.11019897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 33]
[27 32]
[37 129]
[38 128]
[41 126]
[42 125]
[43 124]
[44 120]
[45 119]
[46 118]
[47 117]
[48 108]
[49 107]
[50 106]
[51 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
