%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAUUCCUGGGGGGGGGGAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCxxxxxxxxxxCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACCCCCCCCCCCACUAUUCCU\
) } def
/len { sequence length } bind def

/coor [
[83.62637329 425.84857178]
[69.78043365 419.83255005]
[58.07177353 410.30313110]
[49.36924744 397.96746826]
[44.31864548 383.74093628]
[43.29475403 368.67926025]
[46.37355423 353.90008545]
[53.32657623 340.50015259]
[63.63785934 329.47384644]
[76.54224396 321.63931274]
[91.08213043 317.57800293]
[91.08213043 302.57800293]
[91.08213043 287.57800293]
[91.08213043 272.57800293]
[91.08213043 257.57800293]
[91.08213043 242.57801819]
[91.08213043 227.57801819]
[91.08213043 212.57801819]
[91.08213043 197.57801819]
[91.08213043 182.57801819]
[82.73356628 173.76841736]
[82.64914703 161.23001099]
[91.42222595 151.71754456]
[91.73428345 136.72079468]
[74.76998138 131.69548035]
[60.89074326 118.77592468]
[46.47852707 122.93380737]
[32.06631088 127.09169769]
[17.65409470 131.24958801]
[4.11162853 141.44947815]
[-9.43858242 131.25987244]
[-3.39825869 115.41844177]
[13.49620819 116.83736420]
[27.90842438 112.67948151]
[42.32064056 108.52159119]
[56.73285675 104.36370850]
[57.82416534 89.40345764]
[44.16792679 83.19805145]
[30.51168442 76.99264526]
[26.06263733 77.59883881]
[22.07110405 76.79964447]
[18.93164062 74.92197418]
[16.88742065 72.38916016]
[16.01170158 69.66143799]
[2.91854644 62.34233475]
[-10.17460823 55.02322769]
[-24.72832298 60.74366760]
[-39.53762054 55.72183990]
[-47.61000443 42.32890701]
[-45.13393784 26.88860130]
[-33.27854919 16.69135857]
[-17.64158630 16.55200768]
[-5.60634708 26.53634644]
[-2.85550237 41.93007660]
[10.23765182 49.24917984]
[23.33080673 56.56828690]
[36.71709061 63.33639908]
[50.37333298 69.54180908]
[64.02957153 75.74721527]
[79.27359009 65.19232941]
[96.37061310 62.53580093]
[97.92819214 47.61688995]
[99.48577881 32.69797516]
[101.04335785 17.77906418]
[102.60093689 2.86015153]
[104.15851593 -12.05876064]
[90.01599121 -17.29705620]
[77.62095642 -25.88856125]
[67.75257874 -37.29320526]
[61.03119278 -50.79408646]
[57.87931061 -65.54252625]
[58.49505615 -80.61141968]
[62.83973312 -95.05353546]
[70.64022064 -107.96102142]
[81.40618134 -118.52249908]
[94.46086121 -126.07407379]
[108.98361969 -130.14105225]
[124.06155396 -130.46775818]
[138.74684143 -127.03367615]
[152.11637878 -120.05466461]
[163.32971191 -109.96942902]
[171.68197632 -97.41194916]
[176.64814758 -83.17158508]
[177.91604614 -68.14350128]
[175.40596008 -53.27237701]
[169.27568054 -39.49302292]
[159.91056824 -27.67162514]
[147.89932251 -18.55128098]
[133.99696350 -12.70530510]
[119.07743073 -10.50117970]
[117.51985168 4.41773224]
[115.96227264 19.33664513]
[114.40468597 34.25555801]
[112.84710693 49.17446899]
[111.28952789 64.09338379]
[126.47641754 73.24671936]
[135.78723145 88.33757019]
[150.68913269 86.62487793]
[165.59104919 84.91218567]
[180.49295044 83.19950104]
[195.39485168 81.48680878]
[210.29675293 79.77411652]
[213.79675293 65.02536774]
[222.13265991 52.36484909]
[234.29783630 43.32139587]
[248.82330322 38.98703766]
[263.95504761 39.88517380]
[277.86578369 45.90734863]
[288.87579346 56.32635880]
[295.65551758 69.88405609]
[297.38629150 84.94328308]
[293.85910034 99.68555450]
[285.49987793 112.33068848]
[273.31805420 121.35170746]
[258.78463745 125.65929413]
[243.65458679 124.73326874]
[229.75494385 118.68547058]
[218.76417542 108.24618530]
[212.00944519 94.67601776]
[197.10754395 96.38871002]
[182.20562744 98.10140228]
[167.30372620 99.81408691]
[152.40182495 101.52677917]
[137.49992371 103.23947144]
[134.48425293 115.08557892]
[127.83150482 125.34059906]
[118.24333954 132.92292786]
[106.73103333 137.03285217]
[106.41897583 152.02960205]
[115.67323303 167.91476440]
[106.08213043 182.57801819]
[106.08213043 197.57801819]
[106.08213043 212.57801819]
[106.08213043 227.57801819]
[106.08213043 242.57801819]
[106.08213043 257.57800293]
[106.08213043 272.57800293]
[106.08213043 287.57800293]
[106.08213043 302.57800293]
[106.08213043 317.57800293]
[120.62201691 321.63931274]
[133.52639771 329.47384644]
[143.83767700 340.50015259]
[150.79069519 353.90008545]
[153.86950684 368.67926025]
[152.84561157 383.74093628]
[147.79501343 397.96746826]
[139.09248352 410.30313110]
[127.38381958 419.83255005]
[113.53787994 425.84857178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[26 36]
[27 35]
[28 34]
[29 33]
[37 59]
[38 58]
[39 57]
[44 56]
[45 55]
[46 54]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
