%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCUAAAUGGGGGGGGGGCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUxxxxxxxxxxGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCCUAAAU\
) } def
/len { sequence length } bind def

/coor [
[87.38507080 510.07562256]
[73.53913116 504.05960083]
[61.83047104 494.53018188]
[53.12794495 482.19451904]
[48.07734299 467.96798706]
[47.05345154 452.90631104]
[50.13225174 438.12713623]
[57.08527374 424.72723389]
[67.39656067 413.70089722]
[80.30094147 405.86639404]
[94.84082794 401.80505371]
[94.84082794 386.80505371]
[94.84082794 371.80505371]
[94.84082794 356.80505371]
[94.84082794 341.80505371]
[94.84082794 326.80505371]
[94.84082794 311.80505371]
[94.84082794 296.80505371]
[94.84082794 281.80505371]
[94.84082794 266.80505371]
[79.86475372 262.55755615]
[66.67278290 254.26617432]
[56.33177567 242.59182739]
[49.68072510 228.46940613]
[47.26270294 213.03292847]
[49.28050613 197.52442932]
[55.57968903 183.19409180]
[65.66034698 171.19940186]
[78.71677399 162.51168823]
[93.70187378 157.83749390]
[93.38981628 142.84072876]
[93.07775879 127.84397888]
[74.25782013 117.06493378]
[67.32526398 94.85015106]
[78.02113342 72.41382599]
[65.75876617 63.77470779]
[53.49639511 55.13558960]
[41.23402786 46.49647522]
[28.97165871 37.85735703]
[16.70928955 29.21824265]
[5.33536053 39.11254120]
[-8.07624531 45.99674606]
[-22.74579430 49.47061539]
[-37.82041550 49.33218765]
[-52.42369843 45.58950424]
[-65.70661926 38.46016693]
[-76.89692688 28.35865974]
[-85.34403229 15.87227535]
[-90.55683899 1.72695339]
[-92.23226929 -13.25491428]
[-90.27292633 -28.20230293]
[-84.79271698 -42.24618912]
[-76.11025238 -54.57007980]
[-64.73033142 -64.45748138]
[-51.31455231 -71.33355713]
[-36.64289856 -74.79853058]
[-21.56836128 -74.65096283]
[-6.96735430 -70.89942932]
[6.31124067 -63.76203537]
[17.49542427 -53.65374756]
[25.93495941 -41.16224289]
[31.13918495 -27.01376534]
[32.80553436 -12.03088474]
[30.83712769 2.91531253]
[25.34840584 16.95587349]
[37.61077499 25.59498978]
[49.87314224 34.23410797]
[62.13550949 42.87322235]
[74.39788055 51.51233673]
[86.66024780 60.15145493]
[80.04081726 46.69102478]
[69.71296692 35.81281281]
[65.95588684 21.29095650]
[69.71221924 6.76890373]
[80.03951263 -4.10983753]
[94.34671021 -8.61585140]
[109.04420471 -5.61860466]
[120.44448853 4.12991142]
[125.68728638 18.18384743]
[123.45720673 33.01714325]
[114.31575012 44.90666962]
[109.12982178 58.98168564]
[120.42882538 49.11596298]
[131.72782898 39.25024033]
[143.02682495 29.38451767]
[154.32583618 19.51879501]
[139.85887146 15.55560970]
[133.74209595 1.85943890]
[140.44638062 -11.55892563]
[155.07144165 -14.89174461]
[166.92753601 -5.70299768]
[167.34909058 9.29048157]
[179.61145020 0.65136576]
[191.87382507 -7.98775053]
[204.13618469 -16.62686729]
[216.39855957 -25.26598167]
[222.79136658 -40.36777496]
[239.09732056 -42.11353302]
[248.54226685 -28.70737457]
[241.41003418 -13.94040394]
[225.03767395 -13.00361443]
[212.77529907 -4.36449814]
[200.51293945 4.27461767]
[188.25056458 12.91373348]
[175.98820496 21.55285072]
[164.19155884 30.81779861]
[152.89256287 40.68352127]
[141.59355164 50.54924393]
[130.29454041 60.41497040]
[118.99554443 70.28069305]
[125.98664856 77.38542938]
[130.56275940 85.97671509]
[132.46331787 95.28513336]
[131.66081238 104.51728058]
[128.35263062 112.92324066]
[122.93431854 119.85749054]
[115.95720673 124.82830811]
[108.07451630 127.53192902]
[108.38657379 142.52868652]
[108.69862366 157.52543640]
[122.73611450 161.10461426]
[135.35223389 168.19989014]
[145.68469238 178.31907654]
[153.02915955 190.76354980]
[156.88728333 204.67648315]
[157.00051880 219.10185242]
[153.36740112 233.05010986]
[146.24325562 245.56608582]
[136.12223816 255.79438782]
[123.70307922 263.03784180]
[109.84082794 266.80505371]
[109.84082794 281.80505371]
[109.84082794 296.80505371]
[109.84082794 311.80505371]
[109.84082794 326.80505371]
[109.84082794 341.80505371]
[109.84082794 356.80505371]
[109.84082794 371.80505371]
[109.84082794 386.80505371]
[109.84082794 401.80505371]
[124.38071442 405.86639404]
[137.28509521 413.70089722]
[147.59637451 424.72723389]
[154.54939270 438.12713623]
[157.62820435 452.90631104]
[156.60430908 467.96798706]
[151.55371094 482.19451904]
[142.85118103 494.53018188]
[131.14251709 504.05960083]
[117.29657745 510.07562256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 120]
[31 119]
[32 118]
[35 70]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
