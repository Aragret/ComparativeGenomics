%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAACGAUGGGGGGGGGGUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCxxxxxxxxxxCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGACCCCCCCCCCGGUCAACGAU\
) } def
/len { sequence length } bind def

/coor [
[154.91421509 618.42156982]
[141.06826782 612.40557861]
[129.35961914 602.87615967]
[120.65708923 590.54046631]
[115.60648346 576.31396484]
[114.58259583 561.25225830]
[117.66139221 546.47308350]
[124.61441803 533.07318115]
[134.92570496 522.04681396]
[147.83007812 514.21234131]
[162.36996460 510.15103149]
[162.36996460 495.15103149]
[162.36996460 480.15103149]
[162.36996460 465.15103149]
[162.36996460 450.15103149]
[162.36996460 435.15103149]
[162.36996460 420.15103149]
[162.36996460 405.15103149]
[162.36996460 390.15103149]
[162.36996460 375.15103149]
[162.36996460 360.15103149]
[160.50234985 345.26773071]
[156.79618835 330.73278809]
[153.09002686 316.19787598]
[149.38386536 301.66293335]
[135.98861694 298.82980347]
[125.07691193 290.45043945]
[118.82257080 278.12197876]
[118.50263214 264.23519897]
[124.23704529 251.51091003]
[134.95391846 242.46687317]
[131.55093384 227.85798645]
[128.14796448 213.24908447]
[124.29080200 198.75349426]
[119.98321533 184.38531494]
[115.67562866 170.01712036]
[102.48169708 163.20129395]
[97.90850830 148.69126892]
[105.14704895 134.89846802]
[100.83946228 120.53028107]
[96.53187561 106.16210175]
[92.47065735 108.54517365]
[87.39061737 109.36573792]
[81.79106903 108.33320618]
[76.24104309 105.30133057]
[71.34013367 100.28303528]
[60.04112625 90.41731262]
[48.74212265 80.55158234]
[37.44311523 70.68585968]
[26.04209518 60.93820953]
[14.54029274 51.30968475]
[3.03848910 41.68115997]
[-13.19934654 39.38665771]
[-19.07938194 24.07792854]
[-8.55274010 11.50327682]
[7.55167150 14.59842777]
[12.66701508 30.17935562]
[24.16881943 39.80788040]
[35.67062378 49.43640900]
[42.86490250 51.33060074]
[47.30884171 59.38685989]
[58.60784531 69.25257874]
[69.90685272 79.11830139]
[81.20585632 88.98402405]
[95.38241577 84.08247375]
[98.17473602 69.34467316]
[100.96706390 54.60686493]
[87.20372772 48.46949768]
[75.22711945 39.32304001]
[65.68312836 27.66075134]
[59.08645630 14.11155987]
[55.79284286 -0.59384125]
[55.97990799 -15.66240883]
[59.63757324 -30.28151321]
[66.56857300 -43.66276550]
[76.39913940 -55.08452988]
[88.59911346 -63.93085098]
[102.51056671 -69.72464752]
[117.38327789 -72.15347290]
[132.41517639 -71.08634949]
[146.79560852 -66.58081818]
[159.74906921 -58.87985611]
[170.57696533 -48.39876938]
[178.69538879 -35.70278931]
[183.66651917 -21.47659492]
[185.22225952 -6.48738718]
[183.27873230 8.45648670]
[177.94071960 22.54912186]
[169.49610901 35.03052139]
[158.40029907 45.22757339]
[145.25169373 52.59037018]
[130.75936890 56.72184372]
[115.70486450 57.39918900]
[112.91254425 72.13699341]
[110.12021637 86.87480164]
[110.90006256 101.85451508]
[115.20764923 116.22270203]
[119.51523590 130.59088135]
[133.14802551 138.12644958]
[137.31184387 152.75920105]
[130.04380798 165.70953369]
[134.35139465 180.07772827]
[138.65898132 194.44590759]
[142.55761719 198.10928345]
[144.42903137 202.47392273]
[144.35110474 206.63272095]
[142.75685120 209.84611511]
[146.15983582 224.45500183]
[149.56280518 239.06390381]
[165.40649414 243.68519592]
[176.70684814 255.58465576]
[180.46113586 271.46343994]
[175.74075317 286.98437500]
[163.91880798 297.95675659]
[167.62496948 312.49169922]
[171.33113098 327.02664185]
[175.03729248 341.56158447]
[180.49108887 327.58816528]
[191.38528442 317.27716064]
[205.63731384 312.59963989]
[220.52279663 314.44970703]
[233.19619751 322.47372437]
[241.23487854 335.13781738]
[243.10215759 350.02114868]
[238.44111633 364.27859497]
[228.14273071 375.18469238]
[214.17564392 380.65466309]
[199.20980835 379.64285278]
[186.10609436 372.34268188]
[177.36996460 360.15103149]
[177.36996460 375.15103149]
[177.36996460 390.15103149]
[177.36996460 405.15103149]
[177.36996460 420.15103149]
[177.36996460 435.15103149]
[177.36996460 450.15103149]
[177.36996460 465.15103149]
[177.36996460 480.15103149]
[177.36996460 495.15103149]
[177.36996460 510.15103149]
[191.90985107 514.21234131]
[204.81423950 522.04681396]
[215.12551880 533.07318115]
[222.07853699 546.47308350]
[225.15733337 561.25225830]
[224.13345337 576.31396484]
[219.08283997 590.54046631]
[210.38032532 602.87615967]
[198.67166138 612.40557861]
[184.82572937 618.42156982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 117]
[23 116]
[24 115]
[25 114]
[31 109]
[32 108]
[33 107]
[34 103]
[35 102]
[36 101]
[39 98]
[40 97]
[41 96]
[46 64]
[47 63]
[48 62]
[49 61]
[50 59]
[51 58]
[52 57]
[65 95]
[66 94]
[67 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
