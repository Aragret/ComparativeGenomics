%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCACCGGGGGGGGGGACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGxxxxxxxxxxUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCCCCCCCCCCCAACCACACC\
) } def
/len { sequence length } bind def

/coor [
[45.10299301 514.18078613]
[31.88279533 506.90832520]
[20.99599266 496.46133423]
[13.18486214 483.55206299]
[8.98198032 469.06076050]
[8.67390823 453.97540283]
[12.28164959 439.32458496]
[19.55922318 426.10720825]
[30.01042938 415.22442627]
[42.92269135 407.41830444]
[57.41562653 403.22100830]
[57.10357285 388.22424316]
[56.79151535 373.22750854]
[56.47945786 358.23074341]
[56.16740417 343.23397827]
[55.85534668 328.23724365]
[55.54328918 313.24047852]
[55.23123550 298.24374390]
[54.91917801 283.24697876]
[54.60712051 268.25021362]
[42.28183365 276.79931641]
[27.85342026 272.69799805]
[21.86788940 258.94396973]
[28.70017815 245.59031677]
[43.35643387 242.39749146]
[55.12383270 251.69859314]
[56.37070465 236.75050354]
[57.61758041 221.80242920]
[47.31943130 232.70875549]
[32.98782730 237.13652039]
[18.33246040 233.93960571]
[7.14682913 223.94552612]
[2.32629943 209.74122620]
[5.11865044 195.00341797]
[14.80109024 183.54696655]
[28.86734962 178.33732605]
[43.67641830 180.72299194]
[55.39501953 190.08645630]
[60.98980713 204.00390625]
[65.29739380 189.63572693]
[61.54091644 175.22259521]
[72.91533661 164.22564697]
[77.22292328 149.85745239]
[81.53050995 135.48927307]
[72.38120270 129.97297668]
[64.86708069 122.10309601]
[59.59112930 112.36155701]
[57.01498795 101.38379669]
[57.42025757 89.91748047]
[60.88173676 78.77163696]
[67.25506592 68.75953674]
[57.04158401 57.77387619]
[46.82810211 46.78821182]
[36.61462402 35.80254745]
[20.81367111 35.47779083]
[9.93077946 24.01750374]
[10.42257404 8.22086811]
[21.99728203 -2.54025126]
[37.78783417 -1.88147318]
[48.42597580 9.80636120]
[47.60028839 25.58906555]
[57.81377029 36.57472992]
[68.02724457 47.56039429]
[78.24073029 58.54605865]
[92.46750641 53.79224396]
[94.02508545 38.87333298]
[95.58267212 23.95442009]
[97.14025116 9.03550911]
[98.69783020 -5.88340330]
[84.95534515 -12.24130058]
[74.02359772 -22.71868896]
[67.08838654 -36.17905807]
[64.90198517 -51.16232681]
[67.70155334 -66.04322052]
[75.18342590 -79.20758057]
[86.53602600 -89.22742462]
[100.52790070 -95.01588440]
[115.64131165 -95.94506073]
[130.23687744 -91.91416931]
[142.73138428 -83.36045837]
[151.76951599 -71.21175385]
[156.37088013 -56.78586960]
[156.03636169 -41.64761353]
[150.80224609 -27.43906975]
[141.23628235 -15.70147514]
[128.37612915 -7.70803642]
[113.61674500 -4.32582235]
[112.05916595 10.59309006]
[110.50157928 25.51200104]
[108.94400024 40.43091583]
[107.38642120 55.34982681]
[124.12255096 64.84864807]
[134.48104858 79.71041107]
[148.60586548 74.66165161]
[155.68879700 68.78936005]
[163.07736206 69.65812683]
[177.30413818 64.90431213]
[191.53091431 60.15049744]
[205.75769043 55.39668274]
[219.98448181 50.64286804]
[222.97396851 35.57772827]
[233.10758972 24.03626251]
[247.65942383 19.12306976]
[262.71511841 22.15977287]
[274.22476196 32.32951736]
[279.09231567 46.89668655]
[276.00845337 61.94279099]
[265.80267334 73.42050171]
[251.22032166 78.24237061]
[236.18395996 75.11134338]
[224.73829651 64.86964417]
[210.51150513 69.62345886]
[196.28472900 74.37727356]
[182.05795288 79.13108826]
[167.83117676 83.88490295]
[153.65461731 88.78646088]
[139.52981567 93.83521271]
[138.19294739 111.91255951]
[129.01573181 127.54447174]
[113.88208771 137.52197266]
[95.89868927 139.79685974]
[91.59111023 154.16503906]
[87.28352356 168.53323364]
[90.73189545 183.97406006]
[79.66557312 193.94331360]
[75.35799408 208.31149292]
[72.56566620 223.04930115]
[71.31879425 237.99739075]
[70.07191467 252.94546509]
[69.60387421 267.93817139]
[69.91593170 282.93490601]
[70.22798920 297.93167114]
[70.54004669 312.92843628]
[70.85210419 327.92517090]
[71.16415405 342.92193604]
[71.47621155 357.91870117]
[71.78826904 372.91543579]
[72.10032654 387.91220093]
[72.41238403 402.90893555]
[87.06737518 406.49972534]
[100.29318237 413.76196289]
[111.18804932 424.20056152]
[119.00914764 437.10379028]
[123.22322083 451.59185791]
[123.54293823 466.67694092]
[119.94651794 481.33053589]
[112.67915344 494.55355835]
[102.23635101 505.44439697]
[89.33011627 513.26049805]
[74.84043121 517.46899414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 129]
[27 128]
[28 127]
[39 126]
[40 125]
[42 123]
[43 122]
[44 121]
[51 64]
[52 63]
[53 62]
[54 61]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[93 117]
[94 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
