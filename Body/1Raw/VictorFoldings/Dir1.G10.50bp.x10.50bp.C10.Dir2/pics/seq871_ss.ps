%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACUGAAAGGGGGGGGGGAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGxxxxxxxxxxAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUCCCCCCCCCCUACAGUGAAA\
) } def
/len { sequence length } bind def

/coor [
[73.45765686 388.21893311]
[59.61171341 382.20291138]
[47.90305328 372.67349243]
[39.20053101 360.33782959]
[34.14992905 346.11129761]
[33.12603760 331.04962158]
[36.20483398 316.27047729]
[43.15785599 302.87054443]
[53.46913910 291.84420776]
[66.37351990 284.00970459]
[80.91340637 279.94839478]
[80.91340637 264.94839478]
[80.91340637 249.94837952]
[80.91340637 234.94837952]
[80.91340637 219.94837952]
[80.91340637 204.94837952]
[80.91340637 189.94837952]
[80.91340637 174.94837952]
[80.91340637 159.94837952]
[80.91340637 144.94837952]
[80.91340637 129.94837952]
[70.25178528 119.39709473]
[55.25259399 119.55313110]
[40.25340652 119.70916748]
[25.25421715 119.86520386]
[10.25502872 120.02124023]
[-4.74415922 120.17727661]
[-13.02787876 130.84675598]
[-25.76449203 134.72058105]
[-38.21584702 130.59286499]
[-45.88457870 120.19155121]
[-60.88376617 120.03551483]
[-75.88295746 119.87947845]
[-84.27206421 132.82653809]
[-98.33853912 139.16198730]
[-113.59381866 136.86418152]
[-125.17000580 126.66636658]
[-129.37316895 111.82261658]
[-124.86211395 97.06951904]
[-113.07627869 87.11473846]
[-97.77649689 85.13480377]
[-83.84486389 91.76150513]
[-75.72692108 104.88029480]
[-60.72772980 105.03633118]
[-45.72854233 105.19236755]
[-34.26128769 92.93022919]
[-17.13703728 92.72027588]
[-4.90019608 105.17808533]
[10.09899235 105.02204895]
[25.09818077 104.86601257]
[40.09737015 104.70997620]
[55.09655762 104.55393982]
[70.09574890 104.39790344]
[73.29506683 89.45983887]
[83.05068207 78.73479462]
[96.13751984 74.61482239]
[108.75828552 77.48214722]
[118.26663971 65.88080597]
[127.77500153 54.27946091]
[137.28335571 42.67811966]
[146.67051697 30.97849846]
[155.93547058 19.18185806]
[165.20042419 7.38521814]
[174.46536255 -4.41142225]
[183.73031616 -16.20806122]
[186.16923523 -31.84015274]
[200.11534119 -37.07037735]
[209.38029480 -48.86701584]
[195.12678528 -44.19395828]
[180.16223145 -45.22460938]
[166.68395996 -51.80762482]
[156.67103577 -62.97639847]
[151.59371948 -77.09095764]
[152.19752502 -92.07879639]
[158.39379883 -105.73918915]
[169.27272034 -116.06629944]
[183.23686218 -121.54376221]
[198.23582458 -121.36727905]
[212.06723022 -115.56278229]
[222.70014954 -104.98256683]
[228.57330322 -91.18016815]
[228.82429504 -76.18226624]
[223.41664124 -62.19163895]
[235.67901611 -70.83075714]
[247.94137573 -79.46987152]
[260.20373535 -88.10898590]
[267.51046753 -104.97884369]
[285.00506592 -105.94751740]
[291.53195190 -120.35968018]
[306.36849976 -121.67360687]
[318.44848633 -130.56596375]
[330.52847290 -139.45831299]
[342.60845947 -148.35066223]
[354.68844604 -157.24301147]
[355.50125122 -172.85945129]
[366.19970703 -184.26457214]
[381.73233032 -186.07322693]
[394.76510620 -177.43142700]
[399.14434814 -162.41955566]
[392.80230713 -148.12576294]
[378.73348999 -141.29914856]
[363.58078003 -145.16302490]
[351.50079346 -136.27066040]
[339.42080688 -127.37831879]
[327.34082031 -118.48596954]
[315.26083374 -109.59362030]
[309.59799194 -95.81749725]
[293.89743042 -93.86753082]
[291.75198364 -81.92163849]
[281.70443726 -74.42057800]
[268.84286499 -75.84661865]
[256.58050537 -67.20750427]
[244.31813049 -58.56838608]
[232.05575562 -49.92927170]
[221.17694092 -39.60206604]
[211.91198730 -27.80542755]
[210.13575745 -13.01711082]
[195.52696228 -6.94311285]
[186.26200867 4.85352707]
[176.99705505 16.65016747]
[167.73211670 28.44680786]
[158.46716309 40.24344635]
[156.79837036 47.49332809]
[148.88470459 52.18648148]
[139.37634277 63.78782272]
[129.86798096 75.38916016]
[120.35962677 86.99050140]
[125.71283722 104.93822479]
[116.45005035 122.91026306]
[95.91340637 129.94837952]
[95.91340637 144.94837952]
[95.91340637 159.94837952]
[95.91340637 174.94837952]
[95.91340637 189.94837952]
[95.91340637 204.94837952]
[95.91340637 219.94837952]
[95.91340637 234.94837952]
[95.91340637 249.94837952]
[95.91340637 264.94839478]
[95.91340637 279.94839478]
[110.45329285 284.00970459]
[123.35767365 291.84420776]
[133.66896057 302.87054443]
[140.62197876 316.27047729]
[143.70077515 331.04962158]
[142.67689514 346.11129761]
[137.62628174 360.33782959]
[128.92376709 372.67349243]
[117.21510315 382.20291138]
[103.36916351 388.21893311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[31 45]
[32 44]
[33 43]
[57 127]
[58 126]
[59 125]
[60 124]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[67 116]
[68 115]
[83 114]
[84 113]
[85 112]
[86 111]
[88 108]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
