%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACUAGAGGGGGGGGGGCAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCxxxxxxxxxxGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACCCCCCCCCCCAUCACUCGA\
) } def
/len { sequence length } bind def

/coor [
[107.30010223 372.10958862]
[93.45416260 366.09356689]
[81.74549866 356.56414795]
[73.04297638 344.22848511]
[67.99237061 330.00195312]
[66.96848297 314.94027710]
[70.04727936 300.16113281]
[77.00030518 286.76119995]
[87.31158447 275.73486328]
[100.21596527 267.90036011]
[114.75585175 263.83905029]
[114.75585175 248.83905029]
[114.75585175 233.83905029]
[114.75585175 218.83905029]
[114.75585175 203.83905029]
[114.75585175 188.83905029]
[114.75585175 173.83905029]
[114.75585175 158.83905029]
[114.75585175 143.83905029]
[114.75585175 128.83905029]
[108.58007050 124.58349609]
[96.22849274 116.07241058]
[90.05271149 111.81686401]
[76.03599548 117.15837860]
[62.01928329 122.49988556]
[48.00257111 127.84140015]
[40.15598297 141.83464050]
[24.30074310 144.28227234]
[12.59963131 133.30668640]
[14.02873993 117.32740784]
[27.49177933 108.60237885]
[42.66105652 113.82468414]
[56.67777252 108.48317719]
[70.69448090 103.14166260]
[84.71119690 97.80014801]
[84.01004791 90.33299255]
[81.90659332 67.93153381]
[67.14053345 65.29267120]
[52.37447739 62.65380478]
[37.60842133 60.01494217]
[20.95262527 63.18049240]
[13.30000019 48.05192184]
[25.71888542 36.51036072]
[40.24728775 45.24888611]
[55.01334381 47.88775253]
[69.77939606 50.52661514]
[84.54545593 53.16547775]
[98.26551056 47.10246658]
[106.25542450 34.40753555]
[104.16264343 21.63748932]
[111.13118744 11.21355438]
[122.94938660 8.44996357]
[131.20167542 -4.07599878]
[119.41328430 -13.36618710]
[108.45522308 -23.62264061]
[98.40646362 -34.77146149]
[89.33939362 -46.73231888]
[81.31934357 -59.41903305]
[74.40411377 -72.74019623]
[68.64351654 -86.59982300]
[64.07905579 -100.89806366]
[60.74362946 -115.53188324]
[58.66125870 -130.39585876]
[57.84695816 -145.38287354]
[58.30658722 -160.38496399]
[60.03683472 -175.29402161]
[63.02524185 -190.00262451]
[67.25026703 -204.40481567]
[72.68147278 -218.39680481]
[79.27972412 -231.87779236]
[86.99748230 -244.75064087]
[95.77913666 -256.92257690]
[105.56141663 -268.30593872]
[116.27384186 -278.81869507]
[127.83922577 -288.38507080]
[140.17424011 -296.93618774]
[153.19000244 -304.41036987]
[166.79273987 -310.75384521]
[180.88442993 -315.92083740]
[195.36355591 -319.87414551]
[210.12579346 -322.58529663]
[225.06477356 -324.03475952]
[240.07284546 -324.21206665]
[255.04188538 -323.11593628]
[269.86404419 -320.75430298]
[284.43252563 -317.14413452]
[298.64236450 -312.31149292]
[312.39117432 -306.29116821]
[325.57986450 -299.12652588]
[338.11343384 -290.86920166]
[349.90161133 -281.57873535]
[360.85940552 -271.32199097]
[370.90786743 -260.17291260]
[379.97463989 -248.21182251]
[387.99435425 -235.52488708]
[394.90924072 -222.20355225]
[400.66946411 -208.34378052]
[405.23358154 -194.04542542]
[408.56860352 -179.41151428]
[410.65060425 -164.54748535]
[411.46450806 -149.56044006]
[411.00448608 -134.55838013]
[409.27386475 -119.64936066]
[406.28509521 -104.94081879]
[402.05969238 -90.53874207]
[396.62811279 -76.54689026]
[390.02951050 -63.06607819]
[382.31143188 -50.19343567]
[373.52944946 -38.02171326]
[363.74688721 -26.63861084]
[353.03417969 -16.12614250]
[341.46856689 -6.56005383]
[329.13333130 1.99073017]
[316.11737061 9.46459961]
[302.51446533 15.80770588]
[288.42263794 20.97434425]
[273.94342041 24.92728806]
[259.18109131 27.63805771]
[244.24209595 29.08712006]
[229.23400879 29.26403427]
[214.26499939 28.16752815]
[199.44288635 25.80550003]
[184.87451172 22.19496727]
[170.66479492 17.36194801]
[156.91615295 11.34126186]
[143.72763062 4.17629051]
[135.47534180 16.70225334]
[135.41751099 34.22357178]
[118.95035553 42.39745331]
[110.96043396 55.09238052]
[129.75585938 128.83905029]
[129.75585938 143.83905029]
[129.75585938 158.83905029]
[129.75585938 173.83905029]
[129.75585938 188.83905029]
[129.75585938 203.83905029]
[129.75585938 218.83905029]
[129.75585938 233.83905029]
[129.75585938 248.83905029]
[129.75585938 263.83905029]
[144.29574585 267.90036011]
[157.20011902 275.73486328]
[167.51141357 286.76119995]
[174.46443176 300.16113281]
[177.54322815 314.94027710]
[176.51933289 330.00195312]
[171.46873474 344.22848511]
[162.76620483 356.56414795]
[151.05754089 366.09356689]
[137.21160889 372.10958862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 35]
[24 34]
[25 33]
[26 32]
[37 47]
[38 46]
[39 45]
[40 44]
[48 130]
[49 129]
[52 127]
[53 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
