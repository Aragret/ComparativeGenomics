%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCCUCUGGGGGGGGGGUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAxxxxxxxxxxAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCACCCCCCCCCCUCAUCCCUCU\
) } def
/len { sequence length } bind def

/coor [
[89.45277405 379.39868164]
[75.60683441 373.38265991]
[63.89817047 363.85324097]
[55.19564819 351.51757812]
[50.14504623 337.29104614]
[49.12115479 322.22937012]
[52.19995117 307.45019531]
[59.15297318 294.05026245]
[69.46425629 283.02395630]
[82.36863708 275.18942261]
[96.90852356 271.12811279]
[96.90852356 256.12811279]
[96.90852356 241.12812805]
[96.90852356 226.12812805]
[96.90852356 211.12812805]
[96.90852356 196.12812805]
[96.90852356 181.12812805]
[96.90852356 166.12812805]
[96.90852356 151.12812805]
[96.90852356 136.12812805]
[96.90852356 121.12812042]
[90.93112183 134.88568115]
[76.74230957 139.75166321]
[63.57979584 132.55804443]
[60.01308823 117.98826599]
[68.36430359 105.52804565]
[83.19592285 103.28955078]
[68.70033264 99.43238831]
[54.20473099 95.57523346]
[39.66979599 91.86907196]
[25.09709358 88.31430817]
[10.52439022 84.75954437]
[-4.04831219 81.20478821]
[-12.87326717 89.28520203]
[-24.39267159 92.04422760]
[-35.68897629 88.90299988]
[-43.95897675 80.76206970]
[-47.20935822 69.74728394]
[-61.62157440 65.58940125]
[-76.03379059 61.43151093]
[-88.19365692 71.07086945]
[-103.69844818 71.68824768]
[-116.58625031 63.04624557]
[-121.90144348 48.46789169]
[-117.60022736 33.55886459]
[-105.33650208 24.05198288]
[-89.82592773 23.60284042]
[-77.03263855 32.38414001]
[-71.87590027 47.01929474]
[-57.46368790 51.17718124]
[-43.05147171 55.33507156]
[-27.65105247 45.52565765]
[-9.64699173 50.10290527]
[-0.49355048 66.63208008]
[14.07915211 70.18684387]
[28.65185547 73.74160767]
[43.22455978 77.29637146]
[50.51533508 75.81642914]
[58.06189346 81.07963562]
[72.55748749 84.93679810]
[87.05308533 88.79395294]
[101.58802032 85.08779144]
[112.46684265 74.76058960]
[123.34567261 64.43338013]
[108.68952942 67.62672424]
[93.69724274 67.14563751]
[79.27598572 63.01922989]
[66.29836273 55.49717712]
[55.54962540 45.03463745]
[47.68017960 32.26468277]
[43.16618347 17.96000290]
[42.28077698 2.98615742]
[45.07753754 -11.75080776]
[51.38722992 -25.35917854]
[60.82807159 -37.01552963]
[72.82880402 -46.01455307]
[86.66327667 -51.81172943]
[101.49439240 -54.05628204]
[116.42473602 -52.61238861]
[130.55090332 -47.56742477]
[143.01811218 -39.22665024]
[153.07202148 -28.09475517]
[160.10424805 -14.84531689]
[163.68931580 -0.28003877]
[163.61027527 14.71975327]
[159.87191772 29.24644089]
[152.70043945 42.42103577]
[142.53129578 53.44508362]
[156.94351196 49.28719330]
[171.35572815 45.12930679]
[185.76794434 40.97142029]
[200.18016052 36.81353378]
[214.59237671 32.65564346]
[228.81915283 27.90183067]
[242.83587646 22.56031799]
[242.06257629 7.45213413]
[245.99778748 -7.15503407]
[254.25595093 -19.83012581]
[266.02801514 -29.33136368]
[280.16070557 -34.72791290]
[295.26937866 -35.49107742]
[309.87393188 -31.54608727]
[322.54348755 -23.27943420]
[332.03683472 -11.50099850]
[337.42388916 2.63528633]
[338.17694092 17.74449348]
[334.22216797 32.34637451]
[325.94702148 45.01038742]
[314.16223145 54.49584198]
[300.02233887 59.87344742]
[284.91262817 60.61635971]
[270.31341553 56.65180206]
[257.65493774 48.36817932]
[248.17738342 36.57703018]
[234.16067505 41.91854477]
[232.89836121 44.49029922]
[230.50822449 46.69963837]
[227.12950134 48.10182190]
[223.06423950 48.31329727]
[218.75025940 47.06785965]
[204.33804321 51.22574997]
[189.92582703 55.38363647]
[175.51361084 59.54152298]
[161.10139465 63.69940948]
[146.68917847 67.85729980]
[133.67288208 75.31221008]
[122.79405212 85.63941193]
[111.91522217 95.96662140]
[117.19924927 106.58351898]
[111.90852356 121.12812042]
[111.90852356 136.12812805]
[111.90852356 151.12812805]
[111.90852356 166.12812805]
[111.90852356 181.12812805]
[111.90852356 196.12812805]
[111.90852356 211.12812805]
[111.90852356 226.12812805]
[111.90852356 241.12812805]
[111.90852356 256.12811279]
[111.90852356 271.12811279]
[126.44841003 275.18942261]
[139.35279846 283.02395630]
[149.66407776 294.05026245]
[156.61709595 307.45019531]
[159.69589233 322.22937012]
[158.67201233 337.29104614]
[153.62139893 351.51757812]
[144.91888428 363.85324097]
[133.21022034 373.38265991]
[119.36428070 379.39868164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 61]
[28 60]
[29 59]
[30 57]
[31 56]
[32 55]
[33 54]
[38 51]
[39 50]
[40 49]
[62 128]
[63 127]
[64 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 115]
[95 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
