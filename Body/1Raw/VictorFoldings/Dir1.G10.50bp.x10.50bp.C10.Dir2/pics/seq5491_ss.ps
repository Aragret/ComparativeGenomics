%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCUCCUGGGGGGGGGGCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAxxxxxxxxxxAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACU\
) } def
/len { sequence length } bind def

/coor [
[253.44465637 161.71855164]
[242.94889832 154.89674377]
[232.80747986 147.55838013]
[223.04583740 139.72181702]
[213.68840027 131.40670776]
[204.75860596 122.63385010]
[196.27883911 113.42520142]
[188.27030945 103.80383301]
[180.75309753 93.79382324]
[173.74601746 83.42024231]
[167.26663208 72.70906830]
[154.02404785 79.75420380]
[140.78146362 86.79933929]
[127.53887939 93.84447479]
[114.29629517 100.88960266]
[106.72760773 112.64573669]
[92.74884033 112.35298157]
[79.50625610 119.39811707]
[66.26367188 126.44325256]
[57.71436310 139.75564575]
[42.84420776 138.90254211]
[29.60162163 145.94767761]
[16.35903549 152.99281311]
[3.11645007 160.03794861]
[-8.02713585 172.81515503]
[-23.38984871 165.64413452]
[-20.75190735 148.89666748]
[-3.92868471 146.79536438]
[9.31390095 139.75022888]
[22.55648613 132.70509338]
[35.79907227 125.65995789]
[43.40118408 112.85147858]
[59.21853638 113.20066071]
[72.46112061 106.15552521]
[85.70370483 99.11039734]
[93.27239227 87.35426331]
[107.25115967 87.64701843]
[120.49374390 80.60188293]
[133.73632812 73.55674744]
[146.97891235 66.51161957]
[160.22149658 59.46648026]
[151.06954956 38.58371735]
[143.85717773 16.95502853]
[138.64416504 -5.23987865]
[135.47370911 -27.81660271]
[134.37203979 -50.58757782]
[135.34817505 -73.36363983]
[138.39392090 -95.95558929]
[143.48382568 -118.17575836]
[150.57550049 -139.83959961]
[159.60995483 -160.76719666]
[170.51199341 -180.78471375]
[183.19094849 -199.72595215]
[197.54142761 -217.43360901]
[213.44412231 -233.76066589]
[230.76681519 -248.57157898]
[249.36555481 -261.74337769]
[241.64147949 -274.60177612]
[233.91738892 -287.46017456]
[226.19331360 -300.31860352]
[211.59663391 -307.79318237]
[211.04182434 -324.18292236]
[225.09962463 -332.62750244]
[239.30856323 -324.43981934]
[239.05171204 -308.04266357]
[246.77578735 -295.18426514]
[254.49987793 -282.32586670]
[262.22396851 -269.46746826]
[273.28790283 -275.31225586]
[284.63043213 -280.59628296]
[296.22317505 -285.30627441]
[308.03704834 -289.43045044]
[320.04254150 -292.95846558]
[332.20953369 -295.88150024]
[344.50756836 -298.19223022]
[356.90588379 -299.88482666]
[369.37338257 -300.95510864]
[381.87890625 -301.40029907]
[394.39108276 -301.21936035]
[406.87860107 -300.41271973]
[419.31018066 -298.98236084]
[431.65472412 -296.93188477]
[443.88128662 -294.26641846]
[455.95922852 -290.99261475]
[467.85836792 -287.11868286]
[479.54882812 -282.65432739]
[491.00140381 -277.61068726]
[502.18734741 -272.00042725]
[513.07873535 -265.83755493]
[523.64819336 -259.13754272]
[533.86926270 -251.91711426]
[543.71643066 -244.19436646]
[553.16491699 -235.98864746]
[562.19116211 -227.32048035]
[570.77246094 -218.21157837]
[578.88739014 -208.68473816]
[586.51562500 -198.76382446]
[593.63806152 -188.47367859]
[600.23675537 -177.84005737]
[606.29534912 -166.88958740]
[611.79852295 -155.64967346]
[616.73254395 -144.14849854]
[621.08502197 -132.41482544]
[624.84515381 -120.47805023]
[628.00335693 -108.36806488]
[630.55187988 -96.11518097]
[632.48419189 -83.75009918]
[633.79553223 -71.30376434]
[634.48260498 -58.80735397]
[634.54370117 -46.29216003]
[633.97857666 -33.78952026]
[632.78875732 -21.33074760]
[630.97711182 -8.94703674]
[628.54821777 3.33059716]
[625.50811768 15.47140789]
[621.86450195 27.44499207]
[617.62640381 39.22136307]
[612.80444336 50.77103043]
[607.41076660 62.06506729]
[601.45880127 73.07518768]
[594.96343994 83.77381897]
[587.94097900 94.13417053]
[580.40899658 104.13029480]
[572.38629150 113.73714447]
[563.89306641 122.93067169]
[554.95050049 131.68785095]
[545.58099365 139.98672485]
[535.80798340 147.80653381]
[525.65600586 155.12768555]
[515.15039062 161.93183899]
[504.31753540 168.20195007]
[493.18450928 173.92230225]
[481.77917480 179.07858276]
[470.13015747 183.65786743]
[458.26657104 187.64866638]
[446.21813965 191.04101562]
[434.01501465 193.82638550]
[421.68777466 195.99780273]
[409.26730347 197.54981995]
[396.78466797 198.47856140]
[384.27111816 198.78167725]
[371.75802612 198.45840454]
[359.27673340 197.50955200]
[346.85845947 195.93750000]
[334.53433228 193.74615479]
[322.33520508 190.94102478]
[310.29159546 187.52909851]
[298.43371582 183.51895142]
[286.79122925 178.92057800]
[275.39331055 173.74552917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[17 35]
[18 34]
[19 33]
[21 31]
[22 30]
[23 29]
[24 28]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
