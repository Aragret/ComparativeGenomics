%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACUCCAGGGGGGGGGGCGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAxxxxxxxxxxACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCCCCCCCCCCCUACACUCCA\
) } def
/len { sequence length } bind def

/coor [
[62.47529221 556.30908203]
[49.25509644 549.03662109]
[38.36829376 538.58966064]
[30.55716324 525.68035889]
[26.35428047 511.18905640]
[26.04620934 496.10372925]
[29.65394974 481.45291138]
[36.93152237 468.23550415]
[47.38273239 457.35275269]
[60.29499435 449.54660034]
[74.78792572 445.34930420]
[74.47587585 430.35256958]
[74.16381836 415.35580444]
[73.85176086 400.35906982]
[73.53970337 385.36230469]
[73.22764587 370.36553955]
[72.91558838 355.36880493]
[72.60353851 340.37203979]
[72.29148102 325.37527466]
[71.97942352 310.37854004]
[61.08621597 300.28527832]
[60.55611038 285.08090210]
[71.21669769 273.72354126]
[70.90464020 258.72677612]
[70.59258270 243.73002625]
[62.59218216 231.16647339]
[70.04071045 217.20831299]
[69.72866058 202.21156311]
[61.47848129 214.73892212]
[48.90763474 222.92266846]
[34.11322021 225.39759827]
[19.56327248 221.75080872]
[7.68505239 212.59068298]
[0.46011397 199.44532776]
[-0.90626150 184.50769043]
[3.81386805 170.26969910]
[13.83307934 159.10658264]
[27.47994232 152.88056946]
[42.47785568 152.63032532]
[56.32482910 158.39759827]
[66.71087646 169.22026062]
[71.90316772 183.29144287]
[75.60932922 168.75651550]
[79.31549072 154.22157288]
[83.02164459 139.68664551]
[86.27247620 125.04313660]
[89.06479645 110.30532837]
[84.16324615 96.12877655]
[72.86424255 86.26304626]
[57.38009262 83.01472473]
[52.88199615 68.81555176]
[41.58298874 58.94983292]
[30.28398514 49.08411026]
[14.37612247 43.22098541]
[15.60637951 26.31173325]
[32.19538116 22.81296349]
[40.14970779 37.78510284]
[51.44871521 47.65082932]
[62.74771881 57.51655197]
[77.42369080 60.05921555]
[82.72996521 74.96404266]
[94.02896881 84.82976532]
[108.76677704 82.03744507]
[115.67377472 68.72229004]
[122.58077240 55.40713120]
[129.48777771 42.09197617]
[136.39477539 28.77682114]
[133.24772644 16.22492981]
[139.32565308 5.25781298]
[150.87322998 1.52139843]
[137.36451721 8.04171848]
[122.36511230 8.17542648]
[108.74230957 1.89696121]
[99.10022736 -9.59348488]
[95.28206635 -24.09940147]
[98.01768494 -38.84783936]
[106.78415680 -51.01948547]
[119.90567780 -58.28761292]
[134.87394714 -59.26284790]
[148.82762146 -53.75876236]
[159.09931946 -42.82751465]
[163.72550964 -28.55872726]
[161.82235718 -13.68140888]
[172.03584290 -24.66707420]
[182.24931335 -35.65274048]
[192.46279907 -46.63840485]
[202.67628479 -57.62406921]
[212.77493286 -68.71538544]
[222.75765991 -79.91114807]
[232.74038696 -91.10691833]
[242.72311401 -102.30268097]
[248.75140381 -118.14868927]
[265.64694214 -116.74260712]
[268.97296143 -100.11810303]
[253.91886902 -92.31995392]
[243.93614197 -81.12419128]
[233.95341492 -69.92842102]
[223.97068787 -58.73265839]
[221.85293579 -51.60098267]
[213.66194153 -47.41058731]
[203.44847107 -36.42492294]
[193.23498535 -25.43925858]
[183.02149963 -14.45359421]
[172.80802917 -3.46792936]
[164.04182434 8.70390701]
[165.44064331 26.16939354]
[149.70993042 35.68381882]
[142.80293274 48.99897385]
[135.89593506 62.31413269]
[128.98893738 75.62928772]
[122.08193207 88.94444275]
[117.56261444 107.67569733]
[103.80260468 113.09765625]
[101.01027679 127.83546448]
[102.78414154 132.88253784]
[102.43559265 137.61866760]
[100.45141602 141.27444458]
[97.55658722 143.39280701]
[93.85042572 157.92773438]
[90.14426422 172.46267700]
[86.43810272 186.99760437]
[84.72541046 201.89950562]
[85.03746796 216.89627075]
[93.06018829 230.53248596]
[85.58934021 243.41796875]
[85.90139008 258.41473389]
[86.21344757 273.41146851]
[97.33725739 284.31555176]
[97.44009399 299.52883911]
[86.97617340 310.06646729]
[87.28823090 325.06323242]
[87.60028839 340.05999756]
[87.91234589 355.05673218]
[88.22440338 370.05349731]
[88.53646088 385.05026245]
[88.84851074 400.04699707]
[89.16056824 415.04376221]
[89.47262573 430.04049683]
[89.78468323 445.03726196]
[104.43967438 448.62802124]
[117.66548157 455.89028931]
[128.56034851 466.32888794]
[136.38145447 479.23208618]
[140.59552002 493.72015381]
[140.91523743 508.80526733]
[137.31881714 523.45886230]
[130.05145264 536.68188477]
[119.60865021 547.57269287]
[106.70242310 555.38879395]
[92.21273041 559.59729004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 127]
[24 126]
[25 125]
[27 123]
[28 122]
[42 121]
[43 120]
[44 119]
[45 118]
[46 114]
[47 113]
[48 62]
[49 61]
[51 59]
[52 58]
[53 57]
[63 111]
[64 110]
[65 109]
[66 108]
[67 107]
[70 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
