%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUUUAUGGGGGGGGGGGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACxxxxxxxxxxCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCCCCCCCCCCCACAUUUUAU\
) } def
/len { sequence length } bind def

/coor [
[86.30532074 395.49841309]
[71.81562805 391.28991699]
[58.90939713 383.47381592]
[48.46659851 372.58297729]
[41.19923401 359.35998535]
[37.60280609 344.70635986]
[37.92252731 329.62127686]
[42.13660049 315.13320923]
[49.95769501 302.23001099]
[60.85256577 291.79141235]
[74.07836914 284.52914429]
[88.73336792 280.93838501]
[89.04541779 265.94161987]
[89.35747528 250.94487000]
[89.66953278 235.94812012]
[89.98159027 220.95135498]
[90.29364777 205.95460510]
[90.60570526 190.95785522]
[90.91775513 175.96110535]
[91.22981262 160.96434021]
[91.54187012 145.96759033]
[91.85392761 130.97084045]
[92.16598511 115.97408295]
[80.46636200 106.58692169]
[65.89365387 110.14168549]
[51.32095337 113.69644928]
[36.74825287 117.25121307]
[31.81816864 131.86961365]
[19.75315666 141.48414612]
[4.40311861 143.02682495]
[-9.33380604 136.00538635]
[-17.07421303 122.66036987]
[-16.34816742 107.25009918]
[-7.38734865 94.69194031]
[6.94888067 88.99316406]
[22.08588028 91.97222137]
[33.19348907 102.67850494]
[47.76619339 99.12374878]
[62.33889389 95.56898499]
[76.91159821 92.01422119]
[77.92276764 84.58269501]
[66.06214142 75.39980316]
[79.94509888 69.71965027]
[80.95626831 62.28812790]
[67.86311340 54.96902084]
[54.76995850 47.64991760]
[40.21624374 53.37035370]
[25.40694618 48.34852982]
[17.33456230 34.95559692]
[19.81062698 19.51528740]
[31.66601753 9.31804562]
[47.30297852 9.17869568]
[59.33821869 19.16303444]
[62.08906555 34.55676270]
[75.18222046 41.87586975]
[88.27537537 49.19497299]
[99.41346741 70.03865814]
[101.45400238 92.34302521]
[111.43672943 81.14726257]
[121.41945648 69.95149231]
[121.47126770 57.01120377]
[130.07049561 47.88583374]
[142.18322754 47.11840820]
[152.39669800 36.13274384]
[162.61018372 25.14707756]
[152.78285217 13.79495525]
[144.24052429 1.44684124]
[137.08335876 -11.75248909]
[131.39527893 -25.64827919]
[127.24297333 -40.07761002]
[124.67511749 -54.87130356]
[123.72182465 -69.85591125]
[124.39426422 -84.85574341]
[126.68456268 -99.69494629]
[130.56585693 -114.19952393]
[135.99264526 -128.19941711]
[142.90130615 -141.53050232]
[151.21083069 -154.03645325]
[160.82379150 -165.57067871]
[171.62750244 -175.99790955]
[183.49526978 -185.19590759]
[196.28796387 -193.05683899]
[209.85560608 -199.48852539]
[224.03909302 -204.41555786]
[238.67216492 -207.78018188]
[253.58322144 -209.54295349]
[268.59747314 -209.68318176]
[283.53884888 -208.19923401]
[298.23220825 -205.10850525]
[312.50524902 -200.44725037]
[326.19064331 -194.27009583]
[339.12796021 -186.64947510]
[351.16543579 -177.67474365]
[362.16201782 -167.45112610]
[371.98873901 -156.09846497]
[380.53042603 -143.74989319]
[387.68685913 -130.55018616]
[393.37420654 -116.65408325]
[397.52572632 -102.22453308]
[400.09277344 -87.43070221]
[401.04528809 -72.44604492]
[400.37203979 -57.44624329]
[398.08093262 -42.60717010]
[394.19885254 -28.10279846]
[388.77130127 -14.10319138]
[381.86193848 -0.77248347]
[373.55172729 11.73302937]
[363.93814087 23.26672554]
[353.13388062 33.69337845]
[341.26562500 42.89074326]
[328.47250366 50.75098038]
[314.90451050 57.18193817]
[300.72076416 62.10821533]
[286.08752441 65.47205353]
[271.17636108 67.23400879]
[256.16210938 67.37342834]
[241.22079468 65.88867950]
[226.52760315 62.79716873]
[212.25480652 58.13513947]
[198.56974792 51.95724869]
[185.63287354 44.33593750]
[173.59585571 35.36055756]
[163.38237000 46.34622192]
[153.16888428 57.33188629]
[150.20903015 74.60148621]
[132.61521912 79.93421936]
[122.63249207 91.12998962]
[112.64977264 102.32575226]
[107.16273499 116.28614044]
[106.85067749 131.28289795]
[106.53862762 146.27964783]
[106.22657013 161.27639771]
[105.91451263 176.27316284]
[105.60245514 191.26991272]
[105.29039764 206.26666260]
[104.97834015 221.26341248]
[104.66629028 236.26017761]
[104.35423279 251.25692749]
[104.04217529 266.25369263]
[103.73011780 281.25042725]
[118.22305298 285.44772339]
[131.13531494 293.25387573]
[141.58653259 304.13662720]
[148.86410522 317.35403442]
[152.47183228 332.00485229]
[152.16377258 347.09017944]
[147.96089172 361.58151245]
[140.14974976 374.49075317]
[129.26295471 384.93774414]
[116.04275513 392.21023560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 40]
[25 39]
[26 38]
[27 37]
[44 56]
[45 55]
[46 54]
[58 128]
[59 127]
[60 126]
[63 124]
[64 123]
[65 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
