%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCAACAAGGGGGGGGGGUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGxxxxxxxxxxCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGCCCCCCCCCCAUACCAACAA\
) } def
/len { sequence length } bind def

/coor [
[156.25595093 520.87414551]
[142.41001892 514.85815430]
[130.70135498 505.32870483]
[121.99882507 492.99304199]
[116.94822693 478.76651001]
[115.92433167 463.70483398]
[119.00313568 448.92568970]
[125.95615387 435.52575684]
[136.26744080 424.49942017]
[149.17181396 416.66491699]
[163.71170044 412.60360718]
[163.71170044 397.60360718]
[163.71170044 382.60360718]
[163.71170044 367.60360718]
[163.71170044 352.60360718]
[163.71170044 337.60360718]
[163.71170044 322.60360718]
[163.71170044 307.60360718]
[163.71170044 292.60360718]
[163.71170044 277.60360718]
[142.93353271 263.98730469]
[138.94610596 241.05064392]
[152.04129028 223.72250366]
[147.43572998 209.44703674]
[136.16439819 199.71015930]
[139.29080200 184.20094299]
[134.68524170 169.92547607]
[130.07966614 155.65000916]
[119.42949677 149.82926941]
[115.49938202 137.92242432]
[120.92801666 126.17576599]
[116.62042999 111.80758667]
[102.66145325 118.94591522]
[88.84344482 113.96743011]
[83.43715668 101.38239288]
[69.53459930 95.75043488]
[55.63204575 90.11847687]
[41.61533356 84.77696991]
[27.49053001 79.72821045]
[13.36572742 74.67945099]
[-0.75907600 69.63069916]
[-12.91836643 79.12570953]
[-28.28287888 80.51685333]
[-41.94985580 73.36022186]
[-49.55821228 59.93947601]
[-48.68014908 44.53712082]
[-39.59585571 32.06799316]
[-25.20409393 26.51094818]
[-10.09722424 29.63921547]
[0.90420562 40.45457840]
[4.28968048 55.50589371]
[18.41448402 60.55464935]
[32.53928757 65.60340881]
[46.66408920 70.65216064]
[51.34034348 69.42408752]
[56.83528137 71.16677094]
[61.26400375 76.21591949]
[75.16655731 81.84787750]
[89.06911469 87.47983551]
[102.17267609 81.62393951]
[116.62042999 88.19241333]
[113.17205811 72.75157928]
[124.23838043 62.78233337]
[128.54595947 48.41415024]
[132.85354614 34.04596710]
[137.16113281 19.67778206]
[141.46871948 5.30959892]
[128.17114258 -1.73744833]
[116.50408936 -11.24355125]
[106.91599274 -22.84332085]
[99.77540588 -36.09089279]
[95.35678101 -50.47706985]
[93.82997131 -65.44887543]
[95.25364685 -80.43084717]
[99.57310486 -94.84710693]
[106.62230682 -108.14353180]
[116.13029480 -119.80905151]
[127.73161316 -129.39526367]
[140.98034668 -136.53372192]
[155.36723328 -140.95001221]
[170.33929443 -142.47439575]
[185.32102966 -141.04829407]
[199.73658752 -136.72650146]
[213.03187561 -129.67515564]
[224.69586182 -120.16527557]
[234.28019714 -108.56240082]
[241.41650391 -95.31252289]
[245.83045959 -80.92491913]
[247.35243225 -65.95261383]
[245.92390442 -50.97110748]
[241.59977722 -36.55624771]
[234.54627991 -23.26210022]
[225.03450012 -11.59965992]
[213.43008423 -2.01719832]
[200.17904663 5.11695957]
[185.79072571 9.52859592]
[170.81817627 11.04813957]
[155.83689880 9.61718369]
[151.52931213 23.98536682]
[147.22172546 38.35354996]
[142.91415405 52.72173691]
[138.60656738 67.08992004]
[142.36303711 81.50304413]
[130.98861694 92.50000000]
[130.98861694 107.50000000]
[135.29620361 121.86818695]
[148.98078918 134.14465332]
[144.35513306 151.04444885]
[148.96069336 165.31991577]
[153.56625366 179.59536743]
[165.16700745 190.35331726]
[161.71118164 204.84147644]
[166.31674194 219.11692810]
[179.21501160 220.47833252]
[190.56694031 228.09719849]
[197.38626099 240.75028992]
[197.52824402 255.82582092]
[211.18447876 262.03121948]
[224.84072876 268.23663330]
[238.27075195 260.46398926]
[253.70100403 262.10324097]
[265.19821167 272.52404785]
[268.34149170 287.71942139]
[261.92218018 301.84643555]
[248.40861511 309.47293091]
[232.99707031 307.66638184]
[221.61357117 297.12145996]
[218.63531494 281.89288330]
[204.97908020 275.68746948]
[191.32283020 269.48205566]
[178.71170044 277.60360718]
[178.71170044 292.60360718]
[178.71170044 307.60360718]
[178.71170044 322.60360718]
[178.71170044 337.60360718]
[178.71170044 352.60360718]
[178.71170044 367.60360718]
[178.71170044 382.60360718]
[178.71170044 397.60360718]
[178.71170044 412.60360718]
[193.25158691 416.66491699]
[206.15597534 424.49942017]
[216.46725464 435.52575684]
[223.42028809 448.92568970]
[226.49908447 463.70483398]
[225.47518921 478.76651001]
[220.42459106 492.99304199]
[211.72206116 505.32870483]
[200.01339722 514.85815430]
[186.16746521 520.87414551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 113]
[24 112]
[26 110]
[27 109]
[28 108]
[31 106]
[32 105]
[35 59]
[36 58]
[37 57]
[38 54]
[39 53]
[40 52]
[41 51]
[61 104]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
