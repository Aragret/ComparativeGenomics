%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCAUCAAAGGGGGGGGGGUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGxxxxxxxxxxAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGACCCCCCCCCCUACCAACAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 417.21878052]
[71.19830322 411.20275879]
[59.48964310 401.67333984]
[50.78712082 389.33767700]
[45.73651886 375.11114502]
[44.71262741 360.04946899]
[47.79142761 345.27029419]
[54.74444962 331.87039185]
[65.05573273 320.84405518]
[77.96011353 313.00952148]
[92.50000000 308.94821167]
[92.50000000 293.94821167]
[92.50000000 278.94821167]
[92.50000000 263.94821167]
[92.50000000 248.94822693]
[92.50000000 233.94822693]
[92.50000000 218.94822693]
[92.50000000 203.94822693]
[92.50000000 188.94822693]
[92.50000000 173.94822693]
[92.50000000 158.94822693]
[92.50000000 143.94822693]
[73.21778870 138.81434631]
[57.13769150 125.22017670]
[42.91091537 129.97399902]
[28.68413544 134.72781372]
[14.45735550 139.48162842]
[0.23057623 144.23544312]
[-12.87586784 154.98985291]
[-26.83822250 145.37272644]
[-21.46210670 129.29374695]
[-4.52323866 130.00865173]
[9.70354080 125.25484467]
[23.93031883 120.50102997]
[38.15710068 115.74721527]
[52.38387680 110.99340057]
[51.29256821 96.03314972]
[36.52651215 93.39428711]
[21.76045609 90.75542450]
[7.82848978 98.71028900]
[-7.02342796 92.64398193]
[-11.40217686 77.21005249]
[-1.94875598 64.24809265]
[14.08498001 63.70140839]
[24.39932060 75.98936462]
[39.16537476 78.62822723]
[53.93143082 81.26709747]
[61.91120529 70.06465912]
[72.41609955 61.75122833]
[84.49114990 56.83071136]
[97.10407257 55.51056290]
[98.66165161 40.59165192]
[100.21923065 25.67273903]
[101.77681732 10.75382710]
[93.87503815 -5.84562540]
[104.65183258 -19.66085815]
[105.89871216 -34.60894394]
[102.49573517 -49.21783829]
[94.77164459 -62.07624054]
[87.04756165 -74.93463898]
[72.45089722 -82.40921783]
[71.89608765 -98.79898071]
[85.95387268 -107.24353790]
[100.16281128 -99.05586243]
[99.90596771 -82.65872955]
[107.63005066 -69.80032349]
[115.35413361 -56.94192123]
[115.70372772 -71.93785095]
[118.91770935 -86.58947754]
[124.87718201 -100.35482025]
[133.36169434 -112.72466278]
[144.05738831 -123.24142456]
[156.56860352 -131.51605225]
[170.43252563 -137.24246216]
[185.13629150 -140.20881653]
[200.13598633 -140.30538940]
[214.87672424 -137.52859497]
[228.81321716 -131.98117065]
[241.42993164 -123.86830902]
[252.26014709 -113.49013519]
[260.90322876 -101.23056030]
[267.03945923 -87.54309082]
[270.44180298 -72.93405151]
[270.98446655 -57.94387054]
[268.64730835 -43.12706375]
[263.51684570 -29.03173828]
[255.78280640 -16.17931175]
[245.73133850 -5.04522038]
[233.73425293 3.95865893]
[220.23533630 10.49925327]
[205.73396301 14.33461094]
[190.76655579 15.32285500]
[175.88679504 13.42742729]
[161.64511108 8.71844387]
[148.56834412 1.37010014]
[137.14022827 -8.34577179]
[127.78350830 -20.06976128]
[120.84679413 -33.36206818]
[119.59992218 -18.41398239]
[127.18729401 -8.94090748]
[126.22917175 3.56113124]
[116.69572449 12.31140804]
[115.13814545 27.23031998]
[113.58056641 42.14923096]
[112.02298737 57.06814575]
[125.15330505 63.18957138]
[135.62773132 73.19774628]
[142.34030151 86.03591919]
[144.58222961 100.34853363]
[159.34828186 102.98739624]
[167.51586914 90.16713715]
[179.97068787 81.45245361]
[194.81349182 78.17227173]
[209.78085327 80.82679749]
[222.59036255 89.01123810]
[231.28865051 101.47751617]
[234.54930115 116.32462311]
[231.87509155 131.28848267]
[223.67381287 144.08720398]
[211.19609070 152.76908875]
[196.34471130 156.01020813]
[181.38438416 153.31631470]
[168.59646606 145.09820557]
[159.93099976 132.60908508]
[156.70941162 117.75344849]
[141.94335938 115.11458588]
[134.16143799 128.64773560]
[122.19110870 138.66847229]
[107.50000000 143.94822693]
[107.50000000 158.94822693]
[107.50000000 173.94822693]
[107.50000000 188.94822693]
[107.50000000 203.94822693]
[107.50000000 218.94822693]
[107.50000000 233.94822693]
[107.50000000 248.94822693]
[107.50000000 263.94821167]
[107.50000000 278.94821167]
[107.50000000 293.94821167]
[107.50000000 308.94821167]
[122.03988647 313.00952148]
[134.94427490 320.84405518]
[145.25555420 331.87039185]
[152.20857239 345.27029419]
[155.28736877 360.04946899]
[154.26348877 375.11114502]
[149.21287537 389.33767700]
[140.51036072 401.67333984]
[128.80169678 411.20275879]
[114.95575714 417.21878052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[37 47]
[38 46]
[39 45]
[51 105]
[52 104]
[53 103]
[54 102]
[56 99]
[57 98]
[58 67]
[59 66]
[60 65]
[109 126]
[110 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
