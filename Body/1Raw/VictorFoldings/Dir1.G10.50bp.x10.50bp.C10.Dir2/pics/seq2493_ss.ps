%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAGAAGAAGGGGGGGGGGCUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCxxxxxxxxxxUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUCCCCCCCCCCUAUCGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.07821655]
[71.19830322 384.06219482]
[59.48964310 374.53277588]
[50.78712082 362.19711304]
[45.73651886 347.97058105]
[44.71262741 332.90890503]
[47.79142761 318.12973022]
[54.74444962 304.72982788]
[65.05573273 293.70349121]
[77.96011353 285.86898804]
[92.50000000 281.80764771]
[92.50000000 266.80764771]
[92.50000000 251.80766296]
[92.50000000 236.80766296]
[92.50000000 221.80766296]
[92.50000000 206.80766296]
[92.50000000 191.80766296]
[92.50000000 176.80766296]
[92.50000000 161.80766296]
[92.50000000 146.80766296]
[79.73960114 144.17570496]
[67.87743378 138.04924011]
[57.87292099 128.72973633]
[50.58551788 116.78218079]
[35.87755585 119.72766113]
[21.16959381 122.67314911]
[6.46163225 125.61862946]
[-8.24632931 128.56411743]
[-22.95429039 131.50959778]
[-34.96644592 141.80613708]
[-48.96526718 136.71867371]
[-63.30873108 145.75755310]
[-75.96503448 134.47685242]
[-68.62879944 119.19234467]
[-51.91074753 122.01071167]
[-40.95060730 111.92485046]
[-25.89977264 116.80163574]
[-11.19181156 113.85614777]
[3.51615000 110.91066742]
[18.22411156 107.96518707]
[32.93207169 105.01970673]
[47.64003372 102.07421875]
[49.19761658 87.15531158]
[35.41523361 81.23534393]
[21.63285255 75.31538391]
[5.42005491 77.78058624]
[-4.60855007 64.80525970]
[1.86360633 49.73730469]
[18.17852402 48.07734299]
[27.55281639 61.53300095]
[41.33519745 67.45296478]
[55.11758041 73.37292480]
[69.48802948 60.64745331]
[86.73045349 54.49037170]
[84.86283875 39.60709381]
[82.99522400 24.72381401]
[81.12761688 9.84053326]
[79.26000214 -5.04274654]
[74.95241547 -19.41093063]
[68.32392120 -32.86689758]
[61.69541931 -46.32286072]
[46.65328217 -51.17153168]
[39.51986313 -65.27436829]
[44.52729797 -80.26440430]
[58.70476532 -87.24831390]
[73.64102173 -82.08267975]
[80.47464752 -67.83216858]
[75.15138245 -52.95135880]
[81.77988434 -39.49539566]
[88.40837860 -26.03942871]
[90.04064941 -40.95035553]
[96.58795929 -54.44601059]
[107.28905487 -64.95727539]
[120.89972687 -71.26200104]
[135.83747864 -72.62715149]
[150.36549377 -68.89400482]
[162.79464722 -60.49660110]
[171.67977905 -48.41130447]
[175.98783875 -34.04326248]
[175.21792603 -19.06303215]
[169.45954895 -5.21235752]
[159.38224792 5.89835835]
[146.15769958 12.97728157]
[131.32350159 15.20135117]
[116.60440826 12.31197643]
[103.71181488 4.64510298]
[94.14328003 -6.91035986]
[96.01089478 7.97292042]
[97.87850952 22.85619926]
[99.74611664 37.73947906]
[101.61373138 52.62276077]
[116.48228455 55.55293655]
[129.66638184 63.02551270]
[139.81863403 74.27680206]
[145.90151978 88.15694427]
[160.83581543 86.75463867]
[175.77012634 85.35233307]
[190.70443726 83.95003510]
[205.27714539 80.39527130]
[219.17970276 74.76331329]
[233.08224487 69.13135529]
[240.63603210 54.97790909]
[256.43692017 52.20096207]
[268.36383057 62.93074799]
[267.26745605 78.93629456]
[253.98884583 87.93951416]
[238.71420288 83.03391266]
[224.81164551 88.66587067]
[210.90910339 94.29782867]
[211.76544189 101.74877930]
[213.47813416 116.65068054]
[214.33447266 124.10163116]
[229.15223694 126.43273163]
[243.96998596 128.76383972]
[257.73345947 120.52085876]
[272.70834351 126.27687836]
[277.40725708 141.61636353]
[268.22552490 154.77218628]
[252.20663452 155.65231323]
[241.63888550 143.58160400]
[226.82113647 141.25048828]
[212.00337219 138.91938782]
[191.85656738 119.83306122]
[192.10673523 98.88433838]
[177.17243958 100.28664398]
[162.23812866 101.68894958]
[147.30381775 103.09124756]
[143.62709045 118.54411316]
[135.05204773 131.91490173]
[122.54146576 141.70239258]
[107.50000000 146.80766296]
[107.50000000 161.80766296]
[107.50000000 176.80766296]
[107.50000000 191.80766296]
[107.50000000 206.80766296]
[107.50000000 221.80766296]
[107.50000000 236.80766296]
[107.50000000 251.80766296]
[107.50000000 266.80764771]
[107.50000000 281.80764771]
[122.03988647 285.86898804]
[134.94427490 293.70349121]
[145.25555420 304.72982788]
[152.20857239 318.12973022]
[155.28736877 332.90890503]
[154.26348877 347.97058105]
[149.21287537 362.19711304]
[140.51036072 374.53277588]
[128.80169678 384.06219482]
[114.95575714 390.07821655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[31 35]
[43 52]
[44 51]
[45 50]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 70]
[60 69]
[61 68]
[95 127]
[96 126]
[97 125]
[98 124]
[99 109]
[100 108]
[101 107]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
