%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACUUUCGGGGGGGGGGACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGxxxxxxxxxxCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUCCCCCCCCCCAACCACGUUC\
) } def
/len { sequence length } bind def

/coor [
[85.85243225 495.37380981]
[72.00650024 489.35778809]
[60.29783630 479.82836914]
[51.59531021 467.49270630]
[46.54470825 453.26617432]
[45.52081680 438.20449829]
[48.59961700 423.42535400]
[55.55263901 410.02542114]
[65.86392212 398.99908447]
[78.76830292 391.16458130]
[93.30818939 387.10327148]
[93.30818939 372.10327148]
[93.30818939 357.10327148]
[93.30818939 342.10327148]
[93.30818939 327.10327148]
[93.30818939 312.10327148]
[93.30818939 297.10327148]
[93.30818939 282.10327148]
[93.30818939 267.10327148]
[93.30818939 252.10327148]
[93.30818939 237.10327148]
[93.30818939 222.10327148]
[83.71707916 207.44001770]
[92.97133636 191.55485535]
[92.65928650 176.55810547]
[89.35433197 169.89305115]
[92.50000000 161.24685669]
[92.50000000 146.24685669]
[92.50000000 131.24685669]
[75.79425812 121.13523865]
[68.02726746 103.21875000]
[53.16421890 101.19641876]
[38.30117416 99.17407990]
[23.43812561 97.15174866]
[8.57507896 95.12940979]
[-6.14225578 100.93550110]
[-17.71016502 91.55292511]
[-32.57321167 89.53058624]
[-46.16220856 98.05811310]
[-61.25362015 92.61487579]
[-66.27060699 77.37645721]
[-57.36456680 64.03247070]
[-41.36745071 62.81927872]
[-30.55087662 74.66754150]
[-15.68782997 76.68987274]
[-2.03359985 70.73913574]
[10.59741306 80.26636505]
[25.46046066 82.28870392]
[40.32350540 84.31103516]
[55.18655396 86.33336639]
[70.04959869 88.35570526]
[78.17246246 76.41664124]
[90.70307922 69.23990631]
[105.11108398 68.27472687]
[103.28470612 52.55929184]
[115.32640076 43.79304886]
[121.10266876 29.94983101]
[126.87894440 16.10661316]
[117.70853424 11.34322834]
[110.71736145 1.45750725]
[108.50784302 -12.30150795]
[112.93090057 -27.46688271]
[116.63706207 -42.00181961]
[120.34322357 -56.53675461]
[114.43064880 -68.04741669]
[117.86205292 -80.10745239]
[128.26087952 -86.36618042]
[132.26861572 -100.82086945]
[136.27635193 -115.27555847]
[140.28408813 -129.73025513]
[127.20486450 -137.23921204]
[116.40451813 -147.76553345]
[108.56197357 -160.64750671]
[104.17022705 -175.07537842]
[103.50534058 -190.14218140]
[106.60911560 -204.90081787]
[113.28643799 -218.42355347]
[123.11756897 -229.86032104]
[135.48451233 -238.49220276]
[149.60989380 -243.77658081]
[164.60574341 -245.38130188]
[179.52943420 -243.20545959]
[193.44284058 -237.38584900]
[205.47137451 -228.28829956]
[214.85887146 -216.48468018]
[221.01525879 -202.71697998]
[223.55354309 -187.85063171]
[222.31413269 -172.82017517]
[217.37498474 -158.57041931]
[209.04653931 -145.99713135]
[197.85234070 -135.89065552]
[184.49606323 -128.88630676]
[169.81730652 -125.42438507]
[154.73878479 -125.72251129]
[150.73104858 -111.26782227]
[146.72329712 -96.81313324]
[142.71556091 -82.35844421]
[148.04023743 -65.66569519]
[134.87815857 -52.83059311]
[131.17199707 -38.29565811]
[127.46583557 -23.76072121]
[132.74148560 -18.42990875]
[143.29277039 -7.76828194]
[148.56842041 -2.43746901]
[163.14112854 -5.99223089]
[174.61512756 -17.70885468]
[190.42956543 -13.36886692]
[194.31590271 2.56312633]
[182.27621460 13.69765568]
[166.69587708 8.58047199]
[152.12318420 12.13523388]
[140.72216797 21.88288498]
[134.94589233 35.72610474]
[129.16961670 49.56932068]
[131.40914917 64.29460144]
[118.95429993 74.05100250]
[127.21341705 82.91065216]
[131.60626221 94.19822693]
[131.50871277 106.31007385]
[126.93464661 117.52543640]
[118.53390503 126.25091553]
[107.50000000 131.24685669]
[107.50000000 146.24685669]
[107.50000000 161.24685669]
[107.65603638 176.24604797]
[107.96809387 191.24279785]
[116.74117279 200.75526428]
[116.65674591 213.29367065]
[108.30818939 222.10327148]
[108.30818939 237.10327148]
[108.30818939 252.10327148]
[108.30818939 267.10327148]
[108.30818939 282.10327148]
[108.30818939 297.10327148]
[108.30818939 312.10327148]
[108.30818939 327.10327148]
[108.30818939 342.10327148]
[108.30818939 357.10327148]
[108.30818939 372.10327148]
[108.30818939 387.10327148]
[122.84807587 391.16458130]
[135.75245667 398.99908447]
[146.06373596 410.02542114]
[153.01676941 423.42535400]
[156.09556580 438.20449829]
[155.07167053 453.26617432]
[150.02107239 467.49270630]
[141.31854248 479.82836914]
[129.60987854 489.35778809]
[115.76394653 495.37380981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 126]
[25 125]
[27 124]
[28 123]
[29 122]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 45]
[38 44]
[54 116]
[56 114]
[57 113]
[58 112]
[62 101]
[63 100]
[64 99]
[67 97]
[68 96]
[69 95]
[70 94]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
