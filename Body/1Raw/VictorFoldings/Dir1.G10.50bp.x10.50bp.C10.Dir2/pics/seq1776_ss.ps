%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGUACUGGGGGGGGGGGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACxxxxxxxxxxCAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUACCCCCCCCCCAAGUGAACUG\
) } def
/len { sequence length } bind def

/coor [
[69.92965698 442.70562744]
[55.43996811 438.49713135]
[42.53374100 430.68103027]
[32.09093857 419.79019165]
[24.82357407 406.56719971]
[21.22714806 391.91357422]
[21.54687119 376.82849121]
[25.76094055 362.34042358]
[33.58203888 349.43719482]
[44.47690582 338.99862671]
[57.70271301 331.73635864]
[72.35770416 328.14559937]
[72.66976166 313.14883423]
[72.98181915 298.15206909]
[73.29387665 283.15533447]
[73.60593414 268.15856934]
[73.91799164 253.16181946]
[74.23004150 238.16506958]
[74.54209900 223.16830444]
[74.85415649 208.17155457]
[75.16621399 193.17480469]
[67.00273132 184.19343567]
[67.17917633 171.65597534]
[76.14824677 162.32809448]
[76.77222443 147.34107971]
[77.39620209 132.35406494]
[66.95639038 121.58325195]
[51.95720291 121.73928833]
[36.95801544 121.89532471]
[21.95882797 122.05136108]
[6.95963907 122.20739746]
[-8.03711510 122.51945496]
[-23.02980995 122.98749542]
[-38.02250671 123.45553589]
[-50.01091385 134.11657715]
[-65.79557800 131.24880981]
[-73.26785278 117.05216980]
[-66.69564819 102.41709137]
[-51.12059784 98.57035065]
[-38.49054718 108.46284485]
[-23.49785233 107.99479675]
[-8.50515652 107.52675629]
[-1.87484324 104.15264893]
[6.80360222 107.20820618]
[21.80279160 107.05216980]
[36.80197906 106.89613342]
[51.80116653 106.74009705]
[66.80035400 106.58406067]
[69.25728607 95.08018494]
[75.23906708 86.04718018]
[64.57743835 75.49588776]
[53.91581726 64.94459534]
[43.25418854 54.39330673]
[27.45340538 54.72612762]
[16.10320282 43.72847366]
[15.93745422 27.92505264]
[27.05449677 16.69175720]
[42.85878754 16.69310188]
[53.97391510 27.92828941]
[53.80548096 43.73168182]
[64.46710205 54.28297043]
[75.12873077 64.83425903]
[85.79035950 75.38555145]
[99.40872192 71.58459473]
[113.17341614 74.81575775]
[123.38689423 63.83009338]
[133.60037231 52.84442902]
[143.81385803 41.85876465]
[154.02734375 30.87309837]
[145.23419189 18.66357803]
[138.99409485 4.97750092]
[135.54518127 -9.65834904]
[135.01818848 -24.68103218]
[137.43148804 -39.51310730]
[142.69049072 -53.58481979]
[150.59130859 -66.35600281]
[160.82868958 -77.33679962]
[173.00781250 -86.10644531]
[186.65948486 -92.32942200]
[201.25827026 -95.76824951]
[216.24261475 -96.29259491]
[231.03657532 -93.88417816]
[245.07186890 -88.63740540]
[257.80969238 -80.75568390]
[268.02319336 -91.74134827]
[278.23666382 -102.72701263]
[288.45013428 -113.71267700]
[298.66363525 -124.69834137]
[294.07443237 -139.35559082]
[297.44433594 -154.34022522]
[307.86688232 -165.62144470]
[322.53842163 -170.16468811]
[337.51242065 -166.74783325]
[348.76092529 -156.28997803]
[353.25814819 -141.60424805]
[349.79437256 -126.64103699]
[339.30133057 -115.42536163]
[324.60156250 -110.97418976]
[309.64929199 -114.48486328]
[299.43582153 -103.49919891]
[289.22232056 -92.51353455]
[279.00885010 -81.52787018]
[268.79537964 -70.54219818]
[277.58294678 -58.41154480]
[283.83691406 -44.79517365]
[287.31527710 -30.21564102]
[287.88250732 -15.23285103]
[285.51489258 -0.42257881]
[280.30163574 13.64566708]
[272.44131470 26.43054008]
[262.23443604 37.43969345]
[250.07189941 46.24872589]
[236.42008972 52.51755905]
[221.80290222 56.00355911]
[206.78169250 56.57092285]
[191.93370056 54.19596863]
[177.82991028 48.96813202]
[165.01300049 41.08657837]
[154.79953003 52.07224274]
[144.58604431 63.05790710]
[134.37255859 74.04357147]
[124.15908051 85.02923584]
[129.40182495 97.51696014]
[128.33763123 111.52449799]
[120.74440002 123.93869781]
[107.89952087 131.79464722]
[92.38322449 132.97804260]
[91.75924683 147.96505737]
[91.13526917 162.95207214]
[100.05705261 179.02632141]
[90.16296387 193.48686218]
[89.85091400 208.48361206]
[89.53885651 223.48036194]
[89.22679901 238.47712708]
[88.91474152 253.47387695]
[88.60268402 268.47064209]
[88.29062653 283.46737671]
[87.97857666 298.46414185]
[87.66651917 313.46087646]
[87.35446167 328.45764160]
[101.84739685 332.65493774]
[114.75965881 340.46105957]
[125.21086884 351.34384155]
[132.48843384 364.56121826]
[136.09617615 379.21206665]
[135.78810120 394.29739380]
[131.58522034 408.78869629]
[123.77409363 421.69796753]
[112.88729095 432.14495850]
[99.66709900 439.41741943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 129]
[25 128]
[26 127]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 42]
[33 41]
[34 40]
[50 63]
[51 62]
[52 61]
[53 60]
[65 122]
[66 121]
[67 120]
[68 119]
[69 118]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
