%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACCAAAGGGGGGGGGGGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGxxxxxxxxxxAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCCCCCCCCCCCUCACCAAAG\
) } def
/len { sequence length } bind def

/coor [
[79.16793823 153.37445068]
[66.06496429 146.16513062]
[55.27402878 135.81053162]
[47.53033829 123.01609802]
[43.36147690 108.65354919]
[43.05147552 93.70142365]
[46.62145996 79.17842865]
[53.82819748 66.07403564]
[64.18067932 55.28107071]
[76.97358704 47.53486252]
[91.33531189 43.36317825]
[91.02733612 28.36634064]
[90.71936035 13.36950207]
[90.41138458 -1.62733579]
[90.10340118 -16.62417412]
[89.79542542 -31.62101173]
[89.48744965 -46.61785126]
[89.17947388 -61.61468887]
[88.87149048 -76.61152649]
[88.56351471 -91.60836029]
[88.25553894 -106.60520172]
[87.94756317 -121.60204315]
[87.63957977 -136.59887695]
[72.64617157 -137.17160034]
[57.71221161 -138.62326050]
[42.88918686 -140.94886780]
[28.22819519 -144.14039612]
[13.77977848 -148.18684387]
[-0.40625802 -153.07426453]
[-14.28101158 -158.78579712]
[-27.79665375 -165.30177307]
[-40.90658951 -172.59971619]
[-53.56563187 -180.65447998]
[-65.73014069 -189.43829346]
[-77.35817719 -198.92086792]
[-88.40966034 -209.06951904]
[-98.84648895 -219.84927368]
[-108.63269043 -231.22294617]
[-117.73453522 -243.15136719]
[-126.12063599 -255.59338379]
[-133.76208496 -268.50610352]
[-140.63255310 -281.84506226]
[-146.70832825 -295.56420898]
[-151.96850586 -309.61630249]
[-156.39491272 -323.95288086]
[-159.97232056 -338.52450562]
[-162.68838501 -353.28097534]
[-164.53373718 -368.17141724]
[-165.50202942 -383.14450073]
[-165.58990479 -398.14859009]
[-164.79707336 -413.13195801]
[-163.12628174 -428.04299927]
[-160.58326721 -442.83029175]
[-157.17680359 -457.44281006]
[-152.91862488 -471.83026123]
[-147.82342529 -485.94299316]
[-141.90876770 -499.73239136]
[-135.19502258 -513.15087891]
[-127.70536041 -526.15228271]
[-119.46558380 -538.69165039]
[-110.50409698 -550.72589111]
[-100.85179138 -562.21337891]
[-90.54195404 -573.11468506]
[-79.61010742 -583.39208984]
[-68.09394836 -593.01025391]
[-56.03317261 -601.93591309]
[-43.46935654 -610.13842773]
[-30.44580460 -617.58941650]
[-17.00741959 -624.26330566]
[-3.20052361 -630.13696289]
[10.92728806 -635.19024658]
[25.32731438 -639.40563965]
[39.94991302 -642.76867676]
[54.74467850 -645.26776123]
[69.66060638 -646.89428711]
[84.64628601 -647.64257812]
[99.65004730 -647.51013184]
[114.62017822 -646.49737549]
[129.50506592 -644.60778809]
[144.25340271 -641.84796143]
[158.81436157 -638.22723389]
[173.13772583 -633.75830078]
[187.17411804 -628.45642090]
[200.87516785 -622.33990479]
[214.19363403 -615.42980957]
[227.08361816 -607.75006104]
[239.50067139 -599.32702637]
[251.40199280 -590.18981934]
[262.74655151 -580.36987305]
[273.49526978 -569.90106201]
[283.61105347 -558.81945801]
[293.05905151 -547.16333008]
[301.80667114 -534.97277832]
[309.82379150 -522.28985596]
[317.08276367 -509.15832520]
[323.55856323 -495.62338257]
[329.22888184 -481.73171997]
[334.07412720 -467.53125000]
[338.07763672 -453.07086182]
[341.22561646 -438.40045166]
[343.50717163 -423.57058716]
[344.91448975 -408.63238525]
[345.44265747 -393.63732910]
[345.08990479 -378.63714600]
[343.85745239 -363.68350220]
[341.74951172 -348.82794189]
[338.77334595 -334.12173462]
[334.93923950 -319.61550903]
[330.26043701 -305.35931396]
[324.75302124 -291.40228271]
[318.43597412 -277.79254150]
[311.33108521 -264.57696533]
[303.46286011 -251.80114746]
[294.85842896 -239.50910950]
[285.54742432 -227.74324036]
[275.56195068 -216.54409790]
[264.93643188 -205.95028687]
[253.70750427 -195.99832153]
[241.91387939 -186.72250366]
[229.59620667 -178.15481567]
[216.79693604 -170.32478333]
[203.56019592 -163.25942993]
[189.93164062 -156.98307800]
[175.95820618 -151.51736450]
[161.68809509 -146.88114929]
[147.17050171 -143.09040833]
[132.45544434 -140.15820312]
[117.59368134 -138.09465027]
[102.63642120 -136.90686035]
[102.94439697 -121.91001892]
[103.25238037 -106.91317749]
[103.56035614 -91.91634369]
[103.86833191 -76.91950226]
[104.17630768 -61.92266464]
[104.48429108 -46.92582703]
[104.79226685 -31.92898941]
[105.10024261 -16.93215179]
[105.40821838 -1.93531346]
[105.71619415 13.06152439]
[106.02417755 28.05836296]
[106.33215332 43.05519867]
[120.85304260 46.63374710]
[133.95318604 53.84820938]
[144.74005127 64.20705414]
[152.47871399 77.00453186]
[156.64192200 91.36871338]
[156.94604492 106.32096100]
[153.37034607 120.84255219]
[146.15846252 133.94410706]
[135.80174255 144.73300171]
[123.00578308 152.47418213]
[108.64241791 156.64022827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
