%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUAGCCUUAGGGGGGGGGGCUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAxxxxxxxxxxCAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCCCCCCCCCCCAUCCUAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[96.57636261 654.60290527]
[82.30459595 649.79345703]
[69.40061188 642.02807617]
[58.46795654 631.66992188]
[50.01797104 619.20349121]
[44.44587326 605.21191406]
[42.01228333 590.34948730]
[42.83102417 575.31140137]
[46.86380386 560.80102539]
[53.92199707 547.49700928]
[63.67547989 536.02166748]
[75.66806793 526.91168213]
[89.33884430 520.59313965]
[104.04840088 517.36157227]
[104.04840088 502.36160278]
[104.04840088 487.36160278]
[104.04840088 472.36160278]
[104.04840088 457.36160278]
[104.04840088 442.36160278]
[104.04840088 427.36160278]
[104.04840088 412.36160278]
[104.04840088 397.36160278]
[104.04840088 382.36160278]
[89.87912750 374.64715576]
[81.47153473 360.76818848]
[81.19259644 344.44995117]
[89.21247101 330.12823486]
[103.43263245 321.74359131]
[103.13249969 306.74661255]
[102.83236694 291.74960327]
[102.53223419 276.75262451]
[102.23210907 261.75561523]
[101.93197632 246.75862122]
[85.62595367 240.05455017]
[73.82909393 226.88171387]
[68.92819977 209.83663940]
[71.94469452 192.30598450]
[82.32215118 177.79370117]
[98.02823639 169.22064209]
[96.82890320 154.26866150]
[95.62957764 139.31668091]
[94.43025208 124.36470795]
[78.82813263 113.28206635]
[75.63949585 94.41189575]
[62.69942856 86.82541656]
[49.75936127 79.23893738]
[36.81929398 71.65245819]
[23.50701332 79.31266022]
[8.14816761 79.27440643]
[-5.12578917 71.54798126]
[-12.74423027 58.21175766]
[-12.65783405 42.85311127]
[-4.88983965 29.60343552]
[8.47020054 22.02683449]
[23.82850456 22.16137314]
[37.05376434 29.97085953]
[44.58845139 43.35458374]
[44.40577316 58.71239090]
[57.34584045 66.29886627]
[70.28590393 73.88534546]
[83.22597504 81.47182465]
[88.24940491 73.73061371]
[96.57163239 67.61877441]
[98.36821747 52.72675323]
[100.16481018 37.83473206]
[87.99188995 28.57366562]
[82.12761688 14.55556679]
[84.05453491 -0.41618583]
[93.15581512 -12.33351040]
[106.90760040 -18.05661583]
[108.70419312 -32.94863510]
[110.50077820 -47.84065628]
[96.76905060 -54.18847656]
[85.67236328 -64.47043610]
[78.29785919 -77.67921448]
[75.36801910 -92.52075195]
[77.16986847 -107.54102325]
[83.52688599 -121.26849365]
[93.81628418 -132.35829163]
[107.02999878 -139.72393799]
[121.87349701 -142.64384460]
[136.89256287 -140.83192444]
[150.61576843 -134.46571350]
[161.69866943 -124.16888428]
[169.05546570 -110.95023346]
[171.96540833 -96.10478973]
[170.14343262 -81.08694458]
[163.76802063 -67.36800385]
[153.46377563 -56.29200745]
[140.24020386 -48.94406891]
[125.39279938 -46.04406738]
[123.59621429 -31.15204620]
[121.79962158 -16.26002502]
[133.79579163 -7.43066025]
[139.80175781 6.30921984]
[138.11279297 21.30967903]
[129.08296204 33.53093719]
[115.05683136 39.63132095]
[113.26023865 54.52334213]
[111.46365356 69.41535950]
[123.92526245 77.76451111]
[137.01454163 70.43846130]
[150.10380554 63.11241913]
[160.97227478 50.10039139]
[176.48448181 56.94202423]
[174.20442200 73.74195862]
[157.42985535 76.20169067]
[144.34057617 83.52773285]
[131.25131226 90.85378265]
[125.90490723 112.53366852]
[109.38223267 123.16538239]
[110.58155823 138.11735535]
[111.78088379 153.06933594]
[112.98020935 168.02131653]
[125.04310608 171.37222290]
[135.46359253 178.26727295]
[143.23367310 188.02133179]
[147.60729980 199.67361450]
[148.17210388 212.08229065]
[144.88807678 224.03639221]
[138.09016418 234.37397766]
[128.45401001 242.09510803]
[116.92897034 246.45848083]
[117.22910309 261.45547485]
[117.52923584 276.45248413]
[117.82936859 291.44946289]
[118.12950134 306.44647217]
[118.42963409 321.44348145]
[131.04003906 327.56649780]
[139.73101807 338.48101807]
[142.84471130 352.01321411]
[139.82688904 365.49917603]
[131.32456970 376.30944824]
[119.04840088 382.36160278]
[119.04840088 397.36160278]
[119.04840088 412.36160278]
[119.04840088 427.36160278]
[119.04840088 442.36160278]
[119.04840088 457.36160278]
[119.04840088 472.36160278]
[119.04840088 487.36160278]
[119.04840088 502.36160278]
[119.04840088 517.36157227]
[133.75796509 520.59313965]
[147.42874146 526.91168213]
[159.42132568 536.02166748]
[169.17480469 547.49700928]
[176.23300171 560.80102539]
[180.26577759 575.31140137]
[181.08451843 590.34948730]
[178.65092468 605.21191406]
[173.07884216 619.20349121]
[164.62884521 631.66992188]
[153.69619751 642.02807617]
[140.79220581 649.79345703]
[126.52043915 654.60290527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[39 114]
[40 113]
[41 112]
[42 111]
[44 61]
[45 60]
[46 59]
[47 58]
[63 100]
[64 99]
[65 98]
[70 93]
[71 92]
[72 91]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
