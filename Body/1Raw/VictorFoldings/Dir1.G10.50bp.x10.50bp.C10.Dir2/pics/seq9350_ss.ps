%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUACUAGGGGGGGGGGCUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAxxxxxxxxxxAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCCCCCCCCCCCACCCUUACUA\
) } def
/len { sequence length } bind def

/coor [
[93.51424408 383.85824585]
[82.29881287 373.79290771]
[73.70741272 361.41210938]
[68.20336914 347.38348389]
[66.08350372 332.46359253]
[67.46215057 317.45706177]
[72.26495361 303.17315674]
[80.23289490 290.38220215]
[90.93628693 279.77398682]
[103.79790497 271.92062378]
[118.12413788 267.24560547]
[116.87726593 252.29751587]
[115.63038635 237.34942627]
[114.38351440 222.40133667]
[113.13664246 207.45324707]
[111.88976288 192.50517273]
[110.64289093 177.55708313]
[109.39601898 162.60899353]
[108.14913940 147.66090393]
[106.90226746 132.71281433]
[82.20017242 125.17653656]
[72.01221466 103.71691895]
[80.25167084 83.65704346]
[71.99938202 71.13108063]
[57.94603729 63.86374664]
[57.40523911 48.97896194]
[49.15295029 36.45299911]
[40.90066147 23.92703819]
[32.64837265 11.40107536]
[24.39608192 -1.12488639]
[16.14379311 -13.65084839]
[7.89150333 -26.17681122]
[5.34469557 -11.39459896]
[-7.28676033 -3.30470896]
[-21.77909660 -7.17409992]
[-28.69701195 -20.48358727]
[-23.53656387 -34.56797028]
[-9.65793228 -40.25755310]
[-23.67464447 -45.59906387]
[-37.69135666 -50.94057846]
[-51.70807266 -56.28208923]
[-63.56986618 -46.52538300]
[-78.72346497 -44.02255249]
[-93.09261322 -49.44685364]
[-102.81209564 -61.33917236]
[-105.26741028 -76.50054169]
[-99.79809570 -90.85261536]
[-87.87536621 -100.53477478]
[-72.70638275 -102.94255829]
[-58.37151718 -97.42828369]
[-48.72677994 -85.47526550]
[-46.36655807 -70.29880524]
[-32.34984589 -64.95729065]
[-18.33313179 -59.61577988]
[-4.31641960 -54.27426529]
[7.57596016 -63.41600037]
[6.01837921 -78.33491516]
[3.99604464 -93.19795990]
[1.51092613 -107.99066925]
[-0.97419244 -122.78337097]
[-3.45931101 -137.57608032]
[-18.45935249 -139.35806274]
[-32.34920120 -145.29512024]
[-44.00287628 -154.90597534]
[-52.47565842 -167.41152954]
[-57.08069992 -181.79798889]
[-57.44469070 -196.89912415]
[-53.53812790 -211.49073792]
[-45.67769241 -224.38996887]
[-34.50059509 -234.55113220]
[-20.91292000 -241.15051270]
[-6.01615286 -243.65310669]
[8.98209095 -241.85606384]
[22.86596870 -235.90504456]
[34.50997925 -226.28248596]
[42.97019577 -213.76843262]
[47.56078339 -199.37736511]
[47.90960312 -184.27586365]
[43.98838043 -169.68818665]
[36.11499405 -156.79684448]
[24.92769623 -146.64691162]
[11.33339596 -140.06120300]
[13.81851482 -125.26849365]
[16.30363274 -110.47578430]
[18.78875160 -95.68307495]
[21.49748039 -93.33142090]
[23.17090034 -89.52336121]
[23.12455368 -84.77465057]
[20.93729210 -79.89249420]
[22.49487305 -64.97357941]
[20.41746521 -34.42910004]
[28.66975403 -21.90313721]
[36.92204285 -9.37717533]
[45.17433167 3.14878631]
[53.42662048 15.67474842]
[61.67890930 28.20071030]
[69.93119812 40.72667313]
[83.39428711 47.09806442]
[84.52534485 62.87878799]
[92.77763367 75.40475464]
[104.68447113 72.81711578]
[117.32612610 76.08290863]
[127.81431580 85.25016022]
[133.41667175 98.95322418]
[148.23443604 96.62212372]
[163.05218506 94.29101562]
[172.15122986 81.36882782]
[187.73666382 78.74781036]
[200.56193542 87.98296356]
[203.01803589 103.59523773]
[193.64779663 116.32214355]
[178.01042175 118.61304474]
[165.38330078 109.10877991]
[150.56553650 111.43988037]
[135.74777222 113.77098083]
[149.86917114 118.82926178]
[164.82643127 117.69772339]
[178.40866089 124.06350708]
[187.10856628 136.28282166]
[188.67964172 151.20031738]
[182.71617126 164.96392822]
[170.75808716 174.01954651]
[155.89326477 176.02877808]
[141.96017456 170.47279358]
[132.55668640 158.78628540]
[130.11108398 143.98634338]
[121.85035706 131.46594238]
[123.09722900 146.41403198]
[124.34410095 161.36212158]
[125.59098053 176.31021118]
[126.83785248 191.25828552]
[128.08473206 206.20637512]
[129.33160400 221.15446472]
[130.57847595 236.10255432]
[131.82534790 251.05064392]
[133.07221985 265.99871826]
[147.97500610 268.23565674]
[161.95999146 273.84963989]
[174.27297974 282.53799438]
[184.24993896 293.83209229]
[191.35284424 307.12289429]
[195.19863892 321.69363403]
[195.57992554 336.75854492]
[192.47613525 351.50518799]
[186.05464172 365.13827515]
[176.66177368 376.92260742]
[164.80406189 386.22268677]
[151.12097168 392.53692627]
[136.35043335 395.52487183]
[121.28897858 395.02532959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[23 100]
[24 99]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[38 55]
[39 54]
[40 53]
[41 52]
[56 90]
[57 89]
[58 85]
[59 84]
[60 83]
[61 82]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
