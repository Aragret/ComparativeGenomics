%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUACCCUAGGGGGGGGGGUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUxxxxxxxxxxAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCCCCCCCCCCCAUUUACCGUA\
) } def
/len { sequence length } bind def

/coor [
[-5.10760260 313.87982178]
[-18.02005959 307.03491211]
[-30.48866463 299.41137695]
[-42.46652985 291.03790283]
[-53.90860367 281.94595337]
[-64.77185822 272.16973877]
[-75.01543427 261.74603271]
[-84.60081482 250.71405029]
[-93.49195099 239.11524963]
[-101.65539551 226.99325562]
[-114.59345245 234.58317566]
[-127.53150177 242.17308044]
[-140.46955872 249.76298523]
[-153.40762329 257.35290527]
[-166.34567261 264.94281006]
[-178.95680237 273.06436157]
[-191.21916199 281.70346069]
[-203.48153687 290.34259033]
[-215.74391174 298.98168945]
[-228.00627136 307.62081909]
[-240.26864624 316.25991821]
[-249.73466492 330.32516479]
[-265.87066650 325.12274170]
[-265.33843994 308.17712402]
[-248.90776062 303.99755859]
[-236.64538574 295.35842896]
[-224.38302612 286.71932983]
[-212.12065125 278.08020020]
[-199.85829163 269.44110107]
[-187.59591675 260.80197144]
[-187.00817871 257.99807739]
[-185.23800659 255.26667786]
[-182.31048584 253.07316589]
[-178.42352295 251.86381531]
[-173.93557739 252.00474548]
[-160.99752808 244.41484070]
[-148.05946350 236.82493591]
[-135.12141418 229.23501587]
[-122.18335724 221.64511108]
[-109.24530029 214.05520630]
[-118.11022186 196.02143860]
[-125.42433929 177.30494690]
[-131.13563538 158.03878784]
[-135.20352173 138.35997009]
[-137.59906006 118.40840912]
[-138.30523682 98.32595825]
[-137.31700134 78.25540161]
[-134.64140320 58.33946228]
[-130.29745483 38.71973419]
[-124.31604004 19.53572464]
[-116.73970032 0.92382824]
[-107.62229919 -16.98361588]
[-97.02866364 -34.05928421]
[-85.03411865 -50.18176651]
[-71.72393799 -65.23641968]
[-57.19276810 -79.11621857]
[-41.54393005 -91.72246552]
[-24.88868332 -102.96552277]
[-32.34359360 -115.98183441]
[-39.79850388 -128.99813843]
[-47.25341415 -142.01445007]
[-60.37210464 -152.75392151]
[-53.68394470 -168.33291626]
[-36.86232376 -166.21882629]
[-34.23710632 -149.46936035]
[-26.78219604 -136.45304871]
[-19.32728577 -123.43674469]
[-11.87237453 -110.42043304]
[-1.29430556 -115.71195984]
[9.53328133 -120.47212982]
[20.58371353 -124.68920898]
[31.82977295 -128.35281372]
[43.24375534 -131.45391846]
[54.79754257 -133.98487854]
[66.46267700 -135.93946838]
[78.21042633 -137.31288147]
[90.01184845 -138.10171509]
[101.83787537 -138.30403137]
[113.65937042 -137.91932678]
[125.44722748 -136.94857788]
[137.17239380 -135.39413452]
[148.80599976 -133.25985718]
[160.31936646 -130.55099487]
[171.68415833 -127.27420807]
[182.87237549 -123.43758392]
[193.85646057 -119.05056763]
[204.60932922 -114.12397003]
[215.10452271 -108.66991425]
[225.31619263 -102.70185089]
[235.21916199 -96.23446655]
[244.78904724 -89.28369904]
[254.00227356 -81.86667633]
[262.83615112 -74.00165558]
[271.26889038 -65.70802307]
[279.27978516 -57.00620270]
[286.84902954 -47.91762924]
[293.95803833 -38.46468735]
[300.58923340 -28.67067146]
[306.72634888 -18.55970001]
[312.35421753 -8.15668106]
[317.45901489 2.51275969]
[322.02813721 13.42233944]
[326.05035400 24.54518700]
[329.51571655 35.85390091]
[332.41574097 47.32062531]
[334.74322510 58.91711426]
[336.49249268 70.61479950]
[337.65921021 82.38487244]
[338.24047852 94.19834137]
[338.23492432 106.02609253]
[337.64248657 117.83900452]
[336.46469116 129.60797119]
[351.28247070 131.93907166]
[366.10021973 134.27018738]
[380.91796875 136.60128784]
[397.50430298 133.08992004]
[405.47000122 148.05601501]
[393.29391479 159.85343933]
[378.58688354 151.41903687]
[363.76910400 149.08793640]
[348.95135498 146.75683594]
[334.13360596 144.42573547]
[330.97018433 158.69378662]
[326.93814087 172.74108887]
[322.05261230 186.51484680]
[316.33200073 199.96322632]
[309.79782104 213.03567505]
[302.47460938 225.68299866]
[294.38995361 237.85766602]
[285.57421875 249.51388550]
[276.06057739 260.60778809]
[265.88479614 271.09768677]
[255.08515930 280.94415283]
[243.70227051 290.11007690]
[231.77896118 298.56106567]
[219.36004639 306.26528931]
[206.49224854 313.19378662]
[193.22395325 319.32049561]
[179.60505676 324.62240601]
[165.68678284 329.07952881]
[151.52146912 332.67514038]
[137.16239929 335.39572144]
[122.66356659 337.23101807]
[108.07950592 338.17410278]
[93.46504974 338.22149658]
[78.87517548 337.37298584]
[64.36475372 335.63174438]
[49.98833847 333.00433350]
[35.80001450 329.50064087]
[21.85313034 325.13385010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[58 68]
[59 67]
[60 66]
[61 65]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
