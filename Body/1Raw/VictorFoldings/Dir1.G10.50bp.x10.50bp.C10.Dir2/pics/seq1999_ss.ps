%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUAGGCGAUAGGGGGGGGGGGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAxxxxxxxxxxCGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCCCCCCCCCCCGUAUCGGCGAUA\
) } def
/len { sequence length } bind def

/coor [
[83.85312653 399.78848267]
[70.15097046 393.52758789]
[58.18585968 384.37423706]
[48.55794525 372.78756714]
[41.75016785 359.34875488]
[38.10400009 344.73187256]
[37.80233002 329.67010498]
[40.86029434 314.91894531]
[47.12450409 301.21832275]
[56.28075027 289.25540161]
[67.86975861 279.63031006]
[81.31022644 272.82577515]
[95.92799377 269.18316650]
[95.62398529 254.18623352]
[95.31998444 239.18931580]
[95.01597595 224.19239807]
[94.71197510 209.19548035]
[94.40796661 194.19856262]
[94.10396576 179.20164490]
[93.79995728 164.20472717]
[93.49595642 149.20780945]
[93.19195557 134.21089172]
[92.88794708 119.21396637]
[80.72959137 110.06359863]
[77.74430084 94.22850800]
[86.67229462 79.74821472]
[103.88469696 74.80193329]
[100.27225494 60.24341965]
[96.65982056 45.68490601]
[93.04738617 31.12639236]
[89.43494415 16.56788063]
[85.72549438 12.72956562]
[84.06634521 8.29026890]
[84.33736420 4.14720964]
[86.07411194 1.01492369]
[83.35303497 -13.73620319]
[80.63195801 -28.48732948]
[77.91088104 -43.23845673]
[75.04045868 -57.96125031]
[72.02098083 -72.65419769]
[57.75955582 -72.51641846]
[43.72433090 -75.02587128]
[30.40225220 -80.09389496]
[18.25522041 -87.54305267]
[7.70408106 -97.11341095]
[-0.88595772 -108.47154999]
[-7.21796656 -121.22222137]
[-11.07355881 -134.92208862]
[-12.32042027 -149.09512329]
[-10.91685200 -163.24920654]
[-6.91316223 -176.89311218]
[-0.44986245 -189.55366516]
[8.24726009 -200.79208374]
[18.87503242 -210.21920776]
[31.06345940 -217.50897217]
[44.38861465 -222.40966797]
[41.96705627 -237.21290588]
[29.41810608 -246.44122314]
[27.17318153 -261.48831177]
[36.04829788 -273.39492798]
[33.62673950 -288.19818115]
[31.20518112 -303.00143433]
[16.19049454 -304.49191284]
[2.07353020 -309.81863403]
[-10.18319225 -318.61834717]
[-19.74398804 -330.29110718]
[-25.95698929 -344.04107666]
[-28.39858055 -358.93069458]
[-26.90229034 -373.94479370]
[-21.57013893 -388.05972290]
[-12.76568222 -400.31304932]
[-1.08922088 -409.86932373]
[12.66312408 -416.07702637]
[27.55369377 -418.51284790]
[42.56722641 -417.01077271]
[56.68007278 -411.67318726]
[68.92999268 -402.86398315]
[78.48177338 -391.18383789]
[84.68415833 -377.42910767]
[87.11425018 -362.53759766]
[85.60636902 -347.52462769]
[80.26331329 -333.41384888]
[71.44940186 -321.16732788]
[59.76556015 -311.62005615]
[46.00842667 -305.42300415]
[48.42998505 -290.61975098]
[50.85153961 -275.81649780]
[63.05796814 -267.35842896]
[65.72464752 -252.38034058]
[56.77030182 -239.63446045]
[59.19185638 -224.83122253]
[74.96045685 -224.22352600]
[90.27108002 -220.37971497]
[104.46660614 -213.46241760]
[116.93732452 -203.76626587]
[127.14706421 -191.70527649]
[134.65631104 -177.79521179]
[139.14105225 -162.63151550]
[140.40682983 -146.86380005]
[138.39712524 -131.16806030]
[133.19589233 -116.21765137]
[125.02405548 -102.65441895]
[114.23013306 -91.06114960]
[101.27533722 -81.93653107]
[86.71392822 -75.67367554]
[89.73340607 -60.98072815]
[94.18663788 -55.02687454]
[92.66201019 -45.95953369]
[95.38308716 -31.20840645]
[98.10416412 -16.45727921]
[100.82524109 -1.70615268]
[103.99346161 12.95544243]
[107.60589600 27.51395607]
[111.21833038 42.07246780]
[114.83077240 56.63098145]
[118.44320679 71.18949127]
[128.99592590 81.84970093]
[139.70684814 70.84188843]
[154.49102783 66.67974854]
[169.37161255 70.48287201]
[180.34579468 81.22823334]
[184.46157837 96.02539062]
[180.61183167 110.89398193]
[169.83212280 121.83443451]
[155.02214050 125.90381622]
[140.16567993 122.00747681]
[129.25907898 111.19352722]
[125.23614502 96.37085724]
[122.78545380 106.96599579]
[116.41874695 114.87844849]
[107.88486481 118.90996552]
[108.18887329 133.90687561]
[108.49287415 148.90379333]
[108.79688263 163.90072632]
[109.10088348 178.89764404]
[109.40489197 193.89456177]
[109.70889282 208.89147949]
[110.01289368 223.88839722]
[110.31690216 238.88531494]
[110.62090302 253.88223267]
[110.92491150 268.87915039]
[125.67828369 271.92639160]
[139.38346863 278.18063354]
[151.35301208 287.32818604]
[160.98654175 298.91018677]
[167.80084229 312.34570312]
[171.45408630 326.96081543]
[171.76306152 342.02243042]
[168.71223450 356.77508545]
[162.45466614 370.47875977]
[153.30422974 382.44607544]
[141.71987915 392.07681274]
[128.28271484 398.88784790]
[113.66670990 402.53753662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[35 111]
[36 110]
[37 109]
[38 108]
[39 106]
[40 105]
[56 91]
[57 90]
[60 87]
[61 86]
[62 85]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
