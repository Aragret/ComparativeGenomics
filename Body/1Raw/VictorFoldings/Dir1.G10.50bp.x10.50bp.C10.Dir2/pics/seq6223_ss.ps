%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCACUCAGGGGGGGGGGGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUxxxxxxxxxxAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCCCCCCCCCCCGCUUCAUUCA\
) } def
/len { sequence length } bind def

/coor [
[94.22837830 476.43402100]
[80.38243866 470.41799927]
[68.67377472 460.88858032]
[59.97125244 448.55291748]
[54.92065048 434.32638550]
[53.89675903 419.26470947]
[56.97555923 404.48553467]
[63.92858124 391.08563232]
[74.23986816 380.05929565]
[87.14424896 372.22479248]
[101.68413544 368.16345215]
[101.68413544 353.16345215]
[101.68413544 338.16345215]
[101.68413544 323.16345215]
[101.68413544 308.16345215]
[101.68413544 293.16345215]
[101.68413544 278.16345215]
[101.68413544 263.16345215]
[101.68413544 248.16346741]
[101.68413544 233.16346741]
[101.68413544 218.16346741]
[100.19867706 200.03683472]
[110.31811523 188.69075012]
[106.31037140 174.23605347]
[102.30263519 159.78137207]
[98.29489136 145.32667542]
[94.28715515 130.87199402]
[90.27941132 116.41729736]
[78.38703156 107.27556610]
[63.38784409 107.11952972]
[49.50793457 114.71285248]
[36.86183548 106.84358215]
[21.86264801 106.68754578]
[6.86346006 106.53150940]
[-3.17418742 118.52232361]
[-18.57997131 121.20482635]
[-32.07975006 113.31243134]
[-37.29934311 98.57167816]
[-31.77421761 83.94269562]
[-18.11316872 76.33285522]
[-2.76652455 79.33527374]
[7.01949644 91.53231812]
[22.01868439 91.68835449]
[37.01787186 91.84439087]
[49.82494354 84.23990631]
[63.54388046 92.12033844]
[78.54306793 92.27637482]
[80.91997528 85.16298676]
[88.05069733 63.82281876]
[75.97071075 54.93046951]
[59.95758820 55.90996170]
[49.31516266 43.90502930]
[52.20739365 28.12483597]
[66.41561127 20.67459106]
[81.04048157 27.26948547]
[84.86306000 42.85048294]
[96.94304657 51.74283218]
[104.21051788 49.88975143]
[92.25043488 40.83677292]
[91.87117004 25.84156799]
[103.35831451 16.19555855]
[118.06202698 19.16220856]
[124.91036987 32.50762558]
[118.74545288 46.18358994]
[126.01292419 44.33050919]
[132.36004639 30.73955727]
[138.70718384 17.14860725]
[145.05430603 3.55765605]
[151.40144348 -10.03329468]
[140.15534973 -19.24048996]
[131.45599365 -30.87202454]
[125.80917358 -44.24399948]
[123.54139709 -58.57153702]
[124.78096008 -73.01486969]
[129.45074463 -86.72853851]
[137.27297974 -98.91089630]
[147.78570557 -108.85098267]
[160.37016296 -115.96997833]
[174.28712463 -119.85492706]
[188.72035217 -120.28272247]
[202.82444763 -117.23284149]
[209.45294189 -130.68881226]
[216.08143616 -144.14477539]
[222.70994568 -157.60073853]
[221.09097290 -173.91978455]
[234.57012939 -183.26023865]
[249.28121948 -176.01345825]
[250.09072876 -159.63430786]
[236.16590881 -150.97224426]
[229.53739929 -137.51628113]
[222.90890503 -124.06031036]
[216.28041077 -110.60434723]
[228.02780151 -100.47505188]
[236.77151489 -87.64945221]
[241.91519165 -72.99214935]
[243.10534668 -57.49302673]
[240.25576782 -42.20039368]
[233.55360413 -28.15006065]
[223.44720459 -16.29521179]
[210.61602783 -7.44171810]
[195.92506409 -2.19336486]
[180.36640930 -0.91067874]
[164.99238586 -3.68616533]
[158.64526367 9.90478516]
[152.29812622 23.49573708]
[145.95100403 37.08668900]
[139.60386658 50.67763901]
[145.72253418 91.01435852]
[126.18564606 114.51504517]
[104.73410034 112.40956116]
[108.74184418 126.86425018]
[112.74958038 141.31893921]
[116.75732422 155.77362061]
[120.76506042 170.22831726]
[124.77280426 184.68299866]
[134.75552368 195.87876892]
[148.65808105 201.51072693]
[162.56063843 207.14268494]
[176.52102661 212.62971497]
[190.53775024 217.97122192]
[207.49168396 217.96156311]
[212.19429016 234.25027466]
[197.84396362 243.27825928]
[185.19622803 231.98794556]
[171.17951965 226.64642334]
[163.76121521 227.20709229]
[156.92868042 221.04524231]
[143.02612305 215.41328430]
[129.12358093 209.78132629]
[116.68413544 218.16346741]
[116.68413544 233.16346741]
[116.68413544 248.16346741]
[116.68413544 263.16345215]
[116.68413544 278.16345215]
[116.68413544 293.16345215]
[116.68413544 308.16345215]
[116.68413544 323.16345215]
[116.68413544 338.16345215]
[116.68413544 353.16345215]
[116.68413544 368.16345215]
[131.22401428 372.22479248]
[144.12840271 380.05929565]
[154.43968201 391.08563232]
[161.39270020 404.48553467]
[164.47151184 419.26470947]
[163.44761658 434.32638550]
[158.39701843 448.55291748]
[149.69448853 460.88858032]
[137.98582458 470.41799927]
[124.13988495 476.43402100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 47]
[30 46]
[32 44]
[33 43]
[34 42]
[49 57]
[50 56]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[81 92]
[82 91]
[83 90]
[84 89]
[116 129]
[117 128]
[118 127]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
