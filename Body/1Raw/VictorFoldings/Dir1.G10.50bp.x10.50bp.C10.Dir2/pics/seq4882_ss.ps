%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUAACCAGGGGGGGGGGAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAxxxxxxxxxxCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUCCCCCCCCCCACUAUAACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.93167114]
[71.19830322 359.91564941]
[59.48964310 350.38623047]
[50.78712082 338.05056763]
[45.73651886 323.82403564]
[44.71262741 308.76235962]
[47.79142761 293.98318481]
[54.74444962 280.58328247]
[65.05573273 269.55694580]
[77.96011353 261.72244263]
[92.50000000 257.66113281]
[92.50000000 242.66111755]
[92.50000000 227.66111755]
[92.50000000 212.66111755]
[92.50000000 197.66111755]
[92.50000000 182.66111755]
[92.50000000 167.66111755]
[92.50000000 152.66111755]
[92.50000000 137.66111755]
[92.50000000 122.66111755]
[92.50000000 107.66111755]
[90.32316589 92.81991577]
[86.01557922 78.45172882]
[81.70799255 64.08354187]
[77.40040588 49.71535873]
[70.91224670 36.19116974]
[62.40115356 23.83959770]
[53.89006424 11.48802471]
[45.37897491 -0.86354750]
[36.86788177 -13.21512032]
[23.71950340 -5.96952105]
[9.91502380 -0.06910111]
[-4.40835667 4.42749691]
[-19.10828209 7.47558260]
[-34.03865051 9.04486179]
[-49.05107880 9.11973763]
[-63.99636078 7.69946718]
[-78.72595978 4.79816484]
[-93.09348297 0.44466639]
[-106.95613098 -5.31776047]
[-120.17613220 -12.43184376]
[-132.62210083 -20.82687950]
[-144.17031860 -30.41943169]
[-154.70603943 -41.11416245]
[-164.12454224 -52.80477905]
[-172.33219910 -65.37509155]
[-179.24746704 -78.70017242]
[-184.80160522 -92.64758301]
[-188.93940735 -107.07869720]
[-191.61975098 -121.85010529]
[-192.81599426 -136.81498718]
[-192.51626587 -151.82460022]
[-190.72351074 -166.72979736]
[-187.45558167 -181.38241577]
[-182.74494934 -195.63684082]
[-176.63841248 -209.35137939]
[-169.19667053 -222.38975525]
[-160.49369812 -234.62237549]
[-150.61598206 -245.92765808]
[-139.66169739 -256.19323730]
[-127.73970795 -265.31710815]
[-114.96851349 -273.20855713]
[-101.47502899 -279.78918457]
[-87.39337921 -284.99356079]
[-72.86351013 -288.76998901]
[-58.02982330 -291.08093262]
[-43.03975296 -291.90341187]
[-28.04228401 -291.22924805]
[-13.18646717 -289.06512451]
[1.38004827 -285.43261719]
[15.51248932 -280.36776733]
[29.07039833 -273.92092896]
[41.91902924 -266.15615845]
[53.93067551 -257.15066528]
[64.98596954 -246.99395752]
[74.97502136 -235.78692627]
[83.79856110 -223.64099121]
[91.36889648 -210.67686462]
[97.61078644 -197.02339172]
[102.46218872 -182.81625366]
[105.87489319 -168.19667053]
[107.81497955 -153.30995178]
[108.26316071 -138.30403137]
[107.21498871 -123.32804871]
[104.68088531 -108.53085327]
[100.68602753 -94.05950928]
[95.27011871 -80.05784607]
[88.48699188 -66.66502380]
[80.40406036 -54.01414108]
[71.10165405 -42.23093414]
[60.67223740 -31.43251801]
[49.21945572 -21.72620964]
[57.73054504 -9.37463760]
[66.24163818 2.97693491]
[74.75272369 15.32850742]
[83.26381683 27.68008041]
[82.85724640 12.68559074]
[87.79935455 -1.47687876]
[97.44655609 -12.96301937]
[110.54254913 -20.27704620]
[125.38190460 -22.46648979]
[140.03215027 -19.24622726]
[152.58547974 -11.03562069]
[161.40711975 1.09610379]
[165.34826660 15.56909084]
[163.89569092 30.49859238]
[157.23855591 43.94041061]
[146.24377441 54.14408875]
[132.34317017 59.78084183]
[117.34692383 60.11662674]
[103.20793915 55.10771942]
[91.76859283 45.40777588]
[96.07617950 59.77595901]
[100.38376617 74.14414215]
[104.69134521 88.51232910]
[109.08034515 74.16880035]
[118.54158783 62.52900696]
[131.68583679 55.30206680]
[146.58306885 53.54914856]
[161.04583740 57.52764130]
[172.95050049 66.65335846]
[180.54905701 79.58634186]
[182.72576904 94.42756653]
[179.16102600 108.99782562]
[170.37823486 121.15770721]
[157.66703796 129.12170410]
[142.89385986 131.72044373]
[128.22793579 128.57232666]
[115.82272339 120.13961029]
[107.50000000 107.66111755]
[107.50000000 122.66111755]
[107.50000000 137.66111755]
[107.50000000 152.66111755]
[107.50000000 167.66111755]
[107.50000000 182.66111755]
[107.50000000 197.66111755]
[107.50000000 212.66111755]
[107.50000000 227.66111755]
[107.50000000 242.66111755]
[107.50000000 257.66113281]
[122.03988647 261.72244263]
[134.94427490 269.55694580]
[145.25555420 280.58328247]
[152.20857239 293.98318481]
[155.28736877 308.76235962]
[154.26348877 323.82403564]
[149.21287537 338.05056763]
[140.51036072 350.38623047]
[128.80169678 359.91564941]
[114.95575714 365.93167114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 115]
[23 114]
[24 113]
[25 112]
[26 96]
[27 95]
[28 94]
[29 93]
[30 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
