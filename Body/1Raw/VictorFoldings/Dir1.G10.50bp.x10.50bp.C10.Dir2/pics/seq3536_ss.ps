%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGACCUUGGGGGGGGGGAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCxxxxxxxxxxCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCCCCCCCCCCCAACCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.46221924]
[71.19830322 362.44619751]
[59.48964310 352.91677856]
[50.78712082 340.58111572]
[45.73651886 326.35458374]
[44.71262741 311.29290771]
[47.79142761 296.51376343]
[54.74444962 283.11383057]
[65.05573273 272.08749390]
[77.96011353 264.25299072]
[92.50000000 260.19168091]
[92.50000000 245.19166565]
[92.50000000 230.19166565]
[92.50000000 215.19166565]
[92.50000000 200.19166565]
[92.50000000 185.19166565]
[92.50000000 170.19166565]
[92.50000000 155.19166565]
[92.50000000 140.19166565]
[92.50000000 125.19166565]
[92.50000000 110.19166565]
[92.03195953 95.19896698]
[91.09632874 80.22817993]
[90.16069794 65.25738525]
[75.15581512 65.26062775]
[60.17975998 64.33100891]
[45.29046631 62.47212982]
[30.54553986 59.69118500]
[16.00202751 55.99892426]
[1.71619475 51.40964127]
[-12.25668716 45.94108963]
[-25.86256218 39.61442184]
[-39.04878616 32.45412064]
[-51.76435089 24.48788071]
[-63.96006012 15.74652863]
[-75.58872986 6.26388025]
[-86.60536194 -3.92337704]
[-96.96735382 -14.77583027]
[-106.63459778 -26.25149345]
[-115.56970215 -38.30596924]
[-123.73810577 -50.89262009]
[-131.10818481 -63.96275330]
[-137.65144348 -77.46579742]
[-143.34257507 -91.34951782]
[-148.15953064 -105.56019592]
[-152.08370972 -120.04285431]
[-155.09989929 -134.74145508]
[-157.19645691 -149.59915161]
[-158.36524963 -164.55844116]
[-158.60176086 -179.56146240]
[-157.90509033 -194.55017090]
[-156.27792358 -209.46655273]
[-153.72654724 -224.25294495]
[-150.26083374 -238.85209656]
[-145.89421082 -253.20755005]
[-140.64355469 -267.26376343]
[-134.52917480 -280.96633911]
[-127.57473755 -294.26229858]
[-119.80715179 -307.10018921]
[-111.25646210 -319.43032837]
[-101.95574951 -331.20498657]
[-91.94099426 -342.37869263]
[-81.25094604 -352.90814209]
[-69.92696381 -362.75262451]
[-58.01285934 -371.87405396]
[-45.55472183 -380.23715210]
[-32.60074997 -387.80953979]
[-19.20106316 -394.56195068]
[-5.40750170 -400.46823120]
[8.72657013 -405.50555420]
[23.14647102 -409.65438843]
[37.79640961 -412.89874268]
[52.61970901 -415.22604370]
[67.55902100 -416.62725830]
[82.55655670 -417.09698486]
[97.55427551 -416.63342285]
[112.49416351 -415.23837280]
[127.31842041 -412.91717529]
[141.96969604 -409.67886353]
[156.39129639 -405.53594971]
[170.52745056 -400.50445557]
[184.32344055 -394.60385132]
[197.72590637 -387.85696411]
[210.68298340 -380.28988647]
[223.14456177 -371.93191528]
[235.06242371 -362.81539917]
[246.39045715 -352.97555542]
[257.08483887 -342.45050049]
[267.10418701 -331.28094482]
[276.40975952 -319.51010132]
[284.96551514 -307.18347168]
[292.73837280 -294.34881592]
[299.69830322 -281.05572510]
[305.81829834 -267.35565186]
[311.07473755 -253.30158997]
[315.44729614 -238.94793701]
[318.91900635 -224.35020447]
[321.47647095 -209.56488037]
[323.10977173 -194.64915466]
[323.81262207 -179.66073608]
[323.58227539 -164.65762329]
[322.41964722 -149.69786072]
[320.32919312 -134.83929443]
[317.31906128 -120.13945007]
[313.40084839 -105.65518188]
[308.58972168 -91.44252014]
[302.90432739 -77.55645752]
[296.36660767 -64.05072021]
[289.00192261 -50.97755814]
[280.83868408 -38.38754654]
[271.90853882 -26.32939529]
[262.24603271 -14.84975338]
[251.88850403 -3.99303627]
[240.87606812 6.19875431]
[229.25129700 15.68618774]
[217.05918884 24.43255997]
[204.34690857 32.40402985]
[191.16363525 39.56975937]
[177.56036377 45.90202713]
[163.58973694 51.37633133]
[149.30578613 55.97149277]
[134.76379395 59.66973495]
[120.02001953 62.45675278]
[105.13149261 64.32176208]
[106.06712341 79.29254913]
[107.00274658 94.26334381]
[109.56341553 97.24317932]
[110.76847076 101.35335541]
[110.13684082 105.94892120]
[107.50000000 110.19166565]
[107.50000000 125.19166565]
[107.50000000 140.19166565]
[107.50000000 155.19166565]
[107.50000000 170.19166565]
[107.50000000 185.19166565]
[107.50000000 200.19166565]
[107.50000000 215.19166565]
[107.50000000 230.19166565]
[107.50000000 245.19166565]
[107.50000000 260.19168091]
[122.03988647 264.25299072]
[134.94427490 272.08749390]
[145.25555420 283.11383057]
[152.20857239 296.51376343]
[155.28736877 311.29290771]
[154.26348877 326.35458374]
[149.21287537 340.58111572]
[140.51036072 352.91677856]
[128.80169678 362.44619751]
[114.95575714 368.46221924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 126]
[23 125]
[24 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
