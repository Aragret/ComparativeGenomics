%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCACGGACGGGGGGGGGGUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAAxxxxxxxxxxUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUCCCCCCCCCCUUCCAAGGAC\
) } def
/len { sequence length } bind def

/coor [
[95.20529175 420.61343384]
[81.35935974 414.59741211]
[69.65069580 405.06799316]
[60.94816971 392.73233032]
[55.89756775 378.50579834]
[54.87367630 363.44412231]
[57.95247650 348.66497803]
[64.90549469 335.26504517]
[75.21678162 324.23870850]
[88.12116241 316.40420532]
[102.66104889 312.34289551]
[102.66104889 297.34289551]
[102.66104889 282.34289551]
[102.66104889 267.34289551]
[102.66104889 252.34288025]
[102.66104889 237.34288025]
[102.66104889 222.34288025]
[102.66104889 207.34288025]
[102.66104889 192.34288025]
[102.66104889 177.34288025]
[101.56974030 162.38262939]
[99.39289856 147.54142761]
[97.21606445 132.70022583]
[95.03923035 117.85901642]
[88.77624512 113.73287201]
[75.36671448 120.45481110]
[76.25028229 105.48058319]
[69.98730469 101.35443878]
[55.49170685 105.21160126]
[44.26393890 117.16439056]
[28.36263084 113.15434265]
[24.14568901 97.30664825]
[35.95114136 85.92405701]
[51.63454819 90.71600342]
[66.13014221 86.85884094]
[67.06577301 71.88805389]
[53.16321564 66.25609589]
[43.62261581 77.98078156]
[31.04904175 86.37105560]
[16.56052589 90.68084717]
[1.44537747 90.52693176]
[-12.95237446 85.92301178]
[-25.35249138 77.27844238]
[-34.65236664 65.36190796]
[-40.02505493 51.23301697]
[-40.99282455 36.14809799]
[-37.46962357 21.44849014]
[-29.76872826 8.44127464]
[-18.57490158 -1.71695495]
[-4.88348818 -8.12293720]
[10.08808041 -10.20705509]
[25.00854111 -7.78399181]
[38.55117798 -1.06920338]
[49.51179123 9.34023571]
[56.91576385 22.51872444]
[60.10474777 37.29444122]
[58.79517365 52.35353851]
[72.69773102 57.98549652]
[93.00994873 72.19251251]
[100.60530090 92.78639221]
[108.85758972 80.26042938]
[110.98747253 71.30970764]
[117.41411591 67.56218719]
[125.92520905 55.21061325]
[134.43629456 42.85904312]
[142.94738770 30.50746918]
[132.47544861 19.70328522]
[124.31526184 7.06767130]
[118.77887726 -6.91272449]
[116.07733154 -21.69989395]
[116.31261444 -36.72517395]
[119.47381592 -51.41112137]
[125.43760681 -65.19368744]
[133.97305298 -77.54391479]
[144.75057983 -87.98818970]
[157.35464478 -96.12644958]
[171.29980469 -101.64748383]
[186.04943848 -104.34084320]
[201.03630066 -104.10485840]
[215.68443298 -100.95046234]
[229.43124390 -95.00072479]
[237.94233704 -107.35230255]
[246.45343018 -119.70387268]
[254.96450806 -132.05545044]
[256.42361450 -147.80921936]
[270.01635742 -153.89915466]
[278.52743530 -166.25073242]
[277.04876709 -182.22549438]
[288.71578979 -193.23731995]
[304.57852173 -190.83888245]
[312.46847534 -176.87005615]
[306.33312988 -162.04652405]
[290.87899780 -157.73963928]
[282.36791992 -145.38806152]
[281.51757812 -130.51774597]
[267.31610107 -123.54435730]
[258.80499268 -111.19277954]
[250.29389954 -98.84120941]
[241.78282166 -86.48963928]
[252.23777771 -75.76267242]
[260.40161133 -63.19804382]
[265.95895386 -49.27764130]
[268.69451904 -34.53577805]
[268.50128174 -19.53870201]
[265.38482666 -4.86282444]
[259.46307373 8.92741489]
[250.96192932 21.30126762]
[240.20654297 31.78210068]
[227.60900879 39.96575546]
[213.65245056 45.53613663]
[198.87260437 48.27740479]
[183.83714294 48.08237457]
[169.12397766 44.95665741]
[155.29896545 39.01855850]
[146.78787231 51.37013245]
[138.27677917 63.72170639]
[129.76568604 76.07328033]
[121.38355255 88.51271820]
[113.13125610 101.03868103]
[109.88043213 115.68218231]
[112.05727386 130.52339172]
[114.23410797 145.36459351]
[116.41094208 160.20579529]
[125.68049622 148.41278076]
[140.32490540 145.16600037]
[153.71008301 151.93627930]
[159.77244568 165.65663147]
[155.76565552 180.11158752]
[143.50485229 188.75291443]
[128.54428101 187.66600037]
[117.66104889 177.34288025]
[117.66104889 192.34288025]
[117.66104889 207.34288025]
[117.66104889 222.34288025]
[117.66104889 237.34288025]
[117.66104889 252.34288025]
[117.66104889 267.34289551]
[117.66104889 282.34289551]
[117.66104889 297.34289551]
[117.66104889 312.34289551]
[132.20094299 316.40420532]
[145.10531616 324.23870850]
[155.41659546 335.26504517]
[162.36962891 348.66497803]
[165.44842529 363.44412231]
[164.42453003 378.50579834]
[159.37393188 392.73233032]
[150.67140198 405.06799316]
[138.96273804 414.59741211]
[125.11680603 420.61343384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 123]
[22 122]
[23 121]
[24 120]
[28 35]
[29 34]
[36 58]
[37 57]
[60 119]
[61 118]
[63 117]
[64 116]
[65 115]
[66 114]
[81 99]
[82 98]
[83 97]
[84 96]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
