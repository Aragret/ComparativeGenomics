%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUACUUACGGGGGGGGGGUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAxxxxxxxxxxGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUCCCCCCCCCCACAUACUUCC\
) } def
/len { sequence length } bind def

/coor [
[85.99996185 438.75448608]
[72.15402222 432.73846436]
[60.44536209 423.20904541]
[51.74283981 410.87338257]
[46.69223785 396.64685059]
[45.66834641 381.58517456]
[48.74714279 366.80603027]
[55.70016479 353.40609741]
[66.01145172 342.37976074]
[78.91583252 334.54525757]
[93.45571899 330.48394775]
[93.45571899 315.48394775]
[93.45571899 300.48394775]
[93.45571899 285.48394775]
[93.45571899 270.48394775]
[93.45571899 255.48394775]
[93.45571899 240.48394775]
[93.45571899 225.48394775]
[93.45571899 210.48394775]
[93.45571899 195.48394775]
[81.31729889 186.89343262]
[76.50798798 172.63389587]
[81.07073975 158.10685730]
[93.45571899 148.94615173]
[93.45571899 133.94615173]
[93.45571899 118.94615173]
[82.36440277 108.84750366]
[67.43009186 110.24980927]
[52.49578857 111.65211487]
[37.56148148 113.05441284]
[22.62717247 114.45671844]
[7.69286442 115.85902405]
[-7.24144316 117.26132202]
[-20.29432487 127.18878174]
[-35.31151962 120.59970093]
[-36.84462357 104.27237701]
[-23.31651306 95.00295258]
[-8.64374638 102.32701874]
[6.29056120 100.92471313]
[21.22486877 99.52240753]
[36.15917587 98.12010956]
[51.09348297 96.71780396]
[66.02779388 95.31549835]
[80.96209717 93.91319275]
[84.01219177 87.53983307]
[89.14916992 82.54549408]
[85.74619293 67.93659973]
[82.34320831 53.32770538]
[78.94023132 38.71881485]
[75.53725433 24.10992241]
[72.13427734 9.50102901]
[59.24207687 -3.60511470]
[64.91286469 -20.18347740]
[61.20670319 -34.71841431]
[46.17886734 -33.91189575]
[31.28248978 -36.05295944]
[17.09014511 -41.05930710]
[4.14734602 -48.73851395]
[-7.04841757 -58.79540634]
[-16.06681252 -70.84342957]
[-22.56119347 -84.41947937]
[-26.28193474 -99.00173950]
[-27.08602142 -114.02970886]
[-24.94254684 -128.92573547]
[-19.93389893 -143.11727905]
[-12.25259876 -156.05882263]
[-2.19389391 -167.25296021]
[9.85558605 -176.26940918]
[23.43269157 -182.76159668]
[38.01555252 -186.47996521]
[53.04364777 -187.28163147]
[67.93933105 -185.13574219]
[82.13005829 -180.12480164]
[95.07036591 -172.44140625]
[106.26287842 -162.38088989]
[115.27736664 -150.32994080]
[121.76735687 -136.75178528]
[125.48337555 -122.16832733]
[126.28260040 -107.14010620]
[124.13430023 -92.24476624]
[119.12106323 -78.05485535]
[111.43556976 -65.11578369]
[101.37324524 -53.92490768]
[89.32084656 -44.91236496]
[75.74163818 -38.42457581]
[79.44779968 -23.88963890]
[89.71416473 -17.41592407]
[92.89393616 -5.28711271]
[86.74317169 6.09805107]
[90.14614868 20.70694351]
[93.54912567 35.31583786]
[96.95210266 49.92472839]
[100.35507965 64.53362274]
[103.75805664 79.14251709]
[116.85121155 86.46161652]
[131.07798767 81.70780182]
[145.30477905 76.95398712]
[155.94146729 65.24196625]
[170.46478271 68.54688263]
[181.10147095 56.83486557]
[195.62478638 60.13978195]
[209.85156250 55.38596725]
[224.07833862 50.63215256]
[234.53869629 38.00230026]
[250.65916443 41.01269531]
[255.85639954 56.56649780]
[244.78392029 68.66329193]
[228.83215332 64.85893250]
[214.60537720 69.61274719]
[200.37860107 74.36656189]
[190.75950623 85.73855591]
[175.21859741 82.77366638]
[165.59950256 94.14566040]
[150.05859375 91.18077087]
[135.83180237 95.93458557]
[121.60502625 100.68840027]
[136.33021545 97.83025360]
[150.11703491 103.73984528]
[158.20117188 116.37499237]
[157.78895569 131.36932373]
[149.02282715 143.54121399]
[134.93212891 148.68440247]
[120.38622284 145.02154541]
[110.41176605 133.81840515]
[108.45571899 118.94615173]
[108.45571899 133.94615173]
[108.45571899 148.94615173]
[120.84069824 158.10685730]
[125.40344238 172.63389587]
[120.59413910 186.89343262]
[108.45571899 195.48394775]
[108.45571899 210.48394775]
[108.45571899 225.48394775]
[108.45571899 240.48394775]
[108.45571899 255.48394775]
[108.45571899 270.48394775]
[108.45571899 285.48394775]
[108.45571899 300.48394775]
[108.45571899 315.48394775]
[108.45571899 330.48394775]
[122.99560547 334.54525757]
[135.89997864 342.37976074]
[146.21127319 353.40609741]
[153.16429138 366.80603027]
[156.24308777 381.58517456]
[155.21919250 396.64685059]
[150.16859436 410.87338257]
[141.46607971 423.20904541]
[129.75741577 432.73846436]
[115.91147614 438.75448608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 127]
[25 126]
[26 125]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[51 89]
[53 86]
[54 85]
[95 116]
[96 115]
[97 114]
[99 112]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
