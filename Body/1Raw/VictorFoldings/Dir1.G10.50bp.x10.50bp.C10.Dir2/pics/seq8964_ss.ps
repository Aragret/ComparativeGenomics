%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACACCACGGGGGGGGGGCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAxxxxxxxxxxACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCAC\
) } def
/len { sequence length } bind def

/coor [
[86.08481598 407.71630859]
[72.23887634 401.70028687]
[60.53021622 392.17086792]
[51.82769394 379.83520508]
[46.77709198 365.60867310]
[45.75320053 350.54699707]
[48.83199692 335.76782227]
[55.78501892 322.36788940]
[66.09630585 311.34158325]
[79.00068665 303.50704956]
[93.54057312 299.44573975]
[93.54057312 284.44573975]
[93.54057312 269.44573975]
[93.54057312 254.44575500]
[93.54057312 239.44575500]
[93.54057312 224.44575500]
[93.54057312 209.44575500]
[93.54057312 194.44575500]
[93.54057312 179.44575500]
[93.54057312 164.44575500]
[83.94946289 149.78250122]
[93.20372009 133.89733887]
[92.89166260 118.90058136]
[86.67194366 114.70951080]
[68.01278687 102.13629913]
[53.99607086 107.47781372]
[46.14948654 121.47104645]
[30.29424477 123.91867828]
[18.59313202 112.94309235]
[20.02224159 96.96381378]
[33.48527908 88.23878479]
[48.65456009 93.46109772]
[62.67127228 88.11958313]
[63.68243790 80.68806458]
[65.70477295 65.82501221]
[66.71594238 58.39348984]
[54.63595200 49.50114059]
[42.55596542 40.60879135]
[30.38412666 31.84258461]
[18.12175941 23.20346832]
[13.63763428 22.97085571]
[9.86464500 21.44258690]
[7.12959433 19.01331139]
[5.59260321 16.14422798]
[5.23996878 13.30116940]
[-6.26183462 3.67264342]
[-14.91083050 0.53469616]
[-17.90005302 -6.27780724]
[-29.19905663 -16.14352989]
[-40.49806213 -26.00925255]
[-51.79706573 -35.87497711]
[-67.21851349 -33.28403854]
[-80.67116547 -41.25650024]
[-85.80309296 -56.02800369]
[-80.19116211 -70.62390137]
[-66.48513794 -78.15245056]
[-51.15660477 -75.05890656]
[-41.44321823 -62.80394363]
[-41.93134308 -47.17398071]
[-30.63233948 -37.30825806]
[-19.33333397 -27.44253540]
[-8.03432941 -17.57681274]
[3.36669183 -7.82915974]
[14.86849499 1.79936624]
[26.76087570 10.94110012]
[39.02324295 19.58021736]
[46.35007858 20.86983109]
[51.44831467 28.52880287]
[63.52830124 37.42115402]
[75.60829163 46.31350327]
[69.27032471 32.71827698]
[75.65180206 19.14341927]
[86.57768250 8.86601543]
[100.51714325 3.32603550]
[115.51712036 3.29968953]
[129.47596741 8.79066849]
[140.43788147 19.02962875]
[146.86700439 32.58198547]
[147.86254883 47.54891205]
[143.28500366 61.83338928]
[133.77577209 73.43400574]
[120.66901398 80.72478485]
[110.92904663 92.13237762]
[124.94576263 86.79086304]
[138.96247864 81.44934845]
[152.97918701 76.10783386]
[166.99589539 70.76632690]
[181.01261902 65.42481232]
[195.02932739 60.08330154]
[209.04603577 54.74178696]
[206.72134399 39.86598587]
[207.54071045 24.83194542]
[211.46829224 10.29689217]
[218.33241272 -3.10376382]
[227.83299255 -14.78420448]
[239.55470276 -24.23381042]
[252.98513794 -31.03948593]
[267.53717041 -34.90371704]
[282.57461548 -35.65757370]
[297.44015503 -33.26810074]
[311.48391724 -27.83975792]
[324.09191895 -19.60984802]
[334.71307373 -8.93814659]
[342.88299561 3.70882416]
[348.24456787 17.77819443]
[350.56341553 32.65491104]
[349.73812866 47.68862534]
[345.80484009 62.22213364]
[338.93545532 75.62008667]
[329.43026733 87.29679108]
[317.70483398 96.74178314]
[304.27172852 103.54217529]
[289.71820068 107.40068054]
[274.68041992 108.14862061]
[259.81582642 105.75329590]
[245.77423096 100.31943512]
[233.16944885 92.08456421]
[222.55250549 81.40868378]
[214.38755798 68.75849915]
[200.37083435 74.10001373]
[186.35412598 79.44152832]
[172.33741760 84.78303528]
[158.32069397 90.12454987]
[144.30398560 95.46606445]
[130.28727722 100.80757904]
[116.27056122 106.14908600]
[107.88842010 118.58853149]
[108.20047760 133.58528137]
[116.97355652 143.09774780]
[116.88912964 155.63615417]
[108.54057312 164.44575500]
[108.54057312 179.44575500]
[108.54057312 194.44575500]
[108.54057312 209.44575500]
[108.54057312 224.44575500]
[108.54057312 239.44575500]
[108.54057312 254.44575500]
[108.54057312 269.44573975]
[108.54057312 284.44573975]
[108.54057312 299.44573975]
[123.08045959 303.50704956]
[135.98483276 311.34158325]
[146.29612732 322.36788940]
[153.24914551 335.76782227]
[156.32794189 350.54699707]
[155.30404663 365.60867310]
[150.25344849 379.83520508]
[141.55093384 392.17086792]
[129.84226990 401.70028687]
[115.99633026 407.71630859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[25 33]
[26 32]
[36 70]
[37 69]
[38 68]
[39 66]
[40 65]
[45 64]
[46 63]
[48 62]
[49 61]
[50 60]
[51 59]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
