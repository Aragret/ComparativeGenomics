%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCACUUCGGGGGGGGGGAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCxxxxxxxxxxCCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAACCCCCCCCCCUCUCCACCUC\
) } def
/len { sequence length } bind def

/coor [
[96.52030182 371.62393188]
[82.67436218 365.60791016]
[70.96569824 356.07849121]
[62.26317596 343.74282837]
[57.21257401 329.51629639]
[56.18868256 314.45462036]
[59.26748276 299.67544556]
[66.22050476 286.27554321]
[76.53178406 275.24920654]
[89.43617249 267.41467285]
[103.97605896 263.35336304]
[103.97605896 248.35337830]
[103.97605896 233.35337830]
[103.97605896 218.35337830]
[103.97605896 203.35337830]
[103.97605896 188.35337830]
[103.97605896 173.35337830]
[103.97605896 158.35337830]
[103.97605896 143.35337830]
[103.97605896 128.35337830]
[80.47381592 114.67617035]
[81.54373169 91.73463440]
[71.10391998 80.96382141]
[60.66410828 70.19301605]
[50.22429657 59.42220688]
[39.78448486 48.65139771]
[22.32215118 48.71682358]
[10.42584896 36.39764786]
[11.07518387 19.62158394]
[0.41355717 9.07029343]
[-10.24806881 -1.48099661]
[-20.90969467 -12.03228664]
[-32.72910690 -2.76380444]
[-45.61699295 4.95018482]
[-59.37009430 10.98801994]
[-73.77149963 15.25447655]
[-88.59408569 17.68226433]
[-103.60408020 18.23309708]
[-118.56474304 16.89828300]
[-133.24012756 13.69887829]
[-147.39878845 8.68533993]
[-160.81742859 1.93673825]
[-173.28439331 -6.44049072]
[-184.60307312 -16.31422615]
[-194.59495544 -27.52874565]
[-203.10246277 -39.90717697]
[-209.99140930 -53.25429916]
[-215.15315247 -67.35960388]
[-218.50627136 -82.00064087]
[-219.99789429 -96.94647980]
[-219.60450745 -111.96142578]
[-217.33229065 -126.80865479]
[-213.21708679 -141.25401306]
[-207.32380676 -155.06967163]
[-199.74539185 -168.03775024]
[-190.60136414 -179.95370483]
[-180.03593445 -190.62960815]
[-168.21574402 -199.89709473]
[-155.32720947 -207.61000061]
[-141.57360840 -213.64668274]
[-127.17183685 -217.91192627]
[-112.34904480 -220.33847046]
[-97.33901215 -220.88803101]
[-82.37845612 -219.55195618]
[-67.70333862 -216.35131836]
[-53.54509735 -211.33659363]
[-40.12703705 -204.58685303]
[-27.66077423 -196.20858765]
[-16.34292221 -186.33389282]
[-6.35197973 -175.11853027]
[2.15448284 -162.73937988]
[9.04230595 -149.39167786]
[14.20285797 -135.28593445]
[17.55475044 -120.64463043]
[19.04511833 -105.69865417]
[18.65045547 -90.68374634]
[16.37698936 -75.83670807]
[12.26057434 -61.39169693]
[6.36613131 -47.57653046]
[-1.21337485 -34.60910034]
[-10.35840511 -22.69391251]
[0.30322120 -12.14262295]
[10.96484756 -1.59133267]
[21.62647438 8.95995808]
[34.41380310 7.09421301]
[46.10620880 13.04080963]
[52.31195831 24.81860924]
[50.55529404 38.21158600]
[60.99510574 48.98239136]
[71.43492126 59.75320053]
[81.87473297 70.52400970]
[92.31454468 81.29481506]
[112.13081360 78.79846191]
[128.34446716 95.96090698]
[142.75668335 91.80302429]
[157.16889954 87.64513397]
[171.58111572 83.48724365]
[172.06636047 68.36707306]
[177.20217896 54.13756943]
[186.48536682 42.19280624]
[199.00648499 33.70300293]
[213.53883362 29.49990654]
[228.65869141 29.99529457]
[242.88475037 35.14063263]
[254.82328796 44.43183136]
[263.30468750 56.95863724]
[267.49804688 71.49379730]
[266.99252319 86.61331177]
[261.83767700 100.83591461]
[252.53846741 112.76823425]
[240.00598145 121.24124908]
[225.46801758 125.42486572]
[210.34884644 124.90921021]
[196.12969971 119.74481201]
[184.20361328 110.43762207]
[175.73899841 97.89945984]
[161.32678223 102.05735016]
[146.91456604 106.21524048]
[132.50234985 110.37312317]
[147.14366150 113.63381958]
[162.12159729 112.82051849]
[175.62696838 119.34774780]
[184.29533386 131.58946228]
[185.96722412 146.49600220]
[180.22613525 160.35385132]
[168.50228882 169.71073914]
[153.71633911 172.23570251]
[139.55172729 167.29969788]
[129.53717041 156.13240051]
[126.16744232 141.51710510]
[118.97605896 128.35337830]
[118.97605896 143.35337830]
[118.97605896 158.35337830]
[118.97605896 173.35337830]
[118.97605896 188.35337830]
[118.97605896 203.35337830]
[118.97605896 218.35337830]
[118.97605896 233.35337830]
[118.97605896 248.35337830]
[118.97605896 263.35336304]
[133.51594543 267.41467285]
[146.42031860 275.24920654]
[156.73161316 286.27554321]
[163.68463135 299.67544556]
[166.76342773 314.45462036]
[165.73953247 329.51629639]
[160.68893433 343.74282837]
[151.98640442 356.07849121]
[140.27775574 365.60791016]
[126.43180847 371.62393188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[29 84]
[30 83]
[31 82]
[32 81]
[94 119]
[95 118]
[96 117]
[97 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
