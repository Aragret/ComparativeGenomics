%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCCAACGGGGGGGGGGUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGxxxxxxxxxxCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCCCCCCCCCCCAGAACCCAAC\
) } def
/len { sequence length } bind def

/coor [
[94.13523102 365.99108887]
[80.28929138 359.97506714]
[68.58063507 350.44564819]
[59.87810898 338.10998535]
[54.82750702 323.88345337]
[53.80361557 308.82177734]
[56.88241577 294.04260254]
[63.83543777 280.64266968]
[74.14672089 269.61636353]
[87.05110168 261.78182983]
[101.59098816 257.72052002]
[101.59098816 242.72053528]
[101.59098816 227.72053528]
[101.59098816 212.72053528]
[101.59098816 197.72053528]
[101.59098816 182.72053528]
[101.59098816 167.72053528]
[101.59098816 152.72053528]
[101.59098816 137.72053528]
[101.59098816 122.72052765]
[94.39960480 135.88426208]
[89.97189331 150.21588135]
[78.16118622 159.46290588]
[63.18584442 160.32260132]
[50.39451599 152.48794556]
[44.35580063 138.75717163]
[47.22651291 124.03443909]
[57.98133469 113.57816315]
[72.77929688 111.12297821]
[86.79240417 105.77201843]
[71.92935944 103.74968719]
[78.45915985 117.25382233]
[72.16538239 130.86955261]
[57.64825821 134.64489746]
[45.51863480 125.82036591]
[44.64228821 110.84599304]
[55.65912247 100.66701508]
[41.08642197 97.11225891]
[26.51371765 93.55749512]
[11.94101524 90.00273132]
[-1.43245816 98.42447662]
[-16.82527924 94.84165192]
[-25.10515976 81.37989044]
[-21.35979271 66.02581024]
[-7.81124067 57.88871384]
[7.50238323 61.79620361]
[15.49577713 75.43003082]
[30.06847954 78.98479462]
[44.64118195 82.53955078]
[59.21388626 86.09431458]
[73.95169067 88.88664246]
[88.81473541 90.90897369]
[102.71729279 85.27701569]
[111.98224640 73.48037720]
[121.24719238 61.68373871]
[130.51214600 49.88709641]
[139.77708435 38.09045792]
[149.04203796 26.29381752]
[158.30699158 14.49717808]
[167.57194519 2.70053792]
[161.68869019 -10.02869225]
[161.87713623 -23.98417664]
[168.04309082 -36.43109894]
[178.92660522 -44.95499039]
[192.35896301 -47.93002701]
[205.69473267 -44.82891846]
[215.20309448 -56.43025970]
[201.05662537 -51.44249344]
[186.09431458 -50.38001251]
[171.38499451 -53.31871796]
[157.97947693 -60.04867554]
[146.83543396 -70.08911133]
[138.74897766 -82.72275543]
[134.29776001 -97.04709625]
[133.79977417 -112.03882599]
[137.29061890 -126.62697601]
[144.52088928 -139.76939392]
[154.97407532 -150.52722168]
[167.90342712 -158.13194275]
[182.38531494 -162.04028320]
[197.38516235 -161.97303772]
[211.83142090 -157.93504333]
[224.69209290 -150.21472168]
[235.04841614 -139.36361694]
[242.16058350 -126.15691376]
[245.52050781 -111.53805542]
[244.88815308 -96.55139160]
[240.30871582 -82.26753235]
[232.11289978 -69.71104431]
[245.63710022 -76.19920349]
[259.16128540 -82.68737030]
[272.68548584 -89.17553711]
[279.12036133 -95.75157166]
[286.55917358 -95.65471649]
[300.21542358 -101.86012268]
[306.78570557 -108.30086517]
[314.22091675 -108.04927826]
[324.85461426 -123.04609680]
[342.17202759 -120.38029480]
[355.82827759 -126.58570099]
[369.48452759 -132.79110718]
[381.40338135 -144.84834290]
[396.28887939 -136.73304749]
[392.61145020 -120.18273163]
[375.68994141 -119.13486481]
[362.03369141 -112.92945862]
[348.37744141 -106.72405243]
[343.81079102 -95.47891235]
[332.43054199 -90.21498871]
[320.14089966 -94.26689911]
[306.42083740 -88.20388031]
[292.76458740 -81.99847412]
[279.17364502 -75.65134430]
[265.64944458 -69.16318512]
[252.12525940 -62.67501831]
[238.60107422 -56.18685150]
[226.80442810 -46.92190170]
[217.29606628 -35.32056046]
[223.36463928 -20.37652588]
[221.07402039 -4.31616735]
[210.95343018 8.48241615]
[195.67942810 14.48243141]
[179.36857605 11.96548748]
[170.10362244 23.76212692]
[160.83868408 35.55876541]
[151.57373047 47.35540771]
[142.30877686 59.15204620]
[133.04383850 70.94868469]
[123.77888489 82.74532318]
[114.51393127 94.54196930]
[116.59098816 122.72052765]
[116.59098816 137.72053528]
[116.59098816 152.72053528]
[116.59098816 167.72053528]
[116.59098816 182.72053528]
[116.59098816 197.72053528]
[116.59098816 212.72053528]
[116.59098816 227.72053528]
[116.59098816 242.72053528]
[116.59098816 257.72052002]
[131.13087463 261.78182983]
[144.03526306 269.61636353]
[154.34654236 280.64266968]
[161.29956055 294.04260254]
[164.37835693 308.82177734]
[163.35447693 323.88345337]
[158.30386353 338.10998535]
[149.60134888 350.44564819]
[137.89268494 359.97506714]
[124.04674530 365.99108887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 52]
[31 51]
[37 50]
[38 49]
[39 48]
[40 47]
[53 130]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[66 118]
[67 117]
[89 116]
[90 115]
[91 114]
[92 113]
[94 112]
[95 111]
[97 110]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
