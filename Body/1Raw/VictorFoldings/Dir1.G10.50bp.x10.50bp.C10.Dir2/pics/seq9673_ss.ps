%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAGUCUGGGGGGGGGGUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCxxxxxxxxxxAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUCCCCCCCCCCAUACUAAUCU\
) } def
/len { sequence length } bind def

/coor [
[106.69367981 363.17108154]
[92.84774017 357.15505981]
[81.13908386 347.62564087]
[72.43655396 335.28997803]
[67.38595581 321.06347656]
[66.36206818 306.00177002]
[69.44086456 291.22262573]
[76.39388275 277.82269287]
[86.70516968 266.79635620]
[99.60955048 258.96185303]
[114.14943695 254.90054321]
[114.14943695 239.90054321]
[114.14943695 224.90054321]
[114.14943695 209.90054321]
[114.14943695 194.90054321]
[114.14943695 179.90054321]
[114.14943695 164.90054321]
[114.14943695 149.90054321]
[114.14943695 134.90054321]
[114.14943695 119.90054321]
[103.26191711 126.05212402]
[89.86841583 126.20252228]
[77.26905060 119.47168732]
[62.62554932 122.72251129]
[47.98204803 125.97333527]
[33.33854675 129.22416687]
[18.69504356 132.47499084]
[10.93607807 137.41970825]
[3.71317530 135.63777161]
[-10.99478626 138.58325195]
[-25.70274734 141.52873230]
[-40.04621124 150.56761169]
[-52.70251465 139.28691101]
[-45.36627960 124.00241089]
[-28.64822960 126.82077789]
[-13.94026852 123.87528992]
[0.76769286 120.92980957]
[15.44421864 117.83148956]
[30.08771896 114.58066559]
[44.73122025 111.32983398]
[59.37472153 108.07901001]
[74.01822662 104.82818604]
[75.57580566 89.90927124]
[61.91956329 83.70386505]
[48.26332092 77.49845886]
[34.60708237 71.29305267]
[17.68554688 70.24518585]
[14.00811577 53.69487381]
[28.89362144 45.57957458]
[40.81248856 57.63681030]
[54.46873093 63.84221649]
[68.12496948 70.04762268]
[81.78121185 76.25302887]
[92.98062134 72.03952789]
[104.48546600 72.63966370]
[114.38800812 77.59973907]
[121.18634796 85.77202606]
[124.01058197 95.55817413]
[134.45039368 84.78736115]
[124.63760376 73.42925262]
[115.86705017 61.24832535]
[108.20737457 48.33991623]
[101.71853638 34.80504990]
[96.45130920 20.74966049]
[92.44692993 6.28375053]
[89.73672485 -8.47946167]
[88.34191132 -23.42443085]
[88.27341461 -38.43419266]
[89.53175354 -53.39126968]
[92.10709381 -68.17860413]
[95.97927094 -82.68046570]
[101.11798859 -96.78334045]
[107.48301697 -110.37686920]
[115.02454376 -123.35466003]
[123.68355560 -135.61512756]
[133.39227295 -147.06233215]
[144.07470703 -157.60667419]
[155.64726257 -167.16563416]
[168.01934814 -175.66439819]
[181.09416199 -183.03643799]
[194.76934814 -189.22406006]
[208.93789673 -194.17884827]
[223.48890686 -197.86203003]
[238.30850220 -200.24475098]
[253.28068542 -201.30839539]
[268.28826904 -201.04460144]
[283.21383667 -199.45545959]
[297.94055176 -196.55340576]
[312.35311890 -192.36116028]
[326.33880615 -186.91151428]
[339.78808594 -180.24711609]
[352.59573364 -172.42015076]
[364.66152954 -163.49185181]
[375.89102173 -153.53210449]
[386.19628906 -142.61888123]
[395.49673462 -130.83755493]
[403.71951294 -118.28034973]
[410.80032349 -105.04555511]
[416.68371582 -91.23674011]
[421.32363892 -76.96198273]
[424.68380737 -62.33300400]
[426.73788452 -47.46429825]
[427.46981812 -32.47223663]
[426.87387085 -17.47415543]
[424.95471191 -2.58743358]
[421.72735596 12.07141590]
[417.21710205 26.38766479]
[411.45916748 40.24927139]
[404.49868774 53.54774094]
[396.39010620 66.17899323]
[387.19692993 78.04418182]
[376.99102783 89.05043030]
[365.85232544 99.11160278]
[353.86801147 108.14895630]
[341.13186646 116.09175110]
[327.74356079 122.87783813]
[313.80789185 128.45410156]
[299.43392944 132.77690125]
[284.73413086 135.81237793]
[269.82360840 137.53681946]
[254.81903076 137.93669128]
[239.83781433 137.00889587]
[224.99722290 134.76066589]
[210.41340637 131.20959473]
[196.20051575 126.38351440]
[182.46975708 120.32015228]
[169.32862854 113.06699371]
[156.87997437 104.68078613]
[145.22120667 95.22717285]
[134.78138733 105.99798584]
[129.14944458 119.90054321]
[129.14944458 134.90054321]
[129.14944458 149.90054321]
[129.14944458 164.90054321]
[129.14944458 179.90054321]
[129.14944458 194.90054321]
[129.14944458 209.90054321]
[129.14944458 224.90054321]
[129.14944458 239.90054321]
[129.14944458 254.90054321]
[143.68933105 258.96185303]
[156.59370422 266.79635620]
[166.90498352 277.82269287]
[173.85801697 291.22262573]
[176.93681335 306.00177002]
[175.91291809 321.06347656]
[170.86231995 335.28997803]
[162.15979004 347.62564087]
[150.45112610 357.15505981]
[136.60519409 363.17108154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[29 37]
[30 36]
[31 35]
[43 53]
[44 52]
[45 51]
[46 50]
[58 130]
[59 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
