%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAAUCUCAGGGGGGGGGGUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACxxxxxxxxxxCCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCACCCCCCCCCCUACUAAUCUUA\
) } def
/len { sequence length } bind def

/coor [
[3.79251623 303.71682739]
[-6.15664911 298.71386719]
[-15.84643650 293.22534180]
[-25.25317001 287.26470947]
[-34.35386658 280.84652710]
[-43.12628937 273.98648071]
[-51.54900360 266.70132446]
[-59.60143280 259.00885010]
[-67.26390076 250.92785645]
[-74.51767731 242.47810364]
[-81.34505463 233.68022156]
[-87.72933960 224.55570984]
[-93.65493774 215.12686157]
[-106.79656219 222.35856628]
[-119.93819427 229.59027100]
[-128.29838562 243.02223206]
[-143.17912292 242.37951660]
[-156.32075500 249.61122131]
[-169.46238708 256.84292603]
[-182.60401917 264.07461548]
[-195.74565125 271.30633545]
[-208.88728333 278.53802490]
[-211.74063110 293.91308594]
[-223.84213257 303.81701660]
[-239.47781372 303.57345581]
[-251.26499939 293.29745483]
[-253.63813782 277.84100342]
[-245.47668457 264.50213623]
[-230.63426208 259.57910156]
[-216.11898804 265.39639282]
[-202.97735596 258.16470337]
[-189.83572388 250.93298340]
[-176.69409180 243.70127869]
[-163.55245972 236.46958923]
[-150.41082764 229.23788452]
[-142.99061584 216.32318115]
[-127.16989899 216.44863892]
[-114.02826691 209.21693420]
[-100.88663483 201.98522949]
[-112.71482086 174.22152710]
[-120.72623444 145.12605286]
[-124.77712250 115.22087097]
[-124.79480743 85.04257965]
[-120.77896881 55.13266754]
[-112.80165863 26.02782249]
[-101.00601959 -1.74973238]
[-85.60370636 -27.70157623]
[-66.87107849 -51.36205673]
[-77.63976288 -61.80406570]
[-88.40843964 -72.24607086]
[-99.17711639 -82.68807983]
[-113.69771576 -77.84960938]
[-128.80174255 -80.32485962]
[-141.01841736 -89.54503632]
[-147.54042053 -103.39141083]
[-146.86904907 -118.68218994]
[-139.15856934 -131.90365601]
[-126.18081665 -140.01762390]
[-110.91796875 -141.15956116]
[-96.87731934 -135.06704712]
[-87.28530121 -123.14011383]
[-84.34609222 -108.11947632]
[-88.73510742 -93.45676422]
[-77.96643066 -83.01475525]
[-67.19775391 -72.57274628]
[-56.42907333 -62.13073349]
[-48.22624969 -69.66262817]
[-39.66126251 -76.77998352]
[-30.75502968 -83.46539307]
[-21.52931786 -89.70254517]
[-12.00666714 -95.47617340]
[-2.21034575 -100.77219391]
[7.83571148 -105.57765961]
[18.10695839 -109.88082123]
[28.57829857 -113.67117310]
[39.22414780 -116.93945312]
[50.01849365 -119.67766571]
[60.93495941 -121.87913513]
[71.94687653 -123.53848267]
[83.02733612 -124.65163422]
[94.14926910 -125.21588898]
[105.28549957 -125.22986603]
[116.40880585 -124.69352722]
[127.49202728 -123.60817719]
[138.50807190 -121.97647858]
[149.43003845 -119.80241394]
[160.23121643 -117.09129333]
[170.88523865 -113.84974670]
[181.36605835 -110.08568573]
[191.64807129 -105.80831146]
[201.70616150 -101.02807617]
[211.51573181 -95.75666046]
[221.05284119 -90.00694275]
[230.29418945 -83.79296875]
[239.21716309 -77.12992859]
[247.79998779 -70.03409576]
[256.02169800 -62.52280807]
[263.86218262 -54.61442184]
[271.30227661 -46.32825851]
[278.32382202 -37.68456268]
[284.90969849 -28.70445633]
[291.04373169 -19.40987968]
[296.71099854 -9.82354355]
[301.89764404 0.03113059]
[306.59097290 10.13006306]
[310.77951050 20.44857979]
[314.45306396 30.96146774]
[317.60260010 41.64304352]
[320.22048950 52.46720123]
[322.30029297 63.40750122]
[323.83694458 74.43721008]
[324.82666016 85.52937317]
[325.26705933 96.65689850]
[325.15707397 107.79259491]
[324.49691772 118.90924072]
[323.28826904 129.97969055]
[321.53402710 140.97689819]
[319.23849487 151.87397766]
[316.40728760 162.64430237]
[313.04733276 173.26156616]
[309.16683960 183.69984436]
[304.77526855 193.93359375]
[299.88336182 203.93783569]
[294.50305176 213.68812561]
[288.64752197 223.16064453]
[282.33105469 232.33222961]
[275.56909180 241.18048096]
[268.37814331 249.68377686]
[260.77578735 257.82135010]
[252.78060913 265.57330322]
[244.41212463 272.92068481]
[235.69079590 279.84558105]
[226.63792419 286.33105469]
[217.27563477 292.36126709]
[207.62680054 297.92144775]
[197.71499634 302.99804688]
[187.56445312 307.57864380]
[177.19993591 311.65206909]
[166.64680481 315.20834351]
[155.93083191 318.23880005]
[145.07820129 320.73602295]
[134.11541748 322.69387817]
[123.06929016 324.10763550]
[111.96678925 324.97384644]
[100.83505249 325.29031372]
[89.70127869 325.05636597]
[78.59266663 324.27249146]
[67.53635406 322.94067383]
[56.55936813 321.06411743]
[45.68852234 318.64743042]
[34.95037460 315.69650269]
[24.37116814 312.21853638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 39]
[14 38]
[15 37]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[48 66]
[49 65]
[50 64]
[51 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
