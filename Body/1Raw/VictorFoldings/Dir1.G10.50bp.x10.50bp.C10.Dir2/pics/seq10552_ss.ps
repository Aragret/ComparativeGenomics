%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUUUACCGGGGGGGGGGGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGxxxxxxxxxxAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCCCCCCCCCCCUUAGUUACCG\
) } def
/len { sequence length } bind def

/coor [
[127.51560974 438.26263428]
[114.29738617 430.98657227]
[103.41342926 420.53662109]
[95.60580444 407.62524414]
[91.40686798 393.13278198]
[91.10289764 378.04736328]
[94.71462250 363.39752197]
[101.99578857 350.18209839]
[112.44995880 339.30218506]
[125.36434174 331.49954224]
[139.85841370 327.30621338]
[139.55044556 312.30935669]
[139.24246216 297.31253052]
[138.93449402 282.31567383]
[138.62651062 267.31884766]
[138.31852722 252.32200623]
[138.01055908 237.32518005]
[137.70257568 222.32833862]
[137.39459229 207.33149719]
[137.08662415 192.33465576]
[133.27876282 177.82603455]
[126.18235779 164.61085510]
[119.08595276 151.39567566]
[103.88436890 154.68730164]
[88.37014771 153.57737732]
[73.79196930 148.15524292]
[61.32315445 138.85729980]
[51.96727371 126.43190765]
[46.47734070 111.87911987]
[45.29521561 96.37023163]
[48.51604462 81.15349579]
[55.88059235 67.45362091]
[66.79612732 56.37327576]
[59.42988586 43.30657959]
[52.06364441 30.23988533]
[44.69740677 17.17318916]
[37.33116531 4.10649443]
[29.96492767 -8.96020031]
[22.59868813 -22.02689552]
[15.23244858 -35.09358978]
[-0.82047224 -44.05653763]
[-0.02694376 -61.56124496]
[-7.65991354 -74.47394562]
[-15.29288387 -87.38664246]
[-31.00199699 -83.23929596]
[-47.23011780 -83.65560913]
[-62.67943573 -88.59451294]
[-76.11660767 -97.65354156]
[-86.47119141 -110.10166168]
[-92.92097473 -124.93822479]
[-94.95719910 -140.97341919]
[-92.42471313 -156.92369080]
[-85.53376770 -171.51448059]
[-74.84257507 -183.58203125]
[-82.99924469 -196.17047119]
[-91.15590668 -208.75891113]
[-99.31257629 -221.34735107]
[-107.46923828 -233.93579102]
[-115.62590790 -246.52423096]
[-131.13186646 -249.58047485]
[-139.86563110 -262.75228882]
[-136.64562988 -278.22506714]
[-123.38220215 -286.81909180]
[-107.94432831 -283.43566895]
[-99.49101257 -270.08212280]
[-103.03746796 -254.68089294]
[-94.88079834 -242.09245300]
[-86.72413635 -229.50401306]
[-78.56746674 -216.91557312]
[-70.41080475 -204.32713318]
[-62.25413895 -191.73869324]
[-49.13952255 -196.14608765]
[-35.33945847 -197.26481628]
[-21.66654778 -195.02423096]
[-8.92706490 -189.55158997]
[2.12659359 -181.16490173]
[10.84033966 -170.35441589]
[16.69709969 -157.75399780]
[19.34749985 -144.10395813]
[18.63069344 -130.20750427]
[14.58412933 -116.88358307]
[7.44161367 -104.91850281]
[-2.38018584 -95.01960754]
[5.25278425 -82.10691071]
[12.88575459 -69.19421387]
[24.55382729 -65.85980988]
[31.00741005 -55.11166382]
[28.29914284 -42.45983124]
[35.66538239 -29.39313507]
[43.03162384 -16.32643890]
[50.39786148 -3.25974488]
[57.76410294 9.80694962]
[65.13034058 22.87364578]
[72.49658203 35.94033813]
[79.86281586 49.00703430]
[93.78591919 45.52822876]
[108.13481140 45.78179932]
[121.92630005 49.75036621]
[134.21542358 57.16200638]
[144.16011047 67.50888062]
[151.07899475 80.08203125]
[154.49795532 94.01995087]
[154.18275452 108.36761475]
[150.15499878 122.14193726]
[142.69062805 134.39910889]
[132.30113220 144.29927063]
[139.39753723 157.51445007]
[146.49394226 170.72962952]
[147.21733093 155.74708557]
[151.57716370 141.39466858]
[159.30950928 128.54122925]
[169.94627380 117.96487427]
[182.84355164 110.30586243]
[197.22056580 106.02784729]
[212.20698547 105.38980103]
[226.89558411 108.43035126]
[240.39717102 114.96542358]
[251.89439392 124.59942627]
[260.69125366 136.74913025]
[266.25518799 150.67904663]
[268.24942017 165.54588318]
[266.55322266 180.44967651]
[261.26922607 194.48817444]
[252.71736145 206.81155396]
[241.41531372 216.67378235]
[228.04725647 223.47782898]
[213.42247009 226.81181335]
[198.42626953 226.47390747]
[183.96649170 222.48455811]
[170.91848755 215.08526611]
[160.07212830 204.72396851]
[152.08346558 192.02668762]
[152.39143372 207.02351379]
[152.69941711 222.02035522]
[153.00738525 237.01719666]
[153.31536865 252.01403809]
[153.62335205 267.01086426]
[153.93132019 282.00772095]
[154.23930359 297.00454712]
[154.54728699 312.00137329]
[154.85525513 326.99822998]
[169.50927734 330.59298706]
[182.73310852 337.85882568]
[193.62513733 348.30038452]
[201.44271851 361.20571899]
[205.65284729 375.69494629]
[205.96847534 390.78012085]
[202.36805725 405.43273926]
[195.09710693 418.65377808]
[184.65133667 429.54177856]
[171.74298096 437.35437012]
[157.25215149 441.55889893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 108]
[22 107]
[23 106]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[42 85]
[43 84]
[44 83]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
