%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCCAAGCGGGGGGGGGGCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUxxxxxxxxxxAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAACCAAACCCCCCCCCCUAAUUCAAGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 486.40054321]
[71.19830322 480.38452148]
[59.48964310 470.85510254]
[50.78712082 458.51943970]
[45.73651886 444.29290771]
[44.71262741 429.23123169]
[47.79142761 414.45205688]
[54.74444962 401.05215454]
[65.05573273 390.02581787]
[77.96011353 382.19131470]
[92.50000000 378.12997437]
[92.50000000 363.12997437]
[92.50000000 348.12997437]
[92.50000000 333.12997437]
[92.50000000 318.12997437]
[92.50000000 303.12997437]
[92.50000000 288.12997437]
[92.50000000 273.12997437]
[92.50000000 258.12997437]
[92.50000000 243.12998962]
[79.53267670 235.80099487]
[71.92427826 222.87937927]
[71.80444336 207.78460693]
[79.30548859 194.56979370]
[92.50000000 186.83337402]
[92.50000000 171.83337402]
[92.50000000 156.83337402]
[92.50000000 141.83337402]
[77.08091736 135.79101562]
[65.14176941 124.31430054]
[58.49534988 109.14580536]
[58.15082550 92.58864594]
[64.16050720 77.15679169]
[75.61190033 65.19335938]
[90.76628876 58.51482010]
[90.14231110 43.52780533]
[89.51833344 28.54078674]
[88.89435577 13.55377102]
[88.27037811 -1.43324482]
[79.96570587 -14.89961147]
[87.16687775 -27.93772697]
[86.54290009 -42.92474365]
[84.36605835 -57.76594925]
[80.65989685 -72.30088806]
[76.95373535 -86.83582306]
[62.04911804 -84.97690582]
[47.02904510 -85.00074005]
[32.13040161 -86.90695190]
[17.58816147 -90.66548157]
[3.63167906 -96.21704102]
[-9.51893234 -103.47408295]
[-21.65626907 -112.32215118]
[-32.58890915 -122.62169647]
[-42.14442444 -134.21028137]
[-50.17211533 -146.90513611]
[-56.54537201 -160.50605774]
[-61.16368103 -174.79852295]
[-63.95420074 -189.55711365]
[-64.87292480 -204.54908752]
[-63.90536118 -219.53797913]
[-61.06676865 -234.28741455]
[-56.40192032 -248.56475830]
[-49.98438263 -262.14483643]
[-41.91537094 -274.81347656]
[-32.32214737 -286.37084961]
[-21.35601044 -296.63473511]
[-9.18991089 -305.44320679]
[3.98427534 -312.65734863]
[17.95877075 -318.16342163]
[32.51317978 -321.87454224]
[47.41795349 -323.73220825]
[62.43802643 -323.70709229]
[77.33650970 -321.79965210]
[91.87843323 -318.03988647]
[105.83444977 -312.48715210]
[118.98445129 -305.22900391]
[131.12104797 -296.37991333]
[142.05281067 -286.07943726]
[151.60736084 -274.49005127]
[159.63397217 -261.79452515]
[166.00608826 -248.19306946]
[170.62319946 -233.90022278]
[173.41247559 -219.14138794]
[174.32992554 -204.14933777]
[173.36109924 -189.16052246]
[170.52127075 -174.41133118]
[165.85522461 -160.13438416]
[159.43653870 -146.55485535]
[151.36647034 -133.88690186]
[141.77227783 -122.33031464]
[130.80526733 -112.06736755]
[118.63842773 -103.25991821]
[105.46363068 -96.04686737]
[91.48867798 -90.54198456]
[95.19483948 -76.00704956]
[98.90099335 -61.47211075]
[105.06995392 -75.14485168]
[117.16794586 -84.01269531]
[132.06344604 -85.78021240]
[145.90080261 -79.98989868]
[155.09823608 -68.14055634]
[157.27505493 -53.29934311]
[151.86776733 -39.30787277]
[140.27604675 -29.78779030]
[125.50036621 -27.20334053]
[111.36537170 -32.22349930]
[101.52991486 -43.54872131]
[102.15389252 -28.56170464]
[110.41393280 -16.16730881]
[103.25739288 -2.05722213]
[103.88137054 12.92979431]
[104.50534821 27.91681099]
[105.12932587 42.90382767]
[105.75330353 57.89084244]
[118.48830414 61.73167801]
[129.41230774 69.32104492]
[137.45524597 79.91553497]
[141.82931519 92.47737122]
[142.10603333 105.77607727]
[138.25831604 118.50900269]
[130.66304016 129.42889404]
[120.06420135 137.46611023]
[107.50000000 141.83337402]
[107.50000000 156.83337402]
[107.50000000 171.83337402]
[107.50000000 186.83337402]
[120.69451141 194.56979370]
[128.19555664 207.78460693]
[128.07571411 222.87937927]
[120.46732330 235.80099487]
[107.50000000 243.12998962]
[107.50000000 258.12997437]
[107.50000000 273.12997437]
[107.50000000 288.12997437]
[107.50000000 303.12997437]
[107.50000000 318.12997437]
[107.50000000 333.12997437]
[107.50000000 348.12997437]
[107.50000000 363.12997437]
[107.50000000 378.12997437]
[122.03988647 382.19131470]
[134.94427490 390.02581787]
[145.25555420 401.05215454]
[152.20857239 414.45205688]
[155.28736877 429.23123169]
[154.26348877 444.29290771]
[149.21287537 458.51943970]
[140.51036072 470.85510254]
[128.80169678 480.38452148]
[114.95575714 486.40054321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 126]
[26 125]
[27 124]
[28 123]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[41 108]
[42 107]
[43 96]
[44 95]
[45 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
