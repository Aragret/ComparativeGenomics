%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUAAAAGGGGGGGGGGGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAxxxxxxxxxxCUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACCCCCCCCCCCAGACCUAAAA\
) } def
/len { sequence length } bind def

/coor [
[78.31383514 379.93234253]
[64.46789551 373.91632080]
[52.75923538 364.38690186]
[44.05670929 352.05123901]
[39.00610733 337.82473755]
[37.98221588 322.76303101]
[41.06101608 307.98388672]
[48.01403809 294.58395386]
[58.32532120 283.55761719]
[71.22970581 275.72311401]
[85.76959229 271.66180420]
[85.76959229 256.66180420]
[85.76959229 241.66180420]
[85.76959229 226.66180420]
[85.76959229 211.66180420]
[85.76959229 196.66180420]
[85.76959229 181.66180420]
[85.76959229 166.66180420]
[85.76959229 151.66180420]
[85.76959229 136.66180420]
[85.76959229 121.66180420]
[85.05177307 96.22480011]
[74.39014435 85.67350769]
[62.89215851 95.32343292]
[50.55282974 103.87127686]
[37.47743988 111.24411774]
[23.77753639 117.37904358]
[9.57001209 122.22371674]
[-5.02391958 125.73680878]
[-19.87974548 127.88834381]
[-34.87071609 128.65995789]
[-49.86893463 128.04507446]
[-64.74643707 126.04894257]
[-79.37629700 122.68858337]
[-93.63368225 117.99267578]
[-107.39695740 112.00128174]
[-120.54869843 104.76551056]
[-132.97669983 96.34711456]
[-144.57492065 86.81790161]
[-155.24441528 76.25917816]
[-164.89414978 64.76103210]
[-173.44178772 52.42156219]
[-180.81440735 39.34604645]
[-186.94909668 25.64604187]
[-191.79354858 11.43843555]
[-195.30639648 -3.15555429]
[-197.45767212 -18.01141548]
[-198.22903442 -33.00239944]
[-197.61390686 -48.00061035]
[-195.61752319 -62.87807846]
[-192.25692749 -77.50788116]
[-187.56077576 -91.76519012]
[-181.56915283 -105.52836609]
[-174.33316040 -118.67998505]
[-165.91456604 -131.10784912]
[-156.38514709 -142.70590210]
[-145.82624817 -153.37522888]
[-134.32794189 -163.02476501]
[-121.98833466 -171.57218933]
[-108.91269684 -178.94459534]
[-95.21259308 -185.07907104]
[-81.00490570 -189.92327881]
[-66.41085815 -193.43588257]
[-51.55495834 -195.58691406]
[-36.56396103 -196.35803223]
[-21.56576157 -195.74264526]
[-6.68832541 -193.74601746]
[7.94141722 -190.38517761]
[22.19864845 -185.68878174]
[35.96172714 -179.69692993]
[49.11322784 -172.46072388]
[61.54094696 -164.04191589]
[73.13884735 -154.51231384]
[83.80799103 -143.95323181]
[93.45733643 -132.45477295]
[102.00456238 -120.11501312]
[109.37674713 -107.03925323]
[115.51099396 -93.33905029]
[120.35495758 -79.13127899]
[123.86731720 -64.53717041]
[126.01811218 -49.68124008]
[126.78897858 -34.69022751]
[126.17334747 -19.69204140]
[124.17646790 -4.81463814]
[120.81537628 9.81504822]
[116.11875916 24.07220078]
[110.12667084 37.83517838]
[102.89025116 50.98656082]
[94.47122955 63.41413879]
[84.94143677 75.01188660]
[95.60305786 85.56317139]
[110.13800049 89.26933289]
[124.55020905 85.11145020]
[138.96243286 80.95355988]
[153.37464905 76.79567719]
[167.78686523 72.63778687]
[167.84449768 57.53237915]
[172.15679932 43.05547333]
[180.37419128 30.38065529]
[191.83053589 20.53540802]
[205.59710693 14.31784630]
[220.55792236 12.23199749]
[235.50016785 14.44695377]
[249.21253967 20.78315735]
[260.58343506 30.72695923]
[268.69110107 43.47226334]
[272.87823486 57.98586273]
[272.80541992 73.09120941]
[268.47857666 87.56376648]
[260.24844360 100.23033142]
[248.78222656 110.06405640]
[235.00941467 116.26779175]
[220.04650879 118.33860779]
[205.10649109 116.10864258]
[191.40049744 109.75866699]
[180.03958130 99.80344391]
[171.94474792 87.05000305]
[157.53253174 91.20789337]
[143.12031555 95.36577606]
[128.70809937 99.52366638]
[114.29588318 103.68154907]
[129.07734680 101.13036346]
[142.73825073 107.32549286]
[150.55776978 120.12608337]
[149.83369446 135.10859680]
[140.81625366 147.09548950]
[126.62160492 151.94442749]
[112.15505219 147.97975159]
[102.41581726 136.57153320]
[100.76959229 121.66180420]
[100.76959229 136.66180420]
[100.76959229 151.66180420]
[100.76959229 166.66180420]
[100.76959229 181.66180420]
[100.76959229 196.66180420]
[100.76959229 211.66180420]
[100.76959229 226.66180420]
[100.76959229 241.66180420]
[100.76959229 256.66180420]
[100.76959229 271.66180420]
[115.30947876 275.72311401]
[128.21385193 283.55761719]
[138.52514648 294.58395386]
[145.47816467 307.98388672]
[148.55696106 322.76303101]
[147.53306580 337.82473755]
[142.48246765 352.05123901]
[133.77993774 364.38690186]
[122.07128143 373.91632080]
[108.22534180 379.93234253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 91]
[23 90]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
