%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUAAUCUUCGGGGGGGGGGUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCxxxxxxxxxxAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGACCCCCCCCCCGUAAUAAACUUC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 403.88558960]
[70.87159729 398.73059082]
[58.28185654 390.44836426]
[47.94191742 379.48559570]
[40.40940475 366.43347168]
[36.09054184 351.99588013]
[35.21823120 336.95141602]
[37.83952332 322.11141968]
[43.81304932 308.27618408]
[52.81666565 296.19183350]
[64.36482239 286.51007080]
[77.83473969 279.75299072]
[92.50000000 276.28500366]
[92.50000000 261.28500366]
[92.50000000 246.28500366]
[92.50000000 231.28500366]
[92.50000000 216.28500366]
[92.50000000 201.28500366]
[92.50000000 186.28500366]
[92.50000000 171.28500366]
[92.50000000 156.28500366]
[92.50000000 141.28500366]
[92.50000000 126.28501129]
[79.86446381 118.48544312]
[73.17106628 105.23069000]
[74.39509583 90.43231964]
[83.17531586 78.45744324]
[77.54055786 64.55602264]
[71.90580750 50.65460205]
[66.27104950 36.75318146]
[51.35236359 38.87883377]
[36.36754608 37.37297058]
[22.18721390 32.32744598]
[9.63418961 24.03963661]
[-0.56422925 12.99492455]
[-7.81841421 -0.16173027]
[-11.71049213 -14.66345501]
[-12.01841545 -29.66616058]
[-8.72862720 -44.29767227]
[-2.03659272 -57.70843506]
[7.66480398 -69.12083435]
[19.80832672 -77.87430573]
[14.17357159 -91.77572632]
[8.53881550 -105.67714691]
[2.37915540 -112.50355530]
[2.93388224 -119.91785431]
[-2.41797662 -133.93061829]
[-7.76983547 -147.94338989]
[-19.23418236 -153.93701172]
[-23.38543892 -165.76460266]
[-18.50384903 -176.87263489]
[-23.57061386 -190.99099731]
[-28.63737679 -205.10934448]
[-40.58138657 -215.48484802]
[-37.59793091 -230.07760620]
[-44.06702805 -243.61091614]
[-51.87207794 -256.42034912]
[-59.05297852 -262.16281128]
[-59.70246887 -269.56939697]
[-67.24630737 -282.53439331]
[-74.79014587 -295.49935913]
[-82.33399200 -308.46432495]
[-96.82489777 -316.14193726]
[-97.15086365 -332.53784180]
[-82.97656250 -340.78533936]
[-68.88330078 -332.40011597]
[-69.36901855 -316.00814819]
[-61.82517624 -303.04318237]
[-54.28133774 -290.07821655]
[-46.73749924 -277.11325073]
[-39.06266022 -264.22540283]
[-31.25761032 -251.41596985]
[-29.42601967 -266.30374146]
[-20.50333023 -278.36132812]
[-6.80125237 -284.46484375]
[8.13025093 -283.03298950]
[20.42269325 -274.43673706]
[26.89132309 -260.90319824]
[25.86023331 -245.93865967]
[17.59655952 -233.42021179]
[4.24127531 -226.59112549]
[-10.74550629 -227.22071838]
[-23.47957611 -235.14436340]
[-11.89797497 -225.77870178]
[-14.51902390 -210.17611694]
[-9.45226002 -196.05775452]
[-4.38549662 -181.93940735]
[9.59523201 -171.37402344]
[6.24293041 -153.29524231]
[11.59478951 -139.28248596]
[16.94664764 -125.26971436]
[22.44023705 -111.31190491]
[28.07499313 -97.41048431]
[33.70974731 -83.50906372]
[48.52088547 -85.68130493]
[63.43048096 -84.24463654]
[77.57144928 -79.27825165]
[90.12034607 -71.06674194]
[100.34535980 -60.08379745]
[107.64894104 -46.96488190]
[111.60275269 -32.47046280]
[111.97277069 -17.44194031]
[108.73314667 -2.75279284]
[102.06796265 10.74218655]
[92.36075592 22.25663185]
[80.17247009 31.11842537]
[85.80722809 45.01984787]
[91.44197845 58.92126846]
[97.07673645 72.82269287]
[116.73135376 78.38488007]
[127.04245758 96.01788330]
[141.91247559 97.98833466]
[156.78248596 99.95878601]
[171.65249634 101.92923737]
[186.52250671 103.89968872]
[201.39253235 105.87014008]
[213.78504944 96.06192780]
[229.47344971 97.97227478]
[239.15010071 110.46780396]
[237.07398987 126.13513184]
[224.47685242 135.67912292]
[208.83235168 133.43748474]
[199.42207336 120.74015045]
[184.55206299 118.76969910]
[169.68205261 116.79924774]
[154.81202698 114.82879639]
[139.94201660 112.85834503]
[125.07200623 110.88789368]
[122.07893372 116.11434937]
[118.01393127 120.55845642]
[113.07434845 124.00444031]
[107.50000000 126.28501129]
[107.50000000 141.28500366]
[107.50000000 156.28500366]
[107.50000000 171.28500366]
[107.50000000 186.28500366]
[107.50000000 201.28500366]
[107.50000000 216.28500366]
[107.50000000 231.28500366]
[107.50000000 246.28500366]
[107.50000000 261.28500366]
[107.50000000 276.28500366]
[122.16526031 279.75299072]
[135.63517761 286.51007080]
[147.18333435 296.19183350]
[156.18695068 308.27618408]
[162.16047668 322.11141968]
[164.78176880 336.95141602]
[163.90945435 351.99588013]
[159.59059143 366.43347168]
[152.05809021 379.48559570]
[141.71813965 390.44836426]
[129.12840271 398.73059082]
[114.96779633 403.88558960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[27 109]
[28 108]
[29 107]
[30 106]
[42 94]
[43 93]
[44 92]
[46 91]
[47 90]
[48 89]
[51 87]
[52 86]
[53 85]
[55 83]
[56 72]
[57 71]
[59 70]
[60 69]
[61 68]
[62 67]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
