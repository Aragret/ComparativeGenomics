%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCUCCUGGGGGGGGGGACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGxxxxxxxxxxACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACCCCCCCCCCCUAACCUCCU\
) } def
/len { sequence length } bind def

/coor [
[94.40985107 387.80871582]
[80.56391144 381.79269409]
[68.85525513 372.26327515]
[60.15272903 359.92761230]
[55.10212708 345.70108032]
[54.07823563 330.63940430]
[57.15703201 315.86022949]
[64.11005402 302.46029663]
[74.42134094 291.43399048]
[87.32572174 283.59945679]
[101.86560822 279.53814697]
[101.86560822 264.53814697]
[101.86560822 249.53816223]
[101.86560822 234.53816223]
[101.86560822 219.53816223]
[101.86560822 204.53816223]
[101.86560822 189.53816223]
[101.86560822 174.53816223]
[101.86560822 159.53816223]
[101.86560822 144.53816223]
[88.55561066 145.12547302]
[75.10617065 141.65994263]
[62.76778030 134.12919617]
[52.77926254 122.90948486]
[46.24682617 108.75541687]
[44.02888870 92.75219727]
[46.63819122 76.23313141]
[31.65847588 75.45328522]
[16.67876053 74.67344666]
[1.69904709 73.89360046]
[-13.28066730 73.11375427]
[-28.26038170 72.33390808]
[-35.13182449 85.92446136]
[-46.94107819 95.54014587]
[-61.64211655 99.51499176]
[-76.68789673 97.16032410]
[-89.47164154 88.88411713]
[-97.77849579 76.12025452]
[-100.16924286 61.08016968]
[-96.22967529 46.36964035]
[-86.64234161 34.53735733]
[-73.06831360 27.63333130]
[-57.85936737 26.85372925]
[-43.65054321 32.33362198]
[-32.90361023 43.12358856]
[-27.48053741 57.35419464]
[-12.50082207 58.13403702]
[2.47889209 58.91388321]
[17.45860672 59.69372940]
[32.43832016 60.47357559]
[47.41803360 61.25341797]
[53.90620041 47.72922897]
[43.92347336 36.53346252]
[33.94074631 25.33769798]
[23.95802116 14.14193153]
[13.97529411 2.94616604]
[-1.07878077 -4.85198498]
[2.24723268 -21.47648430]
[19.14277267 -22.88257217]
[25.17106056 -7.03656054]
[35.15378571 4.15920544]
[45.13651276 15.35497093]
[55.11923981 26.55073738]
[65.10196686 37.74650192]
[72.13772583 35.14879608]
[66.94254303 21.07719040]
[81.01423645 15.88224125]
[86.20924377 29.95337868]
[93.24500275 27.35567093]
[93.55706024 12.35891819]
[80.12492371 5.02160454]
[71.65082550 -7.72391558]
[70.08206177 -22.94881439]
[75.77911377 -37.15452194]
[87.43284607 -47.07667160]
[102.36531830 -50.43522644]
[117.14515686 -46.45841217]
[128.37605286 -36.06007385]
[133.47724915 -21.62967300]
[131.27650452 -6.48320961]
[122.27954865 5.89876842]
[108.55381775 12.67097473]
[108.24176025 27.66772842]
[121.01911926 35.52515411]
[134.26170349 28.48001862]
[138.97355652 13.63292408]
[152.50378418 6.67680120]
[166.62918091 11.26032829]
[179.87176514 4.21519375]
[193.11434937 -2.82994127]
[206.35693359 -9.87507629]
[203.29322815 -24.66664124]
[204.52226257 -39.72207642]
[209.94441223 -53.82090759]
[219.12011719 -65.82020569]
[231.30554199 -74.74723816]
[245.51287842 -79.87833405]
[260.59042358 -80.79753113]
[275.31585693 -77.43032837]
[288.49548340 -70.04967499]
[299.06088257 -59.25389862]
[306.15557861 -45.91815567]
[309.20443726 -31.12351990]
[307.96026611 -16.06932640]
[302.52395630 -1.97595060]
[293.33621216 10.01412201]
[281.14181519 18.92890930]
[266.92932129 24.04572868]
[251.85089111 24.94978333]
[237.12882996 21.56778336]
[223.95661926 14.17389679]
[213.40206909 3.36750937]
[200.15948486 10.41264439]
[186.91690063 17.45777893]
[173.67431641 24.50291443]
[169.58200073 38.77836990]
[156.25250244 46.11178207]
[141.30683899 41.72260284]
[128.06425476 48.76773834]
[146.62919617 73.15902710]
[149.17448425 101.23189545]
[137.47183228 124.14518738]
[150.40988159 131.73509216]
[163.34793091 139.32501221]
[180.06918335 142.12431335]
[182.00817871 158.96702576]
[166.36045837 165.49275208]
[155.75802612 152.26306152]
[142.81997681 144.67315674]
[129.88191223 137.08325195]
[116.86560822 144.53816223]
[116.86560822 159.53816223]
[116.86560822 174.53816223]
[116.86560822 189.53816223]
[116.86560822 204.53816223]
[116.86560822 219.53816223]
[116.86560822 234.53816223]
[116.86560822 249.53816223]
[116.86560822 264.53814697]
[116.86560822 279.53814697]
[131.40548706 283.59945679]
[144.30987549 291.43399048]
[154.62115479 302.46029663]
[161.57418823 315.86022949]
[164.65298462 330.63940430]
[163.62908936 345.70108032]
[158.57849121 359.92761230]
[149.87596130 372.26327515]
[138.16729736 381.79269409]
[124.32136536 387.80871582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[69 83]
[70 82]
[84 119]
[85 118]
[88 115]
[89 114]
[90 113]
[91 112]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
