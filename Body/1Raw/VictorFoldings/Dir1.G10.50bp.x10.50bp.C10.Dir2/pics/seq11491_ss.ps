%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCGCCUUGGGGGGGGGGUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCxxxxxxxxxxCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCCCCCCCCCCCAACAGCCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.46386719]
[71.19830322 351.44784546]
[59.48964310 341.91842651]
[50.78712082 329.58276367]
[45.73651886 315.35623169]
[44.71262741 300.29455566]
[47.79142761 285.51538086]
[54.74444962 272.11547852]
[65.05573273 261.08914185]
[77.96011353 253.25462341]
[92.50000000 249.19331360]
[92.50000000 234.19331360]
[92.50000000 219.19331360]
[92.50000000 204.19331360]
[92.50000000 189.19331360]
[92.50000000 174.19331360]
[92.50000000 159.19331360]
[92.50000000 144.19331360]
[92.50000000 129.19331360]
[92.50000000 114.19331360]
[87.45124054 100.06851196]
[77.94288635 88.46717072]
[68.43452454 76.86582947]
[58.92616653 65.26448822]
[46.31504059 57.14294434]
[31.81944275 53.28578568]
[17.32384682 49.42862320]
[12.16108799 50.83059311]
[7.46287155 50.13839340]
[3.96113491 47.89350510]
[2.05900717 44.85222244]
[-12.16777229 40.09840775]
[-26.39455032 35.34459305]
[-34.75820541 47.10337448]
[-46.08980942 56.01147842]
[-59.46115875 61.35068130]
[-73.78019714 62.69461823]
[-87.88021088 59.94283676]
[-100.61487579 53.32823181]
[-110.95146179 43.39736938]
[-118.05460358 30.96532822]
[-121.35375977 17.04881668]
[-120.58908081 2.78301644]
[-134.71388245 -2.26573968]
[-151.66395569 -1.90337741]
[-156.70440674 -18.09072495]
[-142.54499817 -27.41529465]
[-129.66513062 -16.39054298]
[-115.54032898 -11.34178638]
[-106.12207031 -23.81960869]
[-93.29883575 -32.79573441]
[-78.31386566 -37.38530731]
[-62.62450027 -37.12947464]
[-47.76044464 -32.04121017]
[-35.17462921 -22.60523987]
[-26.10118294 -9.73188591]
[-21.43442726 5.33075714]
[-21.64073563 21.11781311]
[-7.41395712 25.87162781]
[6.81282234 30.62544441]
[21.18100548 34.93302917]
[35.67660141 38.79018784]
[50.17219925 42.64734650]
[39.98625183 31.63615036]
[32.09671021 18.87859917]
[26.79542732 4.84662056]
[24.27850914 -9.94070911]
[24.63906288 -24.93637466]
[27.86374855 -39.58565521]
[33.83328247 -53.34663773]
[42.32683182 -65.71028137]
[53.03020859 -76.21921539]
[65.54746246 -84.48470306]
[79.41556549 -90.20098114]
[94.12149048 -93.15658569]
[109.12124634 -93.24219513]
[123.85995483 -90.45463562]
[137.79240417 -84.89701843]
[150.40318298 -76.77494812]
[161.22581482 -66.38886261]
[169.85992432 -54.12297440]
[175.98614502 -40.43102646]
[179.37782288 -25.81950569]
[179.90951538 -10.82893276]
[177.56155396 3.98616242]
[172.42077637 18.07773590]
[164.67736816 30.92450905]
[154.61776733 42.05125046]
[142.61408997 51.04636002]
[129.11041260 57.57708740]
[114.60623169 61.40184784]
[99.63809967 62.37915421]
[84.75972748 60.47285461]
[70.52751160 55.75612640]
[80.03586578 67.35746765]
[89.54422760 78.95880890]
[99.05258179 90.56015015]
[106.70235443 83.10671997]
[120.27625275 82.38175964]
[135.13929749 80.35942078]
[140.67823792 76.56105804]
[146.43339539 76.23007202]
[150.66122437 78.57546997]
[165.59553528 77.17317200]
[180.52984619 75.77086639]
[195.46415710 74.36856079]
[202.46350098 60.62037659]
[215.79608154 52.85853958]
[231.20748901 53.55982590]
[243.78002930 62.50046158]
[249.50183105 76.82751465]
[246.54708862 91.96928406]
[235.85865784 103.09407806]
[220.84718323 106.65201569]
[206.30274963 101.50778198]
[196.86645508 89.30287170]
[181.93214417 90.70517731]
[166.99784851 92.10747528]
[152.06353760 93.50978088]
[137.16163635 95.22247314]
[122.29858398 97.24480438]
[136.31169128 102.59576416]
[151.10942078 105.05082703]
[161.86434937 115.50699615]
[164.73521423 130.22970581]
[158.69664001 143.96052551]
[145.90539551 151.79531860]
[130.93003845 150.93577576]
[119.11923981 141.68888855]
[114.69138336 127.35704803]
[107.50000000 114.19331360]
[107.50000000 129.19331360]
[107.50000000 144.19331360]
[107.50000000 159.19331360]
[107.50000000 174.19331360]
[107.50000000 189.19331360]
[107.50000000 204.19331360]
[107.50000000 219.19331360]
[107.50000000 234.19331360]
[107.50000000 249.19331360]
[122.03988647 253.25462341]
[134.94427490 261.08914185]
[145.25555420 272.11547852]
[152.20857239 285.51538086]
[155.28736877 300.29455566]
[154.26348877 315.35623169]
[149.21287537 329.58276367]
[140.51036072 341.91842651]
[128.80169678 351.44784546]
[114.95575714 357.46386719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 97]
[22 96]
[23 95]
[24 94]
[25 63]
[26 62]
[27 61]
[31 60]
[32 59]
[33 58]
[43 49]
[44 48]
[99 121]
[100 120]
[103 119]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
