%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUCUUUUGGGGGGGGGGCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGACAxxxxxxxxxxCCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCCCCCCCCCCCUCUUUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[60.12106323 373.23263550]
[46.90086365 365.96017456]
[36.01406097 355.51318359]
[28.20293045 342.60391235]
[24.00004959 328.11260986]
[23.69197655 313.02728271]
[27.29971886 298.37643433]
[34.57728958 285.15905762]
[45.02849960 274.27630615]
[57.94076157 266.47015381]
[72.43370056 262.27285767]
[72.12164307 247.27610779]
[71.80958557 232.27935791]
[71.49752808 217.28259277]
[71.18547058 202.28584290]
[70.87341309 187.28909302]
[70.56136322 172.29234314]
[70.24930573 157.29557800]
[69.93724823 142.29882812]
[69.62519073 127.30207825]
[56.68713379 119.71216583]
[43.44454956 126.75730133]
[30.20196342 133.80244446]
[16.95937920 140.84757996]
[5.81579256 153.62477112]
[-9.54692078 146.45376587]
[-6.90897942 129.70629883]
[9.91424370 127.60498810]
[23.15682983 120.55985260]
[36.39941406 113.51471710]
[49.64200211 106.46958160]
[55.98912811 92.87863159]
[52.89080811 78.20211029]
[49.79248810 63.52558136]
[46.69416428 48.84905624]
[32.68408203 42.44407654]
[25.21909904 29.17277718]
[26.97931862 14.22735500]
[37.08156204 3.31485367]
[33.98324203 -11.36167145]
[30.88491821 -26.03819656]
[20.49439621 -33.75123215]
[18.24325752 -46.08619690]
[24.80593681 -56.29592514]
[22.01361275 -71.03372955]
[19.22128868 -85.77153778]
[4.23284769 -84.80910492]
[-10.76025677 -85.69591522]
[-25.53073311 -88.41852570]
[-39.85466766 -92.93566132]
[-53.51490784 -99.17885590]
[-66.30437469 -107.05344391]
[-78.02917480 -116.44006348]
[-88.51157379 -127.19641113]
[-97.59265137 -139.15942383]
[-105.13475037 -152.14773560]
[-111.02352142 -165.96446228]
[-115.16970062 -180.40014648]
[-117.51043701 -195.23593140]
[-118.01023865 -210.24691772]
[-116.66152954 -225.20555115]
[-113.48475647 -239.88505554]
[-108.52808380 -254.06288147]
[-101.86663818 -267.52410889]
[-93.60142517 -280.06469727]
[-83.85772705 -291.49447632]
[-72.78327179 -301.64019775]
[-60.54592896 -310.34808350]
[-47.33122253 -317.48608398]
[-33.33948135 -322.94601440]
[-18.78281784 -326.64511108]
[-3.88190866 -328.52725220]
[11.13735485 -328.56393433]
[26.04728317 -326.75460815]
[40.62184525 -323.12670898]
[54.64009476 -317.73519897]
[67.88951874 -310.66186523]
[80.16926575 -302.01388550]
[91.29316711 -291.92236328]
[101.09259033 -280.54031372]
[109.41897583 -268.04028320]
[116.14611053 -254.61177063]
[121.17200470 -240.45832825]
[124.42046356 -225.79452515]
[125.84223938 -210.84265137]
[125.41578674 -195.82940674]
[123.14757538 -180.98236084]
[119.07197571 -166.52659607]
[113.25077820 -152.68125916]
[105.77223206 -139.65625000]
[96.74971771 -127.64900208]
[86.31999969 -116.84156799]
[74.64119720 -107.39777374]
[61.89036179 -99.46079254]
[48.26078415 -93.15093231]
[33.95909500 -88.56385803]
[36.75141907 -73.82605743]
[39.54374313 -59.08824921]
[51.69683838 -46.46674728]
[45.56144333 -29.13651848]
[48.65976715 -14.45999336]
[51.75808716 0.21653201]
[65.40914917 6.11453676]
[73.06012726 19.07318687]
[71.59639740 34.22940063]
[61.37068939 45.75073242]
[64.46900940 60.42726135]
[67.56733704 75.10378265]
[70.66565704 89.78031158]
[90.79550934 72.84978485]
[114.43834686 78.05052948]
[123.80013275 98.08572388]
[138.37283325 101.64048767]
[153.61351013 97.39401245]
[164.14460754 107.92707062]
[178.71730042 111.48182678]
[193.29000854 115.03659058]
[210.11082458 112.91611481]
[216.80490112 128.49255371]
[203.69029236 139.23701477]
[189.73524475 129.60929871]
[175.16255188 126.05453491]
[160.58984375 122.49977112]
[146.39151001 127.00050354]
[134.81806946 116.21318817]
[120.24536896 112.65842438]
[115.11592865 120.75196838]
[106.71802521 126.63615417]
[96.04889679 128.99899292]
[84.62194824 126.99002075]
[84.93399811 141.98677063]
[85.24605560 156.98353577]
[85.55811310 171.98028564]
[85.87017059 186.97703552]
[86.18222809 201.97378540]
[86.49428558 216.97055054]
[86.80633545 231.96730042]
[87.11839294 246.96405029]
[87.43045044 261.96081543]
[102.08544159 265.55157471]
[115.31124878 272.81384277]
[126.20612335 283.25241089]
[134.02722168 296.15563965]
[138.24128723 310.64370728]
[138.56100464 325.72879028]
[134.96458435 340.38241577]
[127.69721985 353.60540771]
[117.25441742 364.49624634]
[104.34819031 372.31234741]
[89.85849762 376.52084351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 31]
[22 30]
[23 29]
[24 28]
[32 109]
[33 108]
[34 107]
[35 106]
[39 102]
[40 101]
[41 100]
[44 98]
[45 97]
[46 96]
[112 126]
[113 125]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
