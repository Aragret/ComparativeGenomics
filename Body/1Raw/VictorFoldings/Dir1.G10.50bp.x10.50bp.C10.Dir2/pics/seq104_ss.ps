%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCCCCCCCCCCCAUCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[88.82606506 450.82870483]
[74.98012543 444.81268311]
[63.27146530 435.28326416]
[54.56893921 422.94760132]
[49.51833725 408.72106934]
[48.49444580 393.65939331]
[51.57324600 378.88024902]
[58.52626801 365.48031616]
[68.83755493 354.45397949]
[81.74193573 346.61947632]
[96.28182220 342.55816650]
[96.28182220 327.55816650]
[96.28182220 312.55816650]
[96.28182220 297.55816650]
[96.28182220 282.55816650]
[96.28182220 267.55816650]
[96.28182220 252.55815125]
[96.28182220 237.55815125]
[96.28182220 222.55815125]
[96.28182220 207.55815125]
[96.12578583 192.55897522]
[95.81372833 177.56221008]
[95.50167084 162.56546021]
[86.97164917 153.93145752]
[86.62639618 141.39752197]
[95.19968414 131.70460510]
[95.19968414 116.70459747]
[85.45202637 105.30358124]
[70.63426971 102.97247314]
[55.81651306 100.64137268]
[40.99875641 98.31027222]
[34.55480576 111.97234344]
[24.52180099 123.26461792]
[11.71306992 131.27168274]
[-2.83304048 135.34443665]
[-17.93734169 135.15272522]
[-32.37539673 130.71209717]
[-44.97677612 122.38250732]
[-54.71994400 110.83922577]
[-60.81506348 97.01800537]
[-62.76803207 82.03926849]
[-60.42052841 67.11727142]
[-53.96285629 53.46168137]
[-43.91851425 42.17948914]
[-31.10174370 34.18529892]
[-16.55154991 30.12715530]
[-1.44744861 30.33403969]
[12.98613739 34.78917694]
[25.57914352 43.13141251]
[35.31070709 54.68447876]
[41.39194107 68.51181793]
[43.32986069 83.49250793]
[58.14761734 85.82361603]
[72.96537781 88.15471649]
[87.78313446 90.48582458]
[100.87628937 83.16671753]
[106.65255737 69.32350159]
[112.42883301 55.48028183]
[118.20510864 41.63706207]
[105.95771027 50.29738998]
[92.24089813 56.36773682]
[77.59524536 59.60886383]
[62.59793854 59.89304733]
[47.84001541 57.20908356]
[33.90307999 51.66275024]
[21.33638382 43.47262192]
[10.63517952 32.96147537]
[2.22119808 20.54354668]
[-3.57396746 6.70822811]
[-6.52193117 -7.99923658]
[-6.50651407 -22.99922943]
[-3.52832460 -37.70060349]
[2.29526806 -51.52397919]
[10.73475742 -63.92458725]
[21.45754433 -74.41371155]
[34.04104996 -82.57799530]
[47.98935699 -88.09566498]
[62.75276566 -90.74929047]
[77.74945831 -90.43428040]
[92.38841248 -87.16304779]
[106.09272003 -81.06452179]
[118.32228851 -72.37903595]
[128.59515381 -61.44889069]
[136.50646973 -48.70483017]
[141.74446106 -34.64910126]
[144.10267639 -19.83563232]
[143.48820496 -4.84822464]
[139.92523193 9.72247601]
[133.55531311 23.30040359]
[146.16642761 15.17886257]
[158.77755737 7.05732012]
[171.38868713 -1.06422222]
[183.99981689 -9.18576431]
[182.07083130 -24.32649612]
[186.91033936 -38.80205917]
[197.55746460 -49.73831940]
[211.89817810 -54.96387100]
[227.08515930 -53.44118118]
[240.10299683 -45.47257996]
[248.36700439 -32.64023972]
[250.23634338 -17.49202728]
[245.33985901 -3.03563404]
[234.64976501 7.85861206]
[220.28857422 13.02765179]
[205.10772705 11.44516754]
[192.12136841 3.42536378]
[179.51023865 11.54690552]
[166.89910889 19.66844749]
[154.28797913 27.78998947]
[141.67684937 35.91153336]
[132.04832458 47.41333771]
[126.27204895 61.25655365]
[120.49578094 75.09976959]
[114.71950531 88.94298553]
[126.78158569 80.02635956]
[141.69064331 78.37709808]
[155.40997314 84.44174957]
[164.22499084 96.57828522]
[165.74899292 111.50066376]
[159.56933594 125.16857910]
[147.35920715 133.88136292]
[132.42454529 135.27999878]
[118.80901337 128.98577881]
[110.19968414 116.70459747]
[110.19968414 131.70460510]
[119.78240967 147.39381409]
[110.49842834 162.25340271]
[110.81047821 177.25016785]
[111.12253571 192.24691772]
[114.44739532 200.82579041]
[111.28182220 207.55815125]
[111.28182220 222.55815125]
[111.28182220 237.55815125]
[111.28182220 252.55815125]
[111.28182220 267.55816650]
[111.28182220 282.55816650]
[111.28182220 297.55816650]
[111.28182220 312.55816650]
[111.28182220 327.55816650]
[111.28182220 342.55816650]
[125.82170868 346.61947632]
[138.72608948 354.45397949]
[149.03736877 365.48031616]
[155.99038696 378.88024902]
[159.06919861 393.65939331]
[158.04530334 408.72106934]
[152.99470520 422.94760132]
[144.29217529 435.28326416]
[132.58351135 444.81268311]
[118.73757172 450.82870483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
[26 125]
[27 124]
[28 55]
[29 54]
[30 53]
[31 52]
[56 114]
[57 113]
[58 112]
[59 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
