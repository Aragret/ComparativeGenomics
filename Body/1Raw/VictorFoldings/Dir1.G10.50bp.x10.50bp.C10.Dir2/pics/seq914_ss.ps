%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUAAACAAGGGGGGGGGGAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCxxxxxxxxxxGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCCCCCCCCCCCGCAUAAACAA\
) } def
/len { sequence length } bind def

/coor [
[77.95705414 603.59075928]
[64.74897003 596.35467529]
[53.40552902 586.44812012]
[44.45727539 574.33435059]
[38.32273865 560.58001709]
[35.28883743 545.82843018]
[35.49747849 530.76953125]
[38.93890381 516.10766602]
[45.45214844 502.52856445]
[54.73257446 490.66738892]
[66.34612274 481.07885742]
[79.74960327 474.21151733]
[94.31611633 470.38647461]
[93.70823669 455.39880371]
[93.10034943 440.41113281]
[92.49246979 425.42346191]
[91.88458252 410.43576050]
[91.27670288 395.44808960]
[90.66881561 380.46041870]
[90.06093597 365.47274780]
[89.45304871 350.48507690]
[88.84516907 335.49737549]
[88.23728180 320.50970459]
[75.83962250 312.06588745]
[61.67065048 316.98931885]
[47.50167465 321.91275024]
[33.33269882 326.83618164]
[26.67101097 341.16787720]
[11.79798508 346.51281738]
[-2.46247745 339.69998169]
[-7.64989614 324.77130127]
[-0.68666792 310.58364868]
[14.29604721 305.55435181]
[28.40927124 312.66720581]
[42.57824707 307.74377441]
[56.74721909 302.82034302]
[70.91619873 297.89691162]
[80.68678284 286.51553345]
[83.40785980 271.76440430]
[86.12893677 257.01327515]
[74.84280396 247.98078918]
[69.78778076 233.77673340]
[73.08776093 218.42939758]
[84.39293671 206.65989685]
[100.79802704 202.43196106]
[99.58325958 187.48121643]
[98.36849213 172.53048706]
[97.15372467 157.57975769]
[95.93895721 142.62902832]
[94.72418976 127.67829895]
[65.20767975 116.76369476]
[56.58165359 77.15007782]
[45.50254822 67.03804016]
[34.42343903 56.92599869]
[23.34433174 46.81395721]
[7.56937933 40.60209656]
[9.17153645 23.72402191]
[25.83353233 20.59125137]
[33.45637131 35.73485184]
[44.53548050 45.84689331]
[55.61458969 55.95893097]
[66.69369507 66.07097626]
[73.58587646 63.11330414]
[67.67053986 49.32893753]
[57.78513718 38.04714966]
[65.46001434 25.15931702]
[80.08873749 28.47602844]
[81.45491028 43.41360092]
[87.37024689 57.19796753]
[94.26242828 54.24029922]
[94.56643677 39.24337769]
[94.87043762 24.24645996]
[81.43435669 16.91635895]
[72.95342255 4.17539072]
[71.37648010 -11.04866409]
[77.06591034 -25.25742912]
[88.71431732 -35.18583298]
[103.64498138 -38.55240250]
[118.42694855 -34.58352661]
[129.66343689 -24.19121933]
[134.77236938 -9.76355839]
[132.57975769 5.38408327]
[123.58945465 17.77088928]
[109.86735535 24.55046463]
[109.56335449 39.54738235]
[109.25934601 54.54430389]
[123.61621094 58.88948059]
[131.67926025 46.24087906]
[139.74232483 33.59227371]
[139.92129517 17.19410515]
[154.34280396 9.38690472]
[168.17121887 18.20205307]
[167.18106079 34.57128143]
[152.39091492 41.65533066]
[144.32786560 54.30393219]
[136.26481628 66.95253754]
[142.20881653 84.72870636]
[140.66833496 101.81952667]
[133.10511780 115.44686890]
[121.87232971 123.84090424]
[109.67491913 126.46353149]
[110.88968658 141.41426086]
[112.10445404 156.36499023]
[113.31922150 171.31571960]
[114.53398895 186.26644897]
[115.74875641 201.21717834]
[127.22856140 210.87193298]
[142.16621399 209.50572205]
[157.10386658 208.13949585]
[172.04151917 206.77328491]
[186.97917175 205.40705872]
[198.30673218 194.04634094]
[214.23495483 195.96243286]
[222.54505920 209.68547058]
[216.86225891 224.68830872]
[201.54589844 229.46206665]
[188.34538269 220.34471130]
[173.40773010 221.71093750]
[158.47007751 223.07714844]
[143.53242493 224.44337463]
[128.59477234 225.80958557]
[126.31005859 243.12115479]
[115.60814667 255.53259277]
[100.88006592 259.73437500]
[98.15898895 274.48550415]
[95.43791199 289.23663330]
[101.94327545 294.65417480]
[105.85668945 302.41485596]
[106.37184906 311.31729126]
[103.22496033 319.90182495]
[103.83283997 334.88949585]
[104.44072723 349.87716675]
[105.04860687 364.86486816]
[105.65649414 379.85253906]
[106.26437378 394.84020996]
[106.87226105 409.82788086]
[107.48014832 424.81558228]
[108.08802795 439.80325317]
[108.69591522 454.79092407]
[109.30379486 469.77859497]
[124.13223267 472.41140747]
[138.04783630 478.17071533]
[150.39976501 486.78723145]
[160.61027527 497.85787964]
[168.20182800 510.86489868]
[172.81933594 525.19989014]
[174.24682617 540.19244385]
[172.41754150 555.14129639]
[167.41703796 569.34722900]
[159.47921753 582.14587402]
[148.97531128 592.93853760]
[136.39662170 601.22052002]
[122.33148193 606.60437012]
[107.43773651 608.83831787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 37]
[25 36]
[26 35]
[27 34]
[38 126]
[39 125]
[40 124]
[45 106]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[52 62]
[53 61]
[54 60]
[55 59]
[70 86]
[71 85]
[72 84]
[87 96]
[88 95]
[89 94]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
