%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACCCCCACGGGGGGGGGGGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAxxxxxxxxxxCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCCCCCCCCCCCUCACCCCCACUG\
) } def
/len { sequence length } bind def

/coor [
[81.26887512 654.26153564]
[66.90662384 649.75482178]
[53.74573898 642.44891357]
[42.32513809 632.64306641]
[33.11249924 620.73876953]
[26.48507309 607.22351074]
[22.71424294 592.65075684]
[21.95442581 577.61718750]
[24.23673630 562.73846436]
[29.46771240 548.62390137]
[37.43315125 535.85137939]
[47.80687332 524.94403076]
[60.16408157 516.34844971]
[73.99874878 510.41659546]
[88.74436951 507.39138794]
[88.74436951 492.39138794]
[88.74436951 477.39138794]
[88.74436951 462.39138794]
[88.74436951 447.39138794]
[88.74436951 432.39138794]
[88.74436951 417.39138794]
[88.74436951 402.39138794]
[88.74436951 387.39138794]
[88.74436951 372.39138794]
[81.00706482 359.66412354]
[88.74436951 345.86395264]
[88.74436951 330.86395264]
[88.74436951 315.86395264]
[76.36208344 304.51885986]
[75.98302460 287.39218140]
[88.32741547 275.03320312]
[88.03105927 260.03613281]
[87.43846130 245.04782104]
[86.54985046 230.07417297]
[85.66123962 215.10050964]
[84.77263641 200.12686157]
[83.88402557 185.15319824]
[74.88884735 197.15681458]
[60.88173294 202.52345276]
[46.16872025 199.60330200]
[35.27285385 189.29408264]
[31.54371452 174.76502991]
[36.12771225 160.48262024]
[47.61563873 150.83753967]
[62.47590256 148.79486084]
[76.14019012 154.98252869]
[84.40746307 167.49708557]
[86.18156433 152.60237122]
[87.95565796 137.70765686]
[89.72975922 122.81293488]
[72.35192108 107.04380035]
[74.46797180 80.63625336]
[63.40047455 70.51151276]
[52.33297729 60.38676453]
[41.26547623 50.26202011]
[30.19797707 40.13727570]
[14.07668018 37.13131332]
[8.87517166 21.57893944]
[19.94431686 9.47910213]
[35.89712906 13.27907753]
[40.32272339 29.06977654]
[51.39022064 39.19452286]
[62.45772171 49.31926727]
[73.52522278 59.44401169]
[84.59272003 69.56875610]
[99.13754272 65.90159607]
[104.08174133 51.73985672]
[109.02593231 37.57811356]
[113.54829407 23.27607727]
[117.64485168 8.84630871]
[113.97057343 -6.54233074]
[124.88960266 -16.67268181]
[128.98616028 -31.10244942]
[133.08273315 -45.53221893]
[119.98307800 -52.99296188]
[109.05004120 -63.37236786]
[100.91924286 -76.06699371]
[96.06340027 -90.33879852]
[94.76483154 -105.35802460]
[97.09902191 -120.25147247]
[102.93026733 -134.15327454]
[111.91955566 -146.25518799]
[123.54425049 -155.85360718]
[137.12850952 -162.39051819]
[151.88256836 -165.48587036]
[166.94863892 -164.95968628]
[181.45080566 -160.84257507]
[194.54592896 -153.37388611]
[205.47267151 -142.98785400]
[213.59577942 -130.28829956]
[218.44296265 -116.01356506]
[219.73243713 -100.99355316]
[217.38920593 -86.10151672]
[211.54954529 -72.20325470]
[202.55291748 -60.10680008]
[190.92240906 -50.51541901]
[177.33418274 -43.98674393]
[162.57824707 -40.90034485]
[147.51249695 -41.43565750]
[143.41593933 -27.00588989]
[139.31938171 -12.57612133]
[143.28666687 1.78040433]
[132.07461548 12.94286919]
[127.97806549 27.37263680]
[129.40811157 30.65052795]
[129.28898621 34.79351044]
[127.22747803 39.05062103]
[123.18767548 42.52230453]
[118.24348450 56.68404770]
[113.29928589 70.84579468]
[124.62512970 81.76934052]
[128.98054504 96.15984344]
[125.90695190 110.16178894]
[116.84909821 120.35443878]
[104.62447357 124.58703613]
[102.85037231 139.48175049]
[101.07627869 154.37646484]
[99.30217743 169.27117920]
[98.85768127 184.26458740]
[99.74629211 199.23825073]
[100.63489532 214.21191406]
[101.52350616 229.18556213]
[102.41211700 244.15922546]
[105.76982880 249.95437622]
[105.67096710 255.70368958]
[103.02812958 259.73974609]
[103.32449341 274.73684692]
[114.06636047 282.91516113]
[118.06190491 295.60702515]
[114.06100464 308.09268188]
[103.74436951 315.86395264]
[103.74436951 330.86395264]
[103.74436951 345.86395264]
[111.48166656 359.66412354]
[103.74436951 372.39138794]
[103.74436951 387.39138794]
[103.74436951 402.39138794]
[103.74436951 417.39138794]
[103.74436951 432.39138794]
[103.74436951 447.39138794]
[103.74436951 462.39138794]
[103.74436951 477.39138794]
[103.74436951 492.39138794]
[103.74436951 507.39138794]
[118.48998260 510.41659546]
[132.32466125 516.34844971]
[144.68185425 524.94403076]
[155.05558777 535.85137939]
[163.02102661 548.62390137]
[168.25199890 562.73846436]
[170.53430176 577.61718750]
[169.77449036 592.65075684]
[166.00366211 607.22351074]
[159.37623596 620.73876953]
[150.16358948 632.64306641]
[138.74299622 642.44891357]
[125.58210754 649.75482178]
[111.21985626 654.26153564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[26 133]
[27 132]
[28 131]
[31 127]
[32 126]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[47 118]
[48 117]
[49 116]
[50 115]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[66 110]
[67 109]
[68 108]
[69 104]
[70 103]
[72 101]
[73 100]
[74 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
