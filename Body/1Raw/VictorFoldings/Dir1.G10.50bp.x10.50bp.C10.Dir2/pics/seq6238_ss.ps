%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUUUACCGGGGGGGGGGUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAxxxxxxxxxxAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCCCCCCCCCCCUAUUUUACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 458.17169189]
[71.19830322 452.15567017]
[59.48964310 442.62625122]
[50.78712082 430.29058838]
[45.73651886 416.06405640]
[44.71262741 401.00238037]
[47.79142761 386.22320557]
[54.74444962 372.82327271]
[65.05573273 361.79696655]
[77.96011353 353.96243286]
[92.50000000 349.90112305]
[92.50000000 334.90112305]
[92.50000000 319.90112305]
[92.50000000 304.90112305]
[92.50000000 289.90112305]
[92.50000000 274.90112305]
[92.50000000 259.90112305]
[92.50000000 244.90112305]
[92.50000000 229.90112305]
[92.50000000 214.90112305]
[81.81912994 204.58345032]
[81.60544586 189.37132263]
[92.50000000 178.23818970]
[92.50000000 163.23818970]
[92.50000000 148.23818970]
[92.50000000 133.23818970]
[73.24504852 125.13453674]
[61.15461731 106.24857330]
[46.65901947 110.10573578]
[35.43125153 122.05852509]
[19.52994347 118.04847717]
[15.31300163 102.20077515]
[27.11845207 90.81819153]
[42.80186081 95.61013794]
[57.29745865 91.75297546]
[62.63896942 77.73625946]
[54.38668060 65.21030426]
[46.13439178 52.68433762]
[37.88210297 40.15837860]
[24.32834435 46.63984299]
[10.01824474 51.21530151]
[-4.78160572 53.79951859]
[-19.79549599 54.34434891]
[-34.74372864 52.83964157]
[-49.34782410 49.31343079]
[-63.33571625 43.83140564]
[-76.44682312 36.49569702]
[-88.43688965 27.44295883]
[-99.08255005 16.84184265]
[-108.18547821 4.88983870]
[-115.57610321 -8.19039440]
[-121.11672974 -22.15517998]
[-124.70413971 -36.74436188]
[-126.27151489 -51.68614960]
[-125.78964233 -66.70219421]
[-123.26750183 -81.51274872]
[-118.75208282 -95.84191132]
[-112.32750702 -109.42272186]
[-104.11344910 -122.00219727]
[-94.26294708 -133.34597778]
[-82.95949554 -143.24273682]
[-70.41368103 -151.50810242]
[-56.85922623 -157.98809814]
[-42.54862976 -162.56201172]
[-27.74850082 -165.14462280]
[-12.73455048 -165.68782043]
[2.21351790 -164.18150330]
[16.81723022 -160.65371704]
[30.80453110 -155.17018127]
[43.91484451 -147.83303833]
[55.90393066 -138.77900696]
[66.54844666 -128.17674255]
[75.65007782 -116.22374725]
[83.03928375 -103.14271545]
[88.57839966 -89.17733002]
[92.16423798 -74.58776093]
[93.72998810 -59.64580536]
[93.24649048 -44.62981415]
[90.72274780 -29.81953049]
[86.20578003 -15.49086094]
[79.77973175 -1.91074109]
[71.56431580 10.66784096]
[61.71258163 22.01055336]
[50.40806198 31.90608788]
[58.66035461 44.43204880]
[66.91264343 56.95801163]
[75.16493225 69.48397064]
[90.38047791 63.20980072]
[106.26964569 63.83007050]
[119.95466614 70.77030945]
[129.14791870 82.35272980]
[143.37469482 77.59891510]
[157.60147095 72.84510040]
[171.82826233 68.09128571]
[185.89978027 62.89587021]
[199.80233765 57.26391220]
[213.70489502 51.63195801]
[218.13360596 46.58280563]
[223.62855530 44.84011841]
[228.30479431 46.06819534]
[242.42961121 41.01943970]
[256.55441284 35.97068405]
[270.67919922 30.92192841]
[283.55908203 19.89717674]
[297.71847534 29.22174644]
[292.67803955 45.40909195]
[275.72796631 45.04673004]
[261.60314941 50.09548569]
[247.47836304 55.14424515]
[233.35356140 60.19300079]
[219.33683777 65.53451538]
[205.43429565 71.16646576]
[191.53173828 76.79842377]
[189.82301331 79.95243073]
[186.46812439 82.41136932]
[181.82221985 83.39527130]
[176.58207703 82.31806183]
[162.35528564 87.07187653]
[148.12850952 91.82569122]
[133.90173340 96.57950592]
[133.46496582 106.41275024]
[130.23567200 115.71086884]
[124.48332214 123.69797516]
[116.68793488 129.70758057]
[107.50000000 133.23818970]
[107.50000000 148.23818970]
[107.50000000 163.23818970]
[107.50000000 178.23818970]
[118.39455414 189.37132263]
[118.18087006 204.58345032]
[107.50000000 214.90112305]
[107.50000000 229.90112305]
[107.50000000 244.90112305]
[107.50000000 259.90112305]
[107.50000000 274.90112305]
[107.50000000 289.90112305]
[107.50000000 304.90112305]
[107.50000000 319.90112305]
[107.50000000 334.90112305]
[107.50000000 349.90112305]
[122.03988647 353.96243286]
[134.94427490 361.79696655]
[145.25555420 372.82327271]
[152.20857239 386.22320557]
[155.28736877 401.00238037]
[154.26348877 416.06405640]
[149.21287537 430.29058838]
[140.51036072 442.62625122]
[128.80169678 452.15567017]
[114.95575714 458.17169189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 126]
[26 125]
[28 35]
[29 34]
[36 87]
[37 86]
[38 85]
[39 84]
[91 120]
[92 119]
[93 118]
[94 117]
[95 113]
[96 112]
[97 111]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
