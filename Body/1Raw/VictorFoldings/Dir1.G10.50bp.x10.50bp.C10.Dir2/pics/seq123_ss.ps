%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAUUAUUGGGGGGGGGGUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUxxxxxxxxxxCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCCCCCCCCCCCUCCUAUUCUU\
) } def
/len { sequence length } bind def

/coor [
[94.31545258 406.38330078]
[81.75723267 398.03216553]
[71.67100525 386.81970215]
[64.69081879 373.45080566]
[61.25543213 358.76580811]
[61.58080673 343.68783569]
[65.64649200 329.16473389]
[73.19691467 316.10937500]
[83.75743866 305.34249878]
[96.66423798 297.54086304]
[111.10596466 293.19491577]
[110.48198700 278.20788574]
[109.85800934 263.22088623]
[109.23403168 248.23385620]
[108.61005402 233.24684143]
[107.98607635 218.25982666]
[107.36209869 203.27281189]
[106.73812103 188.28579712]
[106.11414337 173.29878235]
[105.49016571 158.31176758]
[104.86618805 143.32473755]
[90.01001740 139.40887451]
[78.44515991 130.94676208]
[71.34681702 119.69950867]
[57.44425964 125.33146667]
[51.51406097 139.98097229]
[36.92961502 146.06945801]
[22.34361649 139.98469543]
[16.40967941 125.33670044]
[22.64830208 110.81584930]
[37.35821915 105.03710938]
[51.81230164 111.42890930]
[65.71485901 105.79695129]
[66.75932312 89.79544830]
[74.87321472 75.96418762]
[88.33091736 67.24472046]
[86.46331024 52.36144257]
[84.59569550 37.47816467]
[82.72808075 22.59488297]
[80.86046600 7.71160364]
[65.42141724 2.67378116]
[53.75575256 -8.54112625]
[48.15410995 -23.66090965]
[49.68582916 -39.65376282]
[57.99525833 -53.33619690]
[71.38264465 -62.00672531]
[69.20581055 -76.84793091]
[67.02896881 -91.68914032]
[64.85213470 -106.53034210]
[62.67529678 -121.37155151]
[57.04333878 -135.27410889]
[48.27713394 -147.44593811]
[39.51092529 -159.61778259]
[30.74471855 -171.78961182]
[21.97851181 -183.96145630]
[13.21230412 -196.13328552]
[4.44609737 -208.30513000]
[-4.32010984 -220.47695923]
[-19.48758507 -226.71232605]
[-21.40287209 -242.99923706]
[-8.09568882 -252.58312988]
[6.74467564 -245.60490417]
[7.85172701 -229.24316406]
[16.61793327 -217.07133484]
[25.38414192 -204.89949036]
[34.15034866 -192.72766113]
[42.91655731 -180.55581665]
[51.68276215 -168.38398743]
[60.44897079 -156.21214294]
[69.21517944 -144.04031372]
[68.02696228 -158.99317932]
[70.52495575 -173.78372192]
[76.55799866 -187.51696777]
[85.76103973 -199.36196899]
[97.57722473 -208.60197449]
[111.29156494 -214.67790222]
[126.07422638 -217.22209167]
[141.03073120 -216.08061218]
[155.25608826 -211.32250977]
[167.88951111 -203.23571777]
[178.16661072 -192.30953979]
[185.46549988 -179.20510864]
[189.34455872 -164.71534729]
[189.56904602 -149.71702576]
[186.12539673 -135.11767578]
[179.22196960 -121.80066681]
[169.27648926 -110.57180023]
[156.89074707 -102.11051941]
[142.81416321 -96.92881012]
[127.89852905 -95.34020233]
[113.04634857 -97.44082642]
[99.15630341 -103.10356903]
[87.06887054 -111.98580170]
[77.51650238 -123.54838562]
[79.69333649 -108.70717621]
[81.87017822 -93.86597443]
[84.04701233 -79.02476501]
[86.22385406 -64.18356323]
[99.68327332 -60.68431091]
[110.82033539 -52.28337860]
[117.92630005 -40.22817993]
[119.89508057 -26.32987595]
[116.39533997 -12.69129276]
[107.92563629 -1.38875675]
[95.74374390 5.84399033]
[97.61135864 20.72727013]
[99.47897339 35.61054993]
[101.34658813 50.49383163]
[103.21420288 65.37711334]
[122.52033234 69.74859619]
[137.70219421 84.78803253]
[143.01316833 107.11204529]
[157.94746399 108.51435089]
[172.62023926 101.19028473]
[186.14834595 110.45970917]
[184.61523438 126.78704071]
[169.59805298 133.37611389]
[156.54516602 123.44866180]
[141.61085510 122.04635620]
[136.17144775 127.20996094]
[148.60523987 135.60047913]
[162.10627747 142.13667297]
[164.41069031 156.95860291]
[153.53135681 167.28527832]
[138.84957886 164.21194458]
[133.02537537 150.39035034]
[125.29261780 137.53717041]
[119.85321045 142.70075989]
[120.47718048 157.68778992]
[121.10115814 172.67480469]
[121.72513580 187.66181946]
[122.34911346 202.64883423]
[122.97309113 217.63584900]
[123.59706879 232.62286377]
[124.22104645 247.60987854]
[124.84502411 262.59689331]
[125.46900177 277.58392334]
[126.09297943 292.57092285]
[140.84597778 295.70138550]
[154.35662842 302.40313721]
[165.77560425 312.25491333]
[174.38511658 324.63745117]
[179.64396667 338.77233887]
[181.22157288 353.77108765]
[179.01876831 368.69079590]
[173.17401123 382.59368896]
[164.05473328 394.60574341]
[152.23416138 403.97189331]
[138.45535278 410.10339355]
[123.58444977 412.61477661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 33]
[25 32]
[36 109]
[37 108]
[38 107]
[39 106]
[40 105]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
