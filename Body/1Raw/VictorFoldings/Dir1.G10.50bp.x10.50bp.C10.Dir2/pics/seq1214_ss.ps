%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCCCUCGGGGGGGGGGCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAxxxxxxxxxxAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCCCCCCCCCCCUCACCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[95.13173676 378.94519043]
[81.91153717 371.67269897]
[71.02473450 361.22570801]
[63.21360779 348.31646729]
[59.01072693 333.82513428]
[58.70265198 318.73980713]
[62.31039429 304.08898926]
[69.58796692 290.87158203]
[80.03917694 279.98883057]
[92.95143890 272.18267822]
[107.44437408 267.98538208]
[107.13231659 252.98863220]
[106.82025909 237.99188232]
[106.50820160 222.99513245]
[106.19615173 207.99836731]
[105.88409424 193.00161743]
[105.57203674 178.00486755]
[105.25997925 163.00811768]
[104.94792175 148.01135254]
[104.63586426 133.01460266]
[91.21997070 131.15740967]
[80.03845215 124.24254608]
[72.83380127 113.72315979]
[70.57428741 101.57825470]
[73.33257294 89.94415283]
[80.32569885 80.73929596]
[72.87078857 67.72298431]
[65.41587830 54.70667648]
[57.96096802 41.69036865]
[44.38829041 33.56060791]
[44.77698517 18.67107391]
[37.32207489 5.65476418]
[29.86716461 -7.36154556]
[22.41225433 -20.37785530]
[14.95734406 -33.39416504]
[7.36743546 -46.33222198]
[-0.35664952 -59.19062424]
[-10.68385410 -70.06945038]
[-23.12329483 -78.45159149]
[-35.56273651 -86.83373260]
[-51.33084106 -88.12889099]
[-57.56184006 -101.65752411]
[-70.00128174 -110.03966522]
[-82.44071960 -118.42180634]
[-94.96668243 -126.67410278]
[-107.57781219 -134.79563904]
[-120.18893433 -142.91719055]
[-132.80006409 -151.03872681]
[-148.19136047 -147.44935608]
[-161.56842041 -155.86540222]
[-164.99485779 -171.29379272]
[-156.43785095 -184.58111572]
[-140.97410583 -187.84425354]
[-127.77798462 -179.14723206]
[-124.67852020 -163.64985657]
[-112.06739807 -155.52830505]
[-99.45626831 -147.40676880]
[-86.84513855 -139.28523254]
[-79.47100067 -138.30151367]
[-74.05857849 -130.86125183]
[-61.61913681 -122.47911072]
[-49.17969513 -114.09696198]
[-34.30134201 -113.40135193]
[-27.18059158 -99.27317810]
[-14.74115181 -90.89102936]
[-2.30171132 -82.50888824]
[-8.59014225 -96.12709808]
[-11.04675198 -110.92456818]
[-9.49604511 -125.84419250]
[-4.04880238 -139.82015991]
[4.90583897 -151.85404968]
[16.72817802 -161.08618164]
[30.57365227 -166.85704041]
[45.45317459 -168.75436401]
[60.30377960 -166.64262390]
[74.06458282 -160.67265320]
[85.75252533 -151.27096558]
[94.53266144 -139.10916138]
[99.77775574 -125.05609131]
[101.11310577 -110.11564636]
[98.44332123 -95.35514832]
[91.95912170 -81.82906342]
[82.12371826 -70.50364685]
[69.63974762 -62.18797684]
[55.39902115 -57.47610092]
[40.41887665 -56.70462418]
[25.76945305 -59.92866135]
[12.50175285 -66.91471100]
[20.22583771 -54.05630493]
[26.40621567 -49.91521835]
[27.97365379 -40.84907532]
[35.42856216 -27.83276558]
[42.88347244 -14.81645584]
[50.33838272 -1.80014634]
[57.79329300 11.21616268]
[70.83274841 18.41491127]
[70.97727203 34.23545837]
[78.43218231 47.25176620]
[85.88709259 60.26807785]
[93.34200287 73.28438568]
[112.51107025 73.31973267]
[128.28253174 86.35218811]
[132.43663025 107.70199585]
[147.33853149 109.41468811]
[159.64277649 99.86255646]
[174.73103333 101.81175232]
[183.76170349 113.60083771]
[198.66360474 115.31352997]
[213.56550598 117.02621460]
[228.46740723 118.73890686]
[243.38632202 120.29648590]
[258.32061768 121.69879150]
[270.33035278 111.42540741]
[286.08013916 112.73645782]
[296.22598267 124.85411835]
[294.74850464 140.58918762]
[282.52423096 150.60633850]
[266.80566406 148.96257019]
[256.91833496 136.63310242]
[241.98400879 135.23078918]
[234.98518372 137.75312805]
[226.75471497 133.64080811]
[211.85281372 131.92811584]
[196.95091248 130.21542358]
[182.04901123 128.50274658]
[170.57926941 137.93569946]
[155.44221497 136.41107178]
[145.62583923 124.31658936]
[130.72393799 122.60389709]
[119.63262177 132.70254517]
[119.94467926 147.69931030]
[120.25673676 162.69606018]
[120.56878662 177.69281006]
[120.88084412 192.68955994]
[121.19290161 207.68632507]
[121.50495911 222.68307495]
[121.81701660 237.67982483]
[122.12907410 252.67657471]
[122.44112396 267.67333984]
[137.09611511 271.26409912]
[150.32192993 278.52636719]
[161.21679688 288.96496582]
[169.03788757 301.86816406]
[173.25196838 316.35623169]
[173.57168579 331.44131470]
[169.97526550 346.09494019]
[162.70790100 359.31793213]
[152.26509094 370.20877075]
[139.35887146 378.02490234]
[124.86917114 382.23336792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 100]
[27 99]
[28 98]
[29 97]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 89]
[37 88]
[38 66]
[39 65]
[40 64]
[42 62]
[43 61]
[44 60]
[45 58]
[46 57]
[47 56]
[48 55]
[103 129]
[104 128]
[107 125]
[108 124]
[109 123]
[110 122]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
