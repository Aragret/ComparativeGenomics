%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAUAAGGGGGGGGGGAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAxxxxxxxxxxCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGACCCCCCCCCCAACCAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[123.85353851 453.04370117]
[110.00760651 447.02767944]
[98.29894257 437.49826050]
[89.59642029 425.16259766]
[84.54581451 410.93606567]
[83.52192688 395.87438965]
[86.60072327 381.09524536]
[93.55374146 367.69531250]
[103.86502838 356.66897583]
[116.76940918 348.83447266]
[131.30929565 344.77316284]
[131.30929565 329.77316284]
[131.30929565 314.77316284]
[131.30929565 299.77316284]
[131.30929565 284.77316284]
[131.30929565 269.77316284]
[131.30929565 254.77316284]
[131.30929565 239.77316284]
[131.30929565 224.77316284]
[131.30929565 209.77316284]
[128.51696777 195.03535461]
[116.66026306 186.02049255]
[118.81317902 170.34645081]
[113.32614899 156.38606262]
[107.83911133 142.42567444]
[102.43022156 137.31788635]
[102.38647461 128.11734009]
[97.19105530 114.04582977]
[86.56269073 104.96125793]
[88.73742676 91.14958954]
[83.54200745 77.07807159]
[77.91004944 63.17551422]
[71.84703827 49.45545959]
[65.78402710 35.73540497]
[49.37992859 29.74851036]
[42.48687363 14.07146072]
[48.90658951 -1.44128156]
[42.55945969 -15.03223228]
[36.21232986 -28.62318420]
[29.86520004 -42.21413422]
[23.51807022 -55.80508423]
[5.51328278 -61.53455353]
[-2.51022482 -78.28927612]
[4.08409548 -95.31609344]
[-2.82290292 -108.63124847]
[-9.72990131 -121.94640350]
[-16.63689995 -135.26156616]
[-25.14799118 -147.61312866]
[-35.13071823 -158.80889893]
[-45.11344147 -170.00466919]
[-59.31549454 -164.65058899]
[-74.49259186 -164.79232788]
[-88.59216309 -170.41075134]
[-99.70735168 -180.74597168]
[-106.33492279 -194.40026855]
[-107.57855225 -209.52699280]
[-103.27005005 -224.08038330]
[-93.99209595 -236.09222412]
[-80.99947357 -243.93798828]
[-66.04931641 -246.55662537]
[-51.16351318 -243.59396362]
[-38.35524750 -235.45069885]
[-29.35673141 -223.22813416]
[-25.38494110 -208.57926941]
[-26.97702980 -193.48522949]
[-33.91767883 -179.98739624]
[-23.93495178 -168.79162598]
[-13.95222473 -157.59585571]
[-15.54529190 -172.51101685]
[-10.62264252 -186.68026733]
[-0.12528844 -197.39500427]
[13.94009781 -202.60699463]
[28.88477707 -201.31993103]
[41.85192871 -193.77984619]
[50.36275101 -181.42808533]
[52.79031754 -166.62582397]
[48.67057800 -152.20266724]
[38.79105377 -140.91572571]
[25.04032135 -134.92260742]
[10.04696465 -135.36898804]
[-3.32174444 -142.16856384]
[3.58525419 -128.85340881]
[10.49225235 -115.53824615]
[17.39925194 -102.22309113]
[28.83785057 -101.19891357]
[38.44422531 -94.68852234]
[43.74250031 -84.22897339]
[43.29919815 -72.39206696]
[37.10902023 -62.15221405]
[43.45615005 -48.56126404]
[49.80327988 -34.97031403]
[56.15040970 -21.37936211]
[62.49753952 -7.78841114]
[75.13957214 -5.10963583]
[84.04856110 4.51866722]
[85.79081726 17.71686745]
[79.50408173 29.67239380]
[85.56709290 43.39244843]
[91.63010406 57.11249924]
[94.83589172 58.72197723]
[97.39831543 61.99851227]
[98.52670288 66.61144257]
[97.61352539 71.88265228]
[102.80894470 85.95417023]
[113.43730927 95.03874207]
[111.26257324 108.85041046]
[116.45799255 122.92192841]
[121.79950714 136.93864441]
[127.28653717 150.89903259]
[132.77357483 164.85942078]
[145.02275085 174.87281799]
[142.47735596 189.54832458]
[145.15174866 174.78865051]
[152.17927551 161.53671265]
[162.89707947 151.04249573]
[176.29420471 144.29585266]
[191.10694885 141.93316650]
[205.93814087 144.17730713]
[219.38879395 150.81657410]
[230.19018555 161.22473145]
[237.32348633 174.42004395]
[240.11582947 189.15783691]
[238.30384827 204.04798889]
[232.05845642 217.68598938]
[221.96873474 228.78543091]
[208.98640442 236.29934692]
[194.33601379 239.51901245]
[179.39947510 238.14071655]
[165.58566284 232.29446411]
[154.19757080 222.53170776]
[146.30929565 209.77316284]
[146.30929565 224.77316284]
[146.30929565 239.77316284]
[146.30929565 254.77316284]
[146.30929565 269.77316284]
[146.30929565 284.77316284]
[146.30929565 299.77316284]
[146.30929565 314.77316284]
[146.30929565 329.77316284]
[146.30929565 344.77316284]
[160.84918213 348.83447266]
[173.75357056 356.66897583]
[184.06484985 367.69531250]
[191.01786804 381.09524536]
[194.09666443 395.87438965]
[193.07278442 410.93606567]
[188.02217102 425.16259766]
[179.31965637 437.49826050]
[167.61099243 447.02767944]
[153.76504517 453.04370117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 112]
[23 110]
[24 109]
[25 108]
[27 107]
[28 106]
[30 104]
[31 103]
[32 99]
[33 98]
[34 97]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[44 84]
[45 83]
[46 82]
[47 81]
[48 68]
[49 67]
[50 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
