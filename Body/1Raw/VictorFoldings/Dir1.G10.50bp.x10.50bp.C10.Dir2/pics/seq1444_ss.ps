%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAACAAAGGGGGGGGGGACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGxxxxxxxxxxCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACCCCCCCCCCCAAUCAACCAA\
) } def
/len { sequence length } bind def

/coor [
[83.55489349 372.87417603]
[70.33470154 365.60168457]
[59.44789505 355.15469360]
[51.63676453 342.24545288]
[47.43388367 327.75411987]
[47.12581253 312.66879272]
[50.73355103 298.01797485]
[58.01112366 284.80056763]
[68.46233368 273.91781616]
[81.37459564 266.11166382]
[95.86753082 261.91436768]
[95.55547333 246.91763306]
[95.24341583 231.92086792]
[94.93136597 216.92411804]
[94.61930847 201.92736816]
[94.30725098 186.93061829]
[93.99519348 171.93385315]
[93.68313599 156.93710327]
[93.37107849 141.94035339]
[93.05902863 126.94359589]
[69.05671692 115.44223022]
[61.80830383 84.17179108]
[46.87399673 85.57409668]
[31.99071693 87.44171143]
[17.17295837 89.77281189]
[2.35520029 92.10391998]
[-12.46255779 94.43502045]
[-27.28031540 96.76612854]
[-35.52311707 106.74160004]
[-47.95843887 108.34840393]
[-57.81316757 101.26380157]
[-72.67621613 103.28613281]
[-85.30483246 113.74797058]
[-100.58312225 107.78929138]
[-102.79409027 91.53987122]
[-89.66328430 81.71572113]
[-74.69854736 88.42308807]
[-59.83549881 86.40074921]
[-46.59923553 74.92028046]
[-29.61141968 81.94837189]
[-14.79366207 79.61726379]
[0.02409646 77.28616333]
[14.84185410 74.95505524]
[29.65961266 72.62395477]
[32.03931808 69.93983459]
[35.86458206 68.30612183]
[40.61255264 68.40186310]
[45.47169113 70.63979340]
[60.40600204 69.23748779]
[65.45475769 55.11268234]
[54.79312897 44.56139374]
[44.13150406 34.01010513]
[28.84063721 36.64999390]
[14.93327808 29.76777267]
[7.75708866 16.00979424]
[10.07146072 0.66628468]
[20.98647308 -10.36286545]
[36.30507660 -12.83672333]
[50.13695908 -5.80403900]
[57.16347885 8.03097630]
[54.68279266 23.34847832]
[65.34442139 33.89976883]
[76.00605011 44.45105743]
[89.90859985 38.81909943]
[90.22065735 23.82234764]
[90.53271484 8.82559395]
[90.68875122 -6.17359447]
[82.95145416 -19.97376633]
[90.68875122 -32.70103836]
[90.68875122 -47.70103836]
[77.34762573 -55.31089401]
[69.61265564 -68.57987213]
[69.56451416 -83.93869019]
[77.21614838 -97.25589752]
[90.50930786 -104.94923401]
[105.86819458 -104.94923401]
[119.16136169 -97.25589752]
[126.81299591 -83.93869019]
[126.76484680 -68.57987213]
[119.02987671 -55.31089401]
[105.68875122 -47.70103836]
[105.68875122 -32.70103836]
[113.42605591 -19.97376633]
[105.68875122 -6.17359447]
[108.85433197 0.55877221]
[105.52947235 9.13765049]
[105.21741486 24.13440323]
[104.90535736 39.13115692]
[116.40715790 48.75968552]
[131.11512756 45.81420135]
[145.82308960 42.86871719]
[160.53105164 39.92323685]
[162.89186096 25.84391212]
[169.91130066 13.44734573]
[180.72477722 4.21888685]
[194.01452637 -0.74378216]
[208.17022705 -0.86117673]
[221.48405457 3.86039472]
[232.35676575 12.83206177]
[239.48977661 24.95575714]
[254.25582886 22.31689262]
[269.02188110 19.67802811]
[272.63095093 4.88294029]
[281.95080566 -7.16113710]
[295.36679077 -14.36749554]
[310.55444336 -15.48758984]
[324.88247681 -10.32735634]
[335.86840820 0.21916242]
[341.60888672 14.32471848]
[341.10934448 29.54544067]
[334.45632935 43.24424362]
[322.80252075 53.04772949]
[308.16699219 57.25738525]
[293.08544922 55.14385986]
[280.17083740 47.07333755]
[271.66073608 34.44408417]
[256.89468384 37.08294678]
[242.12864685 39.72181320]
[238.98606873 55.22371674]
[230.12471008 68.37206268]
[216.87136841 77.14544678]
[201.23072815 80.18151093]
[185.58215332 76.98837280]
[172.31770325 68.02410126]
[163.47653198 54.63119888]
[148.76856995 57.57667923]
[134.06060791 60.52216339]
[119.35264587 63.46764374]
[134.42091370 103.33918762]
[108.05577850 126.63153839]
[108.36783600 141.62829590]
[108.67989349 156.62504578]
[108.99195099 171.62179565]
[109.30400085 186.61856079]
[109.61605835 201.61531067]
[109.92811584 216.61206055]
[110.24017334 231.60881042]
[110.55223083 246.60557556]
[110.86428833 261.60232544]
[125.51927948 265.19308472]
[138.74508667 272.45535278]
[149.63995361 282.89395142]
[157.46104431 295.79714966]
[161.67512512 310.28521729]
[161.99484253 325.37033081]
[158.39842224 340.02392578]
[151.13105774 353.24691772]
[140.68824768 364.13775635]
[127.78202057 371.95388794]
[113.29233551 376.16235352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 49]
[23 48]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[31 38]
[32 37]
[50 63]
[51 62]
[52 61]
[64 88]
[65 87]
[66 86]
[67 84]
[69 82]
[70 81]
[89 128]
[90 127]
[91 126]
[92 125]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
