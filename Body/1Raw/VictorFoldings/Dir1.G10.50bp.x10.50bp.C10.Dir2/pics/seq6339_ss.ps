%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCAUGGGGGGGGGGGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUxxxxxxxxxxUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUCCCCCCCCCCAAAGCCCAUG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.43185425]
[71.19830322 381.41583252]
[59.48964310 371.88641357]
[50.78712082 359.55075073]
[45.73651886 345.32421875]
[44.71262741 330.26254272]
[47.79142761 315.48339844]
[54.74444962 302.08346558]
[65.05573273 291.05712891]
[77.96011353 283.22262573]
[92.50000000 279.16131592]
[92.50000000 264.16131592]
[92.50000000 249.16131592]
[92.50000000 234.16131592]
[92.50000000 219.16131592]
[92.50000000 204.16131592]
[92.50000000 189.16131592]
[92.50000000 174.16131592]
[92.50000000 159.16131592]
[92.50000000 144.16131592]
[83.56479645 141.66960144]
[75.33440399 137.39089966]
[68.16178894 131.50872803]
[62.35453415 124.27530670]
[58.16168976 116.00084686]
[55.76306152 107.04020691]
[40.76387024 106.88417053]
[25.76468277 106.72813416]
[11.88477135 114.32146454]
[-0.76132530 106.45218658]
[-15.76051331 106.29615021]
[-29.64042664 113.88947296]
[-42.28652191 106.02020264]
[-50.67562866 118.96726227]
[-64.74210358 125.30270386]
[-79.99739075 123.00490570]
[-91.57357788 112.80708313]
[-95.77674103 97.96333313]
[-91.26567841 83.21023560]
[-79.47984314 73.25545502]
[-64.18006134 71.27552032]
[-50.24843216 77.90222931]
[-42.13048553 91.02101135]
[-29.32341576 83.41652679]
[-15.60447693 91.29695892]
[-0.60528874 91.45299530]
[12.20178127 83.84851074]
[25.92072105 91.72895050]
[40.91991043 91.88498688]
[55.91909790 92.04102325]
[63.67530823 73.78954315]
[78.55127716 60.67540359]
[97.63127136 55.26902008]
[117.17554474 58.63005829]
[125.16546631 45.93513107]
[133.15538025 33.24020004]
[141.14529419 20.54527092]
[149.13520813 7.85034132]
[157.12512207 -4.84458828]
[153.83493042 -20.06997490]
[162.11869812 -32.83061981]
[176.65405273 -35.87348557]
[184.64396667 -48.56841278]
[192.63388062 -61.26334381]
[200.62379456 -73.95827484]
[201.42631531 -89.75910950]
[214.75393677 -96.40921021]
[222.74385071 -109.10414124]
[209.33111572 -102.38859558]
[194.68478394 -99.15052032]
[179.69110107 -99.58582306]
[165.25730896 -103.66818237]
[152.25677490 -111.15056610]
[141.47615051 -121.58023834]
[133.56774902 -134.32611084]
[129.01008606 -148.61692810]
[128.07896423 -163.58801270]
[130.83071899 -178.33345032]
[137.09883118 -191.96101379]
[146.50402832 -203.64614868]
[158.47723389 -212.68176270]
[172.29394531 -218.52116394]
[187.11813354 -220.81098938]
[202.05281067 -219.41268921]
[216.19430542 -214.41088867]
[228.68693542 -206.10821533]
[238.77478027 -195.00708008]
[245.84744263 -181.77917480]
[249.47695923 -167.22491455]
[249.44372559 -152.22494507]
[245.74974060 -137.68690491]
[238.61967468 -124.49208832]
[251.55773926 -132.08200073]
[264.49578857 -139.67190552]
[277.43383789 -147.26181030]
[290.37191772 -154.85173035]
[303.30996704 -162.44163513]
[316.24801636 -170.03153992]
[323.87402344 -184.54966736]
[340.26867676 -184.93394470]
[348.56655884 -170.78907776]
[340.23150635 -156.66607666]
[323.83792114 -157.09349060]
[310.89987183 -149.50357056]
[297.96182251 -141.91366577]
[285.02374268 -134.32376099]
[272.08569336 -126.73384857]
[259.14764404 -119.14394379]
[246.20959473 -111.55403137]
[235.43878174 -101.11421967]
[227.44886780 -88.41929626]
[227.21783447 -73.52648163]
[213.31872559 -65.96835327]
[205.32881165 -53.27342606]
[197.33889771 -40.57849884]
[189.34898376 -27.88356781]
[192.89268494 -13.46213341]
[184.97061157 -0.47385007]
[169.82005310 3.14532781]
[161.83013916 15.84025764]
[153.84022522 28.53518677]
[145.85031128 41.23011780]
[137.86039734 53.92504501]
[129.87048340 66.61997223]
[138.86517334 77.72961426]
[143.90203857 91.10714722]
[144.46815491 105.39028168]
[140.50585938 119.12450409]
[132.41867065 130.91117859]
[121.03013611 139.55003357]
[107.50000000 144.16131592]
[107.50000000 159.16131592]
[107.50000000 174.16131592]
[107.50000000 189.16131592]
[107.50000000 204.16131592]
[107.50000000 219.16131592]
[107.50000000 234.16131592]
[107.50000000 249.16131592]
[107.50000000 264.16131592]
[107.50000000 279.16131592]
[122.03988647 283.22262573]
[134.94427490 291.05712891]
[145.25555420 302.08346558]
[152.20857239 315.48339844]
[155.28736877 330.26254272]
[154.26348877 345.32421875]
[149.21287537 359.55075073]
[140.51036072 371.88641357]
[128.80169678 381.41583252]
[114.95575714 387.43185425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 50]
[27 49]
[28 48]
[30 46]
[31 45]
[33 43]
[54 124]
[55 123]
[56 122]
[57 121]
[58 120]
[59 119]
[62 116]
[63 115]
[64 114]
[65 113]
[67 111]
[68 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
