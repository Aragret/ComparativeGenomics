%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAAACACGGGGGGGGGGAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGxxxxxxxxxxAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACCCCCCCCCCCGAGAAAACAC\
) } def
/len { sequence length } bind def

/coor [
[68.30147552 338.14431763]
[57.08604431 328.07901001]
[48.49464417 315.69818115]
[42.99060059 301.66955566]
[40.87073898 286.74969482]
[42.24938583 271.74316406]
[47.05218506 257.45925903]
[55.02013016 244.66828918]
[65.72352600 234.06008911]
[78.58513641 226.20671082]
[92.91136932 221.53169250]
[91.66449738 206.58360291]
[90.41761780 191.63551331]
[89.17074585 176.68742371]
[87.92387390 161.73933411]
[86.67699432 146.79124451]
[85.43012238 131.84317017]
[73.44329071 122.82563019]
[58.73532867 125.77111816]
[44.02736664 128.71659851]
[29.31940651 131.66207886]
[14.61144447 134.60755920]
[-0.09651711 137.55303955]
[-14.80447865 140.49853516]
[-20.09571266 144.63499451]
[-25.81901169 145.32431030]
[-30.18491364 143.24719238]
[-45.00267029 145.57829285]
[-59.82043076 147.90939331]
[-65.94860077 162.06739807]
[-78.77106476 170.64573669]
[-94.19621277 170.90710449]
[-107.30194092 162.76809692]
[-113.90625763 148.82583618]
[-111.90174866 133.52926636]
[-101.92803955 121.75943756]
[-87.16771698 117.27207947]
[-72.33074188 121.49908447]
[-62.15153122 133.09164429]
[-47.33377457 130.76052856]
[-32.51601791 128.42942810]
[-17.74996185 125.79056549]
[-3.04199958 122.84508514]
[11.66596222 119.89960480]
[26.37392426 116.95411682]
[41.08188629 114.00863647]
[55.78984833 111.06315613]
[70.49781036 108.11766815]
[79.62923431 81.65935516]
[103.94809723 76.10111237]
[110.85510254 62.78595734]
[117.76210022 49.47080231]
[124.66909790 36.15564728]
[131.57609558 22.84049034]
[138.48309326 9.52533531]
[131.42932129 -0.88431293]
[129.50775146 -13.23777008]
[133.02536011 -25.15922546]
[141.24900818 -34.38261795]
[152.55729675 -39.18235779]
[164.75991821 -38.69597244]
[172.21482849 -51.71228027]
[179.66973877 -64.72859192]
[187.12464905 -77.74490356]
[176.69888306 -86.50724792]
[167.89552307 -96.89411926]
[160.96398926 -108.60954285]
[156.10035706 -121.31991577]
[153.44189453 -134.66352844]
[153.06307983 -148.26084900]
[154.97357178 -161.72529602]
[159.11799622 -174.67430115]
[165.37747192 -186.74006653]
[173.57310486 -197.58010864]
[183.47102356 -206.88696289]
[194.78912354 -214.39682007]
[207.20504761 -219.89715576]
[220.36540222 -223.23257446]
[233.89579773 -224.30935669]
[247.41152954 -223.09796143]
[260.52847290 -219.63394165]
[272.87405396 -214.01681519]
[281.38513184 -226.36839294]
[289.89624023 -238.71997070]
[298.40731812 -251.07153320]
[292.35827637 -265.26351929]
[294.96481323 -280.46911621]
[305.39517212 -291.83621216]
[320.32104492 -295.73767090]
[334.97970581 -290.92849731]
[344.69354248 -278.94332886]
[346.36297607 -263.60656738]
[339.45526123 -249.81210327]
[326.17462158 -241.96173096]
[310.75888062 -242.56044006]
[302.24780273 -230.20887756]
[293.73672485 -217.85729980]
[285.22561646 -205.50572205]
[296.72958374 -193.71289062]
[305.59277344 -179.81956482]
[311.44171143 -164.40727234]
[314.02920532 -148.12162781]
[313.24465942 -131.64529419]
[309.11892700 -115.66930389]
[301.82299805 -100.86418915]
[291.66094971 -87.85173798]
[279.05737305 -77.17893219]
[264.53942871 -69.29495239]
[248.71496582 -64.53225708]
[232.24703979 -63.09255981]
[215.82608032 -65.03831482]
[200.14096069 -70.28999329]
[192.68605042 -57.27368164]
[185.23114014 -44.25737000]
[177.77622986 -31.24106216]
[185.76106262 -15.54678345]
[182.74830627 1.96104264]
[169.74989319 14.29894447]
[151.79824829 16.43233299]
[144.89125061 29.74748993]
[137.98425293 43.06264496]
[131.07725525 56.37779999]
[124.17025757 69.69295502]
[117.26325989 83.00811005]
[123.40440369 90.42987061]
[126.34806061 100.03058624]
[125.34741974 110.43339539]
[120.24613190 120.02063751]
[111.54752350 127.18509674]
[100.37821198 130.59628296]
[101.62508392 145.54437256]
[102.87195587 160.49246216]
[104.11883545 175.44055176]
[105.36570740 190.38864136]
[106.61257935 205.33673096]
[107.85945892 220.28480530]
[122.76223755 222.52172852]
[136.74722290 228.13574219]
[149.06021118 236.82406616]
[159.03717041 248.11817932]
[166.14007568 261.40896606]
[169.98587036 275.97970581]
[170.36715698 291.04461670]
[167.26336670 305.79125977]
[160.84187317 319.42434692]
[151.44900513 331.20867920]
[139.59129333 340.50875854]
[125.90820312 346.82302856]
[111.13765717 349.81094360]
[96.07621002 349.31143188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[27 41]
[28 40]
[29 39]
[50 124]
[51 123]
[52 122]
[53 121]
[54 120]
[55 119]
[61 115]
[62 114]
[63 113]
[64 112]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
