%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCCCCGGGGGGGGGGUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUxxxxxxxxxxCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCCCCCCCCCCCUAUUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.80690765 372.13082886]
[84.96096802 366.11477661]
[73.25231171 356.58535767]
[64.54978180 344.24969482]
[59.49918365 330.02319336]
[58.47529221 314.96148682]
[61.55409241 300.18234253]
[68.50711060 286.78240967]
[78.81839752 275.75607300]
[91.72277832 267.92156982]
[106.26266479 263.86026001]
[106.26266479 248.86026001]
[106.26266479 233.86026001]
[106.26266479 218.86026001]
[106.26266479 203.86026001]
[106.26266479 188.86026001]
[106.26266479 173.86026001]
[106.26266479 158.86026001]
[106.26266479 143.86026001]
[106.26266479 128.86026001]
[100.87725830 123.64035034]
[99.43072510 138.57043457]
[86.85610199 146.74838257]
[72.62212372 142.01614380]
[67.44705200 127.93713379]
[75.22773743 115.11289978]
[90.10645294 113.20053864]
[84.72104645 107.98062897]
[69.72835541 108.44867706]
[54.73565674 108.91671753]
[49.01770782 123.03142548]
[38.04862976 133.59547424]
[23.72887802 138.77857971]
[8.53943920 137.68275452]
[-4.88802481 130.49783325]
[-14.22712517 118.46865082]
[-17.85980606 103.67935181]
[-15.15668488 88.69225311]
[-6.58609247 76.10397339]
[6.36706400 68.09549713]
[21.45857239 66.05435181]
[36.07373428 70.33417511]
[47.68038940 80.19345856]
[54.26761246 93.92401886]
[69.26030731 93.45597839]
[84.25300598 92.98793793]
[97.11141205 85.26384735]
[104.56632233 72.24754333]
[112.02123260 59.23123169]
[119.47614288 46.21492386]
[126.93105316 33.19861221]
[134.38595581 20.18230438]
[141.84086609 7.16599417]
[138.88734436 -13.52920151]
[154.75212097 -26.07625961]
[157.85044861 -40.75278473]
[160.94877625 -55.42930984]
[146.78118896 -60.42276001]
[133.38661194 -67.22277832]
[120.99423218 -75.71302032]
[109.81612396 -85.74819946]
[100.04354095 -97.15660095]
[91.84370422 -109.74301147]
[85.35693359 -123.29206085]
[80.69421387 -137.57191467]
[77.93534851 -152.33821106]
[77.12752533 -167.33830261]
[78.28457642 -182.31549072]
[81.38671112 -197.01350403]
[86.38082886 -211.18086243]
[93.18148804 -224.57510376]
[101.67231750 -236.96707153]
[111.70803070 -248.14471436]
[123.11689758 -257.91674805]
[135.70370483 -266.11599731]
[149.25305176 -272.60211182]
[163.53312683 -277.26416016]
[178.29956055 -280.02230835]
[193.29968262 -280.82943726]
[208.27682495 -279.67166138]
[222.97468567 -276.56881714]
[237.14179993 -271.57403564]
[250.53573608 -264.77273560]
[262.92730713 -256.28131104]
[274.10446167 -246.24507141]
[283.87594604 -234.83573914]
[292.07458496 -222.24855042]
[298.56005859 -208.69888306]
[303.22143555 -194.41859436]
[305.97888184 -179.65202332]
[306.78527832 -164.65187073]
[305.62680054 -149.67478943]
[302.52328491 -134.97706604]
[297.52780151 -120.81018829]
[290.72586060 -107.41658020]
[282.23385620 -95.02542114]
[272.19708252 -83.84873962]
[260.78729248 -74.07778931]
[248.19970703 -65.87975311]
[234.64973450 -59.39491272]
[220.36921692 -54.73423767]
[205.60252380 -51.97747421]
[190.60232544 -51.17179871]
[175.62528992 -52.33098984]
[172.52697754 -37.65446472]
[169.42864990 -22.97793770]
[174.09498596 -18.59285164]
[177.13269043 -12.95583725]
[192.11241150 -12.17599297]
[207.09211731 -11.39614773]
[216.74809265 -23.54282188]
[231.70855713 -27.66159821]
[246.22090149 -22.16872025]
[254.70481873 -9.17631435]
[253.89808655 6.31977606]
[244.11091614 18.36098671]
[229.10665894 22.31722832]
[214.65475464 16.66724396]
[206.31227112 3.58356690]
[191.33256531 2.80372167]
[176.35284424 2.02387667]
[167.91928101 11.82003021]
[154.85717773 14.62090492]
[147.40226746 27.63721466]
[139.94735718 40.65352249]
[132.49244690 53.66983414]
[125.03753662 66.68614197]
[117.58262634 79.70245361]
[110.12771606 92.71876526]
[123.86594391 103.75978088]
[121.26266479 128.86026001]
[121.26266479 143.86026001]
[121.26266479 158.86026001]
[121.26266479 173.86026001]
[121.26266479 188.86026001]
[121.26266479 203.86026001]
[121.26266479 218.86026001]
[121.26266479 233.86026001]
[121.26266479 248.86026001]
[121.26266479 263.86026001]
[135.80255127 267.92156982]
[148.70693970 275.75607300]
[159.01821899 286.78240967]
[165.97123718 300.18234253]
[169.05003357 314.96148682]
[168.02615356 330.02319336]
[162.97554016 344.24969482]
[154.27302551 356.58535767]
[142.56436157 366.11477661]
[128.71841431 372.13082886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 46]
[29 45]
[30 44]
[47 129]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
[53 123]
[55 106]
[56 105]
[57 104]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
