%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCCCCUUGGGGGGGGGGGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAxxxxxxxxxxGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUACCCCCCCCCCAAAUCACCUU\
) } def
/len { sequence length } bind def

/coor [
[85.91164398 414.41760254]
[71.42195129 410.20910645]
[58.51572418 402.39300537]
[48.07292175 391.50216675]
[40.80555725 378.27917480]
[37.20913315 363.62554932]
[37.52885437 348.54046631]
[41.74292374 334.05239868]
[49.56402206 321.14916992]
[60.45888901 310.71060181]
[73.68470001 303.44833374]
[88.33969116 299.85757446]
[88.65174866 284.86080933]
[88.96380615 269.86404419]
[89.27585602 254.86729431]
[89.58791351 239.87054443]
[89.89997101 224.87379456]
[90.21202850 209.87704468]
[90.52408600 194.88027954]
[90.83614349 179.88352966]
[91.14819336 164.88677979]
[91.46025085 149.89002991]
[91.77230835 134.89326477]
[85.02190399 133.87919617]
[78.38049316 131.53555298]
[72.11332703 127.87150574]
[66.48522186 122.94960022]
[61.74979019 116.88566589]
[47.17708588 120.44042969]
[32.60438538 123.99519348]
[18.64933968 133.62290955]
[5.53473043 122.87845612]
[12.22880459 107.30200958]
[29.04962349 109.42248535]
[43.62232590 105.86772919]
[58.19502640 102.31296539]
[60.06264114 87.42968750]
[46.82005692 80.38455200]
[33.57746887 73.33941650]
[20.33488464 66.29428101]
[7.09229898 59.24914551]
[-6.15028667 52.20401001]
[-19.39287186 45.15887451]
[-32.63545990 38.11373901]
[-45.87804413 31.06860352]
[-59.12062836 24.02346992]
[-74.16029358 28.87981987]
[-88.19063568 21.60486031]
[-92.88770294 6.51469612]
[-85.46481323 -7.43794680]
[-70.32583618 -11.97521305]
[-56.45244980 -4.40522242]
[-52.07549286 10.78088379]
[-38.83290863 17.82601929]
[-25.59032249 24.87115288]
[-12.34773731 31.91628838]
[0.89484811 38.96142197]
[14.13743401 46.00655746]
[27.38002014 53.05169296]
[40.62260437 60.09682846]
[53.86519241 67.14196014]
[67.10777283 74.18709564]
[83.77185059 61.83087921]
[104.16404724 59.07138824]
[123.20077515 66.43370819]
[129.82926941 52.97774124]
[136.45776367 39.52177429]
[143.08627319 26.06580925]
[130.44021606 34.13286209]
[116.10905457 38.56207275]
[101.11657715 39.03702164]
[86.53380585 35.52378464]
[73.40251160 28.27333832]
[62.66075134 17.80363655]
[55.07590485 4.86261463]
[51.18980789 -9.62525177]
[51.28008270 -24.62497902]
[55.34027481 -39.06502151]
[63.08033371 -51.91381454]
[73.94732666 -62.25346756]
[87.16493988 -69.34534454]
[101.78894043 -72.68280029]
[116.77462006 -72.02743530]
[131.05142212 -67.42605591]
[143.59947205 -59.20737457]
[153.52233887 -47.95851898]
[160.11116028 -34.48308182]
[162.89524841 -19.74371910]
[161.67572021 -4.79337692]
[156.54223633 9.29506016]
[168.24185181 -0.09210151]
[179.94148254 -9.47926331]
[178.22279358 -24.81059265]
[185.08615112 -38.62717056]
[198.34147644 -46.52018356]
[213.75906372 -45.97099304]
[226.41920471 -37.15484619]
[232.28208923 -22.88494492]
[229.47689819 -7.71476221]
[218.89875793 3.51495290]
[203.92312622 7.22083855]
[189.32864380 2.22036028]
[177.62901306 11.60752201]
[165.92939758 20.99468422]
[156.54223633 32.69430923]
[149.91374207 46.15027237]
[143.28523254 59.60623932]
[136.65673828 73.06220245]
[143.42485046 86.44848633]
[158.19090271 89.08735657]
[172.95697021 91.72621918]
[187.72302246 94.36508179]
[202.48907471 97.00394440]
[213.58227539 86.15402985]
[228.93913269 83.92999268]
[242.65464783 91.18702698]
[249.45489502 105.13464355]
[246.72506714 120.40971375]
[235.51483154 131.13865662]
[220.13473511 133.19596863]
[206.49876404 125.79057312]
[199.85020447 111.77000427]
[185.08415222 109.13113403]
[170.31809998 106.49227142]
[155.55204773 103.85340881]
[140.78599548 101.21454620]
[134.72601318 118.08433533]
[122.40511322 130.07276917]
[106.76906586 135.20532227]
[106.45700836 150.20208740]
[106.14495087 165.19883728]
[105.83289337 180.19558716]
[105.52083588 195.19233704]
[105.20877838 210.18910217]
[104.89672852 225.18585205]
[104.58467102 240.18260193]
[104.27261353 255.17935181]
[103.96055603 270.17611694]
[103.64849854 285.17285156]
[103.33644104 300.16961670]
[117.82938385 304.36691284]
[130.74163818 312.17303467]
[141.19285583 323.05581665]
[148.47042847 336.27319336]
[152.07817078 350.92404175]
[151.77009583 366.00936890]
[147.56721497 380.50067139]
[139.75607300 393.40994263]
[128.86927795 403.85693359]
[115.64907837 411.12939453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[28 36]
[29 35]
[30 34]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[65 108]
[66 107]
[67 106]
[68 105]
[90 104]
[91 103]
[92 102]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
