%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAUUAACGGGGGGGGGGCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCxxxxxxxxxxCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACCCCCCCCCCCUAACAUUAAC\
) } def
/len { sequence length } bind def

/coor [
[60.98706818 606.16790771]
[47.76687241 598.89544678]
[36.88006973 588.44848633]
[29.06893730 575.53918457]
[24.86605644 561.04791260]
[24.55798340 545.96252441]
[28.16572571 531.31170654]
[35.44329834 518.09436035]
[45.89450455 507.21157837]
[58.80676651 499.40542603]
[73.29970551 495.20812988]
[72.98764801 480.21139526]
[72.67559052 465.21463013]
[72.36353302 450.21789551]
[72.05148315 435.22113037]
[71.73942566 420.22436523]
[71.42736816 405.22763062]
[71.11531067 390.23086548]
[70.80325317 375.23410034]
[70.49119568 360.23736572]
[68.49436951 358.18310547]
[67.21842194 355.18878174]
[67.03527069 351.53524780]
[68.20443726 347.63598633]
[70.82921600 343.99291992]
[71.76484680 329.02212524]
[72.70046997 314.05133057]
[73.63610077 299.08053589]
[60.97189713 294.30581665]
[50.16142654 286.13446045]
[42.09298706 275.22598267]
[37.43292999 262.46524048]
[36.57065582 248.89071655]
[39.58607864 235.60998535]
[46.24233246 223.70936584]
[56.00434494 214.16506958]
[68.08184052 207.76306152]
[81.49331665 205.03443909]
[83.05089569 190.11552429]
[84.60847473 175.19660950]
[78.23458862 161.73471069]
[87.36305237 148.81257629]
[88.92063141 133.89366150]
[76.83338165 127.10794067]
[68.24695587 116.22580719]
[64.45888519 102.89171600]
[66.04161072 89.12064362]
[72.75595093 76.99359894]
[83.58727264 68.34317017]
[96.89880371 64.47655487]
[98.76641846 49.59327316]
[100.63403320 34.70999527]
[102.50164795 19.82671356]
[95.20191193 9.14178371]
[97.10504913 -3.25164294]
[106.64369202 -10.75640869]
[108.82053375 -25.59761429]
[110.99736786 -40.43881989]
[101.83381653 -53.03512955]
[104.25285339 -68.05521393]
[116.31798553 -76.71363831]
[118.49481964 -91.55484009]
[120.67166138 -106.39604187]
[122.84849548 -121.23725128]
[124.40607452 -136.15615845]
[125.34170532 -151.12695312]
[126.27733612 -166.09774780]
[112.13341522 -171.43074036]
[100.19081116 -180.69712830]
[91.51146698 -193.07292175]
[86.86714172 -207.45768738]
[86.67079163 -222.57235718]
[90.93988800 -237.07290649]
[99.29482269 -249.66999817]
[110.99268341 -259.24346924]
[124.99329376 -264.94207764]
[140.05174255 -266.25912476]
[154.82904053 -263.07745361]
[168.01118469 -255.67999268]
[178.42605591 -244.72453308]
[185.14753723 -231.18522644]
[187.57798767 -216.26596069]
[185.50128174 -201.29336548]
[179.10208130 -187.59878540]
[168.94938660 -176.39993286]
[155.94598389 -168.69259644]
[141.24812317 -165.16212463]
[140.31250000 -150.19132996]
[139.37686157 -135.22053528]
[141.19602966 -133.00740051]
[142.21865845 -129.91737366]
[142.09747314 -126.26126099]
[140.60823059 -122.47269440]
[137.68969727 -119.06041718]
[135.51286316 -104.21920776]
[133.33602905 -89.37800598]
[131.15919495 -74.53679657]
[140.22966003 -62.77830887]
[138.23345947 -47.69620514]
[125.83857727 -38.26198196]
[123.66173553 -23.42077827]
[121.48490143 -8.57957172]
[128.84651184 7.32032347]
[117.38492584 21.69432640]
[115.51731110 36.57760620]
[113.64969635 51.46088791]
[111.78208923 66.34416962]
[125.23553467 74.80673981]
[133.67553711 88.27436066]
[135.42535400 104.07147217]
[130.13734436 119.05971527]
[118.86207581 130.26144409]
[103.83954620 135.45124817]
[102.28195953 150.37014771]
[108.54444122 164.89915466]
[99.52738953 176.75419617]
[97.96980286 191.67311096]
[96.41222382 206.59202576]
[111.41796112 213.64758301]
[123.10036469 225.37907410]
[130.07141113 240.36791992]
[131.51126099 256.81005859]
[127.26468658 272.73300171]
[117.85756683 286.23260498]
[104.43183899 295.70053101]
[88.60689545 300.01617432]
[87.67126465 314.98696899]
[86.73563385 329.95776367]
[85.80001068 344.92855835]
[85.48795319 359.92529297]
[85.80001068 374.92205811]
[86.11206818 389.91882324]
[86.42411804 404.91555786]
[86.73617554 419.91232300]
[87.04823303 434.90905762]
[87.36029053 449.90582275]
[87.67234802 464.90258789]
[87.98440552 479.89932251]
[88.29645538 494.89608765]
[102.95145416 498.48684692]
[116.17726135 505.74911499]
[127.07212830 516.18768311]
[134.89321899 529.09094238]
[139.10729980 543.57897949]
[139.42701721 558.66406250]
[135.83059692 573.31768799]
[128.56323242 586.54071045]
[118.12042236 597.43151855]
[105.21419525 605.24761963]
[90.72450256 609.45611572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 129]
[26 128]
[27 127]
[28 126]
[38 118]
[39 117]
[40 116]
[42 114]
[43 113]
[50 107]
[51 106]
[52 105]
[53 104]
[56 102]
[57 101]
[58 100]
[61 97]
[62 96]
[63 95]
[64 94]
[65 89]
[66 88]
[67 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
