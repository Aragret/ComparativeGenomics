%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACGACAGGGGGGGGGGCGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAxxxxxxxxxxCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCCCCCCCCCCCUGCACGACA\
) } def
/len { sequence length } bind def

/coor [
[131.05410767 530.58825684]
[119.16983032 521.31317139]
[109.85112762 509.46304321]
[103.63976288 495.72686768]
[100.89685822 480.90325928]
[101.78188324 465.85397339]
[106.24339294 451.45404053]
[114.02198792 438.54061890]
[124.66544342 427.86444092]
[137.55494690 420.04626465]
[151.94114685 415.54058838]
[151.00550842 400.56979370]
[150.06988525 385.59899902]
[149.13424683 370.62820435]
[148.19862366 355.65744019]
[147.26300049 340.68664551]
[146.32736206 325.71585083]
[145.39173889 310.74505615]
[143.83415222 295.82614136]
[141.65731812 280.98492432]
[139.48048401 266.14373779]
[129.97808838 254.67404175]
[135.63075256 239.89710999]
[133.45391846 225.05590820]
[131.27708435 210.21470642]
[129.10025024 195.37348938]
[125.09250641 180.91880798]
[119.31623077 167.07559204]
[113.53996277 153.23237610]
[107.76368713 139.38916016]
[95.72200012 130.62290955]
[97.54837036 114.90747833]
[85.56153870 105.88994598]
[70.65963745 104.17725372]
[55.75773621 102.46456909]
[46.67436981 114.84955597]
[32.60899353 121.01889801]
[17.34512329 119.31306458]
[4.98866367 110.19092560]
[-1.13655853 96.10627747]
[0.61710924 80.84783173]
[9.77793980 68.52002716]
[23.88171387 62.43898392]
[39.13459015 64.24047089]
[51.43362045 73.43989563]
[57.47042465 87.56266785]
[72.37232971 89.27535248]
[87.27423096 90.98804474]
[90.65828705 84.29489899]
[97.42639923 70.90861511]
[100.81046295 64.21547699]
[90.59697723 53.22980881]
[80.38349915 42.24414444]
[70.17002106 31.25848007]
[59.95653915 20.27281570]
[44.13073730 15.97443676]
[40.20251083 0.05271969]
[52.21287918 -11.11343765]
[67.80661011 -6.03725052]
[70.94220734 10.05933475]
[81.15568542 21.04500008]
[91.36916351 32.03066635]
[101.58264160 43.01633072]
[111.79612732 54.00199509]
[126.36882782 50.44723129]
[130.37657166 35.99254227]
[134.38430786 21.53785515]
[120.98303223 14.68288040]
[109.23619080 5.27030087]
[99.62481689 -6.31444502]
[92.54248047 -19.59696960]
[88.27921295 -34.03335953]
[87.00957489 -49.03245926]
[88.78556824 -63.98005676]
[93.53446960 -78.26406097]
[101.06180573 -91.29956055]
[111.05934143 -102.55274200]
[123.11768341 -111.56280518]
[136.74305725 -117.96079254]
[151.37748718 -121.48471069]
[166.42173767 -121.99025726]
[181.25973511 -119.45673370]
[195.28387451 -113.98787689]
[207.91987610 -105.80764008]
[218.65031433 -95.25099945]
[227.03576660 -82.75023651]
[232.73286438 -68.81726074]
[235.50831604 -54.02260590]
[235.24847412 -38.97211075]
[231.96395874 -24.28208542]
[225.78929138 -10.55407333]
[216.97731018 1.64977121]
[205.88885498 11.82970715]
[192.97799683 19.56887436]
[178.77343750 24.55035782]
[163.85682678 26.57016754]
[148.83898926 25.54559517]
[144.83125305 40.00028229]
[140.82351685 54.45497131]
[111.39159393 109.13120270]
[123.84643555 118.88760376]
[121.60690308 133.61288452]
[127.38317871 147.45610046]
[133.15945435 161.29931641]
[138.93572998 175.14253235]
[142.30393982 160.52558899]
[151.58644104 148.74275208]
[165.00878906 142.04643250]
[180.00515747 141.71670532]
[193.70886230 147.81658936]
[203.50028992 159.18003845]
[207.50772095 173.63481140]
[204.96508789 188.41773987]
[196.35844421 200.70292664]
[183.33303833 208.14192200]
[168.37879944 209.31269836]
[154.35437012 203.99145508]
[143.94145203 193.19665527]
[146.11828613 208.03787231]
[148.29512024 222.87907410]
[150.47196960 237.72027588]
[160.13006592 250.25149536]
[154.32168579 263.96688843]
[156.49853516 278.80810547]
[158.67536926 293.64929199]
[161.59388733 297.06158447]
[163.08314514 300.85015869]
[163.20431519 304.50625610]
[162.18168640 307.59628296]
[160.36253357 309.80941772]
[161.29815674 324.78021240]
[162.23379517 339.75100708]
[163.16941833 354.72180176]
[164.10504150 369.69259644]
[165.04067993 384.66339111]
[165.97630310 399.63418579]
[166.91192627 414.60498047]
[181.74716187 417.28439331]
[195.50979614 423.43688965]
[207.39968872 432.70477295]
[216.72558594 444.54925537]
[222.94526672 458.28164673]
[225.69715881 473.10360718]
[224.82125854 488.15341187]
[220.36848450 502.55606079]
[212.59771729 515.47418213]
[201.96073914 526.15679932]
[189.07597351 533.98278809]
[174.69252014 538.49719238]
[159.64660645 539.43750000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 125]
[20 124]
[21 123]
[23 121]
[24 120]
[25 119]
[26 118]
[27 105]
[28 104]
[29 103]
[30 102]
[32 100]
[33 48]
[34 47]
[35 46]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[65 99]
[66 98]
[67 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
