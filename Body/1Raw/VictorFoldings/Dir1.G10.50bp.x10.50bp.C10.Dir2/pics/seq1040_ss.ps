%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAGCAUCAGGGGGGGGGGAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGxxxxxxxxxxUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCCCCCCCCCCCAACAGGCAUCA\
) } def
/len { sequence length } bind def

/coor [
[81.35836029 412.92733765]
[68.43920135 405.16897583]
[57.65790558 394.63995361]
[49.59589005 381.90808105]
[44.68793106 367.65997314]
[43.19870758 352.66400146]
[45.20853043 337.72888184]
[50.60901260 323.66009521]
[59.10891724 311.21627808]
[70.24985504 301.06854248]
[83.43099976 293.76416016]
[97.94152069 289.69702148]
[97.32569122 274.70968628]
[96.70986938 259.72232056]
[96.09403992 244.73497009]
[95.47821808 229.74761963]
[94.86238861 214.76026917]
[94.24656677 199.77290344]
[93.63073730 184.78555298]
[93.01491547 169.79820251]
[92.39908600 154.81085205]
[80.15613556 146.14424133]
[65.81607056 150.54454041]
[51.47601318 154.94483948]
[44.72590256 165.98294067]
[32.64438629 169.33082581]
[21.88829422 163.71221924]
[7.46090984 167.81716919]
[-6.96647501 171.92210388]
[-17.98781013 184.06550598]
[-33.95548630 180.32847595]
[-38.44332504 164.55535889]
[-26.83462524 152.97218323]
[-11.07141972 157.49472046]
[3.35596490 153.38977051]
[17.78334999 149.28483582]
[29.26398849 136.04702759]
[47.07571411 140.60478210]
[61.41577530 136.20448303]
[75.75583649 131.80418396]
[68.46202850 122.58373260]
[64.35957336 111.94554901]
[63.62367630 100.92290497]
[66.11296082 90.52399445]
[71.40010071 81.63986206]
[78.82785797 74.96810150]
[87.58380890 70.95889282]
[85.13088226 56.16080856]
[82.67795563 41.36273193]
[70.10947418 32.16104507]
[67.83265686 17.11874390]
[76.68251801 5.19332600]
[74.22959137 -9.60475349]
[59.19847870 -9.49437141]
[44.33517456 -11.73685551]
[30.00570488 -16.27698135]
[16.56294060 -23.00294495]
[4.33792400 -31.74911308]
[-6.36829281 -42.30010223]
[-15.29206085 -54.39608765]
[-22.21362305 -67.73919678]
[-26.96252823 -82.00083160]
[-29.42183495 -96.82980347]
[-29.53097534 -111.86092377]
[-27.28726578 -126.72404480]
[-22.74595833 -141.05313110]
[-16.01888466 -154.49534607]
[-7.27170801 -166.71963501]
[3.28016615 -177.42498779]
[15.37688828 -186.34776306]
[28.72056389 -193.26821899]
[42.98259735 -198.01594543]
[57.81176758 -200.47402954]
[72.84289551 -200.58192444]
[87.70582581 -198.33699036]
[102.03455353 -193.79450989]
[115.47620392 -187.06632996]
[127.69977570 -178.31813049]
[138.40425110 -167.76538086]
[147.32601929 -155.66792297]
[154.24539185 -142.32366943]
[158.99194336 -128.06124878]
[161.44879150 -113.23188019]
[161.55545044 -98.20073700]
[159.30929565 -83.33798981]
[154.76562500 -69.00964355]
[148.03633118 -55.56854630]
[139.28713989 -43.34569550]
[128.73348999 -32.64208984]
[116.63529968 -23.72131729]
[103.29048157 -16.80305862]
[89.02767181 -12.05768108]
[91.48059845 2.74039769]
[103.70492554 11.17256165]
[106.40335083 26.14497566]
[97.47603607 38.90980148]
[99.92896271 53.70788193]
[102.38188934 68.50595856]
[116.90163422 73.31887054]
[127.45689392 84.39016724]
[141.88427734 80.28522491]
[156.31166077 76.18028259]
[170.73904419 72.07533264]
[175.11111450 57.28044891]
[186.80276489 47.21522141]
[202.08323669 45.09142685]
[216.07659912 51.58676147]
[224.31761169 64.62858582]
[224.17660522 80.05530548]
[215.69856262 92.94430542]
[201.58880615 99.18276215]
[186.34970093 96.77999115]
[174.84399414 86.50271606]
[160.41661072 90.60766602]
[145.98922729 94.71260834]
[131.56184387 98.81755066]
[132.49996948 114.98327637]
[124.81451416 131.36120605]
[138.85649109 136.63594055]
[152.89846802 141.91069031]
[166.94044495 147.18542480]
[183.02154541 143.97135925]
[193.64082336 156.46788025]
[187.87406921 171.81964111]
[171.65362549 174.23406982]
[161.66571045 161.22740173]
[147.62373352 155.95266724]
[133.58175659 150.67791748]
[119.53977203 145.40318298]
[107.38644409 154.19502258]
[108.00226593 169.18237305]
[108.61809540 184.16973877]
[109.23391724 199.15708923]
[109.84974670 214.14443970]
[110.46556854 229.13179016]
[111.08139801 244.11914062]
[111.69721985 259.10650635]
[112.31304932 274.09384155]
[112.92887115 289.08120728]
[127.72414398 291.94418335]
[141.46011353 298.14254761]
[153.39602661 307.34204102]
[162.88816833 319.04656982]
[169.42466736 332.62490845]
[172.65299988 347.34475708]
[172.39907837 362.41235352]
[168.67658997 377.01507568]
[161.68629456 390.36544800]
[151.80514526 401.74349976]
[139.56604004 410.53558350]
[125.62902069 416.26760864]
[110.74567413 418.63043213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 40]
[23 39]
[24 38]
[27 36]
[28 35]
[29 34]
[47 98]
[48 97]
[49 96]
[52 93]
[53 92]
[100 116]
[101 115]
[102 114]
[103 113]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
