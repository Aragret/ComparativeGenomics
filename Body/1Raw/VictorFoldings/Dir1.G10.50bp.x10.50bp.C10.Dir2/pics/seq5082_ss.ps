%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCCCCCAUGGGGGGGGGGCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCAxxxxxxxxxxACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCCCCCCCCCCCUAUCCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.36445618 369.95248413]
[69.87557220 363.22094727]
[58.39007568 353.45639038]
[49.57570648 341.22650146]
[43.94492340 327.24230957]
[41.82509613 312.31683350]
[43.33946228 297.31784058]
[48.39998627 283.11730957]
[56.71245193 270.54089355]
[67.79358673 260.31973267]
[80.99913788 253.04809570]
[95.56136322 249.14874268]
[95.25338745 234.15190125]
[94.94540405 219.15505981]
[94.63742828 204.15821838]
[94.32945251 189.16139221]
[94.02147675 174.16455078]
[93.71349335 159.16770935]
[93.40551758 144.17086792]
[93.09754181 129.17402649]
[92.78956604 114.17719269]
[89.13085938 99.63024139]
[82.30728149 86.27214050]
[75.48370361 72.91403961]
[61.64122772 78.71086121]
[47.39998245 83.44419098]
[32.84154892 87.08690643]
[18.04931450 89.61814117]
[3.10800886 91.02340698]
[-11.89678383 91.29464722]
[-26.87911797 90.43031311]
[-41.75317383 88.43534851]
[-56.43375015 85.32118988]
[-70.83676147 81.10566711]
[-84.87970734 75.81293488]
[-98.48214722 69.47329712]
[-111.56616974 62.12307739]
[-124.05683136 53.80437469]
[-135.88258362 44.56483841]
[-146.97567749 34.45738983]
[-157.27259827 23.53992844]
[-166.71434021 11.87498856]
[-175.24684143 -0.47061589]
[-182.82119751 -13.42616749]
[-189.39405823 -26.91745949]
[-194.92776489 -40.86721039]
[-199.39059448 -55.19551849]
[-202.75701904 -69.82031250]
[-205.00773621 -84.65782166]
[-206.12986755 -99.62305450]
[-206.11695862 -114.63029480]
[-204.96911621 -129.59358215]
[-202.69290161 -144.42720032]
[-199.30134583 -159.04617310]
[-194.81387329 -173.36679077]
[-189.25621033 -187.30702209]
[-182.66017151 -200.78698730]
[-175.06353760 -213.72950745]
[-166.50984192 -226.06042480]
[-157.04806519 -237.70910645]
[-146.73239136 -248.60885620]
[-135.62193298 -258.69723511]
[-123.78031921 -267.91641235]
[-111.27538300 -276.21362305]
[-98.17874146 -283.54135132]
[-84.56542206 -289.85760498]
[-70.51340485 -295.12619019]
[-56.10316467 -299.31695557]
[-41.41725540 -302.40585327]
[-26.53979301 -304.37524414]
[-11.55599499 -305.21383667]
[3.44830918 -304.91680908]
[18.38717651 -303.48587036]
[33.17504120 -300.92919922]
[47.72719193 -297.26147461]
[61.96027756 -292.50366211]
[75.79277039 -286.68304443]
[89.14543915 -279.83297729]
[101.94180298 -271.99267578]
[114.10856628 -263.20703125]
[125.57602692 -253.52639771]
[136.27850342 -243.00621033]
[146.15470886 -231.70674133]
[155.14804077 -219.69270325]
[163.20701599 -207.03289795]
[170.28546143 -193.79988098]
[176.34281921 -180.06941223]
[181.34442139 -165.92015076]
[185.26159668 -151.43315125]
[188.07189941 -136.69139099]
[189.75926208 -121.77931213]
[190.31399536 -106.78232574]
[189.73294067 -91.78633118]
[188.01939392 -76.87723541]
[185.18321228 -62.14042664]
[181.24061584 -47.66032791]
[176.21418762 -33.51987457]
[170.13273621 -19.80006218]
[163.03106689 -6.57948017]
[154.94989014 6.06614542]
[145.93547058 18.06438065]
[136.03944397 29.34650040]
[125.31851196 39.84788132]
[113.83407593 49.50836945]
[101.65191650 58.27263260]
[88.84180450 66.09046936]
[95.66538239 79.44856262]
[102.48896027 92.80666351]
[109.27226257 84.82883453]
[119.33703613 79.82039642]
[131.64706421 78.75389862]
[146.55151367 80.44429779]
[161.45596313 82.13469696]
[176.36041260 83.82509613]
[188.56623840 73.78551483]
[204.28781128 75.40042114]
[214.19778442 87.71172333]
[212.41674805 103.41533661]
[200.00135803 113.19458771]
[184.31745911 111.24761963]
[174.67001343 98.72953796]
[159.76556396 97.03914642]
[144.86111450 95.34874725]
[129.95666504 93.65834808]
[124.41410065 98.71106720]
[138.70820618 103.25846100]
[141.91697693 117.91123199]
[130.83163452 128.01641846]
[116.53762817 123.46871948]
[113.32897186 108.81649780]
[107.78639984 113.86921692]
[108.09438324 128.86605835]
[108.40235901 143.86289978]
[108.71033478 158.85972595]
[109.01831055 173.85656738]
[109.32629395 188.85340881]
[109.63426971 203.85025024]
[109.94224548 218.84707642]
[110.25022125 233.84391785]
[110.55819702 248.84075928]
[125.26823425 252.13897705]
[138.76119995 258.86233521]
[150.25260925 268.61993408]
[159.07440186 280.84448242]
[164.71365356 294.82525635]
[166.84252930 309.74945068]
[165.33724976 324.74935913]
[160.28533936 338.95294189]
[151.98049927 351.53439331]
[140.90556335 361.76226807]
[127.70442963 369.04193115]
[113.14456940 372.95010376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 108]
[23 107]
[24 106]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
