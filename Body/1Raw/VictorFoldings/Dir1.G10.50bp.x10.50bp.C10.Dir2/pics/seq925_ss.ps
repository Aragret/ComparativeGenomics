%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUAAACAAGGGGGGGGGGAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCxxxxxxxxxxCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCCCCCAUCAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 375.76806641]
[71.01555634 370.21505737]
[58.81560135 361.34872437]
[49.20452881 349.72640991]
[42.78650284 336.07870483]
[39.96496582 321.26351929]
[40.91728210 306.21215820]
[45.58358765 291.87072754]
[53.67055511 279.14077759]
[64.66983032 268.82247925]
[77.88998413 261.56451416]
[92.50000000 257.82308960]
[92.50000000 242.82308960]
[92.50000000 227.82308960]
[92.50000000 212.82308960]
[92.50000000 197.82308960]
[92.50000000 182.82308960]
[92.50000000 167.82308960]
[92.50000000 152.82308960]
[92.50000000 137.82308960]
[92.50000000 122.82308197]
[79.72374725 117.78488159]
[70.60234070 105.55534363]
[56.56036377 110.83008575]
[42.51838684 116.10482788]
[28.47641182 121.37957001]
[22.17368126 135.87271118]
[7.43837023 141.58638000]
[-6.98732471 135.13078308]
[-12.54489422 120.33588409]
[-5.93713045 105.97924805]
[8.91569710 100.57840729]
[23.20166969 107.33759308]
[37.24364471 102.06285095]
[51.28562164 96.78810883]
[65.32759857 91.51336670]
[71.87547302 78.01798248]
[67.32817841 63.72385025]
[57.56890488 52.33277893]
[44.14145660 45.64670181]
[30.71400642 38.96062851]
[14.91178703 39.73550797]
[6.96761227 27.13632774]
[-6.45983696 20.45025253]
[-19.88728714 13.76417732]
[-33.58465958 21.05537796]
[-48.94702148 18.86963272]
[-60.06723022 8.04740524]
[-62.66933823 -7.24993658]
[-55.75278091 -21.14025307]
[-41.97711945 -28.28243446]
[-26.63937187 -25.93016434]
[-15.63721943 -14.98794174]
[-13.20121098 0.33672762]
[0.22623824 7.02280283]
[13.65368748 13.70887852]
[28.49548531 12.45576477]
[37.40008163 25.53317833]
[50.82752991 32.21925354]
[64.25498199 38.90532684]
[70.93402863 35.49354172]
[90.97117615 25.25817680]
[93.42411041 10.46009827]
[88.04768372 -4.41957378]
[97.76210022 -15.71024895]
[92.38568115 -30.58992195]
[102.10009766 -41.88059616]
[104.55302429 -56.67867661]
[107.00595093 -71.47675323]
[109.45887756 -86.27483368]
[95.85028076 -92.83096313]
[84.64093018 -102.95652771]
[76.73950958 -115.83069611]
[72.78656006 -130.40982056]
[73.10252380 -145.51203918]
[77.66178894 -159.91307068]
[86.09475708 -172.44549561]
[97.71780396 -182.09336853]
[111.58870697 -188.07456970]
[126.58300018 -189.90425110]
[141.48518372 -187.43406677]
[155.08718872 -180.86427307]
[166.28636169 -170.72744751]
[174.17483521 -157.84535217]
[178.11314392 -143.26226807]
[177.78201294 -128.16036987]
[173.20828247 -113.76392365]
[164.76272583 -101.23997498]
[153.12998962 -91.60379028]
[139.25308228 -85.63651276]
[124.25695801 -83.82190704]
[121.80403137 -69.02382660]
[119.35110474 -54.22574997]
[116.89817810 -39.42766953]
[122.45005035 -25.60645485]
[112.56018066 -13.25732136]
[118.11205292 0.56389320]
[108.22218323 12.91302681]
[105.76925659 27.71110535]
[81.62230682 59.17655945]
[86.16960144 73.47068787]
[111.05430603 75.39856720]
[123.30270386 94.15816498]
[138.26399231 95.23522949]
[153.26399231 95.23522949]
[168.22526550 94.15816498]
[183.18655396 93.08109283]
[198.14782715 92.00402069]
[213.10911560 90.92695618]
[228.07038879 89.84988403]
[243.03166199 88.77281189]
[258.39575195 81.60475922]
[269.53689575 94.38410187]
[260.34115601 108.62750244]
[244.10873413 103.73409271]
[229.14746094 104.81116486]
[214.18617249 105.88823700]
[199.22489929 106.96530151]
[184.26361084 108.04237366]
[169.30233765 109.11944580]
[154.34104919 110.19651031]
[165.43365479 120.29375458]
[167.61166382 135.13479614]
[159.88798523 147.99343872]
[145.76309204 153.04196167]
[131.63861084 147.99230957]
[123.91596222 135.13305664]
[126.09515381 120.29219055]
[137.18692017 110.19651031]
[122.22563171 109.11944580]
[116.36614990 117.58670807]
[107.50000000 122.82308197]
[107.50000000 137.82308960]
[107.50000000 152.82308960]
[107.50000000 167.82308960]
[107.50000000 182.82308960]
[107.50000000 197.82308960]
[107.50000000 212.82308960]
[107.50000000 227.82308960]
[107.50000000 242.82308960]
[107.50000000 257.82308960]
[122.11001587 261.56451416]
[135.33016968 268.82247925]
[146.32945251 279.14077759]
[154.41641235 291.87072754]
[159.08271790 306.21215820]
[160.03503418 321.26351929]
[157.21350098 336.07870483]
[150.79547119 349.72640991]
[141.18440247 361.34872437]
[128.98443604 370.21505737]
[114.96250153 375.76806641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 36]
[24 35]
[25 34]
[26 33]
[37 101]
[38 100]
[39 60]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[62 99]
[63 98]
[65 96]
[67 94]
[68 93]
[69 92]
[70 91]
[103 130]
[104 129]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
