%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACAGGGGGGGGGGGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACCCCCCCCCCCAACCUUAACA\
) } def
/len { sequence length } bind def

/coor [
[76.30871582 540.42791748]
[62.46277618 534.41192627]
[50.75411606 524.88250732]
[42.05158997 512.54681396]
[37.00098801 498.32028198]
[35.97709656 483.25860596]
[39.05589676 468.47946167]
[46.00891876 455.07952881]
[56.32020187 444.05319214]
[69.22458649 436.21868896]
[83.76447296 432.15737915]
[83.76447296 417.15737915]
[83.76447296 402.15737915]
[83.76447296 387.15737915]
[83.76447296 372.15737915]
[83.76447296 357.15737915]
[83.76447296 342.15737915]
[83.76447296 327.15737915]
[83.76447296 312.15737915]
[83.76447296 297.15737915]
[83.76447296 282.15737915]
[83.76447296 267.15737915]
[70.35887146 263.72372437]
[58.16694641 257.15625000]
[47.90947723 247.83770752]
[40.19420624 236.31379700]
[35.47980499 223.26095581]
[34.04861832 209.44683838]
[35.98975754 195.68507385]
[41.19356918 182.78735352]
[49.35781479 171.51559448]
[60.00522232 162.53689575]
[72.51138306 156.38406372]
[86.14138031 153.42402649]
[78.94020844 140.38591003]
[87.24488068 126.91954041]
[87.86885834 111.93252563]
[80.01142883 99.15516663]
[66.35518646 92.94976044]
[52.69894791 86.74435425]
[39.04270935 80.53894806]
[25.38646698 74.33354187]
[13.01516533 78.12889862]
[1.74688947 72.62936401]
[-2.58482695 61.29165649]
[-16.10901642 54.80349350]
[-32.41032791 56.59213638]
[-41.89049911 43.21086502]
[-34.79714203 28.42518425]
[-18.42729378 27.44533730]
[-9.62085152 41.27930450]
[3.90333819 47.76746750]
[21.27248001 45.46250534]
[31.59187317 60.67729950]
[45.24811554 66.88270569]
[58.90435791 73.08811188]
[72.56060028 79.29351807]
[86.21683502 85.49893188]
[100.17723083 80.01189423]
[105.95349884 66.16867828]
[111.72977448 52.32546234]
[117.50604248 38.48224258]
[121.66393280 24.07002831]
[124.14904785 9.27732086]
[126.63417053 -5.51538658]
[129.11929321 -20.30809402]
[115.18797302 -26.04100418]
[102.88194275 -34.73061371]
[92.81845856 -45.94105530]
[85.50229645 -59.11001587]
[81.30043793 -73.57695007]
[80.42364502 -88.61619568]
[82.91590118 -103.47339630]
[88.65218353 -117.40332031]
[97.34477997 -129.70724487]
[108.55765533 -139.76802063]
[121.72838593 -147.08097839]
[136.19633484 -151.27934265]
[151.23579407 -152.15248108]
[166.09239197 -149.65663147]
[180.02093506 -143.91697693]
[192.32275391 -135.22140503]
[202.38079834 -124.00608826]
[209.69058228 -110.83358002]
[213.88542175 -96.36461639]
[214.75492859 -81.32494354]
[212.25547791 -66.46894836]
[206.51243591 -52.54180908]
[197.81388855 -40.24209595]
[186.59613037 -30.18676186]
[173.42185974 -22.88017654]
[158.95187378 -18.68883514]
[143.91200256 -17.82297516]
[141.42687988 -3.03026795]
[138.94175720 11.76243973]
[136.45663452 26.55514717]
[147.33416748 16.22656631]
[161.73008728 12.01262093]
[176.46017456 14.84539509]
[188.26625061 24.09830666]
[194.53694153 37.72469330]
[193.88522339 52.71052933]
[186.45523071 65.74108124]
[173.89042664 73.93411255]
[158.97003174 75.47740173]
[144.99429321 70.02958679]
[135.05451965 58.79567337]
[131.34925842 44.25851822]
[125.57299042 58.10173416]
[119.79671478 71.94495392]
[114.02044678 85.78816986]
[117.32919312 93.39183807]
[117.09450531 101.08794403]
[113.85247803 107.41411591]
[108.66793823 111.36657715]
[102.85587311 112.55650330]
[102.23189545 127.54351807]
[109.38843536 141.65361023]
[101.12839508 154.04800415]
[116.56205750 159.11680603]
[129.94837952 168.29534912]
[140.22146606 180.84335327]
[146.56593323 195.75260925]
[148.48167419 211.82798767]
[145.82324219 227.78326416]
[138.81086731 242.34402466]
[128.01222229 254.34939575]
[114.29650879 262.84472656]
[98.76447296 267.15737915]
[98.76447296 282.15737915]
[98.76447296 297.15737915]
[98.76447296 312.15737915]
[98.76447296 327.15737915]
[98.76447296 342.15737915]
[98.76447296 357.15737915]
[98.76447296 372.15737915]
[98.76447296 387.15737915]
[98.76447296 402.15737915]
[98.76447296 417.15737915]
[98.76447296 432.15737915]
[113.30435944 436.21868896]
[126.20874023 444.05319214]
[136.52001953 455.07952881]
[143.47303772 468.47946167]
[146.55184937 483.25860596]
[145.52795410 498.32028198]
[140.47735596 512.54681396]
[131.77482605 524.88250732]
[120.06616211 534.41192627]
[106.22022247 540.42791748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[34 119]
[36 117]
[37 116]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[59 111]
[60 110]
[61 109]
[62 108]
[63 96]
[64 95]
[65 94]
[66 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
