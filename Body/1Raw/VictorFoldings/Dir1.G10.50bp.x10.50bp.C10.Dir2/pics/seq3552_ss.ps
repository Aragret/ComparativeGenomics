%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCUACUGGGGGGGGGGAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCxxxxxxxxxxACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACCCCCCCCCCCUCUCCUACU\
) } def
/len { sequence length } bind def

/coor [
[42.76515961 253.03752136]
[38.92126465 238.53840637]
[38.12926102 223.55932617]
[40.42275238 208.73570251]
[45.70444107 194.69633484]
[53.75028229 182.03677368]
[64.21435547 171.29789734]
[71.11237335 157.97808838]
[78.01039886 144.65827942]
[84.90841675 131.33847046]
[72.46897888 139.72061157]
[60.02954102 148.10275269]
[47.59009933 156.48489380]
[35.15065765 164.86703491]
[22.79908562 173.37812805]
[10.53671837 182.01724243]
[-1.72565007 190.65635681]
[-13.98801804 199.29548645]
[-26.25038719 207.93460083]
[-38.51275635 216.57371521]
[-42.65864944 232.07180786]
[-57.41755676 238.36102295]
[-71.46770477 230.61680603]
[-74.03102112 214.77986145]
[-63.14115143 202.99893188]
[-47.15187073 204.31134033]
[-34.88950348 195.67222595]
[-22.62713432 187.03311157]
[-10.36476612 178.39399719]
[1.89760196 169.75488281]
[14.15997028 161.11576843]
[17.84043312 154.65048218]
[26.76851463 152.42759705]
[39.20795441 144.04545593]
[51.64739609 135.66331482]
[64.08683777 127.28117371]
[76.52627563 118.89903259]
[77.46008301 111.45738983]
[62.52483368 112.84962463]
[49.57844543 120.42530823]
[34.91505814 117.26538849]
[26.23793411 105.02988434]
[28.10550499 90.14659882]
[39.53666687 80.43431091]
[54.52617264 80.99526215]
[65.19949341 91.53487396]
[79.32769775 96.57411194]
[80.26150513 89.13246918]
[70.27877808 77.93670654]
[60.29605103 66.74093628]
[50.19739914 55.64962006]
[39.98392105 44.66395569]
[29.77044106 33.67829132]
[14.38299465 35.67982101]
[0.77396256 28.22503090]
[-5.82370377 14.18044376]
[-2.87306762 -1.05351090]
[8.49129105 -11.61906624]
[23.89954567 -13.45355225]
[37.42690659 -5.85156918]
[43.87182617 8.26376343]
[40.75610733 23.46481323]
[50.96958542 34.45047760]
[61.18306351 45.43614197]
[68.08552551 48.21133804]
[71.49181366 56.75820923]
[81.47454071 67.95397949]
[91.45726776 79.14974213]
[88.06414032 64.53855896]
[84.67100525 49.92737579]
[76.37079620 37.43311691]
[73.40386200 22.72946930]
[76.20964813 7.99421883]
[84.37257385 -4.59016132]
[96.68361664 -13.15977192]
[111.31935883 -16.44534683]
[126.11206818 -13.96025658]
[138.87077332 -6.07256937]
[147.70573425 6.04945040]
[151.30841064 20.61038399]
[149.14517212 35.45357895]
[141.53645325 48.38057709]
[129.60903931 57.47679520]
[121.62768555 70.17710876]
[113.64633179 82.87741852]
[126.73948669 75.55831146]
[139.83264160 68.23921204]
[152.92579651 60.92010498]
[166.01895142 53.60099792]
[179.11210632 46.28189087]
[192.20526123 38.96278763]
[178.86888123 32.09684753]
[175.71302795 17.43258476]
[185.04437256 5.68838930]
[200.04244995 5.44831800]
[209.74488831 16.88784218]
[207.06036377 31.64506149]
[220.84274292 25.72509766]
[234.62512207 19.80513573]
[237.91954041 4.64180994]
[249.51995850 -5.66402197]
[264.96575928 -7.14955807]
[278.31771851 0.75642073]
[284.44177246 15.01390362]
[280.98303223 30.14059830]
[269.27151489 40.31998062]
[253.81051636 41.63787460]
[240.54508972 33.58751678]
[226.76271057 39.50748062]
[212.98033142 45.42744064]
[199.52436829 52.05594254]
[186.43121338 59.37504578]
[173.33805847 66.69415283]
[160.24490356 74.01325989]
[147.15174866 81.33236694]
[134.05859375 88.65146637]
[120.96543884 95.97057343]
[121.43347931 110.96327209]
[134.95767212 117.45143890]
[148.48185730 123.93959808]
[162.00604248 130.42776489]
[177.55693054 126.48447418]
[190.24810791 136.29841614]
[190.34399414 152.34118652]
[177.77102661 162.30613708]
[162.17411804 158.54901123]
[155.51788330 143.95195007]
[141.99369812 137.46379089]
[128.46949768 130.97563171]
[114.94531250 124.48745728]
[123.70331573 136.66520691]
[132.46131897 148.84294128]
[141.21931458 161.02069092]
[154.13827515 168.64305115]
[165.22166443 178.75039673]
[173.99934387 190.91397095]
[180.09893799 204.61779785]
[183.26174927 219.28056335]
[183.35356140 234.28028870]
[180.37052917 248.98066711]
[174.43916321 262.75814819]
[165.81106567 275.02828979]
[154.85224915 285.27056885]
[142.02758789 293.05053711]
[127.88108063 298.03814697]
[113.01282501 300.02188110]
[98.05353546 298.91751099]
[83.63777161 294.77197266]
[70.37703705 287.76104736]
[58.83386230 278.18215942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[48 68]
[49 67]
[50 66]
[51 64]
[52 63]
[53 62]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
