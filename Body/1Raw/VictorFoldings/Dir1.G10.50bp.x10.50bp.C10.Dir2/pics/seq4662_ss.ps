%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGCCCAGGGGGGGGGGACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAxxxxxxxxxxCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCCCCCCCCCCCUAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[94.86847687 370.50729370]
[81.02254486 364.49127197]
[69.31388092 354.96185303]
[60.61135483 342.62619019]
[55.56075287 328.39965820]
[54.53686142 313.33798218]
[57.61566162 298.55883789]
[64.56867981 285.15890503]
[74.87996674 274.13256836]
[87.78434753 266.29806519]
[102.32423401 262.23675537]
[102.32423401 247.23674011]
[102.32423401 232.23674011]
[102.32423401 217.23674011]
[102.32423401 202.23674011]
[102.32423401 187.23674011]
[102.32423401 172.23674011]
[102.32423401 157.23674011]
[102.32423401 142.23674011]
[102.32423401 127.23674774]
[80.39317322 113.80721283]
[81.24229431 91.42363739]
[70.80248260 80.65282440]
[60.36267090 69.88201904]
[49.92285919 59.11120987]
[39.37156677 48.44958496]
[28.70994186 37.89829254]
[18.04831696 27.34700394]
[7.38668966 16.79571342]
[-5.20678854 25.04090118]
[-19.23396492 30.48526382]
[-34.08082199 32.89309692]
[-49.09800339 32.16154861]
[-63.62921906 28.32502365]
[-77.03991699 21.55357552]
[-88.74500275 12.14535713]
[-98.23436737 0.51350349]
[-105.09510040 -12.83201122]
[-109.02948761 -27.30673409]
[-109.86788940 -42.27732468]
[-107.57610321 -57.08927917]
[-102.25669098 -71.09552002]
[-94.14444733 -83.68469238]
[-104.80607605 -94.23598480]
[-120.05746460 -98.44380951]
[-123.66112518 -112.89590454]
[-134.32275391 -123.44718933]
[-140.70989990 -125.52369690]
[-144.47978210 -129.88481140]
[-145.19692993 -134.66615295]
[-155.41041565 -145.65180969]
[-169.97566223 -141.08929443]
[-185.07684326 -143.30671692]
[-197.71562195 -151.86381531]
[-205.38255310 -165.06158447]
[-206.55537415 -180.27957153]
[-201.00120544 -194.49624634]
[-189.82283020 -204.88888550]
[-175.23974609 -209.39401245]
[-160.14741516 -207.11714172]
[-147.54241943 -198.51033020]
[-139.92752075 -185.28248596]
[-138.81463623 -170.05998230]
[-144.42475891 -155.86529541]
[-134.21127319 -144.87962341]
[-123.77146149 -134.10881042]
[-113.10983276 -123.55752563]
[-98.62104034 -120.10440063]
[-94.25478363 -104.89761353]
[-83.59316254 -94.34632111]
[-71.08905792 -102.58908081]
[-57.13890457 -108.05390167]
[-42.35159683 -110.49964905]
[-27.37309265 -109.81701660]
[-12.85822582 -106.03341675]
[0.55793512 -99.31188202]
[12.28787231 -89.94403076]
[21.81734276 -78.33744049]
[28.72793007 -64.99790955]
[32.71540451 -50.50739288]
[33.60313034 -35.49863434]
[31.34987068 -20.62753296]
[26.05171776 -6.54448032]
[17.93798065 6.13408661]
[28.59960556 16.68537712]
[39.26123428 27.23666763]
[49.92285919 37.78795624]
[56.93478775 40.27362061]
[60.69366837 48.67139816]
[71.13347626 59.44220734]
[81.57329559 70.21301270]
[92.01310730 80.98382568]
[106.24079132 78.00612640]
[120.42462921 85.41262817]
[127.29600525 101.47324371]
[142.28869629 101.00519562]
[155.84072876 92.84106445]
[168.80322266 100.17746735]
[178.22390747 91.30590820]
[190.76252747 91.25989532]
[199.65849304 99.51636505]
[214.65766907 99.36032867]
[229.65686035 99.20429230]
[244.63658142 98.42444611]
[259.57089233 97.02214050]
[274.50518799 95.61984253]
[289.42410278 94.06225586]
[304.32601929 92.34957123]
[317.16952515 82.15271759]
[332.32055664 88.42794800]
[334.19299316 104.71984863]
[320.86065674 114.26870728]
[306.03869629 107.25147247]
[291.13681030 108.96415710]
[284.80990601 112.87773132]
[275.90750122 110.55414581]
[260.97317505 111.95645142]
[246.03887939 113.35875702]
[244.13534546 115.49974823]
[241.24179077 116.99016571]
[237.61125183 117.43863678]
[233.63728333 116.55625916]
[229.81289673 114.20348358]
[214.81370544 114.35951996]
[199.81452942 114.51555634]
[185.25184631 124.25867462]
[169.27127075 115.17016602]
[156.79162598 123.30081940]
[142.75674438 115.99789429]
[127.76404572 116.46593475]
[117.32423401 127.23674774]
[117.32423401 142.23674011]
[117.32423401 157.23674011]
[117.32423401 172.23674011]
[117.32423401 187.23674011]
[117.32423401 202.23674011]
[117.32423401 217.23674011]
[117.32423401 232.23674011]
[117.32423401 247.23674011]
[117.32423401 262.23675537]
[131.86412048 266.29806519]
[144.76850891 274.13256836]
[155.07978821 285.15890503]
[162.03280640 298.55883789]
[165.11160278 313.33798218]
[164.08772278 328.39965820]
[159.03710938 342.62619019]
[150.33459473 354.96185303]
[138.62593079 364.49127197]
[124.77999115 370.50729370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 92]
[23 91]
[24 90]
[25 89]
[26 87]
[27 86]
[28 85]
[29 84]
[43 70]
[44 69]
[46 67]
[47 66]
[50 65]
[51 64]
[95 130]
[96 129]
[98 127]
[101 125]
[102 124]
[103 123]
[104 118]
[105 117]
[106 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
