%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUAGCCCCAAGGGGGGGGGGACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAxxxxxxxxxxAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCCCCCCCCCCCAUCCUAGCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[79.23696899 168.54400635]
[65.44042206 162.72973633]
[53.15410614 154.17422485]
[42.91491699 143.25134277]
[35.17030716 130.43840027]
[30.25871086 116.29531860]
[28.39475632 101.44014740]
[29.65990067 86.52204132]
[33.99885559 72.19291687]
[41.22201538 59.07893753]
[51.01372910 47.75318146]
[62.94610596 38.71057129]
[76.49771118 32.34626770]
[91.07635498 28.93838310]
[90.77622223 13.94138527]
[90.47608948 -1.05561161]
[90.17595673 -16.05260849]
[89.87582397 -31.04960632]
[89.57569122 -46.04660416]
[89.27556610 -61.04359818]
[88.97543335 -76.04059601]
[88.67530060 -91.03759766]
[88.37516785 -106.03459167]
[88.07503510 -121.03158569]
[73.08146667 -121.59600067]
[58.14531326 -123.02328491]
[43.31620026 -125.30870819]
[28.64338684 -128.44467163]
[14.17561340 -132.42074585]
[-0.03905903 -137.22375488]
[-13.95341110 -142.83770752]
[-27.52121925 -149.24397278]
[-40.69741440 -156.42127991]
[-53.43822098 -164.34576416]
[-65.70132446 -172.99110413]
[-77.44597626 -182.32859802]
[-88.63317108 -192.32722473]
[-99.22574615 -202.95375061]
[-109.18850708 -214.17289734]
[-118.48836517 -225.94737244]
[-127.09441376 -238.23808289]
[-134.97808838 -251.00419617]
[-142.11317444 -264.20327759]
[-148.47598267 -277.79153442]
[-154.04537964 -291.72378540]
[-158.80285645 -305.95376587]
[-162.73262024 -320.43417358]
[-165.82159424 -335.11694336]
[-168.05953979 -349.95330811]
[-169.43901062 -364.89395142]
[-169.95542908 -379.88925171]
[-169.60708618 -394.88940430]
[-168.39512634 -409.84454346]
[-166.32357788 -424.70504761]
[-163.39932251 -439.42153931]
[-159.63208008 -453.94506836]
[-155.03436279 -468.22747803]
[-149.62144470 -482.22125244]
[-143.41131592 -495.87994385]
[-136.42457581 -509.15817261]
[-128.68446350 -522.01184082]
[-120.21668243 -534.39819336]
[-111.04935455 -546.27618408]
[-101.21294403 -557.60626221]
[-90.74011230 -568.35083008]
[-79.66566467 -578.47418213]
[-68.02639008 -587.94268799]
[-55.86093521 -596.72491455]
[-43.20972824 -604.79168701]
[-30.11479187 -612.11614990]
[-16.61962509 -618.67407227]
[-2.76905704 -624.44360352]
[11.39090061 -629.40557861]
[25.81320953 -633.54357910]
[40.44995880 -636.84375000]
[55.25252914 -639.29522705]
[70.17174530 -640.88977051]
[85.15805054 -641.62219238]
[100.16165924 -641.48992920]
[115.13272858 -640.49359131]
[130.02153015 -638.63635254]
[144.77859497 -635.92437744]
[159.35491943 -632.36676025]
[173.70207214 -627.97528076]
[187.77238464 -622.76452637]
[201.51911926 -616.75183105]
[214.89662170 -609.95709229]
[227.86044312 -602.40295410]
[240.36753845 -594.11450195]
[252.37632751 -585.11926270]
[263.84692383 -575.44708252]
[274.74127197 -565.13012695]
[285.02310181 -554.20269775]
[294.65832520 -542.70104980]
[303.61489868 -530.66333008]
[311.86309814 -518.12969971]
[319.37548828 -505.14160156]
[326.12713623 -491.74230957]
[332.09561157 -477.97631836]
[337.26107788 -463.88931274]
[341.60638428 -449.52810669]
[345.11709595 -434.94042969]
[347.78152466 -420.17471313]
[349.59088135 -405.27999878]
[350.53909302 -390.30581665]
[350.62304688 -375.30184937]
[349.84243774 -360.31799316]
[348.19989014 -345.40396118]
[345.70083618 -330.60937500]
[342.35357666 -315.98330688]
[338.16925049 -301.57437134]
[333.16174316 -287.43045044]
[327.34768677 -273.59851074]
[320.74639893 -260.12451172]
[313.37982178 -247.05320740]
[305.27239990 -234.42802429]
[296.45108032 -222.29087830]
[286.94515991 -210.68211365]
[276.78622437 -199.64028931]
[266.00802612 -189.20208740]
[254.64637756 -179.40217590]
[242.73899841 -170.27310181]
[230.32543945 -161.84519958]
[217.44696045 -154.14648438]
[204.14633179 -147.20249939]
[190.46772766 -141.03633118]
[176.45660400 -135.66844177]
[162.15950012 -131.11669922]
[147.62390137 -127.39619446]
[132.89810181 -124.51930237]
[118.03101349 -122.49556732]
[103.07202911 -121.33171844]
[103.37216187 -106.33472443]
[103.67229462 -91.33772278]
[103.97242737 -76.34072876]
[104.27256012 -61.34373093]
[104.57269287 -46.34673309]
[104.87282562 -31.34973717]
[105.17295837 -16.35274124]
[105.47309113 -1.35574377]
[105.77322388 13.64125347]
[106.07334900 28.63825035]
[120.77666473 31.46012115]
[134.57205200 37.27713394]
[146.85667419 45.83509445]
[157.09368896 56.76002121]
[164.83573914 69.57450104]
[169.74453735 83.71855927]
[171.60552979 98.57409668]
[170.33741760 113.49195099]
[165.99560547 127.82021332]
[158.76983643 140.93275452]
[148.97587585 152.25656128]
[137.04170227 161.29679871]
[123.48882294 167.65840149]
[108.90950775 171.06338501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
