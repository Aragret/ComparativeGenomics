%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUACGAGCGGGGGGGGGGCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGxxxxxxxxxxAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCCCCCCCCCCCACUGCGAGC\
) } def
/len { sequence length } bind def

/coor [
[82.12850189 423.81701660]
[68.28256226 417.80099487]
[56.57390213 408.27157593]
[47.87137985 395.93591309]
[42.82077789 381.70938110]
[41.79688644 366.64770508]
[44.87568283 351.86853027]
[51.82870483 338.46862793]
[62.13999176 327.44229126]
[75.04437256 319.60778809]
[89.58425903 315.54644775]
[89.58425903 300.54644775]
[89.58425903 285.54644775]
[89.58425903 270.54644775]
[89.58425903 255.54646301]
[89.58425903 240.54646301]
[89.58425903 225.54646301]
[89.58425903 210.54646301]
[89.58425903 195.54646301]
[89.58425903 180.54646301]
[89.58425903 165.54646301]
[87.30257416 162.77853394]
[86.28318024 158.74584961]
[87.11562347 154.07044983]
[90.08151245 149.61813354]
[91.01713562 134.64733887]
[91.95276642 119.67655182]
[90.52458191 134.60841370]
[81.56014252 146.63499451]
[67.65856171 152.26936340]
[52.85042191 149.87789917]
[41.42914963 140.15399170]
[36.70619202 125.91693115]
[40.05089951 111.29459381]
[50.49352646 100.52651215]
[65.00637054 96.73475647]
[79.37954712 101.01739502]
[65.15277100 96.26358032]
[50.92599106 91.50975800]
[35.38507843 94.47465515]
[25.76598740 83.10266113]
[11.53920746 78.34884644]
[-2.68757176 73.59503174]
[-18.63933945 77.39939117]
[-29.71181107 65.30259705]
[-24.51457596 49.74879074]
[-8.39410591 46.73839951]
[2.06624317 59.36824799]
[16.29302216 64.12206268]
[30.51980209 68.87587738]
[45.04312134 65.57096100]
[55.67980576 77.28298187]
[69.90658569 82.03679657]
[84.13336945 86.79061127]
[90.35308838 82.59954071]
[80.14701080 71.60699463]
[69.94094086 60.61444855]
[56.85823441 53.27667999]
[53.22505951 38.72332764]
[61.32398224 26.09766388]
[76.06678772 23.33186722]
[88.19118500 32.16357803]
[90.07994843 47.04405975]
[96.43624115 60.63072586]
[102.79252625 74.21739960]
[109.01224518 70.02632904]
[109.94787598 55.05553436]
[110.88350677 40.08474350]
[111.81912994 25.11395073]
[112.75476074 10.14315987]
[99.23641968 3.13071227]
[89.74410248 -8.77792835]
[85.92240143 -23.51951790]
[88.43344879 -38.53998947]
[96.84219360 -51.23694992]
[109.69177246 -59.41057968]
[124.75591278 -61.64474487]
[139.42466736 -57.55236435]
[151.15658569 -47.84246826]
[157.91903687 -34.19735336]
[158.54037476 -18.98111725]
[152.91297913 -4.83006763]
[142.01179504 5.80404234]
[127.72555542 11.07878780]
[126.78992462 26.04957962]
[125.85429382 41.02037048]
[124.91866302 55.99116135]
[123.98303986 70.96195221]
[135.48484802 80.59047699]
[150.05754089 77.03572083]
[164.63024902 73.48095703]
[179.20295715 69.92619324]
[193.77565002 66.37142944]
[208.34835815 62.81666946]
[222.92105103 59.26190948]
[237.49375916 55.70714569]
[251.76922607 51.10158157]
[265.67178345 45.46962738]
[279.57434082 39.83766937]
[293.47689819 34.20571136]
[298.12295532 19.27426910]
[311.30767822 10.86610031]
[326.80560303 12.95128632]
[337.29913330 24.54526520]
[337.83349609 40.17371750]
[328.15640259 52.45736313]
[312.83706665 55.59624100]
[299.10885620 48.10826874]
[285.20629883 53.74022675]
[271.30374146 59.37218094]
[257.40118408 65.00413513]
[271.05499268 71.21487427]
[277.67977905 84.67267609]
[274.27441406 99.28101349]
[262.38162231 108.42218018]
[247.38888550 107.95512390]
[236.08810425 98.09143829]
[233.59861755 83.29946899]
[241.04852295 70.27984619]
[226.47581482 73.83460999]
[211.90312195 77.38937378]
[197.33041382 80.94413757]
[182.75770569 84.49890137]
[168.18501282 88.05365753]
[153.61230469 91.60842133]
[139.03959656 95.16318512]
[106.92355347 120.61218262]
[105.98793030 135.58297729]
[105.05229950 150.55375671]
[104.58425903 165.54646301]
[104.58425903 180.54646301]
[104.58425903 195.54646301]
[104.58425903 210.54646301]
[104.58425903 225.54646301]
[104.58425903 240.54646301]
[104.58425903 255.54646301]
[104.58425903 270.54644775]
[104.58425903 285.54644775]
[104.58425903 300.54644775]
[104.58425903 315.54644775]
[119.12414551 319.60778809]
[132.02851868 327.44229126]
[142.33981323 338.46862793]
[149.29283142 351.86853027]
[152.37162781 366.64770508]
[151.34773254 381.70938110]
[146.29713440 395.93591309]
[137.59461975 408.27157593]
[125.88594818 417.80099487]
[112.04001617 423.81701660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 129]
[26 128]
[27 127]
[37 54]
[38 53]
[39 52]
[41 50]
[42 49]
[43 48]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
