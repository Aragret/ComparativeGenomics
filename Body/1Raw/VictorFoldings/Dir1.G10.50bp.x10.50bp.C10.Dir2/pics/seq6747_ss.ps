%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUAACAGGGGGGGGGGGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCxxxxxxxxxxUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACCCCCCCCCCCUAAUACUAACA\
) } def
/len { sequence length } bind def

/coor [
[80.41391754 354.41131592]
[67.49475861 346.65295410]
[56.71345901 336.12393188]
[48.65144348 323.39205933]
[43.74348450 309.14395142]
[42.25426102 294.14797974]
[44.26408386 279.21286011]
[49.66456985 265.14404297]
[58.16447067 252.70025635]
[69.30540466 242.55252075]
[82.48655701 235.24813843]
[96.99707031 231.18099976]
[96.38124847 216.19364929]
[95.76541901 201.20629883]
[95.14959717 186.21894836]
[94.53376770 171.23159790]
[93.91794586 156.24423218]
[93.30211639 141.25688171]
[92.68629456 126.26953125]
[92.07046509 111.28218079]
[85.24689484 97.92407990]
[73.46475983 88.64069366]
[61.68262100 79.35730743]
[48.76508713 80.09284210]
[39.13406754 72.06695557]
[37.62890625 60.02549744]
[26.03985977 50.50215912]
[14.45081043 40.97882462]
[1.40096116 51.36605453]
[-13.59616566 58.65098190]
[-29.81584930 62.48461533]
[-46.47495651 62.68466568]
[-62.76974869 59.24422073]
[-77.91466522 52.33194733]
[-91.18019104 42.28380585]
[-101.92798615 29.58674431]
[-109.64163971 14.85509300]
[-113.95142365 -1.19916272]
[-114.65206909 -17.80078888]
[-111.71250916 -34.14873886]
[-105.27725220 -49.45480728]
[-117.60853577 -57.99526596]
[-129.93981934 -66.53572845]
[-142.27110291 -75.07618713]
[-154.60238647 -83.61664581]
[-166.93367004 -92.15710449]
[-179.26495361 -100.69756317]
[-191.59623718 -109.23802185]
[-203.92752075 -117.77848053]
[-218.96255493 -113.47943878]
[-233.22229004 -119.89769745]
[-239.97370911 -134.00274658]
[-236.02900696 -149.13461304]
[-223.25074768 -158.14848328]
[-207.67242432 -156.78829956]
[-196.64965820 -145.69628906]
[-195.38706970 -130.10975647]
[-183.05578613 -121.56930542]
[-170.72450256 -113.02884674]
[-158.39321899 -104.48838806]
[-146.06193542 -95.94792938]
[-133.73065186 -87.40747070]
[-121.39936066 -78.86701202]
[-109.06807709 -70.32655334]
[-96.73679352 -61.78609085]
[-87.16977692 -71.21831512]
[-76.08089447 -78.81012726]
[-63.81964111 -84.32057953]
[-50.77277374 -87.57434082]
[-37.35209274 -88.46730042]
[-23.98144531 -86.96988678]
[-11.08334064 -83.12802887]
[0.93439305 -77.06177521]
[11.69151592 -68.96150970]
[20.84740067 -59.08202744]
[28.11181641 -47.73445892]
[33.25413513 -35.27652359]
[36.11064911 -22.10122299]
[36.58978271 -8.62445354]
[34.67502594 4.72812223]
[30.42550468 17.53452110]
[23.97414780 29.38977432]
[35.56319809 38.91311264]
[47.15224457 48.43645096]
[64.57151794 50.33739090]
[70.96600342 67.57517242]
[82.74813843 76.85855865]
[94.53028107 86.14194489]
[109.18300629 89.35093689]
[123.76675415 85.84177399]
[138.35050964 82.33260345]
[152.93424988 78.82344055]
[161.20971680 65.62667847]
[176.04969788 62.27563095]
[188.57978821 70.24634552]
[203.16354370 66.73717499]
[217.74729919 63.22801208]
[225.41493225 58.14832687]
[232.66647339 59.79977798]
[247.31919861 56.59077835]
[248.78962708 41.53445053]
[254.84262085 27.67023468]
[264.88516235 16.35640144]
[277.93334961 8.70136833]
[292.70889282 5.45509624]
[307.76425171 6.93562126]
[321.62438965 12.99789715]
[332.93148804 23.04800415]
[340.57778931 36.10133743]
[343.81414795 50.87905884]
[342.32354736 65.93340302]
[336.25198364 79.78949738]
[326.19430542 91.08985901]
[313.13586426 98.72740173]
[298.35595703 101.95386505]
[283.30261230 100.45317078]
[269.45059204 94.37232208]
[258.15698242 84.30706787]
[250.52819824 71.24350739]
[235.87547302 74.45249939]
[221.25645447 77.81175995]
[206.67271423 81.32093048]
[192.08895874 84.83009338]
[184.55632019 97.62833405]
[169.81631470 101.39488220]
[156.44342041 93.40718842]
[141.85966492 96.91635132]
[127.27591705 100.42552185]
[112.69216919 103.93468475]
[110.43177795 107.82268524]
[107.05782318 110.66635132]
[107.67364502 125.65370941]
[108.28947449 140.64106750]
[108.90529633 155.62841797]
[109.52112579 170.61576843]
[110.13694763 185.60311890]
[110.75277710 200.59046936]
[111.36859894 215.57781982]
[111.98442841 230.56518555]
[126.77970123 233.42814636]
[140.51567078 239.62652588]
[152.45158386 248.82601929]
[161.94372559 260.53054810]
[168.48022461 274.10885620]
[171.70855713 288.82873535]
[171.45463562 303.89633179]
[167.73214722 318.49905396]
[160.74185181 331.84942627]
[150.86070251 343.22747803]
[138.62159729 352.01956177]
[124.68457031 357.75158691]
[109.80123138 360.11441040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 88]
[22 87]
[23 86]
[26 84]
[27 83]
[28 82]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[89 129]
[90 128]
[91 127]
[92 126]
[95 123]
[96 122]
[97 121]
[99 120]
[100 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
