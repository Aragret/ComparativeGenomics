%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACCACCUGGGGGGGGGGGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUxxxxxxxxxxGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCACCCCCCCCCCACACUCCACCU\
) } def
/len { sequence length } bind def

/coor [
[107.97746277 423.64941406]
[93.41760254 419.74121094]
[80.21646118 412.46157837]
[69.14153290 402.23370361]
[60.83668900 389.65225220]
[55.78477859 375.44866943]
[54.27950287 360.44876099]
[56.40837860 345.52456665]
[62.04763794 331.54379272]
[70.86942291 319.31924438]
[82.36083984 309.56164551]
[95.85379791 302.83828735]
[110.56383514 299.54006958]
[110.87181091 284.54321289]
[111.17978668 269.54638672]
[111.48776245 254.54954529]
[111.79574585 239.55270386]
[112.10372162 224.55587769]
[112.41169739 209.55903625]
[112.71967316 194.56219482]
[113.02765656 179.56535339]
[113.33563232 164.56851196]
[113.64360809 149.57168579]
[87.65801239 147.70068359]
[67.02541351 133.67083740]
[56.69453430 112.17553711]
[58.46637726 89.49702454]
[70.76728058 71.68501282]
[62.10066986 59.44205856]
[53.43406296 47.19910812]
[44.76745605 34.95615387]
[36.10084915 22.71319962]
[22.38897896 27.10972977]
[7.64389992 26.28038788]
[-6.16194057 20.07250404]
[-17.08843040 9.06985855]
[-23.49932480 -5.45349073]
[-38.46060562 -6.53056049]
[-54.69300842 -1.63715172]
[-63.88875580 -15.88055515]
[-52.74762726 -28.65989685]
[-37.38353729 -21.49184227]
[-22.42225647 -20.41477203]
[-17.29195404 -34.51016235]
[-29.44528580 -43.30200195]
[-38.29152679 -45.81990814]
[-41.75539398 -52.40122986]
[-53.72565460 -61.44075012]
[-65.69591522 -70.48027039]
[-77.66616821 -79.51979065]
[-92.86502838 -75.84163666]
[-106.84923553 -82.83992004]
[-113.01587677 -97.21025848]
[-108.45326233 -112.16741180]
[-95.31570435 -120.64907837]
[-79.80636597 -118.65046692]
[-69.24827576 -107.11527252]
[-68.62664795 -91.49004364]
[-56.65639114 -82.45052338]
[-44.68613434 -73.41101074]
[-32.71587372 -64.37149048]
[-20.65344429 -55.45533752]
[-8.50011063 -46.66349411]
[-1.44788313 -49.30559158]
[5.65328407 -50.58480072]
[12.55433941 -50.56364059]
[12.55433941 -65.56364441]
[12.55433941 -80.56364441]
[12.55433941 -95.56364441]
[-1.50284755 -101.34844208]
[-12.27272034 -112.07589722]
[-18.11295128 -126.11014557]
[-18.13294792 -141.31106567]
[-12.32965946 -155.36064148]
[-1.58804727 -166.11637878]
[12.45387173 -171.93815613]
[27.65480804 -171.93815613]
[41.69672775 -166.11637878]
[52.43833923 -155.36064148]
[58.24162674 -141.31106567]
[58.22163010 -126.11014557]
[52.38140106 -112.07589722]
[41.61152649 -101.34844208]
[27.55434036 -95.56364441]
[27.55434036 -80.56364441]
[27.55434036 -65.56364441]
[27.55434036 -50.56364059]
[45.78176880 -41.64408875]
[56.98440933 -24.60897827]
[57.96157455 -4.14793634]
[48.34379959 14.04659176]
[57.01041031 26.28954506]
[65.67701721 38.53249741]
[74.34362030 50.77545166]
[83.01023102 63.01840591]
[89.69599915 59.62213898]
[97.05716705 57.45548630]
[104.86381531 56.65153122]
[112.86011505 57.29972839]
[120.77270508 59.44092941]
[128.31999207 63.06400681]
[135.22216797 68.10433960]
[141.21134949 74.44412994]
[146.04177856 81.91477966]
[149.49942017 90.30110931]
[151.41082764 99.34745026]
[166.40371704 98.88552856]
[181.39660645 98.42359924]
[188.03129578 84.63086700]
[200.32272339 75.51061249]
[215.44644165 73.15859985]
[229.92710876 78.11530304]
[240.43716431 89.24172211]
[244.56150818 103.98107147]
[241.35235596 118.94636536]
[231.54718018 130.69868469]
[217.39912415 136.53742981]
[202.15930176 135.12091064]
[189.32972717 126.77462769]
[181.85853577 113.41648865]
[166.86564636 113.87841034]
[151.87275696 114.34033966]
[148.51350403 128.95935059]
[161.80084229 135.91970825]
[178.15502930 134.70617676]
[187.15814209 148.41296387]
[179.54853821 162.93969727]
[163.15434265 163.34252930]
[154.84048462 149.20704651]
[141.55314636 142.24668884]
[128.64044189 149.87965393]
[128.33247375 164.87649536]
[128.02449036 179.87333679]
[127.71651459 194.87017822]
[127.40853882 209.86700439]
[127.10055542 224.86384583]
[126.79257965 239.86068726]
[126.48460388 254.85752869]
[126.17662811 269.85437012]
[125.86864471 284.85119629]
[125.56066895 299.84805298]
[140.12289429 303.74740601]
[153.32844543 311.01904297]
[164.40957642 321.24020386]
[172.72204590 333.81661987]
[177.78256226 348.01712036]
[179.29693604 363.01614380]
[177.17710876 377.94161987]
[171.54632568 391.92581177]
[162.73196411 404.15570068]
[151.24645996 413.92025757]
[137.75758362 420.65179443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[37 43]
[38 42]
[44 63]
[45 62]
[47 61]
[48 60]
[49 59]
[50 58]
[66 87]
[67 86]
[68 85]
[69 84]
[106 122]
[107 121]
[108 120]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
