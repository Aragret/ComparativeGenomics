%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCCCCAGGGGGGGGGGCCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGxxxxxxxxxxACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAACCCCCCCCCCAUGCCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[75.61121368 390.69094849]
[61.76527405 384.67489624]
[50.05661011 375.14547729]
[41.35408783 362.80981445]
[36.30348587 348.58331299]
[35.27959442 333.52160645]
[38.35839081 318.74246216]
[45.31141281 305.34252930]
[55.62269974 294.31619263]
[68.52707672 286.48168945]
[83.06696320 282.42037964]
[83.06696320 267.42037964]
[83.06696320 252.42037964]
[83.06696320 237.42037964]
[83.06696320 222.42037964]
[83.06696320 207.42037964]
[83.06696320 192.42037964]
[83.06696320 177.42037964]
[83.06696320 162.42037964]
[83.06696320 147.42037964]
[69.48165894 153.77957153]
[54.48844147 154.23065186]
[40.54541779 148.69963074]
[29.93851089 138.09333801]
[24.40669441 124.15063477]
[24.85690117 109.15739441]
[31.21531677 95.57172394]
[42.43949509 85.62094879]
[56.68926239 80.93649292]
[71.62840271 82.28635406]
[84.80793762 89.44943237]
[76.55564880 76.92346954]
[68.30335236 64.39750671]
[60.05106735 51.87154770]
[51.79877853 39.34558487]
[43.54648972 26.81962204]
[30.10100937 33.51114273]
[15.94697475 38.53316116]
[1.29079235 41.81244278]
[-13.65380764 43.30116272]
[-28.66889000 42.97761154]
[-43.53548813 40.84650803]
[-58.03680420 36.93893051]
[-71.96137238 31.31186485]
[-85.10611725 24.04736710]
[-97.27936554 15.25137615]
[-108.30358124 5.05216408]
[-118.01801300 -6.40153503]
[-126.28098297 -18.94269371]
[-132.97200012 -32.38842392]
[-137.99349976 -46.54264450]
[-141.27223206 -61.19894791]
[-142.76039124 -76.14360809]
[-142.43627930 -91.15867615]
[-140.30461121 -106.02519226]
[-136.39649963 -120.52636719]
[-130.76890564 -134.45071411]
[-123.50392151 -147.59519958]
[-114.70747375 -159.76811218]
[-104.50785065 -170.79194641]
[-93.05378723 -180.50595093]
[-80.51232147 -188.76846313]
[-67.06633759 -195.45896912]
[-52.91193008 -200.47993469]
[-38.25550461 -203.75811768]
[-23.31079292 -205.24571228]
[-8.29573441 -204.92105103]
[6.57070446 -202.78883362]
[21.07172966 -198.88017273]
[34.99587250 -193.25205994]
[48.14007950 -185.98657227]
[60.31266785 -177.18968201]
[71.33612061 -166.98963928]
[81.04969788 -155.53521729]
[89.31172943 -142.99343872]
[96.00174713 -129.54721069]
[101.02217102 -115.39261627]
[104.29981232 -100.73606110]
[105.78684998 -85.79129791]
[105.46161652 -70.77625275]
[103.32884979 -55.90988922]
[99.41964722 -41.40901184]
[93.79101562 -27.48507881]
[86.52504730 -14.34114552]
[77.72769165 -2.16888618]
[67.52723694 8.85418987]
[56.07244873 18.56733322]
[64.32473755 31.09329605]
[72.57702637 43.61925888]
[80.82931519 56.14521790]
[89.08160400 68.67118073]
[97.33389282 81.19714355]
[111.90660095 84.75190735]
[124.99975586 77.43280029]
[138.09291077 70.11369324]
[151.18606567 62.79459000]
[152.03112793 47.39038849]
[161.08869934 34.90182877]
[175.46852112 29.31397057]
[190.58206177 32.40987015]
[201.60662842 43.20164490]
[205.02433777 58.24567413]
[199.74459839 72.74146271]
[187.45216370 82.06346130]
[172.06950378 83.23705292]
[158.50517273 75.88774109]
[145.41201782 83.20684814]
[132.31886292 90.52595520]
[119.22570801 97.84506226]
[122.17118835 112.55302429]
[137.07308960 114.26570892]
[151.97499084 115.97840118]
[166.87689209 117.69109344]
[181.77879333 119.40377808]
[198.20471191 115.20548248]
[206.78608704 129.82725525]
[195.11128235 142.12098694]
[180.06610107 134.30567932]
[165.16419983 132.59298706]
[150.26229858 130.88031006]
[135.36039734 129.16761780]
[120.45849609 127.45492554]
[114.86061096 132.44628906]
[127.11715698 141.09367371]
[140.35496521 148.14778137]
[142.13972473 163.04122925]
[130.94348145 173.02340698]
[116.35155487 169.54840088]
[110.85623169 155.59275818]
[103.66484833 142.42901611]
[98.06696320 147.42037964]
[98.06696320 162.42037964]
[98.06696320 177.42037964]
[98.06696320 192.42037964]
[98.06696320 207.42037964]
[98.06696320 222.42037964]
[98.06696320 237.42037964]
[98.06696320 252.42037964]
[98.06696320 267.42037964]
[98.06696320 282.42037964]
[112.60684967 286.48168945]
[125.51123047 294.31619263]
[135.82252502 305.34252930]
[142.77554321 318.74246216]
[145.85433960 333.52160645]
[144.83044434 348.58331299]
[139.77984619 362.80981445]
[131.07731628 375.14547729]
[119.36865997 384.67489624]
[105.52272034 390.69094849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 92]
[32 91]
[33 90]
[34 89]
[35 88]
[36 87]
[93 109]
[94 108]
[95 107]
[96 106]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
