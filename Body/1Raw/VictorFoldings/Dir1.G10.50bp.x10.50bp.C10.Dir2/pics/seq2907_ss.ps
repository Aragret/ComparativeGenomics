%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAACCCAAGGGGGGGGGGCCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUAxxxxxxxxxxUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCCCCCCCCCCCAUAACCCAA\
) } def
/len { sequence length } bind def

/coor [
[83.61758423 375.88693237]
[70.39739227 368.61447144]
[59.51058578 358.16744995]
[51.69945526 345.25820923]
[47.49657440 330.76690674]
[47.18850327 315.68154907]
[50.79624176 301.03073120]
[58.07381439 287.81335449]
[68.52502441 276.93057251]
[81.43728638 269.12442017]
[95.93022156 264.92715454]
[95.61816406 249.93038940]
[95.30610657 234.93363953]
[94.99405670 219.93687439]
[94.68199921 204.94012451]
[94.36994171 189.94337463]
[94.05788422 174.94662476]
[93.74582672 159.94985962]
[93.43376923 144.95310974]
[93.12171936 129.95635986]
[92.80966187 114.95960236]
[90.08321381 129.70973206]
[79.53994751 140.37930298]
[64.82331848 143.28117371]
[51.01899338 137.41256714]
[42.89736557 124.80149078]
[43.26504135 109.80599976]
[51.99496841 97.60811615]
[66.07032013 92.42308807]
[80.62734985 96.04291534]
[67.10315704 89.55474854]
[53.57896805 83.06658173]
[40.05477524 76.57841492]
[23.69599915 82.68806458]
[8.26918125 75.25184631]
[3.06774831 59.28929520]
[-10.58849239 53.08388901]
[-24.24473381 46.87847900]
[-37.90097427 40.67307281]
[-52.54375839 45.98594666]
[-66.30473328 39.49824142]
[-71.27950287 25.50584221]
[-84.93574524 19.30043602]
[-98.59198761 13.09502888]
[-112.24822998 6.88962173]
[-127.71371460 11.15557671]
[-140.60630798 1.60777748]
[-141.03591919 -14.42952251]
[-128.67298889 -24.65387917]
[-113.00129700 -21.22204018]
[-106.04282379 -6.76661968]
[-92.38658142 -0.56121254]
[-78.73033905 5.64419460]
[-65.07409668 11.84960175]
[-51.26210403 6.39392471]
[-37.32433319 12.49255180]
[-31.69556808 27.01683235]
[-18.03932762 33.22224045]
[-4.38308573 39.42764664]
[9.27315521 45.63305283]
[20.62274361 39.45376205]
[33.65107346 40.98247910]
[43.55207062 49.88181686]
[46.54294205 63.05422592]
[60.06713104 69.54238892]
[73.59132385 76.03055573]
[87.11550903 82.51872253]
[78.35751343 70.34098053]
[69.11038208 58.53036499]
[64.72799683 44.18481827]
[65.79646301 29.22292137]
[72.17288208 15.64568520]
[83.00446320 5.26894045]
[96.84258270 -0.51952243]
[111.83653259 -0.94555050]
[125.98101044 4.04783344]
[137.38430786 13.79281139]
[144.52137756 26.98608398]
[146.43766785 41.86317444]
[142.87689209 56.43441391]
[134.31530762 68.75102997]
[121.89778900 77.16585541]
[111.69171143 88.15840149]
[125.91849518 83.40458679]
[140.14527893 78.65077209]
[154.37205505 73.89695740]
[168.59883118 69.14314270]
[166.24331665 54.29384995]
[166.36421204 39.25938034]
[168.95817566 24.44988632]
[173.95448303 10.26937866]
[181.21681213 -2.89528680]
[190.54705811 -14.68496895]
[201.69065857 -24.77803612]
[214.34361267 -32.89914322]
[228.16076660 -38.82673645]
[242.76513672 -42.39911270]
[257.75836182 -43.51881027]
[272.73135376 -42.15528488]
[287.27566528 -38.34573364]
[300.99450684 -32.19408798]
[313.51367188 -23.86816216]
[324.49154663 -13.59509850]
[333.62869263 -1.65515256]
[340.67584229 11.62594509]
[345.44073486 25.88587761]
[347.79339600 40.73562241]
[347.66961670 55.77006531]
[345.07278442 70.57906342]
[340.07373047 84.75860596]
[332.80886841 97.92187500]
[323.47637939 109.70975494]
[312.33084106 119.80067444]
[299.67630005 127.91934204]
[285.85800171 133.84428406]
[271.25292969 137.41383362]
[256.25952148 138.53065491]
[241.28678894 137.16424561]
[226.74320984 133.35188293]
[213.02552795 127.19759369]
[200.50799561 118.86926270]
[189.53208923 108.59408569]
[180.39723206 96.65237427]
[173.35264587 83.36991882]
[159.12586975 88.12373352]
[144.89909363 92.87754822]
[130.67230225 97.63136292]
[116.44552612 102.38517761]
[107.80641174 114.64754486]
[108.11846924 129.64430237]
[108.43052673 144.64105225]
[108.74258423 159.63780212]
[109.05464172 174.63456726]
[109.36669159 189.63131714]
[109.67874908 204.62806702]
[109.99080658 219.62481689]
[110.30286407 234.62158203]
[110.61492157 249.61833191]
[110.92697906 264.61508179]
[125.58197021 268.20584106]
[138.80776978 275.46810913]
[149.70265198 285.90670776]
[157.52374268 298.80990601]
[161.73780823 313.29797363]
[162.05754089 328.38308716]
[158.46110535 343.03668213]
[151.19374084 356.25967407]
[140.75094604 367.15051270]
[127.84471130 374.96664429]
[113.35501862 379.17510986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[30 67]
[31 66]
[32 65]
[33 64]
[36 60]
[37 59]
[38 58]
[39 57]
[42 54]
[43 53]
[44 52]
[45 51]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
