%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAACACCGGGGGGGGGGCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAAxxxxxxxxxxACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCACCCCCCCCCCAAUCAACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 416.84344482]
[71.19830322 410.82742310]
[59.48964310 401.29800415]
[50.78712082 388.96234131]
[45.73651886 374.73580933]
[44.71262741 359.67413330]
[47.79142761 344.89495850]
[54.74444962 331.49502563]
[65.05573273 320.46871948]
[77.96011353 312.63418579]
[92.50000000 308.57287598]
[92.50000000 293.57287598]
[92.50000000 278.57287598]
[92.50000000 263.57287598]
[92.50000000 248.57289124]
[92.50000000 233.57289124]
[92.50000000 218.57289124]
[92.50000000 203.57289124]
[92.50000000 188.57289124]
[92.50000000 173.57289124]
[77.44038391 170.42927551]
[63.35700226 164.23791504]
[50.85931396 155.26673889]
[40.48812866 143.90394592]
[32.69225693 130.64126587]
[27.80905342 116.05261230]
[26.04983139 100.76930237]
[27.49072266 85.45270538]
[32.06937027 70.76562500]
[39.58764267 57.34362411]
[49.72019196 45.76753616]
[62.02854538 36.53829575]
[75.98007202 30.05529213]
[90.97103119 26.59906769]
[90.65897369 11.60231304]
[88.63664246 -3.26073360]
[84.93048096 -17.79566956]
[81.22431946 -32.33060455]
[77.51815796 -46.86554337]
[73.81199646 -61.40047836]
[70.10583496 -75.93541718]
[66.39967346 -90.47035217]
[62.69351196 -105.00528717]
[58.98735046 -119.54022217]
[55.28118896 -134.07516479]
[40.37657166 -132.21624756]
[25.35649490 -132.24008179]
[10.45785141 -134.14628601]
[-4.08438730 -137.90481567]
[-18.04086876 -143.45637512]
[-31.19148064 -150.71342468]
[-43.32881927 -159.56149292]
[-54.26145554 -169.86103821]
[-63.81697464 -181.44963074]
[-71.84466553 -194.14448547]
[-78.21791840 -207.74539185]
[-82.83622742 -222.03785706]
[-85.62674713 -236.79644775]
[-86.54547119 -251.78842163]
[-85.57791138 -266.77731323]
[-82.73931885 -281.52676392]
[-78.07447052 -295.80407715]
[-71.65692902 -309.38415527]
[-63.58792114 -322.05279541]
[-53.99469757 -333.61019897]
[-43.02856064 -343.87405396]
[-30.86245918 -352.68252563]
[-17.68827248 -359.89669800]
[-3.71377754 -365.40277100]
[10.84062958 -369.11389160]
[25.74540520 -370.97155762]
[40.76548004 -370.94644165]
[55.66396332 -369.03897095]
[70.20588684 -365.27923584]
[84.16189575 -359.72650146]
[97.31189728 -352.46835327]
[109.44849396 -343.61926270]
[120.38026428 -333.31878662]
[129.93479919 -321.72940063]
[137.96142578 -309.03387451]
[144.33354187 -295.43240356]
[148.95063782 -281.13955688]
[151.73992920 -266.38073730]
[152.65737915 -251.38868713]
[151.68855286 -236.39985657]
[148.84872437 -221.65068054]
[144.18267822 -207.37373352]
[137.76399231 -193.79418945]
[129.69392395 -181.12623596]
[120.09972382 -169.56965637]
[109.13272095 -159.30670166]
[96.96588135 -150.49925232]
[83.79108429 -143.28620911]
[69.81612396 -137.78132629]
[73.52228546 -123.24638367]
[77.22844696 -108.71144867]
[80.93460846 -94.17651367]
[84.64076996 -79.64157867]
[88.34693146 -65.10663605]
[92.05309296 -50.57170486]
[95.75925446 -36.03676605]
[99.46541595 -21.50183105]
[103.17157745 -6.96689510]
[108.94609833 -20.81084251]
[120.41034698 -30.48405838]
[135.02851868 -33.84691620]
[149.56723022 -30.15558624]
[160.81063843 -20.22655106]
[166.27182007 -6.25602484]
[164.74278259 8.66584110]
[156.56176758 21.23846817]
[143.53833008 28.68090439]
[128.55311584 29.34695625]
[114.92074585 23.08929443]
[105.65573120 11.29025745]
[105.96778870 26.28701019]
[120.30007935 28.88652802]
[133.84484863 34.24481201]
[146.07666016 42.15399170]
[156.52096558 52.30724335]
[164.77261353 64.31067657]
[170.51147461 77.69864655]
[173.51493835 91.95176697]
[173.66645813 106.51710510]
[170.96017456 120.82962799]
[165.50106812 134.33407593]
[157.50093079 146.50659180]
[147.27009583 156.87492371]
[135.20549011 165.03686523]
[121.77511597 170.67576599]
[107.50000000 173.57289124]
[107.50000000 188.57289124]
[107.50000000 203.57289124]
[107.50000000 218.57289124]
[107.50000000 233.57289124]
[107.50000000 248.57289124]
[107.50000000 263.57287598]
[107.50000000 278.57287598]
[107.50000000 293.57287598]
[107.50000000 308.57287598]
[122.03988647 312.63418579]
[134.94427490 320.46871948]
[145.25555420 331.49502563]
[152.20857239 344.89495850]
[155.28736877 359.67413330]
[154.26348877 374.73580933]
[149.21287537 388.96234131]
[140.51036072 401.29800415]
[128.80169678 410.82742310]
[114.95575714 416.84344482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 116]
[35 115]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[45 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
