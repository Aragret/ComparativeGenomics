%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACUCCAACUCGGGGGGGGGGAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCxxxxxxxxxxACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCCCCCCCCCCCAACACUCCACCUC\
) } def
/len { sequence length } bind def

/coor [
[74.19991302 388.10202026]
[59.83766174 383.59530640]
[46.67677307 376.28942871]
[35.25617599 366.48355103]
[26.04353523 354.57928467]
[19.41610718 341.06402588]
[15.64527798 326.49124146]
[14.88546085 311.45770264]
[17.16777039 296.57897949]
[22.39874840 282.46438599]
[30.36418724 269.69189453]
[40.73790741 258.78451538]
[53.09511566 250.18891907]
[66.92978668 244.25708008]
[81.67539978 241.23190308]
[81.67539978 226.23190308]
[81.67539978 211.23190308]
[81.67539978 196.23190308]
[81.67539978 181.23190308]
[81.67539978 166.23190308]
[81.67539978 151.23190308]
[81.67539978 136.23190308]
[81.67539978 121.23190308]
[77.86473083 106.72401428]
[70.49343109 93.66017151]
[63.12213135 80.59633636]
[55.75082779 67.53249359]
[48.37952805 54.46865463]
[34.75759125 60.76858902]
[20.67288971 65.95197296]
[6.21676874 69.98519897]
[-8.51701736 72.84210205]
[-23.43291092 74.50415039]
[-38.43417740 74.96057129]
[-53.42352676 74.20841217]
[-68.30374146 72.25253296]
[-82.97832489 69.10562897]
[-97.35209656 64.78810883]
[-111.33184052 59.32797623]
[-124.82688904 52.76063538]
[-137.74972534 45.12868500]
[-150.01654053 36.48161697]
[-161.54776001 26.87551689]
[-172.26861572 16.37268257]
[-182.10957336 5.04122829]
[-191.00680542 -7.04535437]
[-198.90261841 -19.80867958]
[-205.74580383 -33.16596985]
[-211.49197388 -47.03059387]
[-216.10386658 -61.31264114]
[-219.55155945 -75.91947937]
[-221.81271362 -90.75637817]
[-222.87263489 -105.72711182]
[-222.72448730 -120.73458862]
[-221.36920166 -135.68147278]
[-218.81556702 -150.47084045]
[-215.08016968 -165.00675964]
[-210.18722534 -179.19497681]
[-204.16845703 -192.94346619]
[-197.06289673 -206.16304016]
[-188.91664124 -218.76800537]
[-179.78251648 -230.67657471]
[-169.71977234 -241.81153870]
[-158.79365540 -252.10066223]
[-147.07502747 -261.47723389]
[-134.63989258 -269.88043213]
[-121.56890106 -277.25576782]
[-107.94683075 -283.55541992]
[-93.86201477 -288.73849487]
[-79.40580750 -292.77139282]
[-64.67195892 -295.62796021]
[-49.75602341 -297.28970337]
[-34.75474930 -297.74578857]
[-19.76541519 -296.99328613]
[-4.88524151 -295.03707886]
[9.78927040 -291.88986206]
[24.16294861 -287.57202148]
[38.14257050 -282.11157227]
[51.63747787 -275.54394531]
[64.56014252 -267.91171265]
[76.82675934 -259.26437378]
[88.35777283 -249.65802002]
[99.07839966 -239.15493774]
[108.91910553 -227.82327271]
[117.81607819 -215.73649597]
[125.71160889 -202.97299194]
[132.55450439 -189.61555481]
[138.30035400 -175.75079346]
[142.91192627 -161.46865845]
[146.35931396 -146.86174011]
[148.62013245 -132.02479553]
[149.67973328 -117.05403137]
[149.53125000 -102.04656219]
[148.17562866 -87.09970093]
[145.62167358 -72.31039429]
[141.88595581 -57.77454758]
[136.99269104 -43.58644485]
[130.97361755 -29.83809662]
[123.86777496 -16.61866951]
[115.72124481 -4.01389456]
[106.58686066 7.89447784]
[96.52386475 19.02921677]
[85.59751892 29.31810760]
[73.87868500 38.69442368]
[61.44336700 47.09735489]
[68.81466675 60.16119385]
[76.18597412 73.22503662]
[83.55727386 86.28887177]
[90.92857361 99.35271454]
[90.25941467 79.96040344]
[119.87110901 70.62055969]
[134.87037659 70.47237396]
[149.86964417 70.32418823]
[156.79141235 56.67326736]
[169.27095032 47.81212997]
[184.44055176 45.77700806]
[198.81436157 51.03555679]
[209.08937073 62.37939835]
[212.90446472 77.20180511]
[209.38296509 92.09668732]
[199.33407593 103.64131927]
[185.06697083 109.18282318]
[169.86012268 107.44780731]
[157.20794678 98.83496094]
[150.01783752 85.32345581]
[135.01856995 85.47164154]
[120.01929474 85.61982727]
[116.49600983 100.20017242]
[129.77255249 107.18111420]
[146.12858582 105.99292755]
[155.11044312 119.71365356]
[147.47834778 134.22857666]
[131.08355713 134.60600281]
[122.79161072 120.45764923]
[109.51506805 113.47671509]
[96.67539978 121.23190308]
[96.67539978 136.23190308]
[96.67539978 151.23190308]
[96.67539978 166.23190308]
[96.67539978 181.23190308]
[96.67539978 196.23190308]
[96.67539978 211.23190308]
[96.67539978 226.23190308]
[96.67539978 241.23190308]
[111.42102051 244.25708008]
[125.25569153 250.18891907]
[137.61289978 258.78451538]
[147.98661804 269.69189453]
[155.95205688 282.46438599]
[161.18302917 296.57897949]
[163.46534729 311.45770264]
[162.70552063 326.49124146]
[158.93469238 341.06402588]
[152.30726624 354.57928467]
[143.09463501 366.48355103]
[131.67402649 376.28942871]
[118.51314545 383.59530640]
[104.15089417 388.10202026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 109]
[25 108]
[26 107]
[27 106]
[28 105]
[111 127]
[112 126]
[113 125]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
