%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCACCGGGGGGGGGGAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGxxxxxxxxxxCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGCCCCCCCCCCAUGACCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.47869873 366.11492920]
[80.63275909 360.09890747]
[68.92409515 350.56948853]
[60.22157288 338.23379517]
[55.17097092 324.00729370]
[54.14707947 308.94561768]
[57.22587967 294.16644287]
[64.17890167 280.76651001]
[74.49018860 269.74017334]
[87.39456940 261.90567017]
[101.93445587 257.84436035]
[101.93445587 242.84436035]
[101.93445587 227.84436035]
[101.93445587 212.84436035]
[101.93445587 197.84436035]
[101.93445587 182.84436035]
[101.93445587 167.84436035]
[101.93445587 152.84436035]
[101.93445587 137.84436035]
[101.93445587 122.84436035]
[101.53340149 137.83900452]
[92.77635956 150.01742554]
[78.68949890 155.17111206]
[64.14086914 151.51908875]
[54.15806198 140.32339478]
[52.19087219 125.45294952]
[58.91909790 112.04656982]
[72.01765442 104.73713684]
[86.96036530 106.05071259]
[72.05846405 104.33802795]
[57.06170654 104.02597046]
[42.10145950 105.11727905]
[27.14121056 106.20858765]
[12.18096161 107.29989624]
[-3.17630053 114.48257446]
[-14.32958889 101.71384430]
[-5.14740229 87.46169281]
[11.08965015 92.33965302]
[26.04990005 91.24833679]
[41.01014709 90.15702820]
[55.97039795 89.06571960]
[43.90741348 80.15031433]
[38.44107819 66.18180847]
[41.24893951 51.44695663]
[51.46930313 40.46769333]
[65.96566772 36.61341858]
[80.28928375 41.06695938]
[90.04441833 52.46158218]
[92.23734283 67.30041504]
[86.19507599 81.02962494]
[73.77114868 89.43611908]
[88.67304993 91.14881134]
[102.51627350 85.37253571]
[111.78121948 73.57589722]
[121.04617310 61.77925873]
[130.31111145 49.98262024]
[139.57606506 38.18597794]
[130.84342957 25.87253380]
[125.93927002 11.61169529]
[125.25295258 -3.43802285]
[128.83157349 -18.05656624]
[136.37678528 -31.06124306]
[147.26974487 -41.40241241]
[160.62173462 -48.24819565]
[175.34681702 -51.05140686]
[190.25000000 -49.59325790]
[204.12435913 -44.00043106]
[213.38929749 -55.79706955]
[222.65425110 -67.59371185]
[231.91920471 -79.39035034]
[217.42408752 -75.53135681]
[202.76805115 -78.72516632]
[191.19285583 -88.26534271]
[185.25883484 -102.04167938]
[186.27854919 -117.00697327]
[194.02642822 -129.85105896]
[206.78872681 -137.73292542]
[221.74253845 -138.90917969]
[235.58021545 -133.11964417]
[245.24098206 -121.64492035]
[248.58799744 -107.02310181]
[244.87997437 -92.48664856]
[256.57958984 -101.87380981]
[268.27920532 -111.26097107]
[279.97885132 -120.64813232]
[291.58016968 -130.15649414]
[303.08200073 -139.78501892]
[308.69720459 -154.57623291]
[323.42288208 -156.81303406]
[334.92468262 -166.44155884]
[346.42648315 -176.07008362]
[343.69793701 -191.18466187]
[348.90731812 -205.63311768]
[360.65335083 -215.52888489]
[375.77642822 -218.21005249]
[390.20846558 -212.95539856]
[400.06738281 -201.17840576]
[402.70111084 -186.04701233]
[397.40124512 -171.63150024]
[385.59341431 -161.80957031]
[370.45385742 -159.22325134]
[356.05502319 -164.56828308]
[344.55322266 -154.93975830]
[333.05142212 -145.31123352]
[328.25888062 -131.20870972]
[312.71051025 -128.28321838]
[301.20870972 -118.65469360]
[298.07839966 -111.90584564]
[289.36599731 -108.94850922]
[277.66638184 -99.56134796]
[265.96676636 -90.17418671]
[254.26713562 -80.78702545]
[243.71585083 -70.12539673]
[234.45089722 -58.32875824]
[225.18594360 -46.53211975]
[215.92098999 -34.73548126]
[224.64250183 -22.58177376]
[229.59094238 -8.44867897]
[230.35719299 6.52124548]
[226.87062073 21.11523819]
[219.40550232 34.14857864]
[208.55937195 44.56076431]
[195.20533752 51.50180054]
[180.42169189 54.40158081]
[165.40487671 53.01671982]
[151.37271118 47.45092773]
[142.10775757 59.24757004]
[132.84280396 71.04421234]
[123.57785797 82.84085083]
[114.31291199 94.63748932]
[116.93445587 122.84436035]
[116.93445587 137.84436035]
[116.93445587 152.84436035]
[116.93445587 167.84436035]
[116.93445587 182.84436035]
[116.93445587 197.84436035]
[116.93445587 212.84436035]
[116.93445587 227.84436035]
[116.93445587 242.84436035]
[116.93445587 257.84436035]
[131.47433472 261.90567017]
[144.37872314 269.74017334]
[154.69000244 280.76651001]
[161.64302063 294.16644287]
[164.72183228 308.94561768]
[163.69793701 324.00729370]
[158.64733887 338.23379517]
[149.94480896 350.56948853]
[138.23614502 360.09890747]
[124.39020538 366.11492920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 52]
[30 51]
[31 41]
[32 40]
[33 39]
[34 38]
[53 130]
[54 129]
[55 128]
[56 127]
[57 126]
[67 116]
[68 115]
[69 114]
[70 113]
[82 112]
[83 111]
[84 110]
[85 109]
[86 107]
[87 106]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
