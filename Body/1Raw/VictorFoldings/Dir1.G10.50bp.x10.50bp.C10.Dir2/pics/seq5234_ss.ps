%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUCUUAGCGGGGGGGGGGAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAxxxxxxxxxxUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAACCCCCCCCCCAAAAUCGUAGC\
) } def
/len { sequence length } bind def

/coor [
[70.33514404 445.28274536]
[56.31320190 439.72973633]
[44.11324692 430.86340332]
[34.50217438 419.24108887]
[28.08414841 405.59338379]
[25.26261139 390.77819824]
[26.21492767 375.72683716]
[30.88123322 361.38540649]
[38.96820068 348.65545654]
[49.96747589 338.33718872]
[63.18763351 331.07919312]
[77.79764557 327.33776855]
[77.79764557 312.33776855]
[77.79764557 297.33776855]
[77.79764557 282.33776855]
[77.79764557 267.33776855]
[77.79764557 252.33776855]
[77.79764557 237.33776855]
[77.79764557 222.33776855]
[77.79764557 207.33776855]
[77.79764557 192.33776855]
[72.25508118 187.28504944]
[62.14945984 198.37001038]
[51.06466293 188.26420593]
[61.16994476 177.17961121]
[55.62737656 172.12689209]
[40.69136429 173.51092529]
[25.75535393 174.89494324]
[10.81934071 176.27897644]
[5.97526073 190.71693420]
[-4.32725716 201.93202209]
[-18.30323982 207.98112488]
[-33.53126144 207.81623840]
[-47.37298203 201.46589661]
[-57.43022919 190.03036499]
[-61.96053314 175.49089050]
[-60.17898941 160.36653137]
[-52.39425659 147.27769470]
[-39.95509338 138.49208069]
[-25.01665497 135.53184509]
[-10.16711712 138.90988159]
[2.02074623 148.04092407]
[9.43531513 161.34295654]
[24.37132835 159.95893860]
[39.30733871 158.57490540]
[54.24335480 157.19088745]
[66.66166687 148.77746582]
[73.48524475 135.41937256]
[80.30881500 122.06127167]
[64.66062927 99.97560120]
[72.66887665 69.29398346]
[105.40123749 53.43603134]
[103.25266266 38.59070969]
[101.10408020 23.74538803]
[98.95550537 8.90006447]
[96.80692291 -5.94525766]
[92.45639038 -14.04887676]
[94.76988220 -21.11711121]
[92.92655945 -36.00341797]
[91.08322906 -50.88972473]
[76.09484100 -52.40493393]
[61.81957245 -57.21787643]
[48.97346497 -65.08714294]
[38.20087814 -75.61800385]
[30.04216003 -88.28224945]
[24.90654564 -102.44463348]
[23.05163765 -117.39479065]
[24.57047653 -132.38281250]
[29.38687706 -146.65692139]
[37.25925446 -159.50111389]
[47.79272842 -170.27114868]
[60.45894623 -178.42680359]
[74.62258148 -183.55897522]
[89.57318115 -185.41026306]
[104.56083679 -183.88780212]
[118.83377075 -179.06793213]
[131.67605591 -171.19244385]
[142.44354248 -160.65635681]
[150.59613037 -147.98817444]
[155.72486877 -133.82328796]
[157.57254028 -118.87224579]
[156.04643250 -103.88495636]
[151.22311401 -89.61318970]
[143.34451294 -76.77281189]
[132.80583191 -66.00788116]
[120.13565826 -57.85836792]
[105.96954346 -52.73305130]
[107.81286621 -37.84674454]
[109.65618896 -22.96043587]
[111.65224457 -8.09383678]
[113.80082703 6.75148582]
[115.94940186 21.59680939]
[118.09798431 36.44213104]
[120.24655914 51.28745270]
[133.80845642 57.69643021]
[146.64210510 49.93129349]
[159.47576904 42.16616058]
[172.30941772 34.40102386]
[185.14306641 26.63588715]
[192.57096863 12.01540947]
[208.95887756 11.40822792]
[217.44831848 25.43896103]
[209.30607605 39.67399216]
[192.90820312 39.46954346]
[180.07455444 47.23467636]
[167.24090576 54.99981308]
[154.40724182 62.76494980]
[141.57359314 70.53008270]
[142.95172119 77.90238190]
[157.69630432 75.14614105]
[172.44094849 72.39014435]
[175.19670105 87.13482666]
[160.45256042 89.89073181]
[145.70796204 92.64698029]
[147.08607483 100.01927948]
[161.85820007 102.62400055]
[175.77172852 94.63694763]
[190.63763428 100.66890717]
[195.05204773 116.09267426]
[185.62861633 129.07644653]
[169.59619141 129.66020203]
[159.25347900 117.39611816]
[144.48135376 114.79138947]
[132.88595581 127.00012207]
[118.89179993 133.22863770]
[105.08444977 133.51377869]
[93.66691589 128.88484192]
[86.84334564 142.24295044]
[80.01976776 155.60104370]
[89.67073822 162.64480591]
[95.09390259 175.84317017]
[92.79764557 192.33776855]
[92.79764557 207.33776855]
[92.79764557 222.33776855]
[92.79764557 237.33776855]
[92.79764557 252.33776855]
[92.79764557 267.33776855]
[92.79764557 282.33776855]
[92.79764557 297.33776855]
[92.79764557 312.33776855]
[92.79764557 327.33776855]
[107.40766144 331.07919312]
[120.62781525 338.33718872]
[131.62709045 348.65545654]
[139.71406555 361.38540649]
[144.38037109 375.72683716]
[145.33267212 390.77819824]
[142.51113892 405.59338379]
[136.09312439 419.24108887]
[126.48204803 430.86340332]
[114.28208923 439.72973633]
[100.26014709 445.28274536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 46]
[27 45]
[28 44]
[29 43]
[47 129]
[48 128]
[49 127]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[58 89]
[59 88]
[60 87]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
