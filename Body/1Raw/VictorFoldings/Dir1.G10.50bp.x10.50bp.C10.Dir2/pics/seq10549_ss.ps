%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACGACCCGGGGGGGGGGCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCxxxxxxxxxxUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCCCCCCCCCCCUUACCACCC\
) } def
/len { sequence length } bind def

/coor [
[90.19361115 367.60809326]
[76.97341919 360.33563232]
[66.08661652 349.88861084]
[58.27548218 336.97937012]
[54.07260132 322.48806763]
[53.76453018 307.40270996]
[57.37226868 292.75189209]
[64.64984131 279.53451538]
[75.10105133 268.65173340]
[88.01331329 260.84558105]
[102.50624847 256.64831543]
[102.19419098 241.65155029]
[101.88213348 226.65480042]
[101.57008362 211.65803528]
[101.25802612 196.66128540]
[100.94596863 181.66453552]
[100.63391113 166.66778564]
[100.32185364 151.67102051]
[100.00979614 136.67427063]
[99.69774628 121.67752075]
[92.78176880 134.98802185]
[88.53081512 149.37306213]
[77.41686249 159.44679260]
[62.68460464 162.26821899]
[48.63507462 157.01362610]
[39.36999893 145.21707153]
[37.59429550 130.32255554]
[43.82637405 116.67845917]
[56.24679184 108.26815796]
[71.23001862 107.54714203]
[85.80031586 103.98255920]
[71.30472565 100.12539673]
[56.80912781 96.26824188]
[43.24890518 103.93362427]
[28.60325623 99.81542206]
[21.37904739 86.84058380]
[6.88345098 82.98342896]
[-7.61214542 79.12626648]
[-17.92364883 90.43695068]
[-32.31431961 95.64916229]
[-47.47728729 93.56517792]
[-59.92821503 84.66388702]
[-66.80596924 70.99073029]
[-66.53009033 55.68770981]
[-59.16397095 42.27133942]
[-46.40029907 33.82460785]
[-31.17206955 32.28851318]
[-16.97861862 38.01603317]
[-7.08149433 49.69102859]
[-3.75498605 64.63066864]
[10.74061012 68.48783112]
[25.23620796 72.34499359]
[37.95346069 64.67641449]
[52.70900345 68.38162231]
[60.66628647 81.77264404]
[75.16188049 85.62980652]
[89.65747833 89.48696136]
[104.06969452 85.32907867]
[114.28317261 74.34340668]
[124.49665833 63.35774612]
[114.49266052 52.16646194]
[105.56395721 40.09986115]
[97.78672028 27.26088715]
[91.22730255 13.75908470]
[85.94167328 -0.29035464]
[81.97492218 -14.76756191]
[79.36089325 -29.54902077]
[78.12189484 -44.50861740]
[78.26849365 -59.51871872]
[79.79943085 -74.45126343]
[82.70166016 -89.17884827]
[86.95041656 -103.57581329]
[92.50943756 -117.51934052]
[99.33131409 -130.89045715]
[107.35782623 -143.57507324]
[116.52050018 -155.46499634]
[126.74116516 -166.45875549]
[137.93261719 -176.46255493]
[149.99935913 -185.39105225]
[162.83847046 -193.16807556]
[176.34037781 -199.72727966]
[190.38990784 -205.01266479]
[204.86717224 -208.97918701]
[219.64868164 -211.59295654]
[234.60829163 -212.83171082]
[249.61839294 -212.68487549]
[264.55090332 -211.15367126]
[279.27844238 -208.25120544]
[293.67535400 -204.00221252]
[307.61877441 -198.44294739]
[320.98977661 -191.62086487]
[333.67428589 -183.59413147]
[345.56402588 -174.43125916]
[356.55761719 -164.21041870]
[366.56124878 -153.01879883]
[375.48953247 -140.95190430]
[383.26635742 -128.11267090]
[389.82531738 -114.61064911]
[395.11047363 -100.56102753]
[399.07675171 -86.08369446]
[401.69027710 -71.30214691]
[402.92880249 -56.34251022]
[402.78167725 -41.33241272]
[401.25024414 -26.39991951]
[398.34753418 -11.67243195]
[394.09829712 2.72439647]
[388.53881836 16.66773605]
[381.71649170 30.03862381]
[373.68954468 42.72298050]
[364.52648926 54.61259079]
[354.30545044 65.60600281]
[343.11367798 75.60943604]
[331.04663086 84.53753662]
[318.20727539 92.31413269]
[304.70513916 98.87287903]
[290.65542603 104.15780640]
[276.17800903 108.12383270]
[261.39642334 110.73712158]
[246.43678284 111.97537994]
[231.42668152 111.82803345]
[216.49421692 110.29634094]
[201.76678467 107.39337921]
[187.37002563 103.14390564]
[173.42677307 97.58418274]
[160.05599976 90.76164246]
[147.37178040 82.73449707]
[135.48231506 73.57122803]
[125.26883698 84.55689240]
[115.05535889 95.54255676]
[114.69449615 121.36546326]
[115.00655365 136.36221313]
[115.31861115 151.35896301]
[115.63066864 166.35572815]
[115.94271851 181.35247803]
[116.25477600 196.34922791]
[116.56683350 211.34597778]
[116.87889099 226.34274292]
[117.19094849 241.33949280]
[117.50300598 256.33624268]
[132.15798950 259.92700195]
[145.38380432 267.18927002]
[156.27867126 277.62786865]
[164.09977722 290.53106689]
[168.31384277 305.01913452]
[168.63356018 320.10424805]
[165.03713989 334.75784302]
[157.76977539 347.98083496]
[147.32696533 358.87167358]
[134.42074585 366.68780518]
[119.93105316 370.89627075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[31 57]
[32 56]
[33 55]
[36 52]
[37 51]
[38 50]
[58 129]
[59 128]
[60 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
