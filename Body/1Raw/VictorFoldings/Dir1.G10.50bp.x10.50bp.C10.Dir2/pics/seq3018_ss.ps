%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAUAGGGGGGGGGGGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUAUxxxxxxxxxxUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCCCCCCCCCCCACCAAUAGG\
) } def
/len { sequence length } bind def

/coor [
[108.63134003 425.33248901]
[99.77416229 413.11721802]
[94.38123322 399.02542114]
[92.82025909 384.01788330]
[95.19766998 369.11788940]
[101.35135651 355.34127808]
[110.86176300 343.62741089]
[123.08045197 334.77496338]
[137.17433167 329.38748169]
[135.61674500 314.46856689]
[134.05917358 299.54965210]
[132.50158691 284.63073730]
[130.94401550 269.71182251]
[129.38642883 254.79292297]
[127.82884979 239.87400818]
[118.81179047 228.01896667]
[125.07427216 213.48995972]
[123.51669312 198.57106018]
[121.95910645 183.65214539]
[120.40152740 168.73323059]
[118.84394836 153.81431580]
[117.28636932 138.89540100]
[115.72878265 123.97649384]
[114.17120361 109.05757904]
[102.56250000 115.28150940]
[91.20207214 111.10943604]
[77.07727051 116.15818787]
[66.88193512 129.00292969]
[50.70232391 126.32854462]
[45.18264008 110.88623047]
[56.00105667 98.56170654]
[72.02851868 102.03338623]
[86.15332031 96.98463440]
[97.26947784 84.74761963]
[114.17120361 90.94242096]
[115.72878265 76.02350616]
[117.28636932 61.10459518]
[107.60675812 48.90037918]
[109.39889526 33.79266739]
[121.09339905 24.63984871]
[122.65097809 9.72093773]
[124.20856476 -5.19797468]
[117.36977386 -10.95417023]
[113.46396637 -18.79861069]
[113.01109314 -27.37387085]
[99.62480927 -34.14198685]
[83.99525452 -30.52306366]
[71.51099396 -40.59891129]
[71.74887848 -56.64020157]
[84.52642822 -66.34143066]
[100.04180145 -62.26064301]
[106.39292908 -47.52827072]
[119.77921295 -40.76015472]
[125.98027039 -44.65338135]
[133.14259338 -46.17369461]
[138.04415894 -60.35025406]
[142.94570923 -74.52680969]
[147.84725952 -88.70336914]
[147.69958496 -97.90283203]
[153.00105286 -103.12203979]
[158.19645691 -117.19355774]
[144.92218018 -124.22753906]
[132.70391846 -132.96809387]
[121.75971222 -143.25926208]
[112.28488922 -154.91734314]
[104.44853210 -167.73432922]
[98.39048767 -181.48146057]
[94.21887207 -195.91340637]
[92.00813293 -210.77261353]
[91.79772949 -225.79389954]
[93.59140015 -240.70919800]
[97.35714722 -255.25233459]
[103.02776337 -269.16375732]
[110.50205231 -282.19519043]
[119.64662170 -294.11410522]
[130.29827881 -304.70776367]
[142.26693726 -313.78710938]
[155.33898926 -321.19012451]
[169.28115845 -326.78472900]
[183.84463501 -330.47100830]
[198.76950073 -332.18322754]
[213.78942871 -331.89077759]
[228.63633728 -329.59896851]
[243.04528809 -325.34860229]
[256.75915527 -319.21560669]
[269.53314209 -311.30938721]
[281.13934326 -301.77102661]
[291.37057495 -290.77081299]
[300.04431152 -278.50500488]
[307.00570679 -265.19250488]
[312.13055420 -251.07092285]
[315.32736206 -236.39224243]
[316.53915405 -221.41842651]
[315.74420166 -206.41671753]
[312.95678711 -191.65481567]
[308.22659302 -177.39617920]
[301.63806152 -163.89526367]
[293.30877686 -151.39300537]
[283.38735962 -140.11253357]
[272.05087280 -130.25515747]
[259.50167847 -121.99679565]
[245.96365356 -115.48482513]
[231.67846680 -110.83545685]
[216.90101624 -108.13166046]
[201.89503479 -107.42169952]
[186.92832947 -108.71823883]
[172.26799011 -111.99813843]
[167.07257080 -97.92662048]
[162.02381897 -83.80181885]
[157.12225342 -69.62525940]
[152.22070312 -55.44870377]
[147.31915283 -41.27214432]
[154.86657715 -20.33096123]
[139.12747192 -3.64039397]
[137.56990051 11.27851868]
[136.01231384 26.19742966]
[145.56407166 37.56842422]
[144.19699097 52.72051239]
[132.20527649 62.66217422]
[130.64770508 77.58108521]
[129.09011841 92.50000000]
[129.09011841 107.50000000]
[130.64770508 122.41891479]
[132.20527649 137.33782959]
[133.76286316 152.25672913]
[135.32043457 167.17564392]
[136.87802124 182.09455872]
[138.43560791 197.01347351]
[139.99317932 211.93238831]
[149.12164307 224.85452271]
[142.74775696 238.31642151]
[144.30534363 253.23533630]
[145.86291504 268.15423584]
[147.42050171 283.07315063]
[148.97808838 297.99206543]
[150.53565979 312.91098022]
[152.09324646 327.82989502]
[166.99600220 330.19003296]
[180.77970886 336.32775879]
[192.50457764 345.82461548]
[201.37118530 358.03302002]
[206.77499390 372.12066650]
[208.34756470 387.12698364]
[205.98165894 402.02880859]
[199.83860779 415.81015015]
[190.33724976 427.53137207]
[178.12539673 436.39324951]
[164.03569031 441.79162598]
[149.02876282 443.35839844]
[134.12783813 440.98672485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 137]
[10 136]
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[23 123]
[24 122]
[26 33]
[27 32]
[35 121]
[36 120]
[37 119]
[40 116]
[41 115]
[42 114]
[45 53]
[46 52]
[55 112]
[56 111]
[57 110]
[58 109]
[60 108]
[61 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
