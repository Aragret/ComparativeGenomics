%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUCCCCUCAGGGGGGGGGGGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAxxxxxxxxxxAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGACCCCCCCCCCUGACCCCCCUCAG\
) } def
/len { sequence length } bind def

/coor [
[83.33827972 377.92630005]
[69.63774872 371.66186523]
[57.67499542 362.50543213]
[48.05007553 350.91625977]
[41.24576569 337.47567749]
[37.60337067 322.85787964]
[37.30559158 307.79602051]
[40.36736679 293.04565430]
[46.63511276 279.34664917]
[55.79444504 267.38610840]
[67.38594055 257.76400757]
[80.82816315 250.96295166]
[95.44686890 247.32409668]
[95.14673615 232.32710266]
[94.84660339 217.33010864]
[94.54647064 202.33309937]
[94.24633789 187.33610535]
[93.94620514 172.33911133]
[93.64607239 157.34211731]
[93.34593964 142.34512329]
[93.04581451 127.34812164]
[92.74568176 112.35112000]
[85.67892456 100.28660583]
[92.25732422 87.94901276]
[91.95719147 72.95201111]
[91.65705872 57.95501709]
[91.35692596 42.95801926]
[90.00806427 28.01878929]
[87.61709595 13.21057415]
[85.22612000 -1.59764135]
[82.83514404 -16.40585709]
[80.44416809 -31.21407127]
[78.05319214 -46.02228546]
[63.10068130 -44.74375916]
[48.09443665 -44.58621216]
[33.11838150 -45.55052948]
[18.25626183 -47.63132095]
[3.59120226 -50.81694794]
[-10.79478741 -55.08959579]
[-24.82125473 -60.42536545]
[-38.40975571 -66.79441833]
[-51.48429489 -74.16114044]
[-63.97175598 -82.48433685]
[-75.80230713 -91.71744537]
[-86.90977478 -101.80883789]
[-97.23205566 -112.70208740]
[-106.71141052 -124.33625793]
[-115.29483032 -136.64630127]
[-122.93431854 -149.56336975]
[-129.58714294 -163.01521301]
[-135.21611023 -176.92660522]
[-139.78971863 -191.21975708]
[-143.28240967 -205.81474304]
[-145.67463684 -220.62991333]
[-146.95303345 -235.58244324]
[-147.11044312 -250.58868408]
[-146.14599609 -265.56472778]
[-144.06507874 -280.42681885]
[-140.87931824 -295.09185791]
[-136.60655212 -309.47781372]
[-131.27064514 -323.50424194]
[-124.90147400 -337.09268188]
[-117.53463745 -350.16714478]
[-109.21134186 -362.65454102]
[-99.97812653 -374.48501587]
[-89.88662720 -385.59240723]
[-78.99329376 -395.91458130]
[-67.35903168 -405.39382935]
[-55.04891968 -413.97714233]
[-42.13179016 -421.61651611]
[-28.67988586 -428.26922607]
[-14.76843739 -433.89804077]
[-0.47524235 -438.47155762]
[14.11976528 -441.96411133]
[28.93496132 -444.35620117]
[43.88749313 -445.63446045]
[58.89374161 -445.79174805]
[73.86978149 -444.82717896]
[88.73186493 -442.74612427]
[103.39686584 -439.56024170]
[117.78278351 -435.28732300]
[131.80915833 -429.95132446]
[145.39753723 -423.58203125]
[158.47195435 -416.21505737]
[170.95927429 -407.89166260]
[182.78965759 -398.65832520]
[193.89694214 -388.56674194]
[204.21903992 -377.67330933]
[213.69818115 -366.03897095]
[222.28138733 -353.72879028]
[229.92065430 -340.81158447]
[236.57324219 -327.35961914]
[242.20195007 -313.44812012]
[246.77531433 -299.15487671]
[250.26774597 -284.55984497]
[252.65971375 -269.74462891]
[253.93785095 -254.79208374]
[254.09500122 -239.78584290]
[253.13027954 -224.80981445]
[251.04910278 -209.94773865]
[247.86308289 -195.28277588]
[243.59005737 -180.89689636]
[238.25392151 -166.87057495]
[231.88450623 -153.28224182]
[224.51742554 -140.20788574]
[216.19390869 -127.72064972]
[206.96047974 -115.89034271]
[196.86878967 -104.78314209]
[185.97528076 -94.46115112]
[174.34085083 -84.98210144]
[162.03057861 -76.39900208]
[149.11332703 -68.75985718]
[135.66130066 -62.10739136]
[121.74975586 -56.47880173]
[107.45647430 -51.90556335]
[92.86141205 -48.41326141]
[95.25238037 -33.60504532]
[97.64335632 -18.79683113]
[100.03433228 -3.98861623]
[102.42530823 10.81959915]
[104.81628418 25.62781525]
[113.86277008 13.66282272]
[128.44517517 10.14803410]
[141.94940186 16.67763329]
[148.25042725 30.29002190]
[144.49031067 44.81109238]
[132.37451172 53.65459824]
[117.39834595 52.80942535]
[106.35392761 42.65788651]
[106.65406036 57.65488434]
[106.95418549 72.65187836]
[107.25431824 87.64888000]
[114.32107544 99.71339417]
[107.74267578 112.05098724]
[108.04280853 127.04798889]
[108.34294128 142.04498291]
[108.64307404 157.04197693]
[108.94320679 172.03897095]
[109.24333954 187.03598022]
[109.54347229 202.03297424]
[109.84359741 217.02996826]
[110.14373016 232.02696228]
[110.44386292 247.02395630]
[125.19644928 250.07501221]
[138.90002441 256.33279419]
[150.86721802 265.48342896]
[160.49774170 277.06793213]
[167.30856323 290.50521851]
[170.95803833 305.12127686]
[171.26312256 320.18295288]
[168.20849609 334.93481445]
[161.94738770 348.63687134]
[152.79385376 360.60183716]
[141.20703125 370.22955322]
[127.76809692 377.03713989]
[113.15116119 380.68307495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 143]
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[24 132]
[25 131]
[26 130]
[27 129]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[33 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
