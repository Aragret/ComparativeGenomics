%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCAACAAGGGGGGGGGGUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAxxxxxxxxxxCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCCCCCCCCCCCACCCAUCAA\
) } def
/len { sequence length } bind def

/coor [
[80.43547058 378.73397827]
[66.58953094 372.71792603]
[54.88086700 363.18850708]
[46.17834473 350.85284424]
[41.12774277 336.62634277]
[40.10385132 321.56463623]
[43.18265152 306.78549194]
[50.13567352 293.38555908]
[60.44695663 282.35922241]
[73.35133362 274.52471924]
[87.89122009 270.46340942]
[87.89122009 255.46340942]
[87.89122009 240.46340942]
[87.89122009 225.46340942]
[87.89122009 210.46340942]
[87.89122009 195.46340942]
[87.89122009 180.46340942]
[87.89122009 165.46340942]
[87.89122009 150.46340942]
[87.89122009 135.46340942]
[74.95317078 127.87350464]
[61.86001205 135.19261169]
[48.76685715 142.51171875]
[40.84046173 156.86804199]
[24.44137192 156.91117859]
[16.43956566 142.59674072]
[25.06661606 128.65019226]
[41.44775391 129.41856384]
[54.54090881 122.09944916]
[67.63406372 114.78034973]
[65.81876373 106.86489868]
[65.87094879 98.90821838]
[67.71295166 91.33626556]
[71.17325592 84.53742981]
[75.99945068 78.84266663]
[81.87521362 74.50945282]
[88.44031525 71.71051788]
[95.31219482 70.52764130]
[102.10812378 70.95082855]
[107.00967407 56.77427292]
[111.91123199 42.59771347]
[116.81278229 28.42115593]
[114.00971222 12.85024166]
[125.48115540 3.34996605]
[130.38270569 -10.82659245]
[113.40159607 -18.81929207]
[106.00389099 -35.07433319]
[110.64041138 -51.37850571]
[123.97808838 -60.29256058]
[124.29014587 -75.28931427]
[116.84161377 -89.24746704]
[124.84201813 -101.81101990]
[112.51216888 -114.17678833]
[112.90024567 -131.29792786]
[125.28100586 -142.63700867]
[125.28100586 -157.63700867]
[125.28100586 -172.63700867]
[125.28100586 -187.63700867]
[110.89883423 -195.73217773]
[102.59269714 -209.88504028]
[102.53864288 -226.20150757]
[110.65710449 -240.24688721]
[124.66006470 -248.25119019]
[124.34800720 -263.24795532]
[124.03594971 -278.24468994]
[123.72389221 -293.24145508]
[109.29673767 -297.83883667]
[97.14554596 -306.87359619]
[88.58837891 -319.36575317]
[84.55345917 -333.96020508]
[85.47846222 -349.07388306]
[91.26305389 -363.06735229]
[101.27976227 -374.42269897]
[114.44205475 -381.90820312]
[129.32217407 -384.71191406]
[144.30604553 -382.52963257]
[157.76834106 -375.59814453]
[168.24873352 -364.66928101]
[174.61042786 -350.92855835]
[176.16334534 -335.86645508]
[172.73902893 -321.11679077]
[164.70892334 -308.27947998]
[152.94407654 -298.74707031]
[138.72064209 -293.55349731]
[139.03269958 -278.55676270]
[139.34475708 -263.55999756]
[139.65681458 -248.56324768]
[152.06007385 -242.76507568]
[160.78628540 -232.12870789]
[164.08064270 -218.70280457]
[161.24182129 -205.10552979]
[152.77021790 -194.01394653]
[140.28100586 -187.63700867]
[140.28100586 -172.63700867]
[140.28100586 -157.63700867]
[140.28100586 -142.63700867]
[150.60198975 -134.86048889]
[154.59996033 -122.36686707]
[150.59384155 -109.67124176]
[139.83877563 -101.49896240]
[147.30961609 -88.61347961]
[139.28689575 -74.97725677]
[138.97483826 -59.98050308]
[147.31457520 -56.36856079]
[153.96757507 -49.45385742]
[157.62966919 -40.03749847]
[157.37887573 -29.42882729]
[172.37156677 -28.96078491]
[187.36427307 -28.49274254]
[202.35696411 -28.02470016]
[217.34965515 -27.55665970]
[232.34236145 -27.08861732]
[248.36244202 -32.63778687]
[258.12954712 -18.77993774]
[247.51707458 -5.55830002]
[231.87431335 -12.09592056]
[216.88162231 -12.56396294]
[201.88891602 -13.03200531]
[186.89622498 -13.50004673]
[171.90353394 -13.96808910]
[156.91082764 -14.43613148]
[144.55926514 -5.92504120]
[139.65771484 8.25151730]
[142.81137085 22.80842972]
[130.98933411 33.32270813]
[126.08778381 47.49926376]
[121.18623352 61.67582321]
[116.28468323 75.85237885]
[130.90162659 95.16629028]
[126.26177979 120.68412018]
[102.89122009 135.46340942]
[102.89122009 150.46340942]
[102.89122009 165.46340942]
[102.89122009 180.46340942]
[102.89122009 195.46340942]
[102.89122009 210.46340942]
[102.89122009 225.46340942]
[102.89122009 240.46340942]
[102.89122009 255.46340942]
[102.89122009 270.46340942]
[117.43111420 274.52471924]
[130.33549500 282.35922241]
[140.64677429 293.38555908]
[147.59979248 306.78549194]
[150.67860413 321.56463623]
[149.65470886 336.62634277]
[144.60411072 350.85284424]
[135.90158081 363.18850708]
[124.19291687 372.71792603]
[110.34697723 378.73397827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 30]
[22 29]
[23 28]
[39 128]
[40 127]
[41 126]
[42 125]
[44 123]
[45 122]
[49 103]
[50 102]
[52 100]
[55 96]
[56 95]
[57 94]
[58 93]
[63 87]
[64 86]
[65 85]
[66 84]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
