%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUAGGAGGGGGGGGGGGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAxxxxxxxxxxGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCCUAGGA\
) } def
/len { sequence length } bind def

/coor [
[88.55805969 526.57519531]
[74.71212769 520.55914307]
[63.00346375 511.02975464]
[54.30093765 498.69409180]
[49.25033569 484.46755981]
[48.22644424 469.40588379]
[51.30524445 454.62670898]
[58.25826645 441.22677612]
[68.56954956 430.20046997]
[81.47393036 422.36593628]
[96.01381683 418.30462646]
[96.01381683 403.30462646]
[96.01381683 388.30462646]
[96.01381683 373.30462646]
[96.01381683 358.30462646]
[96.01381683 343.30462646]
[96.01381683 328.30462646]
[96.01381683 313.30462646]
[96.01381683 298.30462646]
[96.01381683 283.30462646]
[86.42270660 268.64138794]
[95.67696381 252.75622559]
[84.78376007 242.66297913]
[84.25365448 227.45858765]
[94.91423798 216.10122681]
[94.60218048 201.10446167]
[83.70897675 191.01121521]
[83.17887115 175.80682373]
[93.83945465 164.44946289]
[93.52739716 149.45271301]
[93.21534729 134.45596313]
[92.90328979 119.45920563]
[77.26115417 107.26486206]
[77.73146820 84.67992401]
[64.20727539 78.19176483]
[50.68308640 71.70359802]
[38.23550415 75.24076843]
[27.08407784 69.50799561]
[22.98916626 58.08262634]
[9.60288143 51.31451416]
[-3.78340340 44.54639816]
[-17.16968918 37.77828217]
[-30.69387817 31.29011917]
[-44.35012054 25.08471107]
[-58.00635910 18.87930489]
[-73.47184753 23.14525986]
[-86.36444092 13.59746075]
[-86.79405975 -2.43983936]
[-74.43112183 -12.66419506]
[-58.75942993 -9.23235703]
[-51.80095291 5.22306347]
[-38.14471054 11.42847061]
[-24.48847198 17.63387680]
[-19.72631836 16.79876328]
[-14.39525700 18.99218369]
[-10.40157318 24.39199829]
[2.98471141 31.16011429]
[16.37099648 37.92823029]
[29.75728035 44.69634247]
[47.17061615 42.75322342]
[57.17125320 58.17940521]
[70.69544220 64.66757202]
[84.21963501 71.15573883]
[98.67431641 67.14799500]
[106.92660522 54.62203598]
[115.17890167 42.09607315]
[113.18040466 25.02119064]
[124.90324402 13.32662678]
[125.52722168 -1.66038954]
[111.72284698 -8.02494144]
[101.40853882 -19.19112015]
[96.15716553 -33.45616531]
[96.76952362 -48.64476395]
[103.15222931 -62.44075775]
[114.33197021 -72.74036407]
[128.60391235 -77.97296906]
[143.79168701 -77.34062958]
[157.57926941 -70.93978119]
[167.86416626 -59.74650955]
[173.07798767 -45.46769714]
[172.42567444 -30.28076172]
[166.00669861 -16.50160599]
[154.79989624 -6.23144817]
[140.51423645 -1.03641212]
[139.89025879 13.95060444]
[140.77479553 14.41438198]
[141.63320923 14.92491245]
[154.07264709 6.54276896]
[166.51208496 -1.83937442]
[178.95152283 -10.22151756]
[175.00535583 -24.84021950]
[176.02217102 -39.94799423]
[181.89167786 -53.90605927]
[191.97718811 -65.20034790]
[205.18472290 -72.60575104]
[220.08160400 -75.31896973]
[235.05194092 -73.04570770]
[248.47186279 -66.03253937]
[258.88568115 -55.04021454]
[265.16375732 -41.26108551]
[266.62512207 -26.18981934]
[263.11126709 -11.46122742]
[255.00329590 1.32704067]
[243.18075562 10.78780842]
[228.92604065 15.89484406]
[213.78540039 16.09417343]
[199.40118408 11.36417389]
[187.33366394 2.21792269]
[174.89422607 10.60006618]
[162.45478821 18.98220825]
[150.01535034 27.36435318]
[145.22428894 44.49758148]
[127.70485687 50.34836197]
[119.45256805 62.87432480]
[111.20027924 75.40028381]
[123.24445343 91.00566101]
[120.97122192 108.99378204]
[107.90003967 119.14714813]
[108.21209717 134.14390564]
[108.52415466 149.14065552]
[108.83621216 164.13740540]
[119.96001434 175.04147339]
[120.06285095 190.25476074]
[109.59893799 200.79241943]
[109.91099548 215.78916931]
[121.03479767 226.69323730]
[121.13763428 241.90652466]
[110.67372131 252.44416809]
[119.44680023 261.95663452]
[119.36237335 274.49505615]
[111.01381683 283.30462646]
[111.01381683 298.30462646]
[111.01381683 313.30462646]
[111.01381683 328.30462646]
[111.01381683 343.30462646]
[111.01381683 358.30462646]
[111.01381683 373.30462646]
[111.01381683 388.30462646]
[111.01381683 403.30462646]
[111.01381683 418.30462646]
[125.55370331 422.36593628]
[138.45808411 430.20046997]
[148.76936340 441.22677612]
[155.72239685 454.62670898]
[158.80119324 469.40588379]
[157.77729797 484.46755981]
[152.72669983 498.69409180]
[144.02416992 511.02975464]
[132.31550598 520.55914307]
[118.46957397 526.57519531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[25 125]
[26 124]
[29 121]
[30 120]
[31 119]
[32 118]
[34 63]
[35 62]
[36 61]
[39 59]
[40 58]
[41 57]
[42 56]
[43 53]
[44 52]
[45 51]
[64 115]
[65 114]
[66 113]
[68 85]
[69 84]
[87 111]
[88 110]
[89 109]
[90 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
