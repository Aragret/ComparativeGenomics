%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCACCUCUGGGGGGGGGGUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAxxxxxxxxxxAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCCCCCCCCCCCACCCCCUCU\
) } def
/len { sequence length } bind def

/coor [
[94.82760620 411.69403076]
[80.33791351 407.48556519]
[67.43168640 399.66943359]
[56.98888016 388.77859497]
[49.72151947 375.55560303]
[46.12509155 360.90200806]
[46.44481277 345.81689453]
[50.65888214 331.32882690]
[58.47998047 318.42562866]
[69.37484741 307.98703003]
[82.60065460 300.72476196]
[97.25565338 297.13400269]
[97.56770325 282.13723755]
[97.87976074 267.14050293]
[98.19181824 252.14373779]
[98.50387573 237.14698792]
[98.81593323 222.15023804]
[99.12799072 207.15348816]
[99.44004059 192.15672302]
[99.75209808 177.15997314]
[96.72726440 170.36320496]
[100.22988129 161.85536194]
[100.85385895 146.86834717]
[101.47783661 131.88133240]
[79.57801056 120.38303375]
[74.23851013 98.75655365]
[60.11370850 93.70779419]
[45.98890686 88.65903473]
[31.86410332 83.61028290]
[17.73929977 78.56152344]
[25.99317169 91.08644104]
[27.60880280 105.99918365]
[22.22883034 120.00117493]
[11.04325390 129.99531555]
[-3.47378016 133.77099609]
[-18.11123657 130.49305725]
[-29.63144684 120.88656616]
[-35.48624420 107.07637787]
[-34.38060379 92.11717987]
[-26.55908012 79.31781006]
[-13.75172520 71.50937653]
[1.21054876 70.41934967]
[-11.40057945 62.29780960]
[-27.19221687 61.33097076]
[-33.70331192 47.93489075]
[-46.31444168 39.81335068]
[-58.92556763 31.69180870]
[-71.53669739 23.57026672]
[-86.92799377 27.15963745]
[-100.30504608 18.74358559]
[-103.73149109 3.31520128]
[-95.17447662 -9.97212601]
[-79.71073151 -13.23526192]
[-66.51461792 -4.53824520]
[-63.41515350 10.95913792]
[-50.80402756 19.08068085]
[-38.19289780 27.20222282]
[-25.58176994 35.32376480]
[-10.69216633 35.70969772]
[-3.27903724 49.68667984]
[9.33209133 57.80822372]
[22.78805542 64.43672180]
[36.91286087 69.48548126]
[51.03766251 74.53423309]
[65.16246796 79.58299255]
[79.28726959 84.63174438]
[90.06809235 76.19752502]
[103.64636230 74.46758270]
[109.99349213 60.87662888]
[116.34062195 47.28567886]
[104.15640259 38.45724106]
[93.86336517 27.48228073]
[85.83358002 14.75753880]
[80.35733032 0.74300432]
[77.63256836 -14.05470562]
[77.75781250 -29.10066223]
[80.72851562 -43.85096359]
[86.43729401 -57.77239609]
[94.67778778 -70.36170959]
[105.15209961 -81.16381073]
[117.48159027 -89.78820038]
[131.22055054 -95.92312622]
[145.87234497 -99.34680176]
[160.90730286 -99.93547058]
[175.78192139 -97.66784668]
[189.95851135 -92.62591553]
[202.92456055 -84.99192810]
[214.21139526 -75.04184723]
[223.41098022 -63.13537216]
[230.19075012 -49.70290756]
[234.30564880 -35.23003006]
[235.60688782 -20.23992729]
[234.04747009 -5.27447701]
[229.68373108 9.12532520]
[222.67343140 22.43893814]
[213.27000427 34.18508148]
[201.81333923 43.93913651]
[188.71763611 51.34850693]
[174.45625305 56.14533997]
[159.54475403 58.15624237]
[144.52217102 57.30851746]
[129.93157959 53.63280869]
[123.58444214 67.22376251]
[117.23731995 80.81471252]
[124.80274963 87.37104034]
[129.71559143 96.92564392]
[130.80334473 108.35208893]
[145.56939697 110.99095154]
[160.33544922 113.62981415]
[175.10150146 116.26867676]
[189.86755371 118.90754700]
[204.63362122 121.54640961]
[214.47181702 109.75211334]
[228.89460754 104.47211456]
[244.02235413 107.12670898]
[255.78576660 117.00183105]
[261.02053833 131.44111633]
[258.31851196 146.56045532]
[248.40658569 158.29284668]
[233.95095825 163.48233032]
[218.84014893 160.73294067]
[207.13888550 150.78427124]
[201.99475098 136.31246948]
[187.22869873 133.67359924]
[172.46264648 131.03472900]
[157.69657898 128.39587402]
[142.93052673 125.75700378]
[128.16447449 123.11814117]
[116.46485138 132.50531006]
[115.84087372 147.49232483]
[115.21689606 162.47933960]
[114.74885559 177.47203064]
[114.43679810 192.46878052]
[114.12474060 207.46554565]
[113.81268311 222.46229553]
[113.50062561 237.45904541]
[113.18857574 252.45579529]
[112.87651825 267.45254517]
[112.56446075 282.44931030]
[112.25240326 297.44607544]
[126.74533844 301.64334106]
[139.65760803 309.44949341]
[150.10881042 320.33227539]
[157.38638306 333.54965210]
[160.99412537 348.20046997]
[160.68605042 363.28582764]
[156.48316956 377.77713013]
[148.67204285 390.68637085]
[137.78523254 401.13339233]
[124.56504059 408.40585327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 131]
[23 130]
[24 129]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
[68 104]
[69 103]
[70 102]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
