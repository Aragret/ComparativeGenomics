%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUUAAUGGGGGGGGGGUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUxxxxxxxxxxUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCCCCCCCCCCCACCCUUACU\
) } def
/len { sequence length } bind def

/coor [
[89.34526062 372.50033569]
[77.46099091 363.22525024]
[68.14228058 351.37512207]
[61.93091583 337.63897705]
[59.18801498 322.81533813]
[60.07304382 307.76608276]
[64.53455353 293.36614990]
[72.31314850 280.45269775]
[82.95660400 269.77655029]
[95.84610748 261.95834351]
[110.23229980 257.45269775]
[109.29666901 242.48190308]
[108.36103821 227.51110840]
[107.42541504 212.54031372]
[106.48978424 197.56951904]
[105.55415344 182.59872437]
[104.61852264 167.62794495]
[103.68289948 152.65715027]
[102.74726868 137.68635559]
[101.81163788 122.71556091]
[95.45535278 136.30223083]
[92.38224030 150.98405457]
[81.45486450 161.25988770]
[66.61205292 163.42573547]
[53.20395660 156.70094299]
[46.06357574 143.50947571]
[47.76469421 128.60624695]
[57.69413376 117.36318970]
[72.27370453 113.83297729]
[85.65542603 107.05584717]
[70.66273499 106.58779907]
[55.67003632 106.11975861]
[40.67734146 105.65171814]
[25.68464279 105.18367767]
[10.69194794 104.71563721]
[-0.65357560 115.71811676]
[-16.45450020 115.39202118]
[-27.33641624 103.93080139]
[-26.84327888 88.13420868]
[-15.26765537 77.37407684]
[0.52284133 78.03420258]
[11.15998936 89.72293854]
[26.15268517 90.19097900]
[41.14538193 90.65901947]
[56.13807678 91.12706757]
[71.13077545 91.59510803]
[86.12346649 92.06314850]
[98.11030579 83.04561615]
[101.81646729 68.51068115]
[105.52262878 53.97574615]
[109.22878265 39.44081116]
[95.13092041 34.27930832]
[81.62757111 27.71801376]
[68.85730743 19.82425308]
[56.95117950 10.67903042]
[46.03135681 0.37619039]
[36.20989990 -10.97854328]
[27.58759117 -23.26865196]
[20.25290680 -36.36801910]
[14.28111553 -50.14222336]
[9.73349762 -64.44992065]
[6.65671825 -79.14428711]
[5.08235073 -94.07453918]
[5.02655029 -109.08746338]
[6.48988962 -124.02900696]
[9.45735264 -138.74583435]
[13.89848804 -153.08694458]
[19.76772308 -166.90516663]
[27.00482941 -180.05868530]
[35.53554153 -192.41255188]
[45.27232361 -203.83998108]
[56.11525345 -214.22370911]
[67.95307159 -223.45718384]
[80.66429901 -231.44564819]
[94.11850739 -238.10714722]
[108.17761230 -243.37330627]
[122.69736481 -247.19007874]
[137.52876282 -249.51831055]
[152.51960754 -250.33412170]
[167.51608276 -249.62911987]
[182.36427307 -247.41053772]
[196.91183472 -243.70115662]
[211.00947571 -238.53903198]
[224.51254272 -231.97714233]
[237.28245544 -224.08282471]
[249.18817139 -214.93707275]
[260.10754395 -204.63375854]
[269.92849731 -193.27859497]
[278.55026245 -180.98809814]
[285.88436890 -167.88841248]
[291.85556030 -154.11395264]
[296.40255737 -139.80604553]
[299.47866821 -125.11154938]
[301.05239868 -110.18122864]
[301.10754395 -95.16829681]
[299.64352417 -80.22682190]
[296.67541504 -65.51011658]
[292.23367310 -51.16920853]
[286.36383057 -37.35125351]
[279.12612915 -24.19804192]
[270.59487915 -11.84455395]
[260.85760498 -0.41755384]
[250.01420593 9.96569824]
[238.17597961 19.19865227]
[225.46440125 27.18656349]
[212.00990295 33.84746170]
[197.95056152 39.11299896]
[183.43063354 42.92913818]
[168.59913635 45.25672150]
[153.60826111 46.07186508]
[138.61181641 45.36619949]
[123.76372528 43.14697266]
[120.05756378 57.68190765]
[116.35140228 72.21684265]
[112.64524078 86.75177765]
[120.88255310 74.21596527]
[133.41027832 65.96636200]
[148.18060303 63.35145950]
[162.77911377 66.79871368]
[174.81948853 75.74461365]
[182.33360291 88.72684479]
[184.09313965 103.62329102]
[179.81050110 117.99892426]
[170.18572998 129.50387573]
[156.79212952 136.25750732]
[141.81906128 137.15583801]
[127.71405029 132.05204773]
[116.78243256 121.77993774]
[117.71806335 136.75073242]
[118.65368652 151.72151184]
[119.58931732 166.69230652]
[120.52494812 181.66310120]
[121.46057129 196.63389587]
[122.39620209 211.60469055]
[123.33183289 226.57546997]
[124.26746368 241.54626465]
[125.20308685 256.51705933]
[140.03831482 259.19647217]
[153.80094910 265.34899902]
[165.69085693 274.61688232]
[175.01673889 286.46133423]
[181.23643494 300.19372559]
[183.98832703 315.01571655]
[183.11241150 330.06549072]
[178.65963745 344.46813965]
[170.88887024 357.38629150]
[160.25189209 368.06890869]
[147.36712646 375.89489746]
[132.98367310 380.40930176]
[117.93776703 381.34960938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[48 115]
[49 114]
[50 113]
[51 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
