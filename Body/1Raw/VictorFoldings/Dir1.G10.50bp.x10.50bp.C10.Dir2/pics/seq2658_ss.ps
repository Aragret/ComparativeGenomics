%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAACACAGGGGGGGGGGGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCxxxxxxxxxxCAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCACA\
) } def
/len { sequence length } bind def

/coor [
[95.52550507 616.98101807]
[81.03581238 612.77258301]
[68.12958527 604.95642090]
[57.68678284 594.06561279]
[50.41941833 580.84259033]
[46.82299423 566.18902588]
[47.14271545 551.10388184]
[51.35678482 536.61584473]
[59.17788315 523.71264648]
[70.07275391 513.27404785]
[83.29856110 506.01177979]
[97.95355225 502.42102051]
[98.26560974 487.42425537]
[98.57766724 472.42749023]
[98.88972473 457.43075562]
[99.20177460 442.43399048]
[99.51383209 427.43722534]
[99.82588959 412.44049072]
[100.13794708 397.44372559]
[100.45000458 382.44699097]
[100.76206207 367.45022583]
[101.07411194 352.45346069]
[90.61019897 341.91583252]
[90.71303558 326.70254517]
[101.83683777 315.79846191]
[102.14889526 300.80169678]
[101.99285889 285.80252075]
[101.36888123 270.81552124]
[100.74490356 255.82849121]
[100.12092590 240.84147644]
[99.49694824 225.85446167]
[84.45843506 221.29389954]
[71.86235046 211.85267639]
[63.23633194 198.65292358]
[59.63431549 183.27397156]
[61.50782394 167.56335449]
[68.64945221 153.41490173]
[80.21563721 142.54043579]
[94.82627106 136.26261902]
[93.89064789 121.29182434]
[92.95501709 106.32103729]
[89.86391449 101.99693298]
[89.45258331 96.24232483]
[92.30507660 90.71044922]
[91.99301910 75.71369171]
[91.68096161 60.71693802]
[79.10809326 51.81587219]
[74.24411011 37.38690186]
[78.75572968 23.03039551]
[90.71280670 14.18922329]
[90.40074921 -0.80753022]
[90.08869171 -15.80428410]
[81.31561279 -25.31674385]
[81.40003204 -37.85515976]
[89.74859619 -46.66474915]
[89.74859619 -61.66474915]
[89.74859619 -76.66474915]
[73.41514587 -83.94648743]
[61.90887451 -97.56755066]
[57.48573685 -114.78648376]
[60.98209000 -132.16362000]
[71.65697479 -146.24819946]
[87.34858704 -154.26359558]
[86.41295624 -169.23437500]
[85.47732544 -184.20516968]
[70.87141418 -188.19842529]
[58.35490417 -196.71990967]
[49.28549194 -208.84527588]
[44.64695740 -223.25924683]
[44.94245529 -238.39831543]
[50.13993454 -252.62030029]
[59.67560577 -264.38250732]
[72.51512146 -272.40908813]
[87.26573181 -275.82931519]
[102.32741547 -274.27224731]
[116.06638336 -267.90676880]
[126.99234009 -257.42333984]
[133.92012024 -243.95915222]
[136.09825134 -228.97467041]
[133.29045105 -214.09532166]
[125.80131531 -200.93510437]
[114.44318390 -190.92152405]
[100.44812012 -185.14080811]
[101.38375092 -170.17001343]
[102.31937408 -155.19921875]
[114.17758942 -151.79454041]
[124.42570496 -144.88139343]
[132.05393982 -135.12266541]
[136.30503845 -123.46247101]
[136.74940491 -111.03491211]
[133.32847595 -99.05366516]
[126.36190033 -88.69353485]
[116.51778412 -80.97521210]
[104.74859619 -76.66474915]
[104.74859619 -61.66474915]
[104.74859619 -46.66474915]
[114.33969879 -32.00151062]
[105.08544922 -16.11634064]
[105.39749908 -1.11958647]
[105.70955658 13.87716770]
[118.02406311 22.21329117]
[123.12898254 36.36969376]
[118.86943817 50.98850632]
[106.67771912 60.40488434]
[106.98977661 75.40163422]
[107.30183411 90.39839172]
[107.92581177 105.38540649]
[108.86143494 120.35620117]
[109.79706573 135.32699585]
[123.66106415 139.07257080]
[135.66735840 146.91299438]
[144.64442444 158.06733704]
[149.72126770 171.43212891]
[150.41189575 185.69050598]
[146.66175842 199.44190979]
[138.85189819 211.33976746]
[127.76020050 220.22322083]
[114.48397064 225.23048401]
[115.10794830 240.21749878]
[115.73191833 255.20451355]
[116.35589600 270.19152832]
[116.97987366 285.17855835]
[119.85249329 289.69158936]
[120.58749390 294.38330078]
[119.48442841 298.39392090]
[117.14565277 301.11376953]
[116.83359528 316.11053467]
[127.49417877 327.46789551]
[126.96407318 342.67227173]
[116.07086945 352.76553345]
[115.75881195 367.76226807]
[115.44675446 382.75903320]
[115.13469696 397.75579834]
[114.82264709 412.75253296]
[114.51058960 427.74929810]
[114.19853210 442.74603271]
[113.88647461 457.74279785]
[113.57441711 472.73956299]
[113.26235962 487.73629761]
[112.95030212 502.73306274]
[127.44324493 506.93035889]
[140.35549927 514.73651123]
[150.80671692 525.61926270]
[158.08428955 538.83666992]
[161.69203186 553.48748779]
[161.38395691 568.57281494]
[157.18107605 583.06414795]
[149.36994934 595.97338867]
[138.48313904 606.42041016]
[125.26293945 613.69287109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[25 127]
[26 126]
[27 122]
[28 121]
[29 120]
[30 119]
[31 118]
[39 109]
[40 108]
[41 107]
[44 106]
[45 105]
[46 104]
[50 100]
[51 99]
[52 98]
[55 96]
[56 95]
[57 94]
[63 85]
[64 84]
[65 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
