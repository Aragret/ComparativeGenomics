%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUACUAGGGGGGGGGGGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACAxxxxxxxxxxAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACCCCCCCCCCCUCAUAAUAG\
) } def
/len { sequence length } bind def

/coor [
[126.13407135 467.25018311]
[112.28813171 461.23416138]
[100.57946777 451.70474243]
[91.87694550 439.36907959]
[86.82633972 425.14254761]
[85.80245209 410.08087158]
[88.88124847 395.30172729]
[95.83427429 381.90179443]
[106.14555359 370.87545776]
[119.04993439 363.04095459]
[133.58982849 358.97964478]
[133.58982849 343.97964478]
[133.58982849 328.97964478]
[133.58982849 313.97964478]
[133.58982849 298.97964478]
[133.58982849 283.97964478]
[133.58982849 268.97964478]
[133.58982849 253.97964478]
[133.58982849 238.97964478]
[133.58982849 223.97964478]
[125.85252380 211.25236511]
[133.58982849 197.45219421]
[133.58982849 182.45219421]
[133.58982849 167.45219421]
[133.58982849 152.45219421]
[130.33900452 137.80868530]
[123.99186707 124.21774292]
[117.64473724 110.62679291]
[96.97048187 118.27235413]
[83.92743683 103.48419952]
[69.43183899 99.62703705]
[54.93624115 95.76988220]
[39.61052704 99.69837189]
[29.30083275 88.94850922]
[14.80523491 85.09134674]
[6.38890553 97.67881012]
[-5.66005611 106.84947968]
[-20.03466797 111.60860443]
[-35.17568207 111.43993378]
[-49.44071198 106.36178589]
[-61.28239441 96.92498016]
[-69.41622925 84.15316010]
[-72.95993042 69.43170929]
[-71.52909088 54.35751724]
[-65.27891541 40.56570435]
[-54.88739395 29.55230522]
[-41.48170471 22.51197624]
[-26.51600075 20.20839882]
[-11.61365318 22.89144325]
[1.60884607 30.27007675]
[11.71721840 41.54391861]
[17.61498260 55.49007034]
[18.66239548 70.59574890]
[33.15799332 74.45291138]
[47.44688416 70.24853516]
[58.79339981 81.27428436]
[73.28899384 85.13144684]
[87.78459167 88.98860168]
[94.99433136 82.88726044]
[105.08869934 81.47234344]
[115.06921387 85.95777130]
[118.47219086 71.34887695]
[121.87517548 56.73998642]
[125.27815247 42.13109207]
[111.47238922 36.16110992]
[98.95458984 27.82177544]
[88.12715149 17.38116646]
[79.33812714 5.17490292]
[72.87004852 -8.40463257]
[68.93084717 -22.92091370]
[67.64713287 -37.90730286]
[69.06018829 -52.88204956]
[73.12458801 -67.36377716]
[79.70967102 -80.88696289]
[88.60375977 -93.01688385]
[99.52094269 -103.36361694]
[112.11027527 -111.59455872]
[125.96707153 -117.44512177]
[140.64588928 -120.72722626]
[155.67485046 -121.33537292]
[170.57086182 -119.25000763]
[184.85505676 -114.53816986]
[198.06826782 -107.35131836]
[209.78575134 -97.92049408]
[219.63082886 -86.54885101]
[227.28701782 -73.60193634]
[232.50820923 -59.49595261]
[235.12657166 -44.68433380]
[235.05792236 -29.64322281]
[232.30447388 -14.85612392]
[226.95472717 -0.79838234]
[219.18067932 12.07810307]
[209.23220825 23.35940742]
[197.42913818 32.68288040]
[184.15087891 39.74881744]
[169.82426453 44.33007050]
[154.90983582 46.27937698]
[139.88703918 45.53407288]
[136.48406982 60.14296341]
[133.08108521 74.75185394]
[129.67811584 89.36074829]
[131.23568726 104.27966309]
[137.58282471 117.87061310]
[143.92994690 131.46156311]
[145.55187988 116.54950714]
[151.06581116 102.59971619]
[160.07780457 90.60873413]
[171.94410706 81.43315887]
[185.81698608 75.72848511]
[200.70538330 73.90223694]
[215.54574585 76.08487701]
[229.27787781 82.12048340]
[240.92079163 91.57788086]
[249.64276123 103.78146362]
[254.82067871 117.85942841]
[256.08465576 132.80607605]
[253.34442139 147.55366516]
[246.79570007 161.04862976]
[236.90632629 172.32695007]
[224.38279724 180.58290100]
[210.11972046 185.22673035]
[195.13606262 185.92665100]
[180.50221252 182.63269043]
[167.26356506 175.58016968]
[156.36585999 165.27287292]
[148.58982849 152.45219421]
[148.58982849 167.45219421]
[148.58982849 182.45219421]
[148.58982849 197.45219421]
[156.32711792 211.25236511]
[148.58982849 223.97964478]
[148.58982849 238.97964478]
[148.58982849 253.97964478]
[148.58982849 268.97964478]
[148.58982849 283.97964478]
[148.58982849 298.97964478]
[148.58982849 313.97964478]
[148.58982849 328.97964478]
[148.58982849 343.97964478]
[148.58982849 358.97964478]
[163.12971497 363.04095459]
[176.03408813 370.87545776]
[186.34538269 381.90179443]
[193.29840088 395.30172729]
[196.37719727 410.08087158]
[195.35330200 425.14254761]
[190.30270386 439.36907959]
[181.60017395 451.70474243]
[169.89151001 461.23416138]
[156.04557800 467.25018311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 126]
[26 104]
[27 103]
[28 102]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[61 101]
[62 100]
[63 99]
[64 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
