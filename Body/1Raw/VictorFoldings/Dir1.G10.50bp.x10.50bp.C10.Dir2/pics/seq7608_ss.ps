%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUACUAACGGGGGGGGGGAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUxxxxxxxxxxUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCCCCCCCCCCCUAAUACUAAC\
) } def
/len { sequence length } bind def

/coor [
[84.17619324 409.47982788]
[70.68731689 402.74829102]
[59.20181656 392.98373413]
[50.38744736 380.75384521]
[44.75666428 366.76965332]
[42.63683701 351.84417725]
[44.15120316 336.84518433]
[49.21172714 322.64465332]
[57.52419281 310.06823730]
[68.60532379 299.84707642]
[81.81087494 292.57543945]
[96.37310028 288.67608643]
[96.06512451 273.67922974]
[95.75714874 258.68240356]
[95.44917297 243.68556213]
[95.14118958 228.68872070]
[94.83321381 213.69189453]
[94.52523804 198.69505310]
[94.21726227 183.69821167]
[93.90927887 168.70137024]
[93.60130310 153.70452881]
[93.29332733 138.70770264]
[78.10933685 132.61999512]
[66.72135162 120.87574768]
[61.10412979 105.51148987]
[46.12388611 104.74182892]
[31.14364624 103.97216797]
[16.16340446 103.20250702]
[1.18316364 102.43284607]
[-13.79707718 101.66318512]
[-28.77731895 100.89352417]
[-34.66295624 114.86260223]
[-44.97362900 125.97412109]
[-58.46427155 132.88630676]
[-73.50582123 134.76449585]
[-88.28193665 131.38188171]
[-101.00833893 123.14691925]
[-110.14823914 111.05402374]
[-114.59796143 96.56348419]
[-113.82017517 81.42509460]
[-107.90880585 67.46688843]
[-97.57767487 56.37439346]
[-84.07431793 49.48707199]
[-69.02933502 47.63661194]
[-54.25947189 51.04645538]
[-41.54827118 59.30485535]
[-32.43066788 71.41456604]
[-28.00765800 85.91328430]
[-13.02741718 86.68294525]
[1.95282376 87.45260620]
[16.93306541 88.22226715]
[31.91330528 88.99192810]
[46.89354706 89.76158905]
[61.87378693 90.53124237]
[70.43119812 74.13591003]
[85.54198456 63.47287369]
[82.78573608 48.72827530]
[80.02949524 33.98368073]
[64.97660065 33.51001740]
[50.37756729 29.81105995]
[36.91521835 23.05981827]
[25.21921539 13.57205772]
[15.83660126 1.79153931]
[9.20621586 -11.73074150]
[5.63817692 -26.36232185]
[5.29936600 -41.41885757]
[8.20563030 -56.19612885]
[14.22103977 -70.00296783]
[23.06424141 -82.19361877]
[34.32162476 -92.19789124]
[47.46665573 -99.54786682]
[61.88452530 -103.89977264]
[76.90087891 -105.05007172]
[91.81337738 -102.94496155]
[105.92453003 -97.68289185]
[118.57434082 -89.50998688]
[129.17115784 -78.80850220]
[137.21932983 -66.07897186]
[142.34243774 -51.91677856]
[144.30088806 -36.98431015]
[143.00305176 -21.97998810]
[138.50962830 -7.60559130]
[131.03080750 5.46656513]
[120.91637421 16.62507248]
[108.63939667 25.34802437]
[94.77409363 31.22743607]
[97.53033447 45.97203445]
[100.28658295 60.71662903]
[119.29189301 65.77883148]
[133.46159363 79.41876221]
[147.50357056 74.14402008]
[161.54554749 68.86927795]
[175.58752441 63.59453964]
[173.67697144 48.64641190]
[175.26579285 33.66067123]
[180.26831055 19.44548607]
[188.41473389 6.76745653]
[199.26576233 -3.68970370]
[212.23617554 -11.36205387]
[226.62651062 -15.83583450]
[241.66073608 -16.86977959]
[256.52804565 -14.40812874]
[270.42666626 -8.58363819]
[282.60708618 0.28958711]
[292.41241455 11.73302364]
[299.31387329 25.12954140]
[302.93927002 39.75668335]
[303.09307861 54.82563019]
[299.76699829 69.52372742]
[293.14044189 83.05831909]
[283.57073975 94.69951630]
[271.57397461 103.81951904]
[257.79711914 109.92649078]
[242.98315430 112.69109344]
[227.93095398 111.96423340]
[213.45230103 107.78511810]
[200.32797241 100.37911224]
[189.26577759 90.14562225]
[180.86225891 77.63651276]
[166.82028198 82.91125488]
[152.77830505 88.18599701]
[138.73632812 93.46073914]
[139.27362061 100.92066193]
[138.38735962 108.34720612]
[136.10966492 115.47119904]
[132.52308655 122.03439331]
[127.75762939 127.79890442]
[121.98604584 132.55578613]
[115.41752625 136.13259888]
[108.29016113 138.39971924]
[108.59814453 153.39656067]
[108.90612030 168.39340210]
[109.21409607 183.39022827]
[109.52207184 198.38706970]
[109.83005524 213.38391113]
[110.13803101 228.38075256]
[110.44600677 243.37757874]
[110.75398254 258.37442017]
[111.06196594 273.37127686]
[111.36994171 288.36810303]
[126.07997894 291.66632080]
[139.57293701 298.38967896]
[151.06434631 308.14727783]
[159.88613892 320.37182617]
[165.52539062 334.35260010]
[167.65426636 349.27679443]
[166.14900208 364.27670288]
[161.09707642 378.48028564]
[152.79223633 391.06173706]
[141.71731567 401.28961182]
[128.51617432 408.56927490]
[113.95630646 412.47744751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[56 88]
[57 87]
[58 86]
[90 122]
[91 121]
[92 120]
[93 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
