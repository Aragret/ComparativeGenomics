%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAGUAAAGGGGGGGGGGCUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGxxxxxxxxxxCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUACCCCCCCCCCUAGCAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[87.10982513 406.99047852]
[73.88962555 399.71798706]
[63.00282288 389.27099609]
[55.19169235 376.36175537]
[50.98881149 361.87042236]
[50.68074036 346.78509521]
[54.28847885 332.13427734]
[61.56605148 318.91687012]
[72.01725769 308.03411865]
[84.92951965 300.22796631]
[99.42246246 296.03067017]
[99.11040497 281.03393555]
[98.79834747 266.03717041]
[98.48628998 251.04042053]
[98.17423248 236.04367065]
[97.86217499 221.04690552]
[97.55012512 206.05015564]
[97.23806763 191.05340576]
[96.92601013 176.05665588]
[96.30203247 161.06964111]
[95.36640167 146.09884644]
[94.43077850 131.12805176]
[93.49514771 116.15725708]
[79.88558960 97.12157440]
[97.71717072 76.89135742]
[91.94089508 63.04813766]
[86.16462708 49.20492172]
[80.38835144 35.36170197]
[74.61208344 21.51848602]
[68.54906464 7.79843235]
[62.20193863 -5.79251862]
[49.35202026 -15.02237320]
[50.97706223 -29.82806396]
[44.62993240 -43.41901398]
[32.76051331 -48.57369232]
[27.76969528 -60.07633209]
[31.84502983 -71.50869751]
[25.78201675 -85.22875214]
[19.71900368 -98.94880676]
[13.65598965 -112.66886139]
[4.26882792 -124.36848450]
[-7.81116056 -133.26083374]
[-23.51173973 -135.21080017]
[-29.17457390 -148.98692322]
[-41.25456238 -157.87927246]
[-50.08244705 -160.47161865]
[-53.49077988 -167.08441162]
[-69.14739227 -169.36058044]
[-74.52240753 -183.25152588]
[-86.41478729 -192.39326477]
[-102.05118561 -190.09571838]
[-114.68235779 -199.59460449]
[-116.81446075 -215.25442505]
[-107.18255615 -227.78445435]
[-91.50107574 -229.75088501]
[-79.07357025 -219.98703003]
[-77.27305603 -204.28564453]
[-65.38067627 -195.14390564]
[-50.57468414 -193.52162170]
[-44.34904480 -178.97679138]
[-32.36221313 -169.95925903]
[-20.28222466 -161.06690979]
[-5.44568682 -159.75299072]
[1.08118927 -145.34082031]
[13.16117764 -136.44847107]
[7.47718811 -150.32983398]
[5.08269596 -165.13748169]
[6.10198927 -180.10281372]
[10.48216057 -194.44903564]
[17.99585342 -207.43150330]
[28.25306511 -218.37634277]
[40.72138596 -226.71546936]
[54.75363922 -232.01602173]
[69.62147522 -234.00286865]
[84.55315399 -232.57289124]
[98.77365112 -227.80030823]
[111.54483032 -219.93284607]
[122.20380402 -209.37887573]
[130.19729614 -196.68620300]
[135.11041260 -182.51364136]
[136.68812561 -167.59684753]
[134.84854126 -152.71008301]
[129.68716431 -138.62603760]
[121.47187042 -126.07578278]
[110.62909698 -115.71073151]
[97.72164917 -108.06889343]
[83.41948700 -103.54692841]
[68.46498108 -102.37953949]
[53.63435745 -104.62733459]
[39.69740677 -110.17363739]
[27.37604332 -118.73187256]
[33.43905640 -105.01181793]
[39.50207138 -91.29176331]
[45.56508255 -77.57170868]
[60.26467896 -68.03641510]
[58.22088242 -49.76614380]
[64.56801605 -36.17519379]
[76.96394348 -27.91745567]
[75.79288483 -12.13964748]
[82.14001465 1.45130301]
[86.30226898 3.91121387]
[88.92886353 9.04271793]
[88.45529938 15.74221325]
[94.23156738 29.58543205]
[100.00784302 43.42864990]
[105.78411865 57.27186584]
[111.56038666 71.11508179]
[123.73222351 79.88129425]
[138.69247437 80.97260284]
[153.01899719 74.25982666]
[165.14961243 82.90258026]
[180.10986328 83.99388885]
[195.07011414 85.08520508]
[211.30717468 80.20724487]
[220.48934937 94.45939636]
[209.33605957 107.22812653]
[193.97880554 100.04544830]
[179.01855469 98.95413971]
[164.05830383 97.86283112]
[150.80184937 104.65366364]
[137.60116577 95.93285370]
[122.64091492 94.84153748]
[120.84059143 104.33460236]
[115.58962250 111.46585846]
[108.46593475 115.22163391]
[109.40156555 130.19242859]
[110.33719635 145.16320801]
[111.27281952 160.13400269]
[114.65814972 165.93461609]
[114.56953430 171.69859314]
[111.92276001 175.74459839]
[112.23481750 190.74134827]
[112.54687500 205.73809814]
[112.85893250 220.73484802]
[113.17098999 235.73161316]
[113.48304749 250.72836304]
[113.79509735 265.72512817]
[114.10715485 280.72186279]
[114.41921234 295.71862793]
[129.07420349 299.30938721]
[142.30001831 306.57165527]
[153.19488525 317.01025391]
[161.01597595 329.91345215]
[165.23005676 344.40151978]
[165.54977417 359.48663330]
[161.95333862 374.14022827]
[154.68597412 387.36322021]
[144.24317932 398.25405884]
[131.33694458 406.07019043]
[116.84725952 410.27865601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 128]
[21 127]
[22 126]
[23 125]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 100]
[31 99]
[33 97]
[34 96]
[37 94]
[38 93]
[39 92]
[40 91]
[41 65]
[42 64]
[44 62]
[45 61]
[47 60]
[49 58]
[50 57]
[108 122]
[109 121]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
