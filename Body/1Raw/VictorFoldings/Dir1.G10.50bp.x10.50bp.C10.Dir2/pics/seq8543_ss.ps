%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUACCACGGGGGGGGGGAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCxxxxxxxxxxCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCACCCCCCCCCCUCCUUACCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.70864868]
[71.19830322 351.69262695]
[59.48964310 342.16320801]
[50.78712082 329.82754517]
[45.73651886 315.60101318]
[44.71262741 300.53933716]
[47.79142761 285.76016235]
[54.74444962 272.36026001]
[65.05573273 261.33392334]
[77.96011353 253.49940491]
[92.50000000 249.43809509]
[92.50000000 234.43809509]
[92.50000000 219.43809509]
[92.50000000 204.43809509]
[92.50000000 189.43809509]
[92.50000000 174.43809509]
[92.50000000 159.43809509]
[92.50000000 144.43809509]
[92.50000000 129.43809509]
[92.50000000 114.43809509]
[84.75576782 105.68522644]
[84.87733459 93.99886322]
[92.80198669 85.40900421]
[93.11404419 70.41224670]
[78.15828705 69.20365143]
[63.30157089 67.10279846]
[48.59708786 64.11721039]
[34.09747696 60.25757217]
[19.85464287 55.53770447]
[5.91956806 49.97450256]
[-7.65786028 43.58787918]
[-20.82903862 36.40069962]
[-33.54681778 28.43868828]
[-45.76567078 19.73035049]
[-57.44186020 10.30685997]
[-68.53358459 0.20194934]
[-79.00113678 -10.54820728]
[-88.80704498 -21.90512657]
[-97.91621399 -33.82815552]
[-106.29602051 -46.27461243]
[-113.91648865 -59.19993973]
[-120.75032043 -72.55786896]
[-126.77305603 -86.30057526]
[-131.96315002 -100.37887573]
[-136.30200195 -114.74237061]
[-139.77407837 -129.33963013]
[-142.36697388 -144.11842346]
[-144.07139587 -159.02581787]
[-144.88122559 -174.00845337]
[-144.79359436 -189.01272583]
[-143.80879211 -203.98487854]
[-141.93035889 -218.87135315]
[-139.16500854 -233.61883545]
[-135.52264404 -248.17454529]
[-131.01631165 -262.48638916]
[-125.66212463 -276.50308228]
[-119.47926331 -290.17449951]
[-112.48986053 -303.45169067]
[-104.71893311 -316.28713989]
[-96.19430542 -328.63485718]
[-86.94647980 -340.45065308]
[-77.00857544 -351.69226074]
[-66.41616821 -362.31939697]
[-55.20716095 -372.29406738]
[-43.42169571 -381.58053589]
[-31.10194969 -390.14553833]
[-18.29203224 -397.95843506]
[-5.03779745 -404.99127197]
[8.61330795 -411.21887207]
[22.61241531 -416.61889648]
[36.90941238 -421.17208862]
[51.45312119 -424.86209106]
[66.19147491 -427.67568970]
[81.07171631 -429.60287476]
[96.04057312 -430.63668823]
[111.04446411 -430.77343750]
[126.02968597 -430.01266479]
[140.94258118 -428.35705566]
[155.72978210 -425.81256104]
[170.33833313 -422.38827515]
[184.71594238 -418.09649658]
[198.81117249 -412.95251465]
[212.57351685 -406.97482300]
[225.95375061 -400.18475342]
[238.90396118 -392.60665894]
[251.37777710 -384.26763916]
[263.33056641 -375.19754028]
[274.71954346 -365.42886353]
[285.50390625 -354.99658203]
[295.64508057 -343.93798828]
[305.10675049 -332.29272461]
[313.85504150 -320.10244751]
[321.85864258 -307.41079712]
[329.08889771 -294.26321411]
[335.51995850 -280.70678711]
[341.12875366 -266.78997803]
[345.89523315 -252.56268311]
[349.80230713 -238.07579041]
[352.83602905 -223.38116455]
[354.98550415 -208.53140259]
[356.24307251 -193.57968140]
[356.60418701 -178.57951355]
[356.06759644 -163.58459473]
[354.63522339 -148.64860535]
[352.31213379 -133.82501221]
[349.10671997 -119.16687775]
[345.03042603 -104.72668457]
[340.09780884 -90.55611420]
[334.32659912 -76.70590210]
[327.73739624 -63.22562027]
[320.35379028 -50.16353226]
[312.20227051 -37.56639481]
[303.31195068 -25.47929955]
[293.71469116 -13.94551945]
[283.44482422 -3.00634050]
[272.53915405 7.29907656]
[261.03668213 16.93384171]
[248.97859192 25.86346245]
[236.40806580 34.05597687]
[223.37008667 41.48205566]
[209.91133118 48.11511230]
[196.07998657 53.93140793]
[181.92555237 58.91011810]
[167.49870300 63.03342056]
[152.85108948 66.28655243]
[138.03514099 68.65787506]
[123.10388947 70.13889313]
[108.11080170 70.72430420]
[107.79874420 85.72106171]
[116.26898193 100.16924286]
[107.50000000 114.43809509]
[107.50000000 129.43809509]
[107.50000000 144.43809509]
[107.50000000 159.43809509]
[107.50000000 174.43809509]
[107.50000000 189.43809509]
[107.50000000 204.43809509]
[107.50000000 219.43809509]
[107.50000000 234.43809509]
[107.50000000 249.43809509]
[122.03988647 253.49940491]
[134.94427490 261.33392334]
[145.25555420 272.36026001]
[152.20857239 285.76016235]
[155.28736877 300.53933716]
[154.26348877 315.60101318]
[149.21287537 329.82754517]
[140.51036072 342.16320801]
[128.80169678 351.69262695]
[114.95575714 357.70864868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
