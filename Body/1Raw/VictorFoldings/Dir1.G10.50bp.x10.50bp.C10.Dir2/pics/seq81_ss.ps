%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGAUUCCGGGGGGGGGGUGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAxxxxxxxxxxAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCCCCCCCCCCCUUUUAUUCC\
) } def
/len { sequence length } bind def

/coor [
[76.56829834 570.55047607]
[62.72235870 564.53442383]
[51.01369476 555.00500488]
[42.31117249 542.66937256]
[37.26057053 528.44281006]
[36.23667908 513.38116455]
[39.31547546 498.60198975]
[46.26849747 485.20205688]
[56.57978439 474.17572021]
[69.48416138 466.34121704]
[84.02404785 462.27990723]
[84.02404785 447.27990723]
[84.02404785 432.27990723]
[84.02404785 417.27990723]
[84.02404785 402.27990723]
[84.02404785 387.27990723]
[84.02404785 372.27990723]
[84.02404785 357.27990723]
[84.02404785 342.27990723]
[84.02404785 327.27990723]
[84.02404785 312.27990723]
[72.51461029 305.44406128]
[65.84664917 293.71163940]
[65.86328888 280.10833740]
[72.66754913 268.20391846]
[84.56717682 261.17553711]
[84.87923431 246.17878723]
[85.19128418 231.18202209]
[75.63968658 224.80570984]
[70.32359314 214.49034119]
[70.68059540 202.77085876]
[76.73768616 192.59143066]
[87.07526398 186.56588745]
[88.01089478 171.59509277]
[88.94652557 156.62429810]
[89.88214874 141.65350342]
[90.81777954 126.68271637]
[91.75341034 111.71192169]
[85.70394897 99.10653687]
[93.27580261 87.35244751]
[82.00159454 79.35923767]
[76.21043396 66.93041992]
[77.32462311 53.37279892]
[84.94477081 42.23525620]
[96.98260498 36.37979507]
[98.22948456 21.43170547]
[99.47635651 6.48361921]
[100.72322845 -8.46446800]
[101.97010803 -23.41255379]
[86.75591278 -28.40937042]
[73.16912842 -36.86931610]
[61.98381042 -48.30573654]
[53.83608246 -62.06253052]
[49.18796539 -77.35179901]
[48.30118179 -93.29898071]
[51.22241974 -108.99285126]
[57.78087997 -123.53760529]
[67.59828949 -136.10401917]
[80.11067200 -145.97665405]
[94.60078430 -152.59465027]
[110.23921967 -155.58358765]
[110.86319733 -170.57060242]
[111.48717499 -185.55761719]
[111.95521545 -200.55030823]
[112.26727295 -215.54705811]
[112.57933044 -230.54382324]
[112.89138794 -245.54057312]
[98.66796112 -250.73411560]
[86.90311432 -260.26654053]
[78.87300873 -273.10385132]
[75.44869232 -287.85351562]
[77.00160217 -302.91561890]
[83.36329651 -316.65634155]
[93.84369659 -327.58520508]
[107.30598450 -334.51669312]
[122.28985596 -336.69897461]
[137.16998291 -333.89529419]
[150.33227539 -326.40979004]
[160.34898376 -315.05441284]
[166.13357544 -301.06094360]
[167.05857849 -285.94726562]
[163.02365112 -271.35281372]
[154.46649170 -258.86068726]
[142.31529236 -249.82589722]
[127.88813782 -245.22851562]
[127.57608032 -230.23176575]
[127.26402283 -215.23501587]
[126.95197296 -200.23825073]
[129.97680664 -193.44148254]
[126.47418976 -184.93363953]
[125.85021210 -169.94662476]
[125.22623444 -154.95960999]
[138.81025696 -151.37519836]
[151.34605408 -145.01863098]
[162.27479553 -136.17028809]
[171.10865784 -125.22170258]
[177.45263672 -112.65821838]
[181.02217102 -99.03749084]
[181.65588379 -84.96472168]
[179.32295227 -71.06578064]
[174.12449646 -57.95936584]
[166.28932190 -46.22945786]
[156.16371155 -36.39931107]
[144.19622803 -28.90809822]
[130.91780090 -24.09129906]
[116.91819000 -22.16567993]
[115.67131805 -7.21759319]
[114.42444611 7.73049402]
[113.17756653 22.67858124]
[111.93069458 37.62666702]
[124.68593597 47.91301727]
[128.86102295 63.92971420]
[122.62680817 79.44152069]
[108.24658966 88.28807831]
[114.29605103 100.89346313]
[106.72419739 112.64755249]
[105.78857422 127.61833954]
[104.85294342 142.58912659]
[103.91731262 157.55992126]
[102.98168945 172.53071594]
[102.04605865 187.50151062]
[115.10909271 201.15274048]
[114.13024902 219.70373535]
[100.18804169 231.49407959]
[99.87598419 246.49084473]
[99.56392670 261.48757935]
[113.15900421 271.49890137]
[118.08222961 287.47521973]
[112.59020233 303.08944702]
[99.02404785 312.27990723]
[99.02404785 327.27990723]
[99.02404785 342.27990723]
[99.02404785 357.27990723]
[99.02404785 372.27990723]
[99.02404785 387.27990723]
[99.02404785 402.27990723]
[99.02404785 417.27990723]
[99.02404785 432.27990723]
[99.02404785 447.27990723]
[99.02404785 462.27990723]
[113.56394196 466.34121704]
[126.46832275 474.17572021]
[136.77960205 485.20205688]
[143.73262024 498.60198975]
[146.81141663 513.38116455]
[145.78753662 528.44281006]
[140.73693848 542.66937256]
[132.03440857 555.00500488]
[120.32574463 564.53442383]
[106.47980499 570.55047607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 126]
[27 125]
[28 124]
[33 121]
[34 120]
[35 119]
[36 118]
[37 117]
[38 116]
[40 114]
[45 110]
[46 109]
[47 108]
[48 107]
[49 106]
[61 92]
[62 91]
[63 90]
[64 88]
[65 87]
[66 86]
[67 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
