%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUAGGUAGGGGGGGGGGACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCxxxxxxxxxxACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACCCCCCCCCCCUUCUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[83.12915039 352.41375732]
[69.90895081 345.14129639]
[59.02215195 334.69430542]
[51.21102142 321.78506470]
[47.00814056 307.29373169]
[46.70006561 292.20840454]
[50.30780792 277.55758667]
[57.58538055 264.34017944]
[68.03659058 253.45741272]
[80.94885254 245.65127563]
[95.44178772 241.45397949]
[95.12973022 226.45722961]
[94.81767273 211.46047974]
[94.50561523 196.46372986]
[94.19356537 181.46696472]
[93.88150787 166.47021484]
[93.56945038 151.47346497]
[93.25739288 136.47671509]
[92.94533539 121.47995758]
[81.24571228 112.09278870]
[66.53775024 115.03827667]
[51.82978821 117.98375702]
[37.12182999 120.92923737]
[22.41386604 123.87472534]
[13.63681030 136.74333191]
[-1.32111418 139.52095032]
[-13.53527355 131.07406616]
[-28.24323463 134.01954651]
[-33.77715302 148.42021179]
[-46.23167038 157.52452087]
[-61.63259506 158.42732239]
[-75.06555176 150.84054565]
[-82.24412537 137.18508911]
[-80.87766266 121.81835175]
[-71.40219879 109.64382935]
[-56.84132004 104.54634857]
[-41.84134674 108.15250397]
[-31.18871689 119.31157684]
[-16.48075676 116.36609650]
[-8.46130657 103.86713409]
[6.41269875 100.67047882]
[19.46838379 109.16676331]
[34.17634583 106.22127533]
[48.88430786 103.27579498]
[63.59226990 100.33031464]
[78.30023193 97.38483429]
[63.98064041 92.91836548]
[49.00384140 92.08441925]
[37.21731949 82.80659485]
[32.88920593 68.44458008]
[37.58679199 54.19913864]
[49.60898972 45.22881317]
[64.60233307 44.78194046]
[77.13743591 53.02033234]
[82.67513275 66.96115112]
[91.44953918 79.12707520]
[89.58193207 64.24379730]
[87.71431732 49.36051559]
[85.84670258 34.47723389]
[83.97908783 19.59395599]
[82.11147308 4.71067572]
[80.24386597 -10.17260456]
[65.33093262 -12.57701969]
[51.70007706 -19.08674049]
[40.45629120 -29.17405701]
[32.51105499 -42.02123260]
[28.50845337 -56.58680344]
[28.77296066 -71.69000244]
[33.28313446 -86.10649109]
[41.67335510 -98.66757202]
[53.26346207 -108.35499573]
[67.11389923 -114.38342285]
[82.10187531 -116.26417542]
[97.01238251 -113.84477997]
[110.63669586 -107.32136536]
[121.87033844 -97.22276306]
[129.80267334 -84.36761475]
[133.79063416 -69.79802704]
[133.51095581 -54.69509888]
[128.98629761 -40.28315353]
[120.58346558 -27.73050308]
[108.98362732 -18.05473328]
[95.12714386 -12.04021740]
[96.99475861 2.84306264]
[98.86236572 17.72634315]
[100.72998047 32.60962296]
[102.59759521 47.49290085]
[104.46520996 62.37618256]
[106.33282471 77.25946045]
[111.82926178 63.30277252]
[117.32569885 49.34608459]
[119.23554993 34.46816635]
[128.40260315 22.59529114]
[142.31315613 16.98311615]
[157.15280151 19.17055893]
[168.85235596 28.55779839]
[174.20370483 42.57076263]
[171.73944092 57.36695480]
[162.13528442 68.88912201]
[148.02658081 73.97761536]
[135.25451660 81.84365082]
[122.48246765 89.70968628]
[137.46217346 88.92984009]
[152.44189453 88.14999390]
[167.42161560 87.37014771]
[182.40132141 86.59030914]
[188.74194336 72.65994263]
[200.83717346 63.28101349]
[215.90759277 60.60873413]
[230.49012756 65.25717163]
[241.23384094 76.15814209]
[245.66989136 90.80669403]
[242.77891541 105.83669281]
[233.22521973 117.79434967]
[219.20419312 123.93189240]
[203.93775940 122.83895111]
[190.93403625 114.76667786]
[183.18116760 101.57002258]
[168.20144653 102.34986877]
[153.22174072 103.12970734]
[138.24201965 103.90955353]
[123.26231384 104.68939972]
[136.78211975 111.18667603]
[151.17054749 115.42616272]
[159.72058105 127.75080872]
[158.65286255 142.71275330]
[148.43933105 153.69837952]
[133.59469604 155.85171509]
[120.68072510 148.22090149]
[115.40576935 134.17918396]
[107.94209290 121.16790009]
[108.25415039 136.16465759]
[108.56620026 151.16140747]
[108.87825775 166.15815735]
[109.19031525 181.15490723]
[109.50237274 196.15167236]
[109.81443024 211.14842224]
[110.12648773 226.14517212]
[110.43853760 241.14192200]
[125.09352875 244.73269653]
[138.31933594 251.99494934]
[149.21420288 262.43356323]
[157.03530884 275.33676147]
[161.24937439 289.82482910]
[161.56909180 304.90991211]
[157.97267151 319.56353760]
[150.70530701 332.78652954]
[140.26251221 343.67736816]
[127.35627747 351.49346924]
[112.86658478 355.70196533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[27 39]
[28 38]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[102 122]
[103 121]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
