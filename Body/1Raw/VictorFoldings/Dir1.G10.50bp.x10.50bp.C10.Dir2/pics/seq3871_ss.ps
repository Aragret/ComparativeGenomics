%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUUUAACCGGGGGGGGGGUCUCCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAxxxxxxxxxxAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCCCCCCCCCCCUCCUUUUACC\
) } def
/len { sequence length } bind def

/coor [
[84.31110382 427.67559814]
[71.39194489 419.91726685]
[60.61064911 409.38821411]
[52.54863358 396.65634155]
[47.64067459 382.40823364]
[46.15145111 367.41229248]
[48.16127396 352.47717285]
[53.56175995 338.40835571]
[62.06166077 325.96456909]
[73.20259857 315.81683350]
[86.38374329 308.51245117]
[100.89426422 304.44531250]
[100.27843475 289.45794678]
[99.66261292 274.47061157]
[99.04678345 259.48324585]
[98.43096161 244.49589539]
[97.81513214 229.50854492]
[97.19931030 214.52119446]
[96.58348083 199.53384399]
[95.96765900 184.54647827]
[95.35182953 169.55912781]
[94.73600769 154.57177734]
[80.75440216 151.33610535]
[68.09149933 144.58291626]
[57.61494064 134.77491760]
[50.04258347 122.58417511]
[45.89328003 108.84597778]
[45.45133591 94.50165558]
[48.74703217 80.53408051]
[55.55455399 67.90029907]
[65.40744781 57.46596527]
[77.63060760 49.94604111]
[91.38650513 45.85578156]
[91.07852936 30.85894585]
[90.77054596 15.86210728]
[90.46257019 0.86526912]
[76.35072327 -4.71428394]
[65.47946167 -15.24323368]
[59.48374176 -29.09476662]
[59.24862671 -44.14575577]
[64.77881622 -58.10218430]
[75.20264435 -68.84877777]
[88.90931702 -74.76960754]
[88.60134125 -89.76644897]
[88.29336548 -104.76328278]
[87.98538971 -119.76012421]
[87.67740631 -134.75695801]
[72.71839142 -136.04528809]
[57.98106003 -138.91639709]
[43.63240814 -143.33773804]
[29.83501625 -149.25923157]
[16.74521637 -156.61376953]
[4.51132774 -165.31802368]
[-6.72803068 -175.27337646]
[-16.84550858 -186.36700439]
[-25.72646523 -198.47323608]
[-33.27027512 -211.45487976]
[-39.39146042 -225.16484070]
[-44.02066040 -239.44778442]
[-47.10543060 -254.14187622]
[-48.61080933 -269.08062744]
[-48.51974106 -284.09472656]
[-46.83326340 -299.01412964]
[-43.57048035 -313.66970825]
[-38.76836395 -327.89544678]
[-32.48132324 -341.53015137]
[-24.78059959 -354.41934204]
[-15.75344467 -366.41693115]
[-5.50214338 -377.38702393]
[5.85714865 -387.20532227]
[18.19572067 -395.76052856]
[31.37376976 -402.95574951]
[45.24197769 -408.70944214]
[59.64320374 -412.95639038]
[74.41427612 -415.64852905]
[89.38782501 -416.75531006]
[104.39418793 -416.26419067]
[119.26332855 -414.18078613]
[133.82678223 -410.52862549]
[147.91950989 -405.34915161]
[161.38185120 -398.70101929]
[174.06124878 -390.65957642]
[185.81405640 -381.31594849]
[196.50709534 -370.77597046]
[206.01919556 -359.15908813]
[214.24259949 -346.59692383]
[221.08410645 -333.23184204]
[226.46621704 -319.21524048]
[230.32792664 -304.70596313]
[232.62550354 -289.86837769]
[233.33290100 -274.87066650]
[232.44209290 -259.88272095]
[229.96319580 -245.07437134]
[225.92428589 -230.61341858]
[220.37112427 -216.66369629]
[213.36663818 -203.38328552]
[204.99018860 -190.92266846]
[195.33668518 -179.42300415]
[184.51551819 -169.01461792]
[172.64930725 -159.81544495]
[159.87248230 -151.92970276]
[146.32983398 -145.44674683]
[132.17478943 -140.44004822]
[117.56776428 -136.96632385]
[102.67424774 -135.06494141]
[102.98222351 -120.06809998]
[103.29019928 -105.07125854]
[103.59818268 -90.07442474]
[103.90615845 -75.07758331]
[117.84436035 -69.72447968]
[128.70059204 -59.41489410]
[134.79910278 -45.69727325]
[135.18211365 -30.64932060]
[129.76011658 -16.56331253]
[119.33029175 -5.59692001]
[105.45941162 0.55729151]
[105.76738739 15.55412960]
[106.07536316 30.55096817]
[106.38333893 45.54780579]
[121.41833496 49.53175735]
[134.72946167 57.57768250]
[145.24536133 69.03799438]
[152.11965942 82.99031067]
[154.79907227 98.31166077]
[153.06793213 113.76889801]
[147.06559753 128.11793518]
[137.27514648 140.20387268]
[124.48458099 149.05398560]
[109.72335815 153.95594788]
[110.33918762 168.94329834]
[110.95500946 183.93066406]
[111.57083893 198.91801453]
[112.18666077 213.90536499]
[112.80249023 228.89271545]
[113.41831207 243.88006592]
[114.03414154 258.86743164]
[114.64996338 273.85476685]
[115.26579285 288.84213257]
[115.88161469 303.82949829]
[130.67689514 306.69244385]
[144.41285706 312.89083862]
[156.34877014 322.09033203]
[165.84091187 333.79486084]
[172.37741089 347.37316895]
[175.60574341 362.09304810]
[175.35182190 377.16064453]
[171.62933350 391.76336670]
[164.63903809 405.11373901]
[154.75788879 416.49176025]
[142.51878357 425.28387451]
[128.58175659 431.01589966]
[113.69842529 433.37872314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[33 119]
[34 118]
[35 117]
[36 116]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
