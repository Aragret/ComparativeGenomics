%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUAGGCGGGGGGGGGGACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUxxxxxxxxxxCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACCCCCCCCCCCAAUCCUAGGC\
) } def
/len { sequence length } bind def

/coor [
[83.65784454 377.82150269]
[70.43764496 370.54904175]
[59.55084229 360.10202026]
[51.73971176 347.19277954]
[47.53683090 332.70147705]
[47.22875595 317.61611938]
[50.83649826 302.96530151]
[58.11407089 289.74792480]
[68.56527710 278.86514282]
[81.47753906 271.05902100]
[95.97047424 266.86172485]
[95.65842438 251.86495972]
[95.34636688 236.86820984]
[95.03430939 221.87145996]
[94.72225189 206.87471008]
[94.41019440 191.87794495]
[94.09813690 176.88119507]
[93.78608704 161.88444519]
[93.47402954 146.88769531]
[93.16197205 131.89093018]
[74.20919800 124.77624512]
[61.65697479 106.62523651]
[46.65778732 106.78127289]
[31.65859985 106.93730927]
[16.65941048 107.09334564]
[1.66022265 107.24938202]
[-13.33896542 107.40541840]
[-28.27327347 108.80772400]
[-43.03932953 111.44658661]
[-57.80538559 114.08544922]
[-72.57144165 116.72431183]
[-84.75392914 127.70243073]
[-100.26686859 122.38446045]
[-103.15187073 106.24108124]
[-90.44110107 95.87921143]
[-75.21030426 101.95825958]
[-60.44424820 99.31939697]
[-45.67819214 96.68052673]
[-30.91213799 94.04166412]
[-43.47948074 85.85253143]
[-48.98284531 71.89857483]
[-45.38884735 57.33549881]
[-34.02539825 47.54407120]
[-19.09106445 46.14203262]
[-6.10378695 53.64740753]
[0.13789417 67.28710938]
[-2.67219734 82.02153778]
[-13.49500179 92.40622711]
[1.50418615 92.25019073]
[16.50337410 92.09415436]
[31.50256348 91.93811798]
[46.50175095 91.78208160]
[61.50093842 91.62604523]
[67.42090607 77.84366608]
[57.20742416 66.85800171]
[41.38162231 62.55962372]
[37.45339203 46.63790512]
[49.46376419 35.47174835]
[65.05748749 40.54793549]
[68.19308472 56.64451981]
[78.40657043 67.63018799]
[99.09663391 64.24790955]
[116.70647430 71.98778534]
[127.14628601 61.21697617]
[137.58610535 50.44616699]
[148.02590942 39.67536163]
[158.46572876 28.90455246]
[143.80403137 32.07228088]
[129.02738953 29.49330330]
[116.30554962 21.54630470]
[107.50651550 9.39818192]
[103.92227936 -5.16729975]
[106.07913971 -20.01142120]
[113.66039276 -32.95454788]
[125.55284882 -42.09618378]
[140.01028442 -46.09401321]
[154.90983582 -44.36101532]
[168.06373596 -37.15166092]
[177.54054260 -25.52452660]
[181.94873047 -11.18688583]
[180.64100647 3.75600123]
[173.80981445 17.10947609]
[186.90296936 9.79036999]
[199.99612427 2.47126412]
[185.44270325 -1.16168594]
[175.68171692 -12.55129242]
[174.31964111 -27.48932266]
[181.85974121 -40.45647049]
[195.51609802 -46.66163635]
[210.24295044 -43.81213379]
[220.59902954 -32.96079254]
[222.75798035 -18.11697388]
[215.92271423 -4.76579142]
[230.04751587 -9.81454754]
[244.17231750 -14.86330414]
[258.29711914 -19.91205978]
[272.42190552 -24.96081734]
[286.49343872 -30.15623283]
[300.51016235 -35.49774551]
[314.52685547 -40.83925629]
[328.54357910 -46.18077087]
[334.77725220 -60.70374298]
[349.48519897 -66.48748779]
[363.94146729 -60.10061264]
[369.56939697 -45.33233261]
[363.03002930 -30.94441032]
[348.20306396 -25.47294426]
[333.88510132 -32.16405869]
[319.86837769 -26.82254410]
[305.85165405 -21.48103142]
[291.83496094 -16.13951874]
[286.67117310 -10.78405094]
[277.47067261 -10.83601379]
[263.34588623 -5.78725767]
[249.22106934 -0.73850125]
[235.09626770 4.31025505]
[220.97146606 9.35901165]
[207.31523132 15.56441879]
[194.22207642 22.88352394]
[181.12892151 30.20262909]
[169.23654175 39.34436417]
[158.79672241 50.11517334]
[148.35690308 60.88598251]
[137.91709900 71.65679169]
[127.47728729 82.42759705]
[132.01902771 93.78936768]
[132.05444336 106.02522278]
[127.57852173 117.41308594]
[119.22121429 126.35024261]
[108.15872192 131.57888794]
[108.47077942 146.57563782]
[108.78283691 161.57238770]
[109.09489441 176.56913757]
[109.40695190 191.56590271]
[109.71900940 206.56265259]
[110.03105927 221.55940247]
[110.34311676 236.55615234]
[110.65517426 251.55291748]
[110.96723175 266.54965210]
[125.62222290 270.14044189]
[138.84803772 277.40267944]
[149.74290466 287.84127808]
[157.56399536 300.74450684]
[161.77806091 315.23257446]
[162.09779358 330.31765747]
[158.50135803 344.97125244]
[151.23399353 358.19427490]
[140.79119873 369.08511353]
[127.88497162 376.90121460]
[113.39527893 381.10968018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 39]
[29 38]
[30 37]
[31 36]
[54 61]
[55 60]
[63 125]
[64 124]
[65 123]
[66 122]
[67 121]
[82 120]
[83 119]
[84 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
