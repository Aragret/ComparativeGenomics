%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUUAUUGGGGGGGGGGCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCxxxxxxxxxxACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCCCCCCCCCCCUAAUUAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 407.34991455]
[71.19830322 401.33389282]
[59.48964310 391.80447388]
[50.78712082 379.46878052]
[45.73651886 365.24227905]
[44.71262741 350.18060303]
[47.79142761 335.40142822]
[54.74444962 322.00149536]
[65.05573273 310.97515869]
[77.96011353 303.14065552]
[92.50000000 299.07934570]
[92.50000000 284.07934570]
[92.50000000 269.07934570]
[92.50000000 254.07934570]
[92.50000000 239.07934570]
[92.50000000 224.07934570]
[92.50000000 209.07934570]
[92.50000000 194.07934570]
[92.50000000 179.07934570]
[92.50000000 164.07934570]
[92.50000000 149.07934570]
[92.50000000 134.07934570]
[76.33570862 141.33978271]
[55.72777557 141.04669189]
[41.60297394 146.09544373]
[37.36915207 161.02375793]
[25.14850426 170.58593750]
[9.64011860 171.10514832]
[-3.19271564 162.38172913]
[-8.41551113 147.77001953]
[-4.01999664 132.88851929]
[8.30366325 123.45946503]
[23.81676865 123.10852814]
[36.55421448 131.97064209]
[50.67901993 126.92188263]
[50.21120453 119.43649292]
[49.27557755 104.46569824]
[48.80776215 96.98030090]
[34.16426086 93.72947693]
[21.86631584 103.38838959]
[6.23867178 102.83090973]
[-5.33977318 92.32026672]
[-7.40203238 76.81925964]
[1.02563024 63.64699554]
[15.96393013 59.02301407]
[30.35945892 65.13061523]
[37.41508865 79.08597565]
[52.05858994 82.33679962]
[55.51208878 75.67922211]
[62.41908646 62.36406708]
[65.87258148 55.70648956]
[54.78126907 45.60784149]
[43.68995285 35.50918961]
[27.56162262 32.54120636]
[22.32349586 17.00112724]
[33.36411285 4.87525320]
[49.32583237 8.63764381]
[53.78860474 24.41787529]
[64.87992096 34.51652527]
[75.97123718 44.61517334]
[95.77284241 48.29242325]
[110.57458496 57.92089462]
[118.94710541 70.69711304]
[129.60873413 60.14582443]
[140.27035522 49.59453583]
[150.93197632 39.04324341]
[161.59361267 28.49195480]
[152.29180908 16.70397758]
[144.36834717 3.94863367]
[137.92288208 -9.61366749]
[133.03646851 -23.81236649]
[129.77056885 -38.46889496]
[128.16624451 -53.39893723]
[128.24366760 -68.41473389]
[130.00187683 -83.32743073]
[133.41876221 -97.94950104]
[138.45133972 -112.09705353]
[145.03631592 -125.59216309]
[153.09089661 -138.26512146]
[162.51377869 -149.95654297]
[173.18646240 -160.51939392]
[184.97471619 -169.82086182]
[197.73028564 -177.74392700]
[211.29278564 -184.18899536]
[225.49163818 -189.07496643]
[240.14825439 -192.34043884]
[255.07835388 -193.94432068]
[270.09414673 -193.86643982]
[285.00677490 -192.10778809]
[299.62875366 -188.69047546]
[313.77615356 -183.65747070]
[327.27105713 -177.07208252]
[339.94378662 -169.01712036]
[351.63491821 -159.59388733]
[362.19744873 -148.92089844]
[371.49856567 -137.13237000]
[379.42126465 -124.37654877]
[385.86590576 -110.81386566]
[390.75146484 -96.61487579]
[394.01651001 -81.95814514]
[395.61993408 -67.02800751]
[395.54159546 -52.01222229]
[393.78250122 -37.09962463]
[390.36474609 -22.47775650]
[385.33132935 -8.33050728]
[378.74554443 5.16420889]
[370.69018555 17.83668137]
[361.26663208 29.52754021]
[350.59332275 40.08975983]
[338.80450439 49.39051056]
[326.04843140 57.31282425]
[312.48556519 63.75706863]
[298.28643799 68.64220428]
[283.62960815 71.90679169]
[268.69943237 73.50978088]
[253.68363953 73.43099976]
[238.77108765 71.67145538]
[224.14932251 68.25326538]
[210.00222778 63.21942139]
[196.50770569 56.63322449]
[183.83547974 48.57751083]
[172.14489746 39.15357971]
[161.48327637 49.70487213]
[150.82165527 60.25616074]
[140.16001892 70.80744934]
[129.49839783 81.35874176]
[134.79499817 102.63813782]
[126.35060120 122.87570190]
[107.50000000 134.07934570]
[107.50000000 149.07934570]
[107.50000000 164.07934570]
[107.50000000 179.07934570]
[107.50000000 194.07934570]
[107.50000000 209.07934570]
[107.50000000 224.07934570]
[107.50000000 239.07934570]
[107.50000000 254.07934570]
[107.50000000 269.07934570]
[107.50000000 284.07934570]
[107.50000000 299.07934570]
[122.03988647 303.14065552]
[134.94427490 310.97515869]
[145.25555420 322.00149536]
[152.20857239 335.40142822]
[155.28736877 350.18060303]
[154.26348877 365.24227905]
[149.21287537 379.46878052]
[140.51036072 391.80447388]
[128.80169678 401.33389282]
[114.95575714 407.34991455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 35]
[25 34]
[38 48]
[39 47]
[51 60]
[52 59]
[53 58]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
