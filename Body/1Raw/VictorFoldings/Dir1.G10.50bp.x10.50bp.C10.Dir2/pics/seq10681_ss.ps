%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUAUUAUGGGGGGGGGGCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAxxxxxxxxxxAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCCCCCCCCCCCUUCAUUAU\
) } def
/len { sequence length } bind def

/coor [
[69.00518036 406.72503662]
[55.78498077 399.45257568]
[44.89817810 389.00558472]
[37.08704758 376.09631348]
[32.88416672 361.60501099]
[32.57609558 346.51968384]
[36.18383408 331.86883545]
[43.46140671 318.65145874]
[53.91261673 307.76867676]
[66.82487488 299.96255493]
[81.31781769 295.76525879]
[81.00576019 280.76849365]
[80.69370270 265.77175903]
[80.38164520 250.77499390]
[80.06958771 235.77824402]
[79.75753021 220.78149414]
[79.44548035 205.78472900]
[79.13342285 190.78797913]
[78.82136536 175.79122925]
[78.50930786 160.79447937]
[78.19725037 145.79771423]
[77.88519287 130.80096436]
[67.67171478 119.81529999]
[52.73740768 118.41300201]
[37.80310059 117.01069641]
[22.86879349 115.60839081]
[16.84254837 125.48902893]
[7.58708763 132.35116577]
[-3.51850748 135.22050476]
[-14.83746052 133.71417236]
[-24.71652794 128.09123230]
[-31.72746277 119.20917511]
[-34.87347794 108.39329529]
[-49.69123459 106.06218719]
[-64.50899506 103.73108673]
[-79.32675171 101.39997864]
[-88.91744995 113.39640045]
[-103.22728729 118.97530365]
[-118.40698242 116.63599396]
[-130.37327576 107.00773621]
[-135.90730286 92.68048096]
[-133.52043152 77.50819397]
[-123.85470581 65.57213593]
[-109.51017761 60.08304977]
[-94.34544373 62.51747513]
[-82.43974304 72.22055817]
[-76.99564362 86.58222198]
[-62.17788696 88.91333008]
[-47.36013031 91.24443054]
[-32.54237366 93.57553101]
[-20.21057892 79.61900330]
[-1.82810950 75.80981445]
[15.30378819 83.84316254]
[24.27109718 100.67408752]
[39.20540619 102.07638550]
[54.13971329 103.47869110]
[69.07402039 104.88099670]
[72.09400940 89.05713654]
[82.28529358 77.49468994]
[96.28137207 72.94746399]
[109.96199036 76.01347351]
[119.47035217 64.41213226]
[128.97871399 52.81079102]
[138.48706055 41.20944977]
[147.99542236 29.60811043]
[137.54138184 18.82800674]
[128.38433838 6.92647934]
[120.64368439 -5.94131327]
[114.42034149 -19.60761261]
[109.79543304 -33.89424896]
[106.82926178 -48.61496735]
[105.56049347 -63.57785416]
[106.00566864 -78.58783722]
[108.15898132 -93.44923401]
[111.99237061 -107.96828461]
[117.45584869 -121.95571136]
[124.47819519 -135.22915649]
[132.96784973 -147.61558533]
[142.81414795 -158.95350647]
[153.88870239 -169.09509277]
[166.04714966 -177.90814209]
[179.13096619 -185.27777100]
[192.96960449 -191.10787964]
[207.38261414 -195.32246399]
[222.18211365 -197.86659241]
[237.17515564 -198.70707703]
[252.16627502 -197.83297729]
[266.96005249 -195.25567627]
[281.36355591 -191.00878906]
[295.18908691 -185.14765930]
[308.25634766 -177.74871826]
[320.39501953 -168.90843201]
[331.44680786 -158.74203491]
[341.26763916 -147.38206482]
[349.72952271 -134.97663879]
[356.72207642 -121.68748474]
[362.15417480 -107.68784332]
[365.95501709 -93.16022491]
[368.07501221 -78.29404449]
[368.48651123 -63.28310013]
[367.18420410 -48.32309723]
[364.18502808 -33.60906601]
[359.52810669 -19.33283234]
[353.27413940 -5.68052197]
[345.50466919 7.16988277]
[336.32095337 19.05084991]
[325.84277344 29.80748749]
[314.20669556 39.29955673]
[301.56442261 47.40331650]
[288.08078003 54.01311111]
[273.93157959 59.04277039]
[259.30123901 62.42671967]
[244.38052368 64.12084961]
[229.36395264 64.10306549]
[214.44728088 62.37360382]
[199.82501221 58.95501328]
[185.68774414 53.89185715]
[172.21980286 47.25014496]
[159.59677124 39.11647034]
[150.08840942 50.71781158]
[140.58004761 62.31915283]
[131.07168579 73.92049408]
[121.56333160 85.52183533]
[126.86766815 96.95092773]
[126.25280762 110.04041290]
[119.39507294 121.79403687]
[107.45062256 129.30944824]
[92.88195038 130.48890686]
[93.19400787 145.48567200]
[93.50606537 160.48242188]
[93.81811523 175.47917175]
[94.13017273 190.47592163]
[94.44223022 205.47268677]
[94.75428772 220.46943665]
[95.06634521 235.46618652]
[95.37840271 250.46293640]
[95.69045258 265.45968628]
[96.00251007 280.45645142]
[96.31456757 295.45321655]
[110.96955872 299.04397583]
[124.19536591 306.30621338]
[135.09024048 316.74481201]
[142.91133118 329.64804077]
[147.12541199 344.13610840]
[147.44512939 359.22119141]
[143.84869385 373.87481689]
[136.58132935 387.09780884]
[126.13853455 397.98864746]
[113.23230743 405.80474854]
[98.74261475 410.01324463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 57]
[24 56]
[25 55]
[26 54]
[33 50]
[34 49]
[35 48]
[36 47]
[61 123]
[62 122]
[63 121]
[64 120]
[65 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
