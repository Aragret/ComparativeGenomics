%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUUUCACCGGGGGGGGGGUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGxxxxxxxxxxUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUACCCCCCCCCCAUAUUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 375.83489990]
[71.19830322 369.81887817]
[59.48964310 360.28945923]
[50.78712082 347.95379639]
[45.73651886 333.72726440]
[44.71262741 318.66558838]
[47.79142761 303.88641357]
[54.74444962 290.48651123]
[65.05573273 279.46017456]
[77.96011353 271.62567139]
[92.50000000 267.56433105]
[92.50000000 252.56434631]
[92.50000000 237.56434631]
[92.50000000 222.56434631]
[92.50000000 207.56434631]
[92.50000000 192.56434631]
[92.50000000 177.56434631]
[92.50000000 162.56434631]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[92.50000000 52.43565369]
[77.52462006 51.49363708]
[62.63793564 49.61316299]
[47.89870453 46.80165482]
[33.36509705 43.07020569]
[19.09446907 38.43354416]
[5.14313841 32.90997314]
[-8.43383217 26.52128220]
[-21.58286095 19.29269409]
[-34.25205612 11.25273037]
[-46.39141464 2.43312478]
[-57.95302963 -7.13131666]
[-68.89127350 -17.40284729]
[-79.16297150 -28.34092903]
[-88.72759247 -39.90239334]
[-97.54739380 -52.04161453]
[-105.58755493 -64.71068573]
[-112.81634521 -77.85959625]
[-119.20524597 -91.43647003]
[-124.72904205 -105.38771057]
[-129.36592102 -119.65827179]
[-133.09759521 -134.19181824]
[-135.90933228 -148.93099976]
[-137.79003906 -163.81765747]
[-138.73229980 -178.79302979]
[-138.73237610 -193.79800415]
[-137.79028320 -208.77337646]
[-135.90972900 -223.66004944]
[-133.09814453 -238.39927673]
[-129.36662292 -252.93286133]
[-124.72988129 -267.20346069]
[-119.20623779 -281.15475464]
[-112.81748199 -294.73168945]
[-105.58882141 -307.88070679]
[-97.54878998 -320.54983521]
[-88.72911835 -332.68914795]
[-79.16461945 -344.25073242]
[-68.89303589 -355.18890381]
[-57.95489883 -365.46057129]
[-46.39338303 -375.02511597]
[-34.25411606 -383.84484863]
[-21.58500671 -391.88494873]
[-8.43605232 -399.11367798]
[5.14085150 -405.50250244]
[19.09212303 -411.02621460]
[33.36270523 -415.66302490]
[47.89627457 -419.39462280]
[62.63547516 -422.20629883]
[77.52213287 -424.08691406]
[92.49751282 -425.02908325]
[107.50248718 -425.02908325]
[122.47786713 -424.08691406]
[137.36453247 -422.20629883]
[152.10372925 -419.39462280]
[166.63729858 -415.66302490]
[180.90788269 -411.02621460]
[194.85914612 -405.50250244]
[208.43605042 -399.11367798]
[221.58500671 -391.88494873]
[234.25411987 -383.84484863]
[246.39338684 -375.02511597]
[257.95489502 -365.46057129]
[268.89303589 -355.18890381]
[279.16461182 -344.25073242]
[288.72912598 -332.68914795]
[297.54879761 -320.54983521]
[305.58880615 -307.88070679]
[312.81747437 -294.73168945]
[319.20623779 -281.15475464]
[324.72988892 -267.20346069]
[329.36660767 -252.93286133]
[333.09814453 -238.39927673]
[335.90972900 -223.66004944]
[337.79028320 -208.77337646]
[338.73236084 -193.79800415]
[338.73229980 -178.79302979]
[337.79003906 -163.81765747]
[335.90933228 -148.93099976]
[333.09759521 -134.19181824]
[329.36593628 -119.65827179]
[324.72903442 -105.38771057]
[319.20526123 -91.43647003]
[312.81634521 -77.85959625]
[305.58755493 -64.71068573]
[297.54739380 -52.04161453]
[288.72760010 -39.90239334]
[279.16296387 -28.34092903]
[268.89126587 -17.40284729]
[257.95303345 -7.13131666]
[246.39141846 2.43312478]
[234.25205994 11.25273037]
[221.58285522 19.29269409]
[208.43383789 26.52128220]
[194.85685730 32.90997314]
[180.90553284 38.43354416]
[166.63490295 43.07020569]
[152.10128784 46.80165482]
[137.36206055 49.61316299]
[122.47537994 51.49363708]
[107.50000000 52.43565369]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[107.50000000 162.56434631]
[107.50000000 177.56434631]
[107.50000000 192.56434631]
[107.50000000 207.56434631]
[107.50000000 222.56434631]
[107.50000000 237.56434631]
[107.50000000 252.56434631]
[107.50000000 267.56433105]
[122.03988647 271.62567139]
[134.94427490 279.46017456]
[145.25555420 290.48651123]
[152.20857239 303.88641357]
[155.28736877 318.66558838]
[154.26348877 333.72726440]
[149.21287537 347.95379639]
[140.51036072 360.28945923]
[128.80169678 369.81887817]
[114.95575714 375.83489990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[25 126]
[26 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
