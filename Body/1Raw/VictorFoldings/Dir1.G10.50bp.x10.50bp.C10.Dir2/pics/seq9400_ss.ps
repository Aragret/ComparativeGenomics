%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCCUUAGGGGGGGGGGCGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAxxxxxxxxxxACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCCCCCCCCCCCAACCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[83.58431244 374.28778076]
[70.36411285 367.01531982]
[59.47731018 356.56832886]
[51.66617966 343.65905762]
[47.46329880 329.16775513]
[47.15522766 314.08239746]
[50.76296616 299.43157959]
[58.04053879 286.21420288]
[68.49174500 275.33142090]
[81.40400696 267.52529907]
[95.89694977 263.32800293]
[95.58489227 248.33125305]
[95.27283478 233.33448792]
[94.96077728 218.33773804]
[94.64871979 203.34098816]
[94.33666229 188.34423828]
[94.02461243 173.34747314]
[93.71255493 158.35072327]
[93.40049744 143.35397339]
[93.08843994 128.35722351]
[92.77638245 113.36046600]
[88.31957245 99.03786469]
[80.06727600 86.51190186]
[71.81498718 73.98593903]
[63.23364639 77.11367798]
[52.64488602 75.45501709]
[37.71057892 74.05271149]
[22.77627182 72.65041351]
[7.84196472 71.24810791]
[2.43914866 85.34463501]
[-6.56743956 97.46007538]
[-18.50945282 106.69538879]
[-32.50070953 112.36524200]
[-47.50297546 114.04889679]
[-62.40297318 111.62142181]
[-76.09502411 105.26294708]
[-87.56309509 95.44531250]
[-95.95617676 82.89704895]
[-100.65143585 68.54933167]
[-101.30046844 53.46684647]
[-97.85510254 38.76881790]
[-90.57101440 25.54593658]
[-79.98871613 14.77942848]
[-66.89350891 7.26823997]
[-52.25712204 3.56975079]
[-37.16568375 3.95841360]
[-22.73907471 8.40538692]
[-10.04784870 16.58067513]
[-0.03377660 27.87761879]
[6.56003046 41.45790863]
[9.24426842 56.31380081]
[24.17857552 57.71610260]
[39.11288452 59.11840820]
[54.04719162 60.52070999]
[65.34619904 50.65498734]
[65.97017670 35.66797256]
[66.59415436 20.68095398]
[51.85789871 17.71626282]
[37.76689911 12.48269749]
[24.66815376 5.10913992]
[12.88423061 -4.22282934]
[2.70532060 -15.28340244]
[-5.61791229 -27.80020142]
[-11.88050079 -41.46499252]
[-15.92822266 -55.94126511]
[-17.66139984 -70.87252808]
[-17.03735161 -85.89108276]
[-14.07144260 -100.62709045]
[-8.83671474 -114.71765900]
[-1.46207678 -127.81579590]
[7.87086487 -139.59895325]
[18.93227768 -149.77694702]
[31.44976425 -158.09915161]
[45.11507034 -164.36061096]
[59.59167480 -168.40713501]
[74.52307892 -170.13908386]
[89.54158783 -169.51379395]
[104.27735138 -166.54666138]
[118.36748505 -161.31077576]
[131.46501160 -153.93505859]
[143.24739075 -144.60115051]
[153.42448425 -133.53889465]
[161.74565125 -121.02071381]
[168.00598145 -107.35489655]
[172.05131531 -92.87795258]
[173.78202820 -77.94640350]
[173.15550232 -62.92795181]
[170.18716431 -48.19243622]
[164.95010376 -34.10273361]
[157.57330322 -21.00581169]
[148.23841858 -9.22420025]
[137.17532349 0.95197225]
[124.65647125 9.27210712]
[110.99012756 15.53131294]
[96.51285553 19.57545090]
[81.58116913 21.30493164]
[80.95719147 36.29194641]
[80.33321381 51.27896500]
[84.34095001 65.73365021]
[92.59323883 78.25961304]
[100.84552765 90.78557587]
[108.71485138 86.12709045]
[120.16110992 87.90061951]
[135.09541321 89.30292511]
[150.02972412 90.70522308]
[164.96403503 92.10752869]
[170.94664001 78.21279907]
[180.93168640 66.84819794]
[193.94090271 59.12710571]
[208.69981384 55.80596161]
[223.76246643 57.21013260]
[237.65318298 63.20206070]
[249.01109314 73.19470978]
[256.72344971 86.20910645]
[260.03472900 100.97023010]
[258.62045288 116.03193665]
[252.61921692 129.91864014]
[242.61895752 141.26985168]
[229.59939575 148.97349548]
[214.83605957 152.27485657]
[199.77529907 150.85050964]
[185.89262390 144.83996582]
[174.54812622 134.83210754]
[166.85319519 121.80738831]
[163.56172180 107.04183960]
[148.62741089 105.63953400]
[133.69311523 104.23722839]
[118.75880432 102.83493042]
[107.77313995 113.04840851]
[108.08519745 128.04516602]
[108.39724731 143.04191589]
[108.70930481 158.03866577]
[109.02136230 173.03541565]
[109.33341980 188.03218079]
[109.64547729 203.02893066]
[109.95753479 218.02568054]
[110.26958466 233.02243042]
[110.58164215 248.01919556]
[110.89369965 263.01593018]
[125.54869080 266.60671997]
[138.77450562 273.86895752]
[149.66937256 284.30755615]
[157.49046326 297.21078491]
[161.70454407 311.69885254]
[162.02426147 326.78393555]
[158.42782593 341.43753052]
[151.16046143 354.66055298]
[140.71766663 365.55139160]
[127.81143951 373.36749268]
[113.32174683 377.57598877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 101]
[23 100]
[24 99]
[26 54]
[27 53]
[28 52]
[29 51]
[55 98]
[56 97]
[57 96]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
