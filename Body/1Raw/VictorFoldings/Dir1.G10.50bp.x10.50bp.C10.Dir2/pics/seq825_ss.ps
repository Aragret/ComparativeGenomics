%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCCACAGGGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGxxxxxxxxxxUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUCCCCCCCCCCACCCCUCACA\
) } def
/len { sequence length } bind def

/coor [
[215.80911255 356.85525513]
[213.31092834 342.04852295]
[212.48632812 327.05517578]
[213.34567261 312.06381226]
[215.87812805 297.26290894]
[220.05187988 282.83862305]
[225.81442261 268.97235107]
[233.09329224 255.83851624]
[241.79693604 243.60223389]
[251.81590271 232.41740417]
[241.83317566 221.22164917]
[231.85044861 210.02587891]
[221.86772156 198.83010864]
[211.88499451 187.63435364]
[201.90228271 176.43858337]
[191.91955566 165.24281311]
[181.25791931 154.69152832]
[169.95892334 144.82580566]
[158.65991211 134.96008301]
[147.36090088 125.09435272]
[136.06190491 115.22863007]
[124.76290131 105.36290741]
[117.10556793 120.16647339]
[101.36040497 127.51749420]
[83.70825195 123.57688904]
[71.67243958 109.13884735]
[56.69272232 108.35900116]
[41.71300888 107.57915497]
[26.73329353 106.79930878]
[11.74059677 106.33126831]
[-3.25859141 106.17523193]
[-18.25778008 106.01919556]
[-33.25696945 105.86315918]
[-41.64607620 118.81021881]
[-55.71255112 125.14566040]
[-70.96783447 122.84786224]
[-82.54402161 112.65004730]
[-86.74718475 97.80629730]
[-82.23612213 83.05319977]
[-70.45029449 73.09841919]
[-55.15050507 71.11848450]
[-41.21887589 77.74518585]
[-33.10093307 90.86397552]
[-18.10174370 91.02001190]
[-3.10255480 91.17604828]
[11.89663410 91.33208466]
[15.91487980 88.64336395]
[21.67762375 88.49479675]
[27.51313782 91.81959534]
[42.49285126 92.59944153]
[57.47256851 93.37928772]
[72.45227814 94.15913391]
[79.35928345 80.84397888]
[70.09432983 69.04734039]
[60.82938004 57.25069809]
[51.56443024 45.45405579]
[42.29948425 33.65741730]
[26.88575554 28.05839539]
[24.29461479 11.86524868]
[37.19160461 1.73609698]
[52.30940628 8.09094429]
[54.09612274 24.39246750]
[63.36107254 36.18910980]
[72.62602234 47.98574829]
[81.89096832 59.78238678]
[91.15592194 71.57902527]
[103.92697144 72.73019409]
[114.04857635 78.91447449]
[115.29545593 63.96638870]
[116.54232788 49.01829910]
[103.01464844 42.08501434]
[93.17377472 30.49944305]
[88.52034760 16.02829552]
[89.76399994 0.87831932]
[96.71507263 -12.64022446]
[108.31358337 -22.46585655]
[122.79083252 -27.10023689]
[137.93916321 -25.83666039]
[151.44854736 -18.86781120]
[161.25891113 -7.25638628]
[165.87425232 7.22695351]
[164.59074402 22.37360573]
[157.60412598 35.87381363]
[145.97981262 45.66889572]
[131.49041748 50.26517487]
[130.24354553 65.21326447]
[128.99665833 80.16134644]
[134.62861633 94.06390381]
[145.92762756 103.92962646]
[157.22663879 113.79534912]
[168.52563477 123.66107178]
[179.82464600 133.52679443]
[191.12364197 143.39251709]
[191.62246704 128.40081787]
[202.44349670 118.01307678]
[217.44306946 118.12697601]
[228.10510254 128.67785645]
[228.37619019 143.67539978]
[218.10241699 154.60470581]
[203.11531067 155.26008606]
[213.09803772 166.45585632]
[223.08076477 177.65162659]
[233.06349182 188.84738159]
[243.04621887 200.04315186]
[253.02894592 211.23892212]
[263.01168823 222.43467712]
[275.26730347 213.75830078]
[288.41732788 206.50871277]
[302.29638672 200.77706909]
[316.72991943 196.63545227]
[331.53643799 194.13595581]
[346.52969360 193.30999756]
[361.52114868 194.16799927]
[376.32229614 196.69912720]
[390.74694824 200.87158203]
[404.61370850 206.63288879]
[417.74822998 213.91056824]
[429.98529053 222.61311340]
[441.17098999 232.63108826]
[451.16470337 243.83848572]
[459.84069824 256.09439087]
[467.08990479 269.24462891]
[472.82113647 283.12387085]
[476.96234131 297.55752563]
[479.46139526 312.36410522]
[480.28689575 327.35739136]
[479.42843628 342.34881592]
[476.89688110 357.14987183]
[472.72396851 371.57440186]
[466.96228027 385.44100952]
[459.68420410 398.57528687]
[450.98126221 410.81210327]
[440.96298218 421.99749756]
[429.75527954 431.99087524]
[417.49911499 440.66653442]
[404.34866333 447.91534424]
[390.46923828 453.64614868]
[376.03546143 457.78689575]
[361.22882080 460.28552246]
[346.23550415 461.11056519]
[331.24411011 460.25167847]
[316.44311523 457.71966553]
[302.01870728 453.54632568]
[288.15228271 447.78421021]
[275.01821899 440.50573730]
[262.78167725 431.80245972]
[251.59655762 421.78381348]
[241.60351562 410.57580566]
[232.92823792 398.31939697]
[225.67982483 385.16873169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 106]
[11 105]
[12 104]
[13 103]
[14 102]
[15 101]
[16 100]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[26 52]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[68 87]
[69 86]
[70 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
