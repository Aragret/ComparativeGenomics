%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCCCACUAUGCGGGGGGGGGGUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACxxxxxxxxxxAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCACCCCCCCCCCAAACCCCACUCUGC\
) } def
/len { sequence length } bind def

/coor [
[87.52037048 618.32122803]
[73.15811920 613.81451416]
[59.99722672 606.50866699]
[48.57662964 596.70275879]
[39.36399078 584.79852295]
[32.73656082 571.28326416]
[28.96573257 556.71044922]
[28.20591545 541.67694092]
[30.48822403 526.79821777]
[35.71920013 512.68359375]
[43.68463898 499.91113281]
[54.05836105 489.00375366]
[66.41556549 480.40814209]
[80.25024414 474.47631836]
[94.99585724 471.45111084]
[94.99585724 456.45111084]
[94.99585724 441.45111084]
[94.99585724 426.45111084]
[94.99585724 411.45111084]
[94.99585724 396.45111084]
[94.99585724 381.45111084]
[94.99585724 366.45111084]
[94.99585724 351.45111084]
[94.99585724 336.45111084]
[94.99585724 321.45111084]
[92.27379608 317.46804810]
[92.06136322 311.72183228]
[95.30392456 305.86145020]
[95.89652252 290.87316895]
[96.04470825 275.87390137]
[95.74835205 260.87683105]
[95.45199585 245.87974548]
[81.12776184 241.59286499]
[68.81321716 233.07687378]
[59.72152710 221.15541077]
[54.75306702 206.98835754]
[54.40629196 191.95898438]
[58.72774124 177.53884888]
[67.30625916 165.14379883]
[79.31207275 155.99485779]
[93.57703400 150.99803162]
[93.28067780 136.00096130]
[92.98432159 121.00389099]
[92.68796539 106.00682068]
[89.79178619 101.56463623]
[89.62123871 95.81198883]
[92.68796539 90.41410828]
[92.98432159 75.41703796]
[93.28067780 60.41996384]
[93.57703400 45.42288971]
[92.54054260 30.45874405]
[90.17938995 15.64574432]
[87.81823730 0.83274442]
[85.45708466 -13.98025513]
[73.69025421 -20.59952927]
[67.98306274 -32.61933517]
[70.22437286 -45.53735733]
[79.37107849 -54.65674973]
[77.30305481 -69.51351166]
[75.23502350 -84.37026978]
[73.16699219 -99.22702789]
[59.63731384 -106.59275055]
[53.11531448 -120.35199738]
[55.91275406 -135.13842773]
[66.75090027 -145.32040405]
[64.68286896 -160.17715454]
[49.75963211 -162.58306885]
[36.20928574 -169.28228760]
[25.23672104 -179.67912292]
[17.81760597 -192.84910583]
[14.61164570 -207.62113953]
[15.90391159 -222.68173218]
[21.57949638 -236.69169617]
[31.13372993 -248.40528870]
[43.71706009 -256.78091431]
[58.21057892 -261.07385254]
[73.32553864 -260.90234375]
[87.71792603 -256.28167725]
[100.10797882 -247.62269592]
[109.39398193 -235.69535828]
[114.75022888 -221.56021118]
[115.70044708 -206.47418213]
[112.16014099 -191.77868652]
[104.44412231 -178.78044128]
[93.23848724 -168.63523865]
[79.53962708 -162.24519348]
[81.60765839 -147.38842773]
[94.81452179 -140.55346680]
[101.54384613 -127.09314728]
[99.02748871 -112.07577515]
[88.02375031 -101.29505157]
[90.09178162 -86.43829346]
[92.15981293 -71.58153534]
[94.22783661 -56.72477722]
[108.05600739 -47.19515991]
[110.79267883 -30.28429413]
[100.27008820 -16.34140778]
[102.63124084 -1.52840781]
[104.99239349 13.28459167]
[107.35354614 28.09759140]
[115.12092590 15.26529694]
[128.53042603 8.54328632]
[143.45971680 9.99802780]
[155.31925964 19.18230629]
[160.46324158 33.27270889]
[157.31028748 47.93759537]
[146.82969666 58.66871643]
[132.24336243 62.16713333]
[118.03540039 57.35736847]
[108.57410431 45.71924973]
[108.27774811 60.71632004]
[107.98139191 75.71339417]
[107.68503571 90.71046448]
[107.68503571 105.71046448]
[107.98139191 120.70753479]
[108.27774811 135.70460510]
[108.57410431 150.70167542]
[123.02534485 155.13104248]
[135.38322449 163.79852295]
[144.44473267 175.84500122]
[149.33250427 190.08314514]
[149.57975769 205.11448669]
[145.17486572 219.46676636]
[136.56124878 231.73809814]
[124.59275818 240.73396301]
[110.44906616 245.58338928]
[110.74542236 260.58047485]
[111.04177856 275.57754517]
[113.80205536 280.13314819]
[114.43788147 284.82019043]
[113.26306915 288.79489136]
[110.88481140 291.46575928]
[110.29221344 306.45404053]
[109.99585724 321.45111084]
[109.99585724 336.45111084]
[109.99585724 351.45111084]
[109.99585724 366.45111084]
[109.99585724 381.45111084]
[109.99585724 396.45111084]
[109.99585724 411.45111084]
[109.99585724 426.45111084]
[109.99585724 441.45111084]
[109.99585724 456.45111084]
[109.99585724 471.45111084]
[124.74147034 474.47631836]
[138.57614136 480.40814209]
[150.93334961 489.00375366]
[161.30706787 499.91113281]
[169.27250671 512.68359375]
[174.50349426 526.79821777]
[176.78579712 541.67694092]
[176.02598572 556.71044922]
[172.25515747 571.28326416]
[165.62771606 584.79852295]
[156.41508484 596.70275879]
[144.99449158 606.50866699]
[131.83360291 613.81451416]
[117.47134399 618.32122803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[28 133]
[29 132]
[30 128]
[31 127]
[32 126]
[41 117]
[42 116]
[43 115]
[44 114]
[47 113]
[48 112]
[49 111]
[50 110]
[51 100]
[52 99]
[53 98]
[54 97]
[58 94]
[59 93]
[60 92]
[61 91]
[65 87]
[66 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
