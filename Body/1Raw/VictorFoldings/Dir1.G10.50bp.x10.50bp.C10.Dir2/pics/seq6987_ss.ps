%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCUUUCUGGGGGGGGGGUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGxxxxxxxxxxGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACCCCCCCCCCCUCAUCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[84.02785492 395.60339355]
[70.80765533 388.33093262]
[59.92085266 377.88391113]
[52.10972214 364.97467041]
[47.90683746 350.48336792]
[47.59876633 335.39801025]
[51.20650864 320.74719238]
[58.48408127 307.52981567]
[68.93528748 296.64703369]
[81.84754944 288.84088135]
[96.34048462 284.64361572]
[96.02843475 269.64685059]
[95.71637726 254.65010071]
[95.40431976 239.65335083]
[95.09226227 224.65660095]
[94.78020477 209.65983582]
[94.46814728 194.66308594]
[94.15608978 179.66633606]
[93.84403992 164.66958618]
[93.53198242 149.67282104]
[93.21992493 134.67607117]
[84.70023346 134.18038940]
[76.09880066 131.52853394]
[67.97067261 126.67066956]
[53.95395660 132.01217651]
[39.93724442 137.35369873]
[25.92053223 142.69520569]
[13.27280045 153.98551941]
[-1.07752550 144.95753479]
[3.62507486 128.66883850]
[20.57901955 128.67849731]
[34.59573364 123.33698273]
[48.61244583 117.99546814]
[62.62915802 112.65395355]
[60.60682297 97.79090881]
[45.67251587 96.38860321]
[30.73820877 94.98630524]
[17.51570702 104.07173157]
[2.21092796 99.26097870]
[-3.43561149 84.24445343]
[4.90762997 70.54154205]
[20.84043312 68.66394043]
[32.14051437 80.05199432]
[47.07482147 81.45429993]
[62.00912857 82.85659790]
[62.26558304 75.21028137]
[64.05139160 67.26780701]
[51.78902435 58.62868881]
[39.52665710 49.98957062]
[27.26428795 41.35045624]
[10.89191914 40.41366577]
[3.75969672 25.64669609]
[13.20463943 12.24053669]
[29.51060104 13.98629665]
[35.90340424 29.08808708]
[48.16577148 37.72720337]
[60.42814255 46.36632156]
[72.69050598 55.00543594]
[79.23708344 51.34588242]
[71.91819763 38.25260544]
[85.01159668 30.93393707]
[92.33023834 44.02677917]
[98.87681580 40.36722565]
[97.94119263 25.39643288]
[97.00556183 10.42564201]
[96.06993103 -4.54514980]
[95.13430786 -19.51594162]
[80.84805298 -24.79068756]
[69.94687653 -35.42479706]
[64.31947327 -49.57584763]
[64.94082642 -64.79208374]
[71.70326996 -78.43719482]
[83.43518829 -88.14709473]
[98.10394287 -92.23947906]
[113.16808319 -90.00531006]
[126.01766205 -81.83168030]
[134.42640686 -69.13471985]
[136.93745422 -54.11424637]
[133.11575317 -39.37265778]
[123.62343597 -27.46401787]
[110.10509491 -20.45157051]
[111.04072571 -5.48077822]
[111.97634888 9.49001312]
[112.91197968 24.46080399]
[113.84761047 39.43159485]
[126.19918060 47.94268799]
[140.52177429 43.48587036]
[154.84437561 39.02905655]
[169.16697693 34.57223892]
[183.29177856 29.52348328]
[197.13499451 23.74721146]
[210.91737366 17.82724762]
[224.69975281 11.90728474]
[238.48213196 5.98732138]
[242.80485535 0.84712827]
[248.26235962 -1.00949478]
[252.96315002 0.12103307]
[266.97985840 -5.22047949]
[268.21987915 -20.43314362]
[275.94500732 -33.59691620]
[288.62145996 -42.09812546]
[303.73226929 -44.24884415]
[318.27722168 -39.62204742]
[329.36837769 -29.13639259]
[334.80358887 -14.87380981]
[333.50369263 0.33385319]
[325.72677612 13.46710396]
[313.01693726 21.91832542]
[297.89776611 24.00952148]
[283.37115479 19.32548523]
[272.32138062 8.79623318]
[258.30465698 14.13774586]
[244.40209961 19.76970291]
[230.61972046 25.68966675]
[216.83734131 31.60962868]
[203.05496216 37.52959061]
[198.11842346 43.09523010]
[188.92373657 43.42604065]
[187.71520996 46.02349854]
[185.37153625 48.28208160]
[182.02272034 49.75425720]
[177.96273804 50.05025482]
[173.62379456 48.89483643]
[159.30119324 53.35165405]
[144.97859192 57.80846786]
[130.65599060 62.26528549]
[143.71296692 93.52789307]
[132.93806458 122.27169037]
[108.21667480 134.36401367]
[108.52873230 149.36076355]
[108.84078979 164.35752869]
[109.15284729 179.35427856]
[109.46490479 194.35102844]
[109.77696228 209.34777832]
[110.08901215 224.34454346]
[110.40106964 239.34129333]
[110.71312714 254.33804321]
[111.02518463 269.33480835]
[111.33724213 284.33154297]
[125.99223328 287.92233276]
[139.21804810 295.18457031]
[150.11291504 305.62316895]
[157.93400574 318.52639771]
[162.14807129 333.01443481]
[162.46780396 348.09954834]
[158.87136841 362.75314331]
[151.60400391 375.97616577]
[141.16120911 386.86700439]
[128.25497437 394.68310547]
[113.76528931 398.89157104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 34]
[25 33]
[26 32]
[27 31]
[35 45]
[36 44]
[37 43]
[47 58]
[48 57]
[49 56]
[50 55]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[86 126]
[87 125]
[88 124]
[89 123]
[90 118]
[91 116]
[92 115]
[93 114]
[94 113]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
