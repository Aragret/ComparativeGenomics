%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACUACUCGGGGGGGGGGAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUxxxxxxxxxxUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACCCCCCCCCCCAGGACUAUUC\
) } def
/len { sequence length } bind def

/coor [
[83.85835266 387.45755005]
[70.63815308 380.18508911]
[59.75135040 369.73806763]
[51.94021988 356.82882690]
[47.73733902 342.33752441]
[47.42926788 327.25216675]
[51.03700638 312.60134888]
[58.31457901 299.38397217]
[68.76578522 288.50119019]
[81.67804718 280.69503784]
[96.17098999 276.49777222]
[95.85893250 261.50100708]
[95.54687500 246.50425720]
[95.23481750 231.50750732]
[94.92276001 216.51074219]
[94.61070251 201.51399231]
[94.29865265 186.51724243]
[93.98659515 171.52049255]
[93.67453766 156.52372742]
[93.36248016 141.52697754]
[82.22827148 138.11447144]
[72.45683289 131.77925110]
[64.79747009 123.00714111]
[59.83750153 112.47078705]
[57.95728302 100.97815704]
[43.13952637 98.64704895]
[28.32176781 96.31594849]
[22.94584274 110.37984467]
[14.76301575 123.01847076]
[4.13100386 133.67933655]
[-8.48540688 141.89637756]
[-22.53468132 147.31040955]
[-37.40264511 149.68470764]
[-52.43933487 148.91552734]
[-66.98741150 145.03645325]
[-80.41089630 138.21708679]
[-92.12296295 128.75552368]
[-101.61162567 117.06540680]
[-108.46207428 103.65775299]
[-112.37483215 89.11870575]
[-113.17885590 74.08383942]
[-110.83899689 59.21041489]
[-105.45754242 45.14863586]
[-97.26973724 32.51322174]
[-86.63353729 21.85654259]
[-74.01389313 13.64445972]
[-59.96249008 8.23596954]
[-45.09359360 5.86750841]
[-30.05720901 6.64261580]
[-15.51065922 10.52740765]
[-2.08986020 17.35205650]
[9.61849022 26.81821823]
[19.10255241 38.51207352]
[25.94772339 51.92241669]
[29.85476303 66.46300507]
[30.65287209 81.49819183]
[45.47063065 83.82929230]
[60.28838730 86.16040039]
[77.57482910 56.30681610]
[115.90498352 46.12908173]
[116.52896118 31.14206505]
[117.15293884 16.15504837]
[117.77691650 1.16803288]
[108.85513306 -14.90622139]
[118.74921417 -29.36675644]
[119.06127167 -44.36351013]
[104.70774841 -49.10352707]
[92.39002228 -57.86509323]
[83.20336914 -69.86913300]
[77.96467590 -84.04825592]
[77.13975525 -99.14165497]
[80.80195618 -113.80725098]
[88.62563324 -126.74098206]
[99.91512299 -136.79278564]
[113.66656494 -143.06887817]
[128.65719604 -145.01116943]
[143.55404663 -142.44697571]
[157.03251648 -135.60427856]
[167.89408875 -125.09154510]
[175.17297363 -111.84355927]
[178.22193909 -97.03831482]
[176.76986694 -81.99228668]
[170.94587708 -68.04336548]
[161.26783752 -56.43186569]
[148.59629822 -48.19028473]
[134.05802917 -44.05145645]
[133.74597168 -29.05470085]
[141.90945435 -20.07333565]
[141.73300171 -7.53587866]
[132.76393127 1.79201031]
[132.13995361 16.77902603]
[131.51597595 31.76604271]
[130.89199829 46.75305939]
[136.79031372 51.38553238]
[144.52307129 38.53234100]
[148.03495789 23.94924545]
[162.20423889 19.02671623]
[174.00105286 28.29144096]
[172.57722473 43.22370911]
[159.24147034 50.09201050]
[148.58695984 60.65048218]
[154.48527527 65.28295898]
[168.89749146 61.12506866]
[183.30970764 56.96718216]
[194.28639221 44.78339767]
[210.26766968 48.46177292]
[214.81340027 64.21830750]
[203.24729919 75.84403229]
[187.46759033 71.37940216]
[173.05538940 75.53728485]
[158.64317322 79.69517517]
[158.95521545 94.69192505]
[173.52792358 98.24668884]
[188.10063171 101.80145264]
[202.67332458 105.35621643]
[215.16955566 95.95523834]
[230.78222656 96.83770752]
[242.13949585 107.58695221]
[243.87882996 123.12750244]
[235.17895508 136.12159729]
[220.14770508 140.43379211]
[205.88233948 134.02804565]
[199.11857605 119.92891693]
[184.54586792 116.37415314]
[169.97315979 112.81938934]
[155.40046692 109.26463318]
[147.00552368 123.69684601]
[135.31968689 134.12480164]
[121.90782166 139.97322083]
[108.35923767 141.21492004]
[108.67128754 156.21168518]
[108.98334503 171.20843506]
[109.29540253 186.20518494]
[109.60746002 201.20193481]
[109.91951752 216.19869995]
[110.23157501 231.19544983]
[110.54362488 246.19219971]
[110.85568237 261.18896484]
[111.16773987 276.18569946]
[125.82273102 279.77648926]
[139.04853821 287.03872681]
[149.94340515 297.47732544]
[157.76451111 310.38055420]
[161.97857666 324.86859131]
[162.29829407 339.95370483]
[158.70187378 354.60729980]
[151.43450928 367.83032227]
[140.99171448 378.72116089]
[128.08547974 386.53726196]
[113.59578705 390.74572754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 58]
[26 57]
[27 56]
[60 93]
[61 92]
[62 91]
[63 90]
[65 87]
[66 86]
[102 111]
[103 110]
[104 109]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
