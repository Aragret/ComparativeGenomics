%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUCCACCGGGGGGGGGGUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCxxxxxxxxxxUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCCCCCCCCCCCACUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[71.43204498 384.38845825]
[57.58610535 378.37243652]
[45.87744522 368.84301758]
[37.17491913 356.50735474]
[32.12431717 342.28082275]
[31.10042763 327.21914673]
[34.17922592 312.43997192]
[41.13224792 299.04003906]
[51.44353104 288.01373291]
[64.34791565 280.17919922]
[78.88780212 276.11788940]
[78.88780212 261.11788940]
[78.88780212 246.11790466]
[78.88780212 231.11790466]
[78.88780212 216.11790466]
[78.88780212 201.11790466]
[78.88780212 186.11790466]
[78.88780212 171.11790466]
[78.88780212 156.11790466]
[78.88780212 141.11790466]
[78.88780212 126.11789703]
[69.62284851 114.32125854]
[55.05014801 110.76649475]
[40.47744370 107.21173859]
[25.90474129 103.65697479]
[19.98863602 117.47904205]
[11.87805367 130.13874817]
[1.79425514 141.29074097]
[-9.98766518 150.63078308]
[-23.14628792 157.90405273]
[-37.32263565 162.91213989]
[-52.12997055 165.51843262]
[-67.16433716 165.65180969]
[-82.01557922 163.30865479]
[-96.27854919 158.55287170]
[-109.56414795 151.51420593]
[-121.50992584 142.38468933]
[-131.79000854 131.41336060]
[-140.12391663 118.89954376]
[-146.28433228 105.18461609]
[-150.10316467 90.64273071]
[-151.47625732 75.67060852]
[-150.36613464 60.67669296]
[-146.80310059 46.07003021]
[-140.88432312 32.24910355]
[-132.77130127 19.59095573]
[-122.68535614 8.44090843]
[-110.90163422 -0.89685392]
[-97.74161530 -8.16759205]
[-83.56430054 -13.17295361]
[-68.75646210 -15.77638912]
[-53.72207642 -15.90687656]
[-38.87128448 -13.56085300]
[-24.60922623 -8.80232239]
[-11.32498646 -1.76110005]
[0.61903465 7.37072468]
[10.89699459 18.34402847]
[19.22850227 30.85945129]
[25.38627052 44.57556534]
[29.20230865 59.11818314]
[30.57251358 74.09056854]
[29.45950317 89.08427429]
[44.03220749 92.63903046]
[58.60490799 96.19379425]
[73.17761230 99.74855804]
[87.98988342 79.35848999]
[110.17617798 81.70011902]
[121.67798615 72.07159424]
[133.17977905 62.44306946]
[144.68159485 52.81454086]
[129.84408569 55.01643372]
[115.00434875 52.82956696]
[101.43275452 46.44114685]
[90.29110718 36.39806366]
[82.53318024 23.56004906]
[78.82309723 9.02611351]
[79.47846222 -5.95956278]
[84.44316864 -20.11412621]
[93.29222107 -32.22586823]
[105.26808929 -41.25796127]
[119.34556580 -46.43720627]
[134.31954956 -47.32023621]
[148.90818787 -43.83145905]
[161.86262512 -36.26952744]
[172.07386780 -25.28178787]
[178.66780090 -11.80884933]
[181.07994080 2.99593329]
[179.10379028 17.86519051]
[172.90852356 31.52603722]
[163.02188110 42.81124115]
[177.34448242 38.35442352]
[191.66708374 33.89760971]
[205.98966980 29.44079208]
[220.31227112 24.98397636]
[234.63487244 20.52716064]
[234.19267273 5.43719673]
[237.83920288 -9.21221733]
[245.30387878 -22.33399773]
[256.03277588 -32.95442200]
[269.22973633 -40.28538132]
[283.91543579 -43.78287125]
[299.00015259 -43.18735504]
[313.36444092 -38.54302216]
[325.94238281 -30.19451714]
[335.80065918 -18.76135063]
[342.20767212 -5.09194183]
[344.68798828 9.79934978]
[343.05755615 24.80749130]
[337.43737793 38.81877899]
[328.24450684 50.79347992]
[316.16110229 59.84299469]
[302.08383179 65.29579163]
[287.05731201 66.74723053]
[272.19662476 64.08960724]
[258.60455322 57.52013779]
[247.28968811 47.52632141]
[239.09169006 34.84975815]
[224.76908875 39.30657578]
[210.44648743 43.76338959]
[196.12388611 48.22020721]
[181.80130005 52.67702103]
[167.47869873 57.13383865]
[154.31011963 64.31634521]
[142.80831909 73.94487000]
[131.30650330 83.57340240]
[119.80470276 93.20192719]
[121.95364380 104.50007629]
[117.71562958 116.01472473]
[107.56351471 124.19789886]
[93.88780212 126.11789703]
[93.88780212 141.11790466]
[93.88780212 156.11790466]
[93.88780212 171.11790466]
[93.88780212 186.11790466]
[93.88780212 201.11790466]
[93.88780212 216.11790466]
[93.88780212 231.11790466]
[93.88780212 246.11790466]
[93.88780212 261.11788940]
[93.88780212 276.11788940]
[108.42768860 280.17919922]
[121.33206940 288.01373291]
[131.64335632 299.04003906]
[138.59637451 312.43997192]
[141.67517090 327.21914673]
[140.65127563 342.28082275]
[135.60067749 356.50735474]
[126.89815521 368.84301758]
[115.18949127 378.37243652]
[101.34355164 384.38845825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 65]
[23 64]
[24 63]
[25 62]
[67 126]
[68 125]
[69 124]
[70 123]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
