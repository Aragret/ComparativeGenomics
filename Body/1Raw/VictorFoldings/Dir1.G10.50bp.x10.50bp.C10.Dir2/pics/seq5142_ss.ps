%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACUAAAGGGGGGGGGGCGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUxxxxxxxxxxACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCCCCCCCCCCCACUAAA\
) } def
/len { sequence length } bind def

/coor [
[82.89746094 341.27929688]
[69.67726898 334.00683594]
[58.79046249 323.55984497]
[50.97933197 310.65057373]
[46.77645111 296.15927124]
[46.46837616 281.07394409]
[50.07611847 266.42309570]
[57.35369110 253.20571899]
[67.80490112 242.32295227]
[80.71716309 234.51679993]
[95.21009827 230.31951904]
[94.89804077 215.32276917]
[94.58598328 200.32600403]
[94.27392578 185.32925415]
[93.96187592 170.33250427]
[93.64981842 155.33575439]
[93.33776093 140.33898926]
[93.02570343 125.34223938]
[92.71364594 110.34548950]
[91.93379974 95.36577606]
[90.68692780 80.41768646]
[89.44005585 65.46960449]
[74.43935394 65.81189728]
[59.44535446 65.24784851]
[44.51276779 63.77951431]
[29.69608307 61.41224289]
[15.04936218 58.15468216]
[0.62605017 54.01871490]
[-13.52122307 49.01943207]
[-27.34083366 43.17507935]
[-40.78236008 36.50697708]
[-53.79674911 29.03945923]
[-66.33651733 20.79977417]
[-78.35590363 11.81798744]
[-89.81105042 2.12687278]
[-100.66016388 -8.23820782]
[-110.86365509 -19.23943138]
[-120.38428497 -30.83665848]
[-129.18733215 -42.98756790]
[-137.24064636 -55.64782715]
[-144.51487732 -68.77124023]
[-150.98344421 -82.30991364]
[-156.62277222 -96.21444702]
[-161.41227722 -110.43411255]
[-165.33447266 -124.91701508]
[-168.37504578 -139.61032104]
[-170.52291870 -154.46038818]
[-171.77024841 -169.41305542]
[-172.11247253 -184.41375732]
[-171.54835510 -199.40776062]
[-170.07995605 -214.34033203]
[-167.71261597 -229.15701294]
[-164.45498657 -243.80372620]
[-160.31895447 -258.22702026]
[-155.31961060 -272.37426758]
[-149.47518921 -286.19384766]
[-142.80702209 -299.63534546]
[-135.33944702 -312.64968872]
[-127.09970093 -325.18942261]
[-118.11785889 -337.20877075]
[-108.42668915 -348.66387939]
[-98.06156158 -359.51293945]
[-87.06028748 -369.71636963]
[-75.46302032 -379.23696899]
[-63.31206894 -388.03994751]
[-50.65177155 -396.09320068]
[-37.52832794 -403.36737061]
[-23.98962593 -409.83587646]
[-10.08506203 -415.47512817]
[4.13462448 -420.26455688]
[18.61754608 -424.18670654]
[33.31085968 -427.22720337]
[48.16094589 -429.37503052]
[63.11362076 -430.62228394]
[78.11432648 -430.96444702]
[93.10831451 -430.40023804]
[108.04089355 -428.93176270]
[122.85755157 -426.56436157]
[137.50424194 -423.30667114]
[151.92752075 -419.17056274]
[166.07475281 -414.17114258]
[179.89430237 -408.32666016]
[193.33576965 -401.65844727]
[206.35008240 -394.19079590]
[218.88977051 -385.95101929]
[230.90907288 -376.96911621]
[242.36413574 -367.27789307]
[253.21315002 -356.91271973]
[263.41653442 -345.91137695]
[272.93707275 -334.31408691]
[281.73999023 -322.16308594]
[289.79321289 -309.50274658]
[297.06729126 -296.37927246]
[303.53573608 -282.84054565]
[309.17495728 -268.93594360]
[313.96432495 -254.71623230]
[317.88638306 -240.23329163]
[320.92681885 -225.53997803]
[323.07455444 -210.68988037]
[324.32174683 -195.73719788]
[324.66384888 -180.73649597]
[324.09957886 -165.74249268]
[322.63104248 -150.80993652]
[320.26354980 -135.99328613]
[317.00579834 -121.34660339]
[312.86962891 -106.92334747]
[307.87014771 -92.77614594]
[302.02560425 -78.95661926]
[295.35729980 -65.51518250]
[287.88961792 -52.50090027]
[279.64974976 -39.96124649]
[270.66781616 -27.94198608]
[260.97653198 -16.48697090]
[250.61129761 -5.63800097]
[239.60992432 4.56533575]
[228.01257324 14.08580971]
[215.86154175 22.88867950]
[203.20117188 30.94182587]
[190.07765198 38.21586609]
[176.53889465 44.68424988]
[162.63427734 50.32338333]
[148.41455078 55.11268616]
[133.93159485 59.03467941]
[119.23825073 62.07505798]
[104.38813782 64.22272491]
[105.63501740 79.17081451]
[106.88188934 94.11889648]
[109.50399017 97.04481506]
[110.79428864 101.12903595]
[110.25840759 105.73674774]
[107.71040344 110.03343201]
[108.02246094 125.03018951]
[108.33451080 140.02694702]
[108.64656830 155.02369690]
[108.95862579 170.02044678]
[109.27068329 185.01719666]
[109.58274078 200.01396179]
[109.89479828 215.01071167]
[110.20684814 230.00746155]
[124.86184692 233.59823608]
[138.08764648 240.86048889]
[148.98251343 251.29908752]
[156.80361938 264.20230103]
[161.01768494 278.69036865]
[161.33741760 293.77545166]
[157.74098206 308.42907715]
[150.47361755 321.65206909]
[140.03082275 332.54290771]
[127.12458801 340.35900879]
[112.63489532 344.56750488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 127]
[21 126]
[22 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
