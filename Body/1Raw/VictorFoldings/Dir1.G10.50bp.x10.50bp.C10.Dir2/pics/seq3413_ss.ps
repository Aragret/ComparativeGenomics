%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACGGGCUGGGGGGGGGGACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAxxxxxxxxxxUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCCCCCCCCCCCACGGGCU\
) } def
/len { sequence length } bind def

/coor [
[87.67659760 542.63708496]
[73.83065796 536.62109375]
[62.12199783 527.09167480]
[53.41947174 514.75598145]
[48.36886978 500.52944946]
[47.34497833 485.46777344]
[50.42377853 470.68862915]
[57.37680054 457.28869629]
[67.68808746 446.26235962]
[80.59246826 438.42785645]
[95.13235474 434.36654663]
[95.13235474 419.36654663]
[95.13235474 404.36654663]
[95.13235474 389.36654663]
[95.13235474 374.36654663]
[95.13235474 359.36654663]
[95.13235474 344.36654663]
[95.13235474 329.36654663]
[95.13235474 314.36654663]
[95.13235474 299.36654663]
[80.06185150 296.24789429]
[65.95772552 290.07592773]
[53.43148422 281.11566162]
[43.02673340 269.75308228]
[35.19560623 256.47851562]
[30.27912521 241.86543274]
[28.49233055 226.54565430]
[29.91488838 211.18209839]
[34.48754120 196.44009399]
[42.01457214 182.95846558]
[52.17216873 171.32199097]
[64.52237701 162.03594971]
[78.53196716 155.50416565]
[93.59545135 152.01152039]
[93.28339386 137.01477051]
[92.97133636 122.01801300]
[92.65928650 107.02125549]
[89.33838654 99.61479187]
[92.50000000 91.71001434]
[92.50000000 76.71001434]
[92.50000000 61.71001434]
[92.50000000 46.71001434]
[78.89662933 42.10695267]
[67.40276337 33.53290939]
[59.13893127 21.84033966]
[54.90559769 8.18489933]
[55.10569382 -6.08878565]
[59.70627213 -19.57951164]
[68.24305725 -30.96705246]
[79.86726379 -39.14136124]
[93.42997742 -43.31076050]
[93.74203491 -58.30751419]
[94.05408478 -73.30426788]
[94.36614227 -88.30102539]
[94.67819977 -103.29777527]
[79.85951996 -105.79270172]
[65.56205750 -110.41874695]
[52.09054947 -117.07730103]
[39.73215103 -125.62644958]
[28.75027847 -135.88394165]
[19.37901497 -147.63117981]
[11.81810570 -160.61772156]
[6.22871351 -174.56678772]
[2.72997618 -189.18106079]
[1.39647019 -204.14901733]
[2.25661874 -219.15161133]
[5.29208803 -233.86907959]
[10.43817616 -247.98770142]
[17.58519554 -261.20654297]
[26.58080482 -273.24386597]
[37.23326492 -283.84304810]
[49.31551361 -292.77822876]
[62.57002258 -299.85888672]
[76.71426392 -304.93414307]
[91.44676208 -307.89581299]
[106.45348358 -308.68075562]
[121.41456604 -307.27221680]
[136.01110840 -303.70028687]
[149.93199158 -298.04104614]
[162.88047791 -290.41513062]
[174.58058167 -280.98510742]
[184.78289795 -269.95196533]
[193.26998901 -257.55087280]
[199.86094666 -244.04614258]
[204.41526794 -229.72566223]
[206.83587646 -214.89466858]
[207.07119751 -199.86927795]
[205.11619568 -184.96975708]
[201.01255798 -170.51368713]
[194.84774780 -156.80918884]
[186.75315857 -144.14840698]
[176.90133667 -132.80117798]
[165.50228882 -123.00939178]
[152.79895020 -114.98173523]
[139.06211853 -108.88933563]
[124.58458710 -104.86205292]
[109.67495728 -102.98571777]
[109.36289978 -87.98896790]
[109.05084229 -72.99221039]
[108.73878479 -57.99546051]
[108.42672729 -42.99870682]
[123.15149689 -37.50899506]
[135.13415527 -27.30047035]
[142.92004395 -13.58837318]
[145.55577087 1.98531282]
[142.70596313 17.54847145]
[134.69572449 31.22390747]
[122.47377014 41.35576248]
[107.50000000 46.71001434]
[107.50000000 61.71001434]
[107.50000000 76.71001434]
[107.50000000 91.71001434]
[107.65603638 106.70919800]
[107.96809387 121.70595551]
[108.28015137 136.70271301]
[108.59220886 151.69946289]
[122.99491882 154.32984924]
[136.59788513 159.73083496]
[148.87390137 167.69102478]
[159.34765625 177.89987183]
[167.61402893 189.95976257]
[173.35385132 203.40159607]
[176.34614563 217.70295715]
[176.47673035 232.30844116]
[173.74246216 246.65121460]
[168.25137329 260.17504883]
[160.21838379 272.35586548]
[149.95686340 282.72198486]
[137.86642456 290.87255859]
[124.41736603 296.49282837]
[110.13235474 299.36654663]
[110.13235474 314.36654663]
[110.13235474 329.36654663]
[110.13235474 344.36654663]
[110.13235474 359.36654663]
[110.13235474 374.36654663]
[110.13235474 389.36654663]
[110.13235474 404.36654663]
[110.13235474 419.36654663]
[110.13235474 434.36654663]
[124.67224121 438.42785645]
[137.57661438 446.26235962]
[147.88790894 457.28869629]
[154.84092712 470.68862915]
[157.91972351 485.46777344]
[156.89582825 500.52944946]
[151.84523010 514.75598145]
[143.14270020 527.09167480]
[131.43405151 536.62109375]
[117.58810425 542.63708496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 116]
[35 115]
[36 114]
[37 113]
[39 112]
[40 111]
[41 110]
[42 109]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
