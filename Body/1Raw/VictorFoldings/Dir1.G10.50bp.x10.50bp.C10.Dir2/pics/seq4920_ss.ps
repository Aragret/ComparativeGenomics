%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACUCAUCAUGGGGGGGGGGUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACxxxxxxxxxxUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUCCCCCCCCCCAAUACCCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[48.90804291 429.26855469]
[34.74744034 424.11355591]
[22.15769577 415.83132935]
[11.81775761 404.86856079]
[4.28524685 391.81643677]
[-0.03361847 377.37884521]
[-0.90592718 362.33438110]
[1.71536326 347.49438477]
[7.68888998 333.65914917]
[16.69250870 321.57479858]
[28.24066353 311.89303589]
[41.71057892 305.13595581]
[56.37584305 301.66796875]
[56.37584305 286.66796875]
[56.37584305 271.66796875]
[56.37584305 256.66796875]
[56.37584305 241.66796875]
[56.37584305 226.66796875]
[56.37584305 211.66796875]
[56.37584305 196.66796875]
[56.37584305 181.66796875]
[56.37584305 166.66796875]
[48.57012177 179.47698975]
[38.31403351 190.42288208]
[26.03949356 199.04469299]
[12.26342583 204.97933960]
[-2.43401551 207.97686768]
[-17.43387032 207.91107178]
[-32.10444641 204.78469849]
[-45.82791519 198.72941589]
[-58.02633667 190.00024414]
[-68.18599701 178.96478271]
[-75.87903595 166.08778381]
[-80.78147125 151.91152954]
[-82.68684387 137.03303528]
[-81.51492310 122.07888794]
[-77.31505585 107.67884827]
[-70.26410675 94.43935394]
[-60.65902328 82.91796875]
[-48.90430450 73.59989166]
[-35.49498367 66.87753296]
[-20.99576569 63.03400421]
[-6.01726627 62.23116302]
[8.80972195 64.50282288]
[22.86078262 69.75331879]
[35.54418182 77.76152039]
[46.32577896 88.19019318]
[54.75152206 100.60014343]
[60.46657562 114.46875000]
[63.23026276 129.21194458]
[62.92670059 144.20475769]
[70.98975372 131.55615234]
[79.05281067 118.90755463]
[87.11586761 106.25895691]
[87.92147064 92.30034637]
[100.23553467 85.67799377]
[108.29858398 73.02938843]
[116.36164093 60.38078690]
[105.98315430 49.45500946]
[98.52578735 36.37067032]
[94.41924286 21.89049339]
[93.89805603 6.85737753]
[96.98818970 -7.85467577]
[103.50576019 -21.39136887]
[113.06800079 -32.96771622]
[125.11572266 -41.91356659]
[138.94602966 -47.71240234]
[153.75329590 -50.03114319]
[168.67614746 -48.73929596]
[182.84748840 -43.91627884]
[190.91053772 -56.56488037]
[179.94090271 -66.85581970]
[171.05146790 -78.98405457]
[164.54379272 -92.53566742]
[160.63816833 -107.04851532]
[159.46623230 -122.02793884]
[161.06640625 -136.96366882]
[165.38273621 -151.34721375]
[172.26683044 -164.68911743]
[181.48292542 -176.53567505]
[192.71600342 -186.48432922]
[205.58251953 -194.19735718]
[219.64353943 -199.41333008]
[234.41966248 -201.95599365]
[249.40740967 -201.74017334]
[264.09637451 -198.77471924]
[277.98660278 -193.16203308]
[286.04965210 -205.81063843]
[294.11270142 -218.45922852]
[294.29168701 -234.85740662]
[308.71316528 -242.66461182]
[322.54159546 -233.84945679]
[321.55145264 -217.48022461]
[306.76129150 -210.39617920]
[298.69824219 -197.74757385]
[290.63519287 -185.09896851]
[301.58651733 -174.87602234]
[310.47515869 -162.81155396]
[316.99725342 -149.31556702]
[320.92935181 -134.84706116]
[322.13607788 -119.89840698]
[320.57495117 -104.97859192]
[316.29760742 -90.59589386]
[309.44833374 -77.24055481]
[300.25912476 -65.36808014]
[289.04174805 -55.38372040]
[276.17727661 -47.62859726]
[262.10305786 -42.36808777]
[247.29791260 -39.78271866]
[232.26580811 -39.96198273]
[217.51870728 -42.90123749]
[203.55914307 -48.50182724]
[195.49609375 -35.85322571]
[205.85020447 -25.04209137]
[213.32037354 -12.05915451]
[217.46859741 2.34307122]
[218.04957581 17.32860756]
[215.02519226 32.02653503]
[208.56700134 45.58161163]
[199.04649353 57.20403290]
[187.01371765 66.21544647]
[173.16551208 72.08856964]
[158.30516052 74.47799683]
[143.29580688 73.24055481]
[129.01023865 68.44384003]
[120.94718933 81.09244537]
[112.88413239 93.74104309]
[112.07852936 107.69965363]
[99.76446533 114.32200623]
[91.70141602 126.97061157]
[83.63835907 139.61921692]
[75.57530212 152.26782227]
[71.37583923 166.66796875]
[71.37583923 181.66796875]
[71.37583923 196.66796875]
[71.37583923 211.66796875]
[71.37583923 226.66796875]
[71.37583923 241.66796875]
[71.37583923 256.66796875]
[71.37583923 271.66796875]
[71.37583923 286.66796875]
[71.37583923 301.66796875]
[86.04109955 305.13595581]
[99.51101685 311.89303589]
[111.05917358 321.57479858]
[120.06278992 333.65914917]
[126.03631592 347.49438477]
[128.65760803 362.33438110]
[127.78530121 377.37884521]
[123.46643829 391.81643677]
[115.93392181 404.86856079]
[105.59398651 415.83132935]
[93.00424194 424.11355591]
[78.84363556 429.26855469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[51 132]
[52 131]
[53 130]
[54 129]
[56 127]
[57 126]
[58 125]
[70 113]
[71 112]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
