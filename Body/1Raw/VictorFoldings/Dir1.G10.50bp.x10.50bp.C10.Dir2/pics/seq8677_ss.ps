%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCAGGGGGGGGGGAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUxxxxxxxxxxUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACCCCCCCCCCCACCCUAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.95584106]
[71.19830322 362.93978882]
[59.48964310 353.41036987]
[50.78712082 341.07470703]
[45.73651886 326.84820557]
[44.71262741 311.78649902]
[47.79142761 297.00735474]
[54.74444962 283.60742188]
[65.05573273 272.58108521]
[77.96011353 264.74658203]
[92.50000000 260.68527222]
[92.50000000 245.68527222]
[92.50000000 230.68527222]
[92.50000000 215.68527222]
[92.50000000 200.68527222]
[92.50000000 185.68527222]
[92.50000000 170.68527222]
[92.50000000 155.68527222]
[92.50000000 140.68527222]
[92.50000000 125.68527222]
[76.72763062 117.64571381]
[68.34825897 100.34157562]
[72.38819122 79.98758698]
[89.00077057 65.14502716]
[77.10839081 56.00329590]
[65.21601105 46.86156082]
[54.78975296 57.66772079]
[43.21912766 67.23854065]
[30.64964485 75.45365906]
[17.23937988 82.20975494]
[3.15698338 87.42186737]
[-11.42044544 91.02444458]
[-26.30957985 92.97219086]
[-41.32317352 93.24059296]
[-56.27241135 91.82629395]
[-70.96929932 88.74707031]
[-85.22899628 84.04164886]
[-98.87217712 77.76921082]
[-111.72727203 70.00862885]
[-123.63260651 60.85750198]
[-134.43846130 50.43092346]
[-144.00892639 38.86000824]
[-152.22366333 26.29027939]
[-158.97937012 12.87981415]
[-164.19105530 -1.20273840]
[-167.79319763 -15.78027534]
[-169.74049377 -30.66946793]
[-170.00845337 -45.68306732]
[-168.59370422 -60.63226700]
[-165.51403809 -75.32905579]
[-160.80819702 -89.58861542]
[-154.53533936 -103.23161316]
[-146.77438354 -116.08647156]
[-137.62289429 -127.99153137]
[-127.19599152 -138.79707336]
[-115.62479401 -148.36720276]
[-103.05482483 -156.58155823]
[-89.64414978 -163.33685303]
[-75.56144714 -168.54812622]
[-60.98379898 -172.14982605]
[-46.09455109 -174.09667969]
[-31.08094025 -174.36419678]
[-16.13178635 -172.94900513]
[-1.43508601 -169.86889648]
[12.82433224 -165.16262817]
[26.46714020 -158.88937378]
[39.32176971 -151.12802124]
[51.22655487 -141.97618103]
[62.03178024 -131.54895020]
[71.60156250 -119.97746277]
[79.81555176 -107.40724945]
[86.57044220 -93.99637604]
[91.78128815 -79.91351318]
[95.38256073 -65.33576202]
[97.32897186 -50.44644928]
[97.59603119 -35.43283463]
[96.18038940 -20.48372078]
[93.09984589 -5.78711367]
[88.39315033 8.47216415]
[82.11948395 22.11478424]
[74.35774994 34.96918106]
[86.25012970 44.11091614]
[98.14250946 53.25264740]
[112.90856171 50.61378479]
[120.89847565 37.91885376]
[128.88839722 25.22392464]
[126.74648285 9.32449913]
[137.94531250 -2.16313076]
[153.89411926 -0.42663714]
[162.35832214 13.20188999]
[156.84492493 28.26781082]
[141.58332825 33.21384048]
[133.59341431 45.90877151]
[125.60349274 58.60369873]
[133.19340515 71.54175568]
[148.17311096 70.76190948]
[163.15283203 69.98206329]
[178.13253784 69.20222473]
[175.91433716 48.34885788]
[194.99546814 27.57176781]
[209.40768433 23.41387939]
[223.81990051 19.25599289]
[238.23211670 15.09810543]
[252.64433289 10.94021797]
[263.62100220 -1.24356627]
[279.60229492 2.43480873]
[284.14801025 18.19134521]
[272.58193970 29.81707001]
[256.80221558 25.35243416]
[242.39001465 29.51032066]
[227.97779846 33.66820908]
[213.56558228 37.82609558]
[199.15336609 41.98398209]
[198.99732971 49.48236084]
[211.82888794 57.25096130]
[198.68527222 64.47911072]
[198.52925110 71.97749329]
[212.75602722 76.73130798]
[227.69493103 70.88249207]
[241.50927734 79.03993225]
[243.60185242 94.94592285]
[232.36743164 106.39875793]
[216.42410278 104.61280060]
[208.00221252 90.95808411]
[193.77543640 86.20426941]
[178.91238403 84.18193817]
[163.93267822 84.96178436]
[148.95295715 85.74162292]
[133.97325134 86.52146912]
[128.44009399 113.89642334]
[107.50000000 125.68527222]
[107.50000000 140.68527222]
[107.50000000 155.68527222]
[107.50000000 170.68527222]
[107.50000000 185.68527222]
[107.50000000 200.68527222]
[107.50000000 215.68527222]
[107.50000000 230.68527222]
[107.50000000 245.68527222]
[107.50000000 260.68527222]
[122.03988647 264.74658203]
[134.94427490 272.58108521]
[145.25555420 283.60742188]
[152.20857239 297.00735474]
[155.28736877 311.78649902]
[154.26348877 326.84820557]
[149.21287537 341.07470703]
[140.51036072 353.41036987]
[128.80169678 362.93978882]
[114.95575714 368.95584106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 83]
[25 82]
[26 81]
[84 94]
[85 93]
[86 92]
[95 129]
[96 128]
[97 127]
[98 126]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
