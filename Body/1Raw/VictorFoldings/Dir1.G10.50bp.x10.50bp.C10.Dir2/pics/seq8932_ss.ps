%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACACACUAGGGGGGGGGGACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGxxxxxxxxxxUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACCCCCCCCCCCAACACCCUA\
) } def
/len { sequence length } bind def

/coor [
[108.65218353 355.82546997]
[94.80625153 349.80944824]
[83.09758759 340.28002930]
[74.39506531 327.94436646]
[69.34445953 313.71783447]
[68.32057190 298.65615845]
[71.39936829 283.87698364]
[78.35238647 270.47705078]
[88.66367340 259.45074463]
[101.56805420 251.61622620]
[116.10794067 247.55491638]
[116.10794067 232.55491638]
[116.10794067 217.55491638]
[116.10794067 202.55491638]
[116.10794067 187.55491638]
[116.10794067 172.55491638]
[116.10794067 157.55491638]
[116.10794067 142.55491638]
[116.10794067 127.55490875]
[116.10794067 112.55490875]
[101.19098663 118.48120880]
[88.31388092 111.81248474]
[74.08710480 116.56629944]
[59.86032104 121.32011414]
[45.63354111 126.07392883]
[41.93567657 141.05155945]
[30.71162796 151.63571167]
[15.54294872 154.44902039]
[1.26991034 148.59378052]
[-7.55301332 135.93835449]
[-8.11045933 120.52107239]
[-0.22454791 107.26151276]
[13.58835411 100.39075470]
[28.92060089 102.10124207]
[40.87972641 111.84715271]
[55.10650635 107.09333801]
[69.33329010 102.33952332]
[83.56006622 97.58570862]
[96.02146149 81.91285706]
[117.09581757 88.82751465]
[118.34269714 73.87942505]
[119.58956909 58.93133926]
[120.83644867 43.98324966]
[122.08332062 29.03516388]
[123.33019257 14.08707714]
[110.15653229 8.36916924]
[99.41516876 -1.13062859]
[92.15187073 -13.46966267]
[89.06829834 -27.42973900]
[90.45420074 -41.63739014]
[96.16027069 -54.69900513]
[105.61410522 -65.33751678]
[117.87757111 -72.51727295]
[131.73992920 -75.54484558]
[133.29750061 -90.46375275]
[134.85508728 -105.38266754]
[135.94639587 -120.34291840]
[136.57037354 -135.32992554]
[137.19435120 -150.31695557]
[134.41107178 -159.08651733]
[137.99041748 -165.60830688]
[135.39018250 -174.43388367]
[139.10443115 -180.87980652]
[140.35131836 -195.82789612]
[141.59819031 -210.77598572]
[133.86029053 -221.14801025]
[135.24623108 -233.60987854]
[144.46443176 -241.50492859]
[146.02201843 -256.42385864]
[147.57960510 -271.34277344]
[134.05924988 -278.23944092]
[123.94617462 -289.55715942]
[118.60810852 -303.76522827]
[118.76696777 -318.94216919]
[124.40126801 -333.03540039]
[134.74902344 -344.13891602]
[148.41078186 -350.75109863]
[163.53889465 -351.97766113]
[178.08743286 -347.65277100]
[190.08879089 -338.36126709]
[197.91990662 -325.35980225]
[200.52168274 -310.40670776]
[197.54225159 -295.52426147]
[189.38455200 -282.72518921]
[177.15185547 -273.74044800]
[162.49851990 -269.78518677]
[160.94093323 -254.86627197]
[159.38334656 -239.94735718]
[167.39999390 -224.36744690]
[156.54627991 -209.52911377]
[155.29939270 -194.58102417]
[154.05252075 -179.63293457]
[152.96121216 -164.67268372]
[152.18136597 -149.69297791]
[151.55738831 -134.70594788]
[150.93341064 -119.71894073]
[153.09797668 -116.85849762]
[153.94874573 -112.78690338]
[152.92253113 -108.15016937]
[149.77400208 -103.82508850]
[148.21641541 -88.90617371]
[146.65884399 -73.98725891]
[160.87631226 -67.29255676]
[171.96891785 -56.12330246]
[178.58804321 -41.81145859]
[179.92008972 -26.07257652]
[175.78645325 -10.80017090]
[166.66717529 2.16208553]
[153.64529419 11.24292660]
[138.27827454 15.33395195]
[137.03140259 30.28203964]
[135.78453064 45.23012543]
[134.53765869 60.17821121]
[133.29078674 75.12629700]
[132.04391479 90.07438660]
[139.12988281 76.85361481]
[150.40740967 66.96333313]
[164.43989563 61.66339874]
[179.43984985 61.62893295]
[193.49655151 66.86432648]
[204.81938171 76.70268250]
[211.96604919 89.89075470]
[214.02615356 104.74861145]
[210.73728943 119.38362122]
[202.51840210 131.93151855]
[190.41642761 140.79393005]
[175.97296143 144.84193420]
[161.02784729 143.55986023]
[147.48484802 137.11105347]
[137.06910706 126.31697845]
[131.10794067 112.55490875]
[131.10794067 127.55490875]
[131.10794067 142.55491638]
[131.10794067 157.55491638]
[131.10794067 172.55491638]
[131.10794067 187.55491638]
[131.10794067 202.55491638]
[131.10794067 217.55491638]
[131.10794067 232.55491638]
[131.10794067 247.55491638]
[145.64782715 251.61622620]
[158.55221558 259.45074463]
[168.86349487 270.47705078]
[175.81651306 283.87698364]
[178.89530945 298.65615845]
[177.87142944 313.71783447]
[172.82081604 327.94436646]
[164.11830139 340.28002930]
[152.40963745 349.80944824]
[138.56369019 355.82546997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 38]
[23 37]
[24 36]
[25 35]
[40 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 110]
[54 102]
[55 101]
[56 100]
[57 96]
[58 95]
[59 94]
[61 93]
[63 92]
[64 91]
[65 90]
[68 88]
[69 87]
[70 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
