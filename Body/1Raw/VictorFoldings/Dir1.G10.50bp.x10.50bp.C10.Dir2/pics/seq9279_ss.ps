%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGUAAUAAGGGGGGGGGGACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAxxxxxxxxxxACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUCCCCCCCCCCAAAAGUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 403.42568970]
[71.01555634 397.87268066]
[58.81560135 389.00634766]
[49.20452881 377.38403320]
[42.78650284 363.73632812]
[39.96496582 348.92114258]
[40.91728210 333.86978149]
[45.58358765 319.52835083]
[53.67055511 306.79840088]
[64.66983032 296.48010254]
[77.88998413 289.22213745]
[92.50000000 285.48071289]
[92.50000000 270.48071289]
[92.50000000 255.48069763]
[92.50000000 240.48069763]
[92.50000000 225.48069763]
[92.50000000 210.48069763]
[92.50000000 195.48069763]
[92.50000000 180.48069763]
[92.50000000 165.48069763]
[92.50000000 150.48069763]
[92.50000000 135.48069763]
[79.85260010 130.15315247]
[70.09050751 120.50738525]
[64.61174774 107.92475128]
[64.20092010 94.20722198]
[68.91687012 81.31927490]
[57.93606949 71.10056305]
[46.57927322 80.92250061]
[34.22709274 89.45894623]
[21.02435875 96.60982513]
[7.12586212 102.29129028]
[-7.30544233 106.43672943]
[-22.10035515 108.99754333]
[-37.08541489 109.94370270]
[-52.08493042 109.26412201]
[-66.92303467 106.96676636]
[-81.42576599 103.07856750]
[-95.42308044 97.64511871]
[-108.75086975 90.73011780]
[-121.25287628 82.41464233]
[-132.78251648 72.79618073]
[-143.20460510 61.98751831]
[-152.39695740 50.11537170]
[-160.25180054 37.31893539]
[-166.67701721 23.74824333]
[-171.59730530 9.56240559]
[-174.95497131 -5.07225704]
[-176.71063232 -19.98416138]
[-176.84371948 -34.99847031]
[-175.35266113 -49.93915558]
[-172.25494385 -64.63103485]
[-167.58688354 -78.90186310]
[-161.40322876 -92.58432007]
[-153.77645874 -105.51797485]
[-144.79598999 -117.55120850]
[-134.56713867 -128.54292297]
[-123.20980835 -138.36424255]
[-110.85717010 -146.90002441]
[-97.65405273 -154.05018616]
[-83.75524902 -159.73089600]
[-69.32372284 -163.87556458]
[-54.52866745 -166.43559265]
[-39.54356003 -167.38095093]
[-24.54408073 -166.70056152]
[-9.70609951 -164.40240479]
[4.79642057 -160.51342773]
[18.79344368 -155.07922363]
[32.12086105 -148.16349792]
[44.62241745 -139.84735107]
[56.15153885 -130.22827148]
[66.57304382 -119.41904449]
[75.76476288 -107.54640198]
[83.61891174 -94.74954224]
[90.04341125 -81.17850494]
[94.96293640 -66.99240875]
[98.31980896 -52.35756302]
[100.07466888 -37.44556427]
[100.20694733 -22.43124580]
[98.71508026 -7.49064350]
[95.61657715 7.20107174]
[90.94775391 21.47164726]
[84.76335144 35.15377045]
[77.13588715 48.08702087]
[68.15477753 60.11976242]
[79.13558197 70.33847046]
[87.46951294 65.96887970]
[96.64711761 63.89060211]
[106.05047607 64.24357605]
[115.04645538 67.00402069]
[123.02935791 71.98609161]
[129.46168518 78.85433197]
[133.91036987 87.14631653]
[148.73284912 84.84544373]
[163.55532837 82.54456329]
[178.37782288 80.24369049]
[187.70805359 67.77033997]
[202.77293396 65.64807892]
[214.60687256 74.61990356]
[229.42935181 72.31902313]
[234.89212036 68.42021179]
[240.63613892 67.97962189]
[244.90641785 70.24100494]
[259.81088257 68.55060577]
[272.65118408 59.30741119]
[286.16934204 65.56114197]
[301.07379150 63.87074661]
[315.97824097 62.18035126]
[330.88265991 60.48995209]
[345.78710938 58.79955673]
[360.84396362 51.00677109]
[372.50036621 63.31793976]
[363.89712524 77.92686462]
[347.47750854 73.70400238]
[332.57305908 75.39440155]
[317.66860962 77.08480072]
[302.76419067 78.77519226]
[287.85974121 80.46559143]
[276.08547974 89.58788300]
[261.50128174 83.45505524]
[246.59681702 85.14545441]
[231.73022461 87.14151001]
[216.90774536 89.44238281]
[208.35052490 101.57949829]
[193.35119629 104.12406921]
[180.67869568 95.06616974]
[165.85620117 97.36705017]
[151.03372192 99.66792297]
[136.21124268 101.96879578]
[127.53961182 123.59449768]
[107.50000000 135.48069763]
[107.50000000 150.48069763]
[107.50000000 165.48069763]
[107.50000000 180.48069763]
[107.50000000 195.48069763]
[107.50000000 210.48069763]
[107.50000000 225.48069763]
[107.50000000 240.48069763]
[107.50000000 255.48069763]
[107.50000000 270.48071289]
[107.50000000 285.48071289]
[122.11001587 289.22213745]
[135.33016968 296.48010254]
[146.32945251 306.79840088]
[154.41641235 319.52835083]
[159.08271790 333.86978149]
[160.03503418 348.92114258]
[157.21350098 363.73632812]
[150.79547119 377.38403320]
[141.18440247 389.00634766]
[128.98443604 397.87268066]
[114.96250153 403.42568970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 86]
[28 85]
[93 129]
[94 128]
[95 127]
[96 126]
[99 123]
[100 122]
[103 121]
[104 120]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
