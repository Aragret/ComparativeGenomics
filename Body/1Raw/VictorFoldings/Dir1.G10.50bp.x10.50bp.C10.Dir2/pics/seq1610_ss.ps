%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCUGAUGGGGGGGGGGGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGxxxxxxxxxxUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUACCCCCCCCCCAAACCCUCAU\
) } def
/len { sequence length } bind def

/coor [
[120.62279510 366.75003052]
[106.13310242 362.54156494]
[93.22687531 354.72543335]
[82.78407288 343.83459473]
[75.51670837 330.61160278]
[71.92028046 315.95800781]
[72.24000549 300.87289429]
[76.45407867 286.38482666]
[84.27516937 273.48162842]
[95.17004395 263.04302979]
[108.39585114 255.78077698]
[123.05084229 252.19000244]
[123.36289978 237.19325256]
[123.67495728 222.19650269]
[123.98700714 207.19973755]
[124.29906464 192.20298767]
[124.61112213 177.20623779]
[124.92317963 162.20948792]
[125.23523712 147.21272278]
[125.54729462 132.21597290]
[125.85934448 117.21922302]
[113.82064056 126.25993347]
[99.59261322 128.27888489]
[86.79665375 123.42395020]
[78.38020325 113.51382446]
[63.88460922 117.37098694]
[49.38901138 121.22814941]
[43.92892838 135.75285339]
[30.95571899 144.26609802]
[15.45784664 143.49438477]
[3.39455914 133.73442078]
[-0.59556311 118.73914337]
[5.02176380 104.27452087]
[18.08656311 95.90250397]
[33.57515335 96.84230804]
[45.53185272 106.73255157]
[60.02745056 102.87538910]
[74.52304840 99.01823425]
[77.08535767 86.47135162]
[85.68252563 76.25836182]
[98.62051392 71.19399261]
[112.94655609 72.98902130]
[125.12136078 81.72092438]
[121.11362457 67.26623535]
[113.12370300 54.57130814]
[101.82469940 44.70558548]
[90.52569580 34.83985901]
[72.40483093 31.73918533]
[67.31780243 14.97249031]
[55.81599808 5.34396410]
[44.31419373 -4.28456211]
[32.81239319 -13.91308784]
[16.57455635 -16.20758820]
[10.69452095 -31.51631927]
[21.22116280 -44.09096909]
[37.32557297 -40.99581909]
[42.44091797 -25.41489220]
[53.94272232 -15.78636551]
[65.44452667 -6.15783930]
[76.94632721 3.47068715]
[89.06036377 2.72401309]
[98.72884369 10.70770741]
[100.39141846 23.54085541]
[111.69042206 33.40657806]
[122.98942566 43.27230072]
[118.60200500 28.92829704]
[117.23350525 13.99085331]
[118.94150543 -0.91158694]
[123.65415192 -15.15205574]
[131.17317200 -28.13143730]
[141.18223572 -39.30366516]
[153.26023865 -48.19871140]
[166.89904785 -54.44234467]
[181.52485657 -57.77188873]
[196.52232361 -58.04726410]
[211.26049805 -55.25688553]
[225.11930847 -49.51814651]
[237.51571655 -41.07248306]
[247.92816162 -30.27522278]
[255.91859436 -17.58061790]
[261.15084839 -3.52275014]
[263.40478516 11.30694389]
[262.58554077 26.28455544]
[258.72766113 40.77995682]
[251.99339294 54.18330383]
[242.66609192 65.93069458]
[231.13813782 75.52790833]
[217.89454651 82.57115936]
[203.49250793 86.76414490]
[188.53791809 87.93044281]
[173.65994263 86.02100372]
[159.48452759 81.11614227]
[146.60804749 73.42222595]
[135.56831360 63.25849533]
[139.57604980 77.71318817]
[152.35340881 85.57061005]
[167.06137085 82.62512970]
[181.76933289 79.67964172]
[196.47729492 76.73416138]
[208.48944092 66.43762207]
[222.48826599 71.52508545]
[237.19622803 68.57960510]
[240.93945312 53.78261185]
[250.73873901 42.08061218]
[264.64843750 35.79705429]
[279.90676880 36.17953491]
[293.48416138 43.15211868]
[302.68484497 55.33039093]
[305.68197632 70.29634857]
[301.88052368 85.07849121]
[292.03521729 96.74180603]
[278.10089111 102.97054291]
[262.84420776 102.52797699]
[249.29435730 95.50197601]
[240.14170837 83.28756714]
[225.43374634 86.23304749]
[214.47360229 96.31890869]
[199.42277527 91.44212341]
[184.71481323 94.38760376]
[170.00685120 97.33309174]
[155.29888916 100.27857208]
[170.04151917 97.51179504]
[184.08171082 102.79128265]
[193.34870911 114.58631134]
[195.15565491 129.47708130]
[188.97866821 143.14619446]
[176.60867310 151.63049316]
[161.63218689 152.47004700]
[148.39144897 145.42144775]
[140.72541809 132.52835083]
[140.85609436 117.53128052]
[140.54405212 132.52803040]
[140.23199463 147.52478027]
[139.91993713 162.52154541]
[139.60787964 177.51829529]
[139.29582214 192.51504517]
[138.98376465 207.51179504]
[138.67170715 222.50856018]
[138.35964966 237.50531006]
[138.04759216 252.50205994]
[152.54052734 256.69934082]
[165.45278931 264.50549316]
[175.90400696 275.38827515]
[183.18157959 288.60565186]
[186.78932190 303.25646973]
[186.48124695 318.34182739]
[182.27836609 332.83312988]
[174.46723938 345.74237061]
[163.58042908 356.18939209]
[150.36022949 363.46185303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 38]
[26 37]
[27 36]
[43 95]
[44 94]
[45 65]
[46 64]
[47 63]
[49 60]
[50 59]
[51 58]
[52 57]
[96 121]
[97 120]
[98 119]
[99 118]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
