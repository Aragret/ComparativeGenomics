%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUCACAAGGGGGGGGGGCACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAxxxxxxxxxxACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCCCCCCCCCCCUUACCACAA\
) } def
/len { sequence length } bind def

/coor [
[107.62423706 402.79187012]
[95.73995972 393.51678467]
[86.42125702 381.66665649]
[80.20989227 367.93051147]
[77.46698761 353.10687256]
[78.35202026 338.05761719]
[82.81352234 323.65768433]
[90.59212494 310.74423218]
[101.23557281 300.06808472]
[114.12508392 292.24987793]
[128.51127625 287.74423218]
[127.57563782 272.77343750]
[126.64001465 257.80264282]
[125.70438385 242.83184814]
[124.76875305 227.86105347]
[123.83312988 212.89025879]
[122.89749908 197.91947937]
[120.41238403 183.12677002]
[116.40464020 168.67207336]
[112.39689636 154.21739197]
[108.38916016 139.76269531]
[104.38141632 125.30801392]
[79.92395782 106.11334229]
[65.15789795 103.47447205]
[50.39184189 100.83560944]
[35.62578964 98.19674683]
[21.49411201 108.45506287]
[4.64129210 105.41096497]
[-4.63596439 91.41844940]
[-19.45372200 89.08734894]
[-23.57906151 90.86021423]
[-27.63901901 91.15653992]
[-31.16603088 90.18594360]
[-33.81266022 88.29138184]
[-35.38534164 85.89680481]
[-49.95804596 82.34204865]
[-64.53074646 78.78728485]
[-79.10344696 75.23252106]
[-89.65816498 86.39019012]
[-104.38221741 90.76028442]
[-119.31492615 87.16725922]
[-130.43945312 76.57762909]
[-134.76338196 61.83994293]
[-131.12356567 46.91857147]
[-120.49910736 35.82728577]
[-105.74794769 31.54958534]
[-90.83805847 35.23615265]
[-79.78012848 45.89531708]
[-75.54869080 60.65982056]
[-60.97598648 64.21458435]
[-46.40328217 67.76934052]
[-31.83057976 71.32410431]
[-17.12261772 74.26958466]
[-2.30486035 76.60069275]
[6.98112488 67.61363220]
[19.94426727 65.60582733]
[31.86306953 71.53626251]
[38.26465225 83.43069458]
[53.03070831 86.06955719]
[67.79676056 88.70841980]
[82.56282043 91.34728241]
[94.64280701 82.45493317]
[96.51042175 67.57165527]
[98.37803650 52.68837357]
[100.09072113 37.78647232]
[101.64830017 22.86755943]
[103.20588684 7.94864798]
[104.76346588 -6.97026443]
[106.32104492 -21.88917732]
[92.57855988 -28.24707413]
[81.64682007 -38.72446060]
[74.71160126 -52.18482971]
[72.52519989 -67.16809845]
[75.32477570 -82.04899597]
[82.80664825 -95.21335602]
[94.15924072 -105.23320007]
[108.15111542 -111.02165222]
[123.26452637 -111.95083618]
[137.86009216 -107.91994476]
[150.35459900 -99.36622620]
[159.39273071 -87.21752930]
[163.99409485 -72.79164124]
[163.65957642 -57.65338516]
[158.42546082 -43.44484329]
[148.85949707 -31.70724869]
[135.99934387 -23.71380997]
[121.23995972 -20.33159637]
[119.68238068 -5.41268349]
[118.12479401 9.50622845]
[116.56721497 24.42514038]
[115.00963593 39.34405136]
[117.45902252 46.36873627]
[113.26131439 54.55598831]
[111.39369965 69.43927002]
[109.52608490 84.32254791]
[121.12742615 93.83090973]
[135.35420227 89.07709503]
[149.58099365 84.32327271]
[150.61257935 69.15738678]
[157.37385559 55.54292297]
[168.83377075 45.55599594]
[183.24478149 40.71953964]
[198.40930176 41.77107620]
[212.01484680 48.55025482]
[221.98669434 60.02330399]
[226.80419922 74.44065857]
[225.73271179 89.60378265]
[218.93563843 103.20040894]
[207.44947815 113.15715027]
[193.02580261 117.95568085]
[177.86410522 116.86425018]
[164.27642822 110.04929352]
[154.33480835 98.55005646]
[140.10801697 103.30387115]
[125.88124084 108.05768585]
[118.83610535 121.30027008]
[122.84384918 135.75495911]
[126.85158539 150.20964050]
[130.85932922 164.66433716]
[134.86706543 179.11901855]
[149.18827820 168.42991638]
[170.57725525 167.91085815]
[183.67041016 175.22996521]
[200.05154419 174.46160889]
[208.67860413 188.40814209]
[200.67678833 202.72257996]
[184.27769470 202.67944336]
[176.35130310 188.32312012]
[163.25814819 181.00401306]
[150.56265259 188.99429321]
[137.86828613 196.98384094]
[138.80392456 211.95463562]
[139.73954773 226.92543030]
[140.67517090 241.89622498]
[141.61080933 256.86700439]
[142.54643250 271.83779907]
[143.48205566 286.80859375]
[158.31729126 289.48800659]
[172.07992554 295.64053345]
[183.96981812 304.90841675]
[193.29571533 316.75286865]
[199.51541138 330.48526001]
[202.26728821 345.30725098]
[201.39138794 360.35702515]
[196.93861389 374.75967407]
[189.16784668 387.67782593]
[178.53086853 398.36044312]
[165.64610291 406.18643188]
[151.26264954 410.70083618]
[136.21675110 411.64114380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 61]
[24 60]
[25 59]
[26 58]
[29 54]
[30 53]
[35 52]
[36 51]
[37 50]
[38 49]
[62 95]
[63 94]
[64 93]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[96 115]
[97 114]
[98 113]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
