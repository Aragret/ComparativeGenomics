%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACAACAUGGGGGGGGGGUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCxxxxxxxxxxCUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACACCCCCCCCCCUUAACAACAU\
) } def
/len { sequence length } bind def

/coor [
[89.77809143 518.71258545]
[75.93215179 512.69653320]
[64.22348785 503.16714478]
[55.52096558 490.83148193]
[50.47036362 476.60494995]
[49.44647217 461.54327393]
[52.52526855 446.76409912]
[59.47829056 433.36419678]
[69.78957367 422.33786011]
[82.69395447 414.50335693]
[97.23384094 410.44201660]
[97.23384094 395.44201660]
[97.23384094 380.44201660]
[97.23384094 365.44201660]
[97.23384094 350.44201660]
[97.23384094 335.44201660]
[97.23384094 320.44201660]
[97.23384094 305.44201660]
[97.23384094 290.44201660]
[97.23384094 275.44201660]
[97.23384094 260.44201660]
[81.70890808 255.14772034]
[68.89987946 244.86076355]
[60.35311890 230.80070496]
[57.10801315 214.64387512]
[59.57064438 198.32356262]
[67.46304321 183.79872131]
[79.85445404 172.81877136]
[95.27106476 166.71293640]
[94.64708710 151.72592163]
[94.02310944 136.73890686]
[93.39913177 121.75188446]
[77.24922943 109.77111816]
[76.05330658 87.99095154]
[93.27719879 71.97702026]
[87.50092316 58.13380814]
[81.72465515 44.29058838]
[75.94837952 30.44737053]
[61.53916550 34.67084503]
[46.75278473 37.28352356]
[31.76872635 38.25369263]
[16.76888657 37.56957626]
[1.93535006 35.23947525]
[-12.55181885 31.29167557]
[-26.51675987 25.77410126]
[-39.78995132 18.75373077]
[-52.21026611 10.31578350]
[-63.62693405 0.56268960]
[-73.90137482 -10.38715744]
[-82.90885162 -22.40083694]
[-90.54003143 -35.33251190]
[-96.70227814 -49.02520752]
[-101.32079315 -63.31270599]
[-104.33950043 -78.02156830]
[-105.72175598 -92.97323608]
[-105.45079041 -107.98622894]
[-103.52989197 -122.87828064]
[-99.98236847 -137.46862793]
[-94.85128784 -151.58015442]
[-88.19894409 -165.04156494]
[-80.10607910 -177.68943787]
[-70.67094421 -189.37025452]
[-60.00806427 -199.94221497]
[-48.24688339 -209.27697754]
[-35.53016663 -217.26123047]
[-22.01228523 -223.79804993]
[-7.85733414 -228.80809021]
[6.76285887 -232.23054504]
[21.67081833 -234.02384949]
[36.68557358 -234.16622925]
[51.62486267 -232.65599060]
[66.30733490 -229.51142883]
[80.55475616 -224.77073669]
[94.19417572 -218.49145508]
[107.06002808 -210.74981689]
[118.99613190 -201.63978577]
[129.85758972 -191.27195740]
[139.51255798 -179.77218628]
[147.84384155 -167.28005981]
[154.75028992 -153.94723511]
[160.14807129 -139.93556213]
[163.97166443 -125.41511536]
[166.17465210 -110.56217194]
[166.73028564 -95.55702209]
[165.63183594 -80.58182526]
[162.89262390 -65.81835175]
[158.54591370 -51.44583893]
[152.64445496 -37.63873672]
[145.25990295 -24.56466103]
[136.48188782 -12.38231373]
[126.41696167 -1.23957920]
[115.18730927 8.72827911]
[102.92926025 17.40026283]
[89.79159546 24.67109871]
[95.56787109 38.51431656]
[101.34413910 52.35753250]
[107.12041473 66.20075226]
[120.77665710 72.40615845]
[135.00343323 67.65234375]
[145.64012146 55.94032288]
[160.16343689 59.24523926]
[174.39021301 54.49142456]
[181.22264099 40.24033356]
[196.15844727 35.07342529]
[210.33651733 42.05612946]
[215.34523010 57.04573822]
[208.21301270 71.14917755]
[193.17127991 75.99913025]
[179.14402771 68.71820068]
[164.91725159 73.47201538]
[155.29815674 84.84401703]
[139.75724792 81.87911987]
[125.53047180 86.63293457]
[127.24139404 98.26758575]
[124.16483307 108.96652222]
[117.34170532 116.95513153]
[108.38614655 121.12790680]
[109.01012421 136.11492920]
[109.63410187 151.10194397]
[110.25807953 166.08895874]
[123.47323608 169.64881897]
[135.12788391 176.79168701]
[144.27555847 186.92631531]
[150.17655945 199.21893311]
[152.35771179 212.66189575]
[150.65040588 226.15620422]
[145.20347595 238.60142517]
[136.47032166 248.98539734]
[125.17121124 256.46652222]
[112.23384094 260.44201660]
[112.23384094 275.44201660]
[112.23384094 290.44201660]
[112.23384094 305.44201660]
[112.23384094 320.44201660]
[112.23384094 335.44201660]
[112.23384094 350.44201660]
[112.23384094 365.44201660]
[112.23384094 380.44201660]
[112.23384094 395.44201660]
[112.23384094 410.44201660]
[126.77372742 414.50335693]
[139.67811584 422.33786011]
[149.98939514 433.36419678]
[156.94241333 446.76409912]
[160.02120972 461.54327393]
[158.99732971 476.60494995]
[153.94671631 490.83148193]
[145.24420166 503.16714478]
[133.53553772 512.69653320]
[119.68959808 518.71258545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 120]
[30 119]
[31 118]
[32 117]
[35 97]
[36 96]
[37 95]
[38 94]
[98 113]
[99 112]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
