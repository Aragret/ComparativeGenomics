%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAGCCACGGGGGGGGGGCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAAxxxxxxxxxxUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCCCCCCCCCCCAAUCAGCCAC\
) } def
/len { sequence length } bind def

/coor [
[100.39901733 408.58776855]
[86.55307770 402.57171631]
[74.84441376 393.04229736]
[66.14189148 380.70663452]
[61.09128952 366.48013306]
[60.06739807 351.41842651]
[63.14619446 336.63928223]
[70.09922028 323.23934937]
[80.41049957 312.21301270]
[93.31488037 304.37850952]
[107.85476685 300.31719971]
[107.85476685 285.31719971]
[107.85476685 270.31719971]
[107.85476685 255.31719971]
[107.85476685 240.31719971]
[107.85476685 225.31719971]
[107.85476685 210.31719971]
[107.85476685 195.31719971]
[107.85476685 180.31719971]
[106.29718781 165.39828491]
[103.19886780 150.72175598]
[100.10054779 136.04524231]
[97.00222015 121.36871338]
[93.90390015 106.69218445]
[90.93790436 104.11550903]
[89.14913177 100.22371674]
[89.10714722 95.58514404]
[91.10035706 91.00464630]
[88.92352295 76.16343689]
[85.06774139 70.66430664]
[84.67691040 64.91291046]
[86.97820282 60.66090393]
[85.42061615 45.74198914]
[83.86303711 30.82307816]
[68.85955048 31.19093132]
[53.87425613 30.36558342]
[39.00191498 28.35225296]
[24.33654594 25.16366959]
[9.97087383 20.81999207]
[-4.00427818 15.34868240]
[-17.50055122 8.78433323]
[-30.43261909 1.16844702]
[-42.71871948 -7.45082569]
[-54.28116989 -17.01898956]
[-65.04687500 -27.47555351]
[-74.94776917 -38.75440216]
[-83.92124176 -50.78423309]
[-91.91057587 -63.48897934]
[-98.86525726 -76.78832245]
[-104.74130249 -90.59818268]
[-109.50157166 -104.83123779]
[-113.11597443 -119.39750671]
[-115.56163788 -134.20489502]
[-116.82312012 -149.15979004]
[-116.89244080 -164.16763306]
[-115.76915741 -179.13352966]
[-113.46036530 -193.96289062]
[-109.98067474 -208.56192017]
[-105.35208130 -222.83833313]
[-99.60385132 -236.70188904]
[-92.77232361 -250.06491089]
[-84.90068817 -262.84292603]
[-76.03871155 -274.95510864]
[-66.24243164 -286.32495117]
[-55.57377625 -296.88049316]
[-44.10019684 -306.55505371]
[-31.89424133 -315.28747559]
[-19.03307724 -323.02249146]
[-5.59801483 -329.71121216]
[8.32600117 -335.31137085]
[22.65093613 -339.78756714]
[37.28622437 -343.11148071]
[52.13933563 -345.26211548]
[67.11636353 -346.22586060]
[82.12261200 -345.99661255]
[97.06320953 -344.57583618]
[111.84369659 -341.97250366]
[126.37062073 -338.20306396]
[140.55213928 -333.29141235]
[154.29859924 -327.26852417]
[167.52307129 -320.17251587]
[180.14195251 -312.04824829]
[192.07546997 -302.94708252]
[203.24816895 -292.92654419]
[213.58941650 -282.05001831]
[223.03382874 -270.38626099]
[231.52168274 -258.00900269]
[238.99931335 -244.99652100]
[245.41946411 -231.43106079]
[250.74154663 -217.39839172]
[254.93188477 -202.98724365]
[257.96398926 -188.28872681]
[259.81872559 -173.39578247]
[260.48434448 -158.40254211]
[259.95660400 -143.40382385]
[258.23889160 -128.49444580]
[255.34207153 -113.76866913]
[251.28440857 -99.31960297]
[246.09159851 -85.23860168]
[239.79644775 -71.61467743]
[232.43876648 -58.53398132]
[224.06507874 -46.07920456]
[214.72831726 -34.32909775]
[204.48751831 -23.35794830]
[193.40742493 -13.23511791]
[181.55810547 -4.02460861]
[169.01445007 4.21534681]
[155.85577393 11.43265152]
[142.16528320 17.58167648]
[128.02952576 22.62354279]
[113.53787231 26.52637482]
[98.78195190 29.26549721]
[100.33953094 44.18441010]
[101.89710999 59.10332108]
[103.76472473 73.98660278]
[105.94156647 88.82780457]
[108.58042908 103.59386444]
[111.67874908 118.27038574]
[114.77706909 132.94691467]
[117.87538910 147.62344360]
[120.97371674 162.29995728]
[127.70610046 148.89567566]
[140.16250610 140.53877258]
[155.11863708 139.39241028]
[168.70314026 145.75332642]
[177.39971924 157.97500610]
[178.95726013 172.89392090]
[172.97264099 186.64834595]
[160.99493408 195.67799377]
[146.12452698 197.64556885]
[132.21060181 192.04176331]
[122.85476685 180.31719971]
[122.85476685 195.31719971]
[122.85476685 210.31719971]
[122.85476685 225.31719971]
[122.85476685 240.31719971]
[122.85476685 255.31719971]
[122.85476685 270.31719971]
[122.85476685 285.31719971]
[122.85476685 300.31719971]
[137.39465332 304.37850952]
[150.29904175 312.21301270]
[160.61032104 323.23934937]
[167.56333923 336.63928223]
[170.64213562 351.41842651]
[169.61825562 366.48013306]
[164.56764221 380.70663452]
[155.86512756 393.04229736]
[144.15646362 402.57171631]
[130.31053162 408.58776855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[28 116]
[29 115]
[32 114]
[33 113]
[34 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
