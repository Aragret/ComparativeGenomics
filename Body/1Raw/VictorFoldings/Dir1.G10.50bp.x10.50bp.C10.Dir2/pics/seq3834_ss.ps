%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUCUACUGGGGGGGGGGAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAAxxxxxxxxxxUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUCCCCCCCCCCUCAAUCUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 397.24993896]
[71.19830322 391.23391724]
[59.48964310 381.70449829]
[50.78712082 369.36883545]
[45.73651886 355.14230347]
[44.71262741 340.08062744]
[47.79142761 325.30145264]
[54.74444962 311.90151978]
[65.05573273 300.87518311]
[77.96011353 293.04067993]
[92.50000000 288.97937012]
[92.50000000 273.97937012]
[92.50000000 258.97937012]
[92.50000000 243.97937012]
[92.50000000 228.97937012]
[92.50000000 213.97937012]
[92.50000000 198.97937012]
[92.50000000 183.97937012]
[92.50000000 168.97937012]
[92.50000000 153.97937012]
[92.50000000 138.97937012]
[84.85835266 137.38493347]
[77.55934143 134.28414917]
[70.90126038 129.75151062]
[65.16600037 123.92079926]
[60.60727310 116.98143768]
[57.43960953 109.17245483]
[55.82867050 100.77437592]
[41.18516922 104.02520752]
[26.54166794 107.27603149]
[14.82639885 118.75141907]
[-0.89433128 114.08336639]
[-4.44838285 98.07397461]
[7.82034826 87.19232178]
[23.29084206 92.63253021]
[37.93434525 89.38170624]
[52.57784653 86.13087463]
[58.92497635 72.53992462]
[52.01797485 59.22476959]
[45.11097717 45.90961456]
[38.20397949 32.59445953]
[24.06608391 37.67416382]
[9.37726402 40.82408142]
[-5.60034370 41.98800278]
[-20.59944534 41.14515305]
[-35.35236359 38.31057739]
[-49.59581757 33.53485870]
[-63.07561493 26.90322495]
[-75.55119324 18.53402901]
[-86.79990387 8.57662773]
[-96.62100983 -2.79127812]
[-104.83924103 -15.36681461]
[-111.30792999 -28.92555809]
[-115.91164398 -43.22553253]
[-118.56820679 -58.01154327]
[-119.23022461 -73.01971436]
[-117.88587952 -87.98220825]
[-114.55915833 -102.63199615]
[-109.30943298 -116.70764160]
[-102.23038483 -129.95794678]
[-93.44836426 -142.14645386]
[-83.12007904 -153.05561829]
[-71.42986298 -162.49078369]
[-58.58633423 -170.28353882]
[-44.81869888 -176.29484558]
[-30.37266350 -180.41740417]
[-15.50602913 -182.57763672]
[-0.48411024 -182.73701477]
[14.42500973 -180.89266968]
[28.95525932 -177.07752991]
[42.84732819 -171.35968018]
[55.85330200 -163.84115601]
[67.74106598 -154.65614319]
[78.29846954 -143.96855164]
[87.33711243 -131.96911621]
[94.69567871 -118.87198639]
[100.24285889 -104.91088104]
[103.87963867 -90.33496857]
[105.54113007 -75.40436554]
[105.19767761 -60.38553238]
[102.85540771 -45.54648590]
[98.55612946 -31.15205765]
[92.37655640 -17.45912552]
[84.42697906 -4.71206093]
[74.84926605 6.86165190]
[63.81434250 17.05546570]
[51.51913452 25.68746185]
[58.42613220 39.00261688]
[65.33312988 52.31777191]
[72.24012756 65.63292694]
[83.07778168 60.00156403]
[94.84675598 57.62869263]
[106.60597992 58.58733368]
[117.44678497 62.68862915]
[126.56316376 69.50532532]
[133.31155396 78.41337585]
[147.21411133 72.78142548]
[161.11666870 67.14946747]
[175.01921082 61.51750946]
[188.92176819 55.88555145]
[202.82432556 50.25359726]
[210.37811279 36.10015106]
[226.17900085 33.32320023]
[238.10591125 44.05298615]
[237.00953674 60.05853271]
[223.73092651 69.06175232]
[208.45628357 64.15615082]
[194.55372620 69.78810883]
[180.65116882 75.42006683]
[166.74861145 81.05202484]
[152.84606934 86.68397522]
[138.94351196 92.31593323]
[139.57115173 96.87503815]
[139.66690063 101.47615051]
[139.22944641 106.05741882]
[153.35424805 111.10617828]
[165.01049805 101.10481262]
[180.10874939 98.28726959]
[194.58763123 103.41146851]
[204.55241394 115.09901428]
[207.32261658 130.20602417]
[202.15306091 144.66877747]
[190.43434143 154.59686279]
[175.31872559 157.31970215]
[160.87223816 152.10484314]
[150.98092651 140.35505676]
[148.30549622 125.23097992]
[134.18067932 120.18222809]
[122.86161041 132.44978333]
[107.50000000 138.97937012]
[107.50000000 153.97937012]
[107.50000000 168.97937012]
[107.50000000 183.97937012]
[107.50000000 198.97937012]
[107.50000000 213.97937012]
[107.50000000 228.97937012]
[107.50000000 243.97937012]
[107.50000000 258.97937012]
[107.50000000 273.97937012]
[107.50000000 288.97937012]
[122.03988647 293.04067993]
[134.94427490 300.87518311]
[145.25555420 311.90151978]
[152.20857239 325.30145264]
[155.28736877 340.08062744]
[154.26348877 355.14230347]
[149.21287537 369.36883545]
[140.51036072 381.70449829]
[128.80169678 391.23391724]
[114.95575714 397.24993896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 37]
[29 36]
[30 35]
[38 90]
[39 89]
[40 88]
[41 87]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
