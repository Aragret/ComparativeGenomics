%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUUCCAGGGGGGGGGGCUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCxxxxxxxxxxUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCCCCCCCCCCCACCUCCA\
) } def
/len { sequence length } bind def

/coor [
[72.02561188 536.48669434]
[58.80541611 529.21423340]
[47.91860962 518.76721191]
[40.10747910 505.85797119]
[35.90459824 491.36663818]
[35.59652710 476.28131104]
[39.20426941 461.63049316]
[46.48184204 448.41308594]
[56.93304825 437.53033447]
[69.84531403 429.72418213]
[84.33824921 425.52688599]
[84.02619171 410.53015137]
[83.71413422 395.53338623]
[83.40207672 380.53662109]
[83.09001923 365.53988647]
[82.77796936 350.54312134]
[82.46591187 335.54638672]
[82.15385437 320.54962158]
[81.84179688 305.55285645]
[81.52973938 290.55612183]
[71.99924469 302.13928223]
[57.76543427 306.87200928]
[43.19648743 303.30187988]
[32.76342773 292.52453613]
[29.66802788 277.84738159]
[34.86022568 263.77468872]
[46.74660110 254.62513733]
[61.67938232 253.20664978]
[75.07588196 259.95452881]
[82.82509613 272.79867554]
[85.31021881 258.00598145]
[87.79533386 243.21327209]
[90.28045654 228.42056274]
[92.76557159 213.62785339]
[95.25069427 198.83515930]
[97.73580933 184.04244995]
[100.22092438 169.24974060]
[100.37696075 154.25054932]
[98.20012665 139.40934753]
[88.69772339 127.93966675]
[94.35040283 113.16272736]
[85.82769012 102.07872772]
[90.80839539 89.01410675]
[88.63156128 74.17290497]
[86.45471954 59.33169937]
[76.56553650 50.98557281]
[75.08817291 38.53421021]
[82.27490997 28.75371361]
[80.40729523 13.87043285]
[78.53968048 -1.01284683]
[65.67888641 -4.33538151]
[54.75043106 -11.82924271]
[47.05406570 -22.57665062]
[43.49605942 -35.27449417]
[44.48254776 -48.39232254]
[49.87327194 -60.35679245]
[59.00106812 -69.74038696]
[70.75433350 -75.43171692]
[61.89667130 -88.54096985]
[68.54924011 -101.86735535]
[67.30236816 -116.81544495]
[66.05549622 -131.76353455]
[64.80861664 -146.71160889]
[63.56174469 -161.65969849]
[48.83123398 -165.10459900]
[35.88726425 -172.93458557]
[25.99795532 -184.38258362]
[20.13215828 -198.32704163]
[18.86454582 -213.40179443]
[22.31930542 -228.12998962]
[30.15797424 -241.06871033]
[41.61259842 -250.95034790]
[55.56097412 -256.80679321]
[70.63658142 -258.06430054]
[85.36245728 -254.59968567]
[98.29592133 -246.75234985]
[108.16988373 -235.29110718]
[114.01698303 -221.33880615]
[115.26439667 -206.26235962]
[111.78990173 -191.53880310]
[103.93389893 -178.61061096]
[92.46604156 -168.74432373]
[78.50982666 -162.90657043]
[79.75670624 -147.95849609]
[81.00357819 -133.01040649]
[82.25045776 -118.06231689]
[83.49732971 -103.11422729]
[92.26580811 -91.07416534]
[85.70242310 -76.67859650]
[101.60462952 -71.13455200]
[113.54550171 -59.18087769]
[119.10865021 -43.16868591]
[117.13880920 -26.27700043]
[107.98137665 -11.88161945]
[93.42296600 -2.88046002]
[95.29057312 12.00282001]
[97.15818787 26.88610077]
[108.50035095 40.24107361]
[101.29592896 57.15486145]
[103.47276306 71.99606323]
[105.64959717 86.83727264]
[114.17230988 97.92127228]
[109.19160461 110.98589325]
[118.84970856 123.51711273]
[113.04133606 137.23251343]
[115.21817017 152.07371521]
[121.47950745 138.44302368]
[132.17129517 127.92229462]
[145.90118408 121.88159180]
[160.88119507 121.10755157]
[175.16056824 125.70098877]
[186.87976074 135.06372070]
[194.51263428 147.97647095]
[197.06520081 162.75769043]
[194.20504761 177.48248291]
[186.30464172 190.23332214]
[174.39282227 199.34970093]
[160.02081299 203.64447021]
[145.06018066 202.55831909]
[131.45919800 196.23271179]
[120.98905945 185.49137878]
[115.01363373 171.73486328]
[112.52851868 186.52755737]
[110.04339600 201.32026672]
[107.55828094 216.11297607]
[105.07315826 230.90568542]
[102.58804321 245.69839478]
[100.10292053 260.49108887]
[97.61780548 275.28381348]
[96.52649689 290.24404907]
[96.83855438 305.24081421]
[97.15060425 320.23754883]
[97.46266174 335.23431396]
[97.77471924 350.23107910]
[98.08677673 365.22781372]
[98.39883423 380.22457886]
[98.71089172 395.22134399]
[99.02294159 410.21807861]
[99.33499908 425.21484375]
[113.98999023 428.80560303]
[127.21580505 436.06787109]
[138.11067200 446.50646973]
[145.93176270 459.40966797]
[150.14584351 473.89773560]
[150.46556091 488.98284912]
[146.86912537 503.63644409]
[139.60177612 516.85943604]
[129.15896606 527.75030518]
[116.25273895 535.56640625]
[101.76304626 539.77484131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[36 123]
[37 122]
[38 106]
[39 105]
[41 103]
[43 101]
[44 100]
[45 99]
[48 97]
[49 96]
[50 95]
[58 89]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
