%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCUUAAGGGGGGGGGGUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUxxxxxxxxxxCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCCCCCCCCCCCACAACCUUAA\
) } def
/len { sequence length } bind def

/coor [
[83.46520996 399.62536621]
[70.90698242 391.27420044]
[60.82076263 380.06176758]
[53.84056854 366.69287109]
[50.40518570 352.00787354]
[50.73056030 336.92990112]
[54.79624557 322.40676880]
[62.34666443 309.35144043]
[72.90719604 298.58453369]
[85.81398773 290.78289795]
[100.25571442 286.43695068]
[99.63173676 271.44995117]
[99.00776672 256.46292114]
[98.38378906 241.47590637]
[97.75981140 226.48889160]
[97.13583374 211.50187683]
[96.51185608 196.51486206]
[95.88787842 181.52784729]
[95.26390076 166.54083252]
[94.63992310 151.55381775]
[88.16339874 150.46208191]
[81.87693787 148.56007385]
[75.88146973 145.87834167]
[70.27327728 142.45996094]
[65.14240265 138.35980225]
[60.57122803 133.64369202]
[56.63315964 128.38737488]
[53.39142609 122.67525482]
[50.89807892 116.59902954]
[49.19316101 110.25627899]
[48.30403900 103.74884796]
[33.34378815 102.65753174]
[18.38354111 101.56622314]
[3.42329240 100.47491455]
[-11.53695679 99.38360596]
[-26.49720573 98.29228973]
[-38.29059601 108.81329346]
[-54.06427765 107.83018494]
[-64.46000671 95.92621613]
[-63.31018066 80.16381073]
[-51.29697037 69.89452362]
[-35.54759979 71.21092987]
[-25.40589523 83.33204651]
[-10.44564629 84.42335510]
[4.51460266 85.51466370]
[19.47485161 86.60597229]
[34.43510056 87.69728851]
[49.39534760 88.78859711]
[50.66849136 84.09626770]
[52.37570572 79.54387665]
[54.50196838 75.17148590]
[57.02856827 71.01755524]
[45.93725204 60.91890335]
[29.80891800 57.95092010]
[24.57079315 42.41084290]
[35.61140823 30.28496742]
[51.57312775 34.04735947]
[56.03590012 49.82759094]
[67.12721252 59.92623901]
[95.15441132 48.39528656]
[124.83824921 54.50727844]
[126.95143127 38.82783508]
[140.78572083 33.30861282]
[149.80325317 21.32177925]
[158.82078552 9.33494568]
[167.83830261 -2.65188646]
[153.83085632 2.71387887]
[139.03948975 5.20690203]
[124.04710388 4.72893333]
[109.44455719 1.29880941]
[95.80734253 -4.94828939]
[83.67288208 -13.76616573]
[73.51940155 -24.80731010]
[65.74704742 -37.63659286]
[60.66212845 -51.74841690]
[58.46503067 -66.58663940]
[59.24235153 -81.56648254]
[62.96344757 -96.09760284]
[69.48168182 -109.60733032]
[78.54016113 -121.56324005]
[89.78189850 -131.49417114]
[102.76386261 -139.00872803]
[116.97443390 -143.81079102]
[131.85357666 -145.71107483]
[146.81491089 -144.63471985]
[161.26879883 -140.62413025]
[174.64564514 -133.83737183]
[186.41824341 -124.54190063]
[196.12266541 -113.10404968]
[203.37643433 -99.97458649]
[207.89370728 -85.67094421]
[209.49642944 -70.75681305]
[208.12145996 -55.81996155]
[203.82298279 -41.44905090]
[196.77040100 -28.21043205]
[187.24316406 -16.62734222]
[201.46994019 -21.38115692]
[215.69671631 -26.13497353]
[229.87327576 -31.03652382]
[243.99807739 -36.08528137]
[258.12289429 -41.13403702]
[272.24768066 -46.18279266]
[280.38369751 -60.00976181]
[296.28640747 -62.12701416]
[307.75665283 -50.91037369]
[305.99542236 -34.96429062]
[292.35379028 -26.52123070]
[277.29644775 -32.05799103]
[263.17163086 -27.00923347]
[249.04684448 -21.96047592]
[234.92204285 -16.91172028]
[229.64796448 -11.66483688]
[220.45053101 -11.90819359]
[206.22375488 -7.15437889]
[191.99697876 -2.40056396]
[179.82513428 6.36564350]
[170.80761719 18.35247612]
[161.79008484 30.33930779]
[152.77255249 42.32614136]
[151.30436707 57.14820862]
[136.82508850 63.52481079]
[145.23458862 74.69469452]
[150.35258484 87.70593262]
[151.80664062 101.61175537]
[149.49098206 115.40029144]
[143.57408142 128.06822205]
[134.48651123 138.69375610]
[122.88950348 146.50372314]
[109.62693787 150.92984009]
[110.25091553 165.91685486]
[110.87489319 180.90386963]
[111.49887085 195.89088440]
[112.12284851 210.87789917]
[112.74682617 225.86491394]
[113.37080383 240.85192871]
[113.99478149 255.83894348]
[114.61875916 270.82595825]
[115.24273682 285.81298828]
[129.99574280 288.94342041]
[143.50637817 295.64517212]
[154.92535400 305.49697876]
[163.53486633 317.87951660]
[168.79371643 332.01440430]
[170.37132263 347.01312256]
[168.16851807 361.93286133]
[162.32377625 375.83572388]
[153.20448303 387.84777832]
[141.38391113 397.21395874]
[127.60511017 403.34545898]
[112.73420715 405.85684204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[52 59]
[53 58]
[61 121]
[63 119]
[64 118]
[65 117]
[66 116]
[96 115]
[97 114]
[98 113]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
