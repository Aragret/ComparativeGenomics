%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCCCUUCACCGGGGGGGGGGAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCAxxxxxxxxxxCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUCCCCCCCCCCAGGCUCCCUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.12694550 442.14166260]
[90.76469421 437.63491821]
[77.60380554 430.32904053]
[66.18320465 420.52319336]
[56.97056580 408.61889648]
[50.34313965 395.10363770]
[46.57230759 380.53085327]
[45.81249237 365.49731445]
[48.09480286 350.61862183]
[53.32577896 336.50402832]
[61.29121780 323.73150635]
[71.66493988 312.82415771]
[84.02214813 304.22854614]
[97.85681915 298.29669189]
[112.60243225 295.27151489]
[112.60243225 280.27151489]
[112.60243225 265.27151489]
[112.60243225 250.27153015]
[112.60243225 235.27153015]
[112.60243225 220.27153015]
[112.60243225 205.27153015]
[112.60243225 190.27153015]
[112.60243225 175.27153015]
[112.60243225 160.27153015]
[112.60243225 145.27153015]
[88.94247437 142.07138062]
[71.70665741 128.28587341]
[64.68207550 109.27254486]
[68.18976593 91.13578033]
[79.43253326 78.81105042]
[72.06123352 65.74721527]
[56.00317001 56.78540802]
[56.79966354 39.27720642]
[49.04447556 26.43754196]
[41.16282272 13.67511559]
[33.28116608 0.91268921]
[16.88159180 -7.40771770]
[16.98577690 -24.93371773]
[8.85351086 -37.53793335]
[0.72124535 -50.14214706]
[-8.01108837 -41.59075928]
[-22.37726593 -38.26031113]
[-39.33647919 -42.88877487]
[-52.32686234 -50.38877487]
[-65.31724548 -57.88877487]
[-78.30762482 -65.38877869]
[-84.99407959 -65.77528381]
[-89.73967743 -69.02239227]
[-91.65464020 -73.45040894]
[-104.33857727 -81.45775604]
[-117.02252197 -89.46511078]
[-132.92488098 -87.34503937]
[-144.39710999 -98.55964661]
[-142.63870239 -114.50604248]
[-128.99856567 -122.95152283]
[-113.94022369 -117.41742706]
[-109.01516724 -102.14904785]
[-96.33123016 -94.14169312]
[-83.64729309 -86.13434601]
[-70.80762482 -78.37915802]
[-57.81724167 -70.87915802]
[-44.82686234 -63.37915802]
[-31.83647919 -55.87915802]
[-25.45526695 -59.81998444]
[-25.90007782 -74.81338501]
[-12.69284058 -67.70163727]
[-6.31162739 -71.64246368]
[-7.20023680 -86.61611938]
[-8.08884621 -101.58977509]
[-8.97745609 -116.56343079]
[-23.43917847 -121.17028046]
[-35.25769424 -130.69325256]
[-42.83464813 -143.84446716]
[-45.14531708 -158.84530640]
[-41.87720490 -173.66703796]
[-33.47229385 -186.30516052]
[-21.06727982 -195.05044556]
[-6.33984089 -198.72018433]
[8.71825981 -196.81805420]
[22.07053566 -189.60133362]
[31.91120338 -178.04600525]
[36.90939331 -163.71482849]
[36.38913727 -148.54598999]
[30.42080116 -134.59094238]
[19.81155014 -123.73698425]
[5.99620008 -117.45204163]
[6.88480949 -102.47838593]
[7.77341890 -87.50473022]
[8.66202831 -72.53107452]
[13.32546139 -58.27441406]
[21.45772743 -45.67019653]
[29.58999252 -33.06598282]
[41.37478256 -30.19328308]
[48.24516296 -19.71313286]
[46.04359436 -6.96896553]
[53.92524719 5.79346085]
[61.80690384 18.55588722]
[68.03035736 22.61612892]
[69.71531677 31.64924240]
[81.37741852 34.98527527]
[87.82839966 45.72866821]
[85.12506866 58.37591171]
[92.49636841 71.43975067]
[115.43564606 64.99056244]
[141.60948181 78.16003418]
[155.99806213 73.92111969]
[170.38665771 69.68221283]
[174.62097168 54.84731293]
[186.21853638 44.67380905]
[201.47860718 42.40803146]
[215.53175354 48.77297592]
[223.89367676 61.73761368]
[223.89610291 77.16497803]
[215.53826904 90.13224792]
[201.48712158 96.50162506]
[186.22633362 94.24065399]
[174.62557983 84.07080078]
[160.23698425 88.30971527]
[145.84838867 92.54862976]
[145.62614441 100.04533386]
[158.38873291 107.92672729]
[145.18164062 115.03874969]
[144.95938110 122.53545380]
[159.07159424 127.61930847]
[173.18380737 132.70317078]
[188.25486755 127.20385742]
[201.87547302 135.68081665]
[203.59706116 151.63122559]
[192.09895325 162.81930542]
[176.20153809 160.66253662]
[168.09994507 146.81536865]
[153.98773193 141.73152161]
[139.87553406 136.64765930]
[127.60243225 145.27153015]
[127.60243225 160.27153015]
[127.60243225 175.27153015]
[127.60243225 190.27153015]
[127.60243225 205.27153015]
[127.60243225 220.27153015]
[127.60243225 235.27153015]
[127.60243225 250.27153015]
[127.60243225 265.27151489]
[127.60243225 280.27151489]
[127.60243225 295.27151489]
[142.34805298 298.29669189]
[156.18272400 304.22854614]
[168.53993225 312.82415771]
[178.91365051 323.73150635]
[186.87908936 336.50402832]
[192.11006165 350.61862183]
[194.39237976 365.49731445]
[193.63255310 380.53085327]
[189.86172485 395.10363770]
[183.23429871 408.61889648]
[174.02166748 420.52319336]
[162.60105896 430.32904053]
[149.44017029 437.63491821]
[135.07792664 442.14166260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[30 103]
[31 102]
[33 99]
[34 97]
[35 96]
[36 95]
[38 92]
[39 91]
[40 90]
[43 63]
[44 62]
[45 61]
[46 60]
[49 59]
[50 58]
[51 57]
[67 89]
[68 88]
[69 87]
[70 86]
[105 119]
[106 118]
[107 117]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
