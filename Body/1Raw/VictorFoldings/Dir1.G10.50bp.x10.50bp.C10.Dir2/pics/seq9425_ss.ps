%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUUCUUAGGGGGGGGGGGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCxxxxxxxxxxCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGCCCCCCCCCCAAUCUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.00149536]
[71.19830322 375.98547363]
[59.48964310 366.45605469]
[50.78712082 354.12039185]
[45.73651886 339.89385986]
[44.71262741 324.83218384]
[47.79142761 310.05303955]
[54.74444962 296.65310669]
[65.05573273 285.62677002]
[77.96011353 277.79226685]
[92.50000000 273.73095703]
[92.50000000 258.73095703]
[92.50000000 243.73094177]
[92.50000000 228.73094177]
[92.50000000 213.73094177]
[92.50000000 198.73094177]
[92.50000000 183.73094177]
[92.50000000 168.73094177]
[92.50000000 153.73094177]
[92.50000000 138.73094177]
[84.76270294 126.00366974]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[84.76270294 13.99632835]
[92.50000000 1.26905644]
[92.50000000 -13.73094368]
[77.53038025 -14.77751064]
[62.67023849 -16.86576080]
[47.99195862 -19.98551941]
[33.56706238 -24.12158775]
[19.46582222 -29.25381660]
[5.75694132 -35.35720062]
[-7.49279356 -42.40200424]
[-20.21883011 -50.35390472]
[-32.35916519 -59.17416382]
[-43.85465622 -68.81980896]
[-54.64929581 -79.24384308]
[-64.69049072 -90.39548492]
[-73.92932129 -102.22039795]
[-82.32078552 -114.66098785]
[-89.82398224 -127.65662384]
[-96.40237427 -141.14401245]
[-102.02390289 -155.05741882]
[-106.66118622 -169.32908630]
[-110.29161835 -183.88946533]
[-112.89752960 -198.66763306]
[-114.46621704 -213.59156799]
[-114.99003601 -228.58857727]
[-114.46643066 -243.58560181]
[-112.89795685 -258.50955200]
[-110.29225922 -273.28775024]
[-106.66203308 -287.84817505]
[-102.02495575 -302.11990356]
[-96.40362549 -316.03341675]
[-89.82543182 -329.52087402]
[-82.32241058 -342.51663208]
[-73.93113708 -354.95733643]
[-64.69246674 -366.78237915]
[-54.65143585 -377.93417358]
[-43.85694504 -388.35836792]
[-32.36159515 -398.00418091]
[-20.22138405 -406.82461548]
[-7.49546099 -414.77670288]
[5.75417280 -421.82168579]
[19.46296692 -427.92526245]
[33.56413269 -433.05767822]
[47.98897171 -437.19396973]
[62.66720581 -440.31393433]
[77.52732086 -442.40240479]
[92.49692535 -443.44918823]
[107.50307465 -443.44918823]
[122.47267914 -442.40240479]
[137.33279419 -440.31393433]
[152.01103210 -437.19396973]
[166.43586731 -433.05767822]
[180.53703308 -427.92526245]
[194.24583435 -421.82168579]
[207.49546814 -414.77670288]
[220.22138977 -406.82461548]
[232.36158752 -398.00418091]
[243.85694885 -388.35836792]
[254.65142822 -377.93417358]
[264.69247437 -366.78237915]
[273.93112183 -354.95733643]
[282.32241821 -342.51663208]
[289.82543945 -329.52087402]
[296.40362549 -316.03341675]
[302.02496338 -302.11990356]
[306.66201782 -287.84817505]
[310.29226685 -273.28775024]
[312.89794922 -258.50955200]
[314.46643066 -243.58560181]
[314.99002075 -228.58857727]
[314.46621704 -213.59156799]
[312.89752197 -198.66763306]
[310.29162598 -183.88946533]
[306.66119385 -169.32908630]
[302.02389526 -155.05741882]
[296.40237427 -141.14401245]
[289.82397461 -127.65662384]
[282.32077026 -114.66098785]
[273.92932129 -102.22039795]
[264.69049072 -90.39548492]
[254.64929199 -79.24384308]
[243.85466003 -68.81980896]
[232.35916138 -59.17416382]
[220.21882629 -50.35390472]
[207.49279785 -42.40200424]
[194.24305725 -35.35720062]
[180.53417969 -29.25381660]
[166.43293762 -24.12158775]
[152.00804138 -19.98551941]
[137.32975769 -16.86576080]
[122.46961975 -14.77751064]
[107.50000000 -13.73094368]
[107.50000000 1.26905644]
[115.23729706 13.99632835]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[115.23729706 126.00366974]
[107.50000000 138.73094177]
[107.50000000 153.73094177]
[107.50000000 168.73094177]
[107.50000000 183.73094177]
[107.50000000 198.73094177]
[107.50000000 213.73094177]
[107.50000000 228.73094177]
[107.50000000 243.73094177]
[107.50000000 258.73095703]
[107.50000000 273.73095703]
[122.03988647 277.79226685]
[134.94427490 285.62677002]
[145.25555420 296.65310669]
[152.20857239 310.05303955]
[155.28736877 324.83218384]
[154.26348877 339.89385986]
[149.21287537 354.12039185]
[140.51036072 366.45605469]
[128.80169678 375.98547363]
[114.95575714 382.00149536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[24 127]
[25 126]
[26 125]
[27 124]
[28 123]
[30 121]
[31 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
