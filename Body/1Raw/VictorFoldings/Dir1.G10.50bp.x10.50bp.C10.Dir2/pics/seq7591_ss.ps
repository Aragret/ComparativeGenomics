%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAACUAAGGGGGGGGGGCUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCxxxxxxxxxxUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCCCCCCCCCCCACAGAACUAA\
) } def
/len { sequence length } bind def

/coor [
[90.40218353 457.93109131]
[77.84396362 449.57992554]
[67.75774384 438.36749268]
[60.77754593 424.99856567]
[57.34216309 410.31356812]
[57.66754150 395.23562622]
[61.73322296 380.71249390]
[69.28364563 367.65716553]
[79.84416962 356.89025879]
[92.75096893 349.08862305]
[107.19269562 344.74267578]
[106.56871796 329.75564575]
[105.94474030 314.76864624]
[105.32076263 299.78161621]
[104.69678497 284.79461670]
[104.07280731 269.80758667]
[103.44882965 254.82057190]
[102.82485199 239.83355713]
[102.20087433 224.84654236]
[101.57689667 209.85952759]
[100.95291901 194.87251282]
[100.32894135 179.88549805]
[99.23763275 164.92524719]
[97.68005371 150.00633240]
[96.12247467 135.08743286]
[90.12159729 133.89070129]
[84.41753387 131.67568970]
[79.18166351 128.50894165]
[74.57131195 124.48559570]
[70.72499847 119.72655487]
[67.75829315 114.37479401]
[65.76033020 108.59113312]
[64.79114532 102.54933167]
[64.87985992 96.43093872]
[66.02380371 90.41977692]
[52.78121567 83.37464142]
[39.53863144 76.32950592]
[26.29604530 69.28437805]
[13.05346012 62.23923874]
[-0.18912569 55.19410324]
[-13.43171120 48.14896774]
[-24.68228531 58.30772781]
[-38.73003387 64.00304413]
[-53.87862015 64.54717255]
[-68.29878235 59.87440872]
[-80.24921417 50.54901505]
[-88.28684998 37.69707870]
[-91.44109344 22.87052917]
[-89.33106232 7.85974789]
[-82.21154785 -5.52264166]
[-70.94227600 -15.66065121]
[-56.88405228 -21.33006668]
[-41.73448563 -21.84627724]
[-27.32295990 -17.14694977]
[-15.38973236 -7.79954863]
[-7.37580061 5.06717968]
[-4.24888515 19.89951706]
[-6.38657618 34.90638351]
[6.85600901 41.95151901]
[20.09859467 48.99665451]
[33.34117889 56.04179001]
[46.58376694 63.08692551]
[59.82635117 70.13205719]
[73.06893921 77.17719269]
[85.79630280 67.68254852]
[101.39748383 64.72664642]
[116.71591187 68.90753937]
[126.46356201 57.50652313]
[136.21121216 46.10549927]
[126.16444397 34.93780518]
[117.66135406 22.55424881]
[110.84744263 9.16673279]
[105.83929443 -4.99566507]
[102.72261810 -19.69060707]
[101.55074310 -34.66664505]
[102.34371185 -49.66751862]
[105.08796692 -64.43654633]
[109.73654175 -78.72100067]
[116.20989990 -92.27646637]
[124.39727020 -104.87098694]
[134.15855408 -116.28906250]
[145.32673645 -126.33529663]
[157.71069336 -134.83779907]
[171.09854126 -141.65107727]
[185.26116943 -146.65853882]
[199.95626831 -149.77452087]
[214.93235779 -150.94569397]
[229.93319702 -150.15200806]
[244.70208740 -147.40704346]
[258.98632812 -142.75778198]
[272.54147339 -136.28378296]
[285.13562012 -128.09580994]
[296.55322266 -118.33398438]
[306.59893799 -107.16532898]
[315.10083008 -94.78096771]
[321.91348267 -81.39279938]
[326.92025757 -67.22992706]
[330.03555298 -52.53468704]
[331.20599365 -37.55854034]
[330.41159058 -22.55774117]
[327.66595459 -7.78897715]
[323.01599121 6.49503851]
[316.54135132 20.04988861]
[308.35278320 32.64363098]
[298.59042358 44.06076813]
[287.42129517 54.10594559]
[275.03649902 62.60726547]
[261.64801025 69.41927338]
[247.48490906 74.42539215]
[232.78952026 77.53997040]
[217.81332397 78.70970917]
[202.81256104 77.91459656]
[188.04393005 75.16823578]
[173.76013184 70.51761627]
[160.20558167 64.04232025]
[147.61224365 55.85315323]
[137.86457825 67.25417328]
[128.11692810 78.65519714]
[135.29689026 99.45903015]
[128.75784302 120.47312164]
[111.04138184 133.52984619]
[112.59896851 148.44876099]
[114.15654755 163.36767578]
[117.30507660 167.69274902]
[118.33129120 172.32948303]
[117.48052979 176.40107727]
[115.31596375 179.26152039]
[115.93994141 194.24853516]
[116.56391907 209.23554993]
[117.18789673 224.22256470]
[117.81186676 239.20957947]
[118.43584442 254.19659424]
[119.05982208 269.18362427]
[119.68379974 284.17062378]
[120.30777740 299.15765381]
[120.93175507 314.14465332]
[121.55573273 329.13168335]
[122.17971039 344.11871338]
[136.93272400 347.24914551]
[150.44335938 353.95089722]
[161.86233521 363.80267334]
[170.47184753 376.18521118]
[175.73069763 390.32012939]
[177.30830383 405.31884766]
[175.10549927 420.23858643]
[169.26074219 434.14144897]
[160.14146423 446.15350342]
[148.32089233 455.51965332]
[134.54208374 461.65115356]
[119.67118073 464.16256714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 123]
[24 122]
[25 121]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[67 118]
[68 117]
[69 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
