%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUACCCGCGGGGGGGGGGCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUxxxxxxxxxxUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACCCCCCCCCCCGCCUAACCGC\
) } def
/len { sequence length } bind def

/coor [
[85.62594604 393.25082397]
[72.40574646 385.97836304]
[61.51894379 375.53134155]
[53.70781326 362.62210083]
[49.50493240 348.13079834]
[49.19685745 333.04544067]
[52.80459976 318.39462280]
[60.08217239 305.17724609]
[70.53337860 294.29446411]
[83.44564056 286.48831177]
[97.93857574 282.29104614]
[97.62652588 267.29428101]
[97.31446838 252.29753113]
[97.00241089 237.30078125]
[96.69035339 222.30401611]
[96.37829590 207.30726624]
[96.06623840 192.31051636]
[95.75418854 177.31376648]
[95.44213104 162.31700134]
[95.13007355 147.32025146]
[94.50609589 132.33323669]
[93.57046509 117.36244202]
[78.07545471 97.40487671]
[96.95548248 74.54087830]
[90.04848480 61.22572327]
[83.14148712 47.91056824]
[76.23448944 34.59541321]
[69.05197906 21.42683029]
[61.59706879 8.41052055]
[54.14215851 -4.60578918]
[46.68724823 -17.62209892]
[39.23233795 -30.63840866]
[25.52717400 -24.51084328]
[11.27999687 -19.77834129]
[-3.36759138 -16.48793602]
[-18.27001381 -14.67233086]
[-33.27915955 -14.34956932]
[-48.24585342 -15.52285957]
[-63.02135468 -18.18054199]
[-77.45880127 -22.29619980]
[-91.41471863 -27.82893181]
[-104.75038910 -34.72374725]
[-117.33327484 -42.91212082]
[-129.03833008 -52.31267548]
[-139.74920654 -62.83197403]
[-149.35946655 -74.36547089]
[-157.77359009 -86.79853821]
[-164.90794373 -100.00761414]
[-170.69161987 -113.86140442]
[-175.06715393 -128.22222900]
[-177.99105835 -142.94735718]
[-179.43424988 -157.89044189]
[-179.38240051 -172.90296936]
[-177.83602905 -187.83573914]
[-174.81050110 -202.54031372]
[-170.33587646 -216.87057495]
[-164.45663452 -230.68409729]
[-157.23121643 -243.84356689]
[-148.73141479 -256.21823120]
[-139.04173279 -267.68508911]
[-128.25845337 -278.13015747]
[-116.48874664 -287.44961548]
[-103.84960175 -295.55090332]
[-90.46662140 -302.35342407]
[-76.47283173 -307.78964233]
[-62.00729752 -311.80548096]
[-47.21379471 -314.36105347]
[-32.23935318 -315.43093872]
[-17.23279381 -315.00451660]
[-2.34326744 -313.08599854]
[12.28124428 -309.69451904]
[26.49539375 -304.86370850]
[40.15790939 -298.64163208]
[53.13300323 -291.09011841]
[65.29171753 -282.28417969]
[76.51321411 -272.31140137]
[86.68596649 -261.27084351]
[95.70886993 -249.27226257]
[103.49224091 -236.43490601]
[109.95873260 -222.88636780]
[115.04407501 -208.76129150]
[118.69772339 -194.20005798]
[120.88336182 -179.34739685]
[121.57926941 -164.35090637]
[120.77853394 -149.35966492]
[118.48912048 -134.52264404]
[114.73376465 -119.98731232]
[109.54979706 -105.89812469]
[102.98875427 -92.39511871]
[95.11582184 -79.61248779]
[86.00926208 -67.67728424]
[75.75957489 -56.70812225]
[64.46862793 -46.81402206]
[52.24864960 -38.09331894]
[59.70355988 -25.07700920]
[67.15847015 -12.06069946]
[74.61338043 0.95560974]
[82.06829071 13.97191906]
[86.42061615 16.07732964]
[89.46467590 20.97273827]
[89.54964447 27.68841362]
[96.45664215 41.00357056]
[103.36363983 54.31872559]
[110.27063751 67.63388062]
[108.92406464 52.69444656]
[117.00411224 40.05668640]
[131.12940979 35.00930786]
[145.38874817 39.66454697]
[153.81481934 52.07426834]
[152.88146973 67.04520416]
[142.97927856 78.31225586]
[128.25088501 81.16017914]
[142.95884705 84.10565948]
[157.66680908 87.05113983]
[169.76115417 77.13848114]
[185.39701843 77.37071991]
[197.19161987 87.63821411]
[199.57591248 103.09296417]
[191.42410278 116.43769836]
[176.58523560 121.37145996]
[162.06575012 115.56465912]
[154.72132874 101.75910187]
[140.01336670 98.81362152]
[125.30540466 95.86813354]
[119.73611450 109.89475250]
[108.54125977 116.42681885]
[109.47688293 131.39761353]
[112.86221313 137.19822693]
[112.77359772 142.96220398]
[110.12682343 147.00819397]
[110.43888092 162.00494385]
[110.75093842 177.00170898]
[111.06299591 191.99845886]
[111.37505341 206.99520874]
[111.68711090 221.99195862]
[111.99916077 236.98872375]
[112.31121826 251.98547363]
[112.62327576 266.98223877]
[112.93533325 281.97897339]
[127.59032440 285.56976318]
[140.81613159 292.83200073]
[151.71099854 303.27059937]
[159.53210449 316.17379761]
[163.74617004 330.66186523]
[164.06588745 345.74697876]
[160.46946716 360.40057373]
[153.20210266 373.62359619]
[142.75929260 384.51443481]
[129.85307312 392.33053589]
[115.36338043 396.53900146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 127]
[22 126]
[24 104]
[25 103]
[26 102]
[27 101]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
