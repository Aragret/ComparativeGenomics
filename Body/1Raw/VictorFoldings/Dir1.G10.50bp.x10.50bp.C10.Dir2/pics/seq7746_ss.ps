%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUCUUCGGGGGGGGGGAACUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUxxxxxxxxxxCUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUCCCCCCCCCCACUCAUCUUC\
) } def
/len { sequence length } bind def

/coor [
[19.30507851 540.34899902]
[5.45914030 534.33300781]
[-6.24952126 524.80358887]
[-14.95204544 512.46789551]
[-20.00264740 498.24139404]
[-21.02653885 483.17968750]
[-17.94774055 468.40054321]
[-10.99471760 455.00061035]
[-0.68343377 443.97427368]
[12.22094727 436.13977051]
[26.76083374 432.07846069]
[26.76083374 417.07846069]
[26.76083374 402.07846069]
[26.76083374 387.07846069]
[26.76083374 372.07846069]
[26.76083374 357.07846069]
[26.76083374 342.07846069]
[26.76083374 327.07846069]
[26.76083374 312.07846069]
[26.76083374 297.07846069]
[26.76083374 282.07846069]
[26.60479736 267.07928467]
[19.07270813 280.05108643]
[8.24627304 290.43319702]
[-5.02960348 297.41537476]
[-19.71886063 300.45275879]
[-34.67513657 299.30831909]
[-48.73123169 294.07128906]
[-60.79019547 285.15045166]
[-69.91093445 273.24197388]
[-75.38166046 259.27517700]
[-76.77542877 244.34007263]
[-73.98348236 229.60220337]
[-67.22368622 216.21171570]
[-57.02359772 205.21360779]
[-44.17923355 197.46620178]
[-29.69297981 193.57411194]
[-14.69535446 193.84104919]
[-0.35678756 198.24621582]
[12.20372772 206.44581604]
[22.00595856 217.79995728]
[28.28493118 231.42253113]
[30.55065727 246.25312805]
[36.32693100 232.40991211]
[42.10320282 218.56669617]
[47.87947464 204.72348022]
[39.98523331 192.12113953]
[41.03794479 177.10928345]
[50.84296036 165.45960999]
[65.80046844 161.77462769]
[71.57674408 147.93141174]
[77.35301971 134.08819580]
[83.12928772 120.24497986]
[88.90556335 106.40176392]
[89.84118652 91.43096924]
[85.83345032 76.97628021]
[81.82570648 62.52159500]
[75.76269531 48.80154037]
[67.77278137 36.10660934]
[52.51118088 31.16058159]
[46.99778366 16.09465981]
[55.46199036 2.46613288]
[71.41078949 0.72963917]
[82.60962677 12.21726894]
[80.46771240 28.11669540]
[88.45762634 40.81162643]
[88.85472870 25.81688118]
[94.86206055 12.07236004]
[105.59755707 1.59623182]
[119.48485565 -4.07324219]
[134.48481750 -4.10358572]
[148.39494324 1.50965607]
[159.17272949 11.94226456]
[165.23562622 25.66236877]
[165.69338989 40.65538406]
[160.47880554 54.71981049]
[150.35754395 65.79050446]
[136.81578064 72.24189758]
[121.84190369 73.12670898]
[107.63459015 68.31501007]
[96.28039551 58.51385498]
[100.28813934 72.96854401]
[104.29587555 87.42323303]
[118.31259155 92.76473999]
[130.92372131 84.64320374]
[143.53485107 76.52165985]
[156.14598083 68.40011597]
[158.58512878 63.63880157]
[162.25999451 60.63085938]
[166.27743530 59.55295563]
[169.80680847 60.19400406]
[182.89996338 52.87490082]
[195.99311829 45.55579376]
[193.84417725 30.53093147]
[197.27177429 15.74526119]
[205.81233215 3.19842172]
[218.31083679 -5.41272926]
[233.07695007 -8.92360401]
[248.11369324 -6.85938549]
[261.38745117 0.50075769]
[271.10305786 12.16142654]
[275.94659424 26.54561043]
[275.26296997 41.70796967]
[269.14465332 55.59791565]
[258.41909790 66.33695221]
[244.53683472 72.47270203]
[229.37533569 73.17536926]
[214.98509216 68.34991455]
[203.31222534 58.64894867]
[190.21907043 65.96805573]
[177.12591553 73.28716278]
[164.26751709 81.01124573]
[151.65638733 89.13278961]
[139.04525757 97.25432587]
[126.43413544 105.37586975]
[102.74877930 112.17803192]
[96.97250366 126.02125549]
[91.19623566 139.86447144]
[85.41996002 153.70768738]
[79.64369202 167.55090332]
[87.54590607 180.77441406]
[86.16263580 195.93818665]
[76.23308563 207.24606323]
[61.72269440 210.49975586]
[55.94641876 224.34297180]
[50.17014694 238.18618774]
[44.39387512 252.02940369]
[41.60155106 266.76721191]
[44.92641449 275.34609985]
[41.76083374 282.07846069]
[41.76083374 297.07846069]
[41.76083374 312.07846069]
[41.76083374 327.07846069]
[41.76083374 342.07846069]
[41.76083374 357.07846069]
[41.76083374 372.07846069]
[41.76083374 387.07846069]
[41.76083374 402.07846069]
[41.76083374 417.07846069]
[41.76083374 432.07846069]
[56.30072021 436.13977051]
[69.20510101 443.97427368]
[79.51638794 455.00061035]
[86.46940613 468.40054321]
[89.54821014 483.17968750]
[88.52431488 498.24139404]
[83.47371674 512.46789551]
[74.77118683 524.80358887]
[63.06252670 534.33300781]
[49.21659088 540.34899902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[43 127]
[44 126]
[45 125]
[46 124]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[55 83]
[56 82]
[57 81]
[58 66]
[59 65]
[84 115]
[85 114]
[86 113]
[87 112]
[91 111]
[92 110]
[93 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
