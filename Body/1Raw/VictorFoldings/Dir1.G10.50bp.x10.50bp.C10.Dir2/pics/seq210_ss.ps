%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACAAUUGGGGGGGGGGGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCCAxxxxxxxxxxCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCCCCCCCCCCCAUAACACUUG\
) } def
/len { sequence length } bind def

/coor [
[94.77830505 379.82916260]
[83.46633911 369.84408569]
[75.12496948 357.27093506]
[70.32290649 342.96701050]
[69.38757324 327.90753174]
[72.38274384 313.11932373]
[79.10419464 299.61062622]
[89.09364319 288.30252075]
[101.67000580 279.96600342]
[115.97579956 275.16946411]
[115.04016876 260.19866943]
[114.10453796 245.22789001]
[113.16891479 230.25709534]
[112.23328400 215.28630066]
[111.29765320 200.31550598]
[110.36203003 185.34471130]
[109.42639923 170.37393188]
[108.49076843 155.40313721]
[107.55513763 140.43234253]
[106.61951447 125.46154785]
[88.44437408 122.30203247]
[77.60867310 108.43671417]
[62.61598206 108.90475464]
[47.62328339 109.37279510]
[32.63058853 109.84084320]
[17.63789177 110.30888367]
[2.64519596 110.77692413]
[-12.34749985 111.24496460]
[-16.79455566 125.71916199]
[-25.70243835 137.96368408]
[-38.10488892 146.65034485]
[-52.65658188 150.83685303]
[-67.77906036 150.06912231]
[-81.83194733 144.43040466]
[-93.29089355 134.53236389]
[-100.91291809 121.44865417]
[-103.87123871 106.59850311]
[-101.84495544 91.59273529]
[-95.05387878 78.05908203]
[-84.23463440 67.46555328]
[-70.56082916 60.96126938]
[-55.51568604 59.25175858]
[-40.73119354 62.52246094]
[-27.81106186 70.41859436]
[-18.15676880 82.08364105]
[-12.81554222 96.25227356]
[2.17715383 95.78422546]
[17.16984940 95.31618500]
[32.16254425 94.84814453]
[47.15524292 94.38010406]
[62.14793777 93.91206360]
[77.14063263 93.44401550]
[63.75891495 86.66688538]
[48.76788712 86.14814758]
[35.97480774 78.31634521]
[28.69518089 65.20120239]
[28.81562805 50.20168686]
[36.30493164 37.20513535]
[49.22213364 29.57979012]
[64.21955872 29.30186653]
[77.41041565 36.44338989]
[85.37609863 49.15353775]
[86.05159760 64.14108276]
[92.96756744 77.45157623]
[93.27962494 62.45482635]
[93.59168243 47.45807266]
[93.90373993 32.46131897]
[94.21579742 17.46456337]
[80.16894531 11.71561718]
[69.15009308 1.27773535]
[62.64945221 -12.43744278]
[61.54618073 -27.57505226]
[65.98948669 -42.08785629]
[75.37844849 -54.01311493]
[88.44328308 -61.73804092]
[103.41708374 -64.21789551]
[118.27477264 -61.11729813]
[131.00695801 -52.85558319]
[139.89172363 -40.55007935]
[143.72746277 -25.86500359]
[141.99545288 -10.78639126]
[134.92990112 2.64649820]
[123.48638916 12.61697674]
[109.21254730 17.77662086]
[108.90048981 32.77337265]
[108.58843231 47.77012634]
[108.27638245 62.76688004]
[107.96432495 77.76363373]
[113.45715332 82.87037659]
[116.80956268 68.24979401]
[131.14759827 63.84287643]
[142.13304138 74.05659485]
[138.78030396 88.67710114]
[124.44281769 93.08385468]
[129.93565369 98.19059753]
[144.86996460 96.78829193]
[159.80427551 95.38598633]
[174.73857117 93.98368073]
[165.31541443 82.31304169]
[168.35615540 67.62447357]
[181.63825989 60.65414429]
[195.45359802 66.49679565]
[199.70425415 80.88191986]
[191.28393555 93.29482269]
[206.28312683 93.45085907]
[221.28230286 93.60689545]
[236.28149414 93.76293182]
[251.28068542 93.91896820]
[259.02890015 80.65773010]
[272.37762451 73.06120300]
[287.73611450 73.17283630]
[300.97302246 80.96258545]
[308.52764893 94.33505249]
[308.36788940 109.69311523]
[300.53668213 122.90552521]
[287.14059448 130.41821289]
[271.78311157 130.21031189]
[258.59530640 122.33773041]
[251.12464905 108.91815948]
[236.12545776 108.76212311]
[221.12626648 108.60608673]
[206.12709045 108.45005035]
[191.12789917 108.29401398]
[176.14088440 108.91799164]
[161.20657349 110.32029724]
[146.27226257 111.72259521]
[131.33795166 113.12490082]
[121.59030151 124.52592468]
[122.52593231 139.49671936]
[123.46156311 154.46749878]
[124.39718628 169.43829346]
[125.33281708 184.40908813]
[126.26844788 199.37988281]
[127.20407867 214.35067749]
[128.13970947 229.32145691]
[129.07533264 244.29225159]
[130.01095581 259.26306152]
[130.94659424 274.23382568]
[145.73826599 277.21188354]
[159.25473022 283.91766357]
[170.57438660 293.89401245]
[178.92547607 306.46072388]
[183.73858643 320.76095581]
[184.68554688 335.81967163]
[181.70179749 350.61019897]
[174.99078369 364.12408447]
[165.01005554 375.43988037]
[152.44013977 383.78613281]
[138.13806152 388.59368896]
[123.07895660 389.53485107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[95 127]
[96 126]
[97 125]
[98 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
