%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACCAACAAGGGGGGGGGGGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAxxxxxxxxxxUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCCCCCCCCCCCAUCAACCAACCA\
) } def
/len { sequence length } bind def

/coor [
[98.76595306 550.40106201]
[84.60535431 545.24603271]
[72.01560974 536.96386719]
[61.67567062 526.00109863]
[54.14315796 512.94897461]
[49.82429504 498.51135254]
[48.95198441 483.46688843]
[51.57327652 468.62689209]
[57.54680252 454.79165649]
[66.55042267 442.70730591]
[78.09857941 433.02554321]
[91.56848907 426.26846313]
[106.23375702 422.80047607]
[106.23375702 407.80047607]
[106.23375702 392.80047607]
[106.23375702 377.80047607]
[106.23375702 362.80047607]
[106.23375702 347.80047607]
[106.23375702 332.80047607]
[106.23375702 317.80047607]
[106.23375702 302.80047607]
[106.23375702 287.80047607]
[106.23375702 272.80047607]
[106.23375702 257.80047607]
[106.23375702 242.80047607]
[106.08174133 227.80125427]
[105.77774048 212.80433655]
[105.47373199 197.80741882]
[104.25896454 182.85668945]
[102.13792419 168.00740051]
[100.01688385 153.15812683]
[97.89583588 138.30883789]
[88.98854828 136.75245667]
[80.69289398 133.15464783]
[73.46965027 127.71525574]
[67.72004700 120.73641968]
[63.76343155 112.60577393]
[61.81958008 103.77494812]
[61.99646759 94.73443604]
[47.82749176 89.81100464]
[33.65851974 84.88758087]
[19.48954391 79.96414948]
[7.41484547 89.56650543]
[-7.93674088 91.09371185]
[-21.66658020 84.05843353]
[-29.39352989 70.70561981]
[-28.65194893 55.29608917]
[-19.67847443 42.74697113]
[-5.33650780 37.06264877]
[9.79748154 40.05696487]
[20.89429092 50.77444077]
[24.41297150 65.79517365]
[38.58194733 70.71860504]
[52.75092316 75.64202881]
[66.91989899 80.56546021]
[73.09702301 70.91677094]
[82.10051727 63.25824738]
[93.28149414 58.41772079]
[105.74980164 57.00960922]
[106.66131592 42.03733063]
[90.79560852 33.77072906]
[80.14008331 19.46556664]
[76.78192139 2.00055885]
[81.34552765 -15.13445759]
[92.87700653 -28.53584671]
[109.04315948 -35.56225204]
[109.04315948 -50.56225204]
[109.04315948 -65.56224823]
[109.04315948 -80.56224823]
[94.79048920 -85.72337341]
[83.16455841 -95.45032501]
[75.56925964 -108.56852722]
[72.92175293 -123.49388885]
[75.54174805 -138.42411804]
[83.11286163 -151.55628967]
[94.72084045 -161.30464172]
[108.96398163 -166.49201965]
[124.12233734 -166.49201965]
[138.36547852 -161.30464172]
[149.97344971 -151.55628967]
[157.54457092 -138.42411804]
[160.16456604 -123.49388885]
[157.51705933 -108.56852722]
[149.92175293 -95.45032501]
[138.29582214 -85.72337341]
[124.04315948 -80.56224823]
[124.04315948 -65.56224823]
[124.04315948 -50.56225204]
[124.04315948 -35.56225204]
[135.65733337 -31.42846489]
[145.44871521 -23.89775467]
[152.45252991 -13.69303894]
[155.97280884 -1.80163383]
[155.65144348 10.62027454]
[151.50469971 22.36003685]
[143.92294312 32.26692200]
[133.63407898 39.36491013]
[121.63359070 42.94884491]
[120.72207642 57.92112350]
[132.94606018 66.61447144]
[146.78965759 60.83912659]
[160.63327026 55.06378174]
[174.47688293 49.28844070]
[180.25535583 34.57841873]
[194.77609253 28.33953285]
[209.42419434 34.27320862]
[215.50921631 48.85909653]
[209.42100525 63.44365311]
[194.77159119 69.37411499]
[180.25221252 63.13204575]
[166.40861511 68.90738678]
[152.56500244 74.68273163]
[138.72140503 80.45807648]
[141.49957275 104.12750244]
[131.48849487 124.72473907]
[112.74511719 136.18778992]
[114.86616516 151.03707886]
[116.98720551 165.88635254]
[119.10824585 180.73564148]
[129.24261475 169.67695618]
[144.21903992 168.83615112]
[155.52752686 178.69100952]
[156.74232483 193.64173889]
[147.17314148 205.19296265]
[132.25744629 206.78099060]
[120.47065735 197.50340271]
[120.77465820 212.50033569]
[121.07865906 227.49725342]
[124.39732361 236.07208252]
[121.23375702 242.80047607]
[121.23375702 257.80047607]
[121.23375702 272.80047607]
[121.23375702 287.80047607]
[121.23375702 302.80047607]
[121.23375702 317.80047607]
[121.23375702 332.80047607]
[121.23375702 347.80047607]
[121.23375702 362.80047607]
[121.23375702 377.80047607]
[121.23375702 392.80047607]
[121.23375702 407.80047607]
[121.23375702 422.80047607]
[135.89901733 426.26846313]
[149.36892700 433.02554321]
[160.91708374 442.70730591]
[169.92070007 454.79165649]
[175.89422607 468.62689209]
[178.51551819 483.46688843]
[177.64321899 498.51135254]
[173.32434082 512.94897461]
[165.79183960 526.00109863]
[155.45190430 536.96386719]
[142.86215210 545.24603271]
[128.70155334 550.40106201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 128]
[27 127]
[28 126]
[29 119]
[30 118]
[31 117]
[32 116]
[39 55]
[40 54]
[41 53]
[42 52]
[59 99]
[60 98]
[66 89]
[67 88]
[68 87]
[69 86]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
