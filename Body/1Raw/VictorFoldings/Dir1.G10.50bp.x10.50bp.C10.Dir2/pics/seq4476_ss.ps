%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCUAAGGGGGGGGGGGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUxxxxxxxxxxUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCCCCCCCCCCCAAACCUACG\
) } def
/len { sequence length } bind def

/coor [
[97.66958618 532.41387939]
[84.79631805 524.51098633]
[74.67201996 513.30047607]
[68.11743927 499.69116211]
[65.66391754 484.78622437]
[67.51035309 469.79400635]
[73.50706482 455.92977905]
[83.16793060 444.31753540]
[95.70977783 435.89859009]
[110.11589813 431.35540771]
[109.80384064 416.35867310]
[109.49178314 401.36190796]
[109.17972565 386.36517334]
[108.86766815 371.36840820]
[108.55561829 356.37164307]
[108.24356079 341.37490845]
[107.93150330 326.37814331]
[107.61944580 311.38137817]
[107.30738831 296.38464355]
[106.99533081 281.38787842]
[91.46990204 274.86273193]
[80.29789734 262.18753052]
[75.74434662 245.85951233]
[78.76396942 229.12358093]
[88.80149078 215.32742310]
[103.89300537 207.25187683]
[102.95737457 192.28109741]
[102.02174377 177.31030273]
[100.61943817 162.37599182]
[98.75183105 147.49270630]
[96.88421631 132.60943604]
[95.01660156 117.72615051]
[90.25726318 131.95108032]
[77.18777466 139.31237793]
[62.55595779 136.00938416]
[53.91623688 123.74743652]
[55.72932816 108.85741425]
[67.05912781 99.02706909]
[82.05792999 99.33260345]
[66.25126648 100.01077271]
[58.38433075 87.36321259]
[44.99804688 80.59510040]
[31.61176300 73.82698822]
[18.22547722 67.05886841]
[4.83919334 60.29075623]
[-8.54709148 53.52264023]
[-24.17664528 57.14156342]
[-36.66091156 47.06571579]
[-36.42302322 31.02442551]
[-23.64547539 21.32319832]
[-8.13010502 25.40398598]
[-1.77897692 40.13635635]
[11.60730839 46.90446854]
[24.99359322 53.67258453]
[38.37987900 60.44070053]
[51.76616287 67.20881653]
[65.15245056 73.97692871]
[80.00163269 72.81465912]
[88.82604218 85.94631195]
[102.95084381 80.89756012]
[109.01385498 67.17750549]
[115.07687378 53.45745087]
[121.13988495 39.73739624]
[127.20289612 26.01734352]
[133.26591492 12.29729080]
[121.14515686 -18.64711380]
[122.39202881 -33.59519958]
[123.63890839 -48.54328537]
[124.88578033 -63.49137497]
[111.11145782 -69.81938934]
[100.33431244 -80.47908020]
[93.85575104 -94.18324280]
[92.45807648 -109.27702332]
[96.31008148 -123.93778229]
[104.94660187 -136.39515686]
[117.32474518 -145.14486694]
[131.94978333 -149.13034058]
[147.05567932 -147.87030029]
[160.81832886 -141.51690674]
[171.57580566 -130.83737183]
[178.02909851 -117.12129974]
[179.39895630 -102.02497101]
[175.51994324 -87.37133026]
[166.86047363 -74.92989349]
[154.46623230 -66.20301056]
[139.83386230 -62.24449921]
[138.58699036 -47.29641342]
[137.34011841 -32.34832382]
[136.09324646 -17.40023804]
[149.61743164 -10.91207314]
[160.49626160 -21.23927879]
[171.37509155 -31.56648254]
[173.22796631 -47.50217819]
[186.91792297 -55.86666489]
[201.94319153 -50.24341965]
[206.77767944 -34.94612122]
[197.71276855 -21.70954323]
[181.70228577 -20.68765831]
[170.82347107 -10.36045361]
[159.94464111 -0.03324835]
[174.85691833 1.58655643]
[183.71894836 13.68880749]
[180.76106262 28.39427757]
[167.90899658 36.12890244]
[153.53015137 31.85702133]
[146.98596191 18.36030388]
[140.92295837 32.08035660]
[134.85993958 45.80041122]
[128.79692078 59.52046585]
[122.73390961 73.24051666]
[116.67089844 86.96057129]
[119.62724304 103.45970154]
[109.89987946 115.85853577]
[111.76749420 130.74182129]
[113.63510895 145.62509155]
[115.50272369 160.50837708]
[118.74054718 164.76702881]
[119.86299896 169.38140869]
[119.09712982 173.46981812]
[116.99253845 176.37466431]
[117.92816162 191.34545898]
[118.86379242 206.31625366]
[131.49230957 210.43450928]
[141.93205261 218.59544373]
[148.94305420 229.80198669]
[151.70210266 242.69703674]
[149.89930725 255.72779846]
[143.77279663 267.33273315]
[134.07746887 276.12869263]
[121.99208832 281.07583618]
[122.30414581 296.07257080]
[122.61620331 311.06933594]
[122.92825317 326.06610107]
[123.24031067 341.06283569]
[123.55236816 356.05960083]
[123.86442566 371.05633545]
[124.17648315 386.05310059]
[124.48854065 401.04986572]
[124.80059052 416.04660034]
[125.11264801 431.04336548]
[139.69529724 434.98333740]
[152.57649231 442.87326050]
[162.71205139 454.07357788]
[169.28030396 467.67633057]
[171.74879456 482.57879639]
[169.91741943 497.57287598]
[163.93463135 511.44311523]
[154.28544617 523.06506348]
[141.75205994 531.49658203]
[127.35051727 536.05426025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 122]
[27 121]
[28 120]
[29 116]
[30 115]
[31 114]
[32 113]
[39 59]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[60 111]
[61 110]
[62 109]
[63 108]
[64 107]
[65 106]
[66 89]
[67 88]
[68 87]
[69 86]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
