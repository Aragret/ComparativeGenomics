%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAGUCCUGGGGGGGGGGCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGxxxxxxxxxxACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACACCCCCCCCCCAUCCUAAUCCU\
) } def
/len { sequence length } bind def

/coor [
[45.63520050 277.45462036]
[34.63455582 273.70388794]
[23.89025116 269.27191162]
[13.44441891 264.17614746]
[3.33802295 258.43655396]
[-6.38930321 252.07562256]
[-15.69941235 245.11830139]
[-24.55579567 237.59190369]
[-32.92371750 229.52590942]
[-40.77036667 220.95198059]
[-48.06497192 211.90371704]
[-54.77892303 202.41661072]
[-67.61257935 210.18174744]
[-80.44622803 217.94688416]
[-93.11774445 225.97387695]
[-105.62178040 234.25935364]
[-118.12581635 242.54483032]
[-130.62985229 250.83030701]
[-143.13389587 259.11578369]
[-155.63792419 267.40124512]
[-168.14196777 275.68673706]
[-180.64599609 283.97219849]
[-190.50975037 297.76141357]
[-206.49064636 292.10040283]
[-205.47479248 275.17691040]
[-188.93147278 271.46817017]
[-176.42742920 263.18267822]
[-163.92340088 254.89721680]
[-151.41937256 246.61174011]
[-138.91532898 238.32626343]
[-126.41129303 230.04078674]
[-113.90725708 221.75531006]
[-101.40322113 213.46984863]
[-99.58557892 208.99263000]
[-94.90219879 205.63795471]
[-88.21136475 205.11322021]
[-75.37771606 197.34808350]
[-62.54405975 189.58296204]
[-68.44763184 177.91708374]
[-73.51525116 165.86451721]
[-77.72175598 153.48509216]
[-81.04627228 140.84024048]
[-83.47230530 127.99270630]
[-84.98780823 115.00624847]
[-85.58527374 101.94531250]
[-85.26171875 88.87473297]
[-84.01876831 75.85935974]
[-81.86257172 62.96379089]
[-78.80384827 50.25202560]
[-74.85776520 37.78714371]
[-70.04390717 25.63100815]
[-64.38616180 13.84394646]
[-57.91262054 2.48445511]
[-50.65539551 -8.39109230]
[-42.65050888 -18.72872353]
[-33.93768311 -28.47713470]
[-24.56015968 -37.58794785]
[-14.56447792 -46.01594925]
[-4.00024319 -53.71931076]
[-11.89672565 -66.47256470]
[-19.79320908 -79.22582245]
[-33.27213669 -89.50953674]
[-27.12165451 -105.30852509]
[-10.23747826 -103.77199554]
[-7.03995132 -87.12230682]
[0.85653126 -74.36904907]
[8.75301361 -61.61579132]
[17.31688118 -66.16010284]
[26.10636330 -70.25101471]
[35.09747696 -73.87736511]
[44.26568604 -77.02927399]
[53.58597565 -79.69812012]
[63.03291321 -81.87664032]
[72.58071899 -83.55887604]
[82.20334625 -84.74024200]
[91.87453461 -85.41751099]
[101.56789398 -85.58884430]
[111.25697327 -85.25376129]
[120.91534424 -84.41319275]
[130.51663208 -83.06941986]
[140.03465271 -81.22611237]
[149.44343567 -78.88829803]
[158.71731567 -76.06236267]
[167.83096313 -72.75600433]
[176.75952148 -68.97826385]
[185.47863770 -64.73943329]
[193.96449280 -60.05108643]
[202.19396973 -54.92601395]
[210.14459229 -49.37820053]
[217.79466248 -43.42278290]
[225.12330627 -37.07601547]
[235.67532349 -47.73692703]
[246.22734070 -58.39783478]
[249.86476135 -74.38849640]
[265.60958862 -78.97457123]
[277.26492310 -67.43830109]
[272.84072876 -51.64720917]
[256.88824463 -47.84581757]
[246.33622742 -37.18490982]
[235.78422546 -26.52400208]
[260.07128906 6.06991911]
[276.68035889 43.16930008]
[284.81475830 82.99462891]
[299.79498291 82.22496796]
[314.77523804 81.45530701]
[329.75549316 80.68565369]
[344.73571777 79.91599274]
[350.59628296 65.82284546]
[361.99694824 55.67457581]
[376.67413330 51.48612595]
[391.71365356 54.08911133]
[404.12939453 62.96670914]
[411.45623779 76.35626984]
[412.23941040 91.59928131]
[406.32339478 105.66923523]
[394.88284302 115.77252960]
[380.18927002 119.90315247]
[365.16012573 117.24095917]
[352.77941895 108.31453705]
[345.50537109 94.89623260]
[330.52514648 95.66589355]
[315.54489136 96.43555450]
[300.56466675 97.20520782]
[285.58441162 97.97486877]
[285.34729004 109.59494019]
[284.38327026 121.17738342]
[282.69619751 132.67678833]
[280.29266357 144.04803467]
[277.18209839 155.24653625]
[273.37667847 166.22839355]
[268.89135742 176.95053101]
[263.74371338 187.37089539]
[257.95391846 197.44862366]
[251.54470825 207.14419556]
[244.54118347 216.41960144]
[236.97082520 225.23844910]
[228.86332703 233.56616211]
[220.25048828 241.37007141]
[211.16606140 248.61959839]
[201.64569092 255.28628540]
[191.72669983 261.34402466]
[181.44799805 266.76901245]
[170.84988403 271.54000854]
[159.97393799 275.63827515]
[148.86277771 279.04776001]
[137.56001282 281.75512695]
[126.10994720 283.74969482]
[114.55748749 285.02365112]
[102.94794464 285.57205200]
[91.32683563 285.39270020]
[79.73973846 284.48629761]
[68.23210144 282.85644531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 38]
[13 37]
[14 36]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[59 67]
[60 66]
[61 65]
[91 100]
[92 99]
[93 98]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
