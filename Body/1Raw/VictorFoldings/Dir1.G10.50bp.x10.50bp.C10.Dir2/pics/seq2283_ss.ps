%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAACAGCUCUGGGGGGGGGGUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAxxxxxxxxxxAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUCCCCCCCCCCAGGCACAGCUCU\
) } def
/len { sequence length } bind def

/coor [
[93.36699677 468.48587036]
[79.20639801 463.33087158]
[66.61665344 455.04864502]
[56.27671432 444.08587646]
[48.74420166 431.03375244]
[44.42533875 416.59616089]
[43.55302811 401.55169678]
[46.17432022 386.71170044]
[52.14784622 372.87646484]
[61.15146637 360.79211426]
[72.69962311 351.11035156]
[86.16954041 344.35327148]
[100.83480072 340.88528442]
[100.83480072 325.88528442]
[100.83480072 310.88528442]
[100.83480072 295.88528442]
[100.83480072 280.88528442]
[100.83480072 265.88528442]
[100.83480072 250.88528442]
[100.83480072 235.88528442]
[100.83480072 220.88528442]
[100.83480072 205.88528442]
[92.48801422 197.07907104]
[92.40010071 184.54443359]
[101.16606140 175.03060913]
[101.47006226 160.03369141]
[101.77407074 145.03677368]
[102.07807159 130.03985596]
[80.45648956 120.05136108]
[74.13583374 98.87637329]
[84.94329071 81.59777069]
[79.59143066 67.58500671]
[74.23957062 53.57224274]
[68.88771820 39.55947495]
[54.44192505 43.63689423]
[39.68878555 46.40297699]
[24.74709129 47.83544922]
[9.73714066 47.92277527]
[-5.22021103 46.66426086]
[-20.00453377 44.07003021]
[-34.49679184 40.16097260]
[-48.58029938 34.96856689]
[-62.14165878 28.53461266]
[-75.07168579 20.91091919]
[-87.26626587 12.15886879]
[-98.62722015 2.34892607]
[-109.06307220 -8.43992138]
[-118.48979950 -20.12080765]
[-126.83149719 -32.59968185]
[-134.02101135 -45.77606964]
[-140.00044250 -59.54388046]
[-144.72164917 -73.79226685]
[-148.14662170 -88.40649414]
[-150.24778748 -103.26891327]
[-151.00822449 -118.25984192]
[-150.42181396 -133.25859070]
[-148.49327087 -148.14437866]
[-145.23812866 -162.79737854]
[-140.68258667 -177.09959412]
[-134.86334229 -190.93586731]
[-127.82722473 -204.19480896]
[-119.63091278 -216.76965332]
[-110.34037781 -228.55914307]
[-100.03043365 -239.46836853]
[-88.78409576 -249.40950012]
[-76.69190216 -258.30249023]
[-63.85122299 -266.07571411]
[-50.36544037 -272.66662598]
[-36.34314346 -278.02212524]
[-21.89722633 -282.09909058]
[-7.14400625 -284.86474609]
[7.79773331 -286.29675293]
[22.80768585 -286.38360596]
[37.76499939 -285.12463379]
[52.54924393 -282.52996826]
[67.04138184 -278.62045288]
[81.12473297 -273.42761230]
[94.68589020 -266.99325562]
[107.61568451 -259.36917114]
[119.80999756 -250.61674500]
[131.17065430 -240.80645752]
[141.60618591 -230.01728821]
[151.03254700 -218.33612061]
[159.37387085 -205.85699463]
[166.56297302 -192.68038940]
[172.54197693 -178.91238403]
[177.26275635 -164.66386414]
[180.68728638 -150.04953003]
[182.78799438 -135.18704224]
[183.54797363 -120.19609070]
[182.96110535 -105.19736481]
[181.03210449 -90.31163025]
[177.77651978 -75.65872955]
[173.22055054 -61.35665512]
[167.40087891 -47.52055740]
[160.36436462 -34.26183701]
[152.16766357 -21.68724442]
[142.87677002 -9.89803028]
[132.56648254 1.01088572]
[121.31983948 10.95166969]
[109.22737885 19.84428406]
[96.38645935 27.61712646]
[82.90048218 34.20761490]
[88.25234222 48.22038269]
[93.60420227 62.23314667]
[98.95605469 76.24591064]
[109.99013519 76.68989563]
[120.30857849 82.29241180]
[127.50755310 92.43821716]
[129.62222290 105.40695953]
[144.55987549 106.77317810]
[159.49752808 108.13939667]
[174.43518066 109.50561523]
[189.37283325 110.87182617]
[204.31048584 112.23804474]
[216.29533386 101.93567657]
[232.04827881 103.20867157]
[242.22335815 115.30178070]
[240.78388977 131.04037476]
[228.58387756 141.08703613]
[212.86137390 139.48124695]
[202.94425964 127.17569733]
[188.00662231 125.80947876]
[173.06896973 124.44326782]
[158.13131714 123.07704926]
[143.19366455 121.71083069]
[128.25601196 120.34461212]
[117.07498932 130.34385681]
[116.77098846 145.34077454]
[116.46697998 160.33769226]
[116.16297913 175.33462524]
[125.42497253 191.21842957]
[115.83480072 205.88528442]
[115.83480072 220.88528442]
[115.83480072 235.88528442]
[115.83480072 250.88528442]
[115.83480072 265.88528442]
[115.83480072 280.88528442]
[115.83480072 295.88528442]
[115.83480072 310.88528442]
[115.83480072 325.88528442]
[115.83480072 340.88528442]
[130.50006104 344.35327148]
[143.96997070 351.11035156]
[155.51812744 360.79211426]
[164.52174377 372.87646484]
[170.49526978 386.71170044]
[173.11656189 401.55169678]
[172.24426270 416.59616089]
[167.92538452 431.03375244]
[160.39288330 444.08587646]
[150.05294800 455.04864502]
[137.46319580 463.33087158]
[123.30259705 468.48587036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 131]
[26 130]
[27 129]
[28 128]
[31 106]
[32 105]
[33 104]
[34 103]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
