%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGGCUCACAUCGGGGGGGGGGACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAxxxxxxxxxxCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCCCCCCCCCCCACGGGCUUACAUC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 425.53253174]
[70.75619507 420.72308350]
[57.85220718 412.95770264]
[46.91955185 402.59954834]
[38.46956635 390.13311768]
[32.89747238 376.14151001]
[30.46388245 361.27908325]
[31.28262329 346.24099731]
[35.31539917 331.73062134]
[42.37359238 318.42663574]
[52.12707901 306.95129395]
[64.11966705 297.84130859]
[77.79044342 291.52276611]
[92.50000000 288.29119873]
[92.50000000 273.29119873]
[92.50000000 258.29119873]
[92.50000000 243.29119873]
[92.50000000 228.29119873]
[92.50000000 213.29119873]
[92.50000000 198.29119873]
[92.50000000 183.29119873]
[92.50000000 168.29119873]
[92.50000000 153.29119873]
[85.13174438 151.72172546]
[78.05485535 149.13871765]
[71.40799713 145.59275818]
[65.32144165 141.15336609]
[59.91444778 135.90753174]
[55.29297638 129.95803833]
[51.54758835 123.42149353]
[48.75168610 116.42597198]
[46.96004868 109.10856628]
[46.20779037 101.61266327]
[46.50965500 94.08515930]
[47.85972214 86.67356873]
[50.23153687 79.52312469]
[53.57862473 72.77394104]
[57.83538818 66.55828857]
[62.91841888 60.99796295]
[68.72810364 56.20192719]
[61.79817963 42.89869308]
[54.86825180 29.59545517]
[47.93832397 16.29221725]
[41.00839996 2.98898053]
[34.07847214 -10.31425667]
[27.14854622 -23.61749268]
[12.93469048 -18.73651314]
[-1.84789872 -16.02861404]
[-16.86897278 -15.55429173]
[-31.79295731 -17.32414436]
[-46.28644180 -21.29863167]
[-60.02563858 -27.38896179]
[-72.70360565 -35.45907593]
[-84.03712463 -45.32868195]
[-93.77297974 -56.77729416]
[-101.69368744 -69.54914093]
[-107.62228394 -83.35889435]
[-111.42633057 -97.89804840]
[-113.02084351 -112.84178162]
[-112.37018585 -127.85625458]
[-109.48891449 -142.60603333]
[-104.44138336 -156.76159668]
[-97.34036255 -170.00671387]
[-88.34449005 -182.04548645]
[-77.65473938 -192.60894775]
[-65.50991821 -201.46112061]
[-52.18135452 -208.40425110]
[-37.96680450 -213.28320312]
[-23.18382835 -215.98899841]
[-8.16268635 -216.46118164]
[6.76104450 -214.68920898]
[21.25396347 -210.71264648]
[34.99229431 -204.62036133]
[47.66911316 -196.54844666]
[59.00122070 -186.67723083]
[68.73545074 -175.22723389]
[76.65433502 -162.45425415]
[82.58097076 -148.64364624]
[86.38294220 -134.10395813]
[87.97532654 -119.15999603]
[87.32253265 -104.14562225]
[84.43915558 -89.39625549]
[79.38961029 -75.24140167]
[72.28670502 -61.99729919]
[63.28911972 -49.95981216]
[52.59786224 -39.39786530]
[40.45178223 -30.54742050]
[47.38171005 -17.24418259]
[54.31163788 -3.94094610]
[61.24156189 9.36229134]
[68.17148590 22.66552734]
[75.10141754 35.96876526]
[82.03134155 49.27200317]
[96.76451874 46.28097153]
[111.75019073 47.48204422]
[125.81890106 52.78149796]
[137.87275696 61.76576996]
[149.81101990 52.68404007]
[161.74928284 43.60230637]
[167.58560181 28.27685165]
[183.81681824 25.93600464]
[193.74566650 38.98782730]
[187.15818787 54.00572205]
[170.83102417 55.54056931]
[158.89276123 64.62229919]
[146.95449829 73.70403290]
[150.54879761 81.53324127]
[152.84779358 89.83566284]
[153.79254150 98.39855194]
[168.70179749 100.04605103]
[183.61103821 101.69355774]
[198.52029419 103.34106445]
[191.60806274 90.02862549]
[197.51843262 76.24212646]
[211.92648315 72.06982422]
[224.28913879 80.56480408]
[225.56004333 95.51087189]
[214.80946350 105.97116089]
[229.47959900 109.09962463]
[244.14971924 112.22808075]
[258.33853149 104.74093628]
[272.98049927 111.29779816]
[276.84356689 126.86881256]
[266.96429443 139.50921631]
[250.92124939 139.52238464]
[241.02125549 126.89821625]
[226.35113525 123.76975250]
[211.68099976 120.64128876]
[196.87278748 118.25032043]
[181.96353149 116.60281372]
[167.05429077 114.95530701]
[152.14503479 113.30780029]
[135.90335083 140.08929443]
[107.50000000 153.29119873]
[107.50000000 168.29119873]
[107.50000000 183.29119873]
[107.50000000 198.29119873]
[107.50000000 213.29119873]
[107.50000000 228.29119873]
[107.50000000 243.29119873]
[107.50000000 258.29119873]
[107.50000000 273.29119873]
[107.50000000 288.29119873]
[122.20955658 291.52276611]
[135.88034058 297.84130859]
[147.87292480 306.95129395]
[157.62640381 318.42663574]
[164.68460083 331.73062134]
[168.71737671 346.24099731]
[169.53611755 361.27908325]
[167.10252380 376.14151001]
[161.53042603 390.13311768]
[153.08044434 402.59954834]
[142.14779663 412.95770264]
[129.24380493 420.72308350]
[114.97203827 425.53253174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[40 93]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[97 106]
[98 105]
[99 104]
[109 132]
[110 131]
[111 130]
[112 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
