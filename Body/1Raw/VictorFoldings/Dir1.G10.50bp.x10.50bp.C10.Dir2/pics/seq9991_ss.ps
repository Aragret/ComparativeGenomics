%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCUCCUUGGGGGGGGGGAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGxxxxxxxxxxGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUACCCCCCCCCCAAAUCACCUU\
) } def
/len { sequence length } bind def

/coor [
[79.54159546 386.23376465]
[66.32139587 378.96130371]
[55.43459320 368.51428223]
[47.62346268 355.60504150]
[43.42058182 341.11373901]
[43.11251068 326.02838135]
[46.72024918 311.37756348]
[53.99782562 298.16018677]
[64.44902802 287.27740479]
[77.36128998 279.47125244]
[91.85423279 275.27398682]
[91.54217529 260.27722168]
[91.23011780 245.28047180]
[90.91806030 230.28372192]
[90.60600281 215.28695679]
[90.29394531 200.29020691]
[89.98189545 185.29345703]
[89.66983795 170.29670715]
[89.35778046 155.29994202]
[56.15719604 88.86843872]
[41.51369476 85.61761475]
[26.87019157 82.36679077]
[9.47707748 88.32157135]
[-3.01731753 76.03784180]
[-17.72527885 73.09236145]
[-32.43323898 70.14688110]
[-47.14120102 67.20139313]
[-61.84916306 64.25591278]
[-61.94154358 77.91486359]
[-71.59853363 91.63098145]
[-90.19870758 99.85549927]
[-105.19789886 99.69946289]
[-120.19709015 99.54342651]
[-128.58619690 112.49049377]
[-142.65266418 118.82592773]
[-157.90795898 116.52812958]
[-169.48414612 106.33031464]
[-173.68730164 91.48656464]
[-169.17623901 76.73346710]
[-157.39041138 66.77868652]
[-142.09062195 64.79875183]
[-128.15899658 71.42545319]
[-120.04105377 84.54424286]
[-105.04186249 84.70027924]
[-90.04267120 84.85631561]
[-87.81426239 77.69501495]
[-83.35745239 63.37241745]
[-81.12904358 56.21112061]
[-93.56848145 47.82897568]
[-106.00791931 39.44683456]
[-122.52200317 35.60998154]
[-123.40664673 18.67912865]
[-107.38235474 13.14212894]
[-97.62577820 27.00739288]
[-85.18634033 35.38953781]
[-72.74690247 43.77167892]
[-58.90368271 49.54795074]
[-44.19572067 52.49343491]
[-29.48775864 55.43891525]
[-14.77979660 58.38439941]
[-0.07183494 61.32988358]
[10.20560837 54.87376404]
[22.51648712 57.25309372]
[30.12101746 67.72328949]
[44.76451874 70.97411346]
[59.40802002 74.22493744]
[71.39485168 65.20741272]
[72.33048248 50.23661804]
[73.26611328 35.26582718]
[74.20173645 20.29503632]
[60.68339920 13.28258801]
[51.19107819 1.37394726]
[47.36937714 -13.36764240]
[49.88042450 -28.38811302]
[58.28917313 -41.08507538]
[71.13874817 -49.25870514]
[86.20289612 -51.49287033]
[100.87165070 -47.40048981]
[112.60356140 -37.69059372]
[119.36601257 -24.04547691]
[119.98735809 -8.82924271]
[114.35995483 5.32180786]
[103.45877838 15.95591736]
[89.17253113 21.23066330]
[88.23690033 36.20145416]
[87.30126953 51.17224884]
[86.36564636 66.14303589]
[93.02322388 69.59653473]
[106.33837891 76.50354004]
[112.99595642 79.95703888]
[124.69557953 70.56987000]
[136.39520264 61.18271255]
[134.67651367 45.85138321]
[141.53987122 32.03480530]
[154.79519653 24.14179230]
[170.21278381 24.69098282]
[182.87292480 33.50712967]
[188.73580933 47.77703094]
[185.93063354 62.94721222]
[175.35249329 74.17692566]
[160.37684631 77.88281250]
[145.78236389 72.88233185]
[134.08274841 82.26950073]
[122.38311768 91.65666199]
[124.23619843 98.92412567]
[138.77119446 95.21819305]
[142.47689819 109.75324249]
[127.94235992 113.45906067]
[129.79544067 120.72653198]
[144.56149292 123.36539459]
[159.32754517 126.00425720]
[174.09361267 128.64312744]
[188.85966492 131.28198242]
[199.95285034 120.43207550]
[215.30972290 118.20803833]
[229.02522278 125.46506500]
[235.82548523 139.41268921]
[233.09565735 154.68775940]
[221.88540649 165.41668701]
[206.50532532 167.47399902]
[192.86935425 160.06861877]
[186.22079468 146.04804993]
[171.45474243 143.40917969]
[156.68869019 140.77030945]
[141.92263794 138.13145447]
[127.15657806 135.49258423]
[121.45606232 140.36640930]
[131.20352173 151.76759338]
[119.80218506 161.51486206]
[110.05504608 150.11405945]
[104.35453033 154.98788452]
[104.66658783 169.98464966]
[104.97864532 184.98139954]
[105.29070282 199.97814941]
[105.60276031 214.97489929]
[105.91481781 229.97166443]
[106.22686768 244.96841431]
[106.53892517 259.96517944]
[106.85098267 274.96191406]
[121.50597382 278.55270386]
[134.73178101 285.81494141]
[145.62664795 296.25354004]
[153.44775391 309.15673828]
[157.66181946 323.64480591]
[157.98153687 338.72991943]
[154.38511658 353.38351440]
[147.11775208 366.60653687]
[136.67495728 377.49737549]
[123.76872253 385.31347656]
[109.27902985 389.52194214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 66]
[21 65]
[22 64]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[31 45]
[32 44]
[33 43]
[48 56]
[49 55]
[50 54]
[67 87]
[68 86]
[69 85]
[70 84]
[90 104]
[91 103]
[92 102]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
