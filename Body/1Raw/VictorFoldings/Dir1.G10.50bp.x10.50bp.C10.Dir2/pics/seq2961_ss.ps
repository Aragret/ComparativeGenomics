%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGACCAAGGGGGGGGGGCGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUxxxxxxxxxxCUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUCCCCCCCCCCACUAGACCAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.99707031]
[71.19830322 356.98101807]
[59.48964310 347.45159912]
[50.78712082 335.11593628]
[45.73651886 320.88943481]
[44.71262741 305.82772827]
[47.79142761 291.04858398]
[54.74444962 277.64865112]
[65.05573273 266.62231445]
[77.96011353 258.78781128]
[92.50000000 254.72650146]
[92.50000000 239.72650146]
[92.50000000 224.72650146]
[92.50000000 209.72650146]
[92.50000000 194.72650146]
[92.50000000 179.72650146]
[92.50000000 164.72650146]
[92.50000000 149.72650146]
[92.50000000 134.72650146]
[92.50000000 119.72650146]
[88.38950348 117.62331390]
[84.83477020 114.67653656]
[71.05239105 120.59649658]
[68.61233521 135.82968140]
[58.30693817 147.31019592]
[43.42461395 151.37466431]
[28.71425438 146.72613525]
[18.86988449 134.84791565]
[17.03280640 119.53032684]
[23.78922462 105.66113281]
[36.98319244 97.66596222]
[52.40456009 98.09603119]
[65.13242340 106.81411743]
[78.91481018 100.89414978]
[81.26383972 90.28706360]
[88.57801056 82.25392914]
[98.91904449 78.92356110]
[103.52461243 64.64810181]
[108.13018036 50.37263870]
[112.73574066 36.09717560]
[109.60934448 20.58794594]
[120.88066101 10.85107803]
[110.21326447 0.37116835]
[105.23768616 -13.64940739]
[106.89538574 -28.35681343]
[114.78484344 -40.78850174]
[127.25608826 -48.46996307]
[125.69850159 -63.38887405]
[124.14092255 -78.30778503]
[109.19286346 -80.14121246]
[95.03445435 -85.25274658]
[82.37467194 -93.38298798]
[71.84671783 -104.12149811]
[63.97628021 -116.92745972]
[59.15534973 -131.15692139]
[57.62266541 -146.09523010]
[59.45189285 -160.99284363]
[64.54810333 -175.10301208]
[72.65267181 -187.71917725]
[83.35644531 -198.21031189]
[96.12033844 -206.05259705]
[110.30253601 -210.85542297]
[108.74495697 -225.77433777]
[107.18737793 -240.69325256]
[105.62979126 -255.61216736]
[90.97645569 -259.56744385]
[78.74375153 -268.55218506]
[70.58605194 -281.35125732]
[67.60662079 -296.23370361]
[70.20839691 -311.18679810]
[78.03951263 -324.18826294]
[90.04087830 -333.47973633]
[104.58940887 -337.80465698]
[119.71752167 -336.57809448]
[133.37928772 -329.96591187]
[143.72703552 -318.86236572]
[149.36134338 -304.76913452]
[149.52020264 -289.59222412]
[144.18212891 -275.38415527]
[134.06906128 -264.06643677]
[120.54870605 -257.16973877]
[122.10628510 -242.25083923]
[123.66386414 -227.33192444]
[125.22145081 -212.41300964]
[140.08985901 -210.64314270]
[154.19836426 -205.60643005]
[166.83830261 -197.55244446]
[177.37402344 -186.88240051]
[185.27485657 -174.12915039]
[190.14181519 -159.93063354]
[191.72775269 -144.99789429]
[189.94995117 -130.07949829]
[184.89437866 -115.92402649]
[176.81153870 -103.24249268]
[166.10411072 -92.67263794]
[153.30683899 -84.74684906]
[139.05982971 -79.86536407]
[140.61741638 -64.94645691]
[142.17500305 -50.02754211]
[148.59780884 -48.52095795]
[154.58422852 -45.74877548]
[159.88777161 -41.82515335]
[164.29000854 -36.91165543]
[167.60971069 -31.21060944]
[169.71014404 -24.95677376]
[184.70933533 -24.80073738]
[199.70852661 -24.64470100]
[206.42741394 -38.34941864]
[218.43247986 -47.77497482]
[233.34011841 -51.04991531]
[248.19038391 -47.52400208]
[260.03475952 -37.89730453]
[266.52154541 -24.08121109]
[266.36279297 -8.81892014]
[259.58996582 4.85923243]
[247.54788208 14.23743820]
[232.62747192 17.45364761]
[217.79119873 13.86928177]
[205.98481750 4.19601631]
[199.55249023 -9.64551353]
[184.55329895 -9.80154991]
[169.55410767 -9.95758629]
[157.16827393 8.99922752]
[135.15612793 15.45664215]
[138.61193848 29.94479561]
[127.01119995 40.70273972]
[122.40563965 54.97820282]
[117.80007172 69.25366211]
[113.19451141 83.52912140]
[120.84774017 103.27973175]
[107.50000000 119.72650146]
[107.50000000 134.72650146]
[107.50000000 149.72650146]
[107.50000000 164.72650146]
[107.50000000 179.72650146]
[107.50000000 194.72650146]
[107.50000000 209.72650146]
[107.50000000 224.72650146]
[107.50000000 239.72650146]
[107.50000000 254.72650146]
[122.03988647 258.78781128]
[134.94427490 266.62231445]
[145.25555420 277.64865112]
[152.20857239 291.04858398]
[155.28736877 305.82772827]
[154.26348877 320.88943481]
[149.21287537 335.11593628]
[140.51036072 347.45159912]
[128.80169678 356.98101807]
[114.95575714 362.99707031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 34]
[23 33]
[37 129]
[38 128]
[39 127]
[40 126]
[42 124]
[47 99]
[48 98]
[49 97]
[62 84]
[63 83]
[64 82]
[65 81]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
