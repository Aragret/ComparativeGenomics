%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGCCCUACGGGGGGGGGGAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCxxxxxxxxxxUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCCCCCCCCCCCUCAGCCCUAC\
) } def
/len { sequence length } bind def

/coor [
[84.58557129 422.40606689]
[71.36537170 415.13360596]
[60.47856903 404.68661499]
[52.66743851 391.77734375]
[48.46455765 377.28604126]
[48.15648270 362.20071411]
[51.76422501 347.54986572]
[59.04179764 334.33248901]
[69.49300385 323.44970703]
[82.40526581 315.64358521]
[96.89820099 311.44628906]
[96.58615112 296.44952393]
[96.27409363 281.45278931]
[95.96203613 266.45602417]
[95.64997864 251.45927429]
[95.33792114 236.46252441]
[95.02586365 221.46577454]
[94.71381378 206.46900940]
[94.40175629 191.47225952]
[94.08969879 176.47550964]
[93.77764130 161.47875977]
[80.15129089 158.51823425]
[67.53569794 152.57778931]
[56.57328415 143.95993042]
[47.82228851 133.10350037]
[41.72834015 120.56133270]
[38.60175705 106.97212219]
[38.60175705 93.02787781]
[41.72834015 79.43866730]
[47.82228851 66.89650726]
[56.57328415 56.04007339]
[67.53569794 47.42221069]
[80.15129089 41.48176575]
[93.77764130 38.52124786]
[94.08969879 23.52449226]
[94.40175629 8.52773952]
[85.14749908 -7.35742998]
[94.73860168 -22.02066994]
[94.73860168 -37.02066803]
[94.73860168 -52.02066803]
[79.78604126 -53.32843781]
[65.00436401 -55.93444443]
[50.50606155 -59.81885147]
[36.40148163 -64.95210266]
[22.79797363 -71.29512024]
[9.79906750 -78.79963684]
[-2.49630642 -87.40853882]
[-13.99456978 -97.05629730]
[-24.60821342 -107.66949463]
[-34.25645828 -119.16735077]
[-42.86587524 -131.46237183]
[-50.37093735 -144.46095276]
[-56.71453094 -158.06419373]
[-61.84837341 -172.16856384]
[-65.73339081 -186.66670227]
[-68.34001923 -201.44827271]
[-69.64841461 -216.40077209]
[-69.64862823 -231.41041565]
[-68.34065247 -246.36296082]
[-65.73443604 -261.14459229]
[-61.84982300 -275.64285278]
[-56.71637726 -289.74734497]
[-50.37316895 -303.35076904]
[-42.86846924 -316.34957886]
[-34.25939560 -328.64483643]
[-24.61147308 -340.14297485]
[-13.99812794 -350.75646973]
[-2.50013518 -360.40454102]
[9.79499722 -369.01379395]
[22.79369354 -376.51867676]
[36.39702606 -382.86206055]
[50.50145721 -387.99572754]
[64.99964905 -391.88052368]
[79.78125763 -394.48693848]
[94.73378754 -395.79513550]
[109.74342346 -395.79513550]
[124.69595337 -394.48693848]
[139.47755432 -391.88052368]
[153.97575378 -387.99572754]
[168.08018494 -382.86206055]
[181.68351746 -376.51867676]
[194.68222046 -369.01379395]
[206.97734070 -360.40454102]
[218.47534180 -350.75646973]
[229.08868408 -340.14297485]
[238.73660278 -328.64483643]
[247.34567261 -316.34957886]
[254.85037231 -303.35076904]
[261.19360352 -289.74734497]
[266.32702637 -275.64285278]
[270.21163940 -261.14459229]
[272.81787109 -246.36296082]
[274.12582397 -231.41041565]
[274.12564087 -216.40077209]
[272.81723022 -201.44827271]
[270.21060181 -186.66670227]
[266.32559204 -172.16856384]
[261.19174194 -158.06419373]
[254.84814453 -144.46095276]
[247.34307861 -131.46237183]
[238.73367310 -119.16735077]
[229.08541870 -107.66949463]
[218.47178650 -97.05629730]
[206.97351074 -87.40853882]
[194.67814636 -78.79963684]
[181.67922974 -71.29512024]
[168.07572937 -64.95210266]
[153.97114563 -59.81885147]
[139.47285461 -55.93444443]
[124.69116974 -53.32843781]
[109.73860168 -52.02066803]
[109.73860168 -37.02066803]
[109.73860168 -22.02066994]
[118.08716583 -13.21107960]
[118.17159271 -0.67266482]
[109.39850616 8.83979607]
[109.08644867 23.83654976]
[108.77439880 38.83330154]
[124.18686676 43.13744354]
[137.97729492 51.25495148]
[149.22085571 62.64144135]
[157.16352844 76.53330231]
[161.27264404 91.99890900]
[161.27264404 108.00109100]
[157.16352844 123.46669769]
[149.22085571 137.35856628]
[137.97729492 148.74505615]
[124.18686676 156.86256409]
[108.77439880 161.16670227]
[109.08644867 176.16345215]
[109.39850616 191.16020203]
[109.71056366 206.15695190]
[110.02262115 221.15371704]
[110.33467865 236.15046692]
[110.64673615 251.14721680]
[110.95878601 266.14398193]
[111.27084351 281.14071655]
[111.58290100 296.13748169]
[111.89495850 311.13424683]
[126.54994965 314.72500610]
[139.77575684 321.98727417]
[150.67062378 332.42584229]
[158.49172974 345.32907104]
[162.70579529 359.81713867]
[163.02551270 374.90222168]
[159.42909241 389.55584717]
[152.16172791 402.77883911]
[141.71891785 413.66967773]
[128.81269836 421.48577881]
[114.32300568 425.69427490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[34 118]
[35 117]
[36 116]
[38 113]
[39 112]
[40 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
