%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGCGCUAAGGGGGGGGGGGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUxxxxxxxxxxAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCCCCCCCCCCCACACCGCUAA\
) } def
/len { sequence length } bind def

/coor [
[81.65286255 486.59240723]
[67.63092041 481.03939819]
[55.43096161 472.17306519]
[45.81989288 460.55075073]
[39.40186691 446.90304565]
[36.58032990 432.08786011]
[37.53264618 417.03649902]
[42.19895172 402.69506836]
[50.28591537 389.96511841]
[61.28519058 379.64682007]
[74.50534821 372.38885498]
[89.11536407 368.64743042]
[89.11536407 353.64743042]
[89.11536407 338.64743042]
[89.11536407 323.64743042]
[89.11536407 308.64743042]
[89.11536407 293.64743042]
[89.11536407 278.64743042]
[89.11536407 263.64743042]
[89.11536407 248.64741516]
[89.11536407 233.64741516]
[89.11536407 218.64741516]
[85.95079803 211.91705322]
[89.27252197 203.34022522]
[89.58049774 188.34339905]
[89.88848114 173.34655762]
[79.73043823 165.36116028]
[75.98902130 152.79014587]
[80.25219727 140.18035889]
[91.16939545 132.22897339]
[91.78521729 117.24162292]
[82.04631042 106.51316071]
[82.64117432 92.03585815]
[93.22742462 82.14254761]
[93.84325409 67.15519714]
[86.67904663 53.04900360]
[94.93233490 40.65011597]
[95.54816437 25.66276360]
[96.16398621 10.67541122]
[87.23390198 -5.39581251]
[97.12361908 -19.86087799]
[97.43159485 -34.85771561]
[97.73957062 -49.85455322]
[98.04755402 -64.85139465]
[83.13431549 -66.56311035]
[68.44690704 -69.66381836]
[54.11439133 -74.12626648]
[40.26272964 -79.91124725]
[27.01365280 -86.96790314]
[14.48359680 -95.23423004]
[2.78268051 -104.63758087]
[-7.98626757 -115.09532166]
[-17.72860718 -126.51553345]
[-26.35871887 -138.79786682]
[-33.80076218 -151.83436584]
[-39.98933029 -165.51048279]
[-44.87004089 -179.70600891]
[-48.40000153 -194.29621887]
[-50.54818344 -209.15284729]
[-51.29571533 -224.14537048]
[-50.63602829 -239.14201355]
[-48.57491302 -254.01098633]
[-45.13048553 -268.62161255]
[-40.33301926 -282.84548950]
[-34.22467422 -296.55761719]
[-26.85912895 -309.63751221]
[-18.30111694 -321.97018433]
[-8.62584686 -333.44726562]
[2.08165240 -343.96792603]
[13.72728157 -353.43966675]
[26.20869637 -361.77923584]
[39.41620636 -368.91339111]
[53.23374176 -374.77941895]
[67.53987122 -379.32574463]
[82.20886230 -382.51245117]
[97.11180878 -384.31149292]
[112.11774445 -384.70709229]
[127.09477997 -383.69577026]
[141.91130066 -381.28640747]
[156.43710327 -377.50015259]
[170.54452515 -372.37030029]
[184.10957336 -365.94195557]
[197.01306152 -358.27157593]
[209.14157104 -349.42660522]
[220.38851929 -339.48474121]
[230.65505981 -328.53335571]
[239.85098267 -316.66873169]
[247.89546204 -303.99508667]
[254.71780396 -290.62384033]
[260.25805664 -276.67251587]
[264.46749878 -262.26364136]
[267.30917358 -247.52394104]
[268.75811768 -232.58288574]
[268.80157471 -217.57180786]
[267.43914795 -202.62260437]
[264.68283081 -187.86668396]
[260.55685425 -173.43371582]
[255.09745789 -159.45053101]
[248.35263062 -146.04002380]
[240.38163757 -133.32003784]
[231.25456238 -121.40237427]
[221.05157471 -110.39176178]
[209.86236572 -100.38496399]
[197.78526306 -91.46991730]
[184.92639160 -83.72498322]
[171.39877319 -77.21820831]
[157.32128906 -72.00679779]
[142.81765747 -68.13652802]
[128.01531982 -65.64142609]
[113.04438782 -64.54341125]
[112.73641205 -49.54657745]
[112.42843628 -34.54973602]
[112.12045288 -19.55290031]
[120.28551483 -10.57548237]
[120.11428833 1.96014774]
[111.15134430 11.29123688]
[110.53551483 26.27858925]
[109.91969299 41.26594162]
[117.12795258 54.30014038]
[108.83060455 67.77101898]
[108.21478271 82.75837708]
[117.95368958 93.48683929]
[117.35882568 107.96414185]
[106.77257538 117.85745239]
[106.15674591 132.84480286]
[118.23391724 145.45944214]
[117.49670410 162.57049561]
[104.88531494 173.65454102]
[104.57733917 188.65136719]
[104.26936340 203.64820862]
[104.11536407 218.64741516]
[104.11536407 233.64741516]
[104.11536407 248.64741516]
[104.11536407 263.64743042]
[104.11536407 278.64743042]
[104.11536407 293.64743042]
[104.11536407 308.64743042]
[104.11536407 323.64743042]
[104.11536407 338.64743042]
[104.11536407 353.64743042]
[104.11536407 368.64743042]
[118.72537231 372.38885498]
[131.94554138 379.64682007]
[142.94480896 389.96511841]
[151.03176880 402.69506836]
[155.69807434 417.03649902]
[156.65039062 432.08786011]
[153.82885742 446.90304565]
[147.41082764 460.55075073]
[137.79975891 472.17306519]
[125.59980774 481.03939819]
[111.57786560 486.59240723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 130]
[25 129]
[26 128]
[30 125]
[31 124]
[34 121]
[35 120]
[37 118]
[38 117]
[39 116]
[41 113]
[42 112]
[43 111]
[44 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
