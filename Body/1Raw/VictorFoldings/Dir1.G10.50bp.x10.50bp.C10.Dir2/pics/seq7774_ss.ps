%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCAUUAGGGGGGGGGGUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUxxxxxxxxxxCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACCCCCCCCCCCUCCACCAUUA\
) } def
/len { sequence length } bind def

/coor [
[83.97244263 392.94058228]
[70.75224304 385.66812134]
[59.86544418 375.22113037]
[52.05431366 362.31188965]
[47.85143280 347.82055664]
[47.54335785 332.73522949]
[51.15110016 318.08441162]
[58.42867279 304.86700439]
[68.87988281 293.98425293]
[81.79214478 286.17810059]
[96.28507996 281.98080444]
[95.97302246 266.98406982]
[95.66096497 251.98730469]
[95.34890747 236.99055481]
[95.03685760 221.99378967]
[94.72480011 206.99703979]
[94.41274261 192.00028992]
[94.10068512 177.00354004]
[93.78862762 162.00677490]
[93.47657013 147.01002502]
[93.16452026 132.01327515]
[92.85246277 117.01651764]
[80.32649994 108.76422882]
[66.42394257 114.39618683]
[52.52138519 120.02814484]
[46.59118652 134.67765808]
[32.00674438 140.76612854]
[17.42074394 134.68138123]
[11.48680592 120.03337860]
[17.72542953 105.51252747]
[32.43534851 99.73378754]
[46.88943100 106.12558746]
[60.79198456 100.49362946]
[74.69454193 94.86167145]
[79.15135956 80.53907776]
[70.89907074 68.01311493]
[58.40724182 64.63552856]
[51.79996490 53.97893524]
[54.17306519 42.07617569]
[46.18314743 29.38124466]
[32.28403473 21.82312202]
[32.05301285 6.93030930]
[24.06309509 -5.76462030]
[14.43456936 -17.26642418]
[3.34325385 -27.36507416]
[-7.74806166 -37.46372223]
[-18.83937645 -47.56237411]
[-36.89181137 -51.03936005]
[-41.62893295 -67.90825653]
[-52.92793655 -77.77397919]
[-64.22694397 -87.63970184]
[-79.64839172 -85.04876709]
[-93.10104370 -93.02122498]
[-98.23297119 -107.79272461]
[-92.62103271 -122.38862610]
[-78.91501617 -129.91717529]
[-63.58648300 -126.82363129]
[-53.87309265 -114.56867218]
[-54.36122131 -98.93870544]
[-43.06221390 -89.07298279]
[-31.76321030 -79.20726013]
[-19.63626480 -79.70175171]
[-10.13596344 -71.51864624]
[-8.74072742 -58.65368652]
[2.35058808 -48.55503845]
[13.44190311 -38.45639038]
[24.53321838 -28.35773849]
[21.12777710 -42.96605682]
[23.84724808 -57.71747971]
[32.23796463 -70.15113831]
[44.90016556 -78.19281769]
[59.72151184 -80.50099182]
[74.22947693 -76.69059753]
[86.00379181 -67.39730072]
[93.08025360 -54.17142868]
[94.27833557 -39.21934891]
[89.39817810 -25.03541374]
[79.25389862 -13.98581409]
[65.53779602 -7.91387510]
[50.53801727 -7.83253098]
[36.75802612 -13.75453663]
[44.74794006 -1.05960715]
[58.07556152 5.59048891]
[58.87807846 21.39132881]
[66.86799622 34.08625793]
[82.79576111 41.38736725]
[83.42503357 59.76082611]
[91.67732239 72.28678894]
[113.86333466 90.26432037]
[128.50683594 87.01349640]
[143.15034485 83.76267242]
[151.65777588 70.71424866]
[166.55468750 67.62605286]
[178.94192505 75.81701660]
[193.58543396 72.56618500]
[208.22892761 69.31536102]
[222.87243652 66.06453705]
[237.51593018 62.81370926]
[252.15943909 59.56288528]
[266.80294800 56.31206131]
[269.05923462 41.30294418]
[276.58847046 28.12436867]
[288.37240601 18.55862999]
[302.81735229 13.89941311]
[317.96972656 14.77684021]
[331.78030396 21.07224464]
[342.38134766 31.93422890]
[348.33911133 45.89379501]
[348.84786987 61.06302643]
[343.83883667 75.39041138]
[333.98941040 86.93828583]
[320.63168335 94.14489746]
[305.57214355 96.03560638]
[290.84747314 92.35472107]
[278.44909668 83.60003662]
[270.05377197 70.95555878]
[255.41026306 74.20639038]
[240.76675415 77.45721436]
[226.12326050 80.70803833]
[211.47975159 83.95886230]
[196.83625793 87.20968628]
[182.19274902 90.46051788]
[174.43505859 103.12360382]
[159.63078308 106.62900543]
[146.40116882 98.40617371]
[131.75765991 101.65699768]
[117.11416626 104.90782166]
[107.84921265 116.70446014]
[108.16127014 131.70121765]
[108.47332764 146.69796753]
[108.78538513 161.69471741]
[109.09744263 176.69148254]
[109.40949249 191.68823242]
[109.72154999 206.68498230]
[110.03360748 221.68173218]
[110.34566498 236.67849731]
[110.65772247 251.67524719]
[110.96977997 266.67199707]
[111.28182983 281.66876221]
[125.93682861 285.25952148]
[139.16262817 292.52178955]
[150.05749512 302.96038818]
[157.87860107 315.86358643]
[162.09266663 330.35165405]
[162.41238403 345.43673706]
[158.81596375 360.09036255]
[151.54859924 373.31335449]
[141.10580444 384.20419312]
[128.19956970 392.02029419]
[113.70987701 396.22879028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 34]
[24 33]
[25 32]
[35 88]
[36 87]
[39 85]
[40 84]
[42 82]
[43 81]
[44 67]
[45 66]
[46 65]
[47 64]
[49 61]
[50 60]
[51 59]
[89 127]
[90 126]
[91 125]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
