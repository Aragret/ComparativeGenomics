%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCUGUCGGGGGGGGGGGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACxxxxxxxxxxCCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCCCCCCCCCCCAUCGCUGUAG\
) } def
/len { sequence length } bind def

/coor [
[73.45046997 148.06309509]
[61.46925735 139.11930847]
[52.34487915 127.27504730]
[46.75386429 113.40848541]
[45.11075211 98.54776764]
[47.53737259 83.79472351]
[53.85380173 70.24320221]
[63.59171295 58.89799118]
[76.02909851 50.60025787]
[90.24378967 45.96524429]
[89.61981201 30.97822762]
[88.99583435 15.99121189]
[88.37185669 1.00419569]
[87.74787903 -13.98282051]
[87.12390137 -28.96983719]
[86.49992371 -43.95685196]
[85.87594604 -58.94387054]
[85.25196838 -73.93088531]
[84.62799072 -88.91790009]
[84.00402069 -103.90491486]
[83.38004303 -118.89192963]
[68.37783051 -119.14038086]
[53.41544342 -120.26070404]
[38.54351807 -122.24912262]
[23.81236649 -125.09890747]
[9.27183914 -128.80041504]
[-5.02886391 -133.34111023]
[-19.04135323 -138.70564270]
[-32.71821594 -144.87585449]
[-46.01316833 -151.83087158]
[-58.88123322 -159.54714966]
[-71.27886200 -167.99859619]
[-83.16410828 -177.15660095]
[-94.49674988 -186.99017334]
[-105.23844910 -197.46604919]
[-115.35285950 -208.54878235]
[-124.80574799 -220.20086670]
[-133.56513977 -232.38285828]
[-141.60137939 -245.05357361]
[-148.88728333 -258.17010498]
[-155.39820862 -271.68811035]
[-161.11210632 -285.56179810]
[-166.00965881 -299.74423218]
[-170.07429504 -314.18746948]
[-173.29223633 -328.84259033]
[-175.65261841 -343.66006470]
[-177.14744568 -358.58966064]
[-177.77166748 -373.58093262]
[-177.52316284 -388.58316040]
[-176.40277100 -403.54553223]
[-174.41429138 -418.41744995]
[-171.56443787 -433.14859009]
[-167.86288452 -447.68911743]
[-163.32211304 -461.98977661]
[-157.95753479 -476.00225830]
[-151.78726196 -489.67910767]
[-144.83218384 -502.97402954]
[-137.11585999 -515.84204102]
[-128.66436768 -528.23962402]
[-119.50630951 -540.12487793]
[-109.67268372 -551.45745850]
[-99.19676971 -562.19909668]
[-88.11399841 -572.31347656]
[-76.46187592 -581.76629639]
[-64.27983856 -590.52563477]
[-51.60909653 -598.56182861]
[-38.49253082 -605.84771729]
[-24.97451591 -612.35858154]
[-11.10079956 -618.07238770]
[3.08167648 -622.96990967]
[17.52492332 -627.03448486]
[32.18006897 -630.25238037]
[46.99752045 -632.61267090]
[61.92714691 -634.10742188]
[76.91842651 -634.73162842]
[91.92063904 -634.48303223]
[106.88301086 -633.36260986]
[121.75492096 -631.37402344]
[136.48605347 -628.52410889]
[151.02655029 -624.82250977]
[165.32720947 -620.28167725]
[179.33966064 -614.91705322]
[193.01646423 -608.74670410]
[206.31137085 -601.79156494]
[219.17936707 -594.07519531]
[231.57691956 -585.62365723]
[243.46209717 -576.46557617]
[254.79466248 -566.63189697]
[265.53625488 -556.15594482]
[275.65057373 -545.07312012]
[285.10336304 -533.42095947]
[293.86267090 -521.23889160]
[301.89880371 -508.56811523]
[309.18460083 -495.45150757]
[315.69540405 -481.93347168]
[321.40921021 -468.05972290]
[326.30664062 -453.87722778]
[330.37115479 -439.43395996]
[333.58895874 -424.77880859]
[335.94921875 -409.96133423]
[337.44393921 -395.03170776]
[338.06802368 -380.04043579]
[337.81939697 -365.03820801]
[336.69888306 -350.07583618]
[334.71026611 -335.20394897]
[331.86032104 -320.47283936]
[328.15863037 -305.93234253]
[323.61773682 -291.63171387]
[318.25305176 -277.61926270]
[312.08267212 -263.94250488]
[305.12747192 -250.64762878]
[297.41104126 -237.77966309]
[288.95944214 -225.38212585]
[279.80130005 -213.49699402]
[269.96755981 -202.16447449]
[259.49157715 -191.42291260]
[248.40870667 -181.30863953]
[236.75651550 -171.85589600]
[224.57440186 -163.09666443]
[211.90359497 -155.06057739]
[198.78697205 -147.77482605]
[185.26890564 -141.26406860]
[171.39514160 -135.55033875]
[157.21261597 -130.65296936]
[142.76933289 -126.58851624]
[128.11416626 -123.37075043]
[113.29669189 -121.01055145]
[98.36705780 -119.51590729]
[98.99103546 -104.52889252]
[99.61501312 -89.54187775]
[100.23899078 -74.55486298]
[100.86296844 -59.56784439]
[101.48694611 -44.58082962]
[102.11091614 -29.59381485]
[102.73489380 -14.60679817]
[103.35887146 0.38021830]
[103.98284912 15.36723423]
[104.60682678 30.35424995]
[105.23080444 45.34126663]
[119.78159332 48.77864456]
[132.86567688 56.01380157]
[143.51295471 66.51028442]
[150.93400574 79.48985291]
[154.57856750 93.99012756]
[154.17643738 108.93599701]
[149.75743103 123.21931458]
[141.64918518 135.78105164]
[130.45288086 145.68981934]
[116.99867249 152.21095276]
[102.28411102 154.86093140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
