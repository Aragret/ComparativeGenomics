%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAGCCCAUGGGGGGGGGGGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAxxxxxxxxxxAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACCCCCCCCCCCUAAACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.18992615 401.77163696]
[68.63006592 397.86343384]
[55.42892075 390.58380127]
[44.35398865 380.35592651]
[36.04914856 367.77447510]
[30.99723816 353.57089233]
[29.49196243 338.57095337]
[31.62083817 323.64678955]
[37.26009750 309.66598511]
[46.08187866 297.44143677]
[57.57329941 287.68383789]
[71.06625366 280.96051025]
[85.77629089 277.66226196]
[86.08426666 262.66543579]
[86.39225006 247.66859436]
[86.70022583 232.67175293]
[87.00820160 217.67492676]
[87.31617737 202.67808533]
[87.62416077 187.68124390]
[87.93213654 172.68440247]
[88.24011230 157.68756104]
[88.54808807 142.69073486]
[88.85607147 127.69389343]
[76.79364014 118.77774048]
[62.54694366 123.47154236]
[48.30025101 128.16534424]
[43.69427872 142.98306274]
[31.23822975 152.23651123]
[15.72170830 152.36756897]
[3.11113358 143.32582092]
[-1.74447024 128.58802795]
[3.02197528 113.82115173]
[15.57767487 104.70336151]
[31.09470558 104.74063873]
[43.60645294 113.91864777]
[57.85314560 109.22484589]
[72.09983826 104.53105164]
[76.42503357 90.05589294]
[86.84962463 81.24356842]
[98.96252441 79.79878998]
[103.80233765 65.60103607]
[108.64215851 51.40328217]
[113.48197174 37.20553207]
[105.25680542 30.08109474]
[99.63631439 20.82194901]
[97.13493347 10.33479309]
[97.96340179 -0.36435238]
[102.01136017 -10.24857235]
[91.03056335 -20.46727943]
[80.04975891 -30.68598747]
[69.06895447 -40.90469360]
[58.08815384 -51.12340164]
[47.10734940 -61.34210968]
[31.32425308 -60.52392960]
[19.64148331 -71.16763306]
[18.99022102 -86.95850372]
[29.75684738 -98.52808380]
[45.55371475 -99.01235962]
[57.00882339 -88.12401581]
[57.32605743 -72.32291412]
[68.30686188 -62.10420227]
[79.28765869 -51.88549805]
[90.26846313 -41.66679001]
[101.24926758 -31.44808197]
[112.23007202 -21.22937393]
[129.90403748 -27.21028709]
[148.09790039 -23.07220459]
[157.97360229 -34.36248398]
[167.84930420 -45.65276337]
[157.84449768 -56.85470200]
[149.29214478 -69.20123291]
[142.32189941 -82.50518799]
[137.03942871 -96.56488800]
[133.52481079 -111.16718292]
[131.83132935 -126.09071350]
[131.98466492 -141.10923767]
[133.98248291 -155.99508667]
[137.79449463 -170.52258301]
[143.36291504 -184.47149658]
[150.60333252 -197.63037109]
[159.40599060 -209.79971313]
[169.63742065 -220.79505920]
[181.14253235 -230.44969177]
[193.74690247 -238.61726379]
[207.25947571 -245.17396545]
[221.47537231 -250.02038574]
[236.17909241 -253.08306885]
[251.14775085 -254.31556702]
[266.15441895 -253.69920349]
[280.97155762 -251.24331665]
[295.37460327 -246.98515320]
[309.14520264 -240.98925781]
[322.07455444 -233.34652710]
[333.96667480 -224.17282104]
[344.64129639 -213.60720825]
[353.93655396 -201.80986023]
[361.71160889 -188.95962524]
[367.84851074 -175.25131226]
[372.25427246 -160.89273071]
[374.86209106 -146.10154724]
[375.63244629 -131.10200500]
[374.55364990 -116.12149811]
[371.64202881 -101.38710785]
[366.94177246 -87.12221527]
[360.52410889 -73.54306793]
[352.48632812 -60.85553360]
[342.95028687 -49.25193787]
[332.06051636 -38.90819168]
[319.98217773 -29.98110962]
[306.89828491 -22.60601807]
[293.00726318 -16.89472580]
[278.51965332 -12.93381023]
[263.65509033 -10.78332043]
[248.63894653 -10.47585678]
[233.69882202 -12.01608086]
[219.06121826 -15.38064194]
[204.94804382 -20.51853561]
[191.57324219 -27.35187149]
[179.13958740 -35.77705765]
[169.26388550 -24.48677826]
[159.38816833 -13.19649792]
[165.69763184 1.30495310]
[164.85656738 17.17156029]
[156.97602844 31.05392838]
[143.66007996 39.99182892]
[127.67972565 42.04534531]
[122.83990479 56.24309921]
[118.00009155 70.44084930]
[113.16027832 84.63860321]
[123.26309204 106.83625031]
[103.85290527 128.00186157]
[103.54492950 142.99870300]
[103.23695374 157.99554443]
[102.92897034 172.99238586]
[102.62099457 187.98922729]
[102.31301880 202.98605347]
[102.00504303 217.98289490]
[101.69705963 232.97973633]
[101.38908386 247.97657776]
[101.08110809 262.97341919]
[100.77313232 277.97024536]
[115.33535767 281.86962891]
[128.54090881 289.14126587]
[139.62203979 299.36239624]
[147.93450928 311.93884277]
[152.99502563 326.13934326]
[154.50939941 341.13833618]
[152.38957214 356.06381226]
[146.75878906 370.04800415]
[137.94441223 382.27792358]
[126.45891571 392.04248047]
[112.97003937 398.77401733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 37]
[25 36]
[26 35]
[40 129]
[41 128]
[42 127]
[43 126]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[67 121]
[68 120]
[69 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
