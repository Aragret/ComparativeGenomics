%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAACCAGUGGGGGGGGGGGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGxxxxxxxxxxCCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGCCCCCCCCCCUUCAACCAGU\
) } def
/len { sequence length } bind def

/coor [
[137.63951111 480.73937988]
[123.79357910 474.72335815]
[112.08491516 465.19393921]
[103.38239288 452.85827637]
[98.33178711 438.63174438]
[97.30789948 423.57006836]
[100.38669586 408.79089355]
[107.33971405 395.39099121]
[117.65100098 384.36465454]
[130.55538940 376.53015137]
[145.09527588 372.46881104]
[145.09527588 357.46881104]
[145.09527588 342.46881104]
[145.09527588 327.46881104]
[145.09527588 312.46881104]
[145.09527588 297.46881104]
[145.09527588 282.46881104]
[145.09527588 267.46881104]
[145.09527588 252.46882629]
[145.09527588 237.46882629]
[137.35797119 224.74154663]
[145.09527588 210.94137573]
[141.54051208 196.36868286]
[134.63351440 183.05352783]
[127.72650909 169.73837280]
[120.81951141 156.42321777]
[113.91251373 143.10806274]
[107.00551605 129.79289246]
[86.13701630 130.81163025]
[67.45652008 117.53698730]
[60.36036682 93.62438202]
[45.45846558 91.91168976]
[30.55656433 90.19900513]
[15.65466118 88.48631287]
[0.75275904 86.77362061]
[-14.14914322 85.06093597]
[-29.05104637 83.34824371]
[-41.27188492 93.36955261]
[-56.99101639 91.73113251]
[-66.88256073 79.40502167]
[-65.07804108 63.70409393]
[-52.64804077 53.94342041]
[-36.96706390 55.91384506]
[-27.33835602 68.44634247]
[-12.43645382 70.15903473]
[2.46544886 71.87171936]
[17.36735153 73.58441162]
[32.26925278 75.29710388]
[47.17115402 77.00978851]
[62.07305908 78.72248077]
[67.77356720 73.84865570]
[53.04409409 71.01271057]
[46.07749176 57.72864151]
[52.11962891 43.99938202]
[66.62076569 40.16309357]
[78.66150665 49.10850906]
[79.17459106 64.10100555]
[84.87509918 59.22717667]
[85.49907684 44.24016190]
[72.38030243 38.61001968]
[62.00036240 28.85275078]
[55.59741211 16.16031837]
[53.92557144 2.07306719]
[57.16619873 -11.70720482]
[64.90843201 -23.52282906]
[76.20118713 -31.95967102]
[89.66993713 -36.01636887]
[90.60556030 -50.98715973]
[91.54119110 -65.95795441]
[77.74564362 -72.28624725]
[67.17053223 -83.17346191]
[61.24605179 -97.14718628]
[60.77343369 -112.31758881]
[65.81660461 -126.63299561]
[75.69351196 -138.15736389]
[89.06838989 -145.33212280]
[104.13238525 -147.18695068]
[118.84822845 -143.47097778]
[131.22572327 -134.68678284]
[139.59089661 -122.02233124]
[142.81245422 -107.19040680]
[140.45468140 -92.19689178]
[132.83647156 -79.06954956]
[120.98809814 -69.58373260]
[106.51198578 -65.02232361]
[105.57635498 -50.05153275]
[104.64072418 -35.08074188]
[118.95629883 -28.35398483]
[129.63008118 -16.62910271]
[135.01272583 -1.67414558]
[134.25570679 14.24044418]
[127.44507599 28.68652344]
[115.59269714 39.44871521]
[100.48609161 44.86413574]
[99.86211395 59.85115433]
[117.67053223 66.08721161]
[129.84854126 79.28641510]
[134.16339111 95.78101349]
[130.41944885 111.48171234]
[120.32067108 122.88590240]
[127.22766876 136.20104980]
[134.13467407 149.51622009]
[141.04167175 162.83137512]
[147.94866943 176.14653015]
[154.85566711 189.46168518]
[155.85002136 174.49467468]
[160.46800232 160.22322083]
[168.43019104 147.51087952]
[179.25479126 137.12684631]
[192.28680420 129.69944763]
[206.73771667 125.67810822]
[221.73310852 125.30614471]
[236.36561584 128.60607910]
[249.74987793 135.37821960]
[261.07598877 145.21279907]
[269.65866089 157.51473999]
[274.97851562 171.53968811]
[276.71371460 186.43898010]
[274.75924683 201.31111145]
[269.23336792 215.25616455]
[260.47042847 227.43034363]
[249.00065613 237.09703064]
[235.51811218 243.67127991]
[220.83857727 246.75531006]
[205.85029602 246.16250610]
[191.46018982 241.92874146]
[178.53898621 234.31018066]
[167.86851501 223.76782227]
[160.09527588 210.94137573]
[167.83256531 224.74154663]
[160.09527588 237.46882629]
[160.09527588 252.46882629]
[160.09527588 267.46881104]
[160.09527588 282.46881104]
[160.09527588 297.46881104]
[160.09527588 312.46881104]
[160.09527588 327.46881104]
[160.09527588 342.46881104]
[160.09527588 357.46881104]
[160.09527588 372.46881104]
[174.63516235 376.53015137]
[187.53953552 384.36465454]
[197.85081482 395.39099121]
[204.80384827 408.79089355]
[207.88264465 423.57006836]
[206.85874939 438.63174438]
[201.80815125 452.85827637]
[193.10562134 465.19393921]
[181.39695740 474.72335815]
[167.55102539 480.73937988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[58 95]
[59 94]
[67 87]
[68 86]
[69 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
