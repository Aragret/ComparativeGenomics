%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUGAUUAGGGGGGGGGGCUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCxxxxxxxxxxCUACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCCCCCCCCCCCUCUUAUUA\
) } def
/len { sequence length } bind def

/coor [
[60.88057327 460.09127808]
[47.66037750 452.81881714]
[36.77357483 442.37179565]
[28.96244240 429.46255493]
[24.75956154 414.97125244]
[24.45149040 399.88589478]
[28.05923080 385.23507690]
[35.33680344 372.01770020]
[45.78801346 361.13491821]
[58.70027542 353.32876587]
[73.19320679 349.13150024]
[72.88115692 334.13473511]
[72.56909943 319.13796997]
[72.25704193 304.14123535]
[71.94498444 289.14447021]
[71.63292694 274.14773560]
[71.32086945 259.15097046]
[71.00881958 244.15422058]
[70.69676208 229.15745544]
[70.38470459 214.16070557]
[61.62003708 226.33364868]
[48.26019287 233.15380859]
[33.26025009 233.11264038]
[19.93805504 226.21922302]
[11.24035549 213.99833679]
[9.09100246 199.15312195]
[13.96541309 184.96720886]
[24.78541374 174.57838440]
[39.15771866 170.28457642]
[53.90330505 173.03550720]
[65.76058960 182.22271729]
[72.10723877 195.81602478]
[75.20555878 181.13949585]
[78.30387878 166.46296692]
[81.40219879 151.78645325]
[84.50052643 137.10992432]
[70.25741577 127.06951904]
[61.59871292 111.94660187]
[60.15015411 94.58061218]
[66.18371582 78.23216248]
[78.56655121 65.97078705]
[73.07951355 52.01039886]
[67.59248352 38.05001068]
[61.96052933 24.14745522]
[56.18425751 10.30423641]
[50.40798187 -3.53898096]
[35.81667328 0.06575177]
[20.84609604 1.40077364]
[5.84718657 0.43478990]
[-8.82846165 -2.80955553]
[-22.83683014 -8.25621033]
[-35.84954071 -15.77749729]
[-47.56156158 -25.19710732]
[-57.69834137 -36.29423141]
[-66.02226257 -48.80873489]
[-72.33819580 -62.44725800]
[-76.49809265 -76.89010620]
[-78.40443420 -91.79869843]
[-78.01253510 -106.82357788]
[-75.33158112 -121.61251831]
[-70.42442322 -135.81886292]
[-63.40608215 -149.10958862]
[-54.44108582 -161.17314148]
[-43.73958588 -171.72673035]
[-31.55243683 -180.52297974]
[-18.16532516 -187.35566711]
[-3.89206505 -192.06463623]
[10.93275928 -194.53952026]
[25.96163368 -194.72227478]
[40.84225845 -192.60864258]
[55.22580719 -188.24815369]
[68.77511597 -181.74301147]
[81.17256165 -173.24574280]
[92.12754059 -162.95550537]
[101.38323975 -151.11352539]
[108.72270203 -137.99740601]
[113.97387695 -123.91458893]
[117.01366425 -109.19521332]
[117.77082062 -94.18431091]
[116.22758484 -79.23376465]
[112.42012787 -64.69403076]
[106.43772125 -50.90595245]
[98.42058563 -38.19272995]
[88.55665588 -26.85238647]
[77.07716370 -17.15075493]
[64.25119781 -9.31525326]
[70.02747345 4.52796412]
[75.80374908 18.37118149]
[81.31773376 23.36533928]
[81.55287170 32.56298065]
[87.03990936 46.52336884]
[92.52693939 60.48375702]
[99.17400360 59.79182053]
[105.84387970 60.21018982]
[112.35237885 61.72731018]
[118.51978302 64.30129242]
[124.17578125 67.86105347]
[129.16418457 72.30830383]
[133.34725952 77.52022552]
[136.60948181 83.35291290]
[138.86077881 89.64527893]
[153.82102966 88.55397034]
[168.78126526 87.46266174]
[183.74151611 86.37134552]
[198.70176697 85.28003693]
[204.25819397 71.06424713]
[215.43821716 60.67338943]
[230.02203369 56.17058563]
[245.11399841 58.44986725]
[257.71762085 67.05868530]
[265.33041382 80.28775024]
[266.44085693 95.51041412]
[260.82849121 109.70421600]
[249.60763550 120.05096436]
[235.00621033 124.49630737]
[219.92333984 122.15760803]
[207.35371399 113.49922943]
[199.79307556 100.24028778]
[184.83282471 101.33159637]
[169.87258911 102.42290497]
[154.91233826 103.51422119]
[139.95208740 104.60552979]
[133.03399658 122.93762207]
[118.27447510 135.82490540]
[99.17704773 140.20823669]
[96.07872772 154.88476562]
[92.98040771 169.56129456]
[89.88208008 184.23782349]
[86.78376007 198.91433716]
[85.38145447 213.84864807]
[85.69351196 228.84541321]
[86.00556946 243.84216309]
[86.31762695 258.83892822]
[86.62968445 273.83566284]
[86.94174194 288.83242798]
[87.25379181 303.82916260]
[87.56584930 318.82592773]
[87.87790680 333.82269287]
[88.18996429 348.81942749]
[102.84495544 352.41021729]
[116.07076263 359.67245483]
[126.96562958 370.11105347]
[134.78672791 383.01428223]
[139.00079346 397.50231934]
[139.32052612 412.58743286]
[135.72409058 427.24102783]
[128.45672607 440.46405029]
[118.01393127 451.35488892]
[105.10770416 459.17098999]
[90.61801147 463.37945557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 125]
[41 92]
[42 91]
[43 90]
[44 88]
[45 87]
[46 86]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
