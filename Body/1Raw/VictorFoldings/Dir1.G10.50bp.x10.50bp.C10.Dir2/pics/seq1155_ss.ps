%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUACUAACGGGGGGGGGGCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCxxxxxxxxxxGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCCCCCCCCCCCUAUACCAAC\
) } def
/len { sequence length } bind def

/coor [
[83.44569397 451.99688721]
[69.59975433 445.98086548]
[57.89109039 436.45144653]
[49.18856430 424.11578369]
[44.13796234 409.88925171]
[43.11407089 394.82757568]
[46.19287109 380.04840088]
[53.14589310 366.64846802]
[63.45717621 355.62213135]
[76.36155701 347.78762817]
[90.90144348 343.72631836]
[90.90144348 328.72631836]
[90.90144348 313.72631836]
[90.90144348 298.72631836]
[90.90144348 283.72631836]
[90.90144348 268.72631836]
[90.90144348 253.72631836]
[90.90144348 238.72631836]
[90.90144348 223.72631836]
[90.90144348 208.72631836]
[77.93412018 201.39732361]
[70.32572937 188.47570801]
[70.20589447 173.38093567]
[77.70693207 160.16613770]
[90.90144348 152.42971802]
[90.90144348 137.42971802]
[90.90144348 122.42971802]
[90.90144348 107.42971802]
[86.74356079 93.01750183]
[78.75363922 80.32257080]
[70.76372528 67.62763977]
[62.77380753 54.93270874]
[51.96689224 53.11724472]
[44.12922287 45.77731323]
[41.71125793 35.54146576]
[45.28336716 25.88372803]
[37.82845688 12.86741924]
[27.27716446 2.20579290]
[14.33910847 -5.38411570]
[1.40105283 -12.97402382]
[-11.53700352 -20.56393242]
[-24.47505951 -28.15384102]
[-37.64364243 -35.33634949]
[-51.02992630 -42.10446548]
[-60.16530228 -43.19843674]
[-64.62210083 -49.15516281]
[-77.86468506 -56.20029831]
[-94.22629547 -55.09131241]
[-103.14161682 -68.85536194]
[-95.43933868 -83.33316803]
[-79.04290009 -83.63121033]
[-70.81954956 -69.44287872]
[-57.57696915 -62.39774704]
[-44.26181030 -55.49074936]
[-30.87552643 -48.72263336]
[-27.37586594 -49.50994492]
[-23.31706619 -48.60009766]
[-19.52025223 -45.74762726]
[-16.88515091 -41.09189606]
[-3.94709492 -33.50198746]
[8.99096107 -25.91207886]
[21.92901802 -18.32217216]
[34.86707306 -10.73226357]
[27.77238655 -23.94836807]
[23.85323143 -38.42732620]
[23.31303406 -53.41759491]
[26.17983437 -68.14109802]
[32.30482483 -81.83359528]
[41.37009048 -93.78436279]
[52.90508652 -103.37310028]
[66.31108093 -110.10209656]
[80.89222717 -113.62206268]
[95.89167786 -113.75030518]
[110.53087616 -110.48016357]
[124.04996490 -103.98137665]
[135.74722290 -94.59127045]
[145.01550293 -82.79724121]
[151.37371826 -69.21147156]
[154.49185181 -54.53914261]
[154.20803833 -39.54182816]
[150.53701782 -24.99797440]
[143.66934204 -11.66249561]
[133.96147156 -0.22757606]
[121.91732025 8.71324539]
[108.16203308 14.69588757]
[93.40958405 17.40981865]
[78.42572784 16.71416855]
[63.98819733 12.64504623]
[50.84476471 5.41250896]
[58.29967499 18.42881775]
[75.67447662 26.82797432]
[75.46874237 46.94279480]
[83.45865631 59.63772202]
[91.44857025 72.33265686]
[99.43848419 85.02758026]
[113.28170776 90.80385590]
[127.92520905 87.55303192]
[142.56871033 84.30220032]
[157.21220398 81.05137634]
[171.85571289 77.80055237]
[186.49920654 74.54972839]
[201.14271545 71.29890442]
[215.78620911 68.04807281]
[230.42971802 64.79724884]
[237.48535156 50.84188843]
[251.88087463 44.73428726]
[266.81918335 49.35827255]
[275.24682617 62.53053284]
[273.18457031 78.03153992]
[261.60614014 88.54218292]
[245.97848511 89.09966278]
[233.68054199 79.44075012]
[219.03703308 82.69157410]
[204.39353943 85.94240570]
[189.75003052 89.19322968]
[175.10653687 92.44405365]
[160.46302795 95.69487762]
[145.81953430 98.94570160]
[131.17602539 102.19653320]
[116.53253174 105.44735718]
[112.87337494 107.23535156]
[109.23047638 107.86652374]
[105.90144348 107.42971802]
[105.90144348 122.42971802]
[105.90144348 137.42971802]
[105.90144348 152.42971802]
[119.09595490 160.16613770]
[126.59700012 173.38093567]
[126.47716522 188.47570801]
[118.86876678 201.39732361]
[105.90144348 208.72631836]
[105.90144348 223.72631836]
[105.90144348 238.72631836]
[105.90144348 253.72631836]
[105.90144348 268.72631836]
[105.90144348 283.72631836]
[105.90144348 298.72631836]
[105.90144348 313.72631836]
[105.90144348 328.72631836]
[105.90144348 343.72631836]
[120.44132996 347.78762817]
[133.34571838 355.62213135]
[143.65699768 366.64846802]
[150.61001587 380.04840088]
[153.68881226 394.82757568]
[152.66493225 409.88925171]
[147.61431885 424.11578369]
[138.91180420 436.45144653]
[127.20314026 445.98086548]
[113.35720062 451.99688721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 126]
[26 125]
[27 124]
[28 123]
[29 95]
[30 94]
[31 93]
[32 92]
[36 90]
[37 89]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 55]
[44 54]
[46 53]
[47 52]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
