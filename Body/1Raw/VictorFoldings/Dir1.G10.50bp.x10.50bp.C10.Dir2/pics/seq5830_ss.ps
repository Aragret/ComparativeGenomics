%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCCCCACAGGGGGGGGGGCUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUxxxxxxxxxxAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCCCCCCCCCCCUCUUCCCCACA\
) } def
/len { sequence length } bind def

/coor [
[83.24666595 364.21685791]
[69.75778961 357.48532104]
[58.27228546 347.72076416]
[49.45791626 335.49087524]
[43.82713699 321.50668335]
[41.70730591 306.58120728]
[43.22167587 291.58218384]
[48.28219986 277.38168335]
[56.59466553 264.80526733]
[67.67579651 254.58410645]
[80.88134766 247.31246948]
[95.44357300 243.41310120]
[95.13559723 228.41625977]
[94.82762146 213.41941833]
[94.51963806 198.42259216]
[94.21166229 183.42575073]
[93.90368652 168.42890930]
[93.59571075 153.43206787]
[93.28773499 138.43524170]
[92.97975159 123.43839264]
[92.67177582 108.44155884]
[92.20984650 93.44866943]
[91.59402466 78.46131897]
[76.59207916 78.18824768]
[61.63265610 77.02693176]
[46.76830292 74.98145294]
[32.05123520 72.05898285]
[17.53314018 68.26979828]
[3.26501989 63.62720108]
[-10.70301151 58.14750671]
[-24.32188988 51.84995651]
[-37.54377747 44.75667572]
[-50.32223129 36.89257812]
[-62.61236954 28.28528404]
[-74.37101746 18.96503067]
[-85.55687714 8.96455288]
[-96.13065338 -1.68101931]
[-106.05520630 -12.93429375]
[-115.29567719 -24.75574303]
[-123.81961060 -37.10384369]
[-131.59706116 -49.93522263]
[-138.60070801 -63.20480728]
[-144.80595398 -76.86598969]
[-150.19099426 -90.87078094]
[-154.73693848 -105.16999054]
[-158.42779541 -119.71339417]
[-161.25061035 -134.44990540]
[-163.19544983 -149.32775879]
[-164.25552368 -164.29469299]
[-164.42706299 -179.29814148]
[-163.70948792 -194.28540039]
[-162.10531616 -209.20384216]
[-159.62019348 -224.00103760]
[-156.26281738 -238.62503052]
[-152.04501343 -253.02444458]
[-146.98158264 -267.14868164]
[-141.09031677 -280.94818115]
[-134.39190674 -294.37442017]
[-126.90986633 -307.38027954]
[-118.67049408 -319.92004395]
[-109.70273590 -331.94967651]
[-100.03807068 -343.42694092]
[-89.71046448 -354.31149292]
[-78.75618744 -364.56512451]
[-67.21371460 -374.15179443]
[-55.12358856 -383.03784180]
[-42.52828217 -391.19204712]
[-29.47203636 -398.58578491]
[-16.00070763 -405.19308472]
[-2.16161776 -410.99072266]
[11.99662304 -415.95831299]
[26.42428398 -420.07846069]
[41.07068634 -423.33666992]
[55.88438416 -425.72149658]
[70.81333923 -427.22451782]
[85.80512238 -427.84054565]
[100.80706787 -427.56735229]
[115.76647949 -426.40588379]
[130.63081360 -424.36029053]
[145.34785461 -421.43768311]
[159.86592102 -417.64837646]
[174.13400269 -413.00564575]
[188.10197449 -407.52581787]
[201.72080994 -401.22814941]
[214.94262695 -394.13476562]
[227.72100830 -386.27056885]
[240.01107788 -377.66314697]
[251.76963806 -368.34280396]
[262.95541382 -358.34222412]
[273.52908325 -347.69656372]
[283.45355225 -336.44320679]
[292.69390869 -324.62167358]
[301.21774292 -312.27349854]
[308.99508667 -299.44204712]
[315.99859619 -286.17239380]
[322.20373535 -272.51116943]
[327.58865356 -258.50631714]
[332.13449097 -244.20707703]
[335.82519531 -229.66363525]
[338.64788818 -214.92710876]
[340.59262085 -200.04924011]
[341.65252686 -185.08229065]
[341.82394409 -170.07884216]
[341.10626221 -155.09158325]
[339.50195312 -140.17315674]
[337.01669312 -125.37598419]
[333.65917969 -110.75202179]
[329.44125366 -96.35265350]
[324.37771606 -82.22843933]
[318.48632812 -68.42900085]
[311.78778076 -55.00280762]
[304.30563354 -41.99702454]
[296.06616211 -29.45732880]
[287.09829712 -17.42777061]
[277.43353271 -5.95060349]
[267.10583496 4.93385839]
[256.15145874 15.18738270]
[244.60890198 24.77395439]
[232.51869202 33.65989685]
[219.92332458 41.81400299]
[206.86700439 49.20762634]
[193.39561462 55.81480026]
[179.55647278 61.61231232]
[165.39819336 66.57980347]
[150.97050476 70.69981384]
[136.32406616 73.95789337]
[121.51035309 76.34257507]
[106.58137512 77.84549713]
[107.19720459 92.83284760]
[110.66659546 100.16805267]
[107.66861725 108.13358307]
[107.97659302 123.13041687]
[108.28456879 138.12725830]
[108.59254456 153.12409973]
[108.90052795 168.12092590]
[109.20850372 183.11776733]
[109.51647949 198.11460876]
[109.82445526 213.11145020]
[110.13243866 228.10829163]
[110.44041443 243.10511780]
[125.15045166 246.40335083]
[138.64340210 253.12670898]
[150.13482666 262.88430786]
[158.95660400 275.10885620]
[164.59587097 289.08963013]
[166.72474670 304.01382446]
[165.21946716 319.01373291]
[160.16755676 333.21731567]
[151.86271667 345.79876709]
[140.78778076 356.02664185]
[127.58663940 363.30627441]
[113.02677917 367.21447754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 129]
[23 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
