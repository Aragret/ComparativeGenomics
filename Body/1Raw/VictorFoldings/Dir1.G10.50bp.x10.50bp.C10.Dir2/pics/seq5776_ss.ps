%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUACAAAAGGGGGGGGGGCCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCxxxxxxxxxxAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUCCCCCCCCCCACAUAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[82.85790253 339.37805176]
[69.63770294 332.10556030]
[58.75090027 321.65856934]
[50.93976974 308.74932861]
[46.73688889 294.25799561]
[46.42881393 279.17266846]
[50.03655624 264.52185059]
[57.31412888 251.30444336]
[67.76533508 240.42167664]
[80.67759705 232.61553955]
[95.17053223 228.41824341]
[94.85848236 213.42149353]
[94.54642487 198.42474365]
[94.23436737 183.42799377]
[93.92230988 168.43122864]
[93.61025238 153.43447876]
[93.29819489 138.43772888]
[92.98614502 123.44097137]
[92.67408752 108.44422150]
[92.20604706 93.45152283]
[91.58206940 78.46450806]
[90.95809174 63.47749329]
[75.95599365 63.21258545]
[60.99594498 62.05940628]
[46.13048172 60.02200699]
[31.41182518 57.10754395]
[16.89167213 53.32625580]
[2.62102866 48.69142151]
[-11.34998131 43.21932602]
[-24.97228241 36.92918396]
[-38.19802475 29.84309578]
[-50.98075867 21.98594856]
[-63.27557373 13.38534164]
[-75.03929138 4.07148504]
[-86.23058319 -5.92290592]
[-96.81015015 -16.56272507]
[-106.74082947 -27.81060028]
[-115.98772430 -39.62702179]
[-124.51837158 -51.97048187]
[-132.30279541 -64.79763031]
[-139.31365967 -78.06340027]
[-145.52633667 -91.72120667]
[-150.91900635 -105.72306824]
[-155.47271729 -120.01980591]
[-159.17147827 -134.56120300]
[-162.00231934 -149.29617310]
[-163.95526123 -164.17295837]
[-165.02345276 -179.13931274]
[-165.20315552 -194.14266968]
[-164.49374390 -209.13032532]
[-162.89768982 -224.04962158]
[-160.42060852 -238.84817505]
[-157.07119751 -253.47398376]
[-152.86122131 -267.87570190]
[-147.80546570 -282.00271606]
[-141.92170715 -295.80538940]
[-135.23059082 -309.23529053]
[-127.75563812 -322.24520874]
[-119.52309418 -334.78945923]
[-110.56187439 -346.82397461]
[-100.90345764 -358.30645752]
[-90.58177185 -369.19662476]
[-79.63307190 -379.45620728]
[-68.09580994 -389.04916382]
[-56.01052475 -397.94180298]
[-43.41965485 -406.10284424]
[-30.36743164 -413.50369263]
[-16.89970016 -420.11831665]
[-3.06376624 -425.92346191]
[11.09177017 -430.89877319]
[25.51718712 -435.02676392]
[40.16181564 -438.29293823]
[54.97421265 -440.68582153]
[69.90235138 -442.19699097]
[84.89379883 -442.82113647]
[99.89588928 -442.55609131]
[114.85592651 -441.40280151]
[129.72137451 -439.36526489]
[144.44000244 -436.45068359]
[158.96012878 -432.66925049]
[173.23072815 -428.03430176]
[187.20169067 -422.56207275]
[200.82392883 -416.27182007]
[214.04962158 -409.18560791]
[226.83227539 -401.32836914]
[239.12701416 -392.72763062]
[250.89065552 -383.41369629]
[262.08187866 -373.41918945]
[272.66134644 -362.77926636]
[282.59191895 -351.53131104]
[291.83871460 -339.71481323]
[300.36923218 -327.37127686]
[308.15356445 -314.54406738]
[315.16430664 -301.27822876]
[321.37686157 -287.62036133]
[326.76940918 -273.61846924]
[331.32299805 -259.32168579]
[335.02163696 -244.78025818]
[337.85232544 -230.04527283]
[339.80514526 -215.16845703]
[340.87322998 -200.20208740]
[341.05279541 -185.19873047]
[340.34323120 -170.21109009]
[338.74703979 -155.29179382]
[336.26983643 -140.49327087]
[332.92028809 -125.86749268]
[328.71020508 -111.46582031]
[323.65432739 -97.33885956]
[317.77044678 -83.53621674]
[311.07922363 -70.10638428]
[303.60415649 -57.09653091]
[295.37149048 -44.55235672]
[286.41015625 -32.51792526]
[276.75164795 -21.03550148]
[266.42987061 -10.14542294]
[255.48107910 0.11405823]
[243.94374084 9.70690632]
[231.85836792 18.59942436]
[219.26742554 26.76037979]
[206.21513367 34.16110229]
[192.74734497 40.77560425]
[178.91136169 46.58064270]
[164.75578308 51.55583191]
[150.33033752 55.68369675]
[135.68566895 58.94973373]
[120.87326050 61.34247589]
[105.94510651 62.85351562]
[106.56908417 77.84053040]
[107.19306183 92.82754517]
[110.66732025 100.16332245]
[107.67083740 108.13216400]
[107.98289490 123.12892151]
[108.29495239 138.12567139]
[108.60700989 153.12242126]
[108.91906738 168.11918640]
[109.23111725 183.11593628]
[109.54317474 198.11268616]
[109.85523224 213.10943604]
[110.16728973 228.10620117]
[124.82228088 231.69696045]
[138.04809570 238.95921326]
[148.94296265 249.39781189]
[156.76405334 262.30102539]
[160.97811890 276.78909302]
[161.29785156 291.87417603]
[157.70141602 306.52780151]
[150.43405151 319.75079346]
[139.99125671 330.64163208]
[127.08502960 338.45776367]
[112.59533691 342.66622925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
