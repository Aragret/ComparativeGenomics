%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUUAGCAGGGGGGGGGGAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCxxxxxxxxxxAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCCCCCCCCCCCACCAUUAGCA\
) } def
/len { sequence length } bind def

/coor [
[54.07098389 489.07849121]
[41.51276016 480.72732544]
[31.42653847 469.51489258]
[24.44634438 456.14599609]
[21.01096153 441.46099854]
[21.33633804 426.38302612]
[25.40202332 411.85992432]
[32.95244217 398.80456543]
[43.51296997 388.03765869]
[56.41976547 380.23605347]
[70.86149597 375.89007568]
[70.23751831 360.90307617]
[69.61354065 345.91604614]
[68.98956299 330.92904663]
[68.36558533 315.94201660]
[67.74160767 300.95501709]
[67.11763000 285.96798706]
[66.49365234 270.98098755]
[65.86967468 255.99395752]
[65.24569702 241.00694275]
[64.62171936 226.01992798]
[52.01059341 217.89839172]
[38.10803604 223.53033447]
[24.20548058 229.16229248]
[10.30292416 234.79425049]
[-3.59963179 240.42620850]
[-13.25182247 253.68392944]
[-29.52867699 251.68492126]
[-35.68596268 236.48558044]
[-25.38959122 223.72169495]
[-9.23158836 226.52365112]
[4.67096758 220.89169312]
[18.57352448 215.25973511]
[32.47607803 209.62779236]
[46.37863541 203.99583435]
[44.74390411 186.95336914]
[51.14891815 171.73602295]
[63.53066635 161.76069641]
[78.56343079 158.96734619]
[81.96640778 144.35845947]
[85.36938477 129.74955750]
[76.83670807 123.71820831]
[70.60507965 115.33068848]
[67.29354095 105.42021179]
[67.23105621 94.97129822]
[70.42384338 85.02193451]
[58.92204285 75.39340973]
[47.42023849 65.76488495]
[35.91843414 56.13635635]
[24.41663170 46.50782776]
[12.91482925 36.87930298]
[1.41302574 27.25077629]
[-14.82481003 24.95627594]
[-20.70484543 9.64754581]
[-10.17820358 -2.92710519]
[5.92620802 0.16804571]
[11.04155159 15.74897289]
[22.54335594 25.37749863]
[34.04515839 35.00602722]
[45.54696274 44.63455200]
[57.04876709 54.26307678]
[68.55056763 63.89160538]
[80.05237579 73.52013397]
[83.51396179 71.23714447]
[87.23345947 69.40413666]
[91.15267944 68.04978180]
[95.21031189 67.19527435]
[96.45719147 52.24718475]
[97.70406342 37.29909515]
[98.95094299 22.35100937]
[85.42326355 15.41772652]
[75.58238220 3.83215261]
[70.92896271 -10.63899422]
[72.17260742 -25.78897095]
[79.12368011 -39.30751419]
[90.72219086 -49.13314438]
[105.19944763 -53.76752853]
[120.34777832 -52.50395203]
[133.85716248 -45.53509903]
[143.66752625 -33.92367554]
[148.28286743 -19.44033623]
[146.99935913 -4.29368496]
[140.01274109 9.20652485]
[128.38842773 19.00160789]
[113.89902496 23.59788513]
[112.65215302 38.54597092]
[111.40527344 53.49405670]
[110.15840149 68.44214630]
[117.06533051 71.57701874]
[123.07895660 76.19972229]
[127.88449097 82.06828308]
[142.00929260 77.01952362]
[156.13409424 71.97077179]
[170.25889587 66.92201233]
[184.38369751 61.87325668]
[198.50849915 56.82450104]
[212.63330078 51.77574158]
[213.00329590 36.60249329]
[218.83312988 22.58901596]
[229.33436584 11.63052273]
[243.08679199 5.20905733]
[258.23049927 4.19307137]
[272.71746826 8.71996784]
[284.58837891 18.17752266]
[292.23785400 31.28667641]
[294.63134766 46.27452469]
[291.44515991 61.11408615]
[283.11016846 73.79843140]
[270.75366211 82.61210632]
[256.04672241 86.36312866]
[240.97834778 84.54421234]
[227.58641052 77.40134430]
[217.68206787 65.90054321]
[203.55726624 70.94930267]
[189.43246460 75.99806213]
[175.30766296 81.04681396]
[161.18284607 86.09557343]
[147.05804443 91.14432526]
[132.93324280 96.19308472]
[124.74454498 122.06352234]
[99.97827911 133.15254211]
[96.57529449 147.76142883]
[93.17231750 162.37033081]
[105.89892578 172.69442749]
[111.80957794 188.54234314]
[108.76995087 205.71641541]
[97.09574890 219.37486267]
[79.60873413 225.39595032]
[80.23271179 240.38296509]
[80.85668945 255.36997986]
[81.48066711 270.35699463]
[82.10464478 285.34402466]
[82.72862244 300.33102417]
[83.35260010 315.31805420]
[83.97657776 330.30505371]
[84.60055542 345.29208374]
[85.22453308 360.27908325]
[85.84851074 375.26611328]
[100.60151672 378.39654541]
[114.11215210 385.09829712]
[125.53112793 394.95010376]
[134.14064026 407.33264160]
[139.39949036 421.46752930]
[140.97709656 436.46624756]
[138.77429199 451.38598633]
[132.92955017 465.28884888]
[123.81026459 477.30093384]
[111.98969269 486.66708374]
[98.21088409 492.79858398]
[83.33998108 495.30996704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[39 123]
[40 122]
[41 121]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[67 88]
[68 87]
[69 86]
[70 85]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
