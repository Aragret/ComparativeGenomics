%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAGACGAGGGGGGGGGGGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUxxxxxxxxxxCUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCAUUAUUCCUAGCCCCCCCCCCAACCAGGCGA\
) } def
/len { sequence length } bind def

/coor [
[85.89495087 415.21987915]
[71.40525818 411.01141357]
[58.49902725 403.19531250]
[48.05622864 392.30447388]
[40.78886414 379.08145142]
[37.19243622 364.42785645]
[37.51215744 349.34274292]
[41.72623062 334.85470581]
[49.54732513 321.95147705]
[60.44219589 311.51287842]
[73.66800690 304.25064087]
[88.32299805 300.65985107]
[88.63505554 285.66311646]
[88.94710541 270.66635132]
[89.25916290 255.66960144]
[89.57122040 240.67285156]
[89.88327789 225.67608643]
[90.19533539 210.67933655]
[90.50739288 195.68258667]
[90.81944275 180.68583679]
[91.13150024 165.68907166]
[91.44355774 150.69232178]
[91.75561523 135.69557190]
[92.06767273 120.69881439]
[84.60398865 133.71009827]
[81.92722321 148.46932983]
[71.83605957 159.56745911]
[57.39718246 163.63179016]
[42.99852371 159.42720032]
[33.01579666 148.23143005]
[30.48272324 133.44685364]
[36.16909790 119.56647491]
[48.34684753 110.80847931]
[63.31519318 109.83441925]
[77.09358215 103.90516663]
[62.15927124 102.50286102]
[47.22496414 101.10055542]
[34.00246429 110.18598938]
[18.69768524 105.37523651]
[13.05114460 90.35871124]
[21.39438629 76.65579224]
[37.32719040 74.77819824]
[48.62726974 86.16625214]
[63.56157684 87.56855774]
[78.49588776 88.97085571]
[83.18946838 83.12104797]
[71.48999023 73.73370361]
[80.87751007 62.03437042]
[92.57662964 71.42142487]
[97.27021027 65.57160950]
[92.66464233 51.29615021]
[88.05908203 37.02069092]
[83.45351410 22.74522972]
[76.96534729 9.22103977]
[68.71305847 -3.30492234]
[60.46076965 -15.83088398]
[52.20848083 -28.35684586]
[36.70207977 -28.93228722]
[24.51618767 -38.53872681]
[20.33652878 -53.48228836]
[25.77026749 -68.01686859]
[38.72801971 -76.55363464]
[54.22726822 -75.81001282]
[66.30822754 -66.07194519]
[70.32553864 -51.08391953]
[64.73444366 -36.60913467]
[72.98673248 -24.08317375]
[81.23902130 -11.55721188]
[89.49131012 0.96875042]
[89.80083466 -14.02805519]
[96.08073425 -27.65020180]
[107.28337860 -37.62520599]
[121.53991699 -42.28902054]
[136.47204590 -40.86360931]
[149.58872986 -33.58676529]
[158.70182800 -21.67242813]
[162.29107666 -7.10817957]
[159.75769043 7.67633820]
[151.52430725 20.21473694]
[138.96444702 28.41532898]
[124.17335510 30.91007233]
[109.61853027 27.28278732]
[97.72897339 18.13966560]
[102.33454132 32.41512680]
[106.94010162 46.69058609]
[111.54566956 60.96604538]
[118.32899475 79.74465942]
[112.89682770 94.73854828]
[127.46952820 91.18378448]
[142.04223633 87.62902069]
[153.61566162 76.84170532]
[167.81399536 81.34243774]
[182.38670349 77.78767395]
[196.95941162 74.23291016]
[211.53210449 70.67815399]
[211.55986023 55.60291672]
[215.19523621 40.97255325]
[222.22685242 27.63765144]
[232.24594116 16.37348366]
[244.66996765 7.83493233]
[258.77664185 2.51841998]
[273.74578857 0.73304063]
[288.70718384 2.58259439]
[302.79092407 7.95955038]
[315.17822266 16.55130005]
[325.14889526 27.85832787]
[332.12329102 41.22326279]
[335.69589233 55.86907959]
[335.65899658 70.94429779]
[332.01473999 85.57244873]
[324.97503662 98.90309143]
[314.94912720 110.16117859]
[302.51992798 118.69219971]
[288.41003418 124.00016022]
[273.43978882 125.77645874]
[258.47955322 123.91783905]
[244.39906311 118.53234100]
[232.01696777 109.93308258]
[222.05314636 98.62001038]
[215.08686829 85.25085449]
[200.51417542 88.80561829]
[185.94146729 92.36038208]
[171.36875916 95.91513824]
[160.83766174 106.44819641]
[145.59698486 102.20172119]
[131.02429199 105.75648499]
[116.45158386 109.31124878]
[107.06442261 121.01087189]
[106.75236511 136.00762939]
[106.44031525 151.00437927]
[106.12825775 166.00112915]
[105.81620026 180.99787903]
[105.50414276 195.99464417]
[105.19208527 210.99139404]
[104.88002777 225.98814392]
[104.56797791 240.98489380]
[104.25592041 255.98165894]
[103.94386292 270.97839355]
[103.63180542 285.97515869]
[103.31974792 300.97192383]
[117.81268311 305.16918945]
[130.72494507 312.97534180]
[141.17616272 323.85812378]
[148.45373535 337.07550049]
[152.06146240 351.72631836]
[151.75340271 366.81167603]
[147.55052185 381.30297852]
[139.73937988 394.21221924]
[128.85258484 404.65924072]
[115.63238525 411.93170166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[35 45]
[36 44]
[37 43]
[50 86]
[51 85]
[52 84]
[53 83]
[54 69]
[55 68]
[56 67]
[57 66]
[88 127]
[89 126]
[90 125]
[92 123]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
