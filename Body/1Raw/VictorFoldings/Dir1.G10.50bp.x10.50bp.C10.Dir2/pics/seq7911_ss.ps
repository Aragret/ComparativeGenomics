%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCUCUACGGGGGGGGGGCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAxxxxxxxxxxAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUCCCCCCCCCCACUCCCUCUAC\
) } def
/len { sequence length } bind def

/coor [
[72.76936340 465.53530884]
[59.28047943 458.80377197]
[47.79497910 449.03918457]
[38.98060989 436.80929565]
[33.34982681 422.82510376]
[31.22999954 407.89962769]
[32.74436951 392.90063477]
[37.80489349 378.70010376]
[46.11735916 366.12368774]
[57.19849014 355.90252686]
[70.40404510 348.63088989]
[84.96627045 344.73153687]
[84.65828705 329.73471069]
[84.35031128 314.73785400]
[84.04233551 299.74102783]
[83.73435974 284.74417114]
[83.42637634 269.74734497]
[83.11840057 254.75050354]
[82.81042480 239.75366211]
[82.50244904 224.75683594]
[82.19446564 209.75999451]
[70.78356171 219.49606323]
[55.81658554 218.50122070]
[45.79468155 207.34051514]
[46.41021347 192.35314941]
[57.31356049 182.05183411]
[72.31170654 182.28764343]
[82.88611603 192.92736816]
[84.42340851 178.00634766]
[85.96070099 163.08534241]
[79.56851196 149.63211060]
[88.67939758 136.69757080]
[90.21669006 121.77655792]
[77.46102905 111.38772583]
[73.96958160 94.37318420]
[82.44835663 78.17005920]
[100.10397339 70.61016083]
[96.44526672 56.06320572]
[92.78656006 41.51625443]
[89.12785339 26.96929932]
[85.46914673 12.42234516]
[81.81044769 -2.12460923]
[78.22074890 -4.78116751]
[75.78396606 -8.17742443]
[74.60018158 -11.88858032]
[74.62766266 -15.50065517]
[64.52222443 -26.58578873]
[54.41679001 -37.67092133]
[44.31135559 -48.75605774]
[34.20592117 -59.84119034]
[24.10048676 -70.92632294]
[13.99505234 -82.01145935]
[-0.61415792 -77.59175873]
[-15.69290829 -79.95692444]
[-28.24730301 -88.63735962]
[-35.78465652 -101.90955353]
[-36.80842590 -117.13829803]
[-31.11533546 -131.29991150]
[-19.83575630 -141.58261108]
[-5.20925474 -145.94474792]
[9.86006546 -143.52021790]
[22.38018036 -134.79040527]
[29.86520958 -121.48863983]
[30.82899857 -106.25598145]
[25.08018494 -92.11688995]
[35.18561935 -81.03176117]
[45.29105377 -69.94662476]
[55.39648819 -58.86149216]
[65.50192261 -47.77635574]
[75.60736084 -36.69122314]
[85.71279144 -25.60608864]
[82.34844971 -40.22392654]
[82.14968872 -55.22261047]
[85.12548828 -69.92446899]
[91.14139557 -83.66524506]
[99.92560577 -95.82409668]
[111.08122253 -105.85166931]
[124.10421753 -113.29489136]
[138.40618896 -117.81746674]
[153.34092712 -119.21506500]
[168.23368835 -117.42452240]
[182.41154480 -112.52675629]
[195.23394775 -104.74304199]
[206.12153625 -94.42507935]
[214.58238220 -82.03903961]
[220.23422241 -68.14455414]
[222.82170105 -53.36940765]
[222.22789001 -38.38116455]
[218.47962952 -23.85702896]
[211.74627686 -10.45322514]
[202.33206177 1.22463417]
[190.66232300 10.64892006]
[177.26432800 17.39382553]
[162.74342346 21.15460205]
[147.75569153 21.76132774]
[132.97833252 19.18659401]
[119.07897949 13.54672909]
[106.68564606 5.09655380]
[96.35739899 -5.78331518]
[100.01610565 8.76363945]
[103.67481232 23.31059265]
[107.33351898 37.85754776]
[110.99221802 52.40450287]
[114.65092468 66.95145416]
[126.80426025 75.74330139]
[141.76554871 74.66622925]
[156.72682190 73.58915710]
[171.68811035 72.51208496]
[178.98489380 58.91942978]
[192.48316956 51.44948578]
[207.87568665 52.48588943]
[220.25073242 61.69792557]
[225.65948486 76.14607239]
[222.37603760 91.21997070]
[211.44812012 102.10960388]
[196.36277771 105.34011841]
[181.93371582 99.88068390]
[172.76516724 87.47336578]
[157.80389404 88.55043793]
[142.84260559 89.62751007]
[127.88133240 90.70458221]
[127.87882996 102.71614075]
[123.16360474 113.14119720]
[114.99601746 120.31760406]
[105.13770294 123.31385040]
[103.60041046 138.23486328]
[109.88264465 152.75534058]
[100.88171387 164.62263489]
[99.34442139 179.54364014]
[97.80712891 194.46466064]
[97.19130707 209.45201111]
[97.49928284 224.44885254]
[97.80725861 239.44569397]
[98.11524200 254.44253540]
[98.42321777 269.43936157]
[98.73119354 284.43621826]
[99.03916931 299.43304443]
[99.34715271 314.42987061]
[99.65512848 329.42672729]
[99.96310425 344.42355347]
[114.67314148 347.72177124]
[128.16610718 354.44512939]
[139.65751648 364.20272827]
[148.47929382 376.42727661]
[154.11856079 390.40808105]
[156.24743652 405.33224487]
[154.74215698 420.33218384]
[149.69024658 434.53573608]
[141.38540649 447.11721802]
[130.31047058 457.34506226]
[117.10932922 464.62472534]
[102.54947662 468.53292847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[28 130]
[29 129]
[30 128]
[32 126]
[33 125]
[37 104]
[38 103]
[39 102]
[40 101]
[41 100]
[42 99]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
