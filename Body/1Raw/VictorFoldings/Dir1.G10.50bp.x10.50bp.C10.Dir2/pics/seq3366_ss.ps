%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUUCUAGGGGGGGGGGGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUxxxxxxxxxxUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUACCCCCCCCCCAAAAAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[80.82240295 336.14910889]
[68.26418304 327.79794312]
[58.17795944 316.58551025]
[51.19776535 303.21658325]
[47.76237869 288.53158569]
[48.08775711 273.45364380]
[52.15344238 258.93051147]
[59.70386124 245.87516785]
[70.26438904 235.10827637]
[83.17118835 227.30664062]
[97.61291504 222.96069336]
[96.98893738 207.97367859]
[96.36495972 192.98666382]
[95.74098206 177.99964905]
[95.11700439 163.01263428]
[94.49302673 148.02561951]
[93.86904907 133.03860474]
[93.24507141 118.05158234]
[83.03159332 107.06591797]
[68.12969208 105.35322571]
[53.22778702 103.64054108]
[38.32588577 101.92784882]
[23.42398262 100.21515656]
[8.52207947 98.50247192]
[3.61743283 100.63882446]
[-1.13150096 100.63577271]
[-4.92195082 98.92282867]
[-7.24530029 96.18978882]
[-22.01135635 93.55091858]
[-36.77741241 90.91205597]
[-51.54346848 88.27319336]
[-66.30952454 85.63433075]
[-81.07557678 82.99546051]
[-88.41645050 96.23896790]
[-99.66139984 106.37947083]
[-113.59066010 112.31700897]
[-128.69329834 113.40752411]
[-143.33106995 109.53272247]
[-155.91621399 101.11292267]
[-165.08355713 89.06142426]
[-169.83869934 74.68550110]
[-169.66586304 59.54453278]
[-164.58377075 45.28090668]
[-155.14369202 33.44183350]
[-142.36962891 25.31152153]
[-127.64720154 21.77189064]
[-112.57340240 23.20689392]
[-98.78330994 29.46087074]
[-87.77278900 39.85543823]
[-80.73616028 53.26306915]
[-78.43671417 68.22940826]
[-63.67065811 70.86827087]
[-48.90460205 73.50713348]
[-34.13854599 76.14600372]
[-19.37249184 78.78486633]
[-4.60643578 81.42372894]
[10.23476982 83.60056305]
[25.13667107 85.31325531]
[40.03857422 87.02594757]
[54.94047546 88.73863220]
[69.84237671 90.45132446]
[84.74427795 92.16401672]
[88.89389801 87.71958160]
[94.16505432 85.13980103]
[99.79875946 84.62949371]
[105.03954315 86.10684967]
[115.25302887 75.12117767]
[125.46650696 64.13551331]
[135.67999268 53.14985275]
[145.89346313 42.16418839]
[136.31994629 30.58822632]
[128.33935547 17.86167526]
[122.08824158 4.20229864]
[117.67356873 -10.15617180]
[115.17087555 -24.96804428]
[114.62299347 -39.97986603]
[116.03929138 -54.93476868]
[119.39553833 -69.57685089]
[124.63430786 -83.65557098]
[131.66595459 -96.93002319]
[140.37014771 -109.17305756]
[150.59796143 -120.17519379]
[162.17437744 -129.74815369]
[174.90130615 -137.72814941]
[188.56097412 -143.97860718]
[202.91966248 -148.39259338]
[217.73164368 -150.89459229]
[232.74349976 -151.44175720]
[247.69833374 -150.02474976]
[262.34027100 -146.66780090]
[276.41873169 -141.42835999]
[289.69284058 -134.39608765]
[301.93545532 -125.69130707]
[312.93710327 -115.46297455]
[322.50952148 -103.88610077]
[330.48889160 -91.15879059]
[336.73870850 -77.49881744]
[341.15203857 -63.13993073]
[343.65332031 -48.32781982]
[344.19976807 -33.31594467]
[342.78204346 -18.36117554]
[339.42440796 -3.71941185]
[334.18429565 10.35880947]
[327.15139771 23.63258934]
[318.44601440 35.87479782]
[308.21716309 46.87595749]
[296.63983154 56.44781494]
[283.91213989 64.42658997]
[270.25189209 70.67575836]
[255.89277649 75.08838654]
[241.08055115 77.58895874]
[226.06864929 78.13469696]
[211.11395264 76.71626282]
[196.47233582 73.35792542]
[182.39437866 68.11714935]
[169.12092590 61.08361053]
[156.87913513 52.37766647]
[146.66564941 63.36333084]
[136.45216370 74.34899902]
[126.23869324 85.33466339]
[116.02520752 96.32032776]
[128.97639465 88.75285339]
[143.97439575 88.99859619]
[156.67070007 96.98631287]
[163.38421631 110.40006256]
[162.16844177 125.35070801]
[153.37586975 137.50350952]
[139.55578613 143.33493042]
[124.71514893 141.15422058]
[113.15680695 131.59364319]
[108.23208618 117.42760468]
[108.85606384 132.41462708]
[109.48004150 147.40164185]
[110.10401917 162.38865662]
[110.72799683 177.37567139]
[111.35197449 192.36268616]
[111.97595215 207.34970093]
[112.59992981 222.33671570]
[127.35293579 225.46716309]
[140.86357117 232.16891479]
[152.28254700 242.02070618]
[160.89205933 254.40324402]
[166.15090942 268.53814697]
[167.72851562 283.53686523]
[165.52571106 298.45660400]
[159.68096924 312.35946655]
[150.56167603 324.37152100]
[138.74111938 333.73767090]
[124.96230316 339.86917114]
[110.09140015 342.38058472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
