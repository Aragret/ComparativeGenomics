%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAAACUUGGGGGGGGGGAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGxxxxxxxxxxCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCCCCCCCCCCCAUAACACUU\
) } def
/len { sequence length } bind def

/coor [
[82.00030518 364.44064331]
[69.44208527 356.08947754]
[59.35586166 344.87704468]
[52.37566757 331.50811768]
[48.94028473 316.82312012]
[49.26566315 301.74517822]
[53.33134460 287.22204590]
[60.88176727 274.16671753]
[71.44229126 263.39981079]
[84.34909058 255.59817505]
[98.79081726 251.25222778]
[98.16683960 236.26521301]
[97.54286194 221.27819824]
[96.91888428 206.29118347]
[96.29490662 191.30416870]
[95.67092896 176.31715393]
[95.04695129 161.33013916]
[94.42297363 146.34310913]
[93.79899597 131.35609436]
[93.17501831 116.36908722]
[86.86946106 112.30831146]
[73.53057098 119.16937256]
[74.25833130 104.18676758]
[67.95276642 100.12599945]
[54.05020905 105.75795746]
[40.14765167 111.38991547]
[30.49546242 124.64763641]
[14.21860886 122.64862061]
[8.06132317 107.44928741]
[18.35769272 94.68540192]
[34.51569748 97.48735809]
[48.41825104 91.85540009]
[62.32080841 86.22344208]
[61.07387161 71.27468872]
[59.82706070 56.32727051]
[45.18355942 53.07644272]
[30.54005623 49.82561874]
[15.89655495 46.57479095]
[1.25305402 43.32396698]
[-11.04489231 52.98287582]
[-26.67253494 52.42539597]
[-38.25098038 41.91475296]
[-40.31324005 26.41374969]
[-31.88557625 13.24148655]
[-16.94727707 8.61750317]
[-2.55174899 14.72510338]
[4.50388002 28.68046570]
[19.14738083 31.93128967]
[33.79088211 35.18211746]
[48.43438339 38.43294144]
[63.07788467 41.68376923]
[90.10070038 63.09605408]
[100.29778290 92.61071777]
[86.44612122 98.36669922]
[71.69187927 101.07085419]
[56.69922638 100.60146332]
[42.14304352 96.97965240]
[28.67856979 90.36845398]
[16.91190147 81.06546783]
[7.37270927 69.48946381]
[0.49039546 56.16153717]
[-3.42523623 41.68162537]
[-4.19792557 26.70153999]
[-1.79289091 11.89560127]
[3.68160701 -2.06970882]
[11.97913647 -14.56574821]
[22.72618675 -25.03001595]
[35.43898773 -32.99146652]
[49.54527664 -38.09172058]
[64.41007233 -40.10119247]
[79.36423492 -38.92942810]
[93.73461151 -34.62916946]
[106.87432861 -27.39399719]
[118.19191742 -17.54959297]
[127.17790985 -5.53910017]
[133.42781067 8.09683514]
[136.66027832 22.74439812]
[136.72982788 37.74423599]
[133.63330078 52.42114258]
[127.51009369 66.11444092]
[118.63430786 78.20941925]
[132.53686523 72.57746124]
[146.43942261 66.94550323]
[153.27194214 60.78364944]
[160.69024658 61.34431458]
[174.70697021 56.00280380]
[172.63493347 41.08594513]
[173.93383789 26.08923721]
[178.53529358 11.76452446]
[186.20550537 -1.17075574]
[196.55700684 -12.06950665]
[209.06829834 -20.38734436]
[223.11015320 -25.70978355]
[237.97718811 -27.77290154]
[252.92333984 -26.47640800]
[267.19927979 -21.88853455]
[280.09005737 -14.24243259]
[290.95077515 -3.92434096]
[299.23898315 8.54593086]
[313.25570679 3.20441842]
[327.27239990 -2.13709426]
[341.28912354 -7.47860670]
[351.21502686 -20.53265953]
[367.44677734 -18.19545937]
[373.28652954 -2.87131691]
[362.72683716 9.67560387]
[346.63064575 6.53810644]
[332.61392212 11.87961864]
[318.59719849 17.22113228]
[304.58050537 22.56264305]
[306.69348145 37.38618088]
[305.45404053 52.31541824]
[300.92117310 66.60134888]
[293.31912231 79.52653503]
[283.02636719 90.44110107]
[270.55682373 98.79545593]
[256.53402710 104.16793823]
[241.66015625 106.28609467]
[226.68067932 105.04051208]
[212.34712219 100.49046326]
[199.37934875 92.86106873]
[188.42933655 82.53218842]
[180.04847717 70.01951599]
[166.03176880 75.36103058]
[152.07138062 80.84806061]
[138.16882324 86.48001862]
[124.26626587 92.11196899]
[112.46961975 101.37692261]
[108.16204071 115.74510956]
[108.78601837 130.73211670]
[109.40999603 145.71913147]
[110.03396606 160.70616150]
[110.65794373 175.69317627]
[111.28192139 190.68019104]
[111.90589905 205.66720581]
[112.52987671 220.65422058]
[113.15385437 235.64123535]
[113.77783203 250.62825012]
[128.53083801 253.75869751]
[142.04147339 260.46044922]
[153.46044922 270.31222534]
[162.06996155 282.69476318]
[167.32881165 296.82968140]
[168.90641785 311.82839966]
[166.70361328 326.74813843]
[160.85887146 340.65100098]
[151.73959351 352.66305542]
[139.91902161 362.02920532]
[126.14020538 368.16070557]
[111.26931000 370.67211914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 33]
[25 32]
[26 31]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[53 128]
[81 127]
[82 126]
[83 125]
[85 124]
[86 123]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
