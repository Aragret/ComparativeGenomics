%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUGAAUAGGGGGGGGGGUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUxxxxxxxxxxCCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUCCCCCCCCCCACCAUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[77.03618622 450.01727295]
[63.19025040 444.00125122]
[51.48158646 434.47183228]
[42.77906418 422.13616943]
[37.72846222 407.90963745]
[36.70457077 392.84796143]
[39.78336716 378.06881714]
[46.73638916 364.66888428]
[57.04767609 353.64254761]
[69.95205688 345.80804443]
[84.49194336 341.74673462]
[84.49194336 326.74673462]
[84.49194336 311.74673462]
[84.49194336 296.74673462]
[84.49194336 281.74673462]
[84.49194336 266.74673462]
[84.49194336 251.74673462]
[84.49194336 236.74673462]
[84.49194336 221.74673462]
[84.49194336 206.74673462]
[82.53827667 204.65136719]
[81.32489777 201.63114929]
[81.21779633 197.97459412]
[82.46782684 194.10052490]
[85.16783142 190.51283264]
[86.41470337 175.56475830]
[79.76213837 162.23835754]
[88.61979675 149.12911987]
[89.86667633 134.18103027]
[91.11354828 119.23294067]
[92.36042023 104.28485107]
[90.53375244 101.75558472]
[89.61309052 98.48954010]
[89.87892914 94.83094788]
[91.47682190 91.22474670]
[94.38341522 88.16333008]
[96.86853790 73.37062073]
[99.35365295 58.57791519]
[101.83877563 43.78520966]
[87.69064331 36.98581314]
[76.03321838 26.49529839]
[67.79997253 13.16465664]
[63.64712906 -1.92813170]
[63.90131760 -17.56527710]
[68.53392029 -32.48743439]
[77.16403961 -45.49513626]
[89.08979034 -55.54518890]
[103.34537506 -61.83435059]
[118.77931213 -63.86351776]
[120.95614624 -78.70471954]
[123.13298035 -93.54592896]
[115.92855835 -110.45971680]
[127.27072144 -123.81468964]
[129.13833618 -138.69796753]
[131.00595093 -153.58125305]
[132.87356567 -168.46452332]
[123.38529968 -156.84674072]
[111.78903961 -147.33218384]
[98.54179382 -140.29582214]
[84.16562653 -136.01495361]
[69.22710419 -134.65827942]
[54.31494904 -136.27928162]
[40.01684189 -140.81405640]
[26.89627647 -148.08390808]
[15.47032166 -157.80232239]
[6.18927717 -169.58630371]
[-0.58109587 -182.97143555]
[-4.57397795 -197.43023682]
[-5.63200998 -212.39288330]
[-3.71349621 -227.26968384]
[1.10595596 -241.47436523]
[8.63641262 -254.44711304]
[18.58110046 -265.67666626]
[30.54810143 -274.72052002]
[44.06579971 -281.22219849]
[58.60146713 -284.92547607]
[73.58225250 -285.68444824]
[88.41777039 -283.46917725]
[102.52335358 -278.36697388]
[115.34310913 -270.57891846]
[126.37181091 -260.41192627]
[135.17481995 -248.26667786]
[141.40521240 -234.62182617]
[144.81744385 -220.01509094]
[145.27705383 -205.02214050]
[142.76647949 -190.23588562]
[152.74920654 -201.43165588]
[162.73193359 -212.62741089]
[172.71466064 -223.82318115]
[182.69738770 -235.01895142]
[183.21920776 -251.05351257]
[196.16648865 -260.52703857]
[211.60717773 -256.17221069]
[217.69651794 -241.32972717]
[209.76327515 -227.38543701]
[193.89315796 -225.03622437]
[183.91043091 -213.84045410]
[173.92770386 -202.64468384]
[163.94497681 -191.44892883]
[153.96224976 -180.25315857]
[147.75683594 -166.59690857]
[145.88922119 -151.71363831]
[144.02160645 -136.83035278]
[142.15400696 -121.94707489]
[149.34072876 -112.16658020]
[147.86337280 -99.71521759]
[137.97418213 -91.36909485]
[135.79734802 -76.52788544]
[133.62051392 -61.68667984]
[146.78930664 -55.94761658]
[158.02581787 -46.97853851]
[166.55532837 -35.38973618]
[171.78770447 -21.97238350]
[173.35815430 -7.64453840]
[171.15267944 6.61168432]
[165.31631470 19.81743050]
[156.24362183 31.06431580]
[144.55201721 39.57690811]
[131.03977966 44.76619720]
[116.63147736 46.27032852]
[114.14636230 61.06303406]
[111.66123962 75.85574341]
[109.17612457 90.64844513]
[107.30850983 105.53173065]
[106.06163788 120.47981262]
[104.81475830 135.42790222]
[103.56788635 150.37599182]
[110.13127136 164.77156067]
[101.36279297 176.81163025]
[100.11592102 191.75971985]
[99.49194336 206.74673462]
[99.49194336 221.74673462]
[99.49194336 236.74673462]
[99.49194336 251.74673462]
[99.49194336 266.74673462]
[99.49194336 281.74673462]
[99.49194336 296.74673462]
[99.49194336 311.74673462]
[99.49194336 326.74673462]
[99.49194336 341.74673462]
[114.03182983 345.80804443]
[126.93621063 353.64254761]
[137.24749756 364.66888428]
[144.20051575 378.06881714]
[147.27931213 392.84796143]
[146.25541687 407.90963745]
[141.20481873 422.13616943]
[132.50230408 434.47183228]
[120.79363251 444.00125122]
[106.94770050 450.01727295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[28 127]
[29 126]
[30 125]
[31 124]
[36 123]
[37 122]
[38 121]
[39 120]
[49 109]
[50 108]
[51 107]
[53 104]
[54 103]
[55 102]
[56 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
