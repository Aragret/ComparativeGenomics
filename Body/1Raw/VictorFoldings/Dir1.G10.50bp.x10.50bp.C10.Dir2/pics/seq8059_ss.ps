%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAUCACGGGGGGGGGGCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCxxxxxxxxxxCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACACCCCCCCCCCUCCUCAUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.14315796]
[71.19830322 354.12713623]
[59.48964310 344.59771729]
[50.78712082 332.26205444]
[45.73651886 318.03552246]
[44.71262741 302.97384644]
[47.79142761 288.19470215]
[54.74444962 274.79476929]
[65.05573273 263.76843262]
[77.96011353 255.93392944]
[92.50000000 251.87261963]
[92.50000000 236.87261963]
[92.50000000 221.87261963]
[92.50000000 206.87261963]
[92.50000000 191.87261963]
[92.50000000 176.87261963]
[92.50000000 161.87261963]
[92.50000000 146.87261963]
[92.50000000 131.87261963]
[92.50000000 116.87261200]
[79.11435699 100.76449585]
[88.98815155 79.42687988]
[76.90816498 70.53453064]
[66.81230927 81.64658356]
[55.62739944 91.66166687]
[43.47199631 100.47360229]
[30.47495651 107.98898315]
[16.77405357 114.12814331]
[2.51452422 118.82600403]
[-12.15247059 122.03276062]
[-27.07145309 123.71442413]
[-42.08427429 123.85317230]
[-57.03178787 122.44752502]
[-71.75554657 119.51238251]
[-86.09946442 115.07887268]
[-99.91149139 109.19397736]
[-113.04520416 101.92008972]
[-125.36139679 93.33431244]
[-136.72949219 83.52766418]
[-147.02899170 72.60409546]
[-156.15071106 60.67940521]
[-163.99795532 47.87999725]
[-170.48754883 34.34156036]
[-175.55067444 20.20760536]
[-179.13368225 5.62795877]
[-181.19859314 -9.24282455]
[-181.72349548 -24.24710846]
[-180.70283508 -39.22583389]
[-178.14744568 -54.02022552]
[-174.08439636 -68.47344971]
[-168.55676270 -82.43229675]
[-161.62315369 -95.74878693]
[-153.35705566 -108.28176880]
[-143.84609985 -119.89838409]
[-133.19110107 -130.47547913]
[-121.50501251 -139.90095520]
[-108.91172028 -148.07487488]
[-95.54470825 -154.91058350]
[-81.54567719 -160.33564758]
[-67.06303406 -164.29252625]
[-52.25028610 -166.73930359]
[-37.26447296 -167.65002441]
[-22.26444626 -167.01502991]
[-7.40921450 -164.84107971]
[7.14374924 -161.15118408]
[21.24017334 -155.98448181]
[34.73062897 -149.39573669]
[47.47211075 -141.45478821]
[59.32955170 -132.24580383]
[70.17725372 -121.86643982]
[79.90023041 -110.42668915]
[88.39540100 -98.04783630]
[95.57272339 -84.86109924]
[101.35611725 -71.00626373]
[105.68426514 -56.63019943]
[108.51128387 -41.88530350]
[109.80721283 -26.92787933]
[109.55831909 -11.91648006]
[107.76723480 2.98976111]
[104.45294189 17.63283157]
[99.65058136 31.85750580]
[93.41105652 45.51299286]
[85.80051422 58.45454025]
[97.88050079 67.34689331]
[112.67321014 69.83200836]
[126.99580383 65.37519073]
[141.31840515 60.91837692]
[155.64099121 56.46156311]
[158.55825806 53.04819870]
[162.06936646 50.98828125]
[165.66223145 50.30038452]
[168.87362671 50.83037567]
[171.34259033 52.28350067]
[185.98608398 49.03267288]
[200.62959290 45.78184891]
[215.16452026 42.07568741]
[229.57673645 37.91779709]
[243.98895264 33.75991058]
[232.55795288 24.04743385]
[232.81120300 9.04957104]
[244.56358337 -0.27145150]
[259.22506714 2.89727855]
[266.07928467 16.23967552]
[260.11688232 30.00309372]
[274.88293457 27.36422920]
[289.64898682 24.72536469]
[299.96331787 12.43740654]
[315.99707031 12.98409176]
[325.45046997 25.94605064]
[321.07171631 41.37997818]
[306.21981812 47.44628525]
[292.28784180 39.49142075]
[277.52178955 42.13028336]
[262.75573730 44.76914978]
[248.14685059 48.17212677]
[233.73463440 52.33001328]
[219.32241821 56.48790359]
[217.29541016 59.44742584]
[213.70332336 61.54470444]
[208.98037720 62.04086304]
[203.88041687 60.42535019]
[189.23690796 63.67617416]
[174.59341431 66.92700195]
[160.09780884 70.78415680]
[145.77522278 75.24097443]
[131.45262146 79.69779205]
[117.13002014 84.15460968]
[121.30578613 94.06407928]
[120.47035217 104.21414948]
[115.33171082 112.34182739]
[107.50000000 116.87261200]
[107.50000000 131.87261963]
[107.50000000 146.87261963]
[107.50000000 161.87261963]
[107.50000000 176.87261963]
[107.50000000 191.87261963]
[107.50000000 206.87261963]
[107.50000000 221.87261963]
[107.50000000 236.87261963]
[107.50000000 251.87261963]
[122.03988647 255.93392944]
[134.94427490 263.76843262]
[145.25555420 274.79476929]
[152.20857239 288.19470215]
[155.28736877 302.97384644]
[154.26348877 318.03552246]
[149.21287537 332.26205444]
[140.51036072 344.59771729]
[128.80169678 354.12713623]
[114.95575714 360.14315796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 84]
[23 83]
[85 127]
[86 126]
[87 125]
[88 124]
[93 123]
[94 122]
[95 121]
[96 117]
[97 116]
[98 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
