%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUACGCAAAGGGGGGGGGGGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCxxxxxxxxxxUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCCCCCCCCCCCAGCUACGCAAA\
) } def
/len { sequence length } bind def

/coor [
[88.96485138 517.70184326]
[74.80425262 512.54687500]
[62.21450424 504.26464844]
[51.87456894 493.30187988]
[44.34205627 480.24975586]
[40.02318954 465.81216431]
[39.15088272 450.76770020]
[41.77217102 435.92770386]
[47.74570084 422.09246826]
[56.74931717 410.00811768]
[68.29747009 400.32635498]
[81.76738739 393.56927490]
[96.43264771 390.10128784]
[96.43264771 375.10128784]
[96.43264771 360.10128784]
[96.43264771 345.10128784]
[96.43264771 330.10128784]
[96.43264771 315.10128784]
[96.43264771 300.10128784]
[96.43264771 285.10128784]
[96.43264771 270.10128784]
[96.43264771 255.10128784]
[96.43264771 240.10128784]
[96.43264771 225.10128784]
[97.07618713 197.41363525]
[113.77319336 185.57098389]
[109.86643982 171.08868408]
[105.81312561 156.64669800]
[101.61366272 142.24655151]
[97.41419983 127.84638977]
[93.21473694 113.44622803]
[82.55452728 102.89350891]
[68.11255646 98.84019470]
[53.67057800 94.78688049]
[39.22860336 90.73356628]
[24.78662872 86.68025208]
[10.34465408 82.62693024]
[-4.09732103 78.57361603]
[-18.61847687 74.81382751]
[-33.21285248 71.34911346]
[-47.80722427 67.88439941]
[-62.40159988 64.41968536]
[-77.95002747 69.63296509]
[-90.05824280 58.57299042]
[-86.27035522 42.61730194]
[-70.48300934 38.17975235]
[-58.93688202 49.82530975]
[-44.34251022 53.29002380]
[-29.74813461 56.75474167]
[-15.15376186 60.21945572]
[-10.64541149 58.48786926]
[-4.99899387 59.61196136]
[-0.04400550 64.13164520]
[14.39796925 68.18495941]
[28.83994484 72.23827362]
[43.28191757 76.29158783]
[57.72389221 80.34490204]
[72.16587067 84.39821625]
[86.60784149 88.45153809]
[99.57281494 80.90769958]
[103.18524933 66.34918213]
[106.79769135 51.79066849]
[105.31679535 45.24953842]
[107.12963867 39.78517914]
[110.86280060 36.72133636]
[115.06226349 22.32118034]
[119.26171875 7.92102289]
[105.77317810 1.27043986]
[93.64452362 -7.62152004]
[83.24434662 -18.48464012]
[74.88868713 -30.98880196]
[68.83146667 -44.75402069]
[65.25675964 -59.36198425]
[64.27319336 -74.36877441]
[65.91065979 -89.31835175]
[70.11940002 -103.75640869]
[76.77151489 -117.24420166]
[85.66484833 -129.37184143]
[96.52915192 -139.77079773]
[109.03425598 -148.12503052]
[122.80016327 -154.18069458]
[137.40853882 -157.75373840]
[152.41543579 -158.73561096]
[167.36482239 -157.09643555]
[181.80241394 -152.88606262]
[195.28944397 -146.23242188]
[207.41607666 -137.33770752]
[217.81379700 -126.47223663]
[226.16661072 -113.96617889]
[232.22071838 -100.19958496]
[235.79211426 -85.59081268]
[236.77226257 -70.58380127]
[235.13140869 -55.63459396]
[230.91940308 -41.19749069]
[224.26422119 -27.71120644]
[215.36813354 -15.58558178]
[204.50148010 -5.18909788]
[191.99447632 3.16230655]
[178.22720337 9.21484280]
[163.61802673 12.78458023]
[148.61090088 13.76303864]
[133.66188049 12.12048435]
[129.46241760 26.52064133]
[125.26295471 40.92079926]
[121.35620117 55.40310669]
[117.74376678 69.96162415]
[114.13132477 84.52013397]
[117.36247253 95.38159180]
[114.25444031 104.58100891]
[107.61489105 109.24677277]
[111.81435394 123.64692688]
[116.01381683 138.04708862]
[120.21327972 152.44723511]
[125.65071869 159.86178589]
[124.34874725 167.18193054]
[128.25550842 181.66423035]
[138.91571045 192.21694946]
[153.43687439 195.97674561]
[167.95802307 199.73652649]
[181.44886780 191.50410461]
[196.78965759 195.30351257]
[204.87899780 208.88063049]
[200.91760254 224.18040466]
[187.25572205 232.12573242]
[171.99868774 228.00280762]
[164.19824219 214.25769043]
[149.67707825 210.49789429]
[135.15592957 206.73811340]
[129.22509766 211.32890320]
[117.36347198 220.51049805]
[111.43264771 225.10128784]
[111.43264771 240.10128784]
[111.43264771 255.10128784]
[111.43264771 270.10128784]
[111.43264771 285.10128784]
[111.43264771 300.10128784]
[111.43264771 315.10128784]
[111.43264771 330.10128784]
[111.43264771 345.10128784]
[111.43264771 360.10128784]
[111.43264771 375.10128784]
[111.43264771 390.10128784]
[126.09790802 393.56927490]
[139.56782532 400.32635498]
[151.11598206 410.00811768]
[160.11959839 422.09246826]
[166.09312439 435.92770386]
[168.71441650 450.76770020]
[167.84211731 465.81216431]
[163.52323914 480.24975586]
[155.99073792 493.30187988]
[145.65080261 504.26464844]
[133.06105042 512.54687500]
[118.90045166 517.70184326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[26 116]
[27 115]
[28 113]
[29 112]
[30 111]
[31 110]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 50]
[40 49]
[41 48]
[42 47]
[60 107]
[61 106]
[62 105]
[65 104]
[66 103]
[67 102]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
