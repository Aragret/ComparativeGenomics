%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUACCGGGGGGGGGGAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUAxxxxxxxxxxCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCCCCCCCCCCCUCCCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[103.88482666 359.97976685]
[90.03888702 353.96374512]
[78.33022308 344.43432617]
[69.62770081 332.09866333]
[64.57710266 317.87213135]
[63.55320740 302.81045532]
[66.63201141 288.03128052]
[73.58502960 274.63137817]
[83.89631653 263.60504150]
[96.80069733 255.77052307]
[111.34058380 251.70921326]
[111.34058380 236.70921326]
[111.34058380 221.70921326]
[111.34058380 206.70921326]
[111.34058380 191.70921326]
[111.34058380 176.70921326]
[111.34058380 161.70921326]
[111.34058380 146.70921326]
[111.34058380 131.70921326]
[111.34058380 116.70921326]
[96.26186371 117.73313904]
[86.39170074 108.51261902]
[71.43144989 109.60392761]
[56.47120285 110.69523621]
[48.23582840 123.71387482]
[34.07925415 129.32142639]
[19.50760269 125.56230927]
[10.05674267 114.08105469]
[-3.14393830 122.80186462]
[-16.40040207 116.01103210]
[-31.36065102 117.10234070]
[-46.32089996 118.19364929]
[-61.28114700 119.28495789]
[-76.24139404 120.37627411]
[-91.59865570 127.55895233]
[-102.75194550 114.79021454]
[-93.56976318 100.53807068]
[-77.33271027 105.41602325]
[-62.37245941 104.32471466]
[-47.41220856 103.23339844]
[-32.45196152 102.14208984]
[-17.49171257 101.05078125]
[-5.36108875 92.40802765]
[8.96543217 99.12080383]
[16.65005493 86.38955688]
[30.52190971 80.55555725]
[45.34240341 84.04931641]
[55.37989044 95.73499298]
[70.34014130 94.64367676]
[85.30038452 93.55236816]
[100.75921631 81.89305115]
[119.10756683 93.46490479]
[128.12509155 81.47806549]
[137.14262390 69.49123383]
[146.16015625 57.50440216]
[155.17768860 45.51757050]
[162.08468628 32.20241547]
[166.69024658 17.92695427]
[171.29580688 3.65149426]
[175.90138245 -10.62396622]
[180.50694275 -24.89942741]
[169.98786926 -31.79546547]
[162.09681702 -42.15790176]
[157.96942139 -54.98207474]
[158.35707092 -68.89589691]
[163.51052856 -82.30635834]
[173.11885071 -93.58181000]
[186.31462097 -101.24920654]
[186.62667847 -116.24595642]
[172.82833862 -122.68999481]
[162.84884644 -134.19346619]
[158.41722107 -148.76332092]
[160.30126953 -163.87524414]
[168.17456055 -176.91099548]
[180.67300415 -185.61207581]
[195.63117981 -188.47096252]
[210.45747375 -184.99230957]
[222.58314514 -175.77885437]
[229.90734863 -162.42686462]
[231.16113281 -147.24963379]
[226.12727356 -132.87675476]
[215.67788696 -121.79837036]
[201.62342834 -115.93390656]
[201.31137085 -100.93714905]
[208.20256042 -97.97716522]
[220.22041321 -106.95333099]
[221.98493958 -92.05720520]
[228.87614441 -89.09722137]
[239.53776550 -99.64851379]
[250.19938660 -110.19980621]
[260.86102295 -120.75109100]
[271.52264404 -131.30238342]
[275.32510376 -147.25460815]
[291.11651611 -151.67771912]
[302.65197754 -140.02160645]
[298.06484985 -124.27708435]
[282.07394409 -120.64076233]
[271.41229248 -110.08946991]
[260.75067139 -99.53817749]
[250.08905029 -88.98688507]
[239.42742920 -78.43560028]
[242.39743042 -54.47629166]
[232.99824524 -33.60343170]
[215.14515686 -21.37233925]
[194.78239441 -20.29386330]
[190.17683411 -6.01840162]
[185.57127380 8.25705910]
[180.96571350 22.53252029]
[176.36013794 36.80797958]
[187.91001892 27.23717117]
[202.00415039 22.10340691]
[217.00381470 22.00358009]
[231.16502380 26.94930267]
[242.84126282 36.36553955]
[250.67494202 49.15746689]
[253.75524902 63.83778381]
[251.72404480 78.69962311]
[244.81747437 92.01500702]
[233.83859253 102.23576355]
[220.06387329 108.17354584]
[205.09490967 109.13796234]
[190.67211914 105.01688385]
[178.47244263 96.28946686]
[169.91430664 83.97044373]
[165.99278259 69.49212646]
[167.16452026 54.53510284]
[158.14698792 66.52193451]
[149.12945557 78.50876617]
[140.11192322 90.49559784]
[131.09439087 102.48242950]
[126.34058380 116.70921326]
[126.34058380 131.70921326]
[126.34058380 146.70921326]
[126.34058380 161.70921326]
[126.34058380 176.70921326]
[126.34058380 191.70921326]
[126.34058380 206.70921326]
[126.34058380 221.70921326]
[126.34058380 236.70921326]
[126.34058380 251.70921326]
[140.88046265 255.77052307]
[153.78485107 263.60504150]
[164.09613037 274.63137817]
[171.04914856 288.03128052]
[174.12796021 302.81045532]
[173.10406494 317.87213135]
[168.05346680 332.09866333]
[159.35093689 344.43432617]
[147.64227295 353.96374512]
[133.79634094 359.97976685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 50]
[23 49]
[24 48]
[28 44]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[57 109]
[58 108]
[59 107]
[60 106]
[61 105]
[68 84]
[69 83]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
