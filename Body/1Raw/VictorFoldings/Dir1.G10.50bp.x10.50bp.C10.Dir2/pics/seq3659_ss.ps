%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCAACGGGGGGGGGGCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUxxxxxxxxxxCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACCCCCCCCCCCAACCUUAAC\
) } def
/len { sequence length } bind def

/coor [
[78.42103577 345.05267334]
[65.20083618 337.78021240]
[54.31403732 327.33322144]
[46.50290680 314.42395020]
[42.30002213 299.93264771]
[41.99195099 284.84732056]
[45.59969330 270.19647217]
[52.87726593 256.97909546]
[63.32847214 246.09632874]
[76.24073792 238.29017639]
[90.73367310 234.09289551]
[90.42161560 219.09614563]
[90.10955811 204.09938049]
[89.79750061 189.10263062]
[89.48544312 174.10588074]
[89.17339325 159.10913086]
[88.86133575 144.11236572]
[88.54927826 129.11561584]
[88.23722076 114.11886597]
[77.79740906 103.34806061]
[62.81769562 102.56821442]
[47.83798218 101.78836823]
[32.85826492 101.00852203]
[17.87855148 100.22867584]
[2.89883780 99.44882965]
[-12.08087635 98.66898346]
[-16.30660248 113.13411713]
[-23.75483704 126.23451996]
[-34.02390671 137.26370239]
[-46.56001282 145.62687683]
[-60.68709564 150.87304688]
[-75.64330292 152.71926880]
[-90.62207031 151.06597900]
[-104.81560516 146.00234985]
[-117.45846558 137.80145264]
[-127.86884308 126.90554047]
[-135.48532104 113.90222931]
[-139.89714050 99.49277496]
[-140.86639404 84.45424652]
[-138.34080505 69.59766388]
[-132.45655823 55.72421646]
[-123.53101349 43.58208847]
[-112.04550171 33.82608414]
[-98.61940765 26.98233414]
[-83.97680664 23.41991615]
[-68.90734100 23.33094406]
[-54.22369003 26.72021484]
[-40.71772766 33.40495300]
[-29.11781311 43.02465820]
[-20.04951477 55.06054688]
[-14.00187302 68.86354828]
[-11.30103111 83.68927002]
[3.67868280 84.46911621]
[18.65839767 85.24896240]
[33.63811111 86.02880859]
[48.61782455 86.80865479]
[63.59754181 87.58850098]
[78.57725525 88.36833954]
[88.55998230 77.17257690]
[86.07485962 62.37987137]
[83.58974457 47.58716202]
[68.58970642 45.80518341]
[54.69985199 39.86811829]
[43.04618073 30.25726128]
[34.57339859 17.75171661]
[29.96835518 3.36525559]
[29.60436440 -11.73587704]
[33.51092911 -26.32749748]
[41.37136459 -39.22673416]
[52.54845810 -49.38789749]
[66.13613129 -55.98727036]
[81.03290558 -58.48986816]
[96.03114319 -56.69282150]
[109.91502380 -50.74180603]
[121.55903625 -41.11924362]
[130.01925659 -28.60519600]
[134.60983276 -14.21411514]
[134.95866394 0.88737452]
[131.03742981 15.47506428]
[123.16404724 28.36639595]
[111.97675323 38.51632690]
[98.38245392 45.10204315]
[100.86756897 59.89475250]
[103.35269165 74.68746185]
[109.86083984 78.41491699]
[114.77194977 64.24166107]
[112.49562073 49.41539001]
[120.90847015 36.99669647]
[135.52159119 33.61191559]
[148.53775024 41.06708908]
[153.01181030 55.38430786]
[146.55651855 68.92422485]
[132.61711121 74.46223450]
[122.87715149 85.86982727]
[129.38529968 89.59728241]
[143.40202332 84.25576782]
[157.41873169 78.91425323]
[171.37911987 73.42722321]
[185.28167725 67.79526520]
[199.18423462 62.16331100]
[213.08679199 56.53135300]
[220.64056396 42.37790680]
[236.44145203 39.60095596]
[248.36836243 50.33074188]
[247.27200317 66.33628845]
[233.99339294 75.33951569]
[218.71875000 70.43390656]
[204.81619263 76.06586456]
[190.91363525 81.69782257]
[177.01107788 87.32978058]
[171.95983887 92.79151154]
[162.76023865 92.93096924]
[148.74353027 98.27247620]
[134.72682190 103.61399078]
[134.49279785 111.11034393]
[147.24284363 119.01200104]
[134.02474976 126.10303497]
[133.79074097 133.59938049]
[147.44697571 139.80479431]
[160.87699890 132.03215027]
[176.30725098 133.67140198]
[187.80447388 144.09222412]
[190.94775391 159.28759766]
[184.52842712 173.41459656]
[171.01487732 181.04109192]
[155.60331726 179.23454285]
[144.21981812 168.68960571]
[141.24156189 153.46102905]
[127.58532715 147.25563049]
[112.75335693 132.00152588]
[103.23397827 113.80680847]
[103.54602814 128.80355835]
[103.85808563 143.80032349]
[104.17014313 158.79707336]
[104.48220062 173.79382324]
[104.79425812 188.79057312]
[105.10631561 203.78733826]
[105.41836548 218.78408813]
[105.73042297 233.78083801]
[120.38541412 237.37161255]
[133.61122131 244.63386536]
[144.50608826 255.07246399]
[152.32719421 267.97567749]
[156.54125977 282.46374512]
[156.86097717 297.54882812]
[153.26455688 312.20245361]
[145.99719238 325.42544556]
[135.55439758 336.31628418]
[122.64816284 344.13238525]
[108.15847015 348.34088135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[59 84]
[60 83]
[61 82]
[95 114]
[96 113]
[97 112]
[98 110]
[99 109]
[100 108]
[101 107]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
