%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAAUCCUAGGGGGGGGGGUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGxxxxxxxxxxACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCCCCCCCCCCCACAAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[80.28038025 365.46499634]
[69.06494141 355.39965820]
[60.47354507 343.01885986]
[54.96950150 328.99023438]
[52.84963989 314.07034302]
[54.22828674 299.06381226]
[59.03108597 284.77990723]
[66.99903107 271.98895264]
[77.70242310 261.38073730]
[90.56404114 253.52737427]
[104.89027405 248.85234070]
[103.64339447 233.90426636]
[102.39652252 218.95617676]
[101.14965057 204.00808716]
[99.90277100 189.05999756]
[98.65589905 174.11190796]
[97.40902710 159.16381836]
[96.16214752 144.21574402]
[94.91527557 129.26765442]
[93.66840363 114.31956482]
[87.03990173 100.86360168]
[75.94858551 90.76494598]
[64.85726929 80.66629791]
[53.76595688 70.56764984]
[40.82690048 70.38122559]
[31.79147911 61.68754578]
[31.15009880 49.56748199]
[20.27127266 39.24028015]
[7.74531078 30.98798943]
[-6.03707075 25.06802559]
[-19.81945229 19.14806366]
[-33.60183334 13.22809982]
[-30.91748619 27.98595428]
[-40.62034988 39.42511368]
[-55.61841965 39.18448257]
[-64.94931793 27.43993568]
[-61.79291534 12.77579212]
[-48.45693970 5.91037464]
[-61.55009460 -1.40873086]
[-74.64324951 -8.72783661]
[-87.83432770 -0.98556274]
[-103.02928925 -0.88611352]
[-116.14669037 -8.35606194]
[-123.71323395 -21.30223656]
[-123.78326416 -36.19722366]
[-136.87641907 -43.51633072]
[-149.96957397 -50.83543396]
[-165.73614502 -47.86981201]
[-177.79045105 -58.45626450]
[-176.88548279 -74.47377014]
[-163.71543884 -83.63507843]
[-148.38325500 -78.91240692]
[-142.65046692 -63.92858887]
[-129.55731201 -56.60948563]
[-116.46415710 -49.29037857]
[-103.73956299 -57.03314209]
[-88.74813843 -57.36935806]
[-75.51379395 -50.10861206]
[-67.63895416 -37.11308670]
[-67.32414246 -21.82099152]
[-54.23099136 -14.50188541]
[-41.13783646 -7.18277979]
[-27.68186951 -0.55428118]
[-13.89948845 5.36568213]
[-0.11710744 11.28564548]
[13.66527367 17.20560837]
[5.12474251 4.87437439]
[0.96292150 -9.53670597]
[1.61446846 -24.52254868]
[7.01133633 -38.51804352]
[16.58987999 -50.06150436]
[29.34972191 -57.94734192]
[43.95822906 -61.35196686]
[58.88970184 -59.91979599]
[72.58470917 -53.80041122]
[83.61293793 -43.63291168]
[90.82262421 -30.47918701]
[93.46078491 -15.71300602]
[91.25189209 -0.87653762]
[84.42664337 12.48070526]
[73.69786072 22.96370125]
[60.18604660 29.47761154]
[45.30237961 31.34212685]
[30.59847832 28.36145401]
[41.47730255 38.68865967]
[58.71517944 41.82801056]
[63.86460495 59.47633362]
[74.95591736 69.57498169]
[86.04723358 79.67362976]
[97.13854980 89.77228546]
[104.32059479 85.14196014]
[115.11935425 86.41425323]
[129.88540649 83.77539062]
[144.65147400 81.13652802]
[159.35943604 78.19104004]
[174.00292969 74.94021606]
[188.64643860 71.68939209]
[203.28993225 68.43856812]
[217.93344116 65.18773651]
[232.57693481 61.93691254]
[247.18583679 58.53393555]
[261.75854492 54.97917557]
[276.33123779 51.42441177]
[290.90393066 47.86965179]
[298.89733887 34.23582458]
[314.21096802 30.32833481]
[327.75952148 38.46542740]
[331.50488281 53.81950760]
[323.22500610 67.28127289]
[307.83218384 70.86409760]
[294.45870972 62.44235229]
[279.88598633 65.99711609]
[265.31329346 69.55187988]
[250.74058533 73.10663605]
[244.95019531 77.77750397]
[235.82775879 76.58041382]
[221.18426514 79.83123779]
[206.54075623 83.08206940]
[191.89726257 86.33289337]
[177.25375366 89.58371735]
[162.61026001 92.83454132]
[159.30676270 96.36476135]
[153.72796631 97.81681824]
[147.29032898 95.90258026]
[132.52427673 98.54144287]
[117.75822449 101.18031311]
[108.61648560 113.07269287]
[109.86336517 128.02078247]
[111.11023712 142.96885681]
[112.35710907 157.91694641]
[113.60398865 172.86503601]
[114.85086060 187.81312561]
[116.09773254 202.76121521]
[117.34461212 217.70930481]
[118.59148407 232.65737915]
[119.83835602 247.60546875]
[134.74113464 249.84239197]
[148.72612000 255.45640564]
[161.03910828 264.14471436]
[171.01608276 275.43884277]
[178.11898804 288.72964478]
[181.96478271 303.30038452]
[182.34605408 318.36529541]
[179.24226379 333.11190796]
[172.82078552 346.74502563]
[163.42790222 358.52935791]
[151.57019043 367.82943726]
[137.88710022 374.14367676]
[123.11656189 377.13162231]
[108.05511475 376.63208008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 90]
[22 89]
[23 88]
[24 87]
[27 85]
[28 84]
[29 66]
[30 65]
[31 64]
[32 63]
[38 62]
[39 61]
[40 60]
[45 55]
[46 54]
[47 53]
[92 126]
[93 125]
[94 124]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
