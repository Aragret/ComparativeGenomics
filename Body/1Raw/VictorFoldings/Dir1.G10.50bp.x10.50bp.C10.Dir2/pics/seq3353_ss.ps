%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCUAAUGGGGGGGGGGGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAxxxxxxxxxxAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACCCCCCCCCCCAUUACUAAU\
) } def
/len { sequence length } bind def

/coor [
[78.67617035 552.70977783]
[64.83023071 546.69372559]
[53.12157059 537.16430664]
[44.41904831 524.82867432]
[39.36844635 510.60211182]
[38.34455490 495.54043579]
[41.42335129 480.76129150]
[48.37637329 467.36135864]
[58.68766022 456.33502197]
[71.59204102 448.50051880]
[86.13192749 444.43920898]
[86.13192749 429.43920898]
[86.13192749 414.43920898]
[86.13192749 399.43920898]
[86.13192749 384.43920898]
[86.13192749 369.43920898]
[86.13192749 354.43920898]
[86.13192749 339.43920898]
[86.13192749 324.43920898]
[86.13192749 309.43920898]
[72.72633362 306.00555420]
[60.53440094 299.43807983]
[50.27693558 290.11953735]
[42.56166077 278.59561157]
[37.84725952 265.54278564]
[36.41607285 251.72866821]
[38.35721207 237.96690369]
[43.56102371 225.06918335]
[51.72526932 213.79742432]
[62.37267685 204.81872559]
[74.87883759 198.66589355]
[88.50883484 195.70585632]
[89.13281250 180.71884155]
[89.75679016 165.73182678]
[79.51435852 154.97877502]
[79.93367004 139.77091980]
[91.28191376 129.10061646]
[91.90589142 114.11360931]
[83.73806000 99.49233246]
[92.80198669 85.40900421]
[93.11404419 70.41224670]
[93.42610168 55.41549683]
[93.73815918 40.41874313]
[94.05021667 25.42198944]
[93.73815918 10.42523575]
[92.80252838 -4.54555607]
[84.21950531 -17.83624077]
[91.14787292 -31.02134514]
[90.21224976 -45.99213791]
[89.27661896 -60.96292877]
[88.34098816 -75.93372345]
[73.48213959 -78.38737488]
[59.54861069 -84.08345032]
[47.23799896 -92.73329163]
[37.16585541 -103.90045166]
[29.83494377 -117.02272034]
[25.61011314 -131.44041443]
[24.70016479 -146.42955017]
[27.14752769 -161.23817444]
[32.82628250 -175.12413025]
[41.44865799 -187.39222717]
[52.57957840 -197.42903137]
[65.65865326 -204.73356628]
[80.02836609 -208.94229126]
[79.09273529 -223.91308594]
[78.15710449 -238.88386536]
[63.68098831 -243.44528198]
[51.83262253 -252.93109131]
[44.21440506 -266.05844116]
[41.85663986 -281.05194092]
[45.07818985 -295.88388062]
[53.44337082 -308.54830933]
[65.82086182 -317.33251953]
[80.53670502 -321.04849243]
[95.60070038 -319.19366455]
[108.97557831 -312.01892090]
[118.85248566 -300.49453735]
[123.89565277 -286.17913818]
[123.42303467 -271.00872803]
[117.49855804 -257.03500366]
[106.92343903 -246.14779663]
[93.12789917 -239.81950378]
[94.06352234 -224.84870911]
[94.99915314 -209.87791443]
[109.78106689 -207.49108887]
[123.66783905 -201.87184143]
[135.96180725 -193.29901123]
[146.04455566 -182.19993591]
[153.40802002 -169.12907410]
[157.68013000 -154.74038696]
[158.64352417 -139.75459290]
[156.24667358 -124.92306519]
[150.60662842 -110.99015045]
[142.00326538 -98.65583038]
[130.86541748 -88.54053497]
[117.74951172 -81.15395355]
[103.31178284 -76.86934662]
[104.24740601 -61.89855576]
[105.18303680 -46.92776489]
[106.11866760 -31.95697403]
[114.63476562 -19.73710060]
[107.77332306 -5.48118448]
[108.70894623 9.48960686]
[110.78950500 11.45902634]
[112.18891144 14.39767456]
[112.52388000 18.04043198]
[111.51792908 21.98493576]
[109.04696655 25.73404503]
[108.73490906 40.73080063]
[108.42285919 55.72755432]
[108.11080170 70.72430420]
[107.79874420 85.72106171]
[115.35920715 94.63314056]
[114.99454498 106.31444550]
[106.89290619 114.73758698]
[106.26892853 129.72459412]
[116.69093323 141.30128479]
[115.84463501 156.49136353]
[104.74380493 166.35580444]
[104.11982727 181.34281921]
[103.49584961 196.32983398]
[118.92951202 201.39863586]
[132.31584167 210.57719421]
[142.58892822 223.12519836]
[148.93339539 238.03443909]
[150.84913635 254.10981750]
[148.19070435 270.06509399]
[141.17831421 284.62585449]
[130.37966919 296.63122559]
[116.66396332 305.12655640]
[101.13192749 309.43920898]
[101.13192749 324.43920898]
[101.13192749 339.43920898]
[101.13192749 354.43920898]
[101.13192749 369.43920898]
[101.13192749 384.43920898]
[101.13192749 399.43920898]
[101.13192749 414.43920898]
[101.13192749 429.43920898]
[101.13192749 444.43920898]
[115.67181396 448.50051880]
[128.57618713 456.33502197]
[138.88748169 467.36135864]
[145.84049988 480.76129150]
[148.91929626 495.54043579]
[147.89540100 510.60211182]
[142.84480286 524.82867432]
[134.14228821 537.16430664]
[122.43361664 546.69372559]
[108.58768463 552.70977783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 121]
[33 120]
[34 119]
[37 116]
[38 115]
[40 112]
[41 111]
[42 110]
[43 109]
[44 108]
[45 103]
[46 102]
[48 100]
[49 99]
[50 98]
[51 97]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
