%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACUAAAGGGGGGGGGGUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCxxxxxxxxxxACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCCCCCCCCCCCACUAAA\
) } def
/len { sequence length } bind def

/coor [
[83.59407043 400.75924683]
[69.74813080 394.74322510]
[58.03947067 385.21380615]
[49.33694839 372.87814331]
[44.28634644 358.65161133]
[43.26245499 343.58993530]
[46.34125519 328.81079102]
[53.29427338 315.41085815]
[63.60556030 304.38452148]
[76.50994110 296.55001831]
[91.04982758 292.48870850]
[91.04982758 277.48870850]
[91.04982758 262.48870850]
[91.04982758 247.48869324]
[91.04982758 232.48869324]
[91.04982758 217.48869324]
[91.04982758 202.48869324]
[91.04982758 187.48869324]
[91.04982758 172.48869324]
[91.04982758 157.48869324]
[91.04982758 142.48869324]
[88.31945038 138.49864197]
[88.11095428 132.73774719]
[91.37487030 126.86796570]
[91.99884796 111.88095093]
[85.68845367 99.40414429]
[93.01413727 87.49507141]
[93.63811493 72.50805664]
[90.85483551 63.73849869]
[94.43418884 57.21669388]
[95.36981201 42.24590302]
[96.30544281 27.27511024]
[97.24107361 12.30431938]
[82.36730194 10.31437778]
[67.67095184 7.28020763]
[53.22523499 3.21692610]
[39.10212708 -1.85522473]
[25.37198448 -7.91097450]
[12.10321140 -14.92015457]
[-0.63808626 -22.84784317]
[-12.78843117 -31.65454865]
[-24.28729248 -41.29639053]
[-35.07738113 -51.72533798]
[-45.10493851 -62.88943100]
[-54.32001114 -74.73305511]
[-62.67668915 -87.19719696]
[-70.13333893 -100.21976471]
[-76.65280914 -113.73587799]
[-82.20262909 -127.67820740]
[-86.75513458 -141.97727966]
[-90.28765869 -156.56187439]
[-92.78259277 -171.35931396]
[-94.22750854 -186.29588318]
[-94.61521912 -201.29716492]
[-93.94377899 -216.28843689]
[-92.21653748 -231.19499207]
[-89.44210052 -245.94258118]
[-85.63428497 -260.45773315]
[-80.81207275 -274.66812134]
[-74.99948120 -288.50296021]
[-68.22547150 -301.89331055]
[-60.52378464 -314.77249146]
[-51.93280029 -327.07629395]
[-42.49530792 -338.74346924]
[-32.25833511 -349.71585083]
[-21.27287674 -359.93881226]
[-9.59366322 -369.36135864]
[2.72111821 -377.93664551]
[15.61011696 -385.62185669]
[29.00911903 -392.37875366]
[42.85137177 -398.17367554]
[57.06790924 -402.97772217]
[71.58791351 -406.76696777]
[86.33903503 -409.52255249]
[101.24778748 -411.23077393]
[116.23990631 -411.88305664]
[131.24067688 -411.47616577]
[146.17539978 -410.01217651]
[160.96963501 -407.49832153]
[175.54969788 -403.94717407]
[189.84294128 -399.37640381]
[203.77816772 -393.80877686]
[217.28594971 -387.27203369]
[230.29898071 -379.79876709]
[242.75242615 -371.42614746]
[254.58425903 -362.19595337]
[265.73553467 -352.15414429]
[276.15069580 -341.35073853]
[285.77783203 -329.83956909]
[294.56900024 -317.67797852]
[302.48040771 -304.92657471]
[309.47262573 -291.64883423]
[315.51083374 -277.91098022]
[320.56494141 -263.78140259]
[324.60974121 -249.33050537]
[327.62515259 -234.63029480]
[329.59606934 -219.75398254]
[330.51272583 -204.77571106]
[330.37057495 -189.77009583]
[329.17025757 -174.81187439]
[326.91778564 -159.97560120]
[323.62438965 -145.33515930]
[319.30648804 -130.96350098]
[313.98556519 -116.93222046]
[307.68814087 -103.31123352]
[300.44558716 -90.16838837]
[292.29397583 -77.56916809]
[283.27392578 -65.57634735]
[273.43041992 -54.24965668]
[262.81240845 -43.64554214]
[251.47286987 -33.81682968]
[239.46826172 -24.81247902]
[226.85839844 -16.67735672]
[213.70610046 -9.45199108]
[200.07688904 -3.17237735]
[186.03866577 2.13019919]
[171.66137695 6.42932129]
[157.01664734 9.70357037]
[142.17742920 11.93663406]
[127.21765900 13.11738682]
[112.21186066 13.23994732]
[111.27623749 28.21073914]
[110.34060669 43.18153000]
[109.40497589 58.15232086]
[108.62512970 73.13203430]
[108.00115204 88.11904907]
[114.31154633 100.59585571]
[106.98586273 112.50492859]
[106.36188507 127.49194336]
[106.04982758 142.48869324]
[106.04982758 157.48869324]
[106.04982758 172.48869324]
[106.04982758 187.48869324]
[106.04982758 202.48869324]
[106.04982758 217.48869324]
[106.04982758 232.48869324]
[106.04982758 247.48869324]
[106.04982758 262.48870850]
[106.04982758 277.48870850]
[106.04982758 292.48870850]
[120.58971405 296.55001831]
[133.49409485 304.38452148]
[143.80537415 315.41085815]
[150.75840759 328.81079102]
[153.83720398 343.58993530]
[152.81330872 358.65161133]
[147.76271057 372.87814331]
[139.06018066 385.21380615]
[127.35152435 394.74322510]
[113.50558472 400.75924683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[27 126]
[28 125]
[30 124]
[31 123]
[32 122]
[33 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
