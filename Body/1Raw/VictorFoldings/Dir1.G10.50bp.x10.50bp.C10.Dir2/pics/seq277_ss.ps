%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCAAACCCCGGGGGGGGGGCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCxxxxxxxxxxGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCCCCCCCCCCCAACCAAACCCC\
) } def
/len { sequence length } bind def

/coor [
[39.67763138 318.47183228]
[28.06541634 314.92822266]
[16.65961647 310.76791382]
[5.49295902 306.00277710]
[-5.40251446 300.64654541]
[-15.99553967 294.71456909]
[-26.25572014 288.22384644]
[-36.15361404 281.19305420]
[-45.66082001 273.64230347]
[-54.75006104 265.59332275]
[-63.39524841 257.06915283]
[-71.57157898 248.09429932]
[-83.24469757 257.51440430]
[-94.91781616 266.93450928]
[-106.59093475 276.35461426]
[-118.26404572 285.77471924]
[-129.93716431 295.19479370]
[-141.61027527 304.61489868]
[-153.28340149 314.03500366]
[-164.95651245 323.45510864]
[-173.48550415 338.10751343]
[-189.92634583 333.96801758]
[-190.49989319 317.02377319]
[-174.37661743 311.78201294]
[-162.70350647 302.36190796]
[-151.03038025 292.94180298]
[-139.35726929 283.52169800]
[-127.68415070 274.10159302]
[-116.01103210 264.68148804]
[-104.33792114 255.26138306]
[-92.66480255 245.84127808]
[-80.99168396 236.42117310]
[-101.55954742 203.64591980]
[-116.25251770 167.84967041]
[-124.64232635 130.07579041]
[-126.48443604 91.42528534]
[-141.44671631 90.36209106]
[-156.40898132 89.29888916]
[-170.91184998 96.95388794]
[-184.64672852 87.99369812]
[-183.48435974 71.63579559]
[-168.62049866 64.70779419]
[-155.34579468 74.33661652]
[-140.38351440 75.39981079]
[-125.42124176 76.46301270]
[-123.95767975 65.19074249]
[-121.93080139 54.00602722]
[-119.34571075 42.93700027]
[-116.20890808 32.01150131]
[-112.52827454 21.25701141]
[-108.31308746 10.70058250]
[-103.57392883 0.36876470]
[-98.32273102 -9.71245384]
[-92.57269287 -19.51771545]
[-86.33828735 -29.02235985]
[-79.63519287 -38.20247650]
[-72.48026276 -47.03498077]
[-64.89150238 -55.49765015]
[-56.88799667 -63.56919861]
[-48.48987579 -71.22933197]
[-39.71826172 -78.45877838]
[-30.59521866 -85.23934937]
[-21.14369583 -91.55399323]
[-11.38746166 -97.38682556]
[-1.35105968 -102.72318268]
[8.94026756 -107.54963684]
[19.46063423 -111.85404968]
[30.18357849 -115.62558746]
[41.08213043 -118.85477448]
[52.12887573 -121.53347778]
[63.29603195 -123.65496826]
[74.55550385 -125.21390533]
[85.87898254 -126.20637512]
[97.23797607 -126.62986755]
[108.60391235 -126.48332977]
[119.94821167 -125.76712799]
[131.24234009 -124.48305511]
[142.45787048 -122.63435364]
[153.56661987 -120.22566223]
[164.54063416 -117.26305389]
[175.35231018 -113.75395966]
[185.97445679 -109.70722198]
[196.38035583 -105.13301849]
[206.54383850 -100.04284668]
[216.43931580 -94.44950867]
[226.04193115 -88.36708069]
[235.32751465 -81.81086731]
[244.27272034 -74.79734039]
[252.85502625 -67.34416199]
[261.05285645 -59.47005844]
[268.84561157 -51.19485092]
[276.21368408 -42.53934479]
[283.13851929 -33.52531815]
[289.60272217 -24.17543602]
[295.58999634 -14.51322174]
[308.77828979 -21.65946770]
[321.96658325 -28.80571365]
[335.15490723 -35.95196152]
[334.88827515 -51.25514603]
[341.77432251 -64.92412567]
[354.23065186 -73.81787109]
[369.39486694 -75.89266205]
[383.78237915 -70.67173004]
[394.08703613 -59.35480118]
[397.94088745 -44.54242706]
[394.45834351 -29.63838005]
[384.43969727 -18.06750488]
[370.18713379 -12.48870277]
[354.97579956 -14.18393993]
[342.30114746 -22.76366425]
[329.11285400 -15.61741734]
[315.92453003 -8.47117138]
[302.73623657 -1.32492530]
[307.87112427 9.67659760]
[312.40954590 20.93729973]
[316.33847046 32.42486954]
[319.64660645 44.10634232]
[322.32446289 55.94820404]
[324.36437988 67.91646576]
[325.76049805 79.97679138]
[326.50878906 92.09457397]
[326.60711670 104.23503876]
[326.05523682 116.36335754]
[324.85467529 128.44471741]
[323.00891113 140.44445801]
[320.52322388 152.32814026]
[317.40475464 164.06167603]
[313.66244507 175.61137390]
[309.30706787 186.94412231]
[304.35107422 198.02738953]
[298.80868530 208.82936096]
[292.69583130 219.31906128]
[286.03005981 229.46636963]
[278.83047485 239.24218750]
[271.11773682 248.61845398]
[262.91400146 257.56826782]
[254.24276733 266.06594849]
[245.12895203 274.08709717]
[235.59869385 281.60870361]
[225.67933655 288.60919189]
[215.39935303 295.06848145]
[204.78822327 300.96804810]
[193.87641907 306.29092407]
[182.69523621 311.02185059]
[171.27676392 315.14727783]
[159.65376282 318.65533447]
[147.85958862 321.53598022]
[135.92808533 323.78091431]
[123.89348602 325.38372803]
[111.79032898 326.33981323]
[99.65333557 326.64642334]
[87.51733398 326.30270386]
[75.41716003 325.30960083]
[63.38751984 323.66995239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[36 45]
[37 44]
[38 43]
[95 113]
[96 112]
[97 111]
[98 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
