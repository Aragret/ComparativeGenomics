%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAAAAACGGGGGGGGGGAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGxxxxxxxxxxACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCCCCCCCCCCCUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[78.55626678 365.50042725]
[64.71032715 359.48440552]
[53.00166321 349.95498657]
[44.29913712 337.61932373]
[39.24853516 323.39279175]
[38.22464752 308.33111572]
[41.30344391 293.55194092]
[48.25646591 280.15203857]
[58.56774902 269.12570190]
[71.47212982 261.29116821]
[86.01201630 257.22985840]
[86.01201630 242.22987366]
[86.01201630 227.22987366]
[86.01201630 212.22987366]
[86.01201630 197.22987366]
[86.01201630 182.22987366]
[86.01201630 167.22987366]
[86.01201630 152.22987366]
[86.01201630 137.22987366]
[86.01201630 122.22986603]
[76.62485504 110.53024292]
[61.98135376 107.27941895]
[47.33785248 104.02859497]
[32.69435120 100.77777100]
[18.05085182 97.52693939]
[12.36080551 111.44568634]
[4.40018320 124.20250702]
[-5.60197306 135.43037415]
[-17.35788155 144.80622864]
[-30.52930069 152.06030273]
[-44.73726273 156.98390198]
[-59.57297516 159.43536377]
[-74.60958862 159.34413147]
[-89.41445923 156.71286011]
[-103.56163788 151.61723328]
[-116.64407349 144.20385742]
[-128.28535461 134.68606567]
[-138.15054321 123.33766174]
[-145.95579529 110.48519135]
[-151.47654724 96.49843597]
[-154.55393982 81.77982330]
[-155.09944153 66.75283051]
[-153.09735107 51.84982300]
[-148.60528564 37.49958420]
[-141.75247192 24.11500359]
[-132.73608398 12.08117962]
[-121.81555939 1.74435008]
[-109.30508423 -6.59807396]
[-95.56462097 -12.70606422]
[-80.98950195 -16.40388107]
[-65.99907684 -17.58513260]
[-51.02466583 -16.21582985]
[-36.49710464 -12.33537292]
[-22.83438110 -6.05540752]
[-10.42959690 2.44337749]
[0.36033544 12.91645622]
[9.22496891 25.06249619]
[15.90924931 38.53203201]
[20.22085762 52.93751907]
[22.03573990 67.86447906]
[21.30167770 82.88343811]
[35.94517899 86.13426971]
[50.58868027 89.38509369]
[65.23217773 92.63591766]
[79.87567902 95.88674164]
[96.93400574 64.28672791]
[104.38891602 51.27042007]
[111.84382629 38.25411224]
[119.29873657 25.23780251]
[126.75364685 12.22149277]
[117.54190826 3.29081225]
[110.58655548 -7.48008823]
[106.24271393 -19.53399467]
[104.73055267 -32.24837494]
[106.12408447 -44.96752548]
[110.34757996 -57.03639221]
[117.17966461 -67.83431244]
[126.26493073 -76.80690765]
[137.13240051 -83.49458313]
[149.21994019 -87.55603790]
[161.90338135 -88.78569794]
[174.52868652 -87.12410736]
[186.44573975 -82.66080475]
[194.95683289 -95.01237488]
[203.46792603 -107.36395264]
[197.41889954 -121.55594635]
[200.02542114 -136.76152039]
[210.45578003 -148.12863159]
[225.38166809 -152.03009033]
[240.04029846 -147.22091675]
[249.75415039 -135.23574829]
[251.42358398 -119.89897156]
[244.51586914 -106.10451508]
[231.23524475 -98.25413513]
[215.81950378 -98.85285950]
[207.30841064 -86.50128937]
[198.79731750 -74.14971161]
[209.70393372 -60.69851685]
[215.99148560 -44.54457855]
[217.05036926 -27.22532082]
[212.76908875 -10.39249611]
[203.54597473 4.34532833]
[190.25210571 15.57649517]
[174.14907837 22.22146606]
[156.76925659 23.63658333]
[139.76995850 19.67640305]
[132.31504822 32.69271088]
[124.86013794 45.70902252]
[117.40522766 58.72533035]
[109.95031738 71.74163818]
[112.32722473 78.85503387]
[124.38879395 69.93772125]
[136.59678650 78.65350342]
[132.07987976 92.95726776]
[117.08103943 93.08181000]
[119.45794678 100.19519806]
[133.24032593 106.11516571]
[147.02270508 112.03512573]
[160.80508423 117.95508575]
[174.58746338 123.87505341]
[189.96086121 119.28827667]
[203.04930115 128.56579590]
[203.81245422 144.59068298]
[191.66490173 155.07002258]
[175.92520142 151.96496582]
[168.66751099 137.65744019]
[154.88513184 131.73747253]
[141.10273743 125.81750488]
[127.32035828 119.89754486]
[113.53797913 113.97757721]
[101.01201630 122.22986603]
[101.01201630 137.22987366]
[101.01201630 152.22987366]
[101.01201630 167.22987366]
[101.01201630 182.22987366]
[101.01201630 197.22987366]
[101.01201630 212.22987366]
[101.01201630 227.22987366]
[101.01201630 242.22987366]
[101.01201630 257.22985840]
[115.55190277 261.29116821]
[128.45628357 269.12570190]
[138.76757812 280.15203857]
[145.72059631 293.55194092]
[148.79939270 308.33111572]
[147.77549744 323.39279175]
[142.72489929 337.61932373]
[134.02236938 349.95498657]
[122.31371307 359.48440552]
[108.46777344 365.50042725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[66 110]
[67 109]
[68 108]
[69 107]
[70 106]
[83 97]
[84 96]
[85 95]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
