%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGUCAUUAUUGGGGGGGGGGACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAxxxxxxxxxxACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCCCCCCCCCCCACGUCAUUAUU\
) } def
/len { sequence length } bind def

/coor [
[87.94024658 433.09896851]
[73.77964783 427.94396973]
[61.18990326 419.66174316]
[50.84996414 408.69897461]
[43.31745148 395.64685059]
[38.99858856 381.20925903]
[38.12627792 366.16479492]
[40.74757004 351.32479858]
[46.72109604 337.48956299]
[55.72471619 325.40521240]
[67.27287292 315.72341919]
[80.74279022 308.96636963]
[95.40805054 305.49838257]
[95.40805054 290.49838257]
[95.40805054 275.49838257]
[95.40805054 260.49838257]
[95.40805054 245.49838257]
[95.40805054 230.49838257]
[95.40805054 215.49838257]
[95.40805054 200.49838257]
[95.40805054 185.49838257]
[95.40805054 170.49838257]
[95.40805054 155.49838257]
[94.95207977 140.50531006]
[94.04056549 125.53303528]
[85.48796082 122.97889709]
[78.00787354 117.54966736]
[72.56632996 109.68973541]
[69.94738770 100.16641235]
[70.64627838 89.99631500]
[55.65320969 90.45228577]
[40.66014099 90.90824890]
[25.66707420 91.36421967]
[17.81311035 104.64273071]
[4.01678991 111.54671478]
[-11.31953049 109.87315369]
[-23.30208778 100.15605927]
[-28.10729027 85.49613190]
[-24.20181656 70.57128906]
[-12.83188725 60.14400482]
[2.37439203 57.54158401]
[16.56475449 63.59444809]
[25.21110725 76.37114716]
[40.20417404 75.91518402]
[55.19724274 75.45921326]
[70.19030762 75.00325012]
[81.86342621 65.58314514]
[85.47586823 51.02463150]
[73.93860626 29.30204201]
[68.87184143 15.18368816]
[63.80507660 1.06533480]
[58.73831177 -13.05301857]
[43.90200806 -10.57837486]
[28.86226845 -10.79283524]
[14.10255718 -13.68950748]
[0.09733859 -19.17527390]
[-12.70317650 -27.07379150]
[-23.88750648 -37.13115692]
[-33.09611893 -49.02406311]
[-40.03299713 -62.37020493]
[-44.47514725 -76.74055481]
[-46.27977753 -91.67317963]
[-45.38887024 -106.68803406]
[-41.83106613 -121.30247498]
[-35.72073364 -135.04669189]
[-27.25429916 -147.47888184]
[-16.70391846 -158.19938660]
[-4.40874338 -166.86360168]
[9.23598576 -173.19297791]
[23.79164696 -176.98408508]
[38.79033661 -178.11505127]
[53.74991226 -176.54949951]
[68.18947601 -172.33776855]
[81.64486694 -165.61524963]
[93.68354797 -156.59803772]
[103.91851807 -145.57600403]
[112.02076721 -132.90347290]
[117.72984314 -118.98778534]
[120.86222839 -104.27629852]
[121.31722260 -89.24190521]
[119.08020020 -74.36791992]
[114.22307587 -60.13246918]
[106.90198517 -46.99316025]
[97.35226440 -35.37237549]
[85.88090515 -25.64366913]
[72.85666656 -18.11978149]
[77.92343140 -4.00142860]
[82.99019623 10.11692429]
[88.05695343 24.23527908]
[102.06972504 29.58713722]
[115.25801849 22.44089127]
[119.85614014 7.55818129]
[133.33274841 0.49874344]
[147.49279785 4.97406483]
[160.68109131 -2.17218161]
[173.86940002 -9.31842804]
[187.05769348 -16.46467400]
[190.89068604 -21.96808243]
[196.14880371 -24.31282997]
[200.92843628 -23.62093735]
[214.39550781 -30.22685051]
[227.86257935 -36.83276367]
[234.39122009 -51.48733521]
[249.95474243 -55.38039398]
[262.61416626 -45.52552032]
[262.65826416 -29.48252869]
[250.05319214 -19.55822754]
[234.46849060 -23.36569405]
[221.00141907 -16.75978088]
[207.53436279 -10.15386963]
[194.20393372 -3.27637744]
[181.01564026 3.86986876]
[167.82734680 11.01611519]
[154.63905334 18.16236115]
[150.65608215 32.46870804]
[137.38307190 39.90388870]
[122.40426636 35.62918854]
[109.21596527 42.77543259]
[100.03437805 54.63706970]
[96.42194366 69.19557953]
[108.94926453 71.02358246]
[119.42823792 77.61227417]
[126.18885040 87.64309692]
[128.26377869 99.27412415]
[125.52195740 110.47638702]
[118.65317535 119.38758087]
[109.01284790 124.62152100]
[109.92436218 139.59379578]
[112.87597656 144.04135132]
[113.70228577 148.70796204]
[112.68418884 152.73312378]
[110.40805054 155.49838257]
[110.40805054 170.49838257]
[110.40805054 185.49838257]
[110.40805054 200.49838257]
[110.40805054 215.49838257]
[110.40805054 230.49838257]
[110.40805054 245.49838257]
[110.40805054 260.49838257]
[110.40805054 275.49838257]
[110.40805054 290.49838257]
[110.40805054 305.49838257]
[125.07331085 308.96636963]
[138.54322815 315.72341919]
[150.09138489 325.40521240]
[159.09500122 337.48956299]
[165.06852722 351.32479858]
[167.68981934 366.16479492]
[166.81750488 381.20925903]
[162.49864197 395.64685059]
[154.96612549 408.69897461]
[144.62619019 419.66174316]
[132.03645325 427.94396973]
[117.87584686 433.09896851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 128]
[25 127]
[30 46]
[31 45]
[32 44]
[33 43]
[47 120]
[48 119]
[49 89]
[50 88]
[51 87]
[52 86]
[90 118]
[91 117]
[94 114]
[95 113]
[96 112]
[97 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
