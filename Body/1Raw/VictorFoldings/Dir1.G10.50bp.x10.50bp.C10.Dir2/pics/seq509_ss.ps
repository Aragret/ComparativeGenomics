%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCCCCAGGGGGGGGGGACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUACCCCCCCCCCUCACACCCCA\
) } def
/len { sequence length } bind def

/coor [
[13.75951290 240.92480469]
[4.69315529 234.95861816]
[-3.96193004 228.41004944]
[-12.16839409 221.30735779]
[-19.89082336 213.68118286]
[-27.09589386 205.56446838]
[-33.75251389 196.99220276]
[-39.83195877 188.00138855]
[-45.30799484 178.63084412]
[-50.15699005 168.92097473]
[-64.05954742 174.55293274]
[-73.94498444 186.90560913]
[-88.64616394 184.51301575]
[-102.54872131 190.14497375]
[-116.45127869 195.77693176]
[-130.35383606 201.40888977]
[-144.25639343 207.04084778]
[-158.15895081 212.67280579]
[-172.06150818 218.30476379]
[-185.96405029 223.93672180]
[-199.86660767 229.56867981]
[-199.95021057 244.76937866]
[-205.84912109 258.77908325]
[-216.66378784 269.46136475]
[-230.74505615 275.18728638]
[-245.94564819 275.08367920]
[-259.94757080 269.16635132]
[-270.61563110 258.33764648]
[-276.32302856 244.24887085]
[-276.19943237 229.04843140]
[-270.26367188 215.05430603]
[-259.42095947 204.40051270]
[-245.32466125 198.71163940]
[-230.12440491 198.85523987]
[-216.13810730 204.80938721]
[-205.49856567 215.66612244]
[-191.59600830 210.03416443]
[-177.69345093 204.40220642]
[-163.79090881 198.77024841]
[-149.88835144 193.13829041]
[-135.98579407 187.50633240]
[-122.08323669 181.87437439]
[-108.18067932 176.24241638]
[-94.27812195 170.61047363]
[-85.38709259 158.66061401]
[-69.69150543 160.65037537]
[-55.78894806 155.01841736]
[-61.56346893 134.56106567]
[-64.66365051 113.53163147]
[-65.03816223 92.27821350]
[-62.68082428 71.15260315]
[-57.63063812 50.50450897]
[-49.97121429 30.67570686]
[-39.82932663 11.99442291]
[-27.37285995 -5.23011398]
[-12.80800247 -20.71278572]
[3.62415481 -34.19731140]
[21.65161133 -45.46048355]
[40.97596359 -54.31586075]
[61.27733231 -60.61686325]
[82.21967316 -64.25919342]
[81.28404236 -79.22998047]
[80.34841919 -94.20077515]
[79.41278839 -109.17156982]
[78.47715759 -124.14235687]
[77.54152679 -139.11314392]
[63.06541061 -143.67456055]
[51.21704865 -153.16036987]
[43.59883118 -166.28771973]
[41.24106598 -181.28123474]
[44.46261597 -196.11315918]
[52.82779694 -208.77760315]
[65.20528412 -217.56179810]
[79.92112732 -221.27777100]
[94.98512268 -219.42295837]
[108.36000061 -212.24819946]
[118.23690796 -200.72381592]
[123.28007507 -186.40841675]
[122.80746460 -171.23800659]
[116.88298035 -157.26429749]
[106.30786896 -146.37707520]
[92.51232147 -140.04878235]
[93.44795227 -125.07798767]
[94.38357544 -110.10719299]
[95.31920624 -95.13640594]
[96.25483704 -80.16561127]
[97.19046783 -65.19482422]
[112.13961029 -64.77212524]
[126.98928833 -62.99938965]
[141.61782837 -59.89114380]
[155.90539551 -55.47285843]
[169.73489380 -49.78072739]
[182.99304199 -42.86139297]
[195.57119751 -34.77154160]
[207.36630249 -25.57746506]
[218.28172302 -15.35448742]
[228.22801208 -4.18637133]
[237.12368774 7.83538055]
[244.89585876 20.61226845]
[251.48085022 34.03960800]
[256.82470703 48.00738525]
[260.88363647 62.40115356]
[263.62442017 77.10298157]
[278.55871582 75.70067596]
[293.49304199 74.29837799]
[308.42733765 72.89607239]
[323.36163330 71.49376678]
[338.29595947 70.09146118]
[349.59603882 58.70341110]
[365.52883911 60.58100891]
[373.87207031 74.28392029]
[368.22552490 89.30045319]
[352.92074585 94.11119843]
[339.69824219 85.02577209]
[324.76394653 86.42807770]
[309.82965088 87.83037567]
[294.89532471 89.23268127]
[279.96102905 90.63498688]
[265.02670288 92.03729248]
[265.19345093 102.88931274]
[264.64730835 113.72887421]
[263.39071655 124.50918579]
[261.42901611 135.18374634]
[258.77072144 145.70646667]
[255.42729187 156.03195190]
[251.41314697 166.11566162]
[246.74563599 175.91404724]
[241.44485474 185.38485718]
[235.53372192 194.48719788]
[229.03773499 203.18180847]
[221.98489380 211.43116760]
[214.40568542 219.19967651]
[206.33276367 226.45381165]
[197.80101013 233.16224670]
[188.84719849 239.29608154]
[179.51000977 244.82879639]
[169.82971191 249.73655701]
[159.84806824 253.99815369]
[149.60818481 257.59521484]
[139.15420532 260.51220703]
[128.53128052 262.73657227]
[117.78524017 264.25866699]
[106.96244812 265.07192993]
[96.10961151 265.17291260]
[85.27355957 264.56109619]
[74.50106049 263.23916626]
[63.83859253 261.21282959]
[53.33217239 258.49081421]
[43.02713394 255.08486938]
[32.96794510 251.00968933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 47]
[11 46]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
