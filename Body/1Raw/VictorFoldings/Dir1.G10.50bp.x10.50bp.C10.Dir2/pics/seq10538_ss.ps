%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUUACCGGGGGGGGGGGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCxxxxxxxxxxACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCCCCCCAUCCUUACC\
) } def
/len { sequence length } bind def

/coor [
[65.91930389 477.66217041]
[53.36108398 469.31100464]
[43.27486038 458.09857178]
[36.29466629 444.72964478]
[32.85928345 430.04467773]
[33.18466187 414.96670532]
[37.25034332 400.44357300]
[44.80076599 387.38824463]
[55.36129379 376.62133789]
[68.26808929 368.81970215]
[82.70981598 364.47375488]
[82.08583832 349.48675537]
[81.46186066 334.49972534]
[80.83788300 319.51269531]
[80.21390533 304.52569580]
[79.58992767 289.53866577]
[78.96595001 274.55166626]
[78.34197235 259.56463623]
[77.71799469 244.57762146]
[77.09401703 229.59060669]
[76.47003937 214.60359192]
[75.84606934 199.61657715]
[75.22209167 184.62956238]
[67.23431396 197.32583618]
[54.83644104 205.76934814]
[40.09671402 208.55151367]
[25.47404861 205.20820618]
[13.40783501 196.29718018]
[5.91098785 183.30497742]
[4.23414946 168.39900208]
[8.65705395 154.06588745]
[18.44186211 142.69674683]
[31.95624733 136.18817139]
[46.94570923 135.62597656]
[60.90966415 141.10392761]
[71.51861572 151.70817566]
[77.00251770 165.66830444]
[80.40549469 151.05940247]
[83.80847168 136.45051575]
[72.06467438 128.46794128]
[63.86174774 116.87697601]
[60.23942566 103.14682007]
[61.65685272 89.01779938]
[48.27056503 82.24968719]
[34.88428116 75.48157501]
[21.49799728 68.71345520]
[5.86844301 72.33238220]
[-6.61582088 62.25653076]
[-6.37793589 46.21524429]
[6.39961290 36.51401520]
[21.91498375 40.59480286]
[28.26611137 55.32717133]
[41.65239716 62.09528732]
[55.03868103 68.86340332]
[68.42496490 75.63151550]
[86.57538605 62.44223785]
[108.97389984 61.13774490]
[115.03691101 47.41769028]
[121.09992218 33.69763947]
[127.16294098 19.97758484]
[130.56591797 5.36869192]
[123.40937805 -8.74139500]
[131.66941833 -21.13578987]
[132.29339600 -36.12280655]
[132.91737366 -51.10982132]
[133.54135132 -66.09683990]
[126.38481140 -80.20692444]
[134.64485168 -92.60131836]
[135.26882935 -107.58834076]
[121.46444702 -113.95288849]
[111.15014648 -125.11907196]
[105.89877319 -139.38410950]
[106.51113129 -154.57270813]
[112.89382935 -168.36871338]
[124.07357025 -178.66831970]
[138.34550476 -183.90090942]
[153.53329468 -183.26858521]
[167.32087708 -176.86773682]
[177.60577393 -165.67445374]
[182.81959534 -151.39564514]
[182.16728210 -136.20870972]
[175.74830627 -122.42955780]
[164.54150391 -112.15939331]
[150.25584412 -106.96436310]
[149.63186646 -91.97734070]
[156.83303833 -78.93923187]
[148.52836609 -65.47286224]
[147.90438843 -50.48584366]
[147.28041077 -35.49882889]
[146.65643311 -20.51181221]
[153.85760498 -7.47369766]
[145.55293274 5.99266911]
[153.96498108 -6.42656708]
[165.74929810 -15.70718575]
[179.79432678 -20.97379303]
[194.77526855 -21.72961807]
[209.27905273 -17.90336800]
[221.93762207 -9.85595226]
[231.55693054 1.65355790]
[237.22966003 15.53952789]
[238.42071533 30.49216652]
[235.01776123 45.10106277]
[227.34179688 57.98824310]
[216.11682129 67.93811798]
[202.40164185 74.01216888]
[187.48995972 75.63745880]
[172.78829956 72.66069031]
[159.68339539 65.36263275]
[149.41137695 54.43169022]
[142.94113159 40.89891434]
[140.88299561 26.04059792]
[134.81997681 39.76065063]
[128.75695801 53.48070526]
[122.69395447 67.20075989]
[131.03094482 74.94234467]
[136.84307861 84.72277069]
[139.65742493 95.74625397]
[139.24501038 107.11583710]
[135.63937378 117.90644073]
[129.13391113 127.24006653]
[120.25792694 134.35726929]
[109.73364258 138.67895508]
[98.41736603 139.85350037]
[95.01438904 154.46238708]
[91.61140442 169.07127380]
[90.20910645 184.00558472]
[90.83308411 198.99259949]
[91.45706177 213.97961426]
[92.08103943 228.96662903]
[92.70501709 243.95364380]
[93.32899475 258.94067383]
[93.95297241 273.92767334]
[94.57694244 288.91470337]
[95.20092010 303.90170288]
[95.82489777 318.88873291]
[96.44887543 333.87573242]
[97.07285309 348.86276245]
[97.69683075 363.84979248]
[112.44983673 366.98022461]
[125.96047211 373.68197632]
[137.37945557 383.53375244]
[145.98896790 395.91629028]
[151.24781799 410.05120850]
[152.82542419 425.04992676]
[150.62261963 439.96966553]
[144.77786255 453.87252808]
[135.65858459 465.88458252]
[123.83801270 475.25073242]
[110.05920410 481.38223267]
[95.18830872 483.89364624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[37 125]
[38 124]
[39 123]
[43 55]
[44 54]
[45 53]
[46 52]
[57 114]
[58 113]
[59 112]
[60 111]
[61 92]
[63 90]
[64 89]
[65 88]
[66 87]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
