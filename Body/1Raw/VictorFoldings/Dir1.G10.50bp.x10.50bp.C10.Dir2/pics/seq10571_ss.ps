%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCAACUUGGGGGGGGGGUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCxxxxxxxxxxUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCCCCCCCCCCCUUCUCCACUU\
) } def
/len { sequence length } bind def

/coor [
[85.14403534 439.94839478]
[72.58581543 431.59722900]
[62.49959183 420.38479614]
[55.51939774 407.01586914]
[52.08401489 392.33087158]
[52.40939331 377.25292969]
[56.47507477 362.72979736]
[64.02549744 349.67446899]
[74.58602142 338.90756226]
[87.49282074 331.10592651]
[101.93454742 326.75997925]
[101.31056976 311.77294922]
[100.68659210 296.78594971]
[100.06261444 281.79891968]
[99.43863678 266.81192017]
[98.81465912 251.82489014]
[98.19068146 236.83787537]
[97.56670380 221.85086060]
[96.94272614 206.86384583]
[96.31874847 191.87683105]
[95.69477081 176.88981628]
[95.07079315 161.90280151]
[94.44681549 146.91578674]
[78.05349731 141.83634949]
[64.55639648 131.23587036]
[55.73669815 116.51328278]
[41.02873611 119.45877075]
[26.32077408 122.40425110]
[11.61281300 125.34973145]
[-3.09514809 128.29521179]
[-13.15162086 140.79508972]
[-29.19326019 140.58209229]
[-38.91429138 127.81960297]
[-34.85757446 112.29792023]
[-20.13507271 105.92395020]
[-6.04063082 113.58725739]
[8.66733074 110.64176941]
[23.37529182 107.69628906]
[38.08325577 104.75080872]
[52.79121399 101.80532837]
[53.33068848 92.65806580]
[55.62582779 83.78700256]
[42.53267288 76.46789551]
[29.43951797 69.14879608]
[16.34636307 61.82968521]
[2.78202677 69.17899323]
[-12.60063362 68.00540924]
[-24.89306641 58.68341064]
[-30.17280197 44.18761826]
[-26.75509453 29.14358902]
[-15.73052406 18.35181618]
[-0.61698943 15.25591373]
[13.76283550 20.84377480]
[22.82040024 33.33233261]
[23.66546822 48.73653412]
[36.75862503 56.05563736]
[49.85177612 63.37474442]
[62.94493103 70.69384766]
[74.90309906 59.97407913]
[89.76135254 53.87952042]
[105.80273438 53.11442947]
[121.17357635 57.76721573]
[129.93978882 45.59537888]
[138.70599365 33.42354202]
[147.47219849 21.25170517]
[156.23840332 9.07986832]
[165.00460815 -3.09196877]
[173.77082825 -15.26380539]
[182.53703308 -27.43564224]
[171.34284973 -39.79344177]
[163.11851501 -54.29088974]
[158.25811768 -70.22774506]
[156.99334717 -86.83491516]
[159.38246155 -103.31160736]
[165.30755615 -118.86389160]
[174.48045349 -132.74299622]
[186.45664978 -144.28135681]
[200.65692139 -152.92469788]
[216.39524841 -158.25868225]
[232.91204834 -160.02873230]
[249.41079712 -158.15228271]
[265.09643555 -152.72247314]
[272.82052612 -165.58087158]
[280.54458618 -178.43927002]
[288.26867676 -191.29768372]
[295.99276733 -204.15608215]
[295.73593140 -220.55322266]
[309.94485474 -228.74089050]
[324.00265503 -220.29634094]
[323.44784546 -203.90657043]
[308.85116577 -196.43199158]
[301.12707520 -183.57359314]
[293.40298462 -170.71519470]
[285.67892456 -157.85678101]
[277.95483398 -144.99838257]
[287.99084473 -136.05802917]
[296.28738403 -125.47863770]
[302.58108521 -113.59376526]
[306.67175293 -100.77848816]
[308.42877197 -87.43749237]
[307.79528809 -73.99231720]
[304.78988647 -60.86806488]
[299.50628662 -48.47991180]
[292.11019897 -37.22000122]
[282.83428955 -27.44503784]
[271.97082520 -19.46496391]
[259.86233521 -13.53315067]
[246.89103699 -9.83834743]
[233.46658325 -8.49867439]
[220.01318359 -9.55784798]
[206.95625305 -12.98375797]
[194.70886230 -18.66943550]
[185.94265747 -6.49759817]
[177.17645264 5.67423868]
[168.41024780 17.84607506]
[159.64404297 30.01791191]
[150.87782288 42.18975067]
[142.11161804 54.36158752]
[133.34541321 66.53342438]
[141.92475891 78.22288513]
[146.55477905 91.96376038]
[146.79931641 106.46166229]
[142.63533020 120.35086060]
[134.45506287 132.32301331]
[123.02912903 141.25030518]
[109.43383789 146.29180908]
[110.05781555 161.27882385]
[110.68179321 176.26583862]
[111.30577087 191.25285339]
[111.92974091 206.23986816]
[112.55371857 221.22688293]
[113.17769623 236.21389771]
[113.80167389 251.20091248]
[114.42565155 266.18792725]
[115.04962921 281.17495728]
[115.67360687 296.16195679]
[116.29758453 311.14898682]
[116.92156219 326.13598633]
[131.67457581 329.26644897]
[145.18521118 335.96820068]
[156.60418701 345.81997681]
[165.21369934 358.20251465]
[170.47254944 372.33740234]
[172.05015564 387.33615112]
[169.84735107 402.25588989]
[164.00259399 416.15875244]
[154.88331604 428.17080688]
[143.06274414 437.53695679]
[129.28393555 443.66845703]
[114.41303253 446.17987061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[42 58]
[43 57]
[44 56]
[45 55]
[62 119]
[63 118]
[64 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
