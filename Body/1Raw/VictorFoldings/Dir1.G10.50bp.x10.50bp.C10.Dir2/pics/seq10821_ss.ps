%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUCUAAACGGGGGGGGGGGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGxxxxxxxxxxAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCCCCCCCCCCCUACUAAAC\
) } def
/len { sequence length } bind def

/coor [
[98.89044952 303.02651978]
[92.18519592 289.60864258]
[86.62013245 275.67916870]
[82.23389435 261.33480835]
[79.05692291 246.67509460]
[77.11127472 231.80181885]
[76.41044617 216.81820679]
[76.95931244 201.82824707]
[78.75405121 186.93600464]
[81.78221893 172.24484253]
[86.02278900 157.85673523]
[91.44718933 143.86956787]
[82.27597046 156.76139832]
[67.46302795 155.20382690]
[53.90113068 161.61279297]
[40.33923721 168.02177429]
[26.77733994 174.43075562]
[17.60611725 187.32258606]
[2.79317641 185.76499939]
[-10.76871967 192.17398071]
[-24.33061600 198.58294678]
[-37.89251328 204.99192810]
[-51.45441055 211.40089417]
[-65.01630402 217.80987549]
[-70.10875702 232.77124023]
[-84.32564545 239.67456055]
[-99.23233032 234.42420959]
[-105.98495483 220.13513184]
[-100.57729340 205.28479004]
[-86.21762085 198.68362427]
[-71.42527771 204.24798584]
[-57.86338425 197.83900452]
[-44.30148697 191.43002319]
[-30.73959160 185.02105713]
[-17.17769623 178.61207581]
[-3.61579919 172.20310974]
[4.58538580 159.76968384]
[20.36836433 160.86885071]
[33.93025970 154.45988464]
[47.49215698 148.05090332]
[61.05405426 141.64192200]
[69.25524139 129.20851135]
[85.03821564 130.30767822]
[85.73023224 122.83966827]
[87.11425781 107.90365601]
[87.80626678 100.43565369]
[75.65293121 91.64380646]
[63.49959946 82.85196686]
[51.34626770 74.06012726]
[39.19293594 65.26828003]
[23.63001060 68.01981354]
[10.72780323 58.89245987]
[8.14096451 43.30131531]
[17.40421867 30.49632835]
[33.02184296 28.07447433]
[45.72817612 37.47259140]
[47.98477554 53.11494827]
[60.13811111 61.90679169]
[72.29144287 70.69863129]
[84.44477844 79.49047852]
[96.59810638 88.28231812]
[103.53455353 85.42998505]
[97.83011627 71.55701447]
[111.70318604 65.85280609]
[117.40743256 79.72532654]
[124.34387207 76.87299347]
[126.79679871 62.07491302]
[129.24972534 47.27683258]
[131.55059814 32.45435333]
[133.69917297 17.60902977]
[135.84776306 2.76370597]
[122.36849213 -4.13470602]
[111.86127472 -15.03778553]
[105.46585846 -28.76284599]
[103.87595367 -43.82109833]
[107.26403809 -58.57913208]
[115.26259613 -71.43611145]
[127.00399017 -80.99740601]
[141.21461487 -86.22586823]
[156.35299683 -86.55436707]
[170.77705383 -81.94726562]
[182.92216492 -72.90430450]
[191.47091675 -60.40640259]
[195.49598694 -45.80923080]
[194.56080627 -30.69618416]
[188.76678467 -16.70661545]
[178.74241638 -5.35800648]
[165.57508850 2.11863017]
[150.69308472 4.91228533]
[148.54450989 19.75760841]
[146.39591980 34.60293198]
[148.56381226 41.71717453]
[144.04780579 49.72976303]
[141.59487915 64.52783966]
[139.14195251 79.32592010]
[150.91815186 70.03500366]
[163.42686462 61.75659561]
[176.58128357 54.54816437]
[190.29006958 48.45974350]
[204.45809937 43.53359222]
[218.98701477 39.80390167]
[233.77597046 37.29656601]
[248.72232056 36.02898407]
[263.72232056 36.00995636]
[278.67181396 37.23961258]
[293.46710205 39.70942307]
[308.00543213 43.40223694]
[322.18591309 48.29243088]
[335.91009521 54.34605408]
[349.08276367 61.52108765]
[361.61242676 69.76773071]
[373.41217041 79.02873993]
[384.40005493 89.23983765]
[394.49981689 100.33013916]
[403.64135742 112.22267151]
[411.76119995 124.83488464]
[418.80303955 138.07923889]
[424.71792603 151.86378479]
[429.46484375 166.09286499]
[433.01086426 180.66770935]
[435.33132935 195.48713684]
[436.41015625 210.44828796]
[436.23983765 225.44731140]
[434.82159424 240.38011169]
[432.16522217 255.14303589]
[428.28921509 269.63360596]
[423.22042847 283.75122070]
[416.99404907 297.39791870]
[409.65332031 310.47897339]
[401.24917603 322.90356445]
[391.83996582 334.58544922]
[381.49099731 345.44357300]
[370.27407837 355.40255737]
[358.26712036 364.39324951]
[345.55340576 372.35327148]
[332.22125244 379.22735596]
[318.36312866 384.96777344]
[304.07525635 389.53472900]
[289.45684814 392.89648438]
[274.60928345 395.02972412]
[259.63571167 395.91961670]
[244.64002991 395.55999756]
[229.72631836 393.95336914]
[214.99810791 391.11087036]
[200.55761719 387.05224609]
[186.50509644 381.80566406]
[172.93807983 375.40756226]
[159.95072937 367.90228271]
[147.63320923 359.34201050]
[136.07101440 349.78610229]
[125.34438324 339.30087280]
[115.52778625 327.95916748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 43]
[14 41]
[15 40]
[16 39]
[17 38]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[66 95]
[67 94]
[68 93]
[69 91]
[70 90]
[71 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
