%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCCCCUCGGGGGGGGGGUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCxxxxxxxxxxGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUCCCCCCCCCCAACGCUCCUC\
) } def
/len { sequence length } bind def

/coor [
[77.33533478 641.99163818]
[63.48939514 635.97564697]
[51.78073502 626.44622803]
[43.07820892 614.11053467]
[38.02760696 599.88403320]
[37.00371552 584.82232666]
[40.08251572 570.04315186]
[47.03553772 556.64324951]
[57.34682083 545.61688232]
[70.25120544 537.78240967]
[84.79109192 533.72106934]
[84.79109192 518.72106934]
[84.79109192 503.72109985]
[84.79109192 488.72109985]
[84.79109192 473.72109985]
[84.79109192 458.72109985]
[84.79109192 443.72109985]
[84.79109192 428.72109985]
[84.79109192 413.72109985]
[84.79109192 398.72109985]
[70.67838287 395.45950317]
[57.64460754 389.12344360]
[46.35040665 380.03036499]
[37.36908340 368.63751221]
[31.15750694 355.51898193]
[28.03285980 341.33676147]
[28.15645599 326.80740356]
[31.52540779 312.66574097]
[37.97261047 299.62777710]
[47.17501831 288.35433960]
[58.66983414 279.41772461]
[71.87778473 273.27258301]
[86.13231659 270.23269653]
[86.44437408 255.23594666]
[76.28740692 247.24639893]
[72.55021667 234.67230225]
[76.81958008 222.06277466]
[87.74234009 214.11599731]
[88.36631012 199.12898254]
[88.99028778 184.14196777]
[89.61426544 169.15495300]
[90.23824310 154.16793823]
[90.86222076 139.18092346]
[91.48619843 124.19390106]
[76.69484711 116.42118835]
[68.62976837 99.84953308]
[72.20748138 80.01522827]
[88.02336884 64.89373016]
[85.23104858 50.15592575]
[82.43872070 35.41812134]
[67.42427063 36.03786469]
[52.47959518 34.46479034]
[37.92324829 30.73242950]
[24.06549072 24.92033577]
[11.20170593 17.15239525]
[-0.39391279 7.59417915]
[-10.47420502 -3.55057549]
[-18.82431030 -16.04431915]
[-25.26624298 -29.62074471]
[-29.66269493 -43.99047470]
[-31.91995239 -58.84720993]
[-31.98990631 -73.87428284]
[-29.87106323 -88.75139618]
[-25.60858727 -103.16143036]
[-19.29333115 -116.79724121]
[-11.05990696 -129.36817932]
[-1.08380997 -140.60630798]
[10.42231846 -150.27206421]
[23.21322441 -158.15942383]
[37.01626968 -164.10029602]
[51.53723907 -167.96801758]
[66.46662140 -169.68016052]
[81.48619080 -169.20022583]
[96.27581024 -166.53845215]
[110.52023315 -161.75155640]
[123.91584015 -154.94160461]
[136.17710876 -146.25372314]
[147.04267883 -135.87310791]
[156.28096008 -124.02101135]
[163.69502258 -110.95007324]
[169.12686157 -96.93889618]
[172.46066284 -82.28613281]
[173.62539673 -67.30410004]
[172.59622192 -52.31214905]
[169.39508057 -37.62982941]
[164.09019470 -23.57009506]
[156.79466248 -10.43263149]
[147.66395569 1.50253379]
[136.89271545 11.98100376]
[124.71054077 20.77942848]
[111.37707520 27.71026993]
[97.17652893 32.62579727]
[99.96885681 47.36360168]
[102.76117706 62.10140610]
[109.41875458 65.55490875]
[116.32595825 52.23985672]
[129.64089966 59.14726639]
[122.73390961 72.46190643]
[129.39149475 75.91540527]
[143.04772949 69.70999908]
[156.70397949 63.50458908]
[168.62283325 51.44735336]
[183.50834656 59.56265259]
[179.83091736 76.11296844]
[162.90937805 77.16083527]
[149.25314331 83.36624146]
[135.59689331 89.57164764]
[127.29642487 115.46024323]
[106.47321320 124.81787872]
[105.84924316 139.80490112]
[105.22526550 154.79191589]
[104.60128784 169.77893066]
[103.97731018 184.76594543]
[103.35333252 199.75296021]
[102.72935486 214.73997498]
[114.79927826 227.35957336]
[114.05509949 244.46894836]
[101.44112396 255.54800415]
[101.12906647 270.54473877]
[116.16886902 274.53613281]
[129.81616211 281.99316406]
[141.28620911 292.48236084]
[149.92062378 305.39596558]
[155.22511292 319.98727417]
[156.89779663 335.41372681]
[154.84637451 350.78561401]
[149.19323730 365.21737671]
[140.26811218 377.87854004]
[128.58888245 388.04168701]
[114.83156586 395.12405396]
[99.79109192 398.72109985]
[99.79109192 413.72109985]
[99.79109192 428.72109985]
[99.79109192 443.72109985]
[99.79109192 458.72109985]
[99.79109192 473.72109985]
[99.79109192 488.72109985]
[99.79109192 503.72109985]
[99.79109192 518.72106934]
[99.79109192 533.72106934]
[114.33097839 537.78240967]
[127.23535919 545.61688232]
[137.54664612 556.64324951]
[144.49966431 570.04315186]
[147.57846069 584.82232666]
[146.55456543 599.88403320]
[141.50396729 614.11053467]
[132.80145264 626.44622803]
[121.09278107 635.97564697]
[107.24684143 641.99163818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 119]
[34 118]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[48 94]
[49 93]
[50 92]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
