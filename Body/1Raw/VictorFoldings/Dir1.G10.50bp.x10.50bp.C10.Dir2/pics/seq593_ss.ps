%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAUACUAGGGGGGGGGGCUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCxxxxxxxxxxACUCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUCCCCCCCCCCUGCCAUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 380.15771484]
[71.19830322 374.14169312]
[59.48964310 364.61227417]
[50.78712082 352.27661133]
[45.73651886 338.05007935]
[44.71262741 322.98840332]
[47.79142761 308.20925903]
[54.74444962 294.80932617]
[65.05573273 283.78298950]
[77.96011353 275.94848633]
[92.50000000 271.88717651]
[92.50000000 256.88717651]
[92.50000000 241.88716125]
[92.50000000 226.88716125]
[92.50000000 211.88716125]
[92.50000000 196.88716125]
[92.50000000 181.88716125]
[92.50000000 166.88716125]
[92.50000000 151.88716125]
[92.50000000 136.88716125]
[80.37829590 132.12322998]
[70.60568237 123.51354218]
[64.35210419 112.08885956]
[62.36624146 99.21690369]
[64.88584137 86.43870544]
[71.60925293 75.28404999]
[81.73155975 67.08834076]
[94.04093933 62.83277512]
[94.66491699 47.84576035]
[91.88164520 39.07619858]
[95.46099091 32.55439377]
[96.39662170 17.58360291]
[97.33224487 2.61281109]
[98.26787567 -12.35798073]
[99.20350647 -27.32877159]
[84.33581543 -29.36816788]
[69.65934753 -32.50001526]
[55.25425339 -36.70721436]
[41.19921112 -41.96677780]
[27.57098770 -48.24998474]
[14.44401264 -55.52251816]
[1.88998342 -63.74465942]
[-10.02253342 -72.87149811]
[-21.22847557 -82.85318756]
[-31.66663933 -93.63520813]
[-41.28001404 -105.15866852]
[-50.01609421 -117.36064148]
[-57.82716370 -130.17448425]
[-64.67056274 -143.53019714]
[-70.50891876 -157.35484314]
[-75.31034088 -171.57290649]
[-79.04859924 -186.10675049]
[-81.70329285 -200.87698364]
[-83.25990295 -215.80294800]
[-83.70993805 -230.80310059]
[-83.05093384 -245.79553223]
[-81.28650665 -260.69836426]
[-78.42626953 -275.43017578]
[-74.48586273 -289.91052246]
[-69.48679352 -304.06030273]
[-63.45638275 -317.80224609]
[-56.42755127 -331.06130981]
[-48.43869400 -343.76507568]
[-39.53344345 -355.84414673]
[-29.76043701 -367.23254395]
[-19.17305374 -377.86807251]
[-7.82911730 -387.69262695]
[4.20941401 -396.65261841]
[16.87678909 -404.69903564]
[30.10382271 -411.78793335]
[43.81827164 -417.88064575]
[57.94523621 -422.94387817]
[72.40755463 -426.94995117]
[87.12623596 -429.87698364]
[102.02089691 -431.70901489]
[117.01017761 -432.43603516]
[132.01222229 -432.05407715]
[146.94508362 -430.56518555]
[161.72721863 -427.97756958]
[176.27787781 -424.30526733]
[190.51759338 -419.56842041]
[204.36857605 -413.79284668]
[217.75520325 -407.01013184]
[230.60435486 -399.25726318]
[242.84584045 -390.57666016]
[254.41281128 -381.01565552]
[265.24206543 -370.62652588]
[275.27450562 -359.46600342]
[284.45529175 -347.59500122]
[292.73431396 -335.07843018]
[300.06634521 -321.98458862]
[306.41131592 -308.38500977]
[311.73461914 -294.35397339]
[316.00711060 -279.96810913]
[319.20553589 -265.30599976]
[321.31237793 -250.44772339]
[322.31613159 -235.47442627]
[322.21130371 -220.46788025]
[320.99850464 -205.51007080]
[318.68435669 -190.68266296]
[315.28146362 -176.06666565]
[310.80841064 -161.74188232]
[305.28967285 -147.78657532]
[298.75534058 -134.27696228]
[291.24114990 -121.28680420]
[282.78811646 -108.88706970]
[273.44241333 -97.14547729]
[263.25506592 -86.12616730]
[252.28173828 -75.88930511]
[240.58236694 -66.49081421]
[228.22082520 -57.98201752]
[215.26463318 -50.40939713]
[201.78457642 -43.81431198]
[187.85426331 -38.23277283]
[173.54977417 -33.69527435]
[158.94924927 -30.22659492]
[144.13241577 -27.84567833]
[129.18020630 -26.56553078]
[114.17429352 -26.39314270]
[113.23866272 -11.42235184]
[112.30303955 3.54843950]
[111.36740875 18.51923180]
[110.43177795 33.49002075]
[109.65193939 48.46973801]
[109.02796173 63.45675278]
[124.01847839 71.01680756]
[134.23094177 84.34255981]
[137.63375854 100.78309631]
[133.54998779 117.06784058]
[122.79203033 129.95724487]
[107.50000000 136.88716125]
[107.50000000 151.88716125]
[107.50000000 166.88716125]
[107.50000000 181.88716125]
[107.50000000 196.88716125]
[107.50000000 211.88716125]
[107.50000000 226.88716125]
[107.50000000 241.88716125]
[107.50000000 256.88717651]
[107.50000000 271.88717651]
[122.03988647 275.94848633]
[134.94427490 283.78298950]
[145.25555420 294.80932617]
[152.20857239 308.20925903]
[155.28736877 322.98840332]
[154.26348877 338.05007935]
[149.21287537 352.27661133]
[140.51036072 364.61227417]
[128.80169678 374.14169312]
[114.95575714 380.15771484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 125]
[29 124]
[31 123]
[32 122]
[33 121]
[34 120]
[35 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
