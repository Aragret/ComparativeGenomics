%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACCCCCGGGGGGGGGGUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAxxxxxxxxxxGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCCCCUACCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.34551239 380.10266113]
[83.12532043 372.83020020]
[72.23851776 362.38317871]
[64.42738342 349.47393799]
[60.22450256 334.98263550]
[59.91643143 319.89727783]
[63.52417374 305.24645996]
[70.80174255 292.02908325]
[81.25295258 281.14630127]
[94.16521454 273.34014893]
[108.65814972 269.14288330]
[108.34609222 254.14611816]
[108.03404236 239.14936829]
[107.72198486 224.15260315]
[107.40992737 209.15585327]
[107.09786987 194.15910339]
[106.78581238 179.16235352]
[106.47375488 164.16558838]
[106.16170502 149.16883850]
[105.84964752 134.17208862]
[105.53759003 119.17533112]
[93.01162720 110.92304230]
[79.10906982 116.55500031]
[65.20651245 122.18695831]
[61.59735489 137.27845764]
[49.78505707 147.34072876]
[34.31169510 148.50462341]
[21.12708664 140.32257080]
[15.30098629 125.94078064]
[19.07364845 110.88931274]
[30.99440765 100.95577240]
[46.47948837 99.95981598]
[59.57455826 108.28440094]
[73.47711182 102.65244293]
[87.37966919 97.02048492]
[97.36239624 85.82472229]
[101.37014008 71.37003326]
[105.37787628 56.91534424]
[109.38562012 42.46065521]
[113.39335632 28.00596619]
[99.26753998 22.93955994]
[85.55446625 16.84375381]
[72.32903290 9.75184441]
[59.66347885 1.70256567]
[47.62697220 -7.26012039]
[36.28525543 -17.08726120]
[25.70027733 -27.72518539]
[15.92984390 -39.11579132]
[7.02732372 -51.19686508]
[-0.95866323 -63.90242386]
[-7.98449850 -77.16307831]
[-14.01180935 -90.90638733]
[-19.00767708 -105.05731201]
[-22.94481468 -119.53854370]
[-25.80171776 -134.27101135]
[-27.56278419 -149.17422485]
[-28.21839714 -164.16679382]
[-27.76497078 -179.16685486]
[-26.20498657 -194.09245300]
[-23.54696465 -208.86209106]
[-19.80541801 -223.39509583]
[-15.00078487 -237.61207581]
[-9.15930653 -251.43540955]
[-2.31288791 -264.78958130]
[5.50107861 -277.60165405]
[14.23991585 -289.80163574]
[23.85589409 -301.32293701]
[34.29649353 -312.10260010]
[45.50468826 -322.08175659]
[57.41926956 -331.20590210]
[69.97515869 -339.42520142]
[83.10377502 -346.69476318]
[96.73341370 -352.97488403]
[110.78964996 -358.23129272]
[125.19569397 -362.43521118]
[139.87286377 -365.56375122]
[154.74101257 -367.59979248]
[169.71891785 -368.53222656]
[184.72479248 -368.35592651]
[199.67666626 -367.07189941]
[214.49287415 -364.68713379]
[229.09249878 -361.21466064]
[243.39581299 -356.67343140]
[257.32467651 -351.08825684]
[270.80300903 -344.48968506]
[283.75723267 -336.91369629]
[296.11654663 -328.40167236]
[307.81350708 -319.00015259]
[318.78417969 -308.76043701]
[328.96862793 -297.73846436]
[338.31130981 -285.99444580]
[346.76110840 -273.59252930]
[354.27194214 -260.60043335]
[360.80273438 -247.08909607]
[366.31784058 -233.13235474]
[370.78717041 -218.80641174]
[374.18624878 -204.18952942]
[376.49658203 -189.36152649]
[377.70547485 -174.40339661]
[377.80639648 -159.39682007]
[376.79873657 -144.42378235]
[374.68804932 -129.56605530]
[371.48580933 -114.90477753]
[367.20956421 -100.52003479]
[361.88262939 -86.49038696]
[355.53411865 -72.89246368]
[348.19869995 -59.80052948]
[339.91641235 -47.28608704]
[330.73254395 -35.41749191]
[320.69720459 -24.25956535]
[309.86523438 -13.87324810]
[298.29577637 -4.31526661]
[286.05203247 4.36217546]
[273.20086670 12.11168385]
[259.81250000 18.89093399]
[245.95999146 24.66290092]
[231.71905518 29.39605522]
[217.16743469 33.06455231]
[202.38464355 35.64834976]
[187.45138550 37.13333511]
[172.44924927 37.51140594]
[157.46014404 36.78049088]
[142.56596375 34.94458008]
[127.84804535 32.01370621]
[123.84030914 46.46839523]
[119.83256531 60.92308426]
[115.82482910 75.37776947]
[111.81708527 89.83245850]
[120.53433990 118.86327362]
[120.84639740 133.86003113]
[121.15845490 148.85678101]
[121.47051239 163.85353088]
[121.78256989 178.85029602]
[122.09462738 193.84704590]
[122.40667725 208.84379578]
[122.71873474 223.84054565]
[123.03079224 238.83731079]
[123.34284973 253.83406067]
[123.65490723 268.83081055]
[138.30989075 272.42156982]
[151.53570557 279.68383789]
[162.43057251 290.12243652]
[170.25167847 303.02563477]
[174.46574402 317.51370239]
[174.78546143 332.59881592]
[171.18904114 347.25241089]
[163.92167664 360.47540283]
[153.47886658 371.36624146]
[140.57264709 379.18237305]
[126.08295441 383.39083862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 35]
[23 34]
[24 33]
[36 128]
[37 127]
[38 126]
[39 125]
[40 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
