%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUGCAGGGGGGGGGGGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCxxxxxxxxxxAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUCCCCCCCCCCUCUUCGCAGG\
) } def
/len { sequence length } bind def

/coor [
[81.46964264 341.60873413]
[69.97348022 331.79394531]
[61.88241959 319.02578735]
[57.91591263 304.43954468]
[58.42665863 289.33224487]
[63.36924362 275.04721069]
[72.30417633 262.85464478]
[84.43695831 253.83872986]
[98.68876648 248.80113220]
[98.06478882 233.81411743]
[97.44081116 218.82710266]
[96.81683350 203.84008789]
[96.19285583 188.85307312]
[95.56887817 173.86605835]
[94.94490051 158.87902832]
[94.32092285 143.89201355]
[93.69694519 128.90499878]
[93.07296753 113.91798401]
[83.80802155 102.12134552]
[69.39580536 97.96346283]
[54.98358917 93.80557251]
[41.26683426 101.18719482]
[26.71002960 96.76519775]
[19.75730896 83.64288330]
[5.34509325 79.48499298]
[-9.06712246 75.32710266]
[-23.47933960 71.16921997]
[-37.89155579 67.01132965]
[-52.62936020 64.21900940]
[-67.56366730 62.81670380]
[-82.49797821 61.41439819]
[-94.60083771 71.22043610]
[-109.72637939 69.58555603]
[-119.00035095 57.98689651]
[-133.93466187 56.58459091]
[-148.86897278 55.18228912]
[-159.86860657 66.29722595]
[-175.44406128 67.68984222]
[-188.24105835 58.70259094]
[-192.21726990 43.57897186]
[-185.49522400 29.45989990]
[-171.24888611 23.01196671]
[-156.20494080 27.27968788]
[-147.46665955 40.24797821]
[-132.53234863 41.65028381]
[-117.59804535 43.05258560]
[-106.32702637 33.38306046]
[-91.16154480 34.59244919]
[-81.09567261 46.48009109]
[-66.16136169 47.88239670]
[-51.22705841 49.28469849]
[-61.64628220 38.49397278]
[-64.72284698 23.81287193]
[-59.51259613 9.74683762]
[-47.61449051 0.61255860]
[-32.67990494 -0.78677249]
[-19.29207230 5.97828150]
[-11.55955029 18.83161163]
[-11.85534954 33.82869339]
[-20.08869362 46.36711884]
[-33.73366928 52.59911346]
[-19.32145119 56.75700378]
[-4.90923548 60.91489029]
[9.50298119 65.07277679]
[23.91519737 69.23066711]
[36.78923035 61.82831192]
[51.46450043 65.83969116]
[59.14147568 79.39335632]
[73.55369568 83.55124664]
[87.96591187 87.70912933]
[75.67376709 79.11243439]
[68.98014832 65.68874359]
[69.51065826 50.69812393]
[77.13645935 37.78119278]
[90.00555420 30.07493591]
[104.99256897 29.45089149]
[118.45777130 36.06061172]
[127.13100433 48.29887009]
[128.90591431 63.19348907]
[123.35142517 77.12718201]
[111.81726074 86.71566010]
[126.04404449 81.96184540]
[140.27082825 77.20803070]
[154.49760437 72.45421600]
[159.10527039 59.75669098]
[170.03724670 52.15935135]
[183.15454102 52.26465607]
[193.64643860 59.80897141]
[207.96903992 55.35215378]
[222.29164124 50.89533997]
[236.61424255 46.43852234]
[250.88969421 41.83295822]
[265.11648560 37.07914352]
[267.96209717 33.60583115]
[271.42959595 31.47331238]
[275.00735474 30.71081924]
[278.22909546 31.17388916]
[280.72775269 32.57533264]
[295.30044556 29.02057076]
[302.95486450 23.91550064]
[310.21328735 25.54679489]
[324.85678101 22.29596901]
[339.50027466 19.04514313]
[354.14376831 15.79431725]
[361.19940186 1.83895588]
[375.59494019 -4.26864433]
[390.53323364 0.35533911]
[398.96090698 13.52760220]
[396.89865112 29.02860641]
[385.32019043 39.53924942]
[369.69256592 40.09672928]
[357.39459229 30.43781853]
[342.75109863 33.68864441]
[328.10760498 36.93946838]
[313.46411133 40.19029617]
[298.85522461 43.59327316]
[284.28250122 47.14803696]
[269.87030029 51.30592346]
[255.64350891 56.05973816]
[250.26142883 61.19576645]
[241.07106018 60.76111984]
[226.74845886 65.21793365]
[212.42585754 69.67475128]
[198.10325623 74.13156891]
[190.95484924 89.32228851]
[174.72219849 94.77989197]
[159.25141907 86.68099213]
[145.02464294 91.43480682]
[130.79785156 96.18862152]
[116.57107544 100.94243622]
[108.05998993 113.29400635]
[108.68396759 128.28102112]
[109.30794525 143.26803589]
[109.93192291 158.25506592]
[110.55590057 173.24208069]
[111.17987061 188.22909546]
[111.80384827 203.21611023]
[112.42782593 218.20312500]
[113.05180359 233.19013977]
[113.67578125 248.17715454]
[128.29701233 252.01263428]
[141.13726807 259.98883057]
[151.05477905 271.39645386]
[157.16769409 285.22122192]
[158.93246460 300.23376465]
[156.19216919 315.09924316]
[149.19046021 328.49578857]
[138.54994202 339.23220825]
[125.21675110 346.35382080]
[110.37646484 349.22738647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 70]
[20 69]
[21 68]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 51]
[30 50]
[31 49]
[34 46]
[35 45]
[36 44]
[81 130]
[82 129]
[83 128]
[84 127]
[88 124]
[89 123]
[90 122]
[91 121]
[92 119]
[93 118]
[98 117]
[99 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
