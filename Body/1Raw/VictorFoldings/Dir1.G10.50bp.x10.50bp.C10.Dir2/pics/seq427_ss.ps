%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGAACCCGGGGGGGGGGUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACCCCCCCCCCCACAAAGCACCC\
) } def
/len { sequence length } bind def

/coor [
[84.11825562 406.65847778]
[70.62937164 399.92694092]
[59.14387512 390.16238403]
[50.32950592 377.93246460]
[44.69872284 363.94827271]
[42.57889557 349.02279663]
[44.09326553 334.02380371]
[49.15378571 319.82330322]
[57.46625137 307.24685669]
[68.54738617 297.02572632]
[81.75293732 289.75408936]
[96.31516266 285.85470581]
[96.00718689 270.85787964]
[95.69921112 255.86103821]
[95.39122772 240.86419678]
[95.08325195 225.86735535]
[94.77527618 210.87051392]
[94.46730042 195.87368774]
[94.15931702 180.87684631]
[93.85134125 165.88000488]
[93.54336548 150.88316345]
[93.23538971 135.88633728]
[80.91161346 131.13233948]
[71.08521271 122.30524445]
[65.04178619 110.55991364]
[63.57199860 97.43301392]
[49.14461517 93.32806396]
[34.71723175 89.22312164]
[25.54331017 89.88265991]
[20.03739357 84.88294983]
[5.69733191 80.48265076]
[-8.64272881 76.08235168]
[-24.10551262 79.43091583]
[-34.00307465 68.30043793]
[-48.34313583 63.90013504]
[-54.95987701 65.02323151]
[-60.32005692 62.91222763]
[-63.17485046 59.01359177]
[-77.32216644 54.02826691]
[-91.46948242 49.04294586]
[-105.61679840 44.05762482]
[-117.22805023 54.11119843]
[-132.31350708 56.99645996]
[-146.81524658 51.93728638]
[-156.83236694 40.29457855]
[-159.67033386 25.20015526]
[-154.56573486 10.71434879]
[-142.89167786 0.73376441]
[-127.78843689 -2.05686975]
[-113.31869507 3.09311271]
[-103.37475586 14.79839230]
[-100.63147736 29.91030693]
[-86.48416138 34.89562988]
[-72.33684540 39.88095093]
[-58.18952560 44.86627197]
[-43.94283676 49.56007385]
[-29.60277367 53.96037292]
[-15.16568661 50.29707336]
[-4.24242878 61.74229050]
[10.09763241 66.14259338]
[24.43769455 70.54289246]
[38.82217407 74.79573822]
[53.24955750 78.90068054]
[67.67694092 83.00562286]
[79.51708221 69.76692200]
[96.20233154 63.67966843]
[97.73962402 48.75865173]
[99.27691650 33.83763504]
[100.81420898 18.91662025]
[102.35150146 3.99560356]
[103.88879395 -10.92541313]
[90.35907745 -17.80371666]
[80.23062897 -29.10765266]
[74.87324524 -43.30845642]
[75.01146698 -58.48558807]
[80.62660217 -72.58646393]
[90.95924377 -83.70405579]
[104.61199951 -90.33480072]
[119.73843384 -91.58194733]
[134.29283142 -87.27682495]
[146.30680847 -78.00167084]
[154.15560913 -65.01087189]
[156.77770996 -50.06132126]
[153.81852722 -35.17483139]
[145.67823792 -22.36467171]
[133.45776367 -13.36331558]
[118.80981445 -9.38812065]
[117.27252197 5.53289604]
[115.73522949 20.45391273]
[114.19793701 35.37492752]
[112.66064453 50.29594421]
[111.12335205 65.21696472]
[116.64521790 67.49576569]
[121.72169495 70.64431000]
[126.21694946 74.57834625]
[130.01069641 79.19261932]
[133.00140381 84.36364746]
[135.10908508 89.95307159]
[150.07037354 88.87599945]
[165.03164673 87.79892731]
[179.98107910 86.56832123]
[194.91709900 85.18429565]
[209.85310364 83.80027008]
[224.78912354 82.41624451]
[239.72512817 81.03221893]
[254.66114807 79.64819336]
[269.58215332 78.11090088]
[284.48660278 76.42050171]
[299.39105225 74.73010254]
[310.46914673 63.12598801]
[326.43524170 64.69560242]
[335.04150391 78.23487091]
[329.68594360 93.35762024]
[314.47692871 98.46298218]
[301.08145142 89.63455200]
[286.17700195 91.32495117]
[271.27255249 93.01534271]
[264.94171143 96.91821289]
[256.04516602 94.58420563]
[241.10916138 95.96823120]
[226.17314148 97.35225677]
[211.23713684 98.73628235]
[196.30111694 100.12030792]
[181.36511230 101.50433350]
[174.95544434 105.27639008]
[166.10871887 102.76020813]
[151.14743042 103.83728027]
[136.18615723 104.91435242]
[126.98737335 124.60224152]
[108.23222351 135.57835388]
[108.54019928 150.57519531]
[108.84818268 165.57202148]
[109.15615845 180.56886292]
[109.46413422 195.56570435]
[109.77210999 210.56254578]
[110.08009338 225.55938721]
[110.38806915 240.55621338]
[110.69604492 255.55305481]
[111.00402069 270.54989624]
[111.31200409 285.54672241]
[126.02203369 288.84497070]
[139.51499939 295.56829834]
[151.00640869 305.32589722]
[159.82820129 317.55047607]
[165.46745300 331.53125000]
[167.59632874 346.45541382]
[166.09104919 361.45535278]
[161.03913879 375.65893555]
[152.73429871 388.24038696]
[141.65937805 398.46826172]
[128.45822144 405.74789429]
[113.89836884 409.65609741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[26 64]
[27 63]
[28 62]
[30 61]
[31 60]
[32 59]
[34 57]
[35 56]
[38 55]
[39 54]
[40 53]
[41 52]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[98 128]
[99 127]
[100 126]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
