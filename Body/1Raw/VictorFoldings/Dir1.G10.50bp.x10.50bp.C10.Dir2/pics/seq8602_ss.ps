%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAGCCUAGGGGGGGGGGCUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCxxxxxxxxxxCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCCCCCCCCCCCAUCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.85198212 409.66824341]
[72.00604248 403.65222168]
[60.29738235 394.12280273]
[51.59485626 381.78710938]
[46.54425430 367.56060791]
[45.52036285 352.49893188]
[48.59916306 337.71975708]
[55.55218506 324.31982422]
[65.86347198 313.29348755]
[78.76785278 305.45898438]
[93.30773926 301.39767456]
[93.30773926 286.39767456]
[93.30773926 271.39767456]
[93.30773926 256.39767456]
[93.30773926 241.39767456]
[93.30773926 226.39767456]
[93.30773926 211.39767456]
[93.30773926 196.39767456]
[93.30773926 181.39767456]
[93.30773926 166.39767456]
[91.02605438 163.62976074]
[90.00666046 159.59707642]
[90.83910370 154.92166138]
[93.80498505 150.46934509]
[94.74061584 135.49856567]
[95.67624664 120.52777100]
[91.61460114 134.96740723]
[79.56391144 143.89941406]
[64.56718445 143.58589172]
[52.90031815 134.15805054]
[49.44569778 119.56128693]
[55.64903259 105.90410614]
[68.91432190 98.90181732]
[83.69136810 101.48537445]
[69.78881073 95.85341644]
[55.88625717 90.22145844]
[41.98370361 84.58950806]
[26.95285606 94.63374329]
[9.05547810 93.70303345]
[-4.61176300 82.35370636]
[-8.74157715 65.23609924]
[-22.86637878 60.18734360]
[-36.99118423 55.13858795]
[-52.04853439 60.67534637]
[-65.69017029 52.23228836]
[-67.45140076 36.28620148]
[-55.98115540 25.06956291]
[-40.07842636 27.18681526]
[-31.94242668 41.01378632]
[-17.81762314 46.06254196]
[-3.69282031 51.11129761]
[5.26592875 42.81181717]
[16.98007202 39.11132812]
[29.22437096 40.77764893]
[39.64506912 47.55287552]
[46.21236420 58.19105911]
[47.61565781 70.68695068]
[61.51821518 76.31890869]
[75.42076874 81.95085907]
[89.32332611 87.58281708]
[103.44812775 82.53406525]
[110.63063812 69.36547852]
[117.81314850 56.19689560]
[124.99565887 43.02831268]
[112.02021790 50.55414200]
[97.64002991 54.82147598]
[82.65981293 55.59151077]
[67.91785431 52.82115936]
[54.23914337 46.66544724]
[42.38913727 37.46885300]
[33.03096771 25.74602699]
[26.68832970 12.15297985]
[23.71615601 -2.54961157]
[24.28077316 -17.53898239]
[28.35058403 -31.97631645]
[35.69784164 -45.05369568]
[45.91138458 -56.03929901]
[58.41966248 -64.31836700]
[72.52269745 -69.42760468]
[87.43128967 -71.08108521]
[102.31113434 -69.18628693]
[116.32954407 -63.84923935]
[128.70205688 -55.36861038]
[138.73628235 -44.21897888]
[145.87069702 -31.02428246]
[149.70608521 -16.52290726]
[150.02778625 -1.52635717]
[146.81779480 13.12615204]
[140.25617981 26.61403084]
[152.86730957 18.49248886]
[165.47843933 10.37094593]
[178.08955383 2.24940395]
[190.70068359 -5.87213802]
[188.77171326 -21.01287079]
[193.61122131 -35.48843384]
[204.25833130 -46.42469025]
[218.59904480 -51.65024567]
[233.78602600 -50.12755585]
[246.80386353 -42.15895462]
[255.06787109 -29.32661247]
[256.93722534 -14.17840004]
[252.04074097 0.27799216]
[241.35064697 11.17223835]
[226.98945618 16.34127808]
[211.80859375 14.75879383]
[198.82223511 6.73898983]
[186.21110535 14.86053181]
[173.59997559 22.98207474]
[160.98884583 31.10361671]
[148.37771606 39.22515869]
[138.16424561 50.21082306]
[130.98173523 63.37940598]
[123.79921722 76.54798889]
[116.61671448 89.71656799]
[127.45495605 79.34678650]
[141.40913391 73.84397888]
[156.40805054 74.02492523]
[170.22541809 79.86275482]
[180.81034851 90.49098206]
[186.59175110 104.33206177]
[186.71147156 119.33158112]
[181.15174866 133.26318359]
[170.73782349 144.05902100]
[157.01541138 150.11666870]
[142.02130127 150.53701782]
[127.98105621 145.25765991]
[116.97866058 135.06221008]
[110.64703369 121.46339417]
[109.71141052 136.43418884]
[108.77577972 151.40498352]
[108.30773926 166.39767456]
[108.30773926 181.39767456]
[108.30773926 196.39767456]
[108.30773926 211.39767456]
[108.30773926 226.39767456]
[108.30773926 241.39767456]
[108.30773926 256.39767456]
[108.30773926 271.39767456]
[108.30773926 286.39767456]
[108.30773926 301.39767456]
[122.84762573 305.45898438]
[135.75199890 313.29348755]
[146.06329346 324.31982422]
[153.01631165 337.71975708]
[156.09510803 352.49893188]
[155.07121277 367.56060791]
[150.02061462 381.78710938]
[141.31808472 394.12280273]
[129.60943604 403.65222168]
[115.76348877 409.66824341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 128]
[34 60]
[35 59]
[36 58]
[37 57]
[41 51]
[42 50]
[43 49]
[61 114]
[62 113]
[63 112]
[64 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
