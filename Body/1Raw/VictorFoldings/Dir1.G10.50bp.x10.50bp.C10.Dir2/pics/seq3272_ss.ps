%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAACCUCGGGGGGGGGGCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACxxxxxxxxxxCCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACACCCCCCCCCCGGUCAACCUC\
) } def
/len { sequence length } bind def

/coor [
[84.04749298 364.61849976]
[70.20155334 358.60247803]
[58.49288940 349.07305908]
[49.79036713 336.73739624]
[44.73976517 322.51086426]
[43.71587372 307.44918823]
[46.79467010 292.67001343]
[53.74769211 279.27011108]
[64.05897522 268.24377441]
[76.96335602 260.40927124]
[91.50324249 256.34793091]
[91.50324249 241.34794617]
[91.50324249 226.34794617]
[91.50324249 211.34794617]
[91.50324249 196.34794617]
[91.50324249 181.34794617]
[91.50324249 166.34794617]
[91.50324249 151.34794617]
[91.50324249 136.34794617]
[91.50324249 121.34794617]
[90.94623566 136.33760071]
[82.06298065 148.42427063]
[67.92327118 153.43113708]
[53.41341782 149.62797546]
[43.54761505 138.32904053]
[41.73521805 123.43893433]
[48.60253906 110.10327148]
[61.77642441 102.93048859]
[76.70465851 104.39943695]
[61.84161377 102.37710571]
[46.97856522 100.35476685]
[32.11552048 98.33243561]
[17.25247383 96.31009674]
[2.38942623 94.28776550]
[-5.58795118 107.26009369]
[-18.15563774 115.86085510]
[-33.13620758 118.59992218]
[-47.93418121 115.00272369]
[-59.98572540 105.69250488]
[-67.20283508 92.28231812]
[-68.33510590 77.09555054]
[-63.18635559 62.76340866]
[-52.64864731 51.76902008]
[-38.54769897 46.01723099]
[-23.32658195 46.50457382]
[-9.62244892 53.14661026]
[0.19037551 64.79256439]
[4.41176081 79.42472076]
[19.27480698 81.44705200]
[34.13785553 83.46938324]
[49.00090027 85.49172211]
[63.86394882 87.51405334]
[78.72699738 89.53639221]
[86.31690216 76.59833527]
[77.29936981 64.61150360]
[68.28184509 52.62466812]
[59.26431274 40.63783646]
[50.24678421 28.65100288]
[35.89302826 19.62847137]
[40.58944321 3.33798218]
[57.54339218 3.34120178]
[62.23361588 19.63347435]
[71.25114441 31.62030602]
[80.26867676 43.60713959]
[89.28620911 55.59397125]
[98.30373383 67.58080292]
[113.16678619 69.60314178]
[125.05916595 60.46140289]
[136.95153809 51.31967163]
[129.14077759 38.49628830]
[122.76226807 24.90357208]
[117.89080811 10.70089245]
[114.58351898 -3.94523525]
[112.87916565 -18.86309052]
[112.79772949 -33.87776947]
[114.34017944 -48.81323624]
[117.48841858 -63.49437332]
[122.20554352 -77.74905396]
[128.43623352 -91.41015625]
[136.10746765 -104.31750488]
[145.12927246 -116.31976318]
[155.39587402 -127.27622223]
[166.78692627 -137.05841064]
[179.16885376 -145.55165100]
[192.39649963 -152.65635681]
[206.31475830 -158.28921509]
[220.76045227 -162.38421631]
[235.56422424 -164.89332581]
[250.55250549 -165.78712463]
[265.54956055 -165.05513000]
[280.37954712 -162.70594788]
[294.86859131 -158.76710510]
[308.84683228 -153.28477478]
[322.15039062 -146.32324219]
[334.62326050 -137.96414185]
[346.11923218 -128.30546570]
[356.50347900 -117.46044159]
[365.65429688 -105.55625153]
[373.46438599 -92.73245239]
[379.84216309 -79.13938904]
[384.71282959 -64.93644714]
[388.01934814 -50.29014206]
[389.72290039 -35.37219620]
[389.80352783 -20.35751152]
[388.26028442 -5.42212963]
[385.11123657 9.25883961]
[380.39334106 23.51326942]
[374.16192627 37.17403412]
[366.48999023 50.08096695]
[357.46755981 62.08274460]
[347.20034790 73.03865051]
[335.80877686 82.82022858]
[323.42639160 91.31279755]
[310.19836426 98.41678619]
[296.27981567 104.04890442]
[281.83389282 108.14311981]
[267.02996826 110.65143585]
[252.04165649 111.54442596]
[237.04464722 110.81163788]
[222.21478271 108.46164703]
[207.72593689 104.52202606]
[193.74798584 99.03894806]
[180.44482422 92.07670593]
[167.97239685 83.71692657]
[156.47695923 74.05762482]
[146.09327698 63.21205139]
[134.20089722 72.35378265]
[122.30851746 81.49552155]
[126.74372864 99.02053070]
[119.98260498 114.24297333]
[106.50324249 121.34794617]
[106.50324249 136.34794617]
[106.50324249 151.34794617]
[106.50324249 166.34794617]
[106.50324249 181.34794617]
[106.50324249 196.34794617]
[106.50324249 211.34794617]
[106.50324249 226.34794617]
[106.50324249 241.34794617]
[106.50324249 256.34793091]
[121.04312897 260.40927124]
[133.94750977 268.24377441]
[144.25880432 279.27011108]
[151.21182251 292.67001343]
[154.29061890 307.44918823]
[153.26672363 322.51086426]
[148.21612549 336.73739624]
[139.51359558 349.07305908]
[127.80493927 358.60247803]
[113.95899963 364.61849976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
