%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUAAGAAGGGGGGGGGGCAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUxxxxxxxxxxCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUCCCCCCCCCCUACCUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[109.33740234 367.80883789]
[95.49146271 361.79281616]
[83.78280640 352.26339722]
[75.08027649 339.92770386]
[70.02967834 325.70120239]
[69.00578308 310.63952637]
[72.08458710 295.86035156]
[79.03760529 282.46041870]
[89.34889221 271.43408203]
[102.25327301 263.59957886]
[116.79315948 259.53826904]
[116.79315948 244.53826904]
[116.79315948 229.53826904]
[116.79315948 214.53826904]
[116.79315948 199.53826904]
[116.79315948 184.53826904]
[116.79315948 169.53826904]
[116.79315948 154.53826904]
[116.79315948 139.53826904]
[116.79315948 124.53826904]
[103.32617188 127.40104675]
[91.06191254 123.85012054]
[82.65419769 115.61315918]
[68.87181854 121.53311920]
[55.08943558 127.45308685]
[47.83173752 141.76062012]
[32.09204102 144.86567688]
[19.94448853 134.38633728]
[20.70764542 118.36145020]
[33.79608154 109.08393097]
[49.16947174 113.67070007]
[62.95185089 107.75074005]
[76.73423767 101.83078003]
[79.92414093 85.20785522]
[94.15071869 74.11663818]
[113.27301025 75.19234467]
[127.76525116 89.35915375]
[128.38923645 74.37213898]
[129.01321411 59.38512039]
[129.63719177 44.39810562]
[130.26116943 29.41108704]
[122.80625153 16.39477730]
[109.56366730 9.34964371]
[96.32108307 2.30450845]
[83.07849884 -4.74062681]
[69.18979645 2.17918134]
[53.89184952 -0.41934472]
[43.06701660 -11.53701878]
[40.87767410 -26.89886665]
[48.16566849 -40.59794617]
[62.12861252 -47.36668396]
[77.39747620 -44.60235596]
[88.10106659 -33.36790848]
[90.12362671 -17.98321152]
[103.36621857 -10.93807697]
[116.60880280 -3.89294243]
[129.85137939 3.15219259]
[133.76181030 -5.56783628]
[140.27636719 -11.91997051]
[148.25033569 -15.25018787]
[156.43359375 -15.39462376]
[161.92062378 -29.35501480]
[167.40765381 -43.31540298]
[172.89468384 -57.27579498]
[159.88227844 -64.79475403]
[148.13591003 -74.16921997]
[137.91799927 -85.18974304]
[129.45683289 -97.61014557]
[122.94142914 -111.15293121]
[118.51733398 -125.51555634]
[116.28339386 -140.37715149]
[116.28951263 -155.40571594]
[118.53555298 -170.26548767]
[122.97134399 -184.62451172]
[129.49778748 -198.16198730]
[137.96907043 -210.57550049]
[148.19593811 -221.58769226]
[159.94993591 -230.95259094]
[172.96847534 -238.46095276]
[186.96069336 -243.94505310]
[201.61402893 -247.28234863]
[216.60108948 -248.39831543]
[231.58708191 -247.26802063]
[246.23721313 -243.91668701]
[260.22418213 -238.41920471]
[273.23553467 -230.89839172]
[284.98056030 -221.52226257]
[295.19689941 -210.50027466]
[303.65631104 -198.07867432]
[310.16976929 -184.53495789]
[314.59182739 -170.17170715]
[316.82363892 -155.30978394]
[316.81539917 -140.28121948]
[314.56723022 -125.42176819]
[310.12939453 -111.06337738]
[303.60104370 -97.52683258]
[295.12799072 -85.11453247]
[284.89953613 -74.10379028]
[273.14419556 -64.74057007]
[260.12460327 -57.23406219]
[246.13159180 -51.75196075]
[231.47779846 -48.41674042]
[216.49057007 -47.30290604]
[201.50473022 -48.43534851]
[186.85508728 -51.78876114]
[181.36804199 -37.82837296]
[175.88101196 -23.86798286]
[170.39398193 -9.90759277]
[178.52969360 3.04605246]
[176.09262085 19.02614212]
[163.15010071 30.09981155]
[145.24818420 30.03506470]
[144.62420654 45.02207947]
[144.00022888 60.00909805]
[143.37625122 74.99611664]
[142.75227356 89.98313141]
[150.60969543 102.76049042]
[164.26593018 108.96589661]
[177.92218018 115.17130280]
[191.57841492 121.37670898]
[206.28587341 115.59171295]
[220.74267578 121.97735596]
[226.37185669 136.74516296]
[219.83372498 151.13363647]
[205.00723267 156.60636902]
[190.68867493 149.91647339]
[185.37301636 135.03294373]
[171.71676636 128.82754517]
[158.06053162 122.62213135]
[144.40428162 116.41672516]
[131.79315186 124.53826904]
[131.79315186 139.53826904]
[131.79315186 154.53826904]
[131.79315186 169.53826904]
[131.79315186 184.53826904]
[131.79315186 199.53826904]
[131.79315186 214.53826904]
[131.79315186 229.53826904]
[131.79315186 244.53826904]
[131.79315186 259.53826904]
[146.33305359 263.59957886]
[159.23742676 271.43408203]
[169.54870605 282.46041870]
[176.50173950 295.86035156]
[179.58053589 310.63952637]
[178.55664062 325.70120239]
[173.50604248 339.92770386]
[164.80351257 352.26339722]
[153.09484863 361.79281616]
[139.24891663 367.80883789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 33]
[24 32]
[25 31]
[37 116]
[38 115]
[39 114]
[40 113]
[41 112]
[42 57]
[43 56]
[44 55]
[45 54]
[61 108]
[62 107]
[63 106]
[64 105]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
