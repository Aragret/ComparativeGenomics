%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAGCCCUGGGGGGGGGGGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCxxxxxxxxxxAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCCCCCCCCCCCAAUAGCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.81433105 455.20809937]
[71.96839142 449.19207764]
[60.25972748 439.66265869]
[51.55720139 427.32699585]
[46.50659943 413.10046387]
[45.48270798 398.03878784]
[48.56150818 383.25964355]
[55.51453018 369.85971069]
[65.82581329 358.83337402]
[78.73019409 350.99887085]
[93.27008057 346.93756104]
[93.27008057 331.93756104]
[93.27008057 316.93756104]
[93.27008057 301.93756104]
[93.27008057 286.93756104]
[93.27008057 271.93756104]
[93.27008057 256.93756104]
[93.27008057 241.93756104]
[93.27008057 226.93756104]
[93.27008057 211.93756104]
[93.11404419 196.93836975]
[92.80198669 181.94161987]
[84.27196503 173.30761719]
[83.92671204 160.77366638]
[92.50000000 151.08074951]
[92.50000000 136.08074951]
[92.50000000 121.08074951]
[82.99334717 114.54035950]
[78.00981903 104.13278198]
[63.19205856 101.80168152]
[48.37430191 99.47057343]
[33.55654144 97.13947296]
[29.43120193 98.91233826]
[25.37124634 99.20866394]
[21.84423256 98.23806763]
[19.19760513 96.34351349]
[17.62492371 93.94893646]
[3.05222011 90.39417267]
[-7.50249147 101.55184174]
[-22.22654915 105.92193604]
[-37.15925598 102.32891083]
[-48.28379059 91.73927307]
[-52.60770416 77.00159454]
[-48.96789169 62.08022308]
[-38.34344101 50.98893738]
[-23.59227562 46.71123886]
[-8.68238640 50.39780426]
[2.37554193 61.05696869]
[6.60698175 75.82147217]
[21.17968559 79.37622833]
[35.88764572 82.32171631]
[50.70540619 84.65281677]
[65.52316284 86.98392487]
[80.34091949 89.31502533]
[86.72661591 81.98708344]
[95.61708832 78.05830383]
[105.33464813 78.27007294]
[113.58693695 65.74411774]
[121.83922577 53.21815109]
[115.66595459 37.50373840]
[120.00926208 21.36009407]
[132.97439575 11.07072639]
[149.35122681 10.51873016]
[157.34115601 -2.17619967]
[165.33106995 -14.87112904]
[173.32098389 -27.56605911]
[161.78585815 -37.19021988]
[151.63648987 -48.26603317]
[143.05398560 -60.59583664]
[136.19151306 -73.95959473]
[131.17155457 -88.11881256]
[128.08369446 -102.82080078]
[126.98302460 -117.80319214]
[127.88920593 -132.79859924]
[130.78605652 -147.53941345]
[135.62187195 -161.76257324]
[142.31036377 -175.21424866]
[150.73216248 -187.65437317]
[160.73696899 -198.86094666]
[172.14625549 -208.63395691]
[184.75637817 -216.79902649]
[198.34231567 -223.21040344]
[212.66160583 -227.75367737]
[227.45869446 -230.34779358]
[242.46952820 -230.94642639]
[257.42620850 -229.53890991]
[272.06182861 -226.15036011]
[286.11517334 -220.84124756]
[299.33547974 -213.70631409]
[311.48678589 -204.87290955]
[322.35223389 -194.49865723]
[331.73794556 -182.76869202]
[339.47640991 -169.89237976]
[345.42953491 -156.09948730]
[349.49105835 -141.63616943]
[351.58850098 -126.76054382]
[351.68441772 -111.73808289]
[349.77716064 -96.83688354]
[345.90069580 -82.32287598]
[340.12423706 -68.45507050]
[332.55087280 -55.48096466]
[323.31573486 -43.63209152]
[312.58364868 -33.11990738]
[300.54617310 -24.13201714]
[287.41806030 -16.82881737]
[273.43368530 -11.34064484]
[258.84252930 -7.76544094]
[243.90504456 -6.16700983]
[228.88780212 -6.57387781]
[214.05877686 -8.97878361]
[199.68263245 -13.33880806]
[186.01591492 -19.57614326]
[178.02600098 -6.88121319]
[170.03607178 5.81371641]
[162.04615784 18.50864601]
[168.14575195 30.42464638]
[167.53962708 43.90589523]
[160.27958679 55.40990829]
[148.17993164 61.86058426]
[134.36518860 61.47043991]
[126.11289978 73.99640656]
[117.86061096 86.52236176]
[121.43270111 106.42552948]
[107.50000000 121.08074951]
[107.50000000 136.08074951]
[107.50000000 151.08074951]
[117.08272552 166.76995850]
[107.79874420 181.62956238]
[108.11080170 196.62631226]
[111.43566132 205.20518494]
[108.27008057 211.93756104]
[108.27008057 226.93756104]
[108.27008057 241.93756104]
[108.27008057 256.93756104]
[108.27008057 271.93756104]
[108.27008057 286.93756104]
[108.27008057 301.93756104]
[108.27008057 316.93756104]
[108.27008057 331.93756104]
[108.27008057 346.93756104]
[122.80996704 350.99887085]
[135.71435547 358.83337402]
[146.02563477 369.85971069]
[152.97865295 383.25964355]
[156.05744934 398.03878784]
[155.03356934 413.10046387]
[149.98295593 427.32699585]
[141.28044128 439.66265869]
[129.57177734 449.19207764]
[115.72583771 455.20809937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[25 126]
[26 125]
[27 124]
[29 54]
[30 53]
[31 52]
[32 51]
[37 50]
[38 49]
[57 122]
[58 121]
[59 120]
[63 115]
[64 114]
[65 113]
[66 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
