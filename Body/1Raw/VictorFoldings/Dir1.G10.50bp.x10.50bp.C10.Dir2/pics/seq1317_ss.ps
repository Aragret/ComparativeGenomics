%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUACGAAAGGGGGGGGGGGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUxxxxxxxxxxGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUCCCCCCCCCCGACUACAAAA\
) } def
/len { sequence length } bind def

/coor [
[69.42379761 377.76126099]
[54.93410110 373.55276489]
[42.02787399 365.73666382]
[31.58507156 354.84582520]
[24.31770897 341.62283325]
[20.72128296 326.96920776]
[21.04100418 311.88412476]
[25.25507355 297.39605713]
[33.07617188 284.49282837]
[43.97103882 274.05426025]
[57.19684982 266.79199219]
[71.85183716 263.20123291]
[72.16389465 248.20446777]
[72.47595215 233.20771790]
[72.78800964 218.21095276]
[73.10006714 203.21420288]
[73.41212463 188.21745300]
[73.72417450 173.22070312]
[74.03623199 158.22393799]
[74.34828949 143.22718811]
[74.66034698 128.23043823]
[86.96354675 94.32780457]
[78.45246124 81.97623444]
[69.94136810 69.62465668]
[64.05241394 66.39545441]
[61.16027832 61.40878677]
[61.34572220 56.57752228]
[53.35580444 43.88259506]
[45.36589050 31.18766403]
[37.37597275 18.49273300]
[37.62332153 33.49069595]
[33.88916016 48.01846313]
[26.44024658 61.03820419]
[15.80871964 71.61981964]
[2.75406837 79.00738525]
[-11.79111004 82.67314148]
[-26.78774071 82.35522461]
[-41.16449738 78.07633972]
[-53.89433670 70.14215851]
[-64.06786346 59.11948395]
[-70.95831299 45.79575729]
[-74.07343292 31.12278748]
[-73.19069672 16.14878273]
[-68.37316132 1.94345522]
[-59.96498108 -10.47840023]
[-48.56681442 -20.22939301]
[-34.99293137 -26.61293602]
[-20.21300888 -29.17299843]
[-5.28289700 -27.72669983]
[8.73082924 -22.37735558]
[20.82706261 -13.50711632]
[30.13886642 -1.75437224]
[28.27125168 -16.63765144]
[26.40363884 -31.52093124]
[24.53602600 -46.40421295]
[22.66841316 -61.28749084]
[13.83698273 -49.16289520]
[-0.38422355 -44.39243698]
[-14.74075413 -48.73870468]
[-23.92815590 -60.59583664]
[-24.55186653 -75.58286285]
[-16.38143921 -88.16237640]
[-2.43568206 -93.68649292]
[12.13272381 -90.11416626]
[21.94070053 -78.76609802]
[22.56467628 -93.75311279]
[23.18865395 -108.74012756]
[23.81263161 -123.72714996]
[24.43660927 -138.71415710]
[10.63222885 -145.07872009]
[0.31792399 -156.24488831]
[-4.93344831 -170.50993347]
[-4.32109165 -185.69853210]
[2.06161356 -199.49453735]
[13.24135113 -209.79414368]
[27.51329231 -215.02674866]
[42.70106888 -214.39440918]
[56.48865891 -207.99356079]
[66.77355194 -196.80027771]
[71.98737335 -182.52146912]
[71.33506012 -167.33453369]
[64.91607666 -153.55537415]
[53.70928192 -143.28521729]
[39.42362595 -138.09017944]
[38.79964828 -123.10317230]
[38.17567062 -108.11614990]
[37.55169296 -93.12913513]
[36.92771530 -78.14212036]
[37.55169296 -63.15510559]
[39.41930771 -48.27182388]
[41.28691864 -33.38854599]
[43.15453339 -18.50526619]
[45.02214432 -3.62198544]
[50.07090378 10.50281811]
[58.06081772 23.19774818]
[66.05073547 35.89267731]
[74.04064941 48.58760834]
[82.29293823 61.11356735]
[90.80403137 73.46514130]
[99.31511688 85.81671143]
[112.40827179 93.13581848]
[127.38799286 93.91566467]
[142.36770630 94.69551086]
[157.34741211 95.47535706]
[164.51390076 85.89337158]
[175.31834412 81.03817749]
[187.00195312 82.02162933]
[196.64286804 88.48075867]
[201.88690186 98.69793701]
[216.82119751 100.10024261]
[231.75550842 101.50254822]
[241.90841675 89.76805878]
[257.02725220 86.27517700]
[271.29852295 92.36699677]
[279.23464966 105.70107269]
[277.78402710 121.15019226]
[267.50442505 132.77384949]
[252.34857178 136.10250854]
[238.14421082 129.85623169]
[230.35321045 116.43685150]
[215.41889954 115.03454590]
[200.48458862 113.63224792]
[187.17944336 126.13705444]
[168.63800049 124.99136353]
[156.56756592 110.45507050]
[141.58786011 109.67522430]
[126.60814667 108.89537811]
[111.62843323 108.11553192]
[106.13559723 113.22227478]
[95.14993286 123.43575287]
[89.65709686 128.54249573]
[89.34504700 143.53924561]
[89.03298950 158.53599548]
[88.72093201 173.53276062]
[88.40887451 188.52951050]
[88.09681702 203.52626038]
[87.78475952 218.52301025]
[87.47270966 233.51977539]
[87.16065216 248.51652527]
[86.84859467 263.51327515]
[101.34152985 267.71057129]
[114.25379181 275.51669312]
[124.70500183 286.39947510]
[131.98257446 299.61685181]
[135.59031677 314.26770020]
[135.28224182 329.35302734]
[131.07936096 343.84432983]
[123.26822662 356.75360107]
[112.38142395 367.20059204]
[99.16123199 374.47305298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 100]
[23 99]
[24 98]
[27 97]
[28 96]
[29 95]
[30 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[101 128]
[102 127]
[103 126]
[104 125]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
