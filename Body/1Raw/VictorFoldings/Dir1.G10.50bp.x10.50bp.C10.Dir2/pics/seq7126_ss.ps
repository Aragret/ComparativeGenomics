%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACCUACGGGGGGGGGGGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCxxxxxxxxxxUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCCCCCCCCCCCAAGCCUACG\
) } def
/len { sequence length } bind def

/coor [
[83.55226135 424.21408081]
[70.33404541 416.93801880]
[59.45008469 406.48803711]
[51.64246368 393.57669067]
[47.44352341 379.08422852]
[47.13955307 363.99880981]
[50.75128174 349.34896851]
[58.03244781 336.13354492]
[68.48661804 325.25363159]
[81.40100098 317.45098877]
[95.89507294 313.25765991]
[95.58709717 298.26080322]
[95.27912140 283.26397705]
[94.97114563 268.26712036]
[94.66316223 253.27029419]
[94.35518646 238.27345276]
[94.04721069 223.27661133]
[93.73923492 208.27978516]
[93.43125916 193.28294373]
[93.12327576 178.28610229]
[92.81529999 163.28926086]
[81.92483521 153.19305420]
[81.39887238 137.98852539]
[92.06254578 126.63405609]
[91.75456238 111.63721466]
[84.26267242 124.63227844]
[74.02320862 135.59371948]
[61.56792068 143.95230103]
[47.54364777 149.27392578]
[32.67869949 151.28224182]
[17.74504852 149.87295532]
[3.51823592 145.11924744]
[-9.26290894 137.26797485]
[-19.93463135 126.72689819]
[-27.94272232 114.04342651]
[-32.87130356 99.87624359]
[-34.46442413 84.96108246]
[-32.63935089 70.07253265]
[-27.49085808 55.98377228]
[-19.28632545 43.42647934]
[-8.45182896 33.05278015]
[4.44996929 25.40139771]
[18.74904823 20.86969566]
[33.70282364 19.69300842]
[48.53471375 21.93244934]
[62.47445679 27.47171593]
[74.79814148 36.02314377]
[84.86576080 47.14263153]
[92.15447998 60.25272751]
[96.28578186 74.67258453]
[97.04538727 89.64908600]
[104.14179230 76.43390656]
[111.23819733 63.21872330]
[118.33459473 50.00354004]
[105.30638885 57.43764114]
[91.09575653 62.23949432]
[76.22859955 64.23139191]
[61.25513077 63.33961487]
[46.72949219 59.59716797]
[33.18925858 53.14255524]
[21.13552666 44.21464920]
[11.01438427 33.14385223]
[3.20039868 20.33988380]
[-2.01724720 6.27659273]
[-4.44545698 -8.52556229]
[-3.99436760 -23.51877785]
[-0.68067229 -38.14818192]
[5.37299442 -51.87236023]
[13.94259644 -64.18341064]
[24.71098709 -74.62571716]
[37.27964783 -82.81282806]
[51.18342972 -88.44175720]
[65.90778351 -91.30417633]
[80.90777588 -91.29416656]
[95.62829590 -88.41208649]
[109.52455139 -82.76460266]
[122.08226776 -74.56071472]
[132.83670044 -64.10404205]
[141.38986206 -51.78155899]
[147.42520142 -38.04930878]
[150.71936035 -23.41549683]
[151.15043640 -8.42169189]
[148.70246887 6.37720823]
[143.46604919 20.43352127]
[135.63238525 33.23048401]
[149.05982971 26.54440880]
[162.48728943 19.85833359]
[161.36813354 6.62570906]
[164.82270813 -6.16377020]
[172.41529846 -16.98086357]
[183.21678162 -24.53990364]
[195.91827393 -27.95159721]
[208.98970032 -26.82759857]
[220.86416626 -21.32459068]
[230.12573242 -12.12285709]
[243.81634521 -18.25203133]
[257.50698853 -24.38120461]
[271.19760132 -30.51037979]
[284.88821411 -36.63955307]
[286.38247681 -51.92558670]
[295.33258057 -64.40721893]
[309.33102417 -70.72695160]
[324.61230469 -69.18480682]
[337.06582642 -60.19561386]
[343.34164429 -46.17742157]
[341.75158691 -30.90105820]
[332.72341919 -18.47578049]
[318.68563843 -12.24392986]
[303.41430664 -13.88184261]
[291.01739502 -22.94892693]
[277.32678223 -16.81975365]
[263.63613892 -10.69057941]
[249.94552612 -4.56140566]
[236.25489807 1.56776810]
[236.29197693 18.41117287]
[228.96659851 33.63941574]
[215.69766235 44.19218063]
[199.10374451 47.92561340]
[182.48641968 44.04771423]
[169.17335510 33.28578186]
[155.74591064 39.97185898]
[142.31846619 46.65793228]
[131.54977417 57.09994125]
[124.45337677 70.31512451]
[117.35697174 83.53031158]
[110.26056671 96.74549103]
[106.75140381 111.32923889]
[107.05937958 126.32608032]
[118.18022156 137.23316956]
[118.27891541 152.44648743]
[107.81214142 162.98129272]
[108.12011719 177.97813416]
[108.42809296 192.97496033]
[108.73606873 207.97180176]
[109.04405212 222.96864319]
[109.35202789 237.96548462]
[109.66000366 252.96231079]
[109.96797943 267.95916748]
[110.27596283 282.95599365]
[110.58393860 297.95281982]
[110.89191437 312.94967651]
[125.54592896 316.54443359]
[138.76976013 323.81027222]
[149.66178894 334.25183105]
[157.47938538 347.15716553]
[161.68951416 361.64639282]
[162.00512695 376.73156738]
[158.40472412 391.38418579]
[151.13375854 404.60522461]
[140.68798828 415.49322510]
[127.77964020 423.30581665]
[113.28880310 427.51034546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 128]
[25 127]
[51 126]
[52 125]
[53 124]
[54 123]
[85 122]
[86 121]
[87 120]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
