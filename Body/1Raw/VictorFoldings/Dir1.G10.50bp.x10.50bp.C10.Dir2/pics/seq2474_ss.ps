%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUUGGACGGGGGGGGGGCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAAxxxxxxxxxxAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCCCCCCCCCCCAAUGGGAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.73086548]
[71.19830322 376.71484375]
[59.48964310 367.18542480]
[50.78712082 354.84976196]
[45.73651886 340.62322998]
[44.71262741 325.56155396]
[47.79142761 310.78237915]
[54.74444962 297.38244629]
[65.05573273 286.35614014]
[77.96011353 278.52160645]
[92.50000000 274.46029663]
[92.50000000 259.46029663]
[92.50000000 244.46031189]
[92.50000000 229.46031189]
[92.50000000 214.46031189]
[92.50000000 199.46031189]
[92.50000000 184.46031189]
[92.50000000 169.46031189]
[92.50000000 154.46031189]
[92.50000000 139.46031189]
[83.42797089 139.15859985]
[74.18703461 136.70782471]
[65.29521179 132.03407288]
[57.29137802 125.18914032]
[42.79578400 129.04629517]
[28.30018616 132.90345764]
[13.80458927 136.76062012]
[-0.69100755 140.61778259]
[-8.39903641 154.41494751]
[-23.62805557 158.64016724]
[-37.34295654 150.78669739]
[-41.40693665 135.51385498]
[-33.40890121 121.88275146]
[-18.09395027 117.98047638]
[-4.54816675 126.12217712]
[9.94742966 122.26502228]
[24.44302559 118.40785980]
[38.93862152 114.55069733]
[53.43421936 110.69354248]
[54.13537216 103.22638702]
[41.90285492 94.54505920]
[55.53767395 88.29208374]
[56.23882675 80.82492828]
[42.71463776 74.33676147]
[29.19044685 67.84859467]
[15.66625690 61.36043167]
[-0.63505590 63.14907074]
[-10.11522675 49.76780319]
[-3.02186799 34.98212433]
[13.34798050 34.00227356]
[22.15442276 47.83624268]
[35.67861176 54.32440567]
[49.20280075 60.81257248]
[62.72699356 67.30073547]
[77.02151489 58.73750687]
[92.60446167 55.73850632]
[107.48688507 58.14340973]
[119.94251251 65.13365173]
[129.69017029 53.73263550]
[139.43782043 42.33161545]
[149.18547058 30.93059349]
[158.93312073 19.52957153]
[152.65150452 -0.62361437]
[159.68533325 -20.33588791]
[177.00567627 -31.76206207]
[176.38169861 -46.74907684]
[175.75772095 -61.73609543]
[161.47206116 -66.93112946]
[150.26525879 -77.20128632]
[143.84628296 -90.98044586]
[143.19396973 -106.16737366]
[148.40779114 -120.44618988]
[158.69268799 -131.63946533]
[172.48027039 -138.04031372]
[187.66806030 -138.67265320]
[201.93998718 -133.44004822]
[213.11973572 -123.14044189]
[219.50244141 -109.34444427]
[220.11479187 -94.15584564]
[214.86341858 -79.89080048]
[204.54911804 -68.72462463]
[190.74473572 -62.36007309]
[191.36871338 -47.37305450]
[191.99269104 -32.38603973]
[196.67755127 -36.87875366]
[202.29177856 -40.70898438]
[212.27450562 -51.90475082]
[222.25723267 -63.10051727]
[232.23995972 -74.29627991]
[229.80958557 -89.74385071]
[237.92155457 -103.11283875]
[252.74565125 -108.09082794]
[267.28237915 -102.32736206]
[274.66793823 -88.54376984]
[271.41510010 -73.24824524]
[259.05975342 -63.66286469]
[243.43572998 -64.31355286]
[233.45300293 -53.11779022]
[223.47027588 -41.92202377]
[213.48754883 -30.72625732]
[216.80180359 -23.99827385]
[231.76925659 -23.01077080]
[223.43029785 -10.54230976]
[226.74455261 -3.81432652]
[241.70478821 -4.90563726]
[256.66503906 -5.99694777]
[263.28411865 -19.85636902]
[275.95516968 -28.53621101]
[291.26977539 -29.70164299]
[305.10839844 -23.03916550]
[313.74847412 -10.34095573]
[314.86590576 4.97723389]
[308.16006470 18.79488754]
[295.43484497 27.39512444]
[280.11322021 28.46452522]
[266.31665039 21.71542740]
[257.75634766 8.96330070]
[242.79611206 10.05461121]
[227.83586121 11.14592171]
[216.84124756 26.49126816]
[201.20320129 34.92835999]
[184.55447388 35.58361053]
[170.33413696 29.27722359]
[160.58648682 40.67824554]
[150.83883667 52.07926559]
[141.09118652 63.48028564]
[131.34353638 74.88130951]
[139.64756775 93.56295013]
[137.68045044 113.91218567]
[125.95178223 130.65731812]
[107.50000000 139.46031189]
[107.50000000 154.46031189]
[107.50000000 169.46031189]
[107.50000000 184.46031189]
[107.50000000 199.46031189]
[107.50000000 214.46031189]
[107.50000000 229.46031189]
[107.50000000 244.46031189]
[107.50000000 259.46029663]
[107.50000000 274.46029663]
[122.03988647 278.52160645]
[134.94427490 286.35614014]
[145.25555420 297.38244629]
[152.20857239 310.78237915]
[155.28736877 325.56155396]
[154.26348877 340.62322998]
[149.21287537 354.84976196]
[140.51036072 367.18542480]
[128.80169678 376.71484375]
[114.95575714 382.73086548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[43 54]
[44 53]
[45 52]
[46 51]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[65 84]
[66 83]
[67 82]
[86 100]
[87 99]
[88 98]
[89 97]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
