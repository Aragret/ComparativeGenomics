%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAAUUACGGGGGGGGGGCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAxxxxxxxxxxACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCCCCCCCCCCCUCAUUUAC\
) } def
/len { sequence length } bind def

/coor [
[76.32914734 456.86996460]
[63.77092361 448.51879883]
[53.68470001 437.30636597]
[46.70450974 423.93743896]
[43.26912308 409.25247192]
[43.59450150 394.17449951]
[47.66018677 379.65136719]
[55.21060562 366.59603882]
[65.77113342 355.82913208]
[78.67793274 348.02749634]
[93.11965942 343.68154907]
[92.49568176 328.69454956]
[91.87170410 313.70751953]
[91.24772644 298.72048950]
[90.62374878 283.73348999]
[89.99977112 268.74645996]
[89.37579346 253.75946045]
[88.75181580 238.77244568]
[88.12783813 223.78541565]
[87.50386047 208.79840088]
[86.87988281 193.81138611]
[84.48503113 191.14077759]
[83.29876709 187.15399170]
[83.93600464 182.44801331]
[86.71411133 177.87617493]
[87.02616882 162.87940979]
[77.74218750 148.01982117]
[87.32490540 132.33061218]
[87.32490540 117.33061218]
[83.97039795 90.67893219]
[77.34189606 77.22296906]
[70.71340179 63.76699829]
[64.08489990 50.31103516]
[59.21918869 64.49993134]
[44.83415985 68.75092316]
[33.03749466 59.48600388]
[33.75828934 44.50333023]
[46.38994217 36.41361237]
[31.74644089 33.16278458]
[17.10293961 29.91195869]
[2.85212207 37.28038788]
[-11.73459148 30.60151482]
[-15.46752167 14.99879837]
[-5.48308563 2.44130683]
[10.55951309 2.56207418]
[20.35376549 15.26845741]
[34.99726486 18.51928329]
[49.64076614 21.77010918]
[55.23865128 16.77874565]
[66.43441772 6.79601955]
[72.03230286 1.80465627]
[70.47471619 -13.11425591]
[63.86952209 0.35316238]
[54.73414230 12.25042534]
[43.42860794 22.10866547]
[30.39846611 29.53937149]
[16.15723038 34.24969864]
[1.26614392 36.05401993]
[-13.68793774 34.88122177]
[-28.11567688 30.77752686]
[-41.44848251 23.90465927]
[-53.16091156 14.53347874]
[-62.79137802 3.03329968]
[-69.96035004 -10.14265823]
[-74.38529205 -24.47513390]
[-75.89183044 -39.39928436]
[-74.42059326 -54.32696152]
[-70.02954865 -68.66986084]
[-62.89175415 -81.86273193]
[-53.28850555 -93.38565063]
[-41.59827042 -102.78450012]
[-28.28175545 -109.68887329]
[-13.86375904 -113.82667542]
[1.08750677 -115.03483582]
[15.98281765 -113.26573181]
[30.23515129 -108.58908844]
[43.28282928 -101.18921661]
[54.61164474 -91.35774231]
[63.77512741 -79.48210907]
[70.41215515 -66.03034973]
[74.26115417 -51.53258514]
[75.17053223 -36.56230545]
[82.35304260 -49.73088837]
[89.53554535 -62.89947128]
[96.71805573 -76.06805420]
[95.77933502 -92.44031525]
[109.63537598 -101.21197510]
[124.03227997 -93.35950470]
[124.15974426 -76.96085358]
[109.88664246 -68.88554382]
[102.70413208 -55.71696472]
[95.52162170 -42.54838181]
[88.33911133 -29.37979889]
[85.39363098 -14.67183685]
[86.95121002 0.24707538]
[77.54087067 43.68253708]
[84.16936493 57.13850021]
[90.79786682 70.59446716]
[97.42636108 84.05043030]
[110.59494781 91.23294067]
[125.49684906 89.52024841]
[140.39875793 87.80756378]
[155.30065918 86.09487152]
[170.20256042 84.38217926]
[178.43302917 80.26986694]
[185.43185425 82.79219818]
[200.36616516 81.38989258]
[215.30047607 79.98758698]
[230.23477173 78.58528900]
[245.43928528 71.08467102]
[256.85580444 83.61861420]
[247.97209167 98.05870056]
[231.63708496 93.51959229]
[216.70277405 94.92189789]
[201.76846313 96.32420349]
[186.83415222 97.72650146]
[171.91523743 99.28408813]
[157.01333618 100.99677277]
[142.11143494 102.70946503]
[127.20954132 104.42215729]
[112.30763245 106.13484192]
[102.32490540 117.33061218]
[102.32490540 132.33061218]
[110.89819336 142.02352905]
[110.55294037 154.55746460]
[102.02291870 163.19146729]
[101.71086121 178.18823242]
[101.86689758 193.18740845]
[102.49087524 208.17442322]
[103.11485291 223.16143799]
[103.73883057 238.14846802]
[104.36280823 253.13548279]
[104.98678589 268.12249756]
[105.61076355 283.10949707]
[106.23474121 298.09652710]
[106.85871887 313.08355713]
[107.48269653 328.07055664]
[108.10667419 343.05758667]
[122.85968018 346.18801880]
[136.37031555 352.88977051]
[147.78929138 362.74154663]
[156.39880371 375.12408447]
[161.65765381 389.25900269]
[163.23526001 404.25772095]
[161.03245544 419.17745972]
[155.18771362 433.08032227]
[146.06842041 445.09237671]
[134.24786377 454.45852661]
[120.46904755 460.59002686]
[105.59814453 463.10144043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[25 127]
[26 126]
[28 123]
[29 122]
[30 99]
[31 98]
[32 97]
[33 96]
[38 48]
[39 47]
[40 46]
[51 95]
[52 94]
[82 93]
[83 92]
[84 91]
[85 90]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
