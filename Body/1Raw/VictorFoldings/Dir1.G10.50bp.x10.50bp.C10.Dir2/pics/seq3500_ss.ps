%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCAUCACCGGGGGGGGGGCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGxxxxxxxxxxACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUACCCCCCCCCCUACCAACACC\
) } def
/len { sequence length } bind def

/coor [
[89.81478119 468.30645752]
[75.96884155 462.29043579]
[64.26017761 452.76101685]
[55.55765152 440.42535400]
[50.50704956 426.19882202]
[49.48315811 411.13714600]
[52.56195831 396.35797119]
[59.51498032 382.95803833]
[69.82626343 371.93173218]
[82.73064423 364.09719849]
[97.27053070 360.03588867]
[97.27053070 345.03588867]
[97.27053070 330.03588867]
[97.27053070 315.03588867]
[97.27053070 300.03588867]
[97.27053070 285.03588867]
[97.27053070 270.03588867]
[97.27053070 255.03590393]
[97.27053070 240.03590393]
[97.27053070 225.03590393]
[81.12406921 219.64663696]
[67.75274658 209.07334900]
[58.76012802 194.56283569]
[55.23188400 177.83531189]
[57.60470200 160.88049316]
[65.61235046 145.72091675]
[78.31539154 134.17066956]
[94.21142578 127.61833954]
[93.27580261 112.64755249]
[85.70394897 100.89346313]
[91.75341034 88.28807831]
[90.81777954 73.31728363]
[82.23475647 60.02660370]
[89.16312408 46.84149551]
[88.22749329 31.87070465]
[87.13618469 16.91045761]
[85.88931274 1.96236992]
[84.64243317 -12.98571682]
[69.63291168 -13.04602814]
[54.68576813 -14.41428852]
[39.91475296 -17.08008194]
[25.43228722 -21.02312279]
[11.34859371 -26.21339989]
[-2.22913837 -32.61141205]
[-15.19757366 -40.16846466]
[-27.45801353 -48.82704163]
[-38.91714478 -58.52124786]
[-49.48775864 -69.17730713]
[-59.08940125 -80.71410370]
[-67.64900208 -93.04385376]
[-75.10140991 -106.07270813]
[-81.38990784 -119.70150757]
[-86.46663666 -133.82652283]
[-90.29296112 -148.34025574]
[-92.83975983 -163.13226318]
[-94.08763885 -178.08993530]
[-94.02712250 -193.09945679]
[-92.65865326 -208.04658508]
[-89.99265289 -222.81756592]
[-86.04940796 -237.29997253]
[-80.85893250 -251.38359070]
[-74.46073151 -264.96124268]
[-66.90349579 -277.92956543]
[-58.24474335 -290.18988037]
[-48.55037689 -301.64889526]
[-37.89417267 -312.21932983]
[-26.35723686 -321.82083130]
[-14.02736950 -330.38024902]
[-0.99841315 -337.83248901]
[12.63047314 -344.12078857]
[26.75556374 -349.19732666]
[41.26935577 -353.02343750]
[56.06138992 -355.57003784]
[71.01908875 -356.81768799]
[86.02860260 -356.75695801]
[100.97571564 -355.38827515]
[115.74665833 -352.72207642]
[130.22900391 -348.77862549]
[144.31256104 -343.58795166]
[157.89010620 -337.18957520]
[170.85833740 -329.63214111]
[183.11853027 -320.97323608]
[194.57739258 -311.27871704]
[205.14770508 -300.62234497]
[214.74902344 -289.08526611]
[223.30827332 -276.75527954]
[230.76031494 -263.72622681]
[237.04843140 -250.09725952]
[242.12477112 -235.97209167]
[245.95068359 -221.45825195]
[248.49707031 -206.66618347]
[249.74453735 -191.70846558]
[249.68359375 -176.69894409]
[248.31469727 -161.75186157]
[245.64828491 -146.98095703]
[241.70463562 -132.49865723]
[236.51376343 -118.41518402]
[230.11518860 -104.83771515]
[222.55758667 -91.86959839]
[213.89849854 -79.60952759]
[204.20379639 -68.15080261]
[193.54730225 -57.58063507]
[182.01010132 -47.97947693]
[169.67999268 -39.42039871]
[156.65081787 -31.96854019]
[143.02175903 -25.68061447]
[128.89653015 -20.60447884]
[114.38262939 -16.77876472]
[99.59052277 -14.23259163]
[100.83739471 0.71549541]
[102.08427429 15.66358280]
[105.79852295 22.10951042]
[103.19828796 30.93507767]
[104.13391876 45.90586853]
[112.65001678 58.12574005]
[105.78857422 72.38166046]
[106.72419739 87.35244751]
[114.29605103 99.10653687]
[108.24658966 111.71192169]
[109.18222046 126.68271637]
[121.95107269 129.59652710]
[133.50732422 135.73100281]
[143.05560303 144.65592957]
[149.94082642 155.74932861]
[153.69314575 168.24075317]
[154.05998230 181.26486206]
[151.02307129 193.92134094]
[144.79916382 205.33706665]
[135.82461548 214.72648621]
[124.72480774 221.44554138]
[112.27053070 225.03590393]
[112.27053070 240.03590393]
[112.27053070 255.03590393]
[112.27053070 270.03588867]
[112.27053070 285.03588867]
[112.27053070 300.03588867]
[112.27053070 315.03588867]
[112.27053070 330.03588867]
[112.27053070 345.03588867]
[112.27053070 360.03588867]
[126.81041718 364.09719849]
[139.71479797 371.93173218]
[150.02609253 382.95803833]
[156.97911072 396.35797119]
[160.05790710 411.13714600]
[159.03401184 426.19882202]
[153.98341370 440.42535400]
[145.28088379 452.76101685]
[133.57221985 462.29043579]
[119.72628784 468.30645752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 120]
[29 119]
[31 117]
[32 116]
[34 114]
[35 113]
[36 111]
[37 110]
[38 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
