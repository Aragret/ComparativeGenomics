%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUCUCCACGGGGGGGGGGACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGxxxxxxxxxxAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACCCCCCCCCCCUUAUCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[84.00648499 394.57656860]
[70.78628540 387.30410767]
[59.89948273 376.85708618]
[52.08835220 363.94784546]
[47.88547134 349.45654297]
[47.57740021 334.37118530]
[51.18514252 319.72036743]
[58.46271515 306.50299072]
[68.91392517 295.62020874]
[81.82618713 287.81405640]
[96.31912231 283.61679077]
[96.00706482 268.62002563]
[95.69500732 253.62327576]
[95.38294983 238.62652588]
[95.07089233 223.62976074]
[94.75884247 208.63301086]
[94.44678497 193.63626099]
[94.13472748 178.63951111]
[93.82266998 163.64274597]
[93.51061249 148.64599609]
[75.16737366 142.33067322]
[60.70446014 129.40078735]
[47.46187592 136.44592285]
[41.41860962 151.30722046]
[25.99149323 155.70989990]
[13.01488781 146.27659607]
[12.44333553 130.24372864]
[24.71528244 119.91034698]
[40.41674042 123.20333099]
[53.65932846 116.15819550]
[51.02444077 103.15273285]
[51.97006989 89.91678619]
[56.42708969 77.41799927]
[64.06964874 66.57014465]
[74.33901215 58.16629410]
[86.48440552 52.82083130]
[99.61790466 50.92455673]
[101.79473877 36.08335114]
[103.97158051 21.24214363]
[106.14841461 6.40093851]
[91.88307953 -8.58165932]
[95.11474609 -31.39068985]
[83.03475952 -40.28303909]
[70.95476532 -49.17538834]
[58.87477875 -58.06773758]
[46.79479218 -66.96009064]
[34.71480179 -75.85243988]
[22.63481522 -84.74478912]
[10.55482578 -93.63713837]
[-4.59787893 -89.77326202]
[-18.66668510 -96.59987640]
[-25.00873375 -110.89366913]
[-20.62950134 -125.90554047]
[-7.59672880 -134.54734802]
[7.93590736 -132.73869324]
[18.63437080 -121.33357239]
[19.44717598 -105.71712494]
[31.52716446 -96.82477570]
[43.60715103 -87.93242645]
[55.68714142 -79.04007721]
[67.76712799 -70.14772797]
[79.84711456 -61.25537491]
[91.92710876 -52.36302567]
[104.00709534 -43.47067642]
[118.79980469 -45.95579529]
[127.31089020 -58.30736923]
[116.13266754 -68.34108734]
[106.32933807 -79.72190857]
[98.06188202 -92.26294708]
[91.46607208 -105.75826263]
[86.65019989 -119.98625183]
[83.69335938 -134.71328735]
[82.64410400 -149.69752502]
[83.51965332 -164.69291687]
[86.30564117 -179.45321655]
[90.95630646 -193.73605347]
[97.39529419 -207.30690002]
[105.51686859 -219.94290161]
[115.18766022 -231.43655396]
[126.24886322 -241.59913635]
[138.51884460 -250.26376343]
[151.79612732 -257.28814697]
[165.86268616 -262.55694580]
[180.48753357 -265.98367310]
[195.43051147 -267.51199341]
[210.44624329 -267.11685181]
[225.28816223 -264.80474854]
[239.71253967 -260.61361694]
[253.48252869 -254.61230469]
[266.37200928 -246.89935303]
[278.16931152 -237.60140991]
[288.68072510 -226.87115479]
[297.73364258 -214.88478088]
[305.17941284 -201.83914185]
[310.89575195 -187.94842529]
[314.78881836 -173.44076538]
[316.79467773 -158.55436707]
[316.88034058 -143.53367615]
[315.04449463 -128.62536621]
[311.31719971 -114.07421875]
[305.75970459 -100.11920166]
[298.46325684 -86.98945618]
[289.54766846 -74.90058136]
[279.15936279 -64.05110168]
[267.46890259 -54.61915970]
[254.66827393 -46.75964355]
[240.96765137 -40.60161591]
[226.59202576 -36.24619675]
[211.77745056 -33.76490021]
[196.76721191 -33.19847488]
[181.80776978 -34.55622482]
[167.14477539 -37.81584930]
[153.01902771 -42.92382812]
[139.66246033 -49.79627991]
[131.15136719 -37.44470596]
[142.15019226 -19.34280586]
[137.05760193 -0.25275880]
[120.98962402 8.57777500]
[118.81278229 23.41898155]
[116.63594818 38.26018524]
[114.45910645 53.10139084]
[127.52989960 59.37180710]
[138.19850159 69.18733215]
[145.53398132 81.69149780]
[148.89630127 95.79321289]
[147.99205017 110.26200867]
[142.90013123 123.83535767]
[134.06484985 135.32890320]
[122.25716400 143.73973083]
[108.50737000 148.33393860]
[108.81942749 163.33070374]
[109.13147736 178.32745361]
[109.44353485 193.32420349]
[109.75559235 208.32095337]
[110.06764984 223.31770325]
[110.37970734 238.31446838]
[110.69176483 253.31121826]
[111.00381470 268.30798340]
[111.31587219 283.30471802]
[125.97086334 286.89550781]
[139.19667053 294.15774536]
[150.09153748 304.59634399]
[157.91264343 317.49954224]
[162.12670898 331.98760986]
[162.44642639 347.07272339]
[158.85000610 361.72631836]
[151.58264160 374.94934082]
[141.13984680 385.84017944]
[128.23361206 393.65628052]
[113.74391937 397.86474609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 30]
[23 29]
[37 121]
[38 120]
[39 119]
[40 118]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[65 115]
[66 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
