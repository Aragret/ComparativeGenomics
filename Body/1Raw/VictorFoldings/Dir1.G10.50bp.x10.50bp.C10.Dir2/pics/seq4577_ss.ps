%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAUCACGGGGGGGGGGACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCxxxxxxxxxxUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACCCCCCCCCCCACCUAUCCC\
) } def
/len { sequence length } bind def

/coor [
[55.89997101 371.96560669]
[42.67977524 364.69314575]
[31.79297256 354.24615479]
[23.98184204 341.33688354]
[19.77895927 326.84558105]
[19.47088814 311.76025391]
[23.07862854 297.10940552]
[30.35620117 283.89202881]
[40.80741119 273.00924683]
[53.71967316 265.20312500]
[68.21260834 261.00582886]
[67.90055084 246.00907898]
[67.58849335 231.01232910]
[67.27643585 216.01556396]
[66.96438599 201.01881409]
[66.65232849 186.02206421]
[66.34027100 171.02531433]
[66.02821350 156.02854919]
[65.71615601 141.03179932]
[53.54432297 132.26559448]
[39.22172546 136.72241211]
[24.89912605 141.17922974]
[10.57652950 145.63603210]
[9.22965717 160.77719116]
[2.18661213 174.24804688]
[-9.47859192 183.99440002]
[-23.98709679 188.53001404]
[-39.12646103 187.16322327]
[-52.58803940 180.10246277]
[-62.31904221 168.42443848]
[-66.83555603 153.90998840]
[-65.44886017 138.77243042]
[-58.37039566 125.32015228]
[-46.67958832 115.60452271]
[-32.15920258 111.10710144]
[-17.02348709 112.51371765]
[-3.58053112 119.60986328]
[6.11971378 131.31344604]
[20.44231033 126.85662842]
[34.76490784 122.39981079]
[49.08750534 117.94299316]
[50.02313232 102.97220612]
[36.36689377 96.76679993]
[22.71065140 90.56138611]
[9.05440998 84.35597992]
[-6.41107321 88.62194061]
[-19.30367088 79.07413483]
[-19.73328590 63.03683853]
[-7.37035322 52.81248093]
[8.30134201 56.24431992]
[15.25981712 70.69973755]
[28.91605949 76.90515137]
[42.57229996 83.11055756]
[56.22854233 89.31596375]
[76.49579620 67.64661407]
[102.61088562 65.17451477]
[106.91847229 50.80633163]
[111.22605896 36.43814850]
[107.77768707 20.99731636]
[118.84400177 11.02806854]
[105.17391968 4.79568863]
[92.47984314 -3.24011183]
[80.99824524 -12.92963028]
[70.94303894 -24.09235764]
[62.50152969 -36.52033997]
[55.83098602 -49.98204803]
[51.05567932 -64.22670746]
[48.26456451 -78.98892975]
[47.50963974 -93.99372864]
[48.80496597 -108.96155548]
[52.12641907 -123.61357880]
[57.41212082 -137.67683411]
[64.56359863 -150.88932800]
[73.44762421 -163.00492859]
[83.89869690 -173.79792786]
[95.72211456 -183.06726074]
[108.69761658 -190.64024353]
[122.58348083 -196.37579346]
[137.12101746 -200.16705322]
[152.03941345 -201.94342041]
[167.06072998 -201.67176819]
[181.90513611 -199.35717773]
[196.29609680 -195.04277039]
[209.96549988 -188.80891418]
[222.65870667 -180.77172852]
[234.13925171 -171.08097839]
[244.19325256 -159.91716003]
[252.63342285 -147.48826599]
[259.30249023 -134.02583313]
[264.07626343 -119.78065491]
[266.86578369 -105.01812744]
[267.61907959 -90.01325226]
[266.32214355 -75.04556274]
[262.99911499 -60.39390182]
[257.71188354 -46.33121872]
[250.55897522 -33.11949539]
[241.67362976 -21.00485229]
[231.22140503 -10.21298313]
[219.39697266 -0.94493210]
[206.42065430 6.62664270]
[192.53416443 12.36068726]
[177.99621582 16.15037918]
[163.07763672 17.92512131]
[148.05635071 17.65184784]
[133.21218872 15.33565331]
[136.96865845 29.74877739]
[125.59423828 40.74573517]
[121.28665924 55.11391830]
[116.97907257 69.48210144]
[124.66958618 75.28072357]
[130.48367310 82.95955658]
[133.97909546 91.93451691]
[134.88999939 101.52296448]
[149.38558960 105.38011932]
[163.88117981 109.23728180]
[178.37678528 113.09444427]
[191.92256165 104.95273590]
[207.23751831 108.85501862]
[215.23554993 122.48612213]
[211.17156982 137.75895691]
[197.45666504 145.61242676]
[182.22764587 141.38720703]
[174.51962280 127.59004211]
[160.02403259 123.73287964]
[145.52842712 119.87571716]
[131.03283691 116.01856232]
[126.16828918 126.08666229]
[117.98585510 134.57859802]
[107.03015900 140.39602661]
[94.20764160 142.63821411]
[80.71291351 140.71974182]
[81.02497101 155.71649170]
[81.33702087 170.71325684]
[81.64907837 185.71000671]
[81.96113586 200.70675659]
[82.27319336 215.70350647]
[82.58525085 230.70027161]
[82.89730835 245.69702148]
[83.20935822 260.69378662]
[97.86435699 264.28454590]
[111.09016418 271.54681396]
[121.98503113 281.98538208]
[129.80612183 294.88861084]
[134.02020264 309.37667847]
[134.33992004 324.46176147]
[130.74349976 339.11538696]
[123.47612762 352.33837891]
[113.03332520 363.22921753]
[100.12709808 371.04531860]
[85.63740540 375.25381470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 41]
[21 40]
[22 39]
[23 38]
[42 54]
[43 53]
[44 52]
[45 51]
[56 109]
[57 108]
[58 107]
[60 105]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
