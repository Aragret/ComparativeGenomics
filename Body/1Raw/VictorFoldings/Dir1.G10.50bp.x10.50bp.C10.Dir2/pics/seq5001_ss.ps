%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUAGGAGGGGGGGGGGAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUxxxxxxxxxxAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGCCCCCCCCCCAAAAAUAGGA\
) } def
/len { sequence length } bind def

/coor [
[82.73209381 499.01187134]
[68.88615417 492.99581909]
[57.17749405 483.46640015]
[48.47496796 471.13073730]
[43.42436600 456.90423584]
[42.40047455 441.84252930]
[45.47927475 427.06338501]
[52.43229675 413.66345215]
[62.74357986 402.63711548]
[75.64796448 394.80261230]
[90.18785095 390.74130249]
[90.18785095 375.74130249]
[90.18785095 360.74130249]
[90.18785095 345.74130249]
[90.18785095 330.74130249]
[90.18785095 315.74130249]
[90.18785095 300.74130249]
[90.18785095 285.74130249]
[90.18785095 270.74130249]
[90.18785095 255.74130249]
[76.71480560 251.29064941]
[65.26317596 242.87628174]
[56.96514130 231.31361389]
[52.64621735 217.73008728]
[52.74311447 203.45533752]
[57.25961304 189.89091492]
[65.76490784 178.37280273]
[77.43465424 170.03971863]
[91.13084412 165.72065735]
[91.44290161 150.72390747]
[91.75495911 135.72715759]
[76.97436523 128.53472900]
[66.82141876 115.60743713]
[63.33664322 99.54340363]
[48.69313812 96.29257965]
[34.04963684 93.04174805]
[19.40613747 89.79092407]
[4.76263571 86.54010010]
[-9.88086510 83.28927612]
[-24.52436638 80.03844452]
[-38.77518463 87.40687561]
[-53.36189651 80.72800446]
[-57.09482956 65.12528992]
[-47.11039352 52.56779480]
[-31.06779289 52.68856430]
[-21.27354050 65.39494324]
[-6.63003969 68.64577484]
[8.01346207 71.89659882]
[22.65696335 75.14742279]
[37.30046463 78.39824677]
[51.94396591 81.64907837]
[66.58746338 84.89990234]
[75.88409424 72.38056183]
[89.54251862 64.85669708]
[88.29564667 49.90861511]
[87.04877472 34.96052551]
[85.80189514 20.01243973]
[74.01960754 9.82345390]
[72.96804047 -5.35379362]
[82.75429535 -16.52361488]
[81.50741577 -31.47170067]
[80.26054382 -46.41978836]
[79.01367188 -61.36787415]
[77.76679230 -76.31596375]
[63.03628540 -79.76084900]
[50.09231567 -87.59085083]
[40.20300674 -99.03884888]
[34.33720779 -112.98329926]
[33.06959534 -128.05805969]
[36.52435684 -142.78625488]
[44.36302567 -155.72497559]
[55.81764984 -165.60661316]
[69.76602173 -171.46305847]
[84.84162903 -172.72056580]
[99.56751251 -169.25595093]
[112.50097656 -161.40861511]
[122.37493134 -149.94737244]
[128.22203064 -135.99507141]
[129.46945190 -120.91862488]
[125.99494934 -106.19506836]
[118.13895416 -93.26686859]
[106.67108917 -83.40058899]
[92.71488190 -77.56283569]
[93.96175385 -62.61474991]
[95.20863342 -47.66666412]
[96.45550537 -32.71857452]
[97.70237732 -17.77048874]
[109.20394135 -8.37636280]
[110.68139648 6.76536083]
[100.74998474 18.76556396]
[101.99685669 33.71365356]
[103.24373627 48.66173935]
[104.49060822 63.60982513]
[113.37757874 65.86130524]
[121.42823792 70.24700165]
[128.13928223 76.49273682]
[133.09115601 84.20806122]
[147.66386414 80.65329742]
[162.23657227 77.09854126]
[176.80926514 73.54377747]
[179.09794617 58.51612473]
[186.96752930 45.51081085]
[199.21795654 36.51105118]
[213.98110962 32.88924789]
[229.00575256 35.19769669]
[242.00070190 43.08437729]
[250.98432922 55.34662628]
[254.58671570 70.11454010]
[252.25849915 85.13611603]
[244.35473633 98.12068176]
[232.08067322 107.08818054]
[217.30802917 110.67113495]
[202.28953552 108.32316589]
[189.31536865 100.40232086]
[180.36402893 88.11647797]
[165.79133606 91.67124176]
[151.21862793 95.22600555]
[136.64591980 98.78076935]
[133.17857361 115.60743713]
[122.42702484 129.00756836]
[106.75170898 136.03921509]
[106.43965149 151.03596497]
[106.12760162 166.03271484]
[120.98673248 171.69732666]
[132.99526978 182.08125305]
[140.71926880 195.92036438]
[143.24468994 211.53944397]
[140.28553772 227.05493164]
[132.21607971 240.60208130]
[120.02363586 250.55911255]
[105.18785095 255.74130249]
[105.18785095 270.74130249]
[105.18785095 285.74130249]
[105.18785095 300.74130249]
[105.18785095 315.74130249]
[105.18785095 330.74130249]
[105.18785095 345.74130249]
[105.18785095 360.74130249]
[105.18785095 375.74130249]
[105.18785095 390.74130249]
[119.72773743 394.80261230]
[132.63211060 402.63711548]
[142.94340515 413.66345215]
[149.89642334 427.06338501]
[152.97521973 441.84252930]
[151.95132446 456.90423584]
[146.90072632 471.13073730]
[138.19821167 483.46640015]
[126.48954010 492.99581909]
[112.64360046 499.01187134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 123]
[30 122]
[31 121]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[54 93]
[55 92]
[56 91]
[57 90]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[97 118]
[98 117]
[99 116]
[100 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
