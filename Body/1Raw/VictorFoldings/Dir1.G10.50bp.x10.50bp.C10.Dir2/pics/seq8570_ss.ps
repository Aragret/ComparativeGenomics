%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACUAGUGGGGGGGGGGUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACxxxxxxxxxxUCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCCCCCCCCCCCAUACUAGU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.73730469]
[71.19830322 352.72128296]
[59.48964310 343.19186401]
[50.78712082 330.85620117]
[45.73651886 316.62966919]
[44.71262741 301.56799316]
[47.79142761 286.78881836]
[54.74444962 273.38888550]
[65.05573273 262.36254883]
[77.96011353 254.52806091]
[92.50000000 250.46673584]
[92.50000000 235.46673584]
[92.50000000 220.46673584]
[92.50000000 205.46673584]
[92.50000000 190.46673584]
[92.50000000 175.46673584]
[92.50000000 160.46673584]
[92.50000000 145.46673584]
[92.50000000 130.46673584]
[92.50000000 115.46674347]
[91.50852203 130.43394470]
[81.56265259 141.66246033]
[66.82457733 144.45335388]
[53.46193695 137.63867188]
[47.06678391 124.07024384]
[50.31538773 109.42624664]
[61.84825516 99.83495331]
[76.84027863 99.31053162]
[61.84758377 98.84248352]
[46.85488892 98.37444305]
[41.25155640 112.45913696]
[31.16658020 123.77589417]
[17.81777191 130.95817566]
[2.81706405 133.13867188]
[-12.02413368 130.05409241]
[-24.91367531 122.07690430]
[-34.29508591 110.17039490]
[-39.03551483 95.77233124]
[-38.56253052 80.62136078]
[-32.93325043 66.54701996]
[-22.82743645 55.24886322]
[-9.46541595 48.09119797]
[5.53928471 45.93834305]
[20.37477303 49.05027008]
[33.24959183 57.05120087]
[42.60904312 68.97497559]
[47.32292938 83.38175201]
[62.31562805 83.84979248]
[77.30832672 84.31783295]
[85.28728485 82.73055267]
[92.33901978 83.94346619]
[97.63151550 87.32529449]
[100.60491180 92.02523041]
[109.86985779 80.22859192]
[119.13481140 68.43195343]
[128.39976501 56.63531494]
[137.66470337 44.83867264]
[146.92965698 33.04203415]
[156.07139587 21.14965439]
[158.18457031 5.47020864]
[172.01885986 -0.04901436]
[180.40100098 -12.48845482]
[188.12509155 -25.34685707]
[195.84916687 -38.20526123]
[203.57325745 -51.06366348]
[191.81512451 -60.41253281]
[181.37789917 -71.21620941]
[172.44018555 -83.28981781]
[165.15489197 -96.42678070]
[159.64671326 -110.40229034]
[156.00988770 -124.97721863]
[154.30664062 -139.90216064]
[154.56611633 -154.92173767]
[156.78387451 -169.77894592]
[160.92198181 -184.21954346]
[166.90960693 -197.99645996]
[174.64431763 -210.87393188]
[183.99374390 -222.63162231]
[194.79792786 -233.06832886]
[206.87196350 -242.00547791]
[220.00926208 -249.29013062]
[233.98504639 -254.79765320]
[248.56013489 -258.43377686]
[263.48516846 -260.13632202]
[278.50473022 -259.87612915]
[293.36181641 -257.65765381]
[307.80224609 -253.51887512]
[321.57885742 -247.53057861]
[334.45596313 -239.79525757]
[346.21319580 -230.44526672]
[356.64941406 -219.64060974]
[365.58596802 -207.56614685]
[372.86999512 -194.42848206]
[378.37686157 -180.45245361]
[382.01229858 -165.87718201]
[383.71414185 -150.95207214]
[383.45321655 -135.93252563]
[381.23403931 -121.07553101]
[377.09457397 -106.63531494]
[371.10562134 -92.85897827]
[363.36968994 -79.98223877]
[354.01913452 -68.22544098]
[343.21398926 -57.78976440]
[331.13909912 -48.85376740]
[318.00109863 -41.57035828]
[304.02478027 -36.06417084]
[289.44934082 -32.42942047]
[274.52416992 -30.72830200]
[259.50460815 -30.98992538]
[244.64773560 -33.20981216]
[230.20771790 -37.34997559]
[216.43165588 -43.33957672]
[208.70758057 -30.48117447]
[200.98348999 -17.62277222]
[193.25939941 -4.76436996]
[208.24443054 -5.43452072]
[218.27098083 5.72201014]
[216.01046753 20.55070114]
[203.11514282 28.21298027]
[189.01043701 23.10833931]
[184.00569153 8.96851540]
[182.53750610 23.79058266]
[168.05822754 30.16718483]
[166.54061890 37.45021439]
[158.72630310 42.30698395]
[149.46134949 54.10362244]
[140.19639587 65.90026093]
[130.93144226 77.69690704]
[121.66650391 89.49354553]
[112.40155029 101.29018402]
[107.50000000 115.46674347]
[107.50000000 130.46673584]
[107.50000000 145.46673584]
[107.50000000 160.46673584]
[107.50000000 175.46673584]
[107.50000000 190.46673584]
[107.50000000 205.46673584]
[107.50000000 220.46673584]
[107.50000000 235.46673584]
[107.50000000 250.46673584]
[122.03988647 254.52806091]
[134.94427490 262.36254883]
[145.25555420 273.38888550]
[152.20857239 286.78881836]
[155.28736877 301.56799316]
[154.26348877 316.62966919]
[149.21287537 330.85620117]
[140.51036072 343.19186401]
[128.80169678 352.72128296]
[114.95575714 358.73730469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 49]
[29 48]
[30 47]
[53 130]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 123]
[61 121]
[62 115]
[63 114]
[64 113]
[65 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
