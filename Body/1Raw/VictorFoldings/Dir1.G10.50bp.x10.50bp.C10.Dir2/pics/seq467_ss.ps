%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCAGCCUAACCGGGGGGGGGGAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCxxxxxxxxxxUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCCCCCCCCCCCACUCCAGCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[71.68273926 424.17056274]
[58.04723740 417.80899048]
[45.86223602 408.98165894]
[35.56822205 398.00759888]
[27.53730965 385.28356934]
[22.05981827 371.26950073]
[19.33375168 356.47204590]
[19.45765877 341.42608643]
[22.42705727 326.67550659]
[28.13460541 312.75357056]
[36.37398148 300.16354370]
[46.84733582 289.36050415]
[59.17606354 280.73501587]
[72.91448975 274.59887695]
[87.56597137 271.17391968]
[86.97337341 256.18560791]
[86.38077545 241.19732666]
[85.78817749 226.20904541]
[85.19557953 211.22074890]
[84.60297394 196.23246765]
[84.01037598 181.24417114]
[83.41777802 166.25587463]
[82.82518005 151.26759338]
[82.23258209 136.27929688]
[70.22042847 127.29553223]
[55.67560196 130.96269226]
[41.13077545 134.62985229]
[26.58595085 138.29701233]
[22.46862030 153.09373474]
[11.49331188 163.83795166]
[-3.38767242 167.63951111]
[-18.17142296 163.47583008]
[-28.88118362 152.46688843]
[-32.63608170 137.57406616]
[-28.42607307 122.80343628]
[-17.38362312 112.12823486]
[-2.47910023 108.42003632]
[12.27825642 112.67632294]
[22.91879272 123.75218201]
[37.46361923 120.08502197]
[52.00844193 116.41786194]
[66.55326843 112.75070190]
[65.86618042 95.67487335]
[73.05585480 80.91464233]
[85.83737946 71.71706390]
[100.78652191 69.76747894]
[104.88307953 55.33771133]
[108.97964478 40.90794373]
[98.72731781 20.00368309]
[93.22750092 6.04832554]
[87.72768402 -7.90703249]
[82.22786713 -21.86239052]
[74.34621429 -34.62481689]
[64.33129883 -45.79179764]
[56.22650528 -50.12175751]
[54.23150635 -57.27975845]
[44.43917465 -68.64242554]
[34.64684296 -80.00509644]
[18.86934471 -80.92493439]
[8.42595768 -92.78710938]
[9.51255798 -108.55400085]
[21.48448372 -118.87139130]
[37.23900604 -117.61815643]
[47.42924500 -105.53781891]
[46.00951004 -89.79742432]
[55.80184174 -78.43475342]
[65.59417725 -67.07209015]
[75.49828339 -55.80671310]
[85.51319885 -44.63973236]
[82.69055939 -59.37176132]
[84.47626495 -74.26509094]
[90.70156097 -87.91227722]
[100.77814484 -99.02364349]
[113.75376129 -106.54915619]
[128.40220642 -109.77763367]
[143.33917236 -108.40398407]
[157.15310669 -102.55802155]
[168.53857422 -92.79219818]
[176.41960144 -80.02938843]
[180.05146790 -65.47570801]
[179.09092712 -50.50649643]
[173.62875366 -36.53636169]
[164.18113708 -24.88550186]
[151.64088440 -16.65493965]
[137.19306946 -12.62247467]
[122.20304108 -13.16918182]
[108.08735657 -18.24339485]
[96.18322754 -27.36220741]
[101.68304443 -13.40684891]
[107.18286133 0.54850930]
[112.68267822 14.50386715]
[126.63803101 20.00368309]
[140.18000793 13.55270576]
[153.72196960 7.10172749]
[167.26393127 0.65074962]
[180.80590820 -5.80022860]
[194.34786987 -12.25120640]
[191.76132202 -27.12441444]
[193.28456116 -42.14381027]
[198.80459595 -56.19485855]
[207.91175842 -68.23487091]
[219.93026733 -77.37040710]
[233.96826172 -82.92354584]
[248.98402405 -84.48220825]
[263.86328125 -81.93072510]
[277.50192261 -75.45844269]
[288.88784790 -65.54564667]
[297.17611694 -52.92792130]
[301.75173950 -38.54159927]
[302.27514648 -23.45423126]
[298.70748901 -8.78540611]
[291.31353760 4.37635422]
[280.64193726 15.05436039]
[267.48461914 22.45623207]
[252.81794739 26.03270149]
[237.73027039 25.51837158]
[223.34120178 20.95140648]
[210.71849060 12.67070961]
[200.79884338 1.29076099]
[187.25688171 7.74173880]
[173.71492004 14.19271660]
[160.17294312 20.64369583]
[146.63098145 27.09467316]
[133.08900452 33.54565048]
[123.40940857 45.00450516]
[119.31285095 59.43427277]
[115.21629333 73.86403656]
[125.81374359 82.53288269]
[131.75100708 95.32437897]
[131.51979065 109.83567810]
[124.80979919 123.16623688]
[112.64058685 132.49757385]
[97.22087097 135.68670654]
[97.81346893 150.67498779]
[98.40606689 165.66328430]
[98.99866486 180.65156555]
[99.59127045 195.63986206]
[100.18386841 210.62815857]
[100.77646637 225.61643982]
[101.36906433 240.60473633]
[101.96166229 255.59301758]
[102.55426025 270.58129883]
[117.43041992 272.83883667]
[131.61041260 277.87115479]
[144.58164978 285.49633789]
[155.87522888 295.43875122]
[165.08288574 307.33898926]
[171.87178040 320.76684570]
[175.99649048 335.23693848]
[177.30790710 350.22613525]
[175.75863647 365.19265747]
[171.40467834 379.59542847]
[164.40341187 392.91378784]
[155.00794983 404.66629028]
[143.55792236 414.42813110]
[130.46723938 421.84637451]
[116.20911407 426.65289307]
[101.29898071 428.67391968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 42]
[26 41]
[27 40]
[28 39]
[46 127]
[47 126]
[48 125]
[49 91]
[50 90]
[51 89]
[52 88]
[53 69]
[54 68]
[56 67]
[57 66]
[58 65]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
