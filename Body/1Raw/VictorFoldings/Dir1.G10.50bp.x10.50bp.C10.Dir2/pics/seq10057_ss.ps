%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCUGAACGGGGGGGGGGGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUxxxxxxxxxxGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGCCCCCCCCCCACGCCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[100.41893768 457.54574585]
[85.92924500 453.33728027]
[73.02301025 445.52117920]
[62.58021164 434.63034058]
[55.31285095 421.40731812]
[51.71642303 406.75372314]
[52.03614426 391.66860962]
[56.25021362 377.18057251]
[64.07131195 364.27734375]
[74.96617889 353.83874512]
[88.19198608 346.57650757]
[102.84698486 342.98571777]
[103.15903473 327.98898315]
[103.47109222 312.99221802]
[103.78314972 297.99545288]
[104.09520721 282.99871826]
[104.40726471 268.00195312]
[104.71932220 253.00520325]
[105.03137207 238.00845337]
[105.34342957 223.01170349]
[105.65548706 208.01493835]
[105.96754456 193.01818848]
[105.03191376 178.04739380]
[102.85507965 163.20619202]
[100.52397156 148.38842773]
[98.03885651 133.59573364]
[95.55373383 118.80302429]
[84.83737183 115.18840027]
[77.04136658 105.47010803]
[75.55307007 91.94055939]
[60.73530960 89.60945892]
[45.91754913 87.27835083]
[31.09979248 84.94725037]
[23.78641129 98.22468567]
[12.37088776 108.19773102]
[-1.76829696 113.66209412]
[-16.92376709 113.95792389]
[-31.26542664 109.04949951]
[-43.06145096 99.52954102]
[-50.88741302 86.54763031]
[-53.79828644 71.67138672]
[-51.44257355 56.69719315]
[-44.10473633 43.43325806]
[-32.67085266 33.48126602]
[-18.52162170 28.04296875]
[-3.36563087 27.77506638]
[10.96695900 32.70991135]
[22.74541855 42.25159073]
[30.54744148 55.24790955]
[33.43089676 70.12949371]
[48.24865341 72.46059418]
[63.06641388 74.79169464]
[77.88417053 77.12280273]
[90.82222748 69.53289032]
[96.01763916 55.46137619]
[101.21305847 41.38985443]
[106.40847015 27.31833649]
[93.00569916 20.54608917]
[80.46228027 12.29015541]
[68.94174957 2.65816760]
[58.59430313 -8.22430134]
[49.55484009 -20.21537590]
[41.94120789 -33.15872955]
[35.85266876 -46.88561630]
[31.36859322 -61.21707916]
[28.54744339 -75.96627808]
[27.42600060 -90.94092560]
[28.01888084 -105.94580078]
[30.31835938 -120.78527832]
[34.29445648 -135.26589966]
[39.89533234 -149.19888306]
[47.04797363 -162.40257263]
[55.65912628 -174.70484924]
[65.61653137 -185.94529724]
[76.79036713 -195.97741699]
[89.03495789 -204.67037964]
[102.19068146 -211.91087341]
[116.08602142 -217.60449219]
[130.53981018 -221.67703247]
[145.36363220 -224.07537842]
[160.36422729 -224.76826477]
[175.34602356 -223.74665833]
[190.11369324 -221.02388000]
[204.47473145 -216.63543701]
[218.24189758 -210.63853455]
[231.23571777 -203.11134338]
[243.28677368 -194.15200806]
[254.23797607 -183.87733459]
[263.94653320 -172.42126465]
[272.28588867 -159.93316650]
[279.14733887 -146.57582092]
[284.44140625 -132.52339172]
[288.09906006 -117.95908356]
[290.07263184 -103.07275391]
[290.33639526 -88.05848694]
[288.88690186 -73.11202240]
[285.74307251 -58.42822266]
[280.94586182 -44.19851303]
[274.55783081 -30.60841560]
[266.66226196 -17.83510017]
[257.36206055 -6.04509306]
[246.77850342 4.60789680]
[235.04957581 13.98498726]
[222.32815552 21.96392822]
[208.78012085 28.44069672]
[194.58209229 33.33085632]
[179.91917419 36.57065201]
[164.98249817 38.11785126]
[149.96682739 37.95227814]
[135.06791687 36.07609177]
[120.47999573 32.51375198]
[115.28457642 46.58526993]
[110.08916473 60.65679169]
[104.89374542 74.72830963]
[122.13896179 95.81329346]
[110.34644318 116.31790161]
[112.83156586 131.11061096]
[115.31668091 145.90332031]
[119.85133362 153.90885925]
[117.69628143 161.02935791]
[119.87312317 175.87055969]
[128.45040894 163.56486511]
[142.56929016 158.49958801]
[157.01312256 162.54623413]
[166.44522095 174.20967102]
[167.38058472 189.18048096]
[159.47361755 201.92724609]
[145.64579773 207.74029541]
[131.00622559 204.47181702]
[120.96429443 193.33024597]
[120.65224457 208.32699585]
[120.34018707 223.32376099]
[120.02812958 238.32051086]
[119.71607208 253.31726074]
[119.40401459 268.31402588]
[119.09195709 283.31076050]
[118.77990723 298.30752563]
[118.46784973 313.30429077]
[118.15579224 328.30102539]
[117.84373474 343.29779053]
[132.33666992 347.49505615]
[145.24893188 355.30120850]
[155.70013428 366.18399048]
[162.97770691 379.40136719]
[166.58544922 394.05218506]
[166.27738953 409.13754272]
[162.07450867 423.62884521]
[154.26336670 436.53808594]
[143.37657166 446.98510742]
[130.15637207 454.25756836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 121]
[24 120]
[25 118]
[26 117]
[27 116]
[30 53]
[31 52]
[32 51]
[33 50]
[54 114]
[55 113]
[56 112]
[57 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
