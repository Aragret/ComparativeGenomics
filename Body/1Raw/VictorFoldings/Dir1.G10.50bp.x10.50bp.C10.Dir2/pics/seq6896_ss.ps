%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUAGACAGGGGGGGGGGCACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCxxxxxxxxxxCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUCCCCCCCCCCGACGUUGACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.93508911]
[71.19830322 359.91906738]
[59.48964310 350.38964844]
[50.78712082 338.05398560]
[45.73651886 323.82748413]
[44.71262741 308.76577759]
[47.79142761 293.98663330]
[54.74444962 280.58670044]
[65.05573273 269.56036377]
[77.96011353 261.72586060]
[92.50000000 257.66455078]
[92.50000000 242.66455078]
[92.50000000 227.66455078]
[92.50000000 212.66455078]
[92.50000000 197.66455078]
[92.50000000 182.66455078]
[92.50000000 167.66455078]
[92.50000000 152.66455078]
[92.50000000 137.66455078]
[92.50000000 122.66454315]
[80.64824677 113.98002625]
[76.12675476 100.00000000]
[80.64824677 86.01997375]
[92.50000000 77.33545685]
[92.50000000 62.33545303]
[92.50000000 47.33545303]
[84.62386322 60.10128403]
[74.23179626 70.91816711]
[61.79159927 79.29919434]
[47.86326599 84.86708832]
[33.07376480 87.37121582]
[18.08884048 86.69886017]
[3.58303237 82.88027954]
[-9.79068851 76.08737183]
[-21.43031120 66.62591553]
[-30.81188202 54.92181015]
[-37.51309586 41.50190735]
[-41.23230362 26.97030449]
[-41.80208588 11.98113060]
[-39.19678879 -2.79088449]
[-33.53369522 -16.68078613]
[-25.06772423 -29.06332779]
[-14.17996693 -39.38111496]
[-1.36052978 -47.16969681]
[12.81352711 -52.07847595]
[27.70416451 -53.88648605]
[42.64109039 -52.51234055]
[56.95192337 -48.01789856]
[69.99246979 -40.60546875]
[81.17572021 -30.60872078]
[89.99826050 -18.47765350]
[96.06295013 -4.75834131]
[99.09679413 9.93164825]
[98.96295929 24.93332100]
[106.95287323 12.23839188]
[114.94278717 -0.45653787]
[122.93270874 -13.15146732]
[111.05847168 -22.33613014]
[100.12612915 -32.62395859]
[90.23775482 -43.91889191]
[81.48567200 -56.11547470]
[73.95160675 -69.09982300]
[67.70589447 -82.75070953]
[62.80686188 -96.94066620]
[59.30024338 -111.53721619]
[57.21878433 -126.40406036]
[56.58191681 -141.40238953]
[57.39558411 -156.39216614]
[59.65219498 -171.23342896]
[63.33068085 -185.78761292]
[68.39669037 -199.91882324]
[74.80291748 -213.49511719]
[82.48956299 -226.38973999]
[91.38484192 -238.48226929]
[101.40570831 -249.65982056]
[112.45859528 -259.81802368]
[124.44030762 -268.86206055]
[137.23896790 -276.70742798]
[150.73506165 -283.28091431]
[164.80259705 -288.52114868]
[179.31022644 -292.37915039]
[194.12248230 -294.81896973]
[209.10105896 -295.81781006]
[224.10610962 -295.36630249]
[238.99754333 -293.46868896]
[253.63629150 -290.14266968]
[267.88571167 -285.41934204]
[281.61270142 -279.34277344]
[294.68917847 -271.96972656]
[306.99295044 -263.36898804]
[318.40921021 -253.62094116]
[328.83132935 -242.81654358]
[338.16198730 -231.05670166]
[346.31411743 -218.45120239]
[353.21154785 -205.11775208]
[358.78988647 -191.18083191]
[362.99710083 -176.77059937]
[365.79382324 -162.02157593]
[367.15402222 -147.07147217]
[367.06494141 -132.05989075]
[365.52743530 -117.12698364]
[362.55584717 -102.41219330]
[358.17794800 -88.05289459]
[352.43460083 -74.18316650]
[345.37942505 -60.93250656]
[337.07827759 -48.42464066]
[327.60870361 -36.77635193]
[317.05908203 -26.09639931]
[305.52795410 -16.48450279]
[293.12298584 -8.03040695]
[279.95996094 -0.81304777]
[266.16180420 5.10018635]
[251.85733032 9.65408421]
[237.18013000 12.80612659]
[222.26724243 14.52688217]
[207.25788879 14.80028534]
[192.29220581 13.62378216]
[177.50994873 11.00835896]
[163.04913330 6.97843456]
[149.04478455 1.57163692]
[135.62763977 -5.16155148]
[127.63771820 7.53337860]
[119.64780426 20.22830772]
[111.65789032 32.92323685]
[107.50000000 47.33545303]
[107.50000000 62.33545303]
[107.50000000 77.33545685]
[119.35175323 86.01997375]
[123.87324524 100.00000000]
[119.35175323 113.98002625]
[107.50000000 122.66454315]
[107.50000000 137.66455078]
[107.50000000 152.66455078]
[107.50000000 167.66455078]
[107.50000000 182.66455078]
[107.50000000 197.66455078]
[107.50000000 212.66455078]
[107.50000000 227.66455078]
[107.50000000 242.66455078]
[107.50000000 257.66455078]
[122.03988647 261.72586060]
[134.94427490 269.56036377]
[145.25555420 280.58670044]
[152.20857239 293.98663330]
[155.28736877 308.76577759]
[154.26348877 323.82748413]
[149.21287537 338.05398560]
[140.51036072 350.38964844]
[128.80169678 359.91906738]
[114.95575714 365.93508911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 127]
[25 126]
[26 125]
[54 124]
[55 123]
[56 122]
[57 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
