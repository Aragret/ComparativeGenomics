%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACUAACAGGGGGGGGGGUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCxxxxxxxxxxAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGCCCCCCCCCCAAUAAUAACA\
) } def
/len { sequence length } bind def

/coor [
[87.05790710 352.53393555]
[73.21196747 346.51791382]
[61.50330353 336.98849487]
[52.80078125 324.65283203]
[47.75017929 310.42630005]
[46.72628784 295.36462402]
[49.80508804 280.58544922]
[56.75811005 267.18554688]
[67.06938934 256.15921021]
[79.97377014 248.32469177]
[94.51365662 244.26338196]
[94.51365662 229.26338196]
[94.51365662 214.26338196]
[94.51365662 199.26338196]
[94.51365662 184.26338196]
[94.51365662 169.26338196]
[94.51365662 154.26338196]
[94.51365662 139.26338196]
[94.51365662 124.26338196]
[94.51365662 109.26338196]
[91.34374237 109.92066956]
[87.80480957 109.67414093]
[84.12985229 108.42213440]
[69.13066101 108.57817078]
[54.13147736 108.73420715]
[39.13228607 108.89024353]
[24.13309860 109.04627991]
[9.13391018 109.20231628]
[-5.86527777 109.35835266]
[-10.87785912 123.66394043]
[-20.48334503 135.39042664]
[-33.52182770 143.12178040]
[-48.41884613 145.92439270]
[-63.37551117 143.45985413]
[-76.58573151 136.02575684]
[-86.45431519 124.51980591]
[-91.78958130 110.33140564]
[-91.94726562 95.17386627]
[-86.90832520 80.87754059]
[-77.28125000 69.16877747]
[-64.22853851 61.46146774]
[-49.32638168 58.68630600]
[-34.37428284 61.17840576]
[-21.17778397 68.63683319]
[-11.33042049 80.16094971]
[-6.02131462 94.35916138]
[8.97787380 94.20312500]
[23.97706223 94.04708862]
[38.97624969 93.89105225]
[53.97544098 93.73501587]
[68.97462463 93.57897949]
[83.97381592 93.42294312]
[71.11841583 85.69386292]
[66.76451874 71.33964539]
[73.16004944 57.77140427]
[87.00298309 51.99445343]
[101.14617920 56.99144363]
[108.28748322 70.18241882]
[104.73863983 84.75853729]
[115.40026855 74.20724487]
[126.06189728 63.65595627]
[116.53210449 52.05820847]
[108.11308289 39.63063049]
[100.87665558 26.47924995]
[94.88457489 12.71627140]
[90.18795013 -1.54088044]
[86.82686615 -16.17056656]
[84.82998657 -31.04796982]
[84.21435547 -46.04615784]
[84.98522186 -61.03717041]
[87.13600922 -75.89310455]
[90.64836884 -90.48720551]
[95.49234009 -104.69497681]
[101.62657928 -118.39518738]
[108.99876404 -131.47094727]
[117.54598999 -143.81069946]
[127.19534302 -155.30917358]
[137.86447144 -165.86824036]
[149.46238708 -175.39784241]
[161.89010620 -183.81666565]
[175.04161072 -191.05285645]
[188.80468750 -197.04472351]
[203.06190491 -201.74110413]
[217.69165039 -205.10194397]
[232.56909180 -207.09857178]
[247.56729126 -207.71395874]
[262.55828857 -206.94284058]
[277.41418457 -204.79180908]
[292.00823975 -201.27920532]
[306.21591187 -196.43499756]
[319.91601562 -190.30052185]
[332.99166870 -182.92813110]
[345.33126831 -174.38069153]
[356.82958984 -164.73115540]
[367.38848877 -154.06184387]
[376.91787720 -142.46377563]
[385.33648682 -130.03591919]
[392.57247925 -116.88429260]
[398.56411743 -103.12111664]
[403.26025391 -88.86380768]
[406.62084961 -74.23400879]
[408.61724854 -59.35653687]
[409.23236084 -44.35832977]
[408.46099854 -29.36734390]
[406.30972290 -14.51148319]
[402.79687500 0.08250688]
[397.95242310 14.29011250]
[391.81771851 27.99011612]
[384.44509888 41.06563187]
[375.89746094 53.40510178]
[366.24774170 64.90324402]
[355.57824707 75.46196747]
[343.98004150 84.99118042]
[331.55203247 93.40958405]
[318.40029907 100.64534760]
[304.63702393 106.63674164]
[290.37960815 111.33265686]
[275.74975586 114.69300842]
[260.87225342 116.68914795]
[245.87405396 117.30403137]
[230.88307190 116.53240967]
[216.02725220 114.38088226]
[201.43331909 110.86779022]
[187.22579956 106.02311707]
[173.52589417 99.88818359]
[160.45050049 92.51535034]
[148.11117554 83.96750641]
[136.61318970 74.31758118]
[125.95156097 84.86887360]
[115.28993225 95.42016602]
[109.51365662 109.26338196]
[109.51365662 124.26338196]
[109.51365662 139.26338196]
[109.51365662 154.26338196]
[109.51365662 169.26338196]
[109.51365662 184.26338196]
[109.51365662 199.26338196]
[109.51365662 214.26338196]
[109.51365662 229.26338196]
[109.51365662 244.26338196]
[124.05355072 248.32469177]
[136.95793152 256.15921021]
[147.26921082 267.18554688]
[154.22222900 280.58544922]
[157.30104065 295.36462402]
[156.27714539 310.42630005]
[151.22654724 324.65283203]
[142.52401733 336.98849487]
[130.81535339 346.51791382]
[116.96941376 352.53393555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[59 130]
[60 129]
[61 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
