%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCAUCUCGGGGGGGGGGAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCxxxxxxxxxxGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUCCCCCCCCCCGCCCCCAUGUC\
) } def
/len { sequence length } bind def

/coor [
[86.99242401 584.16589355]
[72.97047424 578.61285400]
[60.77051926 569.74652100]
[51.15944672 558.12420654]
[44.74142075 544.47650146]
[41.91988373 529.66131592]
[42.87220001 514.60992432]
[47.53850555 500.26852417]
[55.62547302 487.53857422]
[66.62474823 477.22030640]
[79.84490967 469.96231079]
[94.45491791 466.22088623]
[94.45491791 451.22088623]
[94.45491791 436.22088623]
[94.45491791 421.22088623]
[94.45491791 406.22088623]
[94.45491791 391.22088623]
[94.45491791 376.22088623]
[94.45491791 361.22088623]
[94.45491791 346.22088623]
[94.45491791 331.22088623]
[94.45491791 316.22088623]
[80.24999237 313.16571045]
[66.99080658 307.20880127]
[55.26316071 298.61056519]
[45.58576965 287.74813843]
[38.38732147 275.09887695]
[33.98749161 261.21939087]
[32.58274460 246.72102356]
[34.23756027 232.24296570]
[38.88148117 218.42399597]
[46.31210709 205.87435913]
[56.20391846 195.14883423]
[68.12253571 186.72215271]
[81.54377747 180.96801758]
[95.87675476 178.14254761]
[96.18473816 163.14572144]
[96.49271393 148.14888000]
[95.87688446 133.16152954]
[94.33959198 118.24050903]
[83.16438293 109.01766205]
[81.67940521 94.60443878]
[90.73938751 83.29678345]
[89.20209503 68.37577057]
[87.66480255 53.45475388]
[75.68662262 43.49679184]
[74.34014893 28.34285927]
[83.90736389 16.98486519]
[82.37007141 2.06384873]
[80.83277893 -12.85716820]
[79.29548645 -27.77818489]
[76.53923798 -42.52278137]
[72.58262634 -56.99154663]
[68.62602234 -71.46031952]
[64.66941071 -85.92908478]
[60.71279907 -100.39785004]
[56.75618744 -114.86661530]
[52.79957962 -129.33538818]
[37.72009277 -129.09057617]
[23.05366707 -132.60437012]
[9.72224426 -139.65589905]
[-1.43614995 -149.80187988]
[-9.72008991 -162.40454102]
[-14.60884094 -176.67167664]
[-15.79509163 -191.70642090]
[-13.20427322 -206.56369019]
[-6.99924660 -220.30953979]
[2.42993498 -232.07991028]
[14.49054527 -241.13487244]
[28.42444420 -246.90525818]
[43.35573578 -249.02830505]
[58.34582520 -247.37059021]
[72.45242310 -242.03630066]
[84.78877258 -233.36074829]
[94.57941437 -221.88929749]
[101.20888519 -208.34303284]
[104.26045990 -193.57351685]
[103.54230499 -178.50915527]
[99.09957886 -164.09690857]
[91.21154022 -151.24273682]
[80.37404633 -140.75466919]
[67.26834869 -133.29199219]
[71.22495270 -118.82322693]
[75.18156433 -104.35446167]
[79.13817596 -89.88569641]
[83.09478760 -75.41692352]
[87.05139923 -60.94815826]
[91.00801086 -46.47938919]
[98.01154327 -59.74402237]
[111.40367126 -66.50056458]
[126.23410797 -64.25152588]
[137.02090454 -53.82823944]
[139.77682495 -39.08358383]
[133.48316956 -25.46779060]
[120.46631622 -18.01382256]
[105.53784943 -19.47697449]
[94.21649933 -29.31547737]
[95.75379181 -14.39446068]
[97.29108429 0.52655619]
[98.82837677 15.44757271]
[110.51042938 24.61628342]
[112.28201294 39.72641754]
[102.58582306 51.91746140]
[104.12311554 66.83847809]
[105.66040802 81.75949097]
[116.83561707 90.98233795]
[118.32059479 105.39556122]
[109.26061249 116.70321655]
[110.79790497 131.62423706]
[121.37158966 120.98481750]
[136.36972046 120.74841309]
[147.27348328 131.04928589]
[147.88960266 146.03663635]
[137.86813354 157.19773865]
[122.90119934 158.19317627]
[111.48954773 148.45684814]
[111.18157196 163.45368958]
[110.87359619 178.45053101]
[125.93009186 182.17089844]
[139.78186035 189.13163757]
[151.74172974 198.98402405]
[161.21717834 211.23590088]
[167.73960876 225.27638245]
[170.98760986 240.40623474]
[170.80273438 255.87274170]
[167.19726562 270.90710449]
[160.35340881 284.76272583]
[150.61412048 296.75225830]
[138.46592712 306.28161621]
[124.51458740 312.87954712]
[109.45491791 316.22088623]
[109.45491791 331.22088623]
[109.45491791 346.22088623]
[109.45491791 361.22088623]
[109.45491791 376.22088623]
[109.45491791 391.22088623]
[109.45491791 406.22088623]
[109.45491791 421.22088623]
[109.45491791 436.22088623]
[109.45491791 451.22088623]
[109.45491791 466.22088623]
[124.06493378 469.96231079]
[137.28509521 477.22030640]
[148.28436279 487.53857422]
[156.37133789 500.26852417]
[161.03764343 514.60992432]
[161.98995972 529.66131592]
[159.16841125 544.47650146]
[152.75039673 558.12420654]
[143.13931274 569.74652100]
[130.93936157 578.61285400]
[116.91741943 584.16589355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[36 118]
[37 117]
[38 116]
[39 109]
[40 108]
[43 105]
[44 104]
[45 103]
[48 100]
[49 99]
[50 98]
[51 97]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
