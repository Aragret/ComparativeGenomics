%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAUAUUGGGGGGGGGGUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAxxxxxxxxxxGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGACCCCCCCCCCACAAGAUAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 364.12908936]
[71.19830322 358.11306763]
[59.48964310 348.58364868]
[50.78712082 336.24798584]
[45.73651886 322.02145386]
[44.71262741 306.95977783]
[47.79142761 292.18063354]
[54.74444962 278.78070068]
[65.05573273 267.75436401]
[77.96011353 259.91986084]
[92.50000000 255.85853577]
[92.50000000 240.85853577]
[92.50000000 225.85853577]
[92.50000000 210.85853577]
[92.50000000 195.85853577]
[92.50000000 180.85853577]
[92.50000000 165.85853577]
[92.50000000 150.85853577]
[92.50000000 135.85853577]
[92.50000000 120.85854340]
[79.56194305 113.26863098]
[66.46878815 120.58773804]
[53.37563705 127.90684509]
[45.44923782 142.26318359]
[29.05014801 142.30630493]
[21.04834175 127.99186707]
[29.67539215 114.04532623]
[46.05653000 114.81369019]
[59.14968491 107.49458313]
[72.24283600 100.17547607]
[77.87479401 86.27291870]
[73.56720734 71.90473938]
[69.25962830 57.53655243]
[64.95204163 43.16836929]
[60.64445496 28.80018616]
[52.80964661 29.57682610]
[44.88307571 29.01274681]
[37.09460068 27.09949875]
[29.67422867 23.86810112]
[22.84533310 19.38883972]
[16.81793976 13.76988125]
[11.78230286 7.15475512]
[7.90294790 -0.28126195]
[5.31338692 -8.33575821]
[4.11164808 -16.78468704]
[4.35678864 -25.38858604]
[6.06650019 -33.89937210]
[9.21589470 -42.06749344]
[13.73752785 -49.64923096]
[19.52268600 -56.41397476]
[26.42389679 -62.15119553]
[17.65769005 -74.32303619]
[8.89148235 -86.49487305]
[0.12527527 -98.66670990]
[-8.64093208 -110.83854675]
[-23.91397095 -109.21686554]
[-37.94513321 -115.46363068]
[-46.96010208 -127.89849854]
[-48.53390121 -143.17654419]
[-42.24318314 -157.18804932]
[-29.78012085 -166.16400146]
[-14.49721527 -167.68991089]
[-0.50549150 -161.35530090]
[8.43134785 -148.86416626]
[9.90933704 -133.57655334]
[3.53090477 -119.60475159]
[12.29711246 -107.43291473]
[21.06332016 -95.26107788]
[29.82952690 -83.08924103]
[38.59573364 -70.91740417]
[46.09411240 -71.07343292]
[44.23653030 -85.95796967]
[42.37894821 -100.84250641]
[36.69547653 -114.72408295]
[44.92427444 -127.26548767]
[59.92101288 -127.57815552]
[68.66538239 -115.39061737]
[63.56446075 -101.28334045]
[62.32766342 -86.33441162]
[61.09086609 -71.38549042]
[68.58924103 -71.54151917]
[76.84152985 -84.06748199]
[84.96307373 -96.67860413]
[92.95298767 -109.37353516]
[100.94290161 -122.06846619]
[108.93282318 -134.76339722]
[106.79090881 -150.66282654]
[117.98974609 -162.15045166]
[133.93853760 -160.41395569]
[142.40274048 -146.78543091]
[136.88934326 -131.71951294]
[121.62775421 -126.77348328]
[113.63783264 -114.07855225]
[105.64791870 -101.38362122]
[97.65800476 -88.68869019]
[96.75105286 -81.30471802]
[89.36749268 -75.81519318]
[81.11520386 -63.28922653]
[99.65430450 -42.19625854]
[104.43215179 -15.46706772]
[95.01219177 9.00620747]
[75.01264191 24.49260139]
[79.32022858 38.86078644]
[83.62780762 53.22896957]
[87.93539429 67.59715271]
[92.24298096 81.96533966]
[104.41969299 79.57972717]
[116.38541412 85.08959961]
[123.24954224 97.22120667]
[137.74513245 101.07836914]
[152.24073792 104.93553162]
[166.73632812 108.79268646]
[175.94132996 96.69572449]
[189.07745361 89.04650879]
[204.14155579 87.01148987]
[218.83645630 90.90099335]
[230.92131042 100.12189484]
[238.55323792 113.26808167]
[240.56843567 128.33483887]
[236.65960693 143.02461243]
[227.42282104 155.09732056]
[214.26660156 162.71194458]
[199.19720459 164.70733643]
[184.51258850 160.77917480]
[172.45204163 151.52651978]
[164.85472107 138.36030579]
[162.87916565 123.28828430]
[148.38357544 119.43112946]
[133.88796997 115.57396698]
[119.39237976 111.71680450]
[107.50000000 120.85854340]
[107.50000000 135.85853577]
[107.50000000 150.85853577]
[107.50000000 165.85853577]
[107.50000000 180.85853577]
[107.50000000 195.85853577]
[107.50000000 210.85853577]
[107.50000000 225.85853577]
[107.50000000 240.85853577]
[107.50000000 255.85853577]
[122.03988647 259.91986084]
[134.94427490 267.75436401]
[145.25555420 278.78070068]
[152.20857239 292.18063354]
[155.28736877 306.95977783]
[154.26348877 322.02145386]
[149.21287537 336.24798584]
[140.51036072 348.58364868]
[128.80169678 358.11306763]
[114.95575714 364.12908936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 30]
[22 29]
[23 28]
[31 106]
[32 105]
[33 104]
[34 103]
[35 102]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[81 98]
[82 97]
[83 95]
[84 94]
[85 93]
[86 92]
[109 130]
[110 129]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
