%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUACCCCGGGGGGGGGGCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGxxxxxxxxxxACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCCCCCCCCCCCUCAACCCC\
) } def
/len { sequence length } bind def

/coor [
[57.02898026 375.76196289]
[43.54010010 369.03042603]
[32.05459976 359.26583862]
[23.24023056 347.03594971]
[17.60944939 333.05175781]
[15.48962116 318.12628174]
[17.00399017 303.12728882]
[22.06451225 288.92675781]
[30.37697792 276.35034180]
[41.45811081 266.12921143]
[54.66366577 258.85754395]
[69.22589111 254.95819092]
[68.91790771 239.96134949]
[68.60993195 224.96452332]
[68.30195618 209.96768188]
[67.99398041 194.97084045]
[67.68599701 179.97399902]
[67.37802124 164.97715759]
[67.07004547 149.98033142]
[66.76206970 134.98348999]
[54.69963455 126.06733704]
[40.27225113 130.17228699]
[25.84486771 134.27722168]
[14.68892002 145.49575806]
[0.33009067 141.53680420]
[-14.09729385 145.64175415]
[-25.25324059 156.86027527]
[-39.61207199 152.90133667]
[-54.03945541 157.00627136]
[-65.06079102 169.14967346]
[-81.02846527 165.41265869]
[-85.51630402 149.63952637]
[-73.90760803 138.05635071]
[-58.14439774 142.57888794]
[-43.71701431 138.47395325]
[-33.59300995 127.54902649]
[-18.20223808 131.21437073]
[-3.77485418 127.10942078]
[6.34914970 116.18450165]
[21.73992157 119.84983826]
[36.16730499 115.74489594]
[50.59469223 111.63995361]
[53.80368805 96.98722839]
[42.41261292 87.22795105]
[31.02153969 77.46868134]
[19.63046646 67.70940399]
[8.23939228 57.95013046]
[-3.15168118 48.19085312]
[-14.54275513 38.43157959]
[-28.49810600 44.61308289]
[-43.75321960 44.11883926]
[-57.27918243 37.04698944]
[-66.39040375 24.80164719]
[-69.27784729 9.81413746]
[-65.36820221 -4.93975878]
[-55.43774033 -16.53064537]
[-41.45815659 -22.65714264]
[-26.20510674 -22.10283089]
[-12.70709801 -14.97776890]
[-3.64416790 -2.69664288]
[-0.81576854 12.30212116]
[-4.78348064 27.04050636]
[6.60759306 36.79978180]
[17.99866676 46.55905533]
[29.38973999 56.31832886]
[40.78081512 66.07760620]
[52.17188644 75.83687592]
[63.56296158 85.59615326]
[90.36755371 67.21671295]
[117.00750732 76.31658173]
[128.59655762 66.79324341]
[113.63157654 67.81761169]
[99.66043854 62.35799408]
[89.35503387 51.45851898]
[84.68618774 37.20362854]
[86.54679871 22.31947136]
[94.58101654 9.65253639]
[107.25237274 1.62528658]
[122.13755798 -0.22712286]
[136.38987732 4.44956779]
[147.28367615 14.76097488]
[152.73559570 28.73511314]
[151.70298767 43.69953156]
[144.38243103 56.79339981]
[157.94433594 50.38442612]
[171.50622559 43.97544861]
[185.06813049 37.56647491]
[198.63002014 31.15749741]
[210.87297058 22.49089050]
[221.42498779 11.82998180]
[231.97700500 1.16907322]
[242.52902222 -9.49183559]
[242.19728088 -25.29264259]
[253.19569397 -36.64209747]
[268.99914551 -36.80677032]
[280.23165894 -25.68896484]
[280.22924805 -9.88467598]
[268.99331665 1.22969115]
[253.18992615 1.06017947]
[242.63790894 11.72108841]
[232.08590698 22.38199806]
[221.53388977 33.04290771]
[236.12458801 29.56274796]
[251.06315613 30.91886711]
[264.78863525 36.96956253]
[275.86685181 47.08258438]
[283.14019775 60.20121002]
[285.84869385 74.95465088]
[283.70932007 89.80130005]
[276.94558716 103.18981171]
[266.26431274 113.72119141]
[252.78153992 120.29499817]
[237.90612793 122.22433472]
[223.19244385 119.30759430]
[210.17793274 111.84954834]
[200.22248840 100.62950897]
[194.36639404 86.81987000]
[193.22154236 71.86362457]
[196.90757751 57.32357025]
[205.03900146 44.71939468]
[191.47709656 51.12836838]
[177.91520691 57.53734589]
[164.35330200 63.94632339]
[150.79141235 70.35530090]
[138.11990356 78.38229370]
[126.53084564 87.90563202]
[130.82504272 99.57089996]
[129.93470764 112.65187836]
[123.46843719 124.83466339]
[112.06430054 133.74807739]
[97.35871887 137.41706848]
[81.75890350 134.67550659]
[82.06688690 149.67234802]
[82.37486267 164.66918945]
[82.68283844 179.66603088]
[82.99081421 194.66285706]
[83.29878998 209.65969849]
[83.60677338 224.65653992]
[83.91474915 239.65338135]
[84.22272491 254.65020752]
[98.93276215 257.94842529]
[112.42572021 264.67178345]
[123.91713715 274.42938232]
[132.73892212 286.65393066]
[138.37817383 300.63473511]
[140.50704956 315.55889893]
[139.00178528 330.55883789]
[133.94987488 344.76239014]
[125.64502716 357.34387207]
[114.57009888 367.57174683]
[101.36894989 374.85137939]
[86.80909729 378.75958252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 42]
[22 41]
[23 40]
[25 38]
[26 37]
[28 35]
[29 34]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[70 126]
[71 125]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
