%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCGCCCGGGGGGGGGGCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUAxxxxxxxxxxCACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGACCCCCCCCCCAUCACCUCCC\
) } def
/len { sequence length } bind def

/coor [
[296.02972412 224.08905029]
[284.66625977 216.35923767]
[274.13043213 207.53352356]
[264.52758789 197.69996643]
[255.95364380 186.95663452]
[248.49433899 175.41073608]
[242.22424316 163.17749023]
[237.20608521 150.37896729]
[233.49008179 137.14291382]
[231.11346436 123.60147095]
[230.10008240 109.88980103]
[215.10739136 109.42176056]
[200.11468506 108.95372009]
[185.11793518 108.64166260]
[170.11874390 108.48562622]
[155.11955261 108.32958984]
[140.12037659 108.17355347]
[125.12117767 108.01751709]
[110.12199402 107.86148071]
[88.65609741 145.97137451]
[74.24388123 150.12927246]
[59.83166122 154.28715515]
[45.41944504 158.44503784]
[44.10373688 173.56567383]
[37.41116333 187.18821716]
[26.24684334 197.47036743]
[12.12065601 203.02151489]
[-3.05694604 203.09092712]
[-17.23331833 197.66921997]
[-28.49122047 187.48962402]
[-35.30811691 173.92886353]
[-36.76207352 158.82090759]
[-32.65645981 144.20896912]
[-23.54652405 132.06922913]
[-10.66430950 124.04345703]
[4.24796867 121.21708679]
[19.17354774 123.97235107]
[32.09386826 131.93663025]
[41.26155853 144.03282166]
[55.67377472 139.87493896]
[70.08599091 135.71705627]
[84.49820709 131.55915833]
[85.43201447 124.11752319]
[87.29962921 109.23424530]
[88.23342896 101.79260254]
[75.29537964 94.20269775]
[62.35731888 86.61278534]
[47.12866211 90.83930969]
[33.41308975 82.98700714]
[29.34781265 67.71450806]
[37.34468842 54.08272552]
[52.65930939 50.17914581]
[66.20578003 58.31969833]
[69.94722748 73.67473602]
[82.88528442 81.26464081]
[95.82334137 88.85455322]
[110.27803040 92.86228943]
[125.27721405 93.01832581]
[140.27641296 93.17436218]
[155.27558899 93.33039856]
[170.27478027 93.48643494]
[185.27397156 93.64247131]
[193.95242310 90.58691406]
[200.58273315 93.96102142]
[215.57542419 94.42906189]
[230.56811523 94.89710236]
[232.95660400 78.65038300]
[237.26333618 62.80488586]
[243.42674255 47.58625793]
[251.35879517 33.21117020]
[260.94631958 19.88425446]
[272.05255127 7.79519081]
[284.51913452 -2.88399458]
[298.16833496 -12.00137711]
[312.80560303 -19.42729568]
[328.22235107 -25.05619621]
[344.19888306 -28.80813217]
[360.50762939 -30.62989807]
[376.91622925 -30.49578476]
[393.19097900 -28.40794754]
[409.10012817 -24.39636421]
[424.41708374 -18.51840782]
[438.92382812 -10.85802746]
[452.41381836 -1.52454722]
[464.69500732 9.34889221]
[475.59271240 21.60723495]
[484.95184326 35.07571793]
[492.63928223 49.56236649]
[498.54577637 64.86072540]
[502.58743286 80.75280762]
[517.45043945 78.73047638]
[532.31353760 76.70814514]
[547.17657471 74.68580627]
[562.03961182 72.66347504]
[576.21618652 67.76192474]
[589.15423584 60.17201233]
[602.09228516 52.58210754]
[605.83374023 37.22706985]
[619.38018799 29.08651924]
[634.69482422 32.99010086]
[642.69171143 46.62188339]
[638.62640381 61.89437866]
[624.91082764 69.74668121]
[609.68218994 65.52016449]
[596.74414062 73.11006927]
[583.80609131 80.69998169]
[585.35522461 88.03823853]
[588.45355225 102.71476746]
[590.00274658 110.05303192]
[604.90460205 111.76571655]
[619.80651855 113.47840881]
[629.49468994 101.47245026]
[644.14300537 96.63190460]
[659.07720947 100.50137329]
[669.53186035 111.84611511]
[672.17095947 127.04607391]
[666.15234375 141.25099182]
[653.39654541 149.92813110]
[637.97387695 150.30865479]
[624.80566406 142.27113342]
[618.09381104 128.38031006]
[603.19195557 126.66761780]
[588.29003906 124.95493317]
[571.19531250 115.08995056]
[563.08514404 100.88967896]
[564.06195068 87.52651978]
[549.19891357 89.54885101]
[534.33587646 91.57118988]
[519.47277832 93.59352112]
[504.60974121 95.61585999]
[505.03668213 109.33848572]
[504.09194946 123.03584290]
[501.78485107 136.57116699]
[498.13827515 149.80928040]
[493.18853760 162.61799622]
[486.98492432 174.86933899]
[479.58926392 186.44094849]
[471.07528687 197.21720886]
[461.52792358 207.09045410]
[451.04238892 215.96199036]
[439.72332764 223.74316406]
[427.68365479 230.35617065]
[415.04351807 235.73486328]
[401.92907715 239.82543945]
[388.47128296 242.58689880]
[374.80444336 243.99156189]
[361.06500244 244.02529907]
[347.39013672 242.68760681]
[333.91644287 239.99174500]
[320.77841187 235.96447754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 66]
[12 65]
[13 64]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 42]
[21 41]
[22 40]
[23 39]
[45 56]
[46 55]
[47 54]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 106]
[96 105]
[97 104]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
