%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUACUCCCACUAGGGGGGGGGGAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCxxxxxxxxxxGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCCCCCCCCCCCUAUACUCCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[82.63883209 420.56622314]
[68.62409973 415.08230591]
[55.94867325 406.96936035]
[45.09977341 396.53921509]
[36.49439621 384.19281006]
[30.46331406 370.40469360]
[27.23834419 355.70483398]
[26.94344521 340.65826416]
[29.58995247 325.84332275]
[35.07614136 311.82949829]
[43.19113541 299.15536499]
[53.62302017 288.30816650]
[65.97081757 279.70477295]
[79.75991821 273.67593384]
[94.46029663 270.45333862]
[94.16394043 255.45626831]
[93.86758423 240.45919800]
[93.57122040 225.46212769]
[93.27486420 210.46505737]
[92.97850800 195.46798706]
[92.68215179 180.47091675]
[92.38579559 165.47384644]
[92.08943939 150.47676086]
[91.79308319 135.47969055]
[89.46805573 132.76237488]
[88.37200165 128.76522827]
[89.10030365 124.09164429]
[91.95005035 119.59146881]
[92.54264832 104.60317993]
[90.61872864 102.16338348]
[89.56079865 98.95542145]
[89.66017914 95.30657196]
[91.08017731 91.64887238]
[93.82049561 88.46850586]
[95.59458923 73.57379150]
[93.49511719 64.62792969]
[97.55370331 58.40339661]
[99.62173462 43.54663849]
[101.68976593 28.68988037]
[103.75778961 13.83312225]
[105.82582092 -1.02363598]
[91.15555573 -4.18443727]
[76.75879669 -8.42004871]
[62.71415710 -13.70733547]
[49.09835815 -20.01742172]
[35.98575592 -27.31584358]
[23.44797516 -35.56273651]
[11.55349064 -44.71306229]
[0.36726585 -54.71683884]
[-10.04960251 -65.51943970]
[-19.64022064 -77.06184387]
[-28.35220718 -89.28103638]
[-36.13798141 -102.11026001]
[-42.95501709 -115.47944641]
[-48.76608276 -129.31558228]
[-53.53944016 -143.54310608]
[-57.24901581 -158.08428955]
[-59.87455368 -172.85974121]
[-61.40171051 -187.78874207]
[-61.82214737 -202.78974915]
[-61.13356781 -217.78085327]
[-59.33973312 -232.68016052]
[-56.45043945 -247.40629578]
[-52.48146439 -261.87884521]
[-47.45449066 -276.01873779]
[-41.39697266 -289.74877930]
[-34.34199142 -302.99392700]
[-26.32808304 -315.68191528]
[-17.39901733 -327.74337769]
[-7.60355997 -339.11245728]
[3.00478792 -349.72708130]
[14.36808681 -359.52926636]
[26.42427444 -368.46545410]
[39.10750198 -376.48687744]
[52.34849548 -383.54968262]
[66.07494354 -389.61529541]
[80.21186829 -394.65063477]
[94.68206024 -398.62817383]
[109.40648651 -401.52615356]
[124.30473328 -403.32879639]
[139.29542542 -404.02624512]
[154.29669189 -403.61468506]
[169.22657776 -402.09634399]
[184.00358582 -399.47955322]
[198.54696655 -395.77856445]
[212.77729797 -391.01361084]
[226.61686707 -385.21072388]
[239.99008179 -378.40161133]
[252.82391357 -370.62341309]
[265.04824829 -361.91867065]
[276.59631348 -352.33486938]
[287.40509033 -341.92437744]
[297.41546631 -330.74407959]
[306.57281494 -318.85501099]
[314.82711792 -306.32208252]
[322.13330078 -293.21380615]
[328.45141602 -279.60174561]
[333.74700928 -265.56024170]
[337.99114990 -251.16596985]
[341.16061401 -236.49758911]
[343.23812866 -221.63517761]
[344.21234131 -206.65992737]
[344.07791138 -191.65362549]
[342.83560181 -176.69822693]
[340.49218750 -161.87541199]
[337.06045532 -147.26615906]
[332.55917358 -132.95024109]
[327.01290894 -119.00584412]
[320.45193481 -105.50914001]
[312.91213989 -92.53383636]
[304.43463135 -80.15081024]
[295.06576538 -68.42768097]
[284.85671997 -57.42848969]
[273.86322021 -47.21330261]
[262.14529419 -37.83791351]
[249.76699829 -29.35352707]
[236.79589844 -21.80648613]
[223.30285645 -15.23800850]
[209.36155701 -9.68396950]
[195.04814148 -5.17470312]
[180.44079590 -1.73483849]
[165.61929321 0.61683697]
[150.66459656 1.86747932]
[135.65837097 2.01025772]
[120.68257904 1.04439259]
[118.61454773 15.90115070]
[116.54652405 30.75790787]
[114.47849274 45.61466599]
[112.41046143 60.47142410]
[110.48930359 75.34788513]
[108.71520996 90.24260712]
[107.53093719 105.19577789]
[106.93833923 120.18407440]
[106.79015350 135.18333435]
[107.08650970 150.18040466]
[107.38286591 165.17749023]
[107.67922211 180.17456055]
[107.97557831 195.17163086]
[108.27194214 210.16870117]
[108.56829834 225.16577148]
[108.86465454 240.16284180]
[109.16101074 255.15991211]
[109.45736694 270.15698242]
[124.27358246 272.79629517]
[138.29010010 278.27569580]
[150.96813965 286.38452148]
[161.82041931 296.81112671]
[170.42979431 309.15475464]
[176.46533203 322.94091797]
[179.69506836 337.63973999]
[179.99484253 352.68621826]
[177.35311890 367.50201416]
[171.87147522 381.51763916]
[163.76057434 394.19436646]
[153.33221436 405.04495239]
[140.98719788 413.65231323]
[127.20005035 419.68563843]
[112.50071716 422.91299438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[28 133]
[29 132]
[34 131]
[35 130]
[37 129]
[38 128]
[39 127]
[40 126]
[41 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
