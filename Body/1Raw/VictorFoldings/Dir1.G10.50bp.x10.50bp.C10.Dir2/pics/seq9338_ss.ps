%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUGGGGGGGGGGACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGxxxxxxxxxxCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAACCCCCCCCCCUCGUAGCCUU\
) } def
/len { sequence length } bind def

/coor [
[81.45943451 382.30307007]
[67.61349487 376.28704834]
[55.90483475 366.75762939]
[47.20230865 354.42196655]
[42.15170670 340.19543457]
[41.12781525 325.13375854]
[44.20661545 310.35458374]
[51.15963745 296.95465088]
[61.47092056 285.92831421]
[74.37530518 278.09381104]
[88.91519165 274.03250122]
[88.91519165 259.03250122]
[88.91519165 244.03250122]
[88.91519165 229.03250122]
[88.91519165 214.03250122]
[88.91519165 199.03250122]
[88.91519165 184.03250122]
[88.91519165 169.03250122]
[88.91519165 154.03250122]
[88.91519165 139.03250122]
[82.96900177 134.46163940]
[77.94946289 148.59684753]
[62.95495987 148.19082642]
[58.70773697 133.80468750]
[71.07662201 125.31990051]
[65.13043213 120.74903870]
[50.63483429 124.60619354]
[36.13923645 128.46334839]
[21.64364052 132.32051086]
[10.41586971 144.27330017]
[-5.48543644 140.26325989]
[-9.70237827 124.41555786]
[2.10307240 113.03297424]
[17.78647995 117.82492065]
[32.28207779 113.96775818]
[46.77767181 110.11059570]
[61.27326965 106.25344086]
[67.71423340 84.82980347]
[83.70365906 72.32567596]
[101.91667938 71.50453949]
[106.81822968 57.32798004]
[111.71977997 43.15142059]
[116.62133789 28.97486305]
[121.52288818 14.79830551]
[126.42443848 0.62174720]
[113.36289978 -6.83697176]
[101.89742279 -16.56625938]
[92.41753387 -28.23364830]
[85.24494934 -41.44086075]
[80.62265778 -55.73739624]
[78.70668030 -70.63591766]
[79.56082916 -85.62882233]
[83.15454102 -100.20560455]
[89.36400604 -113.87015533]
[97.97641754 -126.15771484]
[108.69725037 -136.65065002]
[121.16037750 -144.99266052]
[134.94052124 -150.90083313]
[149.56777954 -154.17533875]
[164.54370117 -154.70605469]
[179.35818481 -152.47637939]
[184.25973511 -166.65293884]
[176.78620911 -180.01887512]
[179.81442261 -194.71981812]
[191.47999573 -203.67376709]
[192.10397339 -218.66078186]
[192.72795105 -233.64779663]
[178.54098511 -238.89994812]
[166.67262268 -248.28062439]
[158.28562927 -260.87084961]
[154.20166016 -275.43713379]
[154.82084656 -290.55239868]
[160.08248901 -304.73587036]
[169.47113037 -316.59793091]
[182.06695557 -324.97647095]
[196.63597107 -329.05068970]
[211.75083923 -328.42138672]
[225.93075562 -323.15023804]
[237.78652954 -313.75363159]
[246.15664673 -301.15219116]
[250.22108459 -286.58047485]
[249.58164978 -271.46603394]
[244.30101013 -257.28964233]
[234.89646912 -245.44017029]
[222.28942871 -237.07849121]
[207.71496582 -233.02381897]
[207.09098816 -218.03680420]
[206.46701050 -203.04978943]
[207.38113403 -202.62660217]
[208.27374268 -202.15977478]
[219.77555847 -211.78829956]
[231.27735901 -221.41682434]
[242.77915955 -231.04534912]
[254.28096008 -240.67388916]
[259.39630127 -256.25482178]
[275.50073242 -259.34997559]
[286.02737427 -246.77531433]
[280.14733887 -231.46658325]
[263.90948486 -229.17207336]
[252.40768433 -219.54354858]
[240.90588379 -209.91502380]
[229.40408325 -200.28649902]
[217.90228271 -190.65797424]
[215.73838806 -171.50970459]
[198.43629456 -161.75138855]
[193.53474426 -147.57482910]
[206.56265259 -140.17797852]
[218.01255798 -130.51052856]
[227.49353027 -118.90059662]
[234.68154907 -105.74266815]
[239.33053589 -91.48414612]
[241.28074646 -76.61018372]
[240.46434021 -61.62715149]
[236.90763855 -47.04540634]
[230.73034668 -33.36190414]
[222.14151001 -21.04326248]
[211.43244934 -10.50985909]
[198.96682739 -2.12147212]
[185.16839600 3.83500004]
[170.50648499 7.15535212]
[155.48011780 7.72507381]
[140.60099792 5.52329779]
[135.69944763 19.69985580]
[130.79789734 33.87641525]
[125.89633942 48.05297089]
[120.99478912 62.22953033]
[116.09323883 76.40608978]
[129.20939636 88.95758057]
[132.84614563 108.36312103]
[123.85195160 127.70936584]
[103.91519165 139.03250122]
[103.91519165 154.03250122]
[103.91519165 169.03250122]
[103.91519165 184.03250122]
[103.91519165 199.03250122]
[103.91519165 214.03250122]
[103.91519165 229.03250122]
[103.91519165 244.03250122]
[103.91519165 259.03250122]
[103.91519165 274.03250122]
[118.45507812 278.09381104]
[131.35945129 285.92831421]
[141.67074585 296.95465088]
[148.62376404 310.35458374]
[151.70256042 325.13375854]
[150.67866516 340.19543457]
[145.62806702 354.42196655]
[136.92553711 366.75762939]
[125.21688080 376.28704834]
[111.37094116 382.30307007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 37]
[27 36]
[28 35]
[29 34]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[45 122]
[61 106]
[62 105]
[65 88]
[66 87]
[67 86]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
