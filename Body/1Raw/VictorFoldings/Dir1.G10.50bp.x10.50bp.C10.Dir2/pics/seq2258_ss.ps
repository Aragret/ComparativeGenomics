%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCUUGUAAAUUUAGGGGGGGGGGACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGxxxxxxxxxxUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUCCCCCCCCCCUCCUCUUGUAAAUAUA\
) } def
/len { sequence length } bind def

/coor [
[85.01929474 434.43536377]
[70.52014923 430.43353271]
[56.96866608 423.90689087]
[44.80046082 415.06524658]
[34.40669250 404.19284058]
[26.12147713 391.63916016]
[20.21115112 377.80773926]
[16.86570549 363.14324951]
[16.19268417 348.11703491]
[18.21372032 333.21215820]
[22.86384773 318.90774536]
[29.99358368 305.66363525]
[39.37373734 293.90554810]
[50.70277023 284.01147461]
[63.61650848 276.29946899]
[77.69982147 271.01742554]
[92.50000000 268.33514404]
[92.50000000 253.33514404]
[92.50000000 238.33514404]
[92.50000000 223.33514404]
[92.50000000 208.33514404]
[92.50000000 193.33514404]
[92.50000000 178.33514404]
[92.50000000 163.33514404]
[92.50000000 148.33514404]
[92.50000000 133.33514404]
[92.50000000 118.33514404]
[79.16709900 105.73023224]
[81.30781555 85.91729736]
[99.72206116 74.80128479]
[94.62195587 60.69494629]
[89.52185059 46.58860016]
[65.68180084 38.61822128]
[55.53580093 16.01704216]
[40.90274811 12.71950626]
[26.26969528 9.42196941]
[11.63664246 6.12443304]
[-2.99641109 2.82689691]
[-17.62946510 -0.47063959]
[-32.26251984 -3.76817608]
[-46.89557266 -7.06571245]
[-61.52862549 -10.36324883]
[-76.16168213 -13.66078472]
[-89.38474274 -5.00479603]
[-104.83827972 -8.31594467]
[-113.35398102 -21.62978554]
[-109.87963867 -37.04745102]
[-96.47650909 -45.42191696]
[-81.09643555 -41.78475952]
[-72.86414337 -28.29383850]
[-58.23108673 -24.99630165]
[-43.59803391 -21.69876671]
[-28.96498108 -18.40122986]
[-14.33192825 -15.10369301]
[0.30112526 -11.80615711]
[14.93417835 -8.50862026]
[29.56723213 -5.21108389]
[44.20028687 -1.91354752]
[58.83333969 1.38398886]
[64.50967407 -6.44292164]
[72.34265137 -12.11087990]
[81.55199432 -15.05527115]
[82.99526978 -29.98567390]
[84.43855286 -44.91607666]
[85.88183594 -59.84648132]
[87.32511902 -74.77688599]
[72.81702423 -78.72949219]
[59.18567657 -85.07728577]
[46.82328415 -93.63761139]
[36.08553314 -104.16418457]
[27.28137398 -116.35413361]
[20.66411781 -129.85671997]
[16.42415619 -144.28346252]
[14.68348026 -159.21925354]
[15.49217510 -174.23439026]
[18.82697296 -188.89682007]
[24.59192276 -202.78471375]
[32.62115479 -215.49845886]
[42.68365479 -226.67227173]
[54.48990631 -235.98464966]
[67.70021820 -243.16767883]
[81.93449402 -248.01464844]
[96.78320312 -250.38613892]
[111.81909943 -250.21391296]
[126.60958862 -247.50291443]
[140.72911072 -242.33114624]
[153.77140808 -234.84739685]
[165.36125183 -225.26701355]
[175.16514587 -213.86564636]
[182.90104675 -200.97129822]
[188.34635925 -186.95500183]
[191.34442139 -172.22003174]
[191.80895996 -157.19032288]
[189.72660828 -142.29830933]
[185.15728760 -127.97248077]
[178.23246765 -114.62501526]
[169.15139771 -102.63993835]
[158.17532349 -92.36209869]
[145.62008667 -84.08718872]
[131.84692383 -78.05331421]
[117.25208282 -74.43407440]
[102.25552368 -73.33360291]
[100.81224060 -58.40319824]
[99.36895752 -43.47279358]
[97.92567444 -28.54239273]
[96.48239136 -13.61198902]
[105.00961304 -9.08107471]
[111.73550415 -2.09597039]
[115.97628784 6.66959095]
[117.28955841 16.35916710]
[115.52033997 26.01727486]
[110.81886292 34.68360138]
[103.62819672 41.48849487]
[108.72830200 55.59484100]
[113.82840729 69.70117950]
[125.72136688 78.84215546]
[140.66499329 80.14149475]
[155.60861206 81.44082642]
[170.55223083 82.74016571]
[179.28910828 70.10836792]
[193.17823792 63.55186462]
[208.48350525 64.83432007]
[221.08784485 73.61076355]
[227.60078430 87.52037048]
[226.27035522 102.82153320]
[217.45445251 115.39830780]
[203.52449036 121.86761475]
[188.22758484 120.48923492]
[175.67849731 111.63394928]
[169.25288391 97.68378448]
[154.30926514 96.38444519]
[139.36564636 95.08511353]
[124.42203522 93.78577423]
[122.79742432 105.29126740]
[116.45182037 114.00653076]
[107.50000000 118.33514404]
[107.50000000 133.33514404]
[107.50000000 148.33514404]
[107.50000000 163.33514404]
[107.50000000 178.33514404]
[107.50000000 193.33514404]
[107.50000000 208.33514404]
[107.50000000 223.33514404]
[107.50000000 238.33514404]
[107.50000000 253.33514404]
[107.50000000 268.33514404]
[122.30017853 271.01742554]
[136.38348389 276.29946899]
[149.29722595 284.01147461]
[160.62626648 293.90554810]
[170.00642395 305.66363525]
[177.13615417 318.90774536]
[181.78628540 333.21215820]
[183.80731201 348.11703491]
[183.13429260 363.14324951]
[179.78884888 377.80773926]
[173.87852478 391.63916016]
[165.59330750 404.19284058]
[155.19953918 415.06524658]
[143.03132629 423.90689087]
[129.47984314 430.43353271]
[114.98070526 434.43536377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[30 115]
[31 114]
[32 113]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[116 133]
[117 132]
[118 131]
[119 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
