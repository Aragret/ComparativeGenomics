%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACAAACUGGGGGGGGGGUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUxxxxxxxxxxCCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCCCCCCCCCCCAACAUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.83489990]
[71.19830322 354.81887817]
[59.48964310 345.28945923]
[50.78712082 332.95379639]
[45.73651886 318.72726440]
[44.71262741 303.66558838]
[47.79142761 288.88641357]
[54.74444962 275.48651123]
[65.05573273 264.46017456]
[77.96011353 256.62567139]
[92.50000000 252.56434631]
[92.50000000 237.56434631]
[92.50000000 222.56434631]
[92.50000000 207.56434631]
[92.50000000 192.56434631]
[92.50000000 177.56434631]
[92.50000000 162.56434631]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[92.50000000 52.43565369]
[92.50000000 37.43565369]
[92.50000000 22.43565369]
[92.50000000 7.43565369]
[92.50000000 -7.56434631]
[92.50000000 -22.56434631]
[92.50000000 -37.56434631]
[77.78102875 -40.71565247]
[64.04432678 -46.85614777]
[51.88933182 -55.71520996]
[41.84592056 -66.90363312]
[34.35128784 -79.93074036]
[29.73092079 -94.22589874]
[28.18446350 -109.16350555]
[29.77709579 -124.09038544]
[34.43677902 -138.35430908]
[41.95753098 -151.33258057]
[52.00850296 -162.45910645]
[64.14855957 -171.24916077]
[77.84561920 -177.32052612]
[92.50000000 -180.41001892]
[92.50000000 -195.41001892]
[92.50000000 -210.41001892]
[92.50000000 -225.41001892]
[92.50000000 -240.41001892]
[92.50000000 -255.41001892]
[92.50000000 -270.41000366]
[92.50000000 -285.41000366]
[92.50000000 -300.41000366]
[77.61594391 -302.45422363]
[63.14889526 -306.50613403]
[49.36835861 -312.49032593]
[36.53105545 -320.29528809]
[24.87614441 -329.77563477]
[14.62074184 -340.75473022]
[5.95590353 -353.02804565]
[-0.95695090 -366.36694336]
[-5.98903894 -380.52291870]
[-9.04661560 -395.23226929]
[-10.07272053 -410.22097778]
[-9.04823780 -425.20977783]
[-5.99225330 -439.91946411]
[-0.96169770 -454.07598877]
[5.94971275 -467.41561890]
[14.61322308 -479.68988037]
[24.86743546 -490.67007446]
[36.52132416 -500.15167236]
[49.35778046 -507.95803833]
[63.13766861 -513.94372559]
[77.60427856 -517.99719238]
[92.48811340 -520.04302979]
[107.51188660 -520.04302979]
[122.39572144 -517.99719238]
[136.86233521 -513.94372559]
[150.64222717 -507.95803833]
[163.47868347 -500.15167236]
[175.13256836 -490.67007446]
[185.38677979 -479.68988037]
[194.05029297 -467.41561890]
[200.96170044 -454.07598877]
[205.99224854 -439.91946411]
[209.04823303 -425.20977783]
[210.07272339 -410.22097778]
[209.04661560 -395.23226929]
[205.98904419 -380.52291870]
[200.95695496 -366.36694336]
[194.04409790 -353.02804565]
[185.37925720 -340.75473022]
[175.12385559 -329.77563477]
[163.46894836 -320.29528809]
[150.63163757 -312.49032593]
[136.85110474 -306.50613403]
[122.38405609 -302.45422363]
[107.50000000 -300.41000366]
[107.50000000 -285.41000366]
[107.50000000 -270.41000366]
[107.50000000 -255.41001892]
[107.50000000 -240.41001892]
[107.50000000 -225.41001892]
[107.50000000 -210.41001892]
[107.50000000 -195.41001892]
[107.50000000 -180.41001892]
[122.15438080 -177.32052612]
[135.85144043 -171.24916077]
[147.99150085 -162.45910645]
[158.04246521 -151.33258057]
[165.56321716 -138.35430908]
[170.22290039 -124.09038544]
[171.81553650 -109.16350555]
[170.26907349 -94.22589874]
[165.64871216 -79.93074036]
[158.15408325 -66.90363312]
[148.11067200 -55.71520996]
[135.95567322 -46.85614777]
[122.21897125 -40.71565247]
[107.50000000 -37.56434631]
[107.50000000 -22.56434631]
[107.50000000 -7.56434631]
[107.50000000 7.43565369]
[107.50000000 22.43565369]
[107.50000000 37.43565369]
[107.50000000 52.43565369]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[107.50000000 162.56434631]
[107.50000000 177.56434631]
[107.50000000 192.56434631]
[107.50000000 207.56434631]
[107.50000000 222.56434631]
[107.50000000 237.56434631]
[107.50000000 252.56434631]
[122.03988647 256.62567139]
[134.94427490 264.46017456]
[145.25555420 275.48651123]
[152.20857239 288.88641357]
[155.28736877 303.66558838]
[154.26348877 318.72726440]
[149.21287537 332.95379639]
[140.51036072 345.28945923]
[128.80169678 354.81887817]
[114.95575714 360.83489990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[45 106]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
