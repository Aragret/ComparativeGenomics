%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAACAUUCGGGGGGGGGGUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAxxxxxxxxxxUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUCCCCCCCCCCUGACAACAUUC\
) } def
/len { sequence length } bind def

/coor [
[89.98841858 397.22796631]
[75.96647644 391.67495728]
[63.76651764 382.80862427]
[54.15544891 371.18630981]
[47.73742294 357.53860474]
[44.91588593 342.72341919]
[45.86820221 327.67202759]
[50.53450775 313.33059692]
[58.62147522 300.60064697]
[69.62075043 290.28237915]
[82.84090424 283.02441406]
[97.45092010 279.28295898]
[97.45092010 264.28295898]
[97.45092010 249.28297424]
[97.45092010 234.28297424]
[97.45092010 219.28297424]
[97.45092010 204.28297424]
[97.45092010 189.28297424]
[97.45092010 174.28297424]
[97.45092010 159.28297424]
[97.45092010 144.28297424]
[91.65639496 139.52130127]
[86.18035126 153.48600769]
[71.20693970 152.59329224]
[67.42895508 138.07685852]
[80.06734467 129.99795532]
[74.27281952 125.23629761]
[59.55730057 128.14376831]
[44.84177780 131.05123901]
[30.12625504 133.95870972]
[21.53832626 147.22607422]
[6.06702375 150.45320129]
[-7.10880566 141.72547913]
[-10.17217445 126.22092438]
[-1.30564070 113.13810730]
[14.23043823 110.23883057]
[27.21878242 119.24318695]
[41.93430710 116.33571625]
[56.64982986 113.42824554]
[71.36534882 110.52077484]
[73.20867157 95.63446045]
[59.64677811 89.22548676]
[46.08488083 82.81651306]
[32.52298737 76.40753937]
[19.49153709 84.66494751]
[4.06465340 84.54335022]
[-8.83500385 76.08152771]
[-15.09119987 61.97962952]
[-12.70760632 46.73751450]
[-2.44481826 35.21889114]
[12.42234612 31.09930420]
[27.14982796 35.69330215]
[37.03813934 47.53495789]
[38.93196106 62.84564209]
[52.49385834 69.25461578]
[66.05575562 75.66358948]
[79.61765289 82.07257080]
[93.04509735 75.38648987]
[96.10349274 60.70159531]
[99.16188812 46.01669693]
[102.22028351 31.33179855]
[91.87877655 42.19702911]
[79.59432220 50.80470657]
[65.85128021 56.81543350]
[51.19153976 59.99221802]
[36.19311523 60.20979309]
[21.44739342 57.45958710]
[7.53578234 51.85003662]
[-4.99319077 43.60231781]
[-15.64551640 33.04164124]
[-24.00118256 20.58439827]
[-29.73072815 6.72177553]
[-32.60824203 -7.99963427]
[-32.52026749 -22.99937630]
[-29.47027016 -37.68601990]
[-23.57851219 -51.48048401]
[-15.07730007 -63.83885574]
[-4.30183172 -74.27385712]
[8.32302380 -82.37404633]
[22.29947662 -87.82003021]
[37.07644653 -90.39707947]
[52.07128525 -90.00359344]
[66.69275665 -86.65506744]
[80.36434174 -80.48355103]
[92.54698944 -71.73236847]
[102.76033783 -60.74658585]
[110.60168457 -47.95935440]
[115.76184845 -33.87487030]
[118.03736877 -19.04847336]
[117.33852386 -4.06476212]
[113.69487762 10.47988415]
[124.46355438 0.03787538]
[135.23223877 -10.40413380]
[146.00091553 -20.84614372]
[153.16294861 -36.21303940]
[169.91195679 -33.58487701]
[172.02308655 -16.76288223]
[156.44291687 -10.07746410]
[145.67424011 0.36454505]
[134.90556335 10.80655384]
[124.13688660 21.24856377]
[116.90518188 34.39019394]
[113.84678650 49.07509232]
[110.78839111 63.75999069]
[107.72999573 78.44488525]
[116.52184296 90.59822083]
[131.42628479 92.28862000]
[148.09724426 84.53557587]
[161.81484985 95.43841553]
[176.75085449 96.82244110]
[191.68687439 98.20646667]
[206.62287903 99.59049225]
[221.55889893 100.97451782]
[232.54493713 89.84613037]
[248.11866760 88.43444824]
[260.92666626 97.40603638]
[264.92135620 112.52477264]
[258.21661377 126.65206146]
[243.97817993 133.11743164]
[228.92901611 128.86811829]
[220.17486572 115.91053009]
[205.23886108 114.52650452]
[190.30284119 113.14247894]
[175.36683655 111.75845337]
[160.43081665 110.37442780]
[150.89028931 117.87379456]
[138.39930725 116.80289459]
[129.73588562 107.19306946]
[114.83144379 105.50267029]
[120.29970551 116.05223846]
[119.93282318 129.90574646]
[112.45092010 144.28297424]
[112.45092010 159.28297424]
[112.45092010 174.28297424]
[112.45092010 189.28297424]
[112.45092010 204.28297424]
[112.45092010 219.28297424]
[112.45092010 234.28297424]
[112.45092010 249.28297424]
[112.45092010 264.28295898]
[112.45092010 279.28295898]
[127.06093597 283.02441406]
[140.28109741 290.28237915]
[151.28036499 300.60064697]
[159.36734009 313.33059692]
[164.03363037 327.67202759]
[164.98594666 342.72341919]
[162.16441345 357.53860474]
[155.74639893 371.18630981]
[146.13531494 382.80862427]
[133.93536377 391.67495728]
[119.91342163 397.22796631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 40]
[28 39]
[29 38]
[30 37]
[41 57]
[42 56]
[43 55]
[44 54]
[58 105]
[59 104]
[60 103]
[61 102]
[91 101]
[92 100]
[93 99]
[94 98]
[106 129]
[107 128]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
