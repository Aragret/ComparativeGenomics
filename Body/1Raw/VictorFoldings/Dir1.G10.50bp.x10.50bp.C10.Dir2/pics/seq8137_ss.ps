%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACCAAGGGGGGGGGGAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGxxxxxxxxxxAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCCCCCCCCCCCGCACCAA\
) } def
/len { sequence length } bind def

/coor [
[83.15515137 352.95184326]
[69.93495941 345.67935181]
[59.04815292 335.23236084]
[51.23702240 322.32312012]
[47.03414154 307.83178711]
[46.72607040 292.74645996]
[50.33380890 278.09564209]
[57.61138153 264.87823486]
[68.06259155 253.99546814]
[80.97485352 246.18933105]
[95.46778870 241.99203491]
[95.15573120 226.99528503]
[94.84367371 211.99853516]
[94.53162384 197.00178528]
[94.21956635 182.00502014]
[93.90750885 167.00827026]
[93.59545135 152.01152039]
[93.28339386 137.01477051]
[92.97133636 122.01801300]
[92.65928650 107.02125549]
[89.33838654 99.61479187]
[92.50000000 91.71001434]
[92.50000000 76.71001434]
[77.52191162 75.82126617]
[62.62277985 74.04677582]
[47.85493851 71.39276123]
[33.27025986 67.86854553]
[18.91997147 63.48651123]
[4.85448170 58.26205444]
[-8.87680435 52.21352005]
[-22.22565460 45.36215591]
[-35.14517975 37.73203278]
[-47.59000015 29.34994316]
[-59.51640320 20.24533463]
[-70.88249207 10.45018578]
[-81.64835358 -0.00109486]
[-91.77616119 -11.07179832]
[-101.23033905 -22.72303772]
[-109.97769165 -34.91388702]
[-117.98748016 -47.60152817]
[-125.23158264 -60.74139023]
[-131.68453979 -74.28732300]
[-137.32369995 -88.19174194]
[-142.12924194 -102.40580750]
[-146.08428955 -116.87960052]
[-149.17495728 -131.56227112]
[-151.39038086 -146.40223694]
[-152.72277832 -161.34739685]
[-153.16748047 -176.34524536]
[-152.72291565 -191.34307861]
[-151.39064026 -206.28825378]
[-149.17533875 -221.12825012]
[-146.08480835 -235.81094360]
[-142.12988281 -250.28475952]
[-137.32446289 -264.49887085]
[-131.68544006 -278.40335083]
[-125.23259735 -291.94934082]
[-117.98860931 -305.08926392]
[-109.97892761 -317.77697754]
[-101.23168945 -329.96789551]
[-91.77760315 -341.61920166]
[-81.64989471 -352.69000244]
[-70.88413239 -363.14138794]
[-59.51812363 -372.93661499]
[-47.59180069 -382.04135132]
[-35.14705276 -390.42355347]
[-22.22759438 -398.05377197]
[-8.87880516 -404.90527344]
[4.85242748 -410.95391846]
[18.91787148 -416.17849731]
[33.26811981 -420.56063843]
[47.85276794 -424.08499146]
[62.62059021 -426.73913574]
[77.51970673 -428.51376343]
[92.49778748 -429.40264893]
[107.50221252 -429.40264893]
[122.48029327 -428.51376343]
[137.37940979 -426.73913574]
[152.14723206 -424.08499146]
[166.73187256 -420.56063843]
[181.08212280 -416.17849731]
[195.14756775 -410.95391846]
[208.87879944 -404.90527344]
[222.22760010 -398.05377197]
[235.14704895 -390.42355347]
[247.59179688 -382.04135132]
[259.51812744 -372.93661499]
[270.88412476 -363.14138794]
[281.64990234 -352.69000244]
[291.77761841 -341.61920166]
[301.23168945 -329.96789551]
[309.97894287 -317.77697754]
[317.98861694 -305.08926392]
[325.23260498 -291.94934082]
[331.68542480 -278.40335083]
[337.32446289 -264.49887085]
[342.12988281 -250.28475952]
[346.08480835 -235.81094360]
[349.17535400 -221.12825012]
[351.39062500 -206.28825378]
[352.72290039 -191.34307861]
[353.16748047 -176.34524536]
[352.72277832 -161.34739685]
[351.39038086 -146.40223694]
[349.17495728 -131.56227112]
[346.08428955 -116.87960052]
[342.12924194 -102.40580750]
[337.32369995 -88.19174194]
[331.68453979 -74.28732300]
[325.23156738 -60.74139023]
[317.98748779 -47.60152817]
[309.97769165 -34.91388702]
[301.23034668 -22.72303772]
[291.77615356 -11.07179832]
[281.64834595 -0.00109486]
[270.88250732 10.45018578]
[259.51638794 20.24533463]
[247.58999634 29.34994316]
[235.14517212 37.73203278]
[222.22564697 45.36215591]
[208.87680054 52.21352005]
[195.14552307 58.26205444]
[181.08003235 63.48651123]
[166.72973633 67.86854553]
[152.14506531 71.39276123]
[137.37721252 74.04677582]
[122.47808838 75.82126617]
[107.50000000 76.71001434]
[107.50000000 91.71001434]
[107.65603638 106.70919800]
[107.96809387 121.70595551]
[108.28015137 136.70271301]
[108.59220886 151.69946289]
[108.90425873 166.69621277]
[109.21631622 181.69296265]
[109.52837372 196.68972778]
[109.84043121 211.68647766]
[110.15248871 226.68322754]
[110.46454620 241.67997742]
[125.11953735 245.27075195]
[138.34533691 252.53300476]
[149.24021912 262.97161865]
[157.06130981 275.87481689]
[161.27537537 290.36288452]
[161.59510803 305.44796753]
[157.99867249 320.10159302]
[150.73130798 333.32458496]
[140.28851318 344.21542358]
[127.38227844 352.03152466]
[112.89258575 356.24002075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
