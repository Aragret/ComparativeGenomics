%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCUAGGGGGGGGGGCCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGxxxxxxxxxxAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCCCCCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.18793488 152.87287903]
[71.47409821 146.91706848]
[59.87530518 137.48262024]
[51.25152969 125.26905060]
[46.24217987 111.18192291]
[45.21867371 96.26571655]
[48.25689697 81.62638092]
[55.13158417 68.34934998]
[65.33300781 57.41903687]
[78.10480499 49.64586639]
[92.50000000 45.60617065]
[92.50000000 30.60617256]
[92.50000000 15.60617256]
[92.50000000 0.60617250]
[92.50000000 -14.39382744]
[92.50000000 -29.39382744]
[92.50000000 -44.39382935]
[92.50000000 -59.39382935]
[92.50000000 -74.39382935]
[92.50000000 -89.39382935]
[92.50000000 -104.39382935]
[92.50000000 -119.39382935]
[77.52111053 -120.26612854]
[62.61828232 -122.00789642]
[47.84194183 -124.61324310]
[33.24208832 -128.07334900]
[18.86812401 -132.37652588]
[4.76868677 -137.50817871]
[-9.00851727 -143.45097351]
[-22.41686821 -150.18476868]
[-35.41099548 -157.68681335]
[-47.94693756 -165.93171692]
[-59.98226547 -174.89155579]
[-71.47626495 -184.53604126]
[-82.39003754 -194.83253479]
[-92.68666077 -205.74618530]
[-102.33128357 -217.24005127]
[-111.29128265 -229.27526855]
[-119.53633118 -241.81111145]
[-127.03854370 -254.80514526]
[-133.77252197 -268.21340942]
[-139.71546936 -281.99053955]
[-144.84730530 -296.08990479]
[-149.15065002 -310.46383667]
[-152.61094666 -325.06362915]
[-155.21647644 -339.83993530]
[-156.95843506 -354.74276733]
[-157.83091736 -369.72164917]
[-157.83097839 -384.72589111]
[-156.95861816 -399.70480347]
[-155.21678162 -414.60760498]
[-152.61137390 -429.38394165]
[-149.15119934 -443.98376465]
[-144.84797668 -458.35772705]
[-139.71626282 -472.45715332]
[-133.77342224 -486.23431396]
[-127.03955078 -499.64263916]
[-119.53745270 -512.63671875]
[-111.29251099 -525.17266846]
[-102.33261108 -537.20794678]
[-92.68807983 -548.70190430]
[-82.39154816 -559.61560059]
[-71.47785950 -569.91223145]
[-59.98394012 -579.55676270]
[-47.94868469 -588.51672363]
[-35.41281509 -596.76171875]
[-22.41874695 -604.26385498]
[-9.01045227 -610.99780273]
[4.76670265 -616.94067383]
[18.86609840 -622.07244873]
[33.24002457 -626.37573242]
[47.83985138 -629.83599854]
[62.61616898 -632.44146729]
[77.51898193 -634.18334961]
[92.49786377 -635.05578613]
[107.50213623 -635.05578613]
[122.48101807 -634.18334961]
[137.38383484 -632.44146729]
[152.16015625 -629.83599854]
[166.75997925 -626.37573242]
[181.13389587 -622.07244873]
[195.23329163 -616.94067383]
[209.01045227 -610.99780273]
[222.41874695 -604.26385498]
[235.41281128 -596.76171875]
[247.94868469 -588.51672363]
[259.98394775 -579.55676270]
[271.47787476 -569.91223145]
[282.39154053 -559.61560059]
[292.68807983 -548.70190430]
[302.33261108 -537.20794678]
[311.29251099 -525.17266846]
[319.53744507 -512.63671875]
[327.03955078 -499.64263916]
[333.77340698 -486.23431396]
[339.71624756 -472.45715332]
[344.84799194 -458.35772705]
[349.15121460 -443.98376465]
[352.61138916 -429.38394165]
[355.21679688 -414.60760498]
[356.95861816 -399.70480347]
[357.83096313 -384.72589111]
[357.83090210 -369.72164917]
[356.95843506 -354.74276733]
[355.21646118 -339.83993530]
[352.61093140 -325.06362915]
[349.15066528 -310.46383667]
[344.84732056 -296.08990479]
[339.71548462 -281.99053955]
[333.77252197 -268.21340942]
[327.03854370 -254.80514526]
[319.53634644 -241.81111145]
[311.29129028 -229.27526855]
[302.33129883 -217.24005127]
[292.68664551 -205.74618530]
[282.39004517 -194.83253479]
[271.47625732 -184.53604126]
[259.98226929 -174.89155579]
[247.94692993 -165.93171692]
[235.41099548 -157.68681335]
[222.41687012 -150.18476868]
[209.00851440 -143.45097351]
[195.23130798 -137.50817871]
[181.13188171 -132.37652588]
[166.75790405 -128.07334900]
[152.15806580 -124.61324310]
[137.38171387 -122.00789642]
[122.47888947 -120.26612854]
[107.50000000 -119.39382935]
[107.50000000 -104.39382935]
[107.50000000 -89.39382935]
[107.50000000 -74.39382935]
[107.50000000 -59.39382935]
[107.50000000 -44.39382935]
[107.50000000 -29.39382744]
[107.50000000 -14.39382744]
[107.50000000 0.60617250]
[107.50000000 15.60617256]
[107.50000000 30.60617256]
[107.50000000 45.60617065]
[121.89519501 49.64586639]
[134.66699219 57.41903687]
[144.86842346 68.34934998]
[151.74310303 81.62638092]
[154.78132629 96.26571655]
[153.75781250 111.18192291]
[148.74847412 125.26905060]
[140.12469482 137.48262024]
[128.52589417 146.91706848]
[114.81206512 152.87287903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
