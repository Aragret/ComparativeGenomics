%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUAGCCGGGGGGGGGGAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUxxxxxxxxxxUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGCCCCCCCCCCACUCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[84.09528351 352.75820923]
[70.24934387 346.74218750]
[58.54067993 337.21276855]
[49.83815765 324.87710571]
[44.78755569 310.65057373]
[43.76366425 295.58889771]
[46.84246063 280.80972290]
[53.79548264 267.40982056]
[64.10676575 256.38348389]
[77.01114655 248.54896545]
[91.55103302 244.48765564]
[91.55103302 229.48765564]
[91.55103302 214.48765564]
[91.55103302 199.48765564]
[91.55103302 184.48765564]
[91.55103302 169.48765564]
[91.55103302 154.48765564]
[91.55103302 139.48765564]
[91.55103302 124.48765564]
[91.55103302 109.48765564]
[86.50228119 95.36285400]
[76.99391937 83.76151276]
[67.48556519 72.16017151]
[57.97720337 60.55883026]
[45.57295609 69.01058960]
[32.47027206 76.33297729]
[18.77170563 82.46868134]
[4.58446550 87.36968231]
[-9.98041248 90.99762726]
[-24.80893517 93.32411194]
[-39.78504562 94.33094025]
[-54.79153824 94.01022339]
[-69.71096039 92.36447144]
[-84.42654419 89.40657043]
[-98.82312012 85.15966797]
[-112.78801727 79.65699768]
[-126.21192932 72.94163513]
[-138.98980713 65.06613159]
[-151.02163696 56.09212494]
[-162.21324158 46.08985519]
[-172.47705078 35.13759995]
[-181.73272705 23.32107735]
[-189.90782166 10.73277283]
[-196.93835449 -2.52879310]
[-202.76931763 -16.35982895]
[-207.35505676 -30.65208626]
[-210.65968323 -45.29370499]
[-212.65734863 -60.17009735]
[-213.33239746 -75.16482544]
[-212.67956543 -90.16053772]
[-210.70394897 -105.03987122]
[-207.42102051 -119.68637085]
[-202.85646057 -133.98541260]
[-197.04598999 -147.82507324]
[-190.03511047 -161.09703064]
[-181.87867737 -173.69743347]
[-172.64051819 -185.52766418]
[-162.39295959 -196.49511719]
[-151.21617126 -206.51396179]
[-139.19766235 -215.50578308]
[-126.43146515 -223.40020752]
[-113.01751709 -230.13545227]
[-99.06079102 -235.65879822]
[-84.67051697 -239.92703247]
[-69.95933533 -242.90673828]
[-55.04236603 -244.57458496]
[-40.03636932 -244.91754150]
[-25.05878067 -243.93290710]
[-10.22682858 -241.62838745]
[4.34340858 -238.02203369]
[18.53789520 -233.14205933]
[32.24553680 -227.02665710]
[45.35905457 -219.72369385]
[57.77581406 -211.29031372]
[69.39862823 -201.79254150]
[80.13654327 -191.30470276]
[89.90550995 -179.90887451]
[98.62907410 -167.69424438]
[106.23896790 -154.75642395]
[112.67562103 -141.19667053]
[117.88865662 -127.12108612]
[121.83728790 -112.63986206]
[124.49060059 -97.86631775]
[125.82782745 -82.91608429]
[125.83850861 -67.90617371]
[124.52255249 -52.95405197]
[121.89027405 -38.17674637]
[117.96225739 -23.68991470]
[112.76925659 -9.60693359]
[106.35190582 3.96197414]
[98.76043701 16.91061211]
[90.05426025 29.13763809]
[80.30152130 40.54735565]
[69.57854462 51.05046844]
[79.08690643 62.65180969]
[88.59526062 74.25315094]
[98.10362244 85.85449219]
[111.62780762 92.34265900]
[126.62699890 92.49869537]
[141.62619019 92.65473175]
[156.62538147 92.81076813]
[144.73184204 83.67053986]
[138.33186340 70.10439301]
[138.84106445 55.11303711]
[146.14680481 42.01242447]
[158.63313293 33.70028687]
[173.53819275 32.01519012]
[187.56509399 37.32986832]
[197.61125183 48.46876144]
[201.45451355 62.96804428]
[198.24481201 77.62061310]
[188.69209290 89.18545532]
[174.90737915 95.10486603]
[189.48008728 98.65962982]
[204.05278015 102.21439362]
[216.54901123 92.81341553]
[232.16168213 93.69588470]
[243.51895142 104.44512939]
[245.25828552 119.98567963]
[236.55841064 132.97976685]
[221.52716064 137.29197693]
[207.26181030 130.88621521]
[200.49803162 116.78709412]
[185.92532349 113.23233032]
[171.35261536 109.67756653]
[156.46934509 107.80995941]
[141.47015381 107.65392303]
[126.47096252 107.49788666]
[111.47177124 107.34185028]
[109.04595947 108.73476410]
[106.55103302 109.48765564]
[106.55103302 124.48765564]
[106.55103302 139.48765564]
[106.55103302 154.48765564]
[106.55103302 169.48765564]
[106.55103302 184.48765564]
[106.55103302 199.48765564]
[106.55103302 214.48765564]
[106.55103302 229.48765564]
[106.55103302 244.48765564]
[121.09091949 248.54896545]
[133.99530029 256.38348389]
[144.30659485 267.40982056]
[151.25961304 280.80972290]
[154.33840942 295.58889771]
[153.31451416 310.65057373]
[148.26391602 324.87710571]
[139.56138611 337.21276855]
[127.85272980 346.74218750]
[114.00679016 352.75820923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 97]
[22 96]
[23 95]
[24 94]
[98 129]
[99 128]
[100 127]
[101 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
