%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAAACCCGGGGGGGGGGGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACxxxxxxxxxxUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACCCCCCCCCCCAUAAAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 350.99279785]
[71.19830322 344.97677612]
[59.48964310 335.44735718]
[50.78712082 323.11169434]
[45.73651886 308.88516235]
[44.71262741 293.82348633]
[47.79142761 279.04431152]
[54.74444962 265.64437866]
[65.05573273 254.61805725]
[77.96011353 246.78355408]
[92.50000000 242.72224426]
[92.50000000 227.72224426]
[92.50000000 212.72224426]
[92.50000000 197.72224426]
[92.50000000 182.72224426]
[92.50000000 167.72224426]
[92.50000000 152.72224426]
[92.50000000 137.72224426]
[92.50000000 122.72223663]
[92.50000000 107.72223663]
[88.94523621 93.14953613]
[82.03823853 79.83438110]
[75.13124084 66.51922607]
[61.90850067 57.83189392]
[62.91624069 42.97142029]
[56.00924301 29.65626335]
[49.10224152 16.34110832]
[35.24776077 22.11344910]
[20.95885277 26.70622444]
[6.33573866 30.08721733]
[-8.51900482 32.23271179]
[-23.50118065 33.12765884]
[-38.50569916 32.76578140]
[-53.42731476 31.14961624]
[-68.16135406 28.29050064]
[-82.60447693 24.20849228]
[-96.65536499 18.93222046]
[-110.21546936 12.49869537]
[-123.18965912 4.95304537]
[-135.48693848 -3.65180111]
[-147.02105713 -13.25548744]
[-157.71109009 -23.79064941]
[-167.48207092 -35.18338776]
[-176.26545715 -47.35379028]
[-183.99963379 -60.21649170]
[-190.63035583 -73.68125916]
[-196.11111450 -87.65365601]
[-200.40345764 -102.03567505]
[-203.47727966 -116.72642517]
[-205.31101990 -131.62286377]
[-205.89181519 -146.62049866]
[-205.21559143 -161.61415100]
[-203.28710938 -176.49861145]
[-200.11987305 -191.16950989]
[-195.73609924 -205.52392578]
[-190.16654968 -219.46116638]
[-183.45028687 -232.88346863]
[-175.63441467 -245.69670105]
[-166.77377319 -257.81097412]
[-156.93049622 -269.14129639]
[-146.17364502 -279.60821533]
[-134.57865906 -289.13833618]
[-122.22686768 -297.66476440]
[-109.20492554 -305.12768555]
[-95.60415649 -311.47479248]
[-81.51998138 -316.66156006]
[-67.05117798 -320.65158081]
[-52.29924393 -323.41690063]
[-37.36764526 -324.93807983]
[-22.36112976 -325.20446777]
[-7.38495064 -324.21420288]
[7.45584011 -321.97424316]
[22.05714417 -318.50027466]
[36.31653976 -313.81665039]
[50.13401031 -307.95629883]
[63.41263199 -300.96023560]
[76.05926514 -292.87759399]
[87.98519897 -283.76501465]
[99.10678101 -273.68649292]
[109.34600067 -262.71264648]
[118.63103485 -250.92050171]
[126.89675140 -238.39276123]
[134.08517456 -225.21728516]
[140.14588928 -211.48651123]
[145.03637695 -197.29673767]
[148.72233582 -182.74749756]
[151.17790222 -167.94085693]
[152.38586426 -152.98066711]
[152.33773804 -137.97186279]
[151.03387451 -123.01972198]
[148.48339844 -108.22912598]
[144.70422363 -93.70382690]
[139.72283936 -79.54570770]
[133.57420349 -65.85407257]
[126.30143738 -52.72497177]
[117.95555115 -40.25048828]
[108.59508514 -28.51812553]
[98.28570557 -17.61018181]
[87.09972382 -7.60316849]
[75.11560059 1.43272269]
[62.41739655 9.43410969]
[69.32439423 22.74926567]
[76.23139191 36.06442261]
[88.96010590 43.79935837]
[88.44639587 59.61222458]
[95.35339355 72.92738342]
[102.26039124 86.24253845]
[103.25475311 71.27552795]
[107.87274170 57.00408173]
[115.83492279 44.29174042]
[126.65951538 33.90770721]
[139.69154358 26.48030663]
[154.14245605 22.45896149]
[169.13783264 22.08699989]
[183.77035522 25.38692856]
[197.15460205 32.15906906]
[208.48071289 41.99365234]
[217.06338501 54.29560089]
[222.38325500 68.32054138]
[224.11845398 83.21984100]
[222.16398621 98.09195709]
[216.63809204 112.03701782]
[207.87515259 124.21120453]
[196.40539551 133.87788391]
[182.92283630 140.45213318]
[168.24330139 143.53616333]
[153.25502014 142.94335938]
[138.86491394 138.70959473]
[125.94371033 131.09103394]
[115.27325439 120.54868317]
[107.50000000 107.72223663]
[107.50000000 122.72223663]
[107.50000000 137.72224426]
[107.50000000 152.72224426]
[107.50000000 167.72224426]
[107.50000000 182.72224426]
[107.50000000 197.72224426]
[107.50000000 212.72224426]
[107.50000000 227.72224426]
[107.50000000 242.72224426]
[122.03988647 246.78355408]
[134.94427490 254.61805725]
[145.25555420 265.64437866]
[152.20857239 279.04431152]
[155.28736877 293.82348633]
[154.26348877 308.88516235]
[149.21287537 323.11169434]
[140.51036072 335.44735718]
[128.80169678 344.97677612]
[114.95575714 350.99279785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 107]
[22 106]
[23 105]
[25 103]
[26 102]
[27 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
