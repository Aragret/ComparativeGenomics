%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAGACAUGGGGGGGGGGCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGxxxxxxxxxxCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUCCCCCCCCCCACACAAACAU\
) } def
/len { sequence length } bind def

/coor [
[33.73631668 221.64399719]
[24.23429680 215.96420288]
[15.21616745 209.54377747]
[6.73952532 202.42373657]
[-1.14149177 194.64955139]
[-8.37655067 186.27085876]
[-14.91944408 177.34118652]
[-20.72838402 167.91757202]
[-25.76626968 158.06018066]
[-30.00092697 147.83197021]
[-33.40530777 137.29827881]
[-48.04881287 140.54910278]
[-62.69231415 143.79992676]
[-77.30120850 147.20291138]
[-91.87390900 150.75767517]
[-106.44660950 154.31243896]
[-121.01931000 157.86720276]
[-135.59201050 161.42195129]
[-150.16471863 164.97671509]
[-164.73742676 168.53147888]
[-164.90994263 183.61196899]
[-168.82818604 198.17555237]
[-176.24588013 211.30676270]
[-186.69671631 222.18016052]
[-199.52377319 230.11222839]
[-213.92070007 234.60435486]
[-228.98251343 235.37416077]
[-243.76240540 232.37324524]
[-257.33129883 225.79026794]
[-268.83627319 216.03901672]
[-277.55407715 203.73248291]
[-282.93670654 189.64427185]
[-284.64581299 174.65994263]
[-282.57397461 159.72146606]
[-276.85140991 145.76786804]
[-267.83786011 133.67626953]
[-256.09988403 124.20678711]
[-242.37539673 117.95465851]
[-227.52709961 115.31291199]
[-212.48837280 116.44760132]
[-198.20455933 121.28739929]
[-185.57356262 129.52807617]
[-175.38937378 140.65161133]
[-168.29219055 153.95878601]
[-153.71948242 150.40402222]
[-139.14677429 146.84925842]
[-124.57407379 143.29449463]
[-110.00137329 139.73973083]
[-95.42867279 136.18496704]
[-80.85596466 132.63020325]
[-75.06557465 127.95934296]
[-65.94313812 129.15643311]
[-51.29963684 125.90560150]
[-36.65613556 122.65477753]
[-38.50262451 97.72816467]
[-35.83961487 72.87551117]
[-28.75380707 48.90600967]
[-17.47591019 26.60007477]
[-2.37312055 6.68396425]
[16.06282997 -10.19387436]
[37.23168945 -23.48391533]
[31.16867447 -37.20396805]
[25.10566139 -50.92402267]
[11.55321789 -60.15783310]
[13.04337406 -76.48913574]
[28.04318619 -83.11769104]
[41.12213516 -73.22460175]
[38.82571411 -56.98703766]
[44.88872910 -43.26698303]
[50.95174026 -29.54692841]
[57.72946930 -31.91414070]
[64.62073517 -33.92701721]
[71.60704041 -35.58015442]
[78.66960144 -36.86910629]
[85.78946686 -37.79041672]
[92.94750214 -38.34160995]
[100.12448120 -38.52119827]
[107.30111694 -38.32870865]
[114.45815277 -37.76465607]
[121.57634735 -36.83055115]
[128.63658142 -35.52890396]
[135.61990356 -33.86321640]
[142.50753784 -31.83795738]
[149.28100586 -29.45856857]
[155.92208862 -26.73144150]
[162.41296387 -23.66390038]
[168.73619080 -20.26418495]
[174.87478638 -16.54142952]
[180.81225586 -12.50563049]
[186.53266907 -8.16763115]
[192.02062988 -3.53908277]
[197.26142883 1.36758220]
[202.24096680 6.53918362]
[206.94586182 11.96183014]
[219.02586365 3.06948042]
[231.10585022 -5.82286930]
[240.27720642 -20.08199120]
[256.51794434 -15.21637058]
[256.33837891 1.73662627]
[239.99819946 6.25711918]
[227.91821289 15.14946842]
[215.83822632 24.04181862]
[227.33572388 45.46789932]
[234.90946960 68.57434845]
[238.32608032 92.64915466]
[237.48025513 116.95047760]
[252.24630737 119.58934784]
[267.01235962 122.22821045]
[281.77841187 124.86707306]
[292.82839966 118.13271332]
[305.10614014 120.67761230]
[312.10482788 130.59352112]
[326.81280518 133.53901672]
[341.52075195 136.48449707]
[356.22872925 139.42997742]
[370.32315063 131.76666260]
[385.04565430 138.14064026]
[389.10238647 153.66232300]
[379.38134766 166.42480469]
[363.33972168 166.63781738]
[353.28323364 154.13793945]
[338.57528687 151.19245911]
[323.86730957 148.24697876]
[309.15936279 145.30148315]
[292.89822388 151.82650757]
[279.13955688 139.63313293]
[264.37350464 136.99426270]
[249.60743713 134.35539246]
[234.84138489 131.71653748]
[231.87814331 142.38272095]
[228.07261658 152.77822876]
[223.44914246 162.83665466]
[218.03724670 172.49377441]
[211.87147522 181.68788147]
[204.99122620 190.36029053]
[197.44041443 198.45558167]
[189.26730347 205.92208862]
[180.52406311 212.71208191]
[171.26654053 218.78224182]
[161.55384827 224.09376526]
[151.44804382 228.61274719]
[141.01365662 232.31030273]
[130.31733704 235.16285706]
[119.42737579 237.15216064]
[108.41334534 238.26551819]
[97.34557343 238.49581909]
[86.29476166 237.84159851]
[75.33148193 236.30702209]
[64.52574921 233.90188599]
[53.94658279 230.64157104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 54]
[12 53]
[13 52]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[61 70]
[62 69]
[63 68]
[94 102]
[95 101]
[96 100]
[106 129]
[107 128]
[108 127]
[109 126]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
