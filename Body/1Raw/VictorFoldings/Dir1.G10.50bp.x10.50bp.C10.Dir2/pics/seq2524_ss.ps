%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUCCUCCGGGGGGGGGGGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAxxxxxxxxxxAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCCCCCCCCCCCAUUCUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[83.90354919 500.84582520]
[71.57044220 492.19470215]
[61.47198868 481.01574707]
[54.11473846 467.86968994]
[49.86771774 453.41595459]
[48.94395828 438.37951660]
[51.38979721 423.51458740]
[57.08255005 409.56683350]
[65.73667145 397.23580933]
[76.91807556 387.14007568]
[90.06590271 379.78601074]
[104.52066803 375.54248047]
[103.59725952 360.57095337]
[102.67384338 345.59939575]
[101.75042725 330.62783813]
[100.82701874 315.65628052]
[99.90360260 300.68475342]
[98.98018646 285.71319580]
[98.05677795 270.74163818]
[97.13336182 255.77009583]
[96.20994568 240.79853821]
[95.28653717 225.82699585]
[91.71364594 219.30421448]
[94.50107574 210.53916931]
[93.88524628 195.55180359]
[93.26942444 180.56445312]
[89.83121490 173.96969604]
[92.79801178 165.26371765]
[84.27127075 156.62908936]
[83.92769623 144.09700012]
[92.50000000 134.40580750]
[92.50000000 119.40580750]
[83.26965332 112.36651611]
[79.24782562 101.47727203]
[64.90776062 97.07697296]
[50.56769943 92.67667389]
[36.22763824 88.27637482]
[21.88757706 83.87606812]
[12.23356056 95.61781311]
[-1.18130803 102.76691437]
[-16.31135941 104.23320770]
[-30.84936905 99.79308319]
[-42.57839584 90.12362671]
[-49.70985031 76.69936371]
[-51.15623856 61.56740189]
[-46.69699097 47.03524399]
[-37.01211929 35.31894684]
[-23.57848740 28.20515633]
[-8.44463062 26.77867699]
[6.08164692 31.25703621]
[17.78519440 40.95731354]
[24.88130760 54.40029144]
[26.28787804 69.53601074]
[40.62793732 73.93630981]
[54.96799850 78.33660889]
[69.30805969 82.73690796]
[83.64812469 87.13721466]
[92.28570557 80.67838287]
[102.99650574 79.41223145]
[110.36274719 66.34553528]
[110.39970398 50.52437592]
[123.38991547 43.23713684]
[130.75614929 30.17044067]
[138.12239075 17.10374641]
[145.48863220 4.03705120]
[133.45364380 -4.95113564]
[122.66689301 -15.40456867]
[113.30549622 -27.15159416]
[105.52317810 -39.99931335]
[99.44773865 -53.73675537]
[95.17893219 -68.13833618]
[92.78685760 -82.96757507]
[92.31079865 -97.98095703]
[93.75857544 -112.93195343]
[97.10640717 -127.57505798]
[102.29932404 -141.66979980]
[109.25205231 -154.98475647]
[117.85041809 -167.30126953]
[127.95323181 -178.41708374]
[139.39460754 -188.14967346]
[151.98664856 -196.33923340]
[165.52258301 -202.85127258]
[179.78015137 -207.57885742]
[194.52523804 -210.44435120]
[209.51568604 -211.40071106]
[224.50535583 -210.43222046]
[239.24810791 -207.55479431]
[253.50184631 -202.81568909]
[267.03253174 -196.29270935]
[279.61795044 -188.09297180]
[291.05142212 -178.35112000]
[301.14526367 -167.22712708]
[309.73364258 -154.90367126]
[316.67559814 -141.58309937]
[321.85711670 -127.48415375]
[325.19311523 -112.83835602]
[326.62878418 -97.88619232]
[326.14059448 -82.87319946]
[323.73651123 -68.04589844]
[319.45605469 -53.64777374]
[313.36950684 -39.91524887]
[305.57681274 -27.07383156]
[296.20590210 -15.33438301]
[285.41070557 -4.88967800]
[273.36843872 4.08877134]
[260.27691650 11.45353127]
[246.35102844 17.08366585]
[231.81951904 20.88672256]
[216.92095947 22.80025291]
[201.90003967 22.79283333]
[187.00338745 20.86458778]
[172.47563171 17.04717827]
[158.55532837 11.40329075]
[151.18908691 24.46998596]
[143.82284546 37.53668213]
[136.45660400 50.60337448]
[136.94653320 65.48992157]
[123.42944336 73.71177673]
[116.06320190 86.77847290]
[120.12316895 105.28142548]
[107.50000000 119.40580750]
[107.50000000 134.40580750]
[117.08235931 150.09684753]
[107.79484558 164.95574951]
[108.25677490 179.94862366]
[108.87259674 194.93598938]
[109.48842621 209.92333984]
[110.25808716 224.90357971]
[111.18149567 239.87512207]
[112.10491180 254.84667969]
[113.02832794 269.81823730]
[113.95173645 284.78976440]
[114.87515259 299.76132202]
[115.79856873 314.73287964]
[116.72197723 329.70443726]
[117.64539337 344.67596436]
[118.56880951 359.64752197]
[119.49221802 374.61907959]
[134.35890198 377.05410767]
[148.31080627 382.73672485]
[160.64811707 391.38186646]
[170.75198364 402.55593872]
[178.11560059 415.69842529]
[182.36962891 430.15008545]
[183.30067444 445.18609619]
[180.86203003 460.05218506]
[175.17604065 474.00271606]
[166.52789307 486.33792114]
[155.35139465 496.43908691]
[142.20712280 503.79949951]
[127.75441742 508.05004883]
[112.71820068 508.97744751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 127]
[25 126]
[26 125]
[28 124]
[31 122]
[32 121]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[59 119]
[60 118]
[62 116]
[63 115]
[64 114]
[65 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
