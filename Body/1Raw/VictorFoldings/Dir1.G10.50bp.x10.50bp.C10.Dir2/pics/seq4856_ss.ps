%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCUCUUCAGGGGGGGGGGACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACxxxxxxxxxxAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUCCCCCCCCCCUAUCAUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[79.45371246 708.61065674]
[65.43177032 703.05767822]
[53.23181152 694.19134521]
[43.62074280 682.56903076]
[37.20271683 668.92132568]
[34.38117981 654.10614014]
[35.33349609 639.05474854]
[39.99980164 624.71331787]
[48.08676529 611.98333740]
[59.08604050 601.66510010]
[72.30619812 594.40710449]
[86.91621399 590.66564941]
[86.91621399 575.66564941]
[86.91621399 560.66564941]
[86.91621399 545.66564941]
[86.91621399 530.66564941]
[86.91621399 515.66564941]
[86.91621399 500.66567993]
[86.91621399 485.66567993]
[86.91621399 470.66567993]
[86.91621399 455.66567993]
[86.91621399 440.66567993]
[72.71128845 437.61050415]
[59.45209885 431.65359497]
[47.72445297 423.05535889]
[38.04706192 412.19290161]
[30.84861565 399.54364014]
[26.44878578 385.66418457]
[25.04403877 371.16580200]
[26.69885445 356.68774414]
[31.34277534 342.86877441]
[38.77339935 330.31915283]
[48.66521072 319.59362793]
[60.58382416 311.16693115]
[74.00507355 305.41281128]
[88.33805084 302.58734131]
[88.64602661 287.59051514]
[78.17924500 277.05569458]
[78.27794647 261.84237671]
[89.39878845 250.93528748]
[89.70676422 235.93844604]
[90.01473999 220.94161987]
[90.32271576 205.94477844]
[77.50860596 198.35108948]
[70.16712189 185.27597046]
[70.35723114 170.18193054]
[78.12802124 157.12391663]
[91.47859192 149.66003418]
[91.78656769 134.66319275]
[92.09454346 119.66635895]
[79.02276611 103.03605652]
[86.84307861 83.38201904]
[82.29578400 69.08789062]
[77.74849701 54.79376221]
[73.20121002 40.49962997]
[68.65391541 26.20549965]
[53.62744904 27.34653473]
[38.74297333 24.99087524]
[24.80319405 19.26555634]
[12.55986404 10.47934055]
[2.67325091 -0.89394391]
[-4.32347202 -14.24095058]
[-8.05298138 -28.84189224]
[-8.31414795 -43.90935516]
[-5.09288883 -58.63077545]
[1.43707836 -72.21224213]
[10.92360020 -83.92132568]
[22.85508156 -93.12657166]
[36.58806992 -99.33154297]
[51.38196564 -102.20162201]
[66.43894958 -101.58203125]
[80.94702148 -97.50617981]
[94.12377930 -90.19387054]
[105.25861359 -80.03945160]
[113.75103760 -67.59053802]
[119.14306641 -53.51848221]
[121.14391327 -38.58217239]
[119.64567566 -23.58710861]
[114.72915649 -9.34195042]
[106.65948486 3.38507652]
[95.87186432 13.90761948]
[82.94804382 21.65821075]
[87.49533844 35.95233917]
[92.04262543 50.24647141]
[96.58992004 64.54060364]
[101.13720703 78.83473206]
[103.55399323 79.10428619]
[105.92399597 79.64888000]
[108.21602631 80.46134949]
[118.54692841 69.58603668]
[114.78200531 54.62512589]
[119.72488403 40.01103973]
[131.79830933 30.40708351]
[147.14968872 28.87784195]
[160.88046265 35.91129303]
[168.60919189 49.26308823]
[167.86965942 64.67271423]
[158.89784241 77.22302246]
[144.55662537 82.90924835]
[129.42224121 79.91693878]
[119.09133911 90.79225159]
[121.06700897 102.33300018]
[116.61408997 113.16183472]
[107.09138489 119.97433472]
[106.78340912 134.97117615]
[106.47543335 149.96801758]
[119.50831604 157.97370911]
[126.73645020 171.33973694]
[126.30671692 186.42886353]
[118.43462372 199.19154358]
[105.31955719 206.25274658]
[105.01158142 221.24958801]
[104.70359802 236.24642944]
[104.39562225 251.24327087]
[115.05929565 262.59771729]
[114.53332520 277.80227661]
[103.64286804 287.89846802]
[103.33488464 302.89532471]
[118.39138031 306.61569214]
[132.24314880 313.57641602]
[144.20301819 323.42880249]
[153.67846680 335.68069458]
[160.20089722 349.72116089]
[163.44889832 364.85101318]
[163.26402283 380.31753540]
[159.65855408 395.35189819]
[152.81469727 409.20751953]
[143.07540894 421.19705200]
[130.92721558 430.72640991]
[116.97588348 437.32434082]
[101.91621399 440.66567993]
[101.91621399 455.66567993]
[101.91621399 470.66567993]
[101.91621399 485.66567993]
[101.91621399 500.66567993]
[101.91621399 515.66564941]
[101.91621399 530.66564941]
[101.91621399 545.66564941]
[101.91621399 560.66564941]
[101.91621399 575.66564941]
[101.91621399 590.66564941]
[116.52622223 594.40710449]
[129.74638367 601.66510010]
[140.74566650 611.98333740]
[148.83262634 624.71331787]
[153.49893188 639.05474854]
[154.45124817 654.10614014]
[151.62971497 668.92132568]
[145.21168518 682.56903076]
[135.60061646 694.19134521]
[123.40065765 703.05767822]
[109.37871552 708.61065674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[36 118]
[37 117]
[40 114]
[41 113]
[42 112]
[43 111]
[48 106]
[49 105]
[50 104]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
