%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUACCCCCGGGGGGGGGGAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCxxxxxxxxxxCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCACCCCCCCCCCUCAUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.11208344 349.05465698]
[65.55386353 340.70349121]
[55.46763992 329.49105835]
[48.48744583 316.12216187]
[45.05206299 301.43716431]
[45.37744141 286.35919189]
[49.44312286 271.83609009]
[56.99354553 258.78073120]
[67.55406952 248.01383972]
[80.46086884 240.21220398]
[94.90259552 235.86625671]
[94.27861786 220.87924194]
[93.65464020 205.89222717]
[93.03066254 190.90521240]
[92.40668488 175.91819763]
[91.78270721 160.93116760]
[91.15872955 145.94415283]
[90.53475189 130.95713806]
[77.59670258 123.36723328]
[64.21041107 130.13534546]
[50.82412720 136.90345764]
[37.43784332 143.67158508]
[24.05155945 150.43969727]
[19.35962486 165.53144836]
[5.33175898 172.81118774]
[-9.70955467 167.95996094]
[-16.84057045 153.85591125]
[-11.83058357 138.86672974]
[2.34806871 131.88522339]
[17.28344536 137.05340576]
[30.66972923 130.28529358]
[44.05601501 123.51718140]
[57.44229889 116.74906158]
[70.82858276 109.98094940]
[77.36175537 85.10198212]
[98.20117188 76.69983673]
[101.90733337 62.16490173]
[105.61349487 47.62996292]
[109.31965637 33.09502792]
[113.02581787 18.56009293]
[103.21245575 12.20469570]
[95.79559326 2.96693134]
[91.60226440 -8.27865219]
[91.14829254 -20.42733383]
[94.57695007 -32.25267029]
[101.63460541 -42.53029251]
[111.68702698 -50.16461945]
[123.77551270 -54.30529022]
[118.58009338 -68.37680817]
[113.38468170 -82.44833374]
[98.57157898 -79.83837128]
[83.53050995 -79.91555023]
[68.74497223 -82.67738342]
[54.69026947 -88.03509521]
[41.81819534 -95.81645203]
[30.54253578 -105.77130890]
[21.22575569 -117.57967377]
[14.16735172 -130.86193848]
[9.59422207 -145.19114685]
[7.65337467 -160.10667419]
[8.40719891 -175.12904358]
[11.83146381 -189.77534485]
[17.81609154 -203.57476807]
[26.16870308 -216.08370972]
[36.62079239 -226.90007019]
[48.83637619 -235.67613220]
[62.42276382 -242.12980652]
[76.94321442 -246.05360413]
[91.93096161 -247.32141113]
[106.90419769 -245.89247131]
[121.38160706 -241.81271362]
[134.89779663 -235.21327209]
[147.01828003 -226.30633545]
[157.35342407 -215.37817383]
[165.57099915 -202.78010559]
[171.40686035 -188.91711426]
[174.67338562 -174.23483276]
[175.26557922 -159.20523071]
[173.16441345 -144.31143188]
[168.43742371 -130.03224182]
[161.23655701 -116.82666779]
[151.79330444 -105.11920166]
[140.41122437 -95.28619385]
[127.45619965 -87.64374542]
[132.65161133 -73.57222748]
[137.84703064 -59.50070572]
[151.91854858 -54.30529022]
[165.01170349 -61.62439728]
[178.10485840 -68.94350433]
[191.19801331 -76.26261139]
[204.29116821 -83.58171082]
[190.95478821 -90.44765472]
[187.79893494 -105.11191559]
[197.13027954 -116.85610962]
[212.12835693 -117.09618378]
[221.83079529 -105.65666199]
[219.14627075 -90.89943695]
[232.92866516 -96.81940460]
[246.71104431 -102.73936462]
[260.49340820 -108.65933228]
[274.27578735 -114.57929230]
[283.65008545 -128.03494263]
[299.96502686 -126.37498474]
[306.43716431 -111.30703735]
[296.40856934 -98.33170319]
[280.19577026 -100.79691315]
[266.41339111 -94.87694550]
[252.63099670 -88.95698547]
[238.84861755 -83.03701782]
[225.06623840 -77.11705780]
[211.61027527 -70.48855591]
[198.51712036 -63.16945267]
[185.42396545 -55.85034943]
[172.33081055 -48.53124237]
[159.23765564 -41.21213531]
[165.30691528 -31.15589905]
[168.17149353 -19.91189575]
[167.66616821 -8.46250439]
[163.91650391 2.21621823]
[157.32110596 11.23774242]
[148.51095581 17.87861061]
[138.28971863 21.63621902]
[127.56075287 22.26625252]
[123.85459137 36.80118942]
[120.14842987 51.33612442]
[116.44226837 65.87106323]
[112.73610687 80.40599823]
[123.26131439 90.21642303]
[126.57025909 105.33503723]
[120.29605103 120.66654968]
[105.52177429 130.33316040]
[106.14575195 145.32017517]
[106.76972198 160.30718994]
[107.39369965 175.29421997]
[108.01767731 190.28123474]
[108.64165497 205.26824951]
[109.26563263 220.25526428]
[109.88961029 235.24227905]
[124.64261627 238.37272644]
[138.15325928 245.07447815]
[149.57223511 254.92626953]
[158.18174744 267.30880737]
[163.44059753 281.44369507]
[165.01820374 296.44241333]
[162.81539917 311.36215210]
[156.97064209 325.26504517]
[147.85136414 337.27709961]
[136.03079224 346.64324951]
[122.25198364 352.77474976]
[107.38108826 355.28613281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
[48 86]
[49 85]
[50 84]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
