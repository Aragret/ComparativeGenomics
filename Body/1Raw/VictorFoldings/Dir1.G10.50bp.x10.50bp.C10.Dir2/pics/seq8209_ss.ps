%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAGGCCUACGGGGGGGGGGCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCxxxxxxxxxxUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCCCCCCCCCCCAUACUAGGCCUAC\
) } def
/len { sequence length } bind def

/coor [
[83.82074738 403.83685303]
[69.94661713 397.98858643]
[57.59181213 389.38320923]
[47.29643631 378.39691162]
[39.51055908 365.50994873]
[34.57454681 351.28567505]
[32.70417786 336.34594727]
[33.98121643 321.34387207]
[38.34984207 306.93521118]
[45.61906815 293.74993896]
[55.47112274 282.36437988]
[67.47531128 273.27630615]
[81.10686493 266.88299561]
[95.76987457 263.46392822]
[95.46974182 248.46693420]
[95.16960907 233.46994019]
[94.86947632 218.47294617]
[94.56934357 203.47595215]
[94.26921082 188.47895813]
[93.96907806 173.48194885]
[93.66894531 158.48495483]
[93.36881256 143.48796082]
[93.06867981 128.49096680]
[77.52639008 118.83388519]
[70.73596191 101.84235382]
[75.34178162 84.13336182]
[65.22330475 73.06012726]
[55.10482788 61.98690033]
[44.98635101 50.91366577]
[32.95092010 59.88735199]
[20.08179665 67.61808777]
[6.50688171 74.02903748]
[-7.63890839 79.05648804]
[-22.21498108 82.65046692]
[-37.07646942 84.77526093]
[-52.07567215 85.40974426]
[-67.06351471 84.54762268]
[-81.89102936 82.19745636]
[-96.41086578 78.38260651]
[-110.47869873 73.14099121]
[-123.95472717 66.52468872]
[-136.70500183 58.59947586]
[-148.60281372 49.44411087]
[-159.52990723 39.14958572]
[-169.37768555 27.81821823]
[-178.04826355 15.56262493]
[-185.45549011 2.50461030]
[-191.52571106 -11.22604465]
[-196.19863892 -25.49287605]
[-199.42779541 -40.15408707]
[-201.18110657 -55.06396866]
[-201.44113159 -70.07433319]
[-200.20530701 -85.03599548]
[-197.48588562 -99.80025482]
[-193.30993652 -114.22037506]
[-187.71891785 -128.15304565]
[-180.76843262 -141.45977783]
[-172.52754211 -154.00834656]
[-163.07815552 -165.67401123]
[-152.51417542 -176.34082031]
[-140.94061279 -185.90280151]
[-128.47248840 -194.26487732]
[-115.23371887 -201.34396362]
[-101.35587311 -207.06970215]
[-86.97688293 -211.38517761]
[-72.23966217 -214.24751282]
[-57.29067612 -215.62823486]
[-42.27849960 -215.51365662]
[-27.35233307 -213.90487671]
[-12.66052246 -210.81791687]
[1.65091276 -206.28344727]
[15.43973541 -200.34652710]
[28.56890297 -193.06617737]
[40.90792847 -184.51473999]
[52.33417511 -174.77720642]
[62.73408508 -163.95036316]
[72.00429535 -152.14181519]
[80.05267334 -139.46891785]
[86.79921722 -126.05763245]
[92.17689514 -112.04124451]
[96.13224030 -97.55905151]
[98.62595367 -82.75499725]
[99.63324738 -67.77621460]
[99.14411163 -52.77157211]
[97.16340637 -37.89019394]
[93.71081543 -23.27998352]
[88.82065582 -9.08614826]
[82.54153442 4.55024385]
[74.93584442 17.49366379]
[66.07918549 29.61547089]
[56.05958176 40.79519272]
[66.17805481 51.86842346]
[76.29653168 62.94165421]
[86.41500854 74.01488495]
[101.54947662 70.71899414]
[116.25157928 75.59376526]
[126.41878510 87.27892303]
[141.14857483 84.44461823]
[155.87837219 81.61031342]
[164.75238037 68.80837250]
[179.73085022 66.14381409]
[191.88085938 74.68272400]
[206.61065674 71.84841919]
[221.34043884 69.01411438]
[236.07023621 66.17980957]
[238.75120544 51.24071121]
[246.65110779 38.28092575]
[258.70153809 29.05316544]
[273.27276611 24.80540657]
[288.39419556 26.11212540]
[302.02072144 32.79660034]
[312.30947876 43.95480728]
[317.86901855 58.07769012]
[317.94747925 73.25524902]
[312.53417969 87.43483734]
[302.36129761 98.69879150]
[288.80459595 105.52375031]
[273.69747925 106.98668671]
[259.08312988 102.88976288]
[246.93795776 93.78704834]
[238.90454102 80.90960693]
[224.17474365 83.74390411]
[209.44496155 86.57820892]
[194.71516418 89.41251373]
[186.60153198 101.85054016]
[171.70381165 104.93476105]
[158.71267700 96.34010315]
[143.98287964 99.17440796]
[129.25308228 102.00871277]
[127.29019928 110.72487640]
[122.79360962 118.44531250]
[116.18077850 124.45323181]
[108.06568146 128.19082642]
[108.36581421 143.18782043]
[108.66594696 158.18482971]
[108.96607971 173.18182373]
[109.26620483 188.17881775]
[109.56633759 203.17581177]
[109.86647034 218.17280579]
[110.16660309 233.16981506]
[110.46673584 248.16680908]
[110.76686859 263.16381836]
[125.55493164 265.99346924]
[139.43136597 271.83627319]
[151.78955078 280.43676758]
[162.08924866 291.41903687]
[169.88018799 304.30291748]
[174.82180786 318.52523804]
[176.69804382 333.46423340]
[175.42691040 348.46682739]
[171.06394958 362.87719727]
[163.79991150 376.06533813]
[153.95234680 387.45477295]
[141.95172119 396.54754639]
[128.32269287 402.94622803]
[113.66103363 406.37106323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[26 94]
[27 93]
[28 92]
[29 91]
[97 129]
[98 128]
[99 127]
[102 124]
[103 123]
[104 122]
[105 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
