%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUCAAAGGGGGGGGGGAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCxxxxxxxxxxUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCCCCCCCCCCCUUUUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[21.80693245 472.95983887]
[8.58673573 465.68734741]
[-2.30006838 455.24035645]
[-10.11119843 442.33111572]
[-14.31408024 427.83978271]
[-14.62215233 412.75445557]
[-11.01441097 398.10363770]
[-3.73683810 384.88623047]
[6.71436977 374.00347900]
[19.62663078 366.19732666]
[34.11956787 362.00003052]
[33.80751038 347.00329590]
[33.49545670 332.00653076]
[33.18339920 317.00976562]
[32.87134171 302.01303101]
[32.55928802 287.01626587]
[32.24723053 272.01953125]
[31.93517494 257.02276611]
[31.62311745 242.02601624]
[31.31106186 227.02925110]
[28.29603577 225.58534241]
[25.56320953 223.66000366]
[23.18873596 221.30688477]
[8.96195602 226.06069946]
[-5.26482296 230.81451416]
[-8.96268845 245.79214478]
[-20.18673706 256.37631226]
[-35.35541534 259.18960571]
[-49.62845612 253.33436584]
[-58.45137787 240.67895508]
[-59.00882339 225.26165771]
[-51.12291336 212.00210571]
[-37.31001282 205.13134766]
[-21.97776413 206.84182739]
[-10.01863766 216.58773804]
[4.20814133 211.83392334]
[18.43492126 207.08010864]
[24.04778099 193.40737915]
[37.87874603 186.93138123]
[42.78029633 172.75482178]
[47.68184662 158.57826233]
[52.58339691 144.40170288]
[57.48495102 130.22514343]
[62.38650131 116.04859161]
[57.63268661 101.82180786]
[45.19324493 93.43966675]
[32.75380325 85.05752563]
[20.31436539 76.67538452]
[7.87492418 68.29323578]
[-4.56451607 59.91109467]
[-21.07859802 56.07424164]
[-21.96324348 39.14339066]
[-5.93895006 33.60639191]
[3.81762719 47.47165680]
[16.25706673 55.85379791]
[28.69650841 64.23593903]
[41.13594818 72.61808777]
[53.57538986 81.00022888]
[66.01483154 89.38237000]
[72.63612366 85.85980225]
[65.59098816 72.61721802]
[54.79861069 62.19970322]
[61.37139893 48.71643448]
[76.22582245 50.80115509]
[78.83357239 65.57208252]
[85.87870789 78.81466675]
[92.50000000 75.29209900]
[92.50000000 60.29210281]
[92.50000000 45.29210281]
[78.72612762 38.71613693]
[69.17620850 26.80976677]
[65.74636841 11.93700790]
[69.11760712 -2.94914198]
[78.62057495 -14.89302731]
[92.36843872 -21.52318192]
[107.63156128 -21.52318192]
[121.37942505 -14.89302731]
[130.88238525 -2.94914198]
[134.25363159 11.93700790]
[130.82379150 26.80976677]
[121.27387238 38.71613693]
[107.50000000 45.29210281]
[107.50000000 60.29210281]
[107.50000000 75.29209900]
[121.40255737 80.92405701]
[131.84236145 70.15325165]
[142.28218079 59.38244247]
[152.72200012 48.61163330]
[156.77093506 33.31729889]
[171.18476868 29.56349754]
[181.62457275 18.79268837]
[182.81295776 2.79371047]
[196.14311218 -6.13301563]
[211.38929749 -1.13966882]
[216.85592651 13.94328213]
[208.34948730 27.54548836]
[192.39538574 29.23250198]
[181.95556641 40.00331116]
[178.65335083 54.52724075]
[163.49279785 59.05144501]
[153.05299377 69.82225037]
[142.61317444 80.59306335]
[132.17337036 91.36386871]
[138.37876892 105.02011108]
[153.35848999 104.24026489]
[166.73773193 95.79596710]
[179.85005188 102.86111450]
[194.82977295 102.08126831]
[204.09994507 89.48770142]
[219.30841064 85.84947968]
[233.27418518 92.88445282]
[239.40307617 107.27093506]
[234.80119324 122.21605682]
[221.64140320 130.66319275]
[206.13737488 128.62387085]
[195.60961914 117.06098175]
[180.62989807 117.84082794]
[168.32209778 126.22934723]
[154.13833618 119.21997833]
[139.15861511 119.99982452]
[117.37772369 135.79701233]
[93.10929871 134.94088745]
[76.56305695 120.95014191]
[71.66150665 135.12669373]
[66.75995636 149.30325317]
[61.85840607 163.47981262]
[56.95685577 177.65637207]
[52.05530548 191.83293152]
[58.91612244 211.26515198]
[46.30781555 226.71719360]
[46.61987305 241.71395874]
[46.93192673 256.71069336]
[47.24398422 271.70745850]
[47.55604172 286.70422363]
[47.86809540 301.70095825]
[48.18015289 316.69772339]
[48.49221039 331.69448853]
[48.80426407 346.69122314]
[49.11632156 361.68798828]
[63.77131271 365.27874756]
[76.99712372 372.54101562]
[87.89199066 382.97961426]
[95.71308899 395.88281250]
[99.92716217 410.37088013]
[100.24687958 425.45596313]
[96.65045166 440.10958862]
[89.38308716 453.33258057]
[78.94029236 464.22341919]
[66.03405762 472.03955078]
[51.54436874 476.24801636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 37]
[24 36]
[25 35]
[39 128]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[67 84]
[68 83]
[69 82]
[85 103]
[86 102]
[87 101]
[88 100]
[90 98]
[91 97]
[104 120]
[105 119]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
