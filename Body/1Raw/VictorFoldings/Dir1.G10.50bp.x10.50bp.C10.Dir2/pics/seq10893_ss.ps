%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCCAGGGGGGGGGGGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUxxxxxxxxxxCGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[82.85790253 339.37805176]
[69.63770294 332.10556030]
[58.75090027 321.65856934]
[50.93976974 308.74932861]
[46.73688889 294.25799561]
[46.42881393 279.17266846]
[50.03655624 264.52185059]
[57.31412888 251.30444336]
[67.76533508 240.42167664]
[80.67759705 232.61553955]
[95.17053223 228.41824341]
[94.85848236 213.42149353]
[94.54642487 198.42474365]
[94.23436737 183.42799377]
[93.92230988 168.43122864]
[93.61025238 153.43447876]
[93.29819489 138.43772888]
[92.98614502 123.44097137]
[92.67408752 108.44422150]
[92.20604706 93.45152283]
[91.58206940 78.46450806]
[90.95809174 63.47749329]
[90.33411407 48.49047470]
[75.33216095 48.20847321]
[60.37459946 47.02118301]
[45.51602173 44.93294525]
[30.81063461 41.95137405]
[16.31210136 38.08734894]
[2.07332420 33.35497284]
[-11.85373974 27.77151489]
[-25.41827393 21.35734367]
[-38.57077789 14.13586617]
[-51.26326752 6.13343334]
[-63.44942093 -2.62075520]
[-75.08477020 -12.09475517]
[-86.12686920 -22.25399780]
[-96.53542328 -33.06141281]
[-106.27244568 -44.47756577]
[-115.30241394 -56.46079636]
[-123.59237671 -68.96738434]
[-131.11207581 -81.95169067]
[-137.83409119 -95.36633301]
[-143.73387146 -109.16237640]
[-148.78991699 -123.28945923]
[-152.98374939 -137.69606018]
[-156.30007935 -152.32957458]
[-158.72682190 -167.13664246]
[-160.25509644 -182.06321716]
[-160.87933350 -197.05482483]
[-160.59725952 -212.05677795]
[-159.40989685 -227.01432800]
[-157.32159424 -241.87289429]
[-154.33995056 -256.57827759]
[-150.47586060 -271.07678223]
[-145.74342346 -285.31555176]
[-140.15989685 -299.24258423]
[-133.74565125 -312.80709839]
[-126.52411652 -325.95956421]
[-118.52162933 -338.65200806]
[-109.76737976 -350.83813477]
[-100.29332733 -362.47341919]
[-90.13403320 -373.51547241]
[-79.32656860 -383.92398071]
[-67.91037750 -393.66094971]
[-55.92710114 -402.69085693]
[-43.42047501 -410.98077393]
[-30.43613434 -418.50042725]
[-17.02145767 -425.22235107]
[-3.22539234 -431.12207031]
[10.90172005 -436.17803955]
[25.30833054 -440.37182617]
[39.94187164 -443.68807983]
[54.74894714 -446.11474609]
[69.67552185 -447.64294434]
[84.66714478 -448.26712036]
[99.66909027 -447.98498535]
[114.62664032 -446.79754639]
[129.48519897 -444.70916748]
[144.19055176 -441.72747803]
[158.68905640 -437.86331177]
[172.92779541 -433.13079834]
[186.85479736 -427.54721069]
[200.41928101 -421.13293457]
[213.57171631 -413.91131592]
[226.26412964 -405.90878296]
[238.45019531 -397.15447998]
[250.08546448 -387.68035889]
[261.12747192 -377.52102661]
[271.53591919 -366.71350098]
[281.27282715 -355.29727173]
[290.30270386 -343.31393433]
[298.59252930 -330.80728149]
[306.11212158 -317.82290649]
[312.83401489 -304.40820312]
[318.73367310 -290.61212158]
[323.78958130 -276.48498535]
[327.98327637 -262.07833862]
[331.29946899 -247.44477844]
[333.72607422 -232.63769531]
[335.25421143 -217.71112061]
[335.87829590 -202.71949768]
[335.59609985 -187.71754456]
[334.40859985 -172.76000977]
[332.32015991 -157.90145874]
[329.33837891 -143.19610596]
[325.47415161 -128.69763184]
[320.74157715 -114.45891571]
[315.15792847 -100.53192902]
[308.74356079 -86.96749115]
[301.52191162 -73.81507874]
[293.51928711 -61.12270737]
[284.76492310 -48.93667603]
[275.29077148 -37.30145264]
[265.13137817 -26.25949478]
[254.32382202 -15.85109425]
[242.90753174 -6.11422968]
[230.92416382 2.91557026]
[218.41746521 11.20535660]
[205.43305969 18.72488022]
[192.01831055 25.44670296]
[178.22219849 31.34629822]
[164.09503174 36.40213776]
[149.68838501 40.59577560]
[135.05482483 43.91190720]
[120.24771881 46.33843231]
[105.32112885 47.86650085]
[105.94510651 62.85351562]
[106.56908417 77.84053040]
[107.19306183 92.82754517]
[110.66732025 100.16332245]
[107.67083740 108.13216400]
[107.98289490 123.12892151]
[108.29495239 138.12567139]
[108.60700989 153.12242126]
[108.91906738 168.11918640]
[109.23111725 183.11593628]
[109.54317474 198.11268616]
[109.85523224 213.10943604]
[110.16728973 228.10620117]
[124.82228088 231.69696045]
[138.04809570 238.95921326]
[148.94296265 249.39781189]
[156.76405334 262.30102539]
[160.97811890 276.78909302]
[161.29785156 291.87417603]
[157.70141602 306.52780151]
[150.43405151 319.75079346]
[139.99125671 330.64163208]
[127.08502960 338.45776367]
[112.59533691 342.66622925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
