%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAACGGGGGGGGGGCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGxxxxxxxxxxUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAACCCCCCCCCCUACGCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[11.05571270 595.59936523]
[-2.79022622 589.58337402]
[-14.49888802 580.05395508]
[-23.20141220 567.71826172]
[-28.25201416 553.49176025]
[-29.27590561 538.43005371]
[-26.19710732 523.65093994]
[-19.24408531 510.25097656]
[-8.93280029 499.22463989]
[3.97158051 491.39013672]
[18.51146698 487.32882690]
[18.51146698 472.32882690]
[18.51146698 457.32882690]
[18.51146698 442.32882690]
[18.51146698 427.32882690]
[18.51146698 412.32882690]
[18.51146698 397.32882690]
[18.51146698 382.32882690]
[18.51146698 367.32882690]
[18.51146698 352.32882690]
[4.68611193 346.69067383]
[-5.95616245 336.16036987]
[-11.77173615 322.32043457]
[-11.84569740 307.26779175]
[-6.13563538 293.29605103]
[4.51715136 282.54611206]
[18.51146698 276.67800903]
[10.71114635 289.49029541]
[-0.32893285 299.64492798]
[-13.74719238 306.34942627]
[-28.49645996 309.08056641]
[-43.42568970 307.62521362]
[-57.36979294 302.09692383]
[-69.24055481 292.92712402]
[-78.11157990 280.83148193]
[-83.29056549 266.75390625]
[-84.37332916 251.79302979]
[-81.27537537 237.11642456]
[-74.23847198 223.86946106]
[-63.81179047 213.08595276]
[-50.80903244 205.60743713]
[-36.24494171 202.01754761]
[-21.25611687 202.59643555]
[-7.01229715 207.29895020]
[5.37491751 215.75808716]
[14.93881893 227.31367493]
[20.93303108 241.06393433]
[22.88973618 255.93846130]
[28.95274925 242.21841431]
[35.01576233 228.49835205]
[41.07877350 214.77830505]
[47.14178848 201.05825806]
[53.20479965 187.33819580]
[44.30636215 175.39318848]
[42.57012177 160.49884033]
[48.56182861 146.64366150]
[60.76424789 137.58840942]
[75.95993805 135.84536743]
[82.02294922 122.12531281]
[66.04739380 98.72116852]
[77.49919128 67.60163879]
[70.87068939 54.14567184]
[56.94586563 45.48361206]
[57.75537491 29.10445786]
[72.46646118 21.85767746]
[85.94562531 31.19813538]
[84.32665253 47.51717377]
[90.95515442 60.97313690]
[98.36403656 62.13869095]
[98.99811554 47.15209961]
[99.63219452 32.16550827]
[100.26627350 17.17891502]
[94.08152771 3.51330161]
[98.40361786 -10.85052586]
[111.10260010 -18.83400536]
[125.92034912 -16.50284386]
[135.55461121 -5.00584650]
[135.25758362 9.99121284]
[125.17578125 21.09763527]
[121.17778778 35.55502319]
[117.17978668 50.01240921]
[113.18179321 64.46979523]
[120.59066772 65.63534546]
[131.03048706 54.86453629]
[141.47029114 44.09373093]
[151.91011047 33.32292175]
[162.34991455 22.55211258]
[172.44856262 11.46079731]
[182.19622803 0.05977608]
[191.94387817 -11.34124470]
[194.40716553 -27.55433273]
[209.77622986 -33.27480316]
[222.24070740 -22.61792374]
[218.97819519 -6.54658031]
[203.34489441 -1.59359276]
[193.59724426 9.80742836]
[183.84959412 21.20844841]
[183.78511047 24.79499626]
[181.93931580 28.52255630]
[178.26831055 31.53522301]
[173.12072754 32.99192429]
[162.68092346 43.76273346]
[152.24110413 54.53354263]
[141.80128479 65.30435181]
[131.36148071 76.07515717]
[136.04492188 88.34327698]
[136.30802917 100.94899750]
[132.46769714 112.40818024]
[125.30455780 121.48526764]
[115.93508148 127.32611084]
[105.65023041 129.53483582]
[95.74300385 128.18832397]
[89.67999268 141.90838623]
[98.62155151 154.31788635]
[100.14109802 169.43699646]
[93.93016815 183.19529724]
[81.74806213 191.93899536]
[66.92485809 193.40121460]
[60.86184311 207.12126160]
[54.79882812 220.84132385]
[48.73581696 234.56137085]
[42.67280197 248.28141785]
[36.60979080 262.00146484]
[33.51146698 276.67800903]
[47.50578308 282.54611206]
[58.15856934 293.29605103]
[63.86863327 307.26779175]
[63.79467010 322.32043457]
[57.97909546 336.16036987]
[47.33682251 346.69067383]
[33.51146698 352.32882690]
[33.51146698 367.32882690]
[33.51146698 382.32882690]
[33.51146698 397.32882690]
[33.51146698 412.32882690]
[33.51146698 427.32882690]
[33.51146698 442.32882690]
[33.51146698 457.32882690]
[33.51146698 472.32882690]
[33.51146698 487.32882690]
[48.05135345 491.39013672]
[60.95573425 499.22463989]
[71.26702118 510.25097656]
[78.22003937 523.65093994]
[81.29884338 538.43005371]
[80.27494812 553.49176025]
[75.22434998 567.71826172]
[66.52182007 580.05395508]
[54.81315994 589.58337402]
[40.96722412 595.59936523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 124]
[48 123]
[49 122]
[50 121]
[51 120]
[52 119]
[53 118]
[58 113]
[59 112]
[61 68]
[62 67]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
