%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUCGAAACCGGGGGGGGGGAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAAxxxxxxxxxxUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACCCCCCCCCCCAUCAUCGAAACC\
) } def
/len { sequence length } bind def

/coor [
[83.88554382 401.38748169]
[70.18338776 395.12658691]
[58.21827316 385.97323608]
[48.59035873 374.38656616]
[41.78258133 360.94775391]
[38.13641357 346.33087158]
[37.83474350 331.26910400]
[40.89270782 316.51794434]
[47.15691757 302.81729126]
[56.31316376 290.85440063]
[67.90216827 281.22930908]
[81.34264374 274.42477417]
[95.96040344 270.78216553]
[95.65640259 255.78523254]
[95.35239410 240.78831482]
[95.04839325 225.79139709]
[94.74438477 210.79447937]
[94.44038391 195.79756165]
[94.13637543 180.80064392]
[93.83237457 165.80372620]
[93.52836609 150.80680847]
[93.22436523 135.80987549]
[85.06958008 135.43479919]
[76.80454254 133.14892578]
[68.88475800 128.89831543]
[61.78118134 122.73843384]
[55.95394897 114.83764648]
[40.97320175 115.59738159]
[37.05073929 130.20797729]
[28.80363655 142.89027405]
[17.03985786 152.40177917]
[2.91189814 157.81065369]
[-12.19612885 158.58699036]
[-26.80409241 154.65473938]
[-39.48085403 146.39913940]
[-48.98447037 134.62899780]
[-54.38388062 120.49741364]
[-55.15009689 105.38887024]
[-51.20806122 90.78353882]
[-42.94396973 78.11231232]
[-31.16745377 68.61658478]
[-17.03225708 63.22665024]
[-1.92320418 62.47055435]
[12.67947674 66.42237854]
[25.34516144 74.69495392]
[34.83299637 86.47782898]
[40.21346283 100.61663818]
[55.19421005 99.85690308]
[57.72759247 92.79772186]
[48.03388596 81.35079956]
[62.79435730 78.67936707]
[65.32773590 71.62019348]
[54.24863052 61.50815201]
[43.16952133 51.39611053]
[27.14209747 50.68815994]
[17.81954575 37.63175964]
[22.35333061 22.24266243]
[37.26552200 16.32606506]
[51.11676025 24.42067719]
[53.28156281 40.31700134]
[64.36067200 50.42904282]
[75.43978119 60.54108429]
[102.19451141 56.18138885]
[125.19908142 67.31764984]
[132.21131897 54.05760956]
[139.22354126 40.79757309]
[146.23577881 27.53753281]
[150.58094788 13.18067265]
[152.09848022 -1.74236715]
[153.61599731 -16.66540718]
[155.13352966 -31.58844757]
[156.65104675 -46.51148605]
[143.11222839 -53.37186050]
[132.96881104 -64.66236877]
[127.59262085 -78.85606384]
[127.71073914 -94.03336334]
[133.30718994 -108.14167023]
[143.62509155 -119.27294159]
[157.26905823 -125.92176819]
[172.39382935 -127.18894958]
[186.95390320 -122.90311432]
[198.98017883 -113.64387512]
[206.84616089 -100.66348267]
[209.48806763 -85.71742249]
[206.54859924 -70.82702637]
[198.42529297 -58.00609589]
[186.21675110 -48.98855972]
[171.57408142 -44.99396133]
[170.05656433 -30.07092285]
[168.53903198 -15.14788246]
[167.02151489 -0.22484237]
[165.50398254 14.69819736]
[178.61918640 21.97772598]
[190.48081970 12.79613686]
[202.34246826 3.61454749]
[214.20410156 -5.56704235]
[226.06573486 -14.74863243]
[229.51078796 -30.41742897]
[243.97206116 -37.36371613]
[258.35610962 -30.25889397]
[261.62872314 -14.55317688]
[251.27943420 -2.29464555]
[235.24732971 -2.88699603]
[223.38568115 6.29459381]
[211.52404785 15.47618389]
[199.66241455 24.65777397]
[187.80078125 33.83936310]
[181.49241638 37.24030304]
[175.08259583 38.83124542]
[169.03007507 38.74126816]
[163.73107910 37.20667648]
[159.49581909 34.54976273]
[152.48358154 47.80980301]
[145.47135925 61.06983948]
[138.45912170 74.32987976]
[144.65261841 87.99153137]
[159.24699402 91.45624542]
[173.84135437 94.92095947]
[186.27929688 85.44300842]
[201.89712524 86.22906494]
[213.32055664 96.90798187]
[215.15580750 112.43749237]
[206.53633118 125.48504639]
[191.53198242 129.88998413]
[177.22734070 123.57242584]
[170.37664795 109.51533508]
[155.78227234 106.05062103]
[141.18789673 102.58590698]
[137.16279602 114.96582794]
[129.64483643 125.12089539]
[119.60517120 132.14419556]
[108.22128296 135.50587463]
[108.52529144 150.50279236]
[108.82929230 165.49971008]
[109.13330078 180.49662781]
[109.43730164 195.49356079]
[109.74130249 210.49047852]
[110.04531097 225.48739624]
[110.34931183 240.48431396]
[110.65332031 255.48123169]
[110.95732117 270.47814941]
[125.71070099 273.52539062]
[139.41587830 279.77963257]
[151.38543701 288.92718506]
[161.01896667 300.50918579]
[167.83325195 313.94470215]
[171.48649597 328.55981445]
[171.79547119 343.62142944]
[168.74465942 358.37408447]
[162.48707581 372.07775879]
[153.33663940 384.04507446]
[141.75228882 393.67581177]
[128.31512451 400.48684692]
[113.69912720 404.13653564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[27 48]
[28 47]
[52 62]
[53 61]
[54 60]
[64 115]
[65 114]
[66 113]
[67 112]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
