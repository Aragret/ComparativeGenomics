%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCAACCAGGGGGGGGGGCCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAxxxxxxxxxxGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACCCCCCCCCCCACACUAACCA\
) } def
/len { sequence length } bind def

/coor [
[80.61584473 580.35583496]
[66.76990509 574.33984375]
[55.06124496 564.81042480]
[46.35871887 552.47473145]
[41.30811691 538.24822998]
[40.28422546 523.18652344]
[43.36302567 508.40737915]
[50.31604767 495.00744629]
[60.62733078 483.98114014]
[73.53171539 476.14660645]
[88.07160187 472.08529663]
[88.07160187 457.08529663]
[88.07160187 442.08529663]
[88.07160187 427.08529663]
[88.07160187 412.08529663]
[88.07160187 397.08529663]
[88.07160187 382.08529663]
[88.07160187 367.08529663]
[88.07160187 352.08529663]
[88.07160187 337.08529663]
[74.43439484 334.56192017]
[61.45214462 329.67260742]
[49.53196716 322.56930542]
[39.04792023 313.47338867]
[30.32927895 302.66876221]
[23.65016174 290.49307251]
[19.22094536 277.32705688]
[17.18161583 263.58273315]
[17.59735298 249.69041443]
[20.45644951 236.08534241]
[25.67063141 223.19392395]
[33.07778931 211.42047119]
[42.44701385 201.13449097]
[53.48578644 192.65905762]
[65.84913635 186.26069641]
[79.15039062 182.14100647]
[92.97328949 180.43029785]
[93.90892029 165.45950317]
[94.84454346 150.48870850]
[95.78017426 135.51791382]
[96.71580505 120.54712677]
[86.76139832 131.76808167]
[71.84873199 130.15177917]
[64.52959442 117.05864716]
[70.96440125 103.50898743]
[85.73714447 100.90739441]
[72.49456024 93.86225891]
[56.13294983 94.97124481]
[47.21762848 81.20719147]
[54.91990662 66.72938538]
[71.31634521 66.43135071]
[79.53969574 80.61967468]
[92.78227997 87.66481018]
[99.81803894 85.06710052]
[102.35413361 70.28305054]
[113.88955688 79.87168884]
[120.92531586 77.27397919]
[126.41234589 63.31358719]
[131.89938354 49.35319901]
[137.38641357 35.39280701]
[142.87344360 21.43241882]
[148.36047363 7.47202873]
[148.59561157 -1.72560990]
[154.10960388 -6.71976805]
[159.88587952 -20.56298637]
[165.66215515 -34.40620422]
[171.43841553 -48.24942017]
[158.73777771 -56.29936981]
[147.58038330 -66.38006592]
[138.28726196 -78.20148468]
[131.12577820 -91.42348480]
[126.30200195 -105.66564178]
[123.95471954 -120.51819611]
[124.15145874 -135.55380249]
[126.88657379 -150.33984375]
[132.08134460 -164.45091248]
[139.58633423 -177.48100281]
[149.18559265 -189.05520630]
[160.60293579 -198.84051514]
[173.50987244 -206.55538940]
[187.53501892 -211.97784424]
[202.27487183 -214.95187378]
[217.30531311 -215.39190674]
[232.19390869 -213.28529358]
[246.51226807 -208.69262695]
[259.84844971 -201.74606323]
[271.81869507 -192.64546204]
[282.07864380 -181.65266418]
[290.33306885 -169.08395386]
[296.34448242 -155.30096436]
[299.93991089 -140.70024109]
[301.01596069 -125.70191193]
[299.54159546 -110.73747253]
[295.55929565 -96.23750305]
[289.18359375 -82.61917877]
[280.59796143 -70.27434540]
[270.04943848 -59.55817032]
[257.84149170 -50.77899170]
[244.32537842 -44.18939590]
[229.88998413 -39.97898483]
[214.95065308 -38.26889801]
[199.93722534 -39.10833740]
[185.28163147 -42.47314835]
[179.50537109 -28.62993050]
[173.72909546 -14.78671360]
[167.95281982 -0.94349569]
[162.32086182 12.95906067]
[156.83383179 26.91945076]
[151.34680176 40.87984085]
[145.85977173 54.84022903]
[140.37274170 68.80062103]
[134.88571167 82.76100922]
[111.68659210 121.48275757]
[110.75096893 136.45355225]
[109.81533813 151.42433167]
[108.87970734 166.39512634]
[107.94407654 181.36592102]
[123.59296417 185.57176208]
[138.04397583 192.89120483]
[150.68534851 203.01202393]
[160.98246765 215.50337219]
[168.50041199 229.83428955]
[172.92230225 245.39611816]
[174.06274414 261.52847290]
[171.87554932 277.54718018]
[166.45556641 292.77334595]
[158.03465271 306.56213379]
[146.97167969 318.33001709]
[133.73730469 327.57952881]
[118.89387512 333.92022705]
[103.07160187 337.08529663]
[103.07160187 352.08529663]
[103.07160187 367.08529663]
[103.07160187 382.08529663]
[103.07160187 397.08529663]
[103.07160187 412.08529663]
[103.07160187 427.08529663]
[103.07160187 442.08529663]
[103.07160187 457.08529663]
[103.07160187 472.08529663]
[117.61148834 476.14660645]
[130.51586914 483.98114014]
[140.82714844 495.00744629]
[147.78016663 508.40737915]
[150.85897827 523.18652344]
[149.83508301 538.24822998]
[144.78448486 552.47473145]
[136.08195496 564.81042480]
[124.37329102 574.33984375]
[110.52735138 580.35583496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[46 53]
[47 52]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[62 107]
[64 106]
[65 105]
[66 104]
[67 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
