%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCAUAACGGGGGGGGGGAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAxxxxxxxxxxGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCCCCCCCCCCCACAUCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[14.50626564 217.80915833]
[6.97478104 211.95750427]
[-0.15732841 205.62521362]
[-6.85944271 198.83943176]
[-13.10278797 191.62933350]
[-18.86056137 184.02583313]
[-24.10804176 176.06161499]
[-28.82270432 167.77082825]
[-32.98430252 159.18910217]
[-36.57497406 150.35325623]
[-50.89757156 154.81007385]
[-65.22016907 159.26689148]
[-79.54277039 163.72370911]
[-93.86536407 168.18052673]
[-108.18796539 172.63734436]
[-122.46342468 177.24290466]
[-136.69020081 181.99671936]
[-150.91697693 186.75053406]
[-165.14375305 191.50434875]
[-179.37054443 196.25816345]
[-179.00283813 211.36962891]
[-183.10723877 225.91764832]
[-191.31881714 238.60865784]
[-202.90736389 248.31416321]
[-216.84246826 254.17114258]
[-231.88502502 255.65882874]
[-246.69743347 252.64491272]
[-259.96261597 245.39739990]
[-270.50103760 234.56072998]
[-277.37561035 221.09849548]
[-279.97503662 206.20774841]
[-278.06823730 191.21257019]
[-271.82470703 177.44630432]
[-261.79965210 166.13305664]
[-248.88447571 158.27879333]
[-234.22758484 154.58189392]
[-219.13227844 155.37109375]
[-204.94079590 160.57621765]
[-192.91503906 169.73442078]
[-184.12435913 182.03138733]
[-169.89756775 177.27757263]
[-155.67079163 172.52375793]
[-141.44401550 167.76994324]
[-127.21723938 163.01612854]
[-121.83515167 157.88009644]
[-112.64477539 158.31474304]
[-98.32218170 153.85792542]
[-83.99958038 149.40110779]
[-69.67698669 144.94429016]
[-55.35438919 140.48747253]
[-41.03179169 136.03067017]
[-45.51324081 96.24875641]
[-38.98799896 56.75059128]
[-21.94963455 20.52383232]
[4.31305599 -9.69130993]
[-4.95189333 -21.48794937]
[-14.21684265 -33.28459167]
[-29.63056946 -38.88361359]
[-32.22171021 -55.07675934]
[-19.32472229 -65.20590973]
[-4.20691919 -58.85106277]
[-2.42020273 -42.54953766]
[6.84474659 -30.75289917]
[16.10969543 -18.95625877]
[22.89225960 -23.46080780]
[29.91608047 -27.57906914]
[37.15918350 -31.29815865]
[44.59889984 -34.60643768]
[52.21195984 -37.49355698]
[59.97454071 -39.95048141]
[67.86235809 -41.96952820]
[75.85072327 -43.54437256]
[83.91464996 -44.67009354]
[92.02890015 -45.34316635]
[100.16809082 -45.56148911]
[108.30676270 -45.32437134]
[116.41944122 -44.63255692]
[124.48074341 -43.48821640]
[132.46545410 -41.89492416]
[140.34857178 -39.85766602]
[148.10546875 -37.38282013]
[155.71183777 -34.47812653]
[163.14389038 -31.15267181]
[170.37838745 -27.41686440]
[177.39266968 -23.28239250]
[184.16482544 -18.76218987]
[190.67362976 -13.87040234]
[196.89872742 -8.62233353]
[202.82064819 -3.03440404]
[208.42086792 2.87590218]
[213.68185425 9.09009266]
[218.58714294 15.58872509]
[223.12139893 22.35146523]
[227.27043152 29.35715485]
[231.02125549 36.58387375]
[234.36213684 44.00901031]
[248.48693848 38.96025467]
[262.61175537 33.91149902]
[276.73654175 28.86274147]
[281.37145996 24.00218773]
[286.93414307 22.48959351]
[291.55526733 23.91113281]
[305.87786865 19.45431709]
[314.58200073 5.97776127]
[330.55905151 4.52387142]
[341.55276489 16.20794678]
[339.12973022 32.06696320]
[325.14868164 39.93524551]
[310.33468628 33.77691269]
[296.01208496 38.23373032]
[281.78530884 42.98754501]
[267.66049194 48.03630066]
[253.53569031 53.08505630]
[239.41088867 58.13381195]
[241.85333252 67.35333252]
[243.68678284 76.71300507]
[244.90335083 86.17265320]
[245.49781799 95.69166565]
[245.46762085 105.22917938]
[244.81292725 114.74423981]
[243.53649902 124.19599915]
[241.64385986 133.54388428]
[239.14311218 142.74775696]
[236.04498291 151.76809692]
[232.36279297 160.56619263]
[228.11235046 169.10426331]
[223.31188965 177.34567261]
[217.98202515 185.25500488]
[212.14564514 192.79832458]
[205.82780457 199.94323730]
[199.05561829 206.65907288]
[191.85816956 212.91700745]
[184.26635742 218.69017029]
[176.31275940 223.95376587]
[168.03155518 228.68521118]
[159.45826721 232.86418152]
[150.62971497 236.47273254]
[141.58380127 239.49539185]
[132.35935974 241.91915894]
[122.99598694 243.73364258]
[113.53389740 244.93104553]
[104.01369476 245.50624084]
[94.47626495 245.45674133]
[84.96255493 244.78277588]
[75.51339722 243.48721313]
[66.16936493 241.57563782]
[56.97057724 239.05625916]
[47.95652390 235.93988037]
[39.16590118 232.23988342]
[30.63644981 227.97215271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[55 64]
[56 63]
[57 62]
[96 114]
[97 113]
[98 112]
[99 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
