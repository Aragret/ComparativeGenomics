%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACUCAAUGGGGGGGGGGUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCxxxxxxxxxxCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGCCCCCCCCCCUUUACUCAAU\
) } def
/len { sequence length } bind def

/coor [
[75.51558685 403.52685547]
[61.66965103 397.51083374]
[49.96098709 387.98141479]
[41.25846481 375.64575195]
[36.20786285 361.41921997]
[35.18397141 346.35754395]
[38.26276779 331.57836914]
[45.21578979 318.17846680]
[55.52707672 307.15213013]
[68.43145752 299.31759644]
[82.97134399 295.25628662]
[82.97134399 280.25628662]
[82.97134399 265.25628662]
[82.97134399 250.25630188]
[82.97134399 235.25630188]
[82.97134399 220.25630188]
[82.97134399 205.25630188]
[82.97134399 190.25630188]
[82.97134399 175.25630188]
[82.97134399 160.25630188]
[82.97134399 145.25630188]
[82.97134399 130.25630188]
[79.86731720 144.93162537]
[67.72381592 153.73703003]
[52.81055069 152.12628174]
[42.82727432 140.93101501]
[42.92837524 125.93135071]
[53.06165314 114.87166595]
[67.99725342 113.46264648]
[53.09535217 111.74996185]
[38.19344711 110.03726959]
[23.29154587 108.32457733]
[8.38964367 106.61189270]
[-6.51225853 104.89920044]
[-21.41416168 103.18650818]
[-38.09491348 110.91518402]
[-51.79729080 99.99526215]
[-66.73159790 98.59295654]
[-83.06661987 103.13206482]
[-91.95031738 88.69197083]
[-80.53380585 76.15803528]
[-65.32929993 83.65864563]
[-50.39498901 85.06095123]
[-40.84349823 77.57253265]
[-28.35210419 78.66065979]
[-19.70147133 88.28460693]
[-4.79956913 89.99729919]
[10.10233307 91.70999146]
[25.00423622 93.42267609]
[39.90613937 95.13536835]
[54.80804062 96.84806061]
[69.70994568 98.56074524]
[78.19976044 83.34729767]
[92.42860413 76.65560150]
[106.21608734 79.26137543]
[115.23361206 67.27454376]
[124.25114441 55.28770828]
[133.26867676 43.30087662]
[142.28620911 31.31404305]
[147.33395386 1.44390738]
[152.52937317 -12.62761211]
[157.72479248 -26.69913101]
[162.92021179 -40.77064896]
[168.11561584 -54.84217072]
[168.15936279 -64.04270935]
[173.56826782 -69.15049744]
[161.61529541 -60.08813477]
[147.92131042 -53.96646500]
[133.19711304 -51.10324097]
[118.20697784 -51.64707565]
[103.72896576 -55.56974411]
[90.51458740 -62.66763687]
[79.24972534 -72.57233429]
[70.51910400 -84.76972198]
[64.77589417 -98.62668610]
[62.31819153 -113.42397308]
[63.27357101 -128.39350891]
[67.59243774 -142.75831604]
[75.05062866 -155.77275085]
[85.26100922 -166.76129150]
[97.69360352 -175.15357971]
[111.70309448 -180.51400757]
[126.56230927 -182.56433105]
[141.49995422 -181.19812012]
[155.74070740 -176.48631287]
[168.54536438 -168.67346191]
[179.24931335 -158.16510010]
[187.29693604 -145.50666809]
[192.27052307 -131.35522461]
[193.91192627 -116.44530487]
[192.13592529 -101.55081177]
[187.03384399 -87.44307709]
[198.73345947 -96.83023834]
[210.43309021 -106.21739960]
[222.13270569 -115.60456848]
[230.70297241 -130.23286438]
[247.13206482 -126.04704285]
[247.65786743 -109.10124969]
[231.51986694 -103.90493774]
[219.82025146 -94.51777649]
[208.12062073 -85.13061523]
[196.42100525 -75.74345398]
[187.52865601 -63.66346741]
[182.18713379 -49.64675522]
[176.99172974 -35.57523346]
[171.79631042 -21.50371552]
[166.60089111 -7.43219662]
[161.40547180 6.63932276]
[169.39540100 19.33425331]
[184.32969666 20.73655701]
[199.26400757 22.13885880]
[214.19831848 23.54116249]
[226.20803833 13.26778316]
[241.95783997 14.57883453]
[252.10368347 26.69649315]
[250.62619019 42.43156815]
[238.40193176 52.44871521]
[222.68336487 50.80494308]
[212.79602051 38.47547150]
[197.86170959 37.07316589]
[182.92739868 35.67086411]
[167.99308777 34.26855850]
[154.27304077 40.33157349]
[145.25550842 52.31840515]
[136.23797607 64.30523682]
[127.22045135 76.29206848]
[118.20291901 88.27890015]
[122.38467407 113.20081329]
[97.97134399 130.25630188]
[97.97134399 145.25630188]
[97.97134399 160.25630188]
[97.97134399 175.25630188]
[97.97134399 190.25630188]
[97.97134399 205.25630188]
[97.97134399 220.25630188]
[97.97134399 235.25630188]
[97.97134399 250.25630188]
[97.97134399 265.25628662]
[97.97134399 280.25628662]
[97.97134399 295.25628662]
[112.51123047 299.31759644]
[125.41561127 307.15213013]
[135.72689819 318.17846680]
[142.67991638 331.57836914]
[145.75871277 346.35754395]
[144.73481750 361.41921997]
[139.68421936 375.64575195]
[130.98170471 387.98141479]
[119.27303314 397.51083374]
[105.42710114 403.52685547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[37 43]
[38 42]
[55 127]
[56 126]
[57 125]
[58 124]
[59 123]
[60 108]
[61 107]
[62 106]
[63 105]
[64 104]
[66 103]
[92 102]
[93 101]
[94 100]
[95 99]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
