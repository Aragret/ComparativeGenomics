%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGAACACCGGGGGGGGGGUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCxxxxxxxxxxGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUCCCCCCCCCCACAAGAACACC\
) } def
/len { sequence length } bind def

/coor [
[70.14239502 382.00808716]
[56.12044907 376.45507812]
[43.92049026 367.58874512]
[34.30941772 355.96643066]
[27.89139366 342.31872559]
[25.06985664 327.50354004]
[26.02217293 312.45217896]
[30.68847847 298.11074829]
[38.77544403 285.38079834]
[49.77471924 275.06253052]
[62.99487686 267.80453491]
[77.60488892 264.06311035]
[77.60488892 249.06311035]
[77.60488892 234.06311035]
[77.60488892 219.06311035]
[77.60488892 204.06311035]
[77.60488892 189.06311035]
[77.60488892 174.06311035]
[77.60488892 159.06311035]
[77.60488892 144.06311035]
[77.60488892 129.06311035]
[67.84561920 117.67203522]
[53.02313232 115.37116241]
[40.35063171 124.42905426]
[25.35130310 121.88449097]
[16.79408264 109.74737549]
[1.97160101 107.44649506]
[-12.85088062 105.14562225]
[-27.67336273 102.84474945]
[-34.51498032 111.17068481]
[-44.13718033 115.83983612]
[-54.74904251 116.05848694]
[-64.40666962 111.85436249]
[-71.36926270 104.05918884]
[-74.41284180 94.14503479]
[-89.06556702 90.93604279]
[-103.71829224 87.72704315]
[-118.37101746 84.51805115]
[-128.65879822 95.92230988]
[-143.27534485 100.63952637]
[-158.28887939 97.40079498]
[-169.66082764 87.07731628]
[-174.33221436 72.44605255]
[-171.04643250 57.44274902]
[-160.68736267 46.10320663]
[-146.04153442 41.47771454]
[-131.04859924 44.81050110]
[-119.74158478 55.20506668]
[-115.16201782 69.86532593]
[-100.50929260 73.07431793]
[-85.85656738 76.28331757]
[-71.20384216 79.49230957]
[-55.69934082 67.78415680]
[-36.26772690 71.20995331]
[-25.37248802 88.02226257]
[-10.55000591 90.32314301]
[4.27247572 92.62401581]
[19.09495735 94.92488861]
[30.92889214 85.95306396]
[45.99377441 88.07533264]
[55.32400894 100.54867554]
[70.14649200 102.84955597]
[74.44007874 83.52136993]
[89.99851990 70.83349609]
[110.34864044 70.50701141]
[115.47894287 56.41162109]
[120.60924530 42.31623459]
[125.73954773 28.22084427]
[128.34426880 13.44872761]
[128.34426880 -1.55127203]
[128.34426880 -16.55127144]
[115.00314331 -24.16112518]
[107.26817322 -37.43010712]
[107.22003174 -52.78892136]
[114.87166595 -66.10613251]
[128.16482544 -73.79946899]
[143.52371216 -73.79946899]
[156.81687927 -66.10613251]
[164.46850586 -52.78892136]
[164.42036438 -37.43010712]
[156.68539429 -24.16112518]
[143.34426880 -16.55127144]
[143.34426880 -1.55127203]
[143.34426880 13.44872761]
[151.26609802 0.71119940]
[162.83734131 -8.83377171]
[176.84887695 -14.18881798]
[191.83665466 -14.79438019]
[206.23455811 -10.58718395]
[218.53811646 -2.00684500]
[227.46174622 10.05006409]
[232.07296753 24.32369804]
[231.88996887 39.32258224]
[226.93185425 53.47945786]
[217.71672058 65.31505585]
[205.20747375 73.59265137]
[190.71121216 77.44731140]
[175.74267578 76.47624969]
[161.86595154 70.78093719]
[150.53103638 60.95648193]
[142.92234802 48.02946472]
[139.83493042 33.35114670]
[134.70463562 47.44653702]
[129.57432556 61.54192352]
[124.44403076 75.63731384]
[132.47102356 88.30883026]
[147.40704346 89.69285583]
[162.34304810 91.07688141]
[177.27906799 92.46090698]
[192.21507263 93.84493256]
[207.18663025 94.76834869]
[222.17951965 95.23027039]
[237.17239380 95.69219971]
[251.35639954 87.46138763]
[265.43978882 95.86319733]
[264.93475342 112.25457001]
[250.36087036 119.77346039]
[236.71047974 110.68508148]
[221.71759033 110.22315979]
[206.72470093 109.76123047]
[203.88926697 111.95382690]
[199.83093262 112.84801483]
[195.18772888 111.87522888]
[190.83105469 108.78094482]
[175.89503479 107.39691925]
[160.95903015 106.01289368]
[146.02301025 104.62886810]
[131.08700562 103.24484253]
[126.64765930 115.72060394]
[117.51291656 125.12046814]
[105.42047119 129.81718445]
[92.60488892 129.06311035]
[92.60488892 144.06311035]
[92.60488892 159.06311035]
[92.60488892 174.06311035]
[92.60488892 189.06311035]
[92.60488892 204.06311035]
[92.60488892 219.06311035]
[92.60488892 234.06311035]
[92.60488892 249.06311035]
[92.60488892 264.06311035]
[107.21490479 267.80453491]
[120.43505859 275.06253052]
[131.43434143 285.38079834]
[139.52130127 298.11074829]
[144.18760681 312.45217896]
[145.13992310 327.50354004]
[142.31838989 342.31872559]
[135.90036011 355.96643066]
[126.28929138 367.58874512]
[114.08933258 376.45507812]
[100.06739044 382.00808716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 62]
[23 61]
[26 58]
[27 57]
[28 56]
[29 55]
[35 52]
[36 51]
[37 50]
[38 49]
[65 105]
[66 104]
[67 103]
[68 102]
[69 84]
[70 83]
[71 82]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
