%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACAAGUGGGGGGGGGGCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGxxxxxxxxxxAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGCCCCCCCCCCACCAAGAAGU\
) } def
/len { sequence length } bind def

/coor [
[75.58794403 387.13684082]
[61.74200439 381.12081909]
[50.03334045 371.59140015]
[41.33081818 359.25570679]
[36.28021622 345.02920532]
[35.25632477 329.96752930]
[38.33512115 315.18835449]
[45.28814316 301.78842163]
[55.59943008 290.76208496]
[68.50380707 282.92758179]
[83.04369354 278.86627197]
[83.04369354 263.86627197]
[83.04369354 248.86627197]
[83.04369354 233.86627197]
[83.04369354 218.86627197]
[83.04369354 203.86627197]
[83.04369354 188.86627197]
[83.04369354 173.86627197]
[83.04369354 158.86627197]
[83.04369354 143.86627197]
[83.04369354 128.86627197]
[75.85231018 142.03001404]
[68.66092682 155.19375610]
[65.21633911 169.79289246]
[55.85112381 181.51008606]
[42.37004089 188.08735657]
[27.37100220 188.25720215]
[13.74444199 181.98687744]
[4.11630440 170.48475647]
[0.34200957 155.96736145]
[3.14889383 141.23231506]
[11.99604893 129.11918640]
[25.17855644 121.96227264]
[40.15376282 121.14037323]
[54.37733459 116.37696838]
[68.60090637 111.61357117]
[53.83485031 108.97470856]
[39.06879807 106.33583832]
[27.18329048 116.49796295]
[11.54598522 116.59105682]
[-0.45966479 106.57115173]
[-3.16495728 91.16935730]
[4.70746422 77.65792084]
[19.44048309 72.41652679]
[34.07761765 77.92000580]
[41.70766068 91.56978607]
[56.47371674 94.20864868]
[71.23976898 96.84751129]
[85.34397888 80.39089203]
[103.54521179 80.28687286]
[111.53513336 67.59194183]
[119.52504730 54.89701080]
[127.51496124 42.20207977]
[135.50488281 29.50715065]
[143.49479675 16.81222153]
[148.24861145 2.58544254]
[149.49548340 -12.36264420]
[150.74235535 -27.31073189]
[144.17897034 -41.70630646]
[152.94744873 -53.74636841]
[154.19432068 -68.69445801]
[155.44120789 -83.64253998]
[156.68807983 -98.59062958]
[148.95018005 -108.96265411]
[150.33612061 -121.42452240]
[159.55433655 -129.31958008]
[161.11190796 -144.23849487]
[162.66949463 -159.15740967]
[164.22706604 -174.07632446]
[165.78465271 -188.99522400]
[152.26429749 -195.89192200]
[142.15122986 -207.20962524]
[136.81315613 -221.41770935]
[136.97201538 -236.59463501]
[142.60632324 -250.68786621]
[152.95408630 -261.79138184]
[166.61582947 -268.40356445]
[181.74395752 -269.63012695]
[196.29248047 -265.30523682]
[208.29383850 -256.01373291]
[216.12496948 -243.01228333]
[218.72674561 -228.05918884]
[215.74729919 -213.17672729]
[207.58959961 -200.37765503]
[195.35690308 -191.39292908]
[180.70356750 -187.43765259]
[179.14598083 -172.51873779]
[177.58840942 -157.59982300]
[176.03082275 -142.68090820]
[174.47323608 -127.76200104]
[182.48988342 -112.18209839]
[171.63616943 -97.34375763]
[170.38928223 -82.39566803]
[169.14241028 -67.44757843]
[167.89553833 -52.49949265]
[174.54811096 -39.17310715]
[165.69044495 -26.06385612]
[164.44357300 -11.11577034]
[163.19670105 3.83231711]
[172.01058960 -8.30502987]
[183.52076721 -17.92354393]
[197.03076172 -24.44122124]
[211.72309875 -27.46368599]
[226.70877075 -26.80805397]
[241.08099365 -22.51399422]
[253.97015381 -14.84133720]
[264.59631348 -4.25434351]
[272.31652832 8.60638237]
[276.66366577 22.96265411]
[277.37463379 37.94579697]
[274.40646362 52.64919662]
[267.93875122 66.18316650]
[258.36282349 77.72879791]
[246.25810242 86.58747101]
[232.35705566 92.22315979]
[217.50080872 94.29485321]
[202.58828735 92.67720795]
[188.52183533 87.46809387]
[176.15258789 78.98271179]
[166.22900391 67.73449707]
[159.35151672 54.40406799]
[155.93630981 39.79803467]
[156.18972778 24.80213737]
[148.19981384 37.49706650]
[140.20989990 50.19199753]
[132.21997070 62.88692856]
[124.23006439 75.58185577]
[116.24014282 88.27678680]
[121.40603638 111.87846375]
[98.04369354 128.86627197]
[98.04369354 143.86627197]
[98.04369354 158.86627197]
[98.04369354 173.86627197]
[98.04369354 188.86627197]
[98.04369354 203.86627197]
[98.04369354 218.86627197]
[98.04369354 233.86627197]
[98.04369354 248.86627197]
[98.04369354 263.86627197]
[98.04369354 278.86627197]
[112.58358002 282.92758179]
[125.48796082 290.76208496]
[135.79925537 301.78842163]
[142.75227356 315.18835449]
[145.83106995 329.96752930]
[144.80717468 345.02920532]
[139.75657654 359.25570679]
[131.05404663 371.59140015]
[119.34539032 381.12081909]
[105.49945068 387.13684082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[36 48]
[37 47]
[38 46]
[50 128]
[51 127]
[52 126]
[53 125]
[54 124]
[55 123]
[56 99]
[57 98]
[58 97]
[60 95]
[61 94]
[62 93]
[63 92]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
