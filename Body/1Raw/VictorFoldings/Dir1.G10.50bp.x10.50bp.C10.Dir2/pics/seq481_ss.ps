%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAGAUUUGGGGGGGGGGCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCAACUAxxxxxxxxxxCACCCAAAGCUAAGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGCCCCCCCCCCAAGCAGAUUU\
) } def
/len { sequence length } bind def

/coor [
[175.33587646 521.95550537]
[161.48992920 515.93945312]
[149.78128052 506.41003418]
[141.07875061 494.07437134]
[136.02815247 479.84786987]
[135.00425720 464.78616333]
[138.08305359 450.00701904]
[145.03607178 436.60708618]
[155.34736633 425.58074951]
[168.25173950 417.74624634]
[182.79162598 413.68493652]
[182.79162598 398.68493652]
[182.79162598 383.68493652]
[182.79162598 368.68493652]
[182.79162598 353.68493652]
[182.79162598 338.68493652]
[182.79162598 323.68493652]
[182.79162598 308.68493652]
[182.79162598 293.68493652]
[182.79162598 278.68493652]
[182.79162598 263.68493652]
[178.93446350 249.18934631]
[171.47955322 236.17303467]
[164.02464294 223.15672302]
[156.56973267 210.14041138]
[149.11482239 197.12409973]
[132.73591614 193.43774414]
[123.89006042 178.77366638]
[128.44361877 161.91535950]
[120.71953583 149.05696106]
[112.99545288 136.19856262]
[105.27136993 123.34015656]
[97.54727936 110.48175812]
[86.88565826 99.93046570]
[73.94760132 92.34055328]
[61.00954437 84.75064850]
[48.07148743 77.16073608]
[39.02213669 75.49907684]
[34.94556808 69.27595520]
[22.16821098 61.41852951]
[6.97787333 64.86692047]
[-5.86825180 56.71635818]
[-9.06215477 42.21343994]
[-21.83951187 34.35601425]
[-30.85233498 32.50645065]
[-34.79855728 26.19987106]
[-47.40968704 18.07832909]
[-60.02081299 9.95678616]
[-75.41210938 13.54615784]
[-88.78916168 5.13010502]
[-92.21560669 -10.29827881]
[-83.65859985 -23.58560562]
[-68.19484711 -26.84874153]
[-54.99873352 -18.15172577]
[-51.89927292 -2.65434194]
[-39.28814316 5.46720028]
[-26.67701530 13.58874226]
[-13.98208618 21.57865906]
[-1.20472908 29.43608475]
[13.17906189 25.74255753]
[26.24905205 33.52908707]
[30.02563667 48.64117432]
[42.80299377 56.49860001]
[55.66139603 64.22268677]
[68.59944916 71.81259155]
[81.53750610 79.40249634]
[94.47556305 86.99240875]
[87.35826874 73.78846741]
[83.54171753 59.28212357]
[83.23947906 44.28516769]
[86.46847534 29.63683891]
[93.04800415 16.15686035]
[102.60987091 4.59958315]
[114.61899567 -4.38824272]
[128.40333557 -10.30365276]
[143.19149780 -12.81561661]
[158.15596008 -11.78356457]
[172.45927429 -7.26525021]
[185.30102539 0.48647931]
[195.96258545 11.03783226]
[203.84733582 23.79834938]
[208.51402283 38.05394363]
[209.70150757 53.00686646]
[207.34333801 67.82034302]
[201.57148743 81.66539764]
[192.70892334 93.76725769]
[181.25163269 103.44869995]
[167.84074402 110.16793823]
[153.22676086 113.54896545]
[138.22746277 113.40257263]
[123.68225098 109.73696136]
[110.40568542 102.75766754]
[118.12976837 115.61607361]
[125.85385132 128.47447205]
[133.57794189 141.33287048]
[141.30201721 154.19128418]
[154.69635010 155.93760681]
[164.48233032 164.96327209]
[167.22232056 177.79162598]
[162.13113403 189.66918945]
[169.58604431 202.68550110]
[177.04095459 215.70181274]
[184.49586487 228.71812439]
[191.95077515 241.73443604]
[192.36265564 226.74008179]
[196.15776062 212.22811890]
[203.13906860 198.95176697]
[212.94424438 187.60017395]
[225.06431580 178.76254272]
[238.87019348 172.89759827]
[253.64527893 170.30975342]
[268.62265015 171.13334656]
[283.02490234 175.32562256]
[296.10446167 182.66897583]
[307.18246460 192.78225708]
[315.68383789 205.14050293]
[321.16735840 219.10227966]
[323.34838867 233.94287109]
[322.11370850 248.89196777]
[317.52740479 263.17364502]
[309.82754517 276.04656982]
[299.41381836 286.84255981]
[286.82669067 295.00128174]
[272.71957397 300.09924316]
[257.82467651 301.87179565]
[242.91513062 300.22695923]
[228.76483154 295.25012207]
[216.10826111 287.19955444]
[205.60237122 276.49319458]
[197.79162598 263.68493652]
[197.79162598 278.68493652]
[197.79162598 293.68493652]
[197.79162598 308.68493652]
[197.79162598 323.68493652]
[197.79162598 338.68493652]
[197.79162598 353.68493652]
[197.79162598 368.68493652]
[197.79162598 383.68493652]
[197.79162598 398.68493652]
[197.79162598 413.68493652]
[212.33151245 417.74624634]
[225.23590088 425.58074951]
[235.54718018 436.60708618]
[242.50019836 450.00701904]
[245.57899475 464.78616333]
[244.55511475 479.84786987]
[239.50450134 494.07437134]
[230.80198669 506.41003418]
[219.09332275 515.93945312]
[205.24739075 521.95550537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 67]
[35 66]
[36 65]
[37 64]
[39 63]
[40 62]
[43 59]
[44 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
