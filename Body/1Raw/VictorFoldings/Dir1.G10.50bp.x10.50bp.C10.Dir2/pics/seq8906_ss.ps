%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGCCUACUAGGGGGGGGGGACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGxxxxxxxxxxUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCCCCCCCCCCCUAGCCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[98.38593292 456.56475830]
[84.68377686 450.30386353]
[72.71865845 441.15054321]
[63.09074783 429.56384277]
[56.28297043 416.12503052]
[52.63680267 401.50814819]
[52.33513641 386.44638062]
[55.39310074 371.69522095]
[61.65731049 357.99459839]
[70.81355286 346.03170776]
[82.40256500 336.40658569]
[95.84303284 329.60208130]
[110.46079254 325.95944214]
[110.15679169 310.96252441]
[109.85278320 295.96560669]
[109.54878235 280.96868896]
[109.24477386 265.97177124]
[108.94077301 250.97485352]
[108.63677216 235.97793579]
[108.33276367 220.98101807]
[108.02876282 205.98410034]
[107.72475433 190.98718262]
[99.73110199 178.41932678]
[107.18712616 164.46517944]
[106.88311768 149.46826172]
[106.57911682 134.47134399]
[88.48516846 132.00828552]
[74.62805939 121.00643158]
[68.53265381 105.00158691]
[71.36865997 88.68717194]
[81.77169800 76.54138184]
[75.85635376 62.75701523]
[69.94101715 48.97264481]
[64.02568054 35.18827820]
[49.18953705 34.18759918]
[36.54658127 24.37488937]
[31.16625977 8.10160160]
[16.33923531 5.83018541]
[1.51221025 3.55876875]
[-11.07654762 13.11380577]
[-26.72301674 10.88589668]
[-36.14442062 -1.80317938]
[-33.75121307 -17.42521858]
[-20.96323967 -26.71194267]
[-5.36737537 -24.15370178]
[3.78362679 -11.26825619]
[18.61065102 -8.99683952]
[33.43767548 -6.72542286]
[43.99039841 -17.38563347]
[41.56884003 -32.18887711]
[39.14728546 -46.99212265]
[36.72572708 -61.79536819]
[34.30416870 -76.59860992]
[31.88261223 -91.40185547]
[28.91798973 -94.75605011]
[27.36858749 -98.50794983]
[27.18222809 -102.15182495]
[28.14411926 -105.25343323]
[29.91547012 -107.49786377]
[28.70070076 -122.44859314]
[27.48593330 -137.39932251]
[16.66452217 -152.26463318]
[24.72167015 -167.82644653]
[23.20414543 -182.74949646]
[21.68662071 -197.67253113]
[20.16909599 -212.59556580]
[5.41884708 -216.01739502]
[-7.41980600 -224.04533386]
[-16.95422173 -235.80856323]
[-22.15017891 -250.03109741]
[-22.44405746 -265.17019653]
[-17.80398178 -279.58367920]
[-8.73327160 -291.70806885]
[3.78415108 -300.22821045]
[18.39048958 -304.21990967]
[33.50135803 -303.25015259]
[47.47763824 -297.42416382]
[58.80329514 -287.37387085]
[66.24980164 -274.18948364]
[69.00941467 -259.30111694]
[66.78279877 -244.32377625]
[59.81147003 -230.88208008]
[48.85163879 -220.43408203]
[35.09213638 -214.11309814]
[36.60966110 -199.19004822]
[38.12718582 -184.26701355]
[39.64471054 -169.34397888]
[48.83958054 -161.42736816]
[50.19515228 -148.96594238]
[42.43666458 -138.61408997]
[43.65143204 -123.66336060]
[44.86619949 -108.71263123]
[46.68585587 -93.82341766]
[49.10741425 -79.02017212]
[51.52897263 -64.21692657]
[53.95052719 -49.41368103]
[56.37208557 -34.61043549]
[58.79364395 -19.80718994]
[81.09162903 -10.34681320]
[88.28646088 11.08356571]
[77.81005096 29.27294159]
[83.72538757 43.05730820]
[89.64072418 56.84167480]
[95.55606079 70.62604523]
[105.47721100 69.88832092]
[115.37944031 72.50577545]
[124.12899780 78.37572479]
[130.66172791 87.01367188]
[134.11093140 97.58945465]
[133.91831970 109.00588989]
[148.85597229 110.37210846]
[163.79362488 111.73831940]
[178.73127747 113.10453796]
[187.62205505 110.76038361]
[193.95677185 114.65282440]
[208.86366272 116.32149506]
[223.77056885 117.99017334]
[240.18400574 113.74339294]
[248.80851746 128.33976746]
[237.17007446 140.66790771]
[222.10188293 132.89706421]
[207.19499207 131.22839355]
[192.28810120 129.55972290]
[177.36505127 128.04219055]
[162.42739868 126.67597198]
[147.48974609 125.30976105]
[132.55209351 123.94354248]
[121.57603455 134.16734314]
[121.88004303 149.16426086]
[122.18404388 164.16117859]
[130.19944763 177.80169678]
[122.72167206 190.68316650]
[123.02568054 205.68008423]
[123.32968140 220.67701721]
[123.63368988 235.67393494]
[123.93769073 250.67085266]
[124.24169922 265.66775513]
[124.54570007 280.66467285]
[124.84970856 295.66159058]
[125.15370941 310.65853882]
[125.45771027 325.65545654]
[140.21109009 328.70269775]
[153.91627502 334.95693970]
[165.88581848 344.10449219]
[175.51934814 355.68649292]
[182.33363342 369.12200928]
[185.98689270 383.73712158]
[186.29585266 398.79873657]
[183.24504089 413.55136108]
[176.98747253 427.25503540]
[167.83702087 439.22238159]
[156.25268555 448.85308838]
[142.81552124 455.66412354]
[128.19952393 459.31384277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 130]
[25 129]
[26 128]
[31 104]
[32 103]
[33 102]
[34 101]
[37 48]
[38 47]
[39 46]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[59 92]
[60 91]
[61 90]
[63 87]
[64 86]
[65 85]
[66 84]
[110 127]
[111 126]
[112 125]
[113 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
