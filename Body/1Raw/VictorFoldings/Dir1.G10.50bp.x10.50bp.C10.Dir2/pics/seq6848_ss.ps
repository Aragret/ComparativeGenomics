%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCUCCCAGGGGGGGGGGUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAxxxxxxxxxxCAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCCCCCCCCCCCAUAAUCGCCCA\
) } def
/len { sequence length } bind def

/coor [
[81.95640564 486.09323120]
[68.46752930 479.36169434]
[56.98202515 469.59713745]
[48.16765594 457.36721802]
[42.53687286 443.38302612]
[40.41704559 428.45755005]
[41.93141556 413.45855713]
[46.99193954 399.25805664]
[55.30440140 386.68161011]
[66.38553619 376.46047974]
[79.59108734 369.18881226]
[94.15331268 365.28945923]
[93.84533691 350.29263306]
[93.53736115 335.29577637]
[93.22937775 320.29895020]
[92.92140198 305.30212402]
[92.61342621 290.30526733]
[92.30545044 275.30844116]
[91.99746704 260.31158447]
[91.68949127 245.31475830]
[91.38151550 230.31791687]
[81.49179840 215.85285950]
[90.42189026 199.78163147]
[82.16859436 187.38275146]
[89.33280182 173.27655029]
[88.71697998 158.28919983]
[77.50836945 168.25750732]
[62.52412796 167.57015991]
[52.27518463 156.61758423]
[52.58286667 141.62074280]
[63.27241516 131.09773254]
[78.27223969 131.02555847]
[89.06287384 141.44592285]
[90.29348755 126.49649048]
[91.52410126 111.54705811]
[85.72434235 98.82485199]
[93.52646637 87.22233582]
[86.94742584 72.83390808]
[95.70280457 60.78431320]
[96.93341064 45.83487701]
[98.16402435 30.88544464]
[99.39463806 15.93600941]
[84.18814087 11.47078228]
[70.23190308 3.97233891]
[58.12312317 -6.23590612]
[48.37943268 -18.71463966]
[41.41674423 -32.92755127]
[37.53151703 -48.26438522]
[36.88812637 -64.06714630]
[39.51190948 -79.65832520]
[45.28818130 -94.36993408]
[53.96723938 -107.57215881]
[65.17516327 -118.70027924]
[78.42992401 -127.27885437]
[93.16210175 -132.94203186]
[108.73936462 -135.44914246]
[109.35519409 -150.43650818]
[109.97101593 -165.42385864]
[110.58684540 -180.41120911]
[111.20266724 -195.39855957]
[111.81849670 -210.38591003]
[112.43431854 -225.37327576]
[98.03810883 -232.89250183]
[88.38468170 -245.88165283]
[85.35832214 -261.72061157]
[89.51284790 -277.24160767]
[99.97103119 -289.36291504]
[114.60927582 -295.70059204]
[114.91725159 -310.69741821]
[115.22522736 -325.69424438]
[101.42513275 -332.13455200]
[91.44252014 -343.63528442]
[87.00693512 -358.20394897]
[88.88687134 -373.31637573]
[96.75662231 -386.35427856]
[109.25270081 -395.05874634]
[124.21008301 -397.92169189]
[139.03732300 -394.44708252]
[151.16551208 -385.23693848]
[158.49334717 -371.88693237]
[159.75125122 -356.71005249]
[154.72129822 -342.33578491]
[144.27493286 -331.25457764]
[130.22206116 -325.38629150]
[129.91409302 -310.38943481]
[129.60610962 -295.39260864]
[142.30003357 -289.71612549]
[151.89364624 -279.59045410]
[156.90843201 -266.52789307]
[156.55319214 -252.49687195]
[150.84864807 -239.62544250]
[140.62933350 -229.87841797]
[127.42167664 -224.75744629]
[126.80584717 -209.77009583]
[126.19002533 -194.78273010]
[125.57419586 -179.79537964]
[124.95837402 -164.80802917]
[124.34254456 -149.82067871]
[123.72672272 -134.83332825]
[137.54890442 -131.57713318]
[150.53083801 -125.81115723]
[162.22106934 -117.73418427]
[172.21273804 -107.62539673]
[180.15771484 -95.83470917]
[185.77879333 -82.77069855]
[188.87930298 -68.88639832]
[189.35000610 -54.66362000]
[187.17298889 -40.59622574]
[182.42225647 -27.17296982]
[175.26130676 -14.86053371]
[165.93742371 -4.08728695]
[154.77320862 4.77160740]
[142.15534973 11.40726185]
[128.52131653 15.58783340]
[114.34407043 17.16662216]
[113.11346436 32.11605835]
[111.88285065 47.06549072]
[110.65223694 62.01492691]
[117.31929779 75.33406830]
[108.47589874 88.45294189]
[114.27565765 101.17514801]
[106.47353363 112.77766418]
[105.24291992 127.72710419]
[104.01230621 142.67652893]
[103.70433044 157.67337036]
[104.32015228 172.66072083]
[112.61750031 186.13160706]
[105.40924072 199.16580200]
[114.37219238 208.49690247]
[114.54341125 221.03253174]
[106.37834930 230.00994873]
[106.68633270 245.00677490]
[106.99430847 260.00363159]
[107.30228424 275.00045776]
[107.61026001 289.99728394]
[107.91824341 304.99414062]
[108.22621918 319.99096680]
[108.53419495 334.98782349]
[108.84217072 349.98464966]
[109.15015411 364.98147583]
[123.86018372 368.27972412]
[137.35314941 375.00305176]
[148.84455872 384.76065063]
[157.66635132 396.98519897]
[163.30560303 410.96600342]
[165.43447876 425.89016724]
[163.92919922 440.89010620]
[158.87728882 455.09368896]
[150.57244873 467.67514038]
[139.49752808 477.90301514]
[126.29637909 485.18264771]
[111.73651886 489.09085083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 128]
[25 126]
[26 125]
[33 124]
[34 123]
[35 122]
[37 120]
[39 118]
[40 117]
[41 116]
[42 115]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
