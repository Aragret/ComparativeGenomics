%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAGUAUUAGGGGGGGGGGUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAxxxxxxxxxxAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUCCCCCCCCCCAACUUAGCAUUA\
) } def
/len { sequence length } bind def

/coor [
[110.75812531 422.30917358]
[96.59751892 417.15417480]
[84.00777435 408.87194824]
[73.66783905 397.90917969]
[66.13533020 384.85705566]
[61.81645966 370.41946411]
[60.94415283 355.37500000]
[63.56544495 340.53500366]
[69.53897095 326.69976807]
[78.54258728 314.61541748]
[90.09074402 304.93365479]
[103.56066132 298.17657471]
[118.22592163 294.70858765]
[118.22592163 279.70858765]
[118.22592163 264.70858765]
[118.22592163 249.70858765]
[118.22592163 234.70858765]
[118.22592163 219.70858765]
[118.22592163 204.70858765]
[118.22592163 189.70858765]
[118.22592163 174.70858765]
[118.22592163 159.70858765]
[117.46618652 144.72784424]
[115.94866180 129.80480957]
[114.43113708 114.88176727]
[96.67400360 118.57560730]
[84.65499878 107.34487152]
[69.65576935 107.19286346]
[55.77789307 114.78990936]
[43.12968445 106.92403412]
[28.13045311 106.77201843]
[13.13122463 106.62001038]
[-1.86800551 106.46800232]
[-9.06156921 119.97767639]
[-21.71593666 128.58729553]
[-36.92322922 130.31843567]
[-51.18892288 124.77328491]
[-61.23485947 113.22609711]
[-64.75256348 98.33031464]
[-60.93369293 83.50888062]
[-50.65578842 72.16766357]
[-36.28064346 66.91278076]
[-21.11156082 68.95176697]
[-8.63428116 77.81608582]
[-1.71599555 91.46877289]
[13.28323460 91.62078094]
[28.28246307 91.77278900]
[43.28169250 91.92480469]
[56.08672333 84.31687927]
[69.80777740 92.19363403]
[84.80700684 92.34564209]
[90.78635406 84.60484314]
[100.48133087 81.13512421]
[111.02138519 83.55052948]
[118.96456146 91.62921906]
[125.97679138 78.36917877]
[121.55050659 63.43445969]
[128.85079956 50.08678436]
[143.11604309 45.95904160]
[150.12828064 32.69900131]
[157.14050293 19.43896294]
[163.74641418 5.97189522]
[169.93991089 -7.68975496]
[176.13340759 -21.35140419]
[182.32688904 -35.01305389]
[176.15536499 -47.02452087]
[178.02030945 -60.20244217]
[187.01512146 -69.74590302]
[199.67756653 -72.30941010]
[206.14666748 -85.84272766]
[212.61576843 -99.37604523]
[219.08485413 -112.90937042]
[206.93307495 -121.77777863]
[196.61793518 -132.72824097]
[188.49076843 -145.38777161]
[182.82839966 -159.32521057]
[179.82366943 -174.06584167]
[179.57891846 -189.10762024]
[182.10247803 -203.93820190]
[187.30842590 -218.05247498]
[195.01942444 -230.96972656]
[204.97283936 -242.24996948]
[216.82966614 -251.50903320]
[230.18606567 -258.43154907]
[244.58712769 -262.78173828]
[259.54235840 -264.41140747]
[274.54235840 -263.26510620]
[289.07629395 -259.38183594]
[302.64907837 -252.89385986]
[314.79849243 -244.02217102]
[325.11068726 -233.06893921]
[333.23443604 -220.40721130]
[338.89303589 -206.46824646]
[341.89379883 -191.72680664]
[342.13449097 -176.68496704]
[339.60693359 -161.85507202]
[334.39718628 -147.74220276]
[326.68270874 -134.82702637]
[316.72625732 -123.54946136]
[304.86694336 -114.29359436]
[291.50866699 -107.37467957]
[277.10641479 -103.02838135]
[262.15075684 -101.40272522]
[247.15104675 -102.55307770]
[232.61817932 -106.44026947]
[226.14907837 -92.90695190]
[219.67997742 -79.37362671]
[213.21089172 -65.84030914]
[219.49020386 -50.26734543]
[212.45104980 -34.65234756]
[195.98854065 -28.81956482]
[189.79504395 -15.15791512]
[183.60156250 -1.49626482]
[177.40806580 12.16538525]
[178.33935547 15.62373829]
[177.60462952 19.71012688]
[174.92520142 23.61919403]
[170.40054321 26.45119286]
[163.38832092 39.71123123]
[156.37608337 52.97127151]
[160.99467468 67.08524323]
[154.07217407 80.63269806]
[139.23683167 85.38140869]
[132.22459412 98.64144135]
[129.35417175 113.36424255]
[130.87170410 128.28727722]
[132.38922119 143.21031189]
[143.96531677 133.67123413]
[158.68241882 136.57067871]
[165.77526855 149.78776550]
[160.05557251 163.65446472]
[145.70718384 168.02752686]
[133.22592163 159.70858765]
[133.22592163 174.70858765]
[133.22592163 189.70858765]
[133.22592163 204.70858765]
[133.22592163 219.70858765]
[133.22592163 234.70858765]
[133.22592163 249.70858765]
[133.22592163 264.70858765]
[133.22592163 279.70858765]
[133.22592163 294.70858765]
[147.89118958 298.17657471]
[161.36109924 304.93365479]
[172.90925598 314.61541748]
[181.91287231 326.69976807]
[187.88639832 340.53500366]
[190.50769043 355.37500000]
[189.63537598 370.41946411]
[185.31651306 384.85705566]
[177.78401184 397.90917969]
[167.44406128 408.87194824]
[154.85432434 417.15417480]
[140.69372559 422.30917358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 127]
[24 126]
[25 125]
[27 51]
[28 50]
[30 48]
[31 47]
[32 46]
[33 45]
[55 124]
[56 123]
[59 120]
[60 119]
[61 118]
[62 114]
[63 113]
[64 112]
[65 111]
[69 108]
[70 107]
[71 106]
[72 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
