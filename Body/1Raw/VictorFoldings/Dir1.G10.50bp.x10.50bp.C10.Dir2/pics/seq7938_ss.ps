%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCCACUGGGGGGGGGGGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAAxxxxxxxxxxAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAACCCCCCCCCCAUAGCCCACU\
) } def
/len { sequence length } bind def

/coor [
[86.22433472 399.39050293]
[71.73464203 395.18200684]
[58.82841110 387.36590576]
[48.38560867 376.47506714]
[41.11824417 363.25207520]
[37.52182007 348.59844971]
[37.84154129 333.51336670]
[42.05561066 319.02529907]
[49.87670898 306.12207031]
[60.77157593 295.68350220]
[73.99738312 288.42123413]
[88.65237427 284.83047485]
[88.96443176 269.83370972]
[89.27648926 254.83695984]
[89.58854675 239.84019470]
[89.90060425 224.84344482]
[90.21266174 209.84669495]
[90.52471161 194.84994507]
[90.83676910 179.85317993]
[91.14882660 164.85643005]
[91.46088409 149.85968018]
[91.77294159 134.86293030]
[84.62754059 132.35421753]
[78.16923523 128.39939880]
[72.68668365 123.17522430]
[68.42494965 116.91519928]
[54.01272964 121.07308960]
[39.60051346 125.23097229]
[25.18829727 129.38885498]
[11.64583111 139.58876038]
[-1.90437937 129.39915466]
[4.13594389 113.55772400]
[21.03041077 114.97664642]
[35.44262695 110.81875610]
[49.85484314 106.66087341]
[64.26705933 102.50298309]
[64.19694519 98.88230133]
[64.49275970 95.27304077]
[50.36796188 90.22428131]
[36.24315643 85.17552948]
[22.11835480 80.12677002]
[7.99355125 75.07801056]
[-5.41130733 83.13057709]
[-20.84793663 80.63167572]
[-31.02763176 68.76121521]
[-31.14385033 53.12406540]
[-21.14172173 41.10360718]
[-5.74394083 38.37553406]
[7.77912903 46.22796249]
[13.04230785 60.95321274]
[27.16711044 66.00196838]
[41.29191208 71.05072021]
[55.41671753 76.09947968]
[69.54151917 81.14823914]
[82.52173615 68.73311615]
[99.89663696 64.17964935]
[102.99495697 49.50312805]
[98.27500153 34.40237808]
[108.47432709 23.54774475]
[111.57264709 8.87121964]
[114.67097473 -5.80530548]
[117.76929474 -20.48183060]
[120.86761475 -35.15835571]
[123.81309509 -49.86631775]
[126.60542297 -64.60412598]
[120.11082458 -81.80296326]
[131.99871826 -94.67456055]
[134.48382568 -109.46726990]
[120.75344086 -115.72337341]
[109.11071777 -125.32073975]
[100.34948730 -137.60501099]
[95.06709290 -151.73860168]
[93.62371063 -166.75790405]
[96.11774445 -181.63882446]
[102.37914276 -195.36680603]
[111.98101044 -207.00581360]
[124.26865387 -215.76231384]
[138.40429688 -221.03924561]
[153.42414856 -222.47682190]
[168.30410767 -219.97705078]
[182.02966309 -213.71034241]
[193.66497803 -204.10398865]
[202.41671753 -191.81295776]
[207.68820190 -177.67527771]
[209.11997986 -162.65489197]
[206.61445618 -147.77587891]
[200.34245300 -134.05274963]
[190.73161316 -122.42115021]
[178.43719482 -113.67414856]
[164.29748535 -108.40813446]
[149.27653503 -106.98214722]
[146.79141235 -92.18944550]
[153.56507874 -82.11845398]
[151.57104492 -69.73932648]
[141.34323120 -61.81179810]
[138.55090332 -47.07399368]
[140.40788269 -39.87001801]
[135.54414368 -32.06003571]
[132.44581604 -17.38350868]
[129.34750366 -2.70698380]
[126.24917603 11.96954155]
[123.15085602 26.64606667]
[128.09242249 40.69705200]
[117.67148590 52.60144806]
[114.57315826 67.27797699]
[129.70579529 79.98316193]
[135.79968262 98.77899170]
[150.56573486 101.41785431]
[165.51185608 96.22901154]
[176.67944336 106.08467865]
[191.44551086 108.72354126]
[206.21156311 111.36240387]
[216.04975891 99.56810760]
[230.47256470 94.28810883]
[245.60031128 96.94271088]
[257.36370850 106.81782532]
[262.59848022 121.25710297]
[259.89645386 136.37644958]
[249.98452759 148.10884094]
[235.52890015 153.29832458]
[220.41810608 150.54893494]
[208.71684265 140.60028076]
[203.57269287 126.12846375]
[188.80664062 123.48959351]
[174.04058838 120.85073090]
[160.15063477 126.22832489]
[147.92686462 116.18390656]
[133.16081238 113.54504395]
[122.70627594 127.70438385]
[106.76969147 135.17498779]
[106.45763397 150.17173767]
[106.14558411 165.16848755]
[105.83352661 180.16523743]
[105.52146912 195.16200256]
[105.20941162 210.15875244]
[104.89735413 225.15550232]
[104.58529663 240.15225220]
[104.27324677 255.14901733]
[103.96118927 270.14575195]
[103.64913177 285.14251709]
[118.14206696 289.33981323]
[131.05433655 297.14593506]
[141.50553894 308.02871704]
[148.78311157 321.24609375]
[152.39085388 335.89694214]
[152.08277893 350.98226929]
[147.87989807 365.47357178]
[140.06877136 378.38284302]
[129.18196106 388.82983398]
[115.96176910 396.10229492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[26 36]
[27 35]
[28 34]
[29 33]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[56 105]
[57 104]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[64 96]
[65 95]
[67 92]
[68 91]
[107 128]
[108 127]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
