%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAACAGGGGGGGGGGCUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUxxxxxxxxxxGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCCCCCCCCCCCUAGCAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.47631836]
[71.19830322 377.46029663]
[59.48964310 367.93087769]
[50.78712082 355.59518433]
[45.73651886 341.36868286]
[44.71262741 326.30700684]
[47.79142761 311.52783203]
[54.74444962 298.12789917]
[65.05573273 287.10156250]
[77.96011353 279.26705933]
[92.50000000 275.20574951]
[92.50000000 260.20574951]
[92.50000000 245.20574951]
[92.50000000 230.20574951]
[92.50000000 215.20574951]
[92.50000000 200.20574951]
[92.50000000 185.20574951]
[92.50000000 170.20574951]
[92.50000000 155.20574951]
[92.50000000 140.20574951]
[78.27980042 134.65522766]
[67.08532715 124.27707672]
[60.47602081 110.51700592]
[59.37259674 95.29187012]
[63.92876434 80.72259521]
[73.50982666 68.83875275]
[66.05491638 55.82244492]
[58.60000610 42.80613708]
[51.14509583 29.78982735]
[43.69018555 16.77351761]
[36.23527527 3.75720882]
[28.78036690 -9.25910091]
[15.20769024 -17.38886261]
[15.59638500 -32.27839661]
[8.56961250 -38.21778488]
[8.12500572 -45.64395142]
[0.94249725 -58.81253433]
[-6.24001169 -71.98111725]
[-12.95260715 -71.38986206]
[-19.58244896 -72.42919922]
[-25.74090767 -75.02465820]
[-31.07025719 -79.01097107]
[-35.26445007 -84.14249420]
[-38.08666992 -90.10835266]
[-39.38269806 -96.55125427]
[-39.08927155 -103.08885956]
[-37.23705292 -109.33649445]
[-48.93667603 -118.72365570]
[-60.63629913 -128.11082458]
[-75.23077393 -123.11033630]
[-90.20642090 -126.81622314]
[-100.78456116 -138.04594421]
[-103.58975220 -153.21612549]
[-97.72686005 -167.48602295]
[-85.06671906 -176.30216980]
[-69.64913940 -176.85136414]
[-56.39380264 -168.95834351]
[-49.53044510 -155.14176941]
[-51.24913788 -139.81044006]
[-39.54951477 -130.42327881]
[-27.84989166 -121.03611755]
[-25.37045097 -122.57804108]
[-22.73793411 -123.84098053]
[-19.98361206 -124.80992889]
[-19.98361206 -139.80992126]
[-19.98361206 -154.80992126]
[-19.98361206 -169.80992126]
[-34.23628235 -174.97105408]
[-45.86220932 -184.69799805]
[-53.45751190 -197.81620789]
[-56.10501480 -212.74156189]
[-53.48502350 -227.67178345]
[-45.91390991 -240.80397034]
[-34.30592346 -250.55232239]
[-20.06278992 -255.73970032]
[-4.90443230 -255.73970032]
[9.33870220 -250.55232239]
[20.94668770 -240.80397034]
[28.51779938 -227.67178345]
[31.13779449 -212.74156189]
[28.49028969 -197.81620789]
[20.89498901 -184.69799805]
[9.26905918 -174.97105408]
[-4.98361111 -169.80992126]
[-4.98361111 -154.80992126]
[-4.98361111 -139.80992126]
[-4.98361111 -124.80992889]
[14.01067352 -105.69503784]
[6.92857075 -79.16362762]
[14.11108017 -65.99504089]
[21.29358864 -52.82646179]
[28.61269379 -39.73330688]
[41.65214539 -32.53455734]
[41.79667664 -16.71401024]
[49.25158691 -3.69770145]
[56.70649719 9.31860828]
[64.16140747 22.33491707]
[71.61631775 35.35122681]
[79.07122803 48.36753464]
[86.52613831 61.38384628]
[97.48781586 59.17793274]
[108.63725281 60.02312851]
[119.14112854 63.85626602]
[128.21437073 70.39084625]
[135.17881775 79.13847351]
[139.51393127 89.44532013]
[140.89572144 100.54103851]
[155.60368347 103.48652649]
[162.79490662 90.19075012]
[173.58680725 79.60649872]
[187.01977539 72.67493439]
[201.89936829 70.01239777]
[216.90249634 71.85563660]
[230.69509888 78.04074860]
[242.05073547 88.01776886]
[249.95967102 100.89954376]
[253.71865845 115.54063416]
[252.99345398 130.63916016]
[247.84852600 144.85256958]
[238.74136353 156.91702271]
[226.48178101 165.75975037]
[212.15986633 170.59448242]
[197.04914856 170.99128723]
[182.49324036 166.91490173]
[169.78645325 158.72778320]
[160.05865479 147.15794373]
[154.17483521 133.23414612]
[152.65818787 118.19448853]
[137.95024109 115.24900055]
[125.92567444 131.63244629]
[107.50000000 140.20574951]
[107.50000000 155.20574951]
[107.50000000 170.20574951]
[107.50000000 185.20574951]
[107.50000000 200.20574951]
[107.50000000 215.20574951]
[107.50000000 230.20574951]
[107.50000000 245.20574951]
[107.50000000 260.20574951]
[107.50000000 275.20574951]
[122.03988647 279.26705933]
[134.94427490 287.10156250]
[145.25555420 298.12789917]
[152.20857239 311.52783203]
[155.28736877 326.30700684]
[154.26348877 341.36868286]
[149.21287537 355.59518433]
[140.51036072 367.93087769]
[128.80169678 377.46029663]
[114.95575714 383.47631836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 100]
[27 99]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[34 92]
[36 91]
[37 90]
[38 89]
[47 61]
[48 60]
[49 59]
[64 87]
[65 86]
[66 85]
[67 84]
[107 129]
[108 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
