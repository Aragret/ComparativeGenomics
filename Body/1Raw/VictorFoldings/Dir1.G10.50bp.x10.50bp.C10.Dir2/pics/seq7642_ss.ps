%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCAUCAUCGGGGGGGGGGCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAxxxxxxxxxxCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCCCCCCCCCCCUCCAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 369.40628052]
[71.01555634 363.85327148]
[58.81560135 354.98693848]
[49.20452881 343.36462402]
[42.78650284 329.71691895]
[39.96496582 314.90173340]
[40.91728210 299.85037231]
[45.58358765 285.50894165]
[53.67055511 272.77899170]
[64.66983032 262.46072388]
[77.88998413 255.20272827]
[92.50000000 251.46130371]
[92.50000000 236.46130371]
[92.50000000 221.46130371]
[92.50000000 206.46130371]
[92.50000000 191.46130371]
[92.50000000 176.46130371]
[92.50000000 161.46130371]
[92.50000000 146.46130371]
[92.50000000 131.46130371]
[92.50000000 116.46129608]
[86.23059845 102.83432007]
[74.83952332 93.07504272]
[63.44844818 83.31577301]
[52.05737305 73.55649567]
[40.66630173 63.79722214]
[29.27522659 54.03794861]
[18.33124161 64.31785583]
[6.33994198 73.35422516]
[-6.55808210 81.04110718]
[-20.21160698 87.28838348]
[-34.46055222 92.02281189]
[-49.13785934 95.18887329]
[-64.07144165 96.74945068]
[-79.08620453 96.68624878]
[-94.00611877 95.00000763]
[-108.65625000 91.71049500]
[-122.86483765 86.85628510]
[-136.46528625 80.49428558]
[-149.29814148 72.69908905]
[-161.21293640 63.56209183]
[-172.06999207 53.19041824]
[-181.74201965 41.70567322]
[-190.11558533 29.24250793]
[-197.09254456 15.94704628]
[-202.59107971 1.97517121]
[-206.54673767 -12.50930405]
[-208.91313171 -27.33655739]
[-209.66252136 -42.33274460]
[-208.78610229 -57.32204819]
[-206.29417419 -72.12871552]
[-202.21594238 -86.57916260]
[-196.59922791 -100.50395203]
[-189.50987244 -113.73982239]
[-181.03102112 -126.13159943]
[-171.26203918 -137.53398132]
[-160.31750488 -147.81330872]
[-148.32572937 -156.84902954]
[-135.42729187 -164.53521729]
[-121.77342224 -170.78176880]
[-107.52422333 -175.51542664]
[-92.84674835 -178.68069458]
[-77.91307831 -180.24046326]
[-62.89831924 -180.17645264]
[-47.97849655 -178.48941040]
[-33.32854080 -175.19911194]
[-19.12021637 -170.34413147]
[-5.52011013 -163.98141479]
[7.31232548 -156.18551636]
[19.22663689 -147.04788208]
[30.08313370 -136.67562866]
[39.75452805 -125.19036102]
[48.12742996 -112.72674561]
[55.10367203 -99.43090820]
[60.60146332 -85.45873260]
[64.55633545 -70.97404480]
[66.92192841 -56.14666748]
[67.67050934 -41.15043640]
[66.79328918 -26.16118431]
[64.30056763 -11.35464573]
[60.22156143 3.09557700]
[54.60409546 17.02006340]
[47.51403046 30.25555611]
[39.03450012 42.64687347]
[50.42557526 52.40614700]
[61.81664658 62.16542435]
[73.20772552 71.92469788]
[84.59879303 81.68397522]
[95.98986816 91.44324493]
[97.64742279 88.20791626]
[100.64822388 85.41527557]
[104.84092712 83.52262878]
[109.93382263 82.93192291]
[115.51458740 83.94955444]
[129.66191101 78.96423340]
[143.80921936 73.97891235]
[157.68209839 68.27424622]
[171.24400330 61.86526871]
[184.80589294 55.45629501]
[186.69972229 40.14561081]
[196.58802795 28.30395699]
[211.31550598 23.70995712]
[226.18267822 27.82954216]
[236.44546509 39.34816742]
[238.82905579 54.59028244]
[232.57286072 68.69217682]
[219.67320251 77.15399933]
[204.24632263 77.27560425]
[191.21487427 69.01818848]
[177.65296936 75.42716217]
[164.09107971 81.83614349]
[176.93692017 89.58110046]
[179.09938049 104.42440796]
[168.99728394 115.51257324]
[154.01730347 114.73788452]
[145.11286926 102.66680145]
[148.79454041 88.12622833]
[134.64723206 93.11154938]
[120.49990845 98.09687042]
[135.30543518 100.50442505]
[150.15623474 98.39402771]
[164.37373352 103.17551422]
[174.93124390 113.83097839]
[179.58123779 128.09204102]
[177.33377075 142.92271423]
[168.66731262 155.16577148]
[155.42683411 162.21485901]
[140.43103027 162.56932068]
[126.87226868 156.15370178]
[117.63703156 144.33378601]
[114.69138336 129.62503052]
[107.50000000 116.46129608]
[107.50000000 131.46130371]
[107.50000000 146.46130371]
[107.50000000 161.46130371]
[107.50000000 176.46130371]
[107.50000000 191.46130371]
[107.50000000 206.46130371]
[107.50000000 221.46130371]
[107.50000000 236.46130371]
[107.50000000 251.46130371]
[122.11001587 255.20272827]
[135.33016968 262.46072388]
[146.32945251 272.77899170]
[154.41641235 285.50894165]
[159.08271790 299.85037231]
[160.03503418 314.90173340]
[157.21350098 329.71691895]
[150.79547119 343.36462402]
[141.18440247 354.98693848]
[128.98443604 363.85327148]
[114.96250153 369.40628052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[94 119]
[95 118]
[96 117]
[97 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
