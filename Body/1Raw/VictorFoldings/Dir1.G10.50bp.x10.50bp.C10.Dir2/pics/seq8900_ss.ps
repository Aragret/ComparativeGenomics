%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUAGGCGGGGGGGGGGCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGxxxxxxxxxxGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACCCCCCCCCCCAUACUAGUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.64627075]
[71.19830322 384.63024902]
[59.48964310 375.10083008]
[50.78712082 362.76516724]
[45.73651886 348.53863525]
[44.71262741 333.47695923]
[47.79142761 318.69778442]
[54.74444962 305.29785156]
[65.05573273 294.27154541]
[77.96011353 286.43701172]
[92.50000000 282.37570190]
[92.50000000 267.37570190]
[92.50000000 252.37570190]
[92.50000000 237.37570190]
[92.50000000 222.37570190]
[92.50000000 207.37570190]
[92.50000000 192.37570190]
[92.50000000 177.37570190]
[92.50000000 162.37570190]
[92.50000000 147.37570190]
[84.17557526 145.28018188]
[76.35797882 141.73442078]
[69.29758453 136.85198975]
[63.22053528 130.78926086]
[58.32146072 123.74040985]
[54.75727081 115.93119812]
[52.64211655 107.61174011]
[52.04374695 99.04849243]
[37.27769089 96.40962219]
[22.51163483 93.77075958]
[7.56551504 98.95960236]
[-3.60207963 89.10394287]
[-18.36813545 86.46507263]
[-25.70900536 99.70858002]
[-36.95395660 109.84908295]
[-50.88321686 115.78662109]
[-65.98584747 116.87713623]
[-80.62363434 113.00233459]
[-93.20876312 104.58253479]
[-102.37610626 92.53103638]
[-107.13126373 78.15511322]
[-106.95841217 63.01414490]
[-101.87631989 48.75051880]
[-92.43624878 36.91144180]
[-79.66217804 28.78113365]
[-64.93975830 25.24150276]
[-49.86595535 26.67650604]
[-36.07587051 32.93048096]
[-25.06534386 43.32505035]
[-18.02871704 56.73268127]
[-15.72927094 71.69902039]
[-0.96321541 74.33788300]
[12.92673683 68.96029663]
[25.15049934 79.00470734]
[39.91655350 81.64356995]
[54.68260956 84.28243256]
[68.07810974 64.19915771]
[89.55953217 53.18435669]
[88.62390137 38.21356583]
[87.68827820 23.24277496]
[76.12050629 12.81087875]
[75.38491058 -2.38496113]
[85.40142059 -13.34877396]
[84.46578979 -28.31956482]
[75.88276672 -41.61024857]
[82.81113434 -54.79535294]
[81.87550354 -69.76614380]
[67.58925629 -75.04089355]
[56.68807983 -85.67500305]
[51.06067657 -99.82604980]
[51.68202591 -115.04228973]
[58.44447327 -128.68740845]
[70.17638397 -138.39729309]
[84.84513855 -142.48968506]
[99.90928650 -140.25550842]
[112.75885773 -132.08187866]
[121.16761017 -119.38492584]
[123.67865753 -104.36445618]
[119.85695648 -89.62286377]
[110.36463165 -77.71421814]
[96.84629822 -70.70177460]
[97.78192139 -55.73098373]
[106.29802704 -43.51110840]
[99.43657684 -29.25519371]
[100.37220764 -14.28440189]
[111.67584991 -4.65303326]
[112.83797455 10.51614952]
[102.65906525 22.30714607]
[103.59469604 37.27793884]
[104.53032684 52.24872971]
[121.95256805 57.35269547]
[136.23002625 68.56604767]
[145.31738281 84.28243256]
[160.08345032 81.64356995]
[174.84950256 79.00470734]
[189.61555481 76.36584473]
[204.38160706 73.72697449]
[205.49444580 58.68661880]
[210.31347656 44.39579010]
[218.53578186 31.75282860]
[229.64450073 21.55248070]
[242.94132996 14.43594742]
[257.59042358 10.85058117]
[272.67092896 11.02176189]
[287.23486328 14.93872738]
[300.36672974 22.35525513]
[311.24105835 32.80513382]
[319.17425537 45.63147736]
[323.66766357 60.02801132]
[324.43878174 75.08975983]
[321.43917847 89.86991882]
[314.85739136 103.43940735]
[305.10717773 114.94522858]
[292.80142212 123.66411591]
[278.71368408 129.04800415]
[263.72949219 130.75843811]
[248.79083252 128.68791199]
[234.83673096 122.96658325]
[222.74433899 113.95409393]
[213.27381897 102.21697235]
[207.02047729 88.49303436]
[192.25442505 91.13189697]
[177.48837280 93.77075958]
[162.72230530 96.40962219]
[147.95625305 99.04849243]
[146.81900024 110.42538452]
[143.02148438 121.20989990]
[136.77946472 130.78926086]
[128.44763184 138.61917114]
[118.49938202 144.25473022]
[107.50000000 147.37570190]
[107.50000000 162.37570190]
[107.50000000 177.37570190]
[107.50000000 192.37570190]
[107.50000000 207.37570190]
[107.50000000 222.37570190]
[107.50000000 237.37570190]
[107.50000000 252.37570190]
[107.50000000 267.37570190]
[107.50000000 282.37570190]
[122.03988647 286.43701172]
[134.94427490 294.27154541]
[145.25555420 305.29785156]
[152.20857239 318.69778442]
[155.28736877 333.47695923]
[154.26348877 348.53863525]
[149.21287537 362.76516724]
[140.51036072 375.10083008]
[128.80169678 384.63024902]
[114.95575714 390.64627075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 56]
[29 55]
[30 54]
[32 52]
[33 51]
[58 90]
[59 89]
[60 88]
[63 85]
[64 84]
[66 82]
[67 81]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
