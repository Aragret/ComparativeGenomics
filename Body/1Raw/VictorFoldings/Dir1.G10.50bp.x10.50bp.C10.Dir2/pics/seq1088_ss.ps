%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACCCCCGGGGGGGGGGACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAxxxxxxxxxxGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCCCCCCCCCCCAAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.94931793 565.28289795]
[69.10337830 559.26684570]
[57.39471436 549.73742676]
[48.69219208 537.40179443]
[43.64159012 523.17523193]
[42.61769867 508.11355591]
[45.69649887 493.33441162]
[52.64952087 479.93447876]
[62.96080399 468.90814209]
[75.86518097 461.07363892]
[90.40507507 457.01232910]
[90.40507507 442.01232910]
[90.40507507 427.01232910]
[90.40507507 412.01232910]
[90.40507507 397.01232910]
[90.40507507 382.01232910]
[90.40507507 367.01232910]
[90.40507507 352.01232910]
[90.40507507 337.01232910]
[90.40507507 322.01232910]
[90.40507507 307.01232910]
[82.66777039 294.28506470]
[90.40507507 280.48489380]
[90.40507507 265.48489380]
[90.40507507 250.48487854]
[90.40507507 235.48487854]
[90.40507507 220.48487854]
[80.08409119 212.70837402]
[76.08612061 200.21475220]
[80.09223938 187.51911926]
[90.84730530 179.34684753]
[91.15936279 164.35008240]
[83.68851471 151.46459961]
[91.71123505 137.82838440]
[92.02329254 122.83162689]
[82.84336853 123.22730255]
[72.96575165 119.89916229]
[63.86004639 112.55881500]
[57.07381439 101.47609711]
[42.43031311 98.22526550]
[27.78681183 94.97444153]
[11.01374722 97.44439697]
[3.99707317 82.01058197]
[16.88531876 70.99562073]
[31.03763580 80.33094025]
[45.68113708 83.58176422]
[60.32463837 86.83259583]
[64.18668365 80.40338898]
[51.32840729 72.67909241]
[59.05291748 59.82094574]
[71.91076660 67.54499054]
[75.77281189 61.11578751]
[66.02515411 49.71476746]
[56.27750397 38.31374741]
[46.52985382 26.91272545]
[36.78219986 15.51170349]
[21.14890480 10.55871582]
[17.88639641 -5.51262712]
[30.35086441 -16.16950607]
[45.71993256 -10.44903755]
[48.18322372 5.76405144]
[57.93087387 17.16507339]
[67.67852783 28.56609344]
[77.42617798 39.96711349]
[87.17382812 51.36813736]
[102.16084290 50.74415970]
[110.92705536 38.57232285]
[119.69326019 26.40048409]
[128.45947266 14.22864723]
[117.63912964 3.80266857]
[108.41276550 -8.05713558]
[100.96820831 -21.10931396]
[95.45703125 -35.08814240]
[91.99141693 -49.70903015]
[90.64193726 -64.67430878]
[91.43605804 -79.67931366]
[94.35762024 -94.41855621]
[99.34712982 -108.59196472]
[106.30301666 -121.91098785]
[115.08366394 -134.10447693]
[125.51031494 -144.92416382]
[137.37068176 -154.14979553]
[150.42332458 -161.59353638]
[164.40249634 -167.10385132]
[179.02359009 -170.56855774]
[193.98896790 -171.91711426]
[208.99391174 -171.12207031]
[223.73297119 -168.19960022]
[237.90608215 -163.20921326]
[251.22467041 -156.25250244]
[263.41760254 -147.47109985]
[274.23666382 -137.04377747]
[283.46154785 -125.18283081]
[290.90447998 -112.12973022]
[296.41394043 -98.15022278]
[299.87774658 -83.52890778]
[301.22537231 -68.56345367]
[300.42938232 -53.55855179]
[297.50601196 -38.81967163]
[292.51473999 -24.64687920]
[285.55722046 -11.32871628]
[276.77505493 0.86367732]
[266.34707642 11.68207932]
[254.48554993 20.90624237]
[241.43199158 28.34837341]
[227.45213318 33.85696030]
[212.83061218 37.31985474]
[197.86508179 38.66655731]
[182.86021423 37.86964798]
[168.12152100 34.94535828]
[153.94903564 29.95321465]
[140.63130188 22.99485397]
[131.86509705 35.16669083]
[123.09889221 47.33852768]
[114.33267975 59.51036453]
[133.55947876 100.76723480]
[107.02004242 123.14368439]
[106.70798492 138.14044189]
[114.15651703 152.09858704]
[106.15612030 164.66213989]
[105.84406281 179.65888977]
[118.17390442 192.02467346]
[117.78583527 209.14581299]
[105.40507507 220.48487854]
[105.40507507 235.48487854]
[105.40507507 250.48487854]
[105.40507507 265.48489380]
[105.40507507 280.48489380]
[113.14237213 294.28506470]
[105.40507507 307.01232910]
[105.40507507 322.01232910]
[105.40507507 337.01232910]
[105.40507507 352.01232910]
[105.40507507 367.01232910]
[105.40507507 382.01232910]
[105.40507507 397.01232910]
[105.40507507 412.01232910]
[105.40507507 427.01232910]
[105.40507507 442.01232910]
[105.40507507 457.01232910]
[119.94496155 461.07363892]
[132.84933472 468.90814209]
[143.16062927 479.93447876]
[150.11364746 493.33441162]
[153.19244385 508.11355591]
[152.16854858 523.17523193]
[147.11795044 537.40179443]
[138.41542053 549.73742676]
[126.70676422 559.26684570]
[112.86082458 565.28289795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[31 121]
[32 120]
[34 118]
[35 117]
[39 47]
[40 46]
[41 45]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[66 115]
[67 114]
[68 113]
[69 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
