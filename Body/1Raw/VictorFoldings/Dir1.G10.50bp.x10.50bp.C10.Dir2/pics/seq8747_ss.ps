%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCUGUCGCGGGGGGGGGGCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGxxxxxxxxxxCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCCCCCCCCCCCUCGCUGUCAC\
) } def
/len { sequence length } bind def

/coor [
[67.99810028 153.18473816]
[56.20111465 143.98176575]
[46.94906998 132.22323608]
[40.77954865 118.59236908]
[38.05103302 103.88119507]
[38.92206573 88.94449615]
[43.34203339 74.65018463]
[51.05411530 61.82882690]
[61.61019897 51.22540283]
[74.39691925 43.45603180]
[88.67131042 38.97214508]
[87.73568726 24.00135422]
[86.80005646 9.03056335]
[85.86442566 -5.94022799]
[84.92880249 -20.91102028]
[83.99317169 -35.88180923]
[83.05754089 -50.85260391]
[82.12191772 -65.82339478]
[81.18628693 -80.79418945]
[80.25065613 -95.76497650]
[79.31503296 -110.73577118]
[78.37940216 -125.70655823]
[63.37493515 -125.66777802]
[48.39500427 -126.52639771]
[33.49323654 -128.27934265]
[18.72297478 -130.92034912]
[4.13709259 -134.43994141]
[-10.21219540 -138.82553101]
[-24.27352142 -144.06143188]
[-37.99655151 -150.12889099]
[-51.33215714 -157.00617981]
[-64.23260498 -164.66868591]
[-76.65171051 -173.08897400]
[-88.54501343 -182.23692322]
[-99.86994171 -192.07975769]
[-110.58596039 -202.58226013]
[-120.65470123 -213.70681763]
[-130.04013062 -225.41363525]
[-138.70863342 -237.66076660]
[-146.62919617 -250.40440369]
[-153.77345276 -263.59890747]
[-160.11582947 -277.19708252]
[-165.63363647 -291.15017700]
[-170.30709839 -305.40832520]
[-174.11950684 -319.92041016]
[-177.05720520 -334.63455200]
[-179.10966492 -349.49801636]
[-180.26956177 -364.45764160]
[-180.53273010 -379.45983887]
[-179.89823914 -394.45092773]
[-178.36834717 -409.37725830]
[-175.94853210 -424.18536377]
[-172.64744568 -438.82223511]
[-168.47694397 -453.23550415]
[-163.45191956 -467.37356567]
[-157.59036255 -481.18579102]
[-150.91328430 -494.62277222]
[-143.44454956 -507.63635254]
[-135.21092224 -520.17999268]
[-126.24187469 -532.20880127]
[-116.56950378 -543.67962646]
[-106.22843933 -554.55151367]
[-95.25569153 -564.78552246]
[-83.69055176 -574.34497070]
[-71.57441711 -583.19567871]
[-58.95065689 -591.30590820]
[-45.86446381 -598.64666748]
[-32.36268234 -605.19171143]
[-18.49364662 -610.91760254]
[-4.30700493 -615.80377197]
[10.14645958 -619.83276367]
[24.81500626 -622.99017334]
[39.64612198 -625.26470947]
[54.58672333 -626.64819336]
[69.58332062 -627.13568115]
[84.58222198 -626.72546387]
[99.52975464 -625.41894531]
[114.37239075 -623.22082520]
[129.05700684 -620.13903809]
[143.53103638 -616.18457031]
[157.74266052 -611.37152100]
[171.64100647 -605.71716309]
[185.17633057 -599.24176025]
[198.30015564 -591.96850586]
[210.96553040 -583.92340088]
[223.12710571 -575.13525391]
[234.74133301 -565.63549805]
[245.76664734 -555.45819092]
[256.16357422 -544.63970947]
[265.89492798 -533.21881104]
[274.92581177 -521.23638916]
[283.22393799 -508.73535156]
[290.75961304 -495.76040649]
[297.50582886 -482.35800171]
[303.43844604 -468.57614136]
[308.53625488 -454.46417236]
[312.78094482 -440.07257080]
[316.15737915 -425.45288086]
[318.65344238 -410.65744019]
[320.26022339 -395.73919678]
[320.97192383 -380.75158691]
[320.78604126 -365.74819946]
[319.70321655 -350.78280640]
[317.72735596 -335.90896606]
[314.86550903 -321.17990112]
[311.12789917 -306.64834595]
[306.52795410 -292.36633301]
[301.08209229 -278.38497925]
[294.80984497 -264.75433350]
[287.73364258 -251.52320862]
[279.87884521 -238.73893738]
[271.27355957 -226.44729614]
[261.94854736 -214.69230652]
[251.93725586 -203.51600647]
[241.27548218 -192.95845032]
[230.00140381 -183.05740356]
[218.15538025 -173.84831238]
[205.77981567 -165.36416626]
[192.91902161 -157.63529968]
[179.61901855 -150.68940735]
[165.92742920 -144.55134583]
[151.89324951 -139.24307251]
[137.56675720 -134.78361511]
[122.99919128 -131.18893433]
[108.24272919 -128.47187805]
[93.35018921 -126.64218903]
[94.28582001 -111.67139435]
[95.22145081 -96.70060730]
[96.15708160 -81.72981262]
[97.09270477 -66.75902557]
[98.02833557 -51.78823090]
[98.96396637 -36.81744003]
[99.89958954 -21.84664726]
[100.83522034 -6.87585640]
[101.77085114 8.09493542]
[102.70647430 23.06572723]
[103.64210510 38.03651810]
[118.36370087 40.70824432]
[132.01826477 46.82511520]
[143.81242371 56.03171921]
[153.06085205 67.79309845]
[159.22616577 81.42586517]
[161.95016479 96.13787842]
[161.07452393 111.07430267]
[156.65016174 125.36724854]
[148.93412781 138.18623352]
[138.37478638 148.78640747]
[125.58567047 156.55184937]
[111.30989838 161.03134155]
[96.37696838 161.96459961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
