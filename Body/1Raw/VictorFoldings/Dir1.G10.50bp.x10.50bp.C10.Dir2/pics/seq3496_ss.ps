%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCAUCACCCGGGGGGGGGGUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAxxxxxxxxxxACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCCCCCCCCCCCUAUCAUCACCC\
) } def
/len { sequence length } bind def

/coor [
[85.13629150 162.72058105]
[71.07375336 157.60272217]
[58.57036591 149.38003540]
[48.30007172 138.49569702]
[40.81644821 125.53642273]
[36.52287292 111.20071411]
[35.65076828 96.26126862]
[38.24714661 81.52334595]
[44.17205811 67.78133392]
[53.10614395 55.77593613]
[64.56784821 46.15425110]
[77.93938446 39.43490219]
[92.50000000 35.98006821]
[92.50000000 20.98006821]
[92.50000000 5.98006725]
[92.50000000 -9.01993275]
[92.50000000 -24.01993179]
[92.50000000 -39.01993179]
[92.50000000 -54.01993179]
[92.50000000 -69.01993561]
[92.50000000 -84.01993561]
[92.50000000 -99.01993561]
[92.50000000 -114.01993561]
[92.50000000 -129.01992798]
[77.52111053 -129.89222717]
[62.61828232 -131.63400269]
[47.84194183 -134.23934937]
[33.24208832 -137.69946289]
[18.86812401 -142.00262451]
[4.76868677 -147.13427734]
[-9.00851727 -153.07707214]
[-22.41686821 -159.81088257]
[-35.41099548 -167.31292725]
[-47.94693756 -175.55781555]
[-59.98226547 -184.51766968]
[-71.47626495 -194.16215515]
[-82.39003754 -204.45863342]
[-92.68666077 -215.37228394]
[-102.33128357 -226.86616516]
[-111.29128265 -238.90138245]
[-119.53633118 -251.43721008]
[-127.03854370 -264.43124390]
[-133.77252197 -277.83950806]
[-139.71546936 -291.61663818]
[-144.84730530 -305.71603394]
[-149.15065002 -320.08993530]
[-152.61094666 -334.68975830]
[-155.21647644 -349.46606445]
[-156.95843506 -364.36886597]
[-157.83091736 -379.34774780]
[-157.83097839 -394.35202026]
[-156.95861816 -409.33090210]
[-155.21678162 -424.23370361]
[-152.61137390 -439.01004028]
[-149.15119934 -453.60989380]
[-144.84797668 -467.98382568]
[-139.71626282 -482.08325195]
[-133.77342224 -495.86041260]
[-127.03955078 -509.26873779]
[-119.53745270 -522.26281738]
[-111.29251099 -534.79876709]
[-102.33261108 -546.83404541]
[-92.68807983 -558.32800293]
[-82.39154816 -569.24176025]
[-71.47785950 -579.53833008]
[-59.98394012 -589.18286133]
[-47.94868469 -598.14282227]
[-35.41281509 -606.38781738]
[-22.41874695 -613.89001465]
[-9.01045227 -620.62390137]
[4.76670265 -626.56683350]
[18.86609840 -631.69860840]
[33.24002457 -636.00189209]
[47.83985138 -639.46209717]
[62.61616898 -642.06756592]
[77.51898193 -643.80944824]
[92.49786377 -644.68188477]
[107.50213623 -644.68188477]
[122.48101807 -643.80944824]
[137.38383484 -642.06756592]
[152.16015625 -639.46209717]
[166.75997925 -636.00189209]
[181.13389587 -631.69860840]
[195.23329163 -626.56683350]
[209.01045227 -620.62390137]
[222.41874695 -613.89001465]
[235.41281128 -606.38781738]
[247.94868469 -598.14282227]
[259.98394775 -589.18286133]
[271.47787476 -579.53833008]
[282.39154053 -569.24176025]
[292.68807983 -558.32800293]
[302.33261108 -546.83404541]
[311.29251099 -534.79876709]
[319.53744507 -522.26281738]
[327.03955078 -509.26873779]
[333.77340698 -495.86041260]
[339.71624756 -482.08325195]
[344.84799194 -467.98382568]
[349.15121460 -453.60989380]
[352.61138916 -439.01004028]
[355.21679688 -424.23370361]
[356.95861816 -409.33090210]
[357.83096313 -394.35202026]
[357.83090210 -379.34774780]
[356.95843506 -364.36886597]
[355.21646118 -349.46606445]
[352.61093140 -334.68975830]
[349.15066528 -320.08993530]
[344.84732056 -305.71603394]
[339.71548462 -291.61663818]
[333.77252197 -277.83950806]
[327.03854370 -264.43124390]
[319.53634644 -251.43721008]
[311.29129028 -238.90138245]
[302.33129883 -226.86616516]
[292.68664551 -215.37228394]
[282.39004517 -204.45863342]
[271.47625732 -194.16215515]
[259.98226929 -184.51766968]
[247.94692993 -175.55781555]
[235.41099548 -167.31292725]
[222.41687012 -159.81088257]
[209.00851440 -153.07707214]
[195.23130798 -147.13427734]
[181.13188171 -142.00262451]
[166.75790405 -137.69946289]
[152.15806580 -134.23934937]
[137.38171387 -131.63400269]
[122.47888947 -129.89222717]
[107.50000000 -129.01992798]
[107.50000000 -114.01993561]
[107.50000000 -99.01993561]
[107.50000000 -84.01993561]
[107.50000000 -69.01993561]
[107.50000000 -54.01993179]
[107.50000000 -39.01993179]
[107.50000000 -24.01993179]
[107.50000000 -9.01993275]
[107.50000000 5.98006725]
[107.50000000 20.98006821]
[107.50000000 35.98006821]
[122.06061554 39.43490219]
[135.43214417 46.15425110]
[146.89385986 55.77593613]
[155.82794189 67.78133392]
[161.75285339 81.52334595]
[164.34922791 96.26126862]
[163.47712708 111.20071411]
[159.18354797 125.53642273]
[151.69993591 138.49569702]
[141.42964172 149.38003540]
[128.92623901 157.60272217]
[114.86370850 162.72058105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
