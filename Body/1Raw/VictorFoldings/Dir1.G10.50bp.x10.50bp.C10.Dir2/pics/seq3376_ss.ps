%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGCUAUAUGGGGGGGGGGACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACxxxxxxxxxxCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCACCCCCCCCCCUAGGCUAUGU\
) } def
/len { sequence length } bind def

/coor [
[61.34750366 491.91711426]
[47.50156403 485.90109253]
[35.79290390 476.37167358]
[27.09037971 464.03601074]
[22.03977776 449.80947876]
[21.01588631 434.74780273]
[24.09468460 419.96862793]
[31.04770660 406.56869507]
[41.35898972 395.54238892]
[54.26337051 387.70785522]
[68.80326080 383.64654541]
[68.80326080 368.64654541]
[68.80326080 353.64654541]
[68.80326080 338.64654541]
[68.80326080 323.64654541]
[68.80326080 308.64654541]
[68.80326080 293.64654541]
[68.80326080 278.64654541]
[68.80326080 263.64654541]
[68.80326080 248.64656067]
[63.78493500 246.40992737]
[59.38399124 243.12089539]
[55.32391357 258.39477539]
[41.61101532 266.25173950]
[26.38091660 262.03039551]
[18.66936684 248.23519897]
[23.05148888 233.05058289]
[36.92744827 225.48532104]
[52.06488419 230.02774048]
[52.74449158 216.37985229]
[60.63516998 204.97573853]
[73.53984070 199.36691284]
[76.33216858 184.62910461]
[79.12448883 169.89131165]
[81.91681671 155.15350342]
[84.70913696 140.41569519]
[69.84733582 134.53971863]
[57.38143921 123.12329865]
[49.38293076 107.19107819]
[47.47306061 88.53665924]
[52.54201126 69.52325439]
[64.55566406 52.78438187]
[82.48446655 40.86234665]
[71.82283783 30.31105804]
[61.16121292 19.75976753]
[50.49958801 9.20847797]
[39.83795929 -1.34281266]
[29.17633438 -11.89410305]
[18.51470757 -22.44539261]
[7.63588238 -32.77259827]
[-3.45543289 -42.87124634]
[-14.54674816 -52.96989822]
[-25.63806343 -63.06854630]
[-41.76639557 -66.03652954]
[-47.00452042 -81.57660675]
[-35.96390533 -93.70248413]
[-20.00218773 -89.94009399]
[-15.53941441 -74.15985870]
[-4.44809866 -64.06121063]
[6.64321661 -53.96256256]
[17.73453140 -43.86391449]
[22.52307129 -43.19652939]
[26.92316628 -39.47222137]
[29.06599808 -33.10701752]
[39.72762299 -22.55572891]
[50.38925171 -12.00443935]
[61.05087662 -1.45314860]
[71.71250153 9.09814167]
[82.37413025 19.64943123]
[93.03575897 30.20072174]
[100.43210602 28.95816231]
[96.13420868 14.58707905]
[91.83631134 0.21599434]
[82.48017120 -11.50845528]
[84.83492279 -26.32247543]
[97.36535645 -34.56796646]
[111.90218353 -30.86923218]
[118.96802521 -17.63768196]
[113.95665741 -3.50013995]
[114.59073639 11.48645210]
[115.22481537 26.47304344]
[122.62117004 25.23048592]
[129.24966431 11.77451992]
[135.87817383 -1.68144596]
[134.25920105 -18.00048256]
[147.73835754 -27.34094238]
[162.44944763 -20.09416008]
[163.25895691 -3.71500564]
[149.33413696 4.94705248]
[142.70562744 18.40301895]
[136.07713318 31.85898399]
[147.37614441 41.72470474]
[159.81558228 33.34256363]
[172.25502014 24.96042061]
[171.81669617 9.53928471]
[179.80479431 -3.65896106]
[193.67036438 -10.42280579]
[208.98893738 -8.59393024]
[220.87242126 1.24407756]
[225.52883911 15.95194530]
[221.47233582 30.83644485]
[209.99732971 41.14798737]
[194.76547241 43.59619904]
[180.63716125 37.39986038]
[168.19772339 45.78200531]
[155.75828552 54.16414642]
[159.91616821 68.57636261]
[174.90885925 69.04440308]
[189.90156555 69.51244354]
[204.89425659 69.98049164]
[215.17918396 58.20109177]
[230.63745117 55.83966064]
[243.97010803 64.01119995]
[248.88191223 78.85735321]
[243.05364990 93.36821747]
[229.23724365 100.69221497]
[213.95637512 97.37117004]
[204.42622375 84.97318268]
[189.43351746 84.50514221]
[174.44082642 84.03710175]
[159.44813538 83.56906128]
[152.19195557 118.93879700]
[128.07598877 140.60556030]
[99.44694519 143.20802307]
[96.65462494 157.94581604]
[93.86229706 172.68362427]
[91.06996918 187.42143250]
[88.27764893 202.15924072]
[100.60695648 217.41390991]
[98.59023285 236.63949585]
[83.80326080 248.64656067]
[83.80326080 263.64654541]
[83.80326080 278.64654541]
[83.80326080 293.64654541]
[83.80326080 308.64654541]
[83.80326080 323.64654541]
[83.80326080 338.64654541]
[83.80326080 353.64654541]
[83.80326080 368.64654541]
[83.80326080 383.64654541]
[98.34314728 387.70785522]
[111.24752808 395.54238892]
[121.55880737 406.56869507]
[128.51182556 419.96862793]
[131.59063721 434.74780273]
[130.56674194 449.80947876]
[125.51613617 464.03601074]
[116.81361389 476.37167358]
[105.10494995 485.90109253]
[91.25901031 491.91711426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 29]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 61]
[51 60]
[52 59]
[53 58]
[82 91]
[83 90]
[84 89]
[92 106]
[93 105]
[94 104]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
