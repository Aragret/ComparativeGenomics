%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCCUCCGGGGGGGGGGUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCxxxxxxxxxxCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGCCCCCCCCCCUCUACCCUCC\
) } def
/len { sequence length } bind def

/coor [
[90.70524597 381.55148315]
[76.85930634 375.53546143]
[65.15064240 366.00604248]
[56.44812012 353.67037964]
[51.39751816 339.44384766]
[50.37362671 324.38217163]
[53.45242310 309.60299683]
[60.40544510 296.20309448]
[70.71672821 285.17675781]
[83.62110901 277.34225464]
[98.16099548 273.28091431]
[98.16099548 258.28091431]
[98.16099548 243.28092957]
[98.16099548 228.28092957]
[98.16099548 213.28092957]
[98.16099548 198.28092957]
[98.16099548 183.28092957]
[98.16099548 168.28092957]
[98.16099548 153.28092957]
[98.16099548 138.28092957]
[98.16099548 123.28092957]
[85.46607208 115.29100800]
[71.94187927 121.77917480]
[58.41769028 128.26734924]
[44.89349747 134.75550842]
[33.22804642 147.05809021]
[18.17693329 139.25422668]
[21.50926208 122.63098907]
[38.40533447 121.23131561]
[51.92952347 114.74314880]
[65.45371246 108.25498962]
[78.97790527 101.76682281]
[87.61701965 89.50445557]
[89.17459869 74.58554077]
[90.73217773 59.66662979]
[92.28976440 44.74771881]
[93.84734344 29.82880402]
[84.19347382 20.38102722]
[81.79923248 7.28539658]
[87.32164001 -4.61322927]
[98.53054810 -11.04419231]
[100.39815521 -25.92747116]
[102.11084747 -40.82937241]
[103.66842651 -55.74828720]
[105.22601318 -70.66719818]
[102.84848785 -76.94850922]
[103.89081573 -82.61815643]
[107.17133331 -86.16973114]
[109.34816742 -101.01094055]
[111.52500153 -115.85214233]
[113.70184326 -130.69334412]
[115.87867737 -145.53456116]
[110.57042694 -144.92147827]
[104.78307343 -145.75883484]
[98.88203430 -148.18438721]
[93.26371002 -152.24894714]
[88.33562469 -157.91026306]
[84.49557495 -165.03140259]
[77.31307220 -178.19998169]
[70.13056183 -191.36856079]
[62.94805145 -204.53713989]
[48.67494965 -212.61245728]
[48.80241013 -229.01110840]
[63.19931030 -236.86357117]
[77.05535889 -228.09191895]
[76.11663055 -211.71965027]
[83.29914093 -198.55107117]
[90.48165131 -185.38249207]
[97.66416168 -172.21391296]
[105.07303619 -171.04835510]
[105.08315277 -186.04835510]
[105.09326172 -201.04835510]
[105.10337067 -216.04833984]
[98.37156677 -229.45292664]
[100.77535248 -244.25906372]
[111.40211487 -254.84547424]
[126.21730042 -257.19290161]
[139.59616089 -250.41014099]
[146.45930481 -237.07232666]
[144.20106506 -222.24328613]
[133.67861938 -211.55293274]
[129.08268738 -197.27436829]
[124.48674011 -182.99581909]
[119.89080048 -168.71725464]
[127.29967499 -167.55169678]
[138.17849731 -177.87890625]
[149.05732727 -188.20611572]
[153.16229248 -196.44026184]
[160.27154541 -198.63208008]
[171.36286926 -208.73072815]
[175.63824463 -216.87770081]
[182.79154968 -218.92114258]
[194.09056091 -228.78686523]
[196.60473633 -244.63169861]
[210.63079834 -252.41944885]
[225.40914917 -246.17605591]
[229.60308838 -230.69088745]
[219.99540710 -217.84284973]
[203.95628357 -217.48786926]
[192.65727234 -207.62214661]
[181.46151733 -197.63941956]
[170.37019348 -187.54077148]
[159.38453674 -177.32728577]
[148.50570679 -167.00007629]
[137.62687683 -156.67288208]
[130.71987915 -143.35772705]
[128.54304504 -128.51651001]
[126.36621094 -113.67530823]
[124.18936920 -98.83410645]
[122.01253510 -83.99289703]
[120.14492035 -69.10961914]
[118.58734131 -54.19070435]
[117.02976227 -39.27179337]
[119.47914886 -32.24711227]
[115.28144073 -24.05985832]
[113.41382599 -9.17657852]
[124.28644562 3.61576271]
[122.53978729 20.65199661]
[108.76625824 31.38638496]
[107.20867157 46.30529785]
[105.65109253 61.22420883]
[104.09351349 76.14311981]
[102.53593445 91.06203461]
[106.77249908 90.35655975]
[111.59722900 91.67268372]
[116.08486176 95.25376129]
[119.24073792 100.94102478]
[120.16703033 108.16439056]
[118.22391510 115.99882507]
[113.16099548 123.28092957]
[113.16099548 138.28092957]
[113.16099548 153.28092957]
[113.16099548 168.28092957]
[113.16099548 183.28092957]
[113.16099548 198.28092957]
[113.16099548 213.28092957]
[113.16099548 228.28092957]
[113.16099548 243.28092957]
[113.16099548 258.28091431]
[113.16099548 273.28091431]
[127.70088196 277.34225464]
[140.60527039 285.17675781]
[150.91654968 296.20309448]
[157.86956787 309.60299683]
[160.94836426 324.38217163]
[159.92448425 339.44384766]
[154.87387085 353.67037964]
[146.17135620 366.00604248]
[134.46269226 375.53546143]
[120.61675262 381.55148315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 32]
[23 31]
[24 30]
[25 29]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[41 116]
[42 115]
[43 113]
[44 112]
[45 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[58 69]
[59 68]
[60 67]
[61 66]
[85 105]
[86 104]
[87 103]
[89 102]
[90 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
