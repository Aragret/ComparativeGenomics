%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCCUACGGGGGGGGGGCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCxxxxxxxxxxUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCCAUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[-7.53225899 238.13746643]
[-17.49165916 229.77232361]
[-26.80249023 220.69081116]
[-35.41335678 210.94308472]
[-43.27671814 200.58293152]
[-50.34917831 189.66755676]
[-56.59169006 178.25718689]
[-61.96979523 166.41484070]
[-66.45380402 154.20587158]
[-70.01896667 141.69767761]
[-84.72692871 144.64315796]
[-99.43489075 147.58863831]
[-114.14285278 150.53413391]
[-128.85081482 153.47961426]
[-138.25054932 168.19635010]
[-155.04887390 171.52801514]
[-168.80165100 161.89892578]
[-183.44514465 165.14976501]
[-198.08865356 168.40058899]
[-212.73214722 171.65141296]
[-221.23959351 184.69982910]
[-236.13648987 187.78802490]
[-248.52372742 179.59706116]
[-263.16723633 182.84788513]
[-277.81072998 186.09870911]
[-292.45425415 189.34954834]
[-295.88882446 204.22120667]
[-305.44253540 216.12452698]
[-319.21850586 222.69610596]
[-334.48147583 222.63113403]
[-348.20098877 215.94252014]
[-357.65304565 203.95829773]
[-360.96087646 189.05793762]
[-357.46777344 174.19990540]
[-347.86724854 162.33428955]
[-334.06552124 155.81701660]
[-318.80291748 155.94209290]
[-305.10983276 162.68467712]
[-295.70507812 174.70603943]
[-281.06155396 171.45521545]
[-266.41806030 168.20439148]
[-251.77456665 164.95356750]
[-244.01687622 152.29046631]
[-229.21258545 148.78506470]
[-215.98297119 157.00790405]
[-201.33947754 153.75708008]
[-186.69596863 150.50625610]
[-172.05247498 147.25543213]
[-166.69755554 135.49440002]
[-155.36730957 128.88381958]
[-142.10520935 130.04330444]
[-131.79629517 138.77165222]
[-117.08833313 135.82617188]
[-102.38037109 132.88069153]
[-87.67240906 129.93519592]
[-72.96444702 126.98971558]
[-74.80177307 109.45971680]
[-74.86697388 91.83380890]
[-73.15939331 74.29069519]
[-69.69635010 57.00821304]
[-64.51293945 40.16157913]
[-57.66172409 23.92157936]
[-49.21214676 8.45285320]
[-39.24987793 -6.08777809]
[-27.87590981 -19.55290413]
[-15.20555019 -31.80601883]
[-1.36725056 -42.72289658]
[13.49869728 -52.19287109]
[29.24158478 -60.11993027]
[45.70181274 -66.42371368]
[62.71250916 -71.04031372]
[80.10122681 -73.92292786]
[97.69166565 -75.04232788]
[115.30551147 -74.38717651]
[132.76419067 -71.96410370]
[149.89071655 -67.79768372]
[166.51144409 -61.93014526]
[182.45790100 -54.42098236]
[197.56840515 -45.34631729]
[211.68977356 -34.79814911]
[224.67883301 -22.88341522]
[236.40391541 -9.72290134]
[248.48391724 -18.61525154]
[260.56390381 -27.50760078]
[272.64389038 -36.39995193]
[283.41470337 -46.83976364]
[292.67965698 -58.63640213]
[301.94458008 -70.43304443]
[311.20953369 -82.22968292]
[312.99624634 -98.53120422]
[328.11407471 -104.88605499]
[341.01104736 -94.75690460]
[338.41992188 -78.56375885]
[323.00619507 -72.96473694]
[313.74124146 -61.16809464]
[304.47628784 -49.37145233]
[295.21133423 -37.57481384]
[309.53317261 -42.03404617]
[324.44335938 -40.39500809]
[337.45452881 -32.93112564]
[346.39611816 -20.88754463]
[349.77648926 -6.27340364]
[347.03170776 8.47333050]
[338.61965942 20.89257240]
[325.94369507 28.91251183]
[311.11840820 31.19524574]
[296.61700439 27.35996056]
[284.85864258 18.04646873]
[277.80490112 4.80847073]
[276.63247681 -10.14564037]
[281.53622437 -24.31996155]
[269.45623779 -15.42761230]
[257.37625122 -6.53526306]
[245.29626465 2.35708666]
[252.14486694 13.41429901]
[258.15359497 24.94947624]
[263.28930664 36.89894104]
[267.52365112 49.19673538]
[270.83322144 61.77496719]
[273.19979858 74.56420898]
[274.61026001 87.49385834]
[275.05685425 100.49254608]
[274.53710938 113.48851013]
[273.05392456 126.41001892]
[270.61541748 139.18572998]
[267.23510742 151.74514771]
[262.93164062 164.01892090]
[257.72879028 175.93930054]
[251.65522766 187.44047546]
[244.74452209 198.45896912]
[237.03479004 208.93397522]
[228.56863403 218.80763245]
[219.39274597 228.02546692]
[209.55778503 236.53657532]
[199.11807251 244.29399109]
[188.13119507 251.25486755]
[176.65783691 257.38082886]
[164.76130676 262.63800049]
[152.50729370 266.99740601]
[139.96342468 270.43493652]
[127.19896698 272.93167114]
[114.28435516 274.47378540]
[101.29089355 275.05279541]
[88.29030609 274.66546631]
[75.35436249 273.31399536]
[62.55445862 271.00576782]
[49.96126556 267.75360107]
[37.64429092 263.57540894]
[25.67152596 258.49423218]
[14.10906506 252.53816223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[17 48]
[18 47]
[19 46]
[20 45]
[23 42]
[24 41]
[25 40]
[26 39]
[82 114]
[83 113]
[84 112]
[85 111]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
