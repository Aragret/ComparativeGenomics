%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAGGAGGGGGGGGGGGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACxxxxxxxxxxGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAACCCCCCCCCCAAAUAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[68.83776093 343.24032593]
[64.68159485 328.66287231]
[65.76496124 313.54330444]
[71.95702362 299.70730591]
[82.51007080 288.82574463]
[96.14977264 282.21252441]
[94.59218597 267.29360962]
[90.74464417 260.92636108]
[93.16071320 252.04859924]
[91.91383362 237.10050964]
[90.66696167 222.15243530]
[89.42008972 207.20434570]
[88.17321014 192.25625610]
[86.92633820 177.30816650]
[85.67946625 162.36007690]
[84.43258667 147.41198730]
[71.04630280 140.64387512]
[58.26894379 148.50129700]
[45.49158859 156.35873413]
[32.71422958 164.21615601]
[19.93687439 172.07357788]
[7.15951633 179.93099976]
[-0.16281755 194.60464478]
[-16.54591942 195.32991028]
[-25.13625717 181.36073303]
[-17.09683037 167.06738281]
[-0.69790941 167.15365601]
[12.07944775 159.29621887]
[24.85680580 151.43879700]
[37.63416290 143.58137512]
[50.41151810 135.72395325]
[63.18887711 127.86652374]
[57.37372208 116.14926147]
[55.13451385 103.43083954]
[56.56100845 90.76373291]
[61.44347382 79.16952515]
[69.29733276 69.55648041]
[79.40964508 62.64850235]
[90.90312195 58.93095016]
[102.81189728 58.61734772]
[106.51805878 44.08241272]
[110.22422028 29.54747772]
[94.78675842 12.44795036]
[94.03388977 -10.38305569]
[108.07123566 -28.15838814]
[103.16968536 -42.33494568]
[98.26812744 -56.51150513]
[93.36657715 -70.68806458]
[78.56716919 -68.05672455]
[63.53833008 -67.77304840]
[48.65016174 -69.84401703]
[34.26929474 -74.21862793]
[20.74987793 -80.78915405]
[8.42483425 -89.39379120]
[-2.40231943 -99.82064819]
[-11.46495533 -111.81294250]
[-18.53989792 -125.07535553]
[-23.45291901 -139.28129578]
[-26.08303261 -154.08091736]
[-26.36546898 -169.10978699]
[-24.29327393 -183.99778748]
[-19.91747475 -198.37829590]
[-13.34583282 -211.89717102]
[-4.74017763 -224.22149658]
[5.68756676 -235.04779053]
[17.68060875 -244.10943604]
[30.94360924 -251.18328857]
[45.14995193 -256.09512329]
[59.94979858 -258.72402954]
[74.97868347 -259.00521851]
[89.86650848 -256.93179321]
[104.24665070 -252.55480957]
[117.76498413 -245.98205566]
[130.08860779 -237.37538147]
[140.91404724 -226.94674683]
[149.97470093 -214.95295715]
[157.04745483 -201.68937683]
[161.95812988 -187.48262024]
[164.58580017 -172.68255615]
[164.86575317 -157.65365601]
[162.79110718 -142.76599121]
[158.41293335 -128.38621521]
[151.83906555 -114.86842346]
[143.23136902 -102.54550934]
[132.80184937 -91.72093964]
[120.80730438 -82.66127014]
[107.54313660 -75.58961487]
[112.44468689 -61.41305542]
[117.34623718 -47.23649597]
[122.24778748 -33.05994034]
[129.58592224 -32.98910522]
[136.72492981 -31.28978920]
[143.30801392 -28.04691887]
[149.00613403 -23.42257690]
[153.53451538 -17.64789009]
[167.76129150 -22.40170479]
[181.98806763 -27.15551949]
[196.21485901 -31.90933418]
[197.24644470 -47.07522583]
[204.00772095 -60.68968964]
[215.46763611 -70.67661285]
[229.87864685 -75.51306915]
[245.04316711 -74.46153259]
[258.64871216 -67.68235779]
[268.62057495 -56.20930862]
[273.43804932 -41.79195023]
[272.36657715 -26.62882614]
[265.56948853 -13.03219891]
[254.08334351 -3.07545757]
[239.65966797 1.72306848]
[224.49797058 0.63163811]
[210.91029358 -6.18331337]
[200.96867371 -17.68255424]
[186.74188232 -12.92874050]
[172.51510620 -8.17492485]
[158.28833008 -3.42111039]
[157.60612488 7.61533022]
[153.28445435 17.85503578]
[145.77661133 26.12711525]
[135.90249634 31.47220230]
[124.75915527 33.25363922]
[121.05299377 47.78857422]
[117.34683228 62.32350922]
[129.34056091 69.85781097]
[138.24703979 81.12512207]
[142.93664551 94.91014862]
[142.74386597 109.66828918]
[137.55836487 123.69861603]
[127.85274506 135.33987427]
[114.64250183 143.16706848]
[99.38067627 146.16511536]
[100.62754822 161.11320496]
[101.87442017 176.06129456]
[103.12129974 191.00938416]
[104.36817169 205.95747375]
[105.61505127 220.90554810]
[106.86192322 235.85363770]
[108.10879517 250.80172729]
[109.51110077 265.73602295]
[111.06867981 280.65493774]
[125.78022766 284.30819702]
[138.35334778 292.77532959]
[147.26976013 305.03393555]
[151.45278931 319.60369873]
[150.39729309 334.72528076]
[144.23072815 348.57263184]
[133.69775391 359.47366333]
[120.07027435 366.11196899]
[104.99385834 367.68600464]
[90.28907013 364.00564575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 140]
[7 139]
[9 138]
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[40 123]
[41 122]
[42 121]
[45 90]
[46 89]
[47 88]
[48 87]
[95 116]
[96 115]
[97 114]
[98 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
