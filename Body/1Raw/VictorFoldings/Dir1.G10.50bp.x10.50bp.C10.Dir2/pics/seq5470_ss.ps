%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACACCCUGGGGGGGGGGUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCxxxxxxxxxxCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCCCCCCCCCCCUAACAACCU\
) } def
/len { sequence length } bind def

/coor [
[88.60611725 364.67654419]
[74.76017761 358.66052246]
[63.05151749 349.13110352]
[54.34899521 336.79544067]
[49.29839325 322.56890869]
[48.27450180 307.50723267]
[51.35329819 292.72805786]
[58.30632019 279.32812500]
[68.61760712 268.30181885]
[81.52198792 260.46728516]
[96.06187439 256.40597534]
[96.06187439 241.40599060]
[96.06187439 226.40599060]
[96.06187439 211.40599060]
[96.06187439 196.40599060]
[96.06187439 181.40599060]
[96.06187439 166.40599060]
[96.06187439 151.40599060]
[96.06187439 136.40599060]
[96.06187439 121.40598297]
[88.87049103 134.56971741]
[88.21359253 149.55532837]
[81.25740814 162.84486389]
[69.31767273 171.92465210]
[54.65271759 175.07730103]
[40.03636551 171.70649719]
[28.23323250 162.44982910]
[21.47582245 149.05813599]
[21.04227257 134.06440735]
[27.01458549 120.30462646]
[38.26312637 110.38140106]
[52.66028214 106.17166901]
[67.47974396 108.47044373]
[81.79933929 104.00397491]
[67.09137726 101.05848694]
[52.38341141 98.11300659]
[37.67545319 95.16752625]
[22.96748924 92.22203827]
[8.25952816 89.27655792]
[-4.75203657 98.24732971]
[-20.28057289 95.30792236]
[-29.11327553 82.20223999]
[-26.00985909 66.70565033]
[-12.81152439 58.01200485]
[2.65138984 61.27908707]
[11.20501137 74.56859589]
[25.91297340 77.51408386]
[40.62093353 80.45956421]
[55.32889557 83.40504456]
[70.03685760 86.35052490]
[84.74481964 89.29601288]
[88.53977203 82.82698059]
[81.12976837 69.78505707]
[96.12968445 69.88892365]
[99.92463684 63.41989899]
[90.17698669 52.01887894]
[74.54368591 47.06589127]
[71.28118134 30.99454689]
[83.74564362 20.33766747]
[99.11471558 26.05813599]
[101.57800293 42.27122498]
[111.32565308 53.67224503]
[108.19026184 39.00359726]
[118.33248901 27.95212173]
[133.21577454 29.81969833]
[140.31304932 43.03441238]
[133.65057373 56.47366714]
[145.91294861 47.83454895]
[158.17530823 39.19543457]
[150.85789490 26.08539772]
[144.95094299 12.28229141]
[140.51921082 -2.06265140]
[137.61122131 -16.79225922]
[136.25885010 -31.74514580]
[136.47691345 -46.75747681]
[138.26303101 -61.66477585]
[141.59762573 -76.30370331]
[146.44415283 -90.51387024]
[152.74951172 -104.13958740]
[160.44464111 -117.03154755]
[169.44520569 -129.04852295]
[179.65260315 -140.05882263]
[190.95497131 -149.94183350]
[203.22851562 -158.58926392]
[216.33872986 -165.90637207]
[230.14198303 -171.81297302]
[244.48703003 -176.24436951]
[259.21670532 -179.15199280]
[274.16961670 -180.50399780]
[289.18194580 -180.28556824]
[304.08920288 -178.49909973]
[318.72805786 -175.16415405]
[332.93811035 -170.31727600]
[346.56365967 -164.01158142]
[359.45544434 -156.31614685]
[371.47219849 -147.31529236]
[382.48223877 -137.10763550]
[392.36499023 -125.80500793]
[401.01211548 -113.53126526]
[408.32891846 -100.42087555]
[414.23516846 -86.61747742]
[418.66622925 -72.27232361]
[421.57348633 -57.54257202]
[422.92514038 -42.58961868]
[422.70632935 -27.57729721]
[420.91949463 -12.67008686]
[417.58419800 1.96867943]
[412.73696899 16.17861176]
[406.43093872 29.80401802]
[398.73519897 42.69561005]
[389.73403931 54.71214294]
[379.52612305 65.72195435]
[368.22326660 75.60441589]
[355.94931030 84.25125122]
[342.83874512 91.56771851]
[329.03521729 97.47364807]
[314.68994141 101.90435028]
[299.96011353 104.81126404]
[285.00714111 106.16253662]
[269.99481201 105.94337463]
[255.08764648 104.15618134]
[240.44895935 100.82052612]
[226.23915100 95.97296143]
[212.61389160 89.66659546]
[199.72248840 81.97053528]
[187.70617676 72.96909332]
[176.69660950 62.76090240]
[166.81442261 51.45780182]
[154.55206299 60.09691620]
[142.28968811 68.73603058]
[111.06187439 121.40598297]
[111.06187439 136.40599060]
[111.06187439 151.40599060]
[111.06187439 166.40599060]
[111.06187439 181.40599060]
[111.06187439 196.40599060]
[111.06187439 211.40599060]
[111.06187439 226.40599060]
[111.06187439 241.40599060]
[111.06187439 256.40597534]
[125.60176086 260.46728516]
[138.50614929 268.30181885]
[148.81742859 279.32812500]
[155.77044678 292.72805786]
[158.84924316 307.50723267]
[157.82536316 322.56890869]
[152.77474976 336.79544067]
[144.07223511 349.13110352]
[132.36357117 358.66052246]
[118.51763153 364.67654419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[55 62]
[56 61]
[67 130]
[68 129]
[69 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
