%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUUACCAGGGGGGGGGGUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACxxxxxxxxxxCACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCCCCCCCCCCCUCCCUCACCA\
) } def
/len { sequence length } bind def

/coor [
[99.42620850 406.63708496]
[85.26560974 401.48208618]
[72.67586517 393.19989014]
[62.33592606 382.23709106]
[54.80341339 369.18496704]
[50.48455048 354.74737549]
[49.61223984 339.70291138]
[52.23353195 324.86291504]
[58.20705795 311.02767944]
[67.21067810 298.94332886]
[78.75883484 289.26156616]
[92.22875214 282.50448608]
[106.89401245 279.03649902]
[106.89401245 264.03649902]
[106.89401245 249.03651428]
[106.89401245 234.03651428]
[106.89401245 219.03651428]
[106.89401245 204.03651428]
[106.89401245 189.03651428]
[106.89401245 174.03651428]
[106.89401245 159.03651428]
[106.89401245 144.03651428]
[106.89401245 129.03651428]
[101.40597534 123.92461395]
[100.25630951 138.88049316]
[87.84661102 147.30661011]
[73.52143860 142.85804749]
[68.06771851 128.88461304]
[75.59212494 115.90835571]
[90.42991638 113.70081329]
[84.94187927 108.58892059]
[69.97960663 109.65211487]
[55.01733780 110.71530914]
[40.05506516 111.77850342]
[25.09279060 112.84169769]
[9.72205830 119.99550629]
[-1.40721595 107.20583344]
[7.80173683 92.97097015]
[24.02959442 97.87942505]
[38.99186707 96.81623077]
[53.95413971 95.75303650]
[68.91641235 94.68984222]
[83.87868500 93.62664032]
[96.01393890 84.80986786]
[101.64869690 70.90844727]
[107.28345490 57.00702286]
[93.84138489 50.33407593]
[80.94248962 42.66362762]
[68.66063690 34.03961563]
[57.06619263 24.51143265]
[46.22556305 14.13366318]
[36.20084000 2.96574688]
[27.04945183 -8.92834568]
[18.82381248 -21.48048592]
[11.57103920 -34.61877823]
[5.33267546 -48.26795959]
[0.14445528 -62.34985352]
[-3.96390367 -76.78379822]
[-6.96886873 -91.48712158]
[-8.85322762 -106.37558746]
[-9.60618687 -121.36392975]
[-9.22343349 -136.36630249]
[-7.70716000 -151.29673767]
[-5.06605148 -166.06976318]
[-1.31523585 -180.60072327]
[3.52380204 -194.80638123]
[9.42334461 -208.60540771]
[16.34959793 -221.91871643]
[24.26289177 -234.67007446]
[33.11789703 -246.78643799]
[42.86389160 -258.19839478]
[53.44504929 -268.84060669]
[64.80076599 -278.65209961]
[76.86599731 -287.57662964]
[89.57162476 -295.56314087]
[102.84487915 -302.56588745]
[116.60972595 -308.54470825]
[130.78732300 -313.46536255]
[145.29647827 -317.29971313]
[160.05404663 -320.02575684]
[174.97552490 -321.62786865]
[189.97544861 -322.09692383]
[204.96786499 -321.43020630]
[219.86692810 -319.63150024]
[234.58729553 -316.71118164]
[249.04463196 -312.68591309]
[263.15612793 -307.57876587]
[276.84097290 -301.41903687]
[290.02078247 -294.24194336]
[302.62002563 -286.08865356]
[314.56655884 -277.00582886]
[325.79196167 -267.04550171]
[336.23190308 -256.26477051]
[345.82662964 -244.72531128]
[354.52114868 -232.49327087]
[362.26565552 -219.63871765]
[369.01580811 -206.23526001]
[374.73297119 -192.35966492]
[379.38430786 -178.09144592]
[382.94326782 -163.51231384]
[385.38940430 -148.70576477]
[386.70874023 -133.75662231]
[386.89370728 -118.75051880]
[385.94323730 -103.77340698]
[383.86276245 -88.91106415]
[380.66424561 -74.24863434]
[376.36599731 -59.87010193]
[370.99258423 -45.85781860]
[364.57485962 -32.29205322]
[357.14950562 -19.25051117]
[348.75912476 -6.80789042]
[339.45175171 4.96453714]
[329.28070068 15.99933910]
[318.30419922 26.23330688]
[306.58517456 35.60782242]
[294.19070435 44.06919098]
[281.19180298 51.56893921]
[267.66296387 58.06411743]
[253.68161011 63.51751328]
[239.32788086 67.89789581]
[224.68397522 71.18016815]
[209.83377075 73.34553528]
[194.86233521 74.38159180]
[179.85540771 74.28240204]
[164.89898682 73.04853821]
[150.07868958 70.68706512]
[135.47944641 67.21150970]
[121.18487549 62.64177704]
[115.55011749 76.54319763]
[109.91536713 90.44461823]
[124.98999023 101.97603607]
[121.89401245 129.03651428]
[121.89401245 144.03651428]
[121.89401245 159.03651428]
[121.89401245 174.03651428]
[121.89401245 189.03651428]
[121.89401245 204.03651428]
[121.89401245 219.03651428]
[121.89401245 234.03651428]
[121.89401245 249.03651428]
[121.89401245 264.03649902]
[121.89401245 279.03649902]
[136.55926514 282.50448608]
[150.02919006 289.26156616]
[161.57734680 298.94332886]
[170.58096313 311.02767944]
[176.55448914 324.86291504]
[179.17578125 339.70291138]
[178.30346680 354.74737549]
[173.98460388 369.18496704]
[166.45208740 382.23709106]
[156.11215210 393.19989014]
[143.52241516 401.48208618]
[129.36180115 406.63708496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[44 130]
[45 129]
[46 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
