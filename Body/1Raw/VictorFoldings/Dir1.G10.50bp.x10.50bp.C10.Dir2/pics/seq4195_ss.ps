%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACAACAGGGGGGGGGGUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGxxxxxxxxxxCCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACCCCCCCCCCCUUCACAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 431.17562866]
[71.19830322 425.15960693]
[59.48964310 415.63018799]
[50.78712082 403.29452515]
[45.73651886 389.06799316]
[44.71262741 374.00631714]
[47.79142761 359.22717285]
[54.74444962 345.82723999]
[65.05573273 334.80090332]
[77.96011353 326.96640015]
[92.50000000 322.90509033]
[92.50000000 307.90509033]
[92.50000000 292.90509033]
[92.50000000 277.90509033]
[92.50000000 262.90509033]
[92.50000000 247.90507507]
[92.50000000 232.90507507]
[92.50000000 217.90507507]
[92.50000000 202.90507507]
[92.50000000 187.90507507]
[92.50000000 172.90507507]
[92.50000000 157.90507507]
[92.50000000 142.90507507]
[82.26311493 139.78063965]
[73.09726715 134.25402832]
[65.55593872 126.65900421]
[60.09451675 117.45417786]
[45.52181244 121.00893402]
[30.94911003 124.56369781]
[21.42131805 137.47108459]
[5.38470316 137.92558289]
[-4.85881519 125.57851410]
[-1.45128715 109.90151978]
[12.99332333 102.92063141]
[27.39434814 109.99099731]
[41.96704865 106.43623352]
[56.53975296 102.88146973]
[57.78118896 89.29168701]
[63.16692352 76.75305939]
[72.16827393 66.49639893]
[64.71336365 53.48009109]
[57.25845718 40.46378326]
[49.80354691 27.44747353]
[34.42187119 32.54460526]
[18.32753944 34.38264847]
[2.20318532 32.88581467]
[-13.26772499 28.11971855]
[-27.42986679 20.28850174]
[-39.68381500 9.72609043]
[-49.51141357 -3.11803627]
[-56.49769592 -17.69798279]
[-60.34839249 -33.39463425]
[-60.90232468 -49.54194260]
[-58.13816833 -65.45520020]
[-52.17524719 -80.46005249]
[-43.26839066 -93.92110443]
[-31.79704475 -105.26880646]
[-40.04933548 -117.79476929]
[-48.30162430 -130.32072449]
[-63.19658661 -137.18164062]
[-64.43270874 -153.53413391]
[-50.73836517 -162.55616760]
[-36.20112991 -154.96664429]
[-35.77566147 -138.57301331]
[-27.52337265 -126.04705811]
[-19.27108192 -113.52109528]
[-6.49489975 -118.91645050]
[7.03597641 -121.97578430]
[20.89799309 -122.60198975]
[34.65699005 -120.77413177]
[47.88180923 -116.54816437]
[60.15779114 -110.05520630]
[71.09978485 -101.49748993]
[80.36423492 -91.14203644]
[87.65995789 -79.31235504]
[92.75729370 -66.37830353]
[95.49536896 -52.74454498]
[95.78710938 -38.83789062]
[93.62207031 -25.09393311]
[89.06676483 -11.94339085]
[82.26264954 0.20137669]
[73.42170715 10.95930004]
[62.81985474 19.99256325]
[70.27476501 33.00887299]
[77.72967529 46.02518082]
[85.18458557 59.04149246]
[113.37322998 58.54818726]
[135.95877075 75.42230988]
[149.61500549 69.21690369]
[163.27125549 63.01149750]
[176.92749023 56.80609131]
[190.58374023 50.60068512]
[193.68803406 46.24374771]
[197.76052856 43.80095673]
[201.89186096 43.31748581]
[205.29084778 44.46393967]
[219.30755615 39.12242889]
[225.83132935 24.97752571]
[240.12236023 19.76014519]
[253.56715393 26.06672478]
[267.58386230 20.72521210]
[281.60058594 15.38369942]
[291.52648926 2.32964635]
[307.75823975 4.66684675]
[313.59799194 19.99098969]
[303.03829956 32.53791046]
[286.94210815 29.40041351]
[272.92538452 34.74192429]
[258.90866089 40.08343887]
[253.07080078 53.73828888]
[238.93196106 59.35501480]
[224.64907837 53.13914108]
[210.63235474 58.48065567]
[196.78913879 64.25692749]
[183.13290405 70.46233368]
[169.47665405 76.66773987]
[155.82041931 82.87314606]
[142.16418457 89.07855225]
[143.38584900 96.15762329]
[143.42732239 103.34120941]
[142.28746033 110.43391418]
[139.99728394 117.24278259]
[136.61906433 123.58261108]
[132.24473572 129.28092957]
[126.99326324 134.18273926]
[121.00750732 138.15469360]
[114.45029449 141.08874512]
[107.50000000 142.90507507]
[107.50000000 157.90507507]
[107.50000000 172.90507507]
[107.50000000 187.90507507]
[107.50000000 202.90507507]
[107.50000000 217.90507507]
[107.50000000 232.90507507]
[107.50000000 247.90507507]
[107.50000000 262.90509033]
[107.50000000 277.90509033]
[107.50000000 292.90509033]
[107.50000000 307.90509033]
[107.50000000 322.90509033]
[122.03988647 326.96640015]
[134.94427490 334.80090332]
[145.25555420 345.82723999]
[152.20857239 359.22717285]
[155.28736877 374.00631714]
[154.26348877 389.06799316]
[149.21287537 403.29452515]
[140.51036072 415.63018799]
[128.80169678 425.15960693]
[114.95575714 431.17562866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[27 37]
[28 36]
[29 35]
[40 86]
[41 85]
[42 84]
[43 83]
[57 66]
[58 65]
[59 64]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[96 113]
[97 112]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
