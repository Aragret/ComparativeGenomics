%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCCUACUAGGGGGGGGGGCUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCxxxxxxxxxxAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[81.96660614 370.61761475]
[69.04745483 362.85925293]
[58.26615524 352.33023071]
[50.20413971 339.59835815]
[45.29618073 325.35025024]
[43.80695343 310.35427856]
[45.81678009 295.41915894]
[51.21726227 281.35034180]
[59.71716690 268.90655518]
[70.85810089 258.75881958]
[84.03924561 251.45443726]
[98.54976654 247.38729858]
[97.93394470 232.39994812]
[97.31811523 217.41259766]
[96.70229340 202.42524719]
[96.08646393 187.43789673]
[95.47064209 172.45053101]
[94.85481262 157.46318054]
[94.23899078 142.47583008]
[93.62316132 127.48847961]
[93.00733948 112.50112152]
[85.68813324 100.58807373]
[92.00531006 88.11470032]
[91.38948059 73.12734985]
[90.77365875 58.13999557]
[80.55517578 42.85557938]
[89.22483063 27.62791634]
[88.30141449 12.65636730]
[87.37799835 -2.31518269]
[72.37250519 -2.40444517]
[57.40726471 -3.50652552]
[42.55056763 -5.61639500]
[27.87020493 -8.72442722]
[13.43315697 -12.81644058]
[-0.69470310 -17.87376404]
[-14.44891167 -23.87332153]
[-27.76671028 -30.78773880]
[-40.58733368 -38.58546448]
[-52.85228348 -47.23092270]
[-64.50559998 -56.68466568]
[-75.49410248 -66.90355682]
[-85.76766205 -77.84096527]
[-95.27939606 -89.44699097]
[-103.98590851 -101.66867828]
[-111.84747314 -114.45025635]
[-118.82821655 -127.73340607]
[-124.89628601 -141.45753479]
[-130.02400208 -155.55999756]
[-134.18795776 -169.97645569]
[-137.36915588 -184.64114380]
[-139.55308533 -199.48712158]
[-140.72978210 -214.44668579]
[-140.89385986 -229.45155334]
[-140.04460144 -244.43325806]
[-138.18585205 -259.32345581]
[-135.32612610 -274.05419922]
[-131.47842407 -288.55828857]
[-126.66034698 -302.76950073]
[-120.89385986 -316.62304688]
[-114.20527649 -330.05569458]
[-106.62510681 -343.00613403]
[-98.18795013 -355.41531372]
[-88.93230438 -367.22656250]
[-78.90039062 -378.38601685]
[-68.13798523 -388.84277344]
[-56.69420242 -398.54910278]
[-44.62125397 -407.46072388]
[-31.97422218 -415.53695679]
[-18.81081772 -422.74096680]
[-5.19110203 -429.03985596]
[8.82278156 -434.40493774]
[23.16688919 -438.81170654]
[37.77577591 -442.24002075]
[52.58277512 -444.67428589]
[67.52033234 -446.10339355]
[82.52029419 -446.52078247]
[97.51420593 -445.92456055]
[112.43366241 -444.31747437]
[127.21059418 -441.70684814]
[141.77755737 -438.10458374]
[156.06811523 -433.52713013]
[170.01702881 -427.99533081]
[183.56066895 -421.53448486]
[196.63725281 -414.17404175]
[209.18708801 -405.94760132]
[221.15293884 -396.89266968]
[232.48017883 -387.05059814]
[243.11714172 -376.46627808]
[253.01528931 -365.18798828]
[262.12945557 -353.26721191]
[270.41806030 -340.75833130]
[277.84329224 -327.71844482]
[284.37124634 -314.20700073]
[289.97213745 -300.28570557]
[294.62045288 -286.01803589]
[298.29492188 -271.46911621]
[300.97882080 -256.70532227]
[302.65991211 -241.79402161]
[303.33047485 -226.80325317]
[302.98751831 -211.80140686]
[301.63253784 -196.85694885]
[299.27175903 -182.03805542]
[295.91595459 -167.41233826]
[291.58038330 -153.04653931]
[286.28491211 -139.00622559]
[280.05364990 -125.35542297]
[272.91500854 -112.15644836]
[264.90161133 -99.46950531]
[256.05001831 -87.35249329]
[246.40057373 -75.86070251]
[235.99734497 -65.04656219]
[224.88778687 -54.95941162]
[213.12258911 -45.64528275]
[200.75543213 -37.14667130]
[187.84274292 -29.50235558]
[174.44345093 -22.74721527]
[160.61868286 -16.91207314]
[146.43153381 -12.02355385]
[131.94671631 -8.10396194]
[117.23034668 -5.17118216]
[102.34954834 -3.23859644]
[103.27296448 11.73295403]
[104.19638062 26.70450401]
[113.07042694 34.98178864]
[113.92821503 47.48920822]
[105.76100922 57.52416992]
[106.37683868 72.51152039]
[106.99266052 87.49887848]
[114.31186676 99.41192627]
[107.99468994 111.88529968]
[108.61051941 126.87265015]
[109.22634125 141.86000061]
[109.84217072 156.84735107]
[110.45799255 171.83471680]
[111.07382202 186.82206726]
[111.68964386 201.80941772]
[112.30547333 216.79676819]
[112.92129517 231.78411865]
[113.53711700 246.77148438]
[128.33239746 249.63444519]
[142.06835938 255.83280945]
[154.00427246 265.03231812]
[163.49642944 276.73684692]
[170.03291321 290.31515503]
[173.26126099 305.03503418]
[173.00733948 320.10263062]
[169.28485107 334.70535278]
[162.29454041 348.05572510]
[152.41339111 359.43377686]
[140.17428589 368.22586060]
[126.23726654 373.95788574]
[111.35392761 376.32070923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[27 123]
[28 122]
[29 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
