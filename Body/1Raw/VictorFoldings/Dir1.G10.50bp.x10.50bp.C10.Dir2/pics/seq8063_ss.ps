%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCACCCGGGGGGGGGGAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCxxxxxxxxxxCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCCCCCCCCCCCUCAUAACCC\
) } def
/len { sequence length } bind def

/coor [
[81.11472321 553.21295166]
[67.26878357 547.19689941]
[55.56011963 537.66748047]
[46.85759735 525.33184814]
[41.80699539 511.10531616]
[40.78310394 496.04364014]
[43.86190033 481.26446533]
[50.81492233 467.86453247]
[61.12620926 456.83822632]
[74.03058624 449.00369263]
[88.57047272 444.94238281]
[88.57047272 429.94238281]
[88.57047272 414.94238281]
[88.57047272 399.94238281]
[88.57047272 384.94238281]
[88.57047272 369.94238281]
[88.57047272 354.94238281]
[88.57047272 339.94238281]
[88.57047272 324.94238281]
[88.57047272 309.94238281]
[88.57047272 294.94238281]
[74.36419678 291.88677979]
[61.10388947 285.92892456]
[49.37551498 277.32925415]
[39.69792175 266.46511841]
[32.49987793 253.81399536]
[28.10110474 239.93269348]
[26.69805527 225.43273926]
[28.35514450 210.95350647]
[33.00180054 197.13395691]
[40.43547440 184.58448792]
[50.33044052 173.85993958]
[62.25210190 165.43510437]
[75.67605591 159.68368530]
[90.01116943 156.86170959]
[90.32322693 141.86494446]
[90.63528442 126.86819458]
[90.94734192 111.87144470]
[82.76483917 124.44310760]
[72.18944550 135.08082581]
[59.66608047 143.33705139]
[45.72161865 148.86444092]
[30.94272804 151.43043518]
[15.95117569 150.92709351]
[1.37767947 147.37557983]
[-12.16463089 140.92532349]
[-24.10601044 131.84768677]
[-33.94406891 120.52458954]
[-41.26490021 107.43240356]
[-45.76050949 93.12193298]
[-47.24176025 78.19525146]
[-45.64633179 63.28033829]
[-41.04134750 49.00469208]
[-33.62054825 35.96890640]
[-23.69613266 24.72141838]
[-11.68563843 15.73542690]
[1.90563405 9.38898563]
[16.50588036 5.94909859]
[31.50084496 5.56048822]
[46.25967026 8.23950291]
[60.16142654 13.87343311]
[72.62124634 22.22525024]
[83.11492920 32.94358063]
[91.20098877 45.57748795]
[96.53923035 59.59544754]
[98.90507507 74.40769958]
[98.19808960 89.39694977]
[106.70917511 77.04537964]
[96.72606659 66.37782288]
[89.19432831 53.86565781]
[84.44401550 40.06209564]
[82.68226624 25.57684326]
[83.98425293 11.04915810]
[88.29003906 -2.88036919]
[95.40724182 -15.59805393]
[105.01972961 -26.54415512]
[116.70156097 -35.23751450]
[129.93594360 -41.29670715]
[144.13804626 -44.45676422]
[158.68086243 -44.58078003]
[172.92286682 -41.66582489]
[186.23637390 -35.84296036]
[195.00257874 -48.01479721]
[203.76879883 -60.18663406]
[205.55532837 -75.90664673]
[219.27178955 -81.71248627]
[228.03800964 -93.88432312]
[236.80421448 -106.05615997]
[237.91127014 -122.41789246]
[252.75163269 -129.39611816]
[266.05880737 -119.81223297]
[264.14352417 -103.52531433]
[248.97604370 -97.28994751]
[240.20983887 -85.11811066]
[231.44363403 -72.94627380]
[230.28411865 -58.09687042]
[215.94062805 -51.42042923]
[207.17442322 -39.24859238]
[198.40821838 -27.07675362]
[208.67497253 -15.56545448]
[216.13970947 -2.05958724]
[220.42875671 12.77110958]
[221.32597351 28.19042015]
[218.78370667 43.43219757]
[212.92524719 57.73843384]
[204.03894043 70.39695740]
[192.56387329 80.77687836]
[179.06828308 88.36003876]
[164.22138977 92.76688385]
[148.76019287 93.77544403]
[133.45289612 91.33251190]
[119.06074524 85.55646515]
[110.54965973 97.90803528]
[105.94409180 112.18350220]
[105.63203430 127.18025208]
[105.31998444 142.17700195]
[105.00792694 157.17376709]
[120.06212616 160.89772034]
[133.91099548 167.86119080]
[145.86766052 177.71533203]
[155.33984375 189.96801758]
[161.85920715 204.00842285]
[165.10453796 219.13745117]
[164.91757202 234.60256958]
[161.31068420 249.63520813]
[154.46612549 263.48898315]
[144.72680664 275.47671509]
[132.57917786 285.00460815]
[118.62886047 291.60153198]
[103.57047272 294.94238281]
[103.57047272 309.94238281]
[103.57047272 324.94238281]
[103.57047272 339.94238281]
[103.57047272 354.94238281]
[103.57047272 369.94238281]
[103.57047272 384.94238281]
[103.57047272 399.94238281]
[103.57047272 414.94238281]
[103.57047272 429.94238281]
[103.57047272 444.94238281]
[118.11036682 449.00369263]
[131.01473999 456.83822632]
[141.32603455 467.86453247]
[148.27905273 481.26446533]
[151.35784912 496.04364014]
[150.33395386 511.10531616]
[145.28335571 525.33184814]
[136.58082581 537.66748047]
[124.87216949 547.19689941]
[111.02622986 553.21295166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[35 117]
[36 116]
[37 115]
[38 114]
[67 113]
[68 112]
[82 99]
[83 98]
[84 97]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
