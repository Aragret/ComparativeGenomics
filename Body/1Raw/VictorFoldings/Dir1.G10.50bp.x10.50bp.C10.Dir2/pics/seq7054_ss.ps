%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUAGGAGGGGGGGGGGGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACxxxxxxxxxxAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCCCCCCCCCCCAUCAUAGAA\
) } def
/len { sequence length } bind def

/coor [
[53.67696762 412.11218262]
[39.65502167 406.55917358]
[27.45506477 397.69284058]
[17.84399414 386.07052612]
[11.42596817 372.42282104]
[8.60443115 357.60763550]
[9.55674744 342.55627441]
[14.22305202 328.21484375]
[22.31001854 315.48489380]
[33.30929184 305.16659546]
[46.52945328 297.90863037]
[61.13946533 294.16720581]
[61.13946533 279.16720581]
[61.13946533 264.16720581]
[61.13946533 249.16719055]
[61.13946533 234.16719055]
[61.13946533 219.16719055]
[61.13946533 204.16719055]
[61.13946533 189.16719055]
[61.13946533 174.16719055]
[61.13946533 159.16719055]
[61.13946533 144.16719055]
[53.40216446 131.43992615]
[61.13946533 117.63975525]
[60.28804779 132.61557007]
[51.16902161 144.52537537]
[36.93367004 149.25346375]
[22.50134087 145.16592407]
[12.85944653 133.67533875]
[11.33996201 118.75249481]
[18.46797943 105.55433655]
[31.78025055 98.64177704]
[46.67674255 100.40375519]
[31.90462685 97.79903412]
[17.13251114 95.19430542]
[2.36039495 92.58958435]
[-6.50747204 105.01229095]
[-19.89128494 112.34961700]
[-35.13367844 113.14472198]
[-49.20826340 107.23973846]
[-59.32052231 95.80711365]
[-63.46265793 81.11679077]
[-60.81224442 66.08555603]
[-51.89552689 53.69786453]
[-38.48292160 46.41330719]
[-23.23751640 45.67823029]
[-9.18629360 51.63859177]
[0.88086492 63.11095047]
[4.96511745 77.81746674]
[19.73723412 80.42218781]
[34.50934982 83.02691650]
[49.28146744 85.63163757]
[62.03472519 77.73515320]
[66.28756714 63.35067368]
[70.54042053 48.96619415]
[74.79326630 34.58171082]
[79.04611206 20.19722939]
[83.29895782 5.81274939]
[69.51451111 -0.14932793]
[56.54923630 -7.72950363]
[44.59221268 -16.81723595]
[33.81779861 -27.28000069]
[24.38312721 -38.96521759]
[16.42577934 -51.70248413]
[10.06179523 -65.30605316]
[5.38398170 -79.57754517]
[2.46055532 -94.30883789]
[1.33414781 -109.28510284]
[2.02118564 -124.28794861]
[4.51165009 -139.09858704]
[8.76922226 -153.50102234]
[14.73181534 -167.28524780]
[22.31247520 -180.25024414]
[31.40065575 -192.20692444]
[41.86382294 -202.98094177]
[53.54939270 -212.41517639]
[66.28695679 -220.37205505]
[79.89076233 -226.73553467]
[94.16242981 -231.41281128]
[108.89382935 -234.33567810]
[123.87014008 -235.46153259]
[138.87295532 -234.77394104]
[153.68350220 -232.28291321]
[168.08578491 -228.02481079]
[181.86978149 -222.06169128]
[194.83448792 -214.48054504]
[206.79083252 -205.39192200]
[217.56446838 -194.92835999]
[226.99826050 -183.24243164]
[234.95466614 -170.50456238]
[241.31762695 -156.90052795]
[245.99436951 -142.62869263]
[248.91670227 -127.89717865]
[250.04199219 -112.92082214]
[249.35382080 -97.91802979]
[246.86225891 -83.10758209]
[242.60360718 -68.70545197]
[236.63998413 -54.92167664]
[229.05834961 -41.95725250]
[219.96928406 -30.00124741]
[209.50531006 -19.22801208]
[197.81903076 -9.79465008]
[185.08087158 -1.83872950]
[171.47659302 4.52372837]
[157.20457458 9.19994068]
[142.47296143 12.12171459]
[127.49655914 13.24644279]
[112.49379730 12.55772114]
[97.68344116 10.06559563]
[93.43058777 24.45007706]
[89.17774200 38.83455658]
[84.92489624 53.21903992]
[80.67205048 67.60352325]
[76.41920471 81.98799896]
[97.32616425 72.44028473]
[117.04724121 80.76066589]
[123.71459198 99.43175507]
[138.05465698 103.83205414]
[152.39471436 108.23235321]
[167.18431091 102.01565552]
[181.19627380 109.82873535]
[183.68183899 125.67807770]
[172.73426819 137.40541077]
[156.75161743 136.01454163]
[147.99441528 122.57241821]
[133.65434265 118.17211151]
[119.31428528 113.77181244]
[100.22940826 126.69620514]
[76.13946533 117.63975525]
[83.87676239 131.43992615]
[76.13946533 144.16719055]
[76.13946533 159.16719055]
[76.13946533 174.16719055]
[76.13946533 189.16719055]
[76.13946533 204.16719055]
[76.13946533 219.16719055]
[76.13946533 234.16719055]
[76.13946533 249.16719055]
[76.13946533 264.16720581]
[76.13946533 279.16720581]
[76.13946533 294.16720581]
[90.74948120 297.90863037]
[103.96963501 305.16659546]
[114.96891022 315.48489380]
[123.05587769 328.21484375]
[127.72218323 342.55627441]
[128.67449951 357.60763550]
[125.85295868 372.42282104]
[119.43493652 386.07052612]
[109.82386780 397.69284058]
[97.62390900 406.55917358]
[83.60196686 412.11218262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 129]
[33 52]
[34 51]
[35 50]
[36 49]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
