%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAUUCUGGGGGGGGGGCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUxxxxxxxxxxAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCCCCCCCCCCCAUUAU\
) } def
/len { sequence length } bind def

/coor [
[89.44319153 364.00595093]
[75.59725189 357.98992920]
[63.88858795 348.46051025]
[55.18606567 336.12484741]
[50.13546371 321.89831543]
[49.11157227 306.83663940]
[52.19037247 292.05746460]
[59.14339066 278.65753174]
[69.45467377 267.63122559]
[82.35905457 259.79669189]
[96.89894104 255.73539734]
[96.89894104 240.73539734]
[96.89894104 225.73539734]
[96.89894104 210.73539734]
[96.89894104 195.73539734]
[96.89894104 180.73539734]
[96.89894104 165.73539734]
[96.89894104 150.73539734]
[96.89894104 135.73539734]
[96.89894104 120.73538971]
[89.70756531 133.89912415]
[82.51618195 147.06286621]
[79.15339661 161.68106079]
[70.58505249 173.99299622]
[58.04563141 182.22480774]
[43.34173584 185.19053650]
[28.59182739 182.46286011]
[15.92098713 174.43479919]
[7.15476179 162.26296997]
[3.55613899 147.70104980]
[5.64358902 132.84700012]
[13.11636353 119.84094238]
[24.89782715 110.55670166]
[39.29057312 106.33190155]
[54.22108841 107.77526855]
[68.98535919 105.12644958]
[83.74963379 102.47763824]
[69.52285767 97.72382355]
[55.29607391 92.97000885]
[41.06929779 88.21619415]
[29.62363243 98.45788574]
[14.58726883 101.58891296]
[0.00491173 96.76704407]
[-10.20085812 85.28933716]
[-13.28473949 70.24323273]
[-8.41718388 55.67605972]
[3.09246016 45.50631714]
[18.14815712 42.46961212]
[32.70000076 47.38280487]
[42.83361435 58.92427063]
[45.82311249 73.98941040]
[60.04988861 78.74322510]
[74.27667236 83.49703979]
[88.50344849 88.25085449]
[102.57496643 83.05544281]
[110.29904938 70.19703674]
[118.02313995 57.33863449]
[125.74722290 44.48023224]
[125.65297699 39.99106979]
[126.90270233 36.11688995]
[129.12655640 33.21234894]
[131.87620544 31.47069359]
[134.68608093 30.91214943]
[143.45228577 18.74031258]
[152.21849060 6.56847572]
[160.98469543 -5.60336113]
[149.99200439 -15.83878613]
[140.36886597 -27.37128448]
[132.26705933 -40.01897049]
[125.81436157 -53.58237457]
[121.11254120 -67.84757996]
[118.23574066 -82.58959961]
[117.22934723 -97.57594299]
[118.10922241 -112.57024384]
[120.86149597 -127.33602142]
[125.44275665 -141.64039612]
[131.78076172 -155.25778198]
[139.77552795 -167.97340393]
[149.30099487 -179.58670044]
[160.20690918 -189.91453552]
[172.32127380 -198.79402161]
[185.45304871 -206.08511353]
[199.39509583 -211.67282104]
[213.92755127 -215.46900940]
[228.82119751 -217.41381836]
[243.84117126 -217.47656250]
[258.75054932 -215.65628052]
[273.31420898 -211.98164368]
[287.30245972 -206.51063538]
[300.49468994 -199.32951355]
[312.68283081 -190.55157471]
[323.67468262 -180.31521606]
[333.29684448 -168.78190613]
[341.39758301 -156.13354492]
[347.84915161 -142.56959534]
[352.54977417 -128.30400085]
[355.42532349 -113.56172943]
[356.43045044 -98.57530212]
[355.54931641 -83.58107758]
[352.79580688 -68.81552887]
[348.21331787 -54.51153564]
[341.87417603 -40.89469147]
[333.87835693 -28.17974854]
[324.35189819 -16.56724548]
[313.44512939 -6.24032688]
[301.32998657 2.63813758]
[288.19763184 9.92812157]
[274.25509644 15.51465130]
[259.72232056 19.30961990]
[244.82850647 21.25317383]
[229.80854797 21.31466103]
[214.89930725 19.49311256]
[200.33595276 15.81725693]
[186.34815979 10.34506607]
[173.15653992 3.16284585]
[164.39033508 15.33468246]
[155.62411499 27.50651932]
[146.85791016 39.67835617]
[138.60562134 52.20431900]
[130.88154602 65.06272125]
[123.15745544 77.92111969]
[115.43337250 90.77952576]
[128.02444458 82.62693787]
[143.02384949 82.49349213]
[155.75799561 90.42076874]
[162.25909424 103.93874359]
[160.50149536 118.83541870]
[151.03286743 130.46920776]
[136.80346680 135.21517944]
[122.24698639 131.59457397]
[111.89894104 120.73538971]
[111.89894104 135.73539734]
[111.89894104 150.73539734]
[111.89894104 165.73539734]
[111.89894104 180.73539734]
[111.89894104 195.73539734]
[111.89894104 210.73539734]
[111.89894104 225.73539734]
[111.89894104 240.73539734]
[111.89894104 255.73539734]
[126.43883514 259.79669189]
[139.34321594 267.63122559]
[149.65449524 278.65753174]
[156.60751343 292.05746460]
[159.68632507 306.83663940]
[158.66242981 321.89831543]
[153.61183167 336.12484741]
[144.90930176 348.46051025]
[133.20063782 357.98992920]
[119.35469818 364.00595093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[37 54]
[38 53]
[39 52]
[40 51]
[55 122]
[56 121]
[57 120]
[58 119]
[63 118]
[64 117]
[65 116]
[66 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
