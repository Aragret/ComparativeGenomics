%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUAGCAGGGGGGGGGGGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACxxxxxxxxxxCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCCCCCCCCCCCGAGCA\
) } def
/len { sequence length } bind def

/coor [
[91.34217834 156.63787842]
[76.97994232 152.46792603]
[64.18609619 144.72326660]
[53.83230591 133.93154907]
[46.62398148 120.82803345]
[43.05223846 106.30547333]
[43.36042786 91.35330963]
[47.52754974 76.99025726]
[55.26969147 64.19489288]
[66.05937195 53.83897781]
[79.16147614 46.62807846]
[93.68333435 43.05348206]
[93.99539185 28.05672646]
[94.30744934 13.05997276]
[94.61949921 -1.93678057]
[94.93155670 -16.93353462]
[95.24361420 -31.93028831]
[95.55567169 -46.92704010]
[95.86772919 -61.92379379]
[96.17978668 -76.92054749]
[96.49183655 -91.91730499]
[96.80389404 -106.91405487]
[97.11595154 -121.91081238]
[82.15901947 -123.10267639]
[67.29780579 -125.17027283]
[52.58355713 -128.10647583]
[38.06698608 -131.90116882]
[23.79813957 -136.54125977]
[9.82620430 -142.01077271]
[-3.80065656 -148.29083252]
[-17.03546715 -155.35978699]
[-29.83260536 -163.19329834]
[-42.14795303 -171.76432800]
[-53.93906021 -181.04335022]
[-65.16527557 -190.99838257]
[-75.78791046 -201.59507751]
[-85.77033234 -212.79695129]
[-95.07814026 -224.56533813]
[-103.67924500 -236.85971069]
[-111.54399109 -249.63766479]
[-118.64527130 -262.85516357]
[-124.95861053 -276.46664429]
[-130.46223450 -290.42517090]
[-135.13717651 -304.68264771]
[-138.96733093 -319.18991089]
[-141.93948364 -333.89694214]
[-144.04338074 -348.75305176]
[-145.27178955 -363.70703125]
[-145.62045288 -378.70730591]
[-145.08819580 -393.70220947]
[-143.67683411 -408.64004517]
[-141.39123535 -423.46929932]
[-138.23928833 -438.13882446]
[-134.23184204 -452.59811401]
[-129.38272095 -466.79730225]
[-123.70863342 -480.68740845]
[-117.22915649 -494.22058105]
[-109.96661377 -507.35015869]
[-101.94603729 -520.03088379]
[-93.19508362 -532.21905518]
[-83.74391937 -543.87261963]
[-73.62512207 -554.95147705]
[-62.87357712 -565.41735840]
[-51.52634048 -575.23419189]
[-39.62253189 -584.36822510]
[-27.20318985 -592.78784180]
[-14.31112194 -600.46411133]
[-0.99077183 -607.37054443]
[12.71194172 -613.48333740]
[26.74978256 -618.78137207]
[41.07435989 -623.24645996]
[55.63629150 -626.86315918]
[70.38538361 -629.61907959]
[85.27079010 -631.50457764]
[100.24119568 -632.51324463]
[115.24499512 -632.64166260]
[130.23046875 -631.88922119]
[145.14595032 -630.25866699]
[159.94003296 -627.75555420]
[174.56172180 -624.38854980]
[188.96060181 -620.16925049]
[203.08703613 -615.11212158]
[216.89233398 -609.23468018]
[230.32890320 -602.55718994]
[243.35041809 -595.10260010]
[255.91201782 -586.89672852]
[267.97036743 -577.96771240]
[279.48391724 -568.34643555]
[290.41296387 -558.06610107]
[300.71981812 -547.16198730]
[310.36901855 -535.67181396]
[319.32720947 -523.63519287]
[327.56359863 -511.09356689]
[335.04971313 -498.09014893]
[341.75979614 -484.66983032]
[347.67071533 -470.87884521]
[352.76208496 -456.76470947]
[357.01632690 -442.37609863]
[360.41882324 -427.76263428]
[362.95782471 -412.97467041]
[364.62457275 -398.06317139]
[365.41333008 -383.07958984]
[365.32135010 -368.07550049]
[364.34899902 -353.10269165]
[362.49960327 -338.21276855]
[359.77951050 -323.45703125]
[356.19815063 -308.88638306]
[351.76782227 -294.55099487]
[346.50384521 -280.50033569]
[340.42431641 -266.78283691]
[333.55023193 -253.44577026]
[325.90527344 -240.53511047]
[317.51580811 -228.09538269]
[308.41070557 -216.16944885]
[298.62139893 -204.79843140]
[288.18164062 -194.02151489]
[277.12741089 -183.87586975]
[265.49679565 -174.39645386]
[253.32989502 -165.61595154]
[240.66867065 -157.56463623]
[227.55674744 -150.27024841]
[214.03933716 -143.75794983]
[200.16302490 -138.05018616]
[185.97566223 -133.16662598]
[171.52613831 -129.12411499]
[156.86428833 -125.93657684]
[142.04063416 -123.61500549]
[127.10627747 -122.16739655]
[112.11270905 -121.59875488]
[111.80065155 -106.60199738]
[111.48859406 -91.60524750]
[111.17653656 -76.60848999]
[110.86447906 -61.61174011]
[110.55242157 -46.61498642]
[110.24037170 -31.61823082]
[109.92831421 -16.62147713]
[109.61625671 -1.62472427]
[109.30419922 13.37202930]
[108.99214172 28.36878395]
[108.68008423 43.36553574]
[123.04067993 47.54112625]
[135.83148193 55.29081345]
[146.18103027 66.08659363]
[153.38420105 79.19294739]
[156.95024109 93.71691132]
[156.63616943 108.66895294]
[152.46339417 123.03036499]
[144.71623230 135.82269287]
[133.92248535 146.17436218]
[120.81754303 153.38011169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
