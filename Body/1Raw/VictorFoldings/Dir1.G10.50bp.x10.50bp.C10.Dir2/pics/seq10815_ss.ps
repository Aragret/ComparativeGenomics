%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAACAAAGGGGGGGGGGUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCxxxxxxxxxxUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCCCCCCCCCCCACAUCAAA\
) } def
/len { sequence length } bind def

/coor [
[72.28147888 385.05371094]
[58.43554306 379.03768921]
[46.72688293 369.50827026]
[38.02435684 357.17260742]
[32.97375488 342.94607544]
[31.94986343 327.88439941]
[35.02866364 313.10522461]
[41.98168564 299.70529175]
[52.29296875 288.67895508]
[65.19734955 280.84445190]
[79.73723602 276.78314209]
[79.73723602 261.78314209]
[79.73723602 246.78314209]
[79.73723602 231.78314209]
[79.73723602 216.78314209]
[79.73723602 201.78314209]
[79.73723602 186.78314209]
[79.73723602 171.78314209]
[79.73723602 156.78314209]
[79.73723602 141.78314209]
[67.47486877 133.14402771]
[53.35006714 138.19279480]
[39.22526169 143.24154663]
[25.10046005 148.29029846]
[22.42502213 163.41436768]
[12.53370476 175.16415405]
[-1.91277540 180.37901306]
[-17.02838898 177.65618896]
[-28.74711037 167.72808838]
[-33.91666412 153.26533508]
[-31.14646530 138.15832520]
[-21.18168449 126.47078705]
[-6.70279598 121.34658813]
[8.39545059 124.16413116]
[20.05170250 134.16549683]
[34.17650604 129.11674500]
[48.30130768 124.06798553]
[62.42611313 119.01922607]
[59.54541779 105.89654541]
[60.98343658 92.93624115]
[66.33806610 81.48133087]
[74.81452942 72.63819122]
[67.09043884 59.77978516]
[59.36635590 46.92138290]
[49.61870193 35.52036285]
[38.11690140 25.89183617]
[26.61509705 16.26330948]
[15.11329365 6.63478327]
[1.22946036 12.97528267]
[-14.03030300 12.65532112]
[-27.63615990 5.73842716]
[-36.88665771 -6.40204477]
[-39.94510269 -21.35559464]
[-36.20423889 -36.15318680]
[-26.40681458 -47.85674286]
[-12.49812126 -54.14252090]
[2.76026392 -53.76247025]
[16.33877754 -46.79204941]
[25.54139328 -34.61524200]
[28.54092789 -19.64976501]
[24.74181938 -4.86702013]
[36.24362183 4.76150608]
[47.74542618 14.39003277]
[59.24723053 24.01855850]
[54.71321106 9.72021389]
[55.24687958 -5.27028990]
[60.78619003 -19.21001816]
[70.68708801 -30.47821236]
[83.79840851 -37.76472855]
[98.59571075 -40.22236633]
[113.35851288 -37.56538391]
[126.37036896 -30.10270119]
[136.11839294 -18.70199966]
[141.46919250 -4.68883133]
[141.80064392 10.30750656]
[137.07420349 24.54340172]
[127.83940125 36.36365891]
[115.16996765 44.39394379]
[100.53897095 47.70058823]
[85.64753723 45.89912415]
[72.22476196 39.19729614]
[79.94884491 52.05570221]
[87.67292786 64.91410065]
[100.68100739 62.81784058]
[113.60359192 65.38903046]
[124.81853485 72.30492401]
[132.91801453 82.69735718]
[147.33023071 78.53947449]
[161.74244690 74.38158417]
[162.39437866 60.03533554]
[167.44642639 46.61520767]
[176.39015198 35.43410110]
[188.33703613 27.58147049]
[202.10687256 23.81716728]
[216.34419250 24.49793816]
[229.65184021 29.54366302]
[240.72798157 38.44651031]
[248.49348450 50.32203674]
[262.98907471 46.46487427]
[277.48468018 42.60771561]
[291.98028564 38.75055695]
[297.00320435 34.29210281]
[302.67236328 33.24713898]
[307.15930176 35.04788971]
[321.80282593 31.79706383]
[331.59707642 19.09068108]
[347.63964844 18.96991348]
[357.62408447 31.52740479]
[353.89117432 47.13012314]
[339.30444336 53.80899429]
[325.05364990 46.44056702]
[310.41012573 49.69139099]
[295.83743286 53.24615479]
[281.34182739 57.10331345]
[266.84625244 60.96047211]
[252.35064697 64.81763458]
[251.15763855 80.48710632]
[244.67065430 94.82994080]
[233.65405273 106.11162567]
[219.42124939 112.96099091]
[203.67799377 114.53683472]
[188.31805420 110.63121796]
[175.19538879 101.69665527]
[165.90032959 88.79380035]
[151.48811340 92.95169067]
[137.07589722 97.10957336]
[136.71846008 110.43845367]
[131.60049438 123.12542725]
[122.14244080 133.48431396]
[109.35567474 140.05007935]
[94.73723602 141.78314209]
[94.73723602 156.78314209]
[94.73723602 171.78314209]
[94.73723602 186.78314209]
[94.73723602 201.78314209]
[94.73723602 216.78314209]
[94.73723602 231.78314209]
[94.73723602 246.78314209]
[94.73723602 261.78314209]
[94.73723602 276.78314209]
[109.27712250 280.84445190]
[122.18150330 288.67895508]
[132.49278259 299.70529175]
[139.44581604 313.10522461]
[142.52461243 327.88439941]
[141.50071716 342.94607544]
[136.45011902 357.17260742]
[127.74758911 369.50827026]
[116.03893280 379.03768921]
[102.19299316 385.05371094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 38]
[22 37]
[23 36]
[24 35]
[42 83]
[43 82]
[44 81]
[45 64]
[46 63]
[47 62]
[48 61]
[87 126]
[88 125]
[89 124]
[98 116]
[99 115]
[100 114]
[101 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
