%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAUACCUGGGGGGGGGGUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAxxxxxxxxxxUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCCCCCCCCCCCUCUACCU\
) } def
/len { sequence length } bind def

/coor [
[69.83800507 453.63537598]
[56.34912491 446.90383911]
[44.86362457 437.13928223]
[36.04925537 424.90939331]
[30.41847420 410.92517090]
[28.29864502 395.99969482]
[29.81301498 381.00070190]
[34.87353897 366.80020142]
[43.18600082 354.22378540]
[54.26713562 344.00262451]
[67.47268677 336.73098755]
[82.03491211 332.83160400]
[81.72693634 317.83477783]
[81.41896057 302.83795166]
[81.11097717 287.84109497]
[80.80300140 272.84426880]
[80.49502563 257.84741211]
[80.18704987 242.85058594]
[79.87906647 227.85374451]
[79.57109070 212.85690308]
[79.26311493 197.86007690]
[68.37265015 187.76385498]
[67.84668732 172.55932617]
[78.51035309 161.20486450]
[78.20237732 146.20802307]
[65.69834137 137.92254639]
[51.76762772 143.48448181]
[39.29955292 154.97288513]
[24.80861282 146.17237854]
[29.25370216 129.81152344]
[46.20568848 129.55377197]
[60.13640594 123.99182892]
[59.21474457 116.54867554]
[57.37141800 101.66236877]
[56.44975662 94.21921539]
[41.58316040 92.22315979]
[26.71656036 90.22710419]
[16.10430336 101.54786682]
[0.85832983 104.43575287]
[-13.15897369 97.78031921]
[-20.55766869 84.14070892]
[-18.49280357 68.76163483]
[-7.75836325 57.55665970]
[7.51804161 54.83433151]
[21.46232224 61.64143372]
[28.71261597 75.36050415]
[43.57921600 77.35655975]
[58.44581604 79.35261536]
[82.70283508 67.47486115]
[103.59292603 72.96176910]
[109.58122253 59.20894241]
[115.56951904 45.45611191]
[121.55781555 31.70328331]
[119.97313690 15.96164036]
[132.14810181 7.38145685]
[138.13639832 -6.37137222]
[144.12469482 -20.12420082]
[150.11299133 -33.87702942]
[147.59152222 -52.08891678]
[162.03878784 -62.00461197]
[167.74345398 -75.87749481]
[173.30538940 -89.80821228]
[178.72401428 -103.79529572]
[165.58351135 -111.07818604]
[153.55711365 -120.08261108]
[142.86888123 -130.64080811]
[133.71792603 -142.55609131]
[126.27474213 -155.60647583]
[120.67797089 -169.54885864]
[117.03188324 -184.12347412]
[115.40440369 -199.05883789]
[115.82585144 -214.07670593]
[118.28837585 -228.89729309]
[122.74610138 -243.24449158]
[129.11598206 -256.85104370]
[137.27935791 -269.46347046]
[147.08413696 -280.84680176]
[158.34767151 -290.78897095]
[170.86012268 -299.10473633]
[184.38839722 -305.63922119]
[198.68046570 -310.27069092]
[213.47009277 -312.91281128]
[228.48173523 -313.51644897]
[243.43574524 -312.07028198]
[258.05352783 -308.60125732]
[272.06277466 -303.17404175]
[285.20251465 -295.88973999]
[297.22793579 -286.88400269]
[307.91500854 -276.32467651]
[317.06466675 -264.40838623]
[324.50646973 -251.35719299]
[330.10171509 -237.41421509]
[333.74621582 -222.83918762]
[335.37210083 -207.90365601]
[334.94900513 -192.88583374]
[332.48489380 -178.06552124]
[328.02560425 -163.71879578]
[321.65426636 -150.11293030]
[313.48953247 -137.50138855]
[303.68350220 -126.11912537]
[292.41888428 -116.17818451]
[279.90554810 -107.86376190]
[266.37655640 -101.33074188]
[252.08398438 -96.70082855]
[237.29408264 -94.06028748]
[222.28236389 -93.45829773]
[207.32852173 -94.90608215]
[192.71110535 -98.37667084]
[187.29248047 -84.38958740]
[187.81205750 -76.97054291]
[181.61633301 -70.17282867]
[175.91168213 -56.29994965]
[180.28234863 -44.97919846]
[175.59429932 -33.35192490]
[163.86581421 -27.88873291]
[157.87751770 -14.13590431]
[151.88922119 -0.38307545]
[145.90092468 13.36975384]
[147.91394043 28.12770271]
[135.31065369 37.69158173]
[129.32235718 51.44440842]
[123.33405304 65.19723511]
[117.34575653 78.95006561]
[131.20050049 92.63838196]
[133.66444397 114.95932007]
[120.05475616 136.46939087]
[93.19921875 145.90003967]
[93.50719452 160.89688110]
[104.62803650 171.80397034]
[104.72673035 187.01728821]
[94.25994873 197.55209351]
[94.56793213 212.54893494]
[94.87590790 227.54577637]
[95.18388367 242.54260254]
[95.49185944 257.53945923]
[95.79984283 272.53628540]
[96.10781860 287.53311157]
[96.41579437 302.52996826]
[96.72377014 317.52679443]
[97.03175354 332.52362061]
[111.74178314 335.82186890]
[125.23474884 342.54522705]
[136.72616577 352.30282593]
[145.54794312 364.52737427]
[151.18721008 378.50814819]
[153.31608582 393.43234253]
[151.81080627 408.43225098]
[146.75889587 422.63583374]
[138.45405579 435.21728516]
[127.37911987 445.44515991]
[114.17797852 452.72479248]
[99.61811829 456.63299561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 128]
[25 127]
[26 32]
[27 31]
[35 48]
[36 47]
[37 46]
[50 123]
[51 122]
[52 121]
[53 120]
[55 118]
[56 117]
[57 116]
[58 115]
[60 112]
[61 111]
[62 109]
[63 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
