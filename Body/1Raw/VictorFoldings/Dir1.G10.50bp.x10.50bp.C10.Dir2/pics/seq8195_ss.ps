%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACAAUCGGGGGGGGGGCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUxxxxxxxxxxCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCCCCCCCCCCCUCACAAUC\
) } def
/len { sequence length } bind def

/coor [
[83.23204803 362.79318237]
[69.74317169 356.06164551]
[58.25767136 346.29705811]
[49.44330215 334.06716919]
[43.81251907 320.08297729]
[41.69269180 305.15750122]
[43.20705795 290.15850830]
[48.26758194 275.95797729]
[56.58004761 263.38156128]
[67.66117859 253.16041565]
[80.86672974 245.88877869]
[95.42895508 241.98941040]
[95.12097931 226.99256897]
[94.81300354 211.99574280]
[94.50502777 196.99890137]
[94.19704437 182.00205994]
[93.88906860 167.00521851]
[93.58109283 152.00837708]
[93.27311707 137.01155090]
[92.96513367 122.01470947]
[92.65715790 107.01786804]
[89.33910370 99.61297607]
[92.50000000 91.71068573]
[92.50000000 76.71068573]
[92.50000000 61.71068192]
[92.50000000 46.71068192]
[77.52366638 45.78712082]
[62.63258743 43.94334793]
[47.88325882 41.18635941]
[33.33162689 37.52661896]
[19.03289604 32.97800446]
[5.04130173 27.55777168]
[-8.59008026 21.28648186]
[-21.80953979 14.18792248]
[-34.56692886 6.28902292]
[-46.81386185 -2.38025379]
[-58.50387192 -11.78702164]
[-69.59262085 -21.89559937]
[-80.03804016 -32.66763687]
[-89.80050659 -44.06227875]
[-98.84299469 -56.03629303]
[-107.13120270 -68.54426575]
[-114.63368225 -81.53874207]
[-121.32197571 -94.97043610]
[-127.17071533 -108.78839111]
[-132.15771484 -122.94019318]
[-136.26405334 -137.37216187]
[-139.47415161 -152.02954102]
[-141.77584839 -166.85673523]
[-143.16038513 -181.79751587]
[-143.62252808 -196.79518127]
[-143.16053772 -211.79286194]
[-141.77613831 -226.73364258]
[-139.47459412 -241.56086731]
[-136.26463318 -256.21829224]
[-132.15843201 -270.65029907]
[-127.17157745 -284.80212402]
[-121.32297516 -298.62014771]
[-114.63481140 -312.05191040]
[-107.13246155 -325.04644775]
[-98.84438324 -337.55450439]
[-89.80200958 -349.52862549]
[-80.03964996 -360.92333984]
[-69.59433746 -371.69549561]
[-58.50569153 -381.80416870]
[-46.81577301 -391.21105957]
[-34.56892776 -399.88046265]
[-21.81161308 -407.77947998]
[-8.59222317 -414.87817383]
[5.03909636 -421.14959717]
[19.03063774 -426.56997681]
[33.32932663 -431.11871338]
[47.88092041 -434.77859497]
[62.63021851 -437.53573608]
[77.52127838 -439.37966919]
[92.49760437 -440.30337524]
[107.50239563 -440.30337524]
[122.47872162 -439.37966919]
[137.36978149 -437.53573608]
[152.11907959 -434.77859497]
[166.67066956 -431.11871338]
[180.96936035 -426.56997681]
[194.96090698 -421.14959717]
[208.59222412 -414.87817383]
[221.81161499 -407.77947998]
[234.56892395 -399.88046265]
[246.81576538 -391.21105957]
[258.50567627 -381.80416870]
[269.59432983 -371.69549561]
[280.03964233 -360.92333984]
[289.80200195 -349.52862549]
[298.84439087 -337.55450439]
[307.13247681 -325.04644775]
[314.63482666 -312.05191040]
[321.32296753 -298.62014771]
[327.17156982 -284.80212402]
[332.15844727 -270.65029907]
[336.26464844 -256.21829224]
[339.47457886 -241.56086731]
[341.77612305 -226.73364258]
[343.16052246 -211.79286194]
[343.62252808 -196.79518127]
[343.16040039 -181.79751587]
[341.77584839 -166.85673523]
[339.47415161 -152.02954102]
[336.26403809 -137.37216187]
[332.15771484 -122.94019318]
[327.17071533 -108.78839111]
[321.32196045 -94.97043610]
[314.63366699 -81.53874207]
[307.13119507 -68.54426575]
[298.84298706 -56.03629303]
[289.80050659 -44.06227875]
[280.03802490 -32.66763687]
[269.59262085 -21.89559937]
[258.50387573 -11.78702164]
[246.81385803 -2.38025379]
[234.56692505 6.28902292]
[221.80953979 14.18792248]
[208.59007263 21.28648186]
[194.95869446 27.55777168]
[180.96710205 32.97800446]
[166.66836548 37.52661896]
[152.11674500 41.18635941]
[137.36741638 43.94334793]
[122.47633362 45.78712082]
[107.50000000 46.71068192]
[107.50000000 61.71068192]
[107.50000000 76.71068573]
[107.50000000 91.71068573]
[107.65399933 106.70989227]
[107.96197510 121.70673370]
[108.26995087 136.70356750]
[108.57792664 151.70040894]
[108.88591003 166.69725037]
[109.19388580 181.69407654]
[109.50186157 196.69091797]
[109.80983734 211.68775940]
[110.11782074 226.68460083]
[110.42579651 241.68142700]
[125.13583374 244.97966003]
[138.62878418 251.70301819]
[150.12020874 261.46060181]
[158.94198608 273.68515015]
[164.58125305 287.66595459]
[166.71012878 302.59011841]
[165.20484924 317.59005737]
[160.15293884 331.79364014]
[151.84809875 344.37509155]
[140.77316284 354.60296631]
[127.57202148 361.88259888]
[113.01216125 365.79080200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 130]
[24 129]
[25 128]
[26 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
