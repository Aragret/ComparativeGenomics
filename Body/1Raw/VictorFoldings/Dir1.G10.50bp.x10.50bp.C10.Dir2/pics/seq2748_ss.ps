%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAGUAUUGGGGGGGGGGAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUACCCUAAxxxxxxxxxxAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACCCCCCCCCCCACCAGUCUU\
) } def
/len { sequence length } bind def

/coor [
[65.69429779 370.21130371]
[51.84836197 364.19528198]
[40.13970184 354.66586304]
[31.43717575 342.33020020]
[26.38657379 328.10366821]
[25.36268234 313.04199219]
[28.44148064 298.26284790]
[35.39450455 284.86291504]
[45.70578766 273.83657837]
[58.61016846 266.00207520]
[73.15005493 261.94076538]
[73.15005493 246.94075012]
[73.15005493 231.94075012]
[73.15005493 216.94075012]
[73.15005493 201.94075012]
[73.15005493 186.94075012]
[73.15005493 171.94075012]
[73.15005493 156.94075012]
[73.15005493 141.94075012]
[73.15005493 126.94075775]
[77.30506897 120.53955078]
[82.03332520 114.65077972]
[87.29241180 109.31571198]
[73.51003265 115.23567963]
[59.72764969 121.15563965]
[45.94527054 127.07560730]
[33.77814484 138.88227844]
[19.06469154 130.45906067]
[23.08563614 113.98883057]
[40.02530670 113.29322052]
[53.80768967 107.37326050]
[67.59007263 101.45329285]
[81.37245178 95.53333282]
[88.14056396 82.14704895]
[84.73758698 67.53815460]
[81.33460999 52.92926407]
[77.93163300 38.32036972]
[74.52865601 23.71147919]
[61.63645172 10.60533524]
[67.30723572 -5.97302818]
[63.60107803 -20.50796509]
[59.89491653 -35.04290009]
[42.91743088 -39.36272430]
[30.50156403 -51.59569931]
[25.97653389 -68.33615112]
[30.49226379 -84.98733521]
[42.72879410 -97.02359772]
[38.42120743 -111.39177704]
[34.11362457 -125.75996399]
[29.80603981 -140.12814331]
[25.49845505 -154.49633789]
[18.04354477 -167.51263428]
[2.98039961 -172.35125732]
[-0.01895688 -186.94075012]
[-10.23243713 -197.92640686]
[-26.05823708 -202.22479248]
[-29.98646545 -218.14649963]
[-17.97609711 -229.31266785]
[-2.38236880 -224.23648071]
[0.75322795 -208.13989258]
[10.96670818 -197.15422058]
[25.29931641 -193.10137939]
[29.02920914 -177.72612000]
[25.98480225 -192.41392517]
[26.77209854 -207.39324951]
[31.33942795 -221.68098450]
[39.38703156 -234.33943176]
[50.38674164 -244.53778076]
[63.61663437 -251.60671997]
[78.20841980 -255.08230591]
[93.20442963 -254.73645020]
[107.62046814 -250.59181213]
[120.51039124 -242.92044067]
[131.02822876 -232.22581482]
[138.48367310 -219.20980835]
[142.38743591 -204.72669983]
[142.48329163 -189.72700500]
[138.76496887 -175.19517517]
[131.47648621 -162.08494568]
[121.09619904 -151.25675964]
[108.30537415 -143.42126465]
[93.94348907 -139.09272766]
[78.95312500 -138.55522156]
[64.31810760 -141.84402466]
[50.99894714 -148.74330139]
[39.86663818 -158.80390930]
[44.17422485 -144.43572998]
[48.48180771 -130.06755066]
[52.78939438 -115.69936371]
[57.09697723 -101.33117676]
[69.70187378 -99.74489594]
[80.80035400 -93.46662903]
[88.71131897 -83.40644836]
[92.22099304 -71.05027771]
[90.76904297 -58.24047852]
[84.53772736 -46.90113449]
[74.42985535 -38.74906158]
[78.13601685 -24.21412468]
[81.84217834 -9.67918968]
[92.10854340 -3.20547414]
[95.28830719 8.92333698]
[89.13754272 20.30850029]
[92.54052734 34.91739273]
[95.94350433 49.52628708]
[99.34648132 64.13517761]
[102.74945831 78.74407196]
[102.15145874 63.75599670]
[109.41259766 50.63060760]
[122.42761230 43.17343903]
[137.42297363 43.54659653]
[150.05096436 51.64189148]
[156.65028381 65.11219788]
[155.30752563 80.05197144]
[146.41201782 92.12963867]
[132.54289246 97.84342957]
[117.72354889 95.53771973]
[131.84835815 100.58647919]
[145.97315979 105.63523102]
[160.09796143 110.68399048]
[176.12541199 107.21231079]
[186.94383240 119.53683472]
[181.42414856 134.97914124]
[165.24453735 137.65351868]
[155.04919434 124.80879211]
[140.92439270 119.76003265]
[126.79959106 114.71128082]
[112.67478943 109.66252136]
[106.54360962 113.98207855]
[107.89414978 128.92115784]
[94.28124237 122.62119293]
[88.15005493 126.94075775]
[88.15005493 141.94075012]
[88.15005493 156.94075012]
[88.15005493 171.94075012]
[88.15005493 186.94075012]
[88.15005493 201.94075012]
[88.15005493 216.94075012]
[88.15005493 231.94075012]
[88.15005493 246.94075012]
[88.15005493 261.94076538]
[102.68994141 266.00207520]
[115.59432220 273.83657837]
[125.90560913 284.86291504]
[132.85862732 298.26284790]
[135.93742371 313.04199219]
[134.91354370 328.10366821]
[129.86293030 342.33020020]
[121.16040802 354.66586304]
[109.45175171 364.19528198]
[95.60581207 370.21130371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 33]
[24 32]
[25 31]
[26 30]
[34 106]
[35 105]
[36 104]
[37 103]
[38 102]
[40 99]
[41 98]
[42 97]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[52 63]
[54 61]
[55 60]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
