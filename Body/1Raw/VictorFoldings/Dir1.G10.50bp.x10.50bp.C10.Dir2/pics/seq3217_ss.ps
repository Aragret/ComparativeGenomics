%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCCUCUUGGGGGGGGGGCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUxxxxxxxxxxCGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAACCCCCCCCCCAAUUCUUCUU\
) } def
/len { sequence length } bind def

/coor [
[47.14635086 516.27478027]
[33.30041122 510.25878906]
[21.59174919 500.72937012]
[12.88922501 488.39370728]
[7.83862352 474.16717529]
[6.81473207 459.10549927]
[9.89353085 444.32632446]
[16.84655380 430.92639160]
[27.15783691 419.90008545]
[40.06221771 412.06555176]
[54.60210419 408.00424194]
[54.60210419 393.00424194]
[54.60210419 378.00424194]
[54.60210419 363.00424194]
[54.60210419 348.00424194]
[54.60210419 333.00424194]
[54.60210419 318.00424194]
[54.60210419 303.00424194]
[54.60210419 288.00424194]
[54.60210419 273.00424194]
[51.43652725 266.27188110]
[54.76138687 257.69299316]
[55.07344437 242.69625854]
[46.08445740 254.70449829]
[32.83139801 261.72991943]
[17.84772110 262.42950439]
[3.99770427 256.66955566]
[-6.07108498 245.55113220]
[-10.43389797 231.19961548]
[-8.25673962 216.35845947]
[0.04420326 203.86468506]
[12.88212490 196.10661316]
[27.80292892 194.56726074]
[41.95435715 199.54090881]
[52.63122177 210.07676697]
[57.79234695 224.15936279]
[61.80008698 209.70468140]
[65.80782318 195.24998474]
[69.81556702 180.79530334]
[62.27969360 167.99896240]
[66.13819885 153.28276062]
[79.61126709 145.46520996]
[83.61901093 131.01051331]
[73.29423523 123.80122375]
[66.00830078 113.22694397]
[62.82764816 100.52919006]
[64.32383728 87.27459717]
[70.48001099 75.16171265]
[80.67140198 65.80342865]
[93.72500610 60.51279831]
[88.82345581 46.33623886]
[83.92189789 32.15968323]
[79.02034760 17.98312378]
[64.07925415 19.84251785]
[49.07810211 18.55445480]
[34.67267990 14.17524815]
[21.49272728 6.89633608]
[10.11441898 -2.96407914]
[1.03516436 -14.97494221]
[-5.34812975 -28.61118889]
[-8.75641441 -43.27670288]
[-9.04069233 -58.33036804]
[-6.18853760 -73.11410522]
[-0.32463393 -86.98163605]
[8.29467487 -99.32672119]
[19.29258728 -109.60969543]
[32.18832397 -117.38103485]
[46.41814041 -122.30099487]
[61.35996628 -124.15451050]
[76.36061096 -122.86054993]
[90.76431274 -118.47567749]
[103.94139862 -111.19158173]
[115.31582642 -101.32669067]
[124.39035797 -89.31225586]
[130.76828003 -75.67349243]
[134.17079163 -61.00664139]
[134.44915771 -45.95286560]
[131.59118652 -31.17025185]
[125.72182465 -17.30503082]
[117.09766388 -4.96333504]
[106.09570312 5.31531286]
[93.19690704 13.08157349]
[98.09845734 27.25813103]
[103.00000763 41.43468857]
[107.90155792 55.61124802]
[122.02636719 60.66000366]
[134.80372620 52.80257797]
[147.58108521 44.94515228]
[160.35842896 37.08772659]
[156.20155334 22.57487297]
[156.11549377 7.47867632]
[160.10664368 -7.08062649]
[167.87882996 -20.02263832]
[178.85531616 -30.38697624]
[192.22155762 -37.40453720]
[206.98568726 -40.55457306]
[222.05213928 -39.60332489]
[236.30285645 -34.62138748]
[248.68034363 -25.97845268]
[258.26611328 -14.31588268]
[264.34884644 -0.49911651]
[266.47714233 14.44654846]
[264.49307251 29.41204643]
[258.54388428 43.28683472]
[249.07106018 55.04131699]
[236.77749634 63.80322647]
[222.57550049 68.92237854]
[207.51893616 70.01889038]
[192.72509766 67.01139832]
[179.29179382 60.12307358]
[168.21586609 49.86508560]
[155.43850708 57.72251129]
[142.66114807 65.57993317]
[129.88378906 73.43736267]
[136.32279968 85.04492950]
[138.52207947 97.89766693]
[136.38653564 110.52353668]
[130.30886841 121.52757263]
[121.10841370 129.74597168]
[109.92386627 134.36877441]
[98.07369995 135.01826477]
[94.06595612 149.47294617]
[101.58987427 163.11216736]
[97.31954193 177.71418762]
[84.27025604 184.80303955]
[80.26251221 199.25772095]
[76.25477600 213.71241760]
[72.24703217 228.16709900]
[70.07019806 243.00831604]
[69.75814056 258.00506592]
[69.60210419 273.00424194]
[69.60210419 288.00424194]
[69.60210419 303.00424194]
[69.60210419 318.00424194]
[69.60210419 333.00424194]
[69.60210419 348.00424194]
[69.60210419 363.00424194]
[69.60210419 378.00424194]
[69.60210419 393.00424194]
[69.60210419 408.00424194]
[84.14199066 412.06555176]
[97.04637146 419.90008545]
[107.35765839 430.92639160]
[114.31067657 444.32632446]
[117.38948059 459.10549927]
[116.36558533 474.16717529]
[111.31498718 488.39370728]
[102.61245728 500.72937012]
[90.90380096 510.25878906]
[77.05786133 516.27478027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[36 128]
[37 127]
[38 126]
[39 125]
[42 122]
[43 121]
[50 85]
[51 84]
[52 83]
[53 82]
[86 114]
[87 113]
[88 112]
[89 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
