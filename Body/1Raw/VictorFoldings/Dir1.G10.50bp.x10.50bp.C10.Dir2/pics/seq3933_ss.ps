%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACAAGGGGGGGGGGGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUxxxxxxxxxxACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAACCCCCCCCCCACAACAUAAG\
) } def
/len { sequence length } bind def

/coor [
[58.66557312 360.89431763]
[48.12165833 350.11114502]
[40.59138107 337.04418945]
[36.54809570 322.51480103]
[36.24597168 307.43637085]
[39.70399857 292.75668335]
[46.70479965 279.39855957]
[56.80830002 268.20169067]
[69.37938690 259.86990356]
[83.62783051 254.92695618]
[82.38095093 239.97886658]
[81.13407898 225.03077698]
[79.88720703 210.08268738]
[78.64032745 195.13459778]
[77.39345551 180.18652344]
[76.14658356 165.23843384]
[80.42185211 95.45241547]
[68.72222900 86.06525421]
[57.02260208 76.67809296]
[45.32297897 67.29093170]
[33.62335587 57.90376663]
[21.92373276 48.51660538]
[10.22410870 39.12944412]
[-0.28971291 49.84570312]
[-11.81829643 59.46185303]
[-24.24706268 67.88233185]
[-37.45248413 75.02343750]
[-51.30331802 80.81420135]
[-65.66190338 85.19708252]
[-80.38553619 88.12850189]
[-95.32788086 89.57933807]
[-110.34043121 89.53517151]
[-125.27397919 87.99642944]
[-139.98011780 84.97841644]
[-154.31265259 80.51113129]
[-168.12918091 74.63895416]
[-181.29234314 67.42026520]
[-193.67135620 58.92679977]
[-205.14314270 49.24297333]
[-215.59373474 38.46503448]
[-224.91921997 26.70009995]
[-233.02696228 14.06509590]
[-239.83633423 0.68560016]
[-245.27969360 -13.30541325]
[-249.30293274 -27.76889038]
[-251.86605835 -42.56108475]
[-252.94360352 -57.53497696]
[-252.52485657 -72.54175568]
[-250.61398315 -87.43225861]
[-247.22994995 -102.05850220]
[-242.40643311 -116.27511597]
[-236.19132996 -129.94081116]
[-228.64643860 -142.91976929]
[-219.84674072 -155.08299255]
[-209.87968445 -166.30958557]
[-198.84434509 -176.48797607]
[-186.85038757 -185.51701355]
[-174.01701355 -193.30694580]
[-160.47177124 -199.78036499]
[-146.34928894 -204.87292480]
[-131.78993225 -208.53402710]
[-116.93838501 -210.72724915]
[-101.94226837 -211.43083191]
[-86.95061493 -210.63777161]
[-72.11242676 -208.35592651]
[-57.57517242 -204.60801697]
[-43.48333740 -199.43125916]
[-29.97697639 -192.87710571]
[-17.19032478 -185.01071167]
[-5.25046349 -175.91026306]
[5.72393894 -165.66618347]
[15.62381172 -154.38029480]
[24.35076332 -142.16477966]
[31.81805611 -129.14102173]
[37.95147705 -115.43848419]
[42.69007111 -101.19332886]
[45.98673630 -86.54714966]
[47.80871201 -71.64550781]
[48.13788986 -56.63650131]
[46.97099686 -41.66930389]
[44.31963348 -26.89267159]
[40.21014404 -12.45346260]
[34.68338013 1.50481355]
[27.79426575 14.84343052]
[19.61127090 27.42982101]
[31.31089401 36.81698227]
[43.01051712 46.20414352]
[54.71014023 55.59130478]
[66.40976715 64.97846985]
[78.10939026 74.36563110]
[89.80901337 83.75279236]
[84.52601624 69.71391296]
[91.32768250 56.34464645]
[105.78575134 52.34910583]
[118.48722839 60.32860947]
[121.16275787 75.08806610]
[112.07082367 87.01804352]
[125.97337341 81.38609314]
[139.87593079 75.75413513]
[153.77848816 70.12217712]
[167.68104553 64.49021912]
[175.23481750 50.33677292]
[191.03570557 47.55982590]
[202.96261597 58.28961182]
[201.86625671 74.29515839]
[188.58764648 83.29837799]
[173.31300354 78.39277649]
[159.41044617 84.02473450]
[145.50788879 89.65669250]
[131.60533142 95.28864288]
[117.70277405 100.92060089]
[118.01476288 108.41410828]
[131.30590820 115.36721039]
[118.63874054 123.40112305]
[118.95072937 130.89463806]
[133.27333069 135.35145569]
[147.59593201 139.80827332]
[161.46867371 132.23709106]
[176.60803223 136.77307129]
[184.03210449 150.72508240]
[179.33631897 165.81564331]
[165.30659485 173.09179688]
[150.26652527 168.23672485]
[143.13911438 154.13085938]
[128.81651306 149.67404175]
[114.49391937 145.21723938]
[108.64410400 149.91081238]
[118.03107452 161.61059570]
[106.33113861 170.99736023]
[96.94448090 159.29797363]
[91.09466553 163.99156189]
[92.34154510 178.93963623]
[93.58841705 193.88772583]
[94.83528900 208.83581543]
[96.08216858 223.78390503]
[97.32904053 238.73199463]
[98.57591248 253.68008423]
[113.44637299 256.19412231]
[127.22409821 262.32803345]
[139.04301453 271.69628906]
[148.16017151 283.70996094]
[154.00245667 297.61386108]
[156.20262146 312.53399658]
[154.62236023 327.53244019]
[149.36100769 341.66641235]
[140.74929810 354.04742432]
[129.32858276 363.89718628]
[115.81676483 370.59655762]
[101.06320190 373.72436523]
[85.99533081 373.08407593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
