%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGAUAUCAGGGGGGGGGGUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGxxxxxxxxxxUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACACCCCCCCCCCAAAUGACAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 393.90515137]
[71.01555634 388.35214233]
[58.81560135 379.48580933]
[49.20452881 367.86352539]
[42.78650284 354.21582031]
[39.96496582 339.40063477]
[40.91728210 324.34924316]
[45.58358765 310.00781250]
[53.67055511 297.27786255]
[64.66983032 286.95959473]
[77.88998413 279.70162964]
[92.50000000 275.96017456]
[92.50000000 260.96017456]
[92.50000000 245.96018982]
[92.50000000 230.96018982]
[92.50000000 215.96018982]
[92.50000000 200.96018982]
[92.50000000 185.96018982]
[92.50000000 170.96018982]
[92.50000000 155.96018982]
[92.50000000 140.96018982]
[92.50000000 125.96018219]
[82.25154114 120.37580109]
[75.31407928 110.99028778]
[72.98181152 99.55452728]
[58.64174652 95.15422058]
[44.30168533 90.75392151]
[54.31980515 101.91802979]
[61.02206802 115.33740997]
[63.92945480 130.05294800]
[62.83416748 145.01290894]
[57.81449127 159.14807129]
[49.22918701 171.44816589]
[37.69186401 181.03410339]
[24.02711296 187.22074890]
[9.21157646 189.56593323]
[-5.69585323 187.90203857]
[-19.62971687 182.34799194]
[-31.59413719 173.30075073]
[-40.73399734 161.40693665]
[-46.39605713 147.51660156]
[-48.17563629 132.62254333]
[-45.94554901 117.78924561]
[-39.86518097 104.07687378]
[-30.36910629 92.46547699]
[-18.13602829 83.78493500]
[-4.04026175 78.65567017]
[10.91074181 77.44426727]
[25.64419365 80.23591614]
[14.45589733 70.24481964]
[3.26760077 60.25372314]
[-7.92069578 50.26262665]
[-23.37007523 52.68144989]
[-36.73299789 44.55948257]
[-41.69989777 29.73167610]
[-35.92556381 15.19926262]
[-22.13645172 7.82400465]
[-6.84336233 11.08827400]
[2.73277473 23.45078278]
[2.07040119 39.07433319]
[13.25869751 49.06542969]
[24.44699478 59.05652618]
[35.63529205 69.04762268]
[48.70198441 76.41386414]
[63.04204559 80.81416321]
[77.38211060 85.21446228]
[94.49043274 73.54577637]
[114.83465576 77.41429138]
[126.22573090 67.65502167]
[137.61680603 57.89574432]
[149.00787354 48.13647079]
[134.16415405 50.29603577]
[119.45801544 47.34141922]
[106.60021973 39.61632156]
[97.08648682 28.01939201]
[92.02352142 13.89967537]
[92.00028992 -1.10030687]
[97.01950836 -15.23563576]
[106.49728394 -26.86197472]
[119.33108521 -34.62685776]
[134.02799988 -37.62700272]
[148.87834167 -35.51342010]
[162.15461731 -28.53196716]
[172.31240845 -17.49479103]
[178.17007446 -3.68582296]
[179.04623413 11.28856754]
[174.83892822 25.68643761]
[166.03886414 37.83169174]
[179.96958923 32.26975250]
[193.90029907 26.70781708]
[207.83100891 21.14587975]
[221.76173401 15.58394146]
[224.39987183 11.95904541]
[227.73385620 9.63351250]
[231.25666809 8.66575050]
[234.49618530 8.93907166]
[237.07067871 10.18927479]
[243.82080078 -0.84882742]
[255.90231323 -4.19670200]
[266.65841675 1.42190063]
[281.08578491 -2.68304420]
[295.51318359 -6.78798914]
[309.89764404 -11.04083538]
[324.23770142 -15.44113636]
[338.57778931 -19.84143639]
[349.34747314 -32.20856476]
[365.38848877 -28.80017471]
[370.19924927 -13.12252235]
[358.83081055 -1.30343437]
[342.97808838 -5.50137520]
[328.63800049 -1.10107481]
[314.29794312 3.29922557]
[308.79202271 8.29893303]
[299.61810303 7.63939571]
[285.19073486 11.74434090]
[270.76333618 15.84928513]
[259.28271484 29.08708954]
[241.47097778 24.52933693]
[227.32366943 29.51465797]
[213.39295959 35.07659531]
[199.46223450 40.63853455]
[185.53152466 46.20046997]
[171.60079956 51.76240540]
[158.76715088 59.52754211]
[147.37608337 69.28681946]
[135.98500061 79.04608917]
[124.59392548 88.80536652]
[127.02181244 100.05467224]
[124.54842377 111.29406738]
[117.62240601 120.48492432]
[107.50000000 125.96018219]
[107.50000000 140.96018982]
[107.50000000 155.96018982]
[107.50000000 170.96018982]
[107.50000000 185.96018982]
[107.50000000 200.96018982]
[107.50000000 215.96018982]
[107.50000000 230.96018982]
[107.50000000 245.96018982]
[107.50000000 260.96017456]
[107.50000000 275.96017456]
[122.11001587 279.70162964]
[135.33016968 286.95959473]
[146.32945251 297.27786255]
[154.41641235 310.00781250]
[159.08271790 324.34924316]
[160.03503418 339.40063477]
[157.21350098 354.21582031]
[150.79547119 367.86352539]
[141.18440247 379.48580933]
[128.98443604 388.35214233]
[114.96250153 393.90515137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 66]
[26 65]
[27 64]
[49 63]
[50 62]
[51 61]
[52 60]
[68 127]
[69 126]
[70 125]
[71 124]
[88 123]
[89 122]
[90 121]
[91 120]
[92 119]
[97 118]
[100 116]
[101 115]
[102 114]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
