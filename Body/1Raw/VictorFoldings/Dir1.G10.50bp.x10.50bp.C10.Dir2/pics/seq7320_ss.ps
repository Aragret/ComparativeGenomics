%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGCCCCCCGGGGGGGGGGACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAxxxxxxxxxxAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCCCCCCCCCCCAUGGAUGACCCCC\
) } def
/len { sequence length } bind def

/coor [
[62.84469986 169.46969604]
[50.36946869 161.18305969]
[39.68784332 150.68530273]
[31.18585396 138.35581970]
[25.17075157 124.64019775]
[21.85991669 110.03408813]
[21.37299919 95.06536102]
[23.72760010 80.27497101]
[28.83862305 66.19742584]
[36.52136230 53.34147263]
[46.49816513 42.17172623]
[58.40848160 33.09184265]
[71.82188416 26.42996788]
[86.25361633 22.42685509]
[85.05429077 7.47487831]
[83.85496521 -7.47709846]
[82.65563965 -22.42907524]
[81.45630646 -37.38105392]
[80.25698090 -52.33303070]
[79.05765533 -67.28500366]
[77.85832977 -82.23698425]
[76.65900421 -97.18895721]
[75.45967102 -112.14093781]
[74.26034546 -127.09291077]
[73.06101990 -142.04489136]
[58.05930710 -141.75030518]
[43.06718063 -142.36203003]
[28.13933754 -143.87785339]
[13.33025646 -146.29223633]
[-1.30603087 -149.59635925]
[-15.71611595 -153.77818298]
[-29.84741783 -158.82243347]
[-43.64837265 -164.71070862]
[-57.06861877 -171.42152405]
[-70.05919647 -178.93040466]
[-82.57269287 -187.20993042]
[-94.56345367 -196.22988892]
[-105.98772430 -205.95739746]
[-116.80381775 -216.35691833]
[-126.97226715 -227.39054871]
[-136.45596313 -239.01799011]
[-145.22032166 -251.19683838]
[-153.23333740 -263.88265991]
[-160.46577454 -277.02911377]
[-166.89126587 -290.58828735]
[-172.48634338 -304.51071167]
[-177.23059082 -318.74551392]
[-181.10670471 -333.24084473]
[-184.10054016 -347.94372559]
[-186.20117188 -362.80056763]
[-187.40093994 -377.75711060]
[-187.69546509 -392.75885010]
[-187.08364868 -407.75097656]
[-185.56776428 -422.67880249]
[-183.15332031 -437.48785400]
[-179.84912109 -452.12414551]
[-175.66723633 -466.53421021]
[-170.62292480 -480.66546631]
[-164.73457336 -494.46640015]
[-158.02369690 -507.88662720]
[-150.51477051 -520.87713623]
[-142.23518372 -533.39062500]
[-133.21516418 -545.38134766]
[-123.48760986 -556.80554199]
[-113.08802795 -567.62158203]
[-102.05435944 -577.79003906]
[-90.42686462 -587.27368164]
[-78.24797821 -596.03796387]
[-65.56213379 -604.05090332]
[-52.41562271 -611.28332520]
[-38.85641479 -617.70874023]
[-24.93398857 -623.30371094]
[-10.69914150 -628.04791260]
[3.79618192 -631.92395020]
[18.49909019 -634.91772461]
[33.35593414 -637.01831055]
[48.31250000 -638.21801758]
[63.31421280 -638.51245117]
[78.30633545 -637.90057373]
[93.23416138 -636.38458252]
[108.04322052 -633.97009277]
[122.67948151 -630.66583252]
[137.08952332 -626.48388672]
[151.22077942 -621.43951416]
[165.02168274 -615.55108643]
[178.44186401 -608.84014893]
[191.43237305 -601.33117676]
[203.94578552 -593.05151367]
[215.93646240 -584.03143311]
[227.36064148 -574.30383301]
[238.17665100 -563.90417480]
[248.34498596 -552.87048340]
[257.82858276 -541.24291992]
[266.59283447 -529.06402588]
[274.60571289 -516.37811279]
[281.83804321 -503.23159790]
[288.26339722 -489.67236328]
[293.85833740 -475.74990845]
[298.60247803 -461.51504517]
[302.47845459 -447.01968384]
[305.47213745 -432.31677246]
[307.57266235 -417.45989990]
[308.77227783 -402.50335693]
[309.06665039 -387.50161743]
[308.45471191 -372.50949097]
[306.93869019 -357.58169556]
[304.52410889 -342.77264404]
[301.21975708 -328.13638306]
[297.03775024 -313.72637939]
[291.99328613 -299.59515381]
[286.10482788 -285.79428101]
[279.39382935 -272.37411499]
[271.88476562 -259.38363647]
[263.60507202 -246.87025452]
[254.58494568 -234.87962341]
[244.85728455 -223.45549011]
[234.45759583 -212.63954163]
[223.42384338 -202.47125244]
[211.79626465 -192.98770142]
[199.61729431 -184.22352600]
[186.93136597 -176.21067810]
[173.78479004 -168.97842407]
[160.22552490 -162.55313110]
[146.30303955 -156.95823669]
[132.06816101 -152.21418762]
[117.57279205 -148.33827209]
[102.86985779 -145.34465027]
[88.01300049 -143.24421692]
[89.21232605 -128.29223633]
[90.41165161 -113.34026337]
[91.61097717 -98.38829041]
[92.81030273 -83.43630981]
[94.00963593 -68.48433685]
[95.20896149 -53.53235626]
[96.40828705 -38.58037949]
[97.60761261 -23.62840271]
[98.80693817 -8.67642593]
[100.00627136 6.27555132]
[101.20559692 21.22752762]
[116.09090424 22.87906456]
[130.39469910 27.31768990]
[143.60005188 34.38299561]
[155.22973633 43.81964493]
[164.86346436 55.28660583]
[172.15307617 68.36947632]
[176.83512878 82.59544373]
[178.74043274 97.45040131]
[177.80010986 112.39749908]
[174.04817200 126.89656067]
[167.62017822 140.42359924]
[158.74844360 152.48976135]
[147.75360107 162.65899658]
[135.03297424 170.56378174]
[121.04628754 175.91844177]
[106.29900360 178.52947998]
[91.32407379 178.30252075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
