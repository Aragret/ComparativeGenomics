%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGAACCAGAGGGGGGGGGGGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAxxxxxxxxxxGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAACCCCCCCCCCGGACGAACCUGA\
) } def
/len { sequence length } bind def

/coor [
[88.91462708 380.79837036]
[74.75402832 375.64337158]
[62.16427994 367.36117554]
[51.82434082 356.39840698]
[44.29183197 343.34628296]
[39.97296524 328.90869141]
[39.10065842 313.86422729]
[41.72194672 299.02423096]
[47.69547272 285.18899536]
[56.69909286 273.10464478]
[68.24724579 263.42285156]
[81.71716309 256.66577148]
[96.38242340 253.19779968]
[96.38242340 238.19779968]
[96.38242340 223.19779968]
[96.38242340 208.19779968]
[96.38242340 193.19779968]
[96.38242340 178.19779968]
[96.38242340 163.19779968]
[96.38242340 148.19779968]
[96.38242340 133.19779968]
[96.38242340 118.19780731]
[85.72221375 107.64508057]
[70.72298431 107.79709625]
[55.72375488 107.94910431]
[40.72452545 108.10111237]
[25.72529602 108.25312042]
[10.78764439 109.61933899]
[-3.99030066 112.19078827]
[-18.76824570 114.76223755]
[-33.54618835 117.33368683]
[-42.43416595 130.40194702]
[-57.97497559 133.27574158]
[-70.94853973 124.25009918]
[-73.65786743 108.67977142]
[-64.49556732 95.80236053]
[-48.89746094 93.25780487]
[-36.11763763 102.55574036]
[-21.33969498 99.98429108]
[-6.56174946 97.41284180]
[8.21619511 94.84139252]
[-4.34028292 86.63561249]
[-9.82130814 72.67286682]
[-6.20000362 58.11655426]
[5.18447590 48.34959030]
[20.12216568 46.98377991]
[33.08912659 54.52419662]
[39.29019165 68.18241119]
[36.43221664 82.90763092]
[25.57328606 93.25389099]
[40.57251740 93.10188293]
[55.57174683 92.94987488]
[70.57097626 92.79786682]
[85.57020569 92.64585114]
[98.90062714 85.76836395]
[107.71740723 73.63311005]
[116.53417969 61.49785233]
[125.35095978 49.36259842]
[114.03466797 39.50160980]
[103.63417816 28.67906761]
[94.23088837 16.97967148]
[85.89840698 4.49498796]
[78.70194244 -8.67727375]
[72.69780731 -22.43401909]
[67.93300629 -36.66757965]
[64.44483185 -51.26656342]
[62.26057053 -66.11669922]
[61.39733124 -81.10177612]
[61.86186218 -96.10449982]
[63.65053177 -111.00746155]
[66.74933624 -125.69402313]
[71.13403320 -140.04924011]
[76.77028656 -153.96075439]
[83.61400604 -167.31968689]
[91.61161804 -180.02148438]
[100.70053101 -191.96675110]
[110.80960846 -203.06198120]
[121.85973358 -213.22035217]
[133.76441956 -222.36233521]
[146.43049622 -230.41641235]
[159.75885010 -237.31951904]
[173.64512634 -243.01765442]
[187.98068237 -247.46618652]
[202.65330505 -250.63034058]
[217.54815674 -252.48532104]
[232.54866028 -253.01663208]
[247.53742981 -252.22010803]
[262.39715576 -250.10195923]
[277.01150513 -246.67880249]
[291.26614380 -241.97740173]
[305.04946899 -236.03456116]
[318.25363159 -228.89680481]
[330.77529907 -220.61996460]
[342.51641846 -211.26885986]
[353.38516235 -200.91664124]
[363.29641724 -189.64434814]
[372.17263794 -177.54020691]
[379.94433594 -164.69892883]
[386.55072021 -151.22103882]
[391.94003296 -137.21202087]
[396.07015991 -122.78150177]
[398.90872192 -108.04243469]
[400.43353271 -93.11016846]
[400.63262939 -78.10157013]
[399.50448608 -63.13410950]
[397.05792236 -48.32492447]
[393.31207275 -33.78992081]
[388.29629517 -19.64286041]
[382.04977417 -5.99445915]
[374.62145996 7.04846001]
[366.06948853 19.38381767]
[356.46075439 30.91507149]
[345.87045288 41.55197144]
[334.38153076 51.21126938]
[322.08386230 59.81736374]
[309.07369995 67.30290222]
[295.45285034 73.60929108]
[281.32797241 78.68718719]
[266.80957031 82.49683380]
[252.01126099 85.00843048]
[237.04890442 86.20230865]
[222.03958130 86.06912231]
[207.10075378 84.60992432]
[192.34936523 81.83612823]
[177.90083313 77.76944733]
[163.86827087 72.44170380]
[150.36149597 65.89459991]
[137.48622131 58.17937469]
[128.66943359 70.31462860]
[119.85266113 82.44988251]
[111.03588104 94.58514404]
[116.23121643 104.62961578]
[111.38242340 118.19780731]
[111.38242340 133.19779968]
[111.38242340 148.19779968]
[111.38242340 163.19779968]
[111.38242340 178.19779968]
[111.38242340 193.19779968]
[111.38242340 208.19779968]
[111.38242340 223.19779968]
[111.38242340 238.19779968]
[111.38242340 253.19779968]
[126.04768372 256.66577148]
[139.51760864 263.42285156]
[151.06576538 273.10464478]
[160.06938171 285.18899536]
[166.04290771 299.02423096]
[168.66419983 313.86422729]
[167.79188538 328.90869141]
[163.47302246 343.34628296]
[155.94050598 356.39840698]
[145.60057068 367.36117554]
[133.01081848 375.64337158]
[118.85021973 380.79837036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 41]
[29 40]
[30 39]
[31 38]
[55 131]
[56 130]
[57 129]
[58 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
