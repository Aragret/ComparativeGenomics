%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCCCUAAGGGGGGGGGGACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACxxxxxxxxxxAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGCCCCCCCCCCUUAACCCUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 361.53042603]
[71.19830322 355.51440430]
[59.48964310 345.98498535]
[50.78712082 333.64932251]
[45.73651886 319.42279053]
[44.71262741 304.36111450]
[47.79142761 289.58193970]
[54.74444962 276.18203735]
[65.05573273 265.15570068]
[77.96011353 257.32119751]
[92.50000000 253.25987244]
[92.50000000 238.25987244]
[92.50000000 223.25987244]
[92.50000000 208.25987244]
[92.50000000 193.25987244]
[92.50000000 178.25987244]
[92.50000000 163.25987244]
[92.50000000 148.25987244]
[92.50000000 133.25987244]
[92.50000000 118.25987244]
[87.16918945 112.98422241]
[85.56742096 127.89846039]
[72.90840149 135.94514465]
[58.72443008 131.06510925]
[53.69609451 116.93302155]
[61.60975647 104.19041443]
[76.50756073 102.43293762]
[71.17675018 97.15728760]
[56.17755890 97.31332397]
[41.17837143 97.46936035]
[26.17918205 97.62539673]
[11.17999363 97.78143311]
[3.70933223 111.20100403]
[-9.47846699 119.07358551]
[-24.83595276 119.28149414]
[-38.23203659 111.76880646]
[-46.06324005 98.55639648]
[-46.22301102 83.19833374]
[-38.66836929 69.82585907]
[-25.43147469 62.03610992]
[-10.07298946 61.92448044]
[3.27573514 69.52100372]
[11.02395725 82.78224945]
[26.02314568 82.62621307]
[41.02233505 82.47017670]
[56.02152252 82.31414032]
[71.02071381 82.15810394]
[73.98069000 75.26690674]
[60.19831085 69.34694672]
[46.41602707 63.42675400]
[52.33644867 49.64456940]
[66.11827087 55.56456757]
[79.90065765 61.48452759]
[82.86063385 54.59333801]
[72.64715576 43.60767365]
[56.82135773 39.30929565]
[52.89312744 23.38757896]
[64.90349579 12.22142124]
[80.49722290 17.29760742]
[83.63282013 33.39419556]
[93.84629822 44.37985992]
[107.02787018 68.78651428]
[104.21860504 93.16711426]
[115.72040558 83.53858948]
[127.22221375 73.91006470]
[138.72401428 64.28153992]
[130.30067444 51.85421753]
[123.17781067 38.63847351]
[117.42852783 24.76991844]
[113.11182404 10.39086819]
[110.27199554 -4.35112524]
[108.93818665 -19.30478477]
[109.12406921 -34.31666183]
[110.82775116 -49.23271179]
[114.03173828 -63.89986420]
[118.70316315 -78.16761780]
[124.79408264 -91.88956451]
[132.24200439 -104.92488098]
[140.97047424 -117.13981628]
[150.88995361 -128.40902710]
[161.89865112 -138.61685181]
[173.88357544 -147.65856934]
[186.72175598 -155.44137573]
[200.28144836 -161.88542175]
[214.42350769 -166.92456055]
[229.00282288 -170.50711060]
[243.86978149 -172.59628296]
[258.87182617 -173.17065430]
[273.85498047 -172.22433472]
[288.66555786 -169.76701355]
[303.15151978 -165.82392883]
[317.16421509 -160.43553162]
[330.55990601 -153.65711975]
[343.20108032 -145.55824280]
[354.95803833 -136.22203064]
[365.71011353 -125.74426270]
[375.34701538 -114.23246765]
[383.76980591 -101.80477905]
[390.89208984 -88.58872223]
[396.64074707 -74.71991730]
[400.95681763 -60.34067535]
[403.79598999 -45.59855652]
[405.12915039 -30.64483643]
[404.94262695 -15.63296700]
[403.23828125 -0.71699411]
[400.03363037 13.95002079]
[395.36160278 28.21756935]
[389.27005005 41.93924332]
[381.82156372 54.97423553]
[373.09255981 67.18878937]
[363.17257690 78.45755005]
[352.16345215 88.66490173]
[340.17813110 97.70608521]
[327.33959961 105.48833466]
[313.77963257 111.93177795]
[299.63732910 116.97029877]
[285.05786133 120.55220795]
[270.19082642 122.64072418]
[255.18875122 123.21443939]
[240.20562744 122.26745605]
[225.39517212 119.80948639]
[210.90939331 115.86576080]
[196.89691162 110.47674561]
[183.50152588 103.69774628]
[170.86071777 95.59832001]
[159.10417175 86.26158142]
[148.35253906 75.78334045]
[136.85073853 85.41186523]
[125.34893036 95.04039001]
[113.84712982 104.66892242]
[107.50000000 118.25987244]
[107.50000000 133.25987244]
[107.50000000 148.25987244]
[107.50000000 163.25987244]
[107.50000000 178.25987244]
[107.50000000 193.25987244]
[107.50000000 208.25987244]
[107.50000000 223.25987244]
[107.50000000 238.25987244]
[107.50000000 253.25987244]
[122.03988647 257.32119751]
[134.94427490 265.15570068]
[145.25555420 276.18203735]
[152.20857239 289.58193970]
[155.28736877 304.36111450]
[154.26348877 319.42279053]
[149.21287537 333.64932251]
[140.51036072 345.98498535]
[128.80169678 355.51440430]
[114.95575714 361.53042603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[54 61]
[55 60]
[63 130]
[64 129]
[65 128]
[66 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
