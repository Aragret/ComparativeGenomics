%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUCAUACAGGGGGGGGGGCCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUxxxxxxxxxxCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCCCCCCCCCCCAACUCCUACA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 387.89511108]
[71.01555634 382.34210205]
[58.81560135 373.47576904]
[49.20452881 361.85345459]
[42.78650284 348.20574951]
[39.96496582 333.39056396]
[40.91728210 318.33917236]
[45.58358765 303.99777222]
[53.67055511 291.26779175]
[64.66983032 280.94952393]
[77.88998413 273.69155884]
[92.50000000 269.95010376]
[92.50000000 254.95011902]
[92.50000000 239.95011902]
[92.50000000 224.95011902]
[92.50000000 209.95011902]
[92.50000000 194.95011902]
[92.50000000 179.95011902]
[92.50000000 164.95011902]
[92.50000000 149.95011902]
[92.50000000 134.95011902]
[77.87514496 130.12068176]
[66.06006622 119.21318817]
[59.54707336 103.77168274]
[60.01290894 86.34004974]
[67.93071747 70.04474640]
[53.02627182 68.35434723]
[38.12182236 66.66394806]
[23.17238808 65.43333435]
[8.19214725 64.66367340]
[-6.78809357 63.89401627]
[-12.67373180 77.86309052]
[-22.98440361 88.97460938]
[-36.47504425 95.88680267]
[-51.51659393 97.76499176]
[-66.29271698 94.38237000]
[-79.01911163 86.14740753]
[-88.15901947 74.05451965]
[-92.60874176 59.56397629]
[-91.83095551 44.42558670]
[-85.91957855 30.46738243]
[-75.58844757 19.37488365]
[-62.08509445 12.48756409]
[-47.04010773 10.63710117]
[-32.27024841 14.04694748]
[-19.55904770 22.30534744]
[-10.44144440 34.41505814]
[-6.01843357 48.91377640]
[8.96180725 49.68343735]
[23.94204903 50.45309448]
[26.82191086 48.31917572]
[30.89774323 47.50850677]
[35.51999283 48.57641983]
[39.81222153 51.75950241]
[54.71666718 53.44989777]
[69.62111664 55.14029694]
[80.06312561 44.37162018]
[77.91454315 29.52629471]
[75.76596832 14.68097305]
[73.61738586 -0.16434996]
[58.60660553 -1.49593139]
[44.30771255 -6.25391769]
[31.49183464 -14.18171692]
[20.85011482 -24.85179138]
[12.95644665 -37.68872070]
[8.23652554 -52.00022125]
[6.94489193 -67.01449585]
[9.15120125 -81.92183685]
[14.73647022 -95.91831970]
[23.39949226 -108.24912262]
[34.67308044 -118.24926758]
[47.94926834 -125.37946320]
[62.51208115 -129.25517273]
[77.57617188 -129.66738892]
[92.32914734 -126.59389496]
[105.97540283 -120.20042419]
[117.77900696 -110.83177185]
[127.10341644 -98.99318695]
[133.44577026 -85.32309723]
[136.46401978 -70.55872345]
[135.99542236 -55.49628067]
[132.06523132 -40.94807434]
[124.88540649 -27.69866562]
[114.84313965 -16.46258354]
[102.47999573 -7.84577370]
[88.46270752 -2.31292915]
[90.61128998 12.53239346]
[92.75986481 27.37771606]
[94.90844727 42.22303772]
[108.78132629 47.92770386]
[120.75158691 38.88818359]
[132.72184753 29.84866333]
[144.69210815 20.80914307]
[156.66236877 11.76962471]
[155.39465332 -3.60556579]
[162.66081238 -17.21462440]
[176.14224243 -24.71494865]
[191.53704834 -23.71321297]
[203.93281555 -14.52906895]
[209.37409973 -0.09314217]
[206.12460327 14.98811531]
[195.22123718 25.90232849]
[180.14320374 29.16681290]
[165.70188904 23.73988342]
[153.73162842 32.77940369]
[141.76136780 41.81892014]
[129.79110718 50.85844040]
[117.82084656 59.89796066]
[130.98608398 67.15715790]
[141.25468445 78.71392822]
[156.25389099 78.55992889]
[171.25311279 78.40592957]
[185.08723450 69.59973907]
[199.50367737 77.41627502]
[199.67202759 93.81455994]
[185.41911316 101.92543793]
[171.40710449 93.40514374]
[156.40789795 93.55913544]
[141.40869141 93.71313477]
[139.80418396 101.03949738]
[136.59518433 115.69222260]
[134.99069214 123.01858521]
[148.55258179 129.42756653]
[164.84317017 127.54363251]
[174.40141296 140.86924744]
[167.39463806 155.69615173]
[151.03079224 156.77169800]
[142.14361572 142.98945618]
[128.58171082 136.58047485]
[121.02346802 137.35371399]
[113.91992188 136.75721741]
[107.50000000 134.95011902]
[107.50000000 149.95011902]
[107.50000000 164.95011902]
[107.50000000 179.95011902]
[107.50000000 194.95011902]
[107.50000000 209.95011902]
[107.50000000 224.95011902]
[107.50000000 239.95011902]
[107.50000000 254.95011902]
[107.50000000 269.95010376]
[122.11001587 273.69155884]
[135.33016968 280.94952393]
[146.32945251 291.26779175]
[154.41641235 303.99777222]
[159.08271790 318.33917236]
[160.03503418 333.39056396]
[157.21350098 348.20574951]
[150.79547119 361.85345459]
[141.18440247 373.47576904]
[128.98443604 382.34210205]
[114.96250153 387.89511108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 56]
[27 55]
[28 54]
[29 50]
[30 49]
[31 48]
[57 89]
[58 88]
[59 87]
[60 86]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[110 119]
[111 118]
[112 117]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
