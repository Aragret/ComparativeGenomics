%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCUUCAUGGGGGGGGGGCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGxxxxxxxxxxCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCCCCCCCCCCCUCUCCUUCAU\
) } def
/len { sequence length } bind def

/coor [
[76.73467255 377.89169312]
[65.51923370 367.82635498]
[56.92783737 355.44552612]
[51.42379379 341.41693115]
[49.30393600 326.49703979]
[50.68257904 311.49050903]
[55.48537827 297.20660400]
[63.45332336 284.41564941]
[74.15671539 273.80743408]
[87.01833344 265.95407104]
[101.34456635 261.27902222]
[100.09768677 246.33094788]
[98.85081482 231.38285828]
[97.60394287 216.43476868]
[96.35706329 201.48669434]
[95.11019135 186.53860474]
[93.86331940 171.59051514]
[92.61643982 156.64242554]
[91.36956787 141.69433594]
[90.12269592 126.74625397]
[83.92821503 116.54010773]
[83.65956116 106.57362366]
[87.84356689 99.57682037]
[73.20006561 96.32599640]
[58.55656052 93.07517242]
[43.91305923 89.82434845]
[29.26955795 86.57351685]
[23.29152679 100.38147736]
[14.80813122 112.80840302]
[4.12604094 123.40507507]
[-8.36859322 131.78842163]
[-22.22409821 137.65541077]
[-36.93960571 140.79393005]
[-51.98316193 141.09054565]
[-66.81094360 138.53451538]
[-80.88694763 133.21824646]
[-93.70232391 125.33393097]
[-104.79381561 115.16655731]
[-113.76046753 103.08369446]
[-120.27813721 89.52210999]
[-124.11121368 74.97206116]
[-125.12113953 59.95951080]
[-123.27140808 45.02716446]
[-118.62888336 30.71481323]
[-111.36138153 17.53983688]
[-101.73163605 5.97850466]
[-90.08773804 -3.55124855]
[-76.85061646 -10.70492840]
[-62.49878311 -15.22393322]
[-47.55105209 -16.94490433]
[-32.54776382 -15.80563068]
[-18.03129005 -11.84729481]
[-4.52638388 -5.21298885]
[7.47875786 3.85746145]
[17.55015755 15.03616524]
[25.32374001 27.91901970]
[30.51849365 42.04031754]
[32.94663620 56.88957977]
[32.52038574 71.93001556]
[47.16388702 75.18084717]
[61.80738831 78.43167114]
[76.45088959 81.68249512]
[91.09439087 84.93331909]
[105.05477905 79.44628906]
[113.56587219 67.09471893]
[122.07695770 54.74314499]
[130.58804321 42.39157104]
[119.46326447 32.29589844]
[109.78340912 20.80747604]
[101.72123718 8.13132381]
[95.42063141 -5.50633430]
[90.99401855 -19.86211967]
[88.52040100 -34.67983246]
[88.04393768 -49.69504166]
[89.57311249 -64.63977051]
[93.08065033 -79.24732971]
[98.50394440 -93.25701141]
[105.74621582 -106.41881561]
[114.67821503 -118.49783325]
[125.14054871 -129.27851868]
[136.94648743 -138.56846619]
[149.88534546 -146.20188904]
[163.72622681 -152.04257202]
[178.22212219 -155.98626709]
[193.11431885 -157.96258545]
[208.13705444 -157.93627930]
[223.02224731 -155.90780640]
[237.50422668 -151.91337585]
[251.32456970 -146.02424622]
[264.23663330 -138.34555054]
[276.00994873 -129.01431274]
[286.43444824 -118.19705200]
[295.32409668 -106.08681488]
[302.52023315 -92.89973450]
[307.89440918 -78.87113953]
[311.35076904 -64.25138855]
[312.82760620 -49.30139160]
[312.29855347 -34.28794479]
[309.77304077 -19.47898483]
[305.29617310 -5.13879251]
[298.94784546 8.47671413]
[290.84130859 21.12454987]
[281.12127686 32.57900238]
[269.96121216 42.63564682]
[257.56024170 51.11501694]
[244.13972473 57.86578751]
[229.93913269 62.76747894]
[215.21189880 65.73262024]
[200.22085571 66.70829010]
[185.23352051 65.67707825]
[170.51737976 62.65739059]
[156.33503723 57.70311356]
[142.93962097 50.90266418]
[134.42852783 63.25423431]
[125.91744232 75.60580444]
[117.40634918 87.95738220]
[122.01191711 102.23284149]
[136.13671875 107.28160095]
[150.26152039 112.33035278]
[166.28898621 108.85867310]
[177.10739136 121.18319702]
[171.58770752 136.62551880]
[155.40809631 139.29989624]
[145.21276855 126.45515442]
[131.08796692 121.40640259]
[116.96315765 116.35764313]
[105.07077789 125.49937439]
[106.31765747 140.44746399]
[107.56452942 155.39555359]
[108.81140137 170.34364319]
[110.05828094 185.29173279]
[111.30515289 200.23980713]
[112.55202484 215.18789673]
[113.79890442 230.13598633]
[115.04577637 245.08407593]
[116.29264832 260.03216553]
[131.19543457 262.26907349]
[145.18041992 267.88308716]
[157.49339294 276.57141113]
[167.47036743 287.86550903]
[174.57327271 301.15631104]
[178.41906738 315.72708130]
[178.80035400 330.79196167]
[175.69654846 345.53860474]
[169.27507019 359.17169189]
[159.88220215 370.95605469]
[148.02449036 380.25610352]
[134.34140015 386.57037354]
[119.57085419 389.55828857]
[104.50940704 389.05877686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[64 116]
[65 115]
[66 114]
[67 113]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
