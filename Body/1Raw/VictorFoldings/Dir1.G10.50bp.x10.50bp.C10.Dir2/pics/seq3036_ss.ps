%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUCAACGAGGGGGGGGGGUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUxxxxxxxxxxAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAACCCCCCCCCCUGUUCAACCA\
) } def
/len { sequence length } bind def

/coor [
[104.32617950 394.82412720]
[90.48023987 388.80810547]
[78.77157593 379.27868652]
[70.06905365 366.94302368]
[65.01844788 352.71649170]
[63.99455643 337.65481567]
[67.07335663 322.87564087]
[74.02637482 309.47570801]
[84.33766174 298.44937134]
[97.24204254 290.61486816]
[111.78192902 286.55355835]
[111.78192902 271.55355835]
[111.78192902 256.55355835]
[111.78192902 241.55355835]
[111.78192902 226.55355835]
[111.78192902 211.55355835]
[111.78192902 196.55355835]
[111.78192902 181.55355835]
[111.78192902 166.55355835]
[111.78192902 151.55355835]
[111.78192902 136.55355835]
[111.78192902 121.55356598]
[93.86333466 129.05853271]
[72.35890198 121.20063782]
[57.54114151 123.53173828]
[45.11106491 133.31968689]
[31.33599281 127.65428925]
[16.51823425 129.98539734]
[11.65839481 144.49885559]
[0.60245681 155.08303833]
[-14.10900688 159.30575562]
[-29.09540939 156.19668579]
[-40.91298294 146.47026062]
[-46.84614182 132.36152649]
[-45.53148270 117.11257935]
[-37.27110672 104.22752380]
[-23.96319008 96.66723633]
[-8.66579247 96.16902161]
[5.10585499 102.84736633]
[14.18712997 115.16763306]
[29.00488853 112.83653259]
[40.37509918 103.21533203]
[55.21003723 108.71398163]
[70.02779388 106.38288116]
[72.25620270 99.22158051]
[76.71302032 84.89898682]
[78.94142914 77.73768616]
[68.06259918 67.41047668]
[57.18377686 57.08327484]
[46.30495071 46.75606918]
[35.31928635 36.54259109]
[24.22797203 26.44394112]
[13.13665676 16.34529114]
[-2.99167609 13.37730789]
[-8.22980118 -2.16277194]
[2.81081462 -14.28864670]
[18.77253342 -10.52625561]
[23.23530579 5.25397587]
[34.32662201 15.35262489]
[45.41793823 25.45127487]
[52.52719498 27.64310074]
[56.63215637 35.87724304]
[67.51097870 46.20444870]
[78.38980865 56.53165436]
[89.26863098 66.85885620]
[115.55558014 74.70018768]
[124.26869202 96.20521545]
[136.16107178 87.06348419]
[148.05345154 77.92174530]
[159.94583130 68.78001404]
[152.18409729 55.92562103]
[145.91043091 42.28299713]
[141.20373535 28.02371979]
[138.12318420 13.32711315]
[136.70755005 -1.62199974]
[136.97460938 -16.63561630]
[138.92102051 -31.52492523]
[142.52229309 -46.10267639]
[147.73313904 -60.18554306]
[154.48803711 -73.59641266]
[162.70201111 -86.16663361]
[172.27180481 -97.73811340]
[183.07702637 -108.16534424]
[194.98181152 -117.31718445]
[207.83644104 -125.07852936]
[221.47924805 -131.35179138]
[235.73866272 -136.05805969]
[250.43536377 -139.13816833]
[265.38452148 -140.55335999]
[280.39813232 -140.28584290]
[295.28738403 -138.33900452]
[309.86502075 -134.73728943]
[323.94772339 -129.52601624]
[337.35839844 -122.77072906]
[349.92837524 -114.55636597]
[361.49957275 -104.98623657]
[371.92648315 -94.18069458]
[381.07797241 -82.27563477]
[388.83892822 -69.42077637]
[395.11178589 -55.77778244]
[399.81762695 -41.51822281]
[402.89727783 -26.82143021]
[404.31204224 -11.87223339]
[404.04406738 3.14136720]
[402.09677124 18.03055954]
[398.49462891 32.60809708]
[393.28292847 46.69064713]
[386.52725220 60.10111618]
[378.31250000 72.67084503]
[368.74203491 84.24175262]
[357.93618774 94.66833496]
[346.03085327 103.81946564]
[333.17575073 111.58004761]
[319.53256226 117.85248566]
[305.27288818 122.55790710]
[290.57598877 125.63713074]
[275.62673950 127.05142975]
[260.61315918 126.78302002]
[245.72402954 124.83528137]
[231.14659119 121.23269653]
[217.06419373 116.02059174]
[203.65393066 109.26449585]
[191.08445740 101.04937744]
[179.51382446 91.47855377]
[169.08757019 80.67239380]
[157.19519043 89.81412506]
[145.30281067 98.95586395]
[133.41043091 108.09759521]
[126.78192902 121.55356598]
[126.78192902 136.55355835]
[126.78192902 151.55355835]
[126.78192902 166.55355835]
[126.78192902 181.55355835]
[126.78192902 196.55355835]
[126.78192902 211.55355835]
[126.78192902 226.55355835]
[126.78192902 241.55355835]
[126.78192902 256.55355835]
[126.78192902 271.55355835]
[126.78192902 286.55355835]
[141.32182312 290.61486816]
[154.22619629 298.44937134]
[164.53747559 309.47570801]
[171.49050903 322.87564087]
[174.56930542 337.65481567]
[173.54541016 352.71649170]
[168.49481201 366.94302368]
[159.79228210 379.27868652]
[148.08361816 388.80810547]
[134.23768616 394.82412720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 44]
[25 43]
[27 41]
[28 40]
[47 65]
[48 64]
[49 63]
[50 62]
[51 60]
[52 59]
[53 58]
[67 128]
[68 127]
[69 126]
[70 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
