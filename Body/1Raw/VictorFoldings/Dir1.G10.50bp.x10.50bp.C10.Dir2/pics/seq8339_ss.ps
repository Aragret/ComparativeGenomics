%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCACCCAAGGGGGGGGGGCAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACxxxxxxxxxxAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCCCCCCCCCCCACAACCCAA\
) } def
/len { sequence length } bind def

/coor [
[83.66227722 378.03457642]
[70.44207764 370.76208496]
[59.55527496 360.31509399]
[51.74414444 347.40585327]
[47.54126358 332.91452026]
[47.23318863 317.82919312]
[50.84093094 303.17837524]
[58.11850357 289.96096802]
[68.56970978 279.07821655]
[81.48197174 271.27206421]
[95.97490692 267.07476807]
[95.66285706 252.07801819]
[95.35079956 237.08126831]
[95.03874207 222.08451843]
[94.72668457 207.08776855]
[94.41462708 192.09100342]
[94.10256958 177.09425354]
[93.79051971 162.09750366]
[93.47846222 147.10075378]
[93.16640472 132.10398865]
[92.85434723 117.10723877]
[78.90869141 100.36791992]
[90.12934113 78.50897217]
[79.03802490 68.41032410]
[67.94670868 58.31167603]
[56.85539627 48.21302414]
[41.44217300 44.64327240]
[37.24044800 30.35360146]
[26.14913177 20.25495148]
[12.76284695 13.48683643]
[-1.94511497 10.54135418]
[-16.65307617 7.59587145]
[-31.36103821 4.65038872]
[-38.75412369 17.84877777]
[-49.86526871 28.11511230]
[-63.60591507 34.44360352]
[-78.62989807 36.21424866]
[-93.46531677 33.25358200]
[-106.65874481 25.85165215]
[-116.91763306 14.73363018]
[-123.23691559 0.98874539]
[-124.99749756 -14.03641891]
[-122.02688599 -28.86984825]
[-114.61611938 -42.05831909]
[-103.49122620 -52.30975342]
[-89.74211121 -58.61982346]
[-74.71576691 -60.37033463]
[-59.88433075 -57.38978577]
[-46.70083237 -49.97018433]
[-36.45685196 -38.83842468]
[-30.15599632 -25.08508301]
[-28.41555595 -10.05757236]
[-13.70759392 -7.11209011]
[1.00036752 -4.16660786]
[15.70832920 -1.22112525]
[4.70824051 -11.41906834]
[-3.79918098 -23.77316856]
[-9.40322018 -37.68700027]
[-11.83332825 -52.48884583]
[-10.97218609 -67.46410370]
[-6.86136818 -81.88981628]
[0.30066654 -95.06954956]
[10.16815472 -106.36701202]
[22.26471901 -115.23680115]
[36.00637054 -121.25069427]
[50.72970200 -124.11837769]
[65.72389984 -123.70139313]
[80.26509857 -120.01986694]
[93.65128326 -113.25154877]
[105.23619843 -103.72318268]
[114.46055603 -91.89477539]
[120.87903595 -78.33737946]
[124.18177032 -63.70549774]
[124.20930481 -48.70552063]
[120.96031189 -34.06161118]
[114.59165192 -20.48073769]
[105.41078186 -8.61854744]
[93.86092377 0.95228571]
[80.49967957 7.76970673]
[65.97209930 11.50458813]
[50.97952652 11.97662163]
[36.24777985 9.16363525]
[47.33909607 19.26228523]
[61.95899582 22.10971260]
[66.95404816 37.12170792]
[78.04536438 47.22035980]
[89.13668060 57.31900787]
[100.22798920 67.41765594]
[114.80069733 70.97241974]
[129.29629517 67.11525726]
[143.79188538 63.25810242]
[148.46415710 42.44563675]
[172.98516846 31.14010048]
[184.87754822 21.99836731]
[186.67805481 6.29697561]
[199.10556030 -3.46686864]
[214.78703308 -1.50044966]
[224.41894531 11.02959061]
[222.28684998 26.68940163]
[209.65567017 36.18829727]
[194.01927185 33.89074707]
[182.12689209 43.03248215]
[187.32255554 57.10462189]
[192.51773071 71.17552185]
[207.49743652 70.39567566]
[222.47715759 69.61582947]
[237.45686340 68.83598328]
[245.02206421 55.39086151]
[258.66598511 48.19035721]
[274.03488159 49.53213120]
[286.22460938 58.98802185]
[291.34548950 73.54069519]
[287.76342773 88.54644012]
[276.62149048 99.21698761]
[261.47497559 102.14739227]
[247.15713501 96.40258026]
[238.23670959 83.81569672]
[223.25700378 84.59554291]
[208.27728271 85.37538910]
[193.29757690 86.15523529]
[174.14230347 94.50193787]
[156.69384766 89.96297455]
[147.64904785 77.75370026]
[133.15345764 81.61085510]
[118.65785217 85.46801758]
[121.86679077 95.27265167]
[120.51029968 104.93012238]
[115.35038757 112.53323364]
[107.85110474 116.79518127]
[108.16315460 131.79193115]
[108.47521210 146.78869629]
[108.78726959 161.78544617]
[109.09932709 176.78219604]
[109.41138458 191.77894592]
[109.72344208 206.77571106]
[110.03549194 221.77246094]
[110.34754944 236.76921082]
[110.65960693 251.76596069]
[110.97166443 266.76272583]
[125.62665558 270.35348511]
[138.85246277 277.61575317]
[149.74732971 288.05435181]
[157.56843567 300.95755005]
[161.78250122 315.44561768]
[162.10221863 330.53073120]
[158.50579834 345.18432617]
[151.23843384 358.40731812]
[140.79563904 369.29815674]
[127.88940430 377.11428833]
[113.39971161 381.32275391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 88]
[24 87]
[25 86]
[26 85]
[28 83]
[29 82]
[30 55]
[31 54]
[32 53]
[33 52]
[89 125]
[90 124]
[91 123]
[93 102]
[94 101]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
