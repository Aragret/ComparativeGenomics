%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCUAACCGGGGGGGGGGUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAxxxxxxxxxxUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCCCCCCCCCCCAGUUCUAACC\
) } def
/len { sequence length } bind def

/coor [
[90.22530365 370.28051758]
[77.66708374 361.92935181]
[67.58085632 350.71691895]
[60.60066605 337.34799194]
[57.16528320 322.66299438]
[57.49065781 307.58505249]
[61.55634308 293.06192017]
[69.10676575 280.00659180]
[79.66728973 269.23968506]
[92.57408905 261.43804932]
[107.01581573 257.09210205]
[106.39183807 242.10508728]
[105.76786041 227.11807251]
[105.14388275 212.13105774]
[104.51990509 197.14404297]
[103.89592743 182.15702820]
[103.27194977 167.16999817]
[102.64797211 152.18298340]
[102.02399445 137.19596863]
[101.40001678 122.20895386]
[94.98246765 127.10221100]
[86.32400513 129.89259338]
[76.13727570 129.80688477]
[65.36856079 126.30987549]
[50.50551224 128.33219910]
[35.64246750 130.35453796]
[20.77941895 132.37687683]
[5.91637230 134.39921570]
[-8.94667435 136.42153931]
[-14.68836689 150.66683960]
[-26.79335213 160.12014771]
[-42.00544739 162.23855591]
[-56.23268127 156.45223999]
[-65.64799500 144.31768799]
[-67.71871185 129.09902954]
[-61.88782883 114.88999939]
[-49.72381973 105.51277161]
[-34.49874115 103.48976135]
[-20.30806541 109.36515808]
[-10.96900940 121.55849457]
[3.89403796 119.53616333]
[18.75708389 117.51383209]
[33.62013245 115.49149323]
[48.48317719 113.46916199]
[63.34622574 111.44682312]
[65.87060547 104.38442230]
[51.74580002 99.33567047]
[37.62099838 94.28691101]
[23.49627304 89.23793793]
[28.54546547 75.11328888]
[42.66975403 80.16210938]
[56.79455566 85.21086121]
[70.91935730 90.25962067]
[73.44374084 83.19721985]
[63.23025894 72.21155548]
[47.40445709 67.91317749]
[43.47623062 51.99145889]
[55.48659897 40.82530212]
[71.08032990 45.90148926]
[74.21591949 61.99807358]
[84.42940521 72.98374176]
[98.88409424 68.97599792]
[101.98241425 54.29947281]
[105.08073425 39.62294769]
[108.17905426 24.94642258]
[94.34172058 19.02912331]
[81.92485046 10.52574444]
[71.40570831 -0.23687072]
[63.18862534 -12.84503365]
[57.58944321 -26.81412125]
[54.82338333 -41.60720062]
[54.99676132 -56.65565872]
[58.10291672 -71.38108063]
[64.02245331 -85.21746063]
[72.52783966 -97.63295746]
[83.29216003 -108.15035248]
[95.90164948 -116.36539459]
[109.87164307 -121.96231842]
[124.66516876 -124.72598267]
[139.71360779 -124.55017090]
[154.43852234 -121.44162750]
[168.27394104 -115.51985168]
[180.68806458 -107.01245117]
[191.20372009 -96.24643707]
[199.41671753 -83.63561249]
[205.01138306 -69.66471100]
[207.77264404 -54.87073898]
[207.59440613 -39.82233810]
[204.48347473 -25.09792137]
[198.55946350 -11.26346207]
[190.05004883 1.14928114]
[179.28233337 11.66319561]
[166.67018127 19.87415504]
[152.69837952 25.46655273]
[137.90396118 28.22542953]
[122.85558319 28.04474449]
[119.75726318 42.72126770]
[116.65893555 57.39779663]
[113.56061554 72.07431793]
[117.75168610 78.29404449]
[122.25090790 63.98470688]
[136.24356079 58.58047485]
[149.19311523 66.15074921]
[151.34849548 80.99508667]
[141.08670044 91.93563080]
[126.13383484 90.73348236]
[130.32490540 96.95320129]
[145.09095764 99.59206390]
[159.85700989 102.23092651]
[174.62307739 104.86979675]
[189.38912964 107.50865936]
[204.15518188 110.14752197]
[213.99337769 98.35322571]
[228.41618347 93.07322693]
[243.54393005 95.72782898]
[255.30732727 105.60294342]
[260.54208374 120.04222107]
[257.84008789 135.16157532]
[247.92814636 146.89396667]
[233.47251892 152.08343506]
[218.36172485 149.33406067]
[206.66046143 139.38539124]
[201.51631165 124.91358185]
[186.75025940 122.27471161]
[171.98420715 119.63584900]
[157.21815491 116.99698639]
[142.45208740 114.35812378]
[127.68604279 111.71925354]
[116.38703156 121.58497620]
[117.01100922 136.57199097]
[117.63498688 151.55900574]
[118.25896454 166.54603577]
[118.88294220 181.53305054]
[119.50691986 196.52006531]
[120.13089752 211.50708008]
[120.75487518 226.49409485]
[121.37885284 241.48110962]
[122.00283051 256.46813965]
[136.75582886 259.59857178]
[150.26646423 266.30032349]
[161.68545532 276.15209961]
[170.29496765 288.53463745]
[175.55381775 302.66955566]
[177.13142395 317.66827393]
[174.92861938 332.58801270]
[169.08386230 346.49087524]
[159.96458435 358.50292969]
[148.14401245 367.86907959]
[134.36520386 374.00057983]
[119.49430084 376.51199341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[54 61]
[55 60]
[62 99]
[63 98]
[64 97]
[65 96]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
