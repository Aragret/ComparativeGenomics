%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCAAACUCGGGGGGGGGGUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCxxxxxxxxxxAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCCCCCCCCCCCACUUCAACCUC\
) } def
/len { sequence length } bind def

/coor [
[65.41274261 526.55377197]
[51.92386246 519.82220459]
[40.43836212 510.05764771]
[31.62399101 497.82775879]
[25.99320984 483.84356689]
[23.87338066 468.91809082]
[25.38775063 453.91909790]
[30.44827271 439.71856689]
[38.76073837 427.14215088]
[49.84186935 416.92098999]
[63.04742432 409.64935303]
[77.60964966 405.75000000]
[77.30167389 390.75314331]
[76.99369049 375.75631714]
[76.68571472 360.75949097]
[76.37773895 345.76263428]
[76.06976318 330.76580811]
[75.76177979 315.76895142]
[75.45380402 300.77212524]
[75.14582825 285.77529907]
[74.83785248 270.77844238]
[62.86678696 266.98013306]
[52.54204559 259.82937622]
[44.77669525 249.95855713]
[30.62937927 254.94387817]
[27.17639732 269.97985840]
[16.12654495 280.74572754]
[1.00579119 283.80618286]
[-13.36088848 278.18460083]
[-22.38913727 265.67483521]
[-23.19807434 250.26870728]
[-15.52957058 236.88223267]
[-1.83061826 229.78700256]
[13.52749729 231.24708557]
[25.64405823 240.79655457]
[39.79137421 235.81123352]
[42.36849976 212.56958008]
[56.96488953 194.14501953]
[79.22969055 186.23741150]
[81.07302094 171.35110474]
[82.91634369 156.46478271]
[84.75966644 141.57847595]
[86.60298920 126.69217682]
[88.44631958 111.80587006]
[81.62274170 98.44776917]
[68.48110962 91.21606445]
[59.39249802 89.80434418]
[55.14611816 83.69857788]
[42.15573502 76.19857788]
[25.41547585 73.51528931]
[23.35972786 56.68643951]
[38.96181488 50.05234528]
[49.65573502 63.20819473]
[62.64611816 70.70819092]
[75.71281433 78.07443237]
[88.85444641 85.30613708]
[102.84152985 79.88751221]
[107.68134308 65.68975830]
[112.37514496 51.44306564]
[116.92243195 37.14893723]
[121.46972656 22.85480690]
[126.01701355 8.56067562]
[125.64030457 -0.62920320]
[130.80718994 -5.97854233]
[135.64700317 -20.17629433]
[140.48683167 -34.37404633]
[127.24723816 -41.49888229]
[115.36103058 -50.70582962]
[105.15245819 -61.74371338]
[96.90001678 -74.31141663]
[90.82884979 -88.06607819]
[87.10456848 -102.63246155]
[85.82878876 -117.61318970]
[87.03630829 -132.59957886]
[90.69417572 -147.18278503]
[96.70262146 -160.96496582]
[104.89771271 -173.57012939]
[115.05589294 -184.65441895]
[126.90003204 -193.91542053]
[140.10702515 -201.10049438]
[154.31655884 -206.01364136]
[169.14099121 -208.52081299]
[184.17591858 -208.55360413]
[199.01115417 -206.11114502]
[213.24198914 -201.26005554]
[226.48019409 -194.13265991]
[238.36463928 -184.92343140]
[248.57107544 -173.88357544]
[256.82110596 -161.31428528]
[262.88961792 -147.55845642]
[266.61108398 -132.99134827]
[267.88397217 -118.01037598]
[266.67358398 -103.02422333]
[263.01290894 -88.44172668]
[257.00180054 -74.66070557]
[248.80427551 -62.05711365]
[238.64396667 -50.97479248]
[226.79803467 -41.71607208]
[213.58967590 -34.53353500]
[199.37918091 -29.62312889]
[184.55426025 -27.11881447]
[169.51934814 -27.08891106]
[154.68457031 -29.53423119]
[149.84475708 -15.33647823]
[145.00494385 -1.13872600]
[140.31114197 13.10796642]
[135.76385498 27.40209579]
[131.21656799 41.69622421]
[126.66927338 55.99035645]
[127.64459229 63.36334229]
[121.87909698 70.52957153]
[117.03927612 84.72732544]
[119.91934967 99.13469696]
[113.59070587 110.20262909]
[103.33262634 113.64919281]
[101.48929596 128.53549194]
[99.64597321 143.42179871]
[97.80265045 158.30812073]
[95.95932770 173.19442749]
[94.11600494 188.08073425]
[103.47868347 192.31721497]
[111.55254364 198.65162659]
[117.87771606 206.71441650]
[122.09600067 216.03791809]
[123.97116852 226.08335876]
[123.40217590 236.27203369]
[120.42856598 246.01866150]
[115.22783661 254.76498413]
[108.10482025 262.01174927]
[99.47386169 267.34719849]
[89.83468628 270.47045898]
[90.14266205 285.46731567]
[90.45064545 300.46414185]
[90.75862122 315.46099854]
[91.06659698 330.45782471]
[91.37457275 345.45465088]
[91.68255615 360.45150757]
[91.99053192 375.44833374]
[92.29850769 390.44519043]
[92.60648346 405.44201660]
[107.31652069 408.74023438]
[120.80947876 415.46359253]
[132.30090332 425.22119141]
[141.12268066 437.44573975]
[146.76193237 451.42651367]
[148.89082336 466.35070801]
[147.38554382 481.35061646]
[142.33363342 495.55419922]
[134.02879333 508.13565063]
[122.95385742 518.36352539]
[109.75271606 525.64318848]
[95.19285583 529.55139160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 36]
[25 35]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[45 56]
[46 55]
[48 54]
[49 53]
[57 112]
[58 111]
[59 109]
[60 108]
[61 107]
[62 106]
[64 105]
[65 104]
[66 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
