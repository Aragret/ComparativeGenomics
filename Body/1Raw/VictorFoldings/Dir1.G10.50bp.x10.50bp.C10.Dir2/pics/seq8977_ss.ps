%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUACGGGAUGGGGGGGGGGAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGxxxxxxxxxxUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACCCCCCCCCCCGAAACGGGAU\
) } def
/len { sequence length } bind def

/coor [
[98.31253815 381.85198975]
[84.29059601 376.29898071]
[72.09063721 367.43264771]
[62.47956467 355.81033325]
[56.06153870 342.16262817]
[53.24000168 327.34744263]
[54.19231796 312.29608154]
[58.85862350 297.95465088]
[66.94558716 285.22470093]
[77.94486237 274.90643311]
[91.16502380 267.64843750]
[105.77503967 263.90701294]
[105.77503967 248.90701294]
[105.77503967 233.90701294]
[105.77503967 218.90701294]
[105.77503967 203.90701294]
[105.77503967 188.90701294]
[105.77503967 173.90701294]
[105.77503967 158.90701294]
[105.77503967 143.90701294]
[105.77503967 128.90701294]
[68.28297424 111.85094452]
[53.51085281 109.24622345]
[38.73873901 106.64150238]
[23.96662140 104.03677368]
[9.19450569 101.43205261]
[-5.57761049 98.82733154]
[-16.61013985 105.58654785]
[-28.89217949 103.07202148]
[-35.91497803 93.17543030]
[-26.20389366 104.60761261]
[-23.37644196 119.33871460]
[-28.16483688 133.55389404]
[-39.32904816 143.57189941]
[-53.97792816 146.79840088]
[-68.31791687 142.39787292]
[-78.63544464 131.50987244]
[-82.25862885 116.95402527]
[-78.24919128 102.49980927]
[-67.64543152 91.89036560]
[-53.19435501 87.87318420]
[-67.00794220 82.02639771]
[-80.82151794 76.17961121]
[-94.63510132 70.33282471]
[-108.47776031 77.60708618]
[-123.74657440 74.23111725]
[-133.23208618 61.79893875]
[-132.45553589 46.18065262]
[-121.78356171 34.75072861]
[-106.25516510 32.90603256]
[-93.20237732 41.51757050]
[-88.78831482 56.51924133]
[-74.97473145 62.36602783]
[-61.16115189 68.21281433]
[-47.34756851 74.05960083]
[-33.00750732 78.45990753]
[-16.76159477 71.89370728]
[-2.97288775 84.05521393]
[11.79922867 86.65993500]
[26.57134438 89.26466370]
[41.34346008 91.86938477]
[56.11557770 94.47410583]
[70.88769531 97.07882690]
[76.91890717 92.62075043]
[68.00294495 80.55818176]
[80.06565094 71.64240265]
[88.98133850 83.70460510]
[95.01255798 79.24652863]
[96.85588074 64.36022186]
[98.69920349 49.47391129]
[84.98747253 43.08301926]
[73.92311096 32.76627731]
[66.59010315 19.53441620]
[63.70685577 4.68375778]
[65.55584717 -10.33078289]
[71.95592499 -24.03823280]
[82.28007507 -35.09567642]
[95.51684570 -42.41981888]
[110.36943817 -45.29310989]
[125.38273621 -43.43406296]
[139.08589172 -37.02479935]
[150.13641357 -26.69324112]
[157.45169067 -13.45156288]
[160.31503296 1.40294671]
[158.44592285 16.41499519]
[152.02748108 30.11385727]
[141.68850708 41.15745544]
[128.44194031 48.46384811]
[113.58551025 51.31723785]
[111.74218750 66.20354462]
[109.89886475 81.08985138]
[115.00821686 86.58025360]
[125.98918915 76.36172485]
[136.20753479 87.34287262]
[125.22692871 97.56105804]
[130.33627319 103.05146027]
[145.31651306 102.28179932]
[160.29676819 101.51213837]
[175.27700806 100.74247742]
[189.78562927 96.93461609]
[203.21307373 90.24854279]
[211.81541443 76.28674316]
[228.19787598 77.02608490]
[235.50761414 91.70600128]
[226.22497559 105.22504425]
[209.89915466 103.67599487]
[196.47171021 110.36206818]
[211.42193604 111.58293152]
[225.45072937 116.89263153]
[237.46273804 125.87659454]
[246.52009583 137.83335876]
[251.91560364 151.82937622]
[253.22799683 166.77185059]
[250.35479736 181.49411011]
[243.52035522 194.84664917]
[233.25827026 205.78694153]
[220.36981201 213.46076965]
[205.86128235 217.26898193]
[190.86547852 216.91423035]
[176.55325317 212.42424011]
[164.04206848 204.14955139]
[154.30879211 192.73625183]
[148.11337280 179.07548523]
[145.93954468 164.23384094]
[147.95703125 149.37013245]
[154.00831604 135.64489746]
[163.62092590 124.12978363]
[176.04666138 115.72271729]
[161.06642151 116.49237823]
[146.08618164 117.26203918]
[131.10594177 118.03170013]
[120.77503967 128.90701294]
[120.77503967 143.90701294]
[120.77503967 158.90701294]
[120.77503967 173.90701294]
[120.77503967 188.90701294]
[120.77503967 203.90701294]
[120.77503967 218.90701294]
[120.77503967 233.90701294]
[120.77503967 248.90701294]
[120.77503967 263.90701294]
[135.38505554 267.64843750]
[148.60520935 274.90643311]
[159.60447693 285.22470093]
[167.69145203 297.95465088]
[172.35775757 312.29608154]
[173.31007385 327.34744263]
[170.48852539 342.16262817]
[164.07051086 355.81033325]
[154.45944214 367.43264771]
[142.25947571 376.29898071]
[128.23753357 381.85198975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[30 56]
[41 55]
[42 54]
[43 53]
[44 52]
[68 91]
[69 90]
[70 89]
[96 131]
[97 130]
[98 129]
[99 128]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
