%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCGUCCGGGGGGGGGGUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAxxxxxxxxxxUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCCAUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[79.06594849 419.41415405]
[65.84574890 412.14169312]
[54.95894623 401.69470215]
[47.14781570 388.78543091]
[42.94493484 374.29412842]
[42.63686371 359.20880127]
[46.24460602 344.55795288]
[53.52217865 331.34057617]
[63.97338486 320.45779419]
[76.88565063 312.65167236]
[91.37858582 308.45437622]
[91.06652832 293.45761108]
[90.75447083 278.46087646]
[90.44241333 263.46411133]
[90.13035583 248.46736145]
[89.81830597 233.47061157]
[89.50624847 218.47386169]
[89.19419098 203.47709656]
[88.88213348 188.48034668]
[88.57007599 173.48359680]
[86.57324219 171.42933655]
[85.29729462 168.43501282]
[85.11415100 164.78147888]
[86.28331757 160.88223267]
[88.90809631 157.23915100]
[89.84372711 142.26835632]
[90.77935028 127.29756927]
[91.71498108 112.32678223]
[80.94417572 101.88697052]
[66.00986481 103.28926849]
[51.07555771 104.69157410]
[43.28455734 118.11096191]
[29.08020020 124.35723114]
[13.92435551 121.02857208]
[3.64475274 109.40491486]
[2.19410944 93.95579529]
[10.13022709 80.62171936]
[24.40150642 74.52989960]
[39.52035141 78.02278137]
[49.67325211 89.75727081]
[64.60755920 88.35496521]
[79.54187012 86.95265961]
[86.07712555 87.27746582]
[91.77377319 89.35140991]
[96.24553680 92.87724304]
[102.02180481 79.03402710]
[107.79808044 65.19081116]
[90.70964050 44.93169403]
[103.54876709 25.94833374]
[103.54876709 10.94833279]
[103.54876709 -4.05166721]
[103.54876709 -19.05166626]
[103.54876709 -34.05166626]
[103.54876709 -49.05166626]
[103.54876709 -64.05166626]
[103.54876709 -79.05166626]
[88.99029541 -82.98690796]
[75.95671082 -90.55071259]
[65.33345032 -101.22227478]
[57.84041214 -114.26992035]
[53.98316193 -128.80123901]
[54.01882553 -143.82414246]
[57.93897629 -158.31459045]
[65.47058105 -171.28637695]
[76.09505463 -181.85827637]
[89.08391571 -189.31390381]
[103.54876709 -193.15023804]
[103.54876709 -208.15023804]
[103.54876709 -223.15023804]
[103.54876709 -238.15023804]
[90.20764160 -245.76008606]
[82.47267151 -259.02905273]
[82.42453003 -274.38787842]
[90.07616425 -287.70507812]
[103.36932373 -295.39843750]
[118.72821808 -295.39843750]
[132.02137756 -287.70507812]
[139.67300415 -274.38787842]
[139.62486267 -259.02905273]
[131.88989258 -245.76008606]
[118.54876709 -238.15023804]
[118.54876709 -223.15023804]
[118.54876709 -208.15023804]
[118.54876709 -193.15023804]
[133.01362610 -189.31390381]
[146.00248718 -181.85827637]
[156.62695312 -171.28637695]
[164.15856934 -158.31459045]
[168.07870483 -143.82414246]
[168.11437988 -128.80123901]
[164.25712585 -114.26992035]
[156.76408386 -101.22227478]
[146.14082336 -90.55071259]
[133.10723877 -82.98690796]
[118.54876709 -79.05166626]
[118.54876709 -64.05166626]
[118.54876709 -49.05166626]
[118.54876709 -34.05166626]
[118.54876709 -19.05166626]
[118.54876709 -4.05166721]
[118.54876709 10.94833279]
[118.54876709 25.94833374]
[129.65144348 33.03583145]
[133.92469788 47.58575058]
[148.92388916 47.42971420]
[163.92308044 47.27367783]
[169.93342590 33.28097916]
[181.11990356 22.94741058]
[195.54438782 18.06332588]
[210.70773315 19.47492218]
[223.98281860 26.93762970]
[233.06964111 39.15849304]
[236.39387512 54.02016830]
[233.37954712 68.94778442]
[224.54891968 81.35504150]
[211.43196106 89.09230804]
[196.30125427 90.81905365]
[181.77828979 86.23610687]
[170.37925720 76.13749695]
[164.07911682 62.27286530]
[149.07992554 62.42890167]
[134.08073425 62.58493805]
[121.64129639 70.96707916]
[115.86502075 84.81029510]
[110.08875275 98.65351868]
[106.68577576 113.26240540]
[105.75014496 128.23320007]
[104.81451416 143.20399475]
[103.87889099 158.17478943]
[103.56683350 173.17153931]
[103.87889099 188.16828918]
[104.19094086 203.16503906]
[104.50299835 218.16180420]
[104.81505585 233.15855408]
[105.12711334 248.15530396]
[105.43917084 263.15206909]
[105.75122833 278.14880371]
[106.06327820 293.14556885]
[106.37533569 308.14233398]
[121.03032684 311.73309326]
[134.25613403 318.99536133]
[145.15100098 329.43392944]
[152.97210693 342.33715820]
[157.18617249 356.82522583]
[157.50588989 371.91030884]
[153.90946960 386.56393433]
[146.64210510 399.78692627]
[136.19931030 410.67776489]
[123.29307556 418.49386597]
[108.80338287 422.70236206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 129]
[26 128]
[27 127]
[28 126]
[29 42]
[30 41]
[31 40]
[45 125]
[46 124]
[47 123]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[67 84]
[68 83]
[69 82]
[70 81]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
