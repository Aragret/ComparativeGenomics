%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGUUUUUGGGGGGGGGGUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACxxxxxxxxxxACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCACCCCCCCCCCAGAAGUUAUU\
) } def
/len { sequence length } bind def

/coor [
[87.34140015 421.10247803]
[73.49546051 415.08645630]
[61.78679657 405.55703735]
[53.08427429 393.22137451]
[48.03367233 378.99484253]
[47.00978088 363.93316650]
[50.08858109 349.15399170]
[57.04159927 335.75405884]
[67.35288239 324.72775269]
[80.25726318 316.89321899]
[94.79714966 312.83190918]
[94.79714966 297.83190918]
[94.79714966 282.83190918]
[94.79714966 267.83190918]
[94.79714966 252.83192444]
[94.79714966 237.83192444]
[94.79714966 222.83192444]
[94.79714966 207.83192444]
[94.79714966 192.83192444]
[94.79714966 177.83192444]
[94.79714966 162.83192444]
[94.48509979 147.83515930]
[93.86112213 132.84814453]
[93.23714447 117.86112976]
[82.64551544 107.97357941]
[82.04277039 93.49660492]
[91.77584076 82.76284790]
[91.15186310 67.77583313]
[90.52788544 52.78881454]
[87.27706146 38.14531326]
[81.50078583 24.30209541]
[75.72451782 10.45887661]
[60.52716827 9.56336117]
[47.27967834 2.18833661]
[38.58355331 -10.15660572]
[36.11983109 -24.99207306]
[40.32433701 -39.36675644]
[50.31172562 -50.44455338]
[44.53545380 -64.28777313]
[38.75918198 -78.13098907]
[32.98290634 -91.97420502]
[18.51648903 -87.93659210]
[3.66353416 -85.70738220]
[-11.35078716 -85.32036591]
[-26.29886246 -86.78141785]
[-40.95408249 -90.06838226]
[-55.09427643 -95.13143921]
[-68.50508881 -101.89382172]
[-80.98320770 -110.25301361]
[-92.33946991 -120.08230591]
[-102.40171814 -131.23268127]
[-111.01741028 -143.53509521]
[-118.05593872 -156.80305481]
[-123.41059875 -170.83541870]
[-127.00021362 -185.41944885]
[-128.77037048 -200.33409119]
[-128.69421387 -215.35319519]
[-126.77293396 -230.24911499]
[-123.03562927 -244.79600525]
[-117.53897095 -258.77337646]
[-110.36627197 -271.96926880]
[-101.62628174 -284.18368530]
[-91.45149231 -295.23147583]
[-79.99614716 -304.94509888]
[-67.43391418 -313.17736816]
[-53.95523071 -319.80340576]
[-39.76442337 -324.72283936]
[-25.07662964 -327.86102295]
[-10.11450863 -329.17044067]
[4.89511633 -328.63122559]
[19.72470474 -326.25152588]
[34.14944077 -322.06744385]
[47.95065308 -316.14239502]
[60.91911316 -308.56619263]
[72.85823059 -299.45373535]
[83.58700562 -288.94311523]
[92.94279480 -277.19369507]
[100.78376007 -264.38357544]
[106.99104309 -250.70698547]
[111.47054291 -236.37124634]
[114.15435028 -221.59365845]
[115.00177765 -206.59828186]
[113.99996948 -191.61242676]
[111.16413116 -176.86326599]
[106.53723907 -162.57440186]
[100.18944550 -148.96246338]
[92.21697235 -136.23377991]
[82.74068451 -124.58132935]
[71.90424347 -114.18175507]
[59.87192154 -105.19271088]
[46.82612610 -97.75048065]
[52.60239792 -83.90725708]
[58.37866974 -70.06404114]
[64.15494537 -56.22082520]
[79.05408478 -55.52727509]
[92.22878265 -48.40430450]
[101.04043579 -36.21759796]
[103.69789124 -21.35293579]
[99.62133026 -6.74921608]
[89.56773376 4.68260431]
[95.34400940 18.52582169]
[101.12027740 32.36904144]
[103.57009888 17.57044601]
[110.61161804 4.32593822]
[121.50942993 -5.98123598]
[135.12535095 -12.27460194]
[150.03736877 -13.89688301]
[164.68806458 -10.67864990]
[177.54734802 -2.95601320]
[187.27217102 8.46448040]
[192.84690857 22.39007950]
[193.68931580 37.36640549]
[189.71144104 51.82933807]
[181.32870483 64.26837921]
[169.41659546 73.38439941]
[155.21922302 78.22533417]
[140.21934509 78.28559113]
[125.98354340 73.55887604]
[113.99858856 64.53885651]
[105.51490021 52.16483688]
[106.13887787 67.15185547]
[106.76285553 82.13887024]
[117.35448456 92.02642059]
[117.95722961 106.50339508]
[108.22415924 117.23715210]
[108.84813690 132.22416687]
[109.47211456 147.21118164]
[112.73603058 153.08096313]
[112.52752686 158.84185791]
[109.79714966 162.83192444]
[109.79714966 177.83192444]
[109.79714966 192.83192444]
[109.79714966 207.83192444]
[109.79714966 222.83192444]
[109.79714966 237.83192444]
[109.79714966 252.83192444]
[109.79714966 267.83190918]
[109.79714966 282.83190918]
[109.79714966 297.83190918]
[109.79714966 312.83190918]
[124.33704376 316.89321899]
[137.24142456 324.72775269]
[147.55270386 335.75405884]
[154.50572205 349.15399170]
[157.58453369 363.93316650]
[156.56063843 378.99484253]
[151.51004028 393.22137451]
[142.80751038 405.55703735]
[131.09884644 415.08645630]
[117.25290680 421.10247803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 126]
[24 125]
[27 122]
[28 121]
[29 120]
[30 102]
[31 101]
[32 100]
[38 94]
[39 93]
[40 92]
[41 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
