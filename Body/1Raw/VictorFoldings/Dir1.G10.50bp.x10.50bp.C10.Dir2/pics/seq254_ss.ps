%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAAAAAAGGGGGGGGGGUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAxxxxxxxxxxUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCCCCCCCCCCCUAACCAAAAA\
) } def
/len { sequence length } bind def

/coor [
[104.65908813 329.44738770]
[96.77944183 316.68371582]
[90.21863556 303.19461060]
[85.04274750 289.11590576]
[81.30387878 274.58935547]
[79.03968048 259.76123047]
[78.27296448 244.78082275]
[79.01143646 229.79901123]
[81.24766541 214.96664429]
[84.95913696 200.43305969]
[90.10652924 186.34921265]
[76.72024536 193.11732483]
[63.33395767 199.88545227]
[50.01880264 206.79244995]
[36.77621460 213.83758545]
[23.53363037 220.88272095]
[10.29104519 227.92785645]
[-2.95154047 234.97299194]
[-16.19412613 242.01811218]
[-29.43671227 249.06324768]
[-42.67929840 256.10839844]
[-55.92188263 263.15353394]
[-69.16446686 270.19866943]
[-75.20773315 285.05996704]
[-90.63484955 289.46264648]
[-103.61145782 280.02935791]
[-104.18300629 263.99645996]
[-91.91106415 253.66308594]
[-76.20960236 256.95608521]
[-62.96701813 249.91093445]
[-49.72443390 242.86579895]
[-36.48184586 235.82066345]
[-23.23926163 228.77552795]
[-9.99667549 221.73039246]
[3.24591017 214.68525696]
[16.48849487 207.64013672]
[29.73108101 200.59500122]
[42.97366714 193.54986572]
[47.43046951 187.59313965]
[56.56584167 186.49916077]
[69.95212555 179.73104858]
[83.33840942 172.96293640]
[68.62305450 170.05462646]
[62.47145462 156.37405396]
[70.06133270 143.43598938]
[85.00438690 142.13020325]
[94.72327423 153.55584717]
[94.09929657 138.56883240]
[93.47531891 123.58181763]
[92.85134125 108.59480286]
[92.07149506 93.61508179]
[91.13587189 78.64429474]
[90.20024109 63.67350388]
[89.26461029 48.70270920]
[88.17330170 33.74246216]
[86.92642975 18.79437447]
[77.57708740 9.84766102]
[76.87926483 -2.67160463]
[84.66206360 -11.98478413]
[83.72643280 -26.95557594]
[72.15866852 -37.38747025]
[71.42307281 -52.58331299]
[81.43957520 -63.54712296]
[80.50394440 -78.51791382]
[79.56832123 -93.48870850]
[78.63269043 -108.45949554]
[64.15657043 -113.02090454]
[52.30820847 -122.50672150]
[44.68999100 -135.63406372]
[42.33222580 -150.62757874]
[45.55377579 -165.45950317]
[53.91895676 -178.12394714]
[66.29644775 -186.90815735]
[81.01228333 -190.62411499]
[96.07628632 -188.76930237]
[109.45116425 -181.59454346]
[119.32807159 -170.07017517]
[124.37123871 -155.75476074]
[123.89862061 -140.58436584]
[117.97413635 -126.61064148]
[107.39902496 -115.72342682]
[93.60348511 -109.39512634]
[94.53910828 -94.42433929]
[95.47473907 -79.45354462]
[96.41036987 -64.48274994]
[107.71401215 -54.85138321]
[108.87613678 -39.68220139]
[98.69722748 -27.89120483]
[99.63285828 -12.92041302]
[110.11991119 1.11602700]
[101.87451172 17.54750061]
[103.12139130 32.49558640]
[106.83563995 38.94151688]
[104.23540497 47.76708221]
[105.17103577 62.73787308]
[106.10665894 77.70866394]
[107.04228973 92.67945862]
[110.66840363 99.94136810]
[107.83835602 107.97082520]
[108.46233368 122.95783997]
[109.08631134 137.94485474]
[109.71028900 152.93186951]
[119.49558258 141.56314087]
[130.37097168 131.23231506]
[142.22697449 122.04344940]
[154.94418335 114.08905029]
[168.39456177 107.44921112]
[182.44265747 102.19080353]
[196.94703674 98.36676788]
[211.76162720 96.01560974]
[226.73725891 95.16100311]
[241.72314453 95.81156158]
[256.56838989 97.96072388]
[271.12347412 101.58685303]
[285.24191284 106.65344238]
[298.78146362 113.10946655]
[311.60583496 120.88992310]
[323.58587646 129.91645813]
[334.60098267 140.09819031]
[344.54022217 151.33259583]
[353.30346680 163.50654602]
[360.80255127 176.49745178]
[366.96194458 190.17451477]
[371.71960449 204.40002441]
[375.02761841 219.03070068]
[376.85269165 233.91926575]
[377.17645264 248.91577148]
[375.99563599 263.86920166]
[373.32214355 278.62902832]
[369.18286133 293.04660034]
[363.61950684 306.97674561]
[356.68807983 320.27920532]
[348.45837402 332.82003784]
[339.01327515 344.47293091]
[328.44784546 355.12057495]
[316.86853027 364.65573120]
[304.39190674 372.98242188]
[291.14358521 380.01675415]
[277.25698853 385.68795776]
[262.87194824 389.93887329]
[248.13330078 392.72674561]
[233.18945312 394.02346802]
[218.19088745 393.81597900]
[203.28863525 392.10638428]
[188.63273621 388.91189575]
[174.37077332 384.26464844]
[160.64637756 378.21151733]
[147.59771729 370.81338501]
[135.35618591 362.14474487]
[124.04506683 352.29290771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 42]
[12 41]
[13 40]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[47 102]
[48 101]
[49 100]
[50 99]
[51 97]
[52 96]
[53 95]
[54 94]
[55 92]
[56 91]
[59 89]
[60 88]
[63 85]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
