%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGACAACCUUGGGGGGGGGGAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGxxxxxxxxxxGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCCCCCCCCCCCAGGCAACCUU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 389.18286133]
[70.87159729 384.02786255]
[58.28185654 375.74563599]
[47.94191742 364.78286743]
[40.40940475 351.73074341]
[36.09054184 337.29315186]
[35.21823120 322.24868774]
[37.83952332 307.40869141]
[43.81304932 293.57345581]
[52.81666565 281.48910522]
[64.36482239 271.80734253]
[77.83473969 265.05026245]
[92.50000000 261.58227539]
[92.50000000 246.58227539]
[92.50000000 231.58227539]
[92.50000000 216.58227539]
[92.50000000 201.58227539]
[92.50000000 186.58227539]
[92.50000000 171.58227539]
[92.50000000 156.58227539]
[92.50000000 141.58227539]
[92.50000000 126.58228302]
[80.37095642 119.43112183]
[73.34307861 107.23023224]
[58.34384918 107.07821655]
[43.34461975 106.92620850]
[31.10797691 119.38816833]
[13.98098850 119.17826843]
[2.51393843 106.91230011]
[-12.48529148 107.06430817]
[-18.44642067 110.13748169]
[-24.19073677 109.75216675]
[-28.09249878 106.90614319]
[-43.08556747 106.45017242]
[-58.07863617 105.99420166]
[-73.07170105 105.53823853]
[-84.40836334 116.54985809]
[-100.20954132 116.23648071]
[-111.10068512 104.78403473]
[-110.62026978 88.98705292]
[-99.05331421 78.21759796]
[-83.26229095 78.86499786]
[-72.61573792 90.54516602]
[-57.62266922 91.00113678]
[-42.62960052 91.45710754]
[-27.63653183 91.91307068]
[-12.63730145 92.06507874]
[2.36192846 91.91307068]
[10.03078079 81.51606750]
[22.47914314 77.39022827]
[35.21273422 81.26208496]
[43.49662781 91.92697906]
[58.49585724 92.07898712]
[73.49508667 92.23100281]
[77.69534302 80.70843506]
[86.93406677 71.49154663]
[99.94050598 66.77005768]
[97.51894379 51.96681213]
[95.09738922 37.16356659]
[80.05760956 36.45729828]
[65.49343109 32.63913727]
[52.04153442 25.87599373]
[40.28997421 16.46352577]
[30.75248146 4.81320715]
[23.84599495 -8.56566143]
[19.87243652 -23.08821297]
[19.00551224 -38.11958313]
[21.28311920 -53.00267029]
[26.60569191 -67.08683777]
[34.74055099 -79.75640106]
[45.33207321 -90.45748901]
[57.91724396 -98.72230530]
[71.94589233 -104.18954468]
[86.80474854 -106.62019348]
[101.84424591 -105.90801239]
[116.40692139 -102.08412170]
[129.85615540 -95.31568146]
[141.60401917 -85.89859772]
[151.13691711 -74.24452209]
[158.03814697 -60.86294174]
[162.00599670 -46.33882523]
[162.86700439 -31.30711555]
[160.58354187 -16.42492867]
[155.25543213 -2.34285069]
[147.11558533 10.32350826]
[136.51985168 21.02043152]
[123.93143463 29.28029442]
[109.90063477 34.74201202]
[112.32218933 49.54525757]
[114.74374390 64.34850311]
[127.22634125 72.66625214]
[141.82070923 69.20153046]
[156.41508484 65.73681641]
[168.05490112 55.02116776]
[182.22517395 59.60947800]
[196.81954956 56.14476395]
[211.41392517 52.68004608]
[226.00830078 49.21533203]
[240.60267639 45.75061417]
[255.19705200 42.28589630]
[269.46289062 37.65064240]
[283.30648804 31.87529945]
[297.15011597 26.09995651]
[310.99371338 20.32461357]
[320.50836182 6.96783781]
[336.80502319 8.79851818]
[343.11904907 23.93340683]
[332.95516968 36.80302811]
[316.76904297 34.16821671]
[302.92544556 39.94356155]
[289.08184814 45.71890640]
[275.23825073 51.49424744]
[289.29830933 56.72057724]
[297.73095703 69.12583160]
[297.41781616 84.12255859]
[288.47470093 96.16499329]
[274.20870972 100.79986572]
[259.89544678 96.31319427]
[250.82789612 84.36414337]
[250.35925293 69.37146759]
[258.66177368 56.88027191]
[244.06739807 60.34498596]
[229.47302246 63.80970383]
[214.87864685 67.27442169]
[200.28427124 70.73913574]
[185.68989563 74.20384979]
[175.09396362 84.67168427]
[159.87980652 80.33119202]
[145.28543091 83.79590607]
[130.69105530 87.26062012]
[130.90986633 105.29441071]
[121.92163849 119.72572327]
[107.50000000 126.58228302]
[107.50000000 141.58227539]
[107.50000000 156.58227539]
[107.50000000 171.58227539]
[107.50000000 186.58227539]
[107.50000000 201.58227539]
[107.50000000 216.58227539]
[107.50000000 231.58227539]
[107.50000000 246.58227539]
[107.50000000 261.58227539]
[122.16526031 265.05026245]
[135.63517761 271.80734253]
[147.18333435 281.48910522]
[156.18695068 293.57345581]
[162.16047668 307.40869141]
[164.78176880 322.24868774]
[163.90945435 337.29315186]
[159.59059143 351.73074341]
[152.05809021 364.78286743]
[141.71813965 375.74563599]
[129.12840271 384.02786255]
[114.96779633 389.18286133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 54]
[25 53]
[26 52]
[29 48]
[30 47]
[33 46]
[34 45]
[35 44]
[36 43]
[57 90]
[58 89]
[59 88]
[91 130]
[92 129]
[93 128]
[95 126]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
