%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUACUGCGGGGGGGGGGAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAAxxxxxxxxxxGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUCCCCCCCCCCACAUUACUGC\
) } def
/len { sequence length } bind def

/coor [
[89.62714386 376.29248047]
[75.78120422 370.27645874]
[64.07254028 360.74703979]
[55.37001801 348.41137695]
[50.31941605 334.18484497]
[49.29552460 319.12316895]
[52.37432480 304.34399414]
[59.32734680 290.94406128]
[69.63862610 279.91775513]
[82.54300690 272.08322144]
[97.08290100 268.02191162]
[97.08290100 253.02192688]
[97.08290100 238.02192688]
[97.08290100 223.02192688]
[97.08290100 208.02192688]
[97.08290100 193.02192688]
[97.08290100 178.02192688]
[97.08290100 163.02192688]
[97.08290100 148.02192688]
[97.08290100 133.02192688]
[97.08290100 118.02191925]
[86.53160858 107.36029053]
[71.53241730 107.20425415]
[56.53322983 107.04821777]
[68.42676544 116.18845367]
[74.82674408 129.75459290]
[74.31754303 144.74595642]
[67.01179504 157.84657288]
[54.52546692 166.15870667]
[39.62041855 167.84379578]
[25.59350967 162.52911377]
[15.54736137 151.39022827]
[11.70408916 136.89094543]
[14.91379070 122.23837280]
[24.46650887 110.67353058]
[38.25122452 104.75411987]
[23.67852211 101.19936371]
[6.16529083 106.79101562]
[-6.07085276 94.25001526]
[-20.71435356 90.99918365]
[-34.96517181 98.36761475]
[-49.55188370 91.68874359]
[-53.28481674 76.08602142]
[-43.30038071 63.52853394]
[-27.25778008 63.64929962]
[-17.46352768 76.35568237]
[-2.82002711 79.60650635]
[7.58950377 73.36560059]
[19.84821892 76.00052643]
[27.23328400 86.62665558]
[41.80598831 90.18141937]
[56.68926620 92.04903412]
[71.68845367 92.20507050]
[86.68764496 92.36110687]
[99.85622406 85.17859650]
[107.84614563 72.48366547]
[105.75336456 59.71361923]
[112.72190094 49.28968430]
[124.54010773 46.52609253]
[132.79238892 34.00013351]
[141.04467773 21.47417068]
[149.29696655 8.94820786]
[135.69079590 15.26261806]
[120.81000519 17.15000916]
[106.05825043 14.43235397]
[92.82697296 7.36599445]
[82.36422729 -3.38253522]
[75.65689850 -16.79938126]
[73.33766174 -31.61900139]
[75.62527466 -46.44353485]
[82.30396271 -59.87466049]
[92.74375153 -70.64549255]
[105.95991516 -77.74006653]
[120.70584106 -80.48918915]
[135.59062195 -78.63355255]
[149.21025085 -72.34818268]
[160.28004456 -62.22595596]
[167.75587463 -49.22164536]
[170.93255615 -34.56188202]
[169.51046753 -19.62944603]
[163.62362671 -5.83267927]
[175.88600159 -14.47179508]
[188.14836121 -23.11091232]
[184.05033875 -35.82942200]
[186.84547424 -50.38336182]
[197.17366028 -62.97277451]
[213.59623718 -69.71511841]
[222.36244202 -81.88695526]
[223.46949768 -98.24869537]
[238.30986023 -105.22692108]
[251.61703491 -95.64303589]
[249.70175171 -79.35611725]
[234.53427124 -73.12075043]
[225.76806641 -60.94891357]
[230.46165466 -55.09910202]
[244.54238892 -37.54966736]
[258.32476807 -43.46963120]
[272.10714722 -49.38959122]
[285.88952637 -55.30955505]
[289.18395996 -70.47287750]
[300.78436279 -80.77870941]
[316.23016357 -82.26425171]
[329.58212280 -74.35826874]
[335.70617676 -60.10078812]
[332.24746704 -44.97409058]
[320.53591919 -34.79470825]
[305.07492065 -33.47681808]
[291.80950928 -41.52717590]
[278.02713013 -35.60721207]
[264.24475098 -29.68724823]
[250.46235657 -23.76728439]
[234.68852234 -4.93303490]
[213.20780945 -1.16902685]
[196.78749084 -10.84854317]
[184.52511597 -2.20942736]
[172.26274109 6.42968893]
[161.82293701 17.20049667]
[153.57064819 29.72645950]
[145.31835938 42.25242233]
[137.06607056 54.77838135]
[137.00823975 72.29970551]
[120.54106903 80.47358704]
[112.55115509 93.16851044]
[125.18647766 85.08467102]
[140.01705933 87.33278656]
[149.68898010 98.79811859]
[149.40632629 113.79545593]
[139.30926514 124.88820648]
[124.40451050 126.57592010]
[112.08290100 118.02191925]
[112.08290100 133.02192688]
[112.08290100 148.02192688]
[112.08290100 163.02192688]
[112.08290100 178.02192688]
[112.08290100 193.02192688]
[112.08290100 208.02192688]
[112.08290100 223.02192688]
[112.08290100 238.02192688]
[112.08290100 253.02192688]
[112.08290100 268.02191162]
[126.62278748 272.08322144]
[139.52716064 279.91775513]
[149.83845520 290.94406128]
[156.79147339 304.34399414]
[159.87026978 319.12316895]
[158.84637451 334.18484497]
[153.79577637 348.41137695]
[145.09324646 360.74703979]
[133.38459778 370.27645874]
[119.53865051 376.29248047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 54]
[23 53]
[24 52]
[36 51]
[37 50]
[39 47]
[40 46]
[55 123]
[56 122]
[59 120]
[60 119]
[61 118]
[62 117]
[81 116]
[82 115]
[83 114]
[87 94]
[88 93]
[96 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
