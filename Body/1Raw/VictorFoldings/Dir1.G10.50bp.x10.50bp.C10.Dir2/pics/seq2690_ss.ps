%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACCCCGCGGGGGGGGGGCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCxxxxxxxxxxCUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCCCCCCCCCCCUUACCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.01245880 422.82061768]
[72.79225922 415.54812622]
[61.90545654 405.10113525]
[54.09432602 392.19189453]
[49.89144516 377.70056152]
[49.58337021 362.61523438]
[53.19111252 347.96441650]
[60.46868515 334.74700928]
[70.91989136 323.86425781]
[83.83215332 316.05810547]
[98.32508850 311.86080933]
[98.01303864 296.86407471]
[97.70098114 281.86730957]
[97.38892365 266.87054443]
[97.07686615 251.87380981]
[96.76480865 236.87704468]
[96.45275116 221.88029480]
[96.14070129 206.88354492]
[95.82864380 191.88679504]
[95.51658630 176.89002991]
[95.20452881 161.89328003]
[82.76509094 153.51113892]
[68.74837494 158.85264587]
[54.73166275 164.19416809]
[40.71495056 169.53567505]
[26.69823647 174.87718201]
[18.85165024 188.87042236]
[2.99641037 191.31805420]
[-8.70470238 180.34246826]
[-7.27559376 164.36318970]
[6.18744564 155.63816833]
[21.35672379 160.86047363]
[35.37343597 155.51896667]
[49.39015198 150.17744446]
[63.40686417 144.83593750]
[77.42357635 139.49443054]
[66.42227173 128.25442505]
[60.25198746 114.39844513]
[59.33301926 99.81954956]
[63.39548111 86.37160492]
[71.55928040 75.63383484]
[82.48889923 68.72574615]
[94.59813690 66.19405365]
[95.53376007 51.22325897]
[96.46939087 36.25246811]
[97.40502167 21.28167725]
[97.71707916 6.28492260]
[97.40502167 -8.71183109]
[97.09296417 -23.70858383]
[96.78090668 -38.70533752]
[96.46884918 -53.70209122]
[83.63528442 -65.54425812]
[83.31080627 -82.66671753]
[95.20915985 -94.51100159]
[94.58518219 -109.49801636]
[93.80533600 -124.47772980]
[92.86971283 -139.44853210]
[91.93408203 -154.41931152]
[90.99845123 -169.39010620]
[90.06282806 -184.36090088]
[89.12719727 -199.33169556]
[80.54417419 -212.62237549]
[87.47254181 -225.80747986]
[86.53691101 -240.77827454]
[71.83905029 -244.30874634]
[58.83565140 -252.01608276]
[48.68296051 -263.21493530]
[42.28375626 -276.90951538]
[40.20705032 -291.88211060]
[42.63749695 -306.80136108]
[49.35898590 -320.34069824]
[59.77384949 -331.29614258]
[72.95600128 -338.69360352]
[87.73329163 -341.87527466]
[102.79174042 -340.55822754]
[116.79235840 -334.85961914]
[128.49021912 -325.28613281]
[136.84515381 -312.68905640]
[141.11424255 -298.18850708]
[140.91790771 -283.07385254]
[136.27357483 -268.68908691]
[127.59422302 -256.31329346]
[115.65162659 -247.04690552]
[101.50770569 -241.71389771]
[102.44333649 -226.74310303]
[110.95943451 -214.52323914]
[104.09799194 -200.26731873]
[105.03361511 -185.29652405]
[105.96924591 -170.32572937]
[106.90487671 -155.35494995]
[107.84049988 -140.38415527]
[108.77613068 -125.41336060]
[112.35547638 -118.89155579]
[109.57220459 -110.12199402]
[110.19617462 -95.13497925]
[120.83171844 -87.79453278]
[125.34593964 -75.47803497]
[121.87140656 -62.62675095]
[111.46560669 -54.01414871]
[111.77766418 -39.01739502]
[112.08972168 -24.02064133]
[112.40177155 -9.02388763]
[112.71382904 5.97286654]
[114.71066284 8.02712917]
[115.98661041 11.02144623]
[116.16976166 14.67498493]
[115.00059509 18.57422829]
[112.37580872 22.21730423]
[111.44018555 37.18809509]
[110.50455475 52.15888596]
[109.56892395 67.12967682]
[130.44909668 77.28710938]
[141.73878479 100.23923492]
[136.15037537 127.61621094]
[150.85833740 130.56169128]
[165.56629944 133.50717163]
[182.28434753 130.68881226]
[189.62057495 145.97331238]
[176.96427917 157.25401306]
[162.62081909 148.21513367]
[147.91285706 145.26965332]
[133.20489502 142.32417297]
[127.45398712 147.13842773]
[141.54347229 152.28494263]
[144.13130188 167.06002808]
[132.62966919 176.68876648]
[118.54009247 171.54252625]
[115.95218658 156.76696777]
[110.20128632 161.58122253]
[110.51333618 176.57797241]
[110.82539368 191.57473755]
[111.13745117 206.57148743]
[111.44950867 221.56823730]
[111.76156616 236.56498718]
[112.07362366 251.56175232]
[112.38567352 266.55850220]
[112.69773102 281.55526733]
[113.00978851 296.55200195]
[113.32184601 311.54876709]
[127.97683716 315.13952637]
[141.20265198 322.40179443]
[152.09751892 332.84039307]
[159.91860962 345.74359131]
[164.13267517 360.23165894]
[164.45240784 375.31674194]
[160.85597229 389.97036743]
[153.58860779 403.19335938]
[143.14581299 414.08419800]
[130.23957825 421.90032959]
[115.74989319 426.10879517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[43 111]
[44 110]
[45 109]
[46 108]
[47 103]
[48 102]
[49 101]
[50 100]
[51 99]
[54 95]
[55 94]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[63 85]
[64 84]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
