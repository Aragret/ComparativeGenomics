%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUUAUUGGGGGGGGGGCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCxxxxxxxxxxAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCCCCCCCCCCCUAUCUAUU\
) } def
/len { sequence length } bind def

/coor [
[84.03256989 395.83013916]
[70.81237030 388.55767822]
[59.92556763 378.11065674]
[52.11443710 365.20141602]
[47.91155624 350.71011353]
[47.60348511 335.62475586]
[51.21122742 320.97393799]
[58.48880005 307.75656128]
[68.94001007 296.87377930]
[81.85227203 289.06762695]
[96.34520721 284.87036133]
[96.03314972 269.87359619]
[95.72109222 254.87684631]
[95.40903473 239.88009644]
[95.09697723 224.88333130]
[94.78492737 209.88658142]
[94.47286987 194.88983154]
[94.16081238 179.89308167]
[93.84875488 164.89631653]
[93.53669739 149.89956665]
[93.22463989 134.90281677]
[92.91259003 119.90605927]
[88.01063538 117.39936066]
[83.92266846 113.71138000]
[69.79785919 118.76013947]
[65.56404114 133.68844604]
[53.34339523 143.25062561]
[37.83500671 143.76983643]
[25.00217438 135.04641724]
[19.77937889 120.43471527]
[24.17489243 105.55321503]
[36.49855423 96.12416077]
[52.01165771 95.77321625]
[64.74910736 104.63533020]
[78.87390900 99.58657837]
[81.51612091 89.76139832]
[88.44375610 82.31000519]
[98.05066681 78.95997620]
[102.05840302 64.50528717]
[98.28955078 49.13953400]
[109.14608002 38.94222260]
[113.15381622 24.48753357]
[117.16156006 10.03284454]
[121.16929626 -4.42184401]
[125.17704010 -18.87653160]
[106.49315643 -21.55065346]
[101.62310791 -37.97257996]
[90.32410431 -47.83830643]
[77.38397217 -47.75550461]
[68.16963959 -56.25933456]
[67.27626038 -68.36343384]
[56.18494034 -78.46208191]
[45.09362411 -88.56072998]
[28.96529388 -91.52871704]
[23.72716713 -107.06879425]
[34.76778412 -119.19467163]
[50.72950363 -115.43227386]
[55.19227600 -99.65204620]
[66.28359222 -89.55339813]
[77.37490845 -79.45475006]
[94.67436218 -76.67468262]
[100.18982697 -59.13731003]
[111.48883057 -49.27158737]
[125.16654205 -49.26272202]
[134.60321045 -37.52002716]
[143.86814880 -49.31666565]
[153.13310242 -61.11330795]
[142.57569885 -71.79714966]
[133.44062805 -83.71997070]
[125.87196350 -96.69373322]
[119.98906708 -110.51382446]
[115.88471985 -124.96226501]
[113.62365723 -139.81120300]
[113.24154663 -154.82643127]
[114.74440002 -169.77114868]
[118.10852814 -184.40966797]
[123.28086090 -198.51109314]
[130.17984009 -211.85302734]
[138.69664001 -224.22506714]
[148.69694519 -235.43206787]
[160.02305603 -245.29730225]
[172.49630737 -253.66516113]
[185.91999817 -260.40368652]
[200.08242798 -265.40658569]
[214.76022339 -268.59494019]
[229.72187805 -269.91851807]
[244.73146057 -269.35641479]
[259.55221558 -266.91748047]
[273.95040894 -262.64019775]
[287.69897461 -256.59204102]
[300.58105469 -248.86837769]
[312.39349365 -239.59100342]
[322.95001221 -228.90628052]
[332.08407593 -216.98268127]
[339.65164185 -204.00828552]
[345.53338623 -190.18769836]
[349.63650513 -175.73890686]
[351.89633179 -160.88978577]
[352.27716064 -145.87452698]
[350.77304077 -130.92993164]
[347.40768433 -116.29170990]
[342.23416138 -102.19071960]
[335.33407593 -88.84935760]
[326.81622314 -76.47803497]
[316.81497192 -65.27187347]
[305.48803711 -55.40759659]
[293.01409912 -47.04078674]
[279.58981323 -40.30340195]
[265.42697144 -35.30169678]
[250.74891663 -32.11455154]
[235.78713989 -30.79224205]
[220.77761841 -31.35561562]
[205.95706177 -33.79578781]
[191.55923462 -38.07427597]
[177.81117249 -44.12360001]
[164.92974854 -51.84835815]
[155.66479492 -40.05171585]
[146.39984131 -28.25507736]
[139.63172913 -14.86879158]
[135.62399292 -0.41410354]
[131.61624146 14.04058456]
[127.60850525 28.49527359]
[123.60076904 42.94996262]
[127.65628052 57.28181839]
[116.51309204 68.51302338]
[112.50535583 82.96771240]
[120.96571350 102.63085938]
[107.90933990 119.59400177]
[108.22139740 134.59075928]
[108.53345490 149.58750916]
[108.84551239 164.58425903]
[109.15756226 179.58102417]
[109.46961975 194.57777405]
[109.78167725 209.57452393]
[110.09373474 224.57127380]
[110.40579224 239.56803894]
[110.71784973 254.56478882]
[111.02989960 269.56155396]
[111.34195709 284.55828857]
[125.99694824 288.14904785]
[139.22276306 295.41131592]
[150.11763000 305.84991455]
[157.93872070 318.75311279]
[162.15280151 333.24118042]
[162.47251892 348.32629395]
[158.87609863 362.97988892]
[151.60873413 376.20291138]
[141.16592407 387.09375000]
[128.25968933 394.90985107]
[113.77000427 399.11831665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 35]
[25 34]
[38 126]
[39 125]
[41 123]
[42 122]
[43 121]
[44 120]
[45 119]
[47 63]
[48 62]
[51 60]
[52 59]
[53 58]
[65 118]
[66 117]
[67 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
