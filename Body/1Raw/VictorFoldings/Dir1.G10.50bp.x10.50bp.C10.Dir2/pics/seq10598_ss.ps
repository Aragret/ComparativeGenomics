%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUAACCACGGGGGGGGGGCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCxxxxxxxxxxCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCCCCCCCCCCCUAUCACCAC\
) } def
/len { sequence length } bind def

/coor [
[80.59146881 330.60244751]
[68.03324890 322.25128174]
[57.94702530 311.03884888]
[50.96683121 297.66992188]
[47.53144836 282.98495483]
[47.85682297 267.90698242]
[51.92250824 253.38386536]
[59.47292709 240.32852173]
[70.03345490 229.56161499]
[82.94025421 221.75999451]
[97.38198090 217.41403198]
[96.75800323 202.42701721]
[96.13402557 187.44000244]
[95.51004791 172.45298767]
[94.88607025 157.46597290]
[94.26209259 142.47895813]
[93.63811493 127.49194336]
[93.01413727 112.50492859]
[85.68845367 100.59585571]
[91.99884796 88.11904907]
[91.37487030 73.13203430]
[90.75089264 58.14501953]
[90.12691498 43.15800476]
[89.50293732 28.17098808]
[88.87895966 13.18397236]
[73.87734985 12.86572361]
[58.92533112 11.60614109]
[44.08190536 9.41019535]
[29.40565300 6.28655386]
[14.95449924 2.24754357]
[0.78547287 -2.69089508]
[-13.04550552 -8.50927258]
[-26.48385048 -15.18462563]
[-39.47652817 -22.69060898]
[-51.97226334 -30.99760246]
[-63.92173767 -40.07281876]
[-75.27779388 -49.88044357]
[-85.99560547 -60.38177109]
[-96.03289032 -71.53535461]
[-105.35002899 -83.29718018]
[-113.91024017 -95.62081909]
[-121.67975616 -108.45764923]
[-128.62789917 -121.75699615]
[-134.72726440 -135.46638489]
[-139.95376587 -149.53169250]
[-144.28678894 -163.89743042]
[-147.70921326 -178.50689697]
[-150.20756531 -193.30242920]
[-151.77195740 -208.22564697]
[-152.39620972 -223.21763611]
[-152.07788086 -238.21923828]
[-150.81822205 -253.17124939]
[-148.62220764 -268.01467896]
[-145.49848938 -282.69088745]
[-141.45939636 -297.14202881]
[-136.52088928 -311.31103516]
[-130.70243835 -325.14196777]
[-124.02701569 -338.58029175]
[-116.52096558 -351.57293701]
[-108.21390533 -364.06863403]
[-99.13862610 -376.01803589]
[-89.33094025 -387.37405396]
[-78.82955933 -398.09182739]
[-67.67592621 -408.12902832]
[-55.91405106 -417.44610596]
[-43.59036255 -426.00625610]
[-30.75349617 -433.77569580]
[-17.45411110 -440.72378540]
[-3.74469256 -446.82308960]
[10.32065201 -452.04949951]
[24.68641281 -456.38244629]
[39.29589462 -459.80480957]
[54.09143829 -462.30307007]
[69.01465607 -463.86737061]
[84.00664520 -464.49157715]
[99.00825500 -464.17315674]
[113.96025848 -462.91342163]
[128.80366516 -460.71731567]
[143.47987366 -457.59353638]
[157.93099976 -453.55438232]
[172.09997559 -448.61578369]
[185.93089294 -442.79727173]
[199.36915588 -436.12176514]
[212.36175537 -428.61566162]
[224.85740662 -420.30853271]
[236.80679321 -411.23318481]
[248.16273499 -401.42544556]
[258.88046265 -390.92401123]
[268.91760254 -379.77032471]
[278.23461914 -368.00839233]
[286.79470825 -355.68466187]
[294.56408691 -342.84774780]
[301.51211548 -329.54833984]
[307.61132812 -315.83889771]
[312.83767700 -301.77349854]
[317.17053223 -287.40771484]
[320.59283447 -272.79821777]
[323.09100342 -258.00268555]
[324.65524292 -243.07945251]
[325.27935791 -228.08744812]
[324.96087646 -213.08584595]
[323.70104980 -198.13385010]
[321.50488281 -183.29045105]
[318.38101196 -168.61425781]
[314.34176636 -154.16316223]
[309.40310669 -139.99421692]
[303.58450317 -126.16332245]
[296.90896606 -112.72508240]
[289.40277100 -99.73252106]
[281.09558105 -87.23692322]
[272.02017212 -75.28759003]
[262.21237183 -63.93168640]
[251.71087646 -53.21403503]
[240.55712891 -43.17692566]
[228.79516602 -33.85997391]
[216.47138977 -25.29995346]
[203.63444519 -17.53063965]
[190.33497620 -10.58269978]
[176.62550354 -4.48355246]
[162.56010437 0.74273092]
[148.19429016 5.07552481]
[133.58477783 8.49772930]
[118.78920746 10.99583912]
[103.86597443 12.55999470]
[104.48995209 27.54701042]
[105.11392975 42.53402710]
[105.73790741 57.52104187]
[106.36188507 72.50805664]
[106.98586273 87.49507141]
[114.31154633 99.40414429]
[108.00115204 111.88095093]
[108.62512970 126.86796570]
[109.24910736 141.85498047]
[109.87308502 156.84199524]
[110.49706268 171.82901001]
[111.12104034 186.81602478]
[111.74501801 201.80303955]
[112.36899567 216.79005432]
[127.12200165 219.92050171]
[140.63264465 226.62225342]
[152.05162048 236.47404480]
[160.66113281 248.85658264]
[165.91998291 262.99148560]
[167.49758911 277.99020386]
[165.29478455 292.90994263]
[159.45002747 306.81280518]
[150.33074951 318.82485962]
[138.51017761 328.19104004]
[124.73136902 334.32250977]
[109.86046600 336.83392334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
