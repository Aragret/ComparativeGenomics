%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCCCUGCCGGGGGGGGGGAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCxxxxxxxxxxGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCCCCCCCCCCCAAAACCCCCUCCC\
) } def
/len { sequence length } bind def

/coor [
[79.23696899 168.54400635]
[65.44042206 162.72973633]
[53.15410614 154.17422485]
[42.91491699 143.25134277]
[35.17030716 130.43840027]
[30.25871086 116.29531860]
[28.39475632 101.44014740]
[29.65990067 86.52204132]
[33.99885559 72.19291687]
[41.22201538 59.07893753]
[51.01372910 47.75318146]
[62.94610596 38.71057129]
[76.49771118 32.34626770]
[91.07635498 28.93838310]
[90.77622223 13.94138527]
[90.47608948 -1.05561161]
[90.17595673 -16.05260849]
[89.87582397 -31.04960632]
[89.57569122 -46.04660416]
[89.27556610 -61.04359818]
[88.97543335 -76.04059601]
[88.67530060 -91.03759766]
[88.37516785 -106.03459167]
[88.07503510 -121.03158569]
[87.77490234 -136.02857971]
[72.78179169 -136.60914612]
[57.84859085 -138.06863403]
[43.02678680 -140.40199280]
[28.36746788 -143.60118103]
[13.92116928 -147.65518188]
[-0.26230884 -152.55001831]
[-14.13407230 -158.26882935]
[-27.64630318 -164.79187012]
[-40.75242233 -172.09666443]
[-53.40724564 -180.15805054]
[-65.56715393 -188.94822693]
[-77.19023132 -198.43687439]
[-88.23640442 -208.59130859]
[-98.66759491 -219.37652588]
[-108.44784546 -230.75532532]
[-117.54344940 -242.68849182]
[-125.92303467 -255.13490295]
[-133.55772400 -268.05163574]
[-140.42121887 -281.39416504]
[-146.48982239 -295.11648560]
[-151.74263000 -309.17132568]
[-156.16154480 -323.51022339]
[-159.73133850 -338.08370972]
[-162.43966675 -352.84161377]
[-164.27723694 -367.73300171]
[-165.23768616 -382.70660400]
[-165.31771851 -397.71072388]
[-164.51705933 -412.69369507]
[-162.83845520 -427.60385132]
[-160.28770447 -442.38980103]
[-156.87359619 -457.00054932]
[-152.60789490 -471.38577271]
[-147.50532532 -485.49584961]
[-141.58345032 -499.28213501]
[-134.86268616 -512.69714355]
[-127.36621857 -525.69458008]
[-119.11988068 -538.22967529]
[-110.15210724 -550.25915527]
[-100.49379730 -561.74163818]
[-90.17825317 -572.63751221]
[-79.24103546 -582.90924072]
[-67.71984100 -592.52136230]
[-55.65439987 -601.44073486]
[-43.08629227 -609.63665771]
[-30.05884552 -617.08087158]
[-16.61697006 -623.74768066]
[-2.80700302 -629.61413574]
[11.32345009 -634.65997314]
[25.72567940 -638.86785889]
[40.35003662 -642.22326660]
[55.14610672 -644.71459961]
[70.06288147 -646.33331299]
[85.04895020 -647.07379150]
[100.05264282 -646.93347168]
[115.02223969 -645.91290283]
[129.90614319 -644.01556396]
[144.65303040 -641.24792480]
[159.21208191 -637.61968994]
[173.53311157 -633.14318848]
[187.56674194 -627.83398438]
[201.26458740 -621.71026611]
[214.57943726 -614.79327393]
[227.46539307 -607.10675049]
[239.87803650 -598.67724609]
[251.77458191 -589.53381348]
[263.11401367 -579.70788574]
[273.85723877 -569.23345947]
[283.96722412 -558.14660645]
[293.40911865 -546.48553467]
[302.15036011 -534.29040527]
[310.16085815 -521.60327148]
[317.41296387 -508.46795654]
[323.88168335 -494.92962646]
[329.54470825 -481.03500366]
[334.38253784 -466.83197021]
[338.37847900 -452.36950684]
[341.51876831 -437.69747925]
[343.79260254 -422.86639404]
[345.19207764 -407.92745972]
[345.71240234 -392.93212891]
[345.35180664 -377.93212891]
[344.11151123 -362.97912598]
[341.99581909 -348.12469482]
[339.01196289 -333.42004395]
[335.17028809 -318.91583252]
[330.48400879 -304.66207886]
[324.96926880 -290.70794678]
[318.64511108 -277.10147095]
[311.53332520 -263.88961792]
[303.65841675 -251.11793518]
[295.04754639 -238.83039856]
[285.73037720 -227.06941223]
[275.73907471 -215.87548828]
[265.10800171 -205.28723145]
[253.87388611 -195.34114075]
[242.07539368 -186.07148743]
[229.75323486 -177.51025391]
[216.94987488 -169.68692017]
[203.70945740 -162.62847900]
[190.07760620 -156.35926819]
[176.10131836 -150.90086365]
[161.82879639 -146.27212524]
[147.30920410 -142.48896790]
[132.59262085 -139.56446838]
[117.72977448 -137.50868225]
[102.77189636 -136.32872009]
[103.07202911 -121.33171844]
[103.37216187 -106.33472443]
[103.67229462 -91.33772278]
[103.97242737 -76.34072876]
[104.27256012 -61.34373093]
[104.57269287 -46.34673309]
[104.87282562 -31.34973717]
[105.17295837 -16.35274124]
[105.47309113 -1.35574377]
[105.77322388 13.64125347]
[106.07334900 28.63825035]
[120.77666473 31.46012115]
[134.57205200 37.27713394]
[146.85667419 45.83509445]
[157.09368896 56.76002121]
[164.83573914 69.57450104]
[169.74453735 83.71855927]
[171.60552979 98.57409668]
[170.33741760 113.49195099]
[165.99560547 127.82021332]
[158.76983643 140.93275452]
[148.97587585 152.25656128]
[137.04170227 161.29679871]
[123.48882294 167.65840149]
[108.90950775 171.06338501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
