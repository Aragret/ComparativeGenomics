%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUUCUCCUAGGGGGGGGGGUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 386.08032227]
[70.75619507 381.27087402]
[57.85220718 373.50549316]
[46.91955185 363.14733887]
[38.46956635 350.68090820]
[32.89747238 336.68930054]
[30.46388245 321.82687378]
[31.28262329 306.78878784]
[35.31539917 292.27841187]
[42.37359238 278.97442627]
[52.12707901 267.49908447]
[64.11966705 258.38909912]
[77.79044342 252.07055664]
[92.50000000 248.83898926]
[92.50000000 233.83898926]
[92.50000000 218.83898926]
[92.50000000 203.83898926]
[92.50000000 188.83898926]
[92.50000000 173.83898926]
[92.50000000 158.83898926]
[92.50000000 143.83898926]
[92.50000000 128.83898926]
[92.50000000 113.83899689]
[86.91304779 108.83540344]
[86.05608368 123.81090546]
[73.81355286 132.47810364]
[59.40412521 128.31056213]
[53.67816925 114.44645691]
[60.94735336 101.32552338]
[75.73913574 98.82822418]
[70.15217590 93.82463074]
[55.24292755 95.47213745]
[40.33367920 97.11964417]
[25.42442894 98.76715088]
[12.53643131 108.90773773]
[-2.58700347 102.56630707]
[-4.38818359 86.26638031]
[8.98579121 76.77591705]
[23.77692223 83.85790253]
[38.68617249 82.21039581]
[53.59542084 80.56288910]
[68.50466919 78.91538239]
[80.20501709 80.48094940]
[89.94888306 85.43263245]
[96.93343353 93.04953766]
[103.05275726 79.35450745]
[109.17208099 65.65947723]
[115.29140472 51.96444702]
[102.09189606 44.82369995]
[89.47023010 36.70513535]
[77.49872589 27.65525436]
[66.24593353 17.72589684]
[55.77632141 6.97393847]
[46.14985657 -4.53903484]
[37.42168045 -16.74707794]
[29.64178276 -29.58026123]
[22.85473061 -42.96507645]
[17.09939957 -56.82485962]
[12.40875626 -71.08021545]
[8.80966759 -85.64949799]
[6.32274961 -100.44924927]
[4.96224737 -115.39469910]
[4.73595333 -130.40023804]
[5.64516401 -145.37991333]
[7.68467140 -160.24792480]
[10.84279346 -174.91911316]
[15.10144043 -189.30943298]
[20.43621826 -203.33645630]
[26.81657219 -216.91984558]
[34.20595169 -229.98179626]
[42.56203461 -242.44747925]
[51.83695221 -254.24549866]
[61.97758102 -265.30828857]
[72.92584229 -275.57244873]
[84.61901093 -284.97918701]
[96.99011993 -293.47467041]
[109.96829987 -301.01019287]
[123.47921753 -307.54260254]
[137.44548035 -313.03451538]
[151.78709412 -317.45440674]
[166.42190552 -320.77700806]
[181.26609802 -322.98327637]
[196.23461914 -324.06054688]
[211.24176025 -324.00271606]
[226.20153809 -322.81002808]
[241.02825928 -320.48937988]
[255.63702393 -317.05407715]
[269.94412231 -312.52371216]
[283.86764526 -306.92431641]
[297.32778931 -300.28793335]
[310.24749756 -292.65255737]
[322.55273438 -284.06198120]
[334.17303467 -274.56533813]
[345.04183960 -264.21707153]
[355.09686279 -253.07644653]
[364.28054810 -241.20726013]
[372.54028320 -228.67752075]
[379.82873535 -215.55899048]
[386.10415649 -201.92681885]
[391.33062744 -187.85906982]
[395.47821045 -173.43635559]
[398.52313232 -158.74125671]
[400.44793701 -143.85795593]
[401.24163818 -128.87171936]
[400.89965820 -113.86837006]
[399.42398071 -98.93385315]
[396.82302856 -84.15371704]
[393.11172485 -69.61261749]
[388.31130981 -55.39384842]
[382.44927979 -41.57884979]
[375.55923462 -28.24675751]
[367.68063354 -15.47393703]
[358.85861206 -3.33355093]
[349.14364624 8.10486221]
[338.59146118 18.77578163]
[327.26245117 28.61808586]
[315.22152710 37.57540131]
[302.53765869 45.59641266]
[289.28347778 52.63518524]
[275.53491211 58.65139389]
[261.37075806 63.61058044]
[246.87208557 67.48433685]
[232.12196350 70.25048065]
[217.20489502 71.89316559]
[202.20631409 72.40296936]
[187.21212769 71.77699280]
[172.30824280 70.01880646]
[157.57998657 67.13848877]
[143.11177063 63.15253448]
[128.98643494 58.08377457]
[122.86711121 71.77880096]
[116.74778748 85.47383118]
[110.62846375 99.16886902]
[107.50000000 113.83899689]
[107.50000000 128.83898926]
[107.50000000 143.83898926]
[107.50000000 158.83898926]
[107.50000000 173.83898926]
[107.50000000 188.83898926]
[107.50000000 203.83898926]
[107.50000000 218.83898926]
[107.50000000 233.83898926]
[107.50000000 248.83898926]
[122.20955658 252.07055664]
[135.88034058 258.38909912]
[147.87292480 267.49908447]
[157.62640381 278.97442627]
[164.68460083 292.27841187]
[168.71737671 306.78878784]
[169.53611755 321.82687378]
[167.10252380 336.68930054]
[161.53042603 350.68090820]
[153.08044434 363.14733887]
[142.14779663 373.50549316]
[129.24380493 381.27087402]
[114.97203827 386.08032227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[31 42]
[32 41]
[33 40]
[34 39]
[45 133]
[46 132]
[47 131]
[48 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
