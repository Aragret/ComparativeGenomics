%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACCCUAGGGGGGGGGGGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUxxxxxxxxxxUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAACCCCCCCCCCACAACCCCCUAGG\
) } def
/len { sequence length } bind def

/coor [
[66.69219971 389.10525513]
[53.78116989 381.33337402]
[43.01089478 370.79309082]
[34.96220398 358.05276489]
[30.06915474 343.79953003]
[28.59562111 328.80203247]
[30.62107086 313.86904907]
[36.03627014 299.80587769]
[44.54919052 287.37097168]
[55.70073700 277.23492432]
[68.88951874 269.94430542]
[83.40428162 265.89236450]
[82.80413818 250.90437317]
[82.20399475 235.91639709]
[81.60385132 220.92840576]
[81.00370789 205.94041443]
[80.40356445 190.95242310]
[79.80342102 175.96443176]
[79.20327759 160.97644043]
[78.60313416 145.98844910]
[78.00299072 131.00045776]
[67.23840332 120.55422974]
[52.23915863 120.40415955]
[37.23990631 120.25408173]
[34.16084671 134.98519897]
[28.26677132 148.83244324]
[19.78423309 161.26356506]
[9.03928185 171.80073547]
[-3.55507851 180.03897095]
[-17.51475334 185.66157532]
[-32.30316925 188.45245361]
[-47.35189819 188.30432129]
[-62.08251190 185.22286987]
[-75.92880249 179.32655334]
[-88.35855103 170.84199524]
[-98.89398956 160.09535217]
[-107.13017273 147.49964905]
[-112.75052643 133.53906250]
[-115.53900909 118.75019836]
[-115.38843536 103.70149231]
[-112.30460358 88.97138214]
[-106.40605164 75.12604523]
[-97.91948700 62.69767380]
[-87.17112732 52.16396713]
[-74.57409668 43.92982101]
[-60.61260605 38.31173325]
[-45.82328796 35.52564621]
[-30.77460480 35.67864990]
[-16.04499245 38.76486588]
[-2.20061374 44.66566467]
[10.22638798 53.15423584]
[20.75835228 63.90430450]
[28.99045944 76.50266266]
[34.60628891 90.46506500]
[37.38998032 105.25483704]
[52.38923264 105.40490723]
[67.38848114 105.55498505]
[97.82563019 77.94692230]
[103.11231232 63.90943527]
[108.39898682 49.87194824]
[113.68566132 35.83446121]
[118.97233582 21.79697418]
[124.25901794 7.75948620]
[110.97647858 0.74682283]
[98.67762756 -7.87532854]
[87.55643463 -17.97098351]
[77.78829193 -29.38092041]
[69.52725983 -41.92518616]
[62.90362930 -55.40594101]
[58.02186203 -69.61057281]
[54.95895004 -84.31505585]
[53.76320267 -99.28747559]
[54.45347595 -114.29170227]
[57.01888275 -129.09109497]
[61.41896439 -143.45223999]
[67.58432770 -157.14865112]
[75.41773224 -169.96429443]
[84.79563141 -181.69708252]
[95.57012939 -192.16194153]
[107.57129669 -201.19384766]
[120.60984802 -208.65034485]
[134.48014832 -214.41384888]
[148.96345520 -218.39343262]
[163.83134460 -220.52633667]
[178.84931946 -220.77894592]
[193.78051758 -219.14726257]
[208.38946533 -215.65701294]
[222.44575500 -210.36325073]
[235.72770691 -203.34947205]
[248.02583313 -194.72628784]
[259.14617920 -184.62969971]
[268.91336060 -173.21893311]
[277.17333984 -160.67398071]
[283.79583740 -147.19265747]
[288.67639160 -132.98762512]
[291.73806763 -118.28287506]
[292.93255615 -103.31035614]
[292.24102783 -88.30619049]
[289.67437744 -73.50701904]
[285.27307129 -59.14624023]
[279.10656738 -45.45035172]
[271.27209473 -32.63535690]
[261.89318848 -20.90336418]
[251.11781311 -10.43940353]
[239.11589050 -1.40850878]
[226.07670593 6.04689121]
[212.20591736 11.80921364]
[197.72227478 15.78757954]
[182.85421753 17.91924286]
[167.83622742 18.17058372]
[152.90516663 16.53763962]
[138.29650879 13.04616261]
[133.00982666 27.08365059]
[127.72315216 41.12113571]
[122.43647003 55.15862656]
[117.14979553 69.19611359]
[111.86312103 83.23359680]
[119.05783844 96.39551544]
[134.16825867 91.70658875]
[145.00190735 101.92818451]
[159.67204285 105.05664825]
[176.42390442 102.44674683]
[183.56918335 117.82144165]
[170.77334595 128.94361877]
[156.54357910 119.72677612]
[141.87344360 116.59831238]
[127.81234741 121.51100922]
[115.92938232 111.06564331]
[110.19477844 115.89931488]
[122.93312836 123.81982422]
[119.33662415 138.38227844]
[104.37551880 139.46182251]
[98.72557831 125.56665039]
[92.99097443 130.40031433]
[93.59111786 145.38830566]
[94.19126892 160.37629700]
[94.79141235 175.36428833]
[95.39155579 190.35227966]
[95.99169922 205.34027100]
[96.59184265 220.32826233]
[97.19198608 235.31625366]
[97.79212952 250.30422974]
[98.39227295 265.29223633]
[113.18454742 268.17068481]
[126.91402435 274.38342285]
[138.84030151 283.59539795]
[148.32019043 295.30984497]
[154.84248352 308.89498901]
[158.05541992 323.61825562]
[157.78573608 338.68554688]
[154.04795837 353.28439331]
[147.04370117 366.62744141]
[137.15065002 377.99511719]
[124.90235901 386.77441406]
[110.95934296 392.49185181]
[96.07353973 394.83908081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 143]
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 57]
[23 56]
[24 55]
[58 117]
[59 116]
[60 115]
[61 114]
[62 113]
[63 112]
[118 128]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
