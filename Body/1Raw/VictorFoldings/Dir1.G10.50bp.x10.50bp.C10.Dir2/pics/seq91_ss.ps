%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCCCCCCCCCCCUGCCUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 447.51406860]
[70.75619507 442.70462036]
[57.85220718 434.93923950]
[46.91955185 424.58108521]
[38.46956635 412.11468506]
[32.89747238 398.12304688]
[30.46388245 383.26062012]
[31.28262329 368.22253418]
[35.31539917 353.71215820]
[42.37359238 340.40817261]
[52.12707901 328.93283081]
[64.11966705 319.82284546]
[77.79044342 313.50430298]
[92.50000000 310.27273560]
[92.50000000 295.27273560]
[92.50000000 280.27273560]
[92.50000000 265.27273560]
[92.50000000 250.27275085]
[92.50000000 235.27275085]
[92.50000000 220.27275085]
[92.50000000 205.27275085]
[92.50000000 190.27275085]
[92.50000000 175.27275085]
[84.76270294 162.54547119]
[92.50000000 148.74530029]
[92.50000000 133.74530029]
[86.88117981 131.98268127]
[81.64305878 129.29194641]
[76.93764496 125.75117493]
[72.90148163 121.46312714]
[69.65170288 116.55223083]
[67.28261566 111.16099548]
[52.37336349 112.80850220]
[42.68994141 125.29877472]
[27.00049973 127.20060730]
[14.61330414 117.38567352]
[12.87745953 101.67699432]
[22.82281113 89.39426422]
[38.54895782 87.82460022]
[50.72585678 97.89925385]
[65.63510895 96.25174713]
[69.57314301 83.59262848]
[77.98640442 73.34672546]
[89.63745117 67.02102661]
[102.81263733 65.54590607]
[107.24761963 51.21653748]
[111.68260193 36.88716507]
[116.11758423 22.55779076]
[120.55257416 8.22841835]
[124.98755646 -6.10095453]
[119.66468811 -17.88968849]
[123.69406891 -29.75745392]
[134.38688660 -35.48799896]
[139.10769653 -49.72576523]
[143.82850647 -63.96353149]
[148.54931641 -78.20129395]
[153.27012634 -92.43905640]
[148.18420410 -104.33193970]
[152.45022583 -116.11670685]
[163.25556946 -121.63214874]
[168.26031494 -135.77261353]
[173.26506042 -149.91307068]
[159.55549622 -164.60598755]
[162.85926819 -189.47583008]
[157.01518250 -203.29057312]
[151.17111206 -217.10530090]
[137.76721191 -226.55345154]
[139.51687622 -242.85899353]
[154.62019348 -249.24818420]
[167.54016113 -239.14837646]
[164.98583984 -222.94937134]
[170.82992554 -209.13464355]
[176.67399597 -195.31991577]
[184.06576538 -194.05041504]
[185.56024170 -208.97576904]
[187.05471802 -223.90113831]
[183.38908386 -238.44635010]
[193.58067322 -249.45233154]
[208.36424255 -246.91346741]
[214.29995728 -233.13786316]
[205.99134827 -220.64886475]
[202.42033386 -206.08012390]
[198.84931946 -191.51139832]
[206.24110413 -190.24189758]
[216.35957336 -201.31512451]
[226.47805786 -212.38835144]
[236.48522949 -223.56227112]
[246.38012695 -234.83573914]
[256.27502441 -246.10922241]
[266.16989136 -257.38269043]
[260.15582275 -271.41101074]
[260.83258057 -286.65911865]
[268.06579590 -300.09948730]
[280.41928101 -309.06350708]
[295.44027710 -311.77139282]
[310.14633179 -307.68548584]
[321.61755371 -297.61703491]
[327.57632446 -283.56515503]
[326.83953857 -268.31982422]
[319.55346680 -254.90803528]
[307.16476440 -245.99272156]
[292.13320923 -243.34400940]
[277.44335938 -247.48780823]
[267.54849243 -236.21432495]
[257.65359497 -224.94085693]
[247.75871277 -213.66738892]
[245.69841003 -206.52574158]
[237.55128479 -202.26988220]
[227.43281555 -191.19665527]
[217.31433105 -180.12341309]
[210.05369568 -151.43540955]
[187.40551758 -144.90832520]
[182.40077209 -130.76786804]
[177.39602661 -116.62741089]
[181.54205322 -99.59976196]
[167.50788879 -87.71825409]
[162.78707886 -73.48048401]
[158.06626892 -59.24272156]
[153.34545898 -45.00495529]
[148.62464905 -30.76718903]
[153.11054993 -13.82591152]
[139.31692505 -1.66597080]
[134.88194275 12.66340160]
[130.44696045 26.99277496]
[126.01197815 41.32214737]
[121.57699585 55.65151978]
[117.14201355 69.98089600]
[131.11322021 84.93471527]
[134.18014526 105.16847992]
[125.26790619 123.59085083]
[107.50000000 133.74530029]
[107.50000000 148.74530029]
[115.23729706 162.54547119]
[107.50000000 175.27275085]
[107.50000000 190.27275085]
[107.50000000 205.27275085]
[107.50000000 220.27275085]
[107.50000000 235.27275085]
[107.50000000 250.27275085]
[107.50000000 265.27273560]
[107.50000000 280.27273560]
[107.50000000 295.27273560]
[107.50000000 310.27273560]
[122.20955658 313.50430298]
[135.88034058 319.82284546]
[147.87292480 328.93283081]
[157.62640381 340.40817261]
[164.68460083 353.71215820]
[168.71737671 368.22253418]
[169.53611755 383.26062012]
[167.10252380 398.12304688]
[161.53042603 412.11468506]
[153.08044434 424.58108521]
[142.14779663 434.93923950]
[129.24380493 442.70462036]
[114.97203827 447.51406860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 132]
[26 131]
[32 41]
[33 40]
[45 127]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[60 114]
[61 113]
[62 112]
[64 73]
[65 72]
[66 71]
[84 110]
[85 109]
[86 108]
[87 106]
[88 105]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
