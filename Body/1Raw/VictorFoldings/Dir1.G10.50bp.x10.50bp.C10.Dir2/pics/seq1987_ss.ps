%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAAUAAAGGGGGGGGGGGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGxxxxxxxxxxCCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCCCCCCCCCCCAACUAAA\
) } def
/len { sequence length } bind def

/coor [
[85.20517731 422.79571533]
[71.35923767 416.77969360]
[59.65057755 407.25027466]
[50.94805145 394.91461182]
[45.89744949 380.68807983]
[44.87355804 365.62640381]
[47.95235825 350.84722900]
[54.90538025 337.44732666]
[65.21666718 326.42098999]
[78.12104797 318.58648682]
[92.66093445 314.52514648]
[92.66093445 299.52514648]
[92.66093445 284.52514648]
[92.66093445 269.52514648]
[92.66093445 254.52516174]
[92.66093445 239.52516174]
[92.66093445 224.52516174]
[92.66093445 209.52516174]
[92.66093445 194.52516174]
[92.66093445 179.52516174]
[92.66093445 164.52516174]
[92.66093445 149.52516174]
[92.66093445 134.52516174]
[92.66093445 119.52516174]
[86.95668030 115.87288666]
[82.80243683 110.65370178]
[80.59211731 104.46878815]
[65.59942627 104.00074768]
[50.60672760 103.53269958]
[36.57184982 110.83563232]
[24.09220123 102.70497131]
[9.09950447 102.23693085]
[-5.89319134 101.76889038]
[-13.91562080 114.86607361]
[-27.41949272 122.18324280]
[-42.77233124 121.75212860]
[-55.84430313 113.68868256]
[-63.11911392 100.16194153]
[-62.63987350 84.81053162]
[-54.53549576 71.76389313]
[-40.98601913 64.53152466]
[-25.63618279 65.05887604]
[-12.61501694 73.20410919]
[-5.42514944 86.77619171]
[9.56754684 87.24423218]
[24.56024361 87.71227264]
[37.52274323 80.37586975]
[51.07477188 88.54000854]
[66.06746674 89.00804901]
[81.06016541 89.47608948]
[91.61145020 78.81446838]
[90.98747253 63.82744980]
[90.36349487 48.84043121]
[82.98109436 61.89800262]
[73.08982086 73.17464447]
[61.10582352 82.19594574]
[47.53328705 88.58235931]
[32.94322968 92.06520081]
[17.94947243 92.49794006]
[3.18282890 89.86236572]
[-10.73544788 84.26937866]
[-23.21979523 75.95426178]
[-33.74497604 65.26686096]
[-41.86818314 52.65680695]
[-47.24765778 38.65461731]
[-49.65707779 23.84939384]
[-48.99507904 8.86400890]
[-45.28950882 -5.67107821]
[-38.69626617 -19.14435387]
[-29.49274063 -30.98897743]
[-18.06613731 -40.70663071]
[-4.89719057 -47.88846970]
[9.46006107 -52.23235321]
[24.40158844 -53.55552292]
[39.29877853 -51.80230713]
[53.52488327 -47.04647446]
[66.48138428 -39.48810577]
[77.62319183 -29.44519043]
[86.48155212 -17.34025383]
[92.68377686 -3.68256521]
[95.96892548 10.95327377]
[96.19827271 25.95743370]
[103.92235565 13.09903145]
[111.64644623 0.24062937]
[119.37052917 -12.61777306]
[115.30265045 -27.88957405]
[123.29720306 -41.52272034]
[138.61116028 -45.42890549]
[152.15902710 -37.29066086]
[155.90307617 -21.93626213]
[147.62205505 -8.47520161]
[132.22892761 -4.89368820]
[124.50484467 7.96471453]
[116.78076172 20.82311630]
[109.05667877 33.68151855]
[105.35051727 48.21645355]
[105.97449493 63.20347214]
[106.59846497 78.19049072]
[118.49084473 87.33222198]
[133.13435364 84.08139801]
[147.77784729 80.83056641]
[162.42135620 77.57974243]
[177.06484985 74.32891846]
[182.29798889 59.81623840]
[194.56040955 50.45479584]
[209.93920898 49.23178864]
[223.52709961 56.53747559]
[230.98820496 70.04064178]
[229.94172668 85.43247223]
[220.72158813 97.80149078]
[206.26989746 103.20079041]
[191.19815063 99.90747070]
[180.31567383 88.97241974]
[165.67218018 92.22324371]
[151.02867126 95.47407532]
[136.38517761 98.72489929]
[121.74167633 101.97572327]
[136.42355347 98.90283966]
[150.57054138 103.88909912]
[160.08090210 115.48878479]
[162.19725037 130.33874512]
[156.30596924 144.13340759]
[144.11515808 152.87319946]
[129.15937805 154.02415466]
[115.77486420 147.25253296]
[107.84227753 134.52169800]
[107.66093445 119.52516174]
[107.66093445 134.52516174]
[107.66093445 149.52516174]
[107.66093445 164.52516174]
[107.66093445 179.52516174]
[107.66093445 194.52516174]
[107.66093445 209.52516174]
[107.66093445 224.52516174]
[107.66093445 239.52516174]
[107.66093445 254.52516174]
[107.66093445 269.52514648]
[107.66093445 284.52514648]
[107.66093445 299.52514648]
[107.66093445 314.52514648]
[122.20082092 318.58648682]
[135.10519409 326.42098999]
[145.41648865 337.44732666]
[152.36950684 350.84722900]
[155.44830322 365.62640381]
[154.42440796 380.68807983]
[149.37380981 394.91461182]
[140.67127991 407.25027466]
[128.96263123 416.77969360]
[115.11668396 422.79571533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[27 50]
[28 49]
[29 48]
[31 46]
[32 45]
[33 44]
[51 98]
[52 97]
[53 96]
[82 95]
[83 94]
[84 93]
[85 92]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
