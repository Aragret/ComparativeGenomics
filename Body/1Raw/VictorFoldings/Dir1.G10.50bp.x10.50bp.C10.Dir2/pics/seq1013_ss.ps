%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUCACCAGGGGGGGGGGCGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUxxxxxxxxxxCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUCCCCCCCCCCUAAAUCAACA\
) } def
/len { sequence length } bind def

/coor [
[110.84867859 631.11926270]
[97.62847900 623.84680176]
[86.74167633 613.39984131]
[78.93054199 600.49053955]
[74.72766113 585.99926758]
[74.41959381 570.91387939]
[78.02733612 556.26306152]
[85.30490875 543.04571533]
[95.75611115 532.16290283]
[108.66837311 524.35681152]
[123.16130829 520.15948486]
[122.84925842 505.16275024]
[122.53720093 490.16598511]
[122.22514343 475.16925049]
[121.91308594 460.17248535]
[121.60102844 445.17572021]
[121.28897095 430.17898560]
[120.97692108 415.18222046]
[120.66486359 400.18545532]
[120.35280609 385.18872070]
[120.04074860 370.19195557]
[119.10511780 355.22116089]
[117.54753876 340.30224609]
[103.47513580 335.35931396]
[92.90088654 324.75296021]
[87.96007538 310.54910278]
[89.68327332 295.54739380]
[97.78190613 282.72949219]
[110.69493866 274.66629028]
[109.13735962 259.74737549]
[107.57978058 244.82847595]
[94.61495209 237.54484558]
[88.35095215 223.86177063]
[91.38056183 208.93948364]
[102.74735260 198.54225159]
[101.18977356 183.62335205]
[99.63219452 168.70443726]
[98.07461548 153.78552246]
[96.51702881 138.86660767]
[94.95944977 123.94770050]
[78.46110535 116.25748444]
[70.57363129 97.93041992]
[77.39999390 77.32773590]
[64.96054840 68.94559479]
[52.52111053 60.56345367]
[39.69197845 62.25675201]
[29.49056053 54.96634674]
[27.09707642 43.06766891]
[14.83470726 34.42855453]
[2.57233930 25.78943634]
[-13.80002975 24.85264778]
[-20.93225288 10.08567619]
[-11.48730946 -3.32048249]
[4.81865120 -1.57472229]
[11.21145535 13.52706814]
[23.47382355 22.16618538]
[35.73619080 30.80530167]
[53.24717331 31.40981674]
[60.90325546 48.12401199]
[73.34269714 56.50615311]
[85.78213501 64.88829803]
[78.88410950 51.56848907]
[71.98609161 38.24868011]
[65.08806610 24.92887306]
[58.19004440 11.60906601]
[47.00206375 1.61761689]
[38.93557739 -11.02879906]
[34.59262466 -25.38633156]
[34.29732895 -40.38342285]
[38.07173538 -54.90078735]
[45.63414001 -67.85493469]
[56.42013931 -78.27906036]
[69.62472534 -85.39515686]
[84.26239777 -88.67212677]
[99.24069214 -87.86540222]
[113.44171143 -83.03519440]
[125.80559540 -74.54199219]
[135.40957642 -63.01968002]
[141.53684998 -49.32820892]
[143.73016357 -34.48942947]
[141.82577515 -19.61080933]
[135.96583557 -5.80279970]
[126.58802795 5.90373993]
[121.99208832 20.18230057]
[117.39614868 34.46086121]
[112.80020905 48.73942566]
[108.20426178 63.01798630]
[119.08309174 52.69078064]
[129.96191406 42.36357498]
[140.84074402 32.03637314]
[137.85357666 16.90096855]
[143.54467773 2.56169033]
[156.09803772 -6.40585279]
[171.50791931 -7.14015007]
[184.85708618 0.59311014]
[191.88586426 14.32627296]
[190.35140991 29.67713547]
[180.74334717 41.74729156]
[166.12757874 46.68520355]
[151.16793823 42.91519547]
[140.28912354 53.24240112]
[129.41029358 63.56960678]
[118.53147125 73.89681244]
[128.57814026 92.68674469]
[124.27120209 111.79570007]
[109.87836456 122.39011383]
[111.43594360 137.30903625]
[112.99352264 152.22793579]
[114.55110168 167.14685059]
[116.10868835 182.06576538]
[117.66626740 196.98468018]
[130.93553162 204.80981445]
[136.98208618 218.78453064]
[133.67945862 233.46638489]
[122.49869537 243.27088928]
[124.05627441 258.18978882]
[125.61385345 273.10870361]
[139.91390991 278.33078003]
[150.48548889 289.19946289]
[155.27020264 303.52169800]
[153.36981201 318.43978882]
[145.21440125 331.00158691]
[132.46644592 338.74468994]
[134.02403259 353.66357422]
[136.79809570 357.19433594]
[138.12844849 361.04156494]
[138.09744263 364.69955444]
[136.94715881 367.74435425]
[135.03750610 369.87991333]
[135.34956360 384.87664795]
[135.66162109 399.87341309]
[135.97367859 414.87017822]
[136.28572083 429.86691284]
[136.59777832 444.86367798]
[136.90983582 459.86041260]
[137.22189331 474.85717773]
[137.53395081 489.85394287]
[137.84600830 504.85067749]
[138.15806580 519.84741211]
[152.81306458 523.43823242]
[166.03886414 530.70043945]
[176.93373108 541.13903809]
[184.75483704 554.04229736]
[188.96890259 568.53033447]
[189.28862000 583.61541748]
[185.69219971 598.26904297]
[178.42483521 611.49206543]
[167.98204041 622.38287354]
[155.07580566 630.19897461]
[140.58610535 634.40747070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 124]
[23 123]
[29 117]
[30 116]
[31 115]
[35 111]
[36 110]
[37 109]
[38 108]
[39 107]
[40 106]
[43 61]
[44 60]
[45 59]
[48 57]
[49 56]
[50 55]
[87 103]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
