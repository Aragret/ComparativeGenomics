%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCUGGCGGGGGGGGGGGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAxxxxxxxxxxGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUCCCCCCCCCCAAACCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[78.01177216 367.77917480]
[65.13850403 359.87628174]
[55.01420593 348.66577148]
[48.45962524 335.05642700]
[46.00610352 320.15151978]
[47.85253906 305.15927124]
[53.84925461 291.29507446]
[63.51011276 279.68280029]
[76.05196381 271.26385498]
[90.45808411 266.72070312]
[90.14602661 251.72393799]
[89.83396912 236.72718811]
[89.52191162 221.73043823]
[89.20986176 206.73368835]
[88.89780426 191.73693848]
[88.58574677 176.74017334]
[88.27368927 161.74342346]
[87.96163177 146.74667358]
[87.64957428 131.74992371]
[75.21013641 123.36777496]
[61.19342422 128.70928955]
[61.13917160 143.88694763]
[55.60213470 158.01867676]
[45.33115387 169.19326782]
[31.71529579 175.89944458]
[16.59599113 177.23025513]
[2.01800227 173.00572205]
[-10.04711723 163.79716492]
[-17.96765709 150.84999084]
[-20.67243385 135.91517639]
[-17.79564476 121.01254272]
[-9.72635269 108.15754700]
[2.44413638 99.08871460]
[17.06986427 95.03254700]
[32.17282104 96.53759003]
[45.71045303 103.40030670]
[55.85191345 114.69257355]
[69.86862183 109.35105896]
[77.41808319 83.32591248]
[100.05338287 75.40756226]
[104.65895081 61.13209915]
[109.26451111 46.85663986]
[113.87007904 32.58118057]
[101.56513214 24.84585190]
[91.48525238 14.38796043]
[84.21746063 1.82311106]
[80.18344116 -12.11058426]
[79.61505890 -26.59586334]
[82.54105377 -40.78424454]
[88.78561401 -53.84573746]
[97.97892761 -65.01738739]
[109.57909393 -73.64784241]
[122.90406036 -79.23533630]
[137.17170715 -81.45684052]
[151.54579163 -80.18676758]
[156.44734192 -94.36332703]
[161.34889221 -108.53987885]
[166.25044250 -122.71643829]
[159.59193420 -136.79841614]
[164.76473999 -151.10563660]
[178.23078918 -157.36672974]
[183.13233948 -171.54328918]
[173.76434326 -183.49444580]
[172.21453857 -198.45533752]
[178.80628967 -211.81430054]
[191.37693787 -219.53546143]
[191.37693787 -234.53546143]
[177.12426758 -239.69657898]
[165.49833679 -249.42353821]
[157.90303040 -262.54174805]
[155.25552368 -277.46710205]
[157.87551880 -292.39730835]
[165.44664001 -305.52951050]
[177.05461121 -315.27786255]
[191.29774475 -320.46524048]
[206.45611572 -320.46524048]
[220.69924927 -315.27786255]
[232.30723572 -305.52951050]
[239.87834167 -292.39730835]
[242.49833679 -277.46710205]
[239.85083008 -262.54174805]
[232.25552368 -249.42353821]
[220.62960815 -239.69657898]
[206.37693787 -234.53546143]
[206.37693787 -219.53546143]
[209.07803345 -218.57641602]
[211.65969849 -217.33114624]
[222.32133484 -227.88244629]
[232.98295593 -238.43373108]
[243.64457703 -248.98501587]
[254.30621338 -259.53631592]
[264.96783447 -270.08761597]
[268.77029419 -286.03982544]
[284.56170654 -290.46295166]
[296.09716797 -278.80682373]
[291.51004028 -263.06231689]
[275.51913452 -259.42596436]
[264.85748291 -248.87469482]
[254.19587708 -238.32339478]
[243.53424072 -227.77210999]
[232.87261963 -217.22080994]
[222.21099854 -206.66952515]
[225.10334778 -188.43385315]
[215.32858276 -172.48741150]
[197.30889893 -166.64173889]
[192.40734863 -152.46517944]
[199.13037109 -139.22370911]
[194.36145020 -124.77683258]
[180.42700195 -117.81488800]
[175.52545166 -103.63832855]
[170.62390137 -89.46177673]
[165.72235107 -75.28521729]
[178.63949585 -66.69738007]
[188.91206360 -55.06023788]
[195.84065247 -41.15741348]
[198.95130920 -25.92708206]
[198.02795410 -10.39864922]
[193.12731934 4.37682152]
[184.57556152 17.39774704]
[172.94656372 27.77992630]
[159.02337646 34.81657791]
[143.74549866 38.02645111]
[128.14553833 37.18674469]
[123.53997040 51.46220398]
[118.93441010 65.73766327]
[114.32884216 80.01312256]
[123.26339722 88.42534637]
[127.36625671 100.69638824]
[125.06961060 114.10751343]
[116.30210114 125.37184143]
[102.64633179 131.43786621]
[102.95838928 146.43461609]
[103.27044678 161.43136597]
[103.58249664 176.42811584]
[103.89455414 191.42488098]
[104.20661163 206.42163086]
[104.51866913 221.41838074]
[104.83072662 236.41513062]
[105.14278412 251.41189575]
[105.45483398 266.40863037]
[120.03747559 270.34860229]
[132.91868591 278.23855591]
[143.05422974 289.43887329]
[149.62248230 303.04162598]
[152.09098816 317.94406128]
[150.25961304 332.93817139]
[144.27682495 346.80838013]
[134.62763977 358.43032837]
[122.09425354 366.86187744]
[107.69270325 371.41952515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 38]
[21 37]
[40 126]
[41 125]
[42 124]
[43 123]
[55 112]
[56 111]
[57 110]
[58 109]
[61 106]
[62 105]
[66 85]
[67 84]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
