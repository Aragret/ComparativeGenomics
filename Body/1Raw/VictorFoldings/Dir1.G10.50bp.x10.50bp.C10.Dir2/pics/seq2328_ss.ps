%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAGUAGGCCGGGGGGGGGGUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUxxxxxxxxxxAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCCCCCCCCCCCAUAGAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[70.39728546 420.24441528]
[56.23668289 415.08941650]
[43.64693832 406.80722046]
[33.30699921 395.84442139]
[25.77449036 382.79229736]
[21.45562363 368.35470581]
[20.58331490 353.31024170]
[23.20460701 338.47024536]
[29.17813301 324.63500977]
[38.18175125 312.55065918]
[49.72990799 302.86889648]
[63.19982529 296.11181641]
[77.86508179 292.64382935]
[77.86508179 277.64382935]
[77.86508179 262.64382935]
[77.86508179 247.64384460]
[77.86508179 232.64384460]
[77.86508179 217.64384460]
[77.86508179 202.64384460]
[77.86508179 187.64384460]
[77.86508179 172.64384460]
[77.86508179 157.64384460]
[85.23999786 91.27501678]
[77.96047211 78.15981293]
[70.68093872 65.04461670]
[50.48175812 61.64109421]
[38.43188858 45.39715958]
[40.96872330 25.59218979]
[30.30851364 15.03946877]
[15.05769253 10.82959366]
[11.45597172 -3.62297916]
[0.79576188 -14.17570019]
[-10.95705605 -4.82649612]
[-23.73316383 3.06700969]
[-37.35320282 9.39400482]
[-51.62597275 14.06566811]
[-66.35110474 17.01641655]
[-81.32187653 18.20482635]
[-96.32812500 17.61421394]
[-111.15918732 15.25287056]
[-125.60685730 11.15394592]
[-139.46830750 5.37498283]
[-152.54896545 -2.00289154]
[-164.66516113 -10.87610340]
[-175.64683533 -21.12008667]
[-185.33981323 -32.59103012]
[-193.60801697 -45.12790298]
[-200.33537292 -58.55470657]
[-205.42744446 -72.68294525]
[-208.81275940 -87.31428528]
[-210.44375610 -102.24332428]
[-210.29756165 -117.26048279]
[-208.37623596 -132.15493774]
[-204.70674133 -146.71760559]
[-199.34059143 -160.74403381]
[-192.35311890 -174.03732300]
[-183.84242249 -186.41085815]
[-173.92797852 -197.69093323]
[-162.74894714 -207.71917725]
[-150.46229553 -216.35484314]
[-137.24050903 -223.47666931]
[-123.26917267 -228.98468018]
[-108.74444580 -232.80157471]
[-93.87022400 -234.87373352]
[-78.85531616 -235.17210388]
[-63.91051865 -233.69247437]
[-49.24562073 -230.45562744]
[-35.06650543 -225.50698853]
[-21.57221794 -218.91604614]
[-8.95219898 -210.77531433]
[2.61638522 -201.19908142]
[12.97113037 -190.32177734]
[21.96667290 -178.29611206]
[29.47672653 -165.29090881]
[35.39586639 -151.48872375]
[39.64099121 -137.08334351]
[42.15251160 -122.27696991]
[42.89516830 -107.27747345]
[41.85853195 -92.29542542]
[39.05715942 -77.54115295]
[34.53037643 -63.22177124]
[28.34173203 -49.53831482]
[20.57810402 -36.68286896]
[11.34848309 -24.83591080]
[22.00869370 -14.28318882]
[36.49702454 -10.82811546]
[40.86123276 4.37925911]
[51.52144623 14.93198013]
[63.54309082 11.64006233]
[75.74256134 14.19537067]
[85.74181366 3.01435661]
[95.74105835 -8.16665745]
[94.61048126 -23.93045616]
[105.02073669 -35.82171631]
[120.79560852 -36.78556442]
[132.57614136 -26.25016594]
[133.37315369 -10.46598625]
[122.71379089 1.20250058]
[106.92207336 1.83258855]
[96.92282104 13.01360226]
[86.92357635 24.19461632]
[90.52707672 32.36111832]
[91.24161530 41.34572983]
[88.93015289 50.14703369]
[83.79614258 57.76508713]
[91.07566833 70.88028717]
[98.35520172 83.99548340]
[111.82226562 90.60140228]
[126.64929199 88.32997894]
[141.47631836 86.05856323]
[153.92762756 75.38632202]
[169.30374146 81.08782196]
[171.78703308 97.29785919]
[158.82289124 107.34093475]
[143.74774170 100.88558960]
[128.92071533 103.15700531]
[114.09368896 105.42842102]
[112.42494202 120.33598328]
[110.75633240 135.24221802]
[124.71414185 140.73580933]
[138.67195129 146.22938538]
[152.62976074 151.72297668]
[167.01963806 145.18792725]
[181.78623962 150.82028198]
[188.16877747 165.27844238]
[182.38063049 179.98466492]
[167.85578918 186.21398926]
[153.21159363 180.27067566]
[147.13616943 165.68078613]
[133.17835999 160.18721008]
[119.22055054 154.69361877]
[105.26274109 149.20002747]
[92.86508179 157.64384460]
[92.86508179 172.64384460]
[92.86508179 187.64384460]
[92.86508179 202.64384460]
[92.86508179 217.64384460]
[92.86508179 232.64384460]
[92.86508179 247.64384460]
[92.86508179 262.64382935]
[92.86508179 277.64382935]
[92.86508179 292.64382935]
[107.53034210 296.11181641]
[121.00025940 302.86889648]
[132.54841614 312.55065918]
[141.55203247 324.63500977]
[147.52555847 338.47024536]
[150.14685059 353.31024170]
[149.27455139 368.35470581]
[144.95567322 382.79229736]
[137.42317200 395.84442139]
[127.08322906 406.80722046]
[114.49348450 415.08941650]
[100.33287811 420.24441528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 107]
[24 106]
[25 105]
[28 88]
[29 87]
[31 85]
[32 84]
[90 101]
[91 100]
[92 99]
[108 117]
[109 116]
[110 115]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
