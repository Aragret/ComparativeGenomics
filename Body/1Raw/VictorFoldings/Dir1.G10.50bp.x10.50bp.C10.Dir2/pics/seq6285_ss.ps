%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUAUACCUGGGGGGGGGGAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAxxxxxxxxxxCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUCCCCCCCCCCACACUAUUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 395.78805542]
[71.01555634 390.23504639]
[58.81560135 381.36871338]
[49.20452881 369.74639893]
[42.78650284 356.09869385]
[39.96496582 341.28350830]
[40.91728210 326.23214722]
[45.58358765 311.89071655]
[53.67055511 299.16076660]
[64.66983032 288.84246826]
[77.88998413 281.58450317]
[92.50000000 277.84307861]
[92.50000000 262.84307861]
[92.50000000 247.84306335]
[92.50000000 232.84306335]
[92.50000000 217.84306335]
[92.50000000 202.84306335]
[92.50000000 187.84306335]
[92.50000000 172.84306335]
[92.50000000 157.84306335]
[92.50000000 142.84306335]
[92.50000000 127.84307098]
[73.11169434 110.41658783]
[75.69967651 84.47644043]
[65.59424591 73.39131165]
[55.48881149 62.30617523]
[45.38337708 51.22103882]
[17.66635132 53.26911926]
[-0.00951458 24.86729050]
[-14.05149078 19.59255028]
[-28.09346771 14.31780815]
[-39.03394318 22.75930023]
[-52.61145401 24.66154861]
[-65.24898529 19.63181877]
[-73.67071533 9.08945084]
[-75.75101471 -4.13266945]
[-89.68173218 -9.69460678]
[-103.61244965 -15.25654411]
[-117.54316711 -20.81848145]
[-131.47387695 -26.38041878]
[-145.40460205 -31.94235611]
[-157.58352661 -27.57458878]
[-169.09486389 -32.54051590]
[-173.95228577 -43.66110992]
[-187.76586914 -49.50789642]
[-203.11471558 -44.83966064]
[-216.25216675 -54.04763794]
[-217.10031128 -70.06826019]
[-205.00849915 -80.61186981]
[-189.25254822 -77.59031677]
[-181.91908264 -63.32147980]
[-168.10549927 -57.47469330]
[-150.86206055 -60.59052277]
[-139.84265137 -45.87307358]
[-125.91194153 -40.31113434]
[-111.98122406 -34.74919891]
[-98.05050659 -29.18725967]
[-84.11979675 -23.62532234]
[-70.18907928 -18.06338501]
[-56.62199020 -27.25491714]
[-40.08311844 -26.56396675]
[-27.07186699 -16.06464005]
[-22.81872559 0.27583188]
[-8.77674961 5.55057335]
[5.26522684 10.82531452]
[11.51724529 6.68257761]
[10.59380150 -8.28896999]
[24.02128029 -1.60289693]
[30.27329826 -5.74563408]
[30.88912392 -20.73298836]
[17.08128357 -27.09002876]
[6.76090717 -38.25059509]
[1.50177646 -52.51278305]
[2.10587144 -67.70171356]
[8.48107147 -81.50117493]
[19.65520477 -91.80686188]
[33.92429733 -97.04722595]
[49.11241913 -96.42315674]
[62.90348434 -90.02980804]
[73.19446564 -78.84212494]
[78.41605377 -64.56615448]
[77.77200317 -49.37886429]
[71.36051941 -35.59622192]
[60.15930939 -25.31996727]
[45.87647629 -20.11716270]
[45.26065063 -5.12980890]
[57.31601715 4.73371553]
[63.12414551 17.82869530]
[62.42937088 30.88869476]
[56.46850967 41.11560440]
[66.57394409 52.20074081]
[76.67938232 63.28587341]
[86.78481293 74.37100983]
[94.43570709 71.70645142]
[102.52584076 71.27532959]
[110.41658783 73.11169434]
[117.48506165 77.07056427]
[123.17330170 82.83945465]
[127.03227997 89.96295929]
[141.96829224 88.57893372]
[156.90431213 87.19490814]
[171.84031677 85.81088257]
[186.77633667 84.42685699]
[201.71234131 83.04283142]
[205.53637695 68.37475586]
[214.14913940 55.90092850]
[226.51057434 47.12763214]
[241.12799072 43.11428452]
[256.23626709 44.34551239]
[270.01098633 50.67264557]
[280.78881836 61.33164597]
[287.26824951 75.03539276]
[288.66690063 90.12908936]
[284.81582642 104.79009247]
[276.18011475 117.24802399]
[263.80252075 125.99852753]
[249.17773438 129.98492432]
[234.07176208 128.72586060]
[220.30871582 122.37335205]
[209.55055237 111.69451141]
[203.09637451 97.97884369]
[188.16035461 99.36286926]
[173.22434998 100.74689484]
[158.28833008 102.13092041]
[143.35232544 103.51494598]
[128.41630554 104.89897156]
[126.58040619 111.17892456]
[123.37604523 116.88333893]
[118.96818542 121.71852875]
[113.58376312 125.43556213]
[107.50000000 127.84307098]
[107.50000000 142.84306335]
[107.50000000 157.84306335]
[107.50000000 172.84306335]
[107.50000000 187.84306335]
[107.50000000 202.84306335]
[107.50000000 217.84306335]
[107.50000000 232.84306335]
[107.50000000 247.84306335]
[107.50000000 262.84307861]
[107.50000000 277.84307861]
[122.11001587 281.58450317]
[135.33016968 288.84246826]
[146.32945251 299.16076660]
[154.41641235 311.89071655]
[159.08271790 326.23214722]
[160.03503418 341.28350830]
[157.21350098 356.09869385]
[150.79547119 369.74639893]
[141.18440247 381.36871338]
[128.98443604 390.23504639]
[114.96250153 395.78805542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 93]
[25 92]
[26 91]
[27 90]
[29 65]
[30 64]
[31 63]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[44 52]
[45 51]
[69 86]
[70 85]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
