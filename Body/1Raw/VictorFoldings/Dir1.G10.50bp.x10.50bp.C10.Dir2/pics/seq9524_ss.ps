%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUUAAACGGGGGGGGGGAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUxxxxxxxxxxAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCCCCCCCCCCCUAAUUUAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.54522705 420.46749878]
[71.32503510 413.19503784]
[60.43822861 402.74801636]
[52.62709808 389.83877563]
[48.42421722 375.34747314]
[48.11614609 360.26211548]
[51.72388840 345.61129761]
[59.00146103 332.39392090]
[69.45266724 321.51113892]
[82.36492920 313.70498657]
[96.85786438 309.50772095]
[96.54580688 294.51095581]
[96.23375702 279.51419067]
[95.92169952 264.51745605]
[95.60964203 249.52069092]
[95.29758453 234.52394104]
[94.98552704 219.52719116]
[94.67346954 204.53044128]
[94.36141968 189.53367615]
[94.04936218 174.53692627]
[93.73730469 159.54017639]
[93.42524719 144.54342651]
[79.81118011 140.24618530]
[68.22669220 131.90298462]
[59.83638382 120.35258484]
[45.51378632 124.80939484]
[31.19118690 129.26622009]
[16.86858940 133.72302246]
[6.14775705 146.13253784]
[-9.90659714 142.78742981]
[-14.77912903 127.12886810]
[-3.45739555 115.26503754]
[12.41177464 119.40042877]
[26.73437119 114.94361877]
[41.05696869 110.48680115]
[55.37956619 106.02998352]
[57.92553329 83.96619415]
[70.70905304 65.80374146]
[62.98496628 52.94533920]
[55.26087952 40.08693695]
[45.75252151 28.48559570]
[34.66120911 18.38694572]
[23.56989098 8.28829575]
[12.06808853 -1.34023023]
[0.17570871 -10.48196411]
[-11.71667099 -19.62369919]
[-23.60905075 -28.76543236]
[-32.38109589 -31.54087830]
[-35.65111923 -38.22313690]
[-47.35074234 -47.61029816]
[-59.05036545 -56.99746323]
[-70.74999237 -66.38462067]
[-86.88797760 -71.58093262]
[-86.36219025 -88.52672577]
[-69.93309021 -92.71253967]
[-61.36282730 -78.08424377]
[-49.66320419 -68.69708252]
[-37.96358109 -59.30992508]
[-26.26395607 -49.92276001]
[-14.46731663 -40.65781403]
[-2.57493687 -31.51607895]
[9.31744289 -22.37434387]
[21.20982170 -13.23260975]
[24.06173515 -13.50450897]
[27.19572830 -12.62584019]
[30.16001511 -10.48226929]
[32.46965027 -7.13015985]
[33.66854095 -2.80301929]
[44.75985718 7.29563046]
[55.85117340 17.39427948]
[52.22750092 2.83855915]
[54.34414673 -12.01134968]
[61.89031982 -24.97496414]
[73.75797272 -34.14877701]
[88.20452118 -38.18574905]
[103.10871887 -36.49311447]
[116.28209686 -29.31941223]
[125.79035950 -17.71799088]
[130.23735046 -3.39234114]
[128.97010803 11.55403233]
[122.17470551 24.92648315]
[110.84893799 34.76147079]
[96.65582275 39.61487579]
[81.67940521 38.77405167]
[68.11928558 32.36285019]
[75.84336853 45.22125244]
[83.56745148 58.07965469]
[93.00798035 53.82437515]
[103.52964783 51.75096893]
[114.61636353 52.12769699]
[125.68720245 55.09844589]
[136.12675476 60.66753769]
[147.82638550 51.28037643]
[159.52600098 41.89321518]
[162.69712830 26.16669273]
[177.03500366 18.96913338]
[191.54084778 25.82188988]
[195.08700562 41.46811295]
[184.95318604 53.90536118]
[168.91316223 53.59283829]
[157.21354675 62.97999954]
[145.51391602 72.36716461]
[147.44250488 79.61495972]
[161.93809509 75.75780487]
[176.43376160 71.90086365]
[180.29046631 86.39658356]
[165.79525757 90.25339508]
[151.29966736 94.11055756]
[153.22824097 101.35835266]
[168.04600525 103.68946075]
[182.86375427 106.02056122]
[197.68151855 108.35166931]
[212.49926758 110.68276978]
[224.17079163 100.27558136]
[239.80278015 99.85720062]
[252.01428223 109.62516785]
[255.03941345 124.96735382]
[247.44978333 138.63964844]
[232.82899475 144.18640137]
[218.08053589 138.98861694]
[210.16816711 125.50052643]
[195.35041809 123.16942596]
[180.53265381 120.83832550]
[165.71488953 118.50721741]
[150.89714050 116.17611694]
[139.79571533 131.27194214]
[124.85012054 140.85533142]
[108.42200470 144.23136902]
[108.73405457 159.22811890]
[109.04611206 174.22486877]
[109.35816956 189.22163391]
[109.67022705 204.21838379]
[109.98228455 219.21513367]
[110.29434204 234.21188354]
[110.60639191 249.20864868]
[110.91844940 264.20538330]
[111.23050690 279.20214844]
[111.54256439 294.19891357]
[111.85462189 309.19564819]
[126.50961304 312.78643799]
[139.73542786 320.04867554]
[150.63029480 330.48727417]
[158.45138550 343.39050293]
[162.66545105 357.87854004]
[162.98518372 372.96365356]
[159.38874817 387.61724854]
[152.12138367 400.84027100]
[141.67858887 411.73110962]
[128.77235413 419.54721069]
[114.28266907 423.75567627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[25 36]
[26 35]
[27 34]
[28 33]
[38 87]
[39 86]
[40 85]
[41 70]
[42 69]
[43 68]
[44 63]
[45 62]
[46 61]
[47 60]
[49 59]
[50 58]
[51 57]
[52 56]
[92 102]
[93 101]
[94 100]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
