%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCUCACGGGGGGGGGGAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACxxxxxxxxxxUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAACCCCCCCCCCUUCUUCUCAC\
) } def
/len { sequence length } bind def

/coor [
[65.66253662 404.48703003]
[51.81659698 398.47100830]
[40.10793304 388.94158936]
[31.40540886 376.60592651]
[26.35480690 362.37939453]
[25.33091545 347.31771851]
[28.40971565 332.53854370]
[35.36273575 319.13861084]
[45.67402267 308.11230469]
[58.57840347 300.27777100]
[73.11828613 296.21646118]
[73.11828613 281.21646118]
[73.11828613 266.21646118]
[73.11828613 251.21646118]
[73.11828613 236.21646118]
[73.11828613 221.21646118]
[73.11828613 206.21646118]
[73.11828613 191.21646118]
[73.11828613 176.21646118]
[73.11828613 161.21646118]
[85.08283234 94.85585785]
[74.42120361 84.30457306]
[63.75957870 73.75328064]
[53.09794998 63.20198822]
[41.57250595 72.82014465]
[29.18497467 81.29916382]
[16.04754639 88.56227112]
[2.27919626 94.54368591]
[-11.99538422 99.18923187]
[-26.64691925 102.45684052]
[-41.54272079 104.31691742]
[-56.54788208 104.75262451]
[-71.52651978 103.76000977]
[-86.34297180 101.34806061]
[-100.86306000 97.53862762]
[-114.95528412 92.36620331]
[-128.49201965 85.87763977]
[-141.35067749 78.13169098]
[-153.41479492 69.19850922]
[-164.57511902 59.15899277]
[-174.73059082 48.10407257]
[-183.78921509 36.13386154]
[-191.66897583 23.35676765]
[-198.29850769 9.88850117]
[-203.61775208 -4.14896107]
[-207.57855225 -18.62849236]
[-210.14503479 -33.41896057]
[-211.29396057 -48.38641357]
[-211.01490784 -63.39530945]
[-209.31042480 -78.30971527]
[-206.19593811 -92.99456024]
[-201.69966125 -107.31685638]
[-195.86230469 -121.14689636]
[-188.73672485 -134.35943604]
[-180.38748169 -146.83479309]
[-170.89016724 -158.46002197]
[-160.33079529 -169.12980652]
[-148.80499268 -178.74754333]
[-136.41716003 -187.22612000]
[-123.27946472 -194.48873901]
[-109.51089478 -200.46965027]
[-95.23614502 -205.11466980]
[-80.58448792 -208.38174438]
[-65.68862152 -210.24128723]
[-50.68344498 -210.67645264]
[-35.70484924 -209.68328857]
[-20.88848305 -207.27079773]
[-6.36853361 -203.46083069]
[7.72350264 -198.28790283]
[21.26000214 -191.79884338]
[34.11837387 -184.05241394]
[46.18217087 -175.11878967]
[57.34213257 -165.07887268]
[67.49720001 -154.02359009]
[76.55538940 -142.05303955]
[84.43468475 -129.27566528]
[91.06371307 -115.80715942]
[96.38245392 -101.76950073]
[100.34272766 -87.28982544]
[102.90866852 -72.49925995]
[104.05704498 -57.53176498]
[103.77745819 -42.52288055]
[102.07242584 -27.60853958]
[98.95740509 -12.92380524]
[94.46060181 1.39832783]
[88.62274170 15.22815418]
[81.49668884 28.44042587]
[73.14698029 40.91548920]
[63.64924240 52.54036331]
[74.31086731 63.09165192]
[84.97249603 73.64294434]
[95.63411713 84.19423676]
[110.42682648 86.67935181]
[123.95101929 80.19118500]
[137.47520447 73.70301819]
[150.99938965 67.21485901]
[150.97056580 51.95176697]
[157.57472229 38.19139862]
[169.50064087 28.66588402]
[184.38038635 25.26652145]
[199.25959778 28.66825485]
[211.18399048 38.19567108]
[217.78596497 51.95708847]
[217.75469971 67.22017670]
[211.09640503 80.95442963]
[199.13307190 90.43290710]
[184.24005127 93.77364349]
[169.37434387 90.31334686]
[157.48756409 80.73904419]
[143.96337891 87.22721100]
[130.43917847 93.71537781]
[116.91499329 100.20354462]
[117.22698212 107.69705200]
[117.85095978 122.68406677]
[118.16294861 130.17756653]
[132.17965698 135.51908875]
[146.19636536 140.86059570]
[158.55056763 131.62060547]
[173.94068909 130.54939270]
[187.45582581 137.98880005]
[194.78332520 151.56492615]
[193.58503723 166.94567871]
[184.24330139 179.22312927]
[169.73904419 184.47956848]
[154.70053101 181.03768921]
[143.92648315 169.99580383]
[140.85485840 154.87731934]
[126.83815002 149.53579712]
[112.82143402 144.19429016]
[100.46931458 152.70576477]
[88.11828613 161.21646118]
[88.11828613 176.21646118]
[88.11828613 191.21646118]
[88.11828613 206.21646118]
[88.11828613 221.21646118]
[88.11828613 236.21646118]
[88.11828613 251.21646118]
[88.11828613 266.21646118]
[88.11828613 281.21646118]
[88.11828613 296.21646118]
[102.65817261 300.27777100]
[115.56255341 308.11230469]
[125.87384033 319.13861084]
[132.82685852 332.53854370]
[135.90565491 347.31771851]
[134.88177490 362.37939453]
[129.83116150 376.60592651]
[121.12864685 388.94158936]
[109.41998291 398.47100830]
[95.57404327 404.48703003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 92]
[22 91]
[23 90]
[24 89]
[93 112]
[94 111]
[95 110]
[96 109]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
