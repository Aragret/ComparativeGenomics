%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUAACCUCGGGGGGGGGGUCCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGxxxxxxxxxxUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACCCCCCCCCCCUUCAACCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.69335938]
[71.19830322 389.67733765]
[59.48964310 380.14791870]
[50.78712082 367.81225586]
[45.73651886 353.58572388]
[44.71262741 338.52404785]
[47.79142761 323.74490356]
[54.74444962 310.34497070]
[65.05573273 299.31863403]
[77.96011353 291.48413086]
[92.50000000 287.42282104]
[92.50000000 272.42282104]
[92.50000000 257.42282104]
[92.50000000 242.42282104]
[92.50000000 227.42282104]
[92.50000000 212.42282104]
[92.50000000 197.42282104]
[92.50000000 182.42282104]
[92.50000000 167.42282104]
[92.50000000 152.42282104]
[92.50000000 137.42282104]
[80.68462372 132.91859436]
[70.98933411 124.80117798]
[64.47828674 113.96155548]
[61.86614990 101.58950043]
[63.43962860 89.04297638]
[69.02602386 77.69910431]
[58.81254196 66.71343994]
[48.59906387 55.72777557]
[30.89812851 50.76221466]
[27.57962990 33.55792999]
[17.13981628 22.78712082]
[6.70000458 12.01631165]
[-4.80179882 2.38778520]
[-17.24123955 -5.99435806]
[-11.37782955 7.81217766]
[-10.79675293 22.80091858]
[-15.57368183 37.01995468]
[-25.08654022 48.61760712]
[-38.09651184 56.08356857]
[-52.90937424 58.44559097]
[-67.59611511 55.39606857]
[-80.24415588 47.33213425]
[-89.20640564 35.30391312]
[-93.31575012 20.87778091]
[-92.03704071 5.93238258]
[-85.53681183 -7.58601379]
[-74.66155243 -17.91697311]
[-60.82749557 -23.71514320]
[-45.83617783 -24.22545815]
[-31.64140129 -19.38232803]
[-40.90634918 -31.17896843]
[-50.17129898 -42.97560883]
[-59.43624878 -54.77224731]
[-74.62860870 -52.51663589]
[-88.90747833 -58.17432404]
[-98.43191528 -70.22341156]
[-100.63990021 -85.42276764]
[-94.93748474 -99.68383789]
[-82.85859680 -109.17046356]
[-67.65239716 -111.33078766]
[-53.40927124 -105.58370209]
[-43.96055603 -93.47513580]
[-41.84790421 -78.26223755]
[-47.63961029 -64.03720093]
[-38.37466049 -52.24055862]
[-29.10971069 -40.44391632]
[-19.84476089 -28.64727783]
[-8.85909557 -18.43379784]
[3.58034420 -10.05165482]
[-0.91465998 -24.36231422]
[2.21341157 -39.03252792]
[12.15486717 -50.26495743]
[26.33639145 -55.15211868]
[41.08713913 -52.42899323]
[52.58892441 -42.80044556]
[57.86454773 -28.75879860]
[55.54842758 -13.93869209]
[46.24008179 -2.17626286]
[32.34895325 3.48381925]
[17.47081375 1.57649899]
[27.91062546 12.34730721]
[38.35043716 23.11811638]
[50.47651672 23.63338470]
[59.26371765 32.57788467]
[59.58472824 45.51429749]
[69.79821014 56.49996185]
[80.01168823 67.48562622]
[101.98429108 61.88465118]
[123.25650787 69.73695374]
[134.55551147 59.87123108]
[145.85452271 50.00550842]
[157.15351868 40.13978577]
[159.66770935 24.29496193]
[173.69375610 16.50719833]
[188.47210693 22.75060272]
[192.66606140 38.23576736]
[183.05836487 51.08380127]
[167.01924133 51.43878937]
[155.72024536 61.30451584]
[144.42123413 71.17023468]
[133.12223816 81.03595734]
[136.32339478 88.28130341]
[137.96006775 96.03138733]
[152.89437866 97.43369293]
[167.82868958 98.83599854]
[182.76300049 100.23829651]
[189.23396301 86.53054810]
[200.00517273 75.86487579]
[213.77598572 69.52922058]
[228.88349915 68.28863525]
[243.50338745 72.29293060]
[255.87025452 81.05857849]
[264.49072266 93.52706909]
[268.32385254 108.19277954]
[266.90673828 123.28475189]
[260.41052246 136.98056030]
[249.61967468 147.62635803]
[235.83720398 153.93663025]
[220.72743225 155.14936829]
[206.11494446 151.11813354]
[193.76425171 142.32971191]
[185.16677856 129.84535217]
[181.36068726 115.17260742]
[166.42639160 113.77030182]
[151.49208069 112.36800385]
[136.55776978 110.96569824]
[130.33911133 123.15718842]
[120.21945953 132.37113953]
[107.50000000 137.42282104]
[107.50000000 152.42282104]
[107.50000000 167.42282104]
[107.50000000 182.42282104]
[107.50000000 197.42282104]
[107.50000000 212.42282104]
[107.50000000 227.42282104]
[107.50000000 242.42282104]
[107.50000000 257.42282104]
[107.50000000 272.42282104]
[107.50000000 287.42282104]
[122.03988647 291.48413086]
[134.94427490 299.31863403]
[145.25555420 310.34497070]
[152.20857239 323.74490356]
[155.28736877 338.52404785]
[154.26348877 353.58572388]
[149.21287537 367.81225586]
[140.51036072 380.14791870]
[128.80169678 389.67733765]
[114.95575714 395.69335938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 88]
[28 87]
[29 86]
[31 83]
[32 82]
[33 81]
[34 70]
[35 69]
[51 68]
[52 67]
[53 66]
[54 65]
[90 102]
[91 101]
[92 100]
[93 99]
[104 127]
[105 126]
[106 125]
[107 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
