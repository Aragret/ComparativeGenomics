%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGUCAACCUCGGGGGGGGGGAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCxxxxxxxxxxUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACCCCCCCCCCCAGGUCAACCUC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 381.75204468]
[70.87159729 376.59704590]
[58.28185654 368.31484985]
[47.94191742 357.35205078]
[40.40940475 344.29992676]
[36.09054184 329.86233521]
[35.21823120 314.81787109]
[37.83952332 299.97787476]
[43.81304932 286.14263916]
[52.81666565 274.05828857]
[64.36482239 264.37652588]
[77.83473969 257.61944580]
[92.50000000 254.15147400]
[92.50000000 239.15147400]
[92.50000000 224.15147400]
[92.50000000 209.15147400]
[92.50000000 194.15147400]
[92.50000000 179.15147400]
[92.50000000 164.15147400]
[92.50000000 149.15147400]
[92.50000000 134.15147400]
[92.50000000 119.15146637]
[82.96039581 113.14318085]
[77.68084717 102.61174774]
[78.65113831 90.36262512]
[86.11156464 79.96844482]
[98.33699036 74.72753143]
[91.05746460 61.61233139]
[83.77793121 48.49713516]
[76.49840546 35.38193512]
[69.21887207 22.26673508]
[61.80680847 9.22597980]
[54.26296997 -3.73899126]
[40.61012650 2.50334334]
[26.41116714 7.37738943]
[11.80283546 10.83620548]
[-3.07417989 12.84648132]
[-18.07660103 13.38885593]
[-33.05994034 12.45810604]
[-47.87990189 10.06319427]
[-62.39374924 6.22718716]
[-76.46170807 0.98702788]
[-89.94829559 -5.60681677]
[-102.72362518 -13.49084282]
[-114.66464996 -22.58912086]
[-125.65637970 -32.81402969]
[-135.59294128 -44.06708908]
[-144.37866211 -56.23992920]
[-151.92890930 -69.21530914]
[-158.17095947 -82.86827850]
[-163.04472351 -97.06733704]
[-166.50325012 -111.67573547]
[-168.51322937 -126.55279541]
[-169.05531311 -141.55522156]
[-168.12425232 -156.53854370]
[-165.72904968 -171.35845947]
[-161.89274597 -185.87222290]
[-156.65231323 -199.94007874]
[-150.05819702 -213.42654419]
[-142.17391968 -226.20170593]
[-133.07539368 -238.14254761]
[-122.85027313 -249.13407898]
[-111.59700775 -259.07043457]
[-99.42399597 -267.85589600]
[-86.44846344 -275.40588379]
[-72.79537201 -281.64767456]
[-58.59621811 -286.52114868]
[-43.98774719 -289.97937012]
[-29.11064911 -291.98904419]
[-14.10820770 -292.53082275]
[0.87509590 -291.59948730]
[15.69495964 -289.20397949]
[30.20865631 -285.36740112]
[44.27640533 -280.12667847]
[57.76272964 -273.53228760]
[70.53774261 -265.64773560]
[82.47840118 -256.54898071]
[93.46971893 -246.32363892]
[103.40583801 -235.07019043]
[112.19107056 -222.89698792]
[119.74079132 -209.92131042]
[125.98230743 -196.26809692]
[130.85549927 -182.06884766]
[134.31344604 -167.46029663]
[136.32283020 -152.58316040]
[136.86430359 -137.58071899]
[135.93264771 -122.59742737]
[133.53684998 -107.77761078]
[129.69996643 -93.26399231]
[124.45896912 -79.19635010]
[117.86431885 -65.71015930]
[109.97952271 -52.93530273]
[100.88053131 -40.99482346]
[90.65496063 -30.00370789]
[79.40130615 -20.06781387]
[67.22794342 -11.28283024]
[74.77178192 1.68214083]
[80.89002228 5.90668154]
[82.33406830 14.98720551]
[89.61360168 28.10240555]
[96.89312744 41.21760559]
[104.17266083 54.33280182]
[111.45218658 67.44800568]
[124.18185425 75.38246155]
[139.16259766 76.14220428]
[154.14335632 76.90193939]
[161.50640869 63.57727051]
[173.87419128 54.80658340]
[188.76263428 52.28579330]
[203.20976257 56.46207809]
[214.36494446 66.45564270]
[220.05136108 80.24441528]
[235.03210449 81.00415039]
[250.01284790 81.76388550]
[261.57034302 70.98429108]
[277.36193848 71.61784363]
[288.01873779 83.28866577]
[287.21826172 99.07266998]
[275.43542480 109.60548401]
[259.66076660 108.63817596]
[249.25311279 96.74463654]
[234.27236938 95.98490143]
[219.29162598 95.22515869]
[212.23939514 108.36790466]
[200.13041687 117.18164062]
[185.33489990 119.87490845]
[170.77786255 115.86081696]
[159.36085510 105.88389587]
[153.38360596 91.88268280]
[138.40286255 91.12294769]
[123.42211914 90.36321259]
[121.10359955 109.01227570]
[107.50000000 119.15146637]
[107.50000000 134.15147400]
[107.50000000 149.15147400]
[107.50000000 164.15147400]
[107.50000000 179.15147400]
[107.50000000 194.15147400]
[107.50000000 209.15147400]
[107.50000000 224.15147400]
[107.50000000 239.15147400]
[107.50000000 254.15147400]
[122.16526031 257.61944580]
[135.63517761 264.37652588]
[147.18333435 274.05828857]
[156.18695068 286.14263916]
[162.16047668 299.97787476]
[164.78176880 314.81787109]
[163.90945435 329.86233521]
[159.59059143 344.29992676]
[152.05809021 357.35205078]
[141.71813965 368.31484985]
[129.12840271 376.59704590]
[114.96779633 381.75204468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 97]
[33 96]
[104 131]
[105 130]
[106 129]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
