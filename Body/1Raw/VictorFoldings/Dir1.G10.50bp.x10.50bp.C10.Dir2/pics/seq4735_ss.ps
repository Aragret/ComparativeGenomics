%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGCCUAGGGGGGGGGGGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCxxxxxxxxxxACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUCCCCCCCCCCACUAGGCCUA\
) } def
/len { sequence length } bind def

/coor [
[167.37866211 500.32312012]
[153.53273010 494.30709839]
[141.82406616 484.77767944]
[133.12153625 472.44201660]
[128.07093811 458.21548462]
[127.04704285 443.15380859]
[130.12583923 428.37463379]
[137.07887268 414.97470093]
[147.39015198 403.94839478]
[160.29452515 396.11386108]
[174.83441162 392.05255127]
[174.83441162 377.05255127]
[174.83441162 362.05255127]
[174.83441162 347.05255127]
[174.83441162 332.05255127]
[174.83441162 317.05255127]
[174.83441162 302.05255127]
[174.83441162 287.05255127]
[174.83441162 272.05255127]
[174.83441162 257.05255127]
[170.97726440 242.55696106]
[163.52235413 229.54064941]
[156.06744385 216.52435303]
[148.61253357 203.50804138]
[141.15762329 190.49172974]
[129.53480530 186.99635315]
[123.23003387 176.15805054]
[126.11527252 163.54341125]
[118.93276215 150.37483215]
[111.75025177 137.20623779]
[104.56774139 124.03765869]
[97.38523865 110.86907959]
[90.06613159 97.77592468]
[82.61122131 84.75961304]
[75.15631104 71.74330902]
[67.70140076 58.72699738]
[60.11149216 45.78894043]
[52.38740540 32.93053818]
[42.28875732 21.83922386]
[30.20876884 12.94687366]
[18.12878036 4.05452347]
[6.04879141 -4.83782578]
[-6.03119707 -13.73017597]
[-18.11118507 -22.62252617]
[-30.54871941 -13.98618126]
[-45.11725235 -9.85863876]
[-60.23649597 -10.68762302]
[-74.26642609 -16.38321114]
[-85.68518829 -26.32759094]
[-93.25415039 -39.44206619]
[-96.15229034 -54.30408096]
[-94.06524658 -69.30151367]
[-87.21940613 -82.80755615]
[-76.35734558 -93.35717010]
[-62.65730286 -99.80601501]
[-47.60536194 -101.45456696]
[-32.83423615 -98.12400818]
[-19.94619560 -90.17560577]
[-10.33923149 -78.47154999]
[-5.05543900 -64.28140259]
[-4.66796350 -49.14440536]
[-9.21883583 -34.70251465]
[2.86115265 -25.81016350]
[14.94114113 -16.91781425]
[27.02112961 -8.02546501]
[39.10111618 0.86688501]
[51.18110657 9.75923443]
[45.52568436 -4.13379288]
[44.13347626 -19.06904411]
[47.12365723 -33.76798248]
[54.24025726 -46.97230148]
[64.87405396 -57.55163956]
[78.11473846 -64.60034180]
[92.82883453 -67.51501465]
[107.75674438 -66.04614258]
[121.62055206 -60.31945801]
[133.23344421 -50.82520676]
[141.60128784 -38.37614441]
[146.00776672 -24.03797913]
[146.07563782 -9.03813362]
[141.79911804 5.33932590]
[133.54428101 17.86361122]
[122.01779938 27.46257591]
[108.20639038 33.31449890]
[93.29238892 34.91842270]
[78.55251312 32.13703918]
[65.24581146 25.20645332]
[72.96989441 38.06485748]
[79.15026855 42.20594025]
[80.71771240 51.27208710]
[88.17262268 64.28839874]
[95.62753296 77.30470276]
[103.08244324 90.32101440]
[109.54433441 95.23303223]
[110.55381775 103.68656921]
[117.73632812 116.85515594]
[124.91883850 130.02374268]
[132.10134888 143.19232178]
[139.28385925 156.36090088]
[155.20910645 165.54600525]
[154.17391968 183.03681946]
[161.62882996 196.05313110]
[169.08374023 209.06944275]
[176.53865051 222.08573914]
[183.99356079 235.10205078]
[184.40545654 220.10771179]
[188.20054626 205.59573364]
[195.18185425 192.31939697]
[204.98703003 180.96780396]
[217.10710144 172.13017273]
[230.91297913 166.26522827]
[245.68806458 163.67738342]
[260.66543579 164.50097656]
[275.06768799 168.69325256]
[288.14724731 176.03660583]
[299.22525024 186.14988708]
[307.72662354 198.50813293]
[313.21014404 212.46990967]
[315.39117432 227.31050110]
[314.15649414 242.25959778]
[309.57019043 256.54125977]
[301.87033081 269.41418457]
[291.45660400 280.21020508]
[278.86947632 288.36892700]
[264.76235962 293.46685791]
[249.86746216 295.23941040]
[234.95791626 293.59460449]
[220.80761719 288.61773682]
[208.15104675 280.56719971]
[197.64515686 269.86083984]
[189.83441162 257.05255127]
[189.83441162 272.05255127]
[189.83441162 287.05255127]
[189.83441162 302.05255127]
[189.83441162 317.05255127]
[189.83441162 332.05255127]
[189.83441162 347.05255127]
[189.83441162 362.05255127]
[189.83441162 377.05255127]
[189.83441162 392.05255127]
[204.37429810 396.11386108]
[217.27868652 403.94839478]
[227.58996582 414.97470093]
[234.54299927 428.37463379]
[237.62179565 443.15380859]
[236.59790039 458.21548462]
[231.54730225 472.44201660]
[222.84477234 484.77767944]
[211.13610840 494.30709839]
[197.29017639 500.32312012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 105]
[22 104]
[23 103]
[24 102]
[25 101]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[33 93]
[34 92]
[35 91]
[36 90]
[37 88]
[38 87]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
