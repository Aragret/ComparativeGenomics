%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUUAUAGGGGGGGGGGACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUAxxxxxxxxxxAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCCCCCCCCCCCAUAAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[83.71571350 385.34024048]
[71.15749359 376.98910522]
[61.07126999 365.77664185]
[54.09107590 352.40774536]
[50.65569305 337.72274780]
[50.98106766 322.64477539]
[55.04675293 308.12167358]
[62.59717178 295.06631470]
[73.15769958 284.29943848]
[86.06449890 276.49780273]
[100.50622559 272.15185547]
[99.88224792 257.16482544]
[99.25827026 242.17781067]
[98.63429260 227.19079590]
[98.01031494 212.20378113]
[97.38633728 197.21676636]
[96.76235962 182.22975159]
[96.13838196 167.24273682]
[95.51440430 152.25570679]
[94.89042664 137.26869202]
[82.88521576 127.72370911]
[77.28064728 115.57359314]
[77.87208557 104.12031555]
[82.99909210 95.97053528]
[68.29113770 93.02505493]
[53.58317184 90.07957458]
[41.32728958 105.64926147]
[22.97271347 112.90568542]
[3.53711700 109.94929504]
[-11.70853996 97.66104126]
[-18.66950035 79.44190979]
[-33.60380936 78.03960419]
[-48.53811646 76.63729858]
[-63.47242355 75.23499298]
[-71.76753235 88.09772491]
[-85.09580231 95.62207031]
[-100.39448547 96.07901001]
[-114.14806366 89.36352539]
[-123.19606781 77.01879883]
[-125.45932007 61.88154984]
[-120.41775513 47.43021393]
[-109.22987366 36.98559570]
[-94.46658325 32.94779587]
[-79.52037811 36.24467087]
[-67.82577515 46.11862183]
[-62.07011795 60.30068970]
[-47.13581085 61.70299149]
[-32.20150375 63.10529709]
[-17.26719666 64.50759888]
[-12.83810520 54.87985229]
[-5.87067366 46.86648941]
[3.08380270 41.11966324]
[13.31170177 38.11146927]
[23.99394035 38.09519196]
[34.27157593 41.08400726]
[43.31485748 46.84898376]
[50.39023209 54.93656921]
[54.91983032 64.70425415]
[56.52865601 75.37161255]
[71.23661804 78.31709290]
[85.94458008 81.26257324]
[98.55570984 73.14103699]
[101.95868683 58.53214264]
[105.36166382 43.92324829]
[108.76464081 29.31435585]
[112.16761780 14.70546436]
[98.49278259 8.41389656]
[86.36456299 -0.50188541]
[76.27960205 -11.67678547]
[68.65086365 -24.65319824]
[63.79074860 -38.89974594]
[61.89827347 -53.83304596]
[63.05093384 -68.84158325]
[67.20153046 -83.31077576]
[74.18009186 -96.64810944]
[83.70085907 -108.30743408]
[95.37396240 -117.81130981]
[108.72138977 -124.77055359]
[123.19657135 -128.90019226]
[138.20677185 -130.03112793]
[153.13731384 -128.11701965]
[167.37680054 -123.23628998]
[180.34216309 -115.58876801]
[191.50244141 -105.48764038]
[200.40065002 -93.34651947]
[206.67240906 -79.66259003]
[210.06089783 -64.99620056]
[210.42735291 -49.94792175]
[207.75677490 -35.13397980]
[202.15850830 -21.16099548]
[193.86181641 -8.60114956]
[183.20642090 2.03123832]
[170.62869263 10.30077839]
[156.64363098 15.86883736]
[141.82395935 18.50740814]
[126.77651215 18.10844231]
[123.37353516 32.71733475]
[119.97055817 47.32622528]
[116.56757355 61.93511963]
[113.16459656 76.54401398]
[117.73546600 82.49020386]
[121.33335876 67.92808533]
[134.96165466 61.66154099]
[148.35821533 68.40928650]
[151.43540955 83.09025574]
[141.87609863 94.64965057]
[126.87719727 94.38258362]
[131.44807434 100.32877350]
[146.44076538 100.79681396]
[161.43345642 101.26485443]
[176.42616272 101.73289490]
[189.05619812 91.84040833]
[204.63125610 95.68714905]
[211.20346069 110.32222748]
[203.73118591 124.51887512]
[187.94651794 127.38662720]
[175.95811462 116.72559357]
[160.96542358 116.25755310]
[145.97271729 115.78951263]
[130.98002625 115.32146454]
[125.70437622 120.65228271]
[138.63731384 128.25090027]
[152.19477844 134.66925049]
[154.79463196 149.44223022]
[144.24295044 160.10346985]
[129.44390869 157.65634155]
[122.88584137 144.16709900]
[115.15309143 131.31390381]
[109.87744141 136.64471436]
[110.50141907 151.63172913]
[111.12539673 166.61875916]
[111.74937439 181.60577393]
[112.37335205 196.59278870]
[112.99732971 211.57980347]
[113.62130737 226.56681824]
[114.24528503 241.55383301]
[114.86926270 256.54086304]
[115.49324036 271.52786255]
[130.24624634 274.65829468]
[143.75688171 281.36007690]
[155.17585754 291.21185303]
[163.78536987 303.59439087]
[169.04421997 317.72927856]
[170.62182617 332.72802734]
[168.41902161 347.64773560]
[162.57427979 361.55062866]
[153.45500183 373.56268311]
[141.63442993 382.92883301]
[127.85561371 389.06033325]
[112.98471069 391.57171631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 61]
[25 60]
[26 59]
[31 49]
[32 48]
[33 47]
[34 46]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
