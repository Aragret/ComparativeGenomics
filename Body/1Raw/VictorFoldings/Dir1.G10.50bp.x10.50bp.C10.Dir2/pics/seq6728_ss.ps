%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGUCCUAGGGGGGGGGGGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUxxxxxxxxxxAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGCCCCCCCCCCUCCCACUCCUA\
) } def
/len { sequence length } bind def

/coor [
[75.25878906 444.57220459]
[60.69893265 440.66400146]
[47.49778748 433.38436890]
[36.42285538 423.15649414]
[28.11801720 410.57504272]
[23.06610489 396.37145996]
[21.56082916 381.37155151]
[23.68970490 366.44735718]
[29.32896423 352.46658325]
[38.15074539 340.24203491]
[49.64216614 330.48443604]
[63.13512421 323.76107788]
[77.84516144 320.46286011]
[78.15313721 305.46600342]
[78.46111298 290.46917725]
[78.76908875 275.47235107]
[79.07707214 260.47549438]
[79.38504791 245.47865295]
[79.69302368 230.48182678]
[80.00099945 215.48498535]
[80.30898285 200.48814392]
[80.61695862 185.49130249]
[80.92493439 170.49447632]
[81.23291016 155.49763489]
[64.32023621 108.65901947]
[89.32682037 89.68075562]
[82.50324249 76.32265472]
[75.67966461 62.96455765]
[63.43671417 54.29795074]
[48.57011414 52.30189133]
[31.74348450 59.71101761]
[18.25263214 48.52882385]
[3.34818435 46.83842850]
[-3.66865873 60.29682159]
[-15.07598305 70.30868530]
[-29.33104134 75.51998901]
[-44.50595474 75.22595978]
[-58.54843903 69.46635437]
[-69.55936432 59.02011871]
[-76.04959869 45.30001068]
[-77.14138031 30.16156769]
[-72.68706512 15.65214062]
[-63.28905487 3.73400831]
[-50.21836090 -3.98099899]
[-35.24267960 -6.44948959]
[-20.38735390 -3.33762074]
[-7.66144323 4.93375301]
[1.21397817 17.24599648]
[5.03858185 31.93397903]
[19.94302940 33.62437820]
[29.63552666 26.32248116]
[42.10188293 27.64961433]
[50.56616974 37.43529510]
[65.43276978 39.43135071]
[64.92414093 27.49226761]
[69.55511475 17.16775894]
[77.83283997 10.41661835]
[74.17414093 -4.13033628]
[70.51543427 -18.67728996]
[55.42857361 -18.89896393]
[40.91342545 -23.01878357]
[27.95965767 -30.75585556]
[17.45047569 -41.58264923]
[10.10241318 -54.76098251]
[6.41647482 -69.39232635]
[6.64397335 -84.47909546]
[10.76939774 -98.99265289]
[18.51146889 -111.94343567]
[29.34232140 -122.44843292]
[42.52348709 -129.79141235]
[57.15625763 -133.47169495]
[72.24293518 -133.23837280]
[86.75489807 -129.10734558]
[99.70269012 -121.36027527]
[110.20350647 -110.52536774]
[117.54138947 -97.34136200]
[121.21603394 -82.70717621]
[120.97688293 -67.62059021]
[116.84024811 -53.11022186]
[109.08818054 -40.16542435]
[98.24922180 -29.66878891]
[85.06238556 -22.33599663]
[88.72109222 -7.78904200]
[92.37979889 6.75791216]
[94.47770691 7.04929686]
[96.53920746 7.53544044]
[105.20581818 -4.70751286]
[113.87242126 -16.95046616]
[122.53903198 -29.19342041]
[123.51255035 -45.56364441]
[138.29548645 -52.66271973]
[151.68041992 -43.18772125]
[149.89808655 -26.88571739]
[134.78198242 -20.52681351]
[126.11537933 -8.28385925]
[117.44876862 3.95909429]
[108.78215790 16.20204735]
[113.46521759 25.33100319]
[113.72075653 35.96138382]
[109.17509460 45.98582077]
[100.43782043 53.27793503]
[89.03776550 56.14097977]
[95.86134338 69.49908447]
[102.68491364 82.85717773]
[116.11236572 89.54325867]
[130.88447571 86.93852997]
[137.56542969 72.93337250]
[151.21849060 65.55952454]
[166.59378052 67.65238190]
[177.77919006 78.40720367]
[180.47369385 93.68853760]
[173.64122009 107.62040710]
[159.90896606 114.84571075]
[144.55728149 112.58618164]
[133.48921204 101.71064758]
[118.71708679 104.31536865]
[117.79542542 111.75852203]
[132.68170166 113.60208130]
[130.83792114 128.48832703]
[115.95210266 126.64483643]
[115.03044128 134.08798218]
[128.72106934 140.21716309]
[144.16252136 135.86505127]
[157.10815430 145.34082031]
[157.62716675 161.37547302]
[145.32144165 171.66859436]
[129.63084412 168.32418823]
[122.59188843 153.90779114]
[108.90126801 147.77861023]
[96.22975159 155.80560303]
[95.92177582 170.80244446]
[95.61379242 185.79928589]
[95.30581665 200.79612732]
[94.99784088 215.79296875]
[94.68986511 230.78979492]
[94.38188171 245.78663635]
[94.07390594 260.78347778]
[93.76593018 275.78030396]
[93.45795441 290.77716064]
[93.14997101 305.77398682]
[92.84199524 320.77081299]
[107.40422058 324.67019653]
[120.60977936 331.94183350]
[131.69090271 342.16299438]
[140.00337219 354.73941040]
[145.06388855 368.93991089]
[146.57826233 383.93893433]
[144.45843506 398.86441040]
[138.82765198 412.84860229]
[130.01329041 425.07849121]
[118.52778625 434.84304810]
[105.03890228 441.57458496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 130]
[26 104]
[27 103]
[28 102]
[29 54]
[30 53]
[32 50]
[33 49]
[57 84]
[58 83]
[59 82]
[86 97]
[87 96]
[88 95]
[89 94]
[105 116]
[106 115]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
