%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUCCACCUUAGGGGGGGGGGCUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUxxxxxxxxxxAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCCCCCCCCCCCUACUCCACCUCA\
) } def
/len { sequence length } bind def

/coor [
[52.68808365 389.93612671]
[39.24542618 383.16265869]
[27.44164276 373.82159424]
[17.76009560 362.29544067]
[10.59723377 349.05615234]
[6.24637222 334.64593506]
[4.88567781 319.65481567]
[6.57086897 304.69671631]
[11.23293781 290.38412476]
[18.68097687 277.30316162]
[28.60999298 265.98947144]
[40.61339569 256.90634155]
[54.19966125 250.42573547]
[68.81243134 246.81301880]
[68.21228790 231.82502747]
[67.61214447 216.83703613]
[67.01200104 201.84904480]
[66.41185760 186.86105347]
[65.81171417 171.87306213]
[65.21157074 156.88508606]
[64.61142731 141.89709473]
[52.40599060 133.17771912]
[38.03296280 137.46911621]
[23.65993500 141.76051331]
[9.28690815 146.05191040]
[-5.08611917 150.34330750]
[-9.96242332 154.94110107]
[-15.58560753 156.15940857]
[-20.12063026 154.50645447]
[-34.65384674 158.21936035]
[-44.04082108 171.22952271]
[-60.07154846 171.85823059]
[-70.44863129 159.62321472]
[-67.21165466 143.91011047]
[-52.84375000 136.77267456]
[-38.36674881 143.68614197]
[-23.83353233 139.97323608]
[-9.37751675 135.97029114]
[4.99551058 131.67889404]
[19.36853790 127.38748932]
[33.74156570 123.09609222]
[48.11459351 118.80469513]
[49.16169357 111.37815094]
[34.38838577 113.97612000]
[27.35253334 100.72859955]
[37.77761078 89.94352722]
[51.25589371 96.52506256]
[52.30299377 89.09851074]
[39.67681885 81.00038147]
[27.05064774 72.90225220]
[14.42447281 64.80412292]
[-1.97313786 64.57962799]
[-9.74028015 50.13651276]
[-0.88678300 36.33261490]
[15.47963428 37.36819839]
[22.52260399 52.17794418]
[35.14877701 60.27607727]
[47.77495193 68.37420654]
[60.40112686 76.47234344]
[68.25473785 69.60440826]
[77.08676147 64.99174500]
[86.30354309 62.70589447]
[95.33267975 62.67150879]
[103.65753937 64.68020630]
[110.84654236 68.41216278]
[116.57551575 73.46374512]
[127.34009552 63.01750946]
[138.10467529 52.57127380]
[148.86926270 42.12504196]
[159.63383484 31.67880821]
[170.39842224 21.23257446]
[161.21264648 9.35395050]
[153.41465759 -3.47847962]
[147.10249329 -17.10333443]
[142.35556030 -31.34926605]
[139.23353577 -46.03711700]
[137.77569580 -60.98217392]
[138.00036621 -75.99648285]
[139.90472412 -90.89122772]
[143.46482849 -105.47908783]
[148.63589478 -119.57661438]
[155.35289001 -133.00650024]
[163.53135681 -145.59985352]
[173.06843567 -157.19831848]
[183.84417725 -167.65600586]
[195.72308350 -176.84141541]
[208.55574036 -184.63903809]
[222.18078613 -190.95079041]
[236.42686462 -195.69729614]
[251.11480713 -198.81887817]
[266.05990601 -200.27627563]
[281.07421875 -200.05116272]
[295.96890259 -198.14634705]
[310.55664062 -194.58581543]
[324.65402222 -189.41432190]
[338.08370972 -182.69691467]
[350.67681885 -174.51808167]
[362.27499390 -164.98065186]
[372.73236084 -154.20460510]
[381.91741943 -142.32542419]
[389.71466064 -129.49253845]
[396.02600098 -115.86730194]
[400.77209473 -101.62108612]
[403.89321899 -86.93304443]
[405.35015869 -71.98789978]
[405.12460327 -56.97360229]
[403.21936035 -42.07897186]
[399.65838623 -27.49132347]
[394.48648071 -13.39411354]
[387.76864624 0.03537259]
[379.58944702 12.62824345]
[370.05166626 24.22613144]
[359.27529907 34.68317795]
[347.39584351 43.86788177]
[334.56271362 51.66472626]
[320.93731689 57.97566223]
[306.69094849 62.72132492]
[292.00280762 65.84202576]
[277.05761719 67.29853058]
[262.04333496 67.07250977]
[247.14877319 65.16681671]
[232.56121826 61.60540390]
[218.46417236 56.43307114]
[205.03488159 49.71486664]
[192.44226074 41.53527069]
[180.84465027 31.99715614]
[170.08007812 42.44338989]
[159.31549072 52.88962173]
[148.55090332 63.33585739]
[137.78633118 73.78208923]
[127.02175140 84.22832489]
[134.32423401 111.53981018]
[115.78477478 137.98765564]
[79.59941101 141.29695129]
[80.19955444 156.28492737]
[80.79970551 171.27291870]
[81.39984894 186.26091003]
[81.99999237 201.24890137]
[82.60013580 216.23689270]
[83.20027924 231.22488403]
[83.80042267 246.21287537]
[98.65526581 248.64566040]
[112.71619415 254.01924133]
[125.40740967 262.11355591]
[136.20922852 272.59713745]
[144.67930603 285.04071045]
[150.47082520 298.93472290]
[153.34658813 313.71020508]
[153.18887329 328.76211548]
[150.00410461 343.47409058]
[143.92272949 357.24368286]
[135.19375610 369.50701904]
[124.17462921 379.76196289]
[111.31658173 387.58856201]
[97.14614105 392.66632080]
[82.24358368 394.78729248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[29 37]
[30 36]
[48 59]
[49 58]
[50 57]
[51 56]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
[71 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
