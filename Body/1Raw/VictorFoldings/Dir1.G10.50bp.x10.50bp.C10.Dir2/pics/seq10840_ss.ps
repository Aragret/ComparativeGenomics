%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCACUACGGGGGGGGGGUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACxxxxxxxxxxCCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGCCCCCCCCCCACCCCAAUAC\
) } def
/len { sequence length } bind def

/coor [
[104.12577820 376.77676392]
[90.27984619 370.76074219]
[78.57118225 361.23132324]
[69.86865997 348.89562988]
[64.81805420 334.66912842]
[63.79416275 319.60745239]
[66.87296295 304.82827759]
[73.82598114 291.42834473]
[84.13726807 280.40200806]
[97.04164886 272.56750488]
[111.58153534 268.50619507]
[111.58153534 253.50619507]
[111.58153534 238.50619507]
[111.58153534 223.50619507]
[111.58153534 208.50619507]
[111.58153534 193.50619507]
[111.58153534 178.50619507]
[111.58153534 163.50619507]
[111.58153534 148.50619507]
[111.58153534 133.50619507]
[111.58153534 118.50619507]
[93.97447968 118.74532318]
[83.76652527 106.66503906]
[68.78681183 105.88519287]
[53.80709839 105.10535431]
[45.88897705 120.28005219]
[32.19798660 130.46054077]
[15.49437904 133.65409851]
[-0.88012230 129.27064514]
[-13.67086506 118.23109436]
[-20.35716248 102.77438354]
[-35.35634995 102.61834717]
[-50.35553741 102.46231079]
[-59.03398514 105.51786804]
[-65.66429901 102.14376068]
[-80.65699768 101.67572021]
[-94.84435272 109.90074158]
[-108.92430115 101.49317932]
[-108.41259766 85.10202026]
[-93.83563995 77.58907318]
[-80.18894958 86.68302155]
[-65.19625854 87.15106201]
[-50.19950104 87.46311951]
[-35.20031357 87.61915588]
[-20.20112610 87.77519226]
[-15.37997341 75.63900757]
[-6.68533134 65.85270691]
[4.85523462 59.60580063]
[17.86652756 57.66755295]
[30.78958130 60.29230881]
[42.06845093 67.18636322]
[50.33753967 77.54064941]
[54.58694458 90.12563324]
[69.56665802 90.90547943]
[84.54637146 91.68532562]
[94.71825409 81.77375031]
[110.01506042 82.22325897]
[121.08290100 94.33232880]
[131.29638672 83.34666443]
[141.50985718 72.36100006]
[145.09323120 63.88684082]
[152.05192566 61.25584030]
[162.49172974 50.48503113]
[172.93154907 39.71422195]
[176.97012329 21.77906990]
[193.97862244 17.57061195]
[204.19210815 6.58494806]
[195.39895630 -5.62457275]
[189.15885925 -19.31064987]
[185.70994568 -33.94649887]
[185.18295288 -48.96918106]
[187.59625244 -63.80125427]
[192.85525513 -77.87297058]
[200.75607300 -90.64414978]
[210.99345398 -101.62494659]
[223.17257690 -110.39459229]
[236.82426453 -116.61756897]
[251.42303467 -120.05640411]
[266.40737915 -120.58074951]
[281.20135498 -118.17232513]
[295.23663330 -112.92555237]
[307.97445679 -105.04383087]
[318.18795776 -116.02949524]
[328.40142822 -127.01515961]
[338.61489868 -138.00082397]
[348.82839966 -148.98649597]
[359.04187012 -159.97215271]
[369.25534058 -170.95782471]
[364.66613770 -185.61506653]
[368.03604126 -200.59970093]
[378.45858765 -211.88093567]
[393.13015747 -216.42416382]
[408.10415649 -213.00730896]
[419.35266113 -202.54945374]
[423.84988403 -187.86373901]
[420.38610840 -172.90051270]
[409.89303589 -161.68484497]
[395.19329834 -157.23367310]
[380.24102783 -160.74433899]
[370.02752686 -149.75868225]
[359.81405640 -138.77301025]
[349.60058594 -127.78734589]
[339.38708496 -116.80168152]
[329.17361450 -105.81601715]
[318.96014404 -94.83035278]
[327.74771118 -82.69969177]
[334.00167847 -69.08332825]
[337.48004150 -54.50379181]
[338.04727173 -39.52099991]
[335.67965698 -24.71072960]
[330.46640015 -10.64248371]
[322.60607910 2.14239025]
[312.39920044 13.15154171]
[300.23666382 21.96057510]
[286.58486938 28.22941017]
[271.96765137 31.71540833]
[256.94644165 32.28277206]
[242.09846497 29.90781975]
[227.99467468 24.67998314]
[215.17776489 16.79842758]
[204.96429443 27.78409195]
[205.08015442 39.92056274]
[196.60458374 49.16090012]
[183.70236206 50.15403748]
[173.26254272 60.92484283]
[162.82273865 71.69565582]
[152.49552917 82.57447815]
[142.28204346 93.56014252]
[132.06857300 104.54580688]
[126.58153534 118.50619507]
[126.58153534 133.50619507]
[126.58153534 148.50619507]
[126.58153534 163.50619507]
[126.58153534 178.50619507]
[126.58153534 193.50619507]
[126.58153534 208.50619507]
[126.58153534 223.50619507]
[126.58153534 238.50619507]
[126.58153534 253.50619507]
[126.58153534 268.50619507]
[141.12142944 272.56750488]
[154.02580261 280.40200806]
[164.33708191 291.42834473]
[171.29011536 304.82827759]
[174.36891174 319.60745239]
[173.34501648 334.66912842]
[168.29441833 348.89562988]
[159.59188843 361.23132324]
[147.88322449 370.76074219]
[134.03729248 376.77676392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 55]
[24 54]
[25 53]
[31 45]
[32 44]
[33 43]
[35 42]
[36 41]
[58 129]
[59 128]
[60 127]
[62 126]
[63 125]
[64 124]
[66 121]
[67 120]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
