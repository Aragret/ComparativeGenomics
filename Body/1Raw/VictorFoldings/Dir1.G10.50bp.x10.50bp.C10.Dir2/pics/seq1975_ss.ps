%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACCCAAAGGGGGGGGGGUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGxxxxxxxxxxAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGCCCCCCCCCCUUUACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[57.93151474 557.38372803]
[44.08557892 551.36767578]
[32.37691498 541.83825684]
[23.67439079 529.50262451]
[18.62378883 515.27606201]
[17.59989929 500.21438599]
[20.67869759 485.43524170]
[27.63171959 472.03530884]
[37.94300461 461.00897217]
[50.84738541 453.17446899]
[65.38726807 449.11315918]
[65.38726807 434.11315918]
[65.38726807 419.11315918]
[65.38726807 404.11315918]
[65.38726807 389.11315918]
[65.38726807 374.11315918]
[65.38726807 359.11315918]
[65.38726807 344.11315918]
[65.38726807 329.11315918]
[65.38726807 314.11315918]
[65.38726807 299.11315918]
[54.50441360 309.43612671]
[39.54386520 310.52328491]
[27.28289795 301.88220215]
[23.27585220 287.42730713]
[29.33795738 273.70684814]
[42.72302246 266.93630981]
[57.36748123 270.18283081]
[66.63737488 281.97607422]
[68.81421661 267.13485718]
[70.99105072 252.29365540]
[73.16788483 237.45245361]
[75.34472656 222.61125183]
[63.57828140 213.47799683]
[57.92564774 199.58901978]
[59.99766922 184.63665771]
[69.33706665 172.65031433]
[83.51462555 166.91061401]
[85.69146729 152.06941223]
[87.71379852 137.20635986]
[89.58141327 122.32308197]
[91.44902802 107.43980408]
[78.73772430 115.40364838]
[64.07630920 112.23457336]
[55.78886414 99.73184204]
[58.58061981 84.99392700]
[70.86653900 76.38834381]
[85.67124939 78.80093384]
[94.58969116 90.86344910]
[98.29585266 76.32851410]
[94.20815277 61.04449463]
[104.85018921 50.62353516]
[108.55635071 36.08859634]
[96.59361267 45.13806915]
[81.72649384 47.13026428]
[67.80330658 41.54951096]
[58.42802048 29.84037018]
[56.02740097 15.03371429]
[61.22283936 0.96220469]
[72.66951752 -8.73179340]
[87.40449524 -11.53901672]
[101.61366272 -6.73282433]
[111.61902618 4.44271469]
[114.83073425 19.09473991]
[121.45922852 5.63877535]
[128.08773804 -7.81719017]
[127.24517059 -23.61594582]
[139.81021118 -31.61401558]
[146.43870544 -45.06998062]
[134.30484009 -53.95482254]
[123.89828491 -64.81183624]
[115.53529358 -77.31109619]
[109.46999359 -91.07275391]
[105.88671875 -105.67861938]
[104.89434814 -120.68482971]
[106.52304077 -135.63536072]
[110.72330475 -150.07589722]
[117.36750031 -163.56758118]
[126.25372314 -175.70043945]
[137.11192322 -186.10575867]
[149.61212158 -194.46734619]
[163.37446594 -200.53108215]
[177.98074341 -204.11270142]
[192.98706055 -205.10336304]
[207.93740845 -203.47297668]
[222.37745667 -199.27107239]
[235.86840820 -192.62535095]
[248.00025940 -183.73774719]
[258.40435791 -172.87837219]
[266.76449585 -160.37722778]
[272.82669067 -146.61418152]
[276.40664673 -132.00750732]
[277.39559937 -117.00107574]
[275.76351929 -102.05091095]
[271.55999756 -87.61133575]
[264.91271973 -74.12115479]
[256.02374268 -61.99031067]
[245.16320801 -51.58745193]
[232.66110229 -43.22871017]
[218.89736938 -37.16809464]
[204.29029846 -33.58978653]
[189.28375244 -32.60251999]
[174.33377075 -34.23630142]
[159.89466858 -38.44148254]
[153.26617432 -24.98551559]
[154.58283997 -10.14922237]
[141.54370117 -1.18869150]
[134.91519165 12.26727390]
[128.28669739 25.72323990]
[123.09128571 39.79475784]
[119.38512421 54.32969666]
[123.73791504 68.57408142]
[112.83078766 80.03467560]
[109.12462616 94.56961060]
[106.33230591 109.30741882]
[104.46469116 124.19069672]
[102.59707642 139.07397461]
[104.64175415 148.04455566]
[100.53266907 154.24624634]
[98.35583496 169.08744812]
[110.28793335 178.65678406]
[115.79180145 192.82026672]
[113.48264313 207.73785400]
[104.07957458 219.41853333]
[90.18592834 224.78808594]
[88.00909424 239.62928772]
[85.83225250 254.47050476]
[83.65541840 269.31170654]
[81.47858429 284.15292358]
[80.38726807 299.11315918]
[80.38726807 314.11315918]
[80.38726807 329.11315918]
[80.38726807 344.11315918]
[80.38726807 359.11315918]
[80.38726807 374.11315918]
[80.38726807 389.11315918]
[80.38726807 404.11315918]
[80.38726807 419.11315918]
[80.38726807 434.11315918]
[80.38726807 449.11315918]
[94.92715454 453.17446899]
[107.83154297 461.00897217]
[118.14282227 472.03530884]
[125.09584808 485.43524170]
[128.17463684 500.21438599]
[127.15074921 515.27606201]
[122.10015106 529.50262451]
[113.39762878 541.83825684]
[101.68896484 551.36767578]
[87.84302521 557.38372803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[38 120]
[39 119]
[40 117]
[41 116]
[42 115]
[49 114]
[50 113]
[52 111]
[53 110]
[64 109]
[65 108]
[66 107]
[68 105]
[69 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
