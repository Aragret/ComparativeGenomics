%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUACUAGACGGGGGGGGGGCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUxxxxxxxxxxUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCCCCCCCCCCCUUACUACAC\
) } def
/len { sequence length } bind def

/coor [
[86.56011200 396.14514160]
[72.39951324 390.99014282]
[59.80976486 382.70791626]
[49.46982956 371.74514771]
[41.93731689 358.69302368]
[37.61845016 344.25543213]
[36.74614334 329.21096802]
[39.36743546 314.37097168]
[45.34096146 300.53573608]
[54.34457779 288.45138550]
[65.89273834 278.76959229]
[79.36264801 272.01254272]
[94.02790833 268.54455566]
[94.02790833 253.54455566]
[94.02790833 238.54455566]
[94.02790833 223.54455566]
[94.02790833 208.54455566]
[94.02790833 193.54455566]
[94.02790833 178.54455566]
[94.02790833 163.54455566]
[94.02790833 148.54455566]
[94.02790833 133.54455566]
[73.20521545 107.47194672]
[85.78083038 83.79069519]
[80.42897034 69.77793121]
[75.07711029 55.76516342]
[69.72525024 41.75239944]
[64.37339020 27.73963165]
[59.02153397 13.72686672]
[53.66967392 -0.28589928]
[44.15809250 1.48396397]
[34.49602127 1.91093695]
[24.87205696 0.98761928]
[15.47391987 -1.26704252]
[6.48479080 -4.80814266]
[-1.92025101 -9.56571007]
[-9.57764435 -15.44609070]
[-16.33852577 -22.33379364]
[-22.07162476 -30.09375000]
[-26.66581154 -38.57397842]
[-30.03225517 -47.60854340]
[-32.10612869 -57.02080917]
[-32.84787750 -66.62690735]
[-32.24395752 -76.23929596]
[-30.30707932 -85.67046356]
[-27.07595634 -94.73654175]
[-22.61452293 -103.26092529]
[-34.47615814 -112.44251251]
[-46.33779526 -121.62410736]
[-58.19942856 -130.80569458]
[-70.06106567 -139.98728943]
[-81.92269897 -149.16886902]
[-97.95481873 -148.57652283]
[-108.30411530 -160.83505249]
[-105.03150177 -176.54077148]
[-90.64744568 -183.64559937]
[-76.18616486 -176.69931030]
[-72.74111176 -161.03051758]
[-60.87947464 -151.84892273]
[-49.01784134 -142.66732788]
[-37.15620422 -133.48574829]
[-25.29456902 -124.30415344]
[-13.43293190 -115.12255859]
[-1.27075505 -125.12673950]
[12.84624004 -132.10618591]
[28.17974472 -135.69587708]
[43.92782593 -135.70806885]
[47.24446487 -150.33679199]
[50.56110382 -164.96553040]
[53.87774277 -179.59426880]
[40.34226227 -186.21903992]
[28.69979095 -195.78718567]
[19.57819366 -207.78273010]
[13.46938610 -221.55877686]
[10.70280743 -236.37237549]
[11.42765808 -251.42466736]
[15.60484600 -265.90386963]
[23.00909996 -279.02917480]
[33.24111938 -290.09274292]
[45.74910736 -298.49792480]
[59.85851669 -303.79144287]
[74.80844879 -305.68780518]
[89.79267120 -304.08477783]
[104.00311279 -299.06878662]
[116.67340851 -290.91033936]
[127.12026978 -280.04940796]
[134.78031921 -267.07171631]
[139.24044800 -252.67712402]
[140.26013184 -237.64193726]
[137.78437805 -222.77696228]
[131.94670105 -208.88386536]
[123.06192780 -196.71186829]
[111.60919189 -186.91738892]
[98.20613861 -180.02865601]
[83.57556152 -176.41714478]
[68.50647736 -176.27763367]
[65.18984222 -161.64889526]
[61.87319946 -147.02015686]
[58.55656052 -132.39141846]
[76.37752533 -123.21349335]
[90.81238556 -109.28330994]
[100.63294983 -91.77427673]
[105.00022125 -72.16480255]
[103.53608704 -52.11346436]
[96.35600281 -33.31872940]
[84.05998230 -17.37508011]
[67.68244171 -5.63775826]
[73.03430176 8.37500763]
[78.38616180 22.38777351]
[83.73802185 36.40053940]
[89.08987427 50.41330338]
[94.44173431 64.42607117]
[99.79359436 78.43883514]
[112.54292297 77.53187561]
[125.60246277 84.55178070]
[134.06207275 99.17636108]
[148.88909912 101.44777679]
[163.71612549 103.71919250]
[180.28819275 100.14105988]
[188.31408691 115.07495880]
[176.18560791 126.92131805]
[161.44470215 118.54621887]
[146.61767578 116.27479553]
[131.79064941 114.00337982]
[126.09996796 118.88867950]
[138.02293396 127.99048615]
[151.22418213 135.11279297]
[152.83076477 150.02650452]
[141.44932556 159.79699707]
[126.95092773 155.95034790]
[121.90998077 141.82299805]
[114.71859741 128.65925598]
[109.02790833 133.54455566]
[109.02790833 148.54455566]
[109.02790833 163.54455566]
[109.02790833 178.54455566]
[109.02790833 193.54455566]
[109.02790833 208.54455566]
[109.02790833 223.54455566]
[109.02790833 238.54455566]
[109.02790833 253.54455566]
[109.02790833 268.54455566]
[123.69317627 272.01254272]
[137.16308594 278.76959229]
[148.71124268 288.45138550]
[157.71485901 300.53573608]
[163.68838501 314.37097168]
[166.30967712 329.21096802]
[165.43737793 344.25543213]
[161.11849976 358.69302368]
[153.58599854 371.74514771]
[143.24606323 382.70791626]
[130.65631104 390.99014282]
[116.49571228 396.14514160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[67 99]
[68 98]
[69 97]
[70 96]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
