%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUCUACUGGGGGGGGGGCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAxxxxxxxxxxCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUGUAUCCGACAUCUCCCCCCCCCCGGUUCCUACU\
) } def
/len { sequence length } bind def

/coor [
[83.91004944 417.30209351]
[70.06410980 411.28607178]
[58.35544968 401.75665283]
[49.65292740 389.42095947]
[44.60232544 375.19445801]
[43.57843399 360.13278198]
[46.65723038 345.35360718]
[53.61025238 331.95367432]
[63.92153931 320.92733765]
[76.82592010 313.09283447]
[91.36580658 309.03152466]
[91.36580658 294.03152466]
[91.36580658 279.03152466]
[91.36580658 264.03152466]
[91.36580658 249.03152466]
[91.36580658 234.03152466]
[91.36580658 219.03152466]
[91.36580658 204.03152466]
[91.36580658 189.03152466]
[91.36580658 174.03152466]
[89.41213989 171.93617249]
[88.19876099 168.91595459]
[88.09165955 165.25939941]
[89.34169006 161.38531494]
[92.04169464 157.79763794]
[93.28856659 142.84954834]
[94.53544617 127.90145874]
[75.83966827 104.45314026]
[89.03890228 82.43666840]
[86.24658203 67.69886017]
[83.45425415 52.96105576]
[69.23178101 50.97079086]
[56.34272766 44.68625641]
[46.04671097 34.73642349]
[39.34534836 22.10772896]
[36.88482666 8.04629421]
[38.89362335 -6.06503868]
[45.16133881 -18.84269524]
[55.06066895 -29.03802299]
[67.61016083 -35.65930939]
[57.69344711 -47.98689651]
[63.21523666 -61.82015991]
[60.73011780 -76.61286926]
[50.81340408 -88.94045258]
[56.33519363 -102.77371216]
[53.85007477 -117.56642151]
[51.36495590 -132.35913086]
[36.35739899 -131.74559021]
[21.39128685 -133.01788330]
[6.70266008 -136.15596008]
[-7.47682238 -141.11029053]
[-20.92353058 -147.80278015]
[-33.42538834 -156.12785339]
[-44.78522110 -165.95420837]
[-54.82387543 -177.12689209]
[-63.38302231 -189.46966553]
[-70.32766724 -202.78788757]
[-75.54829407 -216.87150574]
[-78.96255493 -231.49839783]
[-80.51660919 -246.43788147]
[-80.18595123 -261.45434570]
[-77.97578430 -276.31094360]
[-73.92096710 -290.77334595]
[-68.08545685 -304.61352539]
[-60.56129074 -317.61312866]
[-51.46712494 -329.56719971]
[-40.94639587 -340.28713989]
[-29.16502762 -349.60394287]
[-16.30882835 -357.37063599]
[-2.58055902 -363.46472168]
[11.80326366 -367.79010010]
[26.61578751 -370.27853394]
[41.62339783 -370.89080811]
[56.58940125 -369.61724854]
[71.27776337 -366.47793579]
[85.45683289 -361.52239990]
[98.90297699 -354.82879639]
[111.40412903 -346.50268555]
[122.76313782 -336.67535400]
[132.80085754 -325.50183105]
[141.35896301 -313.15832520]
[148.30249023 -299.83953857]
[153.52192688 -285.75546265]
[156.93495178 -271.12829590]
[158.48776245 -256.18869019]
[158.15582275 -241.17225647]
[155.94441223 -226.31584167]
[151.88838196 -211.85375977]
[146.05171204 -198.01408386]
[138.52644348 -185.01510620]
[129.43127441 -173.06181335]
[118.90963745 -162.34274292]
[107.12748718 -153.02694702]
[94.27062988 -145.26133728]
[80.54185486 -139.16841125]
[66.15766144 -134.84425354]
[68.64278412 -120.05153656]
[71.12789917 -105.25883484]
[80.86685944 -93.98931885]
[75.52282715 -79.09798431]
[78.00794220 -64.30527496]
[87.74690247 -53.03576279]
[82.40287018 -38.14442825]
[97.89218903 -35.49176788]
[111.56575775 -27.69231415]
[121.76812744 -15.66928005]
[127.25691223 -0.85847110]
[127.35406494 14.96315765]
[122.02960205 29.89069557]
[111.90737152 42.12062836]
[98.19206238 50.16873169]
[100.98438263 64.90653992]
[103.77671051 79.64434052]
[112.66403198 81.23904419]
[120.72662354 86.81063843]
[126.17596436 95.87223816]
[127.51997375 107.14170837]
[141.53668213 112.48322296]
[155.55340576 117.82472992]
[170.72267151 112.60242462]
[184.18571472 121.32745361]
[185.61482239 137.30671692]
[173.91371155 148.28231812]
[158.05847168 145.83468628]
[150.21188354 131.84144592]
[136.19517517 126.49993134]
[122.17845917 121.15841675]
[109.48352814 129.14833069]
[108.23665619 144.09642029]
[106.98978424 159.04450989]
[106.36580658 174.03152466]
[106.36580658 189.03152466]
[106.36580658 204.03152466]
[106.36580658 219.03152466]
[106.36580658 234.03152466]
[106.36580658 249.03152466]
[106.36580658 264.03152466]
[106.36580658 279.03152466]
[106.36580658 294.03152466]
[106.36580658 309.03152466]
[120.90569305 313.09283447]
[133.81007385 320.92733765]
[144.12135315 331.95367432]
[151.07438660 345.35360718]
[154.15318298 360.13278198]
[153.12928772 375.19445801]
[148.07868958 389.42095947]
[139.37615967 401.75665283]
[127.66749573 411.28607178]
[113.82156372 417.30209351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[29 113]
[30 112]
[31 111]
[40 103]
[42 101]
[43 100]
[45 98]
[46 97]
[47 96]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
