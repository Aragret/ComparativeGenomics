%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACCCCAGGGGGGGGGGCUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUxxxxxxxxxxCGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[87.68755341 351.56616211]
[74.46735382 344.29370117]
[63.58054733 333.84667969]
[55.76941681 320.93743896]
[51.56653595 306.44613647]
[51.25846481 291.36077881]
[54.86620712 276.70996094]
[62.14377975 263.49258423]
[72.59498596 252.60980225]
[85.50724792 244.80364990]
[100.00018311 240.60636902]
[99.68812561 225.60961914]
[99.37607574 210.61286926]
[99.06401825 195.61610413]
[98.75196075 180.61935425]
[98.43990326 165.62260437]
[98.12784576 150.62585449]
[97.81578827 135.62908936]
[97.50373840 120.63233948]
[85.51689911 111.61481476]
[71.02130890 115.47196960]
[56.52571106 119.32913208]
[45.17919540 130.35487366]
[30.89030075 126.15050507]
[16.39470482 130.00765991]
[1.89910758 133.86482239]
[-12.59648895 137.72198486]
[-27.09208488 141.57914734]
[-34.80011368 155.37631226]
[-50.02913284 159.60153198]
[-63.74403763 151.74806213]
[-67.80801392 136.47521973]
[-59.80998230 122.84411621]
[-44.49502945 118.94184113]
[-30.94924545 127.08354187]
[-16.45364761 123.22638702]
[-1.95805180 119.36922455]
[12.53754520 115.51206207]
[27.03314209 111.65490723]
[37.34283447 100.90504456]
[52.66854858 104.83353424]
[67.16414642 100.97637177]
[81.65974426 97.11921692]
[83.13248444 89.76523590]
[68.42456818 86.81952667]
[71.37050629 72.11165619]
[86.07796478 75.05727386]
[87.55070496 67.70329285]
[75.65832520 58.56155777]
[63.76594925 49.41982269]
[48.12955475 51.71737289]
[35.49837875 42.21847916]
[33.36627579 26.55866623]
[42.99818420 14.02862644]
[58.67966080 12.06220818]
[71.10717010 21.82605171]
[72.90768433 37.52744293]
[84.80006409 46.66917801]
[96.69244385 55.81091309]
[89.42802429 42.68733597]
[94.21749878 28.47252464]
[107.94266510 22.42109299]
[121.66768646 28.47285461]
[126.45682526 42.68778229]
[119.19244385 55.81091309]
[131.08482361 46.66917801]
[142.97720337 37.52744293]
[154.86958313 28.38570976]
[166.76196289 19.24397469]
[158.95118713 6.42059278]
[152.57269287 -7.17212200]
[147.70123291 -21.37480354]
[144.39393616 -36.02093124]
[142.68957520 -50.93878555]
[142.60815430 -65.95346832]
[144.15060425 -80.88893127]
[147.29884338 -95.57006836]
[152.01596069 -109.82475281]
[158.24665833 -123.48585510]
[165.91787720 -136.39320374]
[174.93968201 -148.39546204]
[185.20629883 -159.35191345]
[196.59733582 -169.13410950]
[208.97927856 -177.62734985]
[222.20690918 -184.73204041]
[236.12516785 -190.36491394]
[250.57087708 -194.45991516]
[265.37463379 -196.96900940]
[280.36291504 -197.86280823]
[295.35995483 -197.13082886]
[310.18994141 -194.78164673]
[324.67901611 -190.84278870]
[338.65725708 -185.36047363]
[351.96081543 -178.39894104]
[364.43368530 -170.03984070]
[375.92962646 -160.38114929]
[386.31390381 -149.53613281]
[395.46472168 -137.63194275]
[403.27478027 -124.80814362]
[409.65255737 -111.21508789]
[414.52325439 -97.01214600]
[417.82977295 -82.36583710]
[419.53332520 -67.44789124]
[419.61395264 -52.43320465]
[418.07067871 -37.49782562]
[414.92166138 -22.81685638]
[410.20376587 -8.56242561]
[403.97235107 5.09833860]
[396.30041504 18.00527191]
[387.27798462 30.00704956]
[377.01077271 40.96295166]
[365.61920166 50.74452972]
[353.23681641 59.23710251]
[340.00878906 66.34109497]
[326.09020996 71.97321320]
[311.64431763 76.06742859]
[296.84039307 78.57573700]
[281.85208130 79.46872711]
[266.85507202 78.73593903]
[252.02520752 76.38595581]
[237.53636169 72.44632721]
[223.55841064 66.96324921]
[210.25523376 60.00100708]
[197.78282166 51.64122772]
[186.28736877 41.98192596]
[175.90370178 31.13635445]
[164.01132202 40.27808762]
[152.11894226 49.41982269]
[140.22656250 58.56155777]
[128.33418274 67.70329285]
[112.50048828 120.32028198]
[112.81254578 135.31703186]
[113.12460327 150.31379700]
[113.43666077 165.31054688]
[113.74871063 180.30729675]
[114.06076813 195.30404663]
[114.37282562 210.30081177]
[114.68488312 225.29756165]
[114.99694061 240.29431152]
[129.65193176 243.88508606]
[142.87774658 251.14733887]
[153.77261353 261.58593750]
[161.59370422 274.48913574]
[165.80776978 288.97720337]
[166.12750244 304.06231689]
[162.53106689 318.71591187]
[155.26370239 331.93890381]
[144.82090759 342.82974243]
[131.91467285 350.64587402]
[117.42498779 354.85433960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 43]
[21 42]
[22 41]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[48 59]
[49 58]
[50 57]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
