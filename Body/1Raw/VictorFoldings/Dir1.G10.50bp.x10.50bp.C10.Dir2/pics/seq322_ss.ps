%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCUCCCGGGGGGGGGGCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAxxxxxxxxxxGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.70034790]
[71.19830322 381.68432617]
[59.48964310 372.15490723]
[50.78712082 359.81924438]
[45.73651886 345.59271240]
[44.71262741 330.53103638]
[47.79142761 315.75186157]
[54.74444962 302.35195923]
[65.05573273 291.32562256]
[77.96011353 283.49111938]
[92.50000000 279.42977905]
[92.50000000 264.42977905]
[92.50000000 249.42979431]
[92.50000000 234.42979431]
[92.50000000 219.42979431]
[92.50000000 204.42979431]
[92.50000000 189.42979431]
[92.50000000 174.42979431]
[92.50000000 159.42979431]
[92.50000000 144.42979431]
[92.50000000 129.42979431]
[75.92236328 118.51026917]
[69.63123322 99.68275452]
[76.31431580 80.99076843]
[67.29678345 69.00393677]
[58.27925491 57.01710129]
[49.26172638 45.03026962]
[40.24419785 33.04343414]
[35.33285141 40.52326584]
[26.78838730 46.02938843]
[12.02233124 48.66825104]
[-0.16015612 59.64636612]
[-15.67309475 54.32839966]
[-18.55810356 38.18502045]
[-5.84733200 27.82315063]
[9.38346672 33.90219498]
[24.14952278 31.26333237]
[30.91763687 17.87704659]
[24.28913879 4.42108154]
[17.66064072 -9.03488445]
[3.46140695 -4.13743496]
[-11.23968506 -1.05828905]
[-26.21077728 0.15399104]
[-41.21575546 -0.51971400]
[-56.01796722 -3.06877875]
[-70.38396454 -7.45300102]
[-84.08717346 -13.60323524]
[-96.91146851 -21.42248344]
[-108.65459442 -30.78742409]
[-119.13135529 -41.55036163]
[-128.17651367 -53.54154205]
[-135.64739990 -66.57185364]
[-141.42619324 -80.43579102]
[-145.42176819 -94.91469574]
[-147.57110596 -109.78021240]
[-147.84028625 -124.79788971]
[-146.22509766 -139.73089600]
[-142.75097656 -154.34368896]
[-137.47274780 -168.40580750]
[-130.47363281 -181.69549561]
[-121.86402893 -194.00312805]
[-111.77972412 -205.13462830]
[-100.37976074 -214.91439819]
[-87.84392548 -223.18821716]
[-74.36993408 -229.82559204]
[-60.17028809 -234.72184753]
[-45.46893692 -237.79975891]
[-30.49774361 -239.01077271]
[-15.49282169 -238.33581543]
[-0.69082344 -235.78550720]
[13.67480278 -231.40007019]
[27.37749100 -225.24868774]
[40.20112991 -217.42835999]
[51.94347382 -208.06242371]
[62.41932297 -197.29861450]
[71.46346283 -185.30665588]
[78.93325806 -172.27572632]
[84.71089172 -158.41130066]
[88.70525360 -143.93206787]
[90.85333252 -129.06636047]
[91.12125397 -114.04866028]
[89.50479889 -99.11579895]
[86.02945709 -84.50329590]
[80.75003815 -70.44161224]
[73.74980164 -57.15251923]
[65.13916779 -44.84560394]
[55.05392456 -33.71496582]
[43.65313339 -23.93614960]
[31.11660576 -15.66338253]
[37.74510574 -2.20741725]
[44.37360382 11.24854851]
[52.23102951 24.02590561]
[61.24855804 36.01273727]
[70.26609039 47.99956894]
[79.28361511 59.98640442]
[88.30114746 71.97323608]
[97.05329895 69.77286530]
[106.06562805 70.24146271]
[114.54238892 73.33763885]
[121.73509979 78.78801727]
[127.00866699 86.11135101]
[129.89746094 94.66101074]
[144.85769653 95.75231934]
[159.81794739 96.84363556]
[174.77819824 97.93494415]
[189.73844910 99.02625275]
[204.69869995 100.11756134]
[211.17016602 86.38859558]
[222.16679382 75.92730713]
[236.20138550 70.14850616]
[251.37588501 69.83372498]
[265.63806152 75.02553558]
[277.05905151 85.02178955]
[284.09429932 98.47058105]
[285.79232788 113.55305481]
[281.92346191 128.22944641]
[273.01098633 140.51489258]
[260.26022339 148.74787903]
[245.39556885 151.81497192]
[230.42739868 149.30136108]
[217.38000488 141.54699707]
[208.01795959 129.60060120]
[203.60739136 115.07781219]
[188.64714050 113.98650360]
[173.68688965 112.89519501]
[158.72663879 111.80387878]
[143.76638794 110.71257019]
[128.80615234 109.62126160]
[120.67918396 122.24262238]
[107.50000000 129.42979431]
[107.50000000 144.42979431]
[107.50000000 159.42979431]
[107.50000000 174.42979431]
[107.50000000 189.42979431]
[107.50000000 204.42979431]
[107.50000000 219.42979431]
[107.50000000 234.42979431]
[107.50000000 249.42979431]
[107.50000000 264.42977905]
[107.50000000 279.42977905]
[122.03988647 283.49111938]
[134.94427490 291.32562256]
[145.25555420 302.35195923]
[152.20857239 315.75186157]
[155.28736877 330.53103638]
[154.26348877 345.59271240]
[149.21287537 359.81924438]
[140.51036072 372.15490723]
[128.80169678 381.68432617]
[114.95575714 387.70034790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[30 37]
[31 36]
[38 91]
[39 90]
[40 89]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
