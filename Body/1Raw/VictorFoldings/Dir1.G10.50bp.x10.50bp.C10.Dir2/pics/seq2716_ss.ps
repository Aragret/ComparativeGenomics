%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCACCUGGGGGGGGGGCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAAxxxxxxxxxxUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCCCCCCCCCCCAACACCACCU\
) } def
/len { sequence length } bind def

/coor [
[105.55803680 617.82312012]
[92.33783722 610.55065918]
[81.45103455 600.10369873]
[73.63990784 587.19439697]
[69.43702698 572.70312500]
[69.12895203 557.61779785]
[72.73669434 542.96691895]
[80.01426697 529.74957275]
[90.46547699 518.86676025]
[103.37773895 511.06063843]
[117.87067413 506.86337280]
[117.55861664 491.86660767]
[117.24655914 476.86984253]
[116.93450165 461.87310791]
[116.62245178 446.87634277]
[116.31039429 431.87957764]
[115.99833679 416.88284302]
[115.68627930 401.88607788]
[115.37422180 386.88934326]
[115.06216431 371.89257812]
[100.13576508 362.55072021]
[93.70291138 345.99114990]
[98.49222565 328.72140503]
[112.78230286 317.64859009]
[111.84667206 302.67779541]
[101.35961914 288.64135742]
[109.60501099 272.20986938]
[108.35813904 257.26181030]
[94.07497406 249.23081970]
[87.30403137 234.12716675]
[90.88217926 217.79687500]
[103.59802246 206.69013977]
[102.04043579 191.77122498]
[100.48285675 176.85231018]
[98.92527771 161.93341064]
[89.90821838 150.07836914]
[96.17070007 135.54936218]
[94.61312103 120.63044739]
[86.22545624 116.27562714]
[80.54394531 108.72329712]
[78.68476105 99.45718384]
[64.78220367 93.82523346]
[50.87965012 88.19327545]
[36.97709656 82.56131744]
[21.70245552 87.46691895]
[8.42384338 78.46369934]
[7.32747364 62.45815277]
[19.25438690 51.72836685]
[35.05527496 54.50531387]
[42.60905075 68.65876007]
[56.51160812 74.29071808]
[70.41416168 79.92267609]
[84.31671906 85.55463409]
[89.98550415 81.17597961]
[96.78447723 78.92170715]
[99.88280487 64.24518585]
[102.98112488 49.56865692]
[106.07944489 34.89213181]
[109.17776489 20.21560669]
[107.62177277 16.00367355]
[107.53691864 11.93380260]
[108.68957520 8.46202087]
[110.71916962 5.91746998]
[113.19226837 4.47140694]
[117.49985504 -9.89677715]
[106.22441864 -0.00412783]
[92.38277435 5.77592325]
[77.42054749 6.83971024]
[62.90037155 3.07613277]
[50.33872986 -5.12174368]
[41.04755402 -16.89773750]
[35.99720383 -31.02197266]
[35.71514511 -46.01932144]
[40.23082352 -60.32346725]
[49.07263184 -72.44049835]
[61.31713486 -81.10491180]
[75.68552399 -85.41181183]
[90.67717743 -84.91138458]
[104.72636414 -79.65589142]
[116.36581421 -70.19421387]
[124.37989044 -57.51452255]
[127.93161774 -42.94107819]
[126.64932251 -27.99300766]
[135.66685486 -39.97983932]
[144.68438721 -51.96667099]
[153.70190430 -63.95350647]
[148.24847412 -78.38484955]
[151.48527527 -93.46883392]
[162.37945557 -104.39221954]
[177.45472717 -107.66939545]
[191.90061951 -102.25462341]
[201.10749817 -89.87574005]
[202.13749695 -74.48279572]
[194.66192627 -60.98762894]
[181.06623840 -53.69649887]
[165.68873596 -54.93597412]
[156.67121887 -42.94914246]
[147.65368652 -30.96231079]
[138.63615417 -18.97547722]
[131.86804199 -5.58919239]
[127.56045532 8.77899170]
[123.85429382 23.31392860]
[120.75597382 37.99045181]
[117.65764618 52.66697693]
[114.55932617 67.34350586]
[111.46100616 82.02002716]
[121.29331207 101.10852814]
[109.53202820 119.07286835]
[111.08961487 133.99177551]
[120.21807861 146.91392517]
[113.84418488 160.37582397]
[115.40177155 175.29473877]
[116.95935059 190.21365356]
[118.51692963 205.13255310]
[130.95960999 211.14746094]
[138.72987366 222.44506836]
[139.87722778 235.99992371]
[134.20761108 248.24601746]
[123.30622101 256.01492310]
[124.55310059 270.96301270]
[133.90243530 279.90972900]
[134.60026550 292.42898560]
[126.81745911 301.74215698]
[127.75308990 316.71295166]
[139.16011047 322.00411987]
[147.16859436 331.60433960]
[150.29203796 343.63510132]
[147.99198914 355.77630615]
[140.76979065 365.71386719]
[130.05891418 371.58050537]
[130.37097168 386.57727051]
[130.68302917 401.57403564]
[130.99508667 416.57077026]
[131.30714417 431.56753540]
[131.61920166 446.56430054]
[131.93125916 461.56103516]
[132.24331665 476.55780029]
[132.55537415 491.55453491]
[132.86743164 506.55130005]
[147.52241516 510.14205933]
[160.74822998 517.40435791]
[171.64309692 527.84289551]
[179.46418762 540.74615479]
[183.67826843 555.23419189]
[183.99798584 570.31927490]
[180.40156555 584.97290039]
[173.13420105 598.19592285]
[162.69139099 609.08673096]
[149.78517151 616.90283203]
[135.29547119 621.11132812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 124]
[25 123]
[27 120]
[28 119]
[32 114]
[33 113]
[34 112]
[35 111]
[37 109]
[38 108]
[41 53]
[42 52]
[43 51]
[44 50]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[64 101]
[65 100]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
