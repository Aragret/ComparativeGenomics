%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCAACUAGGGGGGGGGGUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAxxxxxxxxxxCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGCCCCCCCCCCAUACCAACAA\
) } def
/len { sequence length } bind def

/coor [
[79.07820129 422.61291504]
[65.23226166 416.59689331]
[53.52359772 407.06747437]
[44.82107544 394.73181152]
[39.77047348 380.50527954]
[38.74658203 365.44360352]
[41.82538223 350.66445923]
[48.77840424 337.26452637]
[59.08968735 326.23818970]
[71.99406433 318.40368652]
[86.53395081 314.34237671]
[86.53395081 299.34237671]
[86.53395081 284.34237671]
[86.53395081 269.34237671]
[86.53395081 254.34236145]
[86.53395081 239.34236145]
[86.53395081 224.34236145]
[86.53395081 209.34236145]
[86.53395081 194.34236145]
[86.53395081 179.34236145]
[84.58029175 177.24700928]
[83.36691284 174.22679138]
[83.25981140 170.57023621]
[84.50984192 166.69615173]
[87.20984650 163.10847473]
[88.45671844 148.16038513]
[89.70359039 133.21229553]
[90.95046997 118.26421356]
[84.64599609 113.40634155]
[80.68246460 106.50448608]
[65.70275116 105.72463989]
[50.72303772 104.94479370]
[35.74332047 104.16494751]
[27.99045944 117.36160278]
[14.98673058 125.43387604]
[-0.27970544 126.52681732]
[-14.30073261 120.38928223]
[-23.85442162 108.43161774]
[-26.74540329 93.40162659]
[-22.30935287 78.75307465]
[-11.56564236 67.85209656]
[3.01690316 63.20366287]
[18.08732033 65.87594604]
[30.18253899 75.25486755]
[36.52316666 89.18523407]
[51.50288010 89.96508026]
[66.48259735 90.74492645]
[81.46231079 91.52477264]
[90.05420685 82.20796204]
[102.49116516 79.76958466]
[109.67367554 66.60100555]
[116.85618591 53.43242264]
[124.03868866 40.26383972]
[111.55822754 31.92452431]
[99.87554169 22.50002861]
[89.08470154 12.06623554]
[79.27259064 0.70715505]
[70.51821136 -11.48575592]
[62.89204788 -24.41432571]
[56.45550537 -37.97445679]
[51.26041031 -52.05697250]
[47.34858704 -66.54848480]
[44.75153351 -81.33231354]
[43.49016190 -96.28942108]
[43.57462311 -111.29938507]
[45.00424576 -126.24135590]
[47.76750946 -140.99502563]
[51.84217072 -155.44158936]
[57.19541931 -169.46475220]
[63.78416061 -182.95158386]
[71.55533600 -195.79351807]
[80.44638062 -207.88713074]
[90.38570404 -219.13507080]
[101.29328156 -229.44676208]
[113.08128357 -238.73918152]
[125.65481567 -246.93751526]
[138.91262817 -253.97575378]
[152.74797058 -259.79721069]
[167.04945374 -264.35504150]
[181.70191956 -267.61254883]
[196.58740234 -269.54348755]
[211.58605957 -270.13229370]
[226.57711792 -269.37426758]
[241.43986511 -267.27548218]
[256.05465698 -263.85284424]
[270.30377197 -259.13391113]
[284.07254028 -253.15670776]
[297.25009155 -245.96931458]
[309.73031616 -237.62960815]
[321.41268921 -228.20475769]
[332.20321655 -217.77062988]
[342.01498413 -206.41125488]
[350.76898193 -194.21807861]
[358.39477539 -181.28927612]
[364.83090210 -167.72894287]
[370.02554321 -153.64627075]
[373.93695068 -139.15464783]
[376.53353882 -124.37073517]
[377.79446411 -109.41358948]
[377.70953369 -94.40362549]
[376.27944946 -79.46170044]
[373.51574707 -64.70811462]
[369.44064331 -50.26167297]
[364.08697510 -36.23867798]
[357.49780273 -22.75204086]
[349.72625732 -9.91035271]
[340.83483887 2.18299413]
[330.89517212 13.43062782]
[319.98727417 23.74198723]
[308.19897461 33.03404999]
[295.62521362 41.23199844]
[282.36718750 48.26983261]
[268.53164673 54.09087753]
[254.23004150 58.64827347]
[239.57746887 61.90531921]
[224.69192505 63.83579636]
[209.69325256 64.42415619]
[194.70222473 63.66566849]
[179.83953857 61.56643295]
[165.22485352 58.14335251]
[150.97586060 53.42399216]
[137.20727539 47.44635010]
[130.02476501 60.61493301]
[122.84225464 73.78351593]
[115.65974426 86.95209503]
[119.52465057 105.85349274]
[105.89855194 119.51108551]
[104.65167999 134.45916748]
[103.40480804 149.40725708]
[102.15792847 164.35534668]
[101.53395081 179.34236145]
[101.53395081 194.34236145]
[101.53395081 209.34236145]
[101.53395081 224.34236145]
[101.53395081 239.34236145]
[101.53395081 254.34236145]
[101.53395081 269.34237671]
[101.53395081 284.34237671]
[101.53395081 299.34237671]
[101.53395081 314.34237671]
[116.07384491 318.40368652]
[128.97822571 326.23818970]
[139.28950500 337.26452637]
[146.24252319 350.66445923]
[149.32133484 365.44360352]
[148.29743958 380.50527954]
[143.24684143 394.73181152]
[134.54431152 407.06747437]
[122.83564758 416.59689331]
[108.98970795 422.61291504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[28 127]
[30 48]
[31 47]
[32 46]
[33 45]
[50 125]
[51 124]
[52 123]
[53 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
