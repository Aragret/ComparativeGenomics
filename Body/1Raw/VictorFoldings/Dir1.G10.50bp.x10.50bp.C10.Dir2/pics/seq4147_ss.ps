%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCACUAGGGGGGGGGGCAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAxxxxxxxxxxUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACCCCCCCCCCCUCAUCACUA\
) } def
/len { sequence length } bind def

/coor [
[54.90355682 408.99652100]
[41.05761719 402.98049927]
[29.34895515 393.45108032]
[20.64643097 381.11538696]
[15.59582901 366.88888550]
[14.57193851 351.82720947]
[17.65073776 337.04803467]
[24.60375977 323.64810181]
[34.91504288 312.62176514]
[47.81942368 304.78726196]
[62.35931015 300.72595215]
[62.35931015 285.72595215]
[62.35931015 270.72595215]
[62.35931015 255.72595215]
[62.35931015 240.72595215]
[62.35931015 225.72595215]
[62.35931015 210.72595215]
[62.35931015 195.72595215]
[62.35931015 180.72595215]
[62.35931015 165.72595215]
[86.02344513 91.85482025]
[78.56853485 78.83850861]
[71.84169769 92.24558258]
[57.21105576 95.55381012]
[45.37042618 86.34514618]
[44.97434998 71.35037231]
[56.31232834 61.52946472]
[71.09667206 64.06032562]
[65.03366089 50.34027481]
[58.97064590 36.62022018]
[52.90763474 22.90016556]
[46.70222855 9.24392509]
[40.35509872 -4.34702635]
[26.20402718 0.66323334]
[11.63545322 4.28431082]
[-3.21459508 6.48239613]
[-18.20746422 7.23696566]
[-33.20316696 6.54097462]
[-48.06169128 4.40092134]
[-62.64429855 0.83678710]
[-76.81483459 -4.11814976]
[-90.44099426 -10.41762543]
[-103.39553833 -18.00282097]
[-115.55752563 -26.80291557]
[-126.81338501 -36.73574066]
[-137.05802917 -47.70855713]
[-146.19581604 -59.61891174]
[-154.14140320 -72.35559082]
[-160.82061768 -85.79968262]
[-166.17109680 -99.82566071]
[-170.14288330 -114.30255127]
[-172.69888306 -129.09519958]
[-173.81523132 -144.06547546]
[-173.48150635 -159.07360840]
[-171.70083618 -173.97947693]
[-168.48983765 -188.64389038]
[-163.87849426 -202.92993164]
[-157.90986633 -216.70422363]
[-150.63966370 -229.83813477]
[-142.13578796 -242.20904541]
[-132.47763062 -253.70146179]
[-121.75536346 -264.20806885]
[-110.06911469 -273.63073730]
[-97.52799225 -281.88156128]
[-84.24909210 -288.88342285]
[-70.35639191 -294.57101440]
[-55.97961807 -298.89117432]
[-41.25299835 -301.80358887]
[-26.31403542 -303.28106689]
[-11.30221748 -303.30981445]
[3.64229321 -301.88955688]
[18.37996101 -299.03356934]
[32.77317810 -294.76852417]
[46.68756104 -289.13418579]
[59.99318314 -282.18322754]
[72.56581879 -273.98052979]
[84.28807831 -264.60266113]
[95.05049896 -254.13722229]
[104.75260925 -242.68188477]
[113.30381012 -230.34364319]
[120.62426758 -217.23767090]
[126.64561462 -203.48634338]
[131.31164551 -189.21807861]
[134.57879639 -174.56607056]
[136.41654968 -159.66712952]
[136.80775452 -144.66038513]
[135.74874878 -129.68594360]
[133.24943542 -114.88361359]
[129.33312988 -100.39160919]
[124.03642273 -86.34524536]
[117.40875244 -72.87566376]
[109.51200104 -60.10864258]
[100.41991425 -48.16337585]
[90.21736908 -37.15140152]
[78.99963379 -27.17553139]
[66.87144470 -18.32891655]
[53.94604874 -10.69415569]
[60.29317856 2.89679527]
[66.01013947 7.65725708]
[66.62768555 16.83715248]
[72.69070435 30.55720711]
[78.75371552 44.27725983]
[84.81672668 57.99731445]
[91.58483887 71.38359833]
[99.03974915 84.39990997]
[112.35490417 91.30690765]
[127.28921509 89.90460205]
[142.22352600 88.50229645]
[153.52360535 77.11425018]
[169.45640564 78.99184418]
[177.79965210 92.69475555]
[172.15310669 107.71128845]
[156.84832764 112.52203369]
[143.62582397 103.43660736]
[128.69151306 104.83891296]
[113.75720978 106.24121094]
[111.27198792 121.03457642]
[108.78697205 135.82662964]
[122.44321442 142.03202820]
[136.09945679 148.23744202]
[149.75569153 154.44285583]
[166.01626587 152.31546021]
[175.77276611 165.49661255]
[168.98854065 180.42666626]
[152.64262390 181.74685669]
[143.55029297 168.09909058]
[129.89404297 161.89367676]
[116.23780823 155.68827820]
[102.58156586 149.48286438]
[89.96987915 157.60478210]
[77.35931396 165.72595215]
[77.35931396 180.72595215]
[77.35931396 195.72595215]
[77.35931396 210.72595215]
[77.35931396 225.72595215]
[77.35931396 240.72595215]
[77.35931396 255.72595215]
[77.35931396 270.72595215]
[77.35931396 285.72595215]
[77.35931396 300.72595215]
[91.89920044 304.78726196]
[104.80358124 312.62176514]
[115.11486053 323.64810181]
[122.06788635 337.04803467]
[125.14668274 351.82720947]
[124.12279510 366.88888550]
[119.07218933 381.11538696]
[110.36966705 393.45108032]
[98.66100311 402.98049927]
[84.81506348 408.99652100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 105]
[22 104]
[28 103]
[29 102]
[30 101]
[31 100]
[32 98]
[33 97]
[106 116]
[107 115]
[108 114]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
