%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUAAUACUGGGGGGGGGGAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCACUCCCUCUxxxxxxxxxxCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCCCCCCCCCCCGAAUAAUUCU\
) } def
/len { sequence length } bind def

/coor [
[83.67495728 378.64389038]
[70.45475769 371.37142944]
[59.56795502 360.92443848]
[51.75682449 348.01516724]
[47.55394363 333.52386475]
[47.24586868 318.43850708]
[50.85361099 303.78768921]
[58.13118362 290.57031250]
[68.58238983 279.68753052]
[81.49465179 271.88140869]
[95.98758698 267.68411255]
[95.67553711 252.68736267]
[95.36347961 237.69059753]
[95.05142212 222.69384766]
[94.73936462 207.69709778]
[94.42730713 192.70034790]
[94.11524963 177.70358276]
[93.80319977 162.70683289]
[93.49114227 147.71008301]
[93.17908478 132.71333313]
[92.86702728 117.71657562]
[82.48339081 107.61081696]
[82.18195343 93.12443542]
[92.13621521 82.59548187]
[91.82416534 67.59873199]
[91.51210785 52.60197449]
[76.52066803 51.96219254]
[61.59999084 50.37287903]
[46.81015778 47.84043121]
[32.21071625 44.37505341]
[17.86045647 39.99069214]
[3.81716466 34.70500565]
[-9.86261368 28.53927994]
[-23.12379456 21.51833725]
[-35.91297913 13.67045307]
[-48.17866898 5.02722549]
[-59.87147141 -4.37654066]
[-70.94431305 -14.50298023]
[-81.35259247 -25.31131744]
[-91.05441284 -36.75802994]
[-100.01070404 -48.79702759]
[-108.18539429 -61.37982941]
[-115.54557800 -74.45577240]
[-122.06161499 -87.97219849]
[-127.70726013 -101.87468719]
[-132.45977783 -116.10725403]
[-136.30004883 -130.61259460]
[-139.21260071 -145.33229065]
[-141.18569946 -160.20709229]
[-142.21141052 -175.17707825]
[-142.28559875 -190.18197632]
[-141.40795898 -205.16136169]
[-139.58203125 -220.05494690]
[-136.81517029 -234.80271912]
[-133.11851501 -249.34532166]
[-128.50694275 -263.62417603]
[-122.99903870 -277.58181763]
[-116.61697388 -291.16201782]
[-109.38643646 -304.31008911]
[-101.33656311 -316.97311401]
[-92.49974823 -329.10006714]
[-82.91158295 -340.64215088]
[-72.61067963 -351.55288696]
[-61.63851166 -361.78829956]
[-50.03925705 -371.30722046]
[-37.85963058 -380.07131958]
[-25.14867020 -388.04525757]
[-11.95755863 -395.19699097]
[1.66058624 -401.49768066]
[15.65092850 -406.92196655]
[29.95713425 -411.44799805]
[44.52159500 -415.05755615]
[59.28566742 -417.73611450]
[74.18990326 -419.47290039]
[89.17427826 -420.26086426]
[104.17846680 -420.09689331]
[119.14204407 -418.98162842]
[134.00476074 -416.91955566]
[148.70677185 -413.91897583]
[163.18887329 -409.99197388]
[177.39274597 -405.15435791]
[191.26119995 -399.42562866]
[204.73838806 -392.82882690]
[217.77005005 -385.39053345]
[230.30371094 -377.14068604]
[242.28889465 -368.11251831]
[253.67735291 -358.34234619]
[264.42321777 -347.86959839]
[274.48321533 -336.73635864]
[283.81683350 -324.98748779]
[292.38650513 -312.67028809]
[300.15771484 -299.83438110]
[307.09918213 -286.53140259]
[313.18292236 -272.81497192]
[318.38449097 -258.74029541]
[322.68289185 -244.36407471]
[326.06085205 -229.74415588]
[328.50473022 -214.93942261]
[330.00473022 -200.00950623]
[330.55480957 -185.01451111]
[330.15270996 -170.01481628]
[328.80007935 -155.07081604]
[326.50238037 -140.24270630]
[323.26882935 -125.59017181]
[319.11248779 -111.17222595]
[314.05004883 -97.04692078]
[308.10189819 -83.27113342]
[301.29202271 -69.90033722]
[293.64785767 -56.98837280]
[285.20010376 -44.58722687]
[275.98284912 -32.74684525]
[266.03320312 -21.51489258]
[255.39118958 -10.93660545]
[244.09968567 -1.05457580]
[232.20414734 8.09140396]
[219.75250244 16.46450615]
[206.79486084 24.03101540]
[193.38340759 30.76046371]
[179.57214355 36.62575531]
[165.41668701 41.60326767]
[150.97404480 45.67296219]
[136.30235291 48.81845093]
[121.46070862 51.02706909]
[106.50885773 52.28992081]
[106.82091522 67.28667450]
[107.13297272 82.28342438]
[117.51660919 92.38918304]
[117.81804657 106.87556458]
[107.86378479 117.40451813]
[108.17583466 132.40127563]
[108.48789215 147.39802551]
[108.79994965 162.39477539]
[109.11200714 177.39152527]
[109.42406464 192.38829041]
[109.73612213 207.38504028]
[110.04817200 222.38179016]
[110.36022949 237.37854004]
[110.67228699 252.37530518]
[110.98434448 267.37203979]
[125.63933563 270.96282959]
[138.86514282 278.22506714]
[149.76000977 288.66366577]
[157.58111572 301.56689453]
[161.79518127 316.05496216]
[162.11489868 331.14004517]
[158.51847839 345.79364014]
[151.25111389 359.01666260]
[140.80830383 369.90750122]
[127.90208435 377.72360229]
[113.41239166 381.93209839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 126]
[25 125]
[26 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
