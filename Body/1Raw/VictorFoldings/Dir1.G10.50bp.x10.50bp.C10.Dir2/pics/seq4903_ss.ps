%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACCAAUGGGGGGGGGGCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUxxxxxxxxxxAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUCCCCCCCCCCUACUACUAAU\
) } def
/len { sequence length } bind def

/coor [
[68.08930206 364.50488281]
[54.86910248 357.23242188]
[43.98229980 346.78543091]
[36.17116928 333.87619019]
[31.96828651 319.38485718]
[31.66021538 304.29953003]
[35.26795578 289.64871216]
[42.54552841 276.43130493]
[52.99673843 265.54855347]
[65.90899658 257.74240112]
[80.40193176 253.54510498]
[80.08988190 238.54835510]
[79.77782440 223.55160522]
[79.46576691 208.55485535]
[79.15370941 193.55809021]
[78.84165192 178.56134033]
[78.52959442 163.56459045]
[78.21754456 148.56784058]
[77.90548706 133.57107544]
[67.13467407 123.13127136]
[52.13549042 123.28730774]
[38.41654968 131.16773987]
[25.60947990 123.56325531]
[10.61029148 123.71929169]
[-4.38889742 123.87532806]
[-19.38565063 124.18738556]
[-34.37834549 124.65542603]
[-38.10155106 127.16525269]
[-42.03537750 128.21218872]
[-45.68141937 127.91512299]
[-48.63446808 126.54636383]
[-50.62542343 124.48640442]
[-65.60514069 123.70656586]
[-80.58485413 122.92671967]
[-95.56456757 122.14687347]
[-106.09232330 133.70976257]
[-121.59635925 135.74908447]
[-134.75614929 127.30194855]
[-139.35803223 112.35682678]
[-133.22914124 97.97034454]
[-119.26335907 90.93537140]
[-104.05489349 94.57359314]
[-94.78472137 107.16716003]
[-79.80500793 107.94700623]
[-64.82529449 108.72684479]
[-49.84557724 109.50669098]
[-34.84638977 109.66272736]
[-19.85369301 109.19468689]
[-13.22337914 105.82057953]
[-4.54493380 108.87613678]
[10.45425510 108.72010040]
[25.45344353 108.56406403]
[38.09954071 100.69479370]
[51.97945023 108.28811646]
[66.97863770 108.13208008]
[66.68821716 98.21313477]
[69.25659180 88.82511139]
[74.35318756 80.75721741]
[81.44005585 74.65398407]
[89.82679749 70.96403503]
[98.73693848 69.90821075]
[107.37955475 71.46890259]
[115.01937103 75.40100861]
[125.89819336 65.07380676]
[136.77702332 54.74660110]
[147.65585327 44.41939545]
[158.53466797 34.09218979]
[169.41349792 23.76498413]
[160.38299561 11.76715755]
[152.77903748 -1.18188155]
[146.70075989 -14.91331482]
[142.22740173 -29.24812508]
[139.41726685 -43.99942780]
[138.30702209 -58.97491074]
[138.91111755 -73.97933960]
[141.22167969 -88.81710052]
[145.20860291 -103.29474640]
[150.81988525 -117.22353363]
[157.98239136 -130.42187500]
[166.60273743 -142.71771240]
[176.56854248 -153.95071411]
[187.74987793 -163.97447205]
[200.00096130 -172.65827942]
[213.16209412 -179.88894653]
[227.06167603 -185.57218933]
[241.51850891 -189.63391113]
[256.34411621 -192.02117920]
[271.34521484 -192.70285034]
[286.32626343 -191.67005920]
[301.09188843 -188.93624878]
[315.44964600 -184.53706360]
[329.21231079 -178.52987671]
[342.20050049 -170.99298096]
[354.24487305 -162.02464294]
[365.18838501 -151.74177551]
[374.88839722 -140.27845764]
[383.21841431 -127.78412628]
[390.06985474 -114.42166138]
[395.35342407 -100.36528015]
[399.00018311 -85.79824066]
[400.96264648 -70.91043854]
[401.21517944 -55.89598083]
[399.75454712 -40.95060349]
[396.59973145 -26.26915741]
[391.79187012 -12.04303932]
[385.39367676 1.54228175]
[377.48855591 14.30969334]
[368.17956543 26.09274483]
[357.58804321 36.73782349]
[345.85211182 46.10614395]
[333.12475586 54.07557678]
[319.57186890 60.54221725]
[305.37017822 65.42176056]
[290.70483398 68.65060425]
[275.76702881 70.18663788]
[260.75149536 70.00984192]
[245.85397339 68.12252045]
[231.26872253 64.54927826]
[217.18586731 59.33670044]
[203.78901672 52.55274963]
[191.25280762 44.28585815]
[179.74070740 34.64381027]
[168.86187744 44.97101593]
[157.98304749 55.29822159]
[147.10423279 65.62542725]
[136.22540283 75.95262909]
[125.34657288 86.27983093]
[130.03771973 102.20139313]
[125.15158081 118.82260132]
[111.49409485 130.62550354]
[92.90223694 133.25901794]
[93.21429443 148.25578308]
[93.52635193 163.25253296]
[93.83840942 178.24928284]
[94.15046692 193.24603271]
[94.46251678 208.24279785]
[94.77457428 223.23954773]
[95.08663177 238.23629761]
[95.39868927 253.23304749]
[110.05368042 256.82382202]
[123.27948761 264.08609009]
[134.17436218 274.52468872]
[141.99545288 287.42788696]
[146.20951843 301.91595459]
[146.52925110 317.00103760]
[142.93281555 331.65466309]
[135.66545105 344.87765503]
[125.22265625 355.76849365]
[112.31642914 363.58459473]
[97.82673645 367.79309082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 55]
[21 54]
[23 52]
[24 51]
[25 50]
[26 48]
[27 47]
[32 46]
[33 45]
[34 44]
[35 43]
[63 127]
[64 126]
[65 125]
[66 124]
[67 123]
[68 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
