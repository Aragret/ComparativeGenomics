%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACCCCCCGGGGGGGGGGAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAxxxxxxxxxxCAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCCCCCCCCCCCUACCCACC\
) } def
/len { sequence length } bind def

/coor [
[83.40357208 436.55578613]
[69.55763245 430.53976440]
[57.84897232 421.01034546]
[49.14645004 408.67468262]
[44.09584808 394.44815063]
[43.07195663 379.38647461]
[46.15075684 364.60729980]
[53.10377884 351.20736694]
[63.41506195 340.18103027]
[76.31944275 332.34652710]
[90.85932922 328.28521729]
[90.85932922 313.28521729]
[90.85932922 298.28521729]
[90.85932922 283.28521729]
[90.85932922 268.28521729]
[90.85932922 253.28521729]
[90.85932922 238.28521729]
[90.85932922 223.28521729]
[90.85932922 208.28521729]
[90.85932922 193.28521729]
[82.51077271 184.47563171]
[82.42634583 171.93721008]
[91.19942474 162.42475891]
[91.51148224 147.42799377]
[68.31021881 136.29364014]
[54.14946747 114.80536652]
[39.33171082 117.13647461]
[31.27942467 121.58760071]
[24.18173409 119.35859680]
[9.31868744 121.38092804]
[-5.54435921 123.40326691]
[-20.40740585 125.42559814]
[-33.03602219 135.88743591]
[-48.31431198 129.92875671]
[-50.52528381 113.67934418]
[-37.39447784 103.85519409]
[-22.42974091 110.56255341]
[-7.56669378 108.54022217]
[7.29635334 106.51788330]
[22.15940094 104.49555206]
[37.00060654 102.31871033]
[51.81836319 99.98760986]
[53.62594604 86.92646027]
[58.90660477 74.84442139]
[67.26485443 64.64634705]
[78.07472992 57.09600830]
[90.52664185 52.75885773]
[89.90266418 37.77183914]
[89.27868652 22.78482437]
[74.30713654 21.59737396]
[59.58788300 18.61391830]
[45.33558273 13.87796497]
[31.75806999 7.45857763]
[19.05334854 -0.55062979]
[7.40668821 -10.03285980]
[-3.01206636 -20.84983253]
[-12.05097961 -32.84380722]
[-19.57823944 -45.83987427]
[-25.48407364 -59.64850998]
[-29.68235779 -74.06835175]
[-32.11186981 -88.88910675]
[-32.73718262 -103.89465332]
[-31.54917145 -118.86615753]
[-28.56516457 -133.58529663]
[-23.82868004 -147.83741760]
[-17.40878487 -161.41468811]
[-9.39910221 -174.11911011]
[0.08356348 -185.76542664]
[10.90092659 -196.18377686]
[22.89523697 -205.22222900]
[35.89158630 -212.74900818]
[49.70044327 -218.65432739]
[64.12043762 -222.85206604]
[78.94128418 -225.28103638]
[93.94685364 -225.90577698]
[108.91831970 -224.71720886]
[123.63734436 -221.73265076]
[137.88929749 -216.99563599]
[151.46632385 -210.57522583]
[164.17044067 -202.56507874]
[175.81639099 -193.08197021]
[186.23434448 -182.26422119]
[195.27235413 -170.26957703]
[202.79864502 -157.27294922]
[208.70344543 -143.46386719]
[212.90065002 -129.04371643]
[215.32905579 -114.22277069]
[215.95324707 -99.21717834]
[214.76411438 -84.24576569]
[211.77900696 -69.52684784]
[207.04145813 -55.27507782]
[200.62054443 -41.69828415]
[192.60990906 -28.99446297]
[183.12637329 -17.34886551]
[172.30824280 -6.93132544]
[160.31324768 2.10624290]
[147.31634521 9.63204384]
[133.50703430 15.53632927]
[119.08673096 19.73299599]
[104.26570129 22.16084671]
[104.88967896 37.14786148]
[105.51365662 52.13488007]
[120.16596222 56.24152374]
[132.80680847 64.71284485]
[142.17535400 76.70388031]
[147.33712769 91.01857758]
[162.32983398 90.55052948]
[177.32252502 90.08248901]
[185.93539429 77.17520142]
[200.50170898 71.82709503]
[215.42041016 76.09461975]
[224.95497131 88.33683777]
[225.43914795 103.84635925]
[216.68676758 116.65945435]
[202.06329346 121.84922791]
[187.19175720 117.42011261]
[177.79057312 105.07518768]
[162.79786682 105.54322815]
[147.80517578 106.01126862]
[146.42745972 112.88258362]
[144.06752014 119.48135376]
[140.77529907 125.66797638]
[136.62042236 131.31156921]
[131.69081116 136.29272461]
[126.09075165 140.50608826]
[119.93871307 143.86248779]
[113.36484528 146.29093933]
[106.50823975 147.74005127]
[106.19618225 162.73681641]
[115.45043945 178.62197876]
[105.85932922 193.28521729]
[105.85932922 208.28521729]
[105.85932922 223.28521729]
[105.85932922 238.28521729]
[105.85932922 253.28521729]
[105.85932922 268.28521729]
[105.85932922 283.28521729]
[105.85932922 298.28521729]
[105.85932922 313.28521729]
[105.85932922 328.28521729]
[120.39921570 332.34652710]
[133.30360413 340.18103027]
[143.61488342 351.20736694]
[150.56790161 364.60729980]
[153.64669800 379.38647461]
[152.62281799 394.44815063]
[147.57220459 408.67468262]
[138.86968994 421.01034546]
[127.16102600 430.53976440]
[113.31508636 436.55578613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[26 42]
[27 41]
[29 40]
[30 39]
[31 38]
[32 37]
[47 102]
[48 101]
[49 100]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
