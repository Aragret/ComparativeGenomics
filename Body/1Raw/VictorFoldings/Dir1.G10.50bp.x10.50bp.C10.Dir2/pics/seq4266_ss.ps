%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCUCCCGGGGGGGGGGUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCxxxxxxxxxxUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCCCCCCCCCCCUAACCUCGC\
) } def
/len { sequence length } bind def

/coor [
[106.19432068 460.16583252]
[92.34838104 454.14978027]
[80.63971710 444.62039185]
[71.93719482 432.28469849]
[66.88659668 418.05819702]
[65.86270142 402.99652100]
[68.94150543 388.21734619]
[75.89452362 374.81741333]
[86.20581055 363.79107666]
[99.11019135 355.95657349]
[113.65007782 351.89526367]
[113.65007782 336.89526367]
[113.65007782 321.89526367]
[113.65007782 306.89526367]
[113.65007782 291.89526367]
[113.65007782 276.89526367]
[113.65007782 261.89526367]
[113.65007782 246.89526367]
[113.65007782 231.89526367]
[113.65007782 216.89526367]
[113.65007782 201.89526367]
[113.65007782 186.89526367]
[101.26931000 175.55618286]
[100.88124084 158.43504333]
[113.21108246 146.06927490]
[112.89903259 131.07252502]
[112.58697510 116.07576752]
[100.19402313 119.12709808]
[89.28967285 114.26594543]
[84.06163025 104.45703125]
[69.35366821 101.51154327]
[54.64570618 98.56606293]
[39.93774414 95.62058258]
[30.84218597 97.00719452]
[24.95587540 92.45780182]
[10.31237316 89.20697021]
[1.28427994 101.47129059]
[-11.95485020 108.99759674]
[-27.11125565 110.48192596]
[-41.55900192 105.66709900]
[-52.79492569 95.38731384]
[-58.87233734 81.42361450]
[-58.73828506 66.19528961]
[-52.41600037 52.34073639]
[-41.00085068 42.26034546]
[-26.47058678 37.70060349]
[-11.34265804 39.45151138]
[1.76192713 47.20971680]
[10.57272053 59.63106155]
[13.56319904 74.56346893]
[28.20669937 77.81430054]
[42.88322449 80.91262054]
[57.59118652 83.85810089]
[72.29914856 86.80358124]
[87.00711060 89.74906921]
[102.97392273 81.75730133]
[119.21565247 93.09920502]
[127.46794128 80.57324219]
[135.72023010 68.04728699]
[143.97251892 55.52132034]
[136.41607666 40.84894180]
[137.26614380 24.46074677]
[146.19755554 10.80571556]
[160.70408630 3.54331660]
[176.80104065 4.56297731]
[184.79096985 -8.13195229]
[171.09974670 -2.00409150]
[156.10906982 -1.47526824]
[142.02009583 -6.62313223]
[130.90155029 -16.69179726]
[124.38603973 -30.20283508]
[123.43025970 -45.17235565]
[128.17456055 -59.40230942]
[137.92231750 -70.80324554]
[151.24220276 -77.70111084]
[166.17840576 -79.08306885]
[180.53776550 -74.74617767]
[192.21185303 -65.32726288]
[199.48646545 -52.20934296]
[201.29347229 -37.31858444]
[197.36782837 -22.84206200]
[208.66682434 -32.70778656]
[219.96583557 -42.57350922]
[231.26483154 -52.43923187]
[242.56384277 -62.30495453]
[243.40637207 -79.74707031]
[256.32736206 -90.98681641]
[273.04696655 -89.46617889]
[284.13830566 -99.56482697]
[295.22961426 -109.66347504]
[291.87466431 -124.65147400]
[296.47851562 -139.30412292]
[307.80273438 -149.67994690]
[322.80117798 -152.98788452]
[337.43933105 -148.33813477]
[347.77960205 -136.98144531]
[351.04049683 -121.97270966]
[346.34490967 -107.34921265]
[334.95584106 -97.04458618]
[319.93698120 -93.83073425]
[305.32824707 -98.57215881]
[294.23693848 -88.47351074]
[283.14562988 -78.37486267]
[284.34405518 -65.50782776]
[277.79760742 -54.14039612]
[265.71310425 -48.55536270]
[252.42956543 -51.00595093]
[241.13055420 -41.14022446]
[229.83155823 -31.27450371]
[218.53254700 -21.40877914]
[207.23355103 -11.54305744]
[197.48588562 -0.14203601]
[189.49597168 12.55289364]
[196.66360474 24.21841812]
[198.09892273 37.90121841]
[193.46363831 50.92510986]
[183.61245728 60.71791840]
[170.43606567 65.31943512]
[156.49848938 63.77360916]
[148.24620056 76.29957581]
[139.99389648 88.82553101]
[131.74160767 101.35149384]
[127.58372498 115.76371002]
[127.89578247 130.76046753]
[128.20783997 145.75721741]
[138.96290588 153.92950439]
[142.96902466 166.62512207]
[138.97105408 179.11874390]
[128.65007019 186.89526367]
[128.65007019 201.89526367]
[128.65007019 216.89526367]
[128.65007019 231.89526367]
[128.65007019 246.89526367]
[128.65007019 261.89526367]
[128.65007019 276.89526367]
[128.65007019 291.89526367]
[128.65007019 306.89526367]
[128.65007019 321.89526367]
[128.65007019 336.89526367]
[128.65007019 351.89526367]
[143.18995667 355.95657349]
[156.09434509 363.79107666]
[166.40562439 374.81741333]
[173.35864258 388.21734619]
[176.43745422 402.99652100]
[175.41355896 418.05819702]
[170.36296082 432.28469849]
[161.66043091 444.62039185]
[149.95176697 454.14978027]
[136.10583496 460.16583252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 125]
[26 124]
[27 123]
[30 55]
[31 54]
[32 53]
[33 52]
[35 51]
[36 50]
[57 122]
[58 121]
[59 120]
[60 119]
[65 113]
[66 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[88 103]
[89 102]
[90 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
