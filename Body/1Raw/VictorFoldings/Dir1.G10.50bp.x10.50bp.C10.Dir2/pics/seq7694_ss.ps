%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCAUCCCGGGGGGGGGGUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCxxxxxxxxxxCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCCCCCCCCCCCUCCCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[97.45570374 377.47784424]
[83.60976410 371.46182251]
[71.90110779 361.93240356]
[63.19858170 349.59674072]
[58.14797974 335.37020874]
[57.12408829 320.30853271]
[60.20288849 305.52938843]
[67.15590668 292.12945557]
[77.46719360 281.10311890]
[90.37157440 273.26861572]
[104.91146088 269.20730591]
[104.91146088 254.20729065]
[104.91146088 239.20729065]
[104.91146088 224.20729065]
[104.91146088 209.20729065]
[104.91146088 194.20729065]
[104.91146088 179.20729065]
[104.91146088 164.20729065]
[104.91146088 149.20729065]
[104.91146088 134.20729065]
[90.88727570 131.40936279]
[79.95217896 123.44937897]
[73.74542999 112.31082153]
[58.97937012 114.94968414]
[56.92667770 129.93772888]
[50.34106445 143.55702209]
[39.86772156 154.47325134]
[26.53271866 161.61698914]
[11.64248466 164.28834534]
[-3.34418654 162.22560120]
[-16.95905304 155.63085938]
[-27.86827087 145.15020752]
[-35.00306702 131.81042480]
[-37.66444016 116.91840363]
[-35.59166336 101.93312073]
[-28.98780441 88.32266998]
[-18.49983978 77.42047882]
[-5.15527534 70.29462433]
[9.73852444 67.64322662]
[24.72241783 69.72604370]
[38.32843399 76.33902740]
[49.22359848 86.83428955]
[56.34050751 100.18363190]
[71.10655975 97.54476166]
[74.03958130 81.08726501]
[86.39548492 67.49130249]
[74.14630127 57.47790909]
[76.69168854 42.80241013]
[71.20465851 28.84201813]
[56.46597290 31.83239555]
[41.43192673 32.21780777]
[26.55938339 29.98653984]
[12.30030155 25.20639992]
[-0.91199934 18.02265358]
[-12.67601299 8.65360260]
[-22.63424492 -2.61603618]
[-30.48407364 -15.44379139]
[-35.98695374 -29.43984222]
[-38.97565842 -44.17886353]
[-39.35936356 -59.21295547]
[-37.12641144 -74.08524323]
[-32.34465408 -88.34378815]
[-25.15940857 -101.55526733]
[-15.78902435 -113.31822205]
[-4.51825666 -123.27517700]
[8.31038857 -131.12355042]
[22.30706215 -136.62484741]
[37.04642487 -139.61187744]
[52.08055878 -139.99388123]
[66.95259857 -137.75923157]
[81.21059418 -132.97586060]
[94.42126465 -125.78911591]
[106.18315125 -116.41740417]
[116.13882446 -105.14550018]
[123.98574829 -92.31597137]
[129.48545837 -78.31867218]
[132.47080994 -63.57897186]
[132.85110474 -48.54479218]
[130.61477661 -33.67300797]
[125.82979584 -19.41555405]
[118.64154816 -6.20569897]
[109.26850128 5.55512619]
[97.99546814 15.50952244]
[85.16504669 23.35498810]
[90.65207672 37.31537628]
[102.50878906 46.33023453]
[100.35587311 62.00427628]
[115.03240204 65.10260010]
[125.69402313 54.55130768]
[136.35565186 44.00001526]
[147.01727295 33.44872665]
[157.67890930 22.89743614]
[161.48138428 6.94521904]
[177.27276611 2.52210140]
[188.80824280 14.17820644]
[184.22109985 29.92273331]
[168.23019409 33.55906296]
[157.56857300 44.11035156]
[146.90693665 54.66164398]
[136.24531555 65.21292877]
[125.58368683 75.76422119]
[133.89692688 91.69569397]
[133.23280334 109.47852325]
[147.95013428 103.67243958]
[159.51805115 113.05501556]
[174.38108826 115.07734680]
[189.24414062 117.09968567]
[204.10717773 119.12201691]
[211.14276123 105.69531250]
[222.34834290 95.48693848]
[236.37078857 89.72961426]
[251.51681519 89.11855316]
[265.95748901 93.72755432]
[277.94900513 103.00004578]
[286.04336548 115.81634521]
[289.26309204 130.62881470]
[287.21939087 145.64877319]
[280.15908813 159.06248474]
[268.93472290 169.25019836]
[254.90168762 174.98167419]
[239.75454712 175.56481934]
[225.32238770 170.92921448]
[213.34797668 161.63462830]
[205.27726746 148.80343628]
[202.08485413 133.98506165]
[187.22180176 131.96273804]
[172.35874939 129.94039917]
[157.49571228 127.91806030]
[143.84147644 133.86880493]
[131.21046448 124.34156799]
[119.91146088 134.20729065]
[119.91146088 149.20729065]
[119.91146088 164.20729065]
[119.91146088 179.20729065]
[119.91146088 194.20729065]
[119.91146088 209.20729065]
[119.91146088 224.20729065]
[119.91146088 239.20729065]
[119.91146088 254.20729065]
[119.91146088 269.20730591]
[134.45135498 273.26861572]
[147.35572815 281.10311890]
[157.66700745 292.12945557]
[164.62004089 305.52938843]
[167.69883728 320.30853271]
[166.67494202 335.37020874]
[161.62434387 349.59674072]
[152.92181396 361.93240356]
[141.21315002 371.46182251]
[127.36721802 377.47784424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 44]
[24 43]
[46 87]
[48 85]
[49 84]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[103 130]
[105 128]
[106 127]
[107 126]
[108 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
