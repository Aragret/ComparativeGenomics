%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCAAACCGGGGGGGGGGCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUxxxxxxxxxxCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCCCCCCCCCCCUAGACCAAACC\
) } def
/len { sequence length } bind def

/coor [
[82.01236725 389.76647949]
[69.67925262 381.11535645]
[59.58080673 369.93640137]
[52.22355270 356.79034424]
[47.97653198 342.33660889]
[47.05277634 327.30017090]
[49.49861526 312.43527222]
[55.19136810 298.48748779]
[63.84548950 286.15649414]
[75.02689362 276.06072998]
[88.17472076 268.70666504]
[102.62948608 264.46316528]
[101.70607758 249.49160767]
[100.78266144 234.52006531]
[99.85924530 219.54850769]
[98.93583679 204.57696533]
[98.01242065 189.60540771]
[97.08900452 174.63386536]
[96.16559601 159.66230774]
[95.24217987 144.69076538]
[94.31876373 129.71920776]
[85.83180237 126.73518372]
[78.59734344 121.38771057]
[73.25492096 114.14951324]
[58.67117310 117.65867615]
[44.08742523 121.16784668]
[29.50367546 124.67701721]
[25.22607803 139.42820740]
[14.13486767 150.05273438]
[-0.78647888 153.69265747]
[-15.52419281 149.36883545]
[-26.11390305 138.24438477]
[-29.70703125 123.31169891]
[-25.33704376 108.58760834]
[-14.17944527 98.03282166]
[0.76442677 94.48651886]
[15.47474480 98.90263367]
[25.99450874 110.09326172]
[40.57825851 106.58409882]
[55.16200638 103.07492828]
[69.74575806 99.56576538]
[70.95410156 87.91694641]
[76.64589691 77.16812134]
[86.29031372 69.03735352]
[98.70416260 64.96028900]
[93.86434937 50.76253891]
[89.02452850 36.56478500]
[84.18471527 22.36703300]
[79.34490204 8.16928101]
[76.78546906 22.94931221]
[67.74845123 34.92145538]
[53.50523376 39.62578964]
[39.11536026 35.39121628]
[29.69047356 23.72196007]
[28.57852364 8.76323223]
[36.17290497 -4.16981220]
[49.78060150 2.14133668]
[40.86444855 -9.92109489]
[25.27594566 -13.71294498]
[18.65222740 -28.32478714]
[26.07444382 -42.54766464]
[41.84890747 -45.47100449]
[53.87479782 -34.85227203]
[52.92687988 -18.83724594]
[61.84303284 -6.77481413]
[76.08972168 -11.46861458]
[76.08972168 -26.46861458]
[76.08972168 -41.46861649]
[76.08972168 -56.46861649]
[62.03253555 -62.25341415]
[51.26266479 -72.98087311]
[45.42243195 -87.01512146]
[45.40243530 -102.21604156]
[51.20572281 -116.26560974]
[61.94733810 -127.02136230]
[75.98925781 -132.84312439]
[91.19019318 -132.84312439]
[105.23210907 -127.02136230]
[115.97372437 -116.26560974]
[121.77700806 -102.21604156]
[121.75701141 -87.01512146]
[115.91678619 -72.98087311]
[105.14691162 -62.25341415]
[91.08972168 -56.46861649]
[91.08972168 -41.46861649]
[91.08972168 -26.46861458]
[91.08972168 -11.46861458]
[93.54264832 3.32946420]
[98.38246918 17.52721596]
[103.22228241 31.72496986]
[108.06210327 45.92272186]
[112.90191650 60.12047577]
[126.11710358 67.21688080]
[140.62573242 63.40901947]
[127.43369293 56.26966858]
[120.81499481 42.80887985]
[123.21617126 28.00231743]
[133.74964905 17.32309532]
[148.52183533 14.71869659]
[162.07229614 21.15181541]
[169.39222717 34.24450684]
[167.77589417 49.15716553]
[157.82167053 60.37690735]
[172.75769043 58.99288559]
[187.69369507 57.60886002]
[202.62971497 56.22483444]
[207.90673828 41.90296936]
[218.88114929 31.29519844]
[233.37400818 26.50770569]
[248.50770569 28.49104691]
[261.27746582 36.85143280]
[269.14782715 49.92889786]
[270.55615234 65.12690735]
[265.22274780 79.42787933]
[254.20664978 89.99234772]
[239.69505310 94.72273254]
[224.56927490 92.67980957]
[211.83255005 84.26920319]
[204.01373291 71.16084290]
[189.07772827 72.54486847]
[174.14170837 73.92889404]
[159.20570374 75.31291962]
[144.43357849 77.91764832]
[129.92495728 81.72550201]
[133.50886536 93.66516113]
[132.63758850 105.75527954]
[127.66801453 116.43246460]
[119.47120667 124.40234375]
[109.29031372 128.79579163]
[110.21372986 143.76734924]
[111.13714600 158.73889160]
[112.06055450 173.71044922]
[112.98397064 188.68199158]
[113.90738678 203.65354919]
[114.83079529 218.62509155]
[115.75421143 233.59664917]
[116.67762756 248.56819153]
[117.60103607 263.53973389]
[132.46772766 265.97479248]
[146.41963196 271.65737915]
[158.75692749 280.30255127]
[168.86079407 291.47659302]
[176.22442627 304.61907959]
[180.47843933 319.07077026]
[181.40948486 334.10675049]
[178.97085571 348.97283936]
[173.28486633 362.92337036]
[164.63671875 375.25857544]
[153.46020508 385.35974121]
[140.31594849 392.72018433]
[125.86323547 396.97070312]
[110.82701874 397.89810181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 41]
[25 40]
[26 39]
[27 38]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[57 65]
[58 64]
[66 87]
[67 86]
[68 85]
[69 84]
[93 124]
[94 123]
[103 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
