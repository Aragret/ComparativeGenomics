%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACGCUUAGGGGGGGGGGGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAAxxxxxxxxxxCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACCCCCCCCCCCAAACACUUAG\
) } def
/len { sequence length } bind def

/coor [
[87.45463562 381.07669067]
[74.58135986 373.17382812]
[64.45706940 361.96331787]
[57.90248489 348.35397339]
[55.44896698 333.44903564]
[57.29540253 318.45681763]
[63.29211426 304.59259033]
[72.95297241 292.98034668]
[85.49481964 284.56140137]
[99.90094757 280.01824951]
[99.58889008 265.02148438]
[99.27683258 250.02473450]
[98.96477509 235.02796936]
[98.65271759 220.03121948]
[98.34066772 205.03446960]
[98.02861023 190.03771973]
[97.71655273 175.04095459]
[97.40449524 160.04420471]
[97.09243774 145.04745483]
[96.78038025 130.05070496]
[74.90104675 108.39996338]
[84.47480011 83.42298889]
[78.41178131 69.70293427]
[72.34877014 55.98288345]
[66.28575897 42.26282883]
[65.91114044 57.25815201]
[54.58743286 67.09550476]
[39.68697739 65.37023926]
[30.91079521 53.20559692]
[33.97265244 38.52142334]
[46.87867355 30.87796783]
[31.94436646 32.28026962]
[17.01005745 33.68257523]
[3.95717692 43.61002731]
[-11.06001759 37.02095413]
[-12.59312344 20.69362640]
[0.93498778 11.42420101]
[15.60775471 18.74826813]
[30.54206276 17.34596443]
[45.47636795 15.94366074]
[50.98723602 0.03541358]
[63.16088867 -7.28660917]
[61.60330963 -22.20552063]
[49.61159897 -32.14718628]
[48.24451828 -47.29927063]
[57.79627609 -58.67026520]
[56.23869324 -73.58917999]
[40.70759583 -65.71398163]
[20.04967308 -68.68782043]
[7.96968460 -77.58016968]
[-8.04343987 -76.60067749]
[-18.68586540 -88.60560608]
[-15.79363441 -104.38580322]
[-1.58541846 -111.83604431]
[13.03945446 -105.24114990]
[16.86203384 -89.66015625]
[28.94202232 -80.76780701]
[35.86363220 -83.65594482]
[49.70684814 -89.43221283]
[56.62845993 -92.32035065]
[58.80529404 -107.16155243]
[60.98213196 -122.00276184]
[63.15896988 -136.84396362]
[65.33580780 -151.68516541]
[58.25993729 -162.51965332]
[60.42049026 -174.87080383]
[70.11320496 -182.17550659]
[72.59832001 -196.96821594]
[75.08344269 -211.76092529]
[61.48913956 -218.34663391]
[50.30184174 -228.49656677]
[42.42845535 -241.38789368]
[38.50723267 -255.97558594]
[38.85605240 -271.07708740]
[43.44664001 -285.46817017]
[51.90685654 -297.98220825]
[63.55086517 -307.60476685]
[77.43474579 -313.55578613]
[92.43299103 -315.35284424]
[107.32975769 -312.85021973]
[120.91743469 -306.25085449]
[132.09452820 -296.08969116]
[139.95495605 -283.19046021]
[143.86152649 -268.59884644]
[143.49752808 -253.49771118]
[138.89248657 -239.11125183]
[130.41970825 -226.60569763]
[118.76603699 -216.99484253]
[104.87619019 -211.05778503]
[89.87614441 -209.27580261]
[87.39102936 -194.48309326]
[84.90590668 -179.69038391]
[91.93515015 -163.64077759]
[80.17700958 -149.50833130]
[78.00017548 -134.66712952]
[75.82333374 -119.82592773]
[73.64649963 -104.98471832]
[71.46966553 -90.14351654]
[71.15760803 -75.14675903]
[72.71518707 -60.22784805]
[84.40969849 -51.07503128]
[86.20182800 -35.96731949]
[76.52222443 -23.76310158]
[78.07980347 -8.84418964]
[95.92102814 9.76566696]
[80.00581360 36.19981766]
[86.06882477 49.91987228]
[92.13183594 63.63992310]
[98.19484711 77.35997772]
[105.57794189 76.69454193]
[113.16706085 78.49538422]
[120.12510681 82.80997467]
[125.61207581 89.39958191]
[128.88294983 97.74453735]
[129.38101196 107.08281708]
[143.39773560 112.42432404]
[157.41444397 117.76583862]
[171.43115234 123.10735321]
[185.00064087 115.33540344]
[200.38194275 118.15489960]
[210.31248474 130.23457336]
[210.10336304 145.87075806]
[199.85333252 157.68052673]
[184.40213013 160.08767700]
[171.04534912 151.95562744]
[166.08964539 137.12406921]
[152.07293701 131.78254700]
[138.05621338 126.44104004]
[124.03950500 121.09952545]
[111.77713776 129.73864746]
[112.08919525 144.73539734]
[112.40125275 159.73214722]
[112.71330261 174.72889709]
[113.02536011 189.72566223]
[113.33741760 204.72241211]
[113.64947510 219.71916199]
[113.96153259 234.71591187]
[114.27359009 249.71267700]
[114.58563995 264.70941162]
[114.89769745 279.70617676]
[129.48034668 283.64614868]
[142.36154175 291.53607178]
[152.49710083 302.73638916]
[159.06535339 316.33914185]
[161.53384399 331.24160767]
[159.70246887 346.23568726]
[153.71968079 360.10592651]
[144.07049561 371.72787476]
[131.53710938 380.15942383]
[117.13555908 384.71704102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 109]
[23 108]
[24 107]
[25 106]
[31 40]
[32 39]
[33 38]
[42 104]
[43 103]
[46 100]
[47 99]
[49 57]
[50 56]
[60 98]
[61 97]
[62 96]
[63 95]
[64 94]
[67 92]
[68 91]
[69 90]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
