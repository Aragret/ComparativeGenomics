%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAACUAAGGGGGGGGGGCUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCxxxxxxxxxxCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACCCCCCCCCCCACAACACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 480.08999634]
[71.19830322 474.07397461]
[59.48964310 464.54455566]
[50.78712082 452.20889282]
[45.73651886 437.98236084]
[44.71262741 422.92068481]
[47.79142761 408.14151001]
[54.74444962 394.74160767]
[65.05573273 383.71527100]
[77.96011353 375.88073730]
[92.50000000 371.81942749]
[92.50000000 356.81942749]
[92.50000000 341.81942749]
[92.50000000 326.81942749]
[92.50000000 311.81942749]
[92.50000000 296.81942749]
[92.50000000 281.81942749]
[92.50000000 266.81942749]
[92.50000000 251.81944275]
[92.50000000 236.81944275]
[78.03514099 232.98310852]
[65.04627991 225.52748108]
[54.42181396 214.95558167]
[46.89020538 201.98379517]
[42.97005844 187.49334717]
[42.93439102 172.47044373]
[46.79164505 157.93911743]
[54.28468323 144.89147949]
[64.90794373 134.21992493]
[77.94152832 126.65612030]
[92.50000000 122.72087097]
[92.50000000 107.72087097]
[88.64283752 93.22528076]
[81.18792725 80.20896912]
[70.41712189 69.76915741]
[57.17453766 62.72402191]
[43.93194962 55.67888641]
[30.68936539 48.63375092]
[17.44677925 41.58861542]
[4.20419359 34.54347992]
[-9.03839207 27.49834633]
[-20.28896523 37.65710831]
[-34.33671188 43.35242081]
[-49.48530197 43.89654922]
[-63.90546417 39.22378540]
[-75.85589600 29.89839363]
[-83.89353180 17.04645538]
[-87.04777527 2.21990705]
[-84.93774414 -12.79087448]
[-77.81822968 -26.17326546]
[-66.54895020 -36.31127548]
[-52.49073410 -41.98069000]
[-37.34116745 -42.49689865]
[-22.92963982 -37.79757309]
[-10.99641323 -28.45017242]
[-2.98248124 -15.58344269]
[0.14443424 -0.75110668]
[-1.99325716 14.25576115]
[11.24932861 21.30089569]
[24.49191475 28.34603119]
[37.73450089 35.39116669]
[50.97708511 42.43630219]
[64.21967316 49.48143387]
[77.46225739 56.52656937]
[69.89131165 43.57740784]
[65.22264862 29.32246017]
[63.66640854 14.40340710]
[65.29265594 -0.50817668]
[70.02817535 -14.74105453]
[77.65981293 -27.65454102]
[87.84403229 -38.66733932]
[100.12238312 -47.28371811]
[113.94217682 -53.11581421]
[128.68132019 -55.90110016]
[143.67633057 -55.51419449]
[158.25221252 -51.97251511]
[171.75285339 -45.43548965]
[183.57052612 -36.19737625]
[193.17324829 -24.67402840]
[200.12878418 -11.38415909]
[204.12400818 3.07399201]
[204.97909546 18.04960060]
[202.65554810 32.86854553]
[197.25796509 46.86375809]
[189.02931213 59.40525818]
[178.33998108 69.92848969]
[165.67117310 77.95975494]
[151.59315491 83.13753510]
[136.73963928 85.22875214]
[121.77925873 84.13927460]
[107.38544464 79.91813660]
[94.20423889 72.75405884]
[101.65914917 85.77037048]
[102.07102966 70.77602386]
[105.86612701 56.26405334]
[112.84744263 42.98771286]
[122.65261078 31.63611984]
[134.77268982 22.79848671]
[148.57856750 16.93353653]
[163.35365295 14.34569645]
[178.33102417 15.16928864]
[192.73327637 19.36156464]
[205.81285095 26.70491982]
[216.89082336 36.81819153]
[225.39221191 49.17644882]
[230.87573242 63.13821793]
[233.05674744 77.97880554]
[231.82206726 92.92790985]
[227.23577881 107.20957184]
[219.53591919 120.08249664]
[209.12217712 130.87850952]
[196.53506470 139.03723145]
[182.42794800 144.13517761]
[167.53305054 145.90773010]
[152.62350464 144.26290894]
[138.47320557 139.28605652]
[125.81663513 131.23550415]
[115.31073761 120.52914429]
[107.50000000 107.72087097]
[107.50000000 122.72087097]
[122.05847168 126.65612030]
[135.09205627 134.21992493]
[145.71531677 144.89147949]
[153.20835876 157.93911743]
[157.06561279 172.47044373]
[157.02993774 187.49334717]
[153.10978699 201.98379517]
[145.57818604 214.95558167]
[134.95372009 225.52748108]
[121.96485901 232.98310852]
[107.50000000 236.81944275]
[107.50000000 251.81944275]
[107.50000000 266.81942749]
[107.50000000 281.81942749]
[107.50000000 296.81942749]
[107.50000000 311.81942749]
[107.50000000 326.81942749]
[107.50000000 341.81942749]
[107.50000000 356.81942749]
[107.50000000 371.81942749]
[122.03988647 375.88073730]
[134.94427490 383.71527100]
[145.25555420 394.74160767]
[152.20857239 408.14151001]
[155.28736877 422.92068481]
[154.26348877 437.98236084]
[149.21287537 452.20889282]
[140.51036072 464.54455566]
[128.80169678 474.07397461]
[114.95575714 480.08999634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 120]
[32 119]
[33 93]
[34 92]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
