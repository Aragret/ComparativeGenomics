%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAUUAAUGGGGGGGGGGGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCAxxxxxxxxxxAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUCCCCCCCCCCACUAAUUAAU\
) } def
/len { sequence length } bind def

/coor [
[83.07094574 349.61669922]
[69.85075378 342.34423828]
[58.96394730 331.89721680]
[51.15281677 318.98797607]
[46.94993591 304.49667358]
[46.64186478 289.41131592]
[50.24960709 274.76049805]
[57.52717972 261.54312134]
[67.97838593 250.66033936]
[80.89064789 242.85420227]
[95.38358307 238.65690613]
[95.07152557 223.66015625]
[94.75947571 208.66340637]
[94.44741821 193.66665649]
[94.13536072 178.66989136]
[93.82330322 163.67314148]
[93.51124573 148.67639160]
[93.19918823 133.67964172]
[92.88713837 118.68288422]
[82.90441132 107.48711395]
[68.04135895 105.46478271]
[53.17831421 103.44244385]
[38.31526566 101.42011261]
[23.43198776 99.55249786]
[8.53008556 97.83981323]
[-6.37181711 96.12712097]
[-21.27371979 94.41442871]
[-36.17562103 92.70174408]
[-45.12443924 94.83962250]
[-51.36854553 90.79527283]
[-66.23159027 88.77293396]
[-81.09464264 86.75060272]
[-95.95768738 84.72827148]
[-106.71797180 91.91645813]
[-119.09093475 89.88450623]
[-126.49607086 80.26830292]
[-141.31382751 77.93720245]
[-156.13159180 75.60609436]
[-170.94934082 73.27499390]
[-186.05038452 79.66957855]
[-198.97396851 69.57438660]
[-196.42543030 53.37447739]
[-181.02647400 47.73493576]
[-168.61824036 58.45723343]
[-153.80047607 60.78833771]
[-138.98272705 63.11944199]
[-124.16496277 65.45054626]
[-108.18935394 58.25473404]
[-93.93535614 69.86521912]
[-79.07230377 71.88755798]
[-64.20925903 73.90988922]
[-49.34621048 75.93222809]
[-34.46293259 77.79983521]
[-19.56102943 79.51252747]
[-4.65912771 81.22521973]
[10.24277496 82.93790436]
[25.14467812 84.65059662]
[32.19445801 82.27442169]
[40.33760071 86.55706787]
[55.20064926 88.57939911]
[70.06369781 90.60173798]
[84.92674255 92.62406921]
[98.31302643 85.85595703]
[105.49553680 72.68737030]
[112.54067230 59.44478607]
[119.44766998 46.12963104]
[126.35466766 32.81447601]
[113.54854584 40.62492752]
[99.17822266 44.92536545]
[84.18682861 45.43354416]
[69.55827332 42.11611557]
[56.25263596 35.19079971]
[45.14317322 25.11211586]
[36.95901489 12.54153442]
[32.23728561 -1.69592702]
[31.28788567 -16.66585159]
[34.17311859 -31.38574982]
[40.70362854 -44.88954544]
[50.45080948 -56.29096985]
[62.77494431 -64.84173584]
[76.86719513 -69.98065948]
[91.80267334 -71.37046051]
[106.60114288 -68.91992188]
[120.29138184 -62.78988647]
[131.97488403 -53.38266373]
[140.88484192 -41.31566238]
[146.43650818 -27.38084412]
[148.26550293 -12.49276924]
[146.25178528 2.37144828]
[140.52513123 16.24046516]
[152.60511780 7.34811449]
[164.68510437 -1.54423511]
[176.76509094 -10.43658447]
[188.84507751 -19.32893372]
[189.65788269 -34.94538116]
[200.35635376 -46.35050583]
[215.88897705 -48.15915680]
[228.92175293 -39.51734924]
[233.30099487 -24.50547600]
[226.95893860 -10.21168613]
[212.89013672 -3.38506937]
[197.73742676 -7.24894619]
[185.65744019 1.64340353]
[173.57745361 10.53575325]
[161.49746704 19.42810249]
[149.41748047 28.32045174]
[139.66983032 39.72147369]
[132.76283264 53.03662872]
[125.85582733 66.35178375]
[125.56581116 73.78559875]
[118.66411591 79.86988068]
[111.48161316 93.03845978]
[122.37695312 88.10820770]
[133.83297729 84.40581512]
[148.54093933 87.35129547]
[163.24890137 90.29677582]
[179.96694946 87.47841644]
[187.30319214 102.76291656]
[174.64688110 114.04361725]
[160.30342102 105.00473785]
[145.59545898 102.05925751]
[130.88749695 99.11376953]
[125.13659668 103.92803955]
[136.63189697 113.56431580]
[149.91668701 120.52955627]
[151.51905823 135.44372559]
[140.01707458 145.07205200]
[125.61756134 140.87039185]
[121.09847260 126.56784821]
[113.63478851 113.55656433]
[107.88388824 118.37082672]
[108.19594574 133.36758423]
[108.50800323 148.36433411]
[108.82006073 163.36108398]
[109.13211060 178.35783386]
[109.44416809 193.35459900]
[109.75622559 208.35134888]
[110.06828308 223.34809875]
[110.38034058 238.34484863]
[125.03533173 241.93562317]
[138.26113892 249.19787598]
[149.15600586 259.63647461]
[156.97711182 272.53967285]
[161.19117737 287.02774048]
[161.51089478 302.11285400]
[157.91447449 316.76644897]
[150.64710999 329.98947144]
[140.20429993 340.88031006]
[127.29807281 348.69641113]
[112.80838776 352.90487671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 62]
[21 61]
[22 60]
[23 59]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[30 52]
[31 51]
[32 50]
[33 49]
[36 47]
[37 46]
[38 45]
[39 44]
[63 112]
[64 111]
[65 109]
[66 108]
[67 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
