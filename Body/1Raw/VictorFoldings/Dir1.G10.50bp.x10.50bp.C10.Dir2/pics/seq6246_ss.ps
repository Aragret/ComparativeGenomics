%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACCCCCGGGGGGGGGGACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGxxxxxxxxxxCGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCCCCCCCCCCCUCAACCCC\
) } def
/len { sequence length } bind def

/coor [
[84.47412109 417.04998779]
[71.25392151 409.77752686]
[60.36711884 399.33050537]
[52.55598831 386.42126465]
[48.35310364 371.92996216]
[48.04503250 356.84460449]
[51.65277481 342.19378662]
[58.93034744 328.97640991]
[69.38155365 318.09362793]
[82.29381561 310.28747559]
[96.78675079 306.09020996]
[96.47469330 291.09344482]
[96.16264343 276.09667969]
[95.85058594 261.09994507]
[95.53852844 246.10317993]
[95.22647095 231.10643005]
[94.91441345 216.10968018]
[94.60235596 201.11293030]
[94.29030609 186.11616516]
[93.97824860 171.11941528]
[93.66619110 156.12266541]
[71.21875000 148.59536743]
[53.82896423 132.52853394]
[44.55269623 110.74555206]
[45.02003860 87.07427979]
[31.00332451 81.73276520]
[16.98661232 76.39125061]
[2.96989918 71.04973602]
[-14.43927002 82.42951202]
[-37.26226807 74.29089355]
[-52.08002853 76.62199402]
[-62.64777374 88.69271851]
[-78.66666412 87.81259155]
[-87.84838104 74.65676880]
[-83.14949799 59.31727600]
[-68.17459106 53.56125641]
[-54.41113281 61.80423737]
[-39.59337234 59.47313309]
[-36.80104828 44.73532867]
[-49.73910522 37.14542007]
[-62.67716217 29.55550957]
[-73.97723389 39.61351776]
[-87.83315277 45.68548203]
[-102.88745117 47.17653275]
[-117.66526794 43.94058990]
[-130.71882629 36.29467773]
[-140.76925659 24.98786926]
[-146.83193970 11.12788677]
[-148.31289673 -3.92740893]
[-145.06704712 -18.70305443]
[-137.41239929 -31.75148010]
[-126.09885406 -41.79433823]
[-112.23480988 -47.84772491]
[-97.17852783 -49.31859970]
[-82.40505981 -46.06285477]
[-69.36176300 -38.39945984]
[-59.32649231 -27.07918930]
[-53.28239441 -13.21109486]
[-51.82160950 1.84617269]
[-55.08725357 16.61745453]
[-42.14919662 24.20736313]
[-29.21114159 31.79727173]
[-9.29317951 30.14803314]
[5.18364954 41.06063080]
[8.31141186 57.03302765]
[22.32812500 62.37453842]
[36.34483719 67.71604919]
[50.36154938 73.05756378]
[54.80690002 66.12590790]
[60.21294403 59.91433334]
[66.46476746 54.55488205]
[73.42946625 50.16148758]
[80.95899200 46.82754135]
[88.89328766 44.62390900]
[97.06367493 43.59744263]
[105.29649353 43.76995850]
[113.41671753 45.13778687]
[121.25173187 47.67185593]
[128.63497925 51.31829834]
[135.40953064 55.99959183]
[141.43135071 61.61623001]
[146.57244873 68.04882050]
[159.95872498 61.28070068]
[173.34501648 54.51258850]
[186.73129272 47.74447250]
[200.11758423 40.97635651]
[212.10441589 31.95882797]
[222.31790161 20.97316360]
[232.53137207 9.98749828]
[242.74485779 -0.99816614]
[241.91915894 -16.78087234]
[252.55731201 -28.46870613]
[268.34786987 -29.12748337]
[279.92257690 -18.36636543]
[280.41436768 -2.56972933]
[269.53146362 8.89055824]
[253.73051453 9.21531391]
[243.51704407 20.20097923]
[233.30355835 31.18664360]
[223.09007263 42.17230606]
[237.57643127 38.28057861]
[252.54748535 39.21212006]
[266.43966675 44.86964417]
[277.80206299 54.66228104]
[285.44802856 67.56729126]
[288.57897949 82.23688507]
[286.86798096 97.13897705]
[280.49368286 110.71720886]
[270.12182617 121.55347443]
[256.83563232 128.51603699]
[242.02272034 130.87773132]
[227.23013306 128.39190674]
[214.00280762 121.31817627]
[203.72216797 110.39532471]
[197.46195984 96.76412201]
[195.87596130 81.84820557]
[199.12983704 67.20537567]
[206.88569641 54.36264420]
[193.49940491 61.13075638]
[180.11312866 67.89887238]
[166.72683716 74.66698456]
[153.34056091 81.43510437]
[156.27655029 95.22286987]
[155.70661926 109.30823517]
[151.66627502 122.81372070]
[144.40724182 134.89796448]
[134.38171387 144.80812073]
[122.21428680 151.92683411]
[108.66294098 155.81060791]
[108.97499847 170.80735779]
[109.28705597 185.80410767]
[109.59911346 200.80087280]
[109.91117096 215.79762268]
[110.22322845 230.79437256]
[110.53527832 245.79112244]
[110.84733582 260.78787231]
[111.15939331 275.78463745]
[111.47145081 290.78140259]
[111.78350830 305.77813721]
[126.43849945 309.36892700]
[139.66430664 316.63116455]
[150.55917358 327.06976318]
[158.38027954 339.97296143]
[162.59434509 354.46102905]
[162.91406250 369.54614258]
[159.31764221 384.19973755]
[152.05027771 397.42276001]
[141.60746765 408.31359863]
[128.70124817 416.12969971]
[114.21155548 420.33816528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 68]
[26 67]
[27 66]
[28 65]
[30 38]
[31 37]
[39 62]
[40 61]
[41 60]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
