%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGACCAGGGGGGGGGGAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAAxxxxxxxxxxACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCCCCCCCCCCCUUGACCA\
) } def
/len { sequence length } bind def

/coor [
[89.85270691 389.35104370]
[76.00676727 383.33502197]
[64.29811096 373.80560303]
[55.59558487 361.46994019]
[50.54498291 347.24340820]
[49.52109146 332.18173218]
[52.59988785 317.40258789]
[59.55290985 304.00265503]
[69.86419678 292.97631836]
[82.76857758 285.14181519]
[97.30846405 281.08050537]
[97.30846405 266.08050537]
[97.30846405 251.08049011]
[97.30846405 236.08049011]
[97.30846405 221.08049011]
[97.30846405 206.08049011]
[97.30846405 191.08049011]
[97.30846405 176.08049011]
[97.30846405 161.08049011]
[97.30846405 146.08049011]
[97.30846405 131.08049011]
[81.37537384 124.59469604]
[71.46039581 110.77220917]
[70.44721985 93.98368835]
[78.44358826 79.40542603]
[63.94798660 75.54827118]
[49.45239258 71.69110870]
[34.95679474 67.83394623]
[20.46119881 63.97679138]
[5.96560192 60.11963272]
[-8.96870613 58.71732712]
[-23.92895508 59.80863953]
[-38.88920212 60.89994812]
[-50.42375183 72.05045319]
[-66.31404877 69.84179688]
[-74.37040710 55.96828079]
[-68.41268921 41.07247162]
[-53.01114273 36.58116150]
[-39.98051453 45.93970108]
[-25.02026558 44.84838867]
[-10.06001663 43.75708008]
[-23.26715660 36.64571762]
[-33.31715393 25.51029968]
[-39.04150772 11.64553261]
[-39.77465057 -3.33653998]
[-35.43133926 -17.69396400]
[-26.51656914 -29.75741577]
[-14.06685162 -38.12428665]
[0.47029540 -41.82176590]
[15.40464878 -40.41995621]
[28.99980545 -34.08183670]
[39.67506409 -23.54434204]
[46.18922806 -10.03265476]
[47.78489304 4.88223219]
[44.27653885 19.46617699]
[36.07207489 32.02351761]
[24.12543106 41.09421921]
[9.82276154 45.62403488]
[24.31835747 49.48119354]
[38.81395340 53.33835220]
[53.30955124 57.19551468]
[67.80514526 61.05267334]
[82.30074310 64.90982819]
[71.42887878 54.57529831]
[57.41394806 49.22911453]
[45.50319672 40.11133575]
[36.68402100 27.97781944]
[31.68753624 13.83444214]
[30.92794991 -1.14631307]
[34.46823120 -15.72253990]
[42.01489639 -28.68586922]
[52.94231796 -38.96163940]
[66.34461975 -45.69798660]
[81.11074066 -48.33646774]
[96.01657867 -46.65835571]
[109.82643127 -40.80276489]
[121.39546204 -31.25512314]
[129.76460266 -18.80693054]
[134.24005127 -4.49014187]
[134.45077515 10.50837803]
[130.37933350 24.94525146]
[122.36322021 37.62366104]
[111.06925201 47.49110413]
[104.44982910 60.95153427]
[116.71219635 52.31241989]
[128.97456360 43.67330170]
[141.23693848 35.03418732]
[144.40470886 29.11196327]
[149.36100769 26.16810608]
[154.19393921 26.30328369]
[166.80506897 18.18174171]
[179.41619873 10.06019974]
[176.66865540 -4.89036703]
[179.85647583 -19.75328255]
[188.49354553 -32.26205826]
[201.26277161 -40.50919724]
[216.21693420 -43.23707581]
[231.07565308 -40.02970505]
[243.57305908 -31.37618828]
[251.80339050 -18.59612465]
[254.51159668 -3.63838100]
[251.28468323 11.21609497]
[242.61473083 23.70210457]
[229.82385254 31.91562271]
[214.86256409 34.60414505]
[200.01234436 31.35769272]
[187.53775024 22.67132759]
[174.92662048 30.79286957]
[162.31549072 38.91441345]
[149.87605286 47.29655457]
[137.61367798 55.93567276]
[125.35131073 64.57479095]
[113.08894348 73.21390533]
[127.86262512 87.58130646]
[130.00154114 108.55268860]
[144.01826477 113.89420319]
[158.03497314 119.23571777]
[172.05168152 124.57722473]
[186.06840515 129.91874695]
[201.23768616 124.69642639]
[214.70071411 133.42146301]
[216.12982178 149.40072632]
[204.42871094 160.37631226]
[188.57347107 157.92869568]
[180.72688293 143.93545532]
[166.71017456 138.59393311]
[152.69346619 133.25242615]
[138.67674255 127.91091156]
[124.66003418 122.56940460]
[112.30846405 131.08049011]
[112.30846405 146.08049011]
[112.30846405 161.08049011]
[112.30846405 176.08049011]
[112.30846405 191.08049011]
[112.30846405 206.08049011]
[112.30846405 221.08049011]
[112.30846405 236.08049011]
[112.30846405 251.08049011]
[112.30846405 266.08050537]
[112.30846405 281.08050537]
[126.84835052 285.14181519]
[139.75273132 292.97631836]
[150.06401062 304.00265503]
[157.01704407 317.40258789]
[160.09584045 332.18173218]
[159.07194519 347.24340820]
[154.02134705 361.46994019]
[145.31881714 373.80560303]
[133.61015320 383.33502197]
[119.76422119 389.35104370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 41]
[32 40]
[33 39]
[84 113]
[85 112]
[86 111]
[87 110]
[90 109]
[91 108]
[92 107]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
