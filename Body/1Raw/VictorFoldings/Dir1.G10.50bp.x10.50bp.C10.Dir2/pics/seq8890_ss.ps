%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCAUACUAGGGGGGGGGGGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACxxxxxxxxxxUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCCCCCCCCCCCUCCUCAUUCUA\
) } def
/len { sequence length } bind def

/coor [
[58.77685165 452.06375122]
[44.61624908 446.90875244]
[32.02650452 438.62652588]
[21.68656731 427.66375732]
[14.15405560 414.61163330]
[9.83519077 400.17404175]
[8.96288204 385.12957764]
[11.58417225 370.28958130]
[17.55769920 356.45434570]
[26.56131744 344.36999512]
[38.10947418 334.68820190]
[51.57938766 327.93112183]
[66.24465179 324.46316528]
[66.24465179 309.46316528]
[66.24465179 294.46316528]
[66.24465179 279.46316528]
[66.24465179 264.46316528]
[66.24465179 249.46316528]
[66.24465179 234.46316528]
[66.24465179 219.46316528]
[66.24465179 204.46316528]
[66.24465179 189.46316528]
[66.24465179 174.46316528]
[58.50735092 161.73588562]
[66.24465179 147.93571472]
[58.34287643 160.68569946]
[48.14538956 171.68620300]
[36.02976608 180.52995300]
[22.44460487 186.88945007]
[7.89291286 190.52926636]
[-7.08651400 191.31462097]
[-21.93904114 189.21643066]
[-36.11473465 184.31237793]
[-49.08872223 176.78405762]
[-60.38061905 166.91020203]
[-69.57233429 155.05639648]
[-76.32352448 141.66157532]
[-80.38422394 127.22167206]
[-81.60408020 112.27136230]
[-79.93792725 97.36418152]
[-75.44744873 83.05210114]
[-68.29891205 69.86504364]
[-58.75701141 58.29127884]
[-47.17503738 48.75933456]
[-33.98183441 41.62215042]
[-19.66589928 37.14398575]
[-4.75729465 35.49065399]
[10.19196701 36.72336960]
[24.62836838 40.79649353]
[38.01738358 47.55920792]
[49.86326218 56.76111603]
[59.72740173 68.06150055]
[67.24456024 81.04196167]
[72.13641357 95.22187042]
[74.22183228 110.07619476]
[73.42364502 125.05460358]
[81.99266815 112.74315643]
[76.91374207 88.76450348]
[98.56291962 70.74522400]
[98.56291962 55.74522400]
[98.56291962 40.74522400]
[95.41872406 32.10490036]
[98.71800995 25.44199181]
[99.02201080 10.44507217]
[99.32601929 -4.55184698]
[99.63002014 -19.54876518]
[85.09883881 -23.58553314]
[72.02848816 -31.10995102]
[61.24059296 -41.64902878]
[53.41328430 -54.54026794]
[49.03859711 -68.97332001]
[48.39152145 -84.04090118]
[51.51273727 -98.79586029]
[58.20604324 -112.31068420]
[68.05068970 -123.73582458]
[80.42783356 -132.35307312]
[94.55944061 -137.62075806]
[109.55718231 -139.20774841]
[124.47829437 -137.01428223]
[138.38481140 -131.17822266]
[150.40257263 -122.06645966]
[159.77612305 -110.25174713]
[165.91622925 -96.47677612]
[168.43692017 -81.60744476]
[167.17976379 -66.57846069]
[162.22375488 -52.33455658]
[153.88044739 -39.77111435]
[142.67431641 -29.67788124]
[129.30978394 -22.68932915]
[114.62693787 -19.24476242]
[114.32293701 -4.24784279]
[114.01892853 10.74907684]
[113.71492767 25.74599648]
[113.56291962 40.74522400]
[113.56291962 55.74522400]
[113.56291962 70.74522400]
[125.33089447 80.04654694]
[139.92527771 76.58183289]
[154.51963806 73.11711884]
[169.04080200 69.35733032]
[183.48277283 65.30401611]
[194.67877197 54.12545776]
[209.02336121 58.13574219]
[223.46533203 54.08242416]
[237.90730286 50.02910995]
[252.34927368 45.97579575]
[259.86956787 32.07540131]
[275.03988647 27.64411163]
[288.86001587 35.31093216]
[293.13064575 50.52727509]
[285.31814575 64.26555634]
[270.05749512 68.37509155]
[256.40258789 60.41777039]
[241.96061707 64.47108459]
[227.51864624 68.52439880]
[213.07667542 72.57771301]
[202.91365051 83.46635437]
[187.53608704 79.74598694]
[173.09411621 83.79930115]
[169.99259949 87.50122070]
[164.51014709 89.25859070]
[157.98435974 87.71149445]
[143.38998413 91.17620850]
[128.79560852 94.64092255]
[126.08756256 108.64474487]
[117.44135284 118.84173584]
[105.73905945 123.16739655]
[94.30412292 121.31217957]
[85.73509979 133.62362671]
[81.24465179 147.93571472]
[88.98194885 161.73588562]
[81.24465179 174.46316528]
[81.24465179 189.46316528]
[81.24465179 204.46316528]
[81.24465179 219.46316528]
[81.24465179 234.46316528]
[81.24465179 249.46316528]
[81.24465179 264.46316528]
[81.24465179 279.46316528]
[81.24465179 294.46316528]
[81.24465179 309.46316528]
[81.24465179 324.46316528]
[95.90991211 327.93112183]
[109.37982941 334.68820190]
[120.92798615 344.36999512]
[129.93159485 356.45434570]
[135.90512085 370.28958130]
[138.52641296 385.12957764]
[137.65411377 400.17404175]
[133.33525085 414.61163330]
[125.80273438 427.66375732]
[115.46279907 438.62652588]
[102.87304688 446.90875244]
[88.71244812 452.06375122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[25 130]
[56 129]
[57 128]
[59 96]
[60 95]
[61 94]
[63 93]
[64 92]
[65 91]
[66 90]
[97 124]
[98 123]
[99 122]
[100 119]
[101 118]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
