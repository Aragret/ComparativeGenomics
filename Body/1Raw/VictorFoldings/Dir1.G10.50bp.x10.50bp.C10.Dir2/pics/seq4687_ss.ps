%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUCAUCGGGGGGGGGGACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAAxxxxxxxxxxACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCCCCCCCCCCCACUCAUC\
) } def
/len { sequence length } bind def

/coor [
[54.54080200 398.57803345]
[40.69486237 392.56201172]
[28.98620224 383.03259277]
[20.28367615 370.69689941]
[15.23307514 356.47039795]
[14.20918369 341.40872192]
[17.28798294 326.62954712]
[24.24100494 313.22961426]
[34.55228806 302.20327759]
[47.45666885 294.36877441]
[61.99655533 290.30746460]
[61.99655533 275.30746460]
[61.99655533 260.30746460]
[61.99655533 245.30746460]
[61.99655533 230.30746460]
[61.99655533 215.30746460]
[61.99655533 200.30746460]
[61.99655533 185.30746460]
[61.99655533 170.30746460]
[61.99655533 155.30746460]
[61.99655533 140.30746460]
[50.00972366 131.28993225]
[35.59750748 135.44783020]
[21.18529129 139.60571289]
[10.07060909 150.86512756]
[-4.30265856 146.95892334]
[-18.71487427 151.11680603]
[-24.88629532 165.48509216]
[-38.87282944 172.47872925]
[-54.07046127 168.79551697]
[-63.30333710 156.17459106]
[-62.21197128 140.57513428]
[-51.31167603 129.36274719]
[-35.74923706 127.83157349]
[-22.87276268 136.70458984]
[-8.46054649 132.54670715]
[1.62327862 121.58468628]
[17.02740479 125.19349670]
[31.43962097 121.03560638]
[45.85183716 116.87771606]
[47.24799728 109.50881958]
[32.51019287 106.71649170]
[17.77238655 103.92417145]
[3.03462410 101.13161469]
[5.82740402 86.39389801]
[20.56471062 89.18636322]
[35.30251694 91.97868347]
[50.04032516 94.77101135]
[51.43648529 87.40210724]
[39.54410553 78.26037598]
[27.65172577 69.11863708]
[11.33249760 67.50159454]
[4.82073259 52.45071793]
[14.81517601 39.44905853]
[31.03440094 41.87160873]
[36.79346085 57.22626114]
[48.68584061 66.36799622]
[60.57822037 75.50972748]
[74.83759308 65.30749512]
[90.65346527 61.82319641]
[105.24733734 64.63555908]
[116.40826416 72.29545593]
[126.84807587 61.52464676]
[137.28788757 50.75383759]
[147.72770691 39.98302841]
[158.16751099 29.21221924]
[167.55467224 17.51259613]
[175.80696106 4.98663378]
[184.05924988 -7.53932810]
[192.31153870 -20.06529045]
[182.09848022 -31.14585304]
[174.83863831 -44.34082031]
[170.95024109 -58.88109207]
[170.65510559 -73.92034149]
[173.96604919 -88.58428192]
[180.68638611 -102.02146912]
[190.42156982 -113.45275879]
[202.60241699 -122.21648407]
[216.51834106 -127.80675507]
[231.35879517 -129.90263367]
[246.26052856 -128.38659668]
[260.35775757 -123.35109711]
[268.61004639 -135.87705994]
[276.86233521 -148.40301514]
[269.90823364 -162.09739685]
[270.74899292 -177.43325806]
[279.15847778 -190.28533936]
[292.87457275 -197.19648743]
[308.20773315 -196.30766296]
[321.03338623 -187.85792542]
[327.90151978 -174.12022400]
[326.96463013 -158.78993225]
[318.47473145 -145.99082947]
[304.71557617 -139.16578674]
[289.38830566 -140.15072632]
[281.13601685 -127.62477112]
[272.88372803 -115.09880829]
[283.07415771 -104.13323975]
[290.34829712 -91.03947449]
[294.27954102 -76.57651520]
[294.63519287 -61.58393860]
[291.39019775 -46.93313599]
[284.72894287 -33.47667694]
[275.03479004 -21.99869347]
[262.86791992 -13.16918182]
[248.93299866 -7.50490427]
[234.03840637 -5.33913994]
[219.04934692 -6.80207777]
[204.83750916 -11.81300068]
[196.58522034 0.71296096]
[188.33293152 13.23892307]
[180.08064270 25.76488495]
[194.50076294 21.63452911]
[208.90679932 25.81377220]
[218.87771606 37.02005768]
[221.35357666 51.81431961]
[215.57453918 65.65638733]
[203.31414795 74.29830933]
[188.33494568 75.08798218]
[175.23387146 67.78307343]
[168.03146362 54.62536621]
[168.93832397 39.65203094]
[158.49850464 50.42284012]
[148.05870056 61.19364929]
[137.61888123 71.96445465]
[127.17906952 82.73526764]
[135.58038330 103.49489594]
[128.44204712 127.12703705]
[106.20229340 142.40576172]
[76.99655914 140.30746460]
[76.99655914 155.30746460]
[76.99655914 170.30746460]
[76.99655914 185.30746460]
[76.99655914 200.30746460]
[76.99655914 215.30746460]
[76.99655914 230.30746460]
[76.99655914 245.30746460]
[76.99655914 260.30746460]
[76.99655914 275.30746460]
[76.99655914 290.30746460]
[91.53644562 294.36877441]
[104.44082642 302.20327759]
[114.75210571 313.22961426]
[121.70513153 326.62954712]
[124.78392792 341.40872192]
[123.76004028 356.47039795]
[118.70943451 370.69689941]
[110.00691223 383.03259277]
[98.29824829 392.56201172]
[84.45230865 398.57803345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 40]
[23 39]
[24 38]
[26 36]
[27 35]
[49 58]
[50 57]
[51 56]
[62 126]
[63 125]
[64 124]
[65 123]
[66 122]
[67 112]
[68 111]
[69 110]
[70 109]
[82 97]
[83 96]
[84 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
