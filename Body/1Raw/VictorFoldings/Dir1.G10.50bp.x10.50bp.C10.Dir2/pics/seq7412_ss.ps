%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAAAAGGGGGGGGGGGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAxxxxxxxxxxAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACCCCCCCCCCCUACAAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[97.68263245 396.19458008]
[84.80935669 388.29168701]
[74.68506622 377.08117676]
[68.13047791 363.47183228]
[65.67695618 348.56692505]
[67.52339935 333.57467651]
[73.52011108 319.71047974]
[83.18096924 308.09820557]
[95.72281647 299.67926025]
[110.12893677 295.13610840]
[109.81687927 280.13934326]
[109.50482941 265.14260864]
[109.19277191 250.14584351]
[108.88071442 235.14909363]
[108.56865692 220.15234375]
[108.25659943 205.15557861]
[107.94454193 190.15882874]
[107.63249207 175.16207886]
[107.32043457 160.16532898]
[107.00837708 145.16856384]
[106.69631958 130.17181396]
[100.75012970 125.60094452]
[91.60820007 137.49317932]
[79.71612549 128.35104370]
[88.85774994 116.45921326]
[82.91156006 111.88834381]
[68.33885956 115.44310760]
[53.76615524 118.99787140]
[39.19345093 122.55263519]
[29.66566086 135.46002197]
[13.62904644 135.91450500]
[3.38552809 123.56745148]
[6.79305601 107.89044952]
[21.23766708 100.90956116]
[35.63869095 107.97992706]
[50.21139526 104.42516327]
[64.78409576 100.87040710]
[79.35679626 97.31564331]
[80.75915527 82.38066864]
[82.16140747 67.44702911]
[68.50516510 61.24161911]
[54.84892273 55.03621292]
[41.19268417 48.83080673]
[27.53644180 42.62540054]
[13.88020039 36.41999054]
[0.22395939 30.21458626]
[-16.69757462 29.16671944]
[-20.37500572 12.61640739]
[-5.48950100 4.50110817]
[6.42936659 16.55834389]
[20.08560753 22.76375198]
[33.74184799 28.96915817]
[47.39809036 35.17456436]
[61.05433273 41.37997437]
[74.71057129 47.58538055]
[88.36681366 53.79078674]
[102.97570801 50.38780975]
[105.73930359 34.80984116]
[119.79120636 29.87088013]
[129.29956055 18.26953888]
[138.80792236 6.66819715]
[148.31628418 -4.93314409]
[157.82463074 -16.53448486]
[167.33299255 -28.13582611]
[176.84135437 -39.73716736]
[186.34971619 -51.33850861]
[175.94126892 -62.16443253]
[166.88632202 -74.14543152]
[159.31199646 -87.11331177]
[153.32463074 -100.88603210]
[149.00827026 -115.27024078]
[146.42350769 -130.06399536]
[145.60662842 -145.05963135]
[146.56910706 -160.04663086]
[149.29743958 -174.81459045]
[153.75329590 -189.15618896]
[159.87414551 -202.87010193]
[167.57406616 -215.76380920]
[176.74494934 -227.65631104]
[187.25804138 -238.38063049]
[198.96578979 -247.78622437]
[211.70379639 -255.74105835]
[225.29325867 -262.13345337]
[239.54341125 -266.87368774]
[254.25418091 -269.89520264]
[269.21905518 -271.15554810]
[284.22796631 -270.63708496]
[299.07022095 -268.34707642]
[313.53744507 -264.31765747]
[327.42651367 -258.60540771]
[340.54248047 -251.29049683]
[352.70120239 -242.47564697]
[363.73199463 -232.28457642]
[373.48001099 -220.86036682]
[381.80838013 -208.36338806]
[388.60021973 -194.96907043]
[393.76016235 -180.86547852]
[397.21575928 -166.25057983]
[398.91851807 -151.32955933]
[398.84451294 -136.31187439]
[396.99481201 -121.40835571]
[393.39538574 -106.82821655]
[388.09671021 -92.77614594]
[381.17324829 -79.44941711]
[372.72213745 -67.03511047]
[362.86203003 -55.70750809]
[351.73132324 -45.62562561]
[339.48632812 -36.93099976]
[326.29895020 -29.74569130]
[312.35424805 -24.17057037]
[297.84802246 -20.28389931]
[282.98394775 -18.14024544]
[267.97064209 -17.76969910]
[253.01890564 -19.17746544]
[238.33862305 -22.34377861]
[224.13587952 -27.22418976]
[210.61006165 -33.75018692]
[197.95104980 -41.83015060]
[188.44268799 -30.22880936]
[178.93434143 -18.62746811]
[169.42597961 -7.02612686]
[159.91761780 4.57521439]
[150.40925598 16.17655563]
[140.90090942 27.77789688]
[131.39254761 39.37923813]
[129.30905151 54.12740326]
[114.57704926 59.89616776]
[139.40107727 94.45446777]
[121.69307709 129.85975647]
[122.00512695 144.85650635]
[122.31718445 159.85327148]
[122.62924194 174.85002136]
[122.94129944 189.84677124]
[123.25335693 204.84352112]
[123.56541443 219.84028625]
[123.87746429 234.83703613]
[124.18952179 249.83378601]
[124.50157928 264.83053589]
[124.81363678 279.82730103]
[125.12569427 294.82403564]
[139.70832825 298.76400757]
[152.58953857 306.65396118]
[162.72509766 317.85427856]
[169.29335022 331.45703125]
[171.76184082 346.35946655]
[169.93046570 361.35357666]
[163.94767761 375.22378540]
[154.29849243 386.84573364]
[141.76510620 395.27728271]
[127.36355591 399.83493042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 38]
[27 37]
[28 36]
[29 35]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[57 127]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
