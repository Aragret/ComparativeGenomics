%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCGUAUGGGGGGGGGGUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAxxxxxxxxxxAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUCCCCCCCCCCACAACCGUAU\
) } def
/len { sequence length } bind def

/coor [
[89.43151093 384.02346802]
[75.58557129 378.00744629]
[63.87690735 368.47802734]
[55.17438507 356.14236450]
[50.12378311 341.91583252]
[49.09989166 326.85415649]
[52.17868805 312.07501221]
[59.13171005 298.67507935]
[69.44299316 287.64874268]
[82.34737396 279.81423950]
[96.88726044 275.75292969]
[96.88726044 260.75292969]
[96.88726044 245.75291443]
[96.88726044 230.75291443]
[96.88726044 215.75291443]
[96.88726044 200.75291443]
[96.88726044 185.75291443]
[96.88726044 170.75291443]
[96.88726044 155.75291443]
[96.88726044 140.75291443]
[73.64282227 126.64606476]
[66.04192352 102.96639252]
[74.95695496 82.25046539]
[65.20930481 70.84944153]
[55.46165085 59.44842148]
[45.71399689 48.04740143]
[41.60053635 62.47235870]
[27.84147644 68.44632721]
[14.49357891 61.60281754]
[11.31307602 46.94388199]
[20.62465858 35.18401718]
[35.62171173 34.91846085]
[27.11062241 22.56688690]
[12.90913296 15.59348965]
[12.05879021 0.72317755]
[3.54770017 -11.62839508]
[-4.96338987 -23.97996712]
[-13.47448063 -36.33153915]
[-21.98557091 -48.68311310]
[-30.49666023 -61.03468323]
[-43.97943115 -54.39896774]
[-58.28471756 -49.79716110]
[-73.10760498 -47.32735062]
[-88.13213348 -47.04218292]
[-103.03806305 -48.94773483]
[-117.50766754 -53.00339127]
[-131.23252869 -59.12270355]
[-143.92010498 -67.17523956]
[-155.29995728 -76.98935699]
[-165.12951660 -88.35587311]
[-173.19926453 -101.03250122]
[-179.33720398 -114.74904633]
[-183.41250610 -129.21313477]
[-185.33830261 -144.11645508]
[-185.07353210 -159.14135742]
[-182.62384033 -173.96759033]
[-178.04145813 -188.27911377]
[-171.42405701 -201.77087402]
[-162.91267395 -214.15531921]
[-152.68875122 -225.16844177]
[-140.97018433 -234.57551575]
[-128.00677490 -242.17604065]
[-114.07482910 -247.80798340]
[-99.47131348 -251.35130310]
[-84.50749969 -252.73049927]
[-69.50234222 -251.91615295]
[-54.77568054 -248.92561340]
[-40.64141083 -243.82264709]
[-27.40080643 -236.71601868]
[-15.33609295 -227.75718689]
[-4.70442963 -217.13713074]
[4.26756907 -205.08221436]
[11.38866425 -191.84938049]
[16.50707054 -177.72068787]
[19.51368523 -162.99729919]
[20.34442711 -147.99304199]
[18.98158646 -133.02774048]
[15.45421028 -118.42035675]
[9.83748817 -104.48226929]
[2.25113940 -91.51056671]
[-7.14313269 -79.78173065]
[-18.14508820 -69.54577637]
[-9.63399792 -57.19420242]
[-1.12290764 -44.84262848]
[7.38818264 -32.49105835]
[15.89927292 -20.13948441]
[24.41036224 -7.78791285]
[38.00308228 -1.69798183]
[39.46219254 14.05579758]
[47.97328568 26.40736961]
[57.11501694 38.29975128]
[66.86267090 49.70077133]
[76.61032104 61.10179138]
[86.35797119 72.50281525]
[100.60965729 69.31077576]
[114.72332764 73.06630707]
[125.50386047 82.91921234]
[135.89459229 70.98844147]
[150.48352051 73.99050140]
[164.60832214 68.94174957]
[178.73312378 63.89299393]
[183.99630737 49.16774368]
[197.51937866 41.31531525]
[212.91716003 44.04338837]
[222.91928101 56.06384659]
[222.80307007 71.70099640]
[212.62336731 83.57145691]
[197.18673706 86.07035828]
[183.78187561 78.01779175]
[169.65707397 83.06655121]
[155.53227234 88.11531067]
[146.15184021 99.68495941]
[130.55261230 97.04401398]
[135.73110962 101.93472290]
[140.01881409 108.30564117]
[154.43103027 112.46353149]
[168.84324646 116.62141418]
[183.52592468 110.15623474]
[197.66763306 117.73194885]
[200.42007446 133.53712463]
[189.67179871 145.44738770]
[173.66798401 144.32618713]
[164.68536377 131.03363037]
[150.27314758 126.87574005]
[135.86093140 122.71785736]
[129.86750793 127.22662354]
[142.14772034 135.84036255]
[137.75018311 150.18127441]
[122.75225067 150.43035889]
[117.88067627 136.24415588]
[111.88726044 140.75291443]
[111.88726044 155.75291443]
[111.88726044 170.75291443]
[111.88726044 185.75291443]
[111.88726044 200.75291443]
[111.88726044 215.75291443]
[111.88726044 230.75291443]
[111.88726044 245.75291443]
[111.88726044 260.75292969]
[111.88726044 275.75292969]
[126.42714691 279.81423950]
[139.33152771 287.64874268]
[149.64282227 298.67507935]
[156.59584045 312.07501221]
[159.67463684 326.85415649]
[158.65074158 341.91583252]
[153.60014343 356.14236450]
[144.89761353 368.47802734]
[133.18894958 378.00744629]
[119.34301758 384.02346802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 94]
[24 93]
[25 92]
[26 91]
[32 90]
[33 89]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[97 113]
[99 111]
[100 110]
[101 109]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
