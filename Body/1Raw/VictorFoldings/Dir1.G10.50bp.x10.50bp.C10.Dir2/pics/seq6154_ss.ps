%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCUCCCGGGGGGGGGGGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCxxxxxxxxxxCUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACACCCCCCCCCCUACUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[49.28343582 488.62707520]
[34.79374313 484.41857910]
[21.88751411 476.60247803]
[11.44471264 465.71163940]
[4.17734861 452.48864746]
[0.58092248 437.83502197]
[0.90064412 422.74993896]
[5.11471462 408.26187134]
[12.93581200 395.35864258]
[23.83067894 384.92004395]
[37.05648804 377.65780640]
[51.71147919 374.06704712]
[52.02353668 359.07028198]
[52.33559418 344.07351685]
[52.64764786 329.07678223]
[52.95970535 314.08001709]
[53.27176285 299.08325195]
[53.58381653 284.08651733]
[53.89587402 269.08975220]
[54.20793152 254.09300232]
[54.51998520 239.09625244]
[42.62760544 229.95451355]
[28.21539116 234.11239624]
[13.80317497 238.27029419]
[-0.60904098 242.42817688]
[-15.02125740 246.58605957]
[-19.33896828 261.39691162]
[-30.99358749 271.50497437]
[-46.26616669 273.68487549]
[-60.28327942 267.24096680]
[-68.57212067 254.22947693]
[-68.48774719 238.80233765]
[-60.05708694 225.88229370]
[-45.97032547 219.59208679]
[-30.72250366 221.93888855]
[-19.17914391 232.17384338]
[-4.76692820 228.01596069]
[9.64528751 223.85807800]
[24.05750465 219.70018005]
[38.46971893 215.54229736]
[38.62016678 191.03660583]
[53.20655060 172.56927490]
[75.12173462 167.21348572]
[78.82789612 152.67855835]
[82.53405762 138.14361572]
[86.24021912 123.60868073]
[73.75644684 112.00124359]
[70.13100433 94.40168762]
[77.74843597 77.11328125]
[94.76496124 66.95977783]
[91.66663361 52.28325272]
[81.27611542 44.57022095]
[79.02497101 32.23525620]
[85.58765411 22.02552795]
[82.79533386 7.28772211]
[80.00300598 -7.45008373]
[77.21067810 -22.18788910]
[74.41835785 -36.92569733]
[71.62602997 -51.66350174]
[67.02046967 -65.93896484]
[60.67333984 -79.52991486]
[54.32621002 -93.12086487]
[47.97908020 -106.71181488]
[35.79851151 -118.50461578]
[43.75852585 -133.47372437]
[60.34619522 -129.96865845]
[61.57003021 -113.05894470]
[67.91716003 -99.46799469]
[74.26428986 -85.87704468]
[80.61141968 -72.28609467]
[83.36867523 -87.03050232]
[92.15299225 -99.18927002]
[105.28516388 -106.43814087]
[120.25483704 -107.39141846]
[134.20042419 -101.86686707]
[144.45608521 -90.92056274]
[149.06134033 -76.64500427]
[147.13584900 -61.76910019]
[139.04769897 -49.13652802]
[126.34302521 -41.16212845]
[111.45043182 -39.37028885]
[97.21679688 -44.10353470]
[86.36383820 -54.45582581]
[89.15616608 -39.71802139]
[91.94848633 -24.98021507]
[94.74081421 -10.24240780]
[97.53313446 4.49539757]
[100.32546234 19.23320389]
[112.47855377 31.85470390]
[106.34316254 49.18493271]
[109.44148254 63.86145782]
[122.89744568 70.48995972]
[136.42164612 64.00179291]
[149.94583130 57.51362610]
[159.04151917 44.56838989]
[173.86331177 46.03932953]
[182.95899963 33.09409714]
[197.78079224 34.56503296]
[211.30497742 28.07686996]
[224.82916260 21.58870506]
[233.63560486 7.75473785]
[250.00546265 8.73458672]
[257.09881592 23.52026558]
[247.61865234 36.90153503]
[231.31733704 35.11289597]
[217.79313660 41.60105896]
[204.26895142 48.08922577]
[196.14060974 60.57038116]
[180.35147095 59.56351852]
[172.22312927 72.04467773]
[156.43399048 71.03781891]
[142.90980530 77.52597809]
[129.38562012 84.01414490]
[131.91847229 100.38099670]
[126.34049988 115.15507507]
[114.80036163 124.77303314]
[100.77515411 127.31484222]
[97.06899261 141.84977722]
[93.36283112 156.38471985]
[89.65666962 170.91964722]
[97.03337860 175.46304321]
[103.10157776 181.79100037]
[107.43334198 189.53253174]
[109.70462799 198.21511841]
[109.71898651 207.29356384]
[107.42342377 216.18417358]
[102.91512299 224.30224609]
[96.43840790 231.10055542]
[88.37195587 236.10614014]
[79.20684052 238.95295715]
[69.51673889 239.40830994]
[69.20468140 254.40505981]
[68.89263153 269.40182495]
[68.58057404 284.39855957]
[68.26851654 299.39532471]
[67.95645905 314.39205933]
[67.64440155 329.38882446]
[67.33234406 344.38558960]
[67.02029419 359.38232422]
[66.70823669 374.37908936]
[81.20117188 378.57638550]
[94.11343384 386.38250732]
[104.56464386 397.26528931]
[111.84221649 410.48266602]
[115.44995117 425.13351440]
[115.14188385 440.21884155]
[110.93900299 454.71014404]
[103.12786865 467.61941528]
[92.24106598 478.06640625]
[79.02086639 485.33886719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[43 120]
[44 119]
[45 118]
[46 117]
[50 91]
[51 90]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 70]
[61 69]
[62 68]
[63 67]
[92 113]
[93 112]
[94 111]
[96 109]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
