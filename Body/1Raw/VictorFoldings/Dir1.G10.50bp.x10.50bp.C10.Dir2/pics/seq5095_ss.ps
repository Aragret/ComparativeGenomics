%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCUCAAUGGGGGGGGGGCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUxxxxxxxxxxUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCCCCCCCCCCCAUCUCACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.83230591]
[71.19830322 362.81628418]
[59.48964310 353.28686523]
[50.78712082 340.95120239]
[45.73651886 326.72467041]
[44.71262741 311.66299438]
[47.79142761 296.88381958]
[54.74444962 283.48391724]
[65.05573273 272.45758057]
[77.96011353 264.62307739]
[92.50000000 260.56173706]
[92.50000000 245.56175232]
[92.50000000 230.56175232]
[92.50000000 215.56175232]
[92.50000000 200.56175232]
[92.50000000 185.56175232]
[92.50000000 170.56175232]
[92.50000000 155.56175232]
[92.50000000 140.56175232]
[92.50000000 125.56175232]
[75.98165894 111.52268219]
[75.36889648 89.85298920]
[63.66926956 80.46582794]
[51.96964645 71.07866669]
[40.27002335 61.69150543]
[29.68282318 72.33778381]
[18.02395248 81.79837799]
[5.42551947 89.96609497]
[-7.96972847 96.74838257]
[-22.01001167 102.06839752]
[-36.53624344 105.86585999]
[-51.38383102 108.09773254]
[-66.38453674 108.73873901]
[-81.36839294 107.78160858]
[-96.16562653 105.23719025]
[-110.60856628 101.13430786]
[-124.53356171 95.51945496]
[-137.78283691 88.45626068]
[-150.20626831 80.02473450]
[-161.66308594 70.32043457]
[-172.02346802 59.45330811]
[-181.17002869 47.54648590]
[-188.99914551 34.73488617]
[-195.42208862 21.16366959]
[-200.36608887 6.98661184]
[-203.77513123 -7.63565063]
[-205.61058044 -22.53743744]
[-205.85163879 -37.54989624]
[-204.49557495 -52.50292969]
[-201.55776978 -67.22710419]
[-197.07148743 -81.55558777]
[-191.08758545 -95.32602692]
[-183.67384338 -108.38238525]
[-174.91427612 -120.57673645]
[-164.90812683 -131.77088928]
[-153.76879883 -141.83802795]
[-141.62248230 -150.66407776]
[-128.60681152 -158.14901733]
[-114.86926270 -164.20806885]
[-100.56549835 -168.77253723]
[-85.85758972 -171.79072571]
[-70.91218567 -173.22845459]
[-55.89863205 -173.06939697]
[-40.98704529 -171.31536865]
[-26.34637833 -167.98625183]
[-12.14252663 -163.11976624]
[1.46357048 -156.77105713]
[14.31774521 -149.01203918]
[26.27435112 -139.93064880]
[37.19790649 -129.62977600]
[46.96464539 -118.22613525]
[55.46390152 -105.84894562]
[62.59936523 -92.63845062]
[68.29019928 -78.74433136]
[72.47190857 -64.32402039]
[75.09711456 -49.54090881]
[76.13607788 -34.56250381]
[75.57701874 -19.55851746]
[73.42627716 -4.69896173]
[69.70822144 9.84779549]
[64.46498108 23.91692924]
[57.75596237 37.34902191]
[49.65718460 49.99188232]
[61.35680771 59.37904358]
[73.05643463 68.76620483]
[84.75605774 78.15336609]
[91.80932617 74.65111542]
[99.57834625 73.36402130]
[107.38421631 74.40456390]
[114.54480743 77.68180847]
[120.43437195 82.90937042]
[124.53823853 89.63042450]
[139.44013977 87.91773224]
[154.34204102 86.20504761]
[169.24394226 84.49235535]
[184.14584351 82.77966309]
[199.04774475 81.06697845]
[200.69435120 66.09245300]
[205.63232422 51.85994339]
[213.61395264 39.08335114]
[224.23889160 28.40354156]
[236.97421265 20.35621262]
[251.18109131 15.34500980]
[266.14694214 13.62129688]
[281.12106323 15.27153301]
[295.35238647 20.21294403]
[308.12704468 28.19766998]
[318.80426025 38.82519913]
[326.84851074 51.56246185]
[331.85626221 65.77056122]
[333.57635498 80.73682404]
[331.92248535 95.71054840]
[326.97763062 109.94066620]
[318.98980713 122.71338654]
[308.35968018 133.38804626]
[295.62048340 141.42919922]
[281.41116333 146.43351746]
[266.44448853 148.14997864]
[251.47116089 146.49249268]
[237.24224854 141.54418945]
[224.47146606 133.55326843]
[213.79937744 122.92056274]
[205.76130676 110.17940521]
[200.76043701 95.96887970]
[185.85853577 97.68157196]
[170.95663452 99.39425659]
[156.05473328 101.10694885]
[141.15283203 102.81964111]
[126.25092316 104.53232574]
[119.88317108 117.72886658]
[107.50000000 125.56175232]
[107.50000000 140.56175232]
[107.50000000 155.56175232]
[107.50000000 170.56175232]
[107.50000000 185.56175232]
[107.50000000 200.56175232]
[107.50000000 215.56175232]
[107.50000000 230.56175232]
[107.50000000 245.56175232]
[107.50000000 260.56173706]
[122.03988647 264.62307739]
[134.94427490 272.45758057]
[145.25555420 283.48391724]
[152.20857239 296.88381958]
[155.28736877 311.66299438]
[154.26348877 326.72467041]
[149.21287537 340.95120239]
[140.51036072 353.28686523]
[128.80169678 362.81628418]
[114.95575714 368.83230591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 86]
[23 85]
[24 84]
[25 83]
[92 129]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
