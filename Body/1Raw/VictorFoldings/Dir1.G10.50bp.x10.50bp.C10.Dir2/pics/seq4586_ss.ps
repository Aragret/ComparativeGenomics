%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACCCCAUGGGGGGGGGGCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGxxxxxxxxxxGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAACGUUAUCGCCCCCCCCCCUCACAGCCCAU\
) } def
/len { sequence length } bind def

/coor [
[158.10517883 519.83752441]
[144.08323669 514.28448486]
[131.88328552 505.41818237]
[122.27220917 493.79586792]
[115.85418701 480.14816284]
[113.03264618 465.33297729]
[113.98496246 450.28161621]
[118.65126801 435.94018555]
[126.73823547 423.21023560]
[137.73750305 412.89196777]
[150.95767212 405.63397217]
[165.56768799 401.89254761]
[165.56768799 386.89254761]
[165.56768799 371.89254761]
[165.56768799 356.89254761]
[165.56768799 341.89254761]
[165.56768799 326.89254761]
[165.56768799 311.89254761]
[165.56768799 296.89254761]
[165.56768799 281.89254761]
[165.56768799 266.89254761]
[165.56768799 251.89254761]
[151.73051453 248.53651428]
[141.44215393 239.43432617]
[136.78042603 227.04702759]
[138.39132690 214.41517639]
[145.43797302 204.41561890]
[138.34156799 191.20043945]
[132.36946106 186.76803589]
[131.23829651 177.64025879]
[124.41471863 164.28216553]
[117.59114075 150.92407227]
[110.76756287 137.56596375]
[103.94399261 124.20787048]
[85.62413788 119.87235260]
[75.77371216 103.82920837]
[60.95122910 101.52832794]
[46.12874603 99.22745514]
[31.30626488 96.92658234]
[17.55964661 105.19761658]
[2.57303095 99.47215271]
[-2.15713263 84.14228058]
[6.99773216 70.96775818]
[23.01479721 70.05495453]
[33.60713959 82.10410309]
[48.42962265 84.40497589]
[63.25210190 86.70584869]
[78.07458496 89.00672150]
[73.80147552 84.33399963]
[70.12860107 78.98451233]
[59.79769897 68.10919952]
[49.46679688 57.23388672]
[39.13589478 46.35857391]
[28.80499077 35.48325729]
[13.20924950 36.62644577]
[0.55770707 27.43555450]
[-3.17596579 12.25024319]
[3.77115726 -1.75944984]
[18.11885643 -7.97857523]
[33.09259033 -3.47065187]
[41.62221527 9.63581657]
[39.68030548 25.15235519]
[50.01120758 36.02766800]
[60.34210968 46.90298462]
[70.67301178 57.77829742]
[81.00391388 68.65361023]
[88.44706726 67.73194885]
[84.59474945 53.23506546]
[80.74243164 38.73818207]
[76.89012146 24.24129677]
[73.03780365 9.74441147]
[63.34008789 -1.69911695]
[62.01361084 -16.64035034]
[69.54363251 -29.61335182]
[83.17545319 -35.87221909]
[97.92215729 -33.12728119]
[108.38897705 -22.38271141]
[110.74683380 -7.56918716]
[104.13327789 5.89395714]
[103.93330383 20.89262390]
[103.73332977 35.89129257]
[103.53335571 50.88995743]
[103.33337402 65.88862610]
[110.77652740 64.96696472]
[118.14276886 51.90026855]
[125.50901031 38.83357239]
[122.60021973 23.05642128]
[133.23004150 11.04033089]
[149.24418640 12.00301647]
[158.35797119 25.20598984]
[153.58007812 40.52105713]
[138.57569885 46.19981384]
[131.20945740 59.26650620]
[123.84322357 72.33319855]
[130.50553894 98.90554047]
[117.30208588 117.38429260]
[124.12566376 130.74238586]
[130.94923401 144.10049438]
[137.77281189 157.45858765]
[144.59638977 170.81669617]
[151.55674744 184.10403442]
[158.65315247 197.31921387]
[182.58122253 202.14248657]
[193.03683472 226.85108948]
[207.97285461 228.23512268]
[222.90885925 229.61914062]
[237.84487915 231.00317383]
[252.78088379 232.38719177]
[267.71688843 233.77122498]
[282.65292358 235.15524292]
[290.06747437 221.85321045]
[302.25534058 212.72216797]
[317.10488892 209.34413147]
[332.04333496 212.30436707]
[344.48248291 221.08998108]
[352.26721191 234.17883301]
[354.04876709 249.30317688]
[349.51846313 263.84265137]
[339.46121216 275.27819824]
[325.61950684 281.62850952]
[310.39147949 281.79342651]
[296.41549683 275.74429321]
[286.11297607 264.52923584]
[281.26889038 250.09126282]
[266.33288574 248.70722961]
[251.39686584 247.32321167]
[236.46084595 245.93917847]
[221.52484131 244.55516052]
[206.58882141 243.17112732]
[191.65281677 241.78710938]
[180.56768799 251.89254761]
[180.56768799 266.89254761]
[180.56768799 281.89254761]
[180.56768799 296.89254761]
[180.56768799 311.89254761]
[180.56768799 326.89254761]
[180.56768799 341.89254761]
[180.56768799 356.89254761]
[180.56768799 371.89254761]
[180.56768799 386.89254761]
[180.56768799 401.89254761]
[195.17768860 405.63397217]
[208.39785767 412.89196777]
[219.39712524 423.21023560]
[227.48410034 435.94018555]
[232.15040588 450.28161621]
[233.10272217 465.33297729]
[230.28117371 480.14816284]
[223.86315918 493.79586792]
[214.25207520 505.41818237]
[202.05212402 514.28448486]
[188.03018188 519.83752441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 102]
[28 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[36 48]
[37 47]
[38 46]
[39 45]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[84 94]
[85 93]
[86 92]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
