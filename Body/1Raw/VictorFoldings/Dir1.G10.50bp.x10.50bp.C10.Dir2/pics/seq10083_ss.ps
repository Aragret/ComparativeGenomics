%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCCCCUAGGGGGGGGGGCUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUxxxxxxxxxxCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCCCCCCCCCCCUUGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.27368164]
[71.19830322 361.25765991]
[59.48964310 351.72824097]
[50.78712082 339.39257812]
[45.73651886 325.16604614]
[44.71262741 310.10437012]
[47.79142761 295.32522583]
[54.74444962 281.92529297]
[65.05573273 270.89895630]
[77.96011353 263.06445312]
[92.50000000 259.00314331]
[92.50000000 244.00314331]
[92.50000000 229.00314331]
[92.50000000 214.00314331]
[92.50000000 199.00314331]
[92.50000000 184.00314331]
[92.50000000 169.00314331]
[92.50000000 154.00314331]
[92.50000000 139.00314331]
[92.50000000 124.00313568]
[81.57244873 117.11215973]
[75.50811768 105.70510864]
[75.90744019 92.79242706]
[82.66503143 81.78189087]
[76.03653717 68.32592773]
[69.40803528 54.86996078]
[62.77953720 41.41399384]
[48.81423569 46.91215897]
[34.44259262 51.23829269]
[19.76278496 54.36283875]
[4.87509155 56.26445770]
[-10.11878681 56.93015289]
[-25.11642647 56.35538101]
[-40.01537323 54.54406738]
[-54.71385574 51.50858688]
[-69.11146545 47.26967239]
[-83.10984802 41.85628510]
[-96.61338043 35.30539703]
[-109.52982330 27.66176605]
[-121.77093506 18.97760201]
[-133.25309753 9.31222820]
[-143.89787292 -1.26832938]
[-153.63255310 -12.69179440]
[-162.39064026 -24.88013077]
[-170.11228943 -37.75008011]
[-176.74478149 -51.21372604]
[-182.24278259 -65.17909241]
[-186.56874084 -79.55078888]
[-189.69311523 -94.23062897]
[-191.59454346 -109.11834717]
[-192.26007080 -124.11223602]
[-191.68511963 -139.10986328]
[-189.87362671 -154.00878906]
[-186.83796692 -168.70724487]
[-182.59887695 -183.10479736]
[-177.18533325 -197.10311890]
[-170.63427734 -210.60656738]
[-162.99049377 -223.52291870]
[-154.30618286 -235.76393127]
[-144.64067078 -247.24598694]
[-134.05998230 -257.89062500]
[-122.63640594 -267.62518311]
[-110.44796753 -276.38311768]
[-97.57792664 -284.10461426]
[-84.11420441 -290.73693848]
[-70.14876556 -296.23477173]
[-55.77702332 -300.56054688]
[-41.09714127 -303.68475342]
[-26.20940208 -305.58602905]
[-11.21550846 -306.25134277]
[3.78211665 -305.67623901]
[18.68102264 -303.86456299]
[33.37943268 -300.82873535]
[47.77693939 -296.58947754]
[61.77519608 -291.17575073]
[75.27857208 -284.62454224]
[88.19483185 -276.98059082]
[100.43573761 -268.29614258]
[111.91767120 -258.63049316]
[122.56219482 -248.04968262]
[132.29660034 -236.62599182]
[141.05439758 -224.43743896]
[148.77574158 -211.56730652]
[155.40789795 -198.10350037]
[160.90556335 -184.13800049]
[165.23118591 -169.76620483]
[168.35520935 -155.08628845]
[170.25630188 -140.19853210]
[170.92144775 -125.20462799]
[170.34614563 -110.20700836]
[168.53430176 -95.30812836]
[165.49829102 -80.60974884]
[161.25886536 -66.21229553]
[155.84497070 -52.21410370]
[149.29360962 -38.71080399]
[141.64952087 -25.79463768]
[132.96492004 -13.55383492]
[123.29912567 -2.07201672]
[112.71819305 8.57238483]
[101.29438019 18.30665588]
[89.10572815 27.06430054]
[76.23550415 34.78549576]
[82.86399841 48.24146271]
[89.49250031 61.69742584]
[96.12100220 75.15338898]
[115.32616425 80.06236267]
[125.00855255 97.35940552]
[139.71652222 100.30489349]
[154.42448425 103.25037384]
[169.13244629 106.19585419]
[183.87023926 108.98818207]
[198.63630676 111.62704468]
[213.40235901 114.26590729]
[228.16841125 116.90476990]
[240.99053955 107.66525269]
[256.57687378 110.28096771]
[265.68029785 123.20006561]
[262.89993286 138.75785828]
[249.88533020 147.72419739]
[234.35778809 144.77951050]
[225.52954102 131.67082214]
[210.76348877 129.03196716]
[195.99743652 126.39309692]
[181.23138428 123.75423431]
[174.04711914 125.68605804]
[166.18695068 120.90381622]
[151.47898865 117.95833588]
[136.77104187 115.01284790]
[122.06307220 112.06736755]
[115.94081116 119.44970703]
[107.50000000 124.00313568]
[107.50000000 139.00314331]
[107.50000000 154.00314331]
[107.50000000 169.00314331]
[107.50000000 184.00314331]
[107.50000000 199.00314331]
[107.50000000 214.00314331]
[107.50000000 229.00314331]
[107.50000000 244.00314331]
[107.50000000 259.00314331]
[122.03988647 263.06445312]
[134.94427490 270.89895630]
[145.25555420 281.92529297]
[152.20857239 295.32522583]
[155.28736877 310.10437012]
[154.26348877 325.16604614]
[149.21287537 339.39257812]
[140.51036072 351.72824097]
[128.80169678 361.25765991]
[114.95575714 367.27368164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 105]
[25 104]
[26 103]
[27 102]
[107 129]
[108 128]
[109 127]
[110 126]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
