%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUUAAUGGGGGGGGGGUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAAxxxxxxxxxxCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCCCCCCCCCCCUCUCCUUCAU\
) } def
/len { sequence length } bind def

/coor [
[62.81846237 152.65296936]
[51.67895126 142.66003418]
[43.14398956 130.36767578]
[37.67361450 116.43848419]
[35.56269073 101.62323761]
[36.92499161 86.72049713]
[41.68709564 72.53353119]
[49.59231186 59.82703781]
[60.21455002 49.28590012]
[72.98126221 41.47829819]
[87.20429993 36.82506943]
[85.95742798 21.87698174]
[84.71055603 6.92889500]
[83.46367645 -8.01919174]
[82.21680450 -22.96727943]
[80.96993256 -37.91536713]
[79.72305298 -52.86345291]
[78.47618103 -67.81153870]
[77.22930145 -82.75962830]
[75.98242950 -97.70771027]
[74.73555756 -112.65579987]
[59.73542786 -112.29641724]
[44.74035645 -112.82627869]
[29.80300903 -114.24353790]
[14.97585487 -116.54319763]
[0.31097519 -119.71720123]
[-14.14011860 -123.75437927]
[-28.32666588 -128.64056396]
[-42.19883728 -134.35859680]
[-55.70790482 -140.88838196]
[-68.80641174 -148.20698547]
[-81.44836426 -156.28871155]
[-93.58934021 -165.10514832]
[-105.18669891 -174.62535095]
[-116.19970703 -184.81585693]
[-126.58967590 -195.64089966]
[-136.32011414 -207.06243896]
[-145.35685730 -219.04034424]
[-153.66812134 -231.53257751]
[-161.22476196 -244.49522400]
[-168.00019836 -257.88275146]
[-173.97065735 -271.64819336]
[-179.11515808 -285.74310303]
[-183.41561890 -300.11804199]
[-186.85694885 -314.72250366]
[-189.42704773 -329.50518799]
[-191.11691284 -344.41415405]
[-191.92057800 -359.39706421]
[-191.83523560 -374.40124512]
[-190.86117554 -389.37402344]
[-189.00183105 -404.26281738]
[-186.26373291 -419.01528931]
[-182.65649414 -433.57965088]
[-178.19279480 -447.90475464]
[-172.88829041 -461.94024658]
[-166.76162720 -475.63684082]
[-159.83433533 -488.94644165]
[-152.13073730 -501.82229614]
[-143.67788696 -514.21917725]
[-134.50549316 -526.09350586]
[-124.64575195 -537.40362549]
[-114.13331604 -548.10980225]
[-103.00509644 -558.17437744]
[-91.30019379 -567.56201172]
[-79.05970764 -576.23974609]
[-66.32664490 -584.17718506]
[-53.14572906 -591.34631348]
[-39.56325531 -597.72198486]
[-25.62693787 -603.28179932]
[-11.38572598 -608.00634766]
[3.11035800 -611.87884521]
[17.81039429 -614.88580322]
[32.66275024 -617.01666260]
[47.61525345 -618.26391602]
[62.61538315 -618.62316895]
[77.61045074 -618.09320068]
[92.54778290 -616.67578125]
[107.37491608 -614.37597656]
[122.03977203 -611.20184326]
[136.49082947 -607.16455078]
[150.67733765 -602.27825928]
[164.54945374 -596.56011963]
[178.05847168 -590.03021240]
[191.15690613 -582.71148682]
[203.79878235 -574.62963867]
[215.93968201 -565.81311035]
[227.53695679 -556.29278564]
[238.54988098 -546.10217285]
[248.93975830 -535.27703857]
[258.67010498 -523.85546875]
[267.70672607 -511.87744141]
[276.01788330 -499.38516235]
[283.57440186 -486.42242432]
[290.34973145 -473.03482056]
[296.32006836 -459.26937866]
[301.46444702 -445.17437744]
[305.76477051 -430.79940796]
[309.20599365 -416.19491577]
[311.77597046 -401.41223145]
[313.46569824 -386.50323486]
[314.26922607 -371.52032471]
[314.18374634 -356.51614380]
[313.20956421 -341.54336548]
[311.35009766 -326.65460205]
[308.61187744 -311.90216064]
[305.00448608 -297.33782959]
[300.54064941 -283.01275635]
[295.23605347 -268.97729492]
[289.10925293 -255.28076172]
[282.18185425 -241.97120667]
[274.47814941 -229.09542847]
[266.02517700 -216.69863892]
[256.85269165 -204.82437134]
[246.99284363 -193.51434326]
[236.48031616 -182.80828857]
[225.35200500 -172.74382019]
[213.64701843 -163.35626221]
[201.40646362 -154.67860413]
[188.67332458 -146.74133301]
[175.49234009 -139.57232666]
[161.90982056 -133.19674683]
[147.97344971 -127.63701630]
[133.73219299 -122.91265106]
[119.23607635 -119.04023743]
[104.53601837 -116.03339386]
[89.68363953 -113.90267181]
[90.93051910 -98.95458984]
[92.17739105 -84.00650024]
[93.42426300 -69.05841064]
[94.67114258 -54.11032867]
[95.91801453 -39.16223907]
[97.16489410 -24.21415329]
[98.41176605 -9.26606655]
[99.65863800 5.68202066]
[100.90551758 20.63010788]
[102.15238953 35.57819366]
[116.94979858 37.81072235]
[130.83360291 43.39530945]
[143.05543518 52.03093719]
[152.95655823 63.25214005]
[160.00326538 76.45408630]
[163.81575012 90.92517853]
[164.18850708 105.88541412]
[161.10144043 120.52841187]
[154.72096252 134.06492615]
[145.39096069 145.76528931]
[133.61436462 154.99887085]
[120.02590942 161.26797485]
[105.35804749 164.23466492]
[90.40138245 163.73905945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
