%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUAGCCAGGGGGGGGGGAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAxxxxxxxxxxCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCCCCCCCCCCCACCCUAGCCA\
) } def
/len { sequence length } bind def

/coor [
[84.14416504 401.19332886]
[70.92397308 393.92086792]
[60.03716660 383.47384644]
[52.22603607 370.56460571]
[48.02315521 356.07330322]
[47.71508408 340.98794556]
[51.32282639 326.33712769]
[58.60039902 313.11975098]
[69.05160522 302.23696899]
[81.96386719 294.43081665]
[96.45680237 290.23355103]
[96.14474487 275.23678589]
[95.83269501 260.24002075]
[95.52063751 245.24327087]
[95.20858002 230.24652100]
[94.89652252 215.24977112]
[94.58446503 200.25302124]
[94.27240753 185.25625610]
[93.96035767 170.25950623]
[93.64830017 155.26275635]
[93.33624268 140.26600647]
[84.32913971 137.68528748]
[76.14791870 133.11849976]
[69.22373962 126.80631256]
[63.92151642 119.08139801]
[49.59891891 123.53820801]
[35.27632141 127.99502563]
[20.95372581 132.45184326]
[10.23289204 144.86134338]
[-5.82146215 141.51623535]
[-10.69399452 125.85768127]
[0.62773949 113.99385071]
[16.49691010 118.12924194]
[30.81950760 113.67243195]
[45.14210510 109.21561432]
[59.46470261 104.75879669]
[60.71381760 88.93869781]
[67.90238190 74.79088593]
[79.94359589 64.45429230]
[95.01701355 59.49164963]
[95.95264435 44.52085876]
[84.16318512 34.60547638]
[80.51544189 19.82212639]
[86.20483398 5.89033318]
[98.85544586 -1.92630982]
[99.79107666 -16.89710045]
[100.72670746 -31.86789322]
[89.70101166 -38.85467148]
[82.88106537 -49.85624695]
[81.55023193 -62.62199402]
[85.88018799 -74.58860016]
[75.66670990 -85.57426453]
[60.71442413 -82.06359863]
[46.01467514 -86.51477051]
[35.52161789 -97.73044586]
[32.05783463 -112.69365692]
[36.55506516 -127.37938690]
[47.80357361 -137.83723450]
[62.77757263 -141.25410461]
[77.44912720 -136.71086121]
[87.87166595 -125.42962646]
[91.24157715 -110.44499207]
[86.65237427 -95.78775024]
[96.86585236 -84.80208588]
[101.45848083 -90.39108276]
[107.84925079 -95.01953888]
[110.33436584 -109.81224823]
[112.81948853 -124.60494995]
[115.30460358 -139.39765930]
[101.71030426 -145.98338318]
[90.52301025 -156.13331604]
[82.64962006 -169.02464294]
[78.72840118 -183.61233521]
[79.07721710 -198.71382141]
[83.66780853 -213.10490417]
[92.12802124 -225.61894226]
[103.77203369 -235.24151611]
[117.65591431 -241.19252014]
[132.65415955 -242.98957825]
[147.55091858 -240.48696899]
[161.13859558 -233.88760376]
[172.31568909 -223.72644043]
[180.17613220 -210.82720947]
[184.08268738 -196.23558044]
[183.71870422 -181.13444519]
[179.11366272 -166.74798584]
[170.64086914 -154.24244690]
[158.98719788 -144.63159180]
[145.09735107 -138.69451904]
[130.09730530 -136.91253662]
[127.61219025 -122.11983490]
[125.12707520 -107.32712555]
[122.64196014 -92.53441620]
[135.16792297 -84.28212738]
[147.77905273 -92.40367126]
[160.39018250 -100.52521515]
[173.00129700 -108.64675903]
[180.01678467 -123.46954346]
[196.38125610 -124.53549194]
[205.26034546 -110.74803925]
[197.52000427 -96.29054260]
[181.12284851 -96.03562927]
[168.51171875 -87.91408539]
[155.90058899 -79.79254150]
[143.28945923 -71.67100525]
[138.14799500 -43.75919724]
[115.69749451 -30.93226433]
[114.76187134 -15.96147251]
[113.82624054 -0.99068129]
[125.40518951 8.34023476]
[129.31568909 22.87199211]
[123.85569763 37.08613586]
[110.92343140 45.45648575]
[109.98780823 60.42727661]
[127.55758667 69.89458466]
[138.53761292 86.56091309]
[140.30224609 106.44088745]
[154.42706299 111.48963928]
[168.60273743 104.50211334]
[183.54031372 109.66394043]
[190.37757874 123.91270447]
[185.05810547 138.79486084]
[170.73785400 145.48110962]
[155.91276550 140.00459290]
[149.37829590 125.61444855]
[135.25349426 120.56568909]
[128.22583008 129.47981262]
[119.01483154 136.11361694]
[108.33299255 139.95394897]
[108.64505005 154.95069885]
[108.95710754 169.94744873]
[109.26916504 184.94421387]
[109.58122253 199.94096375]
[109.89328003 214.93771362]
[110.20532990 229.93446350]
[110.51738739 244.93122864]
[110.82944489 259.92797852]
[111.14150238 274.92474365]
[111.45355988 289.92147827]
[126.10855103 293.51223755]
[139.33436584 300.77450562]
[150.22923279 311.21310425]
[158.05032349 324.11630249]
[162.26438904 338.60437012]
[162.58412170 353.68948364]
[158.98768616 368.34307861]
[151.72032166 381.56610107]
[141.27752686 392.45690918]
[128.37129211 400.27304077]
[113.88160706 404.48150635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 36]
[26 35]
[27 34]
[28 33]
[40 114]
[41 113]
[45 109]
[46 108]
[47 107]
[51 64]
[52 63]
[66 93]
[67 92]
[68 91]
[69 90]
[94 105]
[95 104]
[96 103]
[97 102]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
