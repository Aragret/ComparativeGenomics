%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUACAUCAGGGGGGGGGGCCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCxxxxxxxxxxGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACCCCCCCCCCCUCUGCAUCA\
) } def
/len { sequence length } bind def

/coor [
[89.57968140 377.15963745]
[75.73374176 371.14361572]
[64.02507782 361.61419678]
[55.32255554 349.27853394]
[50.27195358 335.05200195]
[49.24806213 319.99032593]
[52.32685852 305.21118164]
[59.27988052 291.81124878]
[69.59116364 280.78491211]
[82.49554443 272.95040894]
[97.03543091 268.88909912]
[97.03543091 253.88909912]
[97.03543091 238.88909912]
[97.03543091 223.88909912]
[97.03543091 208.88909912]
[97.03543091 193.88909912]
[97.03543091 178.88909912]
[97.03543091 163.88909912]
[97.03543091 148.88909912]
[97.03543091 133.88909912]
[87.36437225 127.94242096]
[81.14061737 119.75884247]
[68.20256042 127.34874725]
[57.60013199 140.57844543]
[41.95241547 134.05270386]
[43.89140320 117.21000671]
[60.61265182 114.41069031]
[73.55070496 106.82078552]
[75.62391663 87.67543793]
[89.81324005 74.65600586]
[88.25566101 59.73709106]
[86.69808197 44.81818008]
[85.14050293 29.89926720]
[83.58291626 14.98035526]
[82.02533722 0.06144308]
[80.46775818 -14.85746956]
[78.91017914 -29.77638054]
[63.90322495 -29.50650597]
[48.92862701 -30.52771187]
[34.09725189 -32.83243561]
[19.51890755 -36.40361404]
[5.30152893 -41.21480942]
[-8.44962120 -47.23039627]
[-21.63273430 -54.40584183]
[-34.15020370 -62.68801498]
[-45.90935135 -72.01560211]
[-56.82312012 -82.31953430]
[-66.81069946 -93.52353668]
[-75.79814911 -105.54465485]
[-83.71893311 -118.29387665]
[-90.51439667 -131.67681885]
[-96.13423157 -145.59439087]
[-100.53682709 -159.94355774]
[-103.68959808 -174.61807251]
[-105.56919098 -189.50930786]
[-106.16169739 -204.50697327]
[-105.46272278 -219.50007629]
[-103.47745514 -234.37757874]
[-100.22057343 -249.02934265]
[-95.71620941 -263.34689331]
[-89.99769592 -277.22421265]
[-83.10738373 -290.55856323]
[-75.09629059 -303.25122070]
[-66.02371216 -315.20822144]
[-55.95683670 -326.34103394]
[-44.97018814 -336.56723022]
[-33.14510727 -345.81109619]
[-20.56915283 -354.00418091]
[-7.33542681 -361.08584595]
[6.45808744 -367.00366211]
[20.70926666 -371.71377563]
[35.31259918 -375.18136597]
[50.15996552 -377.38073730]
[65.14143372 -378.29559326]
[80.14609528 -377.91915894]
[95.06284332 -376.25427246]
[109.78125763 -373.31320190]
[124.19234467 -369.11773682]
[138.18942261 -363.69894409]
[151.66885376 -357.09695435]
[164.53085327 -349.36062622]
[176.68017578 -340.54727173]
[188.02687073 -330.72210693]
[198.48693848 -319.95788574]
[207.98294067 -308.33432007]
[216.44454956 -295.93743896]
[223.80914307 -282.85906982]
[230.02218628 -269.19598389]
[235.03765869 -255.04937744]
[238.81845093 -240.52398682]
[241.33656311 -225.72734070]
[242.57336426 -210.76901245]
[242.51966858 -195.75971985]
[241.17590332 -180.81062317]
[238.55200195 -166.03237915]
[234.66738892 -151.53439331]
[229.55084229 -137.42404175]
[223.24021912 -123.80576324]
[215.78225708 -110.78038788]
[207.23217773 -98.44436646]
[197.65327454 -86.88902283]
[187.11647034 -76.19990540]
[175.69976807 -66.45616913]
[163.48770142 -57.72993851]
[150.57069397 -50.08583069]
[137.04438782 -43.58043671]
[123.00889587 -38.26192093]
[108.56816101 -34.16966629]
[93.82908630 -31.33396149]
[95.38667297 -16.41505051]
[96.94425201 -1.49613786]
[98.50183105 13.42277431]
[100.05941010 28.34168625]
[101.61699677 43.26059723]
[103.17457581 58.17951202]
[104.73215485 73.09842682]
[120.49879456 78.71720123]
[131.07464600 93.32307434]
[131.58090210 112.64538574]
[144.96719360 119.41349792]
[158.70892334 112.20625305]
[174.05761719 114.48596191]
[185.11140442 125.37602997]
[187.61985779 140.68901062]
[180.61842346 154.53674316]
[166.79931641 161.59449768]
[151.47625732 159.14840698]
[140.54125977 148.13906860]
[138.19908142 132.79978943]
[124.81278992 126.03166962]
[112.03543091 133.88909912]
[112.03543091 148.88909912]
[112.03543091 163.88909912]
[112.03543091 178.88909912]
[112.03543091 193.88909912]
[112.03543091 208.88909912]
[112.03543091 223.88909912]
[112.03543091 238.88909912]
[112.03543091 253.88909912]
[112.03543091 268.88909912]
[126.57531738 272.95040894]
[139.47970581 280.78491211]
[149.79098511 291.81124878]
[156.74400330 305.21118164]
[159.82279968 319.99032593]
[158.79891968 335.05200195]
[153.74830627 349.27853394]
[145.04579163 361.61419678]
[133.33712769 371.14361572]
[119.49118805 377.15963745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 28]
[23 27]
[30 116]
[31 115]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[37 109]
[119 130]
[120 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
