%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAAACUCGGGGGGGGGGCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACAxxxxxxxxxxUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACCCCCCCCCCCUAAAACACUC\
) } def
/len { sequence length } bind def

/coor [
[86.42900085 350.82775879]
[72.58306122 344.81170654]
[60.87439728 335.28228760]
[52.17187500 322.94662476]
[47.12127304 308.72012329]
[46.09738159 293.65841675]
[49.17617798 278.87927246]
[56.12919998 265.47933960]
[66.44048309 254.45301819]
[79.34486389 246.61849976]
[93.88475037 242.55718994]
[93.88475037 227.55718994]
[93.88475037 212.55718994]
[93.88475037 197.55718994]
[93.88475037 182.55718994]
[93.88475037 167.55718994]
[93.88475037 152.55718994]
[93.88475037 137.55718994]
[93.88475037 122.55718994]
[93.88475037 107.55718994]
[90.29808044 110.72186279]
[86.35340881 113.50323486]
[71.94119263 117.66111755]
[57.52897644 121.81900787]
[55.47573471 136.90887451]
[47.45688248 149.85560608]
[34.86173630 158.41610718]
[19.87247658 161.10720825]
[5.08609009 157.46267700]
[-6.93559647 148.11393738]
[-14.10975266 134.68072510]
[-15.19341183 119.49040985]
[-9.99882412 105.17481995]
[0.57401687 94.21421051]
[14.69330311 88.50757599]
[29.91278076 89.04362488]
[43.59558868 95.72948456]
[53.37108994 107.40679169]
[67.78330231 103.24890137]
[82.19551849 99.09101868]
[67.78491974 94.92752838]
[59.88632965 82.17558289]
[62.57780838 67.41902161]
[74.46974182 58.27670670]
[89.42229462 59.46882248]
[99.71543121 70.37988281]
[100.03408813 85.37841797]
[107.75817871 72.52001190]
[115.48226166 59.66160965]
[123.20634460 46.80320740]
[111.00431061 38.06497955]
[99.54498291 28.37322617]
[88.90267944 17.79080200]
[79.14642334 6.38633633]
[70.33949280 -5.76620531]
[62.53899765 -18.58800697]
[55.79553223 -31.99591637]
[50.15282822 -45.90297318]
[45.64748764 -60.21898270]
[42.30871964 -74.85110474]
[40.15818787 -89.70443726]
[39.20983124 -104.68265533]
[39.46980667 -119.68861389]
[40.93642426 -134.62498474]
[43.60017395 -149.39491272]
[47.44377899 -163.90260315]
[52.44231415 -178.05397034]
[58.56335449 -191.75721741]
[65.76721191 -204.92349243]
[74.00716400 -217.46739197]
[83.22975922 -229.30758667]
[93.37519836 -240.36724854]
[104.37768555 -250.57469177]
[116.16584778 -259.86367798]
[128.66325378 -268.17401123]
[141.78883362 -275.45175171]
[155.45745850 -281.64968872]
[169.58050537 -286.72769165]
[184.06636047 -290.65277100]
[198.82109070 -293.39947510]
[213.74899292 -294.95001221]
[228.75325012 -295.29431152]
[243.73655701 -294.43014526]
[258.60174561 -292.36312866]
[273.25238037 -289.10665894]
[287.59350586 -284.68185425]
[301.53204346 -279.11737061]
[314.97763062 -272.44937134]
[327.84307861 -264.72106934]
[340.04492188 -255.98257446]
[351.50405884 -246.29055786]
[362.14611816 -235.70790100]
[371.90213013 -224.30322266]
[380.70877075 -212.15048218]
[388.50900269 -199.32852173]
[395.25216675 -185.92045593]
[400.89456177 -172.01327515]
[405.39959717 -157.69715881]
[408.73803711 -143.06497192]
[410.88824463 -128.21159363]
[411.83627319 -113.23335266]
[411.57595825 -98.22740173]
[410.10900879 -83.29105377]
[407.44494629 -68.52118683]
[403.60101318 -54.01358414]
[398.60217285 -39.86233521]
[392.48080444 -26.15921593]
[385.27667236 -12.99310112]
[377.03643799 -0.44937703]
[367.81359863 11.39060402]
[357.66790771 22.45005417]
[346.66519165 32.65724564]
[334.87683105 41.94598389]
[322.37924194 50.25602341]
[309.25350952 57.53347015]
[295.58471680 63.73112869]
[281.46157837 68.80880737]
[266.97561646 72.73356628]
[252.22084045 75.47994995]
[237.29290771 77.03015900]
[222.28865051 77.37413788]
[207.30535889 76.50964355]
[192.44021606 74.44229126]
[177.78962708 71.18548584]
[163.44862366 66.76036072]
[149.51019287 61.19559479]
[136.06474304 54.52729416]
[128.34066772 67.38569641]
[120.61657715 80.24409485]
[112.89249420 93.10250092]
[108.88475037 107.55718994]
[108.88475037 122.55718994]
[108.88475037 137.55718994]
[108.88475037 152.55718994]
[108.88475037 167.55718994]
[108.88475037 182.55718994]
[108.88475037 197.55718994]
[108.88475037 212.55718994]
[108.88475037 227.55718994]
[108.88475037 242.55718994]
[123.42463684 246.61849976]
[136.32902527 254.45301819]
[146.64030457 265.47933960]
[153.59332275 278.87927246]
[156.67211914 293.65841675]
[155.64823914 308.72012329]
[150.59764099 322.94662476]
[141.89511108 335.28228760]
[130.18644714 344.81170654]
[116.34050751 350.82775879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 40]
[23 39]
[24 38]
[47 130]
[48 129]
[49 128]
[50 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
