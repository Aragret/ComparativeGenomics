%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCAUCUCAGGGGGGGGGGACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCxxxxxxxxxxAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUCCCCCCCCCCUACCAUCUCA\
) } def
/len { sequence length } bind def

/coor [
[89.57797241 501.34912109]
[75.73203278 495.33309937]
[64.02336884 485.80368042]
[55.32084656 473.46801758]
[50.27024460 459.24148560]
[49.24635315 444.17980957]
[52.32515335 429.40066528]
[59.27817535 416.00073242]
[69.58946228 404.97439575]
[82.49384308 397.13989258]
[97.03372955 393.07858276]
[97.03372955 378.07858276]
[97.03372955 363.07858276]
[97.03372955 348.07858276]
[97.03372955 333.07858276]
[97.03372955 318.07858276]
[97.03372955 303.07858276]
[97.03372955 288.07858276]
[97.03372955 273.07858276]
[97.03372955 258.07858276]
[97.03372955 243.07856750]
[89.29642487 230.35130310]
[97.03372955 216.55113220]
[96.72167206 201.55436707]
[96.09769440 186.56735229]
[95.47371674 171.58033752]
[94.84973907 156.59332275]
[94.22576141 141.60630798]
[93.60178375 126.61929321]
[81.87393951 120.51754761]
[74.37271881 109.63153839]
[72.84725952 96.49964142]
[59.06487656 90.57968140]
[46.77521133 94.63159180]
[35.39496231 89.36766052]
[30.82831573 78.12252808]
[17.17207527 71.91712189]
[1.40730309 73.25223541]
[-6.97893667 60.94288254]
[-20.63517761 54.73747635]
[-34.29141998 48.53206635]
[-47.94765854 42.32666016]
[-59.99055481 51.77267838]
[-75.04588318 54.52869415]
[-89.65404510 49.96139145]
[-100.45819092 39.12030792]
[-104.97560120 24.49664116]
[-102.16821289 9.45080662]
[-92.68114471 -2.55977583]
[-78.69445038 -8.77516174]
[-63.42217255 -7.76710033]
[-50.37377167 0.23276269]
[-42.54767227 13.38611698]
[-41.74225235 28.67041969]
[-28.08601189 34.87582779]
[-14.42977047 41.08123398]
[-0.77352965 47.28664017]
[14.01445675 45.50767136]
[23.37748146 58.26087952]
[37.03372192 64.46628571]
[54.35115433 61.80047989]
[64.98484039 76.79730225]
[78.76721954 82.71726227]
[85.24164581 73.08157349]
[96.08219147 66.20635986]
[95.45821381 51.21934891]
[94.83423615 36.23233032]
[80.54857635 31.03729630]
[69.34178162 20.76713753]
[62.92280197 6.98798084]
[62.27048874 -8.19895172]
[67.48431396 -22.47776413]
[77.76920319 -33.67103958]
[91.55679321 -40.07188797]
[106.74456787 -40.70422363]
[121.01651001 -35.47162247]
[132.19624329 -25.17201614]
[138.57894897 -11.37601948]
[139.19131470 3.81257725]
[133.93994141 18.07762337]
[123.62563324 29.24380302]
[109.82125092 35.60835266]
[110.44522858 50.59537125]
[111.06920624 65.58238983]
[124.08551788 73.03730011]
[137.32809448 65.99216461]
[150.57069397 58.94702530]
[163.81327820 51.90189362]
[177.05586243 44.85675812]
[190.29844666 37.81162262]
[203.54103088 30.76648712]
[208.31860352 13.97029018]
[223.45260620 5.95493412]
[239.39129639 11.22902298]
[252.48445129 3.90991783]
[265.57760620 -3.40918779]
[278.67074585 -10.72829342]
[291.76391602 -18.04739952]
[297.49670410 -33.03121567]
[312.82888794 -37.75388336]
[325.99893188 -28.59258270]
[326.90390015 -12.57507324]
[314.84957886 -1.98862088]
[299.08300781 -4.95424461]
[285.98986816 2.36486101]
[272.89669800 9.68396664]
[259.80355835 17.00307274]
[246.71040344 24.32217789]
[244.95848083 37.12559891]
[236.00386047 46.71147537]
[222.96739197 49.40933609]
[210.58616638 44.00907135]
[197.34358215 51.05420685]
[184.10099792 58.09934235]
[170.85841370 65.14447784]
[157.61582947 72.18961334]
[144.37322998 79.23474884]
[131.13064575 86.27988434]
[128.05204773 112.46968842]
[108.58879852 125.99531555]
[109.21277618 140.98233032]
[109.83675385 155.96934509]
[110.46073151 170.95635986]
[111.08470917 185.94337463]
[111.70868683 200.93038940]
[114.97260284 206.80018616]
[114.76409912 212.56106567]
[112.03372955 216.55113220]
[119.77102661 230.35130310]
[112.03372955 243.07856750]
[112.03372955 258.07858276]
[112.03372955 273.07858276]
[112.03372955 288.07858276]
[112.03372955 303.07858276]
[112.03372955 318.07858276]
[112.03372955 333.07858276]
[112.03372955 348.07858276]
[112.03372955 363.07858276]
[112.03372955 378.07858276]
[112.03372955 393.07858276]
[126.57361603 397.13989258]
[139.47799683 404.97439575]
[149.78927612 416.00073242]
[156.74229431 429.40066528]
[159.82110596 444.17980957]
[158.79721069 459.24148560]
[153.74661255 473.46801758]
[145.04408264 485.80368042]
[133.33541870 495.33309937]
[119.48947906 501.34912109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[29 120]
[32 63]
[33 62]
[36 60]
[37 59]
[39 57]
[40 56]
[41 55]
[42 54]
[65 84]
[66 83]
[67 82]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
