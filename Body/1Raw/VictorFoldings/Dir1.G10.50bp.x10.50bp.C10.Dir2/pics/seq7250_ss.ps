%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUUUCUCUAACAGGGGGGGGGGGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGxxxxxxxxxxCCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUCCCCCCCCCCUUUAUUUCUCCAACA\
) } def
/len { sequence length } bind def

/coor [
[79.74393463 725.10430908]
[65.01312256 722.05181885]
[51.09412384 716.34423828]
[38.46100998 708.17608643]
[27.54405975 697.82550049]
[18.71510506 685.64495850]
[12.27485275 672.04949951]
[8.44265556 657.50201416]
[7.34903860 642.49804688]
[9.03124809 627.54864502]
[13.43199062 613.16296387]
[20.40137672 599.83093262]
[29.70203209 588.00671387]
[41.01718140 578.09301758]
[53.96143341 570.42742920]
[68.09391022 565.27111816]
[82.93326569 562.79962158]
[83.22594452 547.80249023]
[83.51862335 532.80535889]
[83.81129456 517.80816650]
[84.10397339 502.81106567]
[84.39665222 487.81390381]
[84.68932343 472.81677246]
[84.98200226 457.81961060]
[85.27468109 442.82247925]
[85.56735229 427.82531738]
[75.08982849 417.30120850]
[75.17300415 402.08779907]
[86.28271484 391.16937256]
[86.57538605 376.17224121]
[77.27463531 361.31597900]
[86.85562897 345.61804199]
[86.85562897 330.61804199]
[86.85562897 315.61804199]
[73.03027344 309.97988892]
[62.38799667 299.44958496]
[56.57242203 285.60961914]
[56.49846268 270.55697632]
[62.20852280 256.58526611]
[72.86131287 245.83534241]
[86.85562897 239.96720886]
[86.85562897 224.96720886]
[86.85562897 209.96720886]
[86.85562897 194.96720886]
[86.85562897 179.96720886]
[84.91725922 177.87609863]
[83.71218872 174.87199402]
[83.59968567 171.23840332]
[84.82676697 167.38603210]
[87.48653412 163.80905151]
[88.65612793 148.85472107]
[89.82571411 133.90037537]
[90.99530792 118.94605255]
[82.49780273 111.56331635]
[79.04019928 100.85082245]
[81.61814880 89.89333344]
[71.92659760 78.44458771]
[62.23504639 66.99583435]
[52.54349899 55.54708481]
[42.85194778 44.09833527]
[27.24316216 39.06864166]
[24.05961227 22.98147011]
[36.57625961 12.38592720]
[51.91705322 18.18179703]
[54.30069733 34.40678787]
[63.99224854 45.85553741]
[73.68379974 57.30428696]
[83.37534332 68.75303650]
[93.06689453 80.20178223]
[96.73867798 79.27800751]
[100.51670837 79.02930450]
[106.22314453 65.15715027]
[111.92957306 51.28499603]
[99.22442627 43.23823547]
[88.10973358 33.10736084]
[78.92324829 21.20023155]
[71.94415283 7.87869549]
[67.38452148 -6.45242119]
[65.38292694 -21.35761261]
[66.00018311 -36.38392639]
[69.21754456 -51.07472992]
[74.93723297 -64.98358917]
[82.98542786 -77.68782043]
[93.11756897 -88.80136871]
[105.02574158 -97.98649597]
[118.34806824 -104.96408844]
[132.67970276 -109.52208710]
[147.58511353 -111.52199554]
[162.61135864 -110.90303802]
[177.30180359 -107.68400574]
[191.21000671 -101.96274567]
[203.91333008 -93.91310120]
[215.02572632 -83.77970886]
[224.20950317 -71.87049866]
[231.18557739 -58.54737854]
[235.74195862 -44.21522522]
[237.74017334 -29.30958176]
[237.11950684 -14.28340816]
[233.89881897 0.40666568]
[228.17597961 14.31422520]
[220.12489319 27.01663399]
[209.99023438 38.12788391]
[198.07998657 47.31031036]
[184.75607300 54.28487778]
[170.42341614 58.83963013]
[155.51753235 60.83615494]
[140.49143982 60.21378326]
[125.80172729 56.99142838]
[120.09529877 70.86357880]
[114.38886261 84.73573303]
[120.40460968 104.86714172]
[105.94963837 120.11563873]
[104.78005219 135.06997681]
[103.61045837 150.02430725]
[102.44086456 164.97863770]
[101.85562897 179.96720886]
[101.85562897 194.96720886]
[101.85562897 209.96720886]
[101.85562897 224.96720886]
[101.85562897 239.96720886]
[115.84994507 245.83534241]
[126.50273132 256.58526611]
[132.21278381 270.55697632]
[132.13882446 285.60961914]
[126.32325745 299.44958496]
[115.68098450 309.97988892]
[101.85562897 315.61804199]
[101.85562897 330.61804199]
[101.85562897 345.61804199]
[110.42424011 355.30279541]
[110.08696747 367.82791138]
[101.57253265 376.46490479]
[101.27985382 391.46203613]
[111.95510864 402.80563354]
[111.44465637 418.01068115]
[100.56449890 428.11801147]
[100.27182007 443.11514282]
[99.97914886 458.11230469]
[99.68647003 473.10943604]
[99.39379120 488.10659790]
[99.10112000 503.10372925]
[98.80844116 518.10089111]
[98.51576233 533.09802246]
[98.22309113 548.09515381]
[97.93041229 563.09228516]
[112.66204071 566.14086914]
[126.58258057 571.84466553]
[139.21789551 580.00939941]
[150.13763428 590.35705566]
[158.96987915 602.53515625]
[165.41378784 616.12896729]
[169.24990845 630.67541504]
[170.34756470 645.67907715]
[168.66938782 660.62890625]
[164.27252197 675.01580811]
[157.30673218 688.34967041]
[148.00926208 700.17639160]
[136.69679260 710.09320068]
[123.75460052 717.76226807]
[109.62351227 722.92236328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 145]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[24 138]
[25 137]
[26 136]
[29 133]
[30 132]
[32 129]
[33 128]
[34 127]
[41 120]
[42 119]
[43 118]
[44 117]
[45 116]
[50 115]
[51 114]
[52 113]
[53 112]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[71 110]
[72 109]
[73 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
