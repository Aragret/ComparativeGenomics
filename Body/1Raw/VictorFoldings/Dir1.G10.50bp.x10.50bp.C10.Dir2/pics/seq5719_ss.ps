%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUACUCCGGGGGGGGGGCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCxxxxxxxxxxCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUCCCCCCCCCCACACUAUUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 335.98458862]
[71.19830322 329.96856689]
[59.48964310 320.43914795]
[50.78712082 308.10348511]
[45.73651886 293.87695312]
[44.71262741 278.81527710]
[47.79142761 264.03610229]
[54.74444962 250.63618469]
[65.05573273 239.60984802]
[77.96011353 231.77534485]
[92.50000000 227.71401978]
[92.50000000 212.71401978]
[92.50000000 197.71401978]
[92.50000000 182.71401978]
[92.50000000 167.71401978]
[92.50000000 152.71401978]
[92.50000000 137.71401978]
[92.50000000 122.71402740]
[92.50000000 107.71402740]
[88.34210968 93.30181122]
[80.35219574 80.60688019]
[72.36228180 67.91194916]
[64.37236023 55.21702194]
[56.38244629 42.52209091]
[48.39253235 29.82716179]
[35.06582642 36.73117828]
[21.20814133 42.49582291]
[6.91668177 47.08066177]
[-7.70830727 50.45352936]
[-22.56423950 52.59077454]
[-37.54690933 53.47739792]
[-52.55122757 53.10718536]
[-67.47193909 51.48273087]
[-82.20439148 48.61543274]
[-96.64524078 44.52540207]
[-110.69319916 39.24132538]
[-124.24972534 32.80027008]
[-137.21972656 25.24741554]
[-149.51222229 16.63574028]
[-161.04100037 7.02564812]
[-171.72518921 -3.51544952]
[-181.48983765 -14.91361427]
[-190.26646423 -27.08889389]
[-197.99348450 -39.95588684]
[-204.61672974 -53.42433929]
[-210.08972168 -67.39978027]
[-214.37406921 -81.78417969]
[-217.43974304 -96.47663116]
[-219.26521301 -111.37409210]
[-219.83767700 -126.37204742]
[-219.15312195 -141.36531067]
[-217.21636963 -156.24870300]
[-214.04098511 -170.91784668]
[-209.64924622 -185.26982117]
[-204.07194519 -199.20396423]
[-197.34823608 -212.62254333]
[-189.52525330 -225.43142700]
[-180.65786743 -237.54075623]
[-170.80830383 -248.86563110]
[-160.04563904 -259.32656860]
[-148.44535828 -268.85025024]
[-136.08883667 -277.36981201]
[-123.06275177 -284.82550049]
[-109.45846558 -291.16506958]
[-95.37140656 -296.34399414]
[-80.90039062 -300.32598877]
[-66.14691925 -303.08309937]
[-51.21448135 -304.59597778]
[-36.20781708 -304.85403442]
[-21.23219109 -303.85546875]
[-6.39264727 -301.60723877]
[8.20672417 -298.12515259]
[22.46351814 -293.43365479]
[36.27772903 -287.56558228]
[49.55246353 -280.56216431]
[62.19460297 -272.47247314]
[74.11547089 -263.35330200]
[85.23145294 -253.26858521]
[95.46457672 -242.28907776]
[104.74305725 -230.49177551]
[113.00182343 -217.95944214]
[120.18292999 -204.77998352]
[126.23601532 -191.04583740]
[131.11862183 -176.85334778]
[134.79649353 -162.30206299]
[137.24383545 -147.49406433]
[138.44348145 -132.53320312]
[138.38702393 -117.52442169]
[137.07484436 -102.57300568]
[134.51615906 -87.78383636]
[130.72891235 -73.26063538]
[125.73967743 -59.10528183]
[119.58343506 -45.41706848]
[112.30336761 -32.29200745]
[103.95055389 -19.82216072]
[94.58358002 -8.09500217]
[84.26814270 2.80721378]
[73.07659912 12.80801296]
[61.08745956 21.83724594]
[69.07737732 34.53217697]
[77.06729126 47.22710419]
[85.05721283 59.92203522]
[93.04712677 72.61696625]
[101.03704071 85.31189728]
[100.90298462 70.31249237]
[103.93635559 55.62240601]
[110.00060272 41.90289688]
[118.82274628 29.77154541]
[130.00567627 19.77443695]
[143.04598999 12.36158657]
[157.35667419 7.86667967]
[172.29354858 6.49205160]
[187.18424988 8.29958153]
[201.35845947 13.20790386]
[214.17814636 20.99607277]
[225.06623840 31.31350708]
[233.53260803 43.69577408]
[239.19615173 57.58549500]
[241.80192566 72.35742950]
[241.23263550 87.34661865]
[237.51390076 101.87834167]
[230.81311035 115.29846191]
[221.43191528 127.00286865]
[209.79260254 136.46470642]
[196.41909790 143.25804138]
[181.91342163 147.07708740]
[166.92851257 147.74992371]
[152.13893127 145.24627686]
[138.21041870 139.67883301]
[125.76995087 131.29821777]
[115.37754059 120.48165894]
[107.50000000 107.71402740]
[107.50000000 122.71402740]
[107.50000000 137.71401978]
[107.50000000 152.71401978]
[107.50000000 167.71401978]
[107.50000000 182.71401978]
[107.50000000 197.71401978]
[107.50000000 212.71401978]
[107.50000000 227.71401978]
[122.03988647 231.77534485]
[134.94427490 239.60984802]
[145.25555420 250.63618469]
[152.20857239 264.03610229]
[155.28736877 278.81527710]
[154.26348877 293.87695312]
[149.21287537 308.10348511]
[140.51036072 320.43914795]
[128.80169678 329.96856689]
[114.95575714 335.98458862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[25 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
