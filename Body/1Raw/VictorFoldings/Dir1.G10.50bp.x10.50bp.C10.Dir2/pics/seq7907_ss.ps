%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUAGCACCGGGGGGGGGGCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUxxxxxxxxxxAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACCCCCCCCCCCUAUAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.33407593]
[71.19830322 389.31805420]
[59.48964310 379.78863525]
[50.78712082 367.45297241]
[45.73651886 353.22644043]
[44.71262741 338.16476440]
[47.79142761 323.38562012]
[54.74444962 309.98568726]
[65.05573273 298.95935059]
[77.96011353 291.12484741]
[92.50000000 287.06353760]
[92.50000000 272.06353760]
[92.50000000 257.06353760]
[92.50000000 242.06352234]
[92.50000000 227.06352234]
[92.50000000 212.06352234]
[92.50000000 197.06352234]
[92.50000000 182.06352234]
[92.50000000 167.06352234]
[92.50000000 152.06352234]
[75.81896973 146.71336365]
[61.81993103 136.18208313]
[52.05556107 121.63772583]
[37.64334488 125.79561615]
[23.23112869 129.95350647]
[8.81891251 134.11138916]
[-5.59330368 138.26927185]
[-11.76472473 152.63755798]
[-25.75125885 159.63119507]
[-40.94889069 155.94799805]
[-50.18176651 143.32705688]
[-49.09040070 127.72760010]
[-38.19010544 116.51522064]
[-22.62766647 114.98404694]
[-9.75119114 123.85706329]
[4.66102505 119.69917297]
[19.07324028 115.54128265]
[33.48545837 111.38339996]
[47.89767456 107.22550964]
[47.78498459 93.63977051]
[51.15570068 80.47834778]
[57.78495789 68.61926270]
[67.23049927 58.85367203]
[78.86218262 51.83306885]
[74.85444641 37.37837982]
[70.84670258 22.92369270]
[63.12261963 10.06529045]
[52.24379349 -0.26191461]
[41.36496735 -10.58911991]
[26.02934456 -14.47875118]
[22.12580681 -28.85274315]
[11.24698067 -39.17994690]
[0.36815542 -49.50715256]
[-10.51066971 -59.83435822]
[-26.16086578 -66.35414886]
[-24.22827530 -83.19758606]
[-7.50808907 -86.00325012]
[-0.18346487 -70.71318054]
[10.69536018 -60.38597870]
[21.57418633 -50.05877304]
[32.45301056 -39.73156738]
[47.01050949 -36.58060837]
[51.69217300 -21.46794510]
[62.57099915 -11.14073944]
[73.44982147 -0.81353492]
[69.57218170 -15.30366611]
[68.95265198 -30.29086685]
[71.62115479 -45.05159378]
[77.44885254 -58.87324524]
[86.15439606 -71.08853912]
[97.31751251 -81.10775757]
[110.39927673 -88.44720459]
[124.76813507 -92.75254822]
[139.73039246 -93.81593323]
[154.56372070 -91.58602142]
[168.55200195 -86.17047882]
[181.01991272 -77.83074188]
[191.36553955 -66.96943665]
[199.08941650 -54.11091232]
[203.81867981 -39.87595367]
[205.32498169 -24.95177650]
[203.53562927 -10.05888557]
[198.53698730 4.08373165]
[190.57038879 16.79330635]
[180.02044678 27.45625496]
[167.39645386 35.55780029]
[153.30789185 40.70681763]
[138.43490601 42.65473175]
[123.49553680 41.30749512]
[109.21099854 36.73015594]
[96.27091980 29.14369202]
[85.30139160 18.91595268]
[89.30913544 33.37063980]
[93.31687164 47.82532883]
[104.24494171 46.84374619]
[115.28861237 48.15734100]
[125.96474457 51.77053833]
[135.79368591 57.58589172]
[144.32080078 65.40583038]
[151.13734436 74.93889618]
[165.15405273 69.59738922]
[179.17076111 64.25587463]
[189.09667969 51.20182037]
[205.32841492 53.53902054]
[211.16816711 68.86316681]
[200.60848999 81.41008759]
[184.51228333 78.27259064]
[170.49555969 83.61409760]
[156.47885132 88.95561218]
[157.41447449 103.92640686]
[171.98718262 107.48116302]
[186.55989075 111.03592682]
[195.84117126 98.96208191]
[209.23400879 91.71282959]
[224.41801453 90.54413605]
[238.76246643 95.65848541]
[249.78210449 106.16979218]
[255.56770325 120.25690460]
[255.11686707 135.47914124]
[248.50772095 149.19917297]
[236.88534546 159.03990173]
[222.26335144 163.29637146]
[207.17512512 161.23112488]
[194.23478699 153.20198059]
[185.68431091 140.60002136]
[183.00512695 125.60862732]
[168.43241882 122.05387115]
[153.85971069 118.49910736]
[142.57391357 135.60346985]
[126.32453156 147.20616150]
[107.50000000 152.06352234]
[107.50000000 167.06352234]
[107.50000000 182.06352234]
[107.50000000 197.06352234]
[107.50000000 212.06352234]
[107.50000000 227.06352234]
[107.50000000 242.06352234]
[107.50000000 257.06353760]
[107.50000000 272.06353760]
[107.50000000 287.06353760]
[122.03988647 291.12484741]
[134.94427490 298.95935059]
[145.25555420 309.98568726]
[152.20857239 323.38562012]
[155.28736877 338.16476440]
[154.26348877 353.22644043]
[149.21287537 367.45297241]
[140.51036072 379.78863525]
[128.80169678 389.31805420]
[114.95575714 395.33407593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[44 94]
[45 93]
[46 92]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
[53 59]
[54 58]
[100 109]
[101 108]
[102 107]
[110 128]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
