%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGCAUUAGGGGGGGGGGACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGxxxxxxxxxxGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCCCCCCCCCCCUAGCAUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 391.21740723]
[71.19830322 385.20138550]
[59.48964310 375.67196655]
[50.78712082 363.33630371]
[45.73651886 349.10977173]
[44.71262741 334.04809570]
[47.79142761 319.26895142]
[54.74444962 305.86901855]
[65.05573273 294.84268188]
[77.96011353 287.00817871]
[92.50000000 282.94686890]
[92.50000000 267.94686890]
[92.50000000 252.94686890]
[92.50000000 237.94686890]
[92.50000000 222.94686890]
[92.50000000 207.94686890]
[92.50000000 192.94686890]
[92.50000000 177.94686890]
[92.50000000 162.94686890]
[92.50000000 147.94686890]
[78.41646576 143.46611023]
[66.33464813 134.95419312]
[57.37504578 123.20053864]
[43.25024414 128.24929810]
[29.12544060 133.29804993]
[15.00063801 138.34680176]
[8.46617413 152.73695374]
[-6.35891771 158.21347046]
[-20.67917442 151.52722168]
[-25.99864197 136.64506531]
[-19.16137314 122.39629364]
[-4.22379971 117.23446655]
[9.95188141 124.22200012]
[24.07668495 119.17324829]
[38.20148849 114.12448883]
[52.32629013 109.07573700]
[51.56592178 103.04821777]
[51.56459427 96.97293854]
[52.32233047 90.94509125]
[53.82725143 85.05915070]
[40.44096756 78.29103851]
[27.05468369 71.52291870]
[13.66839790 64.75480652]
[0.28211340 57.98669434]
[-12.96476173 65.89389801]
[-28.38292694 65.36122131]
[-41.05250168 56.55863571]
[-46.93066788 42.29502106]
[-44.14172745 27.12184334]
[-33.57562256 15.88080502]
[-18.60395432 12.15888309]
[-4.00413036 17.14372826]
[5.56509924 29.24469376]
[7.05022812 44.60040665]
[20.43651390 51.36852264]
[33.82279968 58.13663864]
[47.20908356 64.90475464]
[60.59536743 71.67286682]
[70.40670013 61.53718567]
[82.71846008 54.65135193]
[96.49039459 51.59716797]
[110.55886841 52.63269043]
[116.04589844 38.67230225]
[121.53292847 24.71191216]
[127.01995850 10.75152302]
[132.50698853 -3.20886731]
[119.60874939 -10.93447971]
[108.15811157 -20.67782402]
[98.46746063 -32.17309189]
[90.80117035 -45.10668564]
[85.36837769 -59.12576675]
[82.31729889 -73.84788513]
[81.73116302 -88.87141418]
[83.62596893 -103.78649139]
[87.95001221 -118.18622589]
[94.58534241 -131.67779541]
[103.35093689 -143.89311218]
[114.00765991 -154.49896240]
[126.26480103 -163.20600891]
[139.78796387 -169.77668762]
[154.20822144 -174.03178406]
[169.13220215 -175.85517883]
[184.15275574 -175.19715881]
[198.86010742 -172.07565308]
[212.85302734 -166.57583618]
[225.74978638 -158.84774780]
[237.19854736 -149.10218811]
[246.88697815 -137.60505676]
[254.55078125 -124.66999054]
[259.98086548 -110.64985657]
[263.02911377 -95.92715454]
[263.61233521 -80.90351868]
[261.71466064 -65.98880005]
[257.38784790 -51.58989716]
[250.74992371 -38.09961319]
[241.98197937 -25.88597298]
[231.32321167 -15.28217697]
[219.06439209 -6.57750320]
[205.53996277 -0.00942138]
[191.11888123 4.24288654]
[176.19454956 6.06341457]
[161.17413330 5.40249681]
[146.46737671 2.27816439]
[140.98034668 16.23855400]
[135.49331665 30.19894409]
[130.00628662 44.15933228]
[124.51925659 58.11972427]
[142.36064148 76.32029724]
[148.51849365 101.05198669]
[163.28456116 103.69085693]
[178.05061340 106.32971954]
[186.94717407 93.92754364]
[200.34791565 86.62117767]
[215.59210205 85.86131287]
[229.65299988 91.79881287]
[239.73880005 103.25478363]
[243.84696960 117.95464325]
[241.16181946 132.97970581]
[232.21647644 145.34675598]
[218.78707886 152.60029602]
[203.54000854 153.30012512]
[189.50260925 147.30729675]
[179.46199036 135.81169128]
[175.41174316 121.09577179]
[160.64569092 118.45690918]
[145.87963867 115.81804657]
[141.40499878 125.31358337]
[134.99320984 133.62480164]
[126.94422150 140.36285400]
[117.63463593 145.21250916]
[107.50000000 147.94686890]
[107.50000000 162.94686890]
[107.50000000 177.94686890]
[107.50000000 192.94686890]
[107.50000000 207.94686890]
[107.50000000 222.94686890]
[107.50000000 237.94686890]
[107.50000000 252.94686890]
[107.50000000 267.94686890]
[107.50000000 282.94686890]
[122.03988647 287.00817871]
[134.94427490 294.84268188]
[145.25555420 305.86901855]
[152.20857239 319.26895142]
[155.28736877 334.04809570]
[154.26348877 349.10977173]
[149.21287537 363.33630371]
[140.51036072 375.67196655]
[128.80169678 385.20138550]
[114.95575714 391.21740723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 36]
[24 35]
[25 34]
[26 33]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[109 126]
[110 125]
[111 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
