%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUCCGGGGGGGGGGAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUxxxxxxxxxxCACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[53.48019028 452.36682129]
[40.92196655 444.01568604]
[30.83574295 432.80322266]
[23.85554886 419.43432617]
[20.42016411 404.74932861]
[20.74554253 389.67135620]
[24.81122589 375.14825439]
[32.36164474 362.09289551]
[42.92217636 351.32601929]
[55.82896805 343.52438354]
[70.27069855 339.17843628]
[69.64672089 324.19140625]
[69.02274323 309.20437622]
[68.39876556 294.21737671]
[67.77478790 279.23034668]
[67.15081024 264.24334717]
[66.52683258 249.25631714]
[65.90285492 234.26930237]
[65.27887726 219.28228760]
[64.65489960 204.29527283]
[57.30431366 217.37078857]
[46.33223343 227.59884644]
[32.77359772 234.01472473]
[17.90732765 236.01322937]
[3.13568044 233.40583801]
[-10.14800930 226.43852234]
[-20.69075775 215.76844788]
[-27.49812508 202.40208435]
[-29.92800140 187.60020447]
[-27.75119400 172.75898743]
[-21.17302513 159.27835083]
[-10.81398487 148.42984009]
[2.34881425 141.23674011]
[17.07379150 138.37753296]
[31.97201729 140.12193298]
[45.63821411 146.30537415]
[56.78332138 156.34463501]
[64.35607910 169.29272461]
[67.64219666 183.92854309]
[72.54374695 169.75198364]
[77.44529724 155.57542419]
[81.75288391 141.20724487]
[85.45904541 126.67230988]
[89.16520691 112.13736725]
[84.19360352 96.14430237]
[95.97105408 84.23687744]
[99.37403107 69.62798309]
[102.77700806 55.01908875]
[106.17998505 40.41019821]
[94.37136078 30.80198479]
[87.93167877 17.07546234]
[88.08971405 1.97595179]
[94.76055908 -11.50220680]
[106.57309723 -20.70945549]
[121.15143585 -23.86182976]
[124.55441284 -38.47072220]
[123.45228577 -47.60511780]
[128.18313599 -53.34660721]
[131.88929749 -67.88154602]
[130.50985718 -72.15455627]
[130.59437561 -76.22443390]
[131.89045715 -79.64526367]
[134.02413940 -82.10318756]
[136.55525208 -83.44512177]
[141.45680237 -97.62167358]
[146.35835266 -111.79823303]
[151.25990295 -125.97479248]
[138.18548584 -133.41615295]
[126.70117188 -143.13342285]
[117.19812775 -154.79562378]
[110.00002289 -168.00553894]
[105.35202789 -182.31326294]
[103.41244507 -197.23146057]
[104.24733734 -212.25202942]
[107.82826996 -226.86337280]
[114.03327179 -240.56785583]
[122.65100861 -252.89868164]
[133.38796997 -263.43588257]
[145.87843323 -271.82052612]
[159.69702148 -277.76712036]
[174.37303162 -281.07302856]
[189.40663147 -281.62573242]
[204.28578186 -279.40634155]
[218.50369263 -274.49047852]
[231.57612610 -267.04559326]
[243.05781555 -257.32522583]
[252.55770874 -245.66047668]
[259.75225830 -232.44862366]
[264.39639282 -218.13964844]
[266.33193970 -203.22093201]
[265.49301147 -188.20059204]
[261.90814209 -173.59019470]
[255.69944763 -159.88740540]
[247.07838440 -147.55889893]
[236.33859253 -137.02459717]
[223.84585571 -128.64329529]
[210.02568054 -122.70045471]
[195.34877014 -119.39849091]
[180.31501770 -118.84985352]
[165.43646240 -121.07324219]
[160.53491211 -106.89668274]
[155.63336182 -92.72012329]
[150.73181152 -78.54356384]
[146.42422485 -64.17538452]
[142.71806335 -49.64044571]
[139.16331482 -35.06774521]
[135.76033020 -20.45885086]
[147.44500732 -11.18880177]
[153.97293091 2.29065132]
[154.00111389 17.32927513]
[147.47041321 30.94434357]
[135.62785339 40.41222000]
[120.78887939 43.81317520]
[117.38590240 58.42206573]
[113.98292542 73.03096008]
[110.57994843 87.63985443]
[116.13654327 97.92139435]
[113.36690521 109.27546692]
[103.70014191 115.84352875]
[99.99398041 130.37846375]
[96.28781891 144.91340637]
[97.66725922 149.18641663]
[97.58273315 153.25630188]
[96.28665924 156.67712402]
[94.15296936 159.13504028]
[91.62185669 160.47697449]
[86.72030640 174.65353394]
[81.81875610 188.83009338]
[79.64191437 203.67129517]
[80.26589203 218.65830994]
[80.88986969 233.64532471]
[81.51384735 248.63235474]
[82.13782501 263.61935425]
[82.76180267 278.60638428]
[83.38578033 293.59338379]
[84.00975800 308.58041382]
[84.63373566 323.56741333]
[85.25771332 338.55444336]
[100.01071930 341.68487549]
[113.52135468 348.38662720]
[124.94033051 358.23843384]
[133.54985046 370.62097168]
[138.80870056 384.75585938]
[140.38630676 399.75460815]
[138.18350220 414.67431641]
[132.33874512 428.57720947]
[123.21946716 440.58926392]
[111.39889526 449.95541382]
[97.62008667 456.08691406]
[82.74918365 458.59829712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[39 128]
[40 127]
[41 126]
[42 121]
[43 120]
[44 119]
[46 116]
[47 115]
[48 114]
[49 113]
[55 107]
[56 106]
[58 105]
[59 104]
[64 103]
[65 102]
[66 101]
[67 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
