%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACGCAAAGGGGGGGGGGGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCxxxxxxxxxxGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCCCCCCCCCCCAAUACGCAAA\
) } def
/len { sequence length } bind def

/coor [
[84.08032990 414.39965820]
[71.52210236 406.04852295]
[61.43588257 394.83605957]
[54.45568848 381.46716309]
[51.02030563 366.78216553]
[51.34568405 351.70419312]
[55.41136551 337.18109131]
[62.96178818 324.12573242]
[73.52231598 313.35885620]
[86.42910767 305.55722046]
[100.87084198 301.21127319]
[100.24686432 286.22424316]
[99.62288666 271.23724365]
[98.99890900 256.25021362]
[98.37493134 241.26319885]
[97.75095367 226.27618408]
[97.12697601 211.28916931]
[96.50299835 196.30215454]
[95.87902069 181.31513977]
[95.25504303 166.32810974]
[94.63106537 151.34109497]
[94.00708771 136.35408020]
[87.58813477 134.69120789]
[81.57118225 131.90475464]
[76.15110016 128.08494568]
[71.50344086 123.35552979]
[67.77873993 117.86966705]
[65.09762573 111.80503082]
[63.54693985 105.35806274]
[63.17689896 98.73754883]
[48.60419846 95.18278503]
[34.03149414 91.62802124]
[19.45879173 88.07325745]
[4.88608932 84.51850128]
[-9.68661404 80.96373749]
[-24.25931740 77.40897369]
[-38.90281677 74.15814972]
[-53.61077881 71.21266937]
[-68.31874084 68.26718140]
[-83.02670288 65.32170105]
[-98.38066864 71.08257294]
[-110.87312317 60.45851517]
[-107.65290070 44.37864685]
[-92.03268433 39.38455963]
[-80.08122253 50.61373901]
[-65.37326050 53.55922318]
[-50.66529846 56.50470734]
[-35.95733643 59.45018768]
[-31.50880814 57.55648422]
[-25.81913757 58.48328018]
[-20.70455360 62.83627319]
[-6.13185167 66.39103699]
[8.44085121 69.94579315]
[23.01355362 73.50055695]
[37.58625793 77.05532074]
[52.15895844 80.61008453]
[66.73165894 84.16484070]
[84.75756073 66.45596313]
[109.95298004 64.52503967]
[116.85997772 51.20988846]
[123.76697540 37.89472961]
[124.23501587 22.90203476]
[118.17200470 9.18198109]
[104.61956024 -0.05183101]
[106.10971832 -16.38313484]
[121.10952759 -23.01168442]
[134.18847656 -13.11859703]
[131.89205933 3.11896801]
[137.95507812 16.83902168]
[145.27682495 18.46443367]
[146.53376770 3.51719141]
[147.79072571 -11.43005180]
[149.04766846 -26.37729454]
[150.30462646 -41.32453918]
[148.77690125 -56.24653625]
[157.90827942 -68.14687347]
[172.71720886 -70.53343201]
[185.12481689 -62.10423660]
[188.36224365 -47.45776749]
[180.66404724 -34.58481216]
[175.47811890 -20.50979424]
[170.29219055 -6.43477583]
[165.10626221 7.64024210]
[159.92031860 21.71525955]
[167.24208069 23.34067345]
[178.54107666 13.47494984]
[189.84008789 3.60922694]
[201.13908386 -6.25649595]
[212.43809509 -16.12221909]
[223.42376709 -26.33569908]
[234.08538818 -36.88698959]
[244.74700928 -47.43827820]
[248.54948425 -63.39049530]
[264.34088135 -67.81361389]
[275.87637329 -56.15750885]
[271.28921509 -40.41298294]
[255.29830933 -36.77665329]
[244.63667297 -26.22536278]
[233.97505188 -15.67407227]
[233.61265564 -12.10529709]
[231.46339417 -8.54407120]
[227.55467224 -5.84698248]
[222.30381775 -4.82321453]
[211.00480652 5.04250860]
[199.70581055 14.90823174]
[188.40679932 24.77395439]
[177.10780334 34.63967896]
[170.97366333 41.52252579]
[163.81889343 46.25671387]
[156.28300476 48.77305603]
[148.97583008 49.17581558]
[142.43357849 47.72393799]
[137.08213806 44.80173111]
[130.17514038 58.11688614]
[123.26813507 71.43203735]
[131.49880981 80.88563538]
[136.08396912 92.55142975]
[136.49295044 105.07929230]
[150.61775208 110.12805176]
[166.64521790 106.65637207]
[177.46362305 118.98089600]
[171.94393921 134.42320251]
[155.76432800 137.09757996]
[145.56900024 124.25285339]
[131.44419861 119.20409393]
[121.84241486 129.67225647]
[108.99410248 135.73010254]
[109.61808014 150.71711731]
[110.24205780 165.70413208]
[110.86603546 180.69116211]
[111.49001312 195.67817688]
[112.11399078 210.66519165]
[112.73796844 225.65220642]
[113.36194611 240.63922119]
[113.98592377 255.62623596]
[114.60990143 270.61325073]
[115.23387909 285.60028076]
[115.85785675 300.58728027]
[130.61085510 303.71771240]
[144.12149048 310.41949463]
[155.54048157 320.27127075]
[164.14999390 332.65380859]
[169.40882874 346.78869629]
[170.98643494 361.78744507]
[168.78363037 376.70715332]
[162.93888855 390.61004639]
[153.81961060 402.62210083]
[141.99903870 411.98825073]
[128.22023010 418.11975098]
[113.34932709 420.63113403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 48]
[38 47]
[39 46]
[40 45]
[59 115]
[60 114]
[61 113]
[62 69]
[63 68]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 99]
[91 98]
[92 97]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
