%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGACUAUGGGGGGGGGGUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAxxxxxxxxxxUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACCCCCCCCCCCGUUGACAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.75903320]
[71.19830322 381.74301147]
[59.48964310 372.21359253]
[50.78712082 359.87792969]
[45.73651886 345.65139771]
[44.71262741 330.58972168]
[47.79142761 315.81054688]
[54.74444962 302.41061401]
[65.05573273 291.38427734]
[77.96011353 283.54977417]
[92.50000000 279.48846436]
[92.50000000 264.48846436]
[92.50000000 249.48846436]
[92.50000000 234.48846436]
[92.50000000 219.48846436]
[92.50000000 204.48846436]
[92.50000000 189.48846436]
[92.50000000 174.48846436]
[92.50000000 159.48846436]
[92.50000000 144.48846436]
[92.50000000 129.48846436]
[92.50000000 114.48847198]
[89.09702301 99.87957764]
[82.46852112 86.42361450]
[75.84002686 72.96764374]
[69.21152496 59.51168060]
[67.68953705 74.43426514]
[61.48786163 88.09220123]
[51.25418854 99.05905914]
[38.05732346 106.18946838]
[23.27553368 108.73873138]
[8.45262527 106.44060516]
[-4.86330843 99.53510284]
[-15.28155899 88.74343872]
[-21.71405029 75.19268036]
[-23.48897552 60.29806137]
[-20.42096710 45.61516953]
[-12.83044052 32.67747498]
[-1.51014888 22.83618546]
[12.35762405 17.11911583]
[27.32453537 16.12335587]
[41.82745361 19.95290184]
[54.35169601 28.20779610]
[63.59069061 40.02854538]
[62.03311157 25.10963440]
[60.47552872 10.19072247]
[58.91794968 -4.72818995]
[43.90164948 -4.94528770]
[29.01643181 -6.93692684]
[14.47125912 -10.67514801]
[0.47032234 -16.10747147]
[-12.78982639 -23.15763664]
[-25.12303352 -31.72666931]
[-36.35616302 -41.69427490]
[-46.33152008 -52.92052460]
[-54.90906143 -65.24781799]
[-61.96837616 -78.50309753]
[-67.41036224 -92.50028229]
[-71.15861511 -107.04286957]
[-73.16052246 -121.92671204]
[-73.38798523 -136.94285583]
[-71.83780670 -151.88050842]
[-68.53173828 -166.52995300]
[-63.51620483 -180.68554688]
[-56.86161041 -194.14855957]
[-48.66138077 -206.72999573]
[-39.03062820 -218.25323486]
[-28.10455513 -228.55648804]
[-16.03654861 -237.49514771]
[-2.99602294 -244.94371033]
[10.83395290 -250.79760742]
[25.25922775 -254.97467041]
[40.07729340 -257.41622925]
[55.08012772 -258.08807373]
[70.05711365 -256.98068237]
[84.79799652 -254.10968018]
[99.09584045 -249.51533508]
[112.74992371 -243.26214600]
[125.56856537 -235.43789673]
[137.37181091 -226.15243530]
[147.99395752 -215.53611755]
[157.28588867 -203.73797607]
[165.11717224 -190.92362976]
[171.37785339 -177.27297974]
[175.98005676 -162.97766113]
[178.85916138 -148.23835754]
[179.97474670 -133.26197815]
[179.31115723 -118.25877380]
[176.87771606 -103.43936920]
[172.70857239 -89.01180267]
[166.86227417 -75.17861938]
[159.42086792 -62.13400650]
[150.48884583 -50.06109619]
[140.19157410 -39.12937164]
[128.67362976 -29.49229431]
[116.09668732 -21.28516006]
[102.63732910 -14.62317848]
[88.48448944 -9.59987545]
[73.83686066 -6.28577089]
[75.39443970 8.63314152]
[76.95202637 23.55205345]
[78.50960541 38.47096634]
[82.66748810 52.88318253]
[89.29598999 66.33914948]
[95.92449188 79.79511261]
[102.55298615 93.25107574]
[107.52861023 87.07537079]
[114.50598907 82.54048920]
[123.05113220 80.11767578]
[132.63314819 80.17540741]
[147.45089722 82.50650787]
[162.28584290 77.00785828]
[173.65605164 86.62905884]
[188.47381592 88.96016693]
[202.23727417 80.71718597]
[217.21217346 86.47320557]
[221.91105652 101.81269836]
[212.72933960 114.96851349]
[196.71044922 115.84864044]
[186.14271545 103.77792358]
[171.32495117 101.44681549]
[157.54988098 107.11220551]
[145.11979675 97.32427216]
[130.30204773 94.99316406]
[124.60153198 99.86698914]
[134.34901428 111.26816559]
[122.94768524 121.01546478]
[113.20050812 109.61464691]
[107.50000000 114.48847198]
[107.50000000 129.48846436]
[107.50000000 144.48846436]
[107.50000000 159.48846436]
[107.50000000 174.48846436]
[107.50000000 189.48846436]
[107.50000000 204.48846436]
[107.50000000 219.48846436]
[107.50000000 234.48846436]
[107.50000000 249.48846436]
[107.50000000 264.48846436]
[107.50000000 279.48846436]
[122.03988647 283.54977417]
[134.94427490 291.38427734]
[145.25555420 302.41061401]
[152.20857239 315.81054688]
[155.28736877 330.58972168]
[154.26348877 345.65139771]
[149.21287537 359.87792969]
[140.51036072 372.21359253]
[128.80169678 381.74301147]
[114.95575714 387.75903320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 106]
[24 105]
[25 104]
[26 103]
[44 102]
[45 101]
[46 100]
[47 99]
[110 124]
[111 123]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
