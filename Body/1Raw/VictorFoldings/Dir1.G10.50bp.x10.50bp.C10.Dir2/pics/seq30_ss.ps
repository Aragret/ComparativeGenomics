%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAUUAACCGGGGGGGGGGACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCAxxxxxxxxxxAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAUUAACC\
) } def
/len { sequence length } bind def

/coor [
[87.13217926 359.47402954]
[72.57231903 355.56585693]
[59.37117767 348.28619385]
[48.29624557 338.05831909]
[39.99140549 325.47686768]
[34.93949127 311.27328491]
[33.43421555 296.27337646]
[35.56309509 281.34918213]
[41.20235062 267.36840820]
[50.02413559 255.14385986]
[61.51555252 245.38626099]
[75.00851440 238.66290283]
[89.71854401 235.36468506]
[90.02652740 220.36784363]
[90.33450317 205.37100220]
[90.64247894 190.37417603]
[90.95045471 175.37733459]
[91.25843811 160.38049316]
[91.56641388 145.38365173]
[91.87438965 130.38681030]
[92.18236542 115.38997650]
[84.63839722 128.35487366]
[69.70005798 129.71360779]
[59.94075775 118.32256317]
[63.57475662 103.76941681]
[77.54345703 98.30336761]
[62.67685699 96.30731201]
[47.81025696 94.31125641]
[32.81737137 94.77317810]
[18.10185051 97.68064880]
[3.38632727 100.58812714]
[-8.59411049 111.78639221]
[-24.20137024 106.75196075]
[-27.38004112 90.66382599]
[-14.86017895 80.07208252]
[0.47885498 85.87260437]
[15.19437790 82.96512604]
[29.90990067 80.05765533]
[30.52572632 65.07030487]
[16.09834099 60.96535873]
[1.67095625 56.86041260]
[-12.75642872 52.75547028]
[-27.41526794 59.27451706]
[-41.58470154 51.75077057]
[-44.39514923 35.95580673]
[-33.69067764 24.00616646]
[-17.68284416 25.06859398]
[-8.65148354 38.32808304]
[5.77590132 42.43302917]
[20.20328522 46.53797531]
[34.63066864 50.64291763]
[43.50192642 56.57055283]
[48.99486542 64.27888489]
[50.96897125 72.34204865]
[49.80631638 79.44465637]
[64.67291260 81.44071198]
[79.53951263 83.43676758]
[90.22555542 81.83493805]
[98.55346680 85.13884735]
[102.72549438 91.17644501]
[113.49417114 80.73443604]
[124.26284790 70.29242706]
[135.03152466 59.85042191]
[145.80020142 49.40841293]
[156.56889343 38.96640396]
[167.33757019 28.52439308]
[178.10624695 18.08238411]
[182.70042419 0.28002125]
[199.83316040 -3.39614224]
[210.38517761 -14.05705070]
[202.54388428 -25.89739609]
[197.18928528 -39.04504013]
[194.52908325 -52.98450470]
[194.66545105 -67.16969299]
[197.59098816 -81.04530334]
[203.18916321 -94.06853485]
[211.23895264 -105.73036194]
[221.42355347 -115.57540131]
[233.34280396 -123.21968842]
[246.52899170 -128.36569214]
[260.46514893 -130.81385803]
[274.60537720 -130.47033691]
[288.39611816 -127.35063171]
[301.29794312 -121.57884979]
[312.80661011 -113.38282776]
[323.78741455 -123.60153198]
[334.76821899 -133.82023621]
[345.74902344 -144.03895569]
[339.81765747 -157.98866272]
[339.01818848 -173.12593079]
[343.44711304 -187.62283325]
[352.56967163 -199.72880554]
[365.28427124 -207.98199463]
[380.05551147 -211.38580322]
[395.09976196 -209.52917480]
[408.60028076 -202.63632202]
[418.92687988 -191.53959656]
[424.83251953 -177.57897949]
[425.60409546 -162.44026184]
[421.14846802 -147.95155334]
[412.00360107 -135.86239624]
[399.27383423 -127.63265228]
[384.49633789 -124.25608063]
[369.45553589 -126.14042664]
[355.96774292 -133.05815125]
[344.98693848 -122.83943939]
[334.00613403 -112.62073517]
[323.02532959 -102.40202332]
[331.10336304 -88.76986694]
[335.97830200 -73.68551636]
[337.40728760 -57.89078903]
[335.31704712 -42.16313934]
[329.80752563 -27.27736282]
[321.14727783 -13.96744919]
[309.76022339 -2.89037299]
[296.20495605 5.40632248]
[281.14743042 10.51159573]
[265.32806396 12.17126751]
[249.52551270 10.30067635]
[234.51821899 4.98899031]
[221.04608154 -3.50503588]
[210.49406433 7.15587282]
[210.23091125 19.28818321]
[201.47314453 28.25885201]
[188.54824829 28.85106277]
[177.77957153 39.29307175]
[167.01089478 49.73508072]
[156.24221802 60.17708969]
[145.47354126 70.61910248]
[134.70486450 81.06111145]
[123.93618011 91.50312042]
[113.16750336 101.94512939]
[107.17920685 115.69795990]
[106.87123108 130.69479370]
[106.56324768 145.69163513]
[106.25527191 160.68847656]
[105.94729614 175.68530273]
[105.63932037 190.68214417]
[105.33133698 205.67898560]
[105.02336121 220.67582703]
[104.71538544 235.67265320]
[119.27761078 239.57202148]
[132.48316956 246.84365845]
[143.56430054 257.06481934]
[151.87675476 269.64123535]
[156.93728638 283.84176636]
[158.45164490 298.84075928]
[156.33181763 313.76623535]
[150.70103455 327.75042725]
[141.88667297 339.98031616]
[130.40116882 349.74487305]
[116.91229248 356.47640991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[26 57]
[27 56]
[28 55]
[29 38]
[30 37]
[31 36]
[39 51]
[40 50]
[41 49]
[42 48]
[60 132]
[61 131]
[62 130]
[63 129]
[64 128]
[65 127]
[66 126]
[67 125]
[69 122]
[70 121]
[85 108]
[86 107]
[87 106]
[88 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
