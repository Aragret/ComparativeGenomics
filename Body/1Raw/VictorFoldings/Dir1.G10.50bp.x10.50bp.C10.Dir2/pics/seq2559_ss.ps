%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAUUAACGGGGGGGGGGAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAAxxxxxxxxxxCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGCCCCCCCCCCGACAAUGAAC\
) } def
/len { sequence length } bind def

/coor [
[78.00254059 317.51995850]
[66.11826324 308.24487305]
[56.79955673 296.39474487]
[50.58819199 282.65856934]
[47.84528732 267.83496094]
[48.73031998 252.78569031]
[53.19182587 238.38574219]
[60.97042465 225.47230530]
[71.61387634 214.79615784]
[84.50338745 206.97796631]
[98.88957214 202.47230530]
[97.95394135 187.50151062]
[97.01831055 172.53071594]
[96.08268738 157.55992126]
[95.14705658 142.58912659]
[94.21142578 127.61833954]
[93.27580261 112.64755249]
[85.70394897 100.89346313]
[91.75341034 88.28807831]
[90.81777954 73.31728363]
[89.88214874 58.34649658]
[88.94652557 43.37570190]
[73.94205475 43.41448593]
[58.96212769 42.55586624]
[44.06035995 40.80292130]
[29.29009628 38.16192245]
[14.70421410 34.64232254]
[0.35492665 30.25672531]
[-13.70639992 25.02083015]
[-27.42943001 18.95337677]
[-40.76503754 12.07608700]
[-53.66548157 4.41357946]
[-66.08458710 -4.00671530]
[-77.97789001 -13.15465450]
[-89.30282593 -22.99749184]
[-100.01884460 -33.49999237]
[-110.08758545 -44.62455750]
[-119.47300720 -56.33136368]
[-128.14151001 -68.57850647]
[-136.06207275 -81.32214355]
[-143.20632935 -94.51665497]
[-149.54870605 -108.11480713]
[-155.06651306 -122.06791687]
[-159.73997498 -136.32604980]
[-163.55238342 -150.83815002]
[-166.49008179 -165.55227661]
[-168.54254150 -180.41574097]
[-169.70243835 -195.37536621]
[-169.96560669 -210.37757874]
[-169.33111572 -225.36866760]
[-167.80122375 -240.29498291]
[-165.38140869 -255.10308838]
[-162.08033752 -269.73999023]
[-157.90982056 -284.15325928]
[-152.88479614 -298.29129028]
[-147.02323914 -312.10354614]
[-140.34616089 -325.54049683]
[-132.87742615 -338.55410767]
[-124.64380646 -351.09774780]
[-115.67475128 -363.12652588]
[-106.00238037 -374.59738159]
[-95.66131592 -385.46926880]
[-84.68856812 -395.70324707]
[-73.12342834 -405.26269531]
[-61.00729370 -414.11340332]
[-48.38353348 -422.22363281]
[-35.29734039 -429.56442261]
[-21.79556084 -436.10946655]
[-7.92652512 -441.83532715]
[6.26011705 -446.72149658]
[20.71358109 -450.75048828]
[35.38212585 -453.90789795]
[50.21324539 -456.18243408]
[65.15384674 -457.56591797]
[80.15043640 -458.05340576]
[95.14934540 -457.64318848]
[110.09687042 -456.33666992]
[124.93951416 -454.13858032]
[139.62413025 -451.05676270]
[154.09815979 -447.10226440]
[168.30978394 -442.28924561]
[182.20812988 -436.63491821]
[195.74343872 -430.15951538]
[208.86727905 -422.88626099]
[221.53265381 -414.84112549]
[233.69421387 -406.05297852]
[245.30845642 -396.55322266]
[256.33377075 -386.37591553]
[266.73071289 -375.55743408]
[276.46203613 -364.13656616]
[285.49295044 -352.15414429]
[293.79107666 -339.65307617]
[301.32675171 -326.67813110]
[308.07296753 -313.27572632]
[314.00558472 -299.49389648]
[319.10336304 -285.38189697]
[323.34808350 -270.99029541]
[326.72451782 -256.37063599]
[329.22058105 -241.57518005]
[330.82733154 -226.65693665]
[331.53906250 -211.66931152]
[331.35317993 -196.66593933]
[330.27035522 -181.70054626]
[328.29446411 -166.82670593]
[325.43261719 -152.09764099]
[321.69503784 -137.56608582]
[317.09506226 -123.28407288]
[311.64923096 -109.30271912]
[305.37698364 -95.67208099]
[298.30078125 -82.44094086]
[290.44598389 -69.65666962]
[281.84066772 -57.36503601]
[272.51568604 -45.61003494]
[262.50436401 -34.43375015]
[251.84260559 -23.87618828]
[240.56852722 -13.97514153]
[228.72250366 -4.76605654]
[216.34693909 3.71810246]
[203.48614502 11.44696331]
[190.18614197 18.39285851]
[176.49455261 24.53092384]
[162.46037292 29.83918762]
[148.13388062 34.29864502]
[133.56631470 37.89333344]
[118.80985260 40.61038589]
[103.91731262 42.44007492]
[104.85294342 57.41086578]
[105.78857422 72.38166046]
[106.72419739 87.35244751]
[114.29605103 99.10653687]
[108.24658966 111.71192169]
[109.18222046 126.68271637]
[110.11785126 141.65350342]
[111.05347443 156.62429810]
[111.98910522 171.59509277]
[112.92473602 186.56588745]
[113.86035919 201.53666687]
[128.69560242 204.21609497]
[142.45823669 210.36859131]
[154.34812927 219.63648987]
[163.67401123 231.48095703]
[169.89370728 245.21334839]
[172.64559937 260.03530884]
[171.76968384 275.08511353]
[167.31690979 289.48776245]
[159.54614258 302.40591431]
[148.90916443 313.08850098]
[136.02439880 320.91452026]
[121.64094543 325.42889404]
[106.59504700 326.36923218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[19 129]
[20 128]
[21 127]
[22 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
