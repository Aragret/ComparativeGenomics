%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCAUCUUCGGGGGGGGGGACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAxxxxxxxxxxCAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUACCCCCCCCCCUAUCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[102.54303741 486.14779663]
[88.69709778 480.13177490]
[76.98844147 470.60235596]
[68.28591156 458.26669312]
[63.23531342 444.04016113]
[62.21142197 428.97848511]
[65.29022217 414.19934082]
[72.24324036 400.79940796]
[82.55452728 389.77307129]
[95.45890808 381.93856812]
[109.99879456 377.87725830]
[109.99879456 362.87725830]
[109.99879456 347.87725830]
[109.99879456 332.87725830]
[109.99879456 317.87725830]
[109.99879456 302.87725830]
[109.99879456 287.87725830]
[109.99879456 272.87725830]
[109.99879456 257.87725830]
[109.99879456 242.87724304]
[99.31792450 232.55957031]
[99.10424042 217.34742737]
[109.99879456 206.21430969]
[109.99879456 191.21430969]
[108.44121552 176.29539490]
[105.34288788 161.61886597]
[102.24456787 146.94233704]
[99.14624786 132.26582336]
[84.49130249 128.30709839]
[73.26673126 118.08712769]
[67.95530701 103.86644745]
[53.05340195 102.15375519]
[38.15150070 100.44106293]
[23.24959755 98.72837830]
[8.34769535 97.01568604]
[-0.73567194 109.40068054]
[-14.80104828 115.57001495]
[-30.06491852 113.86418915]
[-42.42137527 104.74204254]
[-48.54660034 90.65740204]
[-46.79293060 75.39894867]
[-37.63209915 63.07114792]
[-23.52832603 56.99010086]
[-8.27544975 58.79158783]
[4.02357960 67.99101257]
[10.06038475 82.11378479]
[24.96228790 83.82646942]
[39.86418915 85.53916168]
[54.76609039 87.25185394]
[69.66799164 88.96453857]
[74.46554565 80.25655365]
[81.68577576 73.42179108]
[90.64362335 69.10873413]
[100.48919678 67.72659302]
[104.19535828 53.19166183]
[107.90151978 38.65672302]
[111.60768127 24.12178802]
[115.31384277 9.58685207]
[101.36624146 4.00837564]
[88.26612854 -3.34295511]
[76.23766327 -12.34134960]
[65.48667145 -22.83283424]
[56.19712067 -34.63788605]
[48.52796173 -47.55450058]
[42.61042404 -61.36166382]
[38.54576492 -75.82312012]
[36.40353775 -90.69139862]
[36.22039795 -105.71210480]
[37.99947739 -120.62819672]
[41.71033859 -135.18444824]
[47.28947830 -149.13179016]
[54.64142990 -162.23155212]
[63.64039993 -174.25958252]
[74.13239288 -185.01007080]
[85.93788910 -194.29907227]
[98.85486603 -201.96760559]
[112.66231537 -207.88449097]
[127.12396240 -211.94845581]
[141.99234009 -214.08998108]
[157.01306152 -214.27241516]
[171.92906189 -212.49261475]
[186.48513794 -208.78106689]
[200.43222046 -203.20126343]
[213.53163147 -195.84867859]
[225.55923462 -186.84913635]
[236.30921936 -176.35662842]
[245.59765625 -164.55070496]
[253.26557922 -151.63334656]
[259.18179321 -137.82562256]
[263.24508667 -123.36379242]
[265.38589478 -108.49530029]
[265.56759644 -93.47457886]
[263.78710938 -78.55865479]
[260.07485962 -64.00275421]
[254.49440002 -50.05595016]
[247.14118958 -36.95688629]
[238.14108276 -24.92970848]
[227.64807129 -14.18021774]
[215.84169006 -4.89235067]
[202.92398071 2.77496457]
[189.11596680 8.69053078]
[174.65393066 12.75312328]
[159.78533936 14.89322853]
[144.76461792 15.07422352]
[129.84877014 13.29301262]
[126.14261627 27.82794952]
[122.43645477 42.36288452]
[118.73029327 56.89782333]
[115.02413177 71.43275452]
[127.80130768 83.60184479]
[132.27012634 100.67148590]
[127.09510040 117.54045105]
[113.82277679 129.16749573]
[116.92109680 143.84402466]
[120.01941681 158.52055359]
[123.11773682 173.19706726]
[129.85012817 159.79278564]
[142.30653381 151.43588257]
[157.26266479 150.28952026]
[170.84716797 156.65043640]
[179.54373169 168.87211609]
[181.10128784 183.79103088]
[175.11665344 197.54545593]
[163.13894653 206.57510376]
[148.26855469 208.54267883]
[134.35462952 202.93885803]
[124.99879456 191.21430969]
[124.99879456 206.21430969]
[135.89334106 217.34742737]
[135.67967224 232.55957031]
[124.99879456 242.87724304]
[124.99879456 257.87725830]
[124.99879456 272.87725830]
[124.99879456 287.87725830]
[124.99879456 302.87725830]
[124.99879456 317.87725830]
[124.99879456 332.87725830]
[124.99879456 347.87725830]
[124.99879456 362.87725830]
[124.99879456 377.87725830]
[139.53868103 381.93856812]
[152.44306946 389.77307129]
[162.75434875 400.79940796]
[169.70736694 414.19934082]
[172.78616333 428.97848511]
[171.76228333 444.04016113]
[166.71166992 458.26669312]
[158.00915527 470.60235596]
[146.30049133 480.13177490]
[132.45454407 486.14779663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 116]
[26 115]
[27 114]
[28 113]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[54 109]
[55 108]
[56 107]
[57 106]
[58 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
