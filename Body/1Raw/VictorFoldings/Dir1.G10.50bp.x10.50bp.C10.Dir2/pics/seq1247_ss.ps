%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAAAGCUAGGGGGGGGGGAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAxxxxxxxxxxAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCCCCCCCCCCCAAUAAAACUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 388.86062622]
[71.01555634 383.30761719]
[58.81560135 374.44128418]
[49.20452881 362.81900024]
[42.78650284 349.17129517]
[39.96496582 334.35610962]
[40.91728210 319.30471802]
[45.58358765 304.96328735]
[53.67055511 292.23333740]
[64.66983032 281.91506958]
[77.88998413 274.65710449]
[92.50000000 270.91564941]
[92.50000000 255.91566467]
[92.50000000 240.91566467]
[92.50000000 225.91566467]
[92.50000000 210.91566467]
[92.50000000 195.91566467]
[92.50000000 180.91566467]
[92.50000000 165.91566467]
[92.50000000 150.91566467]
[92.50000000 135.91566467]
[83.97321320 133.00494385]
[76.41288757 128.10395813]
[70.27491760 121.50823212]
[65.92945099 113.61550140]
[63.63851547 104.90172577]
[48.67723465 103.82466125]
[33.71595383 102.74758911]
[19.39583015 109.47399902]
[7.25698566 100.84279633]
[-7.70429516 99.76572418]
[-22.66557503 98.68865967]
[-37.63712692 97.76524353]
[-52.61736679 96.99558258]
[-67.59761047 96.22592163]
[-82.57785034 95.45626068]
[-94.14248657 106.22820282]
[-109.93364716 105.58419037]
[-120.58271790 93.90631104]
[-119.77178955 78.12284088]
[-107.98197174 67.59783173]
[-92.20796204 68.57558441]
[-81.80818939 80.47602081]
[-66.82794952 81.24568176]
[-51.84770584 82.01534271]
[-36.86746597 82.78500366]
[-29.98359489 79.96994781]
[-21.58850670 83.72737885]
[-6.62722540 84.80444336]
[8.33405495 85.88151550]
[21.58404922 79.07806396]
[34.79302597 87.78630829]
[49.75430679 88.86338043]
[64.71558380 89.94044495]
[68.56015015 81.08650970]
[74.58074951 73.54161835]
[82.36067963 67.82798004]
[91.36147308 64.34105682]
[100.96015930 63.32217789]
[110.49239349 64.84187317]
[119.29842377 68.79494476]
[129.62931824 57.91963196]
[139.96022034 47.04431915]
[150.29112244 36.16900253]
[153.96380615 27.73649597]
[160.94754028 25.17921257]
[171.49955750 14.51830387]
[182.05157471 3.85739517]
[172.62843323 -7.83382225]
[164.57357788 -20.50660133]
[157.98831177 -34.00156784]
[152.95542908 -48.14900970]
[149.53822327 -62.77100754]
[147.77969360 -77.68367004]
[147.70193481 -92.69946289]
[149.30593872 -107.62953949]
[152.57151794 -122.28614044]
[157.45762634 -136.48493958]
[163.90278625 -150.04737854]
[171.82597351 -162.80290222]
[181.12753296 -174.59107971]
[191.69047546 -185.26367188]
[203.38197327 -194.68644714]
[216.05499268 -202.74093628]
[229.55015564 -209.32580566]
[243.69775391 -214.35826111]
[258.31985474 -217.77502441]
[273.23257446 -219.53311157]
[288.24835205 -219.61041260]
[303.17837524 -218.00596619]
[317.83489990 -214.73994446]
[332.03353882 -209.85342407]
[345.59579468 -203.40785217]
[358.35107422 -195.48428345]
[370.13897705 -186.18237305]
[380.81124878 -175.61911011]
[390.23367310 -163.92733765]
[398.28778076 -151.25407410]
[404.87225342 -137.75871277]
[409.90429688 -123.61096954]
[413.32061768 -108.98876953]
[415.07824707 -94.07599640]
[415.15512085 -79.06020355]
[413.55020142 -64.13022614]
[410.28375244 -49.47381592]
[405.39678955 -35.27530670]
[398.95083618 -21.71324921]
[391.02688599 -8.95820713]
[381.72460938 2.82941461]
[371.16104126 13.50137329]
[359.46896362 22.92345810]
[346.79547119 30.97717667]
[333.29992676 37.56124115]
[319.15203857 42.59285736]
[304.52972412 46.00873947]
[289.61691284 47.76593781]
[274.60110474 47.84234619]
[259.67117310 46.23700333]
[245.01486206 42.97010422]
[230.81649780 38.08272934]
[217.25463867 31.63634491]
[204.49983215 23.71201897]
[192.71247864 14.40941048]
[182.16046143 25.07032013]
[171.60844421 35.73122787]
[161.16644287 46.49990845]
[150.83554077 57.37522125]
[140.50463867 68.25053406]
[130.17373657 79.12584686]
[136.64172363 101.88909912]
[127.86708832 123.86650085]
[107.50000000 135.91566467]
[107.50000000 150.91566467]
[107.50000000 165.91566467]
[107.50000000 180.91566467]
[107.50000000 195.91566467]
[107.50000000 210.91566467]
[107.50000000 225.91566467]
[107.50000000 240.91566467]
[107.50000000 255.91566467]
[107.50000000 270.91564941]
[122.11001587 274.65710449]
[135.33016968 281.91506958]
[146.32945251 292.23333740]
[154.41641235 304.96328735]
[159.08271790 319.30471802]
[160.03503418 334.35610962]
[157.21350098 349.17129517]
[150.79547119 362.81900024]
[141.18440247 374.44128418]
[128.98443604 383.30761719]
[114.96250153 388.86062622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 54]
[27 53]
[28 52]
[30 50]
[31 49]
[32 48]
[33 46]
[34 45]
[35 44]
[36 43]
[61 129]
[62 128]
[63 127]
[64 126]
[66 125]
[67 124]
[68 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
