%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUACUACGGGGGGGGGGUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAxxxxxxxxxxAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCCCCCCCCCCCACCCUUACUAC\
) } def
/len { sequence length } bind def

/coor [
[74.25947571 378.72375488]
[61.92636490 370.07260132]
[51.82791519 358.89364624]
[44.47066116 345.74761963]
[40.22364044 331.29388428]
[39.29988480 316.25744629]
[41.74572372 301.39251709]
[47.43847656 287.44476318]
[56.09259796 275.11373901]
[67.27400208 265.01800537]
[80.42182922 257.66394043]
[94.87659454 253.42041016]
[93.95318604 238.44886780]
[93.02976990 223.47731018]
[92.10635376 208.50576782]
[91.18294525 193.53421021]
[90.25952911 178.56266785]
[89.33611298 163.59111023]
[88.41270447 148.61956787]
[87.48928833 133.64801025]
[74.57659149 126.01504517]
[61.01469421 132.42402649]
[47.45279694 138.83299255]
[33.89089966 145.24197388]
[20.32900429 151.65093994]
[11.44182396 165.43318176]
[-4.92201519 164.35763550]
[-11.92879772 149.53073120]
[-2.37054634 136.20512390]
[13.92002964 138.08905029]
[27.48192596 131.68006897]
[41.04382324 125.27110291]
[54.60571671 118.86212158]
[68.16761780 112.45314789]
[67.16950226 94.95640564]
[74.87841034 79.77750397]
[88.75489044 70.80716705]
[80.34148407 58.38885498]
[71.92807007 45.97054291]
[63.51466370 33.55222702]
[55.10125351 21.13391304]
[41.56656647 27.66308594]
[27.22543144 32.15192795]
[12.38352871 34.50475311]
[-2.64278460 34.67141724]
[-17.53322220 32.64836121]
[-31.97039223 28.47871208]
[-45.64656448 22.25134277]
[-58.27023697 14.09899235]
[-69.57232666 4.19542789]
[-79.31193542 -7.24825573]
[-87.28145599 -19.98813629]
[-93.31102753 -33.75266266]
[-97.27212524 -48.24843979]
[-99.08030701 -63.16649246]
[-98.69705200 -78.18884277]
[-96.13050842 -92.99528503]
[-91.43540192 -107.27021790]
[-84.71179199 -120.70937347]
[-76.10300446 -133.02630615]
[-65.79252625 -143.95845032]
[-54.00013733 -153.27281189]
[-40.97718430 -160.77085876]
[-27.00125504 -166.29273987]
[-12.37024784 -169.72077942]
[2.60397720 -170.98191833]
[17.60224342 -170.04924011]
[32.30486298 -166.94265747]
[46.39844513 -161.72837830]
[59.58258820 -154.51753235]
[71.57627106 -145.46383667]
[82.12384033 -134.76025391]
[91.00048828 -122.63494873]
[98.01699829 -109.34636688]
[103.02381134 -95.17774963]
[105.91420746 -80.43110657]
[106.62658691 -65.42076874]
[105.14575958 -50.46667099]
[101.50328827 -35.88756943]
[95.77680969 -21.99421310]
[88.08839417 -9.08274174]
[78.60191345 2.57163429]
[67.51956940 12.72050285]
[75.93297577 25.13881683]
[84.34638977 37.55713272]
[92.75979614 49.97544479]
[101.17321014 62.39376068]
[99.74340057 47.46205902]
[95.24479675 33.15253448]
[98.86597443 18.59619331]
[109.54486084 8.06237125]
[124.14936829 4.64060783]
[138.39602661 9.33449650]
[148.10633850 20.76733398]
[150.43231201 35.58589935]
[144.69171143 49.44395065]
[132.56858826 58.27684402]
[122.54324341 69.43446350]
[136.69056702 64.44914246]
[150.83787537 59.46381760]
[164.98519897 54.47849655]
[179.13250732 49.49317169]
[183.43327332 34.58401489]
[195.69671631 25.07676315]
[211.20727539 24.62715149]
[224.00083923 33.40806580]
[229.15800476 48.04306412]
[224.69575500 62.90469360]
[212.32991028 72.27835083]
[196.81538391 72.55966949]
[184.11782837 63.64048767]
[169.97052002 68.62580872]
[155.82319641 73.61112976]
[141.67588806 78.59645844]
[127.52856445 83.58177948]
[128.45198059 98.55332947]
[143.10470581 101.76232147]
[157.75743103 104.97132111]
[174.52337646 102.45347595]
[181.58409119 117.86719513]
[168.72735596 128.91891479]
[154.54843140 119.62404633]
[139.89570618 116.41504669]
[125.24298859 113.20605469]
[119.54744720 118.08568573]
[132.34909058 125.90348053]
[128.86982727 140.49440002]
[113.91789246 141.69424438]
[108.15637207 127.84496307]
[102.46083832 132.72459412]
[103.38425446 147.69615173]
[104.30766296 162.66769409]
[105.23107910 177.63925171]
[106.15449524 192.61079407]
[107.07790375 207.58235168]
[108.00131989 222.55389404]
[108.92473602 237.52545166]
[109.84814453 252.49699402]
[124.71483612 254.93203735]
[138.66673279 260.61465454]
[151.00404358 269.25979614]
[161.10791016 280.43386841]
[168.47152710 293.57635498]
[172.72555542 308.02801514]
[173.65660095 323.06399536]
[171.21795654 337.93011475]
[165.53196716 351.88064575]
[156.88381958 364.21585083]
[145.70732117 374.31698608]
[132.56304932 381.67742920]
[118.11034393 385.92794800]
[103.07412720 386.85534668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[37 87]
[38 86]
[39 85]
[40 84]
[41 83]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
