%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUUAUUAGGGGGGGGGGCAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACxxxxxxxxxxUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACCCCCCCCCCCAUAAAUAUUA\
) } def
/len { sequence length } bind def

/coor [
[83.41245270 366.02880859]
[70.19226074 358.75631714]
[59.30545425 348.30932617]
[51.49432373 335.40008545]
[47.29144287 320.90875244]
[46.98337173 305.82342529]
[50.59111404 291.17260742]
[57.86868668 277.95520020]
[68.31989288 267.07244873]
[81.23215485 259.26629639]
[95.72509003 255.06901550]
[95.41303253 240.07225037]
[95.10098267 225.07550049]
[94.78892517 210.07875061]
[94.47686768 195.08200073]
[94.16481018 180.08523560]
[93.85275269 165.08848572]
[93.54069519 150.09173584]
[93.22864532 135.09498596]
[92.91658783 120.09822845]
[71.78205109 94.22956848]
[102.34228516 63.78175354]
[92.35955811 52.58598709]
[82.37683105 41.39022064]
[72.39410400 30.19445610]
[62.18062592 19.20879173]
[51.74081421 8.43798256]
[41.30100250 -2.33282590]
[29.47064018 6.91242409]
[16.72457695 14.84778595]
[3.20723319 21.38334465]
[-10.92822742 26.44504929]
[-25.52164078 29.97554588]
[-40.40764999 31.93482971]
[-55.41758728 32.30070114]
[-70.38137817 31.06901741]
[-85.12947083 28.25373268]
[-99.49475861 23.88674355]
[-113.31447601 18.01753616]
[-126.43202972 10.71260929]
[-138.69877625 2.05473471]
[-149.97575378 -7.85798645]
[-160.13516235 -18.91323662]
[-169.06188965 -30.98575020]
[-176.65480042 -43.93873596]
[-182.82785034 -57.62543106]
[-187.51109314 -71.89074707]
[-190.65147400 -86.57305145]
[-192.21339417 -101.50598907]
[-192.17918396 -116.52034760]
[-190.54919434 -131.44599915]
[-187.34193420 -146.11384583]
[-182.59370422 -160.35766602]
[-176.35833740 -174.01608276]
[-168.70646667 -186.93432617]
[-159.72479248 -198.96601868]
[-149.51510620 -209.97483826]
[-138.19306946 -219.83605957]
[-125.88697815 -228.43792725]
[-112.73625946 -235.68298340]
[-98.88993835 -241.48913574]
[-84.50489807 -245.79060364]
[-69.74412537 -248.53863525]
[-54.77487183 -249.70210266]
[-39.76675797 -249.26780701]
[-24.88983345 -247.24069214]
[-10.31266403 -243.64372253]
[3.79957747 -238.51763916]
[17.28698921 -231.92053223]
[29.99674988 -223.92715454]
[41.78484726 -214.62806702]
[52.51771164 -204.12866211]
[62.07373047 -192.54786682]
[70.34463501 -180.01693726]
[77.23670197 -166.67784119]
[82.67183685 -152.68171692]
[86.58846283 -138.18716431]
[88.94219208 -123.35840607]
[89.70636749 -108.36347198]
[88.87232208 -93.37225342]
[86.44950104 -78.55462646]
[82.46537018 -64.07848358]
[76.96506500 -50.10784531]
[70.01091003 -36.80101395]
[61.68169785 -24.30876160]
[52.07180786 -12.77263832]
[62.51162338 -2.00182986]
[72.95143127 8.76897907]
[77.68901825 9.73375034]
[81.84824371 13.72526360]
[83.58987427 20.21172905]
[93.57260132 31.40749550]
[103.55532074 42.60326004]
[113.53804779 53.79902649]
[128.33076477 56.28414536]
[141.42391968 48.96503830]
[154.51705933 41.64593506]
[167.61021423 34.32682800]
[180.70336914 27.00772285]
[191.57873535 14.00146008]
[207.08731079 20.85131645]
[204.79835510 37.65003586]
[188.02247620 40.10087585]
[174.92932129 47.41998291]
[161.83616638 54.73908997]
[148.74301147 62.05819321]
[135.64985657 69.37729645]
[136.35101318 76.84445190]
[151.28532410 75.44214630]
[166.21965027 74.04009247]
[167.62145996 88.97444916]
[152.68762207 90.37645721]
[137.75332642 91.77876282]
[138.45446777 99.24591827]
[152.68124390 103.99973297]
[166.90803528 108.75354767]
[181.13481140 113.50736237]
[195.36158752 118.26117706]
[210.30049133 112.41236115]
[224.11482239 120.56980133]
[226.20741272 136.47579956]
[214.97299194 147.92863464]
[199.02966309 146.14266968]
[190.60777283 132.48796082]
[176.38099670 127.73413849]
[162.15422058 122.98032379]
[147.92742920 118.22650909]
[133.70065308 113.47269440]
[120.36750793 120.36456299]
[107.91333771 119.78617096]
[108.22539520 134.78292847]
[108.53745270 149.77967834]
[108.84951019 164.77642822]
[109.16156769 179.77317810]
[109.47361755 194.76994324]
[109.78567505 209.76669312]
[110.09773254 224.76344299]
[110.40979004 239.76019287]
[110.72184753 254.75695801]
[125.37683868 258.34771729]
[138.60264587 265.60998535]
[149.49751282 276.04858398]
[157.31861877 288.95178223]
[161.53268433 303.43984985]
[161.85240173 318.52493286]
[158.25598145 333.17855835]
[150.98861694 346.40155029]
[140.54580688 357.29238892]
[127.63957977 365.10852051]
[113.14989471 369.31698608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 94]
[23 93]
[24 92]
[25 91]
[26 88]
[27 87]
[28 86]
[95 107]
[96 106]
[97 105]
[98 104]
[99 103]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
