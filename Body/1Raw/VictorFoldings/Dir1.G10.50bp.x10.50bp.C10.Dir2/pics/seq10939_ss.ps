%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCACUAAGGGGGGGGGGUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAxxxxxxxxxxCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUACCCCCCCCCCACCCCACUAA\
) } def
/len { sequence length } bind def

/coor [
[99.14384460 387.22424316]
[85.29790497 381.20822144]
[73.58924866 371.67880249]
[64.88671875 359.34313965]
[59.83612061 345.11660767]
[58.81222916 330.05493164]
[61.89102554 315.27578735]
[68.84404755 301.87585449]
[79.15533447 290.84951782]
[92.05971527 283.01501465]
[106.59960175 278.95370483]
[106.59960175 263.95370483]
[106.59960175 248.95368958]
[106.59960175 233.95368958]
[106.59960175 218.95368958]
[106.59960175 203.95368958]
[106.59960175 188.95368958]
[106.59960175 173.95368958]
[106.59960175 158.95368958]
[106.59960175 143.95368958]
[106.59960175 128.95368958]
[101.16018677 123.79009247]
[99.86904144 138.73442078]
[87.38016510 147.04272461]
[73.09773254 142.45881653]
[67.77648926 128.43440247]
[75.42334747 115.52992249]
[90.28136444 113.46289062]
[84.84194946 108.29928589]
[69.86223602 109.07913208]
[54.88252258 109.85897827]
[39.90280914 110.63882446]
[24.93201637 111.57444763]
[9.97176743 112.66576385]
[-5.38549471 119.84843445]
[-16.53878403 107.07970428]
[-7.35659647 92.82755280]
[8.88045692 97.70551300]
[23.84070587 96.61420441]
[30.32492256 92.96720123]
[39.12296295 95.65910339]
[54.10267639 94.87926483]
[69.08238983 94.09941864]
[84.06210327 93.31957245]
[96.58806610 85.06728363]
[103.21656799 71.61132050]
[109.84506226 58.15534973]
[96.94378662 50.48781586]
[84.68386841 41.83168411]
[73.14090729 32.24033356]
[62.38605881 21.77289009]
[52.48563766 10.49389458]
[43.50067902 -1.52711356]
[35.48658371 -14.21602058]
[28.49276161 -27.49459457]
[22.56233025 -41.28096771]
[17.73185349 -55.49013901]
[14.03111458 -70.03450775]
[11.48292828 -84.82439423]
[10.10300636 -99.76862335]
[9.89985657 -114.77504730]
[10.87473202 -129.75115967]
[13.02162075 -144.60459900]
[16.32728767 -159.24382019]
[20.77135086 -173.57855225]
[26.32641029 -187.52040100]
[32.95821762 -200.98342896]
[40.62588882 -213.88462830]
[49.28214264 -226.14445496]
[58.87361145 -237.68733215]
[69.34116364 -248.44207764]
[80.62026215 -258.34237671]
[92.64135742 -267.32720947]
[105.33035278 -275.34118652]
[118.60899353 -282.33486938]
[132.39543152 -288.26516724]
[146.60464478 -293.09548950]
[161.14906311 -296.79608154]
[175.93896484 -299.34411621]
[190.88320923 -300.72387695]
[205.88963318 -300.92687988]
[220.86573792 -299.95184326]
[235.71916199 -297.80480957]
[250.35835266 -294.49899292]
[264.69302368 -290.05477905]
[278.63482666 -284.49957275]
[292.09777832 -277.86764526]
[304.99890137 -270.19982910]
[317.25863647 -261.54345703]
[328.80142212 -251.95187378]
[339.55606079 -241.48420715]
[349.45623779 -230.20500183]
[358.44094849 -218.18382263]
[366.45480347 -205.49475098]
[373.44833374 -192.21603394]
[379.37850952 -178.42953491]
[384.20867920 -164.22026062]
[387.90911865 -149.67582703]
[390.45700073 -134.88587952]
[391.83660889 -119.94161987]
[392.03945923 -104.93519592]
[391.06430054 -89.95910645]
[388.91708374 -75.10570526]
[385.61111450 -60.46655273]
[381.16677856 -46.13191605]
[375.61141968 -32.19017410]
[368.97933960 -18.72727776]
[361.31140137 -5.82623482]
[352.65490723 6.43341494]
[343.06320190 17.97608566]
[332.59542847 28.73061371]
[321.31613159 38.63069153]
[309.29486084 47.61527634]
[296.60568237 55.62898254]
[283.32690430 62.62240219]
[269.54034424 68.55240631]
[255.33102417 73.38245392]
[240.78654480 77.08274841]
[225.99658203 79.63047791]
[211.05230713 81.00994110]
[196.04588318 81.21263123]
[181.06980896 80.23729706]
[166.21643066 78.08995819]
[151.57730103 74.78383636]
[137.24272156 70.33934021]
[123.30103302 64.78385162]
[116.67253113 78.23981476]
[110.04402924 91.69577789]
[124.40232849 102.93001556]
[121.59960175 128.95368958]
[121.59960175 143.95368958]
[121.59960175 158.95368958]
[121.59960175 173.95368958]
[121.59960175 188.95368958]
[121.59960175 203.95368958]
[121.59960175 218.95368958]
[121.59960175 233.95368958]
[121.59960175 248.95368958]
[121.59960175 263.95370483]
[121.59960175 278.95370483]
[136.13948059 283.01501465]
[149.04386902 290.84951782]
[159.35514832 301.87585449]
[166.30818176 315.27578735]
[169.38697815 330.05493164]
[168.36308289 345.11660767]
[163.31248474 359.34313965]
[154.60995483 371.67880249]
[142.90129089 381.20822144]
[129.05535889 387.22424316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 44]
[30 43]
[31 42]
[32 41]
[33 39]
[34 38]
[45 128]
[46 127]
[47 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
