%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUCCUCGGGGGGGGGGAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAxxxxxxxxxxAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCCCCCCCCCCCAUUCUCCUC\
) } def
/len { sequence length } bind def

/coor [
[66.28209686 550.67596436]
[55.06666565 540.61065674]
[46.47526550 528.22985840]
[40.97122192 514.20123291]
[38.85136414 499.28134155]
[40.23000717 484.27481079]
[45.03280640 469.99090576]
[53.00075150 457.19995117]
[63.70414352 446.59173584]
[76.56575775 438.73837280]
[90.89199066 434.06332397]
[89.64511871 419.11526489]
[88.39824677 404.16717529]
[87.15136719 389.21908569]
[85.90449524 374.27099609]
[84.65762329 359.32290649]
[83.41074371 344.37481689]
[82.16387177 329.42672729]
[80.91699982 314.47863770]
[79.67012024 299.53054810]
[78.42324829 284.58245850]
[70.07431793 297.04421997]
[56.67433548 303.78518677]
[41.69185257 303.06048584]
[29.00503540 295.05767822]
[21.89783096 281.84829712]
[22.20991325 266.85156250]
[29.86050415 253.94927979]
[42.86927032 246.48121643]
[57.86893082 246.38043213]
[70.97687531 253.67303467]
[78.80010986 266.47122192]
[80.66772461 251.58795166]
[82.53533936 236.70466614]
[84.40294647 221.82138062]
[85.80525208 206.88708496]
[86.74088287 191.91629028]
[87.67651367 176.94549561]
[88.61213684 161.97470093]
[89.54776764 147.00390625]
[90.48339844 132.03312683]
[91.41902161 117.06233215]
[81.91136169 106.12841034]
[82.81514740 91.66710663]
[93.61018372 82.00204468]
[94.54581451 67.03125000]
[86.59381866 56.82244873]
[87.72020721 44.33444595]
[96.77217102 36.24931717]
[98.01904297 21.30123138]
[98.64302063 6.31421471]
[98.64302063 -8.68578529]
[98.64302063 -23.68578529]
[95.62610626 -29.68626213]
[96.07406616 -35.43349075]
[98.96806335 -39.30651474]
[99.59203339 -54.29353333]
[100.21601105 -69.28054810]
[85.50133514 -72.36729431]
[71.49546051 -77.83403778]
[58.58047867 -85.53164673]
[47.10872650 -95.25012207]
[37.39315796 -106.72434235]
[29.69882393 -119.64126587]
[24.23562813 -133.64852905]
[21.15261078 -148.36399841]
[20.53388214 -163.38621521]
[22.39631653 -178.30537415]
[26.68910980 -192.71444702]
[33.29515076 -206.22038269]
[42.03421783 -218.45469666]
[52.66790771 -229.08364868]
[64.90612030 -237.81726074]
[78.41500092 -244.41726685]
[92.82599640 -248.70362854]
[107.74597931 -250.55941772]
[122.76792145 -249.93399048]
[137.48200989 -246.84440613]
[151.48683167 -241.37495422]
[164.40032959 -233.67486572]
[175.87020874 -223.95417786]
[185.58355713 -212.47808838]
[193.27540588 -199.55967712]
[198.73590088 -185.55136108]
[201.81608582 -170.83531189]
[202.43193054 -155.81297302]
[200.56661987 -140.89418030]
[196.27104187 -126.48591614]
[189.66239929 -112.98126221]
[180.92097473 -100.74862671]
[170.28524780 -90.12172699]
[158.04534912 -81.39047241]
[144.53520203 -74.79306793]
[130.12336731 -70.50947571]
[115.20303345 -68.65657043]
[114.57905579 -53.66955566]
[113.95507812 -38.68253708]
[113.64302063 -23.68578529]
[113.64302063 -8.68578529]
[113.64302063 6.31421471]
[115.59668732 8.40957451]
[116.81005859 11.42978859]
[116.91716766 15.08634567]
[115.66712952 18.96042252]
[112.96713257 22.54810524]
[111.72025299 37.49619293]
[120.05928802 52.90594482]
[109.51660156 67.96688080]
[108.58097839 82.93766785]
[118.08863831 93.87158966]
[117.18485260 108.33289337]
[106.38981628 117.99795532]
[105.45418549 132.96875000]
[104.51856232 147.93954468]
[103.58293152 162.91033936]
[102.64730072 177.88111877]
[101.71166992 192.85191345]
[100.77604675 207.82270813]
[103.16450500 212.60964966]
[103.40834808 217.35232544]
[101.89479065 221.22669983]
[99.28623199 223.68899536]
[97.41861725 238.57228088]
[95.55100250 253.45556641]
[93.68338776 268.33883667]
[93.37133026 283.33560181]
[94.61820984 298.28369141]
[95.86508179 313.23178101]
[97.11196136 328.17984009]
[98.35883331 343.12792969]
[99.60570526 358.07601929]
[100.85258484 373.02410889]
[102.09945679 387.97219849]
[103.34632874 402.92028809]
[104.59320831 417.86837769]
[105.84008026 432.81646729]
[120.74285889 435.05337524]
[134.72784424 440.66738892]
[147.04083252 449.35571289]
[157.01779175 460.64981079]
[164.12069702 473.94061279]
[167.96649170 488.51138306]
[168.34777832 503.57626343]
[165.24398804 518.32293701]
[158.82249451 531.95599365]
[149.42962646 543.74035645]
[137.57191467 553.04040527]
[123.88882446 559.35467529]
[109.11827850 562.34259033]
[94.05683136 561.84307861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[32 125]
[33 124]
[34 123]
[35 122]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
[45 109]
[46 108]
[49 106]
[50 105]
[51 100]
[52 99]
[53 98]
[56 97]
[57 96]
[58 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
