%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAAAAAAGGGGGGGGGGUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAxxxxxxxxxxCCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCCCCCCCCCCCACGAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[94.53794861 386.80496216]
[81.31774902 379.53247070]
[70.43094635 369.08547974]
[62.61981583 356.17623901]
[58.41693497 341.68490601]
[58.10886002 326.59957886]
[61.71660233 311.94876099]
[68.99417877 298.73135376]
[79.44538116 287.84860229]
[92.35764313 280.04244995]
[106.85057831 275.84515381]
[106.53852844 260.84841919]
[106.22647095 245.85165405]
[105.91441345 230.85490417]
[105.60235596 215.85815430]
[105.29029846 200.86140442]
[104.97824097 185.86463928]
[104.66619110 170.86788940]
[104.35413361 155.87113953]
[104.04207611 140.87438965]
[92.11759186 139.27072144]
[81.46628571 134.35360718]
[72.95884705 126.71839142]
[67.23281860 117.17311859]
[64.64615631 106.65563965]
[65.25838470 96.14263916]
[68.83992004 86.55918884]
[74.90751648 78.69741058]
[82.78137207 73.15118408]
[77.87982178 58.97462463]
[72.97827148 44.79806900]
[68.07672119 30.62150955]
[58.97167206 42.54199982]
[43.98092651 43.06883621]
[34.06150818 31.81694031]
[36.46370697 17.01054192]
[49.43171310 9.47191811]
[63.48649979 14.71072006]
[59.18694687 9.55113220]
[58.31938553 3.85212874]
[60.25926590 -0.57645857]
[57.46694183 -15.31426430]
[54.67461777 -30.05207062]
[51.72913361 -44.76003265]
[48.63081360 -59.43655777]
[45.53248978 -74.11308289]
[42.43416977 -88.78961182]
[39.33584595 -103.46613312]
[24.35053062 -102.39187622]
[9.35851383 -103.36819458]
[-5.36091042 -106.37689972]
[-19.53352737 -111.36193848]
[-32.89531326 -118.23045349]
[-45.19734192 -126.85448456]
[-56.21043396 -137.07336426]
[-65.72943115 -148.69673157]
[-73.57698822 -161.50802612]
[-79.60691071 -175.26861572]
[-83.70687103 -189.72213745]
[-85.80049133 -204.59931946]
[-85.84876251 -219.62301636]
[-83.85079193 -234.51333618]
[-79.84379578 -248.99290466]
[-73.90242004 -262.79196167]
[-66.13735199 -275.65341187]
[-56.69324875 -287.33770752]
[-45.74604797 -297.62716675]
[-33.49969482 -306.33004761]
[-20.18232346 -313.28430176]
[-6.04203176 -318.36032104]
[8.65775394 -321.46353149]
[23.64318657 -322.53619385]
[38.63509750 -321.55822754]
[53.35419464 -318.54794312]
[67.52627563 -313.56137085]
[80.88731384 -306.69140625]
[93.18840790 -298.06604004]
[104.20040131 -287.84597778]
[113.71813202 -276.22158813]
[121.56430054 -263.40942383]
[127.59274292 -249.64817810]
[131.69113159 -235.19422913]
[133.78314209 -220.31681824]
[133.82978821 -205.29312134]
[131.83021545 -190.40299988]
[127.82164001 -175.92387390]
[121.87877655 -162.12547302]
[114.11231232 -149.26483154]
[104.66694641 -137.58157349]
[93.71863556 -127.29331207]
[81.47133636 -118.59173584]
[68.15321350 -111.63893890]
[54.01237106 -106.56445312]
[57.11069489 -91.88793182]
[60.20901489 -77.21140289]
[63.30733871 -62.53487778]
[66.40566254 -47.85835266]
[70.89357758 -41.92503738]
[69.41242218 -32.84439468]
[72.20475006 -18.10658836]
[74.99707031 -3.36878300]
[78.09539032 11.30774212]
[82.25328064 25.71995926]
[87.15483093 39.89651489]
[92.05638123 54.07307434]
[96.95793152 68.24963379]
[125.97155762 74.37548065]
[140.83012390 104.46704865]
[155.82281494 104.93508911]
[170.81552124 105.40313721]
[185.80821228 105.87117767]
[198.43826294 95.97868347]
[214.01330566 99.82542419]
[220.58551025 114.46051025]
[213.11323547 128.65715027]
[197.32858276 131.52490234]
[185.34016418 120.86387634]
[170.34747314 120.39582825]
[155.35478210 119.92778778]
[140.36207581 119.45974731]
[135.03126526 124.73538971]
[147.96420288 132.33401489]
[162.34088135 136.61317444]
[168.90129089 150.10246277]
[163.39077759 164.05360413]
[149.38310242 169.41876221]
[135.96275330 162.71844482]
[131.83332825 148.29795837]
[124.36964417 135.28668213]
[119.03882599 140.56233215]
[119.35088348 155.55908203]
[119.66294098 170.55583191]
[119.97499847 185.55258179]
[120.28705597 200.54934692]
[120.59911346 215.54609680]
[120.91116333 230.54284668]
[121.22322083 245.53959656]
[121.53527832 260.53634644]
[121.84733582 275.53311157]
[136.50233459 279.12387085]
[149.72813416 286.38613892]
[160.62300110 296.82473755]
[168.44410706 309.72793579]
[172.65817261 324.21600342]
[172.97789001 339.30111694]
[169.38146973 353.95471191]
[162.11410522 367.17770386]
[151.67131042 378.06854248]
[138.76507568 385.88467407]
[124.27538300 390.09313965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 106]
[30 105]
[31 104]
[32 103]
[38 102]
[41 101]
[42 100]
[43 99]
[44 97]
[45 96]
[46 95]
[47 94]
[48 93]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
