%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACUACUGGGGGGGGGGAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCAxxxxxxxxxxGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCCCUACUAGU\
) } def
/len { sequence length } bind def

/coor [
[95.87025452 486.64263916]
[82.02431488 480.62661743]
[70.31565094 471.09719849]
[61.61312866 458.76153564]
[56.56252670 444.53500366]
[55.53863525 429.47332764]
[58.61743546 414.69415283]
[65.57045746 401.29425049]
[75.88173676 390.26791382]
[88.78611755 382.43341064]
[103.32600403 378.37207031]
[103.32600403 363.37207031]
[103.32600403 348.37207031]
[103.32600403 333.37207031]
[103.32600403 318.37207031]
[103.32600403 303.37207031]
[103.32600403 288.37207031]
[103.32600403 273.37207031]
[103.32600403 258.37207031]
[103.32600403 243.37208557]
[95.58870697 230.64480591]
[103.32600403 216.84463501]
[93.00502777 209.06813049]
[89.00705719 196.57450867]
[93.01317596 183.87887573]
[103.76824188 175.70658875]
[104.08029938 160.70983887]
[101.05546570 153.91307068]
[104.55808258 145.40522766]
[105.18206024 130.41821289]
[93.36804962 129.31701660]
[83.15023804 123.92028046]
[75.97644806 115.25986481]
[72.75929260 104.80775452]
[73.76418304 94.22899628]
[78.60256195 85.11712646]
[86.32638550 78.75415039]
[82.31864166 64.29946136]
[78.31090546 49.84477615]
[74.15301514 35.43255997]
[69.84543610 21.06437492]
[65.53784943 6.69619083]
[51.90505981 -0.83938098]
[47.74123764 -15.47212601]
[55.00926590 -28.42246628]
[50.70168304 -42.79064941]
[46.39409637 -57.15883636]
[31.53367424 -54.93429947]
[16.50792313 -54.84734726]
[1.62274909 -56.89975357]
[-12.81880379 -61.04973221]
[-26.52272415 -67.21279144]
[-39.21001816 -75.26346588]
[-50.62238693 -85.03784943]
[-60.52749252 -96.33695221]
[-68.72367859 -108.93073273]
[-75.04408264 -122.56279755]
[-79.36002350 -136.95562744]
[-81.58364105 -151.81617737]
[-81.66966248 -166.84193420]
[-79.61633301 -181.72698975]
[-75.46546173 -196.16828918]
[-69.30155182 -209.87182617]
[-61.25009537 -222.55862427]
[-51.47500610 -233.97038269]
[-40.17529297 -243.87478638]
[-27.58100700 -252.07019043]
[-13.94854736 -258.38973999]
[0.44454473 -262.70480347]
[15.30524349 -264.92749023]
[30.33100510 -265.01260376]
[45.21592712 -262.95834351]
[59.65696335 -258.80657959]
[73.36012268 -252.64181519]
[86.04641724 -244.58958435]
[97.45758057 -234.81378174]
[107.36128998 -223.51345825]
[115.55591583 -210.91867065]
[121.87462616 -197.28581238]
[126.18878937 -182.89245605]
[128.41056824 -168.03161621]
[128.49472046 -153.00584412]
[126.43955994 -138.12106323]
[122.28689575 -123.68027496]
[116.12129211 -109.97750092]
[108.06826782 -97.29170227]
[98.29176331 -85.88114166]
[86.99082184 -75.97813416]
[74.39552307 -67.78429413]
[60.76228333 -61.46641922]
[65.06987000 -47.09823608]
[69.37744904 -32.73005295]
[82.57138824 -25.91421318]
[87.14456940 -11.40419388]
[79.90602875 2.38860631]
[84.21361542 16.75679016]
[88.52120209 31.12497520]
[93.48679352 36.66469955]
[92.76559448 45.83703613]
[96.77333069 60.29172516]
[100.78107452 74.74641418]
[121.81304169 82.34739685]
[130.36265564 105.49819946]
[145.35534668 105.03015900]
[160.34805298 104.56211853]
[175.34074402 104.09407043]
[190.33343506 103.62602997]
[198.87727356 100.21211243]
[205.64219666 103.30747986]
[220.64138794 103.15144348]
[235.64057922 102.99540710]
[251.41595459 96.78462982]
[261.75106812 110.22418976]
[251.69778442 123.87584686]
[235.79661560 117.99459839]
[220.79742432 118.15063477]
[205.79823303 118.30667114]
[190.80148315 118.61872864]
[175.80879211 119.08676910]
[160.81608582 119.55480957]
[145.82339478 120.02285767]
[130.83070374 120.49089813]
[120.16907501 131.04219055]
[119.54509735 146.02920532]
[119.07705688 161.02189636]
[118.76499939 176.01864624]
[131.09484863 188.38442993]
[130.70677185 205.50556946]
[118.32600403 216.84463501]
[126.06330872 230.64480591]
[118.32600403 243.37208557]
[118.32600403 258.37207031]
[118.32600403 273.37207031]
[118.32600403 288.37207031]
[118.32600403 303.37207031]
[118.32600403 318.37207031]
[118.32600403 333.37207031]
[118.32600403 348.37207031]
[118.32600403 363.37207031]
[118.32600403 378.37207031]
[132.86589050 382.43341064]
[145.77027893 390.26791382]
[156.08155823 401.29425049]
[163.03457642 414.69415283]
[166.11338806 429.47332764]
[165.08949280 444.53500366]
[160.03889465 458.76153564]
[151.33636475 471.09719849]
[139.62770081 480.62661743]
[125.78176117 486.64263916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[26 126]
[27 125]
[29 124]
[30 123]
[37 101]
[38 100]
[39 99]
[40 97]
[41 96]
[42 95]
[45 92]
[46 91]
[47 90]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
