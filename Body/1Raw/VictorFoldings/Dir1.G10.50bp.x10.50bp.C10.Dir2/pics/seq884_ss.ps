%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAUCACCGGGGGGGGGGCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAxxxxxxxxxxUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUCCCCCCCCCCUCACAGCACC\
) } def
/len { sequence length } bind def

/coor [
[60.92189407 478.82482910]
[47.07595444 472.80880737]
[35.36729431 463.27938843]
[26.66476822 450.94372559]
[21.61416626 436.71719360]
[20.59027481 421.65551758]
[23.66907501 406.87637329]
[30.62209702 393.47644043]
[40.93338013 382.45010376]
[53.83776093 374.61560059]
[68.37764740 370.55429077]
[68.37764740 355.55429077]
[68.37764740 340.55429077]
[68.37764740 325.55429077]
[68.37764740 310.55429077]
[68.37764740 295.55429077]
[68.37764740 280.55429077]
[68.37764740 265.55429077]
[68.37764740 250.55429077]
[68.37764740 235.55429077]
[58.60824203 246.93667603]
[44.27905273 251.37225342]
[29.78753281 247.49981689]
[19.58093834 236.50775146]
[16.79154778 221.76939392]
[22.27538681 207.80773926]
[34.34953690 198.90747070]
[49.30859375 197.79994202]
[62.56181335 204.82504272]
[70.04214478 217.82765198]
[72.83447266 203.08984375]
[75.62679291 188.35203552]
[70.39398193 174.40690613]
[80.56501007 162.28828430]
[75.33219910 148.34313965]
[85.50322723 136.22453308]
[88.29554749 121.48672485]
[91.08787537 106.74891663]
[93.72673798 91.98286438]
[96.21186066 77.19015503]
[98.69697571 62.39744949]
[89.79745483 49.61322784]
[92.52845001 34.64672089]
[104.77109528 26.24117470]
[107.25621033 11.44846630]
[109.74133301 -3.34424043]
[112.22644806 -18.13694763]
[106.88240814 -33.02828217]
[116.62136841 -44.29779434]
[119.10649109 -59.09050369]
[121.59160614 -73.88320923]
[124.07672882 -88.67591858]
[126.56184387 -103.46862030]
[129.04696655 -118.26132965]
[130.60453796 -133.18023682]
[131.22851562 -148.16726685]
[131.85249329 -163.15428162]
[132.47647095 -178.14129639]
[125.31993866 -192.25137329]
[133.57998657 -204.64576721]
[134.20394897 -219.63279724]
[134.82792664 -234.61981201]
[120.24219513 -238.35476685]
[106.75190735 -245.04101562]
[94.94680786 -254.38624573]
[85.34296417 -265.98193359]
[78.36022186 -279.32113647]
[74.30382538 -293.82077026]
[73.35110474 -308.84695435]
[75.54371643 -323.74279785]
[80.78580475 -337.85711670]
[88.84820557 -350.57290649]
[99.37847137 -361.33428955]
[111.91625214 -369.67080688]
[125.91346741 -375.21804810]
[140.75820923 -377.73348999]
[155.80152893 -377.10717773]
[170.38578796 -373.36645508]
[183.87344360 -366.67492676]
[195.67486572 -357.32504272]
[205.27415466 -345.72558594]
[212.25164795 -332.38360596]
[216.30233765 -317.88238525]
[217.24914551 -302.85583496]
[215.05067444 -287.96084595]
[209.80303955 -273.84860229]
[201.73562622 -261.13595581]
[191.20114136 -250.37873840]
[178.66006470 -242.04714966]
[164.66067505 -236.50543213]
[149.81495667 -233.99583435]
[149.19097900 -219.00881958]
[148.56700134 -204.02178955]
[155.76815796 -190.98368835]
[147.46350098 -177.51731873]
[146.83952332 -162.53030396]
[146.21554565 -147.54328918]
[145.59156799 -132.55625916]
[157.59687805 -141.54917908]
[172.47097778 -139.60980225]
[181.76902771 -127.83923340]
[180.21202087 -112.92025757]
[168.68395996 -103.32318878]
[153.72994995 -104.49678802]
[143.83967590 -115.77621460]
[141.35455322 -100.98350525]
[138.86943054 -86.19079590]
[136.38432312 -71.39809418]
[133.89920044 -56.60538483]
[131.41407776 -41.81267548]
[136.93586731 -27.97941589]
[127.01915741 -15.65182877]
[124.53403473 -0.85912192]
[122.04891968 13.93358517]
[119.56379700 28.72629166]
[128.38769531 40.67093658]
[126.07815552 55.70824814]
[113.48968506 64.88256836]
[111.00456238 79.67527771]
[108.51944733 94.46797943]
[110.40354156 102.36318207]
[105.82568359 109.54124451]
[103.03335571 124.27905273]
[100.24103546 139.01686096]
[105.27411652 154.01614380]
[95.30281830 165.08061218]
[100.33589935 180.07989502]
[90.36460114 191.14436340]
[87.57227325 205.88217163]
[84.77995300 220.61997986]
[83.37764740 235.55429077]
[83.37764740 250.55429077]
[83.37764740 265.55429077]
[83.37764740 280.55429077]
[83.37764740 295.55429077]
[83.37764740 310.55429077]
[83.37764740 325.55429077]
[83.37764740 340.55429077]
[83.37764740 355.55429077]
[83.37764740 370.55429077]
[97.91753387 374.61560059]
[110.82191467 382.45010376]
[121.13320160 393.47644043]
[128.08622742 406.87637329]
[131.16502380 421.65551758]
[130.14112854 436.71719360]
[125.09053040 450.94372559]
[116.38800049 463.27938843]
[104.67934418 472.80880737]
[90.83340454 478.82482910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 130]
[31 129]
[32 128]
[34 126]
[36 124]
[37 123]
[38 122]
[39 120]
[40 119]
[41 118]
[44 115]
[45 114]
[46 113]
[47 112]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 98]
[56 97]
[57 96]
[58 95]
[60 93]
[61 92]
[62 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
