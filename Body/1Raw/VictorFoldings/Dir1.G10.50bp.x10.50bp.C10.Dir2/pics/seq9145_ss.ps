%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCCUCAGGGGGGGGGGGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAxxxxxxxxxxCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCCCCCCCCCCCAUGCCUCAG\
) } def
/len { sequence length } bind def

/coor [
[62.90592194 146.75576782]
[52.44461441 136.06324768]
[44.97072983 123.10523987]
[40.95377731 108.69576263]
[40.64609909 93.74002075]
[44.06702805 79.17752838]
[51.00165558 65.92309570]
[61.01435471 54.80937576]
[73.47612762 46.53452301]
[87.60412598 41.61836624]
[86.35725403 26.67027855]
[85.11038208 11.72219181]
[83.86350250 -3.22589517]
[82.61663055 -18.17398262]
[81.36975861 -33.12207031]
[80.12287903 -48.07015610]
[78.87600708 -63.01824188]
[77.62913513 -77.96633148]
[76.38225555 -92.91441345]
[75.13538361 -107.86250305]
[60.13582230 -107.48666382]
[45.13978577 -107.98361206]
[30.19801521 -109.35166168]
[15.36106873 -111.58618164]
[0.67915130 -114.67961884]
[-13.79805946 -118.62149811]
[-28.02157593 -123.39849091]
[-41.94327164 -128.99443054]
[-55.51603699 -135.39036560]
[-68.69394684 -142.56468201]
[-81.43241119 -150.49308777]
[-93.68832397 -159.14875793]
[-105.42022705 -168.50239563]
[-116.58840942 -178.52236938]
[-127.15508270 -189.17475891]
[-137.08450317 -200.42352295]
[-146.34304810 -212.23060608]
[-154.89942932 -224.55604553]
[-162.72465515 -237.35815430]
[-169.79226685 -250.59359741]
[-176.07835388 -264.21759033]
[-181.56163025 -278.18402100]
[-186.22355652 -292.44567871]
[-190.04835510 -306.95425415]
[-193.02307129 -321.66070557]
[-195.13766479 -336.51519775]
[-196.38494873 -351.46752930]
[-196.76072693 -366.46710205]
[-196.26371765 -381.46313477]
[-194.89561462 -396.40490723]
[-192.66102600 -411.24185181]
[-189.56753540 -425.92373657]
[-185.62557983 -440.40093994]
[-180.84854126 -454.62445068]
[-175.25254822 -468.54611206]
[-168.85653687 -482.11883545]
[-161.68217468 -495.29672241]
[-153.75372314 -508.03515625]
[-145.09800720 -520.29101562]
[-135.74430847 -532.02288818]
[-125.72429657 -543.19104004]
[-115.07186127 -553.75769043]
[-103.82305145 -563.68701172]
[-92.01593781 -572.94555664]
[-79.69045258 -581.50189209]
[-66.88832092 -589.32702637]
[-53.65285110 -596.39459229]
[-40.02883148 -602.68066406]
[-26.06235886 -608.16387939]
[-11.80069351 -612.82574463]
[2.70790577 -616.65045166]
[17.41434860 -619.62512207]
[32.26887131 -621.73962402]
[47.22121048 -622.98687744]
[62.22077560 -623.36260986]
[77.21680450 -622.86553955]
[92.15856934 -621.49731445]
[106.99549103 -619.26269531]
[121.67738342 -616.16912842]
[136.15457153 -612.22711182]
[150.37803650 -607.45001221]
[164.29968262 -601.85400391]
[177.87240601 -595.45794678]
[191.05024719 -588.28350830]
[203.78865051 -580.35498047]
[216.04449463 -571.69921875]
[227.77632141 -562.34545898]
[238.94441223 -552.32543945]
[249.51100159 -541.67297363]
[259.44033813 -530.42407227]
[268.69879150 -518.61694336]
[277.25506592 -506.29141235]
[285.08016968 -493.48925781]
[292.14767456 -480.25375366]
[298.43365479 -466.62969971]
[303.91680908 -452.66320801]
[308.57861328 -438.40151978]
[312.40328979 -423.89291382]
[315.37789917 -409.18646240]
[317.49237061 -394.33193970]
[318.73953247 -379.37957764]
[319.11517334 -364.38000488]
[318.61804199 -349.38400269]
[317.24981689 -334.44223022]
[315.01510620 -319.60531616]
[311.92147827 -304.92343140]
[307.97943115 -290.44628906]
[303.20227051 -276.22280884]
[297.60614014 -262.30117798]
[291.21005249 -248.72850037]
[284.03555298 -235.55068970]
[276.10699463 -222.81231689]
[267.45117188 -210.55650330]
[258.09738159 -198.82472229]
[248.07728577 -187.65667725]
[237.42477417 -177.09013367]
[226.17587280 -167.16085815]
[214.36868286 -157.90243530]
[202.04312134 -149.34622192]
[189.24093628 -141.52114868]
[176.00540161 -134.45370483]
[162.38133240 -128.16778564]
[148.41481018 -122.68467712]
[134.15310669 -118.02293396]
[119.64447784 -114.19831848]
[104.93801117 -111.22377777]
[90.08347321 -109.10937500]
[91.33034515 -94.16129303]
[92.57721710 -79.21320343]
[93.82409668 -64.26511383]
[95.07096863 -49.31703186]
[96.31784058 -34.36894226]
[97.56472015 -19.42085648]
[98.81159210 -4.47276974]
[100.05846405 10.47531700]
[101.30534363 25.42340469]
[102.55221558 40.37149048]
[117.29945374 42.87905884]
[130.95994568 48.97496033]
[142.67553711 58.27624512]
[151.71025085 70.19860840]
[157.49653625 83.99309540]
[159.67089844 98.79313660]
[158.09674072 113.66899109]
[152.87295532 127.68615723]
[144.32769775 139.96408081]
[132.99777222 149.73147583]
[119.59494019 156.37474060]
[104.96115875 159.47654724]
[90.01570892 158.84205627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
