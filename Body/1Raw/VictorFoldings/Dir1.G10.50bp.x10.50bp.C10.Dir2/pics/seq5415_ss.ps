%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUACUACGGGGGGGGGGUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCxxxxxxxxxxAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCCUACCAC\
) } def
/len { sequence length } bind def

/coor [
[91.09030151 431.71252441]
[81.15390015 420.39517212]
[73.88310242 407.20620728]
[69.61796570 392.76242065]
[68.55798340 377.73941040]
[70.75273132 362.83984375]
[76.09955597 348.76058960]
[84.34837341 336.16015625]
[95.11338043 325.62789917]
[107.89107513 317.65640259]
[122.08381653 312.61853027]
[120.21620941 297.73526001]
[118.34859467 282.85195923]
[116.48097992 267.96868896]
[114.61336517 253.08540344]
[112.74575043 238.20213318]
[110.87814331 223.31884766]
[109.01052856 208.43557739]
[107.14291382 193.55229187]
[105.27529907 178.66900635]
[103.40768433 163.78573608]
[101.54007721 148.90245056]
[99.67246246 134.01916504]
[97.80484772 119.13589478]
[95.69434357 133.98667908]
[85.60404205 145.08558655]
[71.02086639 148.59713745]
[56.98436737 143.30784607]
[48.34516525 131.04553223]
[48.08873367 116.04772949]
[56.30369186 103.49725342]
[70.15116882 97.73120117]
[84.84617615 100.74234009]
[71.45989227 93.97422791]
[58.07360458 87.20610809]
[43.22248840 91.90526581]
[29.74330521 84.85073853]
[25.35490036 70.66351318]
[11.96861649 63.89539719]
[-1.41766870 57.12728119]
[-12.25250053 67.70485687]
[-25.93587303 74.18899536]
[-40.98351669 75.87634277]
[-55.76317596 72.58386230]
[-68.67166138 64.66870880]
[-78.30876160 52.98945618]
[-83.62911224 38.81297684]
[-84.05560303 23.67703056]
[-79.54197693 9.22345448]
[-70.57782745 -2.97993612]
[-58.13552094 -11.60940933]
[-43.56471252 -15.72890472]
[-28.44593048 -14.89157009]
[-14.41914654 -9.18823338]
[-3.00588226 0.76245111]
[4.55583715 13.88110638]
[7.44577265 28.74472046]
[5.35044622 43.74099731]
[18.73673058 50.50911331]
[32.12301636 57.27722549]
[46.15000153 52.40082932]
[59.82201385 59.07396698]
[64.84172058 73.81982422]
[78.22800446 80.58793640]
[91.61428833 87.35605621]
[106.35209656 84.56372833]
[116.33482361 73.36796570]
[126.31755066 62.17219925]
[111.68182373 65.45784760]
[97.04317474 62.18523026]
[85.19993591 52.97992706]
[78.41604614 39.60163116]
[77.98831940 24.60772896]
[83.99851990 10.86445808]
[95.29773712 0.99897957]
[109.72601318 -3.10282373]
[124.52524567 -0.65685153]
[136.86640930 7.86932468]
[144.39036560 20.84584236]
[145.65884399 35.79211044]
[140.43017578 49.84976196]
[152.86961365 41.46761703]
[165.30905151 33.08547592]
[177.74848938 24.70333099]
[190.18794250 16.32118797]
[175.38290405 13.91056347]
[164.70893860 3.37175655]
[162.10986328 -11.40135288]
[168.54595947 -24.95039558]
[181.63925171 -32.26926804]
[196.55200195 -30.65379524]
[207.77426147 -20.70085907]
[211.15962219 -6.08787489]
[205.45782471 7.78528214]
[219.04878235 1.43815267]
[232.57296753 -5.05001259]
[246.09715271 -11.53817749]
[259.62133789 -18.02634239]
[273.14553833 -24.51450729]
[278.15042114 -39.50539398]
[292.32669067 -46.49172211]
[307.26382446 -41.32862473]
[314.09988403 -27.07927704]
[308.77914429 -12.19756413]
[294.45834351 -5.51254368]
[279.63369751 -10.99031734]
[266.10952759 -4.50215244]
[252.58532715 1.98601246]
[239.06112671 8.47417736]
[225.53694153 14.96234226]
[220.83621216 20.72851562]
[211.66323853 21.44152260]
[198.57008362 28.76062965]
[186.13064575 37.14277267]
[173.69119263 45.52491379]
[161.25175476 53.90705872]
[148.81231689 62.28920364]
[137.51332092 72.15492249]
[127.53058624 83.35069275]
[117.54785919 94.54645538]
[112.68812561 117.26828003]
[114.55574036 132.15156555]
[116.42335510 147.03483582]
[118.29096985 161.91812134]
[120.15858459 176.80139160]
[122.02619171 191.68467712]
[123.89380646 206.56796265]
[125.76142120 221.45123291]
[127.62903595 236.33451843]
[129.49664307 251.21780396]
[131.36425781 266.10107422]
[133.23187256 280.98434448]
[135.09948730 295.86764526]
[136.96710205 310.75091553]
[151.96455383 312.12588501]
[166.31565857 316.69314575]
[179.34918213 324.23907471]
[190.45555115 334.41073608]
[199.11526489 346.73242188]
[204.92330933 360.62774658]
[207.60803223 375.44686890]
[207.04386902 390.49664307]
[203.25718689 405.07318115]
[196.42512512 418.49468994]
[186.86720276 430.13342285]
[175.03048706 439.44503784]
[161.46858215 445.99398804]
[146.81581116 449.47399902]
[131.75750732 449.72225952]
[116.99797821 446.72717285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[24 121]
[33 65]
[34 64]
[35 63]
[38 60]
[39 59]
[40 58]
[66 120]
[67 119]
[68 118]
[81 117]
[82 116]
[83 115]
[84 114]
[85 113]
[94 112]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
