%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCCCCUAGGGGGGGGGGGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUxxxxxxxxxxCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACCCCCCCCCCCUCCACCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[57.72243881 360.45947266]
[45.38932800 351.80834961]
[35.29087830 340.62939453]
[27.93362617 327.48333740]
[23.68660545 313.02960205]
[22.76284790 297.99316406]
[25.20868683 283.12823486]
[30.90143967 269.18048096]
[39.55556107 256.84945679]
[50.73696518 246.75372314]
[63.88479233 239.39965820]
[78.33956146 235.15614319]
[77.41614532 220.18458557]
[76.49273682 205.21304321]
[75.56932068 190.24148560]
[74.64590454 175.26994324]
[73.72249603 160.29838562]
[72.79907990 145.32684326]
[71.87566376 130.35528564]
[82.98626709 90.39883423]
[75.08978271 77.64557648]
[67.19330597 64.89231873]
[59.29682159 52.13906097]
[51.40033722 39.38580322]
[42.36081696 27.41554451]
[32.25538254 16.33041000]
[22.14994812 5.24527645]
[12.04451370 -5.83985758]
[0.16769023 -15.00179291]
[-13.11965084 -21.96214867]
[-26.40699196 -28.92250443]
[-39.69433212 -35.88286209]
[-52.98167419 -42.84321594]
[-65.32637787 -37.36433792]
[-78.37834930 -39.97721481]
[-87.39446259 -49.50288391]
[-89.23100281 -62.29270172]
[-102.37263489 -69.52440643]
[-115.51426697 -76.75610352]
[-128.65589905 -83.98780823]
[-141.27926636 -81.14979553]
[-152.09309387 -87.49269104]
[-155.54711914 -99.12591553]
[-168.53749084 -106.62591553]
[-180.83309937 -97.64048004]
[-195.72175598 -94.43929291]
[-210.62393188 -97.57698059]
[-222.95773315 -106.50991821]
[-230.58624268 -119.69042206]
[-232.18777466 -134.83489990]
[-227.48486328 -149.31945801]
[-217.29232788 -160.63456726]
[-203.37605286 -166.81983948]
[-188.14715576 -166.80360413]
[-174.24409485 -160.58869934]
[-164.07569885 -149.25187683]
[-159.40367126 -134.75732422]
[-161.03749084 -119.61630249]
[-148.04711914 -112.11630249]
[-130.55146790 -113.08950043]
[-121.42419434 -97.12944031]
[-108.28256226 -89.89773560]
[-95.14093018 -82.66603851]
[-81.99929810 -75.43433380]
[-66.09454346 -80.81410217]
[-50.90733337 -72.89701843]
[-46.02132034 -56.13055801]
[-32.73397827 -49.17020416]
[-19.44663620 -42.20984650]
[-6.15929508 -35.24948883]
[7.12804651 -28.28913498]
[-0.47922978 -41.21698761]
[-3.56505418 -55.89614487]
[-1.80698442 -70.79276276]
[4.61127615 -84.35026550]
[15.01907349 -95.15201569]
[28.32888031 -102.06931305]
[43.14993668 -104.37936401]
[57.93356323 -101.84078979]
[71.13499451 -94.71884155]
[81.37480164 -83.75771332]
[87.58300018 -70.10273743]
[89.11089325 -55.18075562]
[85.79882812 -40.55098343]
[77.99288177 -27.74211121]
[66.50872040 -18.09255600]
[52.54632950 -12.61061382]
[37.56467056 -11.86910248]
[23.12964821 -15.94529247]
[33.23508072 -4.86015844]
[43.34051514 6.22497559]
[53.44595337 17.31011009]
[52.97055817 2.31764436]
[60.55034637 -10.62634182]
[73.85807800 -17.54762650]
[88.80785370 -16.32115364]
[100.80960846 -7.32348633]
[106.17840576 6.68279743]
[103.26586151 21.39731598]
[92.96621704 32.30223846]
[78.44179535 36.04939651]
[64.15359497 31.48932076]
[72.05007935 44.24257660]
[79.94655609 56.99583435]
[87.84304047 69.74909210]
[95.73952484 82.50234985]
[94.26704407 67.57479858]
[102.24025726 54.86936569]
[116.32249451 49.70307922]
[130.62057495 54.23793793]
[139.15098572 66.57617950]
[138.34387207 81.55445099]
[128.53701782 92.90458679]
[113.83316803 95.87657166]
[128.34179688 99.68443298]
[142.85041809 103.49229431]
[157.35905457 107.30014801]
[170.01699829 98.11809540]
[185.61193848 99.27217102]
[196.78041077 110.21745300]
[198.24900818 125.78592682]
[189.32429504 138.62661743]
[174.22024536 142.67655945]
[160.06854248 136.02348328]
[153.55119324 121.80877686]
[139.04255676 118.00091553]
[124.53393555 114.19306183]
[110.02531433 110.38520050]
[104.23078918 115.14686584]
[92.64173889 124.67020416]
[86.84721375 129.43186951]
[87.77062988 144.40342712]
[88.69404602 159.37496948]
[89.61745453 174.34652710]
[90.54087067 189.31806946]
[91.46428680 204.28962708]
[92.38769531 219.26116943]
[93.31111145 234.23272705]
[108.17779541 236.66775513]
[122.12969971 242.35037231]
[134.46701050 250.99552917]
[144.57086182 262.16958618]
[151.93449402 275.31207275]
[156.18852234 289.76373291]
[157.11956787 304.79974365]
[154.68092346 319.66583252]
[148.99493408 333.61636353]
[140.34678650 345.95156860]
[129.17027283 356.05273438]
[116.02601624 363.41314697]
[101.57330322 367.66366577]
[86.53709412 368.59109497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 106]
[21 105]
[22 104]
[23 103]
[24 102]
[25 92]
[26 91]
[27 90]
[28 89]
[29 71]
[30 70]
[31 69]
[32 68]
[33 67]
[37 64]
[38 63]
[39 62]
[40 61]
[43 59]
[44 58]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
