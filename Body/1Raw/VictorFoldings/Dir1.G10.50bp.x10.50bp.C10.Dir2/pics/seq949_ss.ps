%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUGGGGGGGGGGUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAxxxxxxxxxxCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAACCCCCCCCCCUCGUAGCCUU\
) } def
/len { sequence length } bind def

/coor [
[114.86548615 566.87200928]
[101.01954651 560.85595703]
[89.31088257 551.32653809]
[80.60836029 538.99084473]
[75.55776215 524.76434326]
[74.53386688 509.70266724]
[77.61266327 494.92349243]
[84.56568909 481.52359009]
[94.87696838 470.49725342]
[107.78135681 462.66275024]
[122.32124329 458.60140991]
[122.32124329 443.60140991]
[122.32124329 428.60140991]
[122.32124329 413.60140991]
[122.32124329 398.60140991]
[122.32124329 383.60140991]
[122.32124329 368.60140991]
[122.32124329 353.60140991]
[122.32124329 338.60140991]
[122.32124329 323.60140991]
[122.32124329 308.60140991]
[120.60855103 293.69952393]
[115.99816895 287.86083984]
[117.29009247 278.75137329]
[114.19177246 264.07482910]
[111.09344482 249.39831543]
[100.57505798 260.09240723]
[85.63536835 258.74868774]
[77.19407654 246.34928894]
[81.42108917 231.95719910]
[95.22680664 226.09184265]
[108.51995850 233.03981018]
[106.96237946 218.12089539]
[95.90050507 204.53285217]
[103.45523834 187.77261353]
[101.58762360 172.88932800]
[99.72000885 158.00605774]
[97.85240173 143.12277222]
[95.98478699 128.23948669]
[81.17524719 121.42941284]
[72.51343536 107.62098694]
[72.82807922 91.32373047]
[82.01643372 77.85993958]
[75.95342255 64.13988495]
[69.89041138 50.41983414]
[49.62022400 48.95107269]
[35.33422089 27.57985306]
[22.72309303 19.45831108]
[10.11196423 11.33676910]
[-6.28520155 11.08185673]
[-14.02553463 -3.37564278]
[-5.14644337 -17.16309357]
[11.21802425 -16.09714699]
[18.23350716 -1.27435911]
[30.84463501 6.84718323]
[43.45576477 14.96872520]
[50.00233841 11.30917263]
[42.68323517 -1.78398204]
[35.36412811 -14.87713623]
[24.35725594 -25.06775665]
[30.64782143 -38.68497849]
[45.54246140 -36.91022491]
[48.45728302 -22.19624138]
[55.77639008 -9.10308743]
[63.09549332 3.99006677]
[69.64207458 0.33051395]
[69.33001709 -14.66623974]
[69.01795959 -29.66299248]
[68.70590210 -44.65974808]
[54.98016739 -51.43195343]
[45.98321152 -63.81393051]
[43.78247070 -78.96039581]
[48.88365936 -93.39079285]
[60.11456299 -103.78913116]
[74.89439392 -107.76594543]
[89.82686615 -104.40739441]
[101.48060608 -94.48524475]
[107.17765808 -80.27953339]
[105.60889435 -65.05463409]
[97.13479614 -52.30911636]
[83.70265961 -44.97180176]
[84.01470947 -29.97504997]
[84.32676697 -14.97829628]
[84.63882446 0.01845773]
[95.88261414 25.86212540]
[83.61046600 44.35681915]
[89.67347717 58.07687378]
[95.73648834 71.79692841]
[106.47099304 72.22020721]
[116.28757477 76.58407593]
[127.78938293 66.95555115]
[139.29118347 57.32702255]
[150.79298401 47.69849396]
[162.29478455 38.06996918]
[167.41014099 22.48904228]
[183.51454163 19.39389038]
[194.04118347 31.96854210]
[188.16114807 47.27727127]
[171.92332458 49.57177353]
[160.42150879 59.20029831]
[148.91970825 68.82882690]
[137.41790771 78.45735168]
[125.91610718 88.08587646]
[128.36334229 103.01860809]
[122.82804108 117.10179138]
[110.86806488 126.37187958]
[112.73567963 141.25515747]
[114.60329437 156.13844299]
[116.47090149 171.02171326]
[118.33851624 185.90499878]
[128.05194092 194.45504761]
[129.26994324 206.93444824]
[121.88128662 216.56332397]
[123.43887329 231.48223877]
[125.76997375 246.29998779]
[128.86830139 260.97650146]
[131.96661377 275.65304565]
[135.21743774 290.29653931]
[141.27871704 276.57571411]
[152.94172668 267.14309692]
[167.62669373 264.08508301]
[182.08546448 268.07806396]
[193.11988831 278.23886108]
[198.28923035 292.31997681]
[196.45010376 307.20681763]
[188.00930786 319.60650635]
[174.83384705 326.77639771]
[159.83802795 327.13055420]
[146.33879089 320.59066772]
[137.32124329 308.60140991]
[137.32124329 323.60140991]
[137.32124329 338.60140991]
[137.32124329 353.60140991]
[137.32124329 368.60140991]
[137.32124329 383.60140991]
[137.32124329 398.60140991]
[137.32124329 413.60140991]
[137.32124329 428.60140991]
[137.32124329 443.60140991]
[137.32124329 458.60140991]
[151.86112976 462.66275024]
[164.76550293 470.49725342]
[175.07679749 481.52359009]
[182.02981567 494.92349243]
[185.10861206 509.70266724]
[184.08471680 524.76434326]
[179.03411865 538.99084473]
[170.33158875 551.32653809]
[158.62294006 560.85595703]
[144.77699280 566.87200928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 118]
[24 117]
[25 116]
[26 115]
[32 114]
[33 113]
[35 110]
[36 109]
[37 108]
[38 107]
[39 106]
[43 88]
[44 87]
[45 86]
[47 56]
[48 55]
[49 54]
[66 84]
[67 83]
[68 82]
[69 81]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
