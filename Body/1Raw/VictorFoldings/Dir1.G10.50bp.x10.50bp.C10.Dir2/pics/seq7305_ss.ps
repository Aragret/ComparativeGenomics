%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCAUAAGGGGGGGGGGACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAAxxxxxxxxxxCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCCCCCCCCCCCACUCCAUAA\
) } def
/len { sequence length } bind def

/coor [
[72.32419586 492.27337646]
[59.10400009 485.00091553]
[48.21719742 474.55392456]
[40.40606689 461.64465332]
[36.20318604 447.15335083]
[35.89511108 432.06799316]
[39.50285339 417.41717529]
[46.78042603 404.19979858]
[57.23163605 393.31701660]
[70.14389801 385.51089478]
[84.63683319 381.31359863]
[84.32477570 366.31683350]
[84.01271820 351.32009888]
[83.70066071 336.32333374]
[83.38861084 321.32656860]
[83.07655334 306.32983398]
[82.76449585 291.33306885]
[82.45243835 276.33633423]
[82.14038086 261.33956909]
[81.82832336 246.34281921]
[81.51627350 231.34605408]
[69.19097900 239.89517212]
[54.76256943 235.79382324]
[48.77703857 222.03979492]
[55.60932541 208.68615723]
[70.26558685 205.49333191]
[82.03298187 214.79443359]
[83.27985382 199.84634399]
[84.52672577 184.89825439]
[85.77360535 169.95016479]
[87.02047729 155.00209045]
[79.43310547 145.52900696]
[80.39123535 133.02697754]
[89.92467499 124.27669525]
[91.48225403 109.35778046]
[92.57356262 94.39752960]
[93.19754028 79.41051483]
[93.82151794 64.42350006]
[94.44549561 49.43648529]
[87.28896332 35.32639694]
[95.54899597 22.93200302]
[95.86105347 7.93524837]
[95.86105347 -7.06475163]
[95.86105347 -22.06475067]
[80.92106628 -23.53562737]
[66.19718933 -26.46381569]
[51.83123016 -30.82111168]
[37.96154404 -36.56555557]
[24.72171021 -43.64181900]
[12.23923206 -51.98175812]
[0.63433075 -61.50504684]
[-9.98123074 -72.11997223]
[-19.50521660 -83.72430420]
[-27.84590340 -96.20628357]
[-34.92296219 -109.44569397]
[-40.66823959 -123.31503296]
[-45.02639771 -137.68072510]
[-47.95546722 -152.40443420]
[-49.42723846 -167.34432983]
[-49.42753983 -182.35655212]
[-47.95636749 -197.29650879]
[-45.02788544 -212.02032471]
[-40.67029953 -226.38619995]
[-34.92557907 -240.25576782]
[-27.84904861 -253.49546814]
[-19.50886154 -265.97778320]
[-9.98534012 -277.58248901]
[0.62979752 -288.19784546]
[12.23431873 -297.72158813]
[24.71646118 -306.06204224]
[37.95601654 -313.13882446]
[51.82546997 -318.88381958]
[66.19125366 -323.24169922]
[80.91501617 -326.17047119]
[95.85494232 -327.64193726]
[110.86716461 -327.64193726]
[125.80709839 -326.17047119]
[140.53085327 -323.24169922]
[154.89663696 -318.88381958]
[168.76609802 -313.13882446]
[182.00564575 -306.06204224]
[194.48779297 -297.72158813]
[206.09231567 -288.19784546]
[216.70744324 -277.58248901]
[226.23097229 -265.97778320]
[234.57115173 -253.49546814]
[241.64768982 -240.25576782]
[247.39241028 -226.38619995]
[251.75000000 -212.02032471]
[254.67848206 -197.29650879]
[256.14965820 -182.35655212]
[256.14935303 -167.34432983]
[254.67758179 -152.40443420]
[251.74850464 -137.68072510]
[247.39035034 -123.31503296]
[241.64508057 -109.44569397]
[234.56800842 -96.20628357]
[226.22732544 -83.72430420]
[216.70333862 -72.11997223]
[206.08778381 -61.50504684]
[194.48287964 -51.98175812]
[182.00039673 -43.64181900]
[168.76055908 -36.56555557]
[154.89088440 -30.82111168]
[140.52491760 -26.46381569]
[125.80104828 -23.53562737]
[110.86105347 -22.06475067]
[110.86105347 -7.06475163]
[110.86105347 7.93524837]
[113.59143066 11.92530727]
[113.79992676 17.68619537]
[110.53601837 23.55597878]
[117.73718262 36.59409332]
[109.43251038 50.06046295]
[108.80853271 65.04747772]
[108.18455505 80.03449249]
[107.56057739 95.02150726]
[109.79798126 98.25112915]
[110.56972504 102.46421814]
[109.46430969 106.96936035]
[106.40116882 110.91535950]
[104.84358215 125.83427429]
[112.74536133 142.43373108]
[101.96856689 156.24896240]
[100.72168732 171.19705200]
[99.47481537 186.14512634]
[98.22794342 201.09321594]
[96.98106384 216.04130554]
[96.51302338 231.03399658]
[96.82508087 246.03076172]
[97.13713837 261.02749634]
[97.44919586 276.02426147]
[97.76124573 291.02102661]
[98.07330322 306.01776123]
[98.38536072 321.01452637]
[98.69741821 336.01129150]
[99.00947571 351.00802612]
[99.32153320 366.00479126]
[99.63358307 381.00152588]
[114.28858185 384.59231567]
[127.51438904 391.85455322]
[138.40925598 402.29315186]
[146.23034668 415.19638062]
[150.44442749 429.68444824]
[150.76414490 444.76953125]
[147.16772461 459.42312622]
[139.90036011 472.64614868]
[129.45755005 483.53698730]
[116.55132294 491.35308838]
[102.06163025 495.56158447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[34 122]
[35 121]
[36 117]
[37 116]
[38 115]
[39 114]
[41 112]
[42 109]
[43 108]
[44 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
