%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCCUCGGGGGGGGGGAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAxxxxxxxxxxCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCCCUACUCAUC\
) } def
/len { sequence length } bind def

/coor [
[93.19592285 394.97479248]
[80.63770294 386.62362671]
[70.55147552 375.41119385]
[63.57128143 362.04226685]
[60.13589859 347.35729980]
[60.46127701 332.27932739]
[64.52696228 317.75619507]
[72.07737732 304.70086670]
[82.63790894 293.93395996]
[95.54470062 286.13232422]
[109.98643494 281.78637695]
[109.36245728 266.79937744]
[108.73847961 251.81234741]
[108.11450195 236.82533264]
[107.49052429 221.83831787]
[106.86654663 206.85130310]
[106.24256897 191.86428833]
[105.61859131 176.87727356]
[104.99461365 161.89025879]
[104.37063599 146.90324402]
[103.74665833 131.91622925]
[76.32674408 114.90505219]
[79.87203979 87.27316284]
[70.36368561 75.67182159]
[60.85532379 64.07048035]
[46.12332153 58.30171585]
[44.03982925 43.55355453]
[34.53147125 31.95221138]
[25.66689110 35.04472351]
[16.32644272 35.72926712]
[7.15094566 33.97085571]
[-1.23320901 29.90170670]
[-8.25681305 23.81135559]
[-13.44648361 16.12610435]
[-16.45656204 7.37918186]
[-17.09211922 -1.82624114]
[-15.32152939 -10.85864639]
[-28.25958443 -18.44855499]
[-41.19763947 -26.03846359]
[-53.01745605 -18.49274254]
[-66.87093353 -16.79795265]
[-80.03552246 -21.22949409]
[-89.94892883 -30.86443329]
[-94.70777893 -43.77305222]
[-93.43294525 -57.40515137]
[-106.21030426 -65.26258087]
[-118.98766327 -73.12000275]
[-131.76501465 -80.97743225]
[-144.54237366 -88.83485413]
[-161.20176697 -91.98143005]
[-162.78994751 -108.86082458]
[-147.00985718 -115.05961609]
[-136.68495178 -101.61221313]
[-123.90759277 -93.75479126]
[-111.13023376 -85.89736176]
[-98.35288239 -78.03993988]
[-85.57552338 -70.18251038]
[-71.58610535 -78.21045685]
[-55.36355591 -78.10604858]
[-41.31734467 -69.80339813]
[-33.31283569 -55.47778320]
[-33.60773087 -38.97652054]
[-20.66967583 -31.38661003]
[-7.73162079 -23.79670143]
[1.25107074 -30.79985809]
[12.00247097 -34.56022263]
[12.62644863 -49.54723740]
[-1.56052339 -54.79938126]
[-13.42887688 -64.18006897]
[-21.81587219 -76.77028656]
[-25.89983559 -91.33656311]
[-25.28066444 -106.45185089]
[-20.01901627 -120.63529968]
[-10.63037395 -132.49736023]
[1.96545720 -140.87591553]
[16.53446770 -144.95011902]
[31.64933395 -144.32081604]
[45.82925415 -139.04966736]
[57.68502426 -129.65307617]
[66.05513763 -117.05164337]
[70.11958313 -102.47990417]
[69.48014832 -87.36546326]
[64.19950104 -73.18907928]
[54.79497147 -61.33960342]
[42.18792343 -52.97793579]
[27.61346436 -48.92325974]
[26.98948669 -33.93624496]
[46.20928574 -21.41995430]
[53.71627808 0.43431279]
[46.13281250 22.44385338]
[55.64117050 34.04519653]
[69.69306946 38.98415375]
[72.45666504 54.56212234]
[81.96502686 66.16346741]
[91.47338104 77.76480865]
[98.83077240 74.82623291]
[107.17768860 74.39937592]
[115.63646698 76.80335236]
[123.23298645 82.04640961]
[129.00724792 89.79957581]
[132.12995911 99.40943146]
[147.06427002 98.00712585]
[161.99856567 96.60482788]
[176.93287659 95.20252228]
[182.62503052 91.63784790]
[188.38897705 91.54656219]
[192.51557922 94.06580353]
[207.49530029 93.28595734]
[222.47502136 92.50611115]
[234.23904419 81.59798431]
[250.07994080 84.13673401]
[257.84594727 98.17485809]
[251.57962036 112.94349670]
[236.08798218 117.11342621]
[223.25485229 107.48582458]
[208.27514648 108.26567078]
[193.29542542 109.04551697]
[178.33517456 110.13682556]
[163.40087891 111.53913116]
[148.46656799 112.94143677]
[133.53225708 114.34374237]
[148.47985840 115.59642029]
[158.72871399 126.54908752]
[158.98731995 141.54685974]
[149.12214661 152.84634399]
[134.22662354 154.61360168]
[121.99132538 145.93618774]
[118.73367310 131.29225159]
[119.35765076 146.27926636]
[119.98162842 161.26628113]
[120.60560608 176.25329590]
[121.22958374 191.24031067]
[121.85356140 206.22732544]
[122.47753906 221.21434021]
[123.10151672 236.20135498]
[123.72549438 251.18836975]
[124.34947205 266.17538452]
[124.97344971 281.16241455]
[139.72645569 284.29284668]
[153.23709106 290.99459839]
[164.65606689 300.84640503]
[173.26557922 313.22891235]
[178.52442932 327.36383057]
[180.10203552 342.36254883]
[177.89923096 357.28228760]
[172.05448914 371.18515015]
[162.93519592 383.19720459]
[151.11462402 392.56338501]
[137.33581543 398.69485474]
[122.46492004 401.20626831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[23 95]
[24 94]
[25 93]
[27 91]
[28 90]
[37 64]
[38 63]
[39 62]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[66 87]
[67 86]
[101 121]
[102 120]
[103 119]
[104 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
