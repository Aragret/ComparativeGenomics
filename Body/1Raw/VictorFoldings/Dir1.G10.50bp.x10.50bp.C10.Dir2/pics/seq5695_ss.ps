%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCACCUCAGGGGGGGGGGAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAxxxxxxxxxxCCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACCCCCCCCCCCACUCCAACUCA\
) } def
/len { sequence length } bind def

/coor [
[75.93166351 604.59027100]
[61.90971756 599.03723145]
[49.70975876 590.17089844]
[40.09869003 578.54858398]
[33.68066406 564.90087891]
[30.85912704 550.08569336]
[31.81144142 535.03436279]
[36.47774887 520.69293213]
[44.56471252 507.96295166]
[55.56398773 497.64468384]
[68.78414917 490.38671875]
[83.39415741 486.64526367]
[83.39415741 471.64526367]
[83.39415741 456.64526367]
[83.39415741 441.64526367]
[83.39415741 426.64526367]
[83.39415741 411.64526367]
[83.39415741 396.64526367]
[83.39415741 381.64526367]
[83.39415741 366.64526367]
[83.39415741 351.64526367]
[70.03374481 348.84075928]
[57.48647690 343.44818115]
[46.24848175 335.67843628]
[36.76455688 325.83645630]
[29.41060448 314.30926514]
[24.47869682 301.55068970]
[22.16550636 288.06359863]
[22.56444740 274.37997437]
[25.66190720 261.04000854]
[31.33770370 248.57073975]
[39.36974716 237.46527100]
[49.44272232 228.16320801]
[61.16048050 221.03327942]
[74.06159973 216.35876465]
[87.63756561 214.32617188]
[88.56098175 199.35462952]
[89.48439789 184.38307190]
[81.69478607 175.07801819]
[82.38051605 162.55998230]
[91.71899414 153.60473633]
[92.94960785 138.65530396]
[94.18022156 123.70586395]
[95.41083527 108.75643158]
[83.96982574 110.11548615]
[71.99626160 101.05854797]
[67.22601318 82.62982178]
[60.95661163 69.00284576]
[54.68720627 55.37586594]
[40.12067413 59.12499619]
[25.11878777 60.21271133]
[10.16378975 58.60404587]
[-4.26357698 54.35070801]
[-17.69953156 47.58942795]
[-29.71216583 38.53755569]
[-39.91532135 27.48606682]
[-47.98100662 14.79022121]
[-53.64994812 0.85813999]
[-56.73991013 -13.86231899]
[-57.15156174 -28.89795494]
[-54.87167358 -43.76543045]
[-49.97353363 -57.98682404]
[-42.61459351 -71.10497284]
[-33.03141785 -82.69818115]
[-21.53206253 -92.39377594]
[-8.48618507 -99.88008881]
[5.68684340 -104.91645813]
[20.53141785 -107.34099579]
[35.57034683 -107.07575226]
[50.32019424 -104.12925720]
[64.30680847 -98.59623718]
[77.08058167 -90.65454102]
[88.23088837 -80.55947113]
[97.39929199 -68.63553619]
[104.29106903 -55.26604843]
[108.68466949 -40.88077545]
[110.43886566 -25.94215012]
[109.49726105 -10.93038273]
[105.89013672 3.67195916]
[99.73342896 17.39546967]
[91.22506714 29.79899788]
[80.63854218 40.48381805]
[68.31418610 49.10646057]
[74.58358765 62.73343658]
[80.85299683 76.36042023]
[88.06668854 78.41288757]
[98.83515167 67.97065735]
[102.49407196 82.51783752]
[109.70776367 84.57030487]
[122.21179962 76.28483582]
[134.71583557 67.99935913]
[147.21987915 59.71388245]
[159.72390747 51.42840958]
[161.56753540 47.34175873]
[164.35733032 44.38530350]
[167.60881042 42.71959686]
[170.83601379 42.32665634]
[173.61132812 43.02567673]
[186.75296021 35.79397583]
[190.91471863 20.54748917]
[204.67967224 12.78206348]
[219.88130188 17.10478592]
[227.50076294 30.95106125]
[223.01756287 46.10614014]
[209.09150696 53.57878494]
[193.98466492 48.93560791]
[180.84303284 56.16730881]
[168.00938416 63.93244553]
[155.50534058 72.21791840]
[143.00131226 80.50339508]
[130.49726868 88.78886414]
[117.99324036 97.07434082]
[110.36026764 109.98703766]
[109.12965393 124.93647766]
[107.89904785 139.88591003]
[106.66843414 154.83534241]
[114.93118286 171.25964355]
[104.45594788 185.30648804]
[103.53253174 200.27804565]
[102.60911560 215.24958801]
[118.35325623 219.97596741]
[132.52824402 228.28379822]
[144.33360291 239.69949341]
[153.10371399 253.57406616]
[158.34535217 269.12008667]
[159.76541138 285.45626831]
[157.28730774 301.65756226]
[151.05511475 316.80737305]
[141.42517090 330.04959106]
[128.94567871 340.63681030]
[114.32556152 347.97265625]
[98.39415741 351.64526367]
[98.39415741 366.64526367]
[98.39415741 381.64526367]
[98.39415741 396.64526367]
[98.39415741 411.64526367]
[98.39415741 426.64526367]
[98.39415741 441.64526367]
[98.39415741 456.64526367]
[98.39415741 471.64526367]
[98.39415741 486.64526367]
[113.00417328 490.38671875]
[126.22433472 497.64468384]
[137.22360229 507.96295166]
[145.31057739 520.69293213]
[149.97688293 535.03436279]
[150.92919922 550.08569336]
[148.10765076 564.90087891]
[141.68963623 578.54858398]
[132.07856750 590.17089844]
[119.87860107 599.03723145]
[105.85665894 604.59027100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[36 120]
[37 119]
[38 118]
[41 116]
[42 115]
[43 114]
[44 113]
[47 85]
[48 84]
[49 83]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
