%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACACAUUAGGGGGGGGGGUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCxxxxxxxxxxAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACACCCCCCCCCCUAGCACAUUA\
) } def
/len { sequence length } bind def

/coor [
[32.69901276 339.86126709]
[16.02009201 334.54260254]
[-0.24412400 328.06570435]
[-16.01332092 320.46261597]
[-31.20962906 311.77084351]
[-45.75800705 302.03329468]
[-59.58660889 291.29809570]
[-72.62715149 279.61825562]
[-84.81523895 267.05142212]
[-96.09069061 253.65966797]
[-108.17067719 262.55200195]
[-114.69755554 276.96417236]
[-129.53408813 278.27810669]
[-141.61407471 287.17044067]
[-153.69406128 296.06280518]
[-165.77406311 304.95513916]
[-177.85404968 313.84750366]
[-189.93403625 322.73983765]
[-202.01402283 331.63220215]
[-214.09400940 340.52453613]
[-220.17124939 355.75607300]
[-236.43736267 357.84066772]
[-246.15916443 344.63391113]
[-239.33569336 329.72174072]
[-222.98635864 328.44454956]
[-210.90637207 319.55221558]
[-198.82638550 310.65985107]
[-186.74639893 301.76751709]
[-174.66641235 292.87515259]
[-162.58641052 283.98281860]
[-150.50642395 275.09045410]
[-138.42643738 266.19812012]
[-132.76361084 252.42199707]
[-117.06302643 250.47203064]
[-104.98303986 241.57968140]
[-112.37211609 230.23414612]
[-119.13390350 218.50393677]
[-125.24841309 206.42369080]
[-130.69758606 194.02909851]
[-135.46534729 181.35676575]
[-139.53758240 168.44410706]
[-142.90228271 155.32929993]
[-145.54949951 142.05105591]
[-147.47143555 128.64860535]
[-148.66238403 115.16152954]
[-149.11883545 101.62966919]
[-148.83944702 88.09299469]
[-147.82505798 74.59149170]
[-146.07864380 61.16504288]
[-143.60536194 47.85330200]
[-140.41253662 34.69558716]
[-136.50956726 21.73077202]
[-131.90802002 8.99714375]
[-126.62146759 -3.46768284]
[-120.66551971 -15.62688923]
[-114.05778503 -27.44455910]
[-106.81776428 -38.88578796]
[-98.96685791 -49.91677856]
[-90.52824402 -60.50495148]
[-81.52685547 -70.61902618]
[-71.98927307 -80.22913361]
[-61.94367599 -89.30688477]
[-51.41973495 -97.82546234]
[-40.44853592 -105.75971222]
[-29.06248093 -113.08619690]
[-17.29520607 -119.78327179]
[-5.18146801 -125.83115387]
[7.24295282 -131.21197510]
[19.94135666 -135.90986633]
[32.87623596 -139.91091919]
[46.00938416 -143.20333862]
[59.30200577 -145.77738953]
[72.71484375 -147.62545776]
[86.20827484 -148.74211121]
[99.74243927 -149.12403870]
[113.27736664 -148.77009583]
[126.77307892 -147.68135071]
[140.18971252 -145.86100769]
[153.48762512 -143.31445312]
[166.62754822 -140.04920959]
[179.57067871 -136.07490540]
[192.27876282 -131.40328979]
[204.71427917 -126.04815674]
[216.84049988 -120.02532959]
[228.62159729 -113.35260773]
[240.02278137 -106.04968262]
[251.01036072 -98.13813782]
[261.55191040 -89.64133453]
[271.61624146 -80.58437347]
[281.17367554 -70.99401093]
[290.19595337 -60.89856720]
[298.65643311 -50.32786942]
[306.53015137 -39.31313324]
[313.79379272 -27.88689995]
[320.42596436 -16.08291817]
[326.40704346 -3.93605256]
[331.71936035 8.51781559]
[336.34722900 21.24190140]
[340.27697754 34.19861984]
[343.49700928 47.34970474]
[345.99780273 60.65630341]
[347.77200317 74.07911682]
[348.81430054 87.57849121]
[349.12167358 101.11455536]
[348.69320679 114.64733124]
[347.53015137 128.13684082]
[345.63592529 141.54324341]
[360.34390259 144.48872375]
[375.05184937 147.43420410]
[389.75982666 150.37968445]
[407.02526855 144.06434631]
[419.77252197 156.08549500]
[434.53857422 158.72434998]
[449.30462646 161.36322021]
[464.07067871 164.00207520]
[479.30148315 157.92303467]
[492.01226807 168.28491211]
[489.12725830 184.42828369]
[473.61431885 189.74624634]
[461.43182373 178.76814270]
[446.66577148 176.12927246]
[431.89971924 173.49040222]
[417.13366699 170.85154724]
[406.99273682 177.52008057]
[394.63504028 175.39736938]
[386.81433105 165.08764648]
[372.10638428 162.14216614]
[357.39840698 159.19668579]
[342.69046021 156.25120544]
[338.14077759 173.15609741]
[332.41516113 189.69972229]
[325.54183960 205.80041504]
[317.55474854 221.37864685]
[308.49337769 236.35749817]
[298.40240479 250.66299438]
[287.33169556 264.22448730]
[275.33593750 276.97503662]
[262.47433472 288.85165405]
[248.81040955 299.79568481]
[234.41163635 309.75311279]
[219.34912109 318.67474365]
[203.69725037 326.51651001]
[187.53330994 333.23971558]
[170.93710327 338.81118774]
[153.99061584 343.20333862]
[136.77751160 346.39453125]
[119.38278961 348.36898804]
[101.89235687 349.11697388]
[84.39257812 348.63479614]
[66.96987152 346.92480469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 35]
[11 34]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[107 129]
[108 128]
[109 127]
[110 126]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
