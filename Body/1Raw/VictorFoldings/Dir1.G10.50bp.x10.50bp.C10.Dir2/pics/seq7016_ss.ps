%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUACUACACGGGGGGGGGGGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCxxxxxxxxxxAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCCCCCCCCCCCUUACUACAC\
) } def
/len { sequence length } bind def

/coor [
[83.89280701 389.11340332]
[70.67260742 381.84094238]
[59.78580475 371.39392090]
[51.97467422 358.48468018]
[47.77179337 343.99337769]
[47.46372223 328.90802002]
[51.07146454 314.25720215]
[58.34903717 301.03982544]
[68.80024719 290.15704346]
[81.71250916 282.35089111]
[96.20544434 278.15362549]
[95.89338684 263.15686035]
[95.58132935 248.16011047]
[95.26927185 233.16336060]
[94.95721436 218.16659546]
[94.64515686 203.16984558]
[94.33310699 188.17309570]
[94.02104950 173.17634583]
[93.70899200 158.17958069]
[93.39693451 143.18283081]
[93.08487701 128.18608093]
[82.59606934 128.69769287]
[71.38063812 125.15557098]
[61.00158691 117.25245667]
[46.98487473 122.59397125]
[32.96816254 127.93548584]
[18.95144844 133.27699280]
[6.30371618 144.56730652]
[-8.04660988 135.53932190]
[-3.34400940 119.25062561]
[13.60993576 119.26028442]
[27.62664795 113.91876984]
[41.64336014 108.57725525]
[55.66007614 103.23574066]
[55.34808731 95.74223328]
[54.72410965 80.75521851]
[54.41212082 73.26171112]
[39.99990463 69.10382080]
[25.58768845 64.94593811]
[14.57796955 75.65489197]
[-0.31513226 79.40869904]
[-15.08544922 75.19760895]
[-25.75984001 64.15437317]
[-29.46694756 49.24958038]
[-25.20957756 34.49253464]
[-14.13294220 23.85281181]
[0.78339958 20.19244194]
[15.52702713 24.49604797]
[26.13197899 35.60597992]
[29.74557495 50.53372192]
[44.15779114 54.69160843]
[58.57000732 58.84949493]
[72.35238647 52.92953110]
[79.25938416 39.61437607]
[71.48771667 24.62593651]
[74.13121033 8.11855984]
[85.95783234 -3.46146798]
[102.18881226 -5.71103001]
[108.81731415 -19.16699600]
[115.44580841 -32.62295914]
[122.07431030 -46.07892609]
[115.11914825 -52.14748001]
[111.31217194 -62.11004257]
[112.64862061 -74.15972900]
[114.51622772 -89.04300690]
[116.38384247 -103.92628479]
[118.25145721 -118.80957031]
[104.27270508 -124.48908997]
[92.24082947 -133.59382629]
[82.97617340 -145.50300598]
[77.11041260 -159.40464783]
[75.04350281 -174.35089111]
[76.91635132 -189.32269287]
[82.60127258 -203.29924011]
[91.71065521 -215.32760620]
[103.62341309 -224.58766174]
[117.52730560 -230.44805908]
[132.47434998 -232.50920105]
[147.44541931 -230.63056946]
[161.41978455 -224.94024658]
[173.44462585 -215.82621765]
[182.70008850 -203.90989685]
[188.55509949 -190.00373840]
[190.61047363 -175.05589294]
[188.72607422 -160.08554077]
[183.03034973 -146.11338806]
[173.91168213 -134.09205627]
[161.99177551 -124.84120178]
[148.08337402 -118.99155426]
[133.13473511 -116.94195557]
[131.26712036 -102.05867767]
[129.39950562 -87.17539215]
[127.53189850 -72.29211426]
[139.70373535 -63.52590942]
[153.22792053 -70.01407623]
[166.75212097 -76.50223541]
[180.27630615 -82.99040222]
[193.80049133 -89.47856903]
[196.46128845 -104.76580811]
[207.62295532 -115.54528046]
[222.99359131 -117.67205048]
[236.66287231 -110.32833862]
[243.37469482 -96.33795166]
[240.54821777 -81.08046722]
[229.27027893 -70.42271423]
[213.87748718 -68.46281433]
[200.28866577 -75.95437622]
[186.76446533 -69.46621704]
[173.24028015 -62.97805023]
[159.71609497 -56.48988342]
[146.19189453 -50.00171661]
[135.53027344 -39.45042801]
[128.90177917 -25.99446297]
[122.27327728 -12.53849697]
[115.64477539 0.91746849]
[122.94873047 12.13568020]
[123.74576569 25.60699081]
[117.71953583 37.80268860]
[106.35511017 45.47490692]
[92.57453918 46.52137756]
[85.66754150 59.83653259]
[102.35297394 59.12629700]
[117.34159088 64.80146027]
[128.39830017 75.45462799]
[134.09777832 88.98416138]
[133.99884033 102.99240112]
[128.64141846 115.20565796]
[119.37837982 123.84297943]
[108.08163452 127.87402344]
[108.39369202 142.87077332]
[108.70574188 157.86753845]
[109.01779938 172.86428833]
[109.32985687 187.86103821]
[109.64191437 202.85778809]
[109.95397186 217.85455322]
[110.26602936 232.85130310]
[110.57807922 247.84805298]
[110.89013672 262.84481812]
[111.20219421 277.84155273]
[125.85718536 281.43234253]
[139.08299255 288.69458008]
[149.97785950 299.13317871]
[157.79896545 312.03640747]
[162.01303101 326.52444458]
[162.33274841 341.60955811]
[158.73632812 356.26315308]
[151.46896362 369.48617554]
[141.02616882 380.37701416]
[128.11993408 388.19311523]
[113.63024139 392.40158081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 34]
[25 33]
[26 32]
[27 31]
[37 52]
[38 51]
[39 50]
[53 121]
[54 120]
[58 115]
[59 114]
[60 113]
[61 112]
[64 93]
[65 92]
[66 91]
[67 90]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
