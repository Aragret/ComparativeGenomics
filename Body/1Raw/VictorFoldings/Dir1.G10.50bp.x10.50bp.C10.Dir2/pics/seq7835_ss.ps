%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACAGAUGGGGGGGGGGGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGxxxxxxxxxxAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCCCCCCCCCCCAAAACAAAUG\
) } def
/len { sequence length } bind def

/coor [
[72.46335602 381.05926514]
[59.59008026 373.15640259]
[49.46578598 361.94589233]
[42.91120148 348.33654785]
[40.45767975 333.43161011]
[42.30411911 318.43939209]
[48.30083084 304.57516479]
[57.96169281 292.96292114]
[70.50354004 284.54397583]
[84.90966034 280.00079346]
[84.59760284 265.00405884]
[84.28554535 250.00729370]
[83.97349548 235.01054382]
[83.66143799 220.01379395]
[83.34938049 205.01704407]
[83.03732300 190.02027893]
[82.72526550 175.02352905]
[82.41320801 160.02677917]
[82.10115814 145.03002930]
[81.78910065 130.03326416]
[75.27626038 113.14568329]
[79.14494324 98.99105835]
[88.53292084 92.39881897]
[79.51538849 80.41198730]
[70.49786377 68.42515564]
[58.70122147 59.16020584]
[44.91883850 53.24024200]
[31.13645935 47.32027817]
[17.35407829 41.40031433]
[3.57169604 35.48035049]
[-12.16188908 37.14314651]
[-20.80239487 25.01091957]
[-34.58477402 19.09095573]
[-48.36715698 13.17099285]
[-57.23825836 25.34684181]
[-68.59666443 35.24301910]
[-81.87265015 42.36313629]
[-96.40028381 46.35004807]
[-111.45088196 47.00377655]
[-126.26950073 44.29153061]
[-140.11283875 38.34935379]
[-152.28654480 29.47530365]
[-162.17996216 18.11449814]
[-169.29687500 4.83679199]
[-173.28025818 -9.69181156]
[-173.93034363 -24.74256325]
[-171.21450806 -39.56052399]
[-165.26898193 -53.40243149]
[-156.39196777 -65.57398224]
[-145.02877808 -75.46465302]
[-131.74934387 -82.57833099]
[-117.21977234 -86.55820465]
[-102.16886139 -87.20464325]
[-87.35156250 -84.48521423]
[-73.51109314 -78.53633118]
[-61.34169769 -69.65637970]
[-51.45378113 -58.29078293]
[-44.34331512 -45.00962830]
[-40.36696243 -30.47909737]
[-39.72417450 -15.42803192]
[-42.44719315 -0.61138839]
[-28.66481209 5.30857468]
[-14.88243103 11.22853756]
[-0.13465469 9.14230824]
[9.49165916 21.69797134]
[23.27404022 27.61793327]
[37.05642319 33.53789520]
[50.83880234 39.45785904]
[64.62118530 45.37782288]
[55.93619919 33.14789963]
[50.24480057 19.26957130]
[47.84240723 4.46320391]
[48.85371017 -10.50266552]
[53.22622299 -24.85122490]
[60.73298645 -37.83769989]
[70.98435211 -48.78801727]
[83.44821930 -57.13379288]
[97.47764587 -62.44183350]
[112.34441376 -64.43662262]
[127.27685547 -63.01461792]
[141.49989319 -58.24962997]
[154.27528381 -50.38898468]
[164.93988037 -39.84070206]
[172.94015503 -27.15229607]
[177.86082458 -12.98236656]
[179.44650269 1.93358588]
[177.61486816 16.82133675]
[172.46099854 30.90812683]
[164.25241089 43.46276855]
[153.41517639 53.83360672]
[140.51181030 61.48233414]
[126.21205902 66.01194000]
[111.25817871 67.18730164]
[96.42636108 64.94742584]
[82.48469543 59.40762329]
[91.50222015 71.39445496]
[100.51975250 83.38128662]
[92.65263367 70.60990143]
[90.45431519 55.77185822]
[94.28049469 41.26805496]
[103.51207733 29.44528580]
[116.65534210 22.21654701]
[131.58361816 20.75148773]
[145.88143921 25.28716660]
[157.23532104 35.08968353]
[163.80815125 48.57292938]
[164.53639221 63.55524063]
[159.30221558 77.61238861]
[148.95254517 88.46984863]
[135.16201782 94.37081146]
[120.15948486 94.35994720]
[135.09379578 95.76225281]
[150.02810669 97.16455841]
[164.70086670 89.84048462]
[178.22897339 99.10991669]
[176.69587708 115.43724060]
[161.67868042 122.02631378]
[148.62579346 112.09886169]
[133.69148254 110.69655609]
[118.75717926 109.29425812]
[113.26435089 114.40099335]
[125.69813538 122.79151917]
[140.02546692 127.23309326]
[146.32464600 140.84632874]
[140.43624878 154.64222717]
[126.24844360 159.51115417]
[113.12966156 152.23808289]
[109.74236298 137.62576294]
[102.27868652 124.61447144]
[96.78585052 129.72122192]
[97.09790802 144.71797180]
[97.40996552 159.71472168]
[97.72202301 174.71147156]
[98.03408051 189.70823669]
[98.34613037 204.70498657]
[98.65818787 219.70173645]
[98.97024536 234.69848633]
[99.28230286 249.69525146]
[99.59436035 264.69198608]
[99.90641785 279.68875122]
[114.48905945 283.62872314]
[127.37026215 291.51864624]
[137.50581360 302.71896362]
[144.07406616 316.32171631]
[146.54255676 331.22418213]
[144.71118164 346.21826172]
[138.72840881 360.08850098]
[129.07920837 371.71044922]
[116.54582977 380.14199829]
[102.14427948 384.69961548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 97]
[24 96]
[25 95]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[32 63]
[33 62]
[34 61]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
