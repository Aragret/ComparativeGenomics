%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUAAUCGGGGGGGGGGCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUxxxxxxxxxxAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCCCCCCCCCCCAUCAUACUC\
) } def
/len { sequence length } bind def

/coor [
[90.08724976 484.19705200]
[78.20297241 474.92193604]
[68.88426971 463.07183838]
[62.67290115 449.33566284]
[59.93000031 434.51205444]
[60.81502914 419.46279907]
[65.27653503 405.06283569]
[73.05513000 392.14941406]
[83.69858551 381.47323608]
[96.58809662 373.65505981]
[110.97428131 369.14938354]
[110.03865051 354.17858887]
[109.10302734 339.20779419]
[108.16739655 324.23703003]
[107.23176575 309.26623535]
[106.29613495 294.29544067]
[105.36051178 279.32464600]
[104.42488098 264.35385132]
[103.48925018 249.38305664]
[102.55362701 234.41226196]
[87.34178162 231.10717773]
[73.65831757 223.65478516]
[62.60925293 212.64819336]
[55.09026718 198.96812439]
[51.71409607 183.71252441]
[52.76062775 168.10836792]
[58.15368652 153.41302490]
[67.46654510 140.81291199]
[79.95565033 131.32771301]
[94.62001038 125.72792053]
[93.37313843 110.77983093]
[91.66044617 95.87792969]
[89.48361206 81.03672028]
[87.30677795 66.19551849]
[85.12993622 51.35431290]
[78.99829865 65.04383087]
[68.62356567 75.87734222]
[55.21200943 82.59524536]
[40.32298279 84.41645050]
[25.68761063 81.12921143]
[13.00754356 73.11573029]
[3.75707841 61.30772781]
[-0.98823965 47.07811356]
[-0.67667675 32.08134842]
[4.65554190 18.06109810]
[14.38844395 6.64748335]
[27.39039230 -0.83244538]
[42.14966202 -3.50900173]
[56.95020676 -1.07098496]
[70.07117462 6.19813871]
[79.98700714 17.45319366]
[85.54539490 31.38839722]
[88.33771515 16.65059280]
[91.13004303 1.91278589]
[93.92237091 -12.82501984]
[96.71469116 -27.56282616]
[99.50701904 -42.30063248]
[85.25082397 -47.03819656]
[71.75331879 -53.63370895]
[59.25538254 -61.96947098]
[47.98004532 -71.89672089]
[38.12853622 -83.23828888]
[29.87666130 -95.79177094]
[23.37169075 -109.33314514]
[18.72970963 -123.62074280]
[16.03356171 -138.39958191]
[15.33136177 -153.40592957]
[16.63564301 -168.37197876]
[19.92312622 -183.03062439]
[25.13514328 -197.12026978]
[32.17868042 -210.38948059]
[40.92803955 -222.60145569]
[51.22707367 -233.53823853]
[62.89198685 -243.00466919]
[75.71460724 -250.83178711]
[89.46609497 -256.87994385]
[103.90103912 -261.04116821]
[118.76183319 -263.24118042]
[133.78327942 -263.44079590]
[148.69728088 -261.63638306]
[163.23768616 -257.86013794]
[177.14501953 -252.17951965]
[190.17108154 -244.69584656]
[202.08338928 -235.54269409]
[212.66938782 -224.88340759]
[221.74011230 -212.90821838]
[229.13372803 -199.83084106]
[234.71826172 -185.88464355]
[238.39405823 -171.31852722]
[240.09552002 -156.39242554]
[239.79228210 -141.37271118]
[237.48976135 -126.52745819]
[233.22903442 -112.12156677]
[227.08615112 -98.41213989]
[219.17073059 -85.64382935]
[209.62403870 -74.04451752]
[198.61645508 -63.82118988]
[186.34440613 -55.15630722]
[173.02690125 -48.20449448]
[158.90162659 -43.08982086]
[144.22064209 -39.90356064]
[129.24595642 -38.70257950]
[114.24481964 -39.50830841]
[111.45249939 -24.77050209]
[108.66017151 -10.03269577]
[105.86785126 4.70511055]
[103.07552338 19.44291687]
[100.28320312 34.18072128]
[99.97114563 49.17747498]
[102.14797974 64.01868439]
[104.32481384 78.85988617]
[106.50165558 93.70109558]
[109.30115509 96.45775604]
[110.84369659 100.45354462]
[110.59626007 105.08570862]
[108.32122803 109.53295898]
[109.56809998 124.48104095]
[123.80150604 127.17765808]
[136.83563232 133.47219849]
[147.77914429 142.92718506]
[155.88554382 154.88931274]
[160.60398865 168.53450012]
[161.61679077 182.92472839]
[158.86076355 197.07243347]
[152.53118896 210.00840759]
[143.06785583 220.84808350]
[131.12469482 228.85209656]
[117.52441406 233.47663879]
[118.46004486 248.44743347]
[119.39567566 263.41821289]
[120.33129883 278.38900757]
[121.26692963 293.35980225]
[122.20256042 308.33059692]
[123.13818359 323.30139160]
[124.07381439 338.27218628]
[125.00944519 353.24298096]
[125.94506836 368.21377563]
[140.78030396 370.89318848]
[154.54293823 377.04568481]
[166.43283081 386.31359863]
[175.75872803 398.15805054]
[181.97840881 411.89044189]
[184.73030090 426.71240234]
[183.85440063 441.76220703]
[179.40162659 456.16485596]
[171.63085938 469.08300781]
[160.99388123 479.76559448]
[148.10911560 487.59161377]
[133.72566223 492.10598755]
[118.67975616 493.04632568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[30 117]
[31 116]
[32 112]
[33 111]
[34 110]
[35 109]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
