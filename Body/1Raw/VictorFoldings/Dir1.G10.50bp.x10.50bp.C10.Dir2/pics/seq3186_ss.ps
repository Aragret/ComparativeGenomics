%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAACAGGGGGGGGGGGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAACUUUACxxxxxxxxxxACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCCCCCCCCCCCAGGAACAGG\
) } def
/len { sequence length } bind def

/coor [
[81.54298401 343.37023926]
[70.04682159 333.55548096]
[61.95576096 320.78729248]
[57.98925400 306.20108032]
[58.50000000 291.09378052]
[63.44258499 276.80871582]
[72.37751007 264.61618042]
[84.51029968 255.60025024]
[98.76210785 250.56265259]
[98.13813019 235.57563782]
[97.51415253 220.58862305]
[96.89017487 205.60160828]
[96.26619720 190.61459351]
[95.64221954 175.62756348]
[95.01824188 160.64054871]
[94.39426422 145.65353394]
[93.77028656 130.66651917]
[93.14630890 115.67950439]
[85.69139862 102.66319275]
[73.08027649 94.54165649]
[60.46914291 86.42011261]
[47.85801697 78.29856873]
[34.07563400 72.37860870]
[19.50293159 68.82384491]
[10.35756683 69.83089447]
[4.66559887 65.04058075]
[-9.82999802 61.18341827]
[-24.32559395 57.32625961]
[-38.82118988 53.46909714]
[-53.31678772 49.61193848]
[-69.00867462 65.63519287]
[-92.87403107 67.38752747]
[-113.14225769 52.02460480]
[-128.13496399 52.49264908]
[-143.12765503 52.96068954]
[-158.77041626 59.49831009]
[-169.38288879 46.27667236]
[-159.61578369 32.41882324]
[-143.59568787 37.96799469]
[-128.60299683 37.49995041]
[-113.61030579 37.03190994]
[-111.27919769 22.21415138]
[-125.40399933 17.16539574]
[-140.46134949 22.70215416]
[-154.10299683 14.25909519]
[-155.86422729 -1.68698978]
[-144.39396667 -12.90362930]
[-128.49124146 -10.78637695]
[-120.35524750 3.04059196]
[-106.23044586 8.08934879]
[-97.00543213 2.39328623]
[-86.74714661 -0.29913154]
[-76.38576508 0.11435703]
[-66.82061768 3.46054482]
[-58.84213638 9.31757259]
[-53.06666183 17.06282234]
[-49.88948059 25.93675804]
[-49.45962906 35.11634445]
[-34.96403122 38.97350311]
[-20.46843529 42.83066177]
[-5.97283840 46.68782043]
[8.52275848 50.54497910]
[23.05769348 54.25114059]
[37.63039780 57.80590439]
[27.24465179 46.98295212]
[21.09908676 33.29967499]
[19.90823936 18.34702110]
[23.81056976 3.86351919]
[32.35235596 -8.46684456]
[44.54045486 -17.21043015]
[58.95776367 -21.35062599]
[73.92799377 -20.40605736]
[87.71057129 -14.48654842]
[98.70300293 -4.28035355]
[105.62721252 9.02585983]
[107.67812347 23.88499069]
[104.61728668 38.56937790]
[96.80057526 51.37168503]
[85.13683319 60.80339050]
[70.98219299 65.76788330]
[55.97955704 65.68743896]
[68.59069061 73.80898285]
[81.20181274 81.93052673]
[93.81294250 90.05207062]
[99.01483154 86.07878113]
[106.53196716 85.17843628]
[114.45279694 88.55092621]
[129.16075134 85.60544586]
[143.86871338 82.65995789]
[158.57667542 79.71447754]
[173.18557739 76.31150055]
[187.68116760 72.45433807]
[202.17675781 68.59718323]
[216.67236328 64.74002075]
[224.21891785 59.47681808]
[231.50968933 60.95675659]
[246.08239746 57.40199280]
[260.65509033 53.84723282]
[266.61981201 39.64411545]
[279.65170288 31.76866722]
[294.64477539 33.06169128]
[305.86718750 42.81851578]
[320.43988037 39.26375198]
[326.20095825 24.85577965]
[339.34848022 16.61426163]
[354.82693481 17.70823097]
[366.68457031 27.71703529]
[370.36187744 42.79208374]
[364.44485474 57.13671112]
[351.20870972 65.23512268]
[335.74301147 63.97330475]
[323.99465942 53.83645630]
[309.42196655 57.39121628]
[303.95275879 71.21966553]
[291.23916626 79.27126312]
[276.04464722 78.28116608]
[264.20986938 68.41993713]
[249.63716125 71.97469330]
[235.06445312 75.52945709]
[220.52952576 79.23561859]
[206.03392029 83.09278107]
[191.53833008 86.94993591]
[177.04272461 90.80709839]
[174.95460510 93.72380829]
[171.31965637 95.74590302]
[166.58741760 96.14370728]
[161.52215576 94.42243958]
[146.81419373 97.36791992]
[132.10623169 100.31340790]
[117.39827728 103.25888824]
[108.13332367 115.05552673]
[108.75730133 130.04254150]
[109.38127899 145.02955627]
[110.00525665 160.01657104]
[110.62923431 175.00358582]
[111.25321198 189.99061584]
[111.87718964 204.97763062]
[112.50116730 219.96464539]
[113.12514496 234.95166016]
[113.74912262 249.93867493]
[128.37036133 253.77415466]
[141.21060181 261.75033569]
[151.12811279 273.15798950]
[157.24104309 286.98272705]
[159.00581360 301.99530029]
[156.26551819 316.86074829]
[149.26380920 330.25732422]
[138.62329102 340.99371338]
[125.29009247 348.11532593]
[110.44980621 350.98889160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 84]
[20 83]
[21 82]
[22 81]
[23 64]
[24 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[33 41]
[34 40]
[35 39]
[42 50]
[43 49]
[87 130]
[88 129]
[89 128]
[90 127]
[91 123]
[92 122]
[93 121]
[94 120]
[96 119]
[97 118]
[98 117]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
