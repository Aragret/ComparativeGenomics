%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAUCCCUGGGGGGGGGGAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAxxxxxxxxxxAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCCCCCCCCCCCUCCUAUCCCU\
) } def
/len { sequence length } bind def

/coor [
[96.03405762 372.77005005]
[82.81385803 365.49755859]
[71.92705536 355.05056763]
[64.11592865 342.14132690]
[59.91304398 327.64999390]
[59.60497284 312.56466675]
[63.21271515 297.91384888]
[70.49028778 284.69644165]
[80.94149780 273.81369019]
[93.85375977 266.00753784]
[108.34669495 261.81024170]
[108.03463745 246.81349182]
[107.72257996 231.81674194]
[107.41052246 216.81999207]
[107.09846497 201.82324219]
[106.78641510 186.82647705]
[106.47435760 171.82972717]
[106.16230011 156.83297729]
[105.85024261 141.83622742]
[105.53818512 126.83946991]
[82.00792694 116.40869904]
[79.62628937 93.79846191]
[67.73390961 84.65673065]
[55.84152985 75.51499176]
[41.71672821 70.46623993]
[26.72403145 69.99819183]
[11.73133469 69.53015137]
[-3.26136088 69.06211090]
[-7.95413637 83.42019653]
[-16.50309753 95.87378693]
[-28.21521950 105.41333008]
[-42.14105225 111.26549530]
[-57.15169144 112.95587158]
[-72.03029633 110.34744263]
[-85.57070923 103.65164185]
[-96.67529297 93.41127777]
[-104.44382477 80.45648956]
[-108.24656677 65.83746338]
[-107.77523041 50.73930359]
[-103.06803131 36.38594437]
[-94.50656128 23.94094658]
[-82.78486633 14.41317463]
[-68.85315704 8.57500076]
[-53.84082794 6.89970016]
[-38.96485901 9.52308178]
[-25.43117142 16.23247910]
[-14.33688641 26.48399353]
[-6.58136749 39.44657898]
[-2.79331875 54.06941605]
[12.19937706 54.53745651]
[27.19207382 55.00550079]
[42.18476868 55.47354126]
[29.76634979 47.06028748]
[19.18827438 36.42523575]
[10.84184933 23.96179962]
[5.03582668 10.13103390]
[1.98498440 -4.55543470]
[1.80217934 -19.55432129]
[4.49417448 -34.31078339]
[9.96138668 -48.27894592]
[18.00157166 -60.94209671]
[28.31730461 -71.83180237]
[40.52698517 -80.54521942]
[54.17895126 -86.76003265]
[68.76818085 -90.24633026]
[83.75499725 -90.87514496]
[98.58499908 -88.62322998]
[112.70958710 -83.57387543]
[125.60626984 -75.91387939]
[136.79795837 -65.92658997]
[145.87066650 -53.98146439]
[152.48876953 -40.52037811]
[156.40744019 -26.04129028]
[157.48171997 -11.07980824]
[155.67185974 3.81060648]
[151.04484558 18.07912636]
[143.77180481 31.19792557]
[134.12179565 42.68171310]
[122.45179749 52.10567474]
[109.19349670 59.12120438]
[94.83736420 63.46877289]
[79.91445160 64.98756409]
[64.98326111 63.62261581]
[76.87564087 72.76435089]
[88.76802063 81.90608215]
[99.48652649 77.18206787]
[111.89908600 78.75448608]
[122.36404419 86.98032379]
[127.40443420 100.16001892]
[142.17048645 97.52114868]
[156.93653870 94.88228607]
[171.70260620 92.24342346]
[186.46865845 89.60456085]
[200.54017639 84.40914154]
[213.47822571 76.81923676]
[226.41629028 69.22932434]
[239.35433960 61.63941956]
[243.09579468 46.28438187]
[256.64227295 38.14383316]
[271.95687866 42.04741287]
[279.95376587 55.67919922]
[275.88848877 70.95169067]
[262.17291260 78.80399323]
[246.94425964 74.57747650]
[234.00619507 82.16738129]
[221.06814575 89.75729370]
[208.13008118 97.34719849]
[223.12385559 97.77947235]
[237.19679260 102.97104645]
[248.87911987 112.37971497]
[256.95077515 125.02284241]
[260.56869507 139.57998657]
[259.35510254 154.53082275]
[253.43669128 168.31385803]
[243.43157959 179.48963928]
[230.38473511 186.89096069]
[215.65872192 189.74482727]
[200.79151917 187.75318909]
[187.33587646 181.12403870]
[176.69706726 170.54974365]
[169.98622131 157.13465881]
[167.90419006 142.27986145]
[170.66844177 127.53676605]
[177.99026489 114.44512939]
[189.10751343 104.37061310]
[174.34146118 107.00947571]
[159.57540894 109.64834595]
[144.80935669 112.28720856]
[130.04330444 114.92607117]
[120.53494263 126.52741241]
[120.84700012 141.52416992]
[121.15904999 156.52091980]
[121.47110748 171.51766968]
[121.78316498 186.51443481]
[122.09522247 201.51118469]
[122.40727997 216.50793457]
[122.71933746 231.50468445]
[123.03138733 246.50144958]
[123.34344482 261.49819946]
[137.99844360 265.08895874]
[151.22424316 272.35122681]
[162.11911011 282.78982544]
[169.94021606 295.69302368]
[174.15428162 310.18109131]
[174.47399902 325.26620483]
[170.87757874 339.91979980]
[163.61021423 353.14279175]
[153.16741943 364.03363037]
[140.26118469 371.84976196]
[125.77149200 376.05822754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 85]
[23 84]
[24 83]
[25 52]
[26 51]
[27 50]
[28 49]
[89 129]
[90 128]
[91 127]
[92 126]
[93 125]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
