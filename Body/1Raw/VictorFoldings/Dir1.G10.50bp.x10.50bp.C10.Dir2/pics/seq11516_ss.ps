%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGAUUCUGGGGGGGGGGUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCxxxxxxxxxxCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUCCCCCCCCCCACACAAUUCU\
) } def
/len { sequence length } bind def

/coor [
[137.69558716 229.59352112]
[135.13574219 220.54620361]
[133.51284790 211.28387451]
[132.84407043 201.90335083]
[133.13659668 192.50263977]
[134.38752747 183.18002319]
[136.58398438 174.03294373]
[139.70320129 165.15705872]
[143.71275330 156.64520264]
[148.57089233 148.58642578]
[136.87127686 139.19926453]
[125.17164612 129.81210327]
[113.47202301 120.42493439]
[101.77239990 111.03777313]
[89.97576141 101.77282715]
[78.08338165 92.63108826]
[66.19100189 83.48935699]
[54.29862213 74.34762573]
[38.64200592 72.07144928]
[33.26699066 58.18050003]
[21.37461281 49.03876495]
[9.48223305 39.89703369]
[-0.78907645 50.84540939]
[-12.08406734 60.73429108]
[-24.29396057 69.46843719]
[-37.30116653 76.96372986]
[-50.98041153 83.14798737]
[-65.19995880 87.96163940]
[-79.82286072 91.35834503]
[-94.70828247 93.30537415]
[-109.71287537 93.78398132]
[-124.69212341 92.78956604]
[-139.50177002 90.33168793]
[-153.99919128 86.43403625]
[-168.04475403 81.13413239]
[-181.50318909 74.48303223]
[-194.24488831 66.54478455]
[-206.14714050 57.39583969]
[-217.09532166 47.12430954]
[-226.98397827 35.82912064]
[-235.71788025 23.61905289]
[-243.21290588 10.61169910]
[-249.39689636 -3.06767130]
[-254.21026611 -17.28731346]
[-257.60665894 -31.91028214]
[-259.55340576 -46.79574585]
[-260.03170776 -61.80034637]
[-259.03698730 -76.77957153]
[-256.57882690 -91.58917236]
[-252.68087769 -106.08650970]
[-247.38070679 -120.13196564]
[-240.72932434 -133.59027100]
[-232.79081726 -146.33181763]
[-223.64164734 -158.23388672]
[-213.36988831 -169.18185425]
[-202.07450867 -179.07028198]
[-189.86425781 -187.80393982]
[-176.85676575 -195.29872131]
[-163.17726135 -201.48242188]
[-148.95753479 -206.29551697]
[-134.33448792 -209.69163513]
[-119.44898987 -211.63806152]
[-104.44438171 -212.11607361]
[-89.46517181 -211.12104797]
[-74.65562439 -208.66258240]
[-60.15835953 -204.76435852]
[-46.11301041 -199.46389771]
[-32.65483475 -192.81225586]
[-19.91344833 -184.87348938]
[-8.01156330 -175.72407532]
[2.93619967 -165.45210266]
[12.82440281 -154.15652466]
[21.55781555 -141.94610596]
[29.05232811 -128.93844604]
[35.23576355 -115.25883484]
[40.04856491 -101.03900146]
[43.44438934 -86.41589355]
[45.39052963 -71.53034973]
[45.86823654 -56.52573395]
[44.87292099 -41.54654312]
[42.41415787 -26.73704338]
[38.51563263 -12.23986149]
[33.21488953 1.80538368]
[26.56298065 15.26342583]
[18.62396622 28.00465202]
[30.51634598 37.14638519]
[42.40872574 46.28812027]
[57.21471786 47.91041565]
[63.44035721 62.45524216]
[75.33273315 71.59697723]
[87.22511292 80.73870850]
[99.11749268 89.88044739]
[106.97260284 91.92527771]
[111.15956116 99.33815002]
[122.85918427 108.72531128]
[134.55880737 118.11247253]
[146.25843811 127.49963379]
[157.95805359 136.88679504]
[175.53967285 122.44163513]
[196.12123108 112.75497437]
[218.44291687 108.41561890]
[241.13943481 109.68521118]
[262.82345581 116.48243713]
[282.17053223 128.38819885]
[297.99978638 144.67150879]
[309.34622192 164.33432007]
[315.51943970 186.17272949]
[316.14559937 208.85067749]
[330.91165161 211.48954773]
[345.67770386 214.12841797]
[360.44375610 216.76727295]
[375.20980835 219.40614319]
[385.04800415 207.61184692]
[399.47082520 202.33184814]
[414.59854126 204.98643494]
[426.36196899 214.86155701]
[431.59671021 229.30084229]
[428.89471436 244.42019653]
[418.98278809 256.15258789]
[404.52716064 261.34207153]
[389.41635132 258.59268188]
[377.71508789 248.64401245]
[372.57095337 234.17219543]
[357.80490112 231.53332520]
[343.03884888 228.89447021]
[328.27279663 226.25559998]
[313.50671387 223.61674500]
[310.65551758 232.55236816]
[306.90652466 241.15103149]
[302.29870605 249.32278442]
[296.88012695 256.98211670]
[290.70721436 264.04885864]
[283.84436035 270.44906616]
[276.36315918 276.11566162]
[268.34170532 280.98925781]
[259.86373901 285.01879883]
[251.01780701 288.16198730]
[241.89627075 290.38577271]
[232.59445190 291.66671753]
[223.20951843 291.99130249]
[213.83958435 291.35589600]
[204.58259583 289.76699829]
[195.53530884 287.24099731]
[186.79235840 283.80410767]
[178.44520569 279.49209595]
[170.58116150 274.34985352]
[163.28251648 268.43096924]
[156.62570190 261.79718018]
[150.68040466 254.51766968]
[145.50892639 246.66841125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 92]
[16 91]
[17 90]
[18 89]
[20 87]
[21 86]
[22 85]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
