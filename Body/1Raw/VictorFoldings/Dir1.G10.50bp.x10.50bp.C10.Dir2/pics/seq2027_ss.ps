%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGAAAAAGGGGGGGGGGUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAxxxxxxxxxxAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGCCCCCCCCCCAUAUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[77.65519714 365.11340332]
[63.80926132 359.09735107]
[52.10059738 349.56793213]
[43.39807510 337.23226929]
[38.34747314 323.00576782]
[37.32358170 307.94406128]
[40.40238190 293.16491699]
[47.35540390 279.76498413]
[57.66668701 268.73864746]
[70.57106781 260.90414429]
[85.11095428 256.84283447]
[85.11095428 241.84283447]
[85.11095428 226.84283447]
[85.11095428 211.84283447]
[85.11095428 196.84283447]
[85.11095428 181.84283447]
[85.11095428 166.84283447]
[85.11095428 151.84283447]
[85.11095428 136.84283447]
[85.11095428 121.84283447]
[80.39556885 110.54920197]
[81.91165924 100.26827240]
[87.55344391 93.77119446]
[94.27429199 92.11330414]
[90.56813049 77.57836914]
[77.40605927 64.74326324]
[82.73072815 48.05051804]
[78.72299194 33.59582901]
[65.24991608 25.77827644]
[61.39141464 11.06207371]
[68.92728424 -1.73426163]
[64.91954803 -16.18894958]
[60.31398010 -30.46441078]
[55.11856461 -44.53593063]
[49.92314911 -58.60744858]
[44.72773361 -72.67897034]
[39.53231812 -86.75048828]
[30.63996887 -98.83047485]
[18.74758911 -107.97221375]
[9.97554588 -110.74765778]
[6.70552206 -117.42991638]
[-4.99410152 -126.81707764]
[-16.69372559 -136.20423889]
[-28.58610535 -145.34597778]
[-40.66609192 -154.23832703]
[-52.74608231 -163.13067627]
[-65.96105957 -155.56202698]
[-81.11263275 -154.02920532]
[-95.57571411 -158.79777527]
[-106.84448242 -169.04154968]
[-112.96654510 -182.98571777]
[-112.88123322 -198.21440125]
[-106.60331726 -212.08911133]
[-95.22048950 -222.20599365]
[-80.70489502 -226.81221008]
[-65.57144165 -225.10972595]
[-52.44209290 -217.39349365]
[-43.59159088 -205.00041199]
[-40.55334091 -190.07765198]
[-43.85373306 -175.21066284]
[-31.77374268 -166.31831360]
[-19.69375420 -157.42596436]
[-14.86180115 -157.25941467]
[-10.09876633 -154.01214600]
[-7.30656338 -147.90386963]
[4.39306021 -138.51670837]
[16.09268379 -129.12954712]
[27.88932419 -119.86459351]
[39.78170395 -110.72285461]
[34.46073532 -124.74738312]
[32.21826935 -139.57881165]
[33.15524292 -154.54951477]
[37.22948456 -168.98561096]
[44.25759506 -182.23722839]
[53.92320251 -193.70790100]
[65.79121399 -202.88124084]
[79.32740784 -209.34432983]
[93.92244720 -212.80624390]
[108.91934967 -213.11112976]
[123.64302826 -210.24528503]
[137.43072510 -204.33769226]
[149.66177368 -195.65429688]
[159.78559875 -184.58596802]
[167.34649658 -171.63093567]
[172.00411987 -157.37237549]
[173.54878235 -142.45211792]
[171.91098022 -127.54179382]
[167.16442871 -113.31259155]
[159.52278137 -100.40502930]
[149.33001709 -89.40013123]
[137.04499817 -80.79327393]
[123.22068024 -74.97189331]
[108.47938538 -72.19803619]
[93.48468018 -72.59657288]
[78.91154480 -76.14955139]
[65.41597748 -82.69704437]
[53.60383987 -91.94589996]
[58.79925537 -77.87438202]
[63.99467087 -63.80286407]
[69.19008636 -49.73134613]
[74.38549805 -35.65982437]
[76.94398499 -34.37083817]
[79.12834167 -31.95783997]
[80.49530792 -28.56471443]
[80.66447449 -24.49747658]
[79.37423706 -20.19668961]
[83.38197327 -5.74200201]
[96.43125916 1.34684551]
[100.70159149 15.94886303]
[93.17768097 29.58808899]
[97.18541718 44.04277802]
[107.58424377 50.30151367]
[111.01564789 62.36154938]
[105.10306549 73.87220764]
[108.80922699 88.40714264]
[118.55687714 99.80816650]
[132.33926392 105.72812653]
[144.18304443 96.03361511]
[159.17778015 92.96498871]
[173.87779236 97.22740173]
[184.90513611 107.84136963]
[189.72578430 122.36788940]
[187.23202515 137.46887207]
[177.99687195 149.67422485]
[164.14250183 156.17924500]
[148.85256958 155.48912048]
[135.64056396 147.76243591]
[127.54251099 134.77474976]
[126.41929626 119.51050568]
[112.63691711 113.59054565]
[100.11095428 121.84283447]
[100.11095428 136.84283447]
[100.11095428 151.84283447]
[100.11095428 166.84283447]
[100.11095428 181.84283447]
[100.11095428 196.84283447]
[100.11095428 211.84283447]
[100.11095428 226.84283447]
[100.11095428 241.84283447]
[100.11095428 256.84283447]
[114.65084076 260.90414429]
[127.55522156 268.73864746]
[137.86650085 279.76498413]
[144.81953430 293.16491699]
[147.89833069 307.94406128]
[146.87443542 323.00576782]
[141.82383728 337.23226929]
[133.12130737 349.56793213]
[121.41265106 359.09735107]
[107.56671143 365.11340332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 115]
[25 114]
[27 111]
[28 110]
[31 107]
[32 106]
[33 101]
[34 100]
[35 99]
[36 98]
[37 97]
[38 69]
[39 68]
[41 67]
[42 66]
[43 65]
[44 62]
[45 61]
[46 60]
[116 130]
[117 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
