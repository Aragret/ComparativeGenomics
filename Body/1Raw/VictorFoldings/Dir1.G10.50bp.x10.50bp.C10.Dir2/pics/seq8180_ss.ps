%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCCUGAGGGGGGGGGGGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCxxxxxxxxxxUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCCCCCCCCCCCUAACCCUGA\
) } def
/len { sequence length } bind def

/coor [
[85.09718323 382.47561646]
[71.87698364 375.20312500]
[60.99018478 364.75613403]
[53.17905426 351.84689331]
[48.97617340 337.35556030]
[48.66809845 322.27023315]
[52.27584076 307.61941528]
[59.55341339 294.40200806]
[70.00462341 283.51925659]
[82.91688538 275.71310425]
[97.40982056 271.51580811]
[97.09776306 256.51907349]
[96.78570557 241.52230835]
[96.47364807 226.52555847]
[96.16159821 211.52880859]
[95.84954071 196.53205872]
[95.53748322 181.53529358]
[95.22542572 166.53854370]
[94.91336823 151.54179382]
[94.60131073 136.54504395]
[94.28926086 121.54828644]
[91.18523407 136.22360229]
[79.04173279 145.02902222]
[64.12846375 143.41827393]
[54.14518738 132.22299194]
[54.24628830 117.22333527]
[64.37957001 106.16365051]
[79.31517029 104.75463104]
[64.45211792 102.73229980]
[49.58907318 100.70996857]
[34.72602844 98.68762970]
[19.86297989 96.66529846]
[4.99993277 94.64295959]
[-9.88334656 92.77534485]
[-24.78524971 91.06266022]
[-39.68715286 89.34996796]
[-54.58905411 87.63728333]
[-66.80989075 97.65859222]
[-82.52902222 96.02016449]
[-92.42057037 83.69406128]
[-90.61604309 67.99312592]
[-78.18605042 58.23245621]
[-62.50507355 60.20287704]
[-52.87636566 72.73537445]
[-37.97446060 74.44806671]
[-23.07255936 76.16075897]
[-8.17065716 77.87344360]
[-1.12087572 75.49726868]
[7.02226734 79.77991486]
[21.88531494 81.80224609]
[36.74835968 83.82458496]
[51.61140823 85.84691620]
[66.47445679 87.86925507]
[81.33750153 89.89158630]
[91.08515167 78.49057007]
[86.77757263 64.12238312]
[80.71455383 50.40232849]
[72.99047089 37.54392624]
[65.26638794 24.68552399]
[49.87326050 21.10400963]
[41.59223557 7.64294910]
[45.33629608 -7.71145010]
[58.88415527 -15.84969425]
[74.19811249 -11.94350910]
[82.19266510 1.68963695]
[78.12478638 16.96143913]
[85.84887695 29.81984138]
[93.57295990 42.67824173]
[94.78427124 27.72723198]
[102.25854492 14.72203541]
[114.56701660 6.14872408]
[129.35678101 3.64617157]
[143.80064392 7.69276524]
[155.13751221 17.51495934]
[161.20022583 31.23514366]
[160.82984924 46.23057175]
[154.09716797 59.63471603]
[142.28921509 68.88524628]
[127.66319275 72.21382141]
[113.01500702 68.98416901]
[101.14575195 59.81479645]
[105.45333862 74.18298340]
[119.57814026 79.23173523]
[132.01757812 70.84959412]
[144.45701599 62.46745300]
[156.89646912 54.08530807]
[169.33590698 45.70316696]
[181.03552246 36.31600189]
[191.91435242 25.98879814]
[202.79318237 15.66159344]
[199.80601501 0.52619100]
[205.49711609 -13.81308746]
[218.05047607 -22.78063011]
[233.46034241 -23.51492882]
[246.80950928 -15.78166771]
[253.83830261 -2.04850531]
[252.30383301 13.30235767]
[242.69578552 25.37251472]
[228.08001709 30.31042480]
[213.12037659 26.54041862]
[202.24156189 36.86762238]
[191.36273193 47.19482803]
[206.36253357 47.11932373]
[218.63500977 55.74408340]
[223.64570618 69.88243103]
[219.54327393 84.31053162]
[207.84349060 93.69748688]
[192.86917114 94.57500458]
[180.15306091 86.61885834]
[174.39347839 72.76868439]
[177.71804810 58.14260483]
[165.27861023 66.52474976]
[152.83917236 74.90689087]
[140.39971924 83.28903198]
[127.96028137 91.67118073]
[142.01968384 86.44306946]
[157.01419067 86.84941864]
[170.76979065 92.83132172]
[181.29216003 103.52149200]
[187.05570984 117.37001038]
[187.22480774 132.36906433]
[181.77494812 146.34399414]
[171.49626160 157.26867676]
[157.87899780 163.55917358]
[142.89747620 164.30348206]
[128.72378540 159.39366150]
[117.41287994 149.54158020]
[110.60468292 136.17564392]
[109.28601074 121.23622894]
[109.59806824 136.23298645]
[109.91012573 151.22973633]
[110.22218323 166.22648621]
[110.53423309 181.22323608]
[110.84629059 196.22000122]
[111.15834808 211.21675110]
[111.47040558 226.21350098]
[111.78246307 241.21025085]
[112.09452057 256.20700073]
[112.40657043 271.20376587]
[127.06156158 274.79452515]
[140.28736877 282.05679321]
[151.18223572 292.49539185]
[159.00334167 305.39859009]
[163.21740723 319.88665771]
[163.53712463 334.97177124]
[159.94070435 349.62536621]
[152.67333984 362.84835815]
[142.23054504 373.73919678]
[129.32431030 381.55532837]
[114.83461761 385.76379395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[37 44]
[55 82]
[56 81]
[57 68]
[58 67]
[59 66]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
