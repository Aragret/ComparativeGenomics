%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCACACCCGGGGGGGGGGCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAxxxxxxxxxxAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAACCCCCCCCCCUAACACACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.31213379]
[71.19830322 365.29611206]
[59.48964310 355.76669312]
[50.78712082 343.43103027]
[45.73651886 329.20449829]
[44.71262741 314.14282227]
[47.79142761 299.36364746]
[54.74444962 285.96374512]
[65.05573273 274.93740845]
[77.96011353 267.10287476]
[92.50000000 263.04156494]
[92.50000000 248.04158020]
[92.50000000 233.04158020]
[92.50000000 218.04158020]
[92.50000000 203.04158020]
[92.50000000 188.04158020]
[92.50000000 173.04158020]
[92.50000000 158.04158020]
[92.50000000 143.04158020]
[92.50000000 128.04158020]
[88.07833862 129.78842163]
[83.15017700 130.84088135]
[77.82264709 131.10543823]
[72.21767426 130.50469971]
[58.09286880 135.55346680]
[43.96806717 140.60221863]
[37.43360519 154.99237061]
[22.60851097 160.46887207]
[8.28825474 153.78263855]
[2.96878791 138.90046692]
[9.80605602 124.65171051]
[24.74362946 119.48988342]
[38.91931152 126.47741699]
[53.04411316 121.42865753]
[67.16891479 116.37989807]
[66.85692596 108.88639069]
[66.23294830 93.89937592]
[65.92095947 86.40586853]
[51.42536545 82.54871368]
[36.92976761 78.69155121]
[22.43417168 74.83438873]
[7.88917446 81.60363007]
[-6.40708160 74.32375336]
[-9.48773193 58.57925797]
[1.01043499 46.44797134]
[17.03412437 47.23598480]
[26.29133224 60.33879471]
[40.78692627 64.19595337]
[55.28252411 68.05311584]
[69.77812195 71.91027069]
[78.41558838 69.10037994]
[86.78917694 68.53746796]
[77.77165222 56.55063248]
[68.75411987 44.56380081]
[59.73659134 32.57696915]
[50.71905899 20.59013557]
[35.09500504 19.93982315]
[23.57920647 9.36057949]
[21.60907364 -6.15240192]
[30.11484146 -19.27436447]
[45.08034897 -23.80952072]
[59.43933868 -17.61650658]
[66.41193390 -3.61947393]
[62.70589066 11.57260513]
[71.72341919 23.55943680]
[80.74095154 35.54626846]
[89.75848389 47.53310394]
[98.77600861 59.51993561]
[113.59377289 61.85103989]
[106.27634430 48.74100494]
[100.36940765 34.93789673]
[95.93766785 20.59295464]
[93.02967834 5.86334705]
[91.67730713 -9.08953953]
[91.89537811 -24.10187340]
[93.68148804 -39.00917053]
[97.01607513 -53.64809799]
[101.86260223 -67.85826874]
[108.16797638 -81.48397827]
[115.86309814 -94.37594604]
[124.86366272 -106.39291382]
[135.07106018 -117.40322113]
[146.37342834 -127.28623199]
[158.64697266 -135.93365479]
[171.75718689 -143.25076294]
[185.56044006 -149.15737915]
[199.90548706 -153.58876038]
[214.63516235 -156.49639893]
[229.58807373 -157.84840393]
[244.60040283 -157.62997437]
[259.50765991 -155.84349060]
[274.14651489 -152.50854492]
[288.35656738 -147.66168213]
[301.98211670 -141.35597229]
[314.87390137 -133.66053772]
[326.89065552 -124.65968323]
[337.90069580 -114.45202637]
[347.78344727 -103.14940643]
[356.43057251 -90.87565613]
[363.74737549 -77.76526642]
[369.65362549 -63.96187210]
[374.08468628 -49.61671448]
[376.99194336 -34.88696671]
[378.34359741 -19.93401527]
[378.12478638 -4.92169189]
[376.33795166 9.98551846]
[373.00265503 24.62428474]
[368.15542603 38.83421707]
[361.84939575 52.45962524]
[354.15365601 65.35121918]
[345.15249634 77.36774445]
[334.94458008 88.37755585]
[323.64172363 98.26001740]
[311.36776733 106.90685272]
[298.25720215 114.22332001]
[284.45367432 120.12925720]
[270.10839844 124.55995178]
[255.37857056 127.46686554]
[240.42559814 128.81814575]
[225.41326904 128.59898376]
[210.50610352 126.81178284]
[195.86741638 123.47612762]
[181.65760803 118.62856293]
[168.03234863 112.32220459]
[155.14094543 104.62614441]
[143.12463379 95.62470245]
[132.11506653 85.41651154]
[122.23288727 74.11341095]
[132.11813354 95.55121613]
[125.60121918 116.99013519]
[107.50000000 128.04158020]
[107.50000000 143.04158020]
[107.50000000 158.04158020]
[107.50000000 173.04158020]
[107.50000000 188.04158020]
[107.50000000 203.04158020]
[107.50000000 218.04158020]
[107.50000000 233.04158020]
[107.50000000 248.04158020]
[107.50000000 263.04156494]
[122.03988647 267.10287476]
[134.94427490 274.93740845]
[145.25555420 285.96374512]
[152.20857239 299.36364746]
[155.28736877 314.14282227]
[154.26348877 329.20449829]
[149.21287537 343.43103027]
[140.51036072 355.76669312]
[128.80169678 365.29611206]
[114.95575714 371.31213379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 35]
[25 34]
[26 33]
[38 50]
[39 49]
[40 48]
[41 47]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[69 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
