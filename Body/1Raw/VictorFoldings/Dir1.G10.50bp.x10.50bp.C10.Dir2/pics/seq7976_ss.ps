%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGCCCCAGGGGGGGGGGACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACxxxxxxxxxxAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAACCCCCCCCCCAAAUGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[69.30579376 431.85012817]
[55.45985794 425.83410645]
[43.75119400 416.30468750]
[35.04867172 403.96902466]
[29.99806786 389.74249268]
[28.97417831 374.68081665]
[32.05297470 359.90167236]
[39.00599670 346.50173950]
[49.31728363 335.47540283]
[62.22166443 327.64089966]
[76.76155090 323.57958984]
[76.76155090 308.57958984]
[76.76155090 293.57958984]
[76.76155090 278.57958984]
[76.76155090 263.57958984]
[76.76155090 248.57957458]
[76.76155090 233.57957458]
[76.76155090 218.57957458]
[76.76155090 203.57957458]
[76.76155090 188.57957458]
[68.41299438 179.76998901]
[68.32856750 167.23156738]
[77.10164642 157.71911621]
[77.41370392 142.72236633]
[77.72576141 127.72560883]
[74.99931335 142.47573853]
[64.45604706 153.14529419]
[49.73941803 156.04718018]
[35.93509293 150.17857361]
[27.81346512 137.56748962]
[28.18114281 122.57200623]
[36.91106796 110.37411499]
[50.98641968 105.18909454]
[65.54344940 108.80891418]
[51.76106644 102.88895416]
[37.97868347 96.96898651]
[24.19630241 91.04902649]
[10.41392136 85.12905884]
[-3.36845994 79.20909882]
[-13.73565006 90.26790619]
[-27.26135826 97.11122131]
[-42.31228638 98.91269684]
[-57.07096863 95.45478058]
[-69.75521851 87.15504456]
[-78.83334351 75.01570892]
[-83.20912933 60.50267029]
[-82.35417175 45.36844254]
[-76.37171173 31.44055939]
[-65.98415375 20.40087891]
[-52.44586182 13.58249569]
[-37.39163589 11.80876446]
[-22.63935471 15.29387093]
[-9.97042370 23.61697197]
[-0.91468042 35.77301025]
[3.43435073 50.29409027]
[2.55150294 65.42671967]
[16.33388519 71.34667969]
[30.11626625 77.26664734]
[43.89864731 83.18660736]
[57.68103027 89.10656738]
[71.46340942 95.02653503]
[81.26540375 81.38418579]
[95.75481415 76.52579498]
[108.89360046 80.64657593]
[119.55522919 70.09528351]
[130.21685791 59.54399490]
[140.87847900 48.99270248]
[126.29194641 52.49025726]
[111.29290009 52.32117081]
[96.78891754 48.49567032]
[83.65760803 41.24523163]
[72.69354248 31.00856781]
[64.56013489 18.40509033]
[59.74952698 4.19741440]
[58.55279922 -10.75477028]
[61.04236984 -25.54673004]
[67.06759644 -39.28342056]
[76.26389313 -51.13365555]
[88.07481384 -60.38039017]
[101.78569794 -66.46411896]
[116.56690979 -69.01673126]
[131.52406311 -67.88375854]
[145.75210571 -63.13376236]
[158.39015198 -55.05415726]
[168.67346191 -44.13383102]
[175.97981262 -31.03355598]
[179.86711121 -16.54601288]
[180.10014343 -1.54782283]
[176.66481018 13.05349350]
[169.76896667 26.37443161]
[159.83135986 37.60764694]
[174.15396118 33.15083313]
[188.47654724 28.69401550]
[202.79914856 24.23719978]
[217.12174988 19.78038406]
[231.34852600 15.02656937]
[245.47332764 9.97781277]
[259.59814453 4.92905664]
[260.70614624 -10.25949764]
[267.90182495 -23.68119812]
[279.93847656 -33.01065445]
[294.73068237 -36.63147736]
[309.71560669 -33.91634369]
[322.29702759 -25.33566475]
[330.29510498 -12.37609291]
[332.32415771 2.71704650]
[328.03262329 17.32877541]
[318.16403198 28.92752457]
[304.42819214 35.50373840]
[289.20492554 35.91804886]
[275.13174438 30.09867668]
[264.64688110 19.05385971]
[250.52209473 24.10261536]
[236.39727783 29.15137291]
[233.55903625 33.06542969]
[228.20445251 35.20078659]
[221.57856750 34.10298157]
[207.25596619 38.55979919]
[192.93336487 43.01661301]
[178.61077881 47.47343063]
[164.28817749 51.93024445]
[151.42977905 59.65433121]
[140.76814270 70.20561981]
[130.10652161 80.75691223]
[119.44489288 91.30819702]
[119.18704987 116.23332214]
[92.72251129 128.03765869]
[92.41046143 143.03442383]
[92.09840393 158.03117371]
[101.35266113 173.91633606]
[91.76155090 188.57957458]
[91.76155090 203.57957458]
[91.76155090 218.57957458]
[91.76155090 233.57957458]
[91.76155090 248.57957458]
[91.76155090 263.57958984]
[91.76155090 278.57958984]
[91.76155090 293.57958984]
[91.76155090 308.57958984]
[91.76155090 323.57958984]
[106.30143738 327.64089966]
[119.20581818 335.47540283]
[129.51710510 346.50173950]
[136.47012329 359.90167236]
[139.54891968 374.68081665]
[138.52502441 389.74249268]
[133.47442627 403.96902466]
[124.77190399 416.30468750]
[113.06324768 425.83410645]
[99.21730804 431.85012817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[64 125]
[65 124]
[66 123]
[67 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
[96 114]
[97 113]
[98 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
