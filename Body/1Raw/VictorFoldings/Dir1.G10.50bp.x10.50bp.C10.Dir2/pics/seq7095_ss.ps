%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUCUCAGGGGGGGGGGGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCxxxxxxxxxxAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACCCCCCCCCCCUAUUCUCUG\
) } def
/len { sequence length } bind def

/coor [
[81.56261444 351.57305908]
[69.46767426 342.53897095]
[60.25954056 330.57598877]
[54.62150574 316.57186890]
[52.97195816 301.56582642]
[55.43330002 286.67138672]
[61.82288742 272.99383545]
[71.66656494 261.54809570]
[84.23387909 253.18356323]
[98.59223175 248.52093506]
[97.96825409 233.53392029]
[97.34427643 218.54690552]
[96.72029877 203.55989075]
[96.09632111 188.57287598]
[95.47234344 173.58586121]
[94.84836578 158.59883118]
[94.22438812 143.61181641]
[93.60041046 128.62480164]
[80.28525543 121.71780396]
[67.67412567 129.83935547]
[55.06299973 137.96089172]
[50.27599716 153.27311707]
[35.26824188 158.94293213]
[21.55240440 150.62095642]
[19.65009880 134.69108582]
[31.02061272 123.37335968]
[46.94145966 125.34976196]
[59.55258560 117.22821808]
[72.16371918 109.10668182]
[75.59642792 87.16482544]
[92.69927979 75.19387817]
[83.19092560 63.59253693]
[73.68256378 51.99119568]
[64.17420959 40.38985443]
[51.47661972 48.41175461]
[37.88945389 54.81242371]
[23.61869049 59.49483490]
[8.88067150 62.38799667]
[-6.10118055 63.44805527]
[-21.09974480 62.65893936]
[-35.88764572 60.03260803]
[-50.24070358 55.60887909]
[-63.94132614 49.45481491]
[-76.78182220 41.66370773]
[-88.56752777 32.35367203]
[-99.11977386 21.66584396]
[-108.27859497 9.76224804]
[-115.90514374 -3.17666101]
[-121.88380432 -16.95473099]
[-126.12393951 -31.36309242]
[-128.56127930 -46.18331528]
[-129.15885925 -61.19073105]
[-127.90762329 -76.15782928]
[-124.82655334 -90.85771179]
[-119.96234894 -105.06753540]
[-113.38874054 -118.57188416]
[-105.20539856 -131.16603088]
[-95.53636932 -142.65905762]
[-84.52824402 -152.87672424]
[-72.34789276 -161.66412354]
[-59.17996597 -168.88807678]
[-45.22409058 -174.43904114]
[-30.69183731 -178.23287964]
[-15.80350399 -180.21205139]
[-0.78479868 -180.34658813]
[14.13660049 -178.63444519]
[28.73448944 -175.10156250]
[42.78756714 -169.80149841]
[56.08279037 -162.81460571]
[68.41860962 -154.24681091]
[79.60801697 -144.22798157]
[89.48138428 -132.91001892]
[97.88903046 -120.46450043]
[104.70349884 -107.08008575]
[109.82148743 -92.95967865]
[113.16541290 -78.31735229]
[114.68456268 -63.37506866]
[114.35593414 -48.35935593]
[112.18448639 -33.49784851]
[108.20314789 -19.01583862]
[102.47227478 -5.13287497]
[95.07874298 7.94058323]
[86.13463593 20.00634575]
[75.77555084 30.88149643]
[85.28390503 42.48283768]
[94.79226685 54.08417892]
[104.30062103 65.68551636]
[118.42542267 70.73427582]
[133.13339233 67.78879547]
[147.84135437 64.84331512]
[162.54931641 61.89782715]
[164.31021118 46.20792770]
[170.81607056 31.84354019]
[181.42173767 20.20006943]
[195.08447266 12.40455532]
[210.46640015 9.20657158]
[226.06553650 10.90617085]
[240.36245728 17.32577515]
[251.96832275 27.82864380]
[259.75970459 41.38201523]
[274.40319824 38.13118744]
[289.04669189 34.88036346]
[303.69021606 31.62953758]
[318.33370972 28.37871170]
[325.38934326 14.42335033]
[339.78485107 8.31575012]
[354.72317505 12.93973351]
[363.15081787 26.11199760]
[361.08856201 41.61299896]
[349.51013184 52.12364197]
[333.88247681 52.68112183]
[321.58453369 43.02221298]
[306.94104004 46.27304077]
[292.29751587 49.52386475]
[277.65402222 52.77468872]
[263.01052856 56.02551651]
[261.99304199 70.27552032]
[256.98684692 83.67296600]
[248.39111328 95.12387848]
[236.89848328 103.69048309]
[223.43934631 108.66805267]
[209.10643005 109.64286804]
[195.06614685 106.52655792]
[182.46360779 99.56407166]
[172.32931519 89.31440735]
[165.49479675 76.60578918]
[150.78683472 79.55126953]
[136.07887268 82.49675751]
[121.37091064 85.44223785]
[126.01655579 109.13317871]
[108.58743286 128.00082397]
[109.21141052 142.98783875]
[109.83538055 157.97485352]
[110.45935822 172.96188354]
[111.08333588 187.94889832]
[111.70731354 202.93591309]
[112.33129120 217.92292786]
[112.95526886 232.90994263]
[113.57924652 247.89695740]
[128.27549744 251.34991455]
[141.49461365 258.64083862]
[152.25564575 269.22869873]
[159.76007080 282.32778931]
[163.45098877 296.96609497]
[163.05453491 312.05731201]
[158.60009766 326.48162842]
[150.41825867 339.16864014]
[139.11613464 349.17684937]
[125.53244019 355.76364136]
[110.67517090 358.44021606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 29]
[20 28]
[21 27]
[31 87]
[32 86]
[33 85]
[34 84]
[88 129]
[89 128]
[90 127]
[91 126]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
