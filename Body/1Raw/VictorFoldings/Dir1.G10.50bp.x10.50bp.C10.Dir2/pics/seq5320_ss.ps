%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCAUUCGGGGGGGGGGUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCxxxxxxxxxxUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUACCCCCCCCCCAUAACCAUGC\
) } def
/len { sequence length } bind def

/coor [
[68.08335114 493.90954590]
[54.23741531 487.89349365]
[42.52875519 478.36407471]
[33.82622910 466.02841187]
[28.77562714 451.80191040]
[27.75173569 436.74020386]
[30.83053589 421.96105957]
[37.78355789 408.56112671]
[48.09484100 397.53479004]
[60.99922180 389.70028687]
[75.53910828 385.63897705]
[75.53910828 370.63897705]
[75.53910828 355.63897705]
[75.53910828 340.63897705]
[75.53910828 325.63897705]
[75.53910828 310.63897705]
[75.53910828 295.63897705]
[75.53910828 280.63897705]
[75.53910828 265.63897705]
[75.53910828 250.63897705]
[75.53910828 235.63897705]
[64.65625000 245.96192932]
[49.69570160 247.04910278]
[37.43473434 238.40800476]
[33.42768860 223.95312500]
[39.48979568 210.23266602]
[52.87485886 203.46214294]
[67.51931763 206.70864868]
[76.78921509 218.50189209]
[78.96604919 203.66069031]
[81.14289093 188.81947327]
[78.98783875 181.69898987]
[83.52249146 173.69343567]
[86.00760651 158.90072632]
[88.49272919 144.10803223]
[90.97784424 129.31532288]
[93.46296692 114.52261353]
[83.90921783 113.42547607]
[74.77643585 106.24887085]
[60.13293457 102.99803925]
[45.48943329 99.74721527]
[28.71636772 102.21717072]
[21.69969368 86.78335571]
[34.58794022 75.76839447]
[48.74025726 85.10371399]
[63.38375854 88.35453796]
[78.02725983 91.60536957]
[88.79807281 81.16555023]
[86.00574493 66.42774963]
[83.21341705 51.68994141]
[70.43681335 42.77949524]
[67.81494141 27.79348564]
[76.38843536 15.66785622]
[73.59610748 0.93005019]
[70.80377960 -13.80775547]
[55.75736618 -13.85101700]
[40.99110031 -16.74131393]
[27.03876877 -22.37416267]
[14.40474606 -30.54594231]
[3.54574132 -40.96124268]
[-5.14569855 -53.24356461]
[-11.35538292 -66.94890594]
[-14.85883713 -81.58181763]
[-15.52941132 -96.61334991]
[-13.34286690 -111.50010681]
[-8.37824440 -125.70394135]
[-0.81501269 -138.71141052]
[9.07342243 -150.05227661]
[20.92959976 -159.31658936]
[34.32492828 -166.16944885]
[48.77516937 -170.36312866]
[63.75796509 -171.74603271]
[78.73168945 -170.26817322]
[93.15505219 -165.98295593]
[106.50666046 -159.04528809]
[118.30385590 -149.70599365]
[128.12019348 -138.30265808]
[135.60079956 -125.24750519]
[140.47526550 -111.01247406]
[142.56738281 -96.11215210]
[141.80151367 -81.08517456]
[138.20535278 -66.47476196]
[131.90888977 -52.80907440]
[123.13975525 -40.58210754]
[112.21493530 -30.23586464]
[99.52935028 -22.14435387]
[85.54158783 -16.60008049]
[88.33391571 -1.86227429]
[91.12623596 12.87553120]
[103.54109955 21.02456665]
[106.58286285 35.93101883]
[97.95122528 48.89761734]
[100.74355316 63.63542175]
[103.53587341 78.37322998]
[116.70446014 85.55574036]
[130.60700989 79.92378235]
[140.49244690 67.57109833]
[155.19363403 69.96368408]
[169.09619141 64.33173370]
[182.99874878 58.69977188]
[196.90130615 53.06781769]
[210.80386353 47.43585968]
[223.21397400 35.88486862]
[237.74900818 44.61235809]
[233.38629150 60.99536896]
[216.43580627 61.33841705]
[202.53326416 66.97037506]
[188.63070679 72.60233307]
[174.72814941 78.23428345]
[160.82559204 83.86624146]
[151.93455505 95.81608582]
[136.23896790 93.82633972]
[122.33641052 99.45829773]
[137.19027710 97.36956787]
[150.65122986 103.98794556]
[158.06752014 117.02629089]
[156.87631226 131.97891235]
[147.48922729 143.67860413]
[133.15019226 148.08226013]
[118.81439209 143.66812134]
[109.43587494 131.96156311]
[108.25566864 117.00772858]
[105.77055359 131.80043030]
[103.28543091 146.59313965]
[100.80031586 161.38584900]
[98.31520081 176.17855835]
[95.98409271 190.99632263]
[93.80725861 205.83752441]
[91.63041687 220.67872620]
[90.53910828 235.63897705]
[90.53910828 250.63897705]
[90.53910828 265.63897705]
[90.53910828 280.63897705]
[90.53910828 295.63897705]
[90.53910828 310.63897705]
[90.53910828 325.63897705]
[90.53910828 340.63897705]
[90.53910828 355.63897705]
[90.53910828 370.63897705]
[90.53910828 385.63897705]
[105.07899475 389.70028687]
[117.98337555 397.53479004]
[128.29466248 408.56112671]
[135.24768066 421.96105957]
[138.32647705 436.74020386]
[137.30259705 451.80191040]
[132.25198364 466.02841187]
[123.54946136 478.36407471]
[111.84080505 487.89349365]
[97.99486542 493.90954590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 129]
[30 128]
[31 127]
[33 126]
[34 125]
[35 124]
[36 123]
[37 122]
[39 47]
[40 46]
[41 45]
[48 94]
[49 93]
[50 92]
[53 89]
[54 88]
[55 87]
[95 113]
[96 112]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
