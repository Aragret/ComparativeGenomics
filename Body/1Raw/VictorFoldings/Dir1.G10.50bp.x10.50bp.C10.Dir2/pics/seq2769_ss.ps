%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUUCCUUAGGGGGGGGGGAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUxxxxxxxxxxCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCACCCCCCCCCCUUGUUCGUUA\
) } def
/len { sequence length } bind def

/coor [
[89.58969879 584.13006592]
[75.74375916 578.11407471]
[64.03509521 568.58465576]
[55.33256912 556.24896240]
[50.28196716 542.02246094]
[49.25807953 526.96075439]
[52.33687592 512.18164062]
[59.28989792 498.78170776]
[69.60118103 487.75537109]
[82.50556183 479.92083740]
[97.04544830 475.85952759]
[97.04544830 460.85952759]
[97.04544830 445.85952759]
[97.04544830 430.85952759]
[97.04544830 415.85952759]
[97.04544830 400.85952759]
[97.04544830 385.85952759]
[97.04544830 370.85952759]
[97.04544830 355.85952759]
[97.04544830 340.85952759]
[81.34203339 330.84652710]
[74.72236633 313.27935791]
[79.99569702 295.10714722]
[95.22855377 283.63314819]
[94.29292297 268.66235352]
[93.35729218 253.69157410]
[92.42166138 238.72077942]
[91.48603821 223.75000000]
[80.47943115 233.94090271]
[65.48435211 233.55651855]
[55.01432800 222.81507874]
[55.01374817 207.81507874]
[65.48294067 197.07283020]
[80.47798920 196.68728638]
[91.48603821 206.87873840]
[92.42166138 191.90794373]
[93.35729218 176.93714905]
[94.29292297 161.96635437]
[94.44895935 146.96717834]
[93.82498169 131.98016357]
[93.20100403 116.99314117]
[84.30865479 104.91315460]
[70.18385315 99.86439514]
[56.05904770 94.81563568]
[39.10897446 95.17800140]
[34.06852341 78.99065399]
[48.22792816 69.66608429]
[61.10780334 80.69083405]
[75.23260498 85.73959351]
[89.35741425 90.78834534]
[101.15405273 81.52339935]
[92.02558136 68.60125732]
[98.39947510 55.13935852]
[96.84189606 40.22044754]
[85.68182373 25.61111069]
[93.37261963 9.86780453]
[91.50500488 -5.01547527]
[89.63739014 -19.89875603]
[87.76977539 -34.78203583]
[72.77893066 -36.27278137]
[58.49582672 -41.06242371]
[45.63689804 -48.91071701]
[34.84714127 -59.42398834]
[26.66776848 -72.07489777]
[21.50905228 -86.22888947]
[19.62975121 -101.17599487]
[21.12413025 -116.16647339]
[25.91723251 -130.44842529]
[33.76863861 -143.30545044]
[44.28452682 -154.09265137]
[56.93741989 -162.26896667]
[71.09265900 -167.42425537]
[86.04021454 -169.29992676]
[101.03033447 -167.80192566]
[115.31111908 -163.00535583]
[128.16624451 -155.15083313]
[138.95089722 -144.63233948]
[147.12414551 -131.97746277]
[152.27600098 -117.82097626]
[154.14805603 -102.87296295]
[152.64642334 -87.88320160]
[147.84638977 -73.60358429]
[139.98875427 -60.75036240]
[129.46765137 -49.96825027]
[116.81079102 -41.79807663]
[102.65305328 -36.64964676]
[104.52066803 -21.76636887]
[106.38828278 -6.88308859]
[108.25589752 8.00019169]
[117.63635254 15.70177269]
[119.28125000 28.13211060]
[111.76080322 38.66286469]
[113.31838989 53.58177948]
[122.33544159 65.43681335]
[116.07295990 79.96582031]
[112.68565369 85.11693573]
[109.00981140 90.04482269]
[122.39609528 83.27671051]
[135.78237915 76.50859070]
[142.13351440 61.77622223]
[157.64888000 57.69543457]
[170.42643738 67.39665985]
[170.66432190 83.43795013]
[158.18005371 93.51380157]
[142.55049133 89.89487457]
[129.16421509 96.66299438]
[115.77793121 103.43110657]
[108.18801880 116.36916351]
[108.81199646 131.35618591]
[109.43597412 146.34320068]
[121.58074188 137.53952026]
[136.09135437 141.33981323]
[142.36172485 154.96633911]
[135.80871582 168.45924377]
[121.22206116 171.95626831]
[109.26371002 162.90199280]
[108.32808685 177.87278748]
[107.39245605 192.84356689]
[106.45682526 207.81436157]
[106.45682526 222.81436157]
[107.39245605 237.78515625]
[108.32808685 252.75595093]
[109.26371002 267.72674561]
[110.19934082 282.69754028]
[120.89645386 287.11505127]
[129.11357117 295.19161987]
[133.67395020 305.71636963]
[133.94496155 317.13189697]
[129.92561340 327.76480103]
[122.24101257 336.07089233]
[112.04544830 340.85952759]
[112.04544830 355.85952759]
[112.04544830 370.85952759]
[112.04544830 385.85952759]
[112.04544830 400.85952759]
[112.04544830 415.85952759]
[112.04544830 430.85952759]
[112.04544830 445.85952759]
[112.04544830 460.85952759]
[112.04544830 475.85952759]
[126.58533478 479.92083740]
[139.48971558 487.75537109]
[149.80101013 498.78170776]
[156.75402832 512.18164062]
[159.83282471 526.96075439]
[158.80892944 542.02246094]
[153.75833130 556.24896240]
[145.05580139 568.58465576]
[133.34713745 578.11407471]
[119.50120544 584.13006592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[35 119]
[36 118]
[37 117]
[38 116]
[39 110]
[40 109]
[41 108]
[42 50]
[43 49]
[44 48]
[51 95]
[53 93]
[54 92]
[56 89]
[57 88]
[58 87]
[59 86]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
