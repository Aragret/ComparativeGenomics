%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUCCUCGGGGGGGGGGCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAxxxxxxxxxxCUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCCCCCCCCCCCUUCUCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 375.87924194]
[71.19830322 369.86322021]
[59.48964310 360.33380127]
[50.78712082 347.99813843]
[45.73651886 333.77160645]
[44.71262741 318.70993042]
[47.79142761 303.93075562]
[54.74444962 290.53085327]
[65.05573273 279.50451660]
[77.96011353 271.67001343]
[92.50000000 267.60867310]
[92.50000000 252.60868835]
[92.50000000 237.60868835]
[92.50000000 222.60868835]
[92.50000000 207.60868835]
[92.50000000 192.60868835]
[92.50000000 177.60868835]
[92.50000000 162.60868835]
[92.50000000 147.60868835]
[92.50000000 132.60868835]
[92.50000000 117.60868835]
[79.88887024 109.48714447]
[66.23262787 115.69255066]
[52.57638931 121.89795685]
[47.26072311 136.78147888]
[32.94217300 143.47137451]
[18.11568260 137.99864197]
[11.57754612 123.61016846]
[17.20672417 108.84236908]
[31.66352272 102.45671844]
[46.37098312 108.24171448]
[60.02722549 102.03630829]
[73.68346405 95.83090210]
[72.90361786 80.85118866]
[58.67684174 76.09737396]
[44.45006180 71.34355927]
[30.22328186 66.58974457]
[15.99650288 61.83592987]
[6.05487967 73.33517456]
[-7.53279400 80.15012360]
[-22.69449615 81.24155426]
[-37.11817932 76.44302368]
[-48.60433197 66.48628235]
[-55.40140533 52.88965988]
[-56.47288895 37.72653198]
[-51.65539169 23.30917740]
[-41.68355179 11.83613014]
[-28.07799339 5.05695057]
[-12.91347218 4.00541353]
[1.49753475 8.84187031]
[12.95745373 18.82879639]
[19.71872902 32.44326019]
[20.75031853 47.60914993]
[34.97709656 52.36296463]
[49.20387650 57.11677933]
[63.43065643 61.87059402]
[77.65743256 66.62441254]
[92.25978088 71.79534912]
[100.99377441 81.69572449]
[102.72498322 93.10384369]
[113.38661194 82.55255127]
[124.04823303 72.00125885]
[114.55049133 60.37638855]
[106.20079041 47.90132523]
[99.07473755 34.68905258]
[93.23687744 20.85922813]
[88.74006653 6.53709412]
[85.62504578 -8.14763927]
[83.92002106 -23.06198311]
[83.64042664 -38.07086563]
[84.78880310 -53.03836441]
[87.35475159 -67.82892609]
[91.31502533 -82.30860138]
[96.63375854 -96.34625244]
[103.26279449 -109.81476593]
[111.14208221 -122.59214783]
[120.20027924 -134.56268311]
[130.35534668 -145.61798096]
[141.51530457 -155.65789795]
[153.57910156 -164.59152222]
[166.43746948 -172.33793640]
[179.97396851 -178.82699585]
[194.06600952 -183.99993896]
[208.58595276 -187.80990601]
[223.40232849 -190.22238159]
[238.38092041 -191.21554565]
[253.38609314 -190.78039551]
[268.28198242 -188.92085266]
[282.93362427 -185.65377808]
[297.20837402 -181.00874329]
[310.97692871 -175.02784729]
[324.11462402 -167.76521301]
[336.50247192 -159.28663635]
[348.02825928 -149.66891479]
[358.58764648 -138.99911499]
[368.08496094 -127.37389374]
[376.43420410 -114.89852905]
[383.55978394 -101.68599701]
[389.39712524 -87.85595703]
[393.89343262 -73.53366089]
[397.00790405 -58.84881592]
[398.71240234 -43.93441010]
[398.99142456 -28.92551613]
[397.84249878 -13.95805931]
[395.27603149 0.83240777]
[391.31521606 15.31193829]
[385.99597168 29.34940147]
[379.36645508 42.81766510]
[371.48669434 55.59476089]
[362.42807007 67.56497192]
[352.27261353 78.61989594]
[341.11227417 88.65940857]
[329.04815674 97.59259033]
[316.18948364 105.33853912]
[302.65277100 111.82710266]
[288.56054688 116.99952698]
[274.04043579 120.80895996]
[259.22399902 123.22090912]
[244.24536133 124.21352386]
[229.24018860 123.77781677]
[214.34439087 121.91773987]
[199.69285583 118.65013123]
[185.41827393 114.00458527]
[171.64993286 108.02317047]
[158.51249695 100.76006317]
[146.12496948 92.28104401]
[134.59951782 82.66288757]
[123.93789673 93.21417999]
[113.27627563 103.76547241]
[107.50000000 117.60868835]
[107.50000000 132.60868835]
[107.50000000 147.60868835]
[107.50000000 162.60868835]
[107.50000000 177.60868835]
[107.50000000 192.60868835]
[107.50000000 207.60868835]
[107.50000000 222.60868835]
[107.50000000 237.60868835]
[107.50000000 252.60868835]
[107.50000000 267.60867310]
[122.03988647 271.67001343]
[134.94427490 279.50451660]
[145.25555420 290.53085327]
[152.20857239 303.93075562]
[155.28736877 318.70993042]
[154.26348877 333.77160645]
[149.21287537 347.99813843]
[140.51036072 360.33380127]
[128.80169678 369.86322021]
[114.95575714 375.87924194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 33]
[23 32]
[24 31]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[60 129]
[61 128]
[62 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
