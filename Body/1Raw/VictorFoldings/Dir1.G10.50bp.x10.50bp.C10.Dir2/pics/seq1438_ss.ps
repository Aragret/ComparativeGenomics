%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAAAUCAAGGGGGGGGGGCAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACxxxxxxxxxxUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCCCCCCCCCCCGUGAAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[86.96058655 354.25994873]
[73.11464691 348.24392700]
[61.40598297 338.71450806]
[52.70345688 326.37884521]
[47.65285492 312.15234375]
[46.62896347 297.09063721]
[49.70776367 282.31149292]
[56.66078568 268.91156006]
[66.97206879 257.88522339]
[79.87644958 250.05072021]
[94.41633606 245.98941040]
[94.41633606 230.98941040]
[94.41633606 215.98941040]
[94.41633606 200.98941040]
[94.41633606 185.98941040]
[94.41633606 170.98941040]
[94.41633606 155.98941040]
[94.41633606 140.98941040]
[94.41633606 125.98940277]
[94.41633606 110.98940277]
[91.15023041 110.43060303]
[87.88717651 108.90084839]
[84.91087341 106.38374329]
[69.95063019 105.29242706]
[55.62410736 112.00521088]
[43.49348450 103.36244965]
[28.53323555 102.27114105]
[13.54621983 101.64716339]
[-1.45296896 101.49112701]
[-16.45215797 101.33509064]
[-31.45134544 101.17905426]
[-46.45053482 101.02301788]
[-56.23210907 109.49501038]
[-68.76177979 109.01939392]
[-77.30658722 100.40001678]
[-92.29927826 99.93197632]
[-106.48663330 108.15699768]
[-120.56658936 99.74944305]
[-120.05488586 83.35827637]
[-105.47792816 75.84532928]
[-91.83123779 84.93927765]
[-76.83853912 85.40731812]
[-61.88317490 76.27841949]
[-46.29449844 86.02382660]
[-31.29530907 86.17986298]
[-16.29612160 86.33589935]
[-1.29693246 86.49193573]
[13.70225620 86.64797211]
[16.49376488 84.39521027]
[20.53683090 83.41781616]
[25.20332336 84.29885101]
[29.62454605 87.31089020]
[44.58479309 88.40220642]
[57.84125900 81.61136627]
[71.04193878 90.33218384]
[86.00218964 91.42349243]
[71.97466278 86.11045074]
[62.23225784 74.70494080]
[59.17725754 60.01933670]
[63.56296539 45.67480469]
[74.30795288 35.20841599]
[88.76271820 31.20096779]
[103.36302185 34.64061356]
[114.50872040 44.67921066]
[119.45151520 58.84144211]
[116.97260284 73.63519287]
[107.68421936 85.41188049]
[119.94658661 76.77276611]
[132.20895386 68.13365173]
[117.23595428 69.03325653]
[102.69610596 65.34641266]
[89.96087646 57.42088699]
[80.23152161 46.00425339]
[74.42575073 32.17337799]
[73.09120178 17.23286438]
[76.35375214 2.59197021]
[83.90566254 -10.36830139]
[95.03459930 -20.42547417]
[108.69083405 -26.63090897]
[123.58622742 -28.39927483]
[138.31579590 -25.56377220]
[151.49014282 -18.39186096]
[161.86663818 -7.56003046]
[168.46647644 5.91000891]
[170.66717529 20.74769592]
[168.26112366 35.55347061]
[161.47526550 48.93077469]
[150.94955444 59.61790848]
[165.52224731 56.06314468]
[180.09495544 52.50838470]
[194.66766357 48.95362091]
[209.24035645 45.39886093]
[223.31188965 40.20344543]
[236.69816589 33.43532944]
[250.08445740 26.66721535]
[263.47073364 19.89910126]
[276.85702515 13.13098621]
[278.34216309 -2.22472787]
[287.91137695 -14.32569408]
[302.51119995 -19.31053925]
[317.48287964 -15.58861637]
[328.04898071 -4.34757853]
[330.83792114 10.82560062]
[324.95974731 25.08921432]
[312.29019165 33.89179611]
[296.87200928 34.42447281]
[283.62512207 26.51727104]
[270.23886108 33.28538513]
[256.85256958 40.05350113]
[243.46627808 46.82161331]
[230.08000183 53.58972931]
[244.84638977 56.22672653]
[256.77426147 65.32211304]
[263.22528076 78.86405945]
[262.77252197 93.85722351]
[255.51615906 106.98526001]
[243.06121826 115.34435272]
[228.16261292 117.08555603]
[214.11579895 111.82373810]
[204.02777100 100.72274780]
[200.12992859 86.23803711]
[203.28443909 71.57348633]
[212.79512024 59.97156143]
[198.22242737 63.52632523]
[183.64971924 67.08108521]
[169.07701111 70.63584900]
[154.50431824 74.19061279]
[140.84806824 80.39601898]
[128.58570862 89.03513336]
[116.32333374 97.67424774]
[109.41633606 110.98940277]
[109.41633606 125.98940277]
[109.41633606 140.98941040]
[109.41633606 155.98941040]
[109.41633606 170.98941040]
[109.41633606 185.98941040]
[109.41633606 200.98941040]
[109.41633606 215.98941040]
[109.41633606 230.98941040]
[109.41633606 245.98941040]
[123.95622253 250.05072021]
[136.86061096 257.88522339]
[147.17189026 268.91156006]
[154.12490845 282.31149292]
[157.20370483 297.09063721]
[156.17982483 312.15234375]
[151.12921143 326.37884521]
[142.42669678 338.71450806]
[130.71803284 348.24392700]
[116.87209320 354.25994873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 56]
[24 55]
[26 53]
[27 52]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[35 42]
[36 41]
[67 130]
[68 129]
[69 128]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
