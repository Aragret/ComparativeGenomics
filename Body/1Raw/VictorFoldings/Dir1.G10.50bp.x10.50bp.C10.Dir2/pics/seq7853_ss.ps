%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACUACGGGGGGGGGGGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCxxxxxxxxxxUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCCCCCCCCCCCUAUAUUACGG\
) } def
/len { sequence length } bind def

/coor [
[104.00682068 408.11514282]
[92.51065826 398.30035400]
[84.41959381 385.53219604]
[80.45308685 370.94595337]
[80.96383667 355.83865356]
[85.90641785 341.55361938]
[94.84134674 329.36105347]
[106.97413635 320.34515381]
[121.22594452 315.30755615]
[120.60196686 300.32052612]
[119.97798920 285.33349609]
[119.35401154 270.34649658]
[118.73003387 255.35948181]
[118.10605621 240.37246704]
[117.48207855 225.38545227]
[116.85810089 210.39843750]
[116.23412323 195.41140747]
[115.61014557 180.42439270]
[114.98616791 165.43737793]
[114.36219025 150.45036316]
[113.73821259 135.46334839]
[113.11423492 120.47633362]
[101.64530945 123.17560577]
[90.80801392 120.15481567]
[83.15213013 112.65280914]
[80.22284698 102.89561462]
[65.65013885 99.34085083]
[54.20161057 105.37284851]
[42.10653305 102.06708527]
[35.73996353 91.73393250]
[21.24436760 87.87677002]
[6.74877119 84.01961517]
[-7.74682570 80.16245270]
[-22.24242210 76.30529022]
[-31.40675926 77.12186432]
[-36.99783707 72.21417236]
[-51.41005325 68.05628204]
[-65.82227325 63.89839554]
[-80.23448944 59.74050903]
[-94.64670563 55.58262253]
[-109.05892181 51.42473602]
[-122.77114868 59.28287125]
[-138.00160217 55.06283188]
[-145.71432495 41.26828766]
[-141.33349609 26.08329964]
[-127.45818329 18.51685143]
[-112.32035828 23.05798149]
[-104.90103149 37.01251984]
[-90.48881531 41.17040634]
[-76.07659912 45.32829285]
[-61.66438293 49.48617935]
[-47.25216675 53.64406967]
[-32.83995056 57.80195618]
[-18.38526344 61.80969620]
[-3.88966608 65.66685486]
[10.60593033 69.52401733]
[25.10152626 73.38117218]
[39.59712219 77.23833466]
[56.23358154 71.74031067]
[69.20490265 84.76815033]
[83.77760315 88.32291412]
[92.37854767 80.35674286]
[104.54563904 78.31944275]
[116.39690399 83.53922272]
[123.77887726 94.91782379]
[134.87019348 84.81917572]
[145.96150208 74.72052765]
[157.05282593 64.62187195]
[168.14413452 54.52322388]
[179.23545837 44.42457581]
[171.23286438 30.07020569]
[166.84887695 14.23972034]
[166.32785034 -2.17022681]
[169.69544983 -18.23109818]
[176.75738525 -33.03501129]
[187.11067200 -45.74605560]
[200.16662598 -55.64750290]
[215.18423462 -62.18220520]
[231.31236267 -64.98396301]
[247.63786316 -63.89801788]
[263.23736572 -58.98963165]
[277.22946167 -50.54014206]
[287.66925049 -61.31095123]
[298.10906982 -72.08175659]
[290.82434082 -85.32653809]
[287.76885986 -100.13043213]
[289.21429443 -115.17710114]
[295.03213501 -129.12858582]
[304.70504761 -140.74435425]
[317.37295532 -148.99151611]
[331.90939331 -153.13676453]
[347.02185059 -152.81147766]
[361.36645508 -148.04460144]
[373.66778564 -139.25999451]
[382.83193970 -127.23879242]
[388.04406738 -113.04988861]
[388.84075928 -97.95496368]
[385.15112305 -83.29624939]
[377.30322266 -70.37718201]
[365.99493408 -60.34652710]
[352.23178101 -54.09619141]
[337.23754883 -52.18196106]
[322.34552002 -54.77404022]
[308.87988281 -61.64194489]
[298.44006348 -50.87113571]
[288.00024414 -40.10033035]
[295.64404297 -28.78403664]
[300.90118408 -16.17467499]
[303.56210327 -2.76941752]
[303.51959229 10.90272331]
[300.77319336 24.30176926]
[295.42929077 36.89810944]
[287.69696045 48.19342041]
[277.87982178 57.74039841]
[266.36407471 65.16046143]
[253.60342407 70.15876007]
[240.10101318 72.53590393]
[226.38977051 72.19589233]
[213.01123047 69.15003204]
[200.49426270 63.51651382]
[189.33410645 55.51589203]
[178.24278259 65.61454010]
[167.15147400 75.71318817]
[156.06015015 85.81183624]
[144.96884155 95.91049194]
[133.87751770 106.00914001]
[128.10125732 119.85235596]
[128.72523499 134.83937073]
[129.34921265 149.82638550]
[129.97319031 164.81340027]
[130.59716797 179.80041504]
[131.22114563 194.78742981]
[131.84512329 209.77445984]
[132.46910095 224.76147461]
[133.09307861 239.74848938]
[133.71705627 254.73550415]
[134.34103394 269.72250366]
[134.96499634 284.70953369]
[135.58897400 299.69656372]
[136.21295166 314.68356323]
[150.83419800 318.51904297]
[163.67443848 326.49523926]
[173.59194946 337.90286255]
[179.70487976 351.72763062]
[181.46965027 366.74017334]
[178.72933960 381.60565186]
[171.72764587 395.00219727]
[161.08711243 405.73861694]
[147.75392151 412.86022949]
[132.91363525 415.73379517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[26 61]
[27 60]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[65 126]
[66 125]
[67 124]
[68 123]
[69 122]
[70 121]
[82 106]
[83 105]
[84 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
