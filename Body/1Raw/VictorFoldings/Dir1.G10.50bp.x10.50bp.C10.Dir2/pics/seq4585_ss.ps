%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACACCCCGGGGGGGGGGAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAxxxxxxxxxxCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCCCCCCCCCCCAUCACACACC\
) } def
/len { sequence length } bind def

/coor [
[83.24028015 357.75451660]
[70.02008820 350.48205566]
[59.13328171 340.03506470]
[51.32215118 327.12582397]
[47.11927032 312.63449097]
[46.81119919 297.54916382]
[50.41893768 282.89831543]
[57.69651413 269.68093872]
[68.14772034 258.79818726]
[81.05998230 250.99203491]
[95.55291748 246.79473877]
[95.24085999 231.79798889]
[94.92880249 216.80123901]
[94.61675262 201.80447388]
[94.30469513 186.80772400]
[93.99263763 171.81097412]
[93.68058014 156.81422424]
[93.36852264 141.81745911]
[93.05646515 126.82070923]
[92.74441528 111.82395935]
[90.87680054 96.94068146]
[87.47382355 82.33178711]
[84.07084656 67.72289276]
[80.66786194 53.11400223]
[71.04744720 47.86682129]
[66.03850555 38.36870956]
[67.09804535 27.90465164]
[73.62991333 19.94434357]
[70.83759308 5.20653725]
[68.04526520 -9.53126907]
[65.25294495 -24.26907539]
[55.02512741 -32.19660187]
[53.03108978 -44.57572937]
[59.80475235 -54.64671707]
[57.31963348 -69.43942261]
[42.72169876 -73.75933838]
[31.49275589 -83.94746399]
[25.82401085 -97.94337463]
[26.79017830 -112.95095825]
[34.14617538 -125.99697876]
[46.38631821 -134.52014160]
[43.90119934 -149.31285095]
[41.41608047 -164.10556030]
[38.93096161 -178.89826965]
[36.44584656 -193.69097900]
[33.96072769 -208.48368835]
[30.70989990 -223.12718201]
[26.70215988 -237.58187866]
[22.54427338 -251.99409485]
[18.23668861 -266.36227417]
[11.19155312 -279.60485840]
[1.68319464 -291.20620728]
[-7.82516384 -302.80752563]
[-17.33352280 -314.40887451]
[-26.84188080 -326.01022339]
[-42.47946548 -326.01004028]
[-54.42537689 -336.10107422]
[-57.03911972 -351.51867676]
[-49.08656693 -364.98312378]
[-34.32266998 -370.13687134]
[-19.71849060 -364.54653931]
[-12.16967297 -350.85168457]
[-15.24053955 -335.51858521]
[-5.73218107 -323.91723633]
[3.77617741 -312.31588745]
[13.28453636 -300.71456909]
[22.79289436 -289.11322021]
[20.74546814 -303.97283936]
[23.08658791 -318.78900146]
[29.61583710 -332.29339600]
[39.77428055 -343.32998657]
[52.69229889 -350.95394897]
[67.26404572 -354.51263428]
[82.24208832 -353.70141602]
[96.34424591 -348.58975220]
[108.36328125 -339.61517334]
[117.27030182 -327.54598999]
[122.30283356 -313.41540527]
[123.03004456 -298.43304443]
[119.38970184 -283.88150024]
[111.69342041 -271.00643921]
[100.60005188 -260.91003418]
[87.05924988 -254.45660400]
[72.23017883 -252.19860840]
[57.38227844 -254.32933044]
[43.78662109 -260.66635132]
[32.60487366 -270.66986084]
[36.91245651 -256.30166626]
[41.87804794 -250.76194763]
[41.15684891 -241.58961487]
[45.16458893 -227.13491821]
[54.99545288 -238.46427917]
[69.98986816 -238.05502319]
[79.18813324 -226.20631409]
[75.86705780 -211.57859802]
[62.45408249 -204.86352539]
[48.75343323 -210.96879578]
[51.23855209 -196.17608643]
[53.72367096 -181.38339233]
[56.20878983 -166.59068298]
[58.69390869 -151.79797363]
[61.17902756 -137.00526428]
[75.53234863 -132.94970703]
[86.74758148 -123.02357483]
[92.56473541 -109.15556335]
[91.78062439 -94.07559967]
[84.49728394 -80.77748108]
[72.11234283 -71.92454529]
[74.59745789 -57.13183594]
[86.48534393 -44.26023865]
[79.99074554 -27.06139946]
[82.78307343 -12.32359314]
[85.57540131 2.41421270]
[88.36772156 17.15201950]
[102.04412079 30.76766014]
[95.27675629 49.71102524]
[98.67973328 64.31991577]
[102.08271027 78.92881012]
[105.48569489 93.53770447]
[115.53208923 89.35434723]
[127.56365967 90.41188812]
[140.80624390 97.45702362]
[154.04882812 104.50215912]
[170.87205505 106.60346985]
[173.50999451 123.35093689]
[158.14727783 130.52194214]
[147.00369263 117.74474335]
[133.76110840 110.69961548]
[120.51852417 103.65447998]
[107.74116516 111.51190186]
[108.05322266 126.50865936]
[108.36528015 141.50541687]
[108.67733765 156.50216675]
[108.98938751 171.49891663]
[109.30144501 186.49566650]
[109.61350250 201.49243164]
[109.92556000 216.48918152]
[110.23761749 231.48593140]
[110.54967499 246.48268127]
[125.20466614 250.07345581]
[138.43048096 257.33572388]
[149.32534790 267.77429199]
[157.14643860 280.67752075]
[161.36050415 295.16558838]
[161.68023682 310.25067139]
[158.08380127 324.90429688]
[150.81643677 338.12728882]
[140.37364197 349.01812744]
[127.46740723 356.83422852]
[112.97772217 361.04272461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 119]
[22 118]
[23 117]
[24 116]
[28 114]
[29 113]
[30 112]
[31 111]
[34 109]
[35 108]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[47 91]
[48 90]
[49 88]
[50 87]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
