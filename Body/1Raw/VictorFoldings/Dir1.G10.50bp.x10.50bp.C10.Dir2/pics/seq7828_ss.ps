%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCACAUUAGGGGGGGGGGGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACxxxxxxxxxxCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCCCUCCCCACAUCA\
) } def
/len { sequence length } bind def

/coor [
[107.53002167 627.73321533]
[94.61086273 619.97485352]
[83.82956696 609.44580078]
[75.76754761 596.71392822]
[70.85958862 582.46582031]
[69.37036133 567.46984863]
[71.38018799 552.53479004]
[76.78067017 538.46594238]
[85.28057861 526.02215576]
[96.42150879 515.87445068]
[109.60266113 508.57003784]
[124.11317444 504.50289917]
[123.49735260 489.51556396]
[122.88152313 474.52819824]
[122.26570129 459.54083252]
[121.64987183 444.55349731]
[121.03404999 429.56613159]
[120.41822052 414.57879639]
[119.80239868 399.59143066]
[119.18656921 384.60409546]
[118.57074738 369.61672974]
[117.95492554 354.62936401]
[117.33909607 339.64202881]
[102.15195465 337.14434814]
[87.80523682 331.55569458]
[74.92097473 323.11587524]
[64.05829620 312.18835449]
[55.68918610 299.24462891]
[50.17796707 284.84384155]
[47.76543808 269.60870361]
[48.55836105 254.19845581]
[52.52473831 239.28048706]
[59.49508667 225.50128174]
[69.16969299 213.45851135]
[81.13148499 203.67506409]
[94.86402893 196.57632446]
[109.77381134 192.47174072]
[108.85039520 177.50019836]
[106.70182037 162.65487671]
[103.34255981 148.03585815]
[99.98329926 133.41685486]
[96.62403870 118.79785156]
[84.40015411 111.01821136]
[81.15521240 96.89672089]
[88.75695038 84.56140900]
[85.24777985 69.97766113]
[81.58908081 55.43070602]
[68.46887207 42.55084229]
[73.85158539 25.87538338]
[69.89497375 11.40661621]
[65.93836212 -3.06215096]
[61.98175430 -17.53091812]
[58.02514267 -31.99968529]
[54.06853104 -46.46845245]
[39.06641769 -45.31386566]
[24.11693573 -47.01958084]
[9.76049805 -51.52393341]
[-3.48391747 -58.66409683]
[-15.13753414 -68.18196106]
[-24.77908134 -79.73345947]
[-32.06002045 -92.90100861]
[-36.71715546 -107.20861053]
[-38.58213043 -122.13906860]
[-37.58752823 -137.15263367]
[-33.76929855 -151.70658875]
[-27.26547623 -165.27481079]
[-18.31116676 -177.36683655]
[-7.23006105 -187.54551697]
[5.57726383 -195.44291687]
[19.64783287 -200.77354431]
[34.47299957 -203.34471130]
[49.51684952 -203.06344604]
[64.23554993 -199.93995667]
[78.09703827 -194.08711243]
[90.60022736 -185.71652222]
[101.29312897 -175.13075256]
[109.78919983 -162.71249390]
[115.78132629 -148.91064453]
[119.05287933 -134.22415161]
[119.48561096 -119.18389130]
[117.06386566 -104.33358002]
[111.87519836 -90.21005249]
[104.10716248 -77.32384491]
[94.04058075 -66.14080811]
[82.03934479 -57.06518555]
[68.53730011 -50.42506409]
[72.49391174 -35.95629501]
[76.45052338 -21.48752975]
[80.40713501 -7.01876116]
[84.36373901 7.45000648]
[88.32035065 21.91877365]
[98.69566345 28.21282387]
[102.08560944 40.28260422]
[96.13603210 51.77199936]
[99.79473877 66.31895447]
[104.50534821 72.07415771]
[103.37596130 81.20214844]
[115.59984589 88.98178864]
[118.84478760 103.10327911]
[111.24304962 115.43859100]
[114.60231018 130.05760193]
[117.96157074 144.67660522]
[121.32082367 159.29560852]
[128.86303711 146.32969666]
[142.52127075 140.12866211]
[157.24685669 142.98466492]
[167.59663391 153.84202576]
[169.74488831 168.68739319]
[162.89753723 182.03332520]
[149.58564758 188.94659424]
[134.72982788 186.87178040]
[123.82194519 176.57678223]
[124.74536133 191.54832458]
[139.24198914 193.58882141]
[153.05270386 198.42970276]
[165.64227295 205.88133240]
[176.52322388 215.65289307]
[185.27467346 227.36378479]
[191.55862427 240.55844116]
[195.13301086 254.72409058]
[195.86103821 269.31057739]
[193.71643066 283.75189209]
[188.78430176 297.48794556]
[181.25787354 309.98645020]
[171.43086243 320.76345825]
[159.68597412 329.40216064]
[146.48010254 335.56890869]
[132.32644653 339.02618408]
[132.94227600 354.01354980]
[133.55810547 369.00091553]
[134.17391968 383.98825073]
[134.78974915 398.97561646]
[135.40557861 413.96295166]
[136.02140808 428.95031738]
[136.63722229 443.93768311]
[137.25305176 458.92501831]
[137.86888123 473.91238403]
[138.48471069 488.89971924]
[139.10052490 503.88708496]
[153.89579773 506.75006104]
[167.63177490 512.94842529]
[179.56768799 522.14794922]
[189.05982971 533.85241699]
[195.59632874 547.43078613]
[198.82466125 562.15063477]
[198.57073975 577.21820068]
[194.84825134 591.82098389]
[187.85795593 605.17132568]
[177.97680664 616.54937744]
[165.73770142 625.34149170]
[151.80067444 631.07348633]
[136.91734314 633.43627930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[37 113]
[38 112]
[39 103]
[40 102]
[41 101]
[42 100]
[45 97]
[46 95]
[47 94]
[49 91]
[50 90]
[51 89]
[52 88]
[53 87]
[54 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
