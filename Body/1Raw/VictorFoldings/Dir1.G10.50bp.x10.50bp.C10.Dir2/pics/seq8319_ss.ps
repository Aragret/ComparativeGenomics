%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUCACCAGGGGGGGGGGCCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACxxxxxxxxxxUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCCCCCCCCCCCACUACUCACCA\
) } def
/len { sequence length } bind def

/coor [
[68.95997620 485.99160767]
[55.47109985 479.26007080]
[43.98559952 469.49551392]
[35.17123032 457.26562500]
[29.54044724 443.28143311]
[27.42061806 428.35595703]
[28.93498802 413.35693359]
[33.99551010 399.15643311]
[42.30797577 386.58001709]
[53.38910675 376.35885620]
[66.59465790 369.08721924]
[81.15688324 365.18786621]
[80.84890747 350.19100952]
[80.54093170 335.19418335]
[80.23295593 320.19732666]
[79.92497253 305.20050049]
[79.61699677 290.20367432]
[79.30902100 275.20681763]
[79.00104523 260.20999146]
[78.69306183 245.21315002]
[78.38508606 230.21630859]
[78.07711029 215.21946716]
[66.66619873 224.95555115]
[51.69922638 223.96069336]
[41.67732239 212.79998779]
[42.29285431 197.81262207]
[53.19620132 187.51130676]
[68.19435120 187.74713135]
[78.76875305 198.38685608]
[80.30604553 183.46583557]
[81.84333801 168.54481506]
[75.45114899 155.09159851]
[84.56203461 142.15705872]
[86.09932709 127.23603821]
[87.63661957 112.31502533]
[80.13661957 99.32463837]
[66.44599915 93.19546509]
[52.75537109 87.06629181]
[39.06474686 80.93711853]
[28.93264389 92.17080688]
[15.82402992 99.72192383]
[1.02315366 102.85070038]
[-14.01994705 101.25060272]
[-27.83150291 95.07839966]
[-39.05839539 84.93877411]
[-46.60073090 71.82510376]
[-49.71958923 57.02212906]
[-48.10941315 41.98010635]
[-41.92795181 28.17268944]
[-31.78080559 16.95259285]
[-18.66208458 9.41904545]
[-3.85702753 6.31010771]
[11.18391514 7.93036270]
[24.98718643 14.12107277]
[36.20048141 24.27573776]
[43.72523499 37.39950180]
[46.82425308 52.20663834]
[45.19392014 67.24649048]
[58.88454437 73.37566376]
[72.57517242 79.50484467]
[86.26579285 85.63401794]
[92.34246063 81.23809052]
[104.49579620 72.44625092]
[110.57246399 68.05033112]
[109.03517151 53.12931442]
[107.49787903 38.20829773]
[92.84993744 34.23310089]
[80.62945557 25.23174477]
[72.48917389 12.42158699]
[69.52997589 -2.46490431]
[72.15208435 -17.41445160]
[80.00087738 -30.40525436]
[92.01486206 -39.68040848]
[106.56925964 -43.98553085]
[121.69569397 -42.73838425]
[135.34844971 -36.10763931]
[145.68109131 -24.99004745]
[151.29623413 -10.88917255]
[151.43444824 4.28795958]
[146.07705688 18.48876572]
[135.94862366 29.79270172]
[122.41889191 36.67100525]
[123.95618439 51.59202194]
[125.49347687 66.51303864]
[132.27442932 69.71752167]
[145.83631897 76.12650299]
[152.61727905 79.33098602]
[165.12130737 71.04551697]
[177.62535095 62.76004028]
[190.12937927 54.47456360]
[193.27133179 37.29564285]
[207.56718445 27.86376953]
[223.93954468 31.58519173]
[236.27082825 23.04473305]
[248.60211182 14.50427341]
[260.93338013 5.96381474]
[262.19598389 -9.62271309]
[273.21875000 -20.71472549]
[288.79705811 -22.07491112]
[301.57534790 -13.06103420]
[305.52005005 2.07082915]
[298.76861572 16.17587662]
[284.50888062 22.59413528]
[269.47384644 18.29509926]
[257.14257812 26.83555794]
[244.81127930 35.37601471]
[232.47999573 43.91647720]
[231.96391296 56.82716751]
[223.97152710 67.22670746]
[211.25605774 71.16346741]
[198.41485596 66.97859955]
[185.91081238 75.26407623]
[173.40678406 83.54955292]
[160.90274048 91.83502197]
[168.87854004 104.53882599]
[170.64422607 119.43454742]
[165.85942078 133.65093994]
[155.44645691 144.44769287]
[141.41247559 149.74368286]
[126.46263885 148.51808167]
[113.47859955 141.00709534]
[104.96311951 128.65855408]
[102.55764008 113.85231781]
[101.02034760 128.77333069]
[99.48305511 143.69435120]
[105.76528931 158.21481323]
[96.76435852 170.08210754]
[95.22706604 185.00312805]
[93.68977356 199.92414856]
[93.07394409 214.91149902]
[93.38192749 229.90834045]
[93.68990326 244.90516663]
[93.99787903 259.90200806]
[94.30585480 274.89883423]
[94.61383820 289.89569092]
[94.92181396 304.89251709]
[95.22978973 319.88937378]
[95.53776550 334.88619995]
[95.84574890 349.88302612]
[96.15372467 364.87988281]
[110.86376190 368.17810059]
[124.35671997 374.90145874]
[135.84812927 384.65905762]
[144.66992188 396.88360596]
[150.30917358 410.86437988]
[152.43804932 425.78857422]
[150.93278503 440.78848267]
[145.88085938 454.99206543]
[137.57601929 467.57351685]
[126.50109100 477.80139160]
[113.29994965 485.08102417]
[98.74008942 488.98922729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[29 129]
[30 128]
[31 127]
[33 125]
[34 124]
[35 123]
[36 61]
[37 60]
[38 59]
[39 58]
[64 84]
[65 83]
[66 82]
[87 114]
[88 113]
[89 112]
[90 111]
[93 107]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
