%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAAACUCGGGGGGGGGGAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUAxxxxxxxxxxCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCCCCCCCCCCCAUAUAACCUC\
) } def
/len { sequence length } bind def

/coor [
[81.14606476 367.81884766]
[69.26178741 358.54376221]
[59.94308472 346.69363403]
[53.73171616 332.95748901]
[50.98881531 318.13385010]
[51.87384415 303.08459473]
[56.33535004 288.68463135]
[64.11395264 275.77120972]
[74.75740051 265.09506226]
[87.64691162 257.27685547]
[102.03309631 252.77119446]
[101.09746552 237.80039978]
[100.16184235 222.82962036]
[99.22621155 207.85882568]
[98.29058075 192.88803101]
[97.35495758 177.91723633]
[96.41932678 162.94644165]
[95.48369598 147.97566223]
[94.54807281 133.00486755]
[93.61244202 118.03407288]
[90.66478729 116.69977570]
[87.98413086 114.88783264]
[84.91363525 130.22100830]
[72.67328644 139.95280457]
[57.04261017 139.48817444]
[45.40192413 129.04650879]
[43.24761200 113.55802155]
[51.59687042 100.33592987]
[66.50743866 95.62327576]
[80.93899536 101.64524841]
[84.35985565 88.98116302]
[95.13362885 81.49737549]
[97.31046295 66.65616608]
[99.48730469 51.81496429]
[101.66413879 36.97375870]
[103.84098053 22.13255310]
[101.98336792 13.12138557]
[106.22058105 7.00651312]
[108.70569611 -7.78619432]
[111.19081879 -22.57890129]
[113.67593384 -37.37160873]
[99.12313080 -41.04067993]
[84.91275024 -45.86887741]
[71.13696289 -51.82489014]
[57.88511276 -58.87008286]
[45.24314117 -66.95877075]
[33.29303360 -76.03849030]
[22.11230087 -86.05035400]
[11.77344894 -96.92944336]
[2.34353137 -108.60518646]
[-6.11629343 -121.00186157]
[-13.55115986 -134.03907776]
[-19.91284943 -147.63229370]
[-25.16010475 -161.69331360]
[-29.25889206 -176.13098145]
[-32.18263245 -190.85165405]
[-33.91235733 -205.75985718]
[-34.43685913 -220.75889587]
[-33.75272369 -235.75151062]
[-31.86440086 -250.64044189]
[-28.78412819 -265.32916260]
[-24.53188515 -279.72238159]
[-19.13525009 -293.72674561]
[-12.62922382 -307.25146484]
[-5.05599880 -320.20880127]
[3.53530765 -332.51473999]
[13.08897686 -344.08944702]
[23.54304886 -354.85784912]
[34.82972717 -364.75012207]
[46.87580490 -373.70211792]
[59.60316467 -381.65579224]
[72.92926025 -388.55950928]
[86.76766968 -394.36853027]
[101.02863312 -399.04519653]
[115.61967468 -402.55914307]
[130.44615173 -404.88760376]
[145.41192627 -406.01547241]
[160.41992188 -405.93542480]
[175.37280273 -404.64797974]
[190.17361450 -402.16149902]
[204.72633362 -398.49212646]
[218.93661499 -393.66360474]
[232.71226501 -387.70730591]
[245.96395874 -380.66180420]
[258.60574341 -372.57284546]
[270.55566406 -363.49285889]
[281.73617554 -353.48074341]
[292.07479858 -342.60144043]
[301.50445557 -330.92547607]
[309.96398926 -318.52862549]
[317.39859009 -305.49124146]
[323.75997925 -291.89788818]
[329.00689697 -277.83673096]
[333.10537720 -263.39898682]
[336.02880859 -248.67825317]
[337.75817871 -233.77001953]
[338.28234863 -218.77096558]
[337.59790039 -203.77836609]
[335.70925903 -188.88946533]
[332.62866211 -174.20082092]
[328.37609863 -159.80769348]
[322.97915649 -145.80343628]
[316.47280884 -132.27886963]
[308.89932251 -119.32169342]
[300.30773926 -107.01596069]
[290.75381470 -95.44146729]
[280.29949951 -84.67328644]
[269.01260376 -74.78125763]
[256.96633911 -65.82952118]
[244.23880005 -57.87614822]
[230.91255188 -50.97270966]
[217.07400513 -45.16398239]
[202.81294250 -40.48764038]
[188.22181702 -36.97401047]
[173.39529419 -34.64587784]
[158.42948914 -33.51834488]
[143.42149353 -33.59872437]
[128.46864319 -34.88648987]
[125.98352051 -20.09378242]
[123.49840546 -5.30107594]
[121.01329041 9.49163151]
[118.68218231 24.30938911]
[116.50534821 39.15059662]
[114.32850647 53.99180222]
[112.15167236 68.83300781]
[109.97483826 83.67420959]
[119.11531830 100.79586029]
[108.58323669 117.09844208]
[109.51885986 132.06922913]
[110.45449066 147.04002380]
[111.39012146 162.01081848]
[112.32574463 176.98161316]
[113.26137543 191.95240784]
[114.19700623 206.92318726]
[115.13262939 221.89398193]
[116.06826019 236.86477661]
[117.00389099 251.83557129]
[131.83912659 254.51498413]
[145.60176086 260.66748047]
[157.49165344 269.93539429]
[166.81753540 281.77984619]
[173.03723145 295.51223755]
[175.78912354 310.33419800]
[174.91322327 325.38400269]
[170.46043396 339.78665161]
[162.68966675 352.70480347]
[152.05268860 363.38742065]
[139.16792297 371.21340942]
[124.78447723 375.72778320]
[109.73857117 376.66812134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[22 30]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[38 121]
[39 120]
[40 119]
[41 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
