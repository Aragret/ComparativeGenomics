%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUAACAAGGGGGGGGGGAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAAxxxxxxxxxxUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCCCCCCCCCCCAUCACAACAA\
) } def
/len { sequence length } bind def

/coor [
[22.84915352 517.41259766]
[8.82720947 511.85961914]
[-3.37274814 502.99328613]
[-12.98381901 491.37097168]
[-19.40184402 477.72326660]
[-22.22338104 462.90808105]
[-21.27106476 447.85671997]
[-16.60476112 433.51528931]
[-8.51779366 420.78533936]
[2.48148060 410.46707153]
[15.70163918 403.20907593]
[30.31165314 399.46765137]
[30.31165314 384.46765137]
[30.31165314 369.46765137]
[30.31165314 354.46765137]
[30.31165314 339.46765137]
[30.31165314 324.46765137]
[30.31165314 309.46765137]
[30.31165314 294.46765137]
[30.31165314 279.46765137]
[30.31165314 264.46765137]
[30.31165314 249.46765137]
[30.31165314 234.46765137]
[30.31165314 219.46765137]
[22.49127007 232.26771545]
[12.14590263 243.12925720]
[-0.25852352 251.56314087]
[-14.16334820 257.18948364]
[-28.94233704 259.75491333]
[-43.92988968 259.14392090]
[-58.45100021 255.38395691]
[-71.85169220 248.64440918]
[-83.52841949 239.22879028]
[-92.95531464 227.56114197]
[-99.70780182 214.16697693]
[-103.48177338 199.64949036]
[-104.10726166 184.66255188]
[-101.55609131 169.88108826]
[-95.94316864 155.97084045]
[-87.52127838 143.55827332]
[-76.66971588 133.20242310]
[-63.87721252 125.36968231]
[-49.71989822 120.41281891]
[-34.83538437 118.55507660]
[-19.89402199 119.88012695]
[-5.56873274 124.32827759]
[7.49531460 131.69921875]
[18.70975304 141.66096497]
[27.56951523 153.76486206]
[33.67558289 167.46582031]
[36.75295258 182.14674377]
[36.66334152 197.14378357]
[44.55982208 184.39051819]
[44.12586594 166.87321472]
[60.35942841 158.24174500]
[67.99240112 145.32905579]
[75.62536621 132.41635132]
[83.25833893 119.50365448]
[90.89130402 106.59095764]
[83.75666809 99.97634888]
[82.82583618 87.49658966]
[91.90267944 75.03673553]
[96.44996643 60.74260712]
[85.14427948 70.60066986]
[71.95822144 77.75105286]
[57.52867889 81.84839630]
[42.55257797 82.69480896]
[27.75325394 80.24941254]
[13.84549999 74.63030243]
[1.50104702 66.10888672]
[-8.68387794 55.09674835]
[-16.21735382 42.12575150]
[-20.73551750 27.82238770]
[-22.02014732 12.87749767]
[-20.00919914 -1.98709369]
[-14.79979610 -16.05344009]
[-6.64354992 -28.64215279]
[4.06560087 -39.14520264]
[16.81041336 -47.05530930]
[30.97532463 -51.99041367]
[45.87618256 -53.71215820]
[60.79329300 -52.13738632]
[75.00616455 -47.34215927]
[87.82833862 -39.55807495]
[98.64050293 -29.16110420]
[106.92044830 -16.65340805]
[112.26826477 -2.63909745]
[114.42565155 12.20494843]
[113.28840637 27.16177559]
[108.90966797 41.51316071]
[120.09796143 31.52206421]
[131.28625488 21.53096771]
[142.47456360 11.53987026]
[153.66285706 1.54877281]
[164.85115051 -8.44232368]
[172.63804626 -23.50222778]
[189.26501465 -20.18864822]
[190.68374634 -3.29416537]
[174.84223938 2.74597239]
[163.65394592 12.73706913]
[152.46565247 22.72816658]
[141.27735901 32.71926498]
[130.08906555 42.71036148]
[118.90076447 52.70145798]
[110.74409485 65.28989410]
[106.19680786 79.58403015]
[115.48019409 91.36616516]
[130.44146729 90.28909302]
[145.40275574 89.21202087]
[154.42109680 76.43690491]
[169.55433655 72.49748230]
[183.65701294 79.25382233]
[190.07029724 93.51579285]
[185.76602173 108.54933167]
[172.77651978 117.25605011]
[157.23506165 115.52490997]
[146.47982788 104.17330170]
[131.51853943 105.25037384]
[116.55726624 106.32744598]
[103.80400848 114.22393036]
[96.17103577 127.13662720]
[88.53806305 140.04931641]
[80.90509796 152.96202087]
[73.27212524 165.87472534]
[75.72005463 178.57949829]
[69.04715729 189.19287109]
[57.31307983 192.28700256]
[49.41659546 205.04026794]
[45.31165314 219.46765137]
[45.31165314 234.46765137]
[45.31165314 249.46765137]
[45.31165314 264.46765137]
[45.31165314 279.46765137]
[45.31165314 294.46765137]
[45.31165314 309.46765137]
[45.31165314 324.46765137]
[45.31165314 339.46765137]
[45.31165314 354.46765137]
[45.31165314 369.46765137]
[45.31165314 384.46765137]
[45.31165314 399.46765137]
[59.92166519 403.20907593]
[73.14182281 410.46707153]
[84.14109802 420.78533936]
[92.22806549 433.51528931]
[96.89437103 447.85671997]
[97.84668732 462.90808105]
[95.02514648 477.72326660]
[88.60712433 491.37097168]
[78.99605560 502.99328613]
[66.79609680 511.85961914]
[52.77415085 517.41259766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[52 128]
[53 127]
[55 124]
[56 123]
[57 122]
[58 121]
[59 120]
[62 106]
[63 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
