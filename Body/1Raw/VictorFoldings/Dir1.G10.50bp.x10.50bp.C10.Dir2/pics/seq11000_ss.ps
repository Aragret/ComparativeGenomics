%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCUUAAGGGGGGGGGGCAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCxxxxxxxxxxUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCACCCCCCCCCCACAAACUUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 485.24304199]
[71.19830322 479.22702026]
[59.48964310 469.69760132]
[50.78712082 457.36193848]
[45.73651886 443.13540649]
[44.71262741 428.07373047]
[47.79142761 413.29458618]
[54.74444962 399.89465332]
[65.05573273 388.86831665]
[77.96011353 381.03381348]
[92.50000000 376.97250366]
[92.50000000 361.97250366]
[92.50000000 346.97250366]
[92.50000000 331.97250366]
[92.50000000 316.97250366]
[92.50000000 301.97250366]
[92.50000000 286.97250366]
[92.50000000 271.97250366]
[92.50000000 256.97250366]
[92.50000000 241.97248840]
[78.13413239 237.80125427]
[65.51298523 229.74284363]
[55.66399765 218.44314575]
[49.39180374 204.81228638]
[47.21248627 189.95138550]
[49.31111145 175.06353760]
[55.52607346 161.35652161]
[65.36148071 149.94468689]
[78.02671051 141.75846863]
[92.50000000 137.46849060]
[92.50000000 122.46848297]
[82.82074738 116.30816650]
[77.17197418 106.32173157]
[62.19226456 105.54188538]
[47.21254730 104.76203918]
[32.23283386 103.98219299]
[19.39971733 113.60979462]
[3.90806651 109.43986511]
[-2.35825038 94.67121887]
[5.40774918 80.63310242]
[21.24865532 78.09435272]
[33.01268005 89.00247955]
[47.99239349 89.78232574]
[62.97210693 90.56217194]
[77.95182037 91.34201050]
[86.15688324 80.77889252]
[98.77584839 76.34446716]
[102.78358459 61.88977814]
[106.79132843 47.43508911]
[110.79906464 32.98040009]
[107.03022003 17.61464882]
[117.88674164 7.41733742]
[121.89447784 -7.03735113]
[125.90222168 -21.49203873]
[111.96151733 -27.07056046]
[98.71911621 -34.14884567]
[86.33577728 -42.64096451]
[74.96182251 -52.44383240]
[64.73531342 -63.43845749]
[55.78039551 -75.49136353]
[48.20577240 -88.45625305]
[42.10339355 -102.17573547]
[37.54733658 -116.48326874]
[34.59291077 -131.20516968]
[33.27597427 -146.16275024]
[33.61251450 -161.17440796]
[35.59844971 -176.05792236]
[39.20967102 -190.63264465]
[44.40233994 -204.72161865]
[51.11342239 -218.15383911]
[59.26145554 -230.76625061]
[68.74752045 -242.40573120]
[79.45648193 -252.93101501]
[91.25832367 -262.21432495]
[104.00979614 -270.14294434]
[117.55610657 -276.62066650]
[131.73280334 -281.56881714]
[146.36781311 -284.92736816]
[161.28346252 -286.65554810]
[176.29869080 -286.73233032]
[191.23124695 -285.15686035]
[205.89984131 -281.94818115]
[220.12641907 -277.14532471]
[233.73828125 -270.80651855]
[246.57019043 -263.00872803]
[258.46640015 -253.84666443]
[269.28244019 -243.43148804]
[278.88708496 -231.88964844]
[287.16372681 -219.36125183]
[294.01187134 -205.99839783]
[299.34838867 -191.96327209]
[303.10852051 -177.42626953]
[305.24661255 -162.56382751]
[305.73669434 -147.55639648]
[304.57284546 -132.58615112]
[301.76919556 -117.83478546]
[297.35974121 -103.48139191]
[291.39801025 -89.70020294]
[283.95642090 -76.65850830]
[275.12527466 -64.51461792]
[265.01177979 -53.41595459]
[253.73869324 -43.49724197]
[241.44287109 -34.87888718]
[228.27357483 -27.66550636]
[214.39067078 -21.94466400]
[199.96267700 -17.78580666]
[185.16473389 -15.23941898]
[170.17648315 -14.33641148]
[155.17985535 -15.08774471]
[140.35690308 -17.48429871]
[136.34916687 -3.02961087]
[132.34143066 11.42507744]
[136.39694214 25.75693321]
[125.25375366 36.98814011]
[121.24601746 51.44282913]
[117.23827362 65.89751434]
[113.23053741 80.35220337]
[123.03118134 94.46395874]
[120.71476746 111.48831177]
[107.50000000 122.46848297]
[107.50000000 137.46849060]
[121.97328949 141.75846863]
[134.63851929 149.94468689]
[144.47392273 161.35652161]
[150.68888855 175.06353760]
[152.78752136 189.95138550]
[150.60820007 204.81228638]
[144.33599854 218.44314575]
[134.48701477 229.74284363]
[121.86586761 237.80125427]
[107.50000000 241.97248840]
[107.50000000 256.97250366]
[107.50000000 271.97250366]
[107.50000000 286.97250366]
[107.50000000 301.97250366]
[107.50000000 316.97250366]
[107.50000000 331.97250366]
[107.50000000 346.97250366]
[107.50000000 361.97250366]
[107.50000000 376.97250366]
[122.03988647 381.03381348]
[134.94427490 388.86831665]
[145.25555420 399.89465332]
[152.20857239 413.29458618]
[155.28736877 428.07373047]
[154.26348877 443.13540649]
[149.21287537 457.36193848]
[140.51036072 469.69760132]
[128.80169678 479.22702026]
[114.95575714 485.24304199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 121]
[31 120]
[33 45]
[34 44]
[35 43]
[36 42]
[47 117]
[48 116]
[49 115]
[50 114]
[52 112]
[53 111]
[54 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
