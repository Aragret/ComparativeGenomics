%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUUAACAUGGGGGGGGGGAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAxxxxxxxxxxCCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCACCCCCCCCCCGGCUUCAACAU\
) } def
/len { sequence length } bind def

/coor [
[79.00627899 484.80081177]
[64.98432922 479.24780273]
[52.78437424 470.38146973]
[43.17330551 458.75918579]
[36.75527954 445.11148071]
[33.93374252 430.29629517]
[34.88605881 415.24490356]
[39.55236435 400.90347290]
[47.63932800 388.17352295]
[58.63860321 377.85525513]
[71.85876465 370.59729004]
[86.46877289 366.85583496]
[86.46877289 351.85583496]
[86.46877289 336.85583496]
[86.46877289 321.85583496]
[86.46877289 306.85583496]
[86.46877289 291.85583496]
[86.46877289 276.85583496]
[86.46877289 261.85583496]
[86.46877289 246.85583496]
[86.46877289 231.85583496]
[84.18990326 229.08926392]
[83.17116547 225.06039429]
[84.00049591 220.38945007]
[86.95915222 215.93954468]
[87.88256836 200.96798706]
[88.80597687 185.99644470]
[89.57563782 171.01620483]
[90.19146729 156.02885437]
[76.80329895 151.93603516]
[64.82032776 144.69709778]
[54.96844482 134.75051880]
[47.84444809 122.69884491]
[43.87989044 109.27214813]
[43.31493759 95.28376770]
[46.18380737 81.58107758]
[32.75635910 74.89500427]
[16.95413780 75.66988373]
[9.00996304 63.07070541]
[-4.41748619 56.38462830]
[-17.84493637 49.69855499]
[-31.27238464 43.01247787]
[-43.76859283 46.36635208]
[-54.83371735 40.47276688]
[-58.76242447 28.99115181]
[-72.04976654 22.03079605]
[-85.33710480 15.07044029]
[-98.62445068 8.11008453]
[-115.46076202 6.11633587]
[-118.20568085 -10.61392879]
[-102.88911438 -17.88297653]
[-91.66409302 -5.17725754]
[-78.37675476 1.78309882]
[-65.08940887 8.74345493]
[-51.80207062 15.70381165]
[-34.36113358 14.01314926]
[-24.58630943 29.58502960]
[-11.15886021 36.27110291]
[2.26858902 42.95718002]
[15.69603825 49.64325714]
[30.53783607 48.39014053]
[39.44243240 61.46755600]
[52.86988068 68.15363312]
[64.39839935 55.63824463]
[79.11292267 47.09282303]
[95.69664764 43.28209686]
[112.66548157 44.54709244]
[128.50086975 50.77460480]
[137.66281128 38.89778137]
[146.82475281 27.02095985]
[132.85079956 32.47338486]
[117.93165588 34.02867126]
[103.13359070 31.57565880]
[89.51425171 25.28966522]
[78.04704285 15.61996365]
[69.55154419 3.25766349]
[64.63494110 -10.91368008]
[63.64862442 -25.88121796]
[66.66310120 -40.57519531]
[73.46291351 -53.94540787]
[83.56206512 -65.03626251]
[96.23876190 -73.05507660]
[110.58697510 -77.42873383]
[125.58120728 -77.84464264]
[140.14979553 -74.27307892]
[153.25151062 -66.96929932]
[163.94993591 -56.45532608]
[171.48045349 -43.48260880]
[175.30482483 -28.97832680]
[175.14971924 -13.97912884]
[171.02624512 0.44296789]
[163.23188782 13.25373936]
[176.51922607 6.29338264]
[189.80656433 -0.66697347]
[203.09390259 -7.62732983]
[216.38124084 -14.58768559]
[229.66859436 -21.54804230]
[242.95593262 -28.50839806]
[256.24325562 -35.46875381]
[259.41171265 -50.78198624]
[271.71398926 -60.43535614]
[287.34136963 -59.87084198]
[298.91510010 -49.35498810]
[300.97036743 -33.85305786]
[292.53677368 -20.68458939]
[277.59640503 -16.06733131]
[263.20361328 -22.18141365]
[249.91629028 -15.22105694]
[236.62893677 -8.26070023]
[223.34159851 -1.30034435]
[210.05426025 5.66001177]
[196.76692200 12.62036800]
[183.47958374 19.58072472]
[170.19223022 26.54108047]
[158.70156860 36.18289566]
[149.53962708 48.05971909]
[140.37770081 59.93654251]
[149.06988525 71.23220062]
[154.68107605 84.33412170]
[156.85896301 98.41967010]
[155.46681213 112.60444641]
[150.59202576 125.99781799]
[142.54067993 137.75883484]
[131.81829834 147.14907837]
[119.09812164 153.57891846]
[105.17881775 156.64466858]
[104.56299591 171.63203430]
[107.35041809 180.39707947]
[103.77752686 186.91986084]
[102.85411835 201.89140320]
[101.93070221 216.86296082]
[101.46877289 231.85583496]
[101.46877289 246.85583496]
[101.46877289 261.85583496]
[101.46877289 276.85583496]
[101.46877289 291.85583496]
[101.46877289 306.85583496]
[101.46877289 321.85583496]
[101.46877289 336.85583496]
[101.46877289 351.85583496]
[101.46877289 366.85583496]
[116.07878876 370.59729004]
[129.29895020 377.85525513]
[140.29821777 388.17352295]
[148.38519287 400.90347290]
[153.05149841 415.24490356]
[154.00381470 430.29629517]
[151.18226624 445.11148071]
[144.76425171 458.75918579]
[135.15318298 470.38146973]
[122.95321655 479.24780273]
[108.93127441 484.80081177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 131]
[26 130]
[27 129]
[28 127]
[29 126]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[42 57]
[45 55]
[46 54]
[47 53]
[48 52]
[68 117]
[69 116]
[70 115]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
