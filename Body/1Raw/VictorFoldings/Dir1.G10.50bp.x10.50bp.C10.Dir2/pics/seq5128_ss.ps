%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCACUAAAGGGGGGGGGGCGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUxxxxxxxxxxACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCCCCCCCCCCCUCCCUCACCAAA\
) } def
/len { sequence length } bind def

/coor [
[83.85646057 438.35412598]
[69.58469391 433.54470825]
[56.68070984 425.77932739]
[45.74805450 415.42117310]
[37.29806900 402.95474243]
[31.72597313 388.96310425]
[29.29238319 374.10067749]
[30.11112404 359.06259155]
[34.14390182 344.55224609]
[41.20209503 331.24826050]
[50.95558167 319.77291870]
[62.94816971 310.66293335]
[76.61894226 304.34439087]
[91.32849884 301.11282349]
[91.32849884 286.11282349]
[91.32849884 271.11282349]
[91.32849884 256.11282349]
[91.32849884 241.11282349]
[91.32849884 226.11282349]
[91.32849884 211.11282349]
[91.32849884 196.11282349]
[91.32849884 181.11282349]
[91.32849884 166.11282349]
[88.16589355 159.38632202]
[91.48157501 150.81343079]
[91.78170776 135.81643677]
[92.08184052 120.81944275]
[75.84221649 105.94324493]
[79.42820740 81.77761841]
[65.55569458 76.07205200]
[51.68318939 70.36647797]
[37.81068039 64.66091156]
[22.10476685 66.56743622]
[13.27720261 54.57062912]
[-0.59530443 48.86505890]
[-9.17905617 61.23976135]
[-20.22262764 71.47956848]
[-33.20949173 79.10553741]
[-47.53222656 83.76100159]
[-62.52093506 85.22820282]
[-77.47457123 83.43852234]
[-91.69371796 78.47566986]
[-104.51332092 70.57176208]
[-115.33379364 60.09648132]
[-123.64903259 47.53977585]
[-129.07012939 33.48894501]
[-131.34352112 18.60117149]
[-130.36286926 3.57278514]
[-126.17405701 -10.89331055]
[-118.97299957 -24.12051010]
[-109.09650421 -35.49015427]
[-97.00650024 -44.47046280]
[-83.26847076 -50.64141083]
[-68.52496338 -53.71437073]
[-53.46556091 -53.54561996]
[-38.79461670 -50.14304352]
[-25.19832230 -43.66579056]
[-13.31259632 -34.41681290]
[-3.69335628 -22.82870293]
[3.20948720 -9.44345570]
[7.07307625 5.11287451]
[7.71670389 20.15946198]
[5.11026621 34.99255371]
[18.98277283 40.69812393]
[33.69643402 38.38349533]
[43.51625061 50.78840256]
[57.38875961 56.49397278]
[71.26126862 62.19954300]
[85.13377380 67.90511322]
[99.77187347 64.63003540]
[109.89034271 53.55680466]
[120.00881958 42.48357391]
[130.12730408 31.41034317]
[120.42440033 19.94378090]
[112.26751709 7.33054972]
[105.79059601 -6.22222948]
[101.09999084 -20.49200821]
[98.27272797 -35.24446106]
[97.35523987 -50.23734665]
[98.36257935 -65.22445679]
[101.27822113 -79.95970154]
[106.05426788 -94.20111084]
[112.61231232 -107.71482086]
[120.84465027 -120.27893066]
[130.61610413 -131.68713379]
[141.76623535 -141.75207520]
[154.11190796 -150.30850220]
[167.45043945 -157.21589661]
[181.56277466 -162.36083984]
[196.21716309 -165.65884399]
[211.17300415 -167.05575562]
[226.18467712 -166.52864075]
[241.00569153 -164.08613586]
[255.39268494 -159.76837158]
[269.10937500 -153.64622498]
[281.93054199 -145.82025146]
[293.64566040 -136.41896057]
[304.06234741 -125.59671021]
[313.00955200 -113.53121948]
[320.34033203 -100.42062378]
[325.93435669 -86.48020172]
[329.69970703 -71.93886566]
[331.57461548 -57.03540802]
[331.52825928 -42.01455307]
[329.56140137 -27.12294960]
[325.70632935 -12.60513973]
[320.02636719 1.30048490]
[312.61477661 14.36558056]
[303.59329224 26.37560654]
[293.10998535 37.13334656]
[281.33706665 46.46215057]
[268.46783447 54.20882797]
[254.71359253 60.24617767]
[240.30023193 64.47505188]
[225.46443176 66.82601929]
[210.44978333 67.26045990]
[195.50285339 65.77125549]
[180.86909485 62.38285446]
[166.78878784 57.15089417]
[153.49316406 50.16128922]
[141.20053101 41.52882004]
[131.08204651 52.60205078]
[120.96357727 63.67528152]
[110.84510040 74.74851227]
[118.23164368 80.44174957]
[123.10626221 88.09246063]
[125.03308105 96.69675446]
[123.95001221 105.19116974]
[120.15667725 112.58377075]
[114.25893402 118.06996918]
[107.07884216 121.11957550]
[106.77870941 136.11657715]
[106.47857666 151.11357117]
[106.32849884 166.11282349]
[106.32849884 181.11282349]
[106.32849884 196.11282349]
[106.32849884 211.11282349]
[106.32849884 226.11282349]
[106.32849884 241.11282349]
[106.32849884 256.11282349]
[106.32849884 271.11282349]
[106.32849884 286.11282349]
[106.32849884 301.11282349]
[121.03806305 304.34439087]
[134.70883179 310.66293335]
[146.70143127 319.77291870]
[156.45491028 331.24826050]
[163.51310730 344.55224609]
[167.54588318 359.06259155]
[168.36462402 374.10067749]
[165.93103027 388.96310425]
[160.35893250 402.95474243]
[151.90895081 415.42117310]
[140.97628784 425.77932739]
[128.07231140 433.54470825]
[113.80053711 438.35412598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 133]
[26 132]
[27 131]
[29 69]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[70 124]
[71 123]
[72 122]
[73 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
