%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCACUUUAGGGGGGGGGGCAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUxxxxxxxxxxUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCCCCCCCCCCCUUUCACUUCA\
) } def
/len { sequence length } bind def

/coor [
[61.19879913 472.37564087]
[48.64057541 464.02447510]
[38.55435181 452.81204224]
[31.57415771 439.44311523]
[28.13877487 424.75814819]
[28.46415138 409.68017578]
[32.52983475 395.15704346]
[40.08025742 382.10171509]
[50.64078522 371.33480835]
[63.54758072 363.53317261]
[77.98931122 359.18722534]
[77.36533356 344.20022583]
[76.74135590 329.21319580]
[76.11737823 314.22619629]
[75.49340057 299.23916626]
[74.86942291 284.25216675]
[74.24544525 269.26513672]
[73.62146759 254.27812195]
[72.99748993 239.29110718]
[72.37351227 224.30409241]
[63.17514801 221.75010681]
[54.85913849 217.06217957]
[47.91205978 210.51460266]
[42.74039078 202.49049377]
[28.24479485 206.34764099]
[13.74919891 210.20480347]
[-0.74639750 214.06196594]
[-15.24199390 217.91912842]
[-22.95002365 231.71629333]
[-38.17904282 235.94151306]
[-51.89394379 228.08804321]
[-55.95792389 212.81520081]
[-47.95988846 199.18409729]
[-32.64493561 195.28182983]
[-19.09915352 203.42352295]
[-4.60355711 199.56637573]
[9.89203930 195.70921326]
[24.38763618 191.85205078]
[38.88323212 187.99488831]
[43.38224030 166.30451965]
[58.92281723 150.33398438]
[80.73880768 145.18428040]
[84.44496918 130.64935303]
[88.15113068 116.11441040]
[75.60094452 95.82814789]
[91.41249847 71.77283478]
[87.40475464 57.31814575]
[83.39701843 42.86346054]
[79.38927460 28.40876961]
[68.24609375 17.17756271]
[72.30160522 2.84570765]
[68.29386139 -11.60898113]
[61.38686371 -24.92413712]
[51.87850571 -36.52547836]
[42.37014771 -48.12681961]
[27.63814354 -53.89558411]
[25.55464935 -68.64374542]
[10.83799648 -77.06137848]
[14.85268497 -93.53312683]
[31.79209137 -94.23516846]
[37.15599060 -78.15210724]
[51.20789337 -73.21315002]
[53.97148895 -57.63517761]
[63.47984695 -46.03383636]
[72.98820496 -34.43249512]
[70.89955902 -49.28636932]
[73.00127411 -64.13839722]
[79.12934113 -77.82952118]
[88.80551910 -89.29125977]
[101.27466583 -97.62915039]
[115.56368256 -102.19247437]
[130.55744934 -102.62512207]
[145.08581543 -98.89332581]
[158.01499939 -91.28831482]
[168.33599854 -80.40359497]
[175.24333191 -67.08861542]
[178.19795227 -52.38248444]
[176.96928406 -37.43289185]
[171.65322876 -23.40650749]
[162.66462708 -11.39796638]
[150.70495605 -2.34442592]
[136.70759583 3.04756927]
[121.76487732 4.35722303]
[107.04295349 1.48232901]
[93.69073486 -5.35275364]
[82.74855042 -15.61672115]
[86.75629425 -1.16203272]
[97.61281586 9.03527832]
[93.84396362 24.40102959]
[97.85170746 38.85571671]
[101.85944366 53.31040573]
[105.86718750 67.76509857]
[106.24179840 52.76977539]
[117.56551361 42.93241882]
[132.46595764 44.65768433]
[141.24214172 56.82232666]
[138.18029785 71.50650024]
[125.27426910 79.14995575]
[139.84696960 75.59519958]
[147.50138855 70.49012756]
[154.75979614 72.12142181]
[169.40330505 68.87059021]
[177.91075134 55.82217789]
[192.80764771 52.73397827]
[205.19488525 60.92493820]
[219.83839417 57.67411423]
[233.99070740 48.33879089]
[246.87895203 59.35375595]
[239.86227417 74.78756714]
[223.08921814 72.31761169]
[208.44570923 75.56844330]
[200.68801880 88.23152924]
[185.88374329 91.73693085]
[172.65412903 83.51409149]
[158.01062012 86.76492310]
[143.40173340 90.16790009]
[128.82902527 93.72266388]
[120.27680206 114.19751740]
[102.68606567 119.82057190]
[98.97990417 134.35551453]
[95.27374268 148.89044189]
[105.47132111 155.85180664]
[113.05289459 165.56268311]
[117.31364441 177.09346008]
[117.86565399 189.34664917]
[114.67315674 201.16137695]
[108.05436707 211.42330933]
[98.64984131 219.16978455]
[87.36052704 223.68011475]
[87.98450470 238.66712952]
[88.60848236 253.65414429]
[89.23246002 268.64117432]
[89.85643768 283.62817383]
[90.48041534 298.61520386]
[91.10439301 313.60220337]
[91.72837067 328.58923340]
[92.35234833 343.57623291]
[92.97632599 358.56326294]
[107.72933197 361.69369507]
[121.23996735 368.39544678]
[132.65893555 378.24725342]
[141.26846313 390.62976074]
[146.52729797 404.76467896]
[148.10490417 419.76339722]
[145.90209961 434.68313599]
[140.05735779 448.58599854]
[130.93807983 460.59805298]
[119.11750793 469.96423340]
[105.33869934 476.09570312]
[90.46779633 478.60711670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[42 121]
[43 120]
[44 119]
[46 92]
[47 91]
[48 90]
[49 89]
[51 87]
[52 86]
[53 65]
[54 64]
[55 63]
[57 61]
[98 117]
[99 116]
[101 115]
[102 114]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
