%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAUUCUCGGGGGGGGGGGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCxxxxxxxxxxCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCCCCCCCCCCCAUUAUCCUC\
) } def
/len { sequence length } bind def

/coor [
[84.43530273 428.63323975]
[69.94561768 424.42474365]
[57.03938293 416.60864258]
[46.59658432 405.71780396]
[39.32921982 392.49478149]
[35.73279190 377.84118652]
[36.05251694 362.75610352]
[40.26658630 348.26803589]
[48.08768463 335.36480713]
[58.98255157 324.92620850]
[72.20835876 317.66397095]
[86.86334991 314.07318115]
[87.17540741 299.07644653]
[87.48746490 284.07968140]
[87.79952240 269.08294678]
[88.11157990 254.08618164]
[88.42362976 239.08943176]
[88.73568726 224.09266663]
[89.04774475 209.09591675]
[89.35980225 194.09916687]
[89.67185974 179.10241699]
[89.98391724 164.10565186]
[86.95907593 157.30889893]
[90.46169281 148.80104065]
[91.08567047 133.81402588]
[91.70964813 118.82701111]
[80.61573792 111.07404327]
[76.08965302 97.16739655]
[81.18616486 82.30089569]
[67.40378571 76.38092804]
[53.62140656 70.46096802]
[39.83902359 64.54100037]
[34.52746201 65.17889404]
[29.97943687 63.81220627]
[26.84055328 61.08290482]
[25.39992142 57.79777527]
[12.01363564 51.02966309]
[-1.37264895 44.26154709]
[-14.75893402 37.49343109]
[-25.24112892 48.38448334]
[-38.46862793 55.70053482]
[-53.26525497 58.79105377]
[-68.31529999 57.38122940]
[-82.28051758 51.59642410]
[-93.91914368 41.95101929]
[-102.19626617 29.30267525]
[-106.37590027 14.77607632]
[-106.08638763 -0.33708319]
[-101.35347748 -14.69295120]
[-92.59800720 -27.01501274]
[-80.59851837 -36.20759964]
[-66.42198944 -41.45331192]
[-51.32899475 -42.28570938]
[-36.66159058 -38.63076782]
[-23.72398758 -30.81348610]
[-13.66659451 -19.52897263]
[-7.38370562 -5.78063822]
[-5.43399143 9.20902538]
[-7.99081898 24.10714722]
[5.39546585 30.87526321]
[18.78175163 37.64337540]
[32.16803741 44.41149139]
[45.75898743 50.75862122]
[59.54136658 56.67858505]
[73.32374573 62.59854889]
[87.10613251 68.51850891]
[101.89883423 66.03339386]
[112.99015045 55.93474197]
[124.08146667 45.83609390]
[135.17279053 35.73744202]
[120.27500153 37.48558044]
[106.05531311 32.71059036]
[95.23195648 22.32526398]
[89.87393188 8.31485653]
[91.00546265 -6.64240360]
[98.41025543 -19.68728828]
[110.67281342 -28.32613945]
[125.44902039 -30.90755463]
[139.91426086 -26.93807220]
[151.30335999 -17.17649651]
[157.43917847 -3.48884988]
[157.14880371 11.50833893]
[150.48866272 24.94705772]
[163.73124695 17.90192223]
[176.97383118 10.85678768]
[188.47564697 1.22826099]
[197.74058533 -10.56837940]
[193.37207031 -25.45782471]
[198.62133789 -40.06003952]
[211.46997070 -48.76017380]
[226.97740173 -48.21284866]
[239.18067932 -38.62852097]
[243.38743591 -23.69256210]
[237.98005676 -9.14814949]
[225.03779602 -0.58791053]
[209.53723145 -1.30342972]
[200.27227783 10.49320984]
[204.06723022 16.96223831]
[217.00540161 9.37252998]
[224.59492493 22.31081963]
[211.65715027 29.90029335]
[215.45210266 36.36932373]
[230.26985168 34.03821945]
[245.08761597 31.70711517]
[259.90536499 29.37601089]
[274.72314453 27.04490662]
[283.82217407 14.12271595]
[299.40759277 11.50169563]
[312.23287964 20.73684883]
[314.68896484 36.34912491]
[305.31872559 49.07603455]
[289.68136597 51.36693192]
[277.05422974 41.86266327]
[262.23648071 44.19376755]
[247.41871643 46.52487183]
[232.60096741 48.85597610]
[217.78320312 51.18708038]
[184.01896667 24.09937286]
[170.77638245 31.14450836]
[157.53379822 38.18964386]
[145.27143860 46.82875824]
[134.18011475 56.92741013]
[123.08880615 67.02605438]
[111.99748993 77.12471008]
[122.91437531 92.60678864]
[119.96852112 109.98210144]
[106.69666290 119.45098114]
[106.07268524 134.43800354]
[105.44870758 149.42501831]
[104.98066711 164.41770935]
[104.66860962 179.41447449]
[104.35655212 194.41122437]
[104.04450226 209.40797424]
[103.73244476 224.40472412]
[103.42038727 239.40148926]
[103.10832977 254.39823914]
[102.79627228 269.39498901]
[102.48421478 284.39175415]
[102.17216492 299.38848877]
[101.86010742 314.38525391]
[116.35304260 318.58255005]
[129.26530457 326.38867188]
[139.71650696 337.27145386]
[146.99407959 350.48883057]
[150.60182190 365.13964844]
[150.29374695 380.22500610]
[146.09086609 394.71630859]
[138.27973938 407.62554932]
[127.39293671 418.07257080]
[114.17274475 425.34503174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 129]
[25 128]
[26 127]
[29 66]
[30 65]
[31 64]
[32 63]
[36 62]
[37 61]
[38 60]
[39 59]
[67 124]
[68 123]
[69 122]
[70 121]
[83 120]
[84 119]
[85 118]
[86 97]
[87 96]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
