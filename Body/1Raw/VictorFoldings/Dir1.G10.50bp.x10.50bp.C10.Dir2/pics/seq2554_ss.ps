%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAACUGAGGGGGGGGGGCAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCxxxxxxxxxxCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGCCCCCCCCCCACUGAACCGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.68045044]
[71.19830322 375.66442871]
[59.48964310 366.13500977]
[50.78712082 353.79934692]
[45.73651886 339.57281494]
[44.71262741 324.51113892]
[47.79142761 309.73196411]
[54.74444962 296.33206177]
[65.05573273 285.30572510]
[77.96011353 277.47122192]
[92.50000000 273.40988159]
[92.50000000 258.40988159]
[92.50000000 243.40989685]
[92.50000000 228.40989685]
[92.50000000 213.40989685]
[92.50000000 198.40989685]
[92.50000000 183.40989685]
[92.50000000 168.40989685]
[92.50000000 153.40989685]
[92.50000000 138.40989685]
[92.50000000 123.40989685]
[85.84223175 120.09554291]
[80.48036957 114.94179535]
[66.35556793 119.99054718]
[52.23076248 125.03930664]
[47.99694061 139.96760559]
[35.77629471 149.52980042]
[20.26790810 150.04901123]
[7.43507290 141.32559204]
[2.21227765 126.71388245]
[6.60779238 111.83238220]
[18.93145180 102.40332794]
[34.44455719 102.05238342]
[47.18200684 110.91450500]
[61.30680847 105.86574554]
[75.43161011 100.81698608]
[75.96350861 94.85020447]
[77.92284393 89.18924713]
[81.19325256 84.17030334]
[85.58052063 80.09141541]
[90.82410431 77.19482422]
[96.61260223 75.65254211]
[102.60227203 75.55615997]
[108.66528320 61.83610535]
[114.72830200 48.11605072]
[120.79131317 34.39599609]
[109.56122589 24.27954292]
[102.01808929 11.20500374]
[98.88971710 -3.54089904]
[100.47017670 -18.51144409]
[106.59217834 -32.24184036]
[116.64466858 -43.39254761]
[129.63383484 -50.87997437]
[144.28134155 -53.98175430]
[159.15007019 -52.40642548]
[165.21308899 -66.12648010]
[171.27609253 -79.84653473]
[177.33911133 -93.56658936]
[183.40213013 -107.28664398]
[189.46513367 -121.00669098]
[177.17112732 -112.41266632]
[163.09703064 -107.22425079]
[148.16653442 -105.78196716]
[133.35952759 -108.18048096]
[119.64783478 -114.26236725]
[107.93134308 -123.62847137]
[98.97902679 -135.66407776]
[93.37843323 -149.57929993]
[91.49712372 -164.46086121]
[93.45858002 -179.33206177]
[99.13407135 -193.21690369]
[108.15110779 -205.20410156]
[119.91789246 -214.50694275]
[133.66215515 -220.51487732]
[148.48185730 -222.83357239]
[163.40437317 -221.31086731]
[177.45031738 -216.04669189]
[189.69784546 -207.38655090]
[199.34313965 -195.89880371]
[205.75317383 -182.33740234]
[208.50724792 -167.59240723]
[207.42462158 -152.63153076]
[202.57418823 -138.43231201]
[214.07600403 -148.06083679]
[225.57780457 -157.68937683]
[237.07960510 -167.31790161]
[235.80381775 -179.21517944]
[240.41085815 -190.12774658]
[249.63729858 -197.36283875]
[261.09609985 -199.19680786]
[271.89358521 -195.28462219]
[283.78594971 -204.42634583]
[295.67834473 -213.56808472]
[295.12408447 -229.07525635]
[303.81851196 -241.92776489]
[318.41836548 -247.18354797]
[333.30978394 -242.82167053]
[342.76663208 -230.51933289]
[343.15261841 -215.00706482]
[334.31930542 -202.24963379]
[319.66326904 -197.15252686]
[304.82006836 -201.67570496]
[292.92770386 -192.53396606]
[281.03530884 -183.39224243]
[279.80541992 -165.17453003]
[265.44598389 -153.38877869]
[246.70812988 -155.81608582]
[235.20632935 -146.18756104]
[223.70452881 -136.55903625]
[212.20272827 -126.93051147]
[203.18519592 -114.94367981]
[197.12217712 -101.22362518]
[191.05915833 -87.50357056]
[184.99615479 -73.78352356]
[178.93313599 -60.06346512]
[172.87013245 -46.34341431]
[184.04522705 -36.40973282]
[191.61303711 -23.49081802]
[194.82154846 -8.84549141]
[193.34425354 6.09467363]
[187.31330872 19.86530304]
[177.30780029 31.11274719]
[164.29821777 38.72714615]
[149.55226135 41.95193481]
[134.51136780 40.45901108]
[128.44834900 54.17906570]
[122.38533783 67.89911652]
[116.32232666 81.61917114]
[124.05185699 105.07752228]
[107.50000000 123.40989685]
[107.50000000 138.40989685]
[107.50000000 153.40989685]
[107.50000000 168.40989685]
[107.50000000 183.40989685]
[107.50000000 198.40989685]
[107.50000000 213.40989685]
[107.50000000 228.40989685]
[107.50000000 243.40989685]
[107.50000000 258.40988159]
[107.50000000 273.40988159]
[122.03988647 277.47122192]
[134.94427490 285.30572510]
[145.25555420 296.33206177]
[152.20857239 309.73196411]
[155.28736877 324.51113892]
[154.26348877 339.57281494]
[149.21287537 353.79934692]
[140.51036072 366.13500977]
[128.80169678 375.66442871]
[114.95575714 381.68045044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 36]
[24 35]
[25 34]
[43 128]
[44 127]
[45 126]
[46 125]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[83 110]
[84 109]
[85 108]
[86 107]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
