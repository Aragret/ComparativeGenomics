%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAACACUGGGGGGGGGGACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCxxxxxxxxxxUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCCCCCCCCCCCAUAACACU\
) } def
/len { sequence length } bind def

/coor [
[88.89386749 463.23147583]
[75.67366791 455.95901489]
[64.78686523 445.51202393]
[56.97573471 432.60275269]
[52.77285385 418.11145020]
[52.46477890 403.02609253]
[56.07252121 388.37527466]
[63.35009384 375.15789795]
[73.80130005 364.27511597]
[86.71356201 356.46899414]
[101.20649719 352.27169800]
[100.89444733 337.27493286]
[100.58238983 322.27819824]
[100.27033234 307.28143311]
[99.95827484 292.28466797]
[99.64621735 277.28793335]
[99.33415985 262.29116821]
[99.02210999 247.29441833]
[98.71005249 232.29766846]
[98.39799500 217.30091858]
[90.39759064 204.73736572]
[97.84612274 190.77920532]
[97.22214508 175.79219055]
[96.28651428 160.82139587]
[95.35089111 145.85061646]
[94.41526031 130.87982178]
[77.46201324 124.16322327]
[66.36129761 108.53540802]
[65.51624298 88.44992828]
[50.58193207 87.04763031]
[35.64762497 85.64532471]
[20.67683411 84.70969391]
[5.68413782 84.24165344]
[-9.30855846 83.77361298]
[-18.70975113 96.11853790]
[-33.58128357 100.54765320]
[-48.20475388 95.35787964]
[-56.95713425 82.54478455]
[-56.47295761 67.03526306]
[-46.93840027 54.79304504]
[-32.01969528 50.52551651]
[-17.45338440 55.87362671]
[-8.84051609 68.78091431]
[6.15217972 69.24895477]
[21.14487648 69.71700287]
[23.98264503 67.52278900]
[28.04517174 66.62972260]
[32.69232559 67.60765076]
[37.04993057 70.71101379]
[51.98423767 72.11331940]
[66.91854095 73.51562500]
[78.21755219 63.64989853]
[78.84152985 48.66288376]
[79.46550751 33.67586899]
[80.08947754 18.68885231]
[79.93344116 3.68966341]
[78.99781799 -11.28112793]
[68.45513153 -26.34206200]
[76.79416656 -41.75181580]
[75.54729462 -56.69990158]
[74.30041504 -71.64798737]
[73.05354309 -86.59607697]
[58.20310974 -89.26573944]
[44.55007172 -95.68889618]
[33.02530670 -105.42759705]
[24.41460037 -117.81784058]
[19.30503845 -132.01483154]
[18.04500389 -147.05061340]
[20.72040367 -161.90002441]
[27.14882851 -175.55058289]
[36.89197540 -187.07157898]
[49.28554535 -195.67750549]
[63.48451614 -200.78158569]
[78.52078247 -202.03581238]
[93.36914825 -199.35467529]
[107.01721954 -192.92097473]
[118.53446198 -183.17338562]
[127.13559723 -170.77650452]
[132.23419189 -156.57556152]
[133.48262024 -141.53880310]
[130.79574585 -126.69147491]
[124.35678864 -113.04589081]
[114.60474396 -101.53240967]
[102.20453644 -92.93606567]
[88.00163269 -87.84294891]
[89.24850464 -72.89485931]
[90.49537659 -57.94677734]
[91.74225616 -42.99868774]
[100.79421234 -34.91355896]
[101.92060089 -22.42555809]
[93.96860504 -12.21675682]
[94.90423584 2.75403500]
[106.86322784 -6.30038500]
[121.44976044 -2.80279970]
[128.00225830 10.69033909]
[121.73137665 24.31663895]
[107.22061920 28.11637688]
[95.07649994 19.31282997]
[94.45252228 34.29984665]
[93.82854462 49.28686142]
[93.20456696 64.27388000]
[105.87200165 65.37418365]
[116.94676208 70.67022705]
[125.14472961 79.20867157]
[129.63673401 89.68417358]
[144.57104492 88.28186798]
[159.50535583 86.87957001]
[174.43966675 85.47726440]
[189.37396240 84.07495880]
[204.57847595 76.57434845]
[215.99499512 89.10828400]
[207.11129761 103.54837799]
[190.77627563 99.00926971]
[175.84196472 100.41157532]
[160.90765381 101.81387329]
[145.97334290 103.21617889]
[131.03904724 104.61848450]
[129.23919678 111.39394379]
[125.98010254 117.60076141]
[121.42440796 122.92917633]
[115.79948425 127.11325836]
[109.38605499 129.94418335]
[110.32167816 144.91497803]
[111.25730896 159.88577271]
[112.19293976 174.85656738]
[115.57826233 180.65718079]
[115.48965454 186.42115784]
[112.84288025 190.46714783]
[120.86560059 204.10337830]
[113.39474487 216.98886108]
[113.70680237 231.98561096]
[114.01885986 246.98236084]
[114.33091736 261.97912598]
[114.64297485 276.97586060]
[114.95503235 291.97262573]
[115.26708221 306.96939087]
[115.57913971 321.96612549]
[115.89119720 336.96289062]
[116.20325470 351.95962524]
[130.85824585 355.55041504]
[144.08406067 362.81265259]
[154.97892761 373.25125122]
[162.80001831 386.15447998]
[167.01408386 400.64254761]
[167.33381653 415.72763062]
[163.73738098 430.38122559]
[156.47001648 443.60424805]
[146.02722168 454.49508667]
[133.12098694 462.31118774]
[118.63130188 466.51968384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 125]
[24 124]
[25 123]
[26 122]
[29 51]
[30 50]
[31 49]
[32 45]
[33 44]
[34 43]
[52 101]
[53 100]
[54 99]
[55 98]
[56 92]
[57 91]
[59 88]
[60 87]
[61 86]
[62 85]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
