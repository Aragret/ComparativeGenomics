%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAACCACUCAGGGGGGGGGGCGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAxxxxxxxxxxCAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUACCCCCCCCCCAUUAACCACUCA\
) } def
/len { sequence length } bind def

/coor [
[86.34864044 390.38354492]
[72.18803406 385.22854614]
[59.59828949 376.94631958]
[49.25835037 365.98355103]
[41.72584152 352.93142700]
[37.40697479 338.49383545]
[36.53466797 323.44937134]
[39.15595627 308.60937500]
[45.12948608 294.77413940]
[54.13310242 282.68978882]
[65.68125916 273.00802612]
[79.15117645 266.25094604]
[93.81643677 262.78295898]
[93.81643677 247.78295898]
[93.81643677 232.78295898]
[93.81643677 217.78295898]
[93.81643677 202.78295898]
[93.81643677 187.78295898]
[93.81643677 172.78295898]
[93.81643677 157.78295898]
[93.81643677 142.78295898]
[93.81643677 127.78296661]
[76.21663666 104.90204620]
[88.22869110 83.70276642]
[84.61625671 69.14425659]
[81.00381470 54.58573914]
[67.46608734 62.76560593]
[54.21443939 56.82691574]
[39.62006378 60.29163361]
[32.76936340 74.34872437]
[18.46472931 80.66628265]
[3.46037912 76.26134491]
[-5.15909529 63.21379089]
[-3.32384062 47.68427658]
[8.09959126 37.00536346]
[23.71740532 36.21930695]
[36.15534973 45.69725800]
[50.74972153 42.23254395]
[56.73512650 32.97778702]
[68.01234436 29.90729904]
[79.05712891 35.44237900]
[79.66500854 20.45470238]
[80.27289581 5.46702480]
[80.88077545 -9.52065277]
[81.48866272 -24.50832939]
[78.69720459 -33.26897812]
[82.26380157 -39.79270935]
[83.17530823 -54.76498795]
[84.08682251 -69.73726654]
[77.20242310 -83.98210907]
[85.69882965 -96.21568298]
[86.61034393 -111.18796539]
[87.52185822 -126.16024780]
[78.91117859 -142.40635681]
[89.08785248 -156.67251587]
[89.69573975 -171.66018677]
[90.30361938 -186.64787292]
[90.91150665 -201.63554382]
[91.51938629 -216.62322998]
[91.36737823 -231.62245178]
[90.45586395 -246.59474182]
[89.54434967 -261.56701660]
[74.66560364 -263.89874268]
[60.63613129 -269.37484741]
[48.11211395 -277.73925781]
[37.67932510 -288.60070801]
[29.82572556 -301.45120239]
[24.91864204 -315.68966675]
[23.18758583 -330.65020752]
[24.71352577 -345.63305664]
[29.42508698 -359.93743896]
[37.10190201 -372.89431763]
[47.38491440 -383.89764404]
[59.79316711 -392.43283081]
[73.74629974 -398.10064697]
[88.59171295 -400.63598633]
[103.63504028 -399.92028809]
[118.17269135 -395.98699951]
[131.52471924 -389.02008057]
[143.06660461 -379.34545898]
[152.25852966 -367.41552734]
[158.67056274 -353.78836060]
[162.00280762 -339.10128784]
[162.09941101 -324.04125977]
[158.95584106 -309.31265259]
[152.71914673 -295.60433960]
[143.68101501 -283.55749512]
[132.26417542 -273.73559570]
[119.00263214 -266.59799194]
[104.51663208 -262.47851562]
[105.42814636 -247.50624084]
[106.33966064 -232.53396606]
[118.29281616 -241.59609985]
[132.88032532 -238.10261536]
[139.43171692 -224.60893250]
[133.15476990 -210.98542786]
[118.64094543 -207.19741821]
[106.50706482 -216.01533508]
[105.89918518 -201.02766418]
[105.29129791 -186.03999329]
[104.68341827 -171.05230713]
[104.07553101 -156.06463623]
[112.05858612 -146.92739868]
[111.63845062 -134.39949036]
[102.49414062 -125.24873352]
[101.58262634 -110.27645111]
[100.67111206 -95.30416870]
[107.62070465 -82.13024139]
[99.05910492 -68.82575226]
[98.14759064 -53.85347366]
[97.23607635 -38.88119507]
[96.47634125 -23.90044594]
[95.86845398 -8.91276932]
[95.26057434 6.07490873]
[94.65268707 21.06258583]
[94.04480743 36.05026245]
[95.56233215 50.97330475]
[99.17476654 65.53181458]
[102.78720856 80.09033203]
[114.54537201 82.32542419]
[124.26828766 91.61365509]
[127.79665375 106.12172699]
[141.39483643 112.45334625]
[154.99302673 118.78496552]
[168.59120178 125.11658478]
[185.50230408 126.32112885]
[189.02630615 142.90478516]
[174.06628418 150.88188171]
[162.25958252 138.71476746]
[148.66140747 132.38314819]
[135.06321716 126.05152893]
[121.46503448 119.71990967]
[108.81643677 127.78296661]
[108.81643677 142.78295898]
[108.81643677 157.78295898]
[108.81643677 172.78295898]
[108.81643677 187.78295898]
[108.81643677 202.78295898]
[108.81643677 217.78295898]
[108.81643677 232.78295898]
[108.81643677 247.78295898]
[108.81643677 262.78295898]
[123.48169708 266.25094604]
[136.95161438 273.00802612]
[148.49977112 282.68978882]
[157.50338745 294.77413940]
[163.47691345 308.60937500]
[166.09820557 323.44937134]
[165.22589111 338.49383545]
[160.90702820 352.93142700]
[153.37451172 365.98355103]
[143.03457642 376.94631958]
[130.44483948 385.22854614]
[116.28423309 390.38354492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 119]
[25 118]
[26 117]
[28 38]
[29 37]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[47 111]
[48 110]
[49 109]
[51 107]
[52 106]
[53 105]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[60 92]
[61 91]
[62 90]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
