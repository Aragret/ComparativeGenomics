%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAAACUCGGGGGGGGGGAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUxxxxxxxxxxACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACCCCCCCCCCCUUCAAACUC\
) } def
/len { sequence length } bind def

/coor [
[96.51262665 386.57669067]
[82.66668701 380.56066895]
[70.95802307 371.03125000]
[62.25550079 358.69558716]
[57.20489883 344.46905518]
[56.18100739 329.40737915]
[59.25980759 314.62823486]
[66.21282959 301.22830200]
[76.52410889 290.20196533]
[89.42848969 282.36746216]
[103.96837616 278.30615234]
[103.96837616 263.30615234]
[103.96837616 248.30613708]
[103.96837616 233.30613708]
[103.96837616 218.30613708]
[103.96837616 203.30613708]
[103.96837616 188.30613708]
[103.96837616 173.30613708]
[103.96837616 158.30613708]
[103.96837616 143.30613708]
[93.50654602 142.58454895]
[83.62052155 139.39666748]
[74.87688446 133.97540283]
[67.76457214 126.68009949]
[62.66760254 117.97307587]
[59.84448242 108.39048767]
[59.41542053 98.50937653]
[61.35793686 88.91296387]
[65.51096344 80.15618896]
[71.58705902 72.73368835]
[79.19182587 67.05184174]
[87.84930420 63.40665054]
[85.98168945 48.52337265]
[84.11407471 33.64009094]
[82.24646759 18.75681114]
[78.50592041 13.17865467]
[78.23482513 7.42037296]
[80.62407684 3.21716046]
[79.37720490 -11.73092651]
[78.13032532 -26.67901421]
[74.27683258 -35.03379822]
[77.01631165 -41.95050812]
[76.08068085 -56.92129898]
[74.21307373 -71.80458069]
[71.42074585 -86.54238892]
[68.62841797 -101.28018951]
[65.83609772 -116.01799774]
[53.05949020 -124.92844391]
[50.43762207 -139.91445923]
[59.01110840 -152.04008484]
[54.31089401 -159.94955444]
[56.31734467 -167.11334229]
[53.83222580 -181.90605164]
[51.34710693 -196.69876099]
[48.86198807 -211.49147034]
[33.82069397 -211.76380920]
[19.08559799 -214.79556274]
[5.15857029 -220.48348999]
[-7.48604059 -228.63386536]
[-18.41756248 -238.96907043]
[-27.26367378 -251.13710022]
[-33.72307587 -264.72351074]
[-37.57576752 -279.26556396]
[-38.69052887 -294.26797485]
[-37.02938461 -309.21972656]
[-32.64891815 -323.61160278]
[-25.69832611 -336.95343018]
[-16.41434097 -348.79074097]
[-5.11317396 -358.72039795]
[7.82026291 -366.40420532]
[21.94546127 -371.58044434]
[36.78132248 -374.07281494]
[51.82254028 -373.79641724]
[66.55681610 -370.76071167]
[80.48231506 -365.06900024]
[93.12472534 -356.91525269]
[104.05345917 -346.57708740]
[112.89629364 -334.40667725]
[119.35203552 -320.81851196]
[123.20080566 -306.27542114]
[124.31152344 -291.27273560]
[122.64634705 -276.32141113]
[118.26200104 -261.93072510]
[111.30781555 -248.59077454]
[102.02063751 -236.75595093]
[90.71679688 -226.82933044]
[77.78128815 -219.14901733]
[63.65469360 -213.97657776]
[66.13981628 -199.18388367]
[68.62493134 -184.39117432]
[71.11004639 -169.59846497]
[73.74891663 -154.83241272]
[86.16378021 -146.68338013]
[89.20553589 -131.77691650]
[80.57390594 -118.81032562]
[83.36622620 -104.07251740]
[86.15855408 -89.33470917]
[88.95087433 -74.59690094]
[98.60298920 -86.07891846]
[113.52924347 -87.56452942]
[125.25518799 -78.21026611]
[127.12338257 -63.32706070]
[118.07314301 -51.36490631]
[103.24278259 -49.11536407]
[91.05147552 -57.85692978]
[91.98710632 -42.88613510]
[93.07841492 -27.92588806]
[94.32528687 -12.97780132]
[95.57216644 1.97028577]
[97.12974548 16.88919830]
[98.99736023 31.77247810]
[100.86496735 46.65575790]
[102.73258209 61.53903961]
[121.65164948 66.61622620]
[136.17658997 80.65782166]
[142.25134277 100.56827545]
[137.78491211 121.52835846]
[151.44116211 127.73376465]
[165.09739685 133.93917847]
[178.75363159 140.14457703]
[193.46110535 134.35958862]
[207.91789246 140.74523926]
[213.54707336 155.51303101]
[207.00894165 169.90150452]
[192.18244934 175.37423706]
[177.86390686 168.68434143]
[172.54823303 153.80082703]
[158.89198303 147.59541321]
[145.23574829 141.39001465]
[131.57951355 135.18460083]
[118.96837616 143.30613708]
[118.96837616 158.30613708]
[118.96837616 173.30613708]
[118.96837616 188.30613708]
[118.96837616 203.30613708]
[118.96837616 218.30613708]
[118.96837616 233.30613708]
[118.96837616 248.30613708]
[118.96837616 263.30615234]
[118.96837616 278.30615234]
[133.50827026 282.36746216]
[146.41264343 290.20196533]
[156.72393799 301.22830200]
[163.67695618 314.62823486]
[166.75575256 329.40737915]
[165.73185730 344.46905518]
[160.68125916 358.69558716]
[151.97872925 371.03125000]
[140.27008057 380.56066895]
[126.42413330 386.57669067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 113]
[33 112]
[34 111]
[35 110]
[38 109]
[39 108]
[40 107]
[42 106]
[43 105]
[44 98]
[45 97]
[46 96]
[47 95]
[50 92]
[52 91]
[53 90]
[54 89]
[55 88]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
