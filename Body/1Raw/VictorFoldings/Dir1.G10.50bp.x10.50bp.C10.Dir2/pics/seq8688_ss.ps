%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGCAAUAUCAAGGGGGGGGGGCCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGxxxxxxxxxxUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCCCCCCCCCCCGAGCAAUCUCAA\
) } def
/len { sequence length } bind def

/coor [
[73.71604919 179.31466675]
[59.97678757 173.34715271]
[47.52379990 165.02238464]
[36.75730515 154.60791016]
[28.02332306 142.43843079]
[21.60254860 128.90505981]
[17.70133400 114.44272614]
[16.44505501 99.51622009]
[17.87409019 84.60527039]
[21.94251060 70.18907928]
[28.51956367 56.73095703]
[37.39387512 44.66342926]
[48.28023911 34.37432480]
[60.82878876 26.19431496]
[74.63623810 20.38629341]
[89.25882721 17.13691902]
[88.67358398 2.14834118]
[88.08834839 -12.84023762]
[87.50310516 -27.82881546]
[86.91786194 -42.81739426]
[86.33261871 -57.80597305]
[85.74738312 -72.79455566]
[85.16213989 -87.78313446]
[84.57689667 -102.77171326]
[83.99165344 -117.76029205]
[68.98999786 -118.03163910]
[54.02829361 -119.15898132]
[39.15534973 -121.13862610]
[24.41968155 -123.96412659]
[9.86934757 -127.62626648]
[-4.44818735 -132.11309814]
[-18.48622322 -137.40997314]
[-32.19897079 -143.49963379]
[-45.54170227 -150.36221313]
[-58.47089767 -157.97531128]
[-70.94438171 -166.31411743]
[-82.92147064 -175.35142517]
[-94.36309052 -185.05773926]
[-105.23193359 -195.40142822]
[-115.49253082 -206.34872437]
[-125.11143494 -217.86393738]
[-134.05725098 -229.90951538]
[-142.30081177 -242.44615173]
[-149.81523132 -255.43295288]
[-156.57598877 -268.82754517]
[-162.56101990 -282.58630371]
[-167.75083923 -296.66424561]
[-172.12849426 -311.01556396]
[-175.67970276 -325.59335327]
[-178.39288330 -340.35012817]
[-180.25920105 -355.23770142]
[-181.27256775 -370.20755005]
[-181.42964172 -385.21084595]
[-180.72996521 -400.19863892]
[-179.17578125 -415.12203979]
[-176.77215576 -429.93237305]
[-173.52696228 -444.58135986]
[-169.45075989 -459.02114868]
[-164.55685425 -473.20471191]
[-158.86120605 -487.08572388]
[-152.38240051 -500.61895752]
[-145.14155579 -513.76025391]
[-137.16229248 -526.46673584]
[-128.47064209 -538.69696045]
[-119.09496307 -550.41107178]
[-109.06582642 -561.57080078]
[-98.41595459 -572.13983154]
[-87.18006897 -582.08355713]
[-75.39483643 -591.36968994]
[-63.09868622 -599.96783447]
[-50.33173370 -607.84997559]
[-37.13561630 -614.99041748]
[-23.55338287 -621.36584473]
[-9.62933159 -626.95550537]
[4.59111881 -631.74114990]
[19.06158257 -635.70715332]
[33.73486328 -638.84057617]
[48.56309509 -641.13116455]
[63.49790955 -642.57153320]
[78.49060059 -643.15698242]
[93.49225616 -642.88549805]
[108.45394897 -641.75805664]
[123.32688141 -639.77825928]
[138.06253052 -636.95263672]
[152.61282349 -633.29040527]
[166.93032837 -628.80346680]
[180.96832275 -623.50646973]
[194.68103027 -617.41668701]
[208.02371216 -610.55401611]
[220.95283508 -602.94079590]
[233.42625427 -594.60192871]
[245.40327454 -585.56451416]
[256.84481812 -575.85809326]
[267.71359253 -565.51434326]
[277.97409058 -554.56695557]
[287.59289551 -543.05163574]
[296.53863525 -531.00604248]
[304.78210449 -518.46929932]
[312.29641724 -505.48248291]
[319.05706787 -492.08779907]
[325.04199219 -478.32904053]
[330.23168945 -464.25100708]
[334.60922241 -449.89968872]
[338.16033936 -435.32186890]
[340.87341309 -420.56506348]
[342.73959351 -405.67745972]
[343.75283813 -390.70761108]
[343.90982056 -375.70431519]
[343.20999146 -360.71652222]
[341.65570068 -345.79315186]
[339.25198364 -330.98281860]
[336.00665283 -316.33389282]
[331.93035889 -301.89410400]
[327.03631592 -287.71060181]
[321.34057617 -273.82962036]
[314.86166382 -260.29641724]
[307.62069702 -247.15519714]
[299.64135742 -234.44876099]
[290.94961548 -222.21859741]
[281.57382202 -210.50457764]
[271.54461670 -199.34490967]
[260.89465332 -188.77600098]
[249.65869141 -178.83232117]
[237.87338257 -169.54632568]
[225.57716370 -160.94827271]
[212.81015015 -153.06622314]
[199.61398315 -145.92587280]
[186.03169250 -139.55053711]
[172.10760498 -133.96098328]
[157.88711548 -129.17547607]
[143.41661072 -125.20959473]
[128.74331665 -122.07628632]
[113.91506195 -119.78577423]
[98.98023224 -118.34552765]
[99.56547546 -103.35694885]
[100.15071869 -88.36837006]
[100.73596191 -73.37979126]
[101.32119751 -58.39121628]
[101.90644073 -43.40263748]
[102.49168396 -28.41405678]
[103.07692719 -13.42547894]
[103.66216278 1.56309986]
[104.24740601 16.55167770]
[119.07884216 18.65099525]
[133.29711914 23.36472893]
[146.44528198 30.54138947]
[158.10076904 39.95032883]
[167.88900757 51.28916168]
[175.49540710 64.19348145]
[180.67550659 78.24855804]
[183.26283264 93.00268555]
[183.17424011 107.98169708]
[180.41258240 122.70419312]
[175.06658936 136.69700623]
[167.30807495 149.51045227]
[157.38641357 160.73271179]
[145.62043762 170.00312805]
[132.38830566 177.02375793]
[118.11527252 181.56898499]
[103.26004028 183.49272156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
