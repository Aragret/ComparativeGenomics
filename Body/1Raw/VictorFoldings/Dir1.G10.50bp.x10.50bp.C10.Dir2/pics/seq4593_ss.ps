%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCAUCCUAGGGGGGGGGGAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCCCCCCCCCCCACCCCAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[83.64406586 389.47528076]
[69.94190979 383.21438599]
[57.97679901 374.06103516]
[48.34888458 362.47436523]
[41.54110718 349.03552246]
[37.89493942 334.41867065]
[37.59326935 319.35690308]
[40.65123367 304.60574341]
[46.91544342 290.90509033]
[56.07168961 278.94219971]
[67.66069794 269.31710815]
[81.10116577 262.51257324]
[95.71893311 258.86996460]
[95.41492462 243.87303162]
[95.11092377 228.87611389]
[94.80691528 213.87919617]
[94.50291443 198.88227844]
[94.19890594 183.88536072]
[93.89490509 168.88844299]
[93.59089661 153.89151001]
[93.28689575 138.89459229]
[92.98289490 123.89768219]
[75.65529633 105.26064301]
[83.74164581 81.13191223]
[77.82630920 67.34754181]
[71.91097260 53.56317520]
[56.91694641 42.92083740]
[59.59552002 25.60283470]
[53.40203094 11.94118404]
[47.20853806 -1.72046626]
[35.40116119 -7.00635338]
[30.53884125 -18.55982971]
[34.73640442 -29.94397354]
[28.82106400 -43.72834015]
[22.90572739 -57.51270676]
[16.99038887 -71.29707336]
[4.43795776 -80.92760468]
[6.52913618 -95.67467499]
[0.61379826 -109.45904541]
[-5.30153942 -123.24340820]
[-11.21687698 -137.02778625]
[-17.13221550 -150.81214905]
[-31.76681709 -151.50302124]
[-44.67164230 -158.28445435]
[-53.45354080 -169.82934570]
[-56.51344681 -183.93388367]
[-53.33724976 -197.93809509]
[-65.19888306 -207.11967468]
[-77.06052399 -216.30126953]
[-88.92215729 -225.48286438]
[-100.78379059 -234.66444397]
[-116.02542114 -231.16777039]
[-129.92520142 -238.33227539]
[-135.92007446 -252.77511597]
[-131.17945862 -267.67681885]
[-117.94171906 -276.00125122]
[-102.45730591 -273.81787109]
[-92.03749847 -262.15762329]
[-91.60220337 -246.52609253]
[-79.74057007 -237.34449768]
[-67.87892914 -228.16290283]
[-56.01729584 -218.98132324]
[-44.15565872 -209.79972839]
[-40.04681015 -212.65635681]
[-35.55392838 -214.86022949]
[-30.77991867 -216.36083984]
[-30.77991867 -231.36083984]
[-30.77991867 -246.36083984]
[-41.67447281 -257.49395752]
[-41.46078873 -272.70611572]
[-30.77991867 -283.02377319]
[-30.77991867 -298.02377319]
[-44.12104797 -305.63363647]
[-51.85601425 -318.90261841]
[-51.90415955 -334.26144409]
[-44.25252533 -347.57864380]
[-30.95936394 -355.27197266]
[-15.60047150 -355.27197266]
[-2.30731201 -347.57864380]
[5.34432220 -334.26144409]
[5.29617929 -318.90261841]
[-2.43878984 -305.63363647]
[-15.77991772 -298.02377319]
[-15.77991772 -283.02377319]
[-5.09904575 -272.70611572]
[-4.88536501 -257.49395752]
[-15.77991772 -246.36083984]
[-15.77991772 -231.36083984]
[-15.77991772 -216.36083984]
[0.58874071 -207.34248352]
[9.54015255 -190.80249023]
[8.12020779 -171.93066406]
[-3.34784794 -156.72747803]
[2.56748986 -142.94311523]
[8.48282719 -129.15875244]
[14.39816570 -115.37438202]
[20.31350327 -101.59001160]
[32.44282913 -92.94544220]
[30.77475548 -77.21240997]
[36.69009399 -63.42804718]
[42.60543060 -49.64368057]
[48.52077103 -35.85931015]
[63.11769104 -26.16303444]
[60.87018967 -7.91395617]
[67.06368256 5.74769402]
[73.25717163 19.40934372]
[84.49530792 23.98345757]
[89.75092316 35.36341858]
[85.69533539 47.64783859]
[91.61067200 61.43220520]
[97.52601624 75.21657562]
[103.41157532 75.32815552]
[109.10656738 76.81790924]
[114.29286194 79.60262299]
[118.68075562 83.52674103]
[122.02513885 88.37106323]
[124.13919067 93.86497498]
[124.90481567 99.70159912]
[139.26167297 104.04677582]
[153.61853027 108.39195251]
[167.43191528 100.71300507]
[182.60614014 105.13098907]
[190.13861084 119.02478027]
[185.56044006 134.15144348]
[171.58778381 141.53659058]
[156.51037598 136.79876709]
[149.27336121 122.74880981]
[134.91650391 118.40363312]
[120.55963898 114.05845642]
[117.08759308 118.12051392]
[112.82897186 121.34844971]
[107.97981262 123.59367371]
[108.28381348 138.59059143]
[108.58782196 153.58750916]
[108.89182281 168.58442688]
[109.19583130 183.58134460]
[109.49983215 198.57827759]
[109.80383301 213.57519531]
[110.10784149 228.57211304]
[110.41184235 243.56903076]
[110.71585083 258.56594849]
[125.46922302 261.61318970]
[139.17440796 267.86743164]
[151.14396667 277.01498413]
[160.77748108 288.59698486]
[167.59178162 302.03250122]
[171.24502563 316.64761353]
[171.55400085 331.70922852]
[168.50317383 346.46188354]
[162.24560547 360.16555786]
[153.09516907 372.13287354]
[141.51081848 381.76361084]
[128.07365417 388.57464600]
[113.45765686 392.22433472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 111]
[25 110]
[26 109]
[28 106]
[29 105]
[30 104]
[33 102]
[34 101]
[35 100]
[36 99]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[66 89]
[67 88]
[68 87]
[71 84]
[72 83]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
