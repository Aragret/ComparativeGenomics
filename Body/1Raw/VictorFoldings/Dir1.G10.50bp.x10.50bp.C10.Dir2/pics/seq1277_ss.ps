%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCACCUGGGGGGGGGGGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUxxxxxxxxxxCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCCCCCCCCCCCAAACUAACCU\
) } def
/len { sequence length } bind def

/coor [
[169.76911926 469.92282104]
[155.92317200 463.90679932]
[144.21452332 454.37738037]
[135.51199341 442.04171753]
[130.46139526 427.81518555]
[129.43750000 412.75350952]
[132.51629639 397.97436523]
[139.46931458 384.57443237]
[149.78060913 373.54809570]
[162.68498230 365.71359253]
[177.22486877 361.65228271]
[177.22486877 346.65228271]
[177.22486877 331.65228271]
[177.22486877 316.65228271]
[177.22486877 301.65228271]
[177.22486877 286.65228271]
[177.22486877 271.65228271]
[177.22486877 256.65228271]
[177.22486877 241.65226746]
[177.22486877 226.65226746]
[177.22486877 211.65226746]
[177.22486877 196.65226746]
[172.91728210 182.28408813]
[164.66499329 169.75813293]
[156.41270447 157.23216248]
[148.16041565 144.70620728]
[139.90812683 132.18023682]
[128.71237183 122.19751740]
[115.32608032 115.42940521]
[101.93979645 108.66128540]
[96.47308350 120.51130676]
[82.57945251 127.73101044]
[67.59973907 128.51084900]
[52.62002563 129.29069519]
[39.16547394 138.66658020]
[24.43537521 131.45851135]
[23.58278847 115.08154297]
[37.48478317 106.38289642]
[51.84017944 114.31098938]
[66.81989288 113.53114319]
[81.79960632 112.75129700]
[86.55342102 98.52451324]
[71.00504303 95.59902191]
[66.21252441 81.49650574]
[54.71072388 71.86798096]
[43.20891953 62.23945236]
[30.10262299 69.85527802]
[15.18142033 72.52613831]
[0.24711871 69.92951965]
[-12.89689255 62.37897491]
[-22.66341019 50.78626633]
[-27.87308121 36.55126953]
[-27.89680862 21.39292908]
[-22.73173141 7.14169121]
[-13.00155449 -4.48153877]
[0.11875366 -12.07319927]
[15.04485321 -14.71656132]
[29.97434425 -12.09242439]
[43.10441971 -4.51766729]
[52.84955597 7.09302187]
[58.03298569 21.33759499]
[58.02877808 36.49595261]
[52.83744431 50.73764801]
[64.33924866 60.36617279]
[75.84104919 69.99469757]
[90.56674194 72.23149872]
[96.18194580 87.02271271]
[108.70790863 95.27500153]
[122.09419250 102.04311371]
[135.48048401 108.81123352]
[127.57524872 96.06339264]
[122.76059723 81.85708618]
[121.28643036 66.92970276]
[123.22927094 52.05605698]
[128.48826599 38.00817490]
[136.79043579 25.51522255]
[147.70487976 15.22565937]
[160.66503906 7.67357063]
[174.99824524 3.25095367]
[189.96047974 2.18736768]
[204.77514648 4.53801870]
[218.67327881 10.18089390]
[230.93347168 18.82309723]
[240.91935730 30.01604652]
[248.11260986 43.17876434]
[252.13984680 57.62803268]
[252.79205322 72.61384583]
[250.03535461 87.35836029]
[244.01286316 101.09624481]
[235.03715515 113.11442566]
[223.57414246 122.78909302]
[210.21879578 129.61807251]
[195.66436768 133.24691772]
[180.66629028 133.48724365]
[166.00306702 130.32658386]
[152.43409729 123.92795563]
[160.68638611 136.45391846]
[168.93867493 148.97987366]
[177.19096375 161.50584412]
[185.44325256 174.03179932]
[185.04779053 159.03701782]
[187.72007751 144.27697754]
[193.34765625 130.37265015]
[201.69378662 117.90901184]
[212.40733337 107.41043854]
[225.03753662 99.31861115]
[239.05307007 93.97396851]
[253.86422729 91.60137177]
[268.84793091 92.30062866]
[283.37374878 96.04233551]
[296.83059692 102.66905212]
[308.65228271 111.90200806]
[318.34149170 123.35273743]
[325.49057007 136.53950500]
[329.79873657 150.90750122]
[331.08474731 165.85227966]
[329.29449463 180.74505615]
[324.50332642 194.95930481]
[316.91275024 207.89697266]
[306.84216309 219.01376343]
[294.71524048 227.84199524]
[281.04217529 234.01023865]
[266.39819336 237.25898743]
[251.39944458 237.45156860]
[236.67689514 234.57986450]
[222.84997559 228.76469421]
[210.50038147 220.25073242]
[200.14770508 209.39614868]
[192.22486877 196.65226746]
[192.22486877 211.65226746]
[192.22486877 226.65226746]
[192.22486877 241.65226746]
[192.22486877 256.65228271]
[192.22486877 271.65228271]
[192.22486877 286.65228271]
[192.22486877 301.65228271]
[192.22486877 316.65228271]
[192.22486877 331.65228271]
[192.22486877 346.65228271]
[192.22486877 361.65228271]
[206.76475525 365.71359253]
[219.66914368 373.54809570]
[229.98042297 384.57443237]
[236.93344116 397.97436523]
[240.01225281 412.75350952]
[238.98835754 427.81518555]
[233.93775940 442.04171753]
[225.23522949 454.37738037]
[213.52656555 463.90679932]
[199.68063354 469.92282104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 70]
[29 69]
[30 68]
[32 41]
[33 40]
[34 39]
[42 67]
[44 65]
[45 64]
[46 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
