%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAACACUGGGGGGGGGGACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCxxxxxxxxxxCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCCCCCCCCCCCACAACACU\
) } def
/len { sequence length } bind def

/coor [
[83.82389069 385.80151367]
[70.60369873 378.52905273]
[59.71689224 368.08206177]
[51.90576172 355.17282104]
[47.70288086 340.68148804]
[47.39480591 325.59616089]
[51.00254822 310.94534302]
[58.28012085 297.72793579]
[68.73133087 286.84518433]
[81.64359283 279.03903198]
[96.13652802 274.84173584]
[95.82447052 259.84497070]
[95.51241302 244.84823608]
[95.20035553 229.85147095]
[94.88830566 214.85472107]
[94.57624817 199.85797119]
[94.26419067 184.86122131]
[93.95213318 169.86447144]
[93.64007568 154.86770630]
[93.32801819 139.87095642]
[93.01596832 124.87420654]
[88.07845306 122.92115784]
[83.64447021 119.99998474]
[79.90129852 116.23406982]
[65.99874115 121.86602020]
[52.09618759 127.49797821]
[42.44399643 140.75570679]
[26.16714287 138.75668335]
[20.00985527 123.55735016]
[30.30622673 110.79346466]
[46.46422958 113.59542084]
[60.36678696 107.96347046]
[74.26934052 102.33151245]
[76.64090729 88.96118927]
[85.46514130 78.64021301]
[98.30445862 74.21961975]
[101.70743561 59.61072922]
[105.11042023 45.00183868]
[92.04892731 38.53423309]
[80.76880646 29.31621361]
[71.83840942 17.81657600]
[65.70672607 4.61896706]
[62.68080521 -9.60773754]
[62.91038895 -24.14333534]
[66.38050079 -38.25275421]
[72.91237640 -51.22323227]
[82.17266846 -62.40031052]
[93.69044495 -71.22086334]
[106.88117218 -77.24147797]
[121.07633972 -80.16072083]
[135.55735779 -79.83425903]
[131.46965027 -95.11827850]
[142.11169434 -105.53923798]
[145.81785583 -120.07417297]
[149.52401733 -134.60911560]
[153.23017883 -149.14404297]
[156.93634033 -163.67898560]
[142.96138000 -169.18386841]
[129.78657532 -176.39691162]
[117.61974335 -185.20436096]
[106.65274048 -195.46731567]
[97.05854034 -207.02389526]
[88.98846436 -219.69184875]
[82.56978607 -233.27139282]
[77.90373230 -247.54833984]
[75.06390381 -262.29751587]
[74.09507751 -277.28634644]
[75.01253510 -292.27838135]
[77.80181885 -307.03723145]
[82.41892242 -321.33007812]
[88.79103088 -334.93151855]
[96.81765747 -347.62704468]
[106.37220001 -359.21646118]
[117.30397034 -369.51690674]
[129.44056702 -378.36599731]
[142.59056091 -385.62414551]
[156.54656982 -391.17687988]
[171.08850098 -394.93664551]
[185.98698425 -396.84411621]
[201.00704956 -396.86920166]
[215.91183472 -395.01153564]
[230.46623230 -391.30041504]
[244.44073486 -385.79437256]
[257.61492920 -378.58020020]
[269.78100586 -369.77172852]
[280.74716187 -359.50784302]
[290.34039307 -347.95046997]
[298.40939331 -335.28182983]
[304.82693481 -321.70175171]
[309.49179077 -307.42440796]
[312.33038330 -292.67498779]
[313.29794312 -277.68609619]
[312.37921143 -262.69412231]
[309.58868408 -247.93551636]
[304.97036743 -233.64305115]
[298.59713745 -220.04214478]
[290.56942749 -207.34729004]
[281.01391602 -195.75869751]
[270.08126831 -185.45915222]
[257.94393921 -176.61108398]
[244.79333496 -169.35404968]
[230.83685303 -163.80247498]
[216.29460144 -160.04396057]
[201.39596558 -158.13774109]
[186.37588501 -158.11390686]
[171.47126770 -159.97282410]
[167.76510620 -145.43788147]
[164.05894470 -130.90295410]
[160.35278320 -116.36801147]
[156.64662170 -101.83307648]
[160.99942017 -87.58869171]
[150.09230042 -76.12809753]
[163.77770996 -68.92642975]
[175.35859680 -58.66451645]
[184.16462708 -45.93080521]
[189.68473816 -31.45697784]
[191.59686279 -16.07591820]
[189.78662109 -0.67376351]
[184.35427856 13.86112690]
[175.60906982 26.68942261]
[164.05169678 37.06928635]
[150.34562683 44.39927292]
[135.27899170 48.25317764]
[119.71930695 48.40481567]
[116.31632996 63.01371002]
[112.91335297 77.62260437]
[124.83143616 92.86540222]
[122.82225800 112.10979462]
[108.01271820 124.56214905]
[108.32477570 139.55889893]
[108.63683319 154.55564880]
[108.94889069 169.55241394]
[109.26094055 184.54916382]
[109.57299805 199.54591370]
[109.88505554 214.54266357]
[110.19711304 229.53942871]
[110.50917053 244.53617859]
[110.82122803 259.53292847]
[111.13327789 274.52969360]
[125.78827667 278.12045288]
[139.01408386 285.38272095]
[149.90895081 295.82128906]
[157.73004150 308.72451782]
[161.94412231 323.21258545]
[162.26383972 338.29766846]
[158.66741943 352.95129395]
[151.40005493 366.17428589]
[140.95724487 377.06512451]
[128.05102539 384.88122559]
[113.56132507 389.08972168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 33]
[25 32]
[26 31]
[36 126]
[37 125]
[38 124]
[51 112]
[53 110]
[54 109]
[55 108]
[56 107]
[57 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
