%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAACCUCCCUGGGGGGGGGGGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACCCCCCCCCCCUCUUACCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[95.97860718 523.13537598]
[81.81800842 517.98034668]
[69.22825623 509.69815063]
[58.88832092 498.73538208]
[51.35581207 485.68325806]
[47.03694534 471.24566650]
[46.16463470 456.20120239]
[48.78592682 441.36120605]
[54.75945282 427.52597046]
[63.76307297 415.44161987]
[75.31122589 405.75982666]
[88.78114319 399.00274658]
[103.44640350 395.53479004]
[103.44640350 380.53479004]
[103.44640350 365.53479004]
[103.44640350 350.53479004]
[103.44640350 335.53479004]
[103.44640350 320.53479004]
[103.44640350 305.53479004]
[103.44640350 290.53479004]
[103.44640350 275.53479004]
[103.44640350 260.53479004]
[103.44640350 245.53479004]
[103.44640350 230.53479004]
[103.44640350 215.53479004]
[102.68666840 200.55403137]
[101.16914368 185.63099670]
[99.65161896 170.70796204]
[98.13409424 155.78491211]
[96.61656952 140.86187744]
[95.09904480 125.93883514]
[79.23001099 118.44538116]
[70.90954590 101.99068451]
[74.61624146 83.02102661]
[89.85663605 69.73538208]
[82.31279755 56.77040863]
[74.76895905 43.80543518]
[60.95717239 43.42836761]
[49.23618698 36.31912231]
[42.62474823 24.43424416]
[42.76323700 10.94333935]
[49.50798035 -0.61597937]
[42.22845078 -13.73117828]
[34.94892120 -26.84637833]
[28.07278252 -13.51525974]
[13.40496826 -10.37595177]
[1.67470348 -19.72479630]
[1.46244836 -34.72329330]
[12.92346382 -44.40033340]
[27.67384148 -41.67763901]
[21.75850296 -55.46200562]
[15.84316540 -69.24636841]
[1.12220156 -66.11916351]
[-13.92599583 -65.92426300]
[-28.72301292 -68.66916656]
[-42.70009613 -74.24835968]
[-55.31999588 -82.44740295]
[-66.09764099 -92.95114899]
[-74.61877441 -105.35584259]
[-80.55585480 -119.18470001]
[-83.68067932 -133.90617371]
[-83.87314606 -148.95440674]
[-81.12584686 -163.75097656]
[-75.54438782 -177.72715759]
[-67.34329987 -190.34573364]
[-56.83781815 -201.12167358]
[-44.43173599 -209.64079285]
[-30.60191917 -215.57563782]
[-15.87994289 -218.69808960]
[-0.83168328 -218.88810730]
[13.96444511 -216.13841248]
[27.93972015 -210.55470276]
[40.55696487 -202.35156250]
[51.33121109 -191.84434509]
[59.84832382 -179.43687439]
[65.78092957 -165.60610962]
[68.90099335 -150.88362122]
[69.08858490 -135.83532715]
[66.33649445 -121.03964996]
[60.75051117 -107.06527710]
[52.54534149 -94.44935608]
[42.03636932 -83.67681122]
[29.62753296 -75.16171265]
[35.54286957 -61.37734222]
[41.45820999 -47.59297562]
[48.06412125 -34.12590790]
[55.34365082 -21.01070786]
[62.62318039 -7.89550877]
[78.94742584 -6.44203758]
[91.32674408 4.54927778]
[94.77056122 20.91125870]
[87.73393250 36.26159668]
[95.27777100 49.22656631]
[102.82160950 62.19153976]
[117.26358032 66.24485779]
[130.45187378 59.09860992]
[143.64018250 51.95236206]
[156.82847595 44.80611801]
[162.92727661 37.92528534]
[170.35726929 37.65176392]
[183.68768311 30.77427101]
[188.25588989 15.64459801]
[202.22369385 8.25025082]
[217.30421448 12.97816563]
[224.55047607 27.02335358]
[219.66339111 42.05305481]
[205.54237366 49.15041351]
[190.56518555 44.10469055]
[177.23475647 50.98218536]
[163.97471619 57.99441147]
[150.78642273 65.14065552]
[137.59812927 72.28690338]
[124.40982819 79.43315125]
[128.71144104 88.31289673]
[129.99864197 97.80669403]
[128.31854248 106.94818878]
[124.01168823 114.86060333]
[117.66163635 120.84083557]
[110.02207947 124.42131042]
[111.53960419 139.34434509]
[113.05713654 154.26739502]
[114.57466125 169.19042969]
[116.09218597 184.11346436]
[117.60971069 199.03651428]
[129.18579102 189.49742126]
[143.90289307 192.39686584]
[150.99574280 205.61395264]
[145.27606201 219.48065186]
[130.92767334 223.85372925]
[118.44640350 215.53479004]
[118.44640350 230.53479004]
[118.44640350 245.53479004]
[118.44640350 260.53479004]
[118.44640350 275.53479004]
[118.44640350 290.53479004]
[118.44640350 305.53479004]
[118.44640350 320.53479004]
[118.44640350 335.53479004]
[118.44640350 350.53479004]
[118.44640350 365.53479004]
[118.44640350 380.53479004]
[118.44640350 395.53479004]
[133.11166382 399.00274658]
[146.58158875 405.75982666]
[158.12974548 415.44161987]
[167.13336182 427.52597046]
[173.10688782 441.36120605]
[175.72817993 456.20120239]
[174.85586548 471.24566650]
[170.53700256 485.68325806]
[163.00448608 498.73538208]
[152.66455078 509.69815063]
[140.07479858 517.98034668]
[125.91419983 523.13537598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[31 119]
[35 94]
[36 93]
[37 92]
[42 88]
[43 87]
[44 86]
[50 85]
[51 84]
[52 83]
[95 113]
[96 112]
[97 111]
[98 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
