%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACAUGCAGGGGGGGGGGAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGxxxxxxxxxxACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCCCCCCCCCCCUACUCAUGCA\
) } def
/len { sequence length } bind def

/coor [
[93.20533752 374.68939209]
[80.64711761 366.33822632]
[70.56089020 355.12579346]
[63.58069611 341.75689697]
[60.14531326 327.07189941]
[60.47069168 311.99392700]
[64.53637695 297.47079468]
[72.08679199 284.41546631]
[82.64732361 273.64855957]
[95.55411530 265.84692383]
[109.99584961 261.50097656]
[109.37187195 246.51397705]
[108.74789429 231.52694702]
[108.12391663 216.53993225]
[107.49993896 201.55291748]
[106.87596130 186.56590271]
[106.25198364 171.57888794]
[105.62800598 156.59187317]
[105.00402832 141.60485840]
[104.38005066 126.61784363]
[81.64524078 115.00922394]
[80.88744354 92.74107361]
[69.79612732 82.64242554]
[56.55354309 75.59729004]
[41.98083878 72.04252625]
[36.84836197 73.55159760]
[32.13676453 72.95729065]
[28.58908272 70.78573608]
[26.62409592 67.78468323]
[12.30149937 63.32786942]
[-2.02109814 58.87105179]
[-9.80531216 64.39335632]
[-19.12595558 65.65670013]
[-27.83935356 62.49981308]
[-34.00111389 55.76341629]
[-36.29983902 47.07103348]
[-50.31655121 41.72952271]
[-64.33326721 36.38800812]
[-78.34997559 31.04649734]
[-94.00077057 33.36234665]
[-103.13848114 21.60005188]
[-117.15519714 16.25853920]
[-130.07424927 24.85375023]
[-145.57670593 24.18015289]
[-157.70153809 14.49676323]
[-161.78649902 -0.47296029]
[-156.26086426 -14.97285271]
[-143.24932861 -23.42741013]
[-127.75509644 -22.58568192]
[-115.73602295 -12.77133083]
[-111.81368256 2.24182653]
[-97.79696655 7.58333921]
[-83.14874268 4.88542986]
[-73.00846863 17.02978325]
[-58.99175262 22.37129593]
[-44.97504044 27.71280861]
[-30.95832634 33.05432129]
[-11.00598717 27.91357613]
[2.43571758 44.54845428]
[16.75831413 49.00527191]
[31.08091164 53.46208572]
[45.53560257 57.46982574]
[60.10830307 61.02458954]
[49.49898911 50.42070007]
[41.67737579 37.62138748]
[37.08115768 23.34291458]
[35.96754837 8.38430977]
[38.39886475 -6.41733503]
[44.23904800 -20.23371124]
[53.16127777 -32.29164886]
[64.66625977 -41.91637421]
[78.11017609 -48.56928635]
[92.74068451 -51.87808228]
[107.73906708 -51.65760040]
[122.26599121 -47.92017746]
[135.50854492 -40.87496567]
[146.72563171 -30.91621399]
[155.28958130 -18.60122490]
[160.72111511 -4.61914921]
[162.71629333 10.24756718]
[161.16346741 25.16697502]
[156.14952087 39.30417633]
[147.95506287 51.86804199]
[137.03863525 62.15549469]
[124.01113892 69.59084320]
[109.60160065 73.75799561]
[94.61637878 74.42375946]
[79.89477539 71.55110931]
[90.98609161 81.64975739]
[104.81783295 77.89731598]
[119.20515442 84.31116486]
[126.97325897 99.62901306]
[141.83630371 97.60668182]
[156.69935608 95.58434296]
[171.56239319 93.56201172]
[186.42544556 91.53967285]
[187.64433289 76.52873230]
[192.06205750 62.13089371]
[199.47200012 49.01956940]
[209.52758789 37.80800247]
[221.75849915 29.02058029]
[235.59266663 23.06830215]
[250.38307190 20.22956848]
[265.43789673 20.63715172]
[280.05303955 24.27198982]
[293.54489136 30.96407318]
[305.28240967 40.40040207]
[314.71664429 52.13962173]
[321.40634155 65.63266754]
[325.03854370 80.24844360]
[325.44345093 95.30335236]
[322.60208130 110.09323120]
[316.64733887 123.92634583]
[307.85772705 136.15570068]
[296.64437866 146.20928955]
[283.53173828 153.61688232]
[269.13311768 158.03204346]
[254.12194824 159.24824524]
[239.20034790 157.20861816]
[225.06623840 152.00852966]
[212.38067627 143.89123535]
[201.73698425 133.23637390]
[193.63301086 120.54228973]
[188.44778442 106.40272522]
[173.58473206 108.42505646]
[158.72167969 110.44738770]
[143.85864258 112.46972656]
[128.99559021 114.49205780]
[119.36706543 125.99386597]
[119.99104309 140.98088074]
[120.61502075 155.96789551]
[121.23899841 170.95491028]
[121.86297607 185.94192505]
[122.48695374 200.92893982]
[123.11093140 215.91595459]
[123.73490906 230.90296936]
[124.35888672 245.88999939]
[124.98286438 260.87701416]
[139.73587036 264.00744629]
[153.24650574 270.70919800]
[164.66548157 280.56100464]
[173.27499390 292.94354248]
[178.53384399 307.07843018]
[180.11145020 322.07714844]
[177.90864563 336.99688721]
[172.06390381 350.89974976]
[162.94461060 362.91180420]
[151.12403870 372.27798462]
[137.34523010 378.40948486]
[122.47433472 380.92086792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 89]
[23 88]
[24 63]
[25 62]
[29 61]
[30 60]
[31 59]
[36 57]
[37 56]
[38 55]
[39 54]
[41 52]
[42 51]
[92 128]
[93 127]
[94 126]
[95 125]
[96 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
