%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCCACUGGGGGGGGGGGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAAxxxxxxxxxxAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCCCCCCCCCCCACCCCCUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 369.40728760]
[71.19830322 363.39126587]
[59.48964310 353.86184692]
[50.78712082 341.52618408]
[45.73651886 327.29965210]
[44.71262741 312.23797607]
[47.79142761 297.45883179]
[54.74444962 284.05889893]
[65.05573273 273.03256226]
[77.96011353 265.19805908]
[92.50000000 261.13674927]
[92.50000000 246.13673401]
[92.50000000 231.13673401]
[92.50000000 216.13673401]
[92.50000000 201.13673401]
[92.50000000 186.13673401]
[92.50000000 171.13673401]
[92.50000000 156.13673401]
[92.50000000 141.13673401]
[92.50000000 126.13674164]
[78.70529175 119.51205444]
[69.98955536 105.83789062]
[69.77597046 88.71037292]
[54.81572342 87.61906433]
[45.95637894 101.37871552]
[28.92260933 107.19696808]
[10.39715672 100.68161774]
[-4.01505899 104.83950806]
[-12.99767590 118.13206482]
[-29.00150299 119.25325775]
[-39.74977493 107.34300232]
[-36.99733353 91.53782654]
[-22.85562134 83.96210480]
[-8.17294693 90.42729187]
[6.23926973 86.26940155]
[6.08323288 71.27021027]
[-8.41236401 67.41305542]
[-22.90796089 63.55589294]
[-33.21946335 74.86657715]
[-47.61013412 80.07878876]
[-62.77310181 77.99480438]
[-75.22402954 69.09351349]
[-82.10178375 55.42035675]
[-81.82590485 40.11733627]
[-74.45978546 26.70096779]
[-61.69611359 18.25423622]
[-46.46788406 16.71813774]
[-32.27443314 22.44565773]
[-22.37730980 34.12065506]
[-19.05080032 49.06029892]
[-4.55520439 52.91745758]
[9.94039249 56.77461624]
[29.92006683 49.67153931]
[47.96343994 56.88473511]
[55.90703201 72.65881348]
[70.86727905 73.75012970]
[82.85411072 64.73259735]
[85.95243835 50.05607224]
[89.05075836 35.37954330]
[92.14907837 20.70302010]
[95.24739838 6.02649403]
[98.34572601 -8.65003109]
[89.98571014 -21.79339218]
[93.33692169 -36.63333893]
[105.91862488 -44.52233505]
[109.01695251 -59.19886017]
[111.50206757 -73.99156952]
[113.36968231 -88.87484741]
[115.23729706 -103.75812531]
[117.10491180 -118.64141083]
[103.60574341 -125.53693390]
[93.28135681 -136.63571167]
[87.37847137 -150.59750366]
[86.60988617 -165.73637390]
[91.06842041 -180.22419739]
[100.21567535 -192.31153870]
[112.94707489 -200.53875732]
[127.72525024 -203.91239929]
[142.76565552 -202.02507019]
[156.25209045 -195.10467529]
[166.55599976 -183.98687744]
[172.43315125 -170.01423645]
[173.17382812 -154.87397766]
[168.68861389 -140.39439392]
[159.51908875 -128.32394409]
[146.77255249 -120.12019348]
[131.98818970 -116.77379608]
[130.12057495 -101.89051819]
[128.25296021 -87.00723267]
[126.38534546 -72.12395477]
[128.06292725 -69.80165100]
[128.89082336 -66.65386963]
[128.54182434 -63.01242828]
[126.81916046 -59.32413483]
[123.69347382 -56.10054016]
[120.59515381 -41.42401505]
[128.91452026 -29.12264824]
[125.98146057 -14.19442749]
[113.02224731 -5.55170965]
[109.92392731 9.12481594]
[106.82560730 23.80134201]
[103.72727966 38.47786713]
[100.62895966 53.15439224]
[97.53063965 67.83091736]
[112.97588348 72.31726074]
[123.54793549 83.27637482]
[127.04853821 97.21505737]
[141.81459045 99.85392761]
[156.58064270 102.49279022]
[171.34671021 105.13165283]
[186.11276245 107.77051544]
[200.87881470 110.40937805]
[210.71701050 98.61508179]
[225.13981628 93.33508301]
[240.26756287 95.98968506]
[252.03096008 105.86479950]
[257.26571655 120.30408478]
[254.56372070 135.42343140]
[244.65177917 147.15582275]
[230.19616699 152.34530640]
[215.08535767 149.59591675]
[203.38409424 139.64724731]
[198.23994446 125.17543793]
[183.47389221 122.53657532]
[168.70783997 119.89770508]
[153.94178772 117.25884247]
[139.17573547 114.61997986]
[124.40967560 111.98111725]
[120.17801666 118.22708893]
[114.39301300 123.06990051]
[107.50000000 126.13674164]
[107.50000000 141.13673401]
[107.50000000 156.13673401]
[107.50000000 171.13673401]
[107.50000000 186.13673401]
[107.50000000 201.13673401]
[107.50000000 216.13673401]
[107.50000000 231.13673401]
[107.50000000 246.13673401]
[107.50000000 261.13674927]
[122.03988647 265.19805908]
[134.94427490 273.03256226]
[145.25555420 284.05889893]
[152.20857239 297.45883179]
[155.28736877 312.23797607]
[154.26348877 327.29965210]
[149.21287537 341.52618408]
[140.51036072 353.86184692]
[128.80169678 363.39126587]
[114.95575714 369.40728760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 56]
[24 55]
[27 35]
[28 34]
[36 52]
[37 51]
[38 50]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
[62 99]
[65 96]
[66 95]
[67 90]
[68 89]
[69 88]
[70 87]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
