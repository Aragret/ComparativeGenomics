%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUACACAGGGGGGGGGGAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCxxxxxxxxxxACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUACCCCCCCCCCAUCAUACAAA\
) } def
/len { sequence length } bind def

/coor [
[104.31649017 673.56170654]
[90.47055054 667.54565430]
[78.76188660 658.01623535]
[70.05936432 645.68060303]
[65.00875854 631.45404053]
[63.98487091 616.39239502]
[67.06366730 601.61322021]
[74.01669312 588.21331787]
[84.32797241 577.18695068]
[97.23235321 569.35247803]
[111.77224731 565.29113770]
[111.77224731 550.29113770]
[111.77224731 535.29113770]
[111.77224731 520.29113770]
[111.77224731 505.29113770]
[111.77224731 490.29113770]
[111.77224731 475.29113770]
[111.77224731 460.29113770]
[111.77224731 445.29113770]
[111.77224731 430.29113770]
[104.03494263 417.56387329]
[111.77224731 403.76370239]
[111.14826965 388.77667236]
[109.90139008 373.82861328]
[100.84942627 365.74346924]
[99.72303772 353.25546265]
[107.67503357 343.04666138]
[106.73941040 328.07586670]
[105.80377960 313.10507202]
[91.12779999 310.17846680]
[77.69918060 303.54754639]
[66.43597412 293.65893555]
[58.10991669 281.18218994]
[53.29355621 266.96447754]
[52.32090378 251.97305298]
[55.26425171 237.22943115]
[61.92884827 223.73982239]
[71.86578369 212.42640686]
[84.40219879 204.06436157]
[98.68685913 199.22869873]
[97.75122833 184.25790405]
[96.81559753 169.28710938]
[95.87996674 154.31631470]
[94.94434357 139.34553528]
[79.15012360 135.33416748]
[65.81186676 125.05335236]
[57.38008499 109.84931946]
[55.61286545 92.00596619]
[61.22750854 74.40388489]
[73.71447754 60.05539322]
[64.44952393 48.25875473]
[55.18457794 36.46211624]
[45.91962814 24.66547394]
[31.02553749 28.00146866]
[16.16094017 24.53643036]
[4.27721119 14.95834446]
[-2.26612663 1.16894710]
[-2.16988850 -14.09386730]
[4.54681730 -27.79965401]
[16.55038452 -37.22712326]
[31.45749474 -40.50444031]
[46.30833054 -36.98089218]
[58.15425110 -27.35608101]
[64.64323425 -13.54102230]
[64.48689270 1.72129416]
[57.71626663 15.40052509]
[66.98121643 27.19716454]
[76.24616241 38.99380493]
[85.51111603 50.79044724]
[93.01071167 50.86846542]
[90.53556061 36.07408524]
[88.06041718 21.27970505]
[85.58526611 6.48532724]
[83.11012268 -8.30905151]
[77.76317596 -22.32369423]
[81.96743774 -36.72245026]
[94.01554871 -45.65794754]
[109.01473236 -45.50145721]
[120.87378693 -36.31653214]
[124.77671814 -21.83319473]
[119.13945770 -7.93423843]
[116.35707092 6.80544615]
[113.57467651 21.54513168]
[110.79228973 36.28481674]
[108.00989532 51.02450180]
[115.50949097 51.10251999]
[125.01785278 39.50117874]
[134.52621460 27.89983559]
[144.03456116 16.29849434]
[143.88891602 0.25610274]
[156.43090820 -9.74779797]
[172.03939819 -6.03907108]
[178.74089050 8.53726578]
[171.39456177 22.79949379]
[155.63591003 25.80685234]
[146.12754822 37.40819550]
[136.61918640 49.00953674]
[127.11083221 60.61087799]
[138.68350220 74.26959991]
[144.14833069 90.77788544]
[143.07434082 107.62020874]
[135.99806213 122.37494659]
[124.29172516 133.06256104]
[109.91513062 138.40989685]
[110.85076141 153.38069153]
[111.78639221 168.35148621]
[112.72201538 183.32228088]
[113.65764618 198.29306030]
[128.43322754 201.31256104]
[141.91323853 208.04866028]
[153.18144226 218.03681946]
[161.47373962 230.59167480]
[166.22987366 244.85409546]
[167.13134766 259.84997559]
[164.12266541 274.55673218]
[157.41484070 287.97305298]
[147.47048950 299.18707275]
[134.97196960 307.43835449]
[120.77457428 312.16946411]
[121.71019745 327.14025879]
[122.64582825 342.11105347]
[133.18850708 357.17196655]
[124.84947968 372.58172607]
[126.09635162 387.52981567]
[128.79635620 391.11749268]
[130.04638672 394.99157715]
[129.93928528 398.64813232]
[128.72590637 401.66833496]
[126.77224731 403.76370239]
[134.50953674 417.56387329]
[126.77224731 430.29113770]
[126.77224731 445.29113770]
[126.77224731 460.29113770]
[126.77224731 475.29113770]
[126.77224731 490.29113770]
[126.77224731 505.29113770]
[126.77224731 520.29113770]
[126.77224731 535.29113770]
[126.77224731 550.29113770]
[126.77224731 565.29113770]
[141.31213379 569.35247803]
[154.21650696 577.18695068]
[164.52780151 588.21331787]
[171.48081970 601.61322021]
[174.55961609 616.39239502]
[173.53572083 631.45404053]
[168.48512268 645.68060303]
[159.78259277 658.01623535]
[148.07394409 667.54565430]
[134.22799683 673.56170654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 124]
[24 123]
[27 121]
[28 120]
[29 119]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
[50 69]
[51 68]
[52 67]
[53 66]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
