%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUACACUGGGGGGGGGGUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAAxxxxxxxxxxUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGCCCCCCCCCCAACUGACACU\
) } def
/len { sequence length } bind def

/coor [
[60.87940216 664.63964844]
[47.03346252 658.62359619]
[35.32480240 649.09417725]
[26.62227631 636.75854492]
[21.57167435 622.53198242]
[20.54778290 607.47033691]
[23.62658119 592.69116211]
[30.57960320 579.29125977]
[40.89088821 568.26489258]
[53.79526901 560.43041992]
[68.33515930 556.36907959]
[68.33515930 541.36907959]
[68.33515930 526.36907959]
[68.33515930 511.36907959]
[68.33515930 496.36907959]
[68.33515930 481.36907959]
[68.33515930 466.36907959]
[68.33515930 451.36907959]
[68.33515930 436.36907959]
[68.33515930 421.36907959]
[68.33515930 406.36907959]
[65.60478210 402.37902832]
[65.39627838 396.61813354]
[68.66019440 390.74835205]
[69.28417206 375.76132202]
[69.90814972 360.77432251]
[70.53212738 345.78729248]
[71.15610504 330.80029297]
[59.38554764 321.71228027]
[55.17357635 307.26501465]
[60.33667755 292.94036865]
[73.09201050 284.30279541]
[73.71598816 269.31576538]
[74.33996582 254.32875061]
[74.96393585 239.34173584]
[75.58791351 224.35472107]
[73.02588654 220.25453186]
[73.05721283 214.48995972]
[76.56247711 208.76103210]
[77.80934906 193.81294250]
[79.05622101 178.86485291]
[80.30310059 163.91676331]
[78.25939178 160.96876526]
[77.57874298 156.86529541]
[78.79695129 152.27526855]
[82.12266541 148.08489990]
[79.96762085 140.96441650]
[84.50227356 132.95886230]
[86.98738861 118.16615295]
[89.47251129 103.37345123]
[88.38119507 88.41320038]
[83.77563477 74.13774109]
[76.45652771 61.04458618]
[66.70887756 49.64356613]
[56.96122360 38.24254227]
[47.21357346 26.84152222]
[31.58027458 21.88853455]
[28.31776619 5.81719208]
[40.78223419 -4.83968687]
[56.15130234 0.88078201]
[58.61459351 17.09387016]
[68.36224365 28.49489212]
[78.10989380 39.89591217]
[87.85755157 51.29693222]
[85.50143433 36.48313141]
[87.53381348 21.62145615]
[93.78070831 7.98414278]
[103.70735168 -3.26137924]
[116.46396637 -11.15243340]
[130.95852661 -15.01350307]
[145.95019531 -14.51406097]
[160.15563965 -9.69686031]
[172.35877991 -0.97428060]
[181.51496887 10.90697956]
[186.84037781 24.92981911]
[187.87911987 39.89381027]
[184.54228210 54.51795197]
[177.11552429 67.55033875]
[166.23460388 77.87533569]
[152.83097839 84.60906219]
[138.05209351 87.17507172]
[123.16308594 85.35370636]
[109.43852997 79.30088043]
[98.05109406 69.53217316]
[102.65666199 83.80764008]
[109.86277008 85.88658142]
[124.27498627 90.04446411]
[131.48109436 92.12341309]
[142.98289490 82.49488831]
[154.48469543 72.86635590]
[165.98649597 63.23783112]
[163.25794983 48.12325287]
[168.46733093 33.67479706]
[180.21336365 23.77902985]
[195.33642578 21.09786415]
[209.76847839 26.35251617]
[219.62738037 38.12951279]
[222.26113892 53.26090240]
[216.96127319 67.67641449]
[205.15342712 77.49835205]
[190.01385498 80.08466339]
[175.61502075 74.73963928]
[164.11322021 84.36816406]
[152.61141968 93.99668884]
[141.10961914 103.62521362]
[131.28717041 109.72433472]
[121.11472321 111.94219208]
[111.75798035 110.48263550]
[104.26521301 105.85856628]
[101.78009796 120.65127563]
[99.29497528 135.44398499]
[96.96387482 150.26173401]
[95.25118256 165.16363525]
[94.00431061 180.11172485]
[92.75743866 195.05981445]
[91.51055908 210.00790405]
[90.57493591 224.97869873]
[89.95095825 239.96571350]
[89.32698059 254.95272827]
[88.70300293 269.93975830]
[88.07902527 284.92675781]
[100.07221222 294.59472656]
[104.02671051 309.29898071]
[98.62838745 323.34613037]
[86.14311981 331.42425537]
[85.51914215 346.41128540]
[84.89516449 361.39828491]
[84.27118683 376.38531494]
[83.64720917 391.37231445]
[83.33515930 406.36907959]
[83.33515930 421.36907959]
[83.33515930 436.36907959]
[83.33515930 451.36907959]
[83.33515930 466.36907959]
[83.33515930 481.36907959]
[83.33515930 496.36907959]
[83.33515930 511.36907959]
[83.33515930 526.36907959]
[83.33515930 541.36907959]
[83.33515930 556.36907959]
[97.87504578 560.43041992]
[110.77942657 568.26489258]
[121.09070587 579.29125977]
[128.04373169 592.69116211]
[131.12252808 607.47033691]
[130.09863281 622.53198242]
[125.04803467 636.75854492]
[116.34551239 649.09417725]
[104.63684845 658.62359619]
[90.79090881 664.63964844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[32 121]
[33 120]
[34 119]
[35 118]
[36 117]
[39 116]
[40 115]
[41 114]
[42 113]
[46 112]
[48 111]
[49 110]
[50 109]
[51 85]
[52 84]
[53 64]
[54 63]
[55 62]
[56 61]
[88 105]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
