%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCCUAGGGGGGGGGGCUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAxxxxxxxxxxGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACCCCCCCCCCCACCCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.43978882]
[71.19830322 372.42373657]
[59.48964310 362.89431763]
[50.78712082 350.55865479]
[45.73651886 336.33215332]
[44.71262741 321.27044678]
[47.79142761 306.49130249]
[54.74444962 293.09136963]
[65.05573273 282.06503296]
[77.96011353 274.23052979]
[92.50000000 270.16921997]
[92.50000000 255.16921997]
[92.50000000 240.16921997]
[92.50000000 225.16921997]
[92.50000000 210.16921997]
[92.50000000 195.16921997]
[92.50000000 180.16921997]
[92.50000000 165.16921997]
[92.50000000 150.16921997]
[92.50000000 135.16921997]
[84.31153870 132.35731506]
[77.03248596 127.66978455]
[71.08477020 121.37833405]
[66.81316376 113.84766388]
[64.46527863 105.51428986]
[64.17720795 96.86127472]
[65.96566010 88.39020538]
[69.72695160 80.59210205]
[59.06532669 70.04081726]
[48.40369797 59.48952484]
[37.74207306 48.93823242]
[24.87174606 56.77661896]
[10.50809383 61.30407333]
[-4.51263809 62.26155853]
[-19.31704140 59.59775925]
[-33.04532623 53.47178268]
[-44.90126038 44.24369431]
[-54.19833755 32.45333481]
[-60.39954758 18.78874397]
[-63.14836884 4.04602337]
[-62.28929520 -10.91705894]
[-57.87658691 -25.23097038]
[-50.17090988 -38.06494522]
[-60.83253479 -48.61623383]
[-71.49416351 -59.16752625]
[-84.81188965 -54.77616501]
[-98.65459442 -56.55680084]
[-110.31608582 -64.10361481]
[-117.54155731 -75.88921356]
[-118.96343994 -89.57341003]
[-114.35994720 -102.46788025]
[-124.79975891 -113.23868561]
[-135.23957825 -124.00949860]
[-145.67938232 -134.78030396]
[-156.11920166 -145.55111694]
[-171.48463440 -152.71629333]
[-168.85305786 -169.46475220]
[-152.03062439 -171.57244873]
[-145.34838867 -155.99092102]
[-134.90858459 -145.22012329]
[-124.46876526 -134.44931030]
[-114.02895355 -123.67849731]
[-103.58914185 -112.90769196]
[-88.04993439 -117.23026276]
[-72.35614777 -113.12087250]
[-60.79682541 -101.60514069]
[-56.58002472 -85.74594116]
[-60.94287109 -69.82915497]
[-50.28124237 -59.27786255]
[-39.61961746 -48.72657013]
[-26.86649704 -56.56533813]
[-12.59926224 -61.12670517]
[2.35407448 -62.14138794]
[17.12459183 -59.54607391]
[30.85294914 -53.48734665]
[42.73938370 -44.31341934]
[52.09030533 -32.55412292]
[58.35875702 -18.89030457]
[61.17641449 -4.11441135]
[60.37523270 10.91546822]
[55.99744034 25.32543945]
[48.29336166 38.27660751]
[58.95499039 48.82789612]
[69.61661530 59.37918854]
[80.27824402 69.93048096]
[108.15808105 64.97758484]
[130.97940063 81.74074554]
[145.20619202 76.98693085]
[159.43296814 72.23311615]
[170.06965637 60.52109528]
[184.59297180 63.82601166]
[198.81974792 59.07219696]
[213.04652405 54.31838226]
[224.89001465 40.25738907]
[241.92591858 44.35348129]
[256.05072021 39.30472565]
[270.17553711 34.25597000]
[284.07809448 28.62401390]
[297.73431396 22.41860580]
[311.39056396 16.21319962]
[318.34902954 1.75777853]
[334.02075195 -1.67405999]
[346.38366699 8.55029583]
[345.95407104 24.58759689]
[333.06146240 34.13539505]
[317.59597778 29.86944008]
[303.93972778 36.07484818]
[290.28350830 42.28025436]
[289.18405151 44.92573929]
[286.93637085 47.27986145]
[283.65170288 48.89006424]
[279.60754395 49.35469818]
[275.22427368 48.38077164]
[261.09948730 53.42952728]
[246.97468567 58.47828674]
[241.48908997 69.30490112]
[229.71066284 73.60462952]
[217.80033875 68.54516602]
[203.57356262 73.29898071]
[189.34678650 78.05279541]
[179.72769165 89.42478943]
[164.18678284 86.45989990]
[149.96000671 91.21371460]
[135.73321533 95.96752930]
[135.78726196 103.52072144]
[134.26234436 110.91857910]
[131.22575378 117.83469391]
[126.81144714 123.96393585]
[121.21420288 129.03587341]
[114.68096924 132.82670593]
[107.50000000 135.16921997]
[107.50000000 150.16921997]
[107.50000000 165.16921997]
[107.50000000 180.16921997]
[107.50000000 195.16921997]
[107.50000000 210.16921997]
[107.50000000 225.16921997]
[107.50000000 240.16921997]
[107.50000000 255.16921997]
[107.50000000 270.16921997]
[122.03988647 274.23052979]
[134.94427490 282.06503296]
[145.25555420 293.09136963]
[152.20857239 306.49130249]
[155.28736877 321.27044678]
[154.26348877 336.33215332]
[149.21287537 350.55865479]
[140.51036072 362.89431763]
[128.80169678 372.42373657]
[114.95575714 378.43978882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 85]
[29 84]
[30 83]
[31 82]
[43 70]
[44 69]
[45 68]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[87 124]
[88 123]
[89 122]
[91 120]
[92 119]
[93 118]
[95 115]
[96 114]
[97 113]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
