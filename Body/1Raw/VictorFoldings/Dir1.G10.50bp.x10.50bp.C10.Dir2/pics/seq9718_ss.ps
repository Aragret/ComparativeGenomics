%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAACCUAGGGGGGGGGGCUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAxxxxxxxxxxCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCCCCCCCCCCCUAAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[93.46850586 372.54211426]
[79.62256622 366.52609253]
[67.91390991 356.99667358]
[59.21138382 344.66101074]
[54.16078186 330.43447876]
[53.13689041 315.37280273]
[56.21569061 300.59365845]
[63.16871262 287.19372559]
[73.47999573 276.16738892]
[86.38437653 268.33288574]
[100.92426300 264.27157593]
[100.92426300 249.27156067]
[100.92426300 234.27156067]
[100.92426300 219.27156067]
[100.92426300 204.27156067]
[100.92426300 189.27156067]
[100.92426300 174.27156067]
[100.92426300 159.27156067]
[100.92426300 144.27156067]
[100.92426300 129.27156067]
[78.64865112 112.47439575]
[82.75011444 89.54574585]
[73.73258209 77.55891418]
[64.71504974 65.57208252]
[55.69752121 53.58525085]
[46.67999268 41.59841919]
[37.66246414 29.61158562]
[28.64493370 17.62475395]
[15.83392239 25.44993782]
[2.32747078 32.00213623]
[-11.74831200 37.22016907]
[-26.26200104 41.05531311]
[-41.07808304 43.47176743]
[-56.05821991 44.44696426]
[-71.06254578 43.97179413]
[-85.95095825 42.05070496]
[-100.58445740 38.70162582]
[-114.82639313 33.95582581]
[-128.54380798 27.85762215]
[-141.60861206 20.46394920]
[-153.89881897 11.84384346]
[-165.29968262 2.07778883]
[-175.70475769 -8.74302769]
[-185.01687622 -20.51757431]
[-193.14910889 -33.13591003]
[-200.02549744 -46.48022461]
[-205.58187866 -60.42591095]
[-209.76632690 -74.84277344]
[-212.53981018 -89.59619141]
[-213.87641907 -104.54840851]
[-213.76367188 -119.55983734]
[-212.20262146 -134.49029541]
[-209.20783997 -149.20039368]
[-204.80729675 -163.55276489]
[-199.04208374 -177.41342163]
[-191.96600342 -190.65293884]
[-183.64515686 -203.14768982]
[-174.15722656 -214.78103638]
[-163.59080505 -225.44433594]
[-152.04452515 -235.03804016]
[-139.62622070 -243.47256470]
[-126.45182800 -250.66915894]
[-112.64436340 -256.56063843]
[-98.33274078 -261.09194946]
[-83.65058899 -264.22085571]
[-68.73500061 -265.91809082]
[-53.72522736 -266.16781616]
[-38.76142883 -264.96771240]
[-23.98331642 -262.32897949]
[-9.52887249 -258.27627563]
[4.46694183 -252.84739685]
[17.87344933 -246.09306335]
[30.56547356 -238.07632446]
[42.42451096 -228.87203979]
[53.33982849 -218.56616211]
[63.20951843 -207.25488281]
[71.94142151 -195.04385376]
[79.45401001 -182.04705811]
[85.67714691 -168.38587952]
[90.55271149 -154.18783569]
[94.03519440 -139.58551025]
[96.09207153 -124.71524811]
[96.70413971 -109.71588135]
[95.86569214 -94.72747040]
[93.58454895 -79.88995361]
[89.88201141 -65.34187317]
[84.79264832 -51.21905518]
[78.36397552 -37.65337372]
[70.65602875 -24.77148628]
[61.74076462 -12.69367027]
[51.70143127 -1.53269756]
[40.63176727 8.60722351]
[49.64929581 20.59405708]
[58.66682434 32.58089066]
[67.68435669 44.56772232]
[76.70188141 56.55455399]
[85.71941376 68.54138947]
[94.73694611 80.52822113]
[114.20605469 79.75947571]
[129.18566895 97.57601166]
[144.08757019 95.86331940]
[158.98947144 94.15063477]
[173.89137268 92.43794250]
[188.79327393 90.72525024]
[193.75354004 76.29062653]
[204.49163818 65.44369507]
[218.87551880 60.33811951]
[234.04924011 61.98762894]
[247.00006104 70.06470490]
[255.15657043 82.96562958]
[256.89929199 98.12892914]
[251.88223267 112.54391479]
[241.10150146 123.34848022]
[226.69763184 128.39736938]
[211.53051758 126.68811798]
[198.61161804 118.56010437]
[190.50596619 105.62715912]
[175.60406494 107.33984375]
[160.70216370 109.05253601]
[145.80026245 110.76522827]
[130.89834595 112.47791290]
[144.79710388 118.11923981]
[159.58143616 120.65370178]
[170.26498413 131.18280029]
[173.01448059 145.92864990]
[166.84336853 159.60043335]
[153.96589661 167.29266357]
[139.00250244 166.24536133]
[127.32209015 156.83430481]
[123.11564636 142.43530273]
[115.92426300 129.27156067]
[115.92426300 144.27156067]
[115.92426300 159.27156067]
[115.92426300 174.27156067]
[115.92426300 189.27156067]
[115.92426300 204.27156067]
[115.92426300 219.27156067]
[115.92426300 234.27156067]
[115.92426300 249.27156067]
[115.92426300 264.27157593]
[130.46415710 268.33288574]
[143.36853027 276.16738892]
[153.67980957 287.19372559]
[160.63284302 300.59365845]
[163.71163940 315.37280273]
[162.68774414 330.43447876]
[157.63714600 344.66101074]
[148.93461609 356.99667358]
[137.22595215 366.52609253]
[123.38002014 372.54211426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
