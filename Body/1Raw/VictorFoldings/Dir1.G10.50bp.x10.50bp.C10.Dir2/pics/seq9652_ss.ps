%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACUCCCGGGGGGGGGGUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAxxxxxxxxxxCCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAACCCCCCCCCCACCCCCUCCC\
) } def
/len { sequence length } bind def

/coor [
[81.69148254 573.70715332]
[67.84554291 567.69110107]
[56.13688278 558.16168213]
[47.43435669 545.82604980]
[42.38375473 531.59948730]
[41.35986328 516.53784180]
[44.43866348 501.75866699]
[51.39168549 488.35873413]
[61.70296860 477.33242798]
[74.60735321 469.49789429]
[89.14723969 465.43658447]
[89.14723969 450.43658447]
[89.14723969 435.43658447]
[89.14723969 420.43658447]
[89.14723969 405.43658447]
[89.14723969 390.43658447]
[89.14723969 375.43658447]
[89.14723969 360.43658447]
[89.14723969 345.43658447]
[89.14723969 330.43658447]
[89.14723969 315.43658447]
[75.28498840 311.66937256]
[62.86582184 304.42590332]
[52.74480057 294.19760132]
[45.62065506 281.68164062]
[41.98754120 267.73336792]
[42.10077667 253.30801392]
[45.95890808 239.39508057]
[53.30337524 226.95060730]
[63.63583374 216.83142090]
[76.25195312 209.73612976]
[90.28943634 206.15695190]
[90.60149384 191.16020203]
[90.91355133 176.16345215]
[91.22560120 161.16670227]
[77.73419952 157.64190674]
[65.37664032 151.18180847]
[54.78220749 142.11538696]
[46.49039841 130.90432739]
[40.92345810 118.11952209]
[38.36487198 104.41201782]
[38.94493103 90.47983551]
[42.63409805 77.03245544]
[49.24451065 64.75464630]
[58.43954086 54.27163696]
[69.75095367 46.11725616]
[82.60274506 40.70674133]
[96.34045410 38.31562042]
[97.27607727 23.34482956]
[98.21170807 8.37403870]
[99.14733887 -6.59675312]
[100.08296204 -21.56754494]
[100.08296204 -36.56754303]
[99.14733887 -51.53833771]
[98.21170807 -66.50912476]
[93.90412140 -80.87731171]
[86.44921112 -93.89362335]
[78.99430084 -106.90992737]
[71.53939056 -119.92623901]
[64.08448029 -132.94255066]
[49.04184341 -138.51916504]
[44.15993500 -153.80139160]
[53.18374252 -167.06602478]
[69.19097137 -168.13755798]
[79.90224457 -156.19403076]
[77.10079193 -140.39746094]
[84.55570221 -127.38114929]
[92.01061249 -114.36483765]
[99.46552277 -101.34853363]
[106.92043304 -88.33222198]
[107.28755951 -103.32772827]
[111.45261383 -117.73787689]
[119.14224243 -130.61691284]
[129.85177612 -141.11956787]
[142.87832642 -148.55656433]
[157.36697388 -152.43978882]
[172.36677551 -152.51438904]
[186.89332581 -148.77546692]
[199.99320984 -141.46841431]
[210.80667114 -131.07278442]
[218.62402344 -118.27087402]
[222.93220520 -103.90287018]
[223.44845581 -88.91175842]
[220.13891602 -74.28141022]
[213.22076416 -60.97204590]
[203.14807129 -49.85715485]
[190.58190918 -41.66622162]
[176.34698486 -36.93682480]
[161.37757874 -35.97935867]
[146.65612793 -38.85665894]
[133.14881897 -45.37989044]
[121.74214172 -55.12092590]
[113.18250275 -67.44475555]
[114.11812592 -52.47396469]
[115.05375671 -37.50317383]
[126.06036377 -47.69408035]
[141.05543518 -47.30970001]
[151.52546692 -36.56826019]
[151.52604675 -21.56826019]
[141.05685425 -10.82600880]
[126.06180573 -10.44046307]
[115.05375671 -20.63191605]
[114.11812592 -5.66112471]
[113.18250275 9.30966663]
[112.24687195 24.28045845]
[111.31124115 39.25125122]
[126.53132629 44.19279861]
[139.97213745 52.87694168]
[150.73231506 64.72129059]
[158.09022522 78.93153381]
[161.55244446 94.55468750]
[160.88677979 110.54301453]
[156.13786316 125.82430267]
[147.62419128 139.37373352]
[135.91670227 150.28265381]
[121.80052948 157.81947327]
[106.22235870 161.47875977]
[105.91030121 176.47550964]
[105.59824371 191.47225952]
[105.28618622 206.46900940]
[120.27128601 211.14321899]
[133.32771301 219.83091736]
[143.40837097 231.82560730]
[149.70755005 246.15596008]
[151.72535706 261.66445923]
[149.30734253 277.10092163]
[142.65628052 291.22335815]
[132.31527710 302.89770508]
[119.12330627 311.18908691]
[104.14723969 315.43658447]
[104.14723969 330.43658447]
[104.14723969 345.43658447]
[104.14723969 360.43658447]
[104.14723969 375.43658447]
[104.14723969 390.43658447]
[104.14723969 405.43658447]
[104.14723969 420.43658447]
[104.14723969 435.43658447]
[104.14723969 450.43658447]
[104.14723969 465.43658447]
[118.68712616 469.49789429]
[131.59150696 477.33242798]
[141.90278625 488.35873413]
[148.85580444 501.75866699]
[151.93461609 516.53784180]
[150.91072083 531.59948730]
[145.86012268 545.82604980]
[137.15759277 558.16168213]
[125.44892883 567.69110107]
[111.60298920 573.70715332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 120]
[33 119]
[34 118]
[35 117]
[48 106]
[49 105]
[50 104]
[51 103]
[52 102]
[53 95]
[54 94]
[55 93]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
