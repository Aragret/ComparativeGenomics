%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAACUAGGGGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUxxxxxxxxxxACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUCCCCCCCCCCAUAAACCUAG\
) } def
/len { sequence length } bind def

/coor [
[86.79535675 584.61975098]
[72.30566406 580.41125488]
[59.39943314 572.59515381]
[48.95663452 561.70434570]
[41.68927002 548.48132324]
[38.09284210 533.82769775]
[38.41256332 518.74261475]
[42.62663651 504.25454712]
[50.44773102 491.35131836]
[61.34260178 480.91275024]
[74.56840515 473.65048218]
[89.22340393 470.05972290]
[89.53545380 455.06295776]
[89.84751129 440.06619263]
[90.15956879 425.06945801]
[90.47162628 410.07269287]
[90.78368378 395.07595825]
[91.09574127 380.07919312]
[91.40779114 365.08242798]
[91.71984863 350.08569336]
[92.03190613 335.08892822]
[92.34396362 320.09216309]
[92.50000000 305.09298706]
[92.50000000 290.09298706]
[92.50000000 275.09298706]
[92.50000000 260.09298706]
[77.80443573 257.19219971]
[63.95278549 251.47821045]
[51.47812653 243.16889954]
[40.86095047 232.58206177]
[32.51063156 220.12324524]
[26.74966240 206.27027893]
[23.80118752 191.55482483]
[23.78036499 176.54211426]
[26.68986511 161.80914307]
[32.41970444 147.92248535]
[40.75139618 135.41659546]
[51.36627960 124.77314758]
[63.85771179 116.40253448]
[77.74665070 110.62802887]
[92.50000000 107.67328644]
[90.16889954 92.85552979]
[85.56333160 78.58007050]
[80.95776367 64.30461121]
[76.35220337 50.02914810]
[71.74663544 35.75368881]
[67.14107513 21.47822762]
[62.42750931 16.69389534]
[61.08922195 11.08673191]
[62.65426254 6.51221895]
[58.64652252 -7.94246960]
[54.63878250 -22.39715767]
[50.63104248 -36.85184479]
[42.90193558 -23.99646187]
[28.77573776 -18.95160866]
[14.65175343 -24.00265503]
[6.92828608 -36.86142731]
[9.10414124 -51.70277786]
[20.19363594 -61.80342865]
[35.17311859 -62.58768082]
[47.25696564 -53.69993591]
[45.38935471 -68.58321381]
[43.52173996 -83.46649170]
[28.66067886 -86.29563904]
[15.40219784 -93.58040619]
[5.04522896 -104.60711670]
[-1.39555836 -118.29548645]
[-3.28916097 -133.30445862]
[-0.45006323 -148.16363525]
[6.84358931 -161.41722107]
[17.87723923 -171.76679993]
[31.56991959 -178.19841003]
[46.58016586 -180.08195496]
[61.43741989 -177.23291016]
[74.68612671 -169.93037415]
[85.02831268 -158.88980103]
[91.45074463 -145.19281006]
[93.32423401 -130.18130493]
[90.46522522 -115.32595825]
[83.15381622 -102.08214569]
[72.10630798 -91.74736786]
[58.40502167 -85.33410645]
[60.27263260 -70.45082855]
[62.14024734 -55.56754684]
[65.08573151 -40.85958481]
[69.09346771 -26.40489769]
[73.10121155 -11.95020962]
[77.10894775 2.50447869]
[81.41653442 16.87266350]
[86.02210236 31.14812279]
[90.62766266 45.42358398]
[95.23323059 59.69904327]
[99.83879089 73.97450256]
[104.44435883 88.24996948]
[108.36090851 73.77030182]
[117.16192627 61.62361145]
[129.70127869 53.39168930]
[144.34603882 50.14654160]
[159.18908691 52.31077194]
[172.29748535 59.60253906]
[181.96418762 71.07227325]
[186.93035889 85.22632599]
[186.54925537 100.22148132]
[180.87052917 114.10500336]
[170.63368225 125.06889343]
[157.17179871 131.68537903]
[142.23797607 133.09283447]
[127.77696991 129.10797119]
[115.67195892 120.24972534]
[107.50000000 107.67328644]
[122.25334930 110.62802887]
[136.14228821 116.40253448]
[148.63372803 124.77314758]
[159.24861145 135.41659546]
[167.58029175 147.92248535]
[173.31013489 161.80914307]
[176.21963501 176.54211426]
[176.19880676 191.55482483]
[173.25033569 206.27027893]
[167.48936462 220.12324524]
[159.13905334 232.58206177]
[148.52186584 243.16889954]
[136.04721069 251.47821045]
[122.19556427 257.19219971]
[107.50000000 260.09298706]
[107.50000000 275.09298706]
[107.50000000 290.09298706]
[107.50000000 305.09298706]
[110.64566803 313.73916626]
[107.34071350 320.40423584]
[107.02866364 335.40097046]
[106.71660614 350.39773560]
[106.40454865 365.39450073]
[106.09249115 380.39123535]
[105.78043365 395.38800049]
[105.46837616 410.38476562]
[105.15632629 425.38150024]
[104.84426880 440.37826538]
[104.53221130 455.37500000]
[104.22015381 470.37176514]
[118.71308899 474.56906128]
[131.62535095 482.37521362]
[142.07655334 493.25796509]
[149.35414124 506.47534180]
[152.96186829 521.12615967]
[152.65380859 536.21154785]
[148.45092773 550.70281982]
[140.63978577 563.61206055]
[129.75299072 574.05908203]
[116.53279114 581.33154297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 128]
[24 127]
[25 126]
[26 125]
[41 110]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[50 88]
[51 87]
[52 86]
[53 85]
[61 84]
[62 83]
[63 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
