%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACCUAGGGGGGGGGGUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACxxxxxxxxxxUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCCCCCCCCCCCUCCUACUUA\
) } def
/len { sequence length } bind def

/coor [
[70.50565338 378.61557007]
[56.65970993 372.59954834]
[44.95104980 363.07012939]
[36.24852371 350.73446655]
[31.19792366 336.50793457]
[30.17403221 321.44625854]
[33.25283051 306.66711426]
[40.20585251 293.26718140]
[50.51713562 282.24084473]
[63.42151642 274.40634155]
[77.96140289 270.34503174]
[77.96140289 255.34501648]
[77.96140289 240.34501648]
[77.96140289 225.34501648]
[77.96140289 210.34501648]
[77.96140289 195.34501648]
[77.96140289 180.34501648]
[77.96140289 165.34501648]
[77.96140289 150.34501648]
[77.96140289 135.34501648]
[66.87008667 125.24637604]
[51.93578339 126.64867401]
[37.00147247 128.05097961]
[32.46733856 142.53260803]
[22.76037788 154.14370728]
[9.38366699 161.13493347]
[-5.60997009 162.46852112]
[-19.93297958 157.97227478]
[-31.41208267 148.36105347]
[-38.31803894 135.12333679]
[-53.25234604 136.52565002]
[-68.18665314 137.92794800]
[-83.12096405 139.33026123]
[-96.17384338 149.25770569]
[-111.19104004 142.66864014]
[-112.72414398 126.34130859]
[-99.19602966 117.07187653]
[-84.52326202 124.39594269]
[-69.58895874 122.99364471]
[-54.65465164 121.59133911]
[-39.72034073 120.18903351]
[-35.39936829 105.89713287]
[-25.91008759 94.31702423]
[-12.67443943 87.23306274]
[2.30536819 85.75220490]
[16.74971199 90.13108063]
[28.44846535 99.73223877]
[35.59917068 113.11667633]
[50.53347778 111.71437073]
[65.46778870 110.31206512]
[66.93718719 94.88395691]
[74.47079468 82.63810730]
[64.48806763 71.44234467]
[54.50534058 60.24657822]
[44.52261734 49.05081177]
[34.53989029 37.85504532]
[19.48581505 30.05689621]
[22.81182861 13.43239689]
[39.70736694 12.02630901]
[45.73565674 27.87232018]
[55.71837997 39.06808472]
[65.70111084 50.26385117]
[75.68383789 61.45961761]
[85.66656494 72.65538025]
[94.96142578 63.80626297]
[108.64082336 58.68186188]
[107.70519257 43.71107101]
[93.41893768 38.43632507]
[82.51776886 27.80221367]
[76.89036560 13.65116405]
[77.51171112 -1.56507099]
[84.27416229 -15.21018696]
[96.00607300 -24.92008400]
[110.67482758 -29.01246452]
[125.73896790 -26.77829933]
[138.58854675 -18.60466957]
[146.99729919 -5.90770626]
[149.50834656 9.11276340]
[145.68664551 23.85435295]
[136.19432068 35.76299286]
[122.67597961 42.77544022]
[123.61161041 57.74623489]
[137.06758118 64.37473297]
[149.50701904 55.99258804]
[161.94645691 47.61044693]
[174.38589478 39.22830200]
[186.82533264 30.84615898]
[199.26478577 22.46401596]
[211.70422363 14.08187294]
[197.84327698 8.34827995]
[193.47937012 -6.00290060]
[201.80218506 -18.48211670]
[216.72839355 -19.96807289]
[227.34815979 -9.37465382]
[225.89962769 5.55464268]
[239.14221191 -1.49049234]
[252.38479614 -8.53562737]
[254.40736389 -23.92032242]
[265.11096191 -35.15476990]
[280.37982178 -37.91909790]
[294.34277344 -31.15036201]
[301.63076782 -17.45128250]
[299.44140625 -2.08943367]
[288.61657715 9.02824020]
[273.31863403 11.62676620]
[259.42993164 4.70695829]
[246.18734741 11.75209332]
[232.94476318 18.79722786]
[220.08636475 26.52131271]
[207.64692688 34.90345764]
[195.20747375 43.28559875]
[182.76803589 51.66774368]
[170.32859802 60.04988480]
[157.88916016 68.43202972]
[145.44972229 76.81417084]
[147.16241455 91.71607208]
[161.17912292 97.05758667]
[175.19583130 102.39910126]
[189.21255493 107.74061584]
[204.38182068 102.51830292]
[217.84486389 111.24333191]
[219.27397156 127.22260284]
[207.57286072 138.19819641]
[191.71762085 135.75056458]
[183.87103271 121.75732422]
[169.85432434 116.41580963]
[155.83761597 111.07430267]
[141.82089233 105.73278809]
[131.22439575 125.24695587]
[112.96098328 135.82417297]
[92.96140289 135.34501648]
[92.96140289 150.34501648]
[92.96140289 165.34501648]
[92.96140289 180.34501648]
[92.96140289 195.34501648]
[92.96140289 210.34501648]
[92.96140289 225.34501648]
[92.96140289 240.34501648]
[92.96140289 255.34501648]
[92.96140289 270.34503174]
[107.50128937 274.40634155]
[120.40567017 282.24084473]
[130.71696472 293.26718140]
[137.66998291 306.66711426]
[140.74877930 321.44625854]
[139.72488403 336.50793457]
[134.67428589 350.73446655]
[125.97176361 363.07012939]
[114.26309967 372.59954834]
[100.41716003 378.61557007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 50]
[22 49]
[23 48]
[30 41]
[31 40]
[32 39]
[33 38]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[66 82]
[67 81]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[95 108]
[96 107]
[97 106]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
