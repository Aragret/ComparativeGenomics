%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCACAAUUCUAGGGGGGGGGGAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUxxxxxxxxxxUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUCCCCCCCCCCUUCACACUUCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 395.90008545]
[70.87159729 390.74508667]
[58.28185654 382.46286011]
[47.94191742 371.50009155]
[40.40940475 358.44796753]
[36.09054184 344.01037598]
[35.21823120 328.96591187]
[37.83952332 314.12591553]
[43.81304932 300.29067993]
[52.81666565 288.20632935]
[64.36482239 278.52453613]
[77.83473969 271.76748657]
[92.50000000 268.29949951]
[92.50000000 253.29949951]
[92.50000000 238.29949951]
[92.50000000 223.29949951]
[92.50000000 208.29949951]
[92.50000000 193.29949951]
[92.50000000 178.29949951]
[92.50000000 163.29949951]
[92.50000000 148.29949951]
[92.50000000 133.29949951]
[92.50000000 118.29949951]
[80.82688141 108.87939453]
[66.16529083 112.04761505]
[51.50369263 115.21583557]
[36.84209824 118.38405609]
[22.18050194 121.55228424]
[17.56017113 136.19973755]
[6.22428417 146.56280518]
[-8.77786446 149.85388184]
[-23.41077042 145.18765259]
[-33.73825836 133.81933594]
[-36.98228073 118.80695343]
[-32.27021790 104.18874359]
[-20.86958694 93.89694214]
[-5.84710169 90.69998932]
[8.75626564 95.45784760]
[19.01228142 106.89068604]
[33.67387772 103.72246552]
[48.33547211 100.55424500]
[62.99706650 97.38602448]
[77.65866089 94.21780396]
[79.53855896 86.95722198]
[68.84273529 76.44059753]
[83.29834747 72.43606567]
[85.17823792 65.17549133]
[73.89646912 55.29006195]
[62.61469269 45.40464020]
[48.99975586 52.16495895]
[33.83378983 53.19548035]
[19.42950058 48.33905411]
[7.98343277 38.33625793]
[1.24103034 24.71243858]
[0.23046055 9.54513073]
[5.10582781 -4.85275888]
[15.12367439 -16.28565788]
[28.75635147 -23.01013374]
[43.92497253 -24.00074959]
[58.31643677 -19.10644722]
[69.73615265 -9.07357025]
[76.44268799 4.56794071]
[77.41334534 19.73785400]
[72.50011444 34.12286758]
[83.78189087 44.00829315]
[95.06365967 53.89371490]
[104.46510315 66.52244568]
[107.69479370 80.26911163]
[104.92432404 92.97079468]
[116.78595734 83.78920746]
[128.64759827 74.60761261]
[140.50923157 65.42602539]
[133.66046143 52.03458786]
[129.39024353 37.61649323]
[127.84258270 22.66319656]
[129.06874084 7.68411303]
[133.02549744 -6.81073713]
[139.57666016 -20.32809067]
[148.49783325 -32.40822601]
[159.48399353 -42.64060211]
[172.15998840 -50.67780685]
[186.09332275 -56.24736023]
[200.80892944 -59.16093445]
[215.80535889 -59.32074738]
[230.57186890 -56.72281647]
[244.60578918 -51.45706177]
[257.42971802 -43.70419693]
[268.60763550 -33.72951126]
[273.51559448 -41.50466156]
[280.80398560 -42.97407150]
[292.84927368 -51.91337585]
[304.89456177 -60.85268021]
[300.54510498 -75.37363434]
[301.42752075 -90.50628662]
[307.43521118 -104.42329407]
[317.84277344 -115.44411469]
[331.39343262 -122.23793030]
[346.45083618 -123.98435211]
[361.19677734 -120.47248840]
[373.85058594 -112.12642670]
[382.88427734 -99.95397949]
[387.20693970 -85.42503357]
[386.29666138 -70.29403687]
[380.26330566 -56.38811874]
[369.83544922 -45.38649750]
[356.27230835 -38.61766434]
[341.21170044 -36.89899445]
[326.47225952 -40.43802261]
[313.83386230 -48.80739594]
[301.78857422 -39.86809158]
[289.74328613 -30.92878723]
[277.78921509 -21.86787605]
[284.64370728 -8.54660797]
[288.93472290 5.81120634]
[290.51473999 20.71700478]
[289.32849121 35.66329575]
[285.41488647 50.14093781]
[278.90582275 63.65649033]
[270.02163696 75.74900818]
[259.06372070 86.00579834]
[246.40428162 94.07647705]
[232.47366333 99.68494415]
[217.74575806 102.63882446]
[202.72186279 102.83609772]
[187.91360474 100.26856232]
[173.82559204 95.02222443]
[160.93811035 87.27439117]
[149.69082642 77.28765869]
[137.82917786 86.46925354]
[125.96754456 95.65084076]
[114.10591125 104.83242798]
[107.50000000 118.29949951]
[107.50000000 133.29949951]
[107.50000000 148.29949951]
[107.50000000 163.29949951]
[107.50000000 178.29949951]
[107.50000000 193.29949951]
[107.50000000 208.29949951]
[107.50000000 223.29949951]
[107.50000000 238.29949951]
[107.50000000 253.29949951]
[107.50000000 268.29949951]
[122.16526031 271.76748657]
[135.63517761 278.52453613]
[147.18333435 288.20632935]
[156.18695068 300.29067993]
[162.16047668 314.12591553]
[164.78176880 328.96591187]
[163.90945435 344.01037598]
[159.59059143 358.44796753]
[152.05809021 371.50009155]
[141.71813965 382.46286011]
[129.12840271 390.74508667]
[114.96779633 395.90008545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[47 66]
[48 65]
[49 64]
[69 131]
[70 130]
[71 129]
[72 128]
[88 112]
[90 111]
[91 110]
[92 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
