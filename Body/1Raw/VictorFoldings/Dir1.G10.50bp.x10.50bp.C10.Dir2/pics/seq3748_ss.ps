%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAACUCAAACUACGGGGGGGGGGGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCxxxxxxxxxxGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUCCCCCCCCCCAGCAAACUCAAACUACG\
) } def
/len { sequence length } bind def

/coor [
[162.11244202 564.48840332]
[147.88516235 559.61437988]
[134.72050476 552.34375000]
[123.01848602 542.89733887]
[113.13474274 531.56231689]
[105.36962128 518.68310547]
[99.95909119 504.65112305]
[97.06758881 489.89273071]
[96.78296661 474.85644531]
[99.11388397 459.99917603]
[103.98950958 445.77246094]
[111.26166534 432.60861206]
[120.70936584 420.90768433]
[132.04550171 411.02520752]
[144.92559814 403.26156616]
[158.95822144 397.85263062]
[173.71694946 394.96279907]
[173.43136597 379.96551514]
[173.14578247 364.96823120]
[172.86019897 349.97094727]
[172.57461548 334.97366333]
[172.28903198 319.97637939]
[172.00344849 304.97909546]
[171.71788025 289.98181152]
[171.43229675 274.98452759]
[171.14671326 259.98727417]
[167.33343506 245.48005676]
[160.20744324 232.28080750]
[153.08145142 219.08154297]
[145.95547485 205.88229370]
[138.70414734 192.75148010]
[131.32815552 179.69029236]
[128.00045776 178.40080261]
[125.14567566 175.41004944]
[123.56815338 170.96464539]
[123.92835999 165.66612244]
[117.31004333 152.20513916]
[110.69172668 138.74415588]
[104.07341003 125.28318787]
[83.87591553 124.94114685]
[67.37478638 108.79286957]
[52.67354584 105.81401825]
[37.97230911 102.83515930]
[23.27106857 99.85630035]
[7.90406370 105.58231354]
[-4.56424570 94.92992401]
[-1.30753124 78.85740662]
[14.32397842 73.89878845]
[26.24992561 85.15505981]
[40.95116425 88.13391876]
[55.65240479 91.11277771]
[70.35364532 94.09163666]
[76.84351349 80.56826019]
[65.32230377 70.96295929]
[50.93428802 76.33702087]
[35.78953171 73.78126526]
[23.96189880 63.98316956]
[18.63296318 49.57837677]
[21.23618126 34.44170761]
[31.07130051 22.64484406]
[45.49272537 17.36108589]
[60.62116241 20.01173592]
[72.38713837 29.88378525]
[77.62566376 44.32170105]
[74.92761230 59.44175720]
[86.44881439 69.04705811]
[89.19881439 70.87575531]
[91.69058990 72.90980530]
[93.91012573 75.12540436]
[94.76646423 60.14986420]
[95.62279510 45.17432785]
[96.47912598 30.19879150]
[97.33545685 15.22325516]
[83.05113983 10.33850002]
[70.61506653 1.78007305]
[60.95008087 -9.81693459]
[54.77338409 -23.59194946]
[52.54333115 -38.52276993]
[54.42540359 -53.50143433]
[60.27994537 -67.41642761]
[69.67250824 -79.23515320]
[81.90609741 -88.08059692]
[96.07289886 -93.29636383]
[111.12165070 -94.49540710]
[125.93563080 -91.58875275]
[139.41554260 -84.79209137]
[150.56108093 -74.60977936]
[158.54518127 -61.79741287]
[162.77537537 -47.30575943]
[162.93774414 -32.21018982]
[159.02023315 -17.63089752]
[151.31356812 -4.64976358]
[140.38961792 5.76992655]
[127.05902100 12.85496235]
[112.31099701 16.07958794]
[111.45466614 31.05512428]
[110.59832764 46.03065872]
[109.74199677 61.00619507]
[108.88566589 75.98173523]
[121.98149109 86.86051178]
[125.36248016 103.54635620]
[117.53439331 118.66487122]
[124.15270996 132.12583923]
[130.77102661 145.58682251]
[137.38934326 159.04780579]
[144.38934326 172.31428528]
[151.76535034 185.37548828]
[158.74234009 191.34289551]
[159.15472412 198.75630188]
[166.28071594 211.95556641]
[173.40670776 225.15481567]
[180.53268433 238.35406494]
[180.92247009 223.35913086]
[184.70133972 208.84294128]
[191.67256165 195.56129456]
[201.47315979 184.20574951]
[213.59283447 175.36756897]
[227.40054321 169.50692749]
[242.17736816 166.92897034]
[257.15386963 167.76794434]
[271.55032349 171.98013306]
[284.61709595 179.34625244]
[295.67382812 189.48274231]
[304.14483643 201.86184692]
[309.58905029 215.83897400]
[311.72302246 230.68641663]
[310.43563843 245.63105774]
[305.79388428 259.89480591]
[298.03948975 272.73495483]
[287.57620239 283.48297119]
[274.94882202 291.57919312]
[260.81481934 296.60211182]
[245.91009521 298.29016113]
[231.01074219 296.55548096]
[216.89250183 291.48837280]
[204.29049683 283.35269165]
[193.86088562 272.57199097]
[186.14399719 259.70169067]
[186.42956543 274.69894409]
[186.71514893 289.69622803]
[187.00073242 304.69351196]
[187.28631592 319.69079590]
[187.57189941 334.68807983]
[187.85748291 349.68536377]
[188.14306641 364.68264771]
[188.42864990 379.67993164]
[188.71423340 394.67721558]
[203.57228088 397.00308228]
[217.80064392 401.87384033]
[230.96696472 409.14154053]
[242.67112732 418.58523560]
[252.55743408 429.91802979]
[260.32546997 442.79547119]
[265.73919678 456.82626343]
[268.63403320 471.58398438]
[268.92205811 486.62023926]
[266.59451294 501.47799683]
[261.72213745 515.70581055]
[254.45295715 528.87133789]
[245.00791931 540.57440186]
[233.67401123 550.45941162]
[220.79568481 558.22601318]
[206.76428223 563.63812256]
[192.00621033 566.53131104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 147]
[18 146]
[19 145]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 112]
[28 111]
[29 110]
[30 109]
[31 107]
[32 106]
[36 105]
[37 104]
[38 103]
[39 102]
[41 52]
[42 51]
[43 50]
[44 49]
[53 66]
[54 65]
[69 99]
[70 98]
[71 97]
[72 96]
[73 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
