%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUACUAAUCUGGGGGGGGGGCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAxxxxxxxxxxUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUCCCCCCCCCCAUACUAAUAAUCU\
) } def
/len { sequence length } bind def

/coor [
[-4.53171253 284.37042236]
[-13.45779610 279.01583862]
[-22.11021614 273.22943115]
[-30.46810150 267.02517700]
[-38.51129532 260.41806030]
[-46.22039413 253.42402649]
[-53.57680511 246.05992126]
[-60.56278229 238.34352112]
[-67.16148376 230.29342651]
[-73.35697937 221.92906189]
[-79.13433075 213.27059937]
[-84.47961426 204.33891296]
[-89.37992096 195.15556335]
[-103.01303864 201.41160583]
[-116.64616394 207.66764832]
[-130.27928162 213.92367554]
[-139.59492493 226.71153259]
[-154.38940430 224.98745728]
[-168.02253723 231.24348450]
[-181.65565491 237.49952698]
[-195.28877258 243.75555420]
[-208.92190552 250.01159668]
[-209.15397644 265.27294922]
[-215.99240112 278.91842651]
[-228.07939148 288.23867798]
[-243.01507568 291.38317871]
[-257.83395386 287.72760010]
[-269.59375000 277.99774170]
[-275.95953369 264.12548828]
[-275.66735840 248.86517334]
[-268.77526855 235.24673462]
[-256.65164185 225.97415161]
[-241.70368958 222.88847351]
[-226.89932251 226.60238647]
[-215.17793274 236.37847900]
[-201.54481506 230.12243652]
[-187.91169739 223.86640930]
[-174.27856445 217.61036682]
[-160.64544678 211.35432434]
[-152.30493164 199.01394653]
[-136.53532410 200.29055786]
[-122.90219879 194.03451538]
[-109.26907349 187.77848816]
[-95.63595581 181.52244568]
[-105.81211090 150.60345459]
[-111.13366699 118.49085999]
[-111.47508240 85.94210052]
[-106.82832336 53.72493744]
[-97.30297852 22.59928703]
[-83.12374115 -6.70066595]
[-64.62505341 -33.48381042]
[-42.24326706 -57.11839294]
[-51.91060257 -68.58759308]
[-61.57794189 -80.05679321]
[-71.24527740 -91.52600098]
[-86.17786407 -88.16795349]
[-100.95756531 -92.14527893]
[-112.18811035 -102.54399872]
[-117.28880310 -116.97457123]
[-115.08754730 -132.12095642]
[-106.09017181 -144.50262451]
[-92.36420441 -151.27436829]
[-77.06377411 -150.88008118]
[-63.70480728 -143.41035461]
[-55.35710144 -130.58169556]
[-53.93889236 -115.34204102]
[-59.77608109 -101.19333649]
[-50.10874176 -89.72413635]
[-40.44140244 -78.25493622]
[-30.77406502 -66.78572845]
[-22.42756653 -73.00527954]
[-13.78576851 -78.80754089]
[-4.86951637 -84.17850494]
[4.29968452 -89.10522461]
[13.69971752 -93.57582092]
[23.30790901 -97.57950592]
[33.10108566 -101.10662079]
[43.05562210 -104.14865875]
[53.14751434 -106.69828796]
[63.35241318 -108.74935150]
[73.64570618 -110.29690552]
[84.00257111 -111.33721924]
[94.39801788 -111.86777496]
[104.80697632 -111.88730621]
[115.20434570 -111.39575195]
[125.56503296 -110.39431000]
[135.86405945 -108.88539124]
[146.07658386 -106.87262726]
[156.17797852 -104.36088562]
[166.14385986 -101.35621643]
[175.95019531 -97.86587524]
[185.57334900 -93.89826965]
[194.99008179 -89.46298218]
[204.17770386 -84.57069397]
[213.11404419 -79.23322296]
[221.77755737 -73.46343231]
[230.14733887 -67.27524567]
[238.20318604 -60.68358612]
[245.92570496 -53.70434952]
[253.29623413 -46.35437393]
[260.29699707 -38.65139008]
[266.91113281 -30.61397171]
[273.12268066 -22.26150894]
[278.91662598 -13.61414814]
[284.27905273 -4.69274569]
[289.19696045 4.48117828]
[293.65853882 13.88549709]
[297.65298462 23.49752617]
[301.17071533 33.29408264]
[304.20321655 43.25153351]
[306.74313354 53.34586716]
[308.78442383 63.55272675]
[310.32208252 73.84750366]
[311.35247803 84.20536041]
[311.87304688 94.60131073]
[311.88259888 105.01028442]
[311.38107300 115.40717316]
[310.36968994 125.76689911]
[308.85089111 136.06448364]
[306.82830811 146.27507019]
[304.30688477 156.37403870]
[301.29266357 166.33703613]
[297.79290771 176.14001465]
[293.81607056 185.75935364]
[289.37173462 195.17182922]
[284.47064209 204.35475159]
[279.12460327 213.28598022]
[273.34649658 221.94393921]
[267.15029907 230.30778503]
[260.55090332 238.35729980]
[253.56425476 246.07312012]
[246.20721436 253.43658447]
[238.49751282 260.42996216]
[230.45375061 267.03637695]
[222.09533691 273.23989868]
[213.44242859 279.02557373]
[204.51588440 284.37942505]
[195.33723450 289.28854370]
[185.92864990 293.74108887]
[176.31278992 297.72631836]
[166.51286316 301.23461914]
[156.55250549 304.25756836]
[146.45573425 306.78781128]
[136.24691772 308.81930542]
[125.95067596 310.34707642]
[115.59183502 311.36752319]
[105.19538879 311.87814331]
[94.78641510 311.87768555]
[84.39000702 311.36618042]
[74.03125763 310.34484863]
[63.73514557 308.81619263]
[53.52650070 306.78381348]
[43.42995453 304.25271606]
[33.46985626 301.22891235]
[23.67023277 297.71975708]
[14.05471706 293.73370361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 44]
[14 43]
[15 42]
[16 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[52 70]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
