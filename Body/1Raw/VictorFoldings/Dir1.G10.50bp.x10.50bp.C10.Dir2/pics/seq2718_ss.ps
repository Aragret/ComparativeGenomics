%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCACCUCUAGGGGGGGGGGGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGxxxxxxxxxxUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCCCCCCCCCCCAUCAUCACCUCAA\
) } def
/len { sequence length } bind def

/coor [
[83.43785858 574.55487061]
[69.16609192 569.74548340]
[56.26210785 561.98004150]
[45.32945633 551.62194824]
[36.87946701 539.15551758]
[31.30737114 525.16387939]
[28.87378311 510.30142212]
[29.69252396 495.26336670]
[33.72529984 480.75299072]
[40.78349304 467.44900513]
[50.53697968 455.97366333]
[62.52956772 446.86367798]
[76.20034027 440.54513550]
[90.90990448 437.31356812]
[90.90990448 422.31356812]
[90.90990448 407.31356812]
[90.90990448 392.31356812]
[90.90990448 377.31356812]
[90.90990448 362.31356812]
[90.90990448 347.31356812]
[90.90990448 332.31356812]
[90.90990448 317.31356812]
[90.90990448 302.31356812]
[90.90990448 287.31356812]
[76.84597015 282.26467896]
[65.33643341 272.69079590]
[57.78276443 259.73251343]
[55.11330795 244.94416809]
[57.66925430 230.10714722]
[65.16113281 217.01547241]
[76.70147705 207.25880432]
[90.90990448 202.02946472]
[90.90990448 187.02946472]
[87.74729156 180.30296326]
[91.06298065 171.73008728]
[91.36310577 156.73307800]
[91.66323853 141.73608398]
[76.89630127 135.74383545]
[65.36864471 124.74008179]
[58.69650650 110.26762390]
[57.81537247 94.35557556]
[43.53108597 89.77745056]
[29.24680328 85.19932556]
[14.96251869 80.62120056]
[0.09682517 86.65367126]
[-13.81698990 78.66709900]
[-16.10543823 62.78810501]
[-5.01301861 51.19768524]
[10.95111465 52.78702545]
[19.54064369 66.33691406]
[33.82492828 70.91503906]
[48.10921097 75.49317169]
[62.39349747 80.07129669]
[72.53821564 67.48457336]
[86.64499664 59.58903122]
[102.67858124 57.52379990]
[106.24588776 42.95416260]
[109.81320190 28.38452721]
[113.38051605 13.81489182]
[109.14717865 -1.42943132]
[119.68930054 -11.95145416]
[113.66876221 -23.39961052]
[116.97888184 -35.48773956]
[127.30863190 -41.84947205]
[131.16674805 -56.34481049]
[135.02487183 -70.84015656]
[138.88299561 -85.33549500]
[142.74111938 -99.83083344]
[131.68722534 -89.69123840]
[117.75270081 -84.13883209]
[102.75463867 -83.89766693]
[88.64881134 -88.99919128]
[77.27462769 -98.77815247]
[70.11531830 -111.95935822]
[68.10445404 -126.82395935]
[71.50425720 -141.43359375]
[79.87139130 -153.88313293]
[92.11476898 -162.54913330]
[106.63783264 -166.30155945]
[121.54675293 -164.65106201]
[134.89738464 -157.81286621]
[144.94877625 -146.67871094]
[150.39021301 -132.70048523]
[150.51188660 -117.69968414]
[158.48329163 -130.40625000]
[166.45469666 -143.11280823]
[166.67855835 -161.49971008]
[182.44749451 -169.14634705]
[190.16305542 -182.00987244]
[187.68032837 -197.85964966]
[198.62998962 -209.58503723]
[214.61239624 -208.19129944]
[223.36720276 -194.74760437]
[218.17848206 -179.56680298]
[203.02658081 -174.29431152]
[195.31100464 -161.43078613]
[197.93939209 -149.58734131]
[191.56970215 -138.79351807]
[179.16125488 -135.14140320]
[171.18986511 -122.43484497]
[163.21846008 -109.72828674]
[157.23645020 -95.97271729]
[153.37834167 -81.47737122]
[149.52021790 -66.98203278]
[145.66209412 -52.48669052]
[141.80397034 -37.99135208]
[147.29818726 -21.34971809]
[134.25892639 -8.38414097]
[138.74743652 5.81806469]
[127.95014954 17.38220596]
[124.38284302 31.95184135]
[120.81552887 46.52147675]
[117.24821472 61.09111023]
[128.64036560 68.51775360]
[137.10845947 79.15859222]
[141.78794861 91.92723846]
[142.20108032 105.52008820]
[138.30566406 118.54935455]
[130.49940491 129.68481445]
[119.57930756 137.78959656]
[106.66024017 142.03622437]
[106.36010742 157.03321838]
[106.05997467 172.03021240]
[105.90990448 187.02946472]
[105.90990448 202.02946472]
[120.11832428 207.25880432]
[131.65866089 217.01547241]
[139.15054321 230.10714722]
[141.70649719 244.94416809]
[139.03703308 259.73251343]
[131.48336792 272.69079590]
[119.97383118 282.26467896]
[105.90990448 287.31356812]
[105.90990448 302.31356812]
[105.90990448 317.31356812]
[105.90990448 332.31356812]
[105.90990448 347.31356812]
[105.90990448 362.31356812]
[105.90990448 377.31356812]
[105.90990448 392.31356812]
[105.90990448 407.31356812]
[105.90990448 422.31356812]
[105.90990448 437.31356812]
[120.61946106 440.54513550]
[134.29023743 446.86367798]
[146.28282166 455.97366333]
[156.03630066 467.44900513]
[163.09449768 480.75299072]
[167.12727356 495.26336670]
[167.94601440 510.30142212]
[165.51243591 525.16387939]
[159.94033813 539.15551758]
[151.49034119 551.62194824]
[140.55769348 561.98004150]
[127.65370941 569.74548340]
[113.38194275 574.55487061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[32 125]
[33 124]
[35 123]
[36 122]
[37 121]
[41 53]
[42 52]
[43 51]
[44 50]
[56 113]
[57 112]
[58 111]
[59 110]
[61 108]
[64 106]
[65 105]
[66 104]
[67 103]
[68 102]
[84 101]
[85 100]
[86 99]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
