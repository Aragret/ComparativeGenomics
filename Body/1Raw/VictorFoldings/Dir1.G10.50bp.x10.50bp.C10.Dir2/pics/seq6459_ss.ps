%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUACCUCCGGGGGGGGGGCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAAxxxxxxxxxxAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAACCCCCCCCCCUCCUACCUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.52941895]
[71.19830322 351.51339722]
[59.48964310 341.98397827]
[50.78712082 329.64831543]
[45.73651886 315.42178345]
[44.71262741 300.36010742]
[47.79142761 285.58093262]
[54.74444962 272.18099976]
[65.05573273 261.15469360]
[77.96011353 253.32017517]
[92.50000000 249.25885010]
[92.50000000 234.25885010]
[92.50000000 219.25885010]
[92.50000000 204.25885010]
[92.50000000 189.25885010]
[92.50000000 174.25885010]
[92.50000000 159.25885010]
[92.50000000 144.25885010]
[92.50000000 129.25885010]
[92.50000000 114.25885773]
[85.45486450 101.01627350]
[73.01542664 92.63413239]
[60.28678131 103.51675415]
[45.04098892 110.41371918]
[28.49007607 112.78489685]
[11.94755268 110.44964600]
[-3.27583289 103.60050964]
[-15.97595501 92.78742218]
[-25.15055275 78.87350464]
[-30.07831764 62.96620560]
[-30.37561035 46.32914734]
[-26.02630424 30.28174973]
[-38.96435928 22.69184113]
[-51.90241623 15.10193348]
[-64.84046936 7.51202488]
[-77.77852631 -0.07788335]
[-90.71658325 -7.66779184]
[-103.65464020 -15.25769997]
[-116.59269714 -22.84760857]
[-129.68585205 -30.16671371]
[-142.92843628 -37.21184921]
[-158.74578857 -36.86266327]
[-166.34790039 -49.67114258]
[-179.59048462 -56.71627808]
[-192.83306885 -63.76141357]
[-206.07565308 -70.80654907]
[-219.31823730 -77.85168457]
[-235.67985535 -76.74269867]
[-244.59516907 -90.50675201]
[-236.89289856 -104.98455811]
[-220.49645996 -105.28259277]
[-212.27310181 -91.09426880]
[-199.03051758 -84.04913330]
[-185.78793335 -77.00399780]
[-172.54534912 -69.95886230]
[-159.30276489 -62.91373062]
[-144.43261719 -63.76683044]
[-135.88330078 -50.45443344]
[-122.64071655 -43.40929794]
[-117.83574677 -43.94574738]
[-112.65187836 -41.42407227]
[-109.00278473 -35.78566360]
[-96.06472778 -28.19575500]
[-83.12667847 -20.60584831]
[-70.18862152 -13.01593971]
[-57.25056458 -5.42603111]
[-44.31250763 2.16387725]
[-31.37445068 9.75378513]
[-18.43639565 17.34369469]
[-9.14206123 7.73387623]
[2.08307242 0.45715016]
[14.66539669 -4.11020708]
[27.96095085 -5.73048115]
[41.28837967 -4.31689024]
[53.96384811 0.06177546]
[65.33614349 7.18449163]
[74.82009888 16.68915367]
[81.92674255 28.09098244]
[86.28849030 40.80725098]
[87.67813873 54.18707275]
[86.02072906 67.54470062]
[81.39756775 80.19468689]
[93.83700562 88.57682800]
[102.56858063 84.76453400]
[113.21018982 87.88951111]
[127.78289032 84.33475494]
[126.33395386 69.37877655]
[127.02830505 54.36882019]
[129.85180664 39.61048126]
[134.74697876 25.40421677]
[141.61418152 12.03924370]
[150.31356812 -0.21234027]
[160.66806030 -11.10110950]
[172.46684265 -20.40538406]
[185.46971130 -27.93573761]
[199.41192627 -33.53886414]
[214.00967407 -37.10069275]
[228.96574402 -38.54870605]
[243.97566223 -37.85342789]
[258.73382568 -35.02900696]
[272.93978882 -30.13295174]
[286.30432129 -23.26493645]
[298.55538940 -14.56478405]
[309.44351196 -4.20962048]
[318.74703979 7.58973742]
[326.27661133 20.59306908]
[331.87887573 34.53564453]
[335.43978882 49.13360977]
[336.88687134 64.08976746]
[336.19067383 79.09963226]
[333.36532593 93.85762024]
[328.46838379 108.06328583]
[321.59954834 121.42740631]
[312.89865112 133.67791748]
[302.54281616 144.56539917]
[290.74288940 153.86820984]
[277.73907471 161.39695740]
[263.79614258 166.99836731]
[249.19796753 170.55838013]
[234.24171448 172.00454712]
[219.23190308 171.30740356]
[204.47409058 168.48115540]
[190.26872253 163.58334351]
[176.90502930 156.71366882]
[164.65505981 148.01200867]
[153.76821899 137.65550232]
[144.46612549 125.85498810]
[136.93818665 112.85072327]
[131.33764648 98.90745544]
[116.76494598 102.46221924]
[107.50000000 114.25885773]
[107.50000000 129.25885010]
[107.50000000 144.25885010]
[107.50000000 159.25885010]
[107.50000000 174.25885010]
[107.50000000 189.25885010]
[107.50000000 204.25885010]
[107.50000000 219.25885010]
[107.50000000 234.25885010]
[107.50000000 249.25885010]
[122.03988647 253.32017517]
[134.94427490 261.15469360]
[145.25555420 272.18099976]
[152.20857239 285.58093262]
[155.28736877 300.36010742]
[154.26348877 315.42178345]
[149.21287537 329.64831543]
[140.51036072 341.98397827]
[128.80169678 351.51339722]
[114.95575714 357.52941895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 83]
[22 82]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[85 130]
[86 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
