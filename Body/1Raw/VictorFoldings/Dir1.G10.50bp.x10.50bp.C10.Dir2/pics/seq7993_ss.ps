%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUACUACGGGGGGGGGGCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCAxxxxxxxxxxCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGCCCCCCCCCCUAACUACUAC\
) } def
/len { sequence length } bind def

/coor [
[85.19730377 363.55923462]
[71.35136414 357.54321289]
[59.64270401 348.01379395]
[50.94018173 335.67813110]
[45.88957977 321.45159912]
[44.86568832 306.38992310]
[47.94448853 291.61077881]
[54.89751053 278.21084595]
[65.20879364 267.18450928]
[78.11317444 259.35000610]
[92.65306091 255.28869629]
[92.65306091 240.28869629]
[92.65306091 225.28869629]
[92.65306091 210.28869629]
[92.65306091 195.28869629]
[92.65306091 180.28869629]
[92.65306091 165.28869629]
[92.65306091 150.28869629]
[92.65306091 135.28869629]
[92.65306091 120.28868866]
[92.65306091 105.28868866]
[90.28324890 102.15493774]
[89.33691406 97.97760010]
[90.25396729 93.43037415]
[93.15031433 89.36036682]
[94.08593750 74.38957214]
[95.02156830 59.41878128]
[80.13304138 57.55377579]
[65.38925934 54.76675797]
[50.84726715 51.06851578]
[36.56332779 46.47335434]
[22.59269714 40.99905014]
[8.98942757 34.66678238]
[-4.19385052 27.50105286]
[-16.90613556 19.52958107]
[-29.09824371 10.78321075]
[-40.72300720 1.29577708]
[-51.73545074 -8.89601326]
[-62.09296799 -19.75273132]
[-71.75549316 -31.23237228]
[-80.68563843 -43.29052353]
[-88.84885406 -55.88053513]
[-96.21356201 -68.95369720]
[-102.75126648 -82.45944214]
[-108.43666840 -96.34549713]
[-113.24778748 -110.55815887]
[-117.16599274 -125.04242706]
[-120.17613983 -139.74227905]
[-122.26657867 -154.60083008]
[-123.42921448 -169.56060791]
[-123.65956116 -184.56372070]
[-122.95671082 -199.55213928]
[-121.32340240 -214.46784973]
[-118.76593781 -229.25318909]
[-115.29422760 -243.85090637]
[-110.92168427 -258.20455933]
[-105.66524506 -272.25860596]
[-99.54522705 -285.95867920]
[-92.58532715 -299.25177002]
[-84.81245422 -312.08645630]
[-76.25668335 -324.41305542]
[-66.95112610 -336.18392944]
[-56.93177795 -347.35348511]
[-46.23739624 -357.87854004]
[-34.90936661 -367.71838379]
[-22.99150467 -376.83489990]
[-10.52992630 -385.19287109]
[2.42716002 -392.75991821]
[15.82962513 -399.50680542]
[29.62561607 -405.40740967]
[43.76176071 -410.43890381]
[58.18336868 -414.58184814]
[72.83464050 -417.82015991]
[87.65889740 -420.14132690]
[102.59878540 -421.53640747]
[117.59651184 -421.99996948]
[132.59403992 -421.53024292]
[147.53335571 -420.12902832]
[162.35665894 -417.80172729]
[177.00659180 -414.55737305]
[191.42648315 -410.40853882]
[205.56056213 -405.37121582]
[219.35412598 -399.46493530]
[232.75381470 -392.71252441]
[245.70777893 -385.14013672]
[258.16592407 -376.77703857]
[270.08001709 -367.65560913]
[281.40402222 -357.81112671]
[292.09405518 -347.28167725]
[302.10879517 -336.10797119]
[311.40951538 -324.33328247]
[319.96020508 -312.00314331]
[327.72781372 -299.16528320]
[334.68225098 -285.86932373]
[340.79660034 -272.16674805]
[346.04727173 -258.11053467]
[350.41390991 -243.75508118]
[353.87960815 -229.15591431]
[356.43096924 -214.36953735]
[358.05816650 -199.45314026]
[358.75482178 -184.46444702]
[358.51831055 -169.46142578]
[357.34951782 -154.50213623]
[355.25296021 -139.64443970]
[352.23675537 -124.94583130]
[348.31259155 -110.46317291]
[343.49563599 -96.25249481]
[337.80450439 -82.36877441]
[331.26126099 -68.86573029]
[323.89117432 -55.79559708]
[315.72277832 -43.20894623]
[306.78765869 -31.15447044]
[297.12042236 -19.67880821]
[286.75842285 -8.82635403]
[275.74179077 1.36090302]
[264.11312866 10.84355164]
[251.91741943 19.58490372]
[239.20184326 27.55114174]
[226.01562500 34.71144485]
[212.40974426 41.03811264]
[198.43685913 46.50666428]
[184.15103149 51.09594727]
[169.60752869 54.78820801]
[154.86259460 57.56915283]
[139.97329712 59.42803192]
[124.99724579 60.35765076]
[109.99236298 60.35440826]
[109.05673218 75.32520294]
[108.12110138 90.29598999]
[107.65306091 105.28868866]
[107.65306091 120.28868866]
[107.65306091 135.28869629]
[107.65306091 150.28869629]
[107.65306091 165.28869629]
[107.65306091 180.28869629]
[107.65306091 195.28869629]
[107.65306091 210.28869629]
[107.65306091 225.28869629]
[107.65306091 240.28869629]
[107.65306091 255.28869629]
[122.19294739 259.35000610]
[135.09733582 267.18450928]
[145.40861511 278.21084595]
[152.36163330 291.61077881]
[155.44042969 306.38992310]
[154.41654968 321.45159912]
[149.36593628 335.67813110]
[140.66342163 348.01379395]
[128.95475769 357.54321289]
[115.10881805 363.55923462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 129]
[26 128]
[27 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
