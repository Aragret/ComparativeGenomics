%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAAAUCAGGGGGGGGGGGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCxxxxxxxxxxUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGCCCCCCCCCCGACAAAUCAG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.38986206]
[71.19830322 372.37384033]
[59.48964310 362.84442139]
[50.78712082 350.50875854]
[45.73651886 336.28222656]
[44.71262741 321.22055054]
[47.79142761 306.44137573]
[54.74444962 293.04144287]
[65.05573273 282.01510620]
[77.96011353 274.18060303]
[92.50000000 270.11929321]
[92.50000000 255.11929321]
[92.50000000 240.11929321]
[92.50000000 225.11929321]
[92.50000000 210.11929321]
[92.50000000 195.11929321]
[92.50000000 180.11929321]
[92.50000000 165.11929321]
[92.50000000 150.11929321]
[92.50000000 135.11929321]
[92.50000000 120.11930084]
[79.64159393 112.39521027]
[66.39900970 119.44034576]
[60.35574722 134.30165100]
[44.92863083 138.70433044]
[31.95202446 129.27102661]
[31.38047218 113.23815918]
[43.65242004 102.90477753]
[59.35387802 106.19776154]
[72.59646606 99.15262604]
[79.22496033 85.69666290]
[76.73984528 70.90395355]
[74.25472260 56.11124802]
[71.76960754 41.31853867]
[69.28448486 26.52583313]
[55.99773407 23.75598335]
[44.46300507 16.69644165]
[36.01228714 6.20098829]
[31.60840225 -6.48214149]
[31.73537827 -19.85866737]
[17.71866608 -25.20018005]
[3.70195222 -30.54169273]
[-10.31476116 -35.88320541]
[-24.63274002 -29.19209099]
[-39.45969772 -34.66355896]
[-45.99905777 -49.05147934]
[-40.37113571 -63.81975937]
[-25.91488075 -70.20663452]
[-11.20692825 -64.42288971]
[-4.97324800 -49.89991760]
[9.04346466 -44.55840683]
[23.06017876 -39.21689224]
[37.07688904 -33.87538147]
[43.26876831 -41.48082733]
[51.16052246 -47.30340576]
[60.25425720 -50.97575760]
[69.97624207 -52.26619720]
[72.76856232 -67.00400543]
[67.73548126 -82.00328827]
[77.70677948 -93.06775665]
[80.49910736 -107.80556488]
[83.29142761 -122.54337311]
[86.08375549 -137.28117371]
[88.87607574 -152.01898193]
[74.88831329 -157.56326294]
[62.20273209 -165.65476990]
[51.27791214 -176.00100708]
[42.50876999 -188.22798157]
[36.21231461 -201.89366150]
[32.61615372 -216.50407410]
[31.85028839 -231.53105164]
[33.94240189 -246.43136597]
[38.81686783 -260.66641235]
[46.29747391 -273.72155762]
[56.11380768 -285.12490845]
[67.91101074 -294.46420288]
[81.26261902 -301.40185547]
[95.68598175 -305.68707275]
[110.65970612 -307.16494751]
[125.64249420 -305.78204346]
[140.09274292 -301.58834839]
[153.48806763 -294.73550415]
[165.34423828 -285.47119141]
[175.23268127 -274.13031006]
[182.79591370 -261.12283325]
[187.76052856 -246.91900635]
[189.94708252 -232.03225708]
[189.27650452 -217.00071716]
[185.77305603 -202.36779785]
[179.56336975 -188.66246033]
[170.87193298 -176.38014221]
[160.01292419 -165.96484375]
[147.37889099 -157.79306030]
[133.42657471 -152.16021729]
[118.66030121 -149.26991272]
[103.61388397 -149.22665405]
[100.82155609 -134.48884583]
[98.02923584 -119.75104523]
[95.23690796 -105.01323700]
[92.44458771 -90.27543640]
[97.67739868 -76.33029175]
[87.50637054 -64.21167755]
[84.71404266 -49.47387314]
[99.94856262 -38.74484253]
[108.52175140 -22.12431908]
[108.43218994 -3.35515785]
[99.63727570 13.30305958]
[84.07719421 24.04071426]
[86.56230927 38.83341980]
[89.04743195 53.62612915]
[91.53254700 68.41883850]
[94.01766968 83.21154022]
[112.01844025 74.97296143]
[135.63154602 87.67201996]
[150.04376221 91.82991028]
[164.45597839 95.98779297]
[178.86819458 100.14568329]
[193.28041077 104.30357361]
[210.17488098 102.88465118]
[216.21520996 118.72607422]
[202.66499329 128.91567993]
[189.12252808 118.71578979]
[174.71031189 114.55789948]
[160.29809570 110.40000916]
[145.88587952 106.24212646]
[131.47366333 102.08423615]
[125.48024750 106.59300232]
[127.29627228 121.48266602]
[113.49341583 115.61053467]
[107.50000000 120.11930084]
[107.50000000 135.11929321]
[107.50000000 150.11929321]
[107.50000000 165.11929321]
[107.50000000 180.11929321]
[107.50000000 195.11929321]
[107.50000000 210.11929321]
[107.50000000 225.11929321]
[107.50000000 240.11929321]
[107.50000000 255.11929321]
[107.50000000 270.11929321]
[122.03988647 274.18060303]
[134.94427490 282.01510620]
[145.25555420 293.04144287]
[152.20857239 306.44137573]
[155.28736877 321.22055054]
[154.26348877 336.28222656]
[149.21287537 350.50875854]
[140.51036072 362.84442139]
[128.80169678 372.37384033]
[114.95575714 378.38986206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 30]
[23 29]
[31 112]
[32 111]
[33 110]
[34 109]
[35 108]
[40 53]
[41 52]
[42 51]
[43 50]
[57 103]
[58 102]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
