%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAGUAUGGGGGGGGGGCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACxxxxxxxxxxCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGACCCCCCCCCCAUACUAGUAU\
) } def
/len { sequence length } bind def

/coor [
[82.93931580 343.29071045]
[69.71911621 336.01824951]
[58.83231354 325.57122803]
[51.02118301 312.66198730]
[46.81830215 298.17065430]
[46.51023102 283.08532715]
[50.11797333 268.43450928]
[57.39554596 255.21711731]
[67.84675598 244.33435059]
[80.75901794 236.52819824]
[95.25195312 232.33091736]
[94.93989563 217.33416748]
[94.62783813 202.33740234]
[94.31578064 187.34065247]
[94.00372314 172.34390259]
[93.69167328 157.34715271]
[93.37961578 142.35038757]
[93.06755829 127.35363770]
[92.75550079 112.35688782]
[85.67915344 100.29798889]
[92.24774170 87.95516968]
[91.93569183 72.95841980]
[91.62363434 57.96166229]
[76.63053894 57.37624741]
[61.69929504 55.89522934]
[46.88334656 53.52391052]
[32.23572922 50.27077484]
[17.80888367 46.14747238]
[3.65444994 41.16876602]
[-10.17689991 35.35247040]
[-23.63565445 28.71941185]
[-36.67363358 21.29333305]
[-49.24416351 13.10081959]
[-61.30224609 4.17119741]
[-72.80471802 -5.46356726]
[-83.71039581 -15.76898384]
[-93.98025513 -26.70816231]
[-103.57751465 -38.24194336]
[-112.46782684 -50.32903671]
[-120.61936951 -62.92617798]
[-128.00296021 -75.98826599]
[-134.59216309 -89.46854401]
[-140.36338806 -103.31875610]
[-145.29597473 -117.48932648]
[-149.37228394 -131.92951965]
[-152.57771301 -146.58764648]
[-154.90077209 -161.41123962]
[-156.33317566 -176.34722900]
[-156.86976624 -191.34214783]
[-156.50863647 -206.34231567]
[-155.25108337 -221.29405212]
[-153.10159302 -236.14379883]
[-150.06788635 -250.83842468]
[-146.16079712 -265.32531738]
[-141.39431763 -279.55264282]
[-135.78552246 -293.46942139]
[-129.35447693 -307.02587891]
[-122.12421417 -320.17343140]
[-114.12061310 -332.86508179]
[-105.37231445 -345.05535889]
[-95.91064453 -356.70062256]
[-85.76947784 -367.75921631]
[-74.98510742 -378.19152832]
[-63.59614182 -387.96017456]
[-51.64335251 -397.03027344]
[-39.16952896 -405.36929321]
[-26.21932220 -412.94738770]
[-12.83909035 -419.73745728]
[0.92326629 -425.71517944]
[15.01848316 -430.85913086]
[29.39610291 -435.15093994]
[44.00465775 -438.57522583]
[58.79185104 -441.11968994]
[73.70475006 -442.77529907]
[88.68996429 -443.53607178]
[103.69385529 -443.39932251]
[118.66271973 -442.36550903]
[133.54295349 -440.43835449]
[148.28131104 -437.62472534]
[162.82501221 -433.93472290]
[177.12200928 -429.38156128]
[191.12112427 -423.98150635]
[204.77223206 -417.75393677]
[218.02645874 -410.72109985]
[230.83638000 -402.90817261]
[243.15612793 -394.34317017]
[254.94158936 -385.05670166]
[266.15060425 -375.08206177]
[276.74301147 -364.45489502]
[286.68090820 -353.21331787]
[295.92874146 -341.39749146]
[304.45336914 -329.04977417]
[312.22430420 -316.21435547]
[319.21368408 -302.93716431]
[325.39654541 -289.26574707]
[330.75073242 -275.24902344]
[335.25708008 -260.93719482]
[338.89944458 -246.38148499]
[341.66479492 -231.63400269]
[343.54321289 -216.74752808]
[344.52801514 -201.77536011]
[344.61566162 -186.77110291]
[343.80581665 -171.78845215]
[342.10140991 -156.88105774]
[339.50851440 -142.10227966]
[336.03643799 -127.50501251]
[331.69757080 -113.14152527]
[326.50747681 -99.06322479]
[320.48474121 -85.32051086]
[313.65090942 -71.96258545]
[306.03045654 -59.03725433]
[297.65063477 -46.59080124]
[288.54147339 -34.66777039]
[278.73556519 -23.31085205]
[268.26800537 -12.56069469]
[257.17630005 -2.45578408]
[245.50010681 6.96770668]
[233.28125000 15.67604446]
[220.56347656 23.63805389]
[207.39228821 30.82523537]
[193.81486511 37.21185684]
[179.87979126 42.77506256]
[165.63694763 47.49493027]
[151.13734436 51.35456467]
[136.43286133 54.34015656]
[121.57614899 56.44100952]
[106.62038422 57.64960480]
[106.93244171 72.64636230]
[107.24449921 87.64311218]
[114.32084656 99.70201111]
[107.75225830 112.04483032]
[108.06430817 127.04158020]
[108.37636566 142.03833008]
[108.68842316 157.03509521]
[109.00048065 172.03184509]
[109.31253815 187.02859497]
[109.62459564 202.02534485]
[109.93664551 217.02210999]
[110.24870300 232.01885986]
[124.90369415 235.60963440]
[138.12950134 242.87188721]
[149.02436829 253.31048584]
[156.84547424 266.21368408]
[161.05953979 280.70175171]
[161.37925720 295.78686523]
[157.78283691 310.44046021]
[150.51547241 323.66345215]
[140.07267761 334.55429077]
[127.16644287 342.37042236]
[112.67675018 346.57888794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[23 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
