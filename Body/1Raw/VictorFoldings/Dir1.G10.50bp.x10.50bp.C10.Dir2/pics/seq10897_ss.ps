%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCCAGGGGGGGGGGGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUxxxxxxxxxxAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[147.53639221 472.62518311]
[133.69046021 466.60916138]
[121.98179626 457.07974243]
[113.27927399 444.74407959]
[108.22867584 430.51754761]
[107.20478058 415.45587158]
[110.28357697 400.67672729]
[117.23660278 387.27679443]
[127.54788971 376.25045776]
[140.45227051 368.41595459]
[154.99215698 364.35464478]
[154.99215698 349.35464478]
[154.99215698 334.35464478]
[154.99215698 319.35464478]
[154.99215698 304.35464478]
[154.99215698 289.35464478]
[154.99215698 274.35464478]
[154.99215698 259.35464478]
[154.99215698 244.35462952]
[154.99215698 229.35462952]
[150.68457031 214.98645020]
[142.43228149 202.46049500]
[134.17999268 189.93452454]
[125.92770386 177.40856934]
[117.16149139 165.23672485]
[110.51361084 161.89736938]
[107.82956696 153.09692383]
[98.81203461 141.11009216]
[89.79450989 129.12326050]
[77.26854706 120.87097168]
[62.69584274 117.31621552]
[48.12314224 113.76145172]
[33.55043793 110.20668793]
[25.99313164 123.28582764]
[15.05617905 133.70503235]
[1.62619019 140.61965942]
[-13.20812607 143.46917725]
[-28.24421692 142.02258301]
[-42.26317596 136.39715576]
[-54.12854767 127.04890442]
[-62.87845993 114.73567200]
[-67.80359650 100.45562744]
[-68.50469971 85.36638641]
[-64.92492676 70.69116974]
[-57.35448837 57.61963654]
[-46.40707397 47.21142578]
[-32.97014618 40.31029510]
[-18.13297462 37.47568130]
[-3.09834313 38.93737793]
[10.91495705 44.57688904]
[22.77093124 53.93704605]
[31.50846863 66.25906372]
[36.41925812 80.54405212]
[37.10520172 95.63398743]
[51.67790222 99.18875122]
[66.25060272 102.74350739]
[80.82331085 106.29827118]
[83.08412933 93.85618591]
[91.64650726 86.57756805]
[90.71087646 71.60678101]
[89.77525330 56.63598633]
[88.83962250 41.66519547]
[78.29693604 26.60426331]
[86.63597107 11.19451046]
[85.38909912 -3.75357628]
[84.14221954 -18.70166397]
[69.65282440 -23.29794121]
[58.02850342 -33.09302521]
[51.04188919 -46.59323120]
[49.75838470 -61.73988342]
[54.37371826 -76.22322083]
[64.18408203 -87.83464813]
[77.69347382 -94.80349731]
[92.84179688 -96.06707764]
[107.31905365 -91.43269348]
[118.91756439 -81.60706329]
[125.86863708 -68.08851624]
[127.11228943 -52.93854141]
[122.45886230 -38.46739578]
[112.61798096 -26.88182259]
[99.09030914 -19.94853783]
[100.33718109 -5.00045109]
[101.58406067 9.94763565]
[110.63601685 18.03276443]
[111.76240540 30.52076721]
[103.81040955 40.72956848]
[104.74604034 55.70035934]
[105.68167114 70.67115021]
[106.61730194 85.64194489]
[117.73225403 103.07576752]
[101.78134155 120.10573578]
[110.79887390 132.09255981]
[119.81639862 144.07940674]
[128.95812988 155.97178650]
[133.18658447 157.48231506]
[136.36177063 160.02970886]
[138.28399658 163.14208984]
[138.93232727 166.33169556]
[138.45365906 169.15628052]
[146.70594788 181.68223572]
[154.95823669 194.20820618]
[163.21052551 206.73416138]
[162.81507874 191.73937988]
[165.48735046 176.97932434]
[171.11494446 163.07499695]
[179.46107483 150.61137390]
[190.17460632 140.11279297]
[202.80482483 132.02096558]
[216.82034302 126.67633057]
[231.63151550 124.30373383]
[246.61520386 125.00299072]
[261.14102173 128.74468994]
[274.59786987 135.37141418]
[286.41958618 144.60437012]
[296.10879517 156.05509949]
[303.25787354 169.24186707]
[307.56604004 183.60986328]
[308.85205078 198.55464172]
[307.06179810 213.44741821]
[302.27059937 227.66165161]
[294.68002319 240.59933472]
[284.60943604 251.71612549]
[272.48251343 260.54437256]
[258.80944824 266.71261597]
[244.16549683 269.96136475]
[229.16673279 270.15393066]
[214.44418335 267.28222656]
[200.61724854 261.46707153]
[188.26766968 252.95307922]
[177.91497803 242.09851074]
[169.99215698 229.35462952]
[169.99215698 244.35462952]
[169.99215698 259.35464478]
[169.99215698 274.35464478]
[169.99215698 289.35464478]
[169.99215698 304.35464478]
[169.99215698 319.35464478]
[169.99215698 334.35464478]
[169.99215698 349.35464478]
[169.99215698 364.35464478]
[184.53204346 368.41595459]
[197.43641663 376.25045776]
[207.74771118 387.27679443]
[214.70072937 400.67672729]
[217.77952576 415.45587158]
[216.75563049 430.51754761]
[211.70503235 444.74407959]
[203.00250244 457.07974243]
[191.29385376 466.60916138]
[177.44790649 472.62518311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 102]
[22 101]
[23 100]
[24 99]
[25 94]
[27 93]
[28 92]
[29 91]
[30 57]
[31 56]
[32 55]
[33 54]
[59 89]
[60 88]
[61 87]
[62 86]
[64 83]
[65 82]
[66 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
