%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUGCUAGGGGGGGGGGGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCxxxxxxxxxxUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGCCCCCCCCCCAAACAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.94980621 412.58355713]
[71.46011353 408.37509155]
[58.55388641 400.55899048]
[48.11108398 389.66815186]
[40.84371948 376.44512939]
[37.24729538 361.79153442]
[37.56701660 346.70642090]
[41.78108597 332.21835327]
[49.60218430 319.31515503]
[60.49705124 308.87655640]
[73.72286224 301.61431885]
[88.37785339 298.02352905]
[88.68991089 283.02679443]
[89.00196838 268.03002930]
[89.31401825 253.03327942]
[89.62607574 238.03651428]
[89.93813324 223.03976440]
[90.25019073 208.04301453]
[90.56224823 193.04626465]
[90.87430573 178.04949951]
[91.18635559 163.05274963]
[91.49841309 148.05599976]
[64.95738220 133.96572876]
[51.70212936 106.99796295]
[36.70293808 106.84192657]
[21.70375061 106.68589020]
[6.70456219 106.52985382]
[-8.29462624 106.37381744]
[-23.29381371 106.21778107]
[-28.33912468 120.49446106]
[-37.74865341 132.35783386]
[-50.50172043 140.52104187]
[-65.21496582 144.09860229]
[-80.29241943 142.70246887]
[-94.09857941 136.48405457]
[-105.13586426 126.11789703]
[-112.20702362 112.72844696]
[-114.54504395 97.76808929]
[-111.89630127 82.85960388]
[-104.54811859 69.62015533]
[-93.29756927 59.48586655]
[-79.36502838 53.55602264]
[-64.26179504 52.47384644]
[-49.62615585 56.35673141]
[-37.04567719 64.78348541]
[-27.88498878 76.84004211]
[-23.13777733 91.21858978]
[-8.13858986 91.37462616]
[6.86059904 91.53066254]
[21.85978699 91.68669891]
[36.85897446 91.84273529]
[51.85816574 91.99877167]
[55.59055328 79.76495361]
[62.37345123 68.92108917]
[71.74093628 60.21204758]
[83.04954529 54.23606110]
[95.52249146 51.40362167]
[96.45812225 36.43283081]
[97.39374542 21.46203995]
[88.83425903 33.78012085]
[77.52667236 43.63600922]
[64.15519714 50.43333435]
[49.52892303 53.76079941]
[34.53285980 53.41706848]
[20.07440758 49.42293549]
[7.02842093 42.02008057]
[-3.81570172 31.65644264]
[-11.80179787 18.95910835]
[-16.44664001 4.69638014]
[-17.46917534 -10.26872635]
[-14.80752945 -25.03069305]
[-8.62275791 -38.69629288]
[0.71090889 -50.43863678]
[12.62870312 -59.54721451]
[26.40949440 -65.47087860]
[41.21942902 -67.85118866]
[56.16237259 -66.54412842]
[70.33415222 -61.62877655]
[82.87725067 -53.40255737]
[93.03269958 -42.36322784]
[100.18601227 -29.17876244]
[103.90435028 -14.64693546]
[103.96295166 0.35098583]
[111.68703461 -12.50741673]
[119.41112518 -25.36581802]
[115.34324646 -40.63761902]
[123.33779907 -54.27076721]
[138.65176392 -58.17695236]
[152.19961548 -50.03870773]
[155.94367981 -34.68430710]
[147.66264343 -21.22324753]
[132.26953125 -17.64173317]
[124.54544067 -4.78333139]
[116.82135773 8.07507038]
[112.36454010 22.39766884]
[111.42890930 37.36845779]
[110.49328613 52.33925247]
[119.77400970 54.34085464]
[128.66253662 58.16501999]
[136.79846191 63.73237991]
[143.83801270 70.89192963]
[149.46830750 79.42463684]
[164.17626953 76.47915649]
[178.88423157 73.53367615]
[193.59219360 70.58818817]
[202.14581299 57.29867935]
[217.60873413 54.03159714]
[230.80706787 62.72524643]
[233.91047668 78.22183990]
[225.07777405 91.32752228]
[209.54924011 94.26692200]
[196.53767395 85.29615021]
[181.82971191 88.24163818]
[167.12174988 91.18711853]
[152.41378784 94.13259888]
[151.94575500 109.12529755]
[166.44134521 112.98245239]
[182.12475586 108.19050598]
[193.93020630 119.57309723]
[189.71325684 135.42079163]
[173.81195068 139.43084717]
[162.58418274 127.47805023]
[148.08859253 123.62089539]
[143.75460815 129.72158813]
[138.67021179 135.08222961]
[132.95599365 139.61428833]
[126.74236298 143.24819946]
[120.16669464 145.93437195]
[113.37023163 147.64378357]
[106.49517059 148.36805725]
[106.18311310 163.36480713]
[105.87105560 178.36155701]
[105.55899811 193.35832214]
[105.24694061 208.35507202]
[104.93489075 223.35182190]
[104.62283325 238.34857178]
[104.31077576 253.34533691]
[103.99871826 268.34207153]
[103.68666077 283.33883667]
[103.37460327 298.33560181]
[117.86754608 302.53286743]
[130.77980042 310.33901978]
[141.23101807 321.22180176]
[148.50859070 334.43917847]
[152.11633301 349.08999634]
[151.80825806 364.17535400]
[147.60537720 378.66665649]
[139.79423523 391.57589722]
[128.90744019 402.02291870]
[115.68724060 409.29537964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[57 97]
[58 96]
[59 95]
[83 94]
[84 93]
[85 92]
[102 115]
[103 114]
[104 113]
[105 112]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
