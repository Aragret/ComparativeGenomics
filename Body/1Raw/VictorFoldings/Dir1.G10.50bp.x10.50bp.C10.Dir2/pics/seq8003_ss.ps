%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCACCAUAGGGGGGGGGGAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUxxxxxxxxxxCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGACCCCCCCCCCGCUCACCAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 399.75802612]
[71.19830322 393.74200439]
[59.48964310 384.21258545]
[50.78712082 371.87692261]
[45.73651886 357.65039062]
[44.71262741 342.58871460]
[47.79142761 327.80957031]
[54.74444962 314.40963745]
[65.05573273 303.38330078]
[77.96011353 295.54879761]
[92.50000000 291.48748779]
[92.50000000 276.48748779]
[92.50000000 261.48748779]
[92.50000000 246.48747253]
[92.50000000 231.48747253]
[92.50000000 216.48747253]
[92.50000000 201.48747253]
[92.50000000 186.48747253]
[92.50000000 171.48747253]
[92.50000000 156.48747253]
[76.99372864 152.13249207]
[63.32542801 143.61262512]
[52.58707047 131.60853577]
[45.63654709 117.07923126]
[43.02913284 101.18546295]
[44.97313309 85.19699097]
[51.31324387 70.39112854]
[61.54295349 57.95073318]
[74.84500885 48.86966324]
[90.15670013 43.87340546]
[89.53272247 28.88638878]
[88.90874481 13.89937305]
[88.28476715 -1.08764291]
[87.66078949 -16.07465935]
[87.03681183 -31.06167603]
[86.41283417 -46.04869080]
[85.78885651 -61.03570557]
[70.79284668 -61.65148544]
[55.89890289 -63.50353241]
[41.20877838 -66.57919312]
[26.82281303 -70.85746002]
[12.83928394 -76.30910492]
[-0.64628714 -82.89688873]
[-13.54177856 -90.57581329]
[-25.75909805 -99.29341888]
[-37.21479034 -108.99015045]
[-47.83060074 -119.59977722]
[-57.53400803 -131.04981995]
[-66.25872803 -143.26205444]
[-73.94515991 -156.15307617]
[-80.54080200 -169.63479614]
[-86.00059509 -183.61515808]
[-90.28723907 -197.99862671]
[-93.37145996 -212.68695068]
[-95.23218536 -227.57981873]
[-95.85669708 -242.57546997]
[-95.24074554 -257.57147217]
[-93.38851929 -272.46539307]
[-90.31268311 -287.15548706]
[-86.03424835 -301.54138184]
[-80.58243561 -315.52484131]
[-73.99448395 -329.01034546]
[-66.31541443 -341.90573120]
[-57.59766006 -354.12295532]
[-47.90079117 -365.57855225]
[-37.29103851 -376.19421387]
[-25.84088326 -385.89749146]
[-13.62854004 -394.62207031]
[-0.73743337 -402.30834961]
[12.74437523 -408.90383911]
[26.72479057 -414.36346436]
[41.10831070 -418.64993286]
[55.79668045 -421.73397827]
[70.68955994 -423.59451294]
[85.68521881 -424.21884155]
[100.68121338 -423.60272217]
[115.57511139 -421.75030518]
[130.26516724 -418.67431641]
[144.65103149 -414.39569092]
[158.63442993 -408.94372559]
[172.11984253 -402.35562134]
[185.01515198 -394.67639160]
[197.23226929 -385.95849609]
[208.68772888 -376.26147461]
[219.30328369 -365.65161133]
[229.00640869 -354.20132446]
[237.73085022 -341.98889160]
[245.41697693 -329.09768677]
[252.01228333 -315.61578369]
[257.47174072 -301.63531494]
[261.75805664 -287.25173950]
[264.84191895 -272.56335449]
[266.70230103 -257.67044067]
[267.32644653 -242.67477417]
[266.71014404 -227.67878723]
[264.85754395 -212.78491211]
[261.78137207 -198.09489441]
[257.50259399 -183.70907593]
[252.05044556 -169.72573853]
[245.46217346 -156.24040222]
[237.78279114 -143.34519958]
[229.06475830 -131.12818909]
[219.36761475 -119.67283630]
[208.75759888 -109.05741119]
[197.30722046 -99.35440826]
[185.09466553 -90.63012695]
[172.20336914 -82.94415283]
[158.72140503 -76.34899902]
[144.74085999 -70.88970184]
[130.35723877 -66.60356903]
[115.66880035 -63.51987457]
[100.77587128 -61.65968323]
[101.39984894 -46.67266846]
[102.02382660 -31.68565178]
[102.64780426 -16.69863701]
[103.27178192 -1.71162021]
[103.89575958 13.27539539]
[104.51973724 28.26241112]
[105.14371490 43.24942780]
[118.66203308 46.15936661]
[131.08139038 52.23984528]
[141.67044067 61.13279724]
[149.80563354 72.31453705]
[155.00788879 85.12660980]
[156.97087097 98.81453705]
[155.57897949 112.57227325]
[150.91418457 125.58966064]
[143.25119019 137.10012817]
[133.04122925 146.42587280]
[120.88556671 153.01771545]
[107.50000000 156.48747253]
[107.50000000 171.48747253]
[107.50000000 186.48747253]
[107.50000000 201.48747253]
[107.50000000 216.48747253]
[107.50000000 231.48747253]
[107.50000000 246.48747253]
[107.50000000 261.48748779]
[107.50000000 276.48748779]
[107.50000000 291.48748779]
[122.03988647 295.54879761]
[134.94427490 303.38330078]
[145.25555420 314.40963745]
[152.20857239 327.80957031]
[155.28736877 342.58871460]
[154.26348877 357.65039062]
[149.21287537 371.87692261]
[140.51036072 384.21258545]
[128.80169678 393.74200439]
[114.95575714 399.75802612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 119]
[31 118]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
