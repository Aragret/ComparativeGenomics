%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAACGCCUGGGGGGGGGGGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCxxxxxxxxxxCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGCCCCCCCCCCACAAGCGCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.47406006]
[71.19830322 349.45803833]
[59.48964310 339.92861938]
[50.78712082 327.59295654]
[45.73651886 313.36642456]
[44.71262741 298.30474854]
[47.79142761 283.52557373]
[54.74444962 270.12564087]
[65.05573273 259.09933472]
[77.96011353 251.26481628]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[77.52191162 71.90776062]
[62.62277985 70.13326263]
[47.85493851 67.47924805]
[33.27025986 63.95503235]
[18.91997147 59.57299805]
[4.85448170 54.34854126]
[-8.87680435 48.30000687]
[-22.22565460 41.44864655]
[-35.14517975 33.81851959]
[-47.59000015 25.43642998]
[-59.51640320 16.33182144]
[-70.88249207 6.53667355]
[-81.64835358 -3.91460729]
[-91.77616119 -14.98531055]
[-101.23033905 -26.63655090]
[-109.97769165 -38.82740021]
[-117.98748016 -51.51504135]
[-125.23158264 -64.65490723]
[-131.68453979 -78.20083618]
[-137.32369995 -92.10525513]
[-142.12924194 -106.31932068]
[-146.08428955 -120.79311371]
[-149.17495728 -135.47578430]
[-151.39038086 -150.31575012]
[-152.72277832 -165.26091003]
[-153.16748047 -180.25874329]
[-152.72291565 -195.25659180]
[-151.39064026 -210.20176697]
[-149.17533875 -225.04176331]
[-146.08480835 -239.72445679]
[-142.12988281 -254.19827271]
[-137.32446289 -268.41238403]
[-131.68544006 -282.31686401]
[-125.23259735 -295.86285400]
[-117.98860931 -309.00277710]
[-109.97892761 -321.69049072]
[-101.23168945 -333.88140869]
[-91.77760315 -345.53271484]
[-81.64989471 -356.60351562]
[-70.88413239 -367.05490112]
[-59.51812363 -376.85012817]
[-47.59180069 -385.95486450]
[-35.14705276 -394.33706665]
[-22.22759438 -401.96728516]
[-8.87880516 -408.81878662]
[4.85242748 -414.86743164]
[18.91787148 -420.09201050]
[33.26811981 -424.47415161]
[47.85276794 -427.99850464]
[62.62059021 -430.65264893]
[77.51970673 -432.42727661]
[92.49778748 -433.31616211]
[107.50221252 -433.31616211]
[122.48029327 -432.42727661]
[137.37940979 -430.65264893]
[152.14723206 -427.99850464]
[166.73187256 -424.47415161]
[181.08212280 -420.09201050]
[195.14756775 -414.86743164]
[208.87879944 -408.81878662]
[222.22760010 -401.96728516]
[235.14704895 -394.33706665]
[247.59179688 -385.95486450]
[259.51812744 -376.85012817]
[270.88412476 -367.05490112]
[281.64990234 -356.60351562]
[291.77761841 -345.53271484]
[301.23168945 -333.88140869]
[309.97894287 -321.69049072]
[317.98861694 -309.00277710]
[325.23260498 -295.86285400]
[331.68542480 -282.31686401]
[337.32446289 -268.41238403]
[342.12988281 -254.19827271]
[346.08480835 -239.72445679]
[349.17535400 -225.04176331]
[351.39062500 -210.20176697]
[352.72290039 -195.25659180]
[353.16748047 -180.25874329]
[352.72277832 -165.26091003]
[351.39038086 -150.31575012]
[349.17495728 -135.47578430]
[346.08428955 -120.79311371]
[342.12924194 -106.31932068]
[337.32369995 -92.10525513]
[331.68453979 -78.20083618]
[325.23156738 -64.65490723]
[317.98748779 -51.51504135]
[309.97769165 -38.82740021]
[301.23034668 -26.63655090]
[291.77615356 -14.98531055]
[281.64834595 -3.91460729]
[270.88250732 6.53667355]
[259.51638794 16.33182144]
[247.58999634 25.43642998]
[235.14517212 33.81851959]
[222.22564697 41.44864655]
[208.87680054 48.30000687]
[195.14552307 54.34854126]
[181.08003235 59.57299805]
[166.72973633 63.95503235]
[152.14506531 67.47924805]
[137.37721252 70.13326263]
[122.47808838 71.90776062]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.03988647 251.26481628]
[134.94427490 259.09933472]
[145.25555420 270.12564087]
[152.20857239 283.52557373]
[155.28736877 298.30474854]
[154.26348877 313.36642456]
[149.21287537 327.59295654]
[140.51036072 339.92861938]
[128.80169678 349.45803833]
[114.95575714 355.47406006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
