%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCCUUAGGGGGGGGGGCCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACxxxxxxxxxxAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCCCCCCCCCCCACCCUUA\
) } def
/len { sequence length } bind def

/coor [
[68.06478119 362.24865723]
[55.50655746 353.89749146]
[45.42033386 342.68505859]
[38.44013977 329.31613159]
[35.00475693 314.63116455]
[35.33013535 299.55319214]
[39.39581680 285.03005981]
[46.94623947 271.97473145]
[57.50676727 261.20782471]
[70.41355896 253.40620422]
[84.85529327 249.06024170]
[84.23131561 234.07322693]
[83.60733795 219.08621216]
[82.98336029 204.09919739]
[82.35938263 189.11218262]
[81.73540497 174.12516785]
[81.11142731 159.13815308]
[80.48744965 144.15113831]
[67.87631989 136.02958679]
[53.97376633 141.66154480]
[40.07120895 147.29350281]
[26.16865158 152.92546082]
[12.26609612 158.55741882]
[10.22211266 173.77969360]
[0.82813108 185.93077087]
[-13.38891411 191.74206543]
[-28.60470772 189.65037537]
[-40.72628021 180.21835327]
[-46.49298859 165.98316956]
[-44.35361481 150.77400208]
[-34.88364410 138.68205261]
[-20.63044739 132.95999146]
[-5.42806482 135.14703369]
[6.63414001 144.65486145]
[20.53669548 139.02290344]
[34.43925095 133.39094543]
[48.34180832 127.75898743]
[62.24436569 122.12703705]
[57.59828949 107.00052643]
[58.67545319 91.50008392]
[65.12752533 77.68032837]
[75.90740967 67.29938507]
[89.43354034 61.59564209]
[103.81986237 61.14191055]
[108.12744904 46.77372742]
[112.43503571 32.40554047]
[116.74261475 18.03735733]
[121.05020142 3.66917348]
[107.11634827 -1.91240573]
[93.73892975 -8.72054768]
[81.02564240 -16.70043564]
[69.07885742 -25.78782082]
[57.99476242 -35.90953445]
[47.86259842 -46.98407745]
[38.76395035 -58.92228699]
[30.77207756 -71.62804413]
[23.95132065 -84.99903870]
[18.35660362 -98.92761993]
[14.03296852 -113.30163574]
[11.01523018 -128.00535583]
[9.32768440 -142.92039490]
[8.98391914 -157.92666626]
[9.98670292 -172.90333557]
[12.32796001 -187.72982788]
[15.98884201 -202.28675842]
[20.93987083 -216.45692444]
[27.14118385 -230.12623596]
[34.54285049 -243.18461609]
[43.08527756 -255.52694702]
[52.69968414 -267.05386353]
[63.30865860 -277.67251587]
[74.82678223 -287.29742432]
[87.16131592 -295.85113525]
[100.21294403 -303.26470947]
[113.87658691 -309.47848511]
[128.04222107 -314.44244385]
[142.59580994 -318.11660767]
[157.42015076 -320.47140503]
[172.39590454 -321.48785400]
[187.40248108 -321.15777588]
[202.31904602 -319.48385620]
[217.02552795 -316.47952271]
[231.40348816 -312.16900635]
[245.33715820 -306.58700562]
[258.71438599 -299.77844238]
[271.42742920 -291.79818726]
[283.37393188 -282.71041870]
[294.45770264 -272.58837891]
[304.58953857 -261.51351929]
[313.68783569 -249.57504272]
[321.67932129 -236.86903381]
[328.49966431 -223.49783325]
[334.09396362 -209.56907654]
[338.41714478 -195.19493103]
[341.43444824 -180.49111938]
[343.12152100 -165.57601929]
[343.46484375 -150.56974792]
[342.46157837 -135.59310913]
[340.11987305 -120.76668549]
[336.45855713 -106.20986938]
[331.50708008 -92.03985596]
[325.30535889 -78.37074280]
[317.90328979 -65.31257629]
[309.36050415 -52.97050476]
[299.74572754 -41.44389725]
[289.13644409 -30.82555962]
[277.61801147 -21.20099068]
[265.28323364 -12.64768124]
[252.23136902 -5.23449850]
[238.56753540 0.97886968]
[224.40174866 5.94239569]
[209.84805298 9.61611557]
[195.02363586 11.97045040]
[180.04785156 12.98644352]
[165.04129028 12.65591526]
[150.12477112 10.98152637]
[135.41838074 7.97675800]
[131.11080933 22.34494209]
[126.80321503 36.71312714]
[122.49563599 51.08131027]
[118.18804932 65.44949341]
[127.24194336 71.37357330]
[134.41911316 79.64272308]
[139.12066650 89.67478943]
[140.92530823 100.73736572]
[139.62611389 112.00115967]
[135.25158691 122.60221100]
[128.06875610 131.70806885]
[118.56781006 138.58317566]
[107.42907715 142.64791870]
[95.47446442 143.52716064]
[96.09844208 158.51417542]
[96.72241974 173.50119019]
[97.34639740 188.48820496]
[97.97037506 203.47521973]
[98.59435272 218.46223450]
[99.21833038 233.44924927]
[99.84230804 248.43626404]
[114.59531403 251.56671143]
[128.10594177 258.26846313]
[139.52493286 268.12026978]
[148.13444519 280.50277710]
[153.39328003 294.63769531]
[154.97088623 309.63641357]
[152.76808167 324.55615234]
[146.92333984 338.45901489]
[137.80406189 350.47106934]
[125.98348999 359.83724976]
[112.20468140 365.96871948]
[97.33377838 368.48013306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
