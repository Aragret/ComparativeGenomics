%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCCUUAGGGGGGGGGGAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUxxxxxxxxxxGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCCCCCCCCCCCUCGCCUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 405.22741699]
[71.19830322 399.21139526]
[59.48964310 389.68197632]
[50.78712082 377.34631348]
[45.73651886 363.11978149]
[44.71262741 348.05810547]
[47.79142761 333.27893066]
[54.74444962 319.87899780]
[65.05573273 308.85269165]
[77.96011353 301.01815796]
[92.50000000 296.95684814]
[92.50000000 281.95684814]
[92.50000000 266.95684814]
[92.50000000 251.95686340]
[92.50000000 236.95686340]
[92.50000000 221.95686340]
[92.50000000 206.95686340]
[92.50000000 191.95686340]
[92.50000000 176.95686340]
[92.50000000 161.95686340]
[92.50000000 146.95686340]
[92.50000000 131.95686340]
[78.65496826 124.93753052]
[69.58325958 112.34150696]
[67.31354523 96.98558807]
[53.08676910 92.23177338]
[38.85998917 87.47795868]
[24.63321114 82.72414398]
[10.40643215 77.97032928]
[-3.82034683 73.21651459]
[-18.04712677 68.46269989]
[-25.67878723 81.44158936]
[-35.84243011 92.54987335]
[-48.09375000 101.30195618]
[-61.89716339 107.31522369]
[-76.64924622 110.32682037]
[-91.70510864 110.20507050]
[-106.40656281 106.95531464]
[-120.11092377 100.71960449]
[-132.21910095 91.77054596]
[-142.20178223 80.49935150]
[-149.62255859 67.39875031]
[-154.15702820 53.04144669]
[-155.60696411 38.05507278]
[-153.90898132 23.09477425]
[-149.13731384 8.81454849]
[-141.50054932 -4.16133213]
[-131.33253479 -15.26561832]
[-119.07777405 -24.01288033]
[-105.27199554 -30.02072144]
[-90.51872253 -33.02650833]
[-75.46291351 -32.89884186]
[-60.76274109 -29.64329910]
[-47.06082916 -23.40220070]
[-34.95616913 -14.44837952]
[-24.97792625 -3.17325902]
[-17.56230545 9.93026066]
[-13.03348351 24.28935051]
[-11.58944321 39.27629089]
[-13.29331112 54.23592377]
[0.93346810 58.98973846]
[15.16024685 63.74355316]
[29.38702583 68.49736786]
[43.61380386 73.25118256]
[57.84058380 78.00499725]
[72.06736755 82.75881195]
[86.75885773 64.87496185]
[112.35668945 59.59660339]
[116.66426849 45.22842026]
[120.97185516 30.86023521]
[108.64302826 39.40424347]
[93.70590973 40.77626419]
[80.02692413 34.62115860]
[71.14683533 22.53215408]
[69.36422729 7.63845301]
[75.14052582 -6.20475435]
[86.98055267 -15.41419697]
[101.81954956 -17.60603714]
[115.81649017 -12.21292591]
[125.34830475 -0.63085181]
[127.94773102 14.14209366]
[135.13023376 0.97351128]
[127.06184387 -12.09540558]
[126.62490845 -27.44808197]
[133.93696594 -40.95472336]
[147.03111267 -48.98211288]
[162.38508606 -49.37092209]
[175.86874390 -42.01656342]
[183.85504150 -28.89732361]
[184.19572449 -13.54220963]
[176.79913330 -0.08167198]
[163.65492249 7.86347246]
[148.29882812 8.15602016]
[141.11631775 21.32460213]
[135.34004211 35.16781998]
[131.03245544 49.53600311]
[126.72486877 63.90419006]
[130.91593933 70.12390900]
[135.41514587 55.81456757]
[149.40777588 50.41029358]
[162.35736084 57.98051453]
[164.51283264 72.82483673]
[154.25111389 83.76545715]
[139.29808044 82.56334686]
[143.48915100 88.78306580]
[158.42346191 90.18537140]
[173.35777283 91.58767700]
[188.29208374 92.98998260]
[203.22639465 94.39228058]
[218.17446899 95.63916016]
[233.13471985 96.73046875]
[248.09497070 97.82177734]
[263.05520630 98.91309357]
[279.29226685 94.03513336]
[288.47445679 108.28728485]
[277.32116699 121.05601501]
[261.96389771 113.87333679]
[247.00366211 112.78202820]
[232.04341125 111.69071960]
[217.08316040 110.59940338]
[210.13833618 113.26679230]
[201.82408142 109.32659149]
[186.88977051 107.92428589]
[171.95547485 106.52198792]
[157.02116394 105.11968231]
[142.08685303 103.71737671]
[134.21778870 118.93795013]
[121.70692444 128.67813110]
[107.50000000 131.95686340]
[107.50000000 146.95686340]
[107.50000000 161.95686340]
[107.50000000 176.95686340]
[107.50000000 191.95686340]
[107.50000000 206.95686340]
[107.50000000 221.95686340]
[107.50000000 236.95686340]
[107.50000000 251.95686340]
[107.50000000 266.95684814]
[107.50000000 281.95684814]
[107.50000000 296.95684814]
[122.03988647 301.01815796]
[134.94427490 308.85269165]
[145.25555420 319.87899780]
[152.20857239 333.27893066]
[155.28736877 348.05810547]
[154.26348877 363.11978149]
[149.21287537 377.34631348]
[140.51036072 389.68197632]
[128.80169678 399.21139526]
[114.95575714 405.22741699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[68 97]
[69 96]
[70 95]
[81 94]
[82 93]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
