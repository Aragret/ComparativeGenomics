%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCUACCUGGGGGGGGGGACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGxxxxxxxxxxAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCCCCCCCCCCCACUUCAACCU\
) } def
/len { sequence length } bind def

/coor [
[76.21855164 380.36999512]
[62.99835968 373.09753418]
[52.11155319 362.65051270]
[44.30042267 349.74127197]
[40.09754181 335.24996948]
[39.78947067 320.16461182]
[43.39721298 305.51379395]
[50.67478561 292.29641724]
[61.12599182 281.41363525]
[74.03825378 273.60748291]
[88.53118896 269.41021729]
[88.21913147 254.41345215]
[87.90708160 239.41670227]
[87.59502411 224.41993713]
[87.28296661 209.42318726]
[86.97090912 194.42643738]
[86.65885162 179.42968750]
[86.34679413 164.43292236]
[86.03474426 149.43617249]
[85.72268677 134.43942261]
[85.41062927 119.44266510]
[82.38440704 92.81453705]
[72.87605286 81.21319580]
[59.17650604 83.03573608]
[46.47242355 77.87634277]
[38.05706787 67.18839264]
[36.05435181 53.84296036]
[40.88362122 41.35800552]
[31.61866951 29.56136322]
[22.35372162 17.76472473]
[13.08877182 5.96808386]
[0.34733474 13.91182518]
[-13.17829323 20.43138313]
[-27.32953072 25.45031929]
[-41.94046021 28.90978813]
[-56.83977890 30.76923180]
[-71.85279846 31.00684738]
[-86.80350494 29.61984825]
[-101.51659393 26.62449837]
[-115.81958008 22.05591583]
[-129.54475403 15.96766472]
[-142.53120422 8.43112564]
[-154.62666321 -0.46533749]
[-165.68931580 -10.61741924]
[-175.58947754 -21.90609169]
[-184.21105957 -34.19900131]
[-191.45297241 -47.35201645]
[-197.23033142 -61.21093369]
[-201.47537231 -75.61325073]
[-204.13833618 -90.39012146]
[-205.18800354 -105.36828613]
[-204.61206055 -120.37213898]
[-202.41726685 -135.22576904]
[-198.62934875 -149.75500488]
[-193.29273987 -163.78952026]
[-186.46997070 -177.16476440]
[-178.24105835 -189.72392273]
[-168.70248413 -201.31973267]
[-157.96607971 -211.81625366]
[-146.15773010 -221.09040833]
[-133.41586304 -229.03346252]
[-119.88988495 -235.55229187]
[-105.73838043 -240.57046509]
[-91.12725830 -244.02914429]
[-76.22784424 -245.88778687]
[-61.21480942 -246.12460327]
[-46.26417923 -244.73678589]
[-31.55124855 -241.74064636]
[-17.24851227 -237.17129517]
[-3.52366519 -231.08230591]
[9.46237659 -223.54507446]
[21.55735970 -214.64796448]
[32.61947250 -204.49528503]
[42.51902390 -193.20606995]
[51.13994217 -180.91270447]
[58.38115311 -167.75929260]
[64.15775299 -153.90007019]
[68.40202332 -139.49752808]
[71.06419373 -124.72051239]
[72.11305237 -109.74228668]
[71.53630829 -94.73846436]
[69.34071350 -79.88496399]
[65.55201721 -65.35591888]
[60.21464157 -51.32168961]
[53.39116287 -37.94681168]
[45.16157913 -25.38810158]
[35.62238312 -13.79280281]
[24.88541222 -3.29686546]
[34.15036011 8.49977493]
[43.41530991 20.29641533]
[52.68025970 32.09305573]
[69.02587891 30.94151878]
[82.98936462 39.82897949]
[88.98552704 55.43434906]
[84.47739410 71.70484161]
[93.98574829 83.30618286]
[89.46498108 69.00363922]
[93.76175690 54.63221741]
[105.39122772 45.15828705]
[120.33457184 43.85577011]
[133.42778015 51.17478561]
[140.14619446 64.58608246]
[138.16812134 79.45508575]
[128.17713928 90.64347839]
[113.62548065 94.28483582]
[128.48852539 96.30717468]
[143.35157776 98.32950592]
[158.21463013 100.35184479]
[165.25019836 86.92513275]
[176.45578003 76.71676636]
[190.47822571 70.95943451]
[205.62425232 70.34837341]
[220.06492615 74.95737457]
[232.05645752 84.22987366]
[240.15078735 97.04616547]
[243.37051392 111.85863495]
[241.32682800 126.87859344]
[234.26652527 140.29231262]
[223.04214478 150.48001099]
[209.00912476 156.21148682]
[193.86198425 156.79464722]
[179.42982483 152.15904236]
[167.45541382 142.86445618]
[159.38470459 130.03326416]
[156.19229126 115.21488953]
[141.32923889 113.19255066]
[126.46619415 111.17021942]
[111.60314941 109.14788818]
[100.40737915 119.13061523]
[100.71943665 134.12736511]
[101.03149414 149.12411499]
[101.34355164 164.12088013]
[101.65560913 179.11763000]
[101.96766663 194.11437988]
[102.27971649 209.11112976]
[102.59177399 224.10789490]
[102.90383148 239.10464478]
[103.21588898 254.10139465]
[103.52794647 269.09814453]
[118.18293762 272.68890381]
[131.40875244 279.95117188]
[142.30361938 290.38977051]
[150.12471008 303.29296875]
[154.33877563 317.78103638]
[154.65850830 332.86614990]
[151.06207275 347.51974487]
[143.79470825 360.74276733]
[133.35191345 371.63357544]
[120.44567871 379.44970703]
[105.95599365 383.65817261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 96]
[23 95]
[28 91]
[29 90]
[30 89]
[31 88]
[105 128]
[106 127]
[107 126]
[108 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
