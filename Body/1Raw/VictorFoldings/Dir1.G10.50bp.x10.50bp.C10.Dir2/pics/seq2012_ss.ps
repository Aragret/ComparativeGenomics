%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCGCAAGGGGGGGGGGUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAxxxxxxxxxxGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCCCCCCCCCCCUGGCCCAA\
) } def
/len { sequence length } bind def

/coor [
[88.37190247 528.48760986]
[75.81368256 520.13641357]
[65.72745514 508.92398071]
[58.74726486 495.55508423]
[55.31187820 480.87008667]
[55.63725662 465.79211426]
[59.70294189 451.26901245]
[67.25336456 438.21365356]
[77.81388855 427.44677734]
[90.72068787 419.64514160]
[105.16241455 415.29919434]
[104.53843689 400.31216431]
[103.91445923 385.32513428]
[103.29048157 370.33813477]
[102.66650391 355.35110474]
[102.04252625 340.36410522]
[101.41854858 325.37707520]
[100.79457092 310.39007568]
[100.17059326 295.40304565]
[99.54661560 280.41604614]
[85.49868774 275.35787964]
[74.42758179 265.27938843]
[68.04132080 251.69334412]
[67.34125519 236.65679932]
[72.46517181 222.45965576]
[82.66156006 211.27587891]
[96.39965820 204.83068848]
[95.77568054 189.84367371]
[95.15170288 174.85665894]
[94.52772522 159.86964417]
[93.90374756 144.88262939]
[93.27976990 129.89561462]
[89.83687592 123.30075836]
[92.80198669 114.59099579]
[83.73806000 100.50766754]
[91.90589142 85.88639069]
[91.28191376 70.89937592]
[90.65793610 55.91236115]
[90.03395844 40.92534637]
[89.40998077 25.93832970]
[81.42220306 38.63460541]
[69.02433014 47.07810974]
[54.28460693 49.86027527]
[39.66194153 46.51697159]
[27.59572601 37.60593796]
[20.09887886 24.61373901]
[18.42204094 9.70775986]
[22.84494591 -4.62534571]
[32.62975311 -15.99449444]
[46.14413834 -22.50305748]
[61.13359833 -23.06525803]
[75.09755707 -17.58731270]
[85.70651245 -6.98306179]
[91.19040680 6.97706604]
[94.59338379 -7.63182688]
[97.99636078 -22.24071884]
[101.39933777 -36.84961319]
[104.80232239 -51.45850372]
[108.20529938 -66.06739807]
[111.60827637 -80.67629242]
[115.01125336 -95.28517914]
[118.41423035 -109.89407349]
[117.31210327 -119.02846527]
[122.04294586 -124.76995850]
[125.74910736 -139.30490112]
[129.45527649 -153.83982849]
[115.87606812 -160.32762146]
[103.82366943 -169.34016418]
[93.76133728 -180.53103638]
[86.07585144 -193.47010803]
[81.06260681 -207.66001892]
[78.91431427 -222.55535889]
[79.71353149 -237.58358765]
[83.42955780 -252.16705322]
[89.91954041 -265.74520874]
[98.93403625 -277.79614258]
[110.12654114 -287.85665894]
[123.06685638 -295.54006958]
[137.25758362 -300.55099487]
[152.15325928 -302.69689941]
[167.18135071 -301.89523315]
[181.76422119 -298.17684937]
[195.34132385 -291.68466187]
[207.39080811 -282.66821289]
[217.44950867 -271.47409058]
[225.13081360 -258.53253174]
[230.13945007 -244.34098816]
[232.28292847 -229.44496155]
[231.47885132 -214.41700745]
[227.75810242 -199.83474731]
[221.26371765 -186.25868225]
[212.24533081 -174.21066284]
[201.04956055 -164.15377808]
[188.10676575 -156.47456360]
[173.91441345 -151.46821594]
[159.01803589 -149.32714844]
[143.99020386 -150.13366699]
[140.28404236 -135.59873962]
[136.57788086 -121.06379700]
[133.02311707 -106.49109650]
[129.62014771 -91.88220215]
[126.21717072 -77.27330780]
[122.81418610 -62.66441727]
[119.41120911 -48.05552673]
[116.00823212 -33.44663239]
[112.60525513 -18.83774185]
[109.20227814 -4.22884893]
[105.79930115 10.38004398]
[104.39699554 25.31435204]
[105.02097321 40.30136871]
[105.64495087 55.28838348]
[106.26892853 70.27539825]
[106.89290619 85.26241302]
[114.99454498 93.68555450]
[115.35920715 105.36685944]
[107.79874420 114.27893829]
[108.26678467 129.27163696]
[108.89076233 144.25865173]
[109.51473999 159.24566650]
[110.13871765 174.23268127]
[110.76269531 189.21969604]
[111.38667297 204.20671082]
[125.61297607 209.48760986]
[136.70372009 219.78511047]
[142.99005127 233.50720215]
[143.54231262 248.54989624]
[138.30749512 262.61978149]
[128.11248779 273.58367920]
[114.53363037 279.79205322]
[115.15760803 294.77908325]
[115.78158569 309.76608276]
[116.40556335 324.75311279]
[117.02954102 339.74011230]
[117.65351868 354.72714233]
[118.27749634 369.71414185]
[118.90147400 384.70117188]
[119.52545166 399.68820190]
[120.14942932 414.67520142]
[134.90243530 417.80563354]
[148.41307068 424.50741577]
[159.83204651 434.35919189]
[168.44155884 446.74172974]
[173.70040894 460.87661743]
[175.27801514 475.87536621]
[173.07521057 490.79507446]
[167.23046875 504.69796753]
[158.11117554 516.71002197]
[146.29061890 526.07617188]
[132.51179504 532.20764160]
[117.64089966 534.71905518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[27 122]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[34 116]
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[60 102]
[61 101]
[62 100]
[64 99]
[65 98]
[66 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
