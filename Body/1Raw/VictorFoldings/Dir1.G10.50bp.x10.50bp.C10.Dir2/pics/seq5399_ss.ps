%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAAACUGGGGGGGGGGCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGAxxxxxxxxxxUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCACCCCCCCCCCAACUCAAACU\
) } def
/len { sequence length } bind def

/coor [
[37.98437500 441.40930176]
[24.13843727 435.39328003]
[12.42977619 425.86386108]
[3.72725177 413.52819824]
[-1.32335019 399.30166626]
[-2.34724140 384.23999023]
[0.73155749 369.46081543]
[7.68457937 356.06091309]
[17.99586296 345.03457642]
[30.90024376 337.20007324]
[45.44013214 333.13873291]
[45.44013214 318.13873291]
[45.44013214 303.13873291]
[45.44013214 288.13873291]
[45.44013214 273.13873291]
[45.44013214 258.13873291]
[45.44013214 243.13874817]
[45.44013214 228.13874817]
[45.44013214 213.13874817]
[45.44013214 198.13874817]
[33.76217270 191.19979858]
[26.94508553 179.45030212]
[11.94589710 179.29426575]
[-3.05329108 179.13822937]
[-9.16034317 190.13005066]
[-19.31777763 197.41886902]
[-31.54388237 199.65875244]
[-43.48558807 196.48147583]
[-52.87134933 188.55541992]
[-57.94320679 177.44610596]
[-72.92292023 176.66625977]
[-87.90263367 175.88641357]
[-94.77407837 189.47697449]
[-106.58333588 199.09265137]
[-121.28437042 203.06750488]
[-136.33015442 200.71282959]
[-149.11389160 192.43663025]
[-157.42074585 179.67276001]
[-159.81149292 164.63267517]
[-155.87193298 149.92214966]
[-146.28459167 138.08985901]
[-132.71057129 131.18583679]
[-117.50161743 130.40623474]
[-103.29279327 135.88613892]
[-92.54586029 146.67610168]
[-87.12278748 160.90670776]
[-72.14307404 161.68655396]
[-57.16336060 162.46640015]
[-46.76030350 148.25920105]
[-29.77661133 143.04817200]
[-12.90105343 149.08123779]
[-2.89725471 164.13903809]
[12.10193348 164.29507446]
[27.10112190 164.45111084]
[29.84042740 157.99617004]
[34.17017746 152.43240356]
[39.81475449 148.14562988]
[46.40659714 145.43945312]
[53.51010132 144.51373291]
[60.65041733 145.44995117]
[67.34518433 148.20449829]
[78.22400665 137.87728882]
[89.10282898 127.55008698]
[99.98165894 117.22288513]
[81.31044769 119.63848114]
[63.04956055 101.87020874]
[64.41381836 69.47390747]
[65.34944916 54.50311661]
[66.28507996 39.53232574]
[67.22070312 24.56153488]
[53.70236588 17.54908752]
[44.21004486 5.64044666]
[40.38834381 -9.10114384]
[42.89939499 -24.12161255]
[51.30813980 -36.81857681]
[64.15772247 -44.99220657]
[79.22186279 -47.22637177]
[93.89061737 -43.13399124]
[105.62252808 -33.42409515]
[112.38497925 -19.77897835]
[113.00632477 -4.56274271]
[107.37892151 9.58830738]
[96.47774506 20.22241783]
[82.19149780 25.49716377]
[81.25586700 40.46795654]
[80.32024384 55.43874741]
[79.38461304 70.40953827]
[86.21273041 73.51224518]
[98.41471100 64.78804016]
[99.86897278 79.71765137]
[106.69709778 82.82035065]
[117.35871887 72.26905823]
[121.16119385 56.31684494]
[136.95259094 51.89372635]
[148.48806763 63.54983139]
[143.90092468 79.29435730]
[127.91001129 82.93068695]
[117.24838257 93.48197937]
[123.31140137 107.20203400]
[138.29110718 106.42218781]
[153.27082825 105.64234161]
[156.57072449 90.91097260]
[163.72373962 77.61672974]
[174.19908142 66.74613190]
[187.21940613 59.10585785]
[201.81851196 55.26285934]
[216.91305542 55.50231171]
[231.38291931 59.80645370]
[244.15434265 67.85588074]
[254.27960205 79.05327606]
[261.00732422 92.56771851]
[263.83831787 107.39634705]
[262.56243896 122.43877411]
[257.27438354 136.57876587]
[248.36657715 148.76701355]
[236.50004578 158.09910583]
[222.55532837 163.88250732]
[207.56726074 165.68806458]
[192.64801025 163.38179016]
[178.90472412 157.13482666]
[167.35722351 147.41075134]
[158.86241150 134.93113708]
[154.05067444 120.62205505]
[139.07095337 121.40190125]
[124.09123993 122.18174744]
[110.30886078 128.10171509]
[99.43003845 138.42890930]
[88.55120850 148.75611877]
[77.67238617 159.08332825]
[78.25852966 182.93745422]
[60.44013214 198.13874817]
[60.44013214 213.13874817]
[60.44013214 228.13874817]
[60.44013214 243.13874817]
[60.44013214 258.13873291]
[60.44013214 273.13873291]
[60.44013214 288.13873291]
[60.44013214 303.13873291]
[60.44013214 318.13873291]
[60.44013214 333.13873291]
[74.98001862 337.20007324]
[87.88439941 345.03457642]
[98.19568634 356.06091309]
[105.14870453 369.46081543]
[108.22750092 384.23999023]
[107.20361328 399.30166626]
[102.15300751 413.52819824]
[93.45048523 425.86386108]
[81.74182129 435.39328003]
[67.89588928 441.40930176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 54]
[23 53]
[24 52]
[30 48]
[31 47]
[32 46]
[61 129]
[62 128]
[63 127]
[64 126]
[67 87]
[68 86]
[69 85]
[70 84]
[91 98]
[92 97]
[99 125]
[100 124]
[101 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
