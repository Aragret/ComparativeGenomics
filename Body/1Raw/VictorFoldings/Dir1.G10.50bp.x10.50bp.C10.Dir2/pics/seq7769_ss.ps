%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCCCCAGGGGGGGGGGUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUxxxxxxxxxxACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUACCCCCCCCCCACCUCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[168.59062195 498.24047852]
[154.74467468 492.22442627]
[143.03602600 482.69500732]
[134.33349609 470.35934448]
[129.28289795 456.13284302]
[128.25900269 441.07113647]
[131.33779907 426.29199219]
[138.29081726 412.89205933]
[148.60211182 401.86572266]
[161.50648499 394.03121948]
[176.04637146 389.96990967]
[176.04637146 374.96990967]
[176.04637146 359.96990967]
[176.04637146 344.96990967]
[176.04637146 329.96990967]
[176.04637146 314.96990967]
[176.04637146 299.96990967]
[176.04637146 284.96990967]
[176.04637146 269.96990967]
[176.04637146 254.96990967]
[176.04637146 239.96990967]
[172.03863525 225.51522827]
[164.31454468 212.65681458]
[156.59046936 199.79841614]
[148.86637878 186.94001770]
[131.72834778 187.88462830]
[116.37593842 180.01335144]
[107.04414368 165.39706421]
[106.35771942 147.98074341]
[114.59352875 132.51893616]
[106.34123993 119.99297333]
[98.08895111 107.46701050]
[91.19279480 116.64790344]
[80.18511963 122.47202301]
[66.37306213 123.60808563]
[51.60700226 120.96922302]
[36.66088486 126.15806580]
[25.49328804 116.30239868]
[10.72723293 113.66353607]
[-3.20473313 121.61840057]
[-18.05665207 115.55209351]
[-22.43540001 100.11816406]
[-12.98197937 87.15620422]
[3.05175686 86.60951996]
[13.36609745 98.89747620]
[28.13215256 101.53634644]
[42.02210617 96.15875244]
[54.24586868 106.20316315]
[69.01192474 108.84203339]
[74.34273529 103.56638336]
[70.53556061 89.05757904]
[85.00436401 93.01509094]
[90.33517456 87.73944855]
[87.85005951 72.94673920]
[85.36493683 58.15403366]
[73.31533813 44.26925659]
[80.00916290 28.07689285]
[77.21683502 13.33908749]
[74.42451477 -1.39871824]
[71.63218689 -16.13652420]
[56.59041977 -17.42017555]
[42.45317078 -22.71552467]
[30.26951599 -31.62962532]
[20.94356728 -43.50098801]
[15.16737175 -57.44868088]
[13.36955833 -72.43769073]
[15.68354034 -87.35573578]
[21.93760300 -101.09579468]
[31.66765213 -112.63826752]
[44.15165710 -121.12662506]
[58.46321869 -125.93097687]
[73.54032898 -126.69480133]
[88.26415253 -123.36142731]
[101.54210663 -116.17820740]
[112.38885498 -105.67817688]
[119.99951172 -92.64052582]
[123.80931091 -78.03271484]
[123.53554535 -62.93875885]
[119.19852448 -48.47871780]
[111.12007904 -35.72562408]
[99.89969635 -25.62584305]
[86.36999512 -18.92884827]
[89.16232300 -4.19104290]
[91.95464325 10.54676342]
[94.74697113 25.28456879]
[104.58954620 32.38604736]
[107.00658417 44.68957901]
[100.15764618 55.66891479]
[102.64276123 70.46162415]
[105.12788391 85.25433350]
[110.61491394 99.21472168]
[118.86720276 111.74068451]
[127.11949158 124.26664734]
[139.95236206 122.28099823]
[152.53210449 125.30757141]
[162.98146057 132.85807800]
[169.75500488 143.77191162]
[171.86770630 156.39439392]
[169.03800964 168.82765198]
[161.72477722 179.21592712]
[169.44886780 192.07432556]
[177.17295837 204.93273926]
[184.89703369 217.79113770]
[185.03187561 202.79174805]
[188.43919373 188.18385315]
[194.95449829 174.67271423]
[204.26322937 162.91061401]
[215.91601562 153.46536255]
[229.35026550 146.79296875]
[243.91743469 143.21556091]
[258.91424561 142.90585327]
[273.61666870 145.87878418]
[287.31494141 151.99082947]
[299.34774780 160.94692993]
[309.13418579 172.31468201]
[316.20175171 185.54530334]
[320.20925903 200.00006104]
[320.96325684 214.98109436]
[318.42730713 229.76518250]
[312.72387695 243.63856506]
[304.12832642 255.93148804]
[293.05554199 266.05047607]
[280.04019165 273.50701904]
[265.71054077 277.94113159]
[250.75842285 279.13873291]
[235.90568542 277.04205322]
[221.86936951 271.75222778]
[209.32711792 263.52471924]
[198.88444519 252.75669861]
[191.04637146 239.96990967]
[191.04637146 254.96990967]
[191.04637146 269.96990967]
[191.04637146 284.96990967]
[191.04637146 299.96990967]
[191.04637146 314.96990967]
[191.04637146 329.96990967]
[191.04637146 344.96990967]
[191.04637146 359.96990967]
[191.04637146 374.96990967]
[191.04637146 389.96990967]
[205.58625793 394.03121948]
[218.49064636 401.86572266]
[228.80192566 412.89205933]
[235.75494385 426.29199219]
[238.83375549 441.07113647]
[237.80986023 456.13284302]
[232.75926208 470.35934448]
[224.05673218 482.69500732]
[212.34806824 492.22442627]
[198.50213623 498.24047852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 103]
[23 102]
[24 101]
[25 100]
[30 93]
[31 92]
[32 91]
[35 49]
[36 48]
[38 46]
[39 45]
[53 90]
[54 89]
[55 88]
[57 85]
[58 84]
[59 83]
[60 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
