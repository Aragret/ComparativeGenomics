%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCCAAACGGGGGGGGGGCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUAxxxxxxxxxxCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACCCCCCCCCCCUAAUCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[83.85348511 395.43084717]
[71.52037811 386.77972412]
[61.42192841 375.60076904]
[54.06467438 362.45471191]
[49.81765747 348.00097656]
[48.89389801 332.96453857]
[51.33973694 318.09963989]
[57.03248978 304.15185547]
[65.68660736 291.82083130]
[76.86801147 281.72509766]
[90.01584625 274.37103271]
[104.47061157 270.12753296]
[103.54719543 255.15597534]
[102.62378693 240.18441772]
[101.70037079 225.21287537]
[100.77695465 210.24131775]
[99.85354614 195.26977539]
[98.93013000 180.29821777]
[97.85305786 165.33694458]
[96.62244415 150.38749695]
[95.39183807 135.43806458]
[94.16122437 120.48863220]
[81.23060608 110.07894897]
[79.69548798 93.55001831]
[67.91335297 84.26663208]
[56.13121414 74.98324585]
[44.34907913 65.69985962]
[31.59581947 57.80337524]
[18.03392410 51.39440155]
[4.47202778 44.98542404]
[-9.08986855 38.57645035]
[-13.54071331 39.11463928]
[-17.51439476 38.25824738]
[-20.62275124 36.33864594]
[-22.62958336 33.78094101]
[-23.46823502 31.04457855]
[-36.45861435 23.54457855]
[-49.44899750 16.04457855]
[-62.66418076 8.94817448]
[-76.09162903 2.26209927]
[-89.51908112 -4.42397642]
[-87.65236664 10.45941639]
[-97.97308350 21.34439278]
[-112.93469238 20.27181244]
[-121.59719086 8.02595139]
[-117.62653351 -6.43896675]
[-103.92669678 -12.54614925]
[-116.59821320 -20.57314682]
[-129.26972961 -28.60014343]
[-145.17535400 -26.50472260]
[-156.63018799 -37.73709488]
[-154.84707642 -53.68074799]
[-141.19386292 -62.10507202]
[-126.14411926 -56.54765320]
[-121.24272919 -41.27165985]
[-108.57121277 -33.24466324]
[-95.89969635 -25.21766472]
[-82.83300018 -17.85142517]
[-69.40555573 -11.16534996]
[-55.97810364 -4.47927475]
[-52.48578644 -5.28607178]
[-48.42520142 -4.40218639]
[-44.61360168 -1.57777178]
[-41.94899750 3.05419683]
[-28.95861626 10.55419636]
[-15.96823406 18.05419731]
[-2.68089318 25.01455307]
[10.88100338 31.42352867]
[24.44289970 37.83250427]
[38.00479507 44.24147797]
[30.99045944 30.98255539]
[30.81442833 15.98358727]
[37.51565552 2.56369281]
[49.61122513 -6.30744791]
[64.42452240 -8.66674328]
[78.67751312 -3.99210763]
[89.21616364 6.68201256]
[93.70838165 20.99354553]
[91.16007996 35.77550125]
[82.13518524 47.75678635]
[68.63079071 54.28606415]
[53.63246155 53.91772079]
[65.41459656 63.20110703]
[77.19673920 72.48448944]
[88.97887421 81.76787567]
[103.26791382 78.94777679]
[116.02960968 85.96692657]
[130.07159424 80.69218445]
[140.26954651 68.59622955]
[154.90476990 71.36382294]
[168.94674683 66.08908844]
[182.98872375 60.81434250]
[197.03070068 55.53960037]
[182.93070984 50.42196655]
[173.72000122 38.58292770]
[172.22654724 23.65745926]
[178.90890503 10.22815990]
[191.71536255 2.41825891]
[206.71392822 2.62564874]
[219.29956055 10.78665447]
[225.60804749 24.39558220]
[223.70249939 39.27405167]
[214.16947937 50.85285187]
[228.94160461 48.24813080]
[243.71371460 45.64340591]
[248.89129639 31.18352318]
[260.61553955 21.26193047]
[275.73266602 18.54748917]
[290.17623901 23.77036858]
[300.06103516 35.52564240]
[302.72805786 50.65119553]
[297.45993042 65.07833862]
[285.67373657 74.92623901]
[270.53991699 77.54585266]
[256.12933350 72.23252869]
[246.31843567 60.41552353]
[231.54632568 63.02024460]
[216.77421570 65.62496948]
[202.30543518 69.58158112]
[188.26345825 74.85632324]
[174.22148132 80.13105774]
[160.17950439 85.40579987]
[150.98593140 97.12447357]
[135.34632874 94.73416138]
[121.30435181 100.00890350]
[117.99723053 111.40066528]
[109.11065674 119.25802612]
[110.34127045 134.20745850]
[111.57188416 149.15689087]
[112.80249023 164.10632324]
[116.64591217 172.46240234]
[113.90167999 179.37480164]
[114.82509613 194.34635925]
[115.74850464 209.31790161]
[116.67192078 224.28945923]
[117.59533691 239.26100159]
[118.51874542 254.23255920]
[119.44216156 269.20410156]
[134.30885315 271.63912964]
[148.26075745 277.32174683]
[160.59805298 285.96691895]
[170.70191956 297.14096069]
[178.06553650 310.28344727]
[182.31956482 324.73513794]
[183.25061035 339.77111816]
[180.81198120 354.63720703]
[175.12597656 368.58773804]
[166.47784424 380.92294312]
[155.30133057 391.02410889]
[142.15705872 398.38455200]
[127.70435333 402.63507080]
[112.66814423 403.56246948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 130]
[20 129]
[21 128]
[22 127]
[24 85]
[25 84]
[26 83]
[27 82]
[28 70]
[29 69]
[30 68]
[31 67]
[36 66]
[37 65]
[38 64]
[39 60]
[40 59]
[41 58]
[47 57]
[48 56]
[49 55]
[87 125]
[88 124]
[90 122]
[91 121]
[92 120]
[93 119]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
