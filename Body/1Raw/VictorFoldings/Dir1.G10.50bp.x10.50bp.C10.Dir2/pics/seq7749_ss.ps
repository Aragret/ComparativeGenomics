%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCUUCAAGGGGGGGGGGCUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCxxxxxxxxxxUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCACCCCCCCCCCUACUCUUCAA\
) } def
/len { sequence length } bind def

/coor [
[88.82651520 361.28414917]
[74.98057556 355.26812744]
[63.27191544 345.73870850]
[54.56938934 333.40304565]
[49.51878738 319.17651367]
[48.49489594 304.11483765]
[51.57369614 289.33566284]
[58.52671814 275.93576050]
[68.83800507 264.90942383]
[81.74238586 257.07489014]
[96.28227234 253.01359558]
[96.28227234 238.01359558]
[96.28227234 223.01359558]
[96.28227234 208.01359558]
[96.28227234 193.01359558]
[96.28227234 178.01359558]
[96.28227234 163.01359558]
[96.28227234 148.01359558]
[96.28227234 133.01359558]
[96.28227234 118.01358795]
[85.73097992 107.35196686]
[70.73178864 107.19593048]
[67.73477173 121.94091034]
[62.00116348 135.85212708]
[53.73822403 148.42672729]
[43.24465942 159.21011353]
[30.89980125 167.81250000]
[17.14990997 173.92289734]
[2.49203587 177.32043457]
[-12.54394817 177.88227844]
[-27.41450119 175.58811951]
[-41.58206177 170.52090454]
[-54.53448105 162.86378479]
[-65.80354309 152.89360046]
[-74.98186493 140.97071838]
[-81.73767090 127.52618408]
[-85.82672882 113.04598999]
[-87.10123444 98.05358887]
[-85.51510620 83.09094238]
[-81.12568665 68.69895172]
[-74.09165192 55.39786530]
[-64.66727448 43.66851807]
[-53.19323730 33.93491745]
[-40.08432388 26.54892349]
[-25.81441116 21.77753830]
[-10.89934826 19.79324532]
[4.12169361 20.66777229]
[18.70571518 24.36950684]
[32.32551193 30.76463318]
[44.48873520 39.62197113]
[54.75569534 50.62133789]
[62.75524521 63.36510849]
[68.19821167 77.39260101]
[70.88782501 92.19673920]
[85.88701630 92.35277557]
[99.54325867 86.14736938]
[109.29090881 74.74634552]
[119.03855896 63.34532928]
[128.78620911 51.94430542]
[125.32581329 36.93325043]
[131.29811096 22.92664337]
[144.21998596 15.21371937]
[159.02848816 16.57242012]
[168.77613831 5.17139959]
[178.52378845 -6.22962141]
[188.27145386 -17.63064194]
[178.06674194 -28.64793205]
[169.21011353 -40.77544022]
[161.82130432 -53.84915924]
[156.00025940 -67.69227600]
[151.82569885 -82.11759186]
[149.35408020 -96.93000031]
[148.61883545 -111.92919922]
[149.62988281 -126.91233826]
[152.37358093 -141.67677307]
[156.81280518 -156.02284241]
[162.88752747 -169.75654602]
[170.51557922 -182.69212341]
[179.59381104 -194.65464783]
[189.99946594 -205.48234558]
[201.59179688 -215.02877808]
[214.21403503 -223.16485596]
[227.69548035 -229.78051758]
[241.85382080 -234.78631592]
[256.49755859 -238.11454773]
[271.42868042 -239.72019958]
[286.44525146 -239.58155823]
[301.34417725 -237.70051575]
[315.92398071 -234.10247803]
[329.98748779 -228.83613586]
[343.34451294 -221.97268677]
[355.81439209 -213.60496521]
[367.22848511 -203.84613037]
[377.43243408 -192.82817078]
[386.28826904 -180.70005798]
[393.67620850 -167.62585449]
[399.49630737 -153.78234863]
[403.66992188 -139.35675049]
[406.14053345 -124.54417419]
[406.87478638 -109.54492950]
[405.86273193 -94.56185913]
[403.11807251 -79.79760742]
[398.67788696 -65.45182800]
[392.60226440 -51.71854019]
[384.97332764 -38.78347015]
[375.89428711 -26.82154655]
[365.48791504 -15.99454308]
[353.89495850 -6.44888258]
[341.27218628 1.68634117]
[327.79028320 8.30110836]
[313.63162231 13.30596161]
[298.98764038 16.63321686]
[284.05642700 18.23787498]
[269.03985596 18.09823608]
[254.14105225 16.21619034]
[239.56147766 12.61718655]
[225.49833679 7.34989977]
[212.14178467 0.48556355]
[199.67247009 -7.88299036]
[189.92481995 3.51803064]
[180.17716980 14.91905212]
[170.42950439 26.32007217]
[174.07304382 40.73751450]
[168.46199036 54.70103455]
[155.55368042 62.77749634]
[140.18724060 61.69195938]
[130.43957520 73.09297943]
[120.69193268 84.49400330]
[110.94427490 95.89501953]
[115.60330963 105.27842712]
[111.28227234 118.01358795]
[111.28227234 133.01359558]
[111.28227234 148.01359558]
[111.28227234 163.01359558]
[111.28227234 178.01359558]
[111.28227234 193.01359558]
[111.28227234 208.01359558]
[111.28227234 223.01359558]
[111.28227234 238.01359558]
[111.28227234 253.01359558]
[125.82215881 257.07489014]
[138.72653198 264.90942383]
[149.03782654 275.93576050]
[155.99084473 289.33566284]
[159.06964111 304.11483765]
[158.04574585 319.17651367]
[152.99514771 333.40304565]
[144.29261780 345.73870850]
[132.58396912 355.26812744]
[118.73802185 361.28414917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 55]
[22 54]
[56 129]
[57 128]
[58 127]
[59 126]
[63 122]
[64 121]
[65 120]
[66 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
