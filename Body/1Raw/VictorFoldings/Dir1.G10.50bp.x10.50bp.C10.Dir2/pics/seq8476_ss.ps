%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAACCACGGGGGGGGGGCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGxxxxxxxxxxACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCAC\
) } def
/len { sequence length } bind def

/coor [
[83.41532135 337.93817139]
[70.85710144 329.58700562]
[60.77087784 318.37457275]
[53.79068375 305.00564575]
[50.35530090 290.32064819]
[50.68067932 275.24270630]
[54.74636078 260.71957397]
[62.29678345 247.66423035]
[72.85730743 236.89733887]
[85.76410675 229.09570312]
[100.20583344 224.74975586]
[99.58185577 209.76274109]
[98.95787811 194.77572632]
[98.33390045 179.78871155]
[97.70992279 164.80169678]
[97.08594513 149.81468201]
[96.46196747 134.82766724]
[95.83798981 119.84064484]
[84.13836670 110.45348358]
[69.37231445 113.09234619]
[54.60625839 115.73120880]
[39.84020233 118.37007141]
[25.07414627 121.00894165]
[23.44830132 136.02670288]
[17.65604782 149.97756958]
[8.16693497 161.73057556]
[-4.24979544 170.33299255]
[-18.58757401 175.08744812]
[-33.68410492 175.60850525]
[-48.31557465 171.85394287]
[-61.29587555 164.12811279]
[-71.57276154 153.05732727]
[-78.31311798 139.53903198]
[-80.97055054 124.66910553]
[-79.32961273 109.65297699]
[-73.52334595 95.70794678]
[-64.02243805 83.96446228]
[-51.59706879 75.37452698]
[-37.25452042 70.63449097]
[-22.15747643 70.12859344]
[-7.52978563 73.89785767]
[5.44275045 81.63671875]
[15.70850563 92.71782684]
[22.43528175 106.24288177]
[37.20133972 103.60401917]
[51.96739197 100.96515656]
[66.73345184 98.32629395]
[81.49950409 95.68742371]
[66.73804474 93.02297211]
[55.49824905 83.08985138]
[51.03894806 68.76802063]
[54.65305710 54.20992661]
[65.29271698 43.63648224]
[79.87309265 40.11331940]
[94.16679382 44.66193771]
[104.02956390 55.96352005]
[106.60182190 70.74132538]
[101.13923645 84.70877075]
[111.12196350 73.51300049]
[121.10469055 62.31723785]
[131.08741760 51.12147141]
[141.07014465 39.92570496]
[146.26556396 25.85418510]
[145.95350647 10.85743141]
[145.64144897 -4.13932228]
[145.32939148 -19.13607597]
[130.90223694 -23.73345757]
[118.75103760 -32.76823044]
[110.19387054 -45.26037598]
[106.15895081 -59.85483170]
[107.08395386 -74.96850586]
[112.86854553 -88.96197510]
[122.88526154 -100.31733704]
[136.04754639 -107.80284119]
[150.92767334 -110.60652161]
[165.91154480 -108.42426300]
[179.37382507 -101.49275970]
[189.85423279 -90.56391144]
[196.21592712 -76.82318115]
[197.76882935 -61.76107025]
[194.34451294 -47.01140213]
[186.31440735 -34.17410660]
[174.54956055 -24.64168167]
[160.32614136 -19.44813156]
[160.63819885 -4.45137835]
[160.95025635 10.54537487]
[161.26231384 25.54212952]
[167.11212158 30.23571014]
[169.39173889 15.40994358]
[183.37100220 9.97118092]
[195.07080078 19.35812759]
[192.79145813 34.18393326]
[178.81175232 39.62287140]
[184.66156006 44.31645203]
[199.36952209 41.37097168]
[214.07748413 38.42548752]
[214.73231506 23.36445808]
[218.97314453 8.89798355]
[226.55339050 -4.13287115]
[237.03237915 -14.97051144]
[249.80084229 -22.98484993]
[264.11645508 -27.70994568]
[279.14694214 -28.87108421]
[294.01840210 -26.40076065]
[307.86630249 -20.44259644]
[319.88546753 -11.34299183]
[329.37716675 0.36901596]
[335.78955078 14.01250458]
[338.74981689 28.79426003]
[338.08584595 43.85488892]
[333.83624268 58.31879044]
[326.24810791 71.34504700]
[315.76254272 82.17633057]
[302.98922729 90.18292999]
[288.67074585 94.89934540]
[273.63955688 96.05136871]
[258.76959229 93.57202911]
[244.92532349 87.60547638]
[232.91166687 78.49858093]
[223.42707825 66.78082275]
[217.02296448 53.13344955]
[202.31500244 56.07892990]
[187.60704041 59.02441406]
[152.26591492 49.90843201]
[142.28318787 61.10419846]
[132.30046082 72.29996490]
[122.31772614 83.49572754]
[112.33499908 94.69149780]
[116.25015259 101.32996368]
[116.15065002 110.34579468]
[110.82501221 119.21666718]
[111.44898987 134.20368958]
[112.07295990 149.19070435]
[112.69693756 164.17771912]
[113.32091522 179.16473389]
[113.94489288 194.15174866]
[114.56887054 209.13876343]
[115.19284821 224.12577820]
[129.94586182 227.25622559]
[143.45649719 233.95797729]
[154.87547302 243.80976868]
[163.48498535 256.19229126]
[168.74383545 270.32720947]
[170.32144165 285.32592773]
[168.11863708 300.24566650]
[162.27388000 314.14852905]
[153.15460205 326.16058350]
[141.33403015 335.52673340]
[127.55522156 341.65823364]
[112.68432617 344.16964722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
[63 87]
[64 86]
[65 85]
[66 84]
[94 123]
[95 122]
[96 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
