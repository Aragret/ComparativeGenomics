%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUAACUUGGGGGGGGGGUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGxxxxxxxxxxUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUCCCCCCCCCCGAAAAAACUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 364.81317139]
[71.19830322 358.79714966]
[59.48964310 349.26773071]
[50.78712082 336.93206787]
[45.73651886 322.70553589]
[44.71262741 307.64385986]
[47.79142761 292.86468506]
[54.74444962 279.46475220]
[65.05573273 268.43844604]
[77.96011353 260.60391235]
[92.50000000 256.54260254]
[92.50000000 241.54261780]
[92.50000000 226.54261780]
[92.50000000 211.54261780]
[92.50000000 196.54261780]
[92.50000000 181.54261780]
[92.50000000 166.54261780]
[92.50000000 151.54261780]
[92.50000000 136.54261780]
[92.50000000 121.54261017]
[83.04982758 115.26518250]
[77.79251862 105.21169281]
[78.02853394 93.86901855]
[83.69950867 84.04293060]
[93.40263367 78.16404724]
[94.02661133 63.17703247]
[94.65058899 48.19001389]
[95.27456665 33.20299911]
[95.89854431 18.21598244]
[80.97902679 16.61273766]
[66.19631958 14.03713989]
[51.61371231 10.50021648]
[37.29365158 6.01711512]
[23.29746628 0.60703188]
[9.68508339 -5.70686579]
[-3.48520303 -12.89754009]
[-16.15699577 -20.93420029]
[-28.27603340 -29.78243065]
[-39.79042053 -39.40434265]
[-50.65084457 -49.75873184]
[-60.81080627 -60.80126190]
[-70.22679901 -72.48464203]
[-78.85848999 -84.75885010]
[-86.66893005 -97.57131195]
[-93.62467194 -110.86717224]
[-99.69592285 -124.58950043]
[-104.85668945 -138.67951965]
[-109.08486938 -153.07690430]
[-112.36236572 -167.72000122]
[-114.67512512 -182.54611206]
[-116.01326752 -197.49172974]
[-116.37104034 -212.49287415]
[-115.74692535 -227.48529053]
[-114.14359283 -242.40480042]
[-111.56790924 -257.18750000]
[-108.03089905 -271.77008057]
[-103.54771423 -286.09011841]
[-98.13755035 -300.08627319]
[-91.82357025 -313.69860840]
[-84.63282013 -326.86886597]
[-76.59608459 -339.54061890]
[-67.74777985 -351.65957642]
[-58.12580109 -363.17391968]
[-47.77134705 -374.03427124]
[-36.72875977 -384.19418335]
[-25.04532242 -393.61010742]
[-12.77106667 -402.24172974]
[0.04144471 -410.05209351]
[13.33734798 -417.00775146]
[27.05970764 -423.07891846]
[41.14976120 -428.23959351]
[55.54717255 -432.46771240]
[70.19028473 -435.74511719]
[85.01640320 -438.05776978]
[99.96203613 -439.39584351]
[114.96318054 -439.75350952]
[129.95559692 -439.12930298]
[144.87509155 -437.52590942]
[159.65777588 -434.95013428]
[174.24034119 -431.41302490]
[188.56034851 -426.92974854]
[202.55647278 -421.51950073]
[216.16877747 -415.20544434]
[229.33897400 -408.01461792]
[242.01068115 -399.97781372]
[254.12960815 -391.12942505]
[265.64389038 -381.50738525]
[276.50418091 -371.15286255]
[286.66400146 -360.11022949]
[296.07986450 -348.42672729]
[304.71142578 -336.15243530]
[312.52169800 -323.33987427]
[319.47729492 -310.04391479]
[325.54837036 -296.32153320]
[330.70898438 -282.23144531]
[334.93698120 -267.83401489]
[338.21432495 -253.19087219]
[340.52688599 -238.36474609]
[341.86486816 -223.41909790]
[342.22247314 -208.41795349]
[341.59817505 -193.42553711]
[339.99465942 -178.50605774]
[337.41879272 -163.72338867]
[333.88162231 -149.14083862]
[329.39825439 -134.82086182]
[323.98794556 -120.82477570]
[317.67379761 -107.21250916]
[310.48287964 -94.04234314]
[302.44601440 -81.37069702]
[293.59756470 -69.25181580]
[283.97543335 -57.73759842]
[273.62084961 -46.87735748]
[262.57815552 -36.71759033]
[250.89460754 -27.30180931]
[238.62025452 -18.67033005]
[225.80764771 -10.86011600]
[212.51165771 -3.90461230]
[198.78923035 2.16639662]
[184.69911194 7.32691383]
[170.30165100 11.55484104]
[155.65849304 14.83207321]
[140.83235168 17.14457703]
[125.88670349 18.48244858]
[110.88555908 18.83996010]
[110.26158142 33.82697678]
[109.63760376 48.81399155]
[109.01362610 63.80101013]
[108.38964844 78.78802490]
[121.14802551 91.45043945]
[120.77407074 109.42189026]
[107.50000000 121.54261017]
[107.50000000 136.54261780]
[107.50000000 151.54261780]
[107.50000000 166.54261780]
[107.50000000 181.54261780]
[107.50000000 196.54261780]
[107.50000000 211.54261780]
[107.50000000 226.54261780]
[107.50000000 241.54261780]
[107.50000000 256.54260254]
[122.03988647 260.60391235]
[134.94427490 268.43844604]
[145.25555420 279.46475220]
[152.20857239 292.86468506]
[155.28736877 307.64385986]
[154.26348877 322.70553589]
[149.21287537 336.93206787]
[140.51036072 349.26773071]
[128.80169678 358.79714966]
[114.95575714 364.81317139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 128]
[26 127]
[27 126]
[28 125]
[29 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
