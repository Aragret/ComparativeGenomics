%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACCCCCUGGGGGGGGGGGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCxxxxxxxxxxGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCCCCCCCCCCCAAACCCCCUG\
) } def
/len { sequence length } bind def

/coor [
[74.68901825 394.53936768]
[61.20191956 387.80426025]
[49.71900558 378.03665161]
[40.90787888 365.80441284]
[35.28079987 351.81872559]
[33.16492844 336.89270020]
[34.68326950 321.89410400]
[39.74755478 307.69491577]
[48.06335068 295.12069702]
[59.14719009 284.90249634]
[72.35466766 277.63433838]
[86.91793060 273.73883057]
[86.61392212 258.74191284]
[86.30992126 243.74499512]
[86.00591278 228.74807739]
[85.70191193 213.75115967]
[85.39790344 198.75424194]
[85.09390259 183.75732422]
[84.78990173 168.76040649]
[84.48589325 153.76348877]
[84.18189240 138.76657104]
[71.53328705 130.70352173]
[57.80957413 136.75823975]
[44.08586121 142.81295776]
[40.94017792 158.00784302]
[29.44130707 168.42684937]
[14.01080227 170.06365967]
[0.58200622 162.28887939]
[-5.68143511 148.09208679]
[-2.37110066 132.93223572]
[9.24011803 122.63858032]
[24.68747139 121.16925812]
[38.03113556 129.08924866]
[51.75484848 123.03452301]
[65.47856140 116.97979736]
[64.04902649 93.10734558]
[76.70807648 74.22470093]
[97.10133362 67.25344086]
[99.22237396 52.40415955]
[101.34341431 37.55487823]
[86.68994141 34.31557465]
[72.32342529 29.97731781]
[58.32614517 24.56495857]
[44.77828979 18.10949707]
[31.75745773 10.64791012]
[19.33822823 2.22293854]
[7.59174204 -7.11716032]
[-3.41471815 -17.31888580]
[-13.61810780 -28.32380486]
[-22.95998192 -40.06887817]
[-31.38683128 -52.48683167]
[-38.85038757 -65.50653839]
[-45.30789566 -79.05342102]
[-50.72237015 -93.04987335]
[-55.06280136 -107.41574097]
[-58.30431747 -122.06872559]
[-60.42835999 -136.92489624]
[-61.42276001 -151.89915466]
[-61.28181839 -166.90574646]
[-60.00634384 -181.85868835]
[-57.60364532 -196.67234802]
[-54.08748245 -211.26185608]
[-49.47799683 -225.54367065]
[-43.80159378 -239.43595886]
[-37.09078217 -252.85916138]
[-29.38400269 -265.73638916]
[-20.72540474 -277.99386597]
[-11.16457844 -289.56143188]
[-0.75629199 -300.37274170]
[10.43983841 -310.36596680]
[22.35968018 -319.48379517]
[34.93495941 -327.67401123]
[48.09363937 -334.88970947]
[61.76035309 -341.08956909]
[75.85681915 -346.23809814]
[90.30228424 -350.30575562]
[105.01401520 -353.26925659]
[119.90773773 -355.11163330]
[134.89814758 -355.82232666]
[149.89936829 -355.39730835]
[164.82548523 -353.83895874]
[179.59100342 -351.15618896]
[194.11132812 -347.36444092]
[208.30329895 -342.48538208]
[222.08563232 -336.54696655]
[235.37936401 -329.58322144]
[248.10836792 -321.63400269]
[260.19973755 -312.74487305]
[271.58416748 -302.96676636]
[282.19650269 -292.35565186]
[291.97592163 -280.97232056]
[300.86645508 -268.88198853]
[308.81710815 -256.15386963]
[315.78237915 -242.86094666]
[321.72238159 -229.07929993]
[326.60305786 -214.88787842]
[330.39648438 -200.36798096]
[333.08093262 -185.60278320]
[334.64099121 -170.67684937]
[335.06774902 -155.67567444]
[334.35876465 -140.68518066]
[332.51809692 -125.79125214]
[329.55627441 -111.07917786]
[325.49026489 -96.63324738]
[320.34338379 -82.53619385]
[314.14508057 -68.86876678]
[306.93087769 -55.70925903]
[298.74209595 -43.13304138]
[289.62564087 -31.21215439]
[279.63372803 -20.01487923]
[268.82357788 -9.60535336]
[257.25714111 -0.04320250]
[245.00064087 8.61680126]
[232.12429810 16.32505417]
[218.70185852 23.03740501]
[204.81021118 28.71540260]
[190.52893066 33.32652283]
[175.93981934 36.84436035]
[161.12643433 39.24875641]
[146.17364502 40.52594376]
[131.16708374 40.66860199]
[116.19270325 39.67592239]
[114.07165527 54.52520370]
[111.95061493 69.37448883]
[121.11814117 73.99929047]
[128.56573486 81.34367371]
[133.49586487 90.78550720]
[135.33137512 101.47227478]
[133.78070068 112.39778900]
[128.87680054 122.49692535]
[120.98499298 130.74938965]
[110.77787781 136.28250122]
[99.17881012 138.46257019]
[99.48281097 153.45948792]
[99.78681946 168.45640564]
[100.09082031 183.45332336]
[100.39482880 198.45024109]
[100.69882965 213.44715881]
[101.00283813 228.44407654]
[101.30683899 243.44099426]
[101.61083984 258.43792725]
[101.91484833 273.43484497]
[116.62400818 276.73696899]
[130.11518860 283.46389771]
[141.60401917 293.22451782]
[150.42256165 305.45141602]
[156.05812073 319.43368530]
[158.18304443 334.35842896]
[156.67378235 349.35797119]
[151.61811829 363.56021118]
[143.30993652 376.13946533]
[132.23229980 386.36437988]
[119.02922821 393.64053345]
[104.46833038 397.54486084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 35]
[23 34]
[24 33]
[38 124]
[39 123]
[40 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
