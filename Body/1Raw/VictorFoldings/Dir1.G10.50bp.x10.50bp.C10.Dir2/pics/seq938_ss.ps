%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGUUUGGUCGGGGGGGGGGCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUxxxxxxxxxxUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACCCCCCCCCCCAUAGGUAUGGUC\
) } def
/len { sequence length } bind def

/coor [
[74.07869720 456.24371338]
[60.37654877 449.98284912]
[48.41143036 440.82949829]
[38.78351974 429.24282837]
[31.97574043 415.80398560]
[28.32957268 401.18710327]
[28.02790451 386.12536621]
[31.08586884 371.37420654]
[37.35007858 357.67355347]
[46.50632477 345.71066284]
[58.09532928 336.08557129]
[71.53579712 329.28103638]
[86.15356445 325.63839722]
[85.84956360 310.64147949]
[85.54555511 295.64456177]
[85.24155426 280.64764404]
[84.93754578 265.65072632]
[84.63354492 250.65380859]
[84.32953644 235.65689087]
[84.02553558 220.65997314]
[83.72152710 205.66305542]
[83.41752625 190.66613770]
[80.11824036 184.00323486]
[83.26243591 175.36289978]
[83.26243591 160.36289978]
[75.52513123 147.63563538]
[83.26243591 133.83546448]
[83.26243591 118.83545685]
[86.25189972 88.14535522]
[82.34514618 73.66304779]
[78.43839264 59.18073654]
[74.53164673 44.69842529]
[70.62489319 30.21611786]
[58.22406769 24.86985207]
[51.28411102 13.51324177]
[52.15802383 0.42811593]
[60.30091095 -9.60195923]
[56.68847275 -24.16047287]
[53.46194839 -27.26355934]
[51.61378860 -30.87765694]
[51.13294601 -34.49447632]
[51.84049606 -37.66378784]
[53.42426300 -40.04430389]
[51.00270462 -54.84754562]
[48.58114624 -69.65079498]
[46.15959167 -84.45404053]
[43.73803329 -99.25727844]
[41.31647491 -114.06052399]
[38.89492035 -128.86376953]
[34.39709854 -136.88317871]
[36.57746506 -143.99131775]
[34.45642090 -158.84059143]
[32.33538055 -173.68988037]
[30.21433640 -188.53915405]
[28.09329414 -203.38844299]
[16.38855362 -217.56867981]
[23.48515892 -233.59135437]
[21.06360054 -248.39459229]
[18.64204407 -263.19784546]
[6.09309483 -272.42614746]
[3.84816980 -287.47323608]
[12.72328377 -299.37988281]
[10.30172729 -314.18313599]
[-4.69052172 -316.02951050]
[-18.55474281 -322.02618408]
[-30.16702652 -331.68701172]
[-38.58601379 -344.22882080]
[-43.12922287 -358.63494873]
[-43.42834854 -373.73748779]
[-39.45914459 -388.31219482]
[-31.54337502 -401.17755127]
[-20.32273865 -411.29061890]
[-6.70684147 -417.83157349]
[8.20053768 -420.27014160]
[23.19092369 -418.40869141]
[37.04911423 -412.39810181]
[48.65168762 -402.72561646]
[57.05807114 -390.17535400]
[61.58680344 -375.76467896]
[61.87075806 -360.66183472]
[57.88691330 -346.09112549]
[49.95822525 -333.23373413]
[38.72743225 -323.13195801]
[25.10497284 -316.60467529]
[27.52652931 -301.80142212]
[39.73295593 -293.34338379]
[42.39963913 -278.36526489]
[33.44528961 -265.61941528]
[35.86684418 -250.81616211]
[38.28840256 -236.01290894]
[47.94735336 -228.66969299]
[50.05767059 -216.31365967]
[42.94257736 -205.50947571]
[45.06361771 -190.66020203]
[47.18466187 -175.81091309]
[49.30570602 -160.96163940]
[51.42674637 -146.11235046]
[53.69816589 -131.28532410]
[56.11972046 -116.48208618]
[58.54127884 -101.67884064]
[60.96283722 -86.87559509]
[63.38439178 -72.07234955]
[65.80594635 -57.26910400]
[68.22750854 -42.46585846]
[71.24698639 -27.77290916]
[74.85942078 -13.21439743]
[89.60807037 -5.18790340]
[94.10418701 11.33973122]
[85.10720062 26.30936432]
[89.01395416 40.79167557]
[92.92070770 55.27398300]
[96.82745361 69.75629425]
[100.73420715 84.23860168]
[111.91522217 94.23784637]
[126.74224854 96.50926208]
[141.56927490 98.78068542]
[153.19879150 88.32657623]
[168.82896423 87.84525299]
[181.07971191 97.56396484]
[184.16658020 112.89384460]
[176.63206482 126.59658813]
[162.03373718 132.20217896]
[147.26446533 127.06382751]
[139.29785156 113.60770416]
[124.47083282 111.33628845]
[109.64380646 109.06487274]
[98.26243591 118.83545685]
[98.26243591 133.83546448]
[105.99973297 147.63563538]
[98.26243591 160.36289978]
[98.26243591 175.36289978]
[98.41444397 190.36213684]
[98.71845245 205.35905457]
[99.02245331 220.35597229]
[99.32645416 235.35289001]
[99.63046265 250.34980774]
[99.93446350 265.34674072]
[100.23847198 280.34365845]
[100.54247284 295.34057617]
[100.84648132 310.33749390]
[101.15048218 325.33441162]
[115.90385437 328.38165283]
[129.60903931 334.63589478]
[141.57859802 343.78344727]
[151.21212769 355.36544800]
[158.02641296 368.80096436]
[161.67965698 383.41607666]
[161.98863220 398.47769165]
[158.93780518 413.23034668]
[152.68023682 426.93399048]
[143.52980042 438.90133667]
[131.94544983 448.53204346]
[118.50828552 455.34307861]
[103.89228821 458.99279785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 131]
[25 130]
[27 128]
[28 127]
[29 113]
[30 112]
[31 111]
[32 110]
[33 109]
[37 106]
[38 105]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[57 90]
[58 89]
[59 88]
[62 85]
[63 84]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
