%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUCCUCCGGGGGGGGGGGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAxxxxxxxxxxCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCCCCCCCCCCCAUUAUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[86.51406860 389.57275391]
[71.95420837 385.66455078]
[58.75306320 378.38491821]
[47.67813110 368.15704346]
[39.37329102 355.57559204]
[34.32138062 341.37200928]
[32.81610489 326.37210083]
[34.94498062 311.44790649]
[40.58423996 297.46713257]
[49.40602112 285.24258423]
[60.89744186 275.48498535]
[74.39039612 268.76162720]
[89.10043335 265.46337891]
[89.40840912 250.46655273]
[89.71639252 235.46971130]
[90.02436829 220.47288513]
[90.33234406 205.47604370]
[90.64031982 190.47920227]
[90.94830322 175.48236084]
[91.25627899 160.48551941]
[91.56425476 145.48869324]
[91.87223053 130.49185181]
[92.18021393 115.49501038]
[86.61827087 101.56429291]
[76.06626129 90.90338898]
[65.51424408 80.24247742]
[50.30715942 75.87725830]
[46.85304260 61.38870239]
[36.30102921 50.72779083]
[25.74901390 40.06688309]
[15.19699764 29.40597343]
[6.88158989 25.47535324]
[4.54058409 18.41618347]
[-5.79031897 7.54086924]
[-18.93194962 0.30916655]
[-33.64747238 -2.59830570]
[-48.36299515 -5.50577831]
[-63.07851791 -8.41325092]
[-73.70227814 2.77331376]
[-88.69288635 6.41821098]
[-103.26689148 1.35836744]
[-112.77377319 -10.79163837]
[-114.17993164 -26.15478516]
[-107.03666687 -39.82874680]
[-93.62335968 -47.45021439]
[-78.22015381 -46.58720398]
[-65.74214935 -37.51509857]
[-60.17104721 -23.12877274]
[-45.45552444 -20.22130013]
[-30.73999977 -17.31382751]
[-16.02447701 -14.40635586]
[-26.95337677 -24.68055534]
[-35.71270752 -36.85734177]
[-41.97829819 -50.48607635]
[-45.51827240 -65.06237793]
[-46.20162582 -80.04680634]
[-44.00305939 -94.88480377]
[-39.00394821 -109.02725220]
[-31.38929558 -121.95075989]
[-21.44090652 -133.17704773]
[-9.52695656 -142.29064941]
[3.91164064 -148.95429993]
[18.37754440 -152.92137146]
[33.33539581 -154.04504395]
[48.23163223 -152.28375244]
[62.51496887 -147.70266724]
[75.65679932 -140.47131348]
[87.17076874 -130.85734558]
[96.63076782 -119.21653748]
[103.68669128 -105.97969818]
[108.07741547 -91.63670349]
[109.64044952 -76.71836090]
[108.31794739 -61.77677536]
[104.15885162 -47.36491013]
[97.31707764 -34.01612091]
[88.04582977 -22.22442627]
[76.68823242 -12.42621708]
[63.66460037 -4.98410797]
[49.45691681 -0.17351918]
[34.59098816 1.82751775]
[19.61697388 0.94494784]
[5.08499527 -2.79003358]
[15.41589737 8.08528042]
[25.85790634 18.85396004]
[36.40992355 29.51486778]
[46.96193695 40.17577744]
[57.51395035 50.83668518]
[71.96628571 54.43936539]
[76.17514801 69.69046021]
[86.72716522 80.35137177]
[97.27918243 91.01228333]
[99.65179443 88.64247894]
[103.07462311 87.02409363]
[107.28455353 86.53688049]
[111.89534760 87.46627045]
[116.43087769 89.96639252]
[131.39216614 88.88932800]
[146.32817078 87.50530243]
[160.83940125 76.21570587]
[176.65028381 83.76956177]
[191.51687622 81.77350616]
[206.38348389 79.77744293]
[221.20596313 77.47657013]
[235.97807312 74.87184906]
[250.75019836 72.26712799]
[265.52230835 69.66240692]
[280.29443359 67.05767822]
[289.15295410 53.96943665]
[304.68725586 51.06064987]
[317.68109131 60.05705261]
[320.42547607 75.62123871]
[311.29220581 88.51924896]
[295.69989014 91.09893036]
[282.89913940 81.82979584]
[268.12704468 84.43451691]
[253.35491943 87.03924561]
[238.58279419 89.64396667]
[223.81068420 92.24868774]
[220.35678101 95.62800598]
[214.72354126 96.83405304]
[208.37953186 94.64404297]
[193.51293945 96.64009857]
[178.64633179 98.63616180]
[171.02761841 108.08164978]
[158.61407471 109.83531189]
[148.01856995 102.40974426]
[144.36318970 105.57003021]
[138.66639709 106.42700195]
[132.46923828 103.85060883]
[117.50794983 104.92767334]
[107.17704773 115.80298615]
[106.86907196 130.79983521]
[106.56109619 145.79666138]
[106.25311279 160.79350281]
[105.94513702 175.79034424]
[105.63716125 190.78718567]
[105.32918549 205.78401184]
[105.02120209 220.78085327]
[104.71322632 235.77769470]
[104.40525055 250.77453613]
[104.09727478 265.77136230]
[118.65950012 269.67074585]
[131.86505127 276.94238281]
[142.94618225 287.16354370]
[151.25865173 299.73995972]
[156.31916809 313.94046021]
[157.83354187 328.93945312]
[155.71371460 343.86492920]
[150.08293152 357.84912109]
[141.26855469 370.07904053]
[129.78306580 379.84359741]
[116.29418182 386.57513428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 91]
[25 90]
[26 89]
[28 87]
[29 86]
[30 85]
[31 84]
[33 83]
[34 82]
[35 51]
[36 50]
[37 49]
[38 48]
[96 130]
[97 129]
[98 126]
[100 123]
[101 122]
[102 121]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
