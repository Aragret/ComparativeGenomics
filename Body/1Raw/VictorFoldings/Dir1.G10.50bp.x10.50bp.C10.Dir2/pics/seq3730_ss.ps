%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUAGCCGUGGGGGGGGGGUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAxxxxxxxxxxUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGCCCCCCCCCCGCCUAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.10870361]
[71.19830322 375.09268188]
[59.48964310 365.56326294]
[50.78712082 353.22760010]
[45.73651886 339.00106812]
[44.71262741 323.93939209]
[47.79142761 309.16024780]
[54.74444962 295.76031494]
[65.05573273 284.73397827]
[77.96011353 276.89947510]
[92.50000000 272.83816528]
[92.50000000 257.83816528]
[92.50000000 242.83815002]
[92.50000000 227.83815002]
[92.50000000 212.83815002]
[92.50000000 197.83815002]
[92.50000000 182.83815002]
[92.50000000 167.83815002]
[92.50000000 152.83815002]
[92.50000000 137.83815002]
[92.50000000 122.83815002]
[76.70716095 105.93927765]
[82.48002625 83.54151154]
[75.29751587 70.37293243]
[68.11500549 57.20434952]
[30.96645927 32.45986176]
[19.87514496 22.36121178]
[8.78382874 12.26256180]
[-2.30748630 2.16391182]
[-17.79954147 10.82599354]
[-35.28693390 13.72279263]
[-52.69829941 10.52735424]
[-67.97674561 1.63338876]
[-79.32285309 -11.89315987]
[-85.40660095 -28.44184685]
[-85.52325439 -46.04945374]
[-79.67496490 -62.63289642]
[-91.56734467 -71.77462769]
[-103.45972443 -80.91636658]
[-115.35210419 -90.05809784]
[-127.24448395 -99.19983673]
[-139.13685608 -108.34156799]
[-151.66282654 -116.59385681]
[-164.75598145 -123.91296387]
[-177.84913635 -131.23207092]
[-190.94229126 -138.55117798]
[-205.49600220 -132.83073425]
[-220.30529785 -137.85255432]
[-228.37768555 -151.24549866]
[-225.90162659 -166.68580627]
[-214.04623413 -176.88304138]
[-198.40927124 -177.02239990]
[-186.37402344 -167.03805542]
[-183.62318420 -151.64433289]
[-170.53002930 -144.32522583]
[-157.43687439 -137.00611877]
[-144.34371948 -129.68701172]
[-148.04420471 -144.22338867]
[-141.69331360 -157.81259155]
[-128.16807556 -164.29856873]
[-113.59554291 -160.74310303]
[-104.57722473 -148.75686646]
[-105.19850159 -133.76972961]
[-115.17792511 -122.57102966]
[-129.99513245 -120.23394775]
[-118.10275269 -111.09221649]
[-106.21037292 -101.95047760]
[-94.31799316 -92.80874634]
[-82.42561340 -83.66700745]
[-70.53323364 -74.52527618]
[-60.61340714 -82.05985260]
[-49.15540314 -86.97554016]
[-36.83762741 -88.97544861]
[-24.39080620 -87.93547821]
[-12.55464363 -83.91204071]
[-2.03385568 -77.13900757]
[6.54378223 -68.01412964]
[12.66489792 -57.07566833]
[15.96124554 -44.97066879]
[16.23185349 -32.41667175]
[13.45527172 -20.15918541]
[7.79116297 -8.92740345]
[18.88247871 1.17124605]
[29.97379303 11.26989555]
[41.06510925 21.36854553]
[56.00008011 19.96617126]
[70.93372345 18.56393814]
[79.95125580 6.57710552]
[79.13838959 -9.44534206]
[91.25337982 -19.96231079]
[107.00263214 -16.90608406]
[114.30467987 -2.62113619]
[107.55800629 11.93434238]
[91.93808746 15.59463501]
[82.92055511 27.58146858]
[95.61859131 19.59648323]
[110.39308167 22.18771362]
[119.61592102 34.01730347]
[118.52534485 48.97760391]
[107.68441772 59.34458542]
[92.69033051 59.76574707]
[81.28359222 50.02183914]
[88.46610260 63.19042206]
[95.64860535 76.35900879]
[103.56298828 76.22740173]
[111.09103394 78.67348480]
[117.41646576 83.43202209]
[121.85341644 89.98703766]
[123.92078400 97.62776947]
[138.56428528 100.87860107]
[153.20777893 104.12942505]
[167.85128784 107.38024902]
[182.49478149 110.63107300]
[191.61721802 109.43398285]
[197.40760803 114.10485077]
[211.98031616 117.65961456]
[226.55302429 121.21437836]
[243.37384033 119.09389496]
[250.06791687 134.67034912]
[236.95330811 145.41481018]
[222.99826050 135.78707886]
[208.42555237 132.23231506]
[193.85285950 128.67755127]
[179.24395752 125.27457428]
[164.60046387 122.02375031]
[149.95695496 118.77292633]
[135.31346130 115.52210236]
[120.66995239 112.27127075]
[115.04331207 118.74913025]
[107.50000000 122.83815002]
[107.50000000 137.83815002]
[107.50000000 152.83815002]
[107.50000000 167.83815002]
[107.50000000 182.83815002]
[107.50000000 197.83815002]
[107.50000000 212.83815002]
[107.50000000 227.83815002]
[107.50000000 242.83815002]
[107.50000000 257.83816528]
[107.50000000 272.83816528]
[122.03988647 276.89947510]
[134.94427490 284.73397827]
[145.25555420 295.76031494]
[152.20857239 309.16024780]
[155.28736877 323.93939209]
[154.26348877 339.00106812]
[149.21287537 353.22760010]
[140.51036072 365.56326294]
[128.80169678 375.09268188]
[114.95575714 381.10870361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 104]
[24 103]
[25 102]
[26 85]
[27 84]
[28 83]
[29 82]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 57]
[44 56]
[45 55]
[46 54]
[87 95]
[88 94]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
