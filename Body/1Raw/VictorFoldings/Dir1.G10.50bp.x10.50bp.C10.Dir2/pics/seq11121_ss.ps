%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUACUAAAGGGGGGGGGGCCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUAxxxxxxxxxxCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUACCCCCCCCCCACCCCACUAAA\
) } def
/len { sequence length } bind def

/coor [
[62.32067490 513.10028076]
[48.29872894 507.54730225]
[36.09877396 498.68096924]
[26.48770142 487.05865479]
[20.06967545 473.41094971]
[17.24813843 458.59576416]
[18.20045471 443.54440308]
[22.86676025 429.20297241]
[30.95372581 416.47302246]
[41.95299911 406.15472412]
[55.17316055 398.89675903]
[69.78317261 395.15533447]
[69.78317261 380.15533447]
[69.78317261 365.15533447]
[69.78317261 350.15533447]
[69.78317261 335.15533447]
[69.78317261 320.15533447]
[69.78317261 305.15533447]
[69.78317261 290.15533447]
[69.78317261 275.15533447]
[69.78317261 260.15533447]
[58.17477036 269.65505981]
[43.23137665 268.35311890]
[33.44073486 256.98898315]
[34.36385345 242.01742554]
[45.47640991 231.94215393]
[60.46655273 232.48585510]
[70.82028198 243.34045410]
[72.66360474 228.45414734]
[65.46160126 218.68719482]
[66.91664886 206.23512268]
[76.78871155 197.87173462]
[78.93728638 183.02641296]
[71.93733978 173.11364746]
[73.64774323 160.69407654]
[83.68943787 152.53515625]
[86.14236450 137.73707581]
[88.59529877 122.93899536]
[76.25817108 113.88456726]
[70.64848328 98.50020599]
[74.75193024 81.54151917]
[61.19003677 75.13253784]
[54.48065567 75.29628754]
[49.47812653 72.43926239]
[47.21120453 68.17191315]
[33.92386627 61.21155167]
[20.63652420 54.25119781]
[4.95643139 57.64446640]
[-7.38130665 47.38972092]
[-6.91223383 31.35352707]
[6.00381756 21.83747864]
[21.45875740 26.14147377]
[27.59687996 40.96385574]
[40.88422012 47.92421341]
[54.17156219 54.88456726]
[67.59901428 61.57064438]
[81.16091156 67.97962189]
[95.35865784 63.13980103]
[102.18223572 49.78170395]
[109.00581360 36.42360306]
[115.82938385 23.06550407]
[122.65296173 9.70740509]
[129.47653198 -3.65069413]
[117.04159546 -12.07398701]
[105.73606110 -21.96157837]
[95.73132324 -33.16357803]
[87.17903900 -45.51016235]
[80.20887756 -58.81416321]
[74.92649078 -72.87389374]
[71.41197205 -87.47621155]
[69.71858215 -102.39975739]
[69.87200928 -117.41828156]
[71.86991882 -132.30410767]
[75.68202209 -146.83158875]
[81.25053406 -160.78047180]
[88.49103546 -173.93930054]
[97.29376221 -186.10858154]
[107.52526093 -197.10385132]
[119.03043365 -206.75842285]
[131.63485718 -214.92591858]
[145.14746094 -221.48252869]
[159.36338806 -226.32887268]
[174.06713867 -229.39144897]
[189.03579712 -230.62385559]
[204.04244995 -230.00740051]
[218.85960388 -227.55143738]
[233.26261902 -223.29318237]
[247.03315735 -217.29719543]
[259.96246338 -209.65437317]
[271.85452271 -200.48059082]
[282.52908325 -189.91491699]
[291.82427979 -178.11750793]
[299.59924316 -165.26722717]
[305.73608398 -151.55886841]
[310.14175415 -137.20027161]
[312.74948120 -122.40907288]
[313.51971436 -107.40953064]
[312.44082642 -92.42902374]
[309.52914429 -77.69465637]
[304.82879639 -63.42979050]
[298.41104126 -49.85068893]
[290.37316895 -37.16319656]
[280.83703613 -25.55966187]
[269.94723511 -15.21598625]
[257.86880493 -6.28897762]
[244.78489685 1.08603179]
[230.89384460 6.79723930]
[216.40620422 10.75806427]
[201.54164124 12.90846157]
[186.52546692 13.21583176]
[171.58535767 11.67551517]
[156.94778442 8.31086254]
[142.83464050 3.17288136]
[136.01106262 16.53098106]
[129.18748474 29.88908005]
[122.36391449 43.24718094]
[115.54033661 56.60527802]
[108.71675873 69.96337891]
[122.19762421 79.60538483]
[128.44670105 94.29772186]
[126.21512604 109.49287415]
[116.78047180 120.83126068]
[103.39337158 125.39192200]
[100.94044495 140.19000244]
[98.48751831 154.98808289]
[105.37495422 172.03489685]
[93.78261566 185.17498779]
[91.63403320 200.02032471]
[98.87001801 216.92213440]
[87.54991150 230.29747009]
[85.70658875 245.18377686]
[84.78317261 260.15533447]
[84.78317261 275.15533447]
[84.78317261 290.15533447]
[84.78317261 305.15533447]
[84.78317261 320.15533447]
[84.78317261 335.15533447]
[84.78317261 350.15533447]
[84.78317261 365.15533447]
[84.78317261 380.15533447]
[84.78317261 395.15533447]
[99.39318848 398.89675903]
[112.61334229 406.15472412]
[123.61261749 416.47302246]
[131.69958496 429.20297241]
[136.36589050 443.54440308]
[137.31820679 458.59576416]
[134.49667358 473.41094971]
[128.07864380 487.05865479]
[118.46757507 498.68096924]
[106.26761627 507.54730225]
[92.24567413 513.10028076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 131]
[29 130]
[32 128]
[33 127]
[36 125]
[37 124]
[38 123]
[41 57]
[42 56]
[45 55]
[46 54]
[47 53]
[58 118]
[59 117]
[60 116]
[61 115]
[62 114]
[63 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
