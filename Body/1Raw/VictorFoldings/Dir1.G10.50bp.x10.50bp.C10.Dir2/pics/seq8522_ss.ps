%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUUAUGAGGGGGGGGGGGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCxxxxxxxxxxAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCCCCCCCCCCCUUACGAG\
) } def
/len { sequence length } bind def

/coor [
[83.38979340 368.44372559]
[70.17157745 361.16763306]
[59.28761292 350.71768188]
[51.47999191 337.80630493]
[47.28105164 323.31384277]
[46.97708130 308.22842407]
[50.58880997 293.57858276]
[57.86997604 280.36318970]
[68.32414246 269.48324585]
[81.23852539 261.68063354]
[95.73260498 257.48727417]
[95.42462921 242.49043274]
[95.11664581 227.49360657]
[94.80867004 212.49676514]
[94.50069427 197.49992371]
[94.19271851 182.50308228]
[93.88473511 167.50625610]
[93.57675934 152.50941467]
[93.26878357 137.51257324]
[92.96080780 122.51573181]
[74.68988800 107.99526978]
[76.62392426 82.01287842]
[101.52008820 67.58776855]
[87.01146698 63.77991104]
[72.50283813 59.97205353]
[57.99421310 56.16419601]
[43.48558807 52.35633469]
[35.43818665 65.83535004]
[23.93853760 76.50061035]
[9.91858387 83.49890137]
[-5.48860693 86.27375031]
[-21.04040337 84.60961151]
[-35.48483658 78.64866638]
[-47.66138458 68.87863159]
[-56.59421158 56.09292603]
[-61.57037735 41.32622528]
[-62.19672012 25.77071190]
[-76.78047180 22.26154518]
[-91.36421967 18.75237846]
[-105.98322296 15.39311886]
[-120.63594818 12.18412304]
[-136.09085083 17.66848373]
[-148.39059448 6.82191420]
[-144.88227844 -9.19756508]
[-129.17494202 -13.91048813]
[-117.42695618 -2.46860218]
[-102.77423096 0.74039406]
[-95.52268219 -0.91105586]
[-87.85504913 4.16862822]
[-73.27130127 7.67779541]
[-58.68755341 11.18696308]
[-51.78272247 -1.40810013]
[-41.83626175 -11.78738308]
[-29.52574348 -19.23469734]
[-15.69217491 -23.23390007]
[-1.28251863 -23.50465584]
[12.71511555 -20.02208710]
[25.33923149 -13.01890564]
[35.72099686 -2.96987677]
[43.14402771 9.44036388]
[47.09383011 23.36394882]
[47.29344940 37.84770966]
[61.80207443 41.65557098]
[76.31069946 45.46342850]
[90.81932068 49.27128601]
[105.32794952 53.07914734]
[119.47526550 48.09382248]
[128.39141846 36.03139114]
[137.30757141 23.96895981]
[146.22372437 11.90652943]
[155.13986206 -0.15590222]
[144.48353577 -10.75119972]
[135.48352051 -22.78521729]
[128.33166504 -36.00144958]
[123.18040466 -50.11819458]
[120.13954926 -64.83454895]
[119.27391052 -79.83683014]
[120.60193634 -94.80526733]
[124.09532928 -109.42081451]
[129.67961121 -123.37192535]
[137.23576355 -136.36125183]
[146.60273743 -148.11189270]
[157.58085632 -158.37341309]
[169.93612671 -166.92707825]
[183.40518188 -173.59057617]
[197.70095825 -178.22184753]
[212.51872253 -180.72219849]
[227.54263306 -181.03833008]
[242.45245361 -179.16349792]
[256.93038940 -175.13766479]
[270.66784668 -169.04664612]
[283.37197876 -161.02027893]
[294.77203369 -151.22962952]
[304.62500000 -139.88339233]
[312.72085571 -127.22341919]
[318.88705444 -113.51956177]
[322.99212646 -99.06389618]
[324.94863892 -84.16457367]
[324.71481323 -69.13915253]
[322.29571533 -54.30791473]
[317.74282837 -39.98698044]
[311.15322876 -26.48160362]
[302.66738892 -14.07965374]
[292.46618652 -3.04547787]
[280.76702881 6.38572931]
[267.81930542 14.01294136]
[253.89898682 19.67358398]
[239.30281067 23.24699974]
[224.34187317 24.65702057]
[209.33506775 23.87359238]
[194.60227966 20.91341591]
[180.45751953 15.83958435]
[167.20230103 8.76024914]
[158.28614807 20.82267952]
[149.36999512 32.88511276]
[140.45384216 44.94754410]
[131.53770447 57.00997543]
[133.36705017 64.28345490]
[147.91406250 60.62498856]
[151.57228088 75.17206573]
[137.02575684 78.83040619]
[138.85510254 86.10388184]
[152.41700745 92.51285553]
[168.70758057 90.62892914]
[178.26583862 103.95453644]
[171.25904846 118.78144073]
[154.89521790 119.85699463]
[146.00802612 106.07475281]
[132.44613647 99.66577911]
[127.14355469 111.54145050]
[118.21688843 119.30468750]
[107.95764160 122.20775604]
[108.26562500 137.20458984]
[108.57360077 152.20143127]
[108.88157654 167.19827271]
[109.18955231 182.19511414]
[109.49752808 197.19194031]
[109.80551147 212.18878174]
[110.11348724 227.18562317]
[110.42146301 242.18246460]
[110.72943878 257.17929077]
[125.38346100 260.77404785]
[138.60728455 268.03991699]
[149.49931335 278.48147583]
[157.31690979 291.38681030]
[161.52703857 305.87600708]
[161.84265137 320.96121216]
[158.24224854 335.61383057]
[150.97128296 348.83483887]
[140.52552795 359.72283936]
[127.61716461 367.53546143]
[113.12633514 371.73999023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[37 51]
[38 50]
[39 49]
[40 47]
[41 46]
[67 117]
[68 116]
[69 115]
[70 114]
[71 113]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
