%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUACCGUAGGGGGGGGGGCAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUAxxxxxxxxxxUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAACCCCCCCCCCUACUACCGUA\
) } def
/len { sequence length } bind def

/coor [
[90.48078918 530.33569336]
[76.63484955 524.31970215]
[64.92618561 514.79028320]
[56.22365952 502.45462036]
[51.17305756 488.22808838]
[50.14916611 473.16641235]
[53.22796631 458.38723755]
[60.18098831 444.98730469]
[70.49227142 433.96099854]
[83.39665222 426.12646484]
[97.93653870 422.06515503]
[97.93653870 407.06515503]
[97.93653870 392.06515503]
[97.93653870 377.06515503]
[97.93653870 362.06515503]
[97.93653870 347.06515503]
[97.93653870 332.06515503]
[97.93653870 317.06515503]
[97.93653870 302.06515503]
[97.93653870 287.06515503]
[82.40450287 282.75253296]
[68.68878937 274.25720215]
[57.89015198 262.25180054]
[50.87776947 247.69105530]
[48.21933365 231.73577881]
[50.13507462 215.66040039]
[56.47954559 200.75114441]
[66.75262451 188.20314026]
[80.13895416 179.02459717]
[95.57261658 173.95579529]
[94.94863892 158.96878052]
[94.32466125 143.98176575]
[79.71572876 139.43542480]
[67.52127838 130.19499207]
[59.19286346 117.36037445]
[55.72182465 102.45929718]
[57.52133179 87.26548767]
[64.37718964 73.58750153]
[75.47332001 63.05345917]
[69.41030884 49.33340454]
[63.34729385 35.61334991]
[57.28427887 21.89329720]
[51.22126770 8.17324352]
[45.15825272 -5.54680967]
[39.09524155 -19.26686287]
[24.59776688 -15.30694866]
[9.67201233 -13.55210018]
[-5.34857750 -14.04152203]
[-20.12843704 -16.76428032]
[-34.33737946 -21.65954781]
[-47.65796661 -28.61796379]
[-59.79262161 -37.48406982]
[-70.47024536 -48.05979919]
[-79.45229340 -60.10888672]
[-86.53810120 -73.36214447]
[-91.56938171 -87.52349854]
[-94.43373108 -102.27657318]
[-95.06714630 -117.29177856]
[-93.45549011 -132.23367310]
[-89.63475800 -146.76844788]
[-83.69031525 -160.57139587]
[-75.75495148 -173.33413696]
[-66.00595856 -184.77157593]
[-54.66112900 -194.62815857]
[-41.97390366 -202.68371582]
[-28.22772598 -208.75827026]
[-13.72968864 -212.71612549]
[1.19631612 -214.46885681]
[16.21683693 -213.97729492]
[30.99630737 -211.25242615]
[45.20455170 -206.35513306]
[58.52415085 -199.39482117]
[70.65753937 -190.52697754]
[81.33365631 -179.94973755]
[90.31398773 -167.89936829]
[97.39791107 -154.64509583]
[102.42717743 -140.48303223]
[105.28942108 -125.72955322]
[105.92070007 -110.71425629]
[104.30691528 -95.77259064]
[100.48411560 -81.23835754]
[94.53770447 -67.43626404]
[86.60052490 -54.67464447]
[76.84989929 -43.23860550]
[65.50366211 -33.38362503]
[52.81529617 -25.32987595]
[58.87830734 -11.60982323]
[64.94132233 2.11023092]
[71.00433350 15.83028412]
[77.06734467 29.55033875]
[83.13036346 43.27039337]
[89.19337463 56.99044418]
[96.77462006 55.77103043]
[104.45257568 55.87767410]
[111.99703217 57.30718613]
[119.18179321 60.01670456]
[125.79145050 63.92499542]
[131.62783813 68.91487885]
[136.51596069 74.83674622]
[140.30928040 81.51305389]
[154.80487061 77.65589142]
[169.30047607 73.79873657]
[173.92536926 59.08092880]
[185.78775024 49.21748734]
[201.10237122 47.35580444]
[214.98239136 54.08993530]
[222.99874878 67.27104187]
[222.59346008 82.69307709]
[213.89582825 95.43493652]
[199.68125916 101.43072510]
[184.48556519 98.76721954]
[173.15762329 88.29433441]
[158.66203308 92.15148926]
[144.16644287 96.00865173]
[140.96566772 116.98289490]
[128.38771057 134.06968689]
[109.31167603 143.35778809]
[109.93565369 158.34480286]
[110.55963135 173.33181763]
[124.18962860 176.29185486]
[136.69578552 182.44468689]
[147.34320068 191.42338562]
[155.50744629 202.69514465]
[160.71125793 215.59286499]
[162.65238953 229.35462952]
[161.22120667 243.16874695]
[156.50680542 256.22158813]
[148.79153442 267.74551392]
[138.53405762 277.06402588]
[126.34214020 283.63153076]
[112.93653870 287.06515503]
[112.93653870 302.06515503]
[112.93653870 317.06515503]
[112.93653870 332.06515503]
[112.93653870 347.06515503]
[112.93653870 362.06515503]
[112.93653870 377.06515503]
[112.93653870 392.06515503]
[112.93653870 407.06515503]
[112.93653870 422.06515503]
[127.47642517 426.12646484]
[140.38081360 433.96099854]
[150.69209290 444.98730469]
[157.64511108 458.38723755]
[160.72390747 473.16641235]
[159.70002747 488.22808838]
[154.64941406 502.45462036]
[145.94689941 514.79028320]
[134.23823547 524.31970215]
[120.39229584 530.33569336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 119]
[31 118]
[32 117]
[39 92]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
