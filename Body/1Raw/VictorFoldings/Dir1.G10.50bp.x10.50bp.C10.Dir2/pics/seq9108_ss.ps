%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAACCGAGGGGGGGGGGAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUxxxxxxxxxxGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCCCCCCCCCCCAAACAACCCA\
) } def
/len { sequence length } bind def

/coor [
[82.73844147 393.29818726]
[70.85417175 384.02310181]
[61.53546143 372.17297363]
[55.32409668 358.43679810]
[52.58119583 343.61318970]
[53.46622467 328.56393433]
[57.92773056 314.16397095]
[65.70632935 301.25054932]
[76.34978485 290.57437134]
[89.23928833 282.75619507]
[103.62548065 278.25051880]
[102.68984985 263.27972412]
[101.75421906 248.30894470]
[100.81859589 233.33815002]
[99.88296509 218.36737061]
[98.94733429 203.39657593]
[98.01170349 188.42578125]
[97.07608032 173.45498657]
[96.14044952 158.48419189]
[95.20481873 143.51341248]
[83.67718506 140.61988831]
[73.35269928 134.73228455]
[64.99239349 126.28455353]
[59.21250534 115.89939117]
[56.43906784 104.34226990]
[41.47881699 103.25096130]
[26.51856995 102.15965271]
[11.55832100 101.06834412]
[-3.42869520 100.44436646]
[-18.42788315 100.28833008]
[-33.42707062 100.13229370]
[-39.45860672 103.08662415]
[-45.20086288 102.57889557]
[-49.04357529 99.64477539]
[-64.02329254 98.86492920]
[-79.00300598 98.08508301]
[-93.98271942 97.30523682]
[-110.11477661 102.51992798]
[-119.59147644 88.46189117]
[-108.70623779 75.46389008]
[-93.20287323 82.32552338]
[-78.22315979 83.10536957]
[-63.24344635 83.88521576]
[-48.26373291 84.66506195]
[-33.27103424 85.13310242]
[-18.27184677 85.28913879]
[-3.27265859 85.44517517]
[-0.48115057 83.19240570]
[3.56191635 82.21501923]
[8.22840881 83.09605408]
[12.64963150 86.10809326]
[27.60988045 87.19940186]
[42.57012939 88.29071808]
[57.53037643 89.38202667]
[64.61514282 74.22555542]
[76.86824799 62.83372116]
[92.50000000 56.87042618]
[92.50000000 41.87042618]
[84.76270294 28.07025337]
[92.50000000 15.34298134]
[92.50000000 0.34298098]
[92.50000000 -14.65701866]
[92.50000000 -29.65701866]
[92.50000000 -44.65702057]
[77.92288208 -48.55188751]
[64.85101318 -56.08772278]
[54.17566681 -66.75070953]
[46.62469864 -79.81383514]
[42.71294785 -94.38643646]
[42.70711899 -109.47492218]
[46.60762024 -124.05053711]
[54.14849854 -137.11949158]
[64.81560516 -147.79072571]
[77.88165283 -155.33663940]
[92.45575714 -159.24276733]
[107.54424286 -159.24276733]
[122.11834717 -155.33663940]
[135.18438721 -147.79072571]
[145.85150146 -137.11949158]
[153.39237976 -124.05053711]
[157.29287720 -109.47492218]
[157.28704834 -94.38643646]
[153.37530518 -79.81383514]
[145.82432556 -66.75070953]
[135.14898682 -56.08772278]
[122.07711792 -48.55188751]
[107.50000000 -44.65702057]
[107.50000000 -29.65701866]
[107.50000000 -14.65701866]
[107.50000000 0.34298098]
[107.50000000 15.34298134]
[115.23729706 28.07025337]
[107.50000000 41.87042618]
[107.50000000 56.87042618]
[126.13836670 59.58253098]
[143.47319031 70.58579254]
[157.37574768 64.95383453]
[171.27830505 59.32187653]
[185.18086243 53.68992233]
[187.93730164 38.51080322]
[198.47929382 27.24715805]
[213.44296265 23.49317551]
[228.05343628 28.44673729]
[237.64855957 40.52717972]
[239.16658020 55.87967682]
[232.12309265 69.60530090]
[218.76564026 77.32426453]
[203.35656738 76.57346344]
[190.81282043 67.59247589]
[176.91026306 73.22443390]
[163.00770569 78.85639191]
[149.10514832 84.48834991]
[149.18316650 91.98793793]
[163.40008545 87.20471191]
[172.34233093 99.24781799]
[163.65180969 111.47380829]
[149.33920288 106.98712921]
[149.41722107 114.48672485]
[163.43394470 119.82823944]
[178.60321045 114.60592651]
[192.06625366 123.33095551]
[193.49536133 139.31022644]
[181.79425049 150.28581238]
[165.93901062 147.83818054]
[158.09242249 133.84495544]
[144.07571411 128.50343323]
[127.79705048 139.29516602]
[110.17561340 142.57777405]
[111.11124420 157.54856873]
[112.04686737 172.51936340]
[112.98249817 187.49015808]
[113.91812897 202.46093750]
[114.85375214 217.43173218]
[115.78938293 232.40252686]
[116.72501373 247.37332153]
[117.66063690 262.34411621]
[118.59626770 277.31491089]
[133.43150330 279.99432373]
[147.19413757 286.14682007]
[159.08403015 295.41473389]
[168.40992737 307.25918579]
[174.62960815 320.99157715]
[177.38150024 335.81353760]
[176.50559998 350.86334229]
[172.05282593 365.26599121]
[164.28205872 378.18414307]
[153.64508057 388.86672974]
[140.76031494 396.69274902]
[126.37685394 401.20712280]
[111.33094788 402.14746094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[25 54]
[26 53]
[27 52]
[28 51]
[29 47]
[30 46]
[31 45]
[34 44]
[35 43]
[36 42]
[37 41]
[57 94]
[58 93]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[96 112]
[97 111]
[98 110]
[99 109]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
