%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAACAACGGGGGGGGGGAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCCCCCAUCAACAAC\
) } def
/len { sequence length } bind def

/coor [
[82.57181549 378.16748047]
[70.01359558 369.81631470]
[59.92737198 358.60388184]
[52.94717789 345.23495483]
[49.51179504 330.54998779]
[49.83717346 315.47201538]
[53.90285873 300.94888306]
[61.45327759 287.89355469]
[72.01380920 277.12664795]
[84.92060089 269.32501221]
[99.36232758 264.97906494]
[98.73834991 249.99205017]
[98.11437225 235.00503540]
[97.49039459 220.01802063]
[96.86641693 205.03100586]
[96.24243927 190.04399109]
[95.61846161 175.05697632]
[94.99448395 160.06996155]
[94.37050629 145.08294678]
[93.74652863 130.09593201]
[85.26239777 126.97542572]
[78.05286407 121.52193451]
[72.74143982 114.20709229]
[69.78750610 105.66354370]
[69.44652557 96.63017273]
[71.74799347 87.88825226]
[76.49285889 80.19381714]
[67.72665405 68.02198029]
[58.96044540 55.85014343]
[51.35491943 50.67251587]
[50.14159393 43.33266068]
[41.63050079 30.98108673]
[33.11941147 18.62951469]
[19.80425644 11.72251606]
[4.80506754 11.87855244]
[-9.02785873 20.68662834]
[-23.44536400 12.87205315]
[-23.61595535 -3.52620673]
[-9.36414242 -11.63902855]
[4.64903116 -3.12063575]
[19.64822006 -3.27667236]
[27.63813591 -15.97160149]
[21.29100609 -29.56255341]
[14.94387722 -43.15350342]
[8.59674740 -56.74445343]
[-1.26897573 -68.04345703]
[-13.88010406 -76.16500092]
[-26.49123192 -84.28654480]
[-41.88252640 -80.69717407]
[-55.25958252 -89.11322784]
[-58.68602753 -104.54161072]
[-50.12901306 -117.82893372]
[-34.66526794 -121.09207153]
[-21.46915054 -112.39505768]
[-18.36968994 -96.89767456]
[-5.75856161 -88.77613068]
[6.85256624 -80.65458679]
[0.38422561 -94.18827057]
[-3.08334351 -108.78196716]
[-3.39404988 -123.77874756]
[-0.53390753 -138.50354004]
[5.36833572 -152.29351807]
[14.04699421 -164.52793884]
[25.11140060 -174.65606689]
[38.06349945 -182.22198486]
[52.32025528 -186.88511658]
[67.23990631 -188.43557739]
[82.15086365 -186.80355835]
[96.38190460 -182.06251526]
[109.29242706 -174.42587280]
[120.30127716 -164.23738098]
[128.91290283 -151.95568848]
[134.73963928 -138.13363647]
[137.51921082 -123.39341736]
[137.12648010 -108.39855957]
[133.57916260 -93.82405090]
[127.03689575 -80.32594299]
[117.79420471 -68.51185608]
[106.26713562 -58.91359329]
[92.97457123 -51.96321487]
[78.51486969 -47.97359085]
[63.53893280 -47.12430954]
[48.72089005 -49.45360184]
[34.72776794 -54.85661316]
[22.18769836 -63.09158325]
[28.53482819 -49.50063324]
[34.88195801 -35.90968323]
[41.22908783 -22.31873131]
[45.47098541 10.11842442]
[53.98207474 22.46999741]
[62.49316406 34.82157135]
[71.13227844 47.08393860]
[79.89849091 59.25577545]
[88.66469574 71.42761230]
[112.71643066 72.01495361]
[128.97804260 89.74602509]
[143.91233826 88.34371948]
[158.83125305 86.78614044]
[173.73315430 85.07344818]
[181.96363831 80.96113586]
[188.96246338 83.48346710]
[203.89675903 82.08116150]
[218.79866028 80.36846924]
[233.66171265 78.34613800]
[248.52476501 76.32380676]
[263.38781738 74.30146790]
[278.25085449 72.27913666]
[293.11389160 70.25679779]
[307.99322510 62.13019562]
[319.92126465 74.17837524]
[311.64593506 88.97551727]
[295.13623047 85.11985016]
[280.27319336 87.14218140]
[265.41015625 89.16451263]
[250.54708862 91.18685150]
[235.68405151 93.20918274]
[220.82099915 95.23152161]
[217.23548889 98.47491455]
[211.55531311 99.45820618]
[205.29907227 97.01547241]
[190.36476135 98.41777039]
[175.44584656 99.97535706]
[160.54394531 101.68804169]
[154.21705627 105.60161591]
[145.31465149 103.27803040]
[130.38034058 104.68033600]
[126.52979279 115.52547455]
[118.96053314 124.19439697]
[108.73355103 129.47195435]
[109.35752869 144.45896912]
[109.98150635 159.44598389]
[110.60548401 174.43299866]
[111.22945404 189.42001343]
[111.85343170 204.40702820]
[112.47740936 219.39404297]
[113.10138702 234.38105774]
[113.72536469 249.36807251]
[114.34934235 264.35510254]
[129.10235596 267.48553467]
[142.61299133 274.18728638]
[154.03196716 284.03909302]
[162.64147949 296.42160034]
[167.90032959 310.55651855]
[169.47793579 325.55523682]
[167.27513123 340.47497559]
[161.43037415 354.37783813]
[152.31109619 366.38989258]
[140.49052429 375.75607300]
[126.71171570 381.88754272]
[111.84082031 384.39895630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[27 94]
[28 93]
[29 92]
[31 91]
[32 90]
[33 89]
[34 41]
[35 40]
[42 88]
[43 87]
[44 86]
[45 85]
[46 57]
[47 56]
[48 55]
[96 126]
[97 125]
[98 123]
[99 122]
[101 121]
[102 120]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
