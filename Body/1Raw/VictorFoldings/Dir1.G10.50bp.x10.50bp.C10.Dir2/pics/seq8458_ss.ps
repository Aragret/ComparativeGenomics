%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCAUUUACACGGGGGGGGGGCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGxxxxxxxxxxCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCCCCCCCCCCCACUAAUUUACAC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 405.79687500]
[70.75619507 400.98742676]
[57.85220718 393.22204590]
[46.91955185 382.86389160]
[38.46956635 370.39746094]
[32.89747238 356.40582275]
[30.46388245 341.54339600]
[31.28262329 326.50534058]
[35.31539917 311.99496460]
[42.37359238 298.69097900]
[52.12707901 287.21563721]
[64.11966705 278.10565186]
[77.79044342 271.78710938]
[92.50000000 268.55554199]
[92.50000000 253.55554199]
[92.50000000 238.55554199]
[92.50000000 223.55554199]
[92.50000000 208.55554199]
[92.50000000 193.55554199]
[92.50000000 178.55554199]
[92.50000000 163.55554199]
[92.50000000 148.55554199]
[92.50000000 133.55554199]
[92.50000000 118.55554199]
[81.89794922 112.80974579]
[75.68662262 101.09458160]
[77.08027649 86.69819641]
[62.14104462 85.34934235]
[47.20181656 84.00048065]
[42.30043030 98.25669861]
[34.12913895 110.92530060]
[23.16301537 121.26974487]
[10.03961277 128.68862915]
[-4.47809124 132.75061035]
[-19.54605484 133.21954346]
[-34.28824615 130.06816101]
[-47.84757614 123.47969055]
[-59.43572235 113.83716583]
[-68.37896729 101.70118713]
[-74.15735626 87.77733612]
[-76.43494415 72.87512207]
[-75.07931519 57.86093903]
[-70.16928101 43.60769272]
[-61.99031448 30.94404793]
[-51.01792145 20.60625267]
[-37.89002228 13.19533253]
[-23.36985970 9.14214897]
[-8.30161476 8.68234921]
[6.43866444 11.84266472]
[19.99399757 18.43935966]
[31.57629585 28.08890915]
[40.51217651 40.23030472]
[46.28212357 54.15765762]
[48.55067825 69.06124878]
[63.48990631 70.41011047]
[78.42913818 71.75897217]
[64.10960388 67.29232788]
[53.70405960 56.48840332]
[49.77830505 42.01123428]
[53.30035400 27.43058968]
[63.40173340 16.34176064]
[77.59165192 11.47902679]
[92.37117004 14.04143810]
[104.09594727 23.39715767]
[109.87490845 37.23925400]
[108.28306580 52.15454865]
[99.71386719 64.46443939]
[110.68531036 54.23568344]
[121.65675354 44.00692749]
[132.62818909 33.77817154]
[143.59963989 23.54941559]
[135.96215820 11.06322575]
[130.92161560 -2.67298460]
[128.67172241 -17.12575722]
[129.29780579 -31.73421478]
[132.77360535 -45.93182755]
[138.96243286 -59.16837311]
[147.62248230 -70.93128204]
[158.41625977 -80.76545715]
[170.92381287 -88.29090881]
[184.65901184 -93.21742249]
[199.08842468 -95.35575867]
[213.65213013 -94.62489319]
[227.78530884 -91.05513763]
[240.94029236 -84.78683472]
[252.60765076 -76.06488800]
[257.72589111 -91.03533173]
[272.36868286 -93.76255035]
[283.54260254 -103.76972961]
[294.71649170 -113.77691650]
[305.89041138 -123.78409576]
[300.22647095 -137.84452820]
[299.71615601 -152.99429321]
[304.42108154 -167.40399170]
[313.77313232 -179.33357239]
[326.64297485 -187.34249878]
[341.47653198 -190.46363831]
[356.48257446 -188.32011414]
[369.84902954 -181.17074585]
[379.96185303 -169.87886047]
[385.59988403 -155.80802917]
[386.08227539 -140.65734863]
[381.35079956 -126.25634766]
[371.97677612 -114.34400940]
[359.09219360 -106.35881805]
[344.25292969 -103.26502228]
[329.25085449 -105.43620300]
[315.89758301 -112.61018372]
[304.72369385 -102.60300446]
[293.54977417 -92.59581757]
[282.37585449 -82.58863831]
[278.05688477 -68.33396912]
[262.61483765 -64.89097595]
[270.34747314 -51.58030319]
[275.15927124 -36.95197296]
[276.83959961 -21.63885498]
[275.31332397 -6.30394936]
[270.64428711 8.38831329]
[263.03244019 21.80086136]
[252.80546570 33.35160446]
[240.40458679 42.53869629]
[226.36552429 48.96234512]
[211.29536438 52.34219742]
[195.84635925 52.52958298]
[180.68760681 49.51405716]
[166.47613525 43.42393875]
[153.82839966 34.52085876]
[142.85694885 44.74961472]
[131.88551331 54.97837067]
[120.91407013 65.20713043]
[109.94262695 75.43588257]
[123.25698853 100.00569916]
[107.50000000 118.55554199]
[107.50000000 133.55554199]
[107.50000000 148.55554199]
[107.50000000 163.55554199]
[107.50000000 178.55554199]
[107.50000000 193.55554199]
[107.50000000 208.55554199]
[107.50000000 223.55554199]
[107.50000000 238.55554199]
[107.50000000 253.55554199]
[107.50000000 268.55554199]
[122.20955658 271.78710938]
[135.88034058 278.10565186]
[147.87292480 287.21563721]
[157.62640381 298.69097900]
[164.68460083 311.99496460]
[168.71737671 326.50534058]
[169.53611755 341.54339600]
[167.10252380 356.40582275]
[161.53042603 370.39746094]
[153.08044434 382.86389160]
[142.14779663 393.22204590]
[129.24380493 400.98742676]
[114.97203827 405.79687500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[27 56]
[28 55]
[29 54]
[67 131]
[68 130]
[69 129]
[70 128]
[71 127]
[86 113]
[88 111]
[89 110]
[90 109]
[91 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
