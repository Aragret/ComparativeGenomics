%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGAACCCGGGGGGGGGGCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCxxxxxxxxxxUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUACCCCCCCCCCAACCAAACCC\
) } def
/len { sequence length } bind def

/coor [
[78.78047943 375.21484375]
[64.93453979 369.19882202]
[53.22587585 359.66940308]
[44.52335358 347.33374023]
[39.47275162 333.10720825]
[38.44886017 318.04553223]
[41.52765656 303.26638794]
[48.48067856 289.86645508]
[58.79196548 278.84011841]
[71.69634247 271.00561523]
[86.23622894 266.94430542]
[86.23622894 251.94430542]
[86.23622894 236.94430542]
[86.23622894 221.94430542]
[86.23622894 206.94430542]
[86.23622894 191.94430542]
[86.23622894 176.94430542]
[86.23622894 161.94430542]
[86.23622894 146.94430542]
[86.23622894 131.94430542]
[74.06439209 123.17809296]
[59.83761597 127.93190765]
[45.61083603 132.68571472]
[31.38405800 137.43952942]
[17.15727806 142.19334412]
[2.93049979 146.94715881]
[-2.63788033 161.55973816]
[-16.32138252 169.12913513]
[-31.65907669 166.08131409]
[-41.40896988 153.85537720]
[-40.96746445 138.22402954]
[-30.54302406 126.56791687]
[-15.05774879 124.39069366]
[-1.82331502 132.72038269]
[12.40346432 127.96656799]
[26.63024330 123.21275330]
[40.85702133 118.45893860]
[55.08380127 113.70512390]
[69.31057739 108.95130920]
[70.37870026 93.73839569]
[78.14627075 81.57624817]
[90.06973267 75.00942993]
[102.86380005 74.96434784]
[108.92681122 61.24429321]
[114.98983002 47.52423859]
[121.05284119 33.80418777]
[127.11585236 20.08413315]
[132.60289001 6.12374258]
[137.50444031 -8.05281544]
[142.40599060 -22.22937393]
[147.30754089 -36.40593338]
[147.15986633 -45.60539246]
[152.46133423 -50.82460022]
[157.65675354 -64.89611816]
[162.85215759 -78.96763611]
[168.04757690 -93.03915405]
[167.13439941 -98.31037140]
[168.26278687 -102.92330170]
[170.82521057 -106.19983673]
[174.03100586 -107.80931091]
[180.09400940 -121.52936554]
[186.15702820 -135.24942017]
[173.32638550 -143.06156921]
[161.62524414 -152.48165894]
[151.25381470 -163.34851074]
[142.38957214 -175.47618103]
[135.18418884 -188.65713501]
[129.76097107 -202.66583252]
[126.21269989 -217.26257324]
[124.60010529 -232.19758606]
[124.95078278 -247.21530151]
[127.25872040 -262.05877686]
[131.48443604 -276.47396851]
[137.55561829 -290.21429443]
[145.36836243 -303.04455566]
[154.78901672 -314.74523926]
[165.65637207 -325.11614990]
[177.78445435 -333.97982788]
[190.96574402 -341.18457031]
[204.97470093 -346.60714722]
[219.57160950 -350.15469360]
[234.50669861 -351.76657104]
[249.52441406 -351.41519165]
[264.36776733 -349.10653687]
[278.78277588 -344.88015747]
[292.52279663 -338.80831909]
[305.35269165 -330.99496460]
[317.05294800 -321.57373047]
[327.42333984 -310.70590210]
[336.28640747 -298.57739258]
[343.49053955 -285.39575195]
[348.91244507 -271.38653564]
[352.45932007 -256.78945923]
[354.07046509 -241.85429382]
[353.71838379 -226.83660889]
[351.40902710 -211.99336243]
[347.18194580 -197.57855225]
[341.10943604 -183.83883667]
[333.29547119 -171.00930786]
[323.87371826 -159.30950928]
[313.00537109 -148.93962097]
[300.87643433 -140.07711792]
[287.69445801 -132.87361145]
[273.68499756 -127.45240021]
[259.08773804 -123.90621948]
[244.15249634 -122.29576111]
[229.13482666 -122.64857483]
[214.29168701 -124.95863342]
[199.87707520 -129.18640137]
[193.81407166 -115.46635437]
[187.75105286 -101.74629974]
[182.11909485 -87.84374237]
[176.92367554 -73.77222443]
[171.72827148 -59.70070267]
[166.53285217 -45.62918472]
[161.48410034 -31.50438118]
[156.58255005 -17.32782364]
[151.68099976 -3.15126467]
[146.77944946 11.02529335]
[147.94116211 13.64402485]
[148.10101318 16.89493561]
[147.00738525 20.38576126]
[144.56004333 23.63869286]
[140.83590698 26.14714622]
[134.77288818 39.86719894]
[128.70988464 53.58725357]
[122.64686584 67.30730438]
[116.58385468 81.02735901]
[127.40979004 98.41904449]
[121.99621582 119.97389221]
[101.23622894 131.94430542]
[101.23622894 146.94430542]
[101.23622894 161.94430542]
[101.23622894 176.94430542]
[101.23622894 191.94430542]
[101.23622894 206.94430542]
[101.23622894 221.94430542]
[101.23622894 236.94430542]
[101.23622894 251.94430542]
[101.23622894 266.94430542]
[115.77612305 271.00561523]
[128.68049622 278.84011841]
[138.99179077 289.86645508]
[145.94480896 303.26638794]
[149.02360535 318.04553223]
[147.99971008 333.10720825]
[142.94911194 347.33374023]
[134.24658203 359.66940308]
[122.53792572 369.19882202]
[108.69198608 375.21484375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[43 128]
[44 127]
[45 126]
[46 125]
[47 124]
[48 119]
[49 118]
[50 117]
[51 116]
[53 115]
[54 114]
[55 113]
[56 112]
[60 111]
[61 110]
[62 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
