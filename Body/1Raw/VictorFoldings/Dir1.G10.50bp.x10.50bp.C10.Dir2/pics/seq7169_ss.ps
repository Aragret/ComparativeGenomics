%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUCGGCGGGGGGGGGGGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCxxxxxxxxxxGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCCCCCCCCCCCUUCACCGGCG\
) } def
/len { sequence length } bind def

/coor [
[72.94211578 397.52902222]
[60.06884003 389.62615967]
[49.94454575 378.41564941]
[43.38996124 364.80630493]
[40.93643951 349.90139771]
[42.78287888 334.90914917]
[48.77959061 321.04495239]
[58.44045258 309.43267822]
[70.98229980 301.01373291]
[85.38842010 296.47058105]
[85.07636261 281.47381592]
[84.76430511 266.47708130]
[84.45225525 251.48031616]
[84.14019775 236.48356628]
[83.82814026 221.48680115]
[83.51608276 206.49005127]
[83.20402527 191.49330139]
[82.89196777 176.49655151]
[82.57991791 161.49978638]
[82.26786041 146.50303650]
[81.95580292 131.50628662]
[70.76004028 121.52355957]
[55.82572937 122.92585754]
[40.89142227 124.32816315]
[38.37637711 139.20556641]
[32.09559631 152.92468262]
[22.47731209 164.55012512]
[10.17731190 173.28926086]
[-3.96576810 178.54621887]
[-18.98762894 179.96260071]
[-33.86405563 177.44181824]
[-47.58074570 171.15573120]
[-59.20247650 161.53295898]
[-67.93685913 149.22958374]
[-73.18836212 135.08448792]
[-74.59893799 120.06207275]
[-72.07241058 105.18662262]
[-65.78103638 91.47235870]
[-56.15377808 79.85434723]
[-43.84703064 71.12471771]
[-29.69989586 65.87866974]
[-14.67694664 64.47389221]
[0.19752789 67.00616455]
[13.90936184 73.30283356]
[25.52365875 82.93458557]
[34.24853516 95.24469757]
[39.48911667 109.39385986]
[54.42342377 107.99155426]
[69.35773468 106.58924866]
[68.94739532 90.61588287]
[76.60517883 75.97140503]
[90.87081909 66.59161377]
[80.43100739 55.82080460]
[69.99119568 45.04999542]
[54.03709030 43.36298370]
[45.53064728 29.76077652]
[50.99728775 14.67782593]
[66.24346924 9.68447971]
[79.57362366 18.61120605]
[80.76200104 34.61018372]
[91.20182037 45.38099289]
[101.64163208 56.15180206]
[116.45938873 53.82069778]
[123.08788300 40.36473083]
[129.71638489 26.90876579]
[136.34487915 13.45280075]
[142.97338867 -0.00316449]
[130.69290161 -8.67128563]
[119.91969299 -19.15386581]
[110.91905975 -31.19276428]
[103.91265106 -44.49151230]
[99.07299805 -58.72261429]
[96.51927948 -73.53561401]
[96.31439972 -88.56573486]
[98.46338654 -103.44284058]
[102.91333771 -117.80057526]
[109.55464935 -131.28535461]
[118.22377777 -143.56512451]
[128.70724487 -154.33746338]
[140.74688721 -163.33711243]
[154.04621887 -170.34242249]
[168.27770996 -175.18090820]
[183.09092712 -177.73339844]
[198.12106323 -177.93704224]
[212.99800110 -175.78681946]
[227.35536194 -171.33569336]
[240.83959961 -164.69326782]
[253.11865234 -156.02311707]
[263.89013672 -145.53875732]
[272.88876343 -133.49836731]
[279.89300537 -120.19847107]
[284.73028564 -105.96657562]
[287.28155518 -91.15314484]
[287.48397827 -76.12299347]
[285.33251953 -61.24624252]
[280.88021851 -46.88924408]
[274.23666382 -33.40555573]
[265.56552124 -21.12722015]
[255.08026123 -10.35660934]
[243.03913879 -1.35895491]
[229.73866272 5.64416647]
[215.50636292 10.48029709]
[200.69271851 13.03034210]
[185.66255188 13.23150444]
[170.78598022 11.07883167]
[156.42935181 6.62533426]
[149.80084229 20.08129883]
[143.17234802 33.53726578]
[136.54385376 46.99322891]
[129.91535950 60.44919586]
[136.26248169 74.04014587]
[150.83518982 77.59490967]
[165.40788269 81.14967346]
[175.48185730 69.62692261]
[189.76098633 64.11645508]
[204.96401978 65.88454437]
[217.59742737 74.52487946]
[224.75814819 88.05199432]
[224.80068970 103.35744476]
[217.71527100 116.92414856]
[205.13009644 125.63458252]
[189.93711853 127.48715210]
[175.62757874 122.05615234]
[165.48971558 110.58957672]
[161.85311890 95.72237396]
[147.28042603 92.16761017]
[132.70771790 88.61284637]
[125.92665863 120.39646912]
[96.95255280 131.19422913]
[97.26461029 146.19097900]
[97.57666779 161.18772888]
[97.88872528 176.18449402]
[98.20078278 191.18124390]
[98.51284027 206.17799377]
[98.82489014 221.17474365]
[99.13694763 236.17150879]
[99.44900513 251.16825867]
[99.76106262 266.16500854]
[100.07312012 281.16177368]
[100.38517761 296.15850830]
[114.96781921 300.09848022]
[127.84902191 307.98840332]
[137.98457336 319.18875122]
[144.55282593 332.79150391]
[147.02131653 347.69393921]
[145.18994141 362.68804932]
[139.20716858 376.55825806]
[129.55796814 388.18020630]
[117.02458954 396.61175537]
[102.62303925 401.16940308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 49]
[23 48]
[24 47]
[52 62]
[53 61]
[54 60]
[63 110]
[64 109]
[65 108]
[66 107]
[67 106]
[111 127]
[112 126]
[113 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
