%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUCCUACGGGGGGGGGGCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCxxxxxxxxxxGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUCCCCCCCCCCAACUUACUAC\
) } def
/len { sequence length } bind def

/coor [
[51.71799469 474.51983643]
[37.87205505 468.50381470]
[26.16339302 458.97439575]
[17.46086884 446.63873291]
[12.41026592 432.41220093]
[11.38637543 417.35052490]
[14.46517372 402.57138062]
[21.41819572 389.17144775]
[31.72948074 378.14511108]
[44.63386154 370.31060791]
[59.17374802 366.24929810]
[59.17374802 351.24929810]
[59.17374802 336.24929810]
[59.17374802 321.24929810]
[59.17374802 306.24929810]
[59.17374802 291.24929810]
[59.17374802 276.24929810]
[59.17374802 261.24929810]
[59.17374802 246.24928284]
[59.17374802 231.24928284]
[59.01771164 216.25009155]
[58.70565414 201.25334167]
[51.08463669 214.17309570]
[39.90214920 224.17070007]
[26.21297455 230.30311584]
[11.30834579 231.99189758]
[-3.40586090 229.07777405]
[-16.54172897 221.83561707]
[-26.86021996 210.94851685]
[-33.38804245 197.44343567]
[-35.50945663 182.59420776]
[-33.02436829 167.80148315]
[-26.16717720 154.46061707]
[-15.58468819 143.82995605]
[-2.27509379 136.91224670]
[12.50617886 134.36000061]
[27.36488914 136.41395569]
[40.89949036 142.88037109]
[51.83333206 153.14930725]
[59.13507843 166.25215149]
[62.11600876 180.95317078]
[67.31142426 166.88163757]
[72.50683594 152.81011963]
[77.70225525 138.73860168]
[82.89766693 124.66708374]
[67.42135620 103.77919769]
[73.57334137 76.17884064]
[61.31097031 67.53972626]
[49.04860306 58.90060806]
[36.78623581 50.26148987]
[20.41386604 49.32470322]
[13.28164291 34.55773163]
[22.72658539 21.15157127]
[39.03254700 22.89733124]
[45.42535019 37.99912262]
[57.68771744 46.63824081]
[69.95008850 55.27735519]
[82.21245575 63.91646957]
[96.66714478 59.90872955]
[102.73015594 46.18867874]
[90.41669464 54.75481033]
[76.21414948 59.58054352]
[61.23089981 60.28927612]
[46.63625717 56.82569885]
[33.56919479 49.46011353]
[23.04947853 38.76733017]
[15.89807701 25.58183098]
[12.67308998 10.93261623]
[13.62619972 -4.03707218]
[18.68302345 -18.15898895]
[27.44892311 -30.33104706]
[39.23980331 -39.60332870]
[53.13548660 -45.25221634]
[68.05154419 -46.83686829]
[82.82392120 -44.23361588]
[96.29976654 -37.64561462]
[107.42740631 -27.58700562]
[115.33843231 -14.84276676]
[119.41546631 -0.40747005]
[119.34033203 14.59234142]
[115.11776733 28.98853874]
[126.20908356 18.88988876]
[137.30039978 8.79123878]
[148.39170837 -1.30741048]
[143.19213867 -6.31600904]
[139.95915222 -13.99987316]
[139.78459167 -23.52352142]
[143.40785217 -33.65776062]
[153.15550232 -45.05878448]
[162.90315247 -56.45980453]
[165.36643982 -72.67288971]
[180.73551941 -78.39336395]
[193.19998169 -67.73648071]
[189.93746948 -51.66513824]
[174.30418396 -46.71215057]
[164.55651855 -35.31113052]
[154.80886841 -23.91011047]
[164.07382202 -12.11347008]
[177.46011353 -18.88158417]
[190.84638977 -25.64970016]
[202.25337219 -38.19230652]
[217.46357727 -30.70324707]
[214.47779846 -14.01428413]
[197.61450195 -12.26341438]
[184.22822571 -5.49529982]
[170.84193420 1.27281475]
[158.49037170 9.78390503]
[147.39904785 19.88255501]
[136.30773926 29.98120499]
[125.21641541 40.07985306]
[116.45021057 52.25168991]
[110.38719940 65.97174072]
[118.75263977 70.36170959]
[125.55442047 76.72240448]
[130.35337830 84.54541016]
[132.86602783 93.23212433]
[132.98063660 102.13936615]
[130.76034546 110.62691498]
[126.43357849 118.10353088]
[120.37277985 124.06813812]
[113.06327820 128.14323425]
[105.06487274 130.09840393]
[96.96919250 129.86250305]
[91.77377319 143.93402100]
[86.57836151 158.00553894]
[81.38294220 172.07705688]
[76.18753052 186.14857483]
[73.70240784 200.94128418]
[74.01446533 215.93803406]
[77.33932495 224.51692200]
[74.17374420 231.24928284]
[74.17374420 246.24928284]
[74.17374420 261.24929810]
[74.17374420 276.24929810]
[74.17374420 291.24929810]
[74.17374420 306.24929810]
[74.17374420 321.24929810]
[74.17374420 336.24929810]
[74.17374420 351.24929810]
[74.17374420 366.24929810]
[88.71363831 370.31060791]
[101.61801910 378.14511108]
[111.92929840 389.17144775]
[118.88232422 402.57138062]
[121.96112061 417.35052490]
[120.93723297 432.41220093]
[115.88662720 446.63873291]
[107.18410492 458.97439575]
[95.47544098 468.50381470]
[81.62950134 474.51983643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[41 127]
[42 126]
[43 125]
[44 124]
[45 123]
[47 58]
[48 57]
[49 56]
[50 55]
[59 112]
[60 111]
[81 110]
[82 109]
[83 108]
[84 107]
[88 97]
[89 96]
[90 95]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
