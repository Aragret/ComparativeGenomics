%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCACAACGGGGGGGGGGACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUxxxxxxxxxxCACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUACCCCCCCCCCUUGCCACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.94473267]
[71.19830322 382.92871094]
[59.48964310 373.39929199]
[50.78712082 361.06362915]
[45.73651886 346.83709717]
[44.71262741 331.77542114]
[47.79142761 316.99627686]
[54.74444962 303.59634399]
[65.05573273 292.57000732]
[77.96011353 284.73550415]
[92.50000000 280.67419434]
[92.50000000 265.67419434]
[92.50000000 250.67417908]
[92.50000000 235.67417908]
[92.50000000 220.67417908]
[92.50000000 205.67417908]
[92.50000000 190.67417908]
[92.50000000 175.67417908]
[92.50000000 160.67417908]
[92.50000000 145.67417908]
[78.91758728 141.20574951]
[67.34708405 132.80500793]
[58.89267349 121.27367401]
[54.36116028 107.71217346]
[54.18498993 93.41469574]
[58.38097763 79.74565887]
[66.54869080 68.00950623]
[57.53116608 56.02267838]
[48.51363373 44.03584290]
[34.03435516 37.65924454]
[32.56616592 22.83717537]
[23.54863739 10.85034275]
[14.53110695 -1.13648951]
[3.65228176 -11.46369457]
[-8.78715801 -19.84583855]
[-21.22659874 -28.22798157]
[-30.15468025 -30.45086479]
[-33.83514404 -36.91614151]
[-46.09751129 -45.55525970]
[-58.95454788 -37.49472046]
[-73.87790680 -34.97748947]
[-88.58831787 -38.35644913]
[-100.85112762 -47.08634949]
[-108.81572723 -59.81151962]
[-111.29484558 -74.57632446]
[-107.94139862 -89.12567902]
[-120.20376587 -97.76479340]
[-132.46612549 -106.40390778]
[-144.72850037 -115.04302216]
[-160.25578308 -112.09701538]
[-173.27116394 -121.06224823]
[-176.05284119 -136.61981201]
[-166.95051575 -149.53967285]
[-151.36441040 -152.15672302]
[-138.54148865 -142.91828918]
[-136.08938599 -127.30539703]
[-123.82701874 -118.66627502]
[-111.56465149 -110.02716064]
[-99.30228424 -101.38804626]
[-86.73054504 -109.44290161]
[-71.99279022 -112.07803345]
[-57.32933044 -108.86122131]
[-44.98132706 -100.25225067]
[-36.84823227 -87.53743744]
[-34.19562912 -72.63755035]
[-37.45839691 -57.81762695]
[-25.19602776 -49.17851257]
[-12.84445572 -40.66741943]
[-0.40501526 -32.28527832]
[12.03442478 -23.90313530]
[6.04019356 -37.65337753]
[5.01438427 -52.61825943]
[9.07626629 -67.05783081]
[17.75356865 -79.29320526]
[30.03738785 -87.90179443]
[44.49949265 -91.88267517]
[59.45839310 -90.77301025]
[73.17481995 -84.70180511]
[84.05398560 -74.37495422]
[90.83097839 -60.99316025]
[92.71783447 -46.11230850]
[89.49517059 -31.46258354]
[81.53769684 -18.74729538]
[69.77060699 -9.44484043]
[55.56206131 -4.63680887]
[40.56406784 -4.88222504]
[26.51794052 -10.15401936]
[35.53546906 1.83281326]
[44.55299759 13.81964588]
[58.38728333 19.33886909]
[60.50046921 35.01831436]
[69.51799774 47.00514603]
[78.53553009 58.99198151]
[98.22985077 53.74799728]
[118.26737213 57.47137070]
[134.76321411 69.44021606]
[144.51913452 87.33399963]
[159.42103577 85.62131500]
[174.32293701 83.90862274]
[189.22485352 82.19593048]
[191.78425598 67.30882263]
[198.43542480 53.74642181]
[208.63916016 42.60817337]
[221.56828308 34.79700851]
[236.17471313 30.94614410]
[251.27433777 31.36774635]
[265.64312744 36.02764130]
[278.11627197 44.54807281]
[287.68258667 56.23832703]
[293.56661987 70.15072632]
[295.29135132 85.15745544]
[292.71697998 100.04199219]
[286.05218506 113.59770203]
[275.83728027 124.72569275]
[262.90029907 132.52386475]
[248.29002380 136.36006165]
[233.19082642 135.92327881]
[218.82672119 131.24896240]
[206.36216736 122.71599579]
[196.80758667 111.01613617]
[190.93753052 97.09783173]
[176.03562927 98.81052399]
[161.13372803 100.52321625]
[146.23182678 102.23590088]
[144.93078613 111.11780548]
[141.93977356 119.58152771]
[137.37129211 127.30874634]
[131.39717102 134.00880432]
[124.24212646 139.42968750]
[116.17526245 143.36752319]
[107.50000000 145.67417908]
[107.50000000 160.67417908]
[107.50000000 175.67417908]
[107.50000000 190.67417908]
[107.50000000 205.67417908]
[107.50000000 220.67417908]
[107.50000000 235.67417908]
[107.50000000 250.67417908]
[107.50000000 265.67419434]
[107.50000000 280.67419434]
[122.03988647 284.73550415]
[134.94427490 292.57000732]
[145.25555420 303.59634399]
[152.20857239 316.99627686]
[155.28736877 331.77542114]
[154.26348877 346.83709717]
[149.21287537 361.06362915]
[140.51036072 373.39929199]
[128.80169678 382.92871094]
[114.95575714 388.94473267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 93]
[28 92]
[29 91]
[31 89]
[32 88]
[33 87]
[34 70]
[35 69]
[36 68]
[38 67]
[39 66]
[46 59]
[47 58]
[48 57]
[49 56]
[97 124]
[98 123]
[99 122]
[100 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
