%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCGCUAUCGGGGGGGGGGCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAxxxxxxxxxxCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCCCCCCCCCCCUCAUCGCUACC\
) } def
/len { sequence length } bind def

/coor [
[92.25218964 386.08166504]
[78.23024750 380.52865601]
[66.03028870 371.66232300]
[56.41921997 360.04000854]
[50.00119400 346.39230347]
[47.17965698 331.57711792]
[48.13197327 316.52575684]
[52.79827881 302.18432617]
[60.88524628 289.45437622]
[71.88452148 279.13610840]
[85.10467529 271.87811279]
[99.71469116 268.13668823]
[99.71469116 253.13668823]
[99.71469116 238.13668823]
[99.71469116 223.13668823]
[99.71469116 208.13668823]
[99.71469116 193.13668823]
[99.71469116 178.13668823]
[99.71469116 163.13668823]
[99.71469116 148.13668823]
[99.71469116 133.13668823]
[88.13024902 129.94905090]
[78.75960541 122.98043060]
[72.73258972 113.37391663]
[70.66389465 102.56658936]
[72.59675598 92.07665253]
[78.02869415 83.29061890]
[86.01167297 77.28008270]
[82.05506134 62.81131363]
[78.09844971 48.34254837]
[74.14183807 33.87377930]
[70.18523407 19.40501213]
[55.41734695 15.42295265]
[44.69623184 4.65473366]
[40.83021545 -9.93705463]
[44.76076889 -24.40794754]
[55.33564758 -34.89782333]
[51.37903976 -49.36659241]
[47.42242813 -63.83535767]
[43.46581650 -78.30412292]
[35.56933594 -91.05738068]
[24.38103867 -101.04847717]
[15.83942986 -104.45973969]
[13.06829453 -111.36141205]
[2.08749199 -121.58011627]
[-8.89331055 -131.79882812]
[-21.82764244 -132.12553406]
[-30.76774597 -140.91450500]
[-31.27993774 -153.03884888]
[-39.67429733 -156.79791260]
[-42.15974808 -163.80752563]
[-52.71176147 -174.46844482]
[-67.54695129 -170.49191284]
[-82.37870026 -174.48124695]
[-93.21735382 -185.36331177]
[-97.14735413 -200.21089172]
[-93.11155701 -215.03005981]
[-82.19557190 -225.83454895]
[-67.33574677 -229.71798706]
[-52.52929688 -225.63575745]
[-41.75907898 -214.68595886]
[-37.92223740 -199.81404114]
[-42.05085373 -185.02046204]
[-31.49883842 -174.35954285]
[-20.83792877 -163.80752563]
[-3.63333464 -160.48390198]
[1.32539678 -142.77963257]
[12.30619907 -132.56091309]
[23.28700256 -122.34220886]
[34.37213516 -112.23677826]
[45.56043243 -102.24568176]
[41.26850510 -116.61855316]
[40.00016022 -131.56483459]
[41.80877686 -146.45539856]
[46.61823273 -160.66346741]
[54.22608185 -173.59097290]
[64.31208801 -184.69378662]
[76.45171356 -193.50454712]
[90.13396454 -199.65238953]
[104.78292084 -202.87854004]
[119.78197479 -203.04719543]
[134.49977112 -200.15127563]
[148.31680298 -194.31263733]
[160.65148926 -185.77708435]
[170.98460388 -174.90388489]
[178.88122559 -162.15071106]
[184.00894165 -148.05438232]
[186.15194702 -133.20825195]
[185.22000122 -118.23722839]
[181.25236511 -103.77148438]
[174.41601562 -90.41991425]
[164.99873352 -78.74452209]
[153.39689636 -69.23675537]
[140.09887695 -62.29682541]
[125.66442108 -58.21683884]
[110.70109558 -57.16854477]
[95.83875275 -59.19606018]
[81.70298767 -64.21404266]
[68.88881683 -72.01128387]
[57.93458557 -82.26073456]
[61.89119720 -67.79196930]
[65.84780884 -53.32320023]
[69.80441284 -38.85443497]
[84.24568939 -35.20544434]
[94.99301910 -24.74834442]
[99.09021759 -10.21977520]
[95.34055328 4.50560427]
[84.65399933 15.44840145]
[88.61061096 29.91716957]
[92.56722260 44.38593674]
[96.52382660 58.85470581]
[100.48043823 73.32347107]
[124.31535339 82.58348846]
[131.56182861 110.09815216]
[145.80851746 114.79195404]
[160.05520630 119.48575592]
[170.61103821 108.46136475]
[184.90783691 103.11678314]
[200.10693359 104.51317596]
[213.19056702 112.37329102]
[221.56095886 125.13649750]
[223.55616760 140.26864624]
[218.78002930 154.76524353]
[208.18086243 165.74797058]
[193.86312866 171.03620911]
[178.66964722 169.57997131]
[165.61706543 161.66839600]
[157.29699707 148.87232971]
[155.36140442 133.73245239]
[141.11471558 129.03865051]
[126.86802673 124.34484863]
[114.71469116 133.13668823]
[114.71469116 148.13668823]
[114.71469116 163.13668823]
[114.71469116 178.13668823]
[114.71469116 193.13668823]
[114.71469116 208.13668823]
[114.71469116 223.13668823]
[114.71469116 238.13668823]
[114.71469116 253.13668823]
[114.71469116 268.13668823]
[129.32470703 271.87811279]
[142.54486084 279.13610840]
[153.54414368 289.45437622]
[161.63110352 302.18432617]
[166.29740906 316.52575684]
[167.24972534 331.57711792]
[164.42819214 346.39230347]
[158.01016235 360.04000854]
[148.39909363 371.66232300]
[136.19912720 380.52865601]
[122.17719269 386.08166504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[37 103]
[38 102]
[39 101]
[40 100]
[41 71]
[42 70]
[44 69]
[45 68]
[46 67]
[49 65]
[51 64]
[52 63]
[114 131]
[115 130]
[116 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
