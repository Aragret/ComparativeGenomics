%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCCUCAUGGGGGGGGGGUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAxxxxxxxxxxUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACCCCCCCCCCCUACUCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[99.53417206 427.21957397]
[85.51222992 421.66656494]
[73.31227112 412.80023193]
[63.70120239 401.17791748]
[57.28317642 387.53021240]
[54.46163940 372.71502686]
[55.41395569 357.66366577]
[60.08026123 343.32223511]
[68.16722870 330.59228516]
[79.16650391 320.27401733]
[92.38665771 313.01602173]
[106.99667358 309.27459717]
[106.99667358 294.27459717]
[106.99667358 279.27459717]
[106.99667358 264.27459717]
[106.99667358 249.27459717]
[106.99667358 234.27459717]
[106.99667358 219.27459717]
[106.99667358 204.27459717]
[106.99667358 189.27459717]
[106.99667358 174.27459717]
[106.99667358 159.27459717]
[106.99667358 144.27459717]
[106.99667358 129.27459717]
[101.40252686 124.27905273]
[87.15592957 128.97314453]
[90.21422577 114.28795624]
[84.62007904 109.29240417]
[69.71562958 110.98280334]
[54.81118393 112.67320251]
[39.90673828 114.36360168]
[32.37629318 127.93091583]
[18.29519081 134.45028687]
[3.07789993 131.41487122]
[-7.42421865 119.99186707]
[-9.17288685 104.57363892]
[-1.49570632 91.08880615]
[12.65529060 84.72257996]
[27.83875656 87.92288971]
[38.21633911 99.45915222]
[53.12078857 97.76875305]
[68.02523804 96.07835388]
[82.92967987 94.38795471]
[85.68592834 79.64336395]
[72.39858246 72.68300629]
[59.11124420 65.72264862]
[45.82390213 58.76229477]
[32.53656006 51.80193710]
[15.70025063 49.80818939]
[12.95532799 33.07792664]
[28.27189636 25.80887794]
[39.49691772 38.51459503]
[52.78425598 45.47495270]
[66.07160187 52.43530655]
[79.35894012 59.39566422]
[92.64627838 66.35601807]
[83.33357239 54.59704971]
[85.73404694 39.79037094]
[98.28487396 31.57594299]
[112.81477356 35.30180740]
[119.86398315 48.54222107]
[114.84339905 62.67662811]
[125.17430115 51.80131531]
[115.33865356 40.46043396]
[106.64348602 28.22321320]
[99.16999054 15.20390511]
[92.98794556 1.52407181]
[88.15507507 -12.68855762]
[84.71649170 -27.30128098]
[82.70431519 -42.17766190]
[82.13732910 -57.17879486]
[83.02082062 -72.16461945]
[85.34654999 -86.99521637]
[89.09279633 -101.53210449]
[94.22457886 -115.63955688]
[100.69399261 -129.18585205]
[108.44062042 -142.04452515]
[117.39214325 -154.09548950]
[127.46497345 -165.22624207]
[138.56506348 -175.33283997]
[150.58877563 -184.32093811]
[163.42384338 -192.10661316]
[176.95042419 -198.61715698]
[191.04222107 -203.79177856]
[205.56765747 -207.58218384]
[220.39111328 -209.95295715]
[235.37419128 -210.88198853]
[250.37696838 -210.36058044]
[265.25939941 -208.39361572]
[279.88250732 -204.99945068]
[294.10974121 -200.20979309]
[307.80831909 -194.06933594]
[320.85025024 -186.63543701]
[333.11386108 -177.97749329]
[344.48455811 -168.17636108]
[354.85623169 -157.32353210]
[364.13201904 -145.52033997]
[372.22531128 -132.87699890]
[379.06057739 -119.51155853]
[384.57394409 -105.54881287]
[388.71395874 -91.11912537]
[391.44195557 -76.35723114]
[392.73245239 -61.40095901]
[392.57345581 -46.38995743]
[390.96640015 -31.46437836]
[387.92630005 -16.76358604]
[383.48153687 -2.42483735]
[377.67364502 11.41798401]
[370.55679321 24.63562965]
[362.19747925 37.10468674]
[352.67376709 48.70873642]
[342.07452393 59.33942413]
[330.49871826 68.89749908]
[318.05447388 77.29370880]
[304.85797119 84.44966888]
[291.03240967 90.29855347]
[276.70690918 94.78576660]
[262.01516724 97.86940002]
[247.09442139 99.52066040]
[232.08395386 99.72413635]
[217.12393188 98.47792816]
[202.35401917 95.79366302]
[187.91213989 91.69641113]
[173.93312073 86.22443390]
[160.54748535 79.42881012]
[147.88023376 71.37300110]
[136.04962158 62.13221741]
[125.71871185 73.00753021]
[121.99667358 129.27459717]
[121.99667358 144.27459717]
[121.99667358 159.27459717]
[121.99667358 174.27459717]
[121.99667358 189.27459717]
[121.99667358 204.27459717]
[121.99667358 219.27459717]
[121.99667358 234.27459717]
[121.99667358 249.27459717]
[121.99667358 264.27459717]
[121.99667358 279.27459717]
[121.99667358 294.27459717]
[121.99667358 309.27459717]
[136.60668945 313.01602173]
[149.82684326 320.27401733]
[160.82612610 330.59228516]
[168.91308594 343.32223511]
[173.57939148 357.66366577]
[174.53170776 372.71502686]
[171.71017456 387.53021240]
[165.29214478 401.17791748]
[155.68107605 412.80023193]
[143.48110962 421.66656494]
[129.45916748 427.21957397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[28 43]
[29 42]
[30 41]
[31 40]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[62 128]
[63 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
