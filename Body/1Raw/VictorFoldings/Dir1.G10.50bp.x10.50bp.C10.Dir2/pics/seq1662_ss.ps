%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGGAUUUAGGGGGGGGGGGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUxxxxxxxxxxGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGCCCCCCCCCCAGGUGGAUUAA\
) } def
/len { sequence length } bind def

/coor [
[101.86613464 531.40832520]
[87.30627441 527.50012207]
[74.10513306 520.22052002]
[63.03020096 509.99261475]
[54.72536469 497.41116333]
[49.67345047 483.20758057]
[48.16817474 468.20767212]
[50.29705048 453.28347778]
[55.93630981 439.30270386]
[64.75809479 427.07815552]
[76.24951172 417.32055664]
[89.74246979 410.59719849]
[104.45250702 407.29898071]
[104.76048279 392.30215454]
[105.06845856 377.30529785]
[105.37643433 362.30847168]
[105.68441772 347.31161499]
[105.99239349 332.31478882]
[106.30036926 317.31796265]
[106.60834503 302.32110596]
[106.91632843 287.32427979]
[107.22430420 272.32742310]
[107.53227997 257.33059692]
[107.84025574 242.33375549]
[105.93323517 240.19967651]
[104.78381348 237.15861511]
[104.75056458 233.50544739]
[106.07493591 229.66232300]
[108.83949280 226.13288879]
[110.37678528 211.21188354]
[111.91407776 196.29086304]
[110.99066162 181.31930542]
[107.63140869 166.70030212]
[104.27214813 152.08129883]
[100.91288757 137.46229553]
[90.52183533 126.79106140]
[94.97205353 111.60862732]
[91.16419220 97.10000610]
[86.91134644 82.71552277]
[82.65850067 68.33103943]
[78.40565491 53.94655991]
[74.15280914 39.56208038]
[69.89996338 25.17759895]
[64.68236542 39.24090958]
[53.61209106 49.36262131]
[39.13886642 53.30289841]
[24.46546936 50.18980408]
[12.83896351 40.71223068]
[6.83217669 26.96746826]
[7.77434587 11.99708652]
[15.45697975 -0.88612527]
[28.17999268 -8.83124733]
[43.12791443 -10.08010769]
[56.99292374 -4.35634613]
[66.70816803 7.07604980]
[65.78475189 -7.89550018]
[64.86134338 -22.86705017]
[63.93792725 -37.83860016]
[61.32060242 -41.47855377]
[60.15512848 -45.37281036]
[60.33832550 -49.02153397]
[61.61163330 -52.01284027]
[63.60466003 -54.06682968]
[63.91263962 -69.06366730]
[64.22061920 -84.06050873]
[64.52859497 -99.05734253]
[61.56179810 -107.76331329]
[65.00000763 -114.35807800]
[65.61582947 -129.34542847]
[51.58706665 -135.08734131]
[40.37028122 -145.28340149]
[33.31995010 -158.70236206]
[31.28743935 -173.72384644]
[34.51818466 -188.53390503]
[42.62205505 -201.34417725]
[54.62047195 -210.60775757]
[69.06456757 -215.20600891]
[84.21014404 -214.58367920]
[98.22830200 -208.81591797]
[109.42628479 -198.59921265]
[116.45187378 -185.16728210]
[118.45669556 -170.14208984]
[115.19866180 -155.33799744]
[107.07119751 -142.54267883]
[95.05572510 -133.30123901]
[80.60318756 -128.72959900]
[79.98735809 -113.74224854]
[79.52543640 -98.74936676]
[79.21745300 -83.75252533]
[78.90947723 -68.75569153]
[78.60150146 -53.75885010]
[78.90947723 -38.76201248]
[79.83289337 -23.79046440]
[80.75630188 -8.81891346]
[81.67971802 6.15263605]
[84.28443909 20.92475319]
[88.53728485 35.30923462]
[92.79013062 49.69371414]
[97.04298401 64.07819366]
[101.29582977 78.46267700]
[105.54867554 92.84716034]
[108.70658112 95.17905426]
[110.79710388 98.91287994]
[111.20886993 103.52873230]
[109.59105682 108.24937439]
[120.22238922 119.96625519]
[115.53189850 134.10302734]
[118.89115143 148.72204590]
[122.25041199 163.34104919]
[125.60967255 177.96005249]
[130.58451843 163.80905151]
[140.02578735 152.15304565]
[152.83517456 144.34794617]
[167.52259827 141.30171204]
[182.37950134 143.36869812]
[195.67759705 150.30847168]
[205.86996460 161.31373596]
[211.77091980 175.10426331]
[212.69404602 190.07583618]
[208.53192139 204.48683167]
[199.76875305 216.66084290]
[187.42391968 225.18170166]
[172.93348694 229.05819702]
[157.98307800 227.83937073]
[144.31187439 221.66702271]
[133.51019287 211.25914001]
[126.83509827 197.82815552]
[125.29780579 212.74917603]
[123.76051331 227.67018127]
[122.83709717 242.64173889]
[122.52912140 257.63858032]
[122.22113800 272.63540649]
[121.91316223 287.63226318]
[121.60518646 302.62908936]
[121.29721069 317.62591553]
[120.98922729 332.62277222]
[120.68125153 347.61959839]
[120.37327576 362.61645508]
[120.06529999 377.61328125]
[119.75731659 392.61010742]
[119.44934082 407.60696411]
[134.01156616 411.50631714]
[147.21711731 418.77795410]
[158.29824829 428.99911499]
[166.61071777 441.57553101]
[171.67123413 455.77606201]
[173.18560791 470.77505493]
[171.06578064 485.70053101]
[165.43499756 499.68472290]
[156.62063599 511.91461182]
[145.13513184 521.67919922]
[131.64625549 528.41070557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 130]
[29 129]
[30 128]
[31 127]
[32 110]
[33 109]
[34 108]
[35 107]
[37 105]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[55 95]
[56 94]
[57 93]
[58 92]
[63 91]
[64 90]
[65 89]
[66 88]
[68 87]
[69 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
