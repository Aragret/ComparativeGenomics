%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAACCCUUGGGGGGGGGGCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUxxxxxxxxxxUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCCCCCCCCCCCUACACCCCUU\
) } def
/len { sequence length } bind def

/coor [
[73.00685883 369.86822510]
[60.67375183 361.21710205]
[50.57530212 350.03814697]
[43.21804810 336.89208984]
[38.97102737 322.43835449]
[38.04727173 307.40191650]
[40.49311066 292.53701782]
[46.18586349 278.58923340]
[54.83998489 266.25823975]
[66.02138519 256.16247559]
[79.16921997 248.80842590]
[93.62398529 244.56491089]
[92.70056915 229.59335327]
[91.77716064 214.62181091]
[90.85374451 199.65025330]
[89.93032837 184.67871094]
[89.00691986 169.70715332]
[88.08350372 154.73561096]
[87.16008759 139.76405334]
[73.94490814 132.66764832]
[60.95452499 140.16764832]
[47.96414566 147.66764832]
[34.97376251 155.16764832]
[27.24724770 169.63253784]
[10.85033226 169.90312195]
[2.65075803 155.70103455]
[11.08354473 141.63618469]
[27.47376251 142.17727661]
[40.46414566 134.67727661]
[53.45452499 127.17726898]
[66.44490814 119.67726898]
[64.34810638 94.62458038]
[77.57881927 75.50028992]
[70.21257782 62.43359756]
[62.84634018 49.36690521]
[58.24197388 46.65488815]
[55.45684052 42.81449127]
[54.61468887 38.74504471]
[55.45729828 35.26119232]
[48.90942764 21.76581001]
[42.36155701 8.27042484]
[35.81368637 -5.22495890]
[29.51656342 8.38923454]
[15.50377941 13.74104786]
[1.73449326 7.79069042]
[-3.97044301 -6.08207798]
[1.62933278 -19.99762726]
[15.35318947 -26.05202675]
[29.40665245 -20.80589294]
[24.56683731 -35.00364685]
[19.72702026 -49.20140076]
[14.88720417 -63.39915085]
[10.04738808 -77.59690094]
[-4.87018585 -75.60887909]
[-19.88894653 -76.56963348]
[-34.43161392 -80.44223785]
[-47.93920517 -87.07783508]
[-59.89252853 -96.22138214]
[-69.83212280 -107.52140808]
[-77.37594604 -120.54357910]
[-82.23402405 -134.78736877]
[-84.21963501 -149.70526123]
[-83.25644684 -164.72386169]
[-79.38149261 -179.26589966]
[-72.74370575 -192.77241516]
[-63.59823227 -204.72425842]
[-52.29659271 -214.66203308]
[-39.27320099 -222.20375061]
[-25.02863312 -227.05952454]
[-10.11041641 -229.04270935]
[4.90803242 -228.07708740]
[19.44944572 -224.19978333]
[32.95488739 -217.55981445]
[44.90525055 -208.41239929]
[54.84119034 -197.10916138]
[62.38079453 -184.08454895]
[67.23426056 -169.83918762]
[69.21504211 -154.92065430]
[68.24699402 -139.90235901]
[64.36733246 -125.36157227]
[57.72517395 -111.85720825]
[48.57582855 -99.90832520]
[37.27097321 -89.97422028]
[24.24514008 -82.43672180]
[29.08495712 -68.23896790]
[33.92477417 -54.04121399]
[38.76458740 -39.84346390]
[43.60440445 -25.64570999]
[49.30907059 -11.77283001]
[55.85694122 1.72255445]
[62.40481186 15.21793842]
[68.95268250 28.71332169]
[75.91304016 42.00066376]
[83.27927399 55.06735992]
[90.64551544 68.13405609]
[101.12932587 66.80859375]
[111.49879456 68.84357452]
[120.70407104 74.03297424]
[127.81317902 81.85139465]
[132.10635376 91.50725555]
[147.09924316 91.04532623]
[162.09213257 90.58340454]
[177.08502197 90.12147522]
[180.69664001 75.46341705]
[188.13005066 62.32389450]
[198.83361816 51.67794418]
[212.01306152 44.31556702]
[226.69039917 40.78310394]
[241.77647400 41.34268188]
[256.15179443 45.95278168]
[268.74960327 54.27130127]
[278.63507080 65.68095398]
[285.07461548 79.33506012]
[287.59042358 94.22039795]
[285.99575806 109.23238373]
[280.40896606 123.25701904]
[271.24462891 135.25358582]
[259.18280029 144.33186340]
[245.11856079 149.81817627]
[230.09556580 151.30540466]
[215.22859192 148.68319702]
[201.62091064 142.14611816]
[190.28227234 132.17927551]
[182.05407715 119.52228546]
[177.54693604 105.11436462]
[162.55406189 105.57628632]
[147.56117249 106.03821564]
[132.56828308 106.50013733]
[128.22898865 120.87127686]
[117.56077576 132.57048035]
[102.13163757 138.84063721]
[103.05505371 153.81219482]
[103.97846222 168.78373718]
[104.90187836 183.75529480]
[105.82529449 198.72683716]
[106.74870300 213.69839478]
[107.67211914 228.66993713]
[108.59553528 243.64149475]
[123.46221924 246.07652283]
[137.41412354 251.75914001]
[149.75143433 260.40429688]
[159.85528564 271.57833862]
[167.21891785 284.72082520]
[171.47293091 299.17251587]
[172.40397644 314.20849609]
[169.96534729 329.07458496]
[164.27935791 343.02511597]
[155.63121033 355.36032104]
[144.45469666 365.46148682]
[131.31044006 372.82192993]
[116.85772705 377.07244873]
[101.82151794 377.99984741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 31]
[21 30]
[22 29]
[23 28]
[33 95]
[34 94]
[35 93]
[39 92]
[40 91]
[41 90]
[42 89]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[100 128]
[101 127]
[102 126]
[103 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
