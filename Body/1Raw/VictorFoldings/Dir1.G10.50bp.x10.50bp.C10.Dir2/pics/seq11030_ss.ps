%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCUCCCGGGGGGGGGGUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCxxxxxxxxxxCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCACCCCCCCCCCUCGACCUCCC\
) } def
/len { sequence length } bind def

/coor [
[87.05160522 494.49578857]
[73.20566559 488.47976685]
[61.49700165 478.95034790]
[52.79447937 466.61468506]
[47.74387741 452.38815308]
[46.71998596 437.32647705]
[49.79878235 422.54733276]
[56.75180435 409.14739990]
[67.06308746 398.12106323]
[79.96746826 390.28656006]
[94.50735474 386.22525024]
[94.50735474 371.22525024]
[94.50735474 356.22525024]
[94.50735474 341.22525024]
[94.50735474 326.22525024]
[94.50735474 311.22525024]
[94.50735474 296.22525024]
[94.50735474 281.22525024]
[94.50735474 266.22525024]
[94.50735474 251.22525024]
[94.50735474 236.22525024]
[79.80007935 230.40452576]
[68.41573334 219.36825562]
[62.11075974 204.77815247]
[61.87361908 188.84733582]
[67.76991272 174.00457764]
[78.92791748 162.52404785]
[93.66732025 156.17689514]
[93.35526276 141.18013000]
[93.04320526 126.18338013]
[80.58342743 121.45063019]
[71.18894958 110.81686401]
[67.60616302 96.19863129]
[52.64591217 97.28993988]
[37.28865051 104.47261810]
[26.13536263 91.70388794]
[35.31754684 77.45173645]
[51.55459976 82.32969666]
[66.51484680 81.23838043]
[76.26250458 69.83736420]
[75.01562500 54.88927460]
[73.76875305 39.94118881]
[72.52188110 24.99310112]
[71.27500153 10.04501438]
[50.55154419 0.55515140]
[43.81307602 -26.07941628]
[31.73308563 -34.97176743]
[19.65309715 -43.86411667]
[7.57310963 -52.75646591]
[-4.50687885 -61.64881516]
[-20.52000237 -60.66932297]
[-31.16242981 -72.67425537]
[-28.27019882 -88.45444489]
[-14.06198215 -95.90469360]
[0.56289119 -89.30979919]
[4.38547087 -73.72880554]
[16.46545982 -64.83645630]
[28.54544830 -55.94410324]
[40.62543488 -47.05175400]
[52.70542526 -38.15940475]
[59.81881332 -40.53631210]
[55.06521988 -54.76316452]
[69.29214478 -59.51654053]
[74.04559326 -45.29012680]
[81.15898132 -47.66703415]
[85.46656799 -62.03521729]
[89.77415466 -76.40340424]
[94.08173370 -90.77158356]
[80.87104034 -97.99455261]
[69.45103455 -107.80664062]
[60.32093430 -119.77890015]
[53.87988663 -133.38796997]
[50.40945435 -148.03889465]
[50.06135559 -163.09121704]
[52.85080338 -177.88691711]
[58.65586090 -191.77917480]
[67.22275543 -204.16070557]
[78.17697144 -214.49021912]
[91.03964233 -222.31614685]
[105.24847412 -227.29640198]
[120.18230438 -229.21325684]
[135.18830872 -227.98289490]
[149.61045837 -223.65913391]
[162.81831360 -216.43096924]
[174.23446655 -206.61439514]
[183.35984802 -194.63853455]
[189.79554749 -181.02694702]
[193.26020813 -166.37464905]
[193.60238647 -151.32218933]
[190.80711365 -136.52758789]
[184.99659729 -122.63760376]
[176.42483521 -110.25946045]
[165.46655273 -99.93425751]
[152.60079956 -92.11338043]
[138.39001465 -87.13871765]
[123.45542908 -85.22774506]
[108.44992065 -86.46400452]
[104.14233398 -72.09581757]
[99.83474731 -57.72763443]
[95.52716827 -43.35945129]
[107.17294312 -22.18463326]
[101.97688293 -1.37022543]
[86.22309113 8.79813957]
[87.46996307 23.74622726]
[88.71684265 38.69431305]
[89.96371460 53.64239883]
[91.21058655 68.59048462]
[114.40488434 73.85121918]
[125.95355988 92.22959900]
[140.95274353 92.07356262]
[153.16035461 81.66423798]
[168.88194275 84.85975647]
[176.05725098 99.20877838]
[169.18200684 113.70396423]
[153.53030396 117.22585297]
[141.10879517 107.07275391]
[126.10959625 107.22879028]
[122.31033325 115.36930084]
[116.05796814 121.81990814]
[108.03996277 125.87133026]
[108.35202026 140.86808777]
[108.66407013 155.86483765]
[122.10848999 160.66572571]
[133.07682800 169.75654602]
[140.25900269 182.02487183]
[142.80627441 195.98040771]
[140.43151855 209.93598938]
[133.44136047 222.21153259]
[122.69683838 231.33633423]
[109.50735474 236.22525024]
[109.50735474 251.22525024]
[109.50735474 266.22525024]
[109.50735474 281.22525024]
[109.50735474 296.22525024]
[109.50735474 311.22525024]
[109.50735474 326.22525024]
[109.50735474 341.22525024]
[109.50735474 356.22525024]
[109.50735474 371.22525024]
[109.50735474 386.22525024]
[124.04724121 390.28656006]
[136.95162964 398.12106323]
[147.26290894 409.14739990]
[154.21592712 422.54733276]
[157.29472351 437.32647705]
[156.27084351 452.38815308]
[151.22023010 466.61468506]
[142.51771545 478.95034790]
[130.80905151 488.47976685]
[116.96311188 494.49578857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 122]
[29 121]
[30 120]
[33 39]
[34 38]
[40 107]
[41 106]
[42 105]
[43 104]
[44 103]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[65 100]
[66 99]
[67 98]
[68 97]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
