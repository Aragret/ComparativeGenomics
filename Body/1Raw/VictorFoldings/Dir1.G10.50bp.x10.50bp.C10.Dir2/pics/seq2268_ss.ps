%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUUUAACUGUUGGGGGGGGGGAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAxxxxxxxxxxCAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCCCCCCCCCCCUUAAUUUAACUAUU\
) } def
/len { sequence length } bind def

/coor [
[76.28869629 419.10281372]
[62.27396011 413.61886597]
[49.59853745 405.50595093]
[38.74963760 395.07580566]
[30.14426041 382.72940063]
[24.11317825 368.94128418]
[20.88820839 354.24142456]
[20.59330940 339.19485474]
[23.23981667 324.37991333]
[28.72600555 310.36605835]
[36.84099960 297.69195557]
[47.27288437 286.84475708]
[59.62068558 278.24136353]
[73.40978241 272.21252441]
[88.11016083 268.98992920]
[87.81380463 253.99285889]
[87.51744843 238.99578857]
[87.22108459 223.99871826]
[86.92472839 209.00164795]
[86.62837219 194.00457764]
[86.33201599 179.00749207]
[86.03565979 164.01042175]
[85.73930359 149.01335144]
[85.44294739 134.01628113]
[85.14658356 119.01921082]
[74.17964935 108.78562164]
[59.19794846 109.52626038]
[44.21624374 110.26690674]
[29.23453903 111.00754547]
[14.25283527 111.74818420]
[-0.72886908 112.48882294]
[-15.71057320 113.22946167]
[-30.69227600 113.97010803]
[-45.67398071 114.71074677]
[-60.65568542 115.45138550]
[-71.07849121 127.33164978]
[-86.85437012 128.27885437]
[-98.62377167 117.73102570]
[-99.40412903 101.94601440]
[-88.73246002 90.28878021]
[-72.94007874 89.67536163]
[-61.39632416 100.46968079]
[-46.41461945 99.72904205]
[-31.43291664 98.98840332]
[-16.45121384 98.24776459]
[-1.46950948 97.50711823]
[13.51219463 96.76647949]
[28.49389839 96.02584076]
[43.47560120 95.28520203]
[58.45730591 94.54455566]
[73.43901062 93.80391693]
[76.25771332 86.85374451]
[67.03812408 75.02162170]
[81.89513397 72.95339966]
[84.71383667 66.00322723]
[74.48024750 55.03629303]
[64.24666595 44.06935883]
[48.44514084 43.77354813]
[37.54127502 32.33321762]
[38.00412750 16.53570747]
[49.55910492 5.75340271]
[65.35083771 6.38325310]
[76.01037598 18.05157852]
[75.21360016 33.83576965]
[85.44718933 44.80270767]
[95.68077087 55.76964188]
[110.66247559 55.02900314]
[119.76448059 43.10618591]
[128.86648560 31.18336868]
[114.88623047 36.61959076]
[99.90206909 37.30877686]
[85.48182678 33.17882156]
[73.13430786 24.66184616]
[64.15146637 12.64899731]
[59.47318649 -1.60279882]
[59.58896255 -16.60235214]
[64.48668671 -30.78023338]
[73.65390015 -42.65298462]
[86.13141632 -50.97834015]
[100.61369324 -54.88520432]
[115.58543396 -53.96479416]
[129.48010254 -48.31341171]
[140.84388733 -38.52237320]
[148.48776245 -25.61613274]
[151.61195374 -10.94509220]
[149.88957214 3.95569205]
[143.49984741 17.52852249]
[156.02311707 9.27213573]
[168.54637146 1.01574957]
[181.06964111 -7.24063683]
[188.90040588 -23.87957191]
[206.42179871 -24.29478645]
[218.77949524 -32.79698563]
[216.52745056 -47.85320282]
[221.01751709 -62.33512878]
[231.30798340 -73.38622284]
[245.31855774 -78.85107422]
[260.25088501 -77.69564819]
[273.14733887 -70.20252991]
[285.50503540 -78.70472717]
[297.86273193 -87.20692444]
[302.18075562 -102.65795898]
[317.00869751 -108.78263092]
[330.97183228 -100.88262939]
[333.35885620 -85.01815033]
[322.33862305 -73.35906219]
[306.36492920 -74.84922791]
[294.00723267 -66.34703064]
[281.64953613 -57.84483337]
[284.03784180 -43.12200928]
[279.77944946 -28.76319885]
[269.66760254 -17.63162422]
[255.66835022 -11.97118473]
[240.53822327 -12.95425224]
[227.28169250 -20.43929100]
[214.92399597 -11.93709183]
[212.40177917 -0.07234915]
[202.12983704 7.10557556]
[189.32601929 5.28262520]
[176.80276489 13.53901100]
[164.27949524 21.79539680]
[151.75624084 30.05178452]
[140.78929138 40.28536987]
[131.68730164 52.20818710]
[122.58529663 64.13100433]
[130.47593689 74.98229980]
[134.05752563 86.95235443]
[133.48034668 98.51378632]
[129.38943481 108.35998535]
[122.79836273 115.55147552]
[114.92448425 119.60505676]
[107.00866699 120.51733398]
[100.14366150 118.72285461]
[100.44001770 133.71992493]
[100.73637390 148.71699524]
[101.03273010 163.71406555]
[101.32908630 178.71113586]
[101.62544250 193.70820618]
[101.92180634 208.70529175]
[102.21816254 223.70236206]
[102.51451874 238.69943237]
[102.81087494 253.69650269]
[103.10723114 268.69357300]
[117.92344666 271.33288574]
[131.93995667 276.81225586]
[144.61801147 284.92111206]
[155.47029114 295.34771729]
[164.07965088 307.69134521]
[170.11520386 321.47750854]
[173.34492493 336.17633057]
[173.64469910 351.22280884]
[171.00299072 366.03857422]
[165.52133179 380.05419922]
[157.41044617 392.73095703]
[146.98207092 403.58154297]
[134.63705444 412.18890381]
[120.84991455 418.22222900]
[106.15058136 421.44958496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[55 66]
[56 65]
[57 64]
[67 125]
[68 124]
[69 123]
[87 122]
[88 121]
[89 120]
[90 119]
[92 116]
[93 115]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
