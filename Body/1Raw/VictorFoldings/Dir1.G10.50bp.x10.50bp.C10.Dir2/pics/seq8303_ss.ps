%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACAACCGGGGGGGGGGGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGxxxxxxxxxxGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUACCCCCCCCCCAUCAACACCC\
) } def
/len { sequence length } bind def

/coor [
[50.80266190 364.61660767]
[36.95672226 358.60055542]
[25.24806213 349.07116699]
[16.54553795 336.73547363]
[11.49493599 322.50897217]
[10.47104454 307.44729614]
[13.54984283 292.66812134]
[20.50286484 279.26818848]
[30.81414986 268.24185181]
[43.71852875 260.40734863]
[58.25841904 256.34603882]
[58.25841904 241.34603882]
[58.25841904 226.34603882]
[58.25841904 211.34603882]
[58.25841904 196.34603882]
[58.25841904 181.34603882]
[58.25841904 166.34603882]
[58.25841904 151.34603882]
[58.25841904 136.34603882]
[58.25841904 121.34603882]
[47.06265259 111.36331177]
[32.16074753 113.07600403]
[19.33426666 122.33839417]
[5.80678988 116.10488892]
[-9.09511185 117.81758118]
[-21.92159462 127.07997131]
[-35.44906998 120.84646606]
[-50.35097504 122.55915070]
[-65.25287628 124.27184296]
[-70.71224976 138.57057190]
[-82.19889832 148.68568420]
[-97.07328796 152.29278564]
[-111.91738892 148.56298828]
[-123.32012939 138.35337830]
[-128.66123962 124.01005554]
[-126.71339417 108.82900238]
[-117.92417145 96.29871368]
[-104.31327820 89.29855347]
[-89.00839233 89.43712616]
[-75.52647400 96.68257141]
[-66.96556854 109.36994171]
[-52.06366348 107.65724945]
[-37.16176224 105.94455719]
[-25.40116310 96.80467224]
[-10.80780220 102.91567230]
[4.09410048 101.20298767]
[15.85469818 92.06309509]
[30.44805908 98.17410278]
[45.34996033 96.46141052]
[31.45120430 90.82008362]
[16.51502419 89.43788147]
[5.11913776 79.68422699]
[1.44785953 65.14044189]
[6.84919882 51.14667130]
[19.33990669 42.84111786]
[34.33367538 43.27338791]
[46.32513428 52.28476715]
[50.91128922 66.56613922]
[59.43070602 78.91197205]
[57.87312317 63.99306107]
[56.31554413 49.07415009]
[54.75796127 34.15523911]
[53.20038223 19.23632622]
[51.64279938 4.31741381]
[50.08522034 -10.60149860]
[35.43188477 -14.55677128]
[23.19917870 -23.54150200]
[15.04147911 -36.34057999]
[12.06204605 -51.22303391]
[14.66382217 -66.17613220]
[22.49493980 -79.17759705]
[34.49630356 -88.46907806]
[49.04483032 -92.79399109]
[64.17295074 -91.56741333]
[77.83470154 -84.95523834]
[88.18245697 -73.85170746]
[93.81676483 -59.75848007]
[93.97562408 -44.58155060]
[88.63755798 -30.37347221]
[78.52449036 -19.05577469]
[65.00412750 -12.15907955]
[66.56171417 2.75983286]
[68.11929321 17.67874527]
[69.67687225 32.59765625]
[71.23445129 47.51657104]
[72.79203796 62.43548203]
[74.34961700 77.35439301]
[85.96669769 70.55959320]
[98.69532013 69.01596832]
[110.37770844 72.48286438]
[119.22427368 79.90945435]
[124.08725739 89.68225861]
[138.98916626 87.96956635]
[153.89106750 86.25687408]
[166.71754456 76.99448395]
[180.24502563 83.22798920]
[195.14692688 81.51530457]
[210.04882812 79.80261230]
[224.54127502 68.49117279]
[240.36373901 76.01778412]
[255.22677612 73.99544525]
[270.08984375 71.97311401]
[284.85589600 69.33425140]
[299.49938965 66.08341980]
[314.14288330 62.83259583]
[323.93713379 50.12621307]
[339.97973633 50.00544739]
[349.96417236 62.56293869]
[346.23123169 78.16565704]
[331.64453125 84.84452820]
[317.39370728 77.47609711]
[302.75021362 80.72692108]
[288.10671997 83.97775269]
[286.48455811 86.33908844]
[283.79907227 88.17817688]
[280.25265503 89.07518768]
[276.19973755 88.69446564]
[272.11215210 86.83615875]
[257.24911499 88.85849762]
[242.38607788 90.88082886]
[234.78248596 100.34088898]
[222.36993408 102.11500549]
[211.76152039 94.70451355]
[196.85961914 96.41720581]
[181.95770264 98.12989807]
[170.19711304 107.26978302]
[155.60374451 101.15878296]
[140.70184326 102.87146759]
[125.79994965 104.58415985]
[107.44218445 129.27922058]
[73.25841522 121.34603882]
[73.25841522 136.34603882]
[73.25841522 151.34603882]
[73.25841522 166.34603882]
[73.25841522 181.34603882]
[73.25841522 196.34603882]
[73.25841522 211.34603882]
[73.25841522 226.34603882]
[73.25841522 241.34603882]
[73.25841522 256.34603882]
[87.79830170 260.40734863]
[100.70268250 268.24185181]
[111.01396942 279.26818848]
[117.96698761 292.66812134]
[121.04579163 307.44729614]
[120.02189636 322.50897217]
[114.97129822 336.73547363]
[106.26877594 349.07116699]
[94.56011200 358.60055542]
[80.71417236 364.61660767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 49]
[22 48]
[24 46]
[25 45]
[27 43]
[28 42]
[29 41]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[92 129]
[93 128]
[94 127]
[96 125]
[97 124]
[98 123]
[100 120]
[101 119]
[102 118]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
