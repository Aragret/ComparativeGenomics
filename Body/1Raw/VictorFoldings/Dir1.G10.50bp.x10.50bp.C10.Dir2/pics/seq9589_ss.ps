%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCCUCCCGGGGGGGGGGUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCxxxxxxxxxxAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUCCCCCCCCCCAUAACCUCCC\
) } def
/len { sequence length } bind def

/coor [
[75.98349762 410.59017944]
[62.13756180 404.57415771]
[50.42890167 395.04473877]
[41.72637558 382.70907593]
[36.67577362 368.48254395]
[35.65188217 353.42086792]
[38.73068237 338.64169312]
[45.68370438 325.24179077]
[55.99498749 314.21545410]
[68.89936829 306.38095093]
[83.43925476 302.31961060]
[83.43925476 287.31961060]
[83.43925476 272.31961060]
[83.43925476 257.31961060]
[83.43925476 242.31962585]
[83.43925476 227.31962585]
[83.43925476 212.31962585]
[83.43925476 197.31962585]
[83.43925476 182.31962585]
[83.43925476 167.31962585]
[81.48558807 165.22425842]
[80.27221680 162.20405579]
[80.16510773 158.54748535]
[81.41513824 154.67341614]
[84.11514282 151.08573914]
[85.36202240 136.13764954]
[86.60889435 121.18955994]
[80.26885986 108.03318787]
[82.93652344 95.93402100]
[90.95283508 89.60765839]
[85.17655945 75.76444244]
[79.40028381 61.92122269]
[65.05870819 55.84199905]
[59.39795303 41.72072220]
[65.28194427 28.08568764]
[59.50567245 14.24246883]
[53.72940063 0.39925134]
[47.95312881 -13.44396591]
[42.17685699 -27.28718376]
[27.74974632 -23.12109375]
[12.94177437 -20.62675858]
[-2.05401087 -19.83669853]
[-17.04210663 -20.76121330]
[-31.82711411 -23.38825035]
[-46.21627808 -27.68356133]
[-60.02201080 -33.59114456]
[-73.06432343 -41.03398895]
[-85.17317963 -49.91505432]
[-96.19071960 -60.11856461]
[-105.97330475 -71.51148987]
[-114.39339447 -83.94530487]
[-121.34123230 -97.25791168]
[-126.72621918 -111.27574158]
[-130.47816467 -125.81605530]
[-132.54814148 -140.68928528]
[-132.90917969 -155.70152283]
[-131.55656433 -170.65707397]
[-128.50791931 -185.36093140]
[-123.80300903 -199.62141418]
[-117.50315094 -213.25262451]
[-109.69049835 -226.07682800]
[-100.46688843 -237.92683411]
[-89.95258331 -248.64817810]
[-78.28464508 -258.10104370]
[-65.61519623 -266.16226196]
[-52.10940933 -272.72665405]
[-37.94335556 -277.70870972]
[-23.30172539 -281.04342651]
[-8.37539864 -282.68737793]
[6.64102888 -282.61907959]
[21.55178642 -280.83947754]
[36.16248322 -277.37170410]
[50.28263855 -272.26104736]
[63.72816849 -265.57406616]
[76.32377625 -257.39797974]
[87.90526581 -247.83938599]
[98.32163239 -237.02285767]
[107.43708801 -225.08946228]
[115.13278961 -212.19473267]
[121.30841064 -198.50680542]
[125.88343811 -184.20411682]
[128.79821777 -169.47312927]
[130.01477051 -154.50590515]
[129.51722717 -139.49757385]
[127.31205750 -124.64378357]
[123.42803192 -110.13819122]
[117.91577911 -96.16991425]
[110.84716034 -82.92105103]
[102.31433105 -70.56432343]
[92.42854309 -59.26083755]
[81.31865692 -49.15795135]
[69.12953186 -40.38737488]
[56.02007294 -33.06345749]
[61.79634476 -19.22023964]
[67.57261658 -5.37702131]
[73.34889221 8.46619701]
[79.12516022 22.30941391]
[92.95552063 27.71836662]
[99.01068878 41.67507172]
[93.24350739 56.14495087]
[99.01977539 69.98816681]
[104.79605103 83.83139038]
[117.40718079 91.95292664]
[132.39987183 91.48488617]
[147.39256287 91.01684570]
[162.38526917 90.54880524]
[173.17303467 79.31217194]
[188.38442993 79.05108643]
[199.03034973 89.40481567]
[214.02305603 88.93677521]
[227.66973877 79.84282684]
[242.24670410 87.35577393]
[242.75839233 103.74693298]
[228.67845154 112.15449524]
[214.49108887 103.92946625]
[199.49839783 104.39751434]
[189.51901245 115.39512634]
[174.32095337 116.08335876]
[162.85330200 105.54149628]
[147.86061096 106.00954437]
[132.86791992 106.47758484]
[117.87522125 106.94562531]
[132.17909241 111.46215057]
[138.49212646 125.06897736]
[132.70417786 138.90731812]
[118.58351135 143.96765137]
[105.32347107 136.95542908]
[101.55698395 122.43643188]
[100.31010437 137.38452148]
[99.06323242 152.33261108]
[98.43925476 167.31962585]
[98.43925476 182.31962585]
[98.43925476 197.31962585]
[98.43925476 212.31962585]
[98.43925476 227.31962585]
[98.43925476 242.31962585]
[98.43925476 257.31961060]
[98.43925476 272.31961060]
[98.43925476 287.31961060]
[98.43925476 302.31961060]
[112.97914124 306.38095093]
[125.88352203 314.21545410]
[136.19480896 325.24179077]
[143.14782715 338.64169312]
[146.22662354 353.42086792]
[145.20274353 368.48254395]
[140.15213013 382.70907593]
[131.44961548 395.04473877]
[119.74095154 404.57415771]
[105.89501190 410.59017944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[30 102]
[31 101]
[32 100]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[103 122]
[104 121]
[105 120]
[106 119]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
