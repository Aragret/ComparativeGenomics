%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAAACUGGGGGGGGGGGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGxxxxxxxxxxUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACCU\
) } def
/len { sequence length } bind def

/coor [
[86.54058838 372.19403076]
[72.69464874 366.17800903]
[60.98598862 356.64859009]
[52.28346252 344.31292725]
[47.23286057 330.08639526]
[46.20896912 315.02471924]
[49.28776932 300.24557495]
[56.24079132 286.84564209]
[66.55207825 275.81930542]
[79.45645905 267.98480225]
[93.99634552 263.92349243]
[93.99634552 248.92347717]
[93.99634552 233.92347717]
[93.99634552 218.92347717]
[93.99634552 203.92347717]
[93.99634552 188.92347717]
[93.99634552 173.92347717]
[93.99634552 158.92347717]
[93.99634552 143.92347717]
[93.99634552 128.92347717]
[93.99634552 113.92347717]
[89.45146179 110.96048737]
[86.22768402 106.57485199]
[84.74640656 101.31896210]
[70.72969818 95.97745514]
[56.71298218 90.63594055]
[42.69626999 85.29442596]
[28.67955589 79.95291901]
[14.66284370 74.61140442]
[0.37996283 80.82727814]
[-13.75888538 75.21054840]
[-19.59675026 61.55569839]
[-28.79633713 61.41624832]
[-33.84758377 55.95450974]
[-47.75014114 50.32255554]
[-62.15924454 56.23994446]
[-76.17818451 50.33029175]
[-81.73071289 36.55694962]
[-95.63327026 30.92499161]
[-109.53582001 25.29303551]
[-120.47103882 35.89213943]
[-134.77412415 41.12105179]
[-149.96699524 40.07383347]
[-163.41738892 32.93191910]
[-172.79493713 20.93269348]
[-176.47492981 6.15509033]
[-173.81977844 -8.84057903]
[-165.28952026 -21.45622444]
[-152.36206055 -29.50611115]
[-137.27716064 -31.59554482]
[-122.64837646 -27.36251831]
[-111.01023102 -17.54043198]
[-104.37909698 -3.83102012]
[-103.90386963 11.39047909]
[-90.00131226 17.02243614]
[-76.09875488 22.65439224]
[-62.52566528 16.62887955]
[-48.34626770 22.14243698]
[-42.11818314 36.41999817]
[-28.21562767 42.05195618]
[-14.25523758 47.53898621]
[-0.81043780 41.23240662]
[13.48059464 46.44978714]
[20.00435638 60.59468842]
[34.02106857 65.93620300]
[48.03778076 71.27771759]
[62.05449677 76.61922455]
[76.07120514 81.96073914]
[90.08792114 87.30225372]
[77.67034912 78.88774872]
[70.34199524 65.79976654]
[69.65782928 50.81538010]
[75.76302338 37.11404419]
[87.36214447 27.60297775]
[101.99403381 24.30028534]
[116.55403137 27.90674973]
[127.95272064 37.65713120]
[133.77146912 51.48254776]
[132.77563477 66.44945526]
[125.17650604 79.38210297]
[112.58670044 87.53630829]
[126.71150970 82.48754883]
[140.83630371 77.43879700]
[154.96110535 72.39003754]
[152.01554871 57.65431595]
[151.24700928 42.64674377]
[152.67185974 27.68721199]
[156.25975037 13.09457970]
[161.93418884 -0.82010788]
[169.57424927 -13.76025867]
[179.01704407 -25.45005417]
[190.06134033 -35.64032364]
[202.47169495 -44.11386108]
[215.98359680 -50.69005203]
[230.30903625 -55.22872543]
[245.14266968 -57.63314056]
[260.16830444 -57.85204697]
[275.06570435 -55.88077545]
[289.51727295 -51.76134872]
[303.21502686 -45.58156586]
[315.86694336 -37.47315598]
[327.20339966 -27.60894585]
[336.98275757 -16.19919586]
[344.99652100 -3.48710060]
[351.07391357 10.25637722]
[355.08538818 24.73829651]
[356.94543457 39.64997101]
[356.61437988 54.67356491]
[354.09936523 69.48883820]
[349.45388794 83.78001404]
[342.77706909 97.24246979]
[334.21115112 109.58924866]
[323.93875122 120.55718231]
[312.17880249 129.91249084]
[299.18200684 137.45576477]
[285.22534180 143.02619934]
[270.60635376 146.50509644]
[255.63661194 147.81828308]
[240.63519287 146.93775940]
[225.92185974 143.88230896]
[211.81022644 138.71705627]
[198.60108948 131.55210876]
[186.57600403 122.54016113]
[175.99128723 111.87332153]
[167.07254028 99.77895355]
[160.00987244 86.51483917]
[145.88507080 91.56359863]
[131.76026917 96.61235046]
[117.63545990 101.66110992]
[108.99634552 113.92347717]
[108.99634552 128.92347717]
[108.99634552 143.92347717]
[108.99634552 158.92347717]
[108.99634552 173.92347717]
[108.99634552 188.92347717]
[108.99634552 203.92347717]
[108.99634552 218.92347717]
[108.99634552 233.92347717]
[108.99634552 248.92347717]
[108.99634552 263.92349243]
[123.53623199 267.98480225]
[136.44061279 275.81930542]
[146.75189209 286.84564209]
[153.70491028 300.24557495]
[156.78372192 315.02471924]
[155.75982666 330.08639526]
[150.70922852 344.31292725]
[142.00669861 356.64859009]
[130.29803467 366.17800903]
[116.45209503 372.19403076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[32 61]
[34 60]
[35 59]
[38 56]
[39 55]
[40 54]
[81 129]
[82 128]
[83 127]
[84 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
