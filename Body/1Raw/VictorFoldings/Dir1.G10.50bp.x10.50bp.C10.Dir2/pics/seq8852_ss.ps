%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCUCCUGGGGGGGGGGAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCxxxxxxxxxxAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCCCCCCCCCCCAGACCUCCU\
) } def
/len { sequence length } bind def

/coor [
[63.74217606 458.53936768]
[49.89623642 452.52334595]
[38.18757629 442.99392700]
[29.48505211 430.65826416]
[24.43445015 416.43173218]
[23.41055870 401.37005615]
[26.48935699 386.59088135]
[33.44237900 373.19094849]
[43.75366211 362.16461182]
[56.65804291 354.33010864]
[71.19792938 350.26879883]
[71.19792938 335.26879883]
[71.19792938 320.26879883]
[71.19792938 305.26879883]
[71.19792938 290.26879883]
[71.19792938 275.26879883]
[71.19792938 260.26879883]
[71.19792938 245.26879883]
[71.19792938 230.26879883]
[71.19792938 215.26879883]
[61.42852402 226.65118408]
[47.09933472 231.08677673]
[32.60781479 227.21432495]
[22.40122223 216.22225952]
[19.61183167 201.48390198]
[25.09567070 187.52226257]
[37.16981888 178.62197876]
[52.12887573 177.51446533]
[65.38209534 184.53956604]
[72.86242676 197.54217529]
[75.65475464 182.80436707]
[78.44707489 168.06655884]
[81.23940277 153.32875061]
[79.38242340 146.12477112]
[84.24616241 138.31478882]
[87.34449005 123.63826752]
[90.44281006 108.96174622]
[92.92792511 94.16903687]
[86.96905518 79.51289368]
[96.23079681 67.84801483]
[98.09840393 52.96473312]
[99.50070953 38.03042221]
[100.43634033 23.05963135]
[101.37197113 8.08884048]
[102.30759430 -6.88195086]
[103.24322510 -21.85274315]
[104.17885590 -36.82353210]
[94.14032745 -45.86154938]
[91.20339966 -58.84624481]
[96.22606659 -70.96429443]
[107.15774536 -77.85596466]
[108.40461731 -92.80405426]
[109.65149689 -107.75213623]
[94.95764160 -110.86565399]
[80.76990509 -115.79629517]
[67.31202698 -122.46629333]
[54.79627609 -130.77046204]
[43.42003632 -140.57781982]
[33.36272430 -151.73370361]
[24.78296471 -164.06216431]
[17.81606865 -177.36877441]
[12.57191658 -191.44364929]
[9.13321400 -206.06480408]
[7.55419493 -221.00167847]
[7.85976315 -236.01866150]
[10.04509926 -250.87892151]
[14.07573795 -265.34811401]
[19.88810921 -279.19799805]
[27.39054489 -292.21017456]
[36.46471786 -304.17941284]
[46.96751785 -314.91693115]
[58.73330307 -324.25341797]
[71.57650757 -332.04156494]
[85.29457092 -338.15856934]
[99.67114258 -342.50799561]
[114.47949219 -345.02117920]
[129.48605347 -345.65853882]
[144.45416260 -344.41000366]
[159.14775085 -341.29522705]
[173.33508301 -336.36340332]
[186.79238892 -329.69226074]
[199.30744934 -321.38705444]
[210.68286133 -311.57873535]
[220.73922729 -300.42199707]
[229.31796265 -288.09283447]
[236.28373718 -274.78564453]
[241.52670288 -260.71032715]
[244.96417236 -246.08886719]
[246.54193115 -231.15187073]
[246.23510742 -216.13490295]
[244.04850769 -201.27482605]
[240.01666260 -186.80598450]
[234.20312500 -172.95657349]
[226.69958496 -159.94502258]
[217.62440491 -147.97656250]
[207.12069702 -137.23991394]
[195.35414124 -127.90444183]
[182.51028442 -120.11737061]
[168.79170227 -114.00150299]
[154.41476440 -109.65330505]
[139.60620117 -107.14135742]
[124.59957886 -106.50526428]
[123.35270691 -91.55717468]
[122.10583496 -76.60909271]
[133.50119019 -64.28010559]
[132.46472168 -47.18596268]
[119.14964294 -35.88790512]
[118.21401978 -20.91711426]
[117.27838898 -5.94632244]
[116.34275818 9.02446938]
[115.40712738 23.99526024]
[114.47150421 38.96605301]
[116.57609558 41.87090683]
[117.34196472 45.95932007]
[116.21951294 50.57369614]
[112.98168945 54.83234406]
[111.11407471 69.71562195]
[117.20652771 83.30721283]
[107.81121063 96.03665161]
[109.53108215 98.63971710]
[110.31507874 101.94123077]
[109.89728546 105.58560181]
[108.15076447 109.12220764]
[105.11933136 112.06006622]
[102.02101135 126.73658752]
[98.92269135 141.41311646]
[95.97721100 156.12107849]
[93.18488312 170.85888672]
[90.39255524 185.59669495]
[87.60023499 200.33450317]
[86.19792938 215.26879883]
[86.19792938 230.26879883]
[86.19792938 245.26879883]
[86.19792938 260.26879883]
[86.19792938 275.26879883]
[86.19792938 290.26879883]
[86.19792938 305.26879883]
[86.19792938 320.26879883]
[86.19792938 335.26879883]
[86.19792938 350.26879883]
[100.73781586 354.33010864]
[113.64219666 362.16461182]
[123.95348358 373.19094849]
[130.90650940 386.59088135]
[133.98530579 401.37005615]
[132.96141052 416.43173218]
[127.91081238 430.65826416]
[119.20828247 442.99392700]
[107.49962616 452.52334595]
[93.65368652 458.53936768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 130]
[31 129]
[32 128]
[33 127]
[35 126]
[36 125]
[37 124]
[38 119]
[40 117]
[41 116]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[51 104]
[52 103]
[53 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
