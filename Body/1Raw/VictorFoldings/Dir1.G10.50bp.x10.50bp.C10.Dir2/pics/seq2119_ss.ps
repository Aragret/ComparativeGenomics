%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAGAAAUAGGGGGGGGGGACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCxxxxxxxxxxAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCCCCCCCCCCCAACUAAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[82.13022614 391.67739868]
[69.79711914 383.02627563]
[59.69866562 371.84732056]
[52.34141541 358.70126343]
[48.09439468 344.24752808]
[47.17063522 329.21109009]
[49.61647415 314.34619141]
[55.30922699 300.39840698]
[63.96334839 288.06738281]
[75.14475250 277.97164917]
[88.29257965 270.61758423]
[102.74735260 266.37408447]
[101.82393646 251.40252686]
[100.90052032 236.43096924]
[99.97711182 221.45942688]
[99.05369568 206.48786926]
[98.13027954 191.51632690]
[97.20687103 176.54476929]
[96.28345490 161.57322693]
[95.36003876 146.60166931]
[94.43663025 131.63012695]
[80.02685547 125.14933777]
[70.45134735 112.58144379]
[68.02774811 96.96836090]
[73.34265900 82.08905029]
[85.10967255 71.54487610]
[81.45096588 56.99792480]
[70.58130646 45.50179291]
[74.98056030 31.27169037]
[71.32185364 16.72473717]
[67.66314697 2.17778254]
[64.00444031 -12.36917114]
[60.34573364 -26.91612625]
[56.68703079 -41.46308136]
[47.47002029 -42.32947159]
[38.76274109 -46.30787659]
[31.61705971 -53.14347839]
[26.96721268 -62.22686005]
[25.51106644 -72.64571381]
[27.61328316 -83.27578735]
[33.24317932 -92.90221405]
[21.46104050 -102.18560028]
[9.67890358 -111.46897888]
[-2.10323358 -120.75236511]
[0.14941779 -105.92247772]
[-6.60386610 -92.52870941]
[-19.86679268 -85.52194214]
[-34.73683548 -87.49217224]
[-45.71741486 -97.71112061]
[-48.74965286 -112.40144348]
[-42.71270752 -126.13298798]
[-29.83808708 -133.83000183]
[-14.88578415 -132.64778137]
[-24.99121857 -143.73291016]
[-40.39752579 -141.88212585]
[-53.93291855 -149.46980286]
[-60.39276123 -163.57830811]
[-57.29312134 -178.78265381]
[-45.82586288 -189.23643494]
[-30.40038681 -190.91998291]
[-16.94810104 -183.18591309]
[-10.64168644 -169.00816345]
[-13.90608501 -153.83834839]
[-3.80065060 -142.75321960]
[7.18015194 -132.53450012]
[18.96228981 -123.25112152]
[30.74442673 -113.96773529]
[42.52656174 -104.68434906]
[36.63745880 -118.47994232]
[30.74835205 -132.27554321]
[20.80129051 -143.50300598]
[17.27019501 -158.08145142]
[20.97732162 -172.61614990]
[31.05942345 -183.72250366]
[45.16876984 -188.81430054]
[60.01984406 -186.70584106]
[72.15440369 -177.88810730]
[78.74678802 -164.41441345]
[78.26188660 -149.42225647]
[70.81322479 -136.40336609]
[67.86065674 -121.69683075]
[64.90808868 -106.99028778]
[74.54990387 -118.48095703]
[84.19171906 -129.97161865]
[93.83352661 -141.46228027]
[86.23285675 -154.57737732]
[83.57923889 -169.50166321]
[86.19312286 -184.43295288]
[93.75885773 -197.56822205]
[105.36284637 -207.32133484]
[119.60385895 -212.51454163]
[134.76220703 -212.52075195]
[149.00747681 -207.33920288]
[160.61944580 -197.59561157]
[168.19593811 -184.46653748]
[170.82203674 -169.53738403]
[168.18064880 -154.61093140]
[160.59072876 -141.48962402]
[148.96878052 -131.75791931]
[134.71823120 -126.59095764]
[119.55988312 -126.61268616]
[105.32419586 -131.82048035]
[95.68238068 -120.32980347]
[86.04056549 -108.83914185]
[76.39875793 -97.34847260]
[88.30331421 -67.92417145]
[71.23398590 -45.12178421]
[74.89269257 -30.57483101]
[78.55139160 -16.02787781]
[82.21009827 -1.48092318]
[85.86880493 13.06603050]
[89.52751160 27.61298561]
[100.13548279 38.06861877]
[95.99791718 53.33921814]
[99.65662384 67.88616943]
[116.43312836 72.40710449]
[128.39974976 85.00432587]
[132.05390930 101.99070740]
[146.39396667 106.39100647]
[161.18356323 100.17430115]
[175.19552612 107.98738861]
[177.68109131 123.83672333]
[166.73353577 135.56407166]
[150.75088501 134.17318726]
[141.99366760 120.73106384]
[127.65360260 116.33076477]
[122.82868195 122.58909607]
[116.62160492 127.47977448]
[109.40818024 130.70671082]
[110.33158875 145.67825317]
[111.25500488 160.64981079]
[112.17842102 175.62135315]
[113.10182953 190.59291077]
[114.02524567 205.56445312]
[114.94866180 220.53601074]
[115.87207031 235.50755310]
[116.79548645 250.47911072]
[117.71890259 265.45065308]
[132.58558655 267.88568115]
[146.53749084 273.56829834]
[158.87478638 282.21347046]
[168.97865295 293.38751221]
[176.34228516 306.52999878]
[180.59629822 320.98168945]
[181.52734375 336.01766968]
[179.08871460 350.88375854]
[173.40272522 364.83428955]
[164.75457764 377.16949463]
[153.57806396 387.27066040]
[140.43380737 394.63110352]
[125.98109436 398.88162231]
[110.94487762 399.80902100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 115]
[27 114]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[41 68]
[42 67]
[43 66]
[44 65]
[53 64]
[54 63]
[82 105]
[83 104]
[84 103]
[85 102]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
