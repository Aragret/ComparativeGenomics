%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUACCAUGGGGGGGGGGAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACxxxxxxxxxxCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCCCCCCCCCCCGCUAACAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 386.01730347]
[71.19830322 380.00128174]
[59.48964310 370.47186279]
[50.78712082 358.13619995]
[45.73651886 343.90966797]
[44.71262741 328.84799194]
[47.79142761 314.06884766]
[54.74444962 300.66891479]
[65.05573273 289.64257812]
[77.96011353 281.80807495]
[92.50000000 277.74676514]
[92.50000000 262.74676514]
[92.50000000 247.74674988]
[92.50000000 232.74674988]
[92.50000000 217.74674988]
[92.50000000 202.74674988]
[92.50000000 187.74674988]
[92.50000000 172.74674988]
[92.50000000 157.74674988]
[92.50000000 142.74674988]
[79.30912018 138.14999390]
[68.26175690 129.60099792]
[60.50240326 117.98540497]
[56.83489990 104.50656891]
[57.63919449 90.56086731]
[62.83196259 77.59303284]
[71.87525177 66.94650269]
[83.83219147 59.72423935]
[80.73387146 45.04771042]
[77.63554382 30.37118721]
[74.53722382 15.69466114]
[71.43890381 1.01813555]
[59.64226151 -8.24681377]
[44.64956665 -7.77877188]
[32.66115952 2.88226056]
[16.87649727 0.01450765]
[9.40422344 -14.18213558]
[15.97642803 -28.81722069]
[31.55147552 -32.66395950]
[44.18152618 -22.77146721]
[59.17422104 -23.23950958]
[64.31719208 -39.37279892]
[76.93936920 -47.27113342]
[76.31539154 -62.25814819]
[61.55231094 -65.28088379]
[47.94995499 -71.74526215]
[36.29715347 -81.27162170]
[27.26851845 -93.30282593]
[21.38539696 -107.13692474]
[18.98577118 -121.96806335]
[20.20483971 -136.93342590]
[24.96741486 -151.16345215]
[32.99253464 -163.83236694]
[43.81004715 -174.20605469]
[56.78813553 -181.68463135]
[71.17024231 -185.83715820]
[70.54626465 -200.82417297]
[69.92228699 -215.81120300]
[69.29830933 -230.79821777]
[68.67433167 -245.78523254]
[53.82860565 -248.29483032]
[39.82921219 -253.83654785]
[27.28814697 -262.16812134]
[16.75365067 -272.92538452]
[8.68624687 -285.63800049]
[3.43860769 -299.75024414]
[1.24013710 -314.64523315]
[2.18694282 -329.67178345]
[6.23763466 -344.17300415]
[13.21513367 -357.51498413]
[22.81441307 -369.11444092]
[34.61583328 -378.46432495]
[48.10349274 -385.15585327]
[62.68775940 -388.89657593]
[77.73107910 -389.52288818]
[92.57581329 -387.00744629]
[106.57302856 -381.46020508]
[119.11080933 -373.12368774]
[129.64108276 -362.36233521]
[137.70347595 -349.64651489]
[142.94557190 -335.53219604]
[145.13816833 -320.63635254]
[144.18545532 -305.61016846]
[140.12905884 -291.11053467]
[133.14631653 -277.77133179]
[123.54247284 -266.17562866]
[111.73737335 -256.83041382]
[98.24708557 -250.14416504]
[83.66134644 -246.40921021]
[84.28532410 -231.42219543]
[84.90930176 -216.43516541]
[85.53327942 -201.44815063]
[86.15725708 -186.46113586]
[100.83476257 -183.51849365]
[114.38959503 -177.14459229]
[126.03198242 -167.70602417]
[135.08242798 -155.74804688]
[141.01139832 -141.96315002]
[143.47024536 -127.15090942]
[142.31175232 -112.17163849]
[137.59895325 -97.89638519]
[129.60165405 -85.15631104]
[118.78106689 -74.69428253]
[105.76313782 -67.12157440]
[91.30241394 -62.88212585]
[91.92639160 -47.89511108]
[106.58527374 -35.54010010]
[105.27854919 -14.56125832]
[86.11542511 -2.08018637]
[89.21375275 12.59633923]
[92.31207275 27.27286530]
[95.41039276 41.94939041]
[98.50871277 56.62591553]
[117.47944641 60.27590179]
[132.98674011 71.79698181]
[141.95790100 88.90631866]
[142.61535645 108.21379852]
[156.63206482 113.55531311]
[170.64878845 118.89682770]
[185.81805420 113.67451477]
[199.28109741 122.39954376]
[200.71020508 138.37881470]
[189.00909424 149.35440063]
[173.15385437 146.90676880]
[165.30726624 132.91354370]
[151.29055786 127.57202148]
[137.27384949 122.23051453]
[131.67776489 129.66571045]
[124.62525940 135.73698425]
[116.44056702 140.16519165]
[107.50000000 142.74674988]
[107.50000000 157.74674988]
[107.50000000 172.74674988]
[107.50000000 187.74674988]
[107.50000000 202.74674988]
[107.50000000 217.74674988]
[107.50000000 232.74674988]
[107.50000000 247.74674988]
[107.50000000 262.74676514]
[107.50000000 277.74676514]
[122.03988647 281.80807495]
[134.94427490 289.64257812]
[145.25555420 300.66891479]
[152.20857239 314.06884766]
[155.28736877 328.84799194]
[154.26348877 343.90966797]
[149.21287537 358.13619995]
[140.51036072 370.47186279]
[128.80169678 380.00128174]
[114.95575714 386.01730347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[33 41]
[34 40]
[43 106]
[44 105]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
