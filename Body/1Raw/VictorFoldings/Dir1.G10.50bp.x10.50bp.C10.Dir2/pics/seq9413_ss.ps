%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCAUAAAAUUCGGGGGGGGGGUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUxxxxxxxxxxGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACCCCCCCCCCCUUCUCCAUAAUAUUC\
) } def
/len { sequence length } bind def

/coor [
[86.50218201 462.02532959]
[72.37109375 456.86520386]
[59.42890930 449.19613647]
[48.11643219 439.27935791]
[38.81896591 427.45263672]
[31.85317230 414.11874390]
[27.45630836 399.73187256]
[25.77812767 384.78201294]
[26.87578964 369.77835083]
[30.71190643 355.23190308]
[37.15582275 341.63815308]
[45.98806381 329.46002197]
[56.90779877 319.11236572]
[69.54311371 310.94760132]
[83.46365356 305.24380493]
[98.19528198 302.19525146]
[97.90261078 287.19812012]
[97.60993195 272.20095825]
[97.31725311 257.20382690]
[97.02458191 242.20668030]
[96.73190308 227.20953369]
[96.43922424 212.21240234]
[96.14655304 197.21525574]
[95.85387421 182.21810913]
[95.56119537 167.22096252]
[95.26851654 152.22381592]
[94.68328094 137.23524475]
[93.80569458 122.26093292]
[92.92810822 107.28662872]
[89.33454895 100.02230072]
[92.18238831 92.01213074]
[91.59715271 77.02355194]
[91.01190948 62.03496933]
[89.84231567 47.08063889]
[88.09015656 32.18332672]
[86.33799744 17.28601265]
[84.58583832 2.38869977]
[69.59070587 2.99591851]
[54.59308624 2.45348239]
[39.68099976 0.76457441]
[24.94195175 -2.06089377]
[10.46244335 -6.00634098]
[-3.67255735 -11.04861355]
[-17.38009834 -17.15812111]
[-30.57973671 -24.29901123]
[-43.19401169 -32.42937469]
[-55.14889526 -41.50150299]
[-66.37422943 -51.46215439]
[-76.80414581 -62.25287628]
[-86.37742615 -73.81034088]
[-95.03790283 -86.06672668]
[-102.73474121 -98.95010376]
[-109.42277527 -112.38486481]
[-115.06275940 -126.29218292]
[-119.62158966 -140.59042358]
[-123.07252502 -155.19569397]
[-125.39529419 -170.02227783]
[-126.57628632 -184.98315430]
[-126.60855865 -199.99053955]
[-125.49192810 -214.95635986]
[-123.23294067 -229.79280090]
[-119.84485626 -244.41276550]
[-115.34756470 -258.73049927]
[-109.76744080 -272.66192627]
[-103.13725281 -286.12533569]
[-95.49589539 -299.04168701]
[-86.88821411 -311.33523560]
[-77.36473083 -322.93374634]
[-66.98132324 -333.76922607]
[-55.79892731 -343.77807617]
[-43.88317108 -352.90151978]
[-31.30398369 -361.08605957]
[-18.13517952 -368.28366089]
[-4.45404196 -374.45205688]
[9.65914154 -379.55508423]
[24.12154770 -383.56277466]
[38.84830475 -386.45159912]
[53.75299072 -388.20465088]
[68.74813843 -388.81158447]
[83.74574280 -388.26885986]
[98.65779877 -386.57965088]
[113.39678955 -383.75390625]
[127.87622833 -379.80819702]
[142.01112366 -374.76565552]
[155.71855164 -368.65588379]
[168.91806030 -361.51473999]
[181.53218079 -353.38412476]
[193.48689270 -344.31179810]
[204.71203613 -334.35092163]
[215.14175415 -323.55999756]
[224.71481323 -312.00234985]
[233.37504578 -299.74581909]
[241.07164001 -286.86227417]
[247.75942993 -273.42739868]
[253.39913940 -259.51995850]
[257.95770264 -245.22163391]
[261.40835571 -230.61630249]
[263.73086548 -215.78968811]
[264.91156006 -200.82878113]
[264.94354248 -185.82139587]
[263.82662964 -170.85559082]
[261.56735229 -156.01919556]
[258.17901611 -141.39929199]
[253.68144226 -127.08165741]
[248.10105896 -113.15032196]
[241.47061157 -99.68704224]
[233.82901001 -86.77082062]
[225.22109985 -74.47746277]
[215.69738770 -62.87911606]
[205.31378174 -52.04383469]
[194.13119507 -42.03520584]
[182.21527100 -32.91197205]
[169.63592529 -24.72766876]
[156.46697998 -17.53032494]
[142.78572083 -11.36217785]
[128.67243958 -6.25942659]
[114.20996094 -2.25201488]
[99.48314667 0.63653922]
[101.23531342 15.53385258]
[102.98747253 30.43116570]
[104.73963165 45.32847977]
[106.90899658 47.17886353]
[108.45672607 50.02164078]
[108.99289703 53.61721039]
[108.22422028 57.58653641]
[106.00048828 61.44972992]
[106.58573151 76.43830872]
[107.17096710 91.42688751]
[107.90242004 106.40904236]
[108.77999878 121.38334656]
[109.65758514 136.35765076]
[113.00883484 142.15151978]
[112.90757751 147.89739990]
[110.26566315 151.93113708]
[110.55834198 166.92828369]
[110.85102081 181.92543030]
[111.14369202 196.92257690]
[111.43637085 211.91972351]
[111.72904968 226.91687012]
[112.02172089 241.91400146]
[112.31439972 256.91116333]
[112.60707855 271.90829468]
[112.89974976 286.90542603]
[113.19242859 301.90258789]
[128.03178406 304.37405396]
[142.16426086 309.53036499]
[155.10852051 317.19595337]
[166.42366028 327.10968018]
[175.72431946 338.93389893]
[182.69371033 352.26589966]
[187.09445190 366.65161133]
[188.77665710 381.60101318]
[187.68304443 396.60498047]
[183.85084534 411.15243530]
[177.41058350 424.74795532]
[168.58163452 436.92843628]
[157.66468811 447.27902222]
[145.03157043 455.44720459]
[131.11257935 461.15475464]
[116.38176727 464.20727539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 131]
[28 130]
[29 129]
[31 128]
[32 127]
[33 126]
[34 121]
[35 120]
[36 119]
[37 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
