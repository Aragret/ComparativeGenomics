%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCUCAAGGGGGGGGGGCCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAxxxxxxxxxxUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCACCCCCCCCCCUCAAACUCAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 369.98339844]
[71.19830322 363.96737671]
[59.48964310 354.43795776]
[50.78712082 342.10229492]
[45.73651886 327.87576294]
[44.71262741 312.81408691]
[47.79142761 298.03491211]
[54.74444962 284.63500977]
[65.05573273 273.60867310]
[77.96011353 265.77416992]
[92.50000000 261.71282959]
[92.50000000 246.71284485]
[92.50000000 231.71284485]
[92.50000000 216.71284485]
[92.50000000 201.71284485]
[92.50000000 186.71284485]
[92.50000000 171.71284485]
[92.50000000 156.71284485]
[92.50000000 141.71284485]
[92.50000000 126.71284485]
[73.68450165 108.79320526]
[77.94766235 83.16194153]
[68.93013000 71.17510986]
[59.91260147 59.18827438]
[50.89506912 47.20144272]
[41.87754059 35.21460724]
[32.86001205 23.22777557]
[20.07220459 31.08948708]
[6.60439920 37.71916962]
[-7.42504740 43.05856323]
[-21.89284134 47.06073761]
[-36.67183685 49.69052887]
[-51.63214874 50.92482376]
[-66.64231110 50.75276947]
[-81.57039642 49.17588425]
[-96.28523254 46.20802307]
[-110.65748596 41.87527084]
[-124.56085968 36.21569824]
[-137.87315369 29.27905273]
[-150.47740173 21.12628746]
[-162.26281738 11.82905483]
[-173.12582397 1.46905839]
[-182.97096252 -9.86265373]
[-191.71171570 -22.06649780]
[-199.27125549 -35.03522110]
[-205.58314514 -48.65485382]
[-210.59193420 -62.80570221]
[-214.25360107 -77.36340332]
[-216.53594971 -92.20002747]
[-217.41893005 -107.18518066]
[-216.89477539 -122.18717194]
[-214.96810913 -137.07415771]
[-211.65585327 -151.71531677]
[-206.98710632 -165.98196411]
[-201.00292969 -179.74873352]
[-193.75587463 -192.89463806]
[-185.30966187 -205.30415344]
[-175.73849487 -216.86819458]
[-165.12649536 -227.48516846]
[-153.56694031 -237.06175232]
[-141.16139221 -245.51379395]
[-128.01889038 -252.76699829]
[-114.25492859 -258.75765991]
[-99.99046326 -263.43307495]
[-85.35086823 -266.75219727]
[-70.46478271 -268.68585205]
[-55.46303940 -269.21704102]
[-40.47747421 -268.34106445]
[-25.63978195 -266.06567383]
[-11.08036327 -262.41085815]
[3.07283235 -257.40869141]
[16.69542313 -251.10319519]
[29.66769028 -243.54972839]
[41.87562943 -234.81469727]
[53.21195984 -224.97488403]
[63.57704544 -214.11672974]
[72.87980652 -202.33567810]
[81.03848267 -189.73526001]
[87.98136902 -176.42620850]
[93.64745331 -162.52549744]
[97.98694611 -148.15527344]
[100.96170807 -133.44183350]
[102.54559326 -118.51448822]
[102.72468567 -103.50440979]
[101.49740601 -88.54351807]
[98.87454987 -73.76329041]
[94.87915802 -59.29362488]
[89.54634094 -45.26167679]
[82.92297363 -31.79076385]
[75.06726074 -18.99927139]
[66.04824066 -6.99961758]
[55.94517136 4.10274553]
[44.84684372 14.21024609]
[53.86437225 26.19707870]
[62.88190079 38.18391037]
[71.89942932 50.17074585]
[80.91696167 62.15757751]
[89.93449402 74.14440918]
[96.04036713 72.53825378]
[102.35127258 72.35406494]
[108.54042816 73.60137939]
[114.28736115 76.21560669]
[119.29450226 80.06138611]
[123.30257416 84.93958282]
[126.10404205 90.59760284]
[127.55384827 96.74248505]
[142.37161255 99.07358551]
[157.18936157 101.40468597]
[172.00712585 103.73579407]
[182.91462708 96.77301025]
[195.24263000 99.06193542]
[202.44610596 108.83010864]
[217.21217346 111.46897125]
[231.97822571 114.10783386]
[244.80033875 104.86831665]
[260.38665771 107.48403168]
[269.49011230 120.40312195]
[266.70974731 135.96092224]
[253.69512939 144.92726135]
[238.16760254 141.98257446]
[229.33935547 128.87388611]
[214.57330322 126.23502350]
[199.80725098 123.59616089]
[183.68539429 130.45806885]
[169.67602539 118.55355072]
[154.85826111 116.22245026]
[140.04049683 113.89134216]
[125.22274780 111.56024170]
[120.88017273 118.27140808]
[114.80449677 123.46599579]
[107.50000000 126.71284485]
[107.50000000 141.71284485]
[107.50000000 156.71284485]
[107.50000000 171.71284485]
[107.50000000 186.71284485]
[107.50000000 201.71284485]
[107.50000000 216.71284485]
[107.50000000 231.71284485]
[107.50000000 246.71284485]
[107.50000000 261.71282959]
[122.03988647 265.77416992]
[134.94427490 273.60867310]
[145.25555420 284.63500977]
[152.20857239 298.03491211]
[155.28736877 312.81408691]
[154.26348877 327.87576294]
[149.21287537 342.10229492]
[140.51036072 354.43795776]
[128.80169678 363.96737671]
[114.95575714 369.98339844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[106 128]
[107 127]
[108 126]
[109 125]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
