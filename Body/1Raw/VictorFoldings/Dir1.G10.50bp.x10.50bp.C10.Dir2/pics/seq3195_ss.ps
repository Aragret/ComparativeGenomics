%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAAAACGGGGGGGGGGUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAAxxxxxxxxxxUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACCCCCCCCCCCAACAUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[94.74975586 402.44869995]
[81.52955627 395.17620850]
[70.64275360 384.72921753]
[62.83162689 371.81997681]
[58.62874603 357.32864380]
[58.32067108 342.24331665]
[61.92841339 327.59249878]
[69.20598602 314.37509155]
[79.65719604 303.49234009]
[92.56945801 295.68618774]
[107.06239319 291.48889160]
[106.75033569 276.49215698]
[106.43827820 261.49539185]
[106.12622070 246.49864197]
[105.81417084 231.50189209]
[105.50211334 216.50514221]
[105.19005585 201.50837708]
[104.87799835 186.51162720]
[104.56594086 171.51487732]
[104.25388336 156.51812744]
[103.94183350 141.52136230]
[103.62977600 126.52461243]
[94.08966064 124.58687592]
[86.40673828 119.53953552]
[81.46813965 112.43672180]
[79.66465759 104.52932739]
[64.66546631 104.68536377]
[55.06225967 113.35902405]
[42.52540207 113.14417267]
[33.80313492 104.70442200]
[18.80394554 104.54838562]
[3.80475664 104.39234924]
[-11.19443130 104.23631287]
[-26.19362068 104.08027649]
[-36.23126602 116.07109070]
[-51.63705063 118.75360107]
[-65.13683319 110.86119843]
[-70.35642242 96.12044525]
[-64.83129883 81.49146271]
[-51.17024994 73.88162231]
[-35.82360458 76.88404846]
[-26.03758430 89.08108521]
[-11.03839493 89.23712158]
[3.96079326 89.39315796]
[18.95998192 89.54919434]
[33.95917130 89.70523071]
[48.72138596 80.26718140]
[64.50942993 89.68618011]
[79.50862122 89.53014374]
[66.27078247 82.47608185]
[53.03295135 75.42202759]
[38.39877319 72.12948608]
[26.58478546 62.88666534]
[19.86763763 49.47473145]
[19.54178047 34.47827148]
[25.67000389 20.78722000]
[37.07135391 11.03995419]
[51.54870224 7.11484718]
[66.31214142 9.76829910]
[78.51664734 18.48896980]
[85.81031036 31.59631348]
[86.78794098 46.56216049]
[91.69904327 60.73541260]
[96.61015320 74.90866089]
[99.09526825 60.11595535]
[101.58039093 45.32324982]
[87.64907837 39.59033966]
[75.34304047 30.90072823]
[65.27955627 19.69028854]
[57.96339798 6.52132654]
[53.76153946 -7.94560575]
[52.88474655 -22.98485374]
[55.37699890 -37.84205627]
[61.11328506 -51.77197647]
[69.80587769 -64.07590485]
[81.01875305 -74.13667297]
[94.18949127 -81.44963837]
[108.65744019 -85.64799500]
[123.69689941 -86.52114105]
[138.55349731 -84.02529144]
[152.48202515 -78.28562927]
[164.78384399 -69.59005737]
[174.84190369 -58.37474060]
[182.15167236 -45.20223618]
[186.34652710 -30.73326874]
[187.21603394 -15.69359875]
[184.71658325 -0.83760726]
[178.97354126 13.08953476]
[170.27499390 25.38924599]
[159.05723572 35.44458008]
[145.88296509 42.75116730]
[131.41297913 46.94250870]
[116.37309265 47.80836868]
[113.88797760 62.60107422]
[111.40285492 77.39378357]
[116.09643555 83.24359131]
[121.53513336 69.26430511]
[136.36091614 66.98480988]
[145.74781799 78.68463898]
[140.30882263 92.66381073]
[125.48359680 94.94321442]
[130.17718506 100.79302979]
[145.15689087 101.57287598]
[160.13661194 102.35272217]
[175.11631775 103.13256836]
[189.30009460 96.12319183]
[201.60789490 104.51171875]
[216.58760071 105.29156494]
[223.87077332 91.87820435]
[236.25753784 82.96019745]
[251.28849792 80.30822754]
[265.97924805 84.44884491]
[277.41293335 94.55991364]
[283.31936646 108.63388824]
[282.52584839 123.87636566]
[275.18991089 137.26094055]
[262.76812744 146.13009644]
[247.72683716 148.72285461]
[233.05250549 144.52441406]
[221.65873718 134.36840820]
[215.80776978 120.27127838]
[200.82804871 119.49143219]
[187.71572876 126.55657959]
[174.33647156 118.11228180]
[159.35676575 117.33243561]
[144.37704468 116.55258942]
[129.39733887 115.77274323]
[118.62652588 126.21255493]
[118.93858337 141.20930481]
[119.25064087 156.20606995]
[119.56269836 171.20281982]
[119.87475586 186.19956970]
[120.18680573 201.19631958]
[120.49886322 216.19308472]
[120.81092072 231.18983459]
[121.12297821 246.18658447]
[121.43503571 261.18334961]
[121.74709320 276.18008423]
[122.05914307 291.17684937]
[136.71414185 294.76760864]
[149.93994141 302.02987671]
[160.83480835 312.46847534]
[168.65591431 325.37167358]
[172.86997986 339.85974121]
[173.18969727 354.94485474]
[169.59327698 369.59844971]
[162.32591248 382.82144165]
[151.88311768 393.71228027]
[138.97688293 401.52841187]
[124.48719025 405.73687744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[26 49]
[27 48]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[64 95]
[65 94]
[66 93]
[102 127]
[103 126]
[104 125]
[105 124]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
