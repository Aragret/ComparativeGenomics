%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUCAGUGGGGGGGGGGAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUxxxxxxxxxxACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUCCCCCCCCCCAGCCCUAAGU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.68200684]
[71.19830322 375.66598511]
[59.48964310 366.13656616]
[50.78712082 353.80090332]
[45.73651886 339.57437134]
[44.71262741 324.51269531]
[47.79142761 309.73352051]
[54.74444962 296.33358765]
[65.05573273 285.30725098]
[77.96011353 277.47274780]
[92.50000000 273.41143799]
[92.50000000 258.41143799]
[92.50000000 243.41143799]
[92.50000000 228.41143799]
[92.50000000 213.41143799]
[92.50000000 198.41143799]
[92.50000000 183.41143799]
[92.50000000 168.41143799]
[92.50000000 153.41143799]
[92.50000000 138.41143799]
[92.50000000 123.41144562]
[76.07230377 112.20726776]
[72.31430817 90.90922546]
[85.92496490 71.91082001]
[71.21700287 68.96533966]
[56.50904083 66.01985931]
[41.80107880 63.07437134]
[27.09311676 60.12889099]
[12.04228497 65.00567627]
[1.08214188 54.91981506]
[-13.96869087 59.79660034]
[-24.92883301 49.71073914]
[-39.63679504 46.76525879]
[-54.34475708 43.81977463]
[-69.05271912 40.87429428]
[-77.48523712 53.52186203]
[-90.11866760 61.97555161]
[-105.02650452 64.94623566]
[-119.93540192 61.98090744]
[-132.57186890 53.53175354]
[-141.00892639 40.88721466]
[-143.96000671 25.97548676]
[-140.97506714 11.07050133]
[-132.50929260 -1.55483866]
[-119.85366821 -9.97526169]
[-104.93807220 -12.90671349]
[-90.03702545 -9.90217018]
[-77.42282867 -1.41980183]
[-69.01906586 11.24689198]
[-66.10723877 26.16633224]
[-51.39927292 29.11181450]
[-36.69131088 32.05729675]
[-21.98335075 35.00278091]
[-7.98453045 29.91531563]
[4.02762461 40.21185303]
[18.02644539 35.12438965]
[30.03859901 45.42092896]
[44.74656296 48.36641312]
[59.45452118 51.31189346]
[74.16248322 54.25737762]
[88.87044525 57.20285797]
[101.56537628 49.21294403]
[105.27153778 34.67800522]
[108.97769928 20.14307022]
[95.27029419 13.95613861]
[82.84558868 5.48277760]
[72.08116150 -5.01951694]
[63.30412292 -17.23159218]
[56.78120804 -30.78233719]
[52.71063232 -45.25996017]
[51.21609879 -60.22449875]
[52.34302902 -75.22120667]
[56.05717087 -89.79434204]
[62.24565506 -103.50104523]
[70.72042847 -115.92478943]
[81.22393799 -126.68802643]
[93.43701172 -135.46366882]
[106.98849487 -141.98506165]
[121.46658325 -146.05398560]
[136.43128967 -147.54682922]
[151.42787170 -146.41819763]
[166.00057983 -142.70240784]
[179.70658875 -136.51235962]
[192.12936401 -128.03617859]
[202.89141846 -117.53144836]
[211.66567993 -105.31738281]
[218.18551636 -91.76515961]
[222.25280762 -77.28661346]
[223.74394226 -62.32173157]
[222.61361694 -47.32528305]
[218.89617920 -32.75299072]
[212.70457458 -19.04768944]
[204.22698975 -6.62586784]
[193.72103882 4.13498735]
[181.50596619 12.90786648]
[167.95300293 19.42617226]
[153.47399902 23.49182129]
[138.50895691 24.98126221]
[123.51263428 23.84923172]
[119.80647278 38.38416672]
[116.10031128 52.91910553]
[124.99266052 64.99909210]
[139.97238159 65.77893829]
[154.95208740 66.55878448]
[159.94255066 52.30143356]
[168.74874878 40.02838898]
[180.65678406 30.73456764]
[194.70135498 25.17337608]
[209.74391174 23.79563904]
[224.56503296 26.71304131]
[237.96322632 33.68908310]
[248.85235596 44.15824509]
[256.34970093 57.27184296]
[259.84747314 71.96681213]
[259.06216431 87.05190277]
[254.05737305 101.30422974]
[245.23886108 113.56842804]
[233.32148743 122.85028076]
[219.27133179 128.39735413]
[204.22740173 129.75997925]
[189.40922546 126.82769012]
[176.01805115 119.83819580]
[165.13943481 109.35810089]
[157.65525818 96.23697662]
[154.17224121 81.53849792]
[139.19253540 80.75865173]
[124.21281433 79.97880554]
[129.11627197 98.82432556]
[122.01397705 115.39276123]
[107.50000000 123.41144562]
[107.50000000 138.41143799]
[107.50000000 153.41143799]
[107.50000000 168.41143799]
[107.50000000 183.41143799]
[107.50000000 198.41143799]
[107.50000000 213.41143799]
[107.50000000 228.41143799]
[107.50000000 243.41143799]
[107.50000000 258.41143799]
[107.50000000 273.41143799]
[122.03988647 277.47274780]
[134.94427490 285.30725098]
[145.25555420 296.33358765]
[152.20857239 309.73352051]
[155.28736877 324.51269531]
[154.26348877 339.57437134]
[149.21287537 353.80090332]
[140.51036072 366.13656616]
[128.80169678 375.66598511]
[114.95575714 381.68200684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[30 55]
[32 53]
[33 52]
[34 51]
[35 50]
[62 101]
[63 100]
[64 99]
[102 127]
[103 126]
[104 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
