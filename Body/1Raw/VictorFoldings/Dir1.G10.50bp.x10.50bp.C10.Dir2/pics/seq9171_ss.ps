%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACGGACUUGGGGGGGGGGCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUxxxxxxxxxxCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCCCCCCCCCCCACGGGCUU\
) } def
/len { sequence length } bind def

/coor [
[84.34605408 394.84130859]
[70.50011444 388.82528687]
[58.79145432 379.29586792]
[50.08892822 366.96020508]
[45.03832626 352.73367310]
[44.01443481 337.67199707]
[47.09323502 322.89285278]
[54.04625702 309.49291992]
[64.35754395 298.46658325]
[77.26192474 290.63208008]
[91.80181122 286.57077026]
[91.80181122 271.57077026]
[91.80181122 256.57077026]
[91.80181122 241.57077026]
[91.80181122 226.57077026]
[91.80181122 211.57077026]
[91.80181122 196.57077026]
[91.80181122 181.57077026]
[91.80181122 166.57077026]
[91.80181122 151.57077026]
[83.45324707 142.76116943]
[83.36882782 130.22276306]
[92.14190674 120.71029663]
[92.45396423 105.71354675]
[89.73300171 101.14746094]
[89.80144501 95.37857819]
[93.10390472 90.10295868]
[94.03952789 75.13216400]
[94.97515869 60.16137314]
[95.91078949 45.19058228]
[96.84641266 30.21978951]
[82.99184418 24.11437416]
[72.08254242 13.65687847]
[65.42185211 0.12338687]
[63.79634476 -14.84417152]
[67.38302612 -29.43722343]
[75.73026276 -41.89908981]
[87.81455994 -50.73644257]
[102.16603088 -54.89825058]
[103.10166168 -69.86904144]
[104.03729248 -84.83983612]
[90.46533203 -88.77672577]
[78.02650452 -95.46952820]
[67.27285767 -104.61818695]
[58.68101883 -115.81372833]
[52.63105011 -128.55651855]
[49.38967133 -142.27859497]
[49.09848022 -156.36895752]
[51.76776123 -170.20079041]
[57.27617645 -183.15930176]
[65.37624359 -194.66912842]
[75.70548248 -204.21981812]
[87.80261230 -211.38847351]
[101.12818146 -215.85853577]
[115.08857727 -217.43365479]
[116.64615631 -232.35255432]
[118.20374298 -247.27146912]
[119.76132202 -262.19039917]
[121.31890106 -277.10928345]
[122.87648010 -292.02819824]
[108.39907837 -296.09179688]
[94.81674957 -302.54379272]
[82.52027893 -311.19854736]
[71.86345673 -321.80706787]
[63.15291214 -334.06405640]
[56.63925552 -347.61694336]
[52.50990295 -362.07571411]
[50.88365936 -377.02441406]
[51.80732346 -392.03289795]
[55.25431061 -406.66937256]
[61.12545013 -420.51269531]
[69.25181580 -433.16458130]
[79.39958954 -444.26101685]
[91.27680969 -453.48272705]
[104.54174042 -460.56436157]
[118.81272888 -465.30218506]
[133.67915344 -467.55987549]
[148.71330261 -467.27252197]
[163.48258972 -464.44830322]
[177.56208801 -459.16857910]
[190.54669189 -451.58517456]
[202.06282043 -441.91632080]
[211.77912903 -430.44018555]
[219.41604614 -417.48696899]
[224.75386047 -403.42938232]
[227.63897705 -388.67187500]
[227.98840332 -373.63906860]
[225.79206848 -358.76342773]
[221.11317444 -344.47302246]
[214.08633423 -331.17898560]
[204.91374207 -319.26379395]
[193.85928345 -309.07031250]
[181.24104309 -300.89181519]
[167.42207336 -294.96359253]
[152.79994202 -291.45620728]
[137.79539490 -290.47064209]
[136.23780823 -275.55172729]
[134.68023682 -260.63281250]
[133.12265015 -245.71389771]
[131.56507874 -230.79498291]
[130.00749207 -215.87606812]
[145.04661560 -210.64929199]
[158.42291260 -201.99850464]
[169.37008667 -190.41455078]
[177.25990295 -176.55645752]
[181.63815308 -161.21389771]
[182.25093079 -145.26222229]
[179.05924988 -129.61256409]
[172.24151611 -115.15969086]
[162.18362427 -102.73094940]
[149.45704651 -93.03884125]
[134.78636169 -86.64020538]
[119.00807953 -83.90420532]
[118.07244873 -68.93341064]
[117.13682556 -53.96262360]
[130.85844421 -48.04633331]
[141.74839783 -37.77315903]
[148.47908020 -24.36896896]
[150.22091675 -9.44290161]
[146.74447632 5.20580101]
[138.45059204 17.80467606]
[126.32414246 26.82250977]
[111.81720734 31.15541840]
[110.88157654 46.12620926]
[109.94595337 61.09700012]
[109.01032257 76.06779480]
[108.07469177 91.03858185]
[107.45071411 106.02560425]
[107.13865662 121.02235413]
[116.39291382 136.90753174]
[106.80181122 151.57077026]
[106.80181122 166.57077026]
[106.80181122 181.57077026]
[106.80181122 196.57077026]
[106.80181122 211.57077026]
[106.80181122 226.57077026]
[106.80181122 241.57077026]
[106.80181122 256.57077026]
[106.80181122 271.57077026]
[106.80181122 286.57077026]
[121.34169769 290.63208008]
[134.24607849 298.46658325]
[144.55735779 309.49291992]
[151.51037598 322.89285278]
[154.58918762 337.67199707]
[153.56529236 352.73367310]
[148.51469421 366.96020508]
[139.81216431 379.29586792]
[128.10350037 388.82528687]
[114.25756073 394.84130859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[39 115]
[40 114]
[41 113]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
