%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACUCACCGGGGGGGGGGCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUxxxxxxxxxxUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAACCCCCCCCCCAACACUCACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.47406006]
[71.19830322 349.45803833]
[59.48964310 339.92861938]
[50.78712082 327.59295654]
[45.73651886 313.36642456]
[44.71262741 298.30474854]
[47.79142761 283.52557373]
[54.74444962 270.12564087]
[65.05573273 259.09933472]
[77.96011353 251.26481628]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[77.52276611 56.89068222]
[62.62754440 55.08221054]
[47.86869049 52.37768173]
[33.30006409 48.78697205]
[18.97481728 44.32317352]
[4.94522429 39.00258255]
[-8.73752117 32.84461212]
[-22.02349281 25.87172890]
[-34.86421204 18.10937881]
[-47.21282196 9.58588409]
[-59.02426910 0.33234757]
[-70.25544739 -9.61746502]
[-80.86537933 -20.22724915]
[-90.81534576 -31.45829010]
[-100.06904602 -43.26960373]
[-108.59271240 -55.61809540]
[-116.35523987 -68.45870972]
[-123.32830811 -81.74458313]
[-129.48646545 -95.42724609]
[-134.80725098 -109.45676422]
[-139.27125549 -123.78194427]
[-142.86216736 -138.35052490]
[-145.56689453 -153.10934448]
[-147.37557983 -168.00453186]
[-148.28160095 -182.98175049]
[-148.28167725 -197.98635864]
[-147.37579346 -212.96359253]
[-145.56724548 -227.85881042]
[-142.86265564 -242.61764526]
[-139.27186584 -257.18624878]
[-134.80801392 -271.51147461]
[-129.48735046 -285.54104614]
[-123.32931519 -299.22375488]
[-116.35637665 -312.50970459]
[-108.59396362 -325.35040283]
[-100.07041168 -337.69897461]
[-90.81681824 -349.51037598]
[-80.86695862 -360.74148560]
[-70.25712585 -371.35137939]
[-59.02603531 -381.30130005]
[-47.21467972 -390.55493164]
[-34.86614609 -399.07855225]
[-22.02549934 -406.84100342]
[-8.73959160 -413.81402588]
[4.94309664 -419.97213745]
[18.97263908 -425.29284668]
[33.29784393 -429.75677490]
[47.86643982 -433.34762573]
[62.62526703 -436.05227661]
[77.52046967 -437.86090088]
[92.49769592 -438.76684570]
[107.50230408 -438.76684570]
[122.47953033 -437.86090088]
[137.37474060 -436.05227661]
[152.13356018 -433.34762573]
[166.70214844 -429.75677490]
[181.02735901 -425.29284668]
[195.05690002 -419.97213745]
[208.73959351 -413.81402588]
[222.02549744 -406.84100342]
[234.86614990 -399.07855225]
[247.21467590 -390.55493164]
[259.02603149 -381.30130005]
[270.25711060 -371.35137939]
[280.86694336 -360.74148560]
[290.81683350 -349.51037598]
[300.07040405 -337.69897461]
[308.59396362 -325.35040283]
[316.35638428 -312.50970459]
[323.32931519 -299.22375488]
[329.48736572 -285.54104614]
[334.80801392 -271.51147461]
[339.27188110 -257.18624878]
[342.86264038 -242.61764526]
[345.56726074 -227.85881042]
[347.37579346 -212.96359253]
[348.28167725 -197.98635864]
[348.28161621 -182.98175049]
[347.37557983 -168.00453186]
[345.56689453 -153.10934448]
[342.86218262 -138.35052490]
[339.27124023 -123.78194427]
[334.80725098 -109.45676422]
[329.48648071 -95.42724609]
[323.32830811 -81.74458313]
[316.35525513 -68.45870972]
[308.59271240 -55.61809540]
[300.06906128 -43.26960373]
[290.81533813 -31.45829010]
[280.86538696 -20.22724915]
[270.25543213 -9.61746502]
[259.02426147 0.33234757]
[247.21282959 9.58588409]
[234.86421204 18.10937881]
[222.02349854 25.87172890]
[208.73751831 32.84461212]
[195.05477905 39.00258255]
[181.02517700 44.32317352]
[166.69993591 48.78697205]
[152.13130188 52.37768173]
[137.37245178 55.08221054]
[122.47723389 56.89068222]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.03988647 251.26481628]
[134.94427490 259.09933472]
[145.25555420 270.12564087]
[152.20857239 283.52557373]
[155.28736877 298.30474854]
[154.26348877 313.36642456]
[149.21287537 327.59295654]
[140.51036072 339.92861938]
[128.80169678 349.45803833]
[114.95575714 355.47406006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
