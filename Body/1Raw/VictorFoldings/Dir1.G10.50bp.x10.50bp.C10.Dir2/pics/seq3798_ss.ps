%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCCGGGGGGGGGGAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACxxxxxxxxxxUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACCCCCCCCCCCACCCUAGAC\
) } def
/len { sequence length } bind def

/coor [
[61.79862213 371.65148926]
[47.95268631 365.63546753]
[36.24402237 356.10604858]
[27.54149818 343.77038574]
[22.49089622 329.54385376]
[21.46700668 314.48217773]
[24.54580498 299.70303345]
[31.49882698 286.30310059]
[41.81011200 275.27676392]
[54.71449280 267.44226074]
[69.25437927 263.38095093]
[69.25437927 248.38095093]
[69.25437927 233.38095093]
[69.25437927 218.38095093]
[69.25437927 203.38095093]
[69.25437927 188.38095093]
[69.25437927 173.38095093]
[69.25437927 158.38095093]
[69.25437927 143.38095093]
[69.25437927 128.38095093]
[83.66641235 87.26337433]
[77.89014435 73.42015839]
[72.11386871 59.57693863]
[66.33760071 45.73371887]
[52.06147003 46.13051224]
[38.51103210 40.67959595]
[28.03096199 30.04629326]
[22.54343224 15.81362724]
[23.19912910 0.24939479]
[8.23888016 -0.84191573]
[-6.72136879 -1.93322635]
[-12.90575409 11.90618038]
[-23.45276070 22.79362488]
[-37.08878708 29.41439629]
[-52.16721344 30.96900368]
[-66.86724854 27.26972008]
[-79.41379547 18.76325226]
[-88.29179382 6.47679710]
[-92.42918396 -8.10599518]
[-91.32634735 -23.22418213]
[-85.11647034 -37.05216980]
[-74.54942322 -47.92015839]
[-60.90121460 -54.51578903]
[-45.81994629 -56.04260635]
[-31.12675285 -52.31623840]
[-18.59590530 -43.78666306]
[-9.74056435 -31.48386765]
[-5.63005829 -16.89347458]
[9.33019066 -15.80216408]
[24.29043961 -14.71085358]
[35.06124878 -25.15066719]
[26.75657845 -38.61703491]
[33.95774460 -51.65514755]
[33.33376694 -66.64216614]
[32.70979309 -81.62918091]
[32.08581543 -96.61619568]
[31.46183586 -111.60321045]
[16.55508423 -113.59315491]
[2.22040772 -118.14157867]
[-11.10658073 -125.11026001]
[-23.02088737 -134.28742981]
[-33.16044998 -145.39419556]
[-41.21714020 -158.09304810]
[-46.94612122 -171.99809265]
[-50.17330170 -186.68673706]
[-50.80060196 -201.71263123]
[-48.80896759 -216.61915588]
[-44.25891876 -230.95332336]
[-37.28872681 -244.27952576]
[-28.11020851 -256.19277954]
[-17.00228691 -266.33108521]
[-4.30251980 -274.38632202]
[9.60316086 -280.11373901]
[24.29217720 -283.33926392]
[39.31814575 -283.96484375]
[54.22444534 -281.97152710]
[68.55809021 -277.41986084]
[81.88349915 -270.44815063]
[93.79572296 -261.26828003]
[103.93276978 -250.15921021]
[111.98657227 -237.45852661]
[117.71240234 -223.55220032]
[120.93624878 -208.86282349]
[121.56014252 -193.83677673]
[119.56513214 -178.93070984]
[115.01183319 -164.59757996]
[108.03861237 -151.27296448]
[98.85739136 -139.36177063]
[87.74716949 -129.22599792]
[75.04557800 -121.17362213]
[61.13859940 -115.44937134]
[46.44885254 -112.22718811]
[47.07283020 -97.24017334]
[47.69680786 -82.25315857]
[48.32078552 -67.26614380]
[48.94476318 -52.27912521]
[57.20479965 -39.88473129]
[50.04826355 -25.77464294]
[60.73645782 -26.72917938]
[71.16342926 -24.71598053]
[80.52979279 -19.95185089]
[88.13477325 -12.86203575]
[93.42860413 -4.04290962]
[96.05203247 5.78787851]
[95.86020660 15.84968185]
[92.92935944 25.36080551]
[87.54615021 33.59923935]
[80.18081665 39.95744705]
[85.95709229 53.80066681]
[91.73336029 67.64388275]
[97.50963593 81.48709869]
[103.68051147 67.81522369]
[118.39995575 64.92766571]
[129.27880859 75.25483704]
[127.16048431 90.10450745]
[113.82787323 96.97790527]
[127.95267487 102.02666473]
[142.07748413 107.07542419]
[156.25315857 100.08789062]
[171.19073486 105.24971771]
[178.02799988 119.49848175]
[172.70852661 134.38064575]
[158.38827515 141.06687927]
[143.56318665 135.59037781]
[137.02871704 121.20022583]
[122.90391541 116.15146637]
[108.77911377 111.10271454]
[102.64793396 115.42227173]
[103.99874878 130.36132812]
[90.38555908 124.06138611]
[84.25437927 128.38095093]
[84.25437927 143.38095093]
[84.25437927 158.38095093]
[84.25437927 173.38095093]
[84.25437927 188.38095093]
[84.25437927 203.38095093]
[84.25437927 218.38095093]
[84.25437927 233.38095093]
[84.25437927 248.38095093]
[84.25437927 263.38095093]
[98.79426575 267.44226074]
[111.69864655 275.27676392]
[122.00993347 286.30310059]
[128.96295166 299.70303345]
[132.04174805 314.48217773]
[131.01785278 329.54385376]
[125.96725464 343.77038574]
[117.26473236 356.10604858]
[105.55606842 365.63546753]
[91.71013641 371.65148926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 111]
[22 110]
[23 109]
[24 108]
[29 50]
[30 49]
[31 48]
[51 98]
[53 96]
[54 95]
[55 94]
[56 93]
[57 92]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
