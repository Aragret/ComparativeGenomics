%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUAGCAGGGGGGGGGGGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUAxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[78.95104980 414.73886108]
[66.07778168 406.83596802]
[55.95348358 395.62548828]
[49.39890289 382.01614380]
[46.94538116 367.11120605]
[48.79181671 352.11895752]
[54.78852844 338.25476074]
[64.44939423 326.64251709]
[76.99124146 318.22357178]
[91.39736176 313.68038940]
[91.08530426 298.68365479]
[90.77324677 283.68688965]
[90.46118927 268.69012451]
[90.14913940 253.69337463]
[89.83708191 238.69662476]
[89.52502441 223.69987488]
[89.21296692 208.70312500]
[88.90090942 193.70635986]
[88.58885193 178.70960999]
[88.27680206 163.71286011]
[87.80875397 148.72016907]
[87.18477631 133.73315430]
[86.56079865 118.74613190]
[85.45214081 93.48908234]
[77.19985199 80.96311951]
[63.14650726 73.69578552]
[62.60570526 58.81100464]
[54.35341644 46.28504181]
[46.10112762 33.75907898]
[31.18661499 36.55783463]
[16.37674904 33.44160461]
[3.92190528 24.91573143]
[-4.29758453 12.30511761]
[-7.05528736 -2.45157266]
[-3.96158266 -17.09993172]
[4.48162889 -29.41420937]
[-3.77066040 -41.94017029]
[-17.82400322 -49.20750427]
[-18.36480331 -64.09228516]
[-26.61709213 -76.61824799]
[-34.86938095 -89.14421082]
[-48.51044846 -82.83715820]
[-62.93920517 -78.63374329]
[-77.83329773 -76.62787628]
[-92.86000061 -76.86435699]
[-107.68360138 -79.33791351]
[-121.97293854 -83.99328613]
[-135.40878296 -90.72646332]
[-147.69097900 -99.38703156]
[-158.54512024 -109.78150940]
[-167.72874451 -121.67767334]
[-175.03666687 -134.80976868]
[-180.30564880 -148.88441467]
[-183.41793823 -163.58717346]
[-184.30404663 -178.58958435]
[-182.94416809 -193.55650330]
[-179.36866760 -208.15353394]
[-173.65742493 -222.05459595]
[-165.93804932 -234.94912720]
[-156.38299561 -246.54905701]
[-145.20570374 -256.59524536]
[-132.65588379 -264.86325073]
[-119.01391602 -271.16836548]
[-104.58456421 -275.36972046]
[-89.69018555 -277.37347412]
[-74.66351318 -277.13482666]
[-59.84026718 -274.65917969]
[-45.55159378 -270.00177002]
[-32.11670685 -263.26666260]
[-19.83574867 -254.60435486]
[-8.98307991 -244.20832825]
[0.19884500 -232.31085205]
[7.50489998 -219.17771912]
[12.77186489 -205.10232544]
[15.88207340 -190.39912415]
[16.76604271 -175.39657593]
[15.40402412 -160.42987061]
[11.82644653 -145.83334351]
[6.11323357 -131.93309021]
[-1.60797930 -119.03966522]
[-11.16469765 -107.44109344]
[-22.34342003 -97.39649963]
[-14.09113026 -84.87053680]
[-5.83884096 -72.34458160]
[7.62424278 -65.97318268]
[8.75530148 -50.19245911]
[17.00759125 -37.66650009]
[31.65449715 -40.56433105]
[46.33475494 -37.62572098]
[58.80521011 -29.26793861]
[67.14822388 -16.73870277]
[70.06653595 -1.93001926]
[67.08487701 12.90752602]
[58.62709045 25.50679207]
[66.87937927 38.03275299]
[75.13166809 50.55871582]
[88.59474945 56.93010712]
[89.72580719 72.71083069]
[97.97810364 85.23679352]
[111.29325867 92.14379120]
[126.28594971 91.67575073]
[141.27864075 91.20771027]
[149.82247925 87.79378510]
[156.58740234 90.88916016]
[171.58659363 90.73312378]
[186.58578491 90.57708740]
[192.59613037 76.58438873]
[203.78260803 66.25082397]
[218.20709229 61.36673737]
[233.37043762 62.77833176]
[246.64552307 70.24104309]
[255.73236084 82.46190643]
[259.05657959 97.32357788]
[256.04226685 112.25119781]
[247.21163940 124.65845490]
[234.09468079 132.39572144]
[218.96397400 134.12246704]
[204.44100952 129.53952026]
[193.04197693 119.44091034]
[186.74182129 105.57627869]
[171.74263000 105.73231506]
[156.74343872 105.88835144]
[141.74668884 106.20040894]
[126.75399017 106.66844940]
[111.76129913 107.13648987]
[101.54782104 118.12215424]
[102.17179871 133.10917664]
[102.79577637 148.09619141]
[106.29838562 156.60403442]
[103.27355194 163.40080261]
[103.58560944 178.39755249]
[103.89766693 193.39431763]
[104.20972443 208.39106750]
[104.52177429 223.38781738]
[104.83383179 238.38456726]
[105.14588928 253.38133240]
[105.45794678 268.37808228]
[105.77000427 283.37484741]
[106.08206177 298.37158203]
[106.39411163 313.36834717]
[120.97675323 317.30828857]
[133.85795593 325.19824219]
[143.99351501 336.39855957]
[150.56176758 350.00131226]
[153.03025818 364.90377808]
[151.19888306 379.89785767]
[145.21611023 393.76806641]
[135.56690979 405.39004517]
[123.03353119 413.82159424]
[108.63198090 418.37921143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 126]
[24 99]
[25 98]
[27 96]
[28 95]
[29 94]
[36 87]
[37 86]
[39 84]
[40 83]
[41 82]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
