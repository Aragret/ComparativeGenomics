%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUUAAUUGGGGGGGGGGUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACxxxxxxxxxxCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUCCCCCCCCCCAGCUUUUAUU\
) } def
/len { sequence length } bind def

/coor [
[89.31684113 374.77249146]
[75.47090149 368.75646973]
[63.76224136 359.22705078]
[55.05971909 346.89138794]
[50.00911713 332.66485596]
[48.98522568 317.60317993]
[52.06402206 302.82403564]
[59.01704407 289.42410278]
[69.32833099 278.39776611]
[82.23271179 270.56326294]
[96.77259827 266.50195312]
[96.77259827 251.50193787]
[96.77259827 236.50193787]
[96.77259827 221.50193787]
[96.77259827 206.50193787]
[96.77259827 191.50193787]
[96.77259827 176.50193787]
[96.77259827 161.50193787]
[96.77259827 146.50193787]
[96.77259827 131.50193787]
[85.69721222 127.66485596]
[76.95098114 120.15763092]
[71.66170502 110.13654327]
[70.44145203 99.06723785]
[56.11885452 103.52405548]
[45.24081421 115.01226044]
[30.78939247 111.40591431]
[16.46679497 115.86273193]
[5.74596214 128.27223206]
[-10.30839157 124.92712402]
[-15.18092346 109.26856995]
[-3.85919023 97.40473938]
[12.00998020 101.54013062]
[26.33257675 97.08332062]
[36.18616867 85.91389465]
[51.66203690 89.20145416]
[65.98463440 84.74464417]
[74.75083923 72.57280731]
[74.43878174 57.57604980]
[74.12673187 42.57929611]
[73.81467438 27.58254242]
[63.14892578 38.12966919]
[48.21423340 39.52784729]
[35.77615356 31.14368629]
[31.46925735 16.77529526]
[37.24461365 2.93169475]
[50.48593140 -4.11582756]
[65.19475555 -1.17467582]
[74.70799255 10.42315960]
[68.74912262 -4.23298120]
[78.01085663 -15.89786625]
[79.87847137 -30.78114510]
[81.74608612 -45.66442490]
[83.61370087 -60.54770660]
[85.48130798 -75.43098450]
[70.94767761 -79.22946930]
[57.03420639 -84.89253998]
[43.97897339 -92.32328033]
[32.00537109 -101.39454651]
[21.31828499 -111.95111847]
[12.10058498 -123.81235504]
[4.50999784 -136.77529907]
[-1.32359159 -150.61814880]
[-5.30036354 -165.10400391]
[-7.35226917 -179.98503113]
[-7.44419861 -195.00656128]
[-5.57457876 -209.91159058]
[-1.77540040 -224.44503784]
[3.88832664 -238.35824585]
[11.31968880 -251.41311646]
[20.39152527 -263.38629150]
[30.94860649 -274.07287598]
[42.81028748 -283.29000854]
[55.77359390 -290.87997437]
[69.61671448 -296.71292114]
[84.10276794 -300.68899536]
[98.98388672 -302.74017334]
[114.00542450 -302.83139038]
[128.91035461 -300.96105957]
[143.44361877 -297.16119385]
[157.35655212 -291.49682617]
[170.41108704 -284.06481934]
[182.38381958 -274.99243164]
[193.06990051 -264.43484497]
[202.28646851 -252.57270813]
[209.87582397 -239.60903931]
[215.70809937 -225.76565552]
[219.68348694 -211.27940369]
[221.73397827 -196.39819336]
[221.82447815 -181.37664795]
[219.95344543 -166.47180176]
[216.15287781 -151.93872070]
[210.48782349 -138.02604675]
[203.05522156 -124.97187805]
[193.98223877 -112.99957275]
[183.42414856 -102.31399536]
[171.56158447 -93.09799194]
[158.59756470 -85.50925446]
[144.75389099 -79.67764282]
[130.26745605 -75.70293427]
[115.38613892 -73.65316010]
[100.36459351 -73.56336975]
[98.49697876 -58.68009186]
[96.62936401 -43.79681396]
[94.76174927 -28.91353226]
[92.89414215 -14.03025246]
[98.98658752 -0.43866381]
[89.59127045 12.29077244]
[88.81142426 27.27048683]
[89.12348175 42.26723862]
[89.43553925 57.26399231]
[89.74759674 72.26074982]
[106.07012177 70.52183533]
[121.09898376 77.80946350]
[130.14811707 92.18941498]
[130.21852112 109.46726990]
[144.00090027 115.38722992]
[156.29057312 111.33531952]
[167.67082214 116.59925079]
[172.23745728 127.84438324]
[185.89370728 134.04978943]
[202.15428162 131.92240906]
[211.91078186 145.10356140]
[205.12655640 160.03361511]
[188.78063965 161.35380554]
[179.68829346 147.70603943]
[166.03205872 141.50062561]
[148.71463013 144.16642761]
[138.08094788 129.16961670]
[124.29856110 123.24964905]
[111.77259827 131.50193787]
[111.77259827 146.50193787]
[111.77259827 161.50193787]
[111.77259827 176.50193787]
[111.77259827 191.50193787]
[111.77259827 206.50193787]
[111.77259827 221.50193787]
[111.77259827 236.50193787]
[111.77259827 251.50193787]
[111.77259827 266.50195312]
[126.31248474 270.56326294]
[139.21685791 278.39776611]
[149.52815247 289.42410278]
[156.48117065 302.82403564]
[159.55996704 317.60317993]
[158.53607178 332.66485596]
[153.48547363 346.89138794]
[144.78295898 359.22705078]
[133.07429504 368.75646973]
[119.22835541 374.77249146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 37]
[25 36]
[27 34]
[28 33]
[38 112]
[39 111]
[40 110]
[41 109]
[49 108]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[116 130]
[117 129]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
