%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAAAACUGGGGGGGGGGAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCxxxxxxxxxxCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACCCCCCCCCCCGAAAAAAACU\
) } def
/len { sequence length } bind def

/coor [
[79.64659882 394.34625244]
[65.80065918 388.33023071]
[54.09200287 378.80081177]
[45.38947678 366.46514893]
[40.33887482 352.23861694]
[39.31498337 337.17694092]
[42.39378357 322.39776611]
[49.34680557 308.99783325]
[59.65808868 297.97149658]
[72.56246948 290.13699341]
[87.10235596 286.07568359]
[87.10235596 271.07568359]
[87.10235596 256.07568359]
[87.10235596 241.07568359]
[87.10235596 226.07568359]
[87.10235596 211.07568359]
[87.10235596 196.07568359]
[87.10235596 181.07568359]
[87.10235596 166.07568359]
[87.10235596 151.07568359]
[68.61949158 111.97802734]
[87.98628235 91.88322449]
[78.23862457 80.48220825]
[68.49097443 69.08118439]
[56.25401688 77.77388763]
[43.28710556 85.33467102]
[29.69464874 91.70266724]
[15.58608150 96.82659149]
[1.07500410 100.66519165]
[-13.72174835 103.18756866]
[-28.68503761 104.37340546]
[-43.69438553 104.21315002]
[-58.62894821 102.70810699]
[-73.36846924 99.87038422]
[-87.79428101 95.72283173]
[-101.79022980 90.29884338]
[-115.24362946 83.64208984]
[-128.04615784 75.80617523]
[-140.09472656 66.85417938]
[-151.29232788 56.85818863]
[-161.54881287 45.89868546]
[-170.78160095 34.06390762]
[-178.91635132 21.44914818]
[-185.88755798 8.15597153]
[-191.63908386 -5.70858955]
[-196.12464905 -20.03290367]
[-199.30812073 -34.70163727]
[-201.16386414 -49.59668732]
[-201.67695618 -64.59812164]
[-200.84323120 -79.58515167]
[-198.66943359 -94.43711853]
[-195.17304993 -109.03443146]
[-190.38224792 -123.25955963]
[-184.33557129 -136.99797058]
[-177.08172607 -150.13905334]
[-168.67912292 -162.57699585]
[-159.19540405 -174.21166992]
[-148.70693970 -184.94935608]
[-137.29815674 -194.70364380]
[-125.06093597 -203.39598083]
[-112.09379578 -210.95635986]
[-98.50114441 -217.32394409]
[-84.39241791 -222.44743347]
[-69.88122559 -226.28559875]
[-55.08439255 -228.80752563]
[-40.12106705 -229.99288940]
[-25.11172485 -229.83218384]
[-10.17720985 -228.32669067]
[4.56222725 -225.48851013]
[18.98791313 -221.34051514]
[32.98369598 -215.91610718]
[46.43688965 -209.25894165]
[59.23917389 -201.42263794]
[71.28747559 -192.47027588]
[82.48477936 -182.47393799]
[92.74092865 -171.51412964]
[101.97335052 -159.67906189]
[110.10771179 -147.06405640]
[117.07850647 -133.77066040]
[122.82962036 -119.90592957]
[127.31475067 -105.58148193]
[130.49777222 -90.91264343]
[132.35305786 -76.01753998]
[132.86567688 -61.01609421]
[132.03150940 -46.02908707]
[129.85725403 -31.17718887]
[126.36042786 -16.57998085]
[121.56918335 -2.35499644]
[115.52209473 11.38323402]
[108.26785278 24.52409554]
[99.86486816 36.96178436]
[90.38079834 48.59615326]
[79.89199829 59.33353424]
[89.63964844 70.73455048]
[99.38729858 82.13557434]
[114.03079987 85.38639832]
[127.68704224 79.18099213]
[141.34327698 72.97558594]
[143.46589661 57.69494247]
[153.53022766 46.00251770]
[168.32478333 41.62931824]
[183.12866211 45.97081757]
[193.21801758 57.64165878]
[195.37335205 72.91771698]
[188.90693665 86.92446899]
[175.88215637 95.19239044]
[160.45516968 95.08323669]
[147.54869080 86.63182831]
[133.89245605 92.83723450]
[120.23620605 99.04264069]
[120.31422424 106.54223633]
[134.53114319 101.75901031]
[143.47338867 113.80211639]
[134.78285217 126.02810669]
[120.47026062 121.54142761]
[120.54827881 129.04101562]
[134.33065796 134.96098328]
[148.11303711 140.88095093]
[161.89543152 146.80090332]
[175.77645874 139.60015869]
[191.02716064 143.05705261]
[200.44660950 155.53936768]
[199.58723450 171.15330505]
[188.85479736 182.52647400]
[173.31684875 184.28880310]
[160.30990601 175.60815430]
[155.97546387 160.58328247]
[142.19308472 154.66333008]
[128.41070557 148.74336243]
[114.62831879 142.82339478]
[102.10235596 151.07568359]
[102.10235596 166.07568359]
[102.10235596 181.07568359]
[102.10235596 196.07568359]
[102.10235596 211.07568359]
[102.10235596 226.07568359]
[102.10235596 241.07568359]
[102.10235596 256.07568359]
[102.10235596 271.07568359]
[102.10235596 286.07568359]
[116.64224243 290.13699341]
[129.54663086 297.97149658]
[139.85791016 308.99783325]
[146.81092834 322.39776611]
[149.88972473 337.17694092]
[148.86584473 352.23861694]
[143.81523132 366.46514893]
[135.11271667 378.80081177]
[123.40405273 388.33023071]
[109.55811310 394.34625244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 95]
[23 94]
[24 93]
[96 110]
[97 109]
[98 108]
[116 130]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
