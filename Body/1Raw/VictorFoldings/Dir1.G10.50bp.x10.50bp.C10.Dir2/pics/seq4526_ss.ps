%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUUAUUGGGGGGGGGGUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUxxxxxxxxxxCUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCCCCCCCCCCCUCCUUAUU\
) } def
/len { sequence length } bind def

/coor [
[119.25935364 500.95635986]
[105.41341400 494.94033813]
[93.70475006 485.41091919]
[85.00222778 473.07525635]
[79.95162201 458.84872437]
[78.92773438 443.78704834]
[82.00653076 429.00787354]
[88.95955658 415.60794067]
[99.27083588 404.58160400]
[112.17521667 396.74710083]
[126.71510315 392.68579102]
[126.71510315 377.68579102]
[126.71510315 362.68579102]
[126.71510315 347.68579102]
[126.71510315 332.68579102]
[126.71510315 317.68579102]
[126.71510315 302.68579102]
[126.71510315 287.68579102]
[126.71510315 272.68579102]
[126.71510315 257.68579102]
[126.71510315 242.68579102]
[124.84749603 227.80252075]
[121.14133453 213.26757812]
[117.43517303 198.73265076]
[113.72901154 184.19770813]
[110.02285004 169.66276550]
[106.31668854 155.12783813]
[102.61052704 140.59289551]
[98.90436554 126.05796051]
[84.57483673 122.44399261]
[73.95005798 111.27725983]
[70.79981995 95.54017639]
[76.75833130 79.95538330]
[90.61956024 69.56896973]
[83.99106598 56.11300278]
[77.36256409 42.65703583]
[70.73406982 29.20107269]
[61.22570801 17.59973145]
[49.33332825 8.45799637]
[53.34289551 22.91217804]
[50.30171585 37.60065079]
[40.88247299 49.27445984]
[27.16860962 55.35146332]
[12.19351196 54.48749161]
[-0.73046792 46.87363815]
[-8.74466515 34.19402313]
[-10.07641220 19.25325775]
[-4.43114042 5.35610390]
[6.94246912 -4.42351770]
[21.52867889 -7.92244482]
[36.10291290 -4.36583710]
[26.59455490 -15.96717834]
[17.08619690 -27.56851959]
[7.57783842 -39.16986084]
[-1.93051994 -50.77120209]
[-11.43887806 -62.37254333]
[-27.19753838 -65.37990570]
[-34.54385757 -79.64212799]
[-27.84236717 -94.21846771]
[-12.23387909 -97.92719269]
[0.30811176 -87.92329407]
[0.16246285 -71.88090515]
[9.67082119 -60.27956009]
[19.17918015 -48.67821884]
[28.68753815 -37.07687759]
[38.19589615 -25.47553635]
[47.70425415 -13.87419605]
[58.47506332 -3.43438315]
[70.36744690 5.70735073]
[64.93170929 -8.27309322]
[63.22643661 -23.17584610]
[65.36353302 -38.02282715]
[71.20274353 -51.83961487]
[80.36083221 -63.71940231]
[92.23674774 -72.88251495]
[106.05107117 -78.72756195]
[120.89714050 -80.87092590]
[135.80061340 -79.17195129]
[149.78335571 -73.74212646]
[161.92767334 -64.93782806]
[171.43650818 -53.33687973]
[177.68580627 -39.70066452]
[180.26539612 -24.92414093]
[179.00601196 -9.97710419]
[173.99028015 4.15946150]
[165.54740906 16.55776024]
[154.23149109 26.40408134]
[140.78521729 33.05220413]
[126.09105682 36.06580353]
[111.11341858 35.24709702]
[96.83528900 30.64981651]
[84.19003296 22.57257271]
[90.81853485 36.02853775]
[97.44702911 49.48450470]
[104.07553101 62.94046783]
[118.35099030 67.54603577]
[131.59358215 60.50090027]
[144.83616638 53.45576477]
[149.21311951 38.26965714]
[163.08650208 30.69966698]
[178.22547913 35.23693466]
[185.64837646 49.18957520]
[180.95129395 64.27973938]
[166.92095947 71.55470276]
[151.88130188 66.69834900]
[138.63871765 73.74348450]
[125.39612579 80.78862000]
[129.80561829 97.35221100]
[124.96031952 112.69228363]
[113.43930054 122.35179901]
[117.14546204 136.88673401]
[120.85162354 151.42167664]
[124.55778503 165.95660400]
[128.26394653 180.49154663]
[131.97010803 195.02648926]
[135.67626953 209.56141663]
[139.38243103 224.09635925]
[144.83622742 210.12295532]
[155.73042297 199.81195068]
[169.98245239 195.13441467]
[184.86793518 196.98448181]
[197.54133606 205.00849915]
[205.58001709 217.67260742]
[207.44729614 232.55592346]
[202.78625488 246.81336975]
[192.48786926 257.71948242]
[178.52078247 263.18945312]
[163.55494690 262.17764282]
[150.45123291 254.87747192]
[141.71510315 242.68579102]
[141.71510315 257.68579102]
[141.71510315 272.68579102]
[141.71510315 287.68579102]
[141.71510315 302.68579102]
[141.71510315 317.68579102]
[141.71510315 332.68579102]
[141.71510315 347.68579102]
[141.71510315 362.68579102]
[141.71510315 377.68579102]
[141.71510315 392.68579102]
[156.25498962 396.74710083]
[169.15937805 404.58160400]
[179.47065735 415.60794067]
[186.42367554 429.00787354]
[189.50247192 443.78704834]
[188.47859192 458.84872437]
[183.42797852 473.07525635]
[174.72546387 485.41091919]
[163.01679993 494.94033813]
[149.17086792 500.95635986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[34 95]
[35 94]
[36 93]
[37 92]
[38 69]
[39 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
