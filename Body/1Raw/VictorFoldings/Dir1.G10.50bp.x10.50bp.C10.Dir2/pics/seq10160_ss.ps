%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCCCCAUGGGGGGGGGGCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGxxxxxxxxxxCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUCCCCCCCCCCAAACCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[136.03550720 499.13714600]
[122.81531525 491.86468506]
[111.92851257 481.41766357]
[104.11737823 468.50842285]
[99.91449738 454.01712036]
[99.60642242 438.93176270]
[103.21416473 424.28094482]
[110.49173737 411.06356812]
[120.94294739 400.18078613]
[133.85520935 392.37463379]
[148.34814453 388.17736816]
[148.03608704 373.18060303]
[147.72402954 358.18383789]
[147.41197205 343.18710327]
[147.09991455 328.19033813]
[146.78787231 313.19357300]
[146.47581482 298.19683838]
[146.16375732 283.20007324]
[145.85169983 268.20333862]
[143.36657715 253.41061401]
[138.76101685 239.13516235]
[134.15545654 224.85969543]
[122.88413239 215.12283325]
[126.01052856 199.61360168]
[121.40496063 185.33813477]
[116.65114594 171.11135864]
[111.74959564 156.93479919]
[106.84804535 142.75823975]
[101.94649506 128.58168030]
[87.42664337 125.74125671]
[76.26030731 116.03522491]
[71.42572021 102.05235291]
[74.21234894 87.52207947]
[83.87694550 76.31986237]
[78.97539520 62.14330673]
[67.70539856 55.78398895]
[63.93597794 43.82529068]
[69.17640686 32.87790680]
[64.57083893 18.60244560]
[55.80463028 6.43060827]
[43.72464371 -2.46174121]
[31.64465523 -11.35409069]
[19.56466675 -20.24644089]
[7.48467827 -29.13879013]
[-4.77768993 -37.77790451]
[-17.21713066 -46.16004944]
[-29.65657043 -54.54219437]
[-43.78487396 -48.34585571]
[-59.01674271 -50.79406357]
[-70.49174500 -61.10560989]
[-74.54824066 -75.99010468]
[-69.89183044 -90.69797516]
[-58.00834656 -100.53598022]
[-42.68976974 -102.36486053]
[-28.82420349 -95.60101318]
[-20.83609772 -82.40277100]
[-21.27442741 -66.98163605]
[-8.83498669 -58.59949112]
[3.60445333 -50.21734619]
[8.43915272 -50.25195312]
[13.33314705 -47.20562363]
[16.37702751 -41.21877670]
[28.45701599 -32.32642746]
[40.53700638 -23.43407822]
[52.61699295 -14.54172993]
[64.69698334 -5.64937973]
[59.24491119 -19.62346077]
[56.56891251 -34.38283157]
[56.76797485 -49.38151169]
[59.83473587 -64.06466675]
[65.65574646 -77.88912964]
[74.01567841 -90.34350586]
[84.60527039 -100.96708679]
[97.03279877 -109.36688232]
[110.83854675 -115.23215485]
[125.51179504 -118.34593964]
[140.50976562 -118.59305573]
[155.27763367 -115.96436310]
[169.26910400 -110.55709076]
[181.96661377 -102.57128143]
[192.90045166 -92.30233765]
[201.66615295 -80.13012695]
[207.93943787 -66.50493622]
[211.48826599 -51.93078613]
[212.18133545 -36.94680786]
[209.99302673 -22.10728836]
[205.00428772 -7.96117640]
[197.39965820 4.96823120]
[187.46044922 16.20264816]
[175.55433655 25.32649040]
[162.12174988 32.00224304]
[147.65959167 35.98295975]
[132.70286560 37.12138367]
[117.80482483 35.37540054]
[103.51659393 30.80959892]
[90.36672974 23.59287834]
[78.84629822 13.99688053]
[83.45186615 28.27234077]
[97.08186340 39.28247833]
[93.15195465 57.24175644]
[98.05350494 71.41831207]
[112.57335663 74.25874329]
[123.73969269 83.96477509]
[128.57427979 97.94764709]
[125.78765106 112.47792053]
[116.12305450 123.68013763]
[121.02460480 137.85668945]
[125.92615509 152.03324890]
[130.82769775 166.20980835]
[136.62600708 173.35345459]
[135.68041992 180.73257446]
[140.28598022 195.00804138]
[151.88673401 205.76597595]
[148.43090820 220.25413513]
[153.03646851 234.52960205]
[157.64204407 248.80505371]
[161.73168945 234.37332153]
[170.94873047 222.53921509]
[183.93978882 215.04039001]
[198.79733276 212.97793579]
[213.33973694 216.65469360]
[225.43167114 225.53077698]
[233.29763794 238.30287170]
[235.78263855 253.09559631]
[232.52177429 267.73687744]
[223.99385071 280.07684326]
[211.45108032 288.30355835]
[196.73518372 291.20907593]
[182.00692749 288.36672974]
[169.42897034 280.19390869]
[160.84844971 267.89126587]
[161.16050720 282.88803101]
[161.47256470 297.88476562]
[161.78462219 312.88153076]
[162.09667969 327.87829590]
[162.40873718 342.87503052]
[162.72079468 357.87179565]
[163.03283691 372.86856079]
[163.34489441 387.86529541]
[177.99989319 391.45605469]
[191.22570801 398.71832275]
[202.12057495 409.15692139]
[209.94166565 422.06011963]
[214.15573120 436.54818726]
[214.47546387 451.63330078]
[210.87902832 466.28689575]
[203.61166382 479.50991821]
[193.16886902 490.40072632]
[180.26263428 498.21685791]
[165.77294922 502.42532349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 116]
[21 115]
[22 114]
[24 112]
[25 111]
[26 109]
[27 108]
[28 107]
[29 106]
[34 101]
[35 100]
[38 98]
[39 97]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 59]
[46 58]
[47 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
