%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUAACUUGGGGGGGGGGGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAxxxxxxxxxxAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCCCCCCCCCCCAACAACUU\
) } def
/len { sequence length } bind def

/coor [
[87.78199005 541.05621338]
[73.93605042 535.04022217]
[62.22739029 525.51080322]
[53.52486420 513.17510986]
[48.47426224 498.94857788]
[47.45037079 483.88690186]
[50.52917099 469.10775757]
[57.48219299 455.70782471]
[67.79347992 444.68148804]
[80.69786072 436.84698486]
[95.23774719 432.78567505]
[95.23774719 417.78567505]
[95.23774719 402.78567505]
[95.23774719 387.78567505]
[95.23774719 372.78567505]
[95.23774719 357.78567505]
[95.23774719 342.78567505]
[95.23774719 327.78567505]
[95.23774719 312.78567505]
[95.23774719 297.78567505]
[80.16724396 294.66702271]
[66.06312561 288.49505615]
[53.53688049 279.53479004]
[43.13212585 268.17221069]
[35.30100250 254.89765930]
[30.38451958 240.28456116]
[28.59772301 224.96478271]
[30.02028275 209.60124207]
[34.59293365 194.85922241]
[42.11996460 181.37760925]
[52.27756119 169.74113464]
[64.62776947 160.45507812]
[78.63735962 153.92329407]
[93.70084381 150.43064880]
[93.38878632 135.43389893]
[93.07672882 120.43714142]
[92.76467896 105.44039154]
[90.33018494 102.35661316]
[89.29714966 98.19986725]
[90.11940002 93.63455200]
[92.93045044 89.50516510]
[93.55442810 74.51815033]
[86.39788818 60.40806198]
[94.65792847 48.01366806]
[95.28190613 33.02665329]
[95.90588379 18.03963661]
[93.67358398 14.14369965]
[92.91562653 10.14412975]
[93.47717285 6.52936029]
[95.05714417 3.68372226]
[97.25649261 1.84791315]
[99.12410736 -13.03536701]
[100.99172211 -27.91864586]
[86.42379761 -31.57009125]
[72.40224457 -36.95092392]
[59.13153076 -43.98267365]
[46.80518341 -52.56279373]
[35.60295486 -62.56616974]
[25.68821144 -73.84691620]
[17.20553589 -86.24052429]
[10.27863312 -99.56626129]
[5.00851488 -113.62980652]
[1.47203672 -128.22605896]
[-0.27922937 -143.14218140]
[-0.21974485 -158.16062927]
[1.64962280 -173.06239319]
[5.30161285 -187.63018799]
[10.68296814 -201.65153503]
[17.71521378 -214.92198181]
[26.29579735 -227.24801636]
[36.29959106 -238.44985962]
[47.58070374 -248.36418152]
[59.97463226 -256.84640503]
[73.30063629 -263.77279663]
[87.36437225 -269.04238892]
[101.96076202 -272.57833862]
[116.87693787 -274.32904053]
[131.89538574 -274.26898193]
[146.79708862 -272.39907837]
[161.36473083 -268.74652100]
[175.38589478 -263.36465454]
[188.65608215 -256.33190918]
[200.98178101 -247.75086975]
[212.18325806 -237.74665833]
[222.09716797 -226.46516418]
[230.57890320 -214.07092285]
[237.50482178 -200.74465942]
[242.77388000 -186.68072510]
[246.30926514 -172.08421326]
[248.05941772 -157.16796875]
[247.99880981 -142.14952087]
[246.12832642 -127.24788666]
[242.47525024 -112.68037415]
[237.09284973 -98.65942383]
[230.05961609 -85.38950348]
[221.47810364 -73.06411743]
[211.47348022 -61.86301041]
[200.19161987 -51.94953156]
[187.79705811 -43.46824646]
[174.47053528 -36.54283905]
[160.40640259 -31.27429771]
[145.80975342 -27.73945808]
[130.89344788 -25.98986435]
[115.87500000 -26.05103302]
[114.00738525 -11.16775322]
[112.13977814 3.71552634]
[110.89289856 18.66361237]
[110.26892090 33.65063095]
[109.64494324 48.63764572]
[116.84611511 61.67576218]
[108.54144287 75.14212799]
[107.91746521 90.12914276]
[107.76142883 105.12833405]
[108.07348633 120.12508392]
[108.38554382 135.12184143]
[108.69760132 150.11859131]
[123.10031128 152.74897766]
[136.70327759 158.14997864]
[148.97929382 166.11016846]
[159.45304871 176.31900024]
[167.71942139 188.37889099]
[173.45924377 201.82072449]
[176.45153809 216.12208557]
[176.58212280 230.72756958]
[173.84785461 245.07035828]
[168.35676575 258.59420776]
[160.32377625 270.77499390]
[150.06225586 281.14114380]
[137.97181702 289.29168701]
[124.52275848 294.91195679]
[110.23774719 297.78567505]
[110.23774719 312.78567505]
[110.23774719 327.78567505]
[110.23774719 342.78567505]
[110.23774719 357.78567505]
[110.23774719 372.78567505]
[110.23774719 387.78567505]
[110.23774719 402.78567505]
[110.23774719 417.78567505]
[110.23774719 432.78567505]
[124.77763367 436.84698486]
[137.68200684 444.68148804]
[147.99330139 455.70782471]
[154.94631958 469.10775757]
[158.02511597 483.88690186]
[157.00122070 498.94857788]
[151.95062256 513.17510986]
[143.24810791 525.51080322]
[131.53944397 535.04022217]
[117.69349670 541.05621338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 116]
[35 115]
[36 114]
[37 113]
[41 112]
[42 111]
[44 109]
[45 108]
[46 107]
[51 106]
[52 105]
[53 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
