%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCCCGAGGGGGGGGGGCAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGxxxxxxxxxxCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACACCCCCCCCCCUCAAGCCCGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 397.58059692]
[71.19830322 391.56454468]
[59.48964310 382.03512573]
[50.78712082 369.69946289]
[45.73651886 355.47296143]
[44.71262741 340.41125488]
[47.79142761 325.63211060]
[54.74444962 312.23217773]
[65.05573273 301.20584106]
[77.96011353 293.37133789]
[92.50000000 289.31002808]
[92.50000000 274.31002808]
[92.50000000 259.31002808]
[92.50000000 244.31002808]
[92.50000000 229.31002808]
[92.50000000 214.31002808]
[92.50000000 199.31002808]
[92.50000000 184.31002808]
[92.50000000 169.31002808]
[92.50000000 154.31002808]
[78.66166687 150.50251770]
[66.28570557 143.23396301]
[56.22026062 133.00247192]
[49.15514374 120.50925446]
[45.57454300 106.61048889]
[45.72384262 92.25868988]
[49.59281540 78.43741608]
[56.91630936 66.09387970]
[67.19242859 56.07400894]
[79.71692657 49.06449127]
[93.63147736 45.54569626]
[93.94353485 30.54894447]
[94.25558472 15.55219078]
[94.56764221 0.55543685]
[86.41577911 13.14698696]
[74.82708740 22.67075539]
[60.89466476 28.22841263]
[45.93268204 29.29573441]
[31.35243607 25.77204514]
[18.52920151 17.98971558]
[8.67252922 6.68281460]
[2.71214962 -7.08213615]
[1.21027446 -22.00675964]
[4.30856800 -36.68329239]
[11.71478462 -49.72736740]
[22.73033333 -59.90861130]
[36.31617355 -66.26667023]
[51.19081879 -68.20183563]
[65.95122528 -65.53155518]
[79.20511627 -58.50771332]
[89.70232391 -47.79283142]
[96.45269012 -34.39759064]
[98.81950378 -19.58530426]
[104.59577179 -33.42852402]
[110.37204742 -47.27173996]
[116.14831543 -61.11495972]
[121.92459106 -74.95817566]
[127.70086670 -88.80139160]
[114.59140015 -96.12531281]
[102.40227509 -104.89588928]
[91.29239655 -114.99877167]
[81.40660095 -126.30226135]
[72.87377167 -138.65898132]
[65.80516052 -151.90785217]
[60.29290390 -165.87612915]
[56.40887451 -180.38171387]
[54.20371246 -195.23550415]
[53.70616531 -210.24385071]
[54.92271423 -225.21107483]
[57.83750153 -239.94204712]
[62.41252518 -254.24473572]
[68.58815002 -267.93267822]
[76.28385162 -280.82739258]
[85.39930725 -292.76080322]
[95.81567383 -303.57733154]
[107.39715576 -313.13592529]
[119.99276733 -321.31201172]
[133.43829346 -327.99899292]
[147.55845642 -333.10964966]
[162.16914368 -336.57739258]
[177.07991028 -338.35702515]
[192.09632874 -338.42529297]
[207.02265930 -336.78137207]
[221.66429138 -333.44662476]
[235.83033752 -328.46459961]
[249.33613586 -321.90017700]
[262.00558472 -313.83898926]
[273.67352295 -304.38610840]
[284.18783569 -293.66476440]
[293.41143799 -281.81475830]
[301.22409058 -268.99057007]
[307.52395630 -255.35935974]
[312.22885132 -241.09886169]
[315.27749634 -226.39500427]
[316.63012695 -211.43946838]
[316.26907349 -196.42721558]
[314.19909668 -181.55398560]
[310.44714355 -167.01368713]
[305.06216431 -152.99584961]
[298.11434937 -139.68324280]
[289.69424438 -127.24942780]
[279.91165161 -115.85649872]
[268.89410400 -105.65299225]
[256.78524780 -96.77192688]
[243.74295044 -89.32908630]
[229.93721008 -83.42150116]
[215.54804993 -79.12619019]
[200.76304626 -76.49915314]
[185.77494812 -75.57463837]
[170.77915955 -76.36469269]
[155.97119141 -78.85903168]
[141.54408264 -83.02512360]
[135.76780701 -69.18190002]
[129.99153137 -55.33868408]
[124.21526337 -41.49546814]
[118.43899536 -27.65225029]
[112.66271973 -13.80903244]
[109.56439972 0.86749309]
[109.25234222 15.86424637]
[108.94028473 30.86100006]
[108.62822723 45.85775375]
[123.48450470 50.45903397]
[136.45095825 59.04690170]
[146.48420715 70.93029022]
[152.77682495 85.15292358]
[154.82247925 100.57032013]
[152.45652771 115.94181824]
[145.86938477 130.03047180]
[135.59109497 141.70254517]
[122.44878387 150.01881409]
[107.50000000 154.31002808]
[107.50000000 169.31002808]
[107.50000000 184.31002808]
[107.50000000 199.31002808]
[107.50000000 214.31002808]
[107.50000000 229.31002808]
[107.50000000 244.31002808]
[107.50000000 259.31002808]
[107.50000000 274.31002808]
[107.50000000 289.31002808]
[122.03988647 293.37133789]
[134.94427490 301.20584106]
[145.25555420 312.23217773]
[152.20857239 325.63211060]
[155.28736877 340.41125488]
[154.26348877 355.47296143]
[149.21287537 369.69946289]
[140.51036072 382.03512573]
[128.80169678 391.56454468]
[114.95575714 397.58059692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 121]
[32 120]
[33 119]
[34 118]
[53 117]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
