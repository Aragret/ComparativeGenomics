%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAACACAUCGGGGGGGGGGUCUGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUxxxxxxxxxxCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCCCCCCCCCCCUAAACACAUC\
) } def
/len { sequence length } bind def

/coor [
[70.31408691 381.72967529]
[56.15348434 376.57467651]
[43.56373978 368.29244995]
[33.22380066 357.32968140]
[25.69128990 344.27755737]
[21.37242508 329.83996582]
[20.50011635 314.79550171]
[23.12140656 299.95550537]
[29.09493256 286.12026978]
[38.09855270 274.03591919]
[49.64670944 264.35412598]
[63.11662292 257.59704590]
[77.78188324 254.12908936]
[77.78188324 239.12908936]
[77.78188324 224.12908936]
[77.78188324 209.12908936]
[77.78188324 194.12908936]
[77.78188324 179.12908936]
[77.78188324 164.12908936]
[77.78188324 149.12908936]
[77.78188324 134.12908936]
[77.78188324 119.12908173]
[88.77836609 88.66941071]
[86.05728912 73.91828156]
[83.33621216 59.16715240]
[68.84931183 35.18930817]
[57.97742081 24.85480309]
[47.10552979 14.52029896]
[36.23363876 4.18579578]
[24.77338791 13.88682175]
[12.33143711 22.29188538]
[-0.94633836 29.30244255]
[-14.90426445 34.83629608]
[-29.37869072 38.82856750]
[-44.19991302 41.23244858]
[-59.19415665 42.01975250]
[-74.18562317 41.18125153]
[-88.99855042 38.72677612]
[-103.45925903 34.68510056]
[-117.39820862 29.10361481]
[-130.65196228 22.04775810]
[-143.06513977 13.60025692]
[-154.49220276 3.86015391]
[-164.79916382 -7.05835390]
[-173.86518860 -19.02725220]
[-181.58396912 -31.90621185]
[-187.86502075 -45.54423141]
[-192.63468933 -59.78141785]
[-195.83706665 -74.45084381]
[-197.43460083 -89.38051605]
[-197.40856934 -104.39539337]
[-195.75926208 -119.31943512]
[-192.50601196 -133.97766113]
[-187.68698120 -148.19821167]
[-181.35867310 -161.81437683]
[-173.59526062 -174.66647339]
[-164.48777771 -186.60386658]
[-154.14300537 -197.48655701]
[-142.68223572 -207.18696594]
[-130.23983765 -215.59135437]
[-116.96167755 -222.60119629]
[-103.00345612 -228.13430786]
[-88.52881622 -232.12579346]
[-73.70746613 -234.52886963]
[-58.71318054 -235.31536865]
[-43.72175598 -234.47605896]
[-28.90896034 -232.02079773]
[-14.44846821 -227.97833252]
[-0.50982141 -222.39610291]
[12.74355793 -215.33953857]
[25.15628052 -206.89137268]
[36.58281326 -197.15065002]
[46.88918686 -186.23158264]
[55.95456314 -174.26220703]
[63.67265320 -161.38282776]
[69.95297241 -147.74446106]
[74.72187805 -133.50701904]
[77.92346954 -118.83742523]
[79.52020264 -103.90766907]
[79.49335480 -88.89279175]
[77.84323883 -73.96884155]
[74.58921051 -59.31078720]
[69.76941681 -45.09048843]
[63.44036484 -31.47467804]
[55.67626572 -18.62298584]
[46.56814194 -6.68609619]
[57.44003296 3.64840746]
[68.31192780 13.98291111]
[79.18381500 24.31741524]
[71.83625031 11.24021053]
[74.03103638 -3.59835100]
[84.84969330 -13.98857307]
[99.76478577 -15.58231544]
[112.53459167 -7.71262312]
[117.81515503 6.32716513]
[113.39664459 20.66162682]
[101.12692261 29.29237366]
[115.39276886 24.65711784]
[129.65861511 20.02186394]
[129.64036560 4.89391422]
[134.29974365 -9.49863434]
[143.18025208 -21.74574852]
[155.41186523 -30.64757729]
[169.79627991 -35.33201599]
[184.92424011 -35.34012222]
[199.31365967 -30.67111206]
[211.55482483 -21.78240013]
[220.44845581 -9.54481506]
[225.12324524 4.84273005]
[225.12121582 19.97068977]
[220.44256592 34.35698318]
[211.54565430 46.59218216]
[199.30210876 55.47761154]
[184.91143799 60.14276886]
[169.78349304 60.13060379]
[155.40032959 55.44231415]
[143.17109680 46.53720474]
[134.29386902 34.28771210]
[120.02802277 38.92296600]
[105.76217651 43.55821991]
[98.08733368 56.44607925]
[100.80841064 71.19720459]
[103.52948761 85.94833374]
[112.46879578 97.99361420]
[125.79921722 104.87110901]
[139.12963867 111.74859619]
[155.97802734 113.63748169]
[158.82707214 130.35032654]
[143.55604553 137.71459961]
[132.25213623 125.07901764]
[118.92172241 118.20152283]
[105.59130096 111.32403564]
[92.78188324 119.12908173]
[92.78188324 134.12908936]
[92.78188324 149.12908936]
[92.78188324 164.12908936]
[92.78188324 179.12908936]
[92.78188324 194.12908936]
[92.78188324 209.12908936]
[92.78188324 224.12908936]
[92.78188324 239.12908936]
[92.78188324 254.12908936]
[107.44714355 257.59704590]
[120.91706085 264.35412598]
[132.46522522 274.03591919]
[141.46884155 286.12026978]
[147.44236755 299.95550537]
[150.06365967 314.79550171]
[149.19134521 329.83996582]
[144.87248230 344.27755737]
[137.33996582 357.32968140]
[127.00003052 368.29244995]
[114.41028595 376.57467651]
[100.24967957 381.72967529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 123]
[24 122]
[25 121]
[26 89]
[27 88]
[28 87]
[29 86]
[97 120]
[98 119]
[99 118]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
