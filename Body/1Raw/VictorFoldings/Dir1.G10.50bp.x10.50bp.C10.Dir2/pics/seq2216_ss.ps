%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACUUUAAAGGGGGGGGGGUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAxxxxxxxxxxGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCCCCCCCCCCCUCAACUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[196.91235352 161.48106384]
[185.90161133 148.77516174]
[175.94090271 135.23001099]
[167.09391785 120.93216705]
[159.41723633 105.97298431]
[152.96000671 90.44805145]
[138.71330261 95.14185333]
[124.46661377 99.83565521]
[110.21992493 104.52944946]
[96.02217102 109.36927032]
[81.87485504 114.35459137]
[67.72753906 119.33991241]
[53.58022308 124.32523346]
[39.43290329 129.31056213]
[25.28558731 134.29588318]
[11.35487175 139.85781860]
[-2.33575344 145.98698425]
[-16.02637863 152.11616516]
[-29.71700478 158.24533081]
[-43.40763092 164.37451172]
[-57.09825516 170.50369263]
[-70.78887939 176.63285828]
[-84.47950745 182.76203918]
[-98.10648346 189.03143311]
[-111.66838074 195.44041443]
[-120.55556488 209.22265625]
[-136.91940308 208.14709473]
[-143.92617798 193.32020569]
[-134.36793518 179.99458313]
[-118.07735443 181.87852478]
[-104.51546478 175.46954346]
[-99.78247070 169.73272705]
[-90.60868073 169.07141113]
[-76.91805267 162.94223022]
[-63.22742844 156.81306458]
[-49.53680420 150.68388367]
[-35.84617996 144.55471802]
[-22.15555382 138.42553711]
[-8.46492767 132.29637146]
[5.22569799 126.16719055]
[6.34037256 123.53118134]
[8.59876728 121.19261932]
[11.88748932 119.60169220]
[15.92801476 119.15705872]
[20.30026627 120.14855957]
[34.44758224 115.16323853]
[48.59489822 110.17791748]
[62.74221420 105.19259644]
[76.88953400 100.20727539]
[91.03684998 95.22195435]
[97.03157806 89.75339508]
[105.52612305 90.28276062]
[119.77281189 85.58895874]
[134.01950073 80.89515686]
[148.26620483 76.20135498]
[144.89303589 62.99068069]
[142.38298035 49.58935547]
[140.74656677 36.05370712]
[139.99066162 22.44063568]
[140.11840820 8.80735016]
[141.12925720 -4.78884697]
[143.01895142 -18.29081345]
[145.77949524 -31.64180565]
[149.39929199 -44.78571320]
[153.86311340 -57.66730118]
[159.15214539 -70.23243713]
[165.24417114 -82.42830658]
[172.11355591 -94.20368195]
[179.73141479 -105.50906372]
[188.06570435 -116.29695129]
[197.08137512 -126.52202606]
[206.74053955 -136.14132690]
[217.00257874 -145.11442566]
[227.82434082 -153.40362549]
[239.16032410 -160.97412109]
[250.96289062 -167.79409790]
[263.18243408 -173.83491516]
[275.76754761 -179.07119751]
[288.66537476 -183.48095703]
[301.82165527 -187.04568481]
[315.18112183 -189.75042725]
[328.68759155 -191.58381653]
[342.28433228 -192.53817749]
[355.91418457 -192.60951233]
[369.51983643 -191.79756165]
[383.04412842 -190.10572815]
[396.43023682 -187.54118347]
[409.62188721 -184.11468506]
[422.56362915 -179.84068298]
[435.20108032 -174.73715210]
[447.48114014 -168.82556152]
[459.35223389 -162.13076782]
[470.76443481 -154.68093872]
[481.66979980 -146.50738525]
[492.02252197 -137.64450073]
[501.77908325 -128.12954712]
[510.89849854 -118.00251007]
[519.34246826 -107.30598450]
[527.07556152 -96.08493042]
[534.06518555 -84.38652802]
[540.28204346 -72.25994873]
[545.70001221 -59.75617981]
[550.29638672 -46.92776871]
[554.05181885 -33.82865143]
[556.95050049 -20.51387787]
[558.98040771 -7.03941917]
[560.13287354 6.53809023]
[560.40319824 20.16158295]
[559.79016113 33.77380371]
[574.69464111 35.46419907]
[589.59906006 37.15459824]
[604.50354004 38.84499359]
[619.40795898 40.53539276]
[634.31243896 42.22578812]
[646.51824951 32.18621063]
[662.23980713 33.80112076]
[672.14978027 46.11241531]
[670.36877441 61.81602859]
[657.95336914 71.59528351]
[642.26947021 69.64831543]
[632.62200928 57.13023758]
[617.71759033 55.43983841]
[602.81311035 53.74944305]
[587.90869141 52.05904388]
[573.00421143 50.36864853]
[558.09979248 48.67824936]
[554.95312500 65.18489838]
[550.49786377 81.38773346]
[544.76226807 97.18317413]
[537.78308105 112.47024536]
[529.60485840 127.15120697]
[520.27972412 141.13218689]
[509.86737061 154.32380676]
[498.43423462 166.64169312]
[486.05337524 178.00711060]
[472.80392456 188.34733582]
[458.77047729 197.59625244]
[444.04275513 205.69471741]
[428.71487427 212.59088135]
[412.88473511 218.24064636]
[396.65356445 222.60783386]
[380.12509155 225.66448975]
[363.40490723 227.39103699]
[346.59991455 227.77636719]
[329.81753540 226.81796265]
[313.16503906 224.52191162]
[296.74884033 220.90284729]
[280.67395020 215.98382568]
[265.04306030 209.79624939]
[249.95613098 202.37963867]
[235.50962830 193.78132629]
[221.79591370 184.05625916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[8 53]
[9 52]
[10 50]
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 31]
[25 30]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
