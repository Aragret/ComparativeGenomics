%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUUCCCCGGGGGGGGGGUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCxxxxxxxxxxCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCCCCCCCCCCCUAUUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.80033875 410.62847900]
[69.95439911 404.61245728]
[58.24573898 395.08303833]
[49.54321289 382.74734497]
[44.49261093 368.52084351]
[43.46871948 353.45916748]
[46.54751968 338.67999268]
[53.50054169 325.28005981]
[63.81182480 314.25372314]
[76.71620941 306.41921997]
[91.25609589 302.35791016]
[91.25609589 287.35791016]
[91.25609589 272.35791016]
[91.25609589 257.35791016]
[91.25609589 242.35791016]
[91.25609589 227.35791016]
[91.25609589 212.35791016]
[91.25609589 197.35791016]
[91.25609589 182.35791016]
[91.25609589 167.35791016]
[88.09051514 160.62554932]
[91.41537476 152.04666138]
[91.72743225 137.04991150]
[92.03948975 122.05316162]
[75.19257355 110.76087189]
[71.85260773 87.90584564]
[57.14464951 90.85132599]
[42.43668747 93.79681396]
[27.72872543 96.74229431]
[13.02076435 99.68777466]
[2.96429133 112.18765259]
[-13.07734776 111.97464752]
[-22.79837990 99.21215820]
[-18.74166298 83.69047546]
[-4.01916075 77.31650543]
[10.07528210 84.97981262]
[24.78324318 82.03433228]
[39.49120331 79.08885193]
[54.19916534 76.14336395]
[68.90712738 73.19788361]
[74.82708740 59.41550446]
[66.83717346 46.72057343]
[58.84725952 34.02564240]
[47.86159515 23.81216431]
[34.61900711 16.76702881]
[21.37642288 9.72189426]
[6.33676147 14.57824516]
[-7.69358110 7.30328560]
[-12.39065170 -7.78687906]
[-4.96776247 -21.73952293]
[10.17121887 -26.27678871]
[24.04460335 -18.70679855]
[28.42155647 -3.52069139]
[41.66414261 3.52444339]
[54.90672684 10.56957817]
[47.26841354 -2.33995867]
[42.75034714 -16.64335251]
[41.58704758 -31.59817505]
[43.83888626 -46.42818451]
[49.38899231 -60.36362076]
[57.94927597 -72.68115234]
[69.07540894 -82.74142456]
[82.18988037 -90.02226257]
[96.61198425 -94.14573669]
[111.59311676 -94.89781952]
[126.35567474 -92.23947906]
[140.13340759 -86.30869293]
[152.21115112 -77.41329956]
[161.96202087 -66.01502991]
[168.87988281 -52.70551300]
[172.60565186 -38.17559052]
[172.94595337 -23.17945290]
[169.88311768 -8.49548054]
[163.57612610 5.11414099]
[154.35234070 16.94299507]
[142.69053650 26.37709618]
[129.19601440 32.92675781]
[114.56923676 36.25202179]
[99.56941223 36.18027878]
[84.97510529 32.71525955]
[71.54219055 26.03572845]
[79.53210449 38.73065567]
[87.52201843 51.42558670]
[101.74880219 56.17940140]
[115.76551056 50.83789062]
[129.78222656 45.49637604]
[143.62544250 39.72010422]
[157.28167725 33.51469803]
[170.93792725 27.30928993]
[184.59416199 21.10388374]
[169.82766724 18.46751022]
[157.34696960 10.14693165]
[149.23411560 -2.46979213]
[146.84252930 -17.27790833]
[150.57118225 -31.80709267]
[159.79803467 -43.63354874]
[172.98385620 -50.78436279]
[187.92895508 -52.06661224]
[202.14013672 -47.26639175]
[213.24668884 -37.18448639]
[219.39575195 -23.50278664]
[219.56155396 -8.50370312]
[213.71641541 5.31057930]
[202.83665466 15.63478184]
[217.65441895 13.30367756]
[232.47216797 10.97257328]
[241.57121277 -1.94961667]
[257.15664673 -4.57063770]
[269.98190308 4.66451597]
[272.43801880 20.27679062]
[263.06777954 33.00370026]
[247.43040466 35.29459763]
[234.80326843 25.79033089]
[219.98551941 28.12143517]
[205.16775513 30.45253944]
[190.79957581 34.76012421]
[177.14332581 40.96553040]
[163.48709106 47.17093658]
[149.83085632 53.37634659]
[148.25480652 56.59870148]
[145.00511169 59.19506836]
[140.40415955 60.37138367]
[135.12373352 59.51308823]
[121.10702515 64.85459900]
[107.09030914 70.19611359]
[125.18353271 87.22362518]
[123.82010651 110.02185822]
[107.03623962 122.36521149]
[106.72418976 137.36196899]
[106.41213226 152.35871887]
[106.25609589 167.35791016]
[106.25609589 182.35791016]
[106.25609589 197.35791016]
[106.25609589 212.35791016]
[106.25609589 227.35791016]
[106.25609589 242.35791016]
[106.25609589 257.35791016]
[106.25609589 272.35791016]
[106.25609589 287.35791016]
[106.25609589 302.35791016]
[120.79598236 306.41921997]
[133.70036316 314.25372314]
[144.01164246 325.28005981]
[150.96466064 338.67999268]
[154.04347229 353.45916748]
[153.01957703 368.52084351]
[147.96897888 382.74734497]
[139.26644897 395.08303833]
[127.55778503 404.61245728]
[113.71184540 410.62847900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[41 83]
[42 82]
[43 81]
[44 55]
[45 54]
[46 53]
[84 125]
[85 124]
[86 123]
[87 119]
[88 118]
[89 117]
[90 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
