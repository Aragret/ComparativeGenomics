%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCAAUAAGGGGGGGGGGACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCxxxxxxxxxxUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACCCCCCCCCCCUUAGCAUUAA\
) } def
/len { sequence length } bind def

/coor [
[45.85455322 531.85467529]
[32.63435745 524.58221436]
[21.74755287 514.13519287]
[13.93642235 501.22598267]
[9.73354149 486.73464966]
[9.42546844 471.64932251]
[13.03320980 456.99850464]
[20.31078339 443.78109741]
[30.76199150 432.89834595]
[43.67425156 425.09219360]
[58.16719055 420.89489746]
[57.85513306 405.89816284]
[57.54307556 390.90139771]
[57.23102188 375.90463257]
[56.91896439 360.90789795]
[56.60690689 345.91113281]
[56.29485321 330.91436768]
[55.98279572 315.91763306]
[55.67073822 300.92086792]
[55.35868454 285.92413330]
[49.22749710 281.60455322]
[44.80031204 295.93634033]
[29.80189705 296.15441895]
[24.95990944 281.95739746]
[36.96512985 272.96545410]
[30.83394623 268.64587402]
[16.60716820 273.39968872]
[2.38038850 278.15350342]
[-10.72605515 288.90792847]
[-24.68840981 279.29080200]
[-19.31229401 263.21182251]
[-2.37342644 263.92672729]
[11.85335255 259.17291260]
[26.08013153 254.41911316]
[38.77629089 231.87866211]
[59.83216858 227.17657471]
[63.53833008 212.64163208]
[67.24449158 198.10668945]
[70.95065308 183.57176208]
[66.59786224 169.32737732]
[77.50498199 157.86677551]
[81.21114349 143.33184814]
[84.91730499 128.79690552]
[66.07067108 110.28254700]
[66.29827881 81.59734344]
[53.36022568 74.00743866]
[40.42216873 66.41752625]
[27.48411369 58.82762146]
[11.09053612 59.25502777]
[2.75549316 45.13202667]
[11.05336189 30.98715401]
[27.44800568 31.37144089]
[35.07402039 45.88956451]
[48.01207733 53.47947311]
[60.95013428 61.06938171]
[73.88819122 68.65928650]
[86.98134613 61.34018326]
[87.29340363 46.34342957]
[76.79591370 57.05803299]
[62.03295135 59.71417618]
[48.45914459 53.33046341]
[41.08974075 40.26555252]
[42.64758682 25.34666824]
[52.55709076 14.08604050]
[67.15688324 10.64424610]
[81.05264282 16.29296112]
[89.10993195 28.94425011]
[91.90225220 14.20644379]
[94.69458008 -0.53136212]
[97.48690033 -15.26916790]
[84.11703491 -22.32169533]
[73.42110443 -33.00291443]
[66.35017395 -46.36305618]
[63.53299713 -61.21414566]
[65.22006226 -76.23563385]
[71.26137543 -90.09182739]
[81.11972809 -101.55063629]
[93.91852570 -109.59314728]
[108.51972198 -113.50423431]
[123.62497711 -112.93612671]
[137.89114380 -107.93933105]
[150.04968262 -98.95816040]
[159.01945496 -86.79122162]
[164.00289917 -72.52039337]
[164.55688477 -57.41461182]
[160.63212585 -42.81708527]
[152.57763672 -30.02581596]
[141.10960388 -20.17819023]
[127.24777222 -14.14985466]
[112.22470856 -12.47684383]
[109.43238068 2.26096249]
[106.64006042 16.99876785]
[103.84773254 31.73657417]
[102.29015350 46.65548706]
[101.97809601 61.65224075]
[117.71183014 69.28808594]
[127.26075745 82.29122925]
[141.38555908 77.24246979]
[155.51036072 72.19371796]
[169.63516235 67.14495850]
[183.75996399 62.09620285]
[189.02314758 47.37095261]
[202.54621887 39.51852798]
[217.94400024 42.24659729]
[227.94612122 54.26705551]
[227.82991028 69.90420532]
[217.65020752 81.77466583]
[202.21357727 84.27356720]
[188.80873108 76.22100830]
[174.68391418 81.26976013]
[160.55911255 86.31851959]
[146.43431091 91.36727142]
[132.30950928 96.41603088]
[132.22439575 104.28224945]
[130.25218201 111.89768982]
[126.50835419 118.81639099]
[121.21216583 124.63317871]
[114.67376709 129.00741577]
[107.27605438 131.68293762]
[99.45223999 132.50306702]
[95.74607849 147.03800964]
[92.03992462 161.57293701]
[96.12762451 176.85696411]
[85.48558807 187.27792358]
[81.77942657 201.81285095]
[78.07326508 216.34779358]
[74.36710358 230.88273621]
[88.60985565 244.86116028]
[88.58247375 267.63525391]
[70.35543823 285.61206055]
[70.66749573 300.60882568]
[70.97954559 315.60556030]
[71.29160309 330.60232544]
[71.60366058 345.59909058]
[71.91571808 360.59582520]
[72.22777557 375.59259033]
[72.53983307 390.58932495]
[72.85188293 405.58609009]
[73.16394043 420.58285522]
[87.81893158 424.17361450]
[101.04474640 431.43588257]
[111.93961334 441.87448120]
[119.76071167 454.77767944]
[123.97477722 469.26574707]
[124.29450226 484.35083008]
[120.69807434 499.00445557]
[113.43070984 512.22747803]
[102.98790741 523.11828613]
[90.08168030 530.93438721]
[75.59198761 535.14288330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 34]
[27 33]
[28 32]
[36 127]
[37 126]
[38 125]
[39 124]
[41 122]
[42 121]
[43 120]
[45 56]
[46 55]
[47 54]
[48 53]
[57 95]
[58 94]
[67 93]
[68 92]
[69 91]
[70 90]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
