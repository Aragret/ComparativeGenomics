%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUAGCGGGGGGGGGGCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUxxxxxxxxxxACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCCCCCCCCCCCUCCUCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[86.13812256 579.54785156]
[73.57990265 571.19671631]
[63.49367905 559.98425293]
[56.51348495 546.61535645]
[53.07810211 531.93035889]
[53.40347672 516.85235596]
[57.46916199 502.32925415]
[65.01958466 489.27392578]
[75.58010864 478.50701904]
[88.48690796 470.70538330]
[102.92863464 466.35943604]
[102.30465698 451.37240601]
[101.68067932 436.38540649]
[101.05670166 421.39837646]
[100.43272400 406.41137695]
[99.80874634 391.42434692]
[99.18476868 376.43734741]
[98.56079102 361.45031738]
[97.93681335 346.46331787]
[97.31283569 331.47628784]
[96.68885803 316.48928833]
[96.06488037 301.50225830]
[95.44090271 286.51522827]
[94.81692505 271.52822876]
[93.88130188 256.55743408]
[92.63442230 241.60934448]
[91.38755035 226.66125488]
[79.88598633 217.26713562]
[78.40853882 202.12541199]
[88.33994293 190.12521362]
[87.09307098 175.17712402]
[84.97199249 173.25140381]
[83.51175690 170.34251404]
[83.10107422 166.70751953]
[84.02474976 162.74293518]
[86.41718292 158.94323730]
[86.41718292 143.94323730]
[86.41718292 128.94323730]
[86.41718292 113.94322968]
[77.15222931 102.14659119]
[62.57952881 98.59182739]
[46.99920654 103.70901489]
[34.95950699 92.57448578]
[38.84584808 76.64248657]
[54.66028595 72.30249786]
[66.13429260 84.01912689]
[80.70699310 87.57389069]
[86.96997070 83.44774628]
[78.71788025 70.92165375]
[91.24409485 62.66975021]
[99.49593353 75.19544983]
[105.75891876 71.06930542]
[108.24403381 56.27660370]
[110.72915649 41.48389435]
[113.21427155 26.69118690]
[115.69939423 11.89848042]
[118.18450928 -2.89422679]
[120.66963196 -17.68693352]
[106.35585022 -22.25820160]
[92.83836365 -28.82007980]
[80.39235687 -37.23897552]
[69.27123260 -47.34349442]
[59.70138931 -58.92791748]
[51.87766266 -71.75640106]
[45.95932770 -85.56777954]
[42.06688309 -100.08086395]
[40.27956772 -115.00019073]
[40.63376999 -130.02201843]
[43.12228012 -144.84051514]
[47.69443130 -159.15402222]
[54.25714874 -172.67109680]
[62.67681503 -185.11657715]
[72.78202057 -196.23709106]
[84.36703491 -205.80621338]
[97.19600677 -213.62915039]
[111.00775146 -219.54661560]
[125.52107239 -223.43817139]
[140.44050598 -225.22456360]
[155.46231079 -224.86943054]
[170.28067017 -222.38000488]
[184.59388733 -217.80696106]
[198.11054993 -211.24340820]
[210.55551147 -202.82296753]
[221.67539978 -192.71708679]
[231.24380493 -181.13146973]
[239.06593323 -168.30201721]
[244.98255920 -154.48991394]
[248.87321472 -139.97634888]
[250.65867615 -125.05679321]
[250.30262756 -110.03501129]
[247.81227112 -95.21681976]
[243.23835754 -80.90388489]
[236.67396545 -67.38761902]
[228.25276184 -54.94318008]
[218.14617920 -43.82392502]
[206.55996704 -34.25623703]
[193.73004150 -26.43488884]
[179.91755676 -20.51912117]
[165.40374756 -16.62936974]
[150.48410034 -14.84482384]
[135.46234131 -15.20181561]
[132.97721863 -0.40910837]
[130.49209595 14.38359928]
[128.00697327 29.17630577]
[125.52185822 43.96901321]
[123.03674316 58.76171875]
[120.55162048 73.55442810]
[126.85019684 87.54836273]
[125.67908478 101.07163239]
[118.94916534 110.79026794]
[109.77376556 115.00867462]
[101.41718292 113.94322968]
[101.41718292 128.94323730]
[101.41718292 143.94323730]
[101.41718292 158.94323730]
[102.04116058 173.93025208]
[103.28803253 188.87832642]
[115.07032013 199.06732178]
[116.12188721 214.24456787]
[106.33563995 225.41438293]
[107.58251190 240.36247253]
[108.82938385 255.31056213]
[112.33465576 261.03948975]
[112.36597443 266.80407715]
[109.80394745 270.90423584]
[110.42792511 285.89126587]
[111.05190277 300.87829590]
[111.67588043 315.86529541]
[112.29985809 330.85232544]
[112.92382812 345.83932495]
[113.54780579 360.82635498]
[114.17178345 375.81335449]
[114.79576111 390.80038452]
[115.41973877 405.78738403]
[116.04371643 420.77441406]
[116.66769409 435.76141357]
[117.29167175 450.74844360]
[117.91564941 465.73547363]
[132.66865540 468.86590576]
[146.17929077 475.56765747]
[157.59826660 485.41943359]
[166.20777893 497.80197144]
[171.46662903 511.93688965]
[173.04423523 526.93560791]
[170.84143066 541.85534668]
[164.99668884 555.75823975]
[155.87741089 567.77026367]
[144.05683899 577.13641357]
[130.27803040 583.26794434]
[115.40711975 585.77929688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 122]
[26 121]
[27 120]
[30 117]
[31 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 47]
[41 46]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[58 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
