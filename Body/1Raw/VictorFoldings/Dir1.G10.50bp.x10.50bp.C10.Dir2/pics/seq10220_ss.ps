%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCUACCCCUUGGGGGGGGGGCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACxxxxxxxxxxAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCCCCCCCCCCCUAGCCAACCCCUU\
) } def
/len { sequence length } bind def

/coor [
[93.86249542 502.01705933]
[80.87071228 494.42102051]
[69.61067963 484.43615723]
[60.51520157 472.44619751]
[53.93388367 458.91207886]
[50.11969757 444.35400391]
[49.21924591 429.33148193]
[51.26713943 414.42202759]
[56.18466949 400.19866943]
[63.78281021 387.20809937]
[73.76951599 375.94967651]
[85.76092529 366.85614014]
[99.29611206 360.27700806]
[113.85482788 356.46517944]
[112.95491028 341.49221802]
[112.05499268 326.51922607]
[111.15507507 311.54623413]
[110.25516510 296.57327271]
[109.35524750 281.60028076]
[108.45532990 266.62731934]
[107.55541229 251.65432739]
[106.65550232 236.68135071]
[105.75558472 221.70835876]
[90.26966095 209.96745300]
[88.29281616 190.33023071]
[101.52787781 175.28327942]
[99.73128510 160.39126587]
[97.93470001 145.49923706]
[96.13810730 130.60722351]
[81.29080200 124.52920532]
[71.50325775 111.81743622]
[69.42246246 95.90973663]
[75.61114502 81.10821533]
[88.39561462 71.41584015]
[86.30141449 56.56274796]
[84.05871582 41.73135376]
[81.66773987 26.92313766]
[79.27676392 12.11492157]
[76.88578796 -2.69329357]
[67.04769135 -15.08370876]
[72.65735626 -28.88156700]
[70.26638031 -43.68978119]
[67.87541199 -58.49799728]
[65.48443604 -73.30621338]
[50.49733734 -72.42422485]
[35.49790192 -73.06300354]
[20.64005470 -75.21598816]
[6.07625723 -78.86109924]
[-8.04404163 -83.96091461]
[-21.57594490 -90.46311951]
[-34.38059235 -98.30097961]
[-46.32658768 -107.39406586]
[-57.29134369 -117.64906311]
[-67.16234589 -128.96075439]
[-75.83830261 -141.21305847]
[-83.23017883 -154.28022766]
[-89.26213074 -168.02819824]
[-93.87225342 -182.31587219]
[-97.01324463 -196.99665833]
[-98.65287018 -211.91987610]
[-98.77429962 -226.93241882]
[-97.37628937 -241.88021851]
[-94.47319794 -256.60986328]
[-90.09479523 -270.97027588]
[-84.28602600 -284.81399536]
[-77.10649109 -297.99905396]
[-68.62986755 -310.39007568]
[-58.94313812 -321.85995483]
[-48.14570236 -332.29098511]
[-36.34836197 -341.57614136]
[-23.67217636 -349.62008667]
[-10.24722576 -356.34033203]
[3.78872967 -361.66790771]
[18.29165840 -365.54812622]
[33.11273575 -367.94119263]
[48.09987259 -368.82250977]
[63.09927750 -368.18307495]
[77.95703125 -366.02941895]
[92.52066803 -362.38366699]
[106.64073944 -357.28323364]
[120.17235565 -350.78045654]
[132.97665405 -342.94201660]
[144.92225647 -333.84841919]
[155.88656616 -323.59292603]
[165.75706482 -312.28079224]
[174.43247986 -300.02810669]
[181.82379150 -286.96063232]
[187.85513306 -273.21237183]
[192.46463013 -258.92449951]
[195.60496521 -244.24359131]
[197.24394226 -229.32029724]
[197.36470032 -214.30775452]
[195.96603394 -199.36001587]
[193.06230164 -184.63047791]
[188.68325806 -170.27029419]
[182.87388611 -156.42680359]
[175.69377136 -143.24208069]
[167.21659851 -130.85140991]
[157.52937317 -119.38195038]
[146.73147583 -108.95139313]
[134.93373108 -99.66677856]
[122.25718689 -91.62336731]
[108.83193970 -84.90371704]
[94.79574585 -79.57676697]
[80.29264832 -75.69718933]
[82.68362427 -60.88897324]
[85.07460022 -46.08075714]
[87.46557617 -31.27254105]
[97.13265228 -19.94130898]
[91.69400024 -5.08426857]
[94.08497620 9.72394657]
[96.47595215 24.53216171]
[98.86692810 39.34037781]
[103.06129456 45.47676086]
[101.15450287 54.46854782]
[103.24870300 69.32164001]
[116.14006042 73.70903778]
[125.88661194 83.21907806]
[130.58930969 95.99878693]
[129.33187866 109.55809784]
[122.35928345 121.25507355]
[111.03012848 128.81062317]
[112.82671356 143.70265198]
[114.62330627 158.59466553]
[116.41989899 173.48669434]
[126.27781677 177.81518555]
[133.37297058 185.80482483]
[136.45893860 195.95007324]
[135.03634644 206.37663269]
[129.43235779 215.18756104]
[120.72856140 220.80844116]
[121.62847900 235.78143311]
[122.52839661 250.75440979]
[123.42831421 265.72738647]
[124.32822418 280.70037842]
[125.22814178 295.67333984]
[126.12805939 310.64633179]
[127.02797699 325.61932373]
[127.92788696 340.59228516]
[128.82780457 355.56527710]
[143.73826599 357.60592651]
[157.96401978 362.51654053]
[170.95826721 370.10839844]
[182.22152710 380.08963013]
[191.32089233 392.07659912]
[197.90658569 405.60861206]
[201.72547913 420.16546631]
[202.63079834 435.18768311]
[200.58773804 450.09780884]
[195.67480469 464.32275391]
[188.08087158 477.31576538]
[178.09780884 488.57742310]
[166.10934448 497.67483521]
[152.57629395 504.25836182]
[138.01881409 508.07489014]
[122.99645996 508.97778320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[26 125]
[27 124]
[28 123]
[29 122]
[34 116]
[35 115]
[36 113]
[37 112]
[38 111]
[39 110]
[41 108]
[42 107]
[43 106]
[44 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
