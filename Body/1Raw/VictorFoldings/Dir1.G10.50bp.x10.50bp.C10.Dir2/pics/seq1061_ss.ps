%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCUAGCCGGGGGGGGGGACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUxxxxxxxxxxCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACACCCCCCCCCCUAGCCUACCC\
) } def
/len { sequence length } bind def

/coor [
[95.80499268 545.49804688]
[81.95905304 539.48205566]
[70.25039673 529.95263672]
[61.54787064 517.61694336]
[56.49726868 503.39044189]
[55.47337723 488.32873535]
[58.55217743 473.54959106]
[65.50519562 460.14965820]
[75.81648254 449.12332153]
[88.72086334 441.28881836]
[103.26074982 437.22750854]
[103.26074982 422.22750854]
[103.26074982 407.22750854]
[103.26074982 392.22750854]
[103.26074982 377.22750854]
[103.26074982 362.22750854]
[103.26074982 347.22750854]
[103.26074982 332.22750854]
[103.26074982 317.22750854]
[103.26074982 302.22750854]
[88.28468323 297.98001099]
[75.09271240 289.68862915]
[64.75170135 278.01425171]
[58.10065079 263.89184570]
[55.68262863 248.45536804]
[57.70043182 232.94686890]
[63.99961472 218.61653137]
[74.08026886 206.62184143]
[87.13670349 197.93412781]
[102.12179565 193.25993347]
[101.65375519 178.26722717]
[101.02977753 163.28021240]
[100.40579987 148.29319763]
[98.69311523 133.39129639]
[95.90078735 118.65348816]
[83.98638153 110.40769958]
[81.28908539 96.17144775]
[89.36140442 84.13883209]
[86.56908417 69.40103149]
[76.34127045 61.47350311]
[74.34722900 49.09437561]
[81.12088776 39.02338409]
[78.63577271 24.23067665]
[76.15065002 9.43797016]
[73.66553497 -5.35473680]
[70.26255798 -19.96362877]
[65.95497131 -34.33181381]
[61.64738846 -48.69999695]
[57.19057083 -63.02259445]
[52.58500671 -77.29805756]
[47.97944260 -91.57351685]
[40.38953400 -104.51157379]
[30.17605591 -115.49723816]
[19.96257591 -126.48290253]
[9.74909496 -137.46856689]
[-6.07670593 -141.76695251]
[-10.00493431 -157.68865967]
[2.00543499 -168.85481262]
[17.59916306 -163.77862549]
[20.73476028 -147.68205261]
[30.94824028 -136.69638062]
[41.16172028 -125.71071625]
[51.37519836 -114.72505188]
[48.34022903 -129.41481018]
[49.30470276 -144.38377380]
[54.19972229 -158.56259155]
[62.67559433 -170.93835449]
[74.12682343 -180.62696838]
[87.73535919 -186.93630981]
[102.52903748 -189.41564941]
[117.45102692 -187.88786316]
[131.43534851 -182.46208191]
[143.48297119 -173.52593994]
[152.73324585 -161.71778870]
[158.52536011 -147.88119507]
[160.44554138 -133.00460815]
[158.35661316 -118.15077209]
[152.40779114 -104.38082123]
[143.02406311 -92.67845154]
[130.87576294 -83.87963867]
[116.83075714 -78.61296844]
[101.89238739 -77.25467682]
[87.12780762 -79.90178680]
[73.59177399 -86.36521149]
[62.25490189 -96.17907715]
[66.86046600 -81.90361786]
[71.46603394 -67.62815857]
[76.54579163 -62.19293594]
[76.01557159 -53.00758362]
[80.32315826 -38.63939667]
[84.63073730 -24.27121353]
[93.03839874 -36.69342041]
[107.72969818 -39.72092056]
[120.36359406 -31.63483810]
[123.76713562 -17.02607727]
[116.00795746 -4.18882275]
[101.49135590 -0.41147640]
[88.45824432 -7.83985519]
[90.94335938 6.95285177]
[93.42848206 21.74555969]
[95.91359711 36.53826523]
[107.80148315 49.40986252]
[101.30688477 66.60870361]
[104.09921265 81.34651184]
[116.01361847 89.59230042]
[118.71091461 103.82855225]
[110.63859558 115.86116791]
[113.43091583 130.59896851]
[122.20187378 118.43055725]
[136.69853210 114.57740784]
[150.35377502 120.78502655]
[156.98162842 134.24131775]
[153.57962036 148.85043335]
[141.68888855 157.99430847]
[126.69605255 157.53068542]
[115.39281464 147.66921997]
[116.01679230 162.65623474]
[116.64076996 177.64324951]
[120.14338684 186.15110779]
[117.11855316 192.94787598]
[131.15603638 196.52705383]
[143.77215576 203.62232971]
[154.10461426 213.74151611]
[161.44908142 226.18598938]
[165.30720520 240.09892273]
[165.42044067 254.52429199]
[161.78733826 268.47256470]
[154.66319275 280.98852539]
[144.54216003 291.21682739]
[132.12300110 298.46029663]
[118.26074982 302.22750854]
[118.26074982 317.22750854]
[118.26074982 332.22750854]
[118.26074982 347.22750854]
[118.26074982 362.22750854]
[118.26074982 377.22750854]
[118.26074982 392.22750854]
[118.26074982 407.22750854]
[118.26074982 422.22750854]
[118.26074982 437.22750854]
[132.80064392 441.28881836]
[145.70501709 449.12332153]
[156.01629639 460.14965820]
[162.96932983 473.54959106]
[166.04812622 488.32873535]
[165.02423096 503.39044189]
[159.97363281 517.61694336]
[151.27110291 529.95263672]
[139.56243896 539.48205566]
[125.71650696 545.49804688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 120]
[31 118]
[32 117]
[33 116]
[34 108]
[35 107]
[38 104]
[39 103]
[42 101]
[43 100]
[44 99]
[45 98]
[46 91]
[47 90]
[48 89]
[49 87]
[50 86]
[51 85]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
