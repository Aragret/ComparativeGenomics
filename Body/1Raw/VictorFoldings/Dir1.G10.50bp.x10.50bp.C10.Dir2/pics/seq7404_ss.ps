%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUUUUUCGGGGGGGGGGAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAxxxxxxxxxxACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUCCCCCCCCCCUGACUAUUUC\
) } def
/len { sequence length } bind def

/coor [
[93.10176086 402.74688721]
[79.25582123 396.73086548]
[67.54715729 387.20144653]
[58.84463501 374.86578369]
[53.79403305 360.63925171]
[52.77014160 345.57757568]
[55.84894180 330.79843140]
[62.80196381 317.39849854]
[73.11325073 306.37216187]
[86.01763153 298.53765869]
[100.55751801 294.47634888]
[100.55751801 279.47634888]
[100.55751801 264.47634888]
[100.55751801 249.47634888]
[100.55751801 234.47634888]
[100.55751801 219.47634888]
[100.55751801 204.47634888]
[100.55751801 189.47634888]
[100.55751801 174.47634888]
[100.55751801 159.47634888]
[100.55751801 144.47634888]
[100.55751801 129.47634888]
[57.02436829 99.74137115]
[42.02518082 99.58533478]
[27.02599144 99.42929840]
[12.02680206 99.27326202]
[-1.85311019 106.86658478]
[-14.49920654 98.99730682]
[-29.49839592 98.84127045]
[-44.49758530 98.68523407]
[-50.52911758 101.63957214]
[-56.27137756 101.13184357]
[-60.11408997 98.19771576]
[-75.09380341 97.41787720]
[-90.07351685 96.63803101]
[-105.05323029 95.85818481]
[-117.88634491 105.48578644]
[-133.37800598 101.31585693]
[-139.64431763 86.54721069]
[-131.87831116 72.50909424]
[-116.03741455 69.97033691]
[-104.27338409 80.87847137]
[-89.29367065 81.65831757]
[-74.31395721 82.43815613]
[-59.33424377 83.21800232]
[-44.34154510 83.68605042]
[-29.34235764 83.84208679]
[-14.34317017 83.99812317]
[-1.53610015 76.39363098]
[12.18283844 84.27407074]
[27.18202782 84.43010712]
[42.18121719 84.58614349]
[57.18040466 84.74217987]
[66.80892944 73.24037933]
[64.01660919 58.50257111]
[61.22428131 43.76476288]
[58.43195724 29.02695847]
[55.63963318 14.28915215]
[52.84730911 -0.44865337]
[50.05498505 -15.18645954]
[47.26265717 -29.92426491]
[32.23959351 -31.59727669]
[18.37775612 -37.62561035]
[6.90972757 -47.47323608]
[-1.14476132 -60.26450729]
[-5.06951094 -74.86203766]
[-4.51553535 -89.96781158]
[0.46790618 -104.23864746]
[9.43768978 -116.40558624]
[21.59622765 -125.38674927]
[35.86239243 -130.38354492]
[50.96764374 -130.95166016]
[65.56884003 -127.04057312]
[78.36763763 -118.99805450]
[88.22599792 -107.53925323]
[94.26730347 -93.68305969]
[95.95436859 -78.66156769]
[93.13719177 -63.81047821]
[86.06626129 -50.45033646]
[75.37033081 -39.76911545]
[62.00046539 -32.71659088]
[64.79278564 -17.97878456]
[67.58511353 -3.24097776]
[70.37744141 11.49682808]
[73.16976166 26.23463440]
[75.96208954 40.97243881]
[78.75440979 55.71024704]
[81.54673767 70.44805145]
[88.70803833 72.67646027]
[103.03063202 77.13327789]
[110.19193268 79.36168671]
[120.85355377 68.81039429]
[124.65603638 52.85817719]
[140.44741821 48.43505859]
[151.98291016 60.09116364]
[147.39575195 75.83569336]
[131.40484619 79.47202301]
[120.74321747 90.02330780]
[126.37517548 103.92586517]
[141.37435913 104.08190155]
[156.25764465 102.21428680]
[170.75325012 98.35713196]
[185.24884033 94.49996948]
[196.59535217 83.47422028]
[210.88424683 87.67859650]
[224.63598633 77.76264191]
[237.97128296 88.23194122]
[231.60269165 103.94427490]
[214.74140930 102.17419434]
[204.43171692 112.92405701]
[189.10600281 108.99556732]
[174.61039734 112.85272980]
[160.11480713 116.70988464]
[174.24046326 121.75625610]
[185.17018127 132.02958679]
[191.08064270 145.81604004]
[190.98583984 160.81575012]
[184.90161133 174.52639771]
[173.84291077 184.66076660]
[159.65460205 189.52819824]
[144.70361328 188.31671143]
[131.48408508 181.22839355]
[122.20135498 169.44573975]
[118.40396881 154.93437195]
[120.72543335 140.11509705]
[128.77847290 127.46012115]
[141.21832275 119.08109283]
[126.21913910 118.92505646]
[115.55751801 129.47634888]
[115.55751801 144.47634888]
[115.55751801 159.47634888]
[115.55751801 174.47634888]
[115.55751801 189.47634888]
[115.55751801 204.47634888]
[115.55751801 219.47634888]
[115.55751801 234.47634888]
[115.55751801 249.47634888]
[115.55751801 264.47634888]
[115.55751801 279.47634888]
[115.55751801 294.47634888]
[130.09739685 298.53765869]
[143.00178528 306.37216187]
[153.31306458 317.39849854]
[160.26608276 330.79843140]
[163.34489441 345.57757568]
[162.32099915 360.63925171]
[157.27040100 374.86578369]
[148.56787109 387.20144653]
[136.85920715 396.73086548]
[123.01326752 402.74688721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 53]
[24 52]
[25 51]
[26 50]
[28 48]
[29 47]
[30 46]
[33 45]
[34 44]
[35 43]
[36 42]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[91 98]
[92 97]
[99 128]
[100 127]
[101 113]
[102 112]
[103 111]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
