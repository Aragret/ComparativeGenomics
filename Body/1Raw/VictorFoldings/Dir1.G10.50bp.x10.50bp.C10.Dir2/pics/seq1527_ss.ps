%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUAGAGGGGGGGGGGGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCUxxxxxxxxxxAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCCCCCCCCCCCUCUAGAG\
) } def
/len { sequence length } bind def

/coor [
[82.36873627 368.89663696]
[70.27380371 359.86251831]
[61.06566620 347.89953613]
[55.42763519 333.89541626]
[53.77808762 318.88937378]
[56.23942947 303.99493408]
[62.62901688 290.31738281]
[72.47269440 278.87164307]
[85.04000092 270.50711060]
[99.39836121 265.84448242]
[98.77438354 250.85746765]
[98.15040588 235.87045288]
[97.52642822 220.88343811]
[96.90245056 205.89642334]
[96.27847290 190.90940857]
[95.65449524 175.92239380]
[95.03051758 160.93537903]
[94.40653992 145.94834900]
[93.78256226 130.96133423]
[93.15858459 115.97432709]
[83.53005981 104.47251892]
[68.88655853 101.22169495]
[54.24305725 97.97087097]
[46.52876282 110.96883392]
[35.18998718 120.93250275]
[21.34547997 126.89555359]
[6.35605192 128.28555298]
[-8.30917168 124.97892761]
[-21.21674919 117.31176758]
[-31.10902596 106.04575348]
[-37.02667618 92.29251862]
[-38.40172577 77.40392303]
[-53.04522705 74.15309906]
[-70.43833923 80.10788727]
[-82.93273926 67.82415771]
[-97.64070129 64.87866974]
[-112.34866333 61.93318939]
[-127.05662537 58.98770523]
[-138.37313843 69.60449219]
[-153.77294922 71.50856781]
[-167.33450317 63.96777344]
[-173.84313965 49.88170242]
[-170.79611206 34.66673279]
[-159.36509705 24.17333031]
[-143.94554138 22.43642807]
[-130.46656799 30.12389374]
[-124.11113739 44.27974319]
[-109.40317535 47.22522736]
[-94.69521332 50.17071152]
[-79.98725891 53.11619186]
[-69.70981598 46.66007233]
[-57.39893341 49.03940201]
[-49.79440308 59.50959778]
[-35.15090179 62.76042557]
[-27.60503006 49.85225677]
[-16.42369080 39.89495850]
[-2.69353914 33.87307739]
[12.24584293 32.38787842]
[26.93263817 35.59733200]
[39.92583847 43.19942474]
[49.94662476 54.46051788]
[56.00422668 68.28614807]
[57.49388123 83.32736969]
[72.13738251 86.57819366]
[86.78088379 89.82901764]
[94.81628418 84.26559448]
[104.52297211 84.18041229]
[114.50569916 72.98464966]
[124.48842621 61.78888321]
[134.47114563 50.59311676]
[120.13117218 54.99370193]
[105.15078735 55.76051331]
[90.43643188 52.84714890]
[76.87844849 46.42989731]
[65.29721832 36.89705276]
[56.39350128 24.82543945]
[50.70605469 10.94549370]
[48.57901382 -3.90293050]
[50.14108276 -18.82137299]
[55.29774475 -32.90713882]
[63.73697662 -45.30792236]
[74.94813538 -55.27336121]
[88.25283813 -62.20046616]
[102.84604645 -65.67008209]
[117.84474182 -65.47227478]
[132.34136963 -61.61900330]
[145.45877075 -54.34343338]
[156.40321350 -44.08579636]
[164.51248169 -31.46676445]
[169.29586792 -17.24990463]
[170.46395874 -2.29545426]
[167.94607544 12.49170971]
[161.89454651 26.21683884]
[152.67697144 38.04804230]
[166.69369507 32.70652771]
[180.71040344 27.36501503]
[194.72711182 22.02350426]
[208.74383545 16.68199158]
[222.76054382 11.34047794]
[225.12075806 -3.83598113]
[234.76550293 -15.78899860]
[249.10035706 -21.30327415]
[264.26934814 -18.89549255]
[276.19207764 -9.21333599]
[281.66140747 5.13874292]
[279.20608521 20.30010796]
[269.48660278 32.19242859]
[255.11744690 37.61672974]
[239.96385193 35.11389923]
[228.10205078 25.35719109]
[214.08534241 30.69870377]
[200.06863403 36.04021454]
[186.05191040 41.38172913]
[172.03520203 46.72323990]
[158.01849365 52.06475449]
[145.66691589 60.57584381]
[135.68418884 71.77160645]
[125.70146179 82.96737671]
[115.71873474 94.16313934]
[128.59049988 86.46135712]
[143.59024048 86.55107117]
[156.36895752 94.40628052]
[163.22164917 107.74946594]
[162.16145325 122.71195221]
[153.49577332 134.95556641]
[139.73710632 140.93041992]
[124.87458801 138.90420532]
[113.21741486 129.46438599]
[108.14559937 115.35034943]
[108.76957703 130.33735657]
[109.39355469 145.32437134]
[110.01753235 160.31140137]
[110.64151001 175.29841614]
[111.26548767 190.28543091]
[111.88946533 205.27244568]
[112.51344299 220.25946045]
[113.13742065 235.24647522]
[113.76139832 250.23348999]
[114.38537598 265.22052002]
[129.08161926 268.67346191]
[142.30073547 275.96438599]
[153.06176758 286.55224609]
[160.56619263 299.65133667]
[164.25712585 314.28964233]
[163.86065674 329.38085938]
[159.40623474 343.80517578]
[151.22438049 356.49218750]
[139.92227173 366.50039673]
[126.33856964 373.08718872]
[111.48129272 375.76376343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 65]
[22 64]
[23 63]
[32 54]
[33 53]
[35 50]
[36 49]
[37 48]
[38 47]
[67 119]
[68 118]
[69 117]
[70 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
