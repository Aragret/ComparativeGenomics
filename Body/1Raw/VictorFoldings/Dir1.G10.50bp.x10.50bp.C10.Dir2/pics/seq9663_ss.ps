%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUACUAGUCUGGGGGGGGGGUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCxxxxxxxxxxUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUACCCCCCCCCCGCCCUACUAGUCU\
) } def
/len { sequence length } bind def

/coor [
[94.19194031 698.13519287]
[79.92017365 693.32580566]
[67.01618958 685.56042480]
[56.08353424 675.20227051]
[47.63354874 662.73583984]
[42.06145096 648.74420166]
[39.62786102 633.88177490]
[40.44660187 618.84368896]
[44.47938156 604.33331299]
[51.53757477 591.02935791]
[61.29105759 579.55401611]
[73.28364563 570.44403076]
[86.95442200 564.12548828]
[101.66397858 560.89392090]
[101.66397858 545.89392090]
[101.66397858 530.89392090]
[101.66397858 515.89392090]
[101.66397858 500.89389038]
[101.66397858 485.89389038]
[101.66397858 470.89389038]
[101.66397858 455.89389038]
[101.66397858 440.89389038]
[101.66397858 425.89389038]
[101.66397858 410.89389038]
[100.91390991 395.91265869]
[99.41565704 380.98767090]
[97.91739655 366.06268311]
[96.41913605 351.13769531]
[94.92088318 336.21270752]
[93.42262268 321.28771973]
[89.60396576 314.91076660]
[92.04676819 306.04956055]
[90.84744263 291.09759521]
[89.64811707 276.14562988]
[76.86170959 268.55313110]
[70.92766571 254.72378540]
[74.31430054 239.87844849]
[85.92718506 229.75682068]
[84.72785187 214.80484009]
[83.52852631 199.85287476]
[82.32920074 184.90089417]
[80.98033905 169.96166992]
[79.48207855 155.03668213]
[77.98382568 140.11169434]
[76.48556519 125.18670654]
[68.01216125 112.80924988]
[54.64025497 106.01276398]
[41.26835251 99.21628571]
[27.89644814 92.41979980]
[11.03690052 90.63317871]
[8.08651257 73.93792725]
[23.31256104 66.48113251]
[34.69292831 79.04789734]
[48.06483459 85.84437561]
[61.43673706 92.64086151]
[74.80863953 99.43733978]
[81.67191315 86.38217163]
[93.65614319 80.53871155]
[94.55605316 65.56573486]
[95.45597076 50.59275436]
[96.35588837 35.61977005]
[97.25580597 20.64679146]
[98.15571594 5.67381048]
[85.05950165 -7.95510197]
[86.00899506 -26.51423454]
[99.94287872 -38.32426071]
[100.24301147 -53.32125854]
[100.54314423 -68.31826019]
[100.84327698 -83.31525421]
[86.48598480 -88.04386139]
[74.16129303 -96.79562378]
[64.96511078 -108.79235840]
[59.71514130 -122.96730804]
[58.87821579 -138.06005859]
[62.52875137 -152.72856140]
[70.34214783 -165.66850281]
[81.62364197 -175.72927856]
[95.37009430 -182.01629639]
[110.35916901 -183.97050476]
[125.25805664 -181.41815186]
[138.74195862 -174.58618164]
[149.61189270 -164.08209229]
[156.90130615 -150.83988953]
[159.96205139 -136.03707886]
[158.52194214 -120.98990631]
[152.70903015 -107.03635406]
[143.04022217 -95.41716003]
[130.37525940 -87.16551208]
[115.84027100 -83.01512146]
[115.54013824 -68.01812744]
[115.24000549 -53.02112579]
[114.93987274 -38.02413177]
[124.48889923 -31.66217232]
[129.81332397 -21.36255074]
[129.47544861 -9.65272522]
[123.44348907 0.52965623]
[113.12870026 6.57372618]
[112.22878265 21.54670715]
[111.32886505 36.51968765]
[110.42895508 51.49266815]
[109.52903748 66.46565247]
[108.62911987 81.43862915]
[118.53327179 89.27088928]
[122.27774048 101.92256927]
[117.87142944 114.95971680]
[106.30496216 123.41802979]
[91.41055298 123.68844604]
[92.90881348 138.61343384]
[94.40706635 153.53842163]
[95.90532684 168.46340942]
[99.89583588 176.74372864]
[97.28117371 183.70156860]
[98.48050690 198.65354919]
[99.67983246 213.60551453]
[100.87915802 228.55749512]
[113.95693207 236.69862366]
[119.66658783 250.81434631]
[116.01279449 265.41275024]
[104.60009766 274.94628906]
[105.79942322 289.89825439]
[106.99874878 304.85025024]
[108.34761047 319.78945923]
[109.84586334 334.71444702]
[111.34412384 349.63943481]
[112.84238434 364.56442261]
[114.34064484 379.48941040]
[115.83889771 394.41439819]
[127.41694641 384.87768555]
[142.13294983 387.78271484]
[149.21849060 401.00372314]
[143.48873901 414.86624146]
[129.13642883 419.22640991]
[116.66397858 410.89389038]
[116.66397858 425.89389038]
[116.66397858 440.89389038]
[116.66397858 455.89389038]
[116.66397858 470.89389038]
[116.66397858 485.89389038]
[116.66397858 500.89389038]
[116.66397858 515.89392090]
[116.66397858 530.89392090]
[116.66397858 545.89392090]
[116.66397858 560.89392090]
[131.37353516 564.12548828]
[145.04431152 570.44403076]
[157.03689575 579.55401611]
[166.79039001 591.02935791]
[173.84858704 604.33331299]
[177.88136292 618.84368896]
[178.70010376 633.88177490]
[176.26651001 648.74420166]
[170.69441223 662.73583984]
[162.24443054 675.20227051]
[151.31176758 685.56042480]
[138.40779114 693.32580566]
[124.13601685 698.13519287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 127]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[32 121]
[33 120]
[34 119]
[38 115]
[39 114]
[40 113]
[41 112]
[42 110]
[43 109]
[44 108]
[45 107]
[46 56]
[47 55]
[48 54]
[49 53]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[66 92]
[67 91]
[68 90]
[69 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
