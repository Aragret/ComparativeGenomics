%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCCCUAGGGGGGGGGGGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUxxxxxxxxxxACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCCCCCCCCCCCAACCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[91.92207336 404.93945312]
[78.07613373 398.92343140]
[66.36746979 389.39401245]
[57.66494751 377.05834961]
[52.61434555 362.83181763]
[51.59045410 347.77014160]
[54.66925430 332.99096680]
[61.62227631 319.59106445]
[71.93356323 308.56472778]
[84.83794403 300.73022461]
[99.37783051 296.66888428]
[99.37783051 281.66888428]
[99.37783051 266.66888428]
[99.37783051 251.66889954]
[99.37783051 236.66889954]
[99.37783051 221.66889954]
[99.37783051 206.66889954]
[99.37783051 191.66889954]
[99.37783051 176.66889954]
[99.37783051 161.66889954]
[99.37783051 146.66889954]
[80.11708832 95.10433197]
[69.02577972 85.00567627]
[57.93445969 74.90702820]
[46.84314728 64.80838013]
[35.66494370 74.83029938]
[23.53018379 83.66989899]
[10.56338310 91.23648071]
[-3.10239601 97.45238495]
[-17.32691956 102.25383759]
[-31.96422195 105.59156036]
[-46.86409760 107.43130493]
[-61.87365341 107.75419617]
[-76.83886719 106.55692291]
[-91.60616302 103.85176086]
[-106.02401733 99.66647339]
[-119.94446564 94.04400635]
[-133.22467041 87.04206848]
[-145.72834778 78.73249817]
[-157.32719421 69.20056152]
[-167.90219116 58.54409027]
[-177.34481812 46.87241745]
[-185.55816650 34.30532837]
[-192.45797729 20.97177124]
[-197.97343445 7.00857687]
[-202.04792786 -7.44097185]
[-204.63966370 -22.22859955]
[-205.72204590 -37.20255661]
[-205.28396606 -52.20919418]
[-203.32991028 -67.09451294]
[-199.87992859 -81.70576477]
[-194.96943665 -95.89301300]
[-188.64883423 -109.51068115]
[-180.98294067 -122.41902161]
[-172.05046082 -134.48558044]
[-161.94303894 -145.58653259]
[-150.76440430 -155.60795593]
[-138.62925720 -164.44702148]
[-125.66211700 -172.01303101]
[-111.99607086 -178.22833252]
[-97.77133179 -183.02915955]
[-83.13388062 -186.36624146]
[-68.23392487 -188.20533752]
[-53.22435760 -188.52755737]
[-38.25919724 -187.32962036]
[-23.49201775 -184.62380981]
[-9.07435322 -180.43789673]
[4.84584999 -174.81481934]
[18.12574577 -167.81228638]
[30.62906075 -159.50216675]
[42.22748947 -149.96972656]
[52.80201721 -139.31278992]
[62.24412537 -127.64070129]
[70.45693207 -115.07324982]
[77.35614777 -101.73938751]
[82.87098694 -87.77595520]
[86.94484711 -73.32622528]
[89.53593445 -58.53848267]
[90.61765289 -43.56447601]
[90.17890930 -28.55785942]
[88.22419739 -13.67262840]
[84.77358246 0.93847191]
[79.86247253 15.12550735]
[73.54125214 28.74289703]
[65.87480927 41.65090179]
[56.94179535 53.71706390]
[68.03311157 63.81571579]
[79.12442780 73.91436005]
[90.21574402 84.01301575]
[105.20275879 83.38903809]
[115.41623688 72.40337372]
[118.55183411 56.30678558]
[134.14556885 51.23059845]
[146.15592957 62.39675522]
[142.22770691 78.31847382]
[126.40190125 82.61685181]
[116.18842316 93.60251617]
[118.85917664 100.61087036]
[132.87597656 95.26957703]
[138.21705627 109.28645325]
[124.20069122 114.62758636]
[126.87144470 121.63594055]
[141.80575562 123.03824615]
[156.74006653 124.44055176]
[171.67437744 125.84284973]
[186.60867310 127.24515533]
[192.59129333 113.35042572]
[202.57632446 101.98582458]
[215.58555603 94.26473236]
[230.34445190 90.94358826]
[245.40710449 92.34776306]
[259.29782104 98.33968353]
[270.65573120 108.33233643]
[278.36810303 121.34673309]
[281.67935181 136.10784912]
[280.26510620 151.16955566]
[274.26385498 165.05625916]
[264.26361084 176.40747070]
[251.24404907 184.11112976]
[236.48071289 187.41249084]
[221.41995239 185.98812866]
[207.53727722 179.97760010]
[196.19276428 169.96972656]
[188.49784851 156.94500732]
[185.20637512 142.17945862]
[170.27206421 140.77716064]
[155.33775330 139.37486267]
[140.40345764 137.97254944]
[125.46914673 136.57025146]
[114.37783051 146.66889954]
[114.37783051 161.66889954]
[114.37783051 176.66889954]
[114.37783051 191.66889954]
[114.37783051 206.66889954]
[114.37783051 221.66889954]
[114.37783051 236.66889954]
[114.37783051 251.66889954]
[114.37783051 266.66888428]
[114.37783051 281.66888428]
[114.37783051 296.66888428]
[128.91770935 300.73022461]
[141.82209778 308.56472778]
[152.13337708 319.59106445]
[159.08639526 332.99096680]
[162.16520691 347.77014160]
[161.14131165 362.83181763]
[156.09071350 377.05834961]
[147.38818359 389.39401245]
[135.67951965 398.92343140]
[121.83358002 404.93945312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 89]
[23 88]
[24 87]
[25 86]
[90 97]
[91 96]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
