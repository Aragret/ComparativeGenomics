%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGGGCCCGGGGGGGGGGUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUCAAAGGAxxxxxxxxxxCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGACCCCCCCCCCAAUAGGGCCC\
) } def
/len { sequence length } bind def

/coor [
[78.06156921 318.46450806]
[66.17729950 309.18942261]
[56.85858917 297.33929443]
[50.64722443 283.60311890]
[47.90431976 268.77951050]
[48.78934860 253.73023987]
[53.25085831 239.33030701]
[61.02945328 226.41687012]
[71.67290497 215.74070740]
[84.56241608 207.92251587]
[98.94860077 203.41685486]
[98.01297760 188.44606018]
[97.07734680 173.47526550]
[96.14171600 158.50447083]
[95.20608521 143.53369141]
[94.27046204 128.56289673]
[93.33483124 113.59210205]
[81.44245148 104.45037079]
[66.73448944 107.39585114]
[52.02652740 110.34133148]
[37.31856918 113.28681183]
[22.61060524 116.23229980]
[7.90264463 119.17778015]
[-4.10951042 129.47431946]
[-18.10833168 124.38685608]
[-30.12048531 134.68339539]
[-44.11930466 129.59593201]
[-58.82726669 132.54141235]
[-73.53523254 135.48689270]
[-80.87965393 149.29244995]
[-95.39913177 155.09924316]
[-110.23799896 150.16549683]
[-118.38980865 136.82075500]
[-116.00551605 121.36601257]
[-104.21091461 111.09851837]
[-88.57505798 110.86627197]
[-76.48071289 120.77893066]
[-61.77275085 117.83345032]
[-47.06478882 114.88796997]
[-36.10464478 104.80210876]
[-21.05381393 109.67889404]
[-10.09367085 99.59303284]
[4.95716190 104.46981812]
[19.66512299 101.52433777]
[34.37308502 98.57885742]
[49.08104706 95.63336945]
[63.78900909 92.68788910]
[78.49697113 89.74240875]
[64.17737579 85.27593994]
[51.67862320 76.98249817]
[43.19457245 64.61234283]
[39.95965576 49.96531677]
[42.44454956 35.17257309]
[50.28771210 22.38645363]
[62.34795380 13.46734047]
[76.87050629 9.71296501]
[91.74234772 11.66959000]
[104.79961395 19.05252647]
[114.14247894 30.78755379]
[118.41155243 45.16722870]
[116.98567963 60.09930420]
[110.07468414 73.40820312]
[104.59706116 87.37229156]
[116.09886169 77.74375916]
[127.60066986 68.11523438]
[139.10247803 58.48670959]
[150.60427856 48.85818481]
[162.10607910 39.22965622]
[153.76863098 26.74229240]
[146.83021545 13.42667866]
[141.37216187 -0.56106299]
[137.45848083 -15.05693436]
[135.13504028 -29.89097977]
[134.42909241 -44.88927460]
[135.34890747 -59.87597275]
[137.88371277 -74.67536926]
[142.00376892 -89.11393738]
[147.66079712 -103.02239990]
[154.78845215 -116.23768616]
[163.30317688 -128.60485840]
[173.10513306 -139.97889709]
[184.07939148 -150.22647095]
[196.09729004 -159.22743225]
[209.01794434 -166.87623596]
[222.68983459 -173.08320618]
[236.95268250 -177.77557373]
[251.63926697 -180.89831543]
[266.57739258 -182.41484070]
[281.59191895 -182.30734253]
[296.50677490 -180.57708740]
[311.14715576 -177.24436951]
[325.34133911 -172.34826660]
[338.92297363 -165.94618225]
[351.73275757 -158.11315918]
[363.62057495 -148.94105530]
[374.44696045 -138.53738403]
[384.08505249 -127.02416229]
[392.42184448 -114.53634644]
[399.35952759 -101.22035980]
[404.81683350 -87.23232269]
[408.72973633 -72.73624420]
[411.05239868 -57.90207291]
[411.75753784 -42.90373993]
[410.83691406 -27.91709137]
[408.30130005 -13.11783409]
[404.18045044 1.32051384]
[398.52267456 15.22867203]
[391.39431763 28.44357300]
[382.87893677 40.81028366]
[373.07638550 52.18380356]
[362.10156250 62.43078613]
[350.08316040 71.43109131]
[337.16210938 79.07920074]
[323.48989868 85.28543854]
[309.22677612 89.97703552]
[294.54003906 93.09899902]
[279.60183716 94.61470795]
[264.58731079 94.50640106]
[249.67253113 92.77535248]
[235.03234863 89.44184875]
[220.83840942 84.54498291]
[207.25714111 78.14215851]
[194.44775391 70.30844879]
[182.56045532 61.13570023]
[171.73460388 50.73146057]
[160.23280334 60.35998917]
[148.73100281 69.98851013]
[137.22918701 79.61704254]
[125.72738647 89.24556732]
[114.22558594 98.87409210]
[108.30562592 112.65647125]
[109.24124908 127.62726593]
[110.17687988 142.59805298]
[111.11251068 157.56884766]
[112.04813385 172.53964233]
[112.98376465 187.51043701]
[113.91939545 202.48121643]
[128.75462341 205.16064453]
[142.51725769 211.31315613]
[154.40715027 220.58103943]
[163.73304749 232.42550659]
[169.95274353 246.15789795]
[172.70462036 260.97985840]
[171.82872009 276.02966309]
[167.37594604 290.43231201]
[159.60517883 303.35046387]
[148.96820068 314.03305054]
[136.08343506 321.85906982]
[121.69998169 326.37344360]
[106.65407562 327.31378174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[25 41]
[27 39]
[28 38]
[29 37]
[63 130]
[64 129]
[65 128]
[66 127]
[67 126]
[68 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
