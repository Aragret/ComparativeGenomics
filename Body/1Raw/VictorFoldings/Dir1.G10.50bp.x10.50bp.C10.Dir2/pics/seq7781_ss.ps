%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUAUUCCGGGGGGGGGGUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCxxxxxxxxxxUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCCCCCCCCCCCAUCAUUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.87841797]
[71.19830322 365.86239624]
[59.48964310 356.33297729]
[50.78712082 343.99731445]
[45.73651886 329.77078247]
[44.71262741 314.70910645]
[47.79142761 299.92996216]
[54.74444962 286.53002930]
[65.05573273 275.50369263]
[77.96011353 267.66918945]
[92.50000000 263.60787964]
[92.50000000 248.60787964]
[92.50000000 233.60787964]
[92.50000000 218.60787964]
[92.50000000 203.60787964]
[92.50000000 188.60787964]
[92.50000000 173.60787964]
[92.50000000 158.60787964]
[92.50000000 143.60787964]
[92.50000000 128.60787964]
[92.50000000 113.60787201]
[83.73379517 101.43603516]
[69.50701141 96.68222046]
[53.96609879 99.64711761]
[44.34700775 88.27511597]
[30.12022781 83.52130127]
[15.13321209 82.89732361]
[0.56050956 86.45208740]
[-14.01219368 90.00685120]
[-28.58489609 93.56160736]
[-42.53993988 103.18933105]
[-55.65454865 92.44487762]
[-48.96047592 76.86843109]
[-32.13965988 78.98890686]
[-17.56695557 75.43414307]
[-2.99425244 71.87938690]
[11.57845020 68.32462311]
[12.82100964 60.92826843]
[15.30612850 46.13556290]
[16.54868698 38.73920822]
[3.93755937 30.61766624]
[-8.67356873 22.49612427]
[-21.28469658 14.37458134]
[-39.66370392 13.93647480]
[-47.13010788 -1.91448009]
[-59.90746307 -9.77190590]
[-72.68482208 -17.62933159]
[-87.46389771 -12.51925945]
[-102.05148315 -18.15278053]
[-109.55974579 -31.86992073]
[-106.44353485 -47.19386292]
[-94.17421722 -56.88911057]
[-78.54499054 -56.37786865]
[-66.93550110 -45.90152359]
[-64.82740021 -30.40668869]
[-52.05003738 -22.54926300]
[-39.27268219 -14.69183731]
[-27.39525032 -17.18862534]
[-16.67050552 -10.69256306]
[-13.16315460 1.76345325]
[-0.55202657 9.88499546]
[12.05910110 18.00653839]
[24.67022896 26.12808037]
[40.53250122 49.47298431]
[34.87404251 69.29452515]
[49.10082245 74.04833984]
[63.62414169 70.74342346]
[74.26082611 82.45544434]
[88.48760986 87.20925903]
[75.99869537 78.90100861]
[68.55571747 65.87786865]
[67.73631287 50.90026855]
[73.71415710 37.14289474]
[85.22218323 27.52180290]
[99.82110596 24.07630539]
[114.41650391 27.53672218]
[125.91468048 37.16957092]
[131.87846375 50.93304443]
[131.04376221 65.90980530]
[123.58747101 78.92532349]
[111.09036255 87.22070312]
[125.21516418 82.17194366]
[135.60589600 70.24117279]
[150.19482422 73.24324036]
[164.31962585 68.19448090]
[171.13624573 54.18835831]
[185.53273010 49.26941681]
[198.84341431 55.85433197]
[212.96821594 50.80557632]
[227.09301758 45.75682068]
[241.21781921 40.70806503]
[255.23454285 35.36655045]
[269.13708496 29.73459435]
[283.03964233 24.10263634]
[270.66189575 15.62964439]
[269.35641479 0.68656188]
[280.07739258 -9.80442524]
[294.98864746 -8.17525482]
[303.19128418 4.38328123]
[298.69027710 18.69142723]
[313.10247803 14.53353882]
[327.51470947 10.37565136]
[341.92691040 6.21776390]
[356.33914185 2.05987668]
[367.31582642 -10.12390709]
[383.29711914 -6.44553232]
[387.84283447 9.31100464]
[376.27673340 20.93672943]
[360.49703979 16.47209358]
[346.08480835 20.62998009]
[331.67260742 24.78786850]
[317.26037598 28.94575500]
[302.84817505 33.10364151]
[288.67160034 38.00519180]
[274.76904297 43.63714981]
[260.86648560 49.26910782]
[258.19351196 53.29784012]
[252.93238831 55.65409470]
[246.26658630 54.83286667]
[232.14176941 59.88162231]
[218.01696777 64.93038177]
[203.89216614 69.97913361]
[197.77149963 83.50958252]
[183.51885986 88.83094788]
[169.36837769 82.31928253]
[155.24357605 87.36804199]
[145.86314392 98.93769073]
[130.26391602 96.29674530]
[116.13911438 101.34550476]
[107.50000000 113.60787201]
[107.50000000 128.60787964]
[107.50000000 143.60787964]
[107.50000000 158.60787964]
[107.50000000 173.60787964]
[107.50000000 188.60787964]
[107.50000000 203.60787964]
[107.50000000 218.60787964]
[107.50000000 233.60787964]
[107.50000000 248.60787964]
[107.50000000 263.60787964]
[122.03988647 267.66918945]
[134.94427490 275.50369263]
[145.25555420 286.53002930]
[152.20857239 299.92996216]
[155.28736877 314.70910645]
[154.26348877 329.77078247]
[149.21287537 343.99731445]
[140.51036072 356.33297729]
[128.80169678 365.86239624]
[114.95575714 371.87841797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 69]
[23 68]
[25 66]
[26 65]
[27 37]
[28 36]
[29 35]
[30 34]
[40 63]
[41 62]
[42 61]
[43 60]
[45 57]
[46 56]
[47 55]
[81 129]
[82 128]
[84 126]
[85 125]
[88 122]
[89 121]
[90 120]
[91 119]
[92 116]
[93 115]
[94 114]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
