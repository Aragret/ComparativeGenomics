%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUCCACUGGGGGGGGGGAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACxxxxxxxxxxCAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCCCCCCCCCCCACUUCCACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 380.87258911]
[71.19830322 374.85656738]
[59.48964310 365.32714844]
[50.78712082 352.99148560]
[45.73651886 338.76495361]
[44.71262741 323.70327759]
[47.79142761 308.92410278]
[54.74444962 295.52416992]
[65.05573273 284.49786377]
[77.96011353 276.66333008]
[92.50000000 272.60202026]
[92.50000000 257.60202026]
[92.50000000 242.60203552]
[92.50000000 227.60203552]
[92.50000000 212.60203552]
[92.50000000 197.60203552]
[92.50000000 182.60203552]
[92.50000000 167.60203552]
[92.50000000 152.60203552]
[92.50000000 137.60203552]
[92.50000000 122.60202789]
[87.80329895 123.73101044]
[82.61228180 123.89260101]
[77.12169647 122.96717834]
[62.79909897 127.42399597]
[48.47650146 131.88081360]
[34.15390396 136.33763123]
[19.83130836 140.79444885]
[9.11047554 153.20394897]
[-6.94387913 149.85884094]
[-11.81641102 134.20027161]
[-0.49467719 122.33644867]
[15.37449265 126.47184753]
[29.69709015 122.01502991]
[44.01968765 117.55821228]
[58.34228516 113.10139465]
[72.66487885 108.64458466]
[72.04090118 93.65756989]
[57.39740372 90.40673828]
[45.09945679 100.06565094]
[29.47181320 99.50817108]
[17.89336967 88.99752808]
[15.83111000 73.49652100]
[24.25877190 60.32426071]
[39.19707108 55.70027924]
[53.59260178 61.80787659]
[60.64822769 75.76323700]
[75.29173279 79.01406860]
[91.35164642 73.24734497]
[105.69175720 76.87629700]
[113.68167114 64.18136597]
[121.67159271 51.48643494]
[129.66149902 38.79150772]
[137.65142822 26.09657669]
[145.64134216 13.40164757]
[152.26983643 -0.05431752]
[157.46525574 -14.12583733]
[162.66067505 -28.19735718]
[167.85607910 -42.26887512]
[173.05149841 -56.34039688]
[172.29965210 -63.01439285]
[174.71051025 -68.25071716]
[178.76683044 -70.88164520]
[184.54310608 -84.72486115]
[190.31938171 -98.56807709]
[196.09564209 -112.41129303]
[201.87191772 -126.25450897]
[189.38514709 -117.94304657]
[174.68923950 -114.93795776]
[159.94209290 -117.68049622]
[147.30908203 -125.76795959]
[138.64518738 -138.01283264]
[135.22254944 -152.61712646]
[137.54374695 -167.43643188]
[145.26792908 -180.29476929]
[157.26094055 -189.30409241]
[171.76177979 -193.14149475]
[186.64122009 -191.24351501]
[199.71444702 -183.88887024]
[209.06184387 -172.15745544]
[213.31089783 -157.77185059]
[211.83789062 -142.84500122]
[221.34623718 -154.44633484]
[230.85459900 -166.04768372]
[240.11955261 -177.84432983]
[249.13708496 -189.83116150]
[258.15460205 -201.81799316]
[254.44856262 -217.01007080]
[261.42117310 -231.00709534]
[275.78015137 -237.20011902]
[290.74566650 -232.66496277]
[299.25143433 -219.54299927]
[297.28131104 -204.03001404]
[285.76550293 -193.45077515]
[270.14144897 -192.80046082]
[261.12390137 -180.81362915]
[252.10638428 -168.82679749]
[251.88958740 -163.99682617]
[248.59294128 -159.26783752]
[242.45594788 -156.53932190]
[232.94758606 -144.93798828]
[223.43922424 -133.33663940]
[215.71513367 -120.47824097]
[209.93887329 -106.63502502]
[204.16259766 -92.79180145]
[198.38632202 -78.94858551]
[192.61004639 -65.10536957]
[187.12301636 -51.14497757]
[181.92759705 -37.07345963]
[176.73219299 -23.00193977]
[171.53677368 -8.93042088]
[166.34135437 5.14109802]
[173.93125916 18.07915306]
[188.74902344 20.41025734]
[203.56678772 22.74136162]
[220.15312195 19.22999191]
[228.11882019 34.19608688]
[215.94273376 45.99351120]
[201.23567200 37.55912018]
[186.41792297 35.22801590]
[171.60015869 32.89691162]
[163.41404724 28.10786247]
[158.33627319 21.39156342]
[150.34635925 34.08649445]
[142.35643005 46.78142166]
[134.36651611 59.47635269]
[126.37660217 72.17127991]
[118.38668823 84.86621094]
[122.88073730 106.60103607]
[107.50000000 122.60202789]
[107.50000000 137.60203552]
[107.50000000 152.60203552]
[107.50000000 167.60203552]
[107.50000000 182.60203552]
[107.50000000 197.60203552]
[107.50000000 212.60203552]
[107.50000000 227.60203552]
[107.50000000 242.60203552]
[107.50000000 257.60202026]
[107.50000000 272.60202026]
[122.03988647 276.66333008]
[134.94427490 284.49786377]
[145.25555420 295.52416992]
[152.20857239 308.92410278]
[155.28736877 323.70327759]
[154.26348877 338.76495361]
[149.21287537 352.99148560]
[140.51036072 365.32714844]
[128.80169678 374.85656738]
[114.95575714 380.87258911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[38 48]
[39 47]
[50 128]
[51 127]
[52 126]
[53 125]
[54 124]
[55 123]
[56 112]
[57 111]
[58 110]
[59 109]
[60 108]
[63 107]
[64 106]
[65 105]
[66 104]
[67 103]
[82 102]
[83 101]
[84 100]
[85 97]
[86 96]
[87 95]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
