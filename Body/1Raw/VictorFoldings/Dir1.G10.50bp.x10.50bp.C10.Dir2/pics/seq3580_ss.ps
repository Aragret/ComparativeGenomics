%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCCUCCCCAUAGGGGGGGGGGCCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACxxxxxxxxxxCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUACCCCCCCCCCAACACCCCUCCCCACA\
) } def
/len { sequence length } bind def

/coor [
[85.01929474 470.90066528]
[70.52014923 466.89883423]
[56.96866608 460.37219238]
[44.80046082 451.53054810]
[34.40669250 440.65814209]
[26.12147713 428.10446167]
[20.21115112 414.27304077]
[16.86570549 399.60855103]
[16.19268417 384.58233643]
[18.21372032 369.67745972]
[22.86384773 355.37304688]
[29.99358368 342.12893677]
[39.37373734 330.37084961]
[50.70277023 320.47677612]
[63.61650848 312.76477051]
[77.69982147 307.48272705]
[92.50000000 304.80044556]
[92.50000000 289.80044556]
[92.50000000 274.80044556]
[92.50000000 259.80044556]
[92.50000000 244.80044556]
[92.50000000 229.80044556]
[92.50000000 214.80044556]
[92.50000000 199.80044556]
[92.50000000 184.80044556]
[92.50000000 169.80044556]
[77.09660339 166.36103821]
[62.85081863 159.56753540]
[50.48266602 149.76330566]
[40.61727524 137.44387817]
[33.75326538 123.23193359]
[30.23757172 107.84576416]
[30.24788666 92.06305695]
[33.78368759 76.68150330]
[40.66626358 62.47853470]
[50.54775238 50.17201996]
[41.17926788 38.45743179]
[31.81078720 26.74284744]
[22.44230270 15.02826214]
[13.07382011 3.31367588]
[-0.38948658 10.04555416]
[-14.95261669 13.82946873]
[-29.97839546 14.50237656]
[-44.80992508 12.03729439]
[-58.79930878 6.54437065]
[-71.33595276 -1.73403060]
[-81.87320709 -12.43402576]
[-89.95221710 -25.08620453]
[-95.22189331 -39.13621902]
[-97.45417023 -53.96908569]
[-96.55387878 -68.93608856]
[-92.56280518 -83.38314819]
[-85.65773773 -96.67942047]
[-76.14266205 -108.24485016]
[-85.51114655 -119.95943451]
[-94.87963104 -131.67401123]
[-109.34816742 -127.08861542]
[-124.49586487 -128.04339600]
[-138.27412415 -134.40924072]
[-148.81956482 -145.32519531]
[-154.70596313 -159.31500244]
[-155.13728333 -174.48663330]
[-150.05514526 -188.78825378]
[-140.14689636 -200.28569031]
[-126.75254059 -207.42401123]
[-111.68354797 -209.23780823]
[-96.97787476 -205.48178101]
[-84.62435150 -196.66390991]
[-76.29368591 -183.97673035]
[-73.11252594 -169.13609314]
[-75.51110840 -154.14906311]
[-83.16503906 -141.04249573]
[-73.79656219 -129.32791138]
[-64.42807770 -117.61332703]
[-51.05382156 -124.35314178]
[-36.56483459 -128.16629028]
[-21.59381294 -128.88375854]
[-6.79503775 -126.47174072]
[7.18423605 -121.03327942]
[19.73208237 -112.80381775]
[30.29869461 -102.14104462]
[38.42046738 -89.50932312]
[43.74035263 -75.45947266]
[46.02353668 -60.60477448]
[45.16781235 -45.59415436]
[41.20816422 -31.08388329]
[34.31531906 -17.70885277]
[24.78840637 -6.05480719]
[34.15689087 5.65977859]
[43.52537155 17.37436485]
[52.89385605 29.08895111]
[62.26234055 40.80353546]
[79.38456726 32.89294815]
[97.99489594 29.82641602]
[116.74996185 31.82528877]
[134.29594421 38.74528122]
[149.36631775 50.08688354]
[160.87322998 65.03141022]
[174.60371399 58.99205017]
[188.33419800 52.95268631]
[202.06466675 46.91332245]
[215.79515076 40.87396240]
[214.26336670 25.82375145]
[217.45932007 11.03723240]
[225.06987000 -2.03696203]
[236.34945679 -12.11795616]
[250.19297791 -18.21811676]
[265.24420166 -19.73981094]
[280.02859497 -16.53396034]
[293.09768677 -8.91464138]
[303.17111206 2.37168360]
[309.26199341 16.21929550]
[310.77359009 31.27154541]
[307.55783081 46.05376816]
[299.92977905 59.11775208]
[288.63668823 69.18361664]
[274.78500366 75.26522064]
[259.73175049 76.76674652]
[244.95169067 73.54108429]
[231.89282227 65.90425873]
[221.83451843 54.60444260]
[208.10403442 60.64380646]
[194.37355042 66.68316650]
[180.64308167 72.72252655]
[166.91259766 78.76189423]
[169.30833435 88.83272552]
[170.19703674 99.14637756]
[169.55938721 109.47858429]
[167.40925598 119.60469818]
[163.79339600 129.30451965]
[158.79042053 138.36715698]
[152.50910950 146.59555054]
[145.08605957 153.81077576]
[136.68266296 159.85595703]
[127.48164368 164.59962463]
[117.68306732 167.93865967]
[107.50000000 169.80044556]
[107.50000000 184.80044556]
[107.50000000 199.80044556]
[107.50000000 214.80044556]
[107.50000000 229.80044556]
[107.50000000 244.80044556]
[107.50000000 259.80044556]
[107.50000000 274.80044556]
[107.50000000 289.80044556]
[107.50000000 304.80044556]
[122.30017853 307.48272705]
[136.38348389 312.76477051]
[149.29722595 320.47677612]
[160.62626648 330.37084961]
[170.00642395 342.12893677]
[177.13615417 355.37304688]
[181.78628540 369.67745972]
[183.80731201 384.58233643]
[183.13429260 399.60855103]
[179.78884888 414.27304077]
[173.87852478 428.10446167]
[165.59330750 440.65814209]
[155.19953918 451.53054810]
[143.03132629 460.37219238]
[129.47984314 466.89883423]
[114.98070526 470.90066528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[54 74]
[55 73]
[56 72]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
