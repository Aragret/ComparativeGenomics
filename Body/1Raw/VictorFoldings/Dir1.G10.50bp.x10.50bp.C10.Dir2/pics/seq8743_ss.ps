%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGAAAUCGGGGGGGGGGGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUAxxxxxxxxxxCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCCUAGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[84.75408936 424.73977661]
[72.19586182 416.38861084]
[62.10964203 405.17617798]
[55.12944794 391.80728149]
[51.69406509 377.12228394]
[52.01943970 362.04431152]
[56.08512497 347.52120972]
[63.63554382 334.46585083]
[74.19607544 323.69894409]
[87.10286713 315.89733887]
[101.54459381 311.55136108]
[100.92061615 296.56436157]
[100.29663849 281.57733154]
[99.67266846 266.59033203]
[99.04869080 251.60330200]
[98.42471313 236.61628723]
[97.80073547 221.62927246]
[97.17675781 206.64225769]
[96.55278015 191.65524292]
[95.92880249 176.66822815]
[95.30482483 161.68121338]
[87.04478455 149.28681946]
[94.20132446 135.17672729]
[93.57734680 120.18971252]
[92.95336914 105.20269775]
[90.82599640 102.92053986]
[89.50585175 99.79454041]
[89.31409454 96.13131714]
[90.45055389 92.35422516]
[92.95336914 88.95474243]
[93.57734680 73.96772766]
[86.42080688 59.85763931]
[94.68084717 47.46324539]
[95.30482483 32.47622681]
[95.92880249 17.48921204]
[96.55278015 2.50219536]
[85.24992371 12.36350536]
[70.25709534 12.82740498]
[58.36619949 3.68374205]
[54.96392441 -10.92531395]
[61.59153366 -24.38171768]
[75.24665070 -30.58958626]
[89.74338531 -26.73669624]
[98.51467896 -14.56805420]
[101.30699921 -29.30586052]
[104.09932709 -44.04366684]
[106.89164734 -58.78147125]
[109.68397522 -73.51927948]
[95.27294159 -77.72375488]
[81.33498383 -83.29948425]
[68.00022888 -90.19441223]
[55.39319992 -98.34415436]
[43.63159561 -107.67261505]
[32.82524109 -118.09269714]
[23.07502747 -129.50711060]
[14.47199726 -141.80928040]
[7.09647417 -154.88433838]
[1.01732481 -168.61021423]
[-3.70869088 -182.85873413]
[-7.03744650 -197.49685669]
[-8.93786049 -212.38792419]
[-9.39218998 -227.39289856]
[-8.39619255 -242.37167358]
[-5.95916796 -257.18438721]
[-2.10387039 -271.69271851]
[3.13370371 -285.76126099]
[9.70465088 -299.25860596]
[17.54761887 -312.05871582]
[26.58937836 -324.04214478]
[36.74550629 -335.09692383]
[47.92117310 -345.11990356]
[60.01203918 -354.01745605]
[72.90520477 -361.70654297]
[86.48029327 -368.11532593]
[100.61054230 -373.18399048]
[115.16403961 -376.86520386]
[130.00488281 -379.12460327]
[144.99450684 -379.94110107]
[159.99295044 -379.30706787]
[174.86018372 -377.22839355]
[189.45739746 -373.72451782]
[203.64828491 -368.82815552]
[217.30033875 -362.58502197]
[230.28610229 -355.05340576]
[242.48432922 -346.30361938]
[253.78112793 -336.41735840]
[264.07101440 -325.48696899]
[273.25790405 -313.61444092]
[281.25604248 -300.91070557]
[287.99072266 -287.49432373]
[293.39910889 -273.49057007]
[297.43063354 -259.03018188]
[300.04772949 -244.24822998]
[301.22589111 -229.28268433]
[300.95416260 -214.27330017]
[299.23507690 -199.36021423]
[296.08468628 -184.68266296]
[291.53237915 -170.37768555]
[285.62069702 -156.57887268]
[278.40481567 -143.41503906]
[269.95211792 -131.00910950]
[260.34149170 -119.47689819]
[249.66271973 -108.92609406]
[238.01550293 -99.45521545]
[225.50856018 -91.15268707]
[212.25869751 -84.09602356]
[198.38960266 -78.35111237]
[184.03079224 -73.97160339]
[169.31632996 -70.99837494]
[154.38360596 -69.45919800]
[139.37202454 -69.36844635]
[124.42178345 -70.72695160]
[121.62945557 -55.98914719]
[118.83713531 -41.25134277]
[116.04480743 -26.51353455]
[113.25248718 -11.77572918]
[111.53979492 3.12617278]
[110.91581726 18.11318970]
[110.29183960 33.10020447]
[109.66786194 48.08722305]
[116.86902618 61.12533569]
[108.56436157 74.59170532]
[107.94038391 89.57872009]
[107.94038391 104.57872009]
[108.56436157 119.56573486]
[109.18833923 134.55274963]
[117.49300385 148.01911926]
[110.29183960 161.05723572]
[110.91581726 176.04425049]
[111.53979492 191.03126526]
[112.16377258 206.01828003]
[112.78775024 221.00529480]
[113.41172791 235.99230957]
[114.03570557 250.97932434]
[114.65968323 265.96633911]
[115.28366089 280.95336914]
[115.90763855 295.94036865]
[116.53161621 310.92739868]
[131.28462219 314.05783081]
[144.79525757 320.75958252]
[156.21423340 330.61138916]
[164.82374573 342.99392700]
[170.08259583 357.12881470]
[171.66020203 372.12753296]
[169.45739746 387.04727173]
[163.61265564 400.95013428]
[154.49336243 412.96221924]
[142.67279053 422.32836914]
[128.89398193 428.45986938]
[114.02308655 430.97125244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[23 126]
[24 125]
[25 124]
[30 123]
[31 122]
[33 120]
[34 119]
[35 118]
[36 117]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
