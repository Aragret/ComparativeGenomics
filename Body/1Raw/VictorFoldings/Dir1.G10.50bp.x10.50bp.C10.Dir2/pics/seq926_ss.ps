%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAACAAGGGGGGGGGGAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCxxxxxxxxxxAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCCCCCCCCCCCAUAACCAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.07025146]
[71.19830322 356.05422974]
[59.48964310 346.52481079]
[50.78712082 334.18914795]
[45.73651886 319.96261597]
[44.71262741 304.90093994]
[47.79142761 290.12179565]
[54.74444962 276.72186279]
[65.05573273 265.69552612]
[77.96011353 257.86102295]
[92.50000000 253.79971313]
[92.50000000 238.79971313]
[92.50000000 223.79971313]
[92.50000000 208.79971313]
[92.50000000 193.79971313]
[92.50000000 178.79971313]
[92.50000000 163.79971313]
[92.50000000 148.79971313]
[92.50000000 133.79971313]
[92.50000000 118.79970551]
[80.89865875 109.29135132]
[66.19069672 112.23683167]
[51.48273468 115.18231201]
[36.77477264 118.12779999]
[31.94944191 131.07829285]
[21.42773056 139.87071228]
[8.03950214 142.28024292]
[-4.68299389 137.78028870]
[-13.43701267 127.65295410]
[-28.20306778 130.29180908]
[-42.96912384 132.93067932]
[-55.15161133 143.90879822]
[-70.66455078 138.59083557]
[-73.54956055 122.44744873]
[-60.83878708 112.08557892]
[-45.60798645 118.16462708]
[-30.84193230 115.52575684]
[-16.07587624 112.88689423]
[-9.41535854 97.91549683]
[4.98914862 89.76220703]
[21.58242989 91.79802704]
[33.82929230 103.41983795]
[48.53725433 100.47434998]
[63.24521637 97.52886963]
[77.95317841 94.58338928]
[86.46426392 82.23181915]
[83.97914886 67.43910980]
[81.49402618 52.64640045]
[79.00891113 37.85369492]
[76.52378845 23.06098747]
[66.60707855 10.73340034]
[72.12886810 -3.09986067]
[69.64375305 -17.89256859]
[67.15863037 -32.68527603]
[64.67351532 -47.47798157]
[60.13886261 -55.48352814]
[62.29391098 -62.60402298]
[60.11707306 -77.44522858]
[57.94023895 -92.28643036]
[55.60913467 -107.10419464]
[53.12401581 -121.89689636]
[50.63889694 -136.68960571]
[35.67301178 -138.89810181]
[22.12297058 -145.62503052]
[11.31627178 -156.21136475]
[4.31164455 -169.61996460]
[1.79532993 -184.53717041]
[4.01385164 -199.50157166]
[10.74986076 -213.04710388]
[21.34343338 -223.84671021]
[34.75671768 -230.84234619]
[49.67561722 -233.34866333]
[64.63852692 -231.12011719]
[78.17954254 -224.37503052]
[88.97204590 -213.77423096]
[95.95869446 -200.35626221]
[98.45501709 -185.43568420]
[96.21644592 -170.47427368]
[89.46228790 -156.93777466]
[78.85424805 -146.15238953]
[65.43160248 -139.17472839]
[67.91672516 -124.38201904]
[70.40184021 -109.58930969]
[74.63905334 -103.47443390]
[72.78144073 -94.46327209]
[74.95828247 -79.62206268]
[77.13511658 -64.78086090]
[79.46622467 -49.96310043]
[81.95133972 -35.17039490]
[84.43645477 -20.37768555]
[86.92157745 -5.58497906]
[96.66053772 5.68453407]
[91.31649780 20.57586861]
[93.80162048 35.36857605]
[96.28673553 50.16128159]
[98.77185822 64.95398712]
[101.25697327 79.74669647]
[103.71315002 64.94915771]
[116.16890717 56.59128571]
[130.79312134 59.92780304]
[138.39132690 72.86099243]
[134.18640137 87.25955963]
[120.82134247 94.07093811]
[135.68438721 96.09326935]
[150.54743958 98.11560822]
[165.41047668 100.13793945]
[171.56881714 86.34477234]
[181.36473083 74.84621429]
[194.00410461 66.57440948]
[208.46234131 62.19992065]
[223.56736755 62.07736588]
[238.09466553 66.21667480]
[250.86660767 74.28229523]
[260.84780884 85.62038422]
[267.22915649 99.31181335]
[269.49331665 114.24668121]
[267.45675659 129.21427917]
[261.28454590 143.00126648]
[251.47709656 154.48997498]
[238.82942200 162.74906921]
[224.36679077 167.10903931]
[209.26165771 167.21641541]
[194.73851013 163.06251526]
[181.97468567 154.98406982]
[172.00488281 143.63595581]
[165.63729858 129.93812561]
[163.38815308 115.00099182]
[148.52510071 112.97865295]
[133.66204834 110.95632172]
[118.79900360 108.93398285]
[107.50000000 118.79970551]
[107.50000000 133.79971313]
[107.50000000 148.79971313]
[107.50000000 163.79971313]
[107.50000000 178.79971313]
[107.50000000 193.79971313]
[107.50000000 208.79971313]
[107.50000000 223.79971313]
[107.50000000 238.79971313]
[107.50000000 253.79971313]
[122.03988647 257.86102295]
[134.94427490 265.69552612]
[145.25555420 276.72186279]
[152.20857239 290.12179565]
[155.28736877 304.90093994]
[154.26348877 319.96261597]
[149.21287537 334.18914795]
[140.51036072 346.52481079]
[128.80169678 356.05422974]
[114.95575714 362.07025146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 45]
[22 44]
[23 43]
[24 42]
[29 38]
[30 37]
[31 36]
[46 97]
[47 96]
[48 95]
[49 94]
[50 93]
[52 91]
[53 90]
[54 89]
[55 88]
[57 87]
[58 86]
[59 85]
[60 83]
[61 82]
[62 81]
[103 130]
[104 129]
[105 128]
[106 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
