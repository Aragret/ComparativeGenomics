%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACACCGGGGGGGGGGACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUxxxxxxxxxxUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUACCCCCCCCCCACCCUCAACACC\
) } def
/len { sequence length } bind def

/coor [
[46.56558228 494.76843262]
[32.40497971 489.61343384]
[19.81523514 481.33120728]
[9.47529793 470.36843872]
[1.94278657 457.31631470]
[-2.37607884 442.87872314]
[-3.24838758 427.83425903]
[-0.62709701 412.99426270]
[5.34642982 399.15902710]
[14.35004807 387.07467651]
[25.89820480 377.39291382]
[39.36812210 370.63583374]
[54.03338242 367.16784668]
[54.03338242 352.16784668]
[54.03338242 337.16784668]
[54.03338242 322.16784668]
[54.03338242 307.16784668]
[54.03338242 292.16784668]
[54.03338242 277.16784668]
[54.03338242 262.16784668]
[54.03338242 247.16786194]
[54.03338242 232.16786194]
[44.00264740 225.55622864]
[39.93876266 212.46789551]
[25.16081810 215.03935242]
[10.38287258 217.61079407]
[-4.39507246 220.18225098]
[-19.17301750 222.75369263]
[-28.27367783 235.39552307]
[-43.29724884 237.79281616]
[-55.29320908 229.03881836]
[-70.07115173 231.61026001]
[-82.30361938 242.53266907]
[-97.79212189 237.14396667]
[-100.60343170 220.98757935]
[-87.84550476 210.68383789]
[-72.64260101 216.83232117]
[-57.86465836 214.26087952]
[-49.53073883 201.96936035]
[-34.58043289 199.15103149]
[-21.74446678 207.97575378]
[-6.96652126 205.40429688]
[7.81142378 202.83285522]
[22.58936882 200.26139832]
[37.36731339 197.68995667]
[49.32138824 188.62904358]
[47.82955933 173.80934143]
[60.76196289 164.69541931]
[67.23105621 151.16209412]
[73.70015717 137.62876892]
[80.16925812 124.09545135]
[69.33148956 105.76987457]
[72.76855469 84.75868225]
[88.88066101 70.84164429]
[87.06100464 55.95242691]
[82.89186859 47.75733566]
[85.35851288 40.74340057]
[83.84098816 25.82036018]
[82.32345581 10.89731979]
[80.80593109 -4.02571964]
[79.28840637 -18.94875908]
[64.32739258 -20.67560005]
[50.08751678 -25.57867050]
[37.23481750 -33.42864990]
[26.37043381 -43.85837936]
[18.00251198 -56.38003540]
[12.52243614 -70.40796661]
[10.18651962 -85.28605652]
[11.10401630 -100.31843567]
[15.23201370 -114.80200195]
[22.37743759 -128.05934143]
[32.20608521 -139.47036743]
[44.25825119 -148.50138855]
[57.97023392 -154.73001099]
[72.70069885 -157.86488342]
[87.76068115 -157.75939941]
[102.44578552 -154.41848755]
[116.06917572 -147.99841309]
[127.99365234 -138.79945374]
[137.66149902 -127.25186157]
[144.62051392 -113.89572906]
[148.54522705 -99.35576630]
[149.25205994 -84.31201172]
[146.70796204 -69.46810150]
[141.03192139 -55.51831055]
[132.48942566 -43.11509705]
[121.48000336 -32.83857727]
[108.51860809 -25.16940689]
[94.21144867 -20.46628380]
[95.72897339 -5.54324484]
[97.24649811 9.37979507]
[98.76402283 24.30283546]
[100.28154755 39.22587585]
[101.95022583 54.13277054]
[103.76988220 69.02198792]
[116.50714874 73.51673126]
[126.15196228 82.97284698]
[140.32093811 78.04941559]
[154.48991394 73.12599182]
[168.65888977 68.20256042]
[182.82786560 63.27913284]
[196.89414978 58.06955338]
[210.85195923 52.57596588]
[215.64611816 37.69140625]
[228.91369629 29.41461182]
[244.39015198 31.65363121]
[254.76797485 43.35126495]
[255.14707947 58.98425293]
[245.34846497 71.17117310]
[229.99871826 74.15773773]
[216.34555054 66.53377533]
[202.38774109 72.02736664]
[199.67665100 76.02407074]
[194.40011597 78.32707214]
[187.75129700 77.44811249]
[173.58232117 82.37153625]
[159.41334534 87.29496765]
[145.24436951 92.21839142]
[131.07539368 97.14182281]
[130.73094177 105.42753601]
[128.21632385 113.32997131]
[123.70911407 120.29106140]
[117.52759552 125.81922913]
[110.10830688 129.52407837]
[101.97518158 131.14398193]
[93.70257568 130.56454468]
[87.23347473 144.09786987]
[80.76438141 157.63119507]
[74.29528046 171.16450500]
[75.32439423 186.95220947]
[62.85470581 195.09814453]
[80.57835388 213.26089478]
[69.03337860 232.16786194]
[69.03337860 247.16786194]
[69.03337860 262.16784668]
[69.03337860 277.16784668]
[69.03337860 292.16784668]
[69.03337860 307.16784668]
[69.03337860 322.16784668]
[69.03337860 337.16784668]
[69.03337860 352.16784668]
[69.03337860 367.16784668]
[83.69863892 370.63583374]
[97.16855621 377.39291382]
[108.71671295 387.07467651]
[117.72032928 399.15902710]
[123.69385529 412.99426270]
[126.31514740 427.83425903]
[125.44284058 442.87872314]
[121.12397766 457.31631470]
[113.59146118 470.36843872]
[103.25152588 481.33120728]
[90.66178131 489.61343384]
[76.50117493 494.76843262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[31 38]
[32 37]
[46 131]
[48 129]
[49 128]
[50 127]
[51 126]
[54 95]
[55 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
