%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAACAAAUGGGGGGGGGGGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUxxxxxxxxxxUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCCCCCCCCCCCACAACAAAU\
) } def
/len { sequence length } bind def

/coor [
[75.20856476 384.33523560]
[61.98836517 377.06277466]
[51.10156250 366.61575317]
[43.29043198 353.70651245]
[39.08755112 339.21520996]
[38.77947617 324.12985229]
[42.38721848 309.47903442]
[49.66479111 296.26165771]
[60.11600113 285.37887573]
[73.02825928 277.57272339]
[87.52119446 273.37545776]
[87.20914459 258.37869263]
[86.89708710 243.38194275]
[86.58502960 228.38519287]
[86.27297211 213.38842773]
[85.96091461 198.39167786]
[85.64885712 183.39492798]
[85.33680725 168.39817810]
[85.02474976 153.40141296]
[84.71269226 138.40466309]
[84.40063477 123.40791321]
[75.70994568 135.63377380]
[63.58114243 144.45944214]
[49.27466583 148.96772766]
[34.27723312 148.69013977]
[20.14738083 143.65553284]
[8.35348129 134.38710022]
[0.12115354 121.84801483]
[-3.69409847 107.34133148]
[-2.69579387 92.37458801]
[3.01232314 78.50312805]
[12.83706570 67.16847229]
[25.75744820 59.54851532]
[40.43078232 56.43512344]
[55.33222198 58.15184402]
[68.91320801 64.52026367]
[79.76240540 74.87859344]
[86.75153351 88.14789581]
[81.84998322 73.97133636]
[76.94843292 59.79478073]
[72.04688263 45.61822128]
[66.24858093 38.47458267]
[67.19416046 31.09545517]
[62.58860016 16.81999588]
[56.94016647 9.55727673]
[58.03905869 2.19941807]
[53.73147583 -12.16876602]
[49.42388916 -26.53695107]
[34.92988205 -31.75517464]
[26.38755608 -44.36001968]
[26.89934731 -59.40003204]
[36.05952454 -71.11451721]
[31.75194168 -85.48270416]
[27.44435692 -99.85088348]
[12.43884659 -98.61463165]
[-2.49574041 -100.52560425]
[-16.70652580 -105.50025940]
[-29.57227707 -113.32113647]
[-40.53055954 -123.64633942]
[-49.10232162 -136.02449036]
[-54.91284180 -149.91447449]
[-57.70811081 -164.70906067]
[-57.36593628 -179.76153564]
[-53.90126801 -194.41381836]
[-47.46557236 -208.02542114]
[-38.34018707 -220.00126648]
[-26.92403603 -229.81785583]
[-13.71618557 -237.04602051]
[0.70597547 -241.36978149]
[15.71197128 -242.60012817]
[30.64580536 -240.68328857]
[44.85463333 -235.70303345]
[57.71730804 -227.87709045]
[68.67152405 -217.54759216]
[77.23841858 -205.16606140]
[83.04347229 -191.27380371]
[85.83292389 -176.47810364]
[85.48482513 -161.42578125]
[82.01438904 -146.77484131]
[75.57334137 -133.16578674]
[66.44324493 -121.19352722]
[55.02323532 -111.38143921]
[41.81254196 -104.15847015]
[46.12012482 -89.79028320]
[50.42771149 -75.42210388]
[64.52179718 -70.67925262]
[73.22348022 -58.40143967]
[73.02468109 -43.17600250]
[63.79207611 -30.84453392]
[68.09966278 -16.47635078]
[72.40724182 -2.10816669]
[76.86405945 12.21443081]
[81.46962738 26.48989105]
[86.22344208 40.71667099]
[91.12499237 54.89323044]
[96.02654266 69.06978607]
[100.92809296 83.24634552]
[113.45405579 91.49863434]
[128.41430664 90.40732574]
[143.37455750 89.31600952]
[158.33479309 88.22470093]
[173.29504395 87.13339233]
[186.49572754 78.41257477]
[199.75219727 85.20341492]
[214.71244812 84.11210632]
[220.26887512 69.89630890]
[231.44889832 59.50545120]
[246.03269958 55.00265121]
[261.12466431 57.28193283]
[273.72830200 65.89074707]
[281.34109497 79.11981201]
[282.45153809 94.34248352]
[276.83917236 108.53628540]
[265.61831665 118.88303375]
[251.01689148 123.32836914]
[235.93400574 120.98966980]
[223.36439514 112.33129120]
[215.80375671 99.07234955]
[200.84350586 100.16365814]
[188.71287537 108.80641937]
[174.38635254 102.09364319]
[159.42611694 103.18495178]
[144.46586609 104.27626038]
[129.50561523 105.36756897]
[114.54536438 106.45888519]
[126.58235931 115.40933990]
[123.86901855 130.16189575]
[109.43507385 134.24371338]
[99.39739227 123.09585571]
[99.70944214 138.09260559]
[100.02149963 153.08937073]
[100.33355713 168.08612061]
[100.64561462 183.08287048]
[100.95767212 198.07962036]
[101.26972961 213.07637024]
[101.58177948 228.07313538]
[101.89383698 243.06988525]
[102.20589447 258.06665039]
[102.51795197 273.06338501]
[117.17294312 276.65417480]
[130.39875793 283.91641235]
[141.29362488 294.35501099]
[149.11471558 307.25820923]
[153.32878113 321.74627686]
[153.64851379 336.83139038]
[150.05207825 351.48498535]
[142.78471375 364.70800781]
[132.34191895 375.59884644]
[119.43569183 383.41494751]
[104.94599915 387.62341309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[38 97]
[39 96]
[40 95]
[41 94]
[43 93]
[44 92]
[46 91]
[47 90]
[48 89]
[52 85]
[53 84]
[54 83]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
