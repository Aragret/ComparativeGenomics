%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACCAUCAGGGGGGGGGGCCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAxxxxxxxxxxCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUCCCCCCCCCCUUUACCAUCA\
) } def
/len { sequence length } bind def

/coor [
[92.97816467 270.26132202]
[85.76267242 257.11077881]
[80.12818909 243.20925903]
[76.15143585 228.74601746]
[73.88656616 213.91798401]
[73.36441040 198.92707825]
[74.59207916 183.97740173]
[77.55285645 169.27250671]
[82.20643616 155.01263428]
[88.49366760 141.38403320]
[74.96947479 147.87219238]
[61.44528580 154.36035156]
[51.44464874 169.78654480]
[34.03131485 167.84342957]
[20.64502907 174.61154175]
[7.25874424 181.37965393]
[-6.12754059 188.14776611]
[-14.95194721 201.27941895]
[-29.80113602 200.11715698]
[-43.18741989 206.88526917]
[-42.84106064 222.14445496]
[-49.15753174 236.03923035]
[-60.88269424 245.81079102]
[-75.68850708 249.51896667]
[-90.63526917 246.42752075]
[-102.75528717 237.15023804]
[-109.64212036 223.52914429]
[-109.92839050 208.26870728]
[-103.55725098 194.39891052]
[-91.79370117 184.67359924]
[-76.97339630 181.02375793]
[-62.03892517 184.17404175]
[-49.95553589 193.49897766]
[-36.56925201 186.73086548]
[-28.70232010 174.08331299]
[-12.89565563 174.76147461]
[0.49062967 167.99336243]
[13.87691498 161.22525024]
[27.26319885 154.45713806]
[31.35811234 143.03176880]
[42.50953674 137.29899597]
[54.95711899 140.83616638]
[68.48130798 134.34800720]
[82.00550079 127.85984039]
[82.78428650 120.40038300]
[85.12065887 98.02201080]
[73.22827911 88.88027954]
[61.33590317 79.73854828]
[47.17187881 85.67790985]
[31.93782806 83.72362518]
[19.73162842 74.40138245]
[13.83668900 60.21881104]
[15.83871651 44.99095917]
[25.19917679 32.81404114]
[39.40015411 26.96358490]
[54.62165451 29.01333618]
[66.76917267 38.41191864]
[72.57508850 52.63116455]
[70.47763824 67.84616852]
[82.37001801 76.98789978]
[94.26239777 86.12963104]
[88.20863342 72.40549469]
[82.15486908 58.68135834]
[76.10110474 44.95722198]
[65.09846497 34.76203156]
[57.37918091 21.90074539]
[53.55697632 7.39589262]
[53.93572998 -7.59932470]
[58.48533249 -21.89271927]
[66.84406281 -34.34790421]
[78.34737396 -43.97463226]
[92.08068848 -50.00753403]
[106.95216370 -51.96697617]
[121.77943420 -49.69716263]
[135.38366699 -43.37855911]
[146.68327332 -33.51352692]
[154.77987671 -20.88637161]
[159.02976990 -6.50101662]
[159.09504700 8.49884129]
[154.97053528 22.92064476]
[146.98416138 35.61779785]
[135.77508545 45.57801056]
[129.43711853 59.17323685]
[123.09914398 72.76846313]
[116.76117706 86.36368561]
[128.84117126 77.47133636]
[140.92115784 68.57898712]
[153.00114441 59.68664169]
[165.08113098 50.79428864]
[167.80470276 38.14375687]
[178.10337830 30.99138641]
[190.11341858 32.74245453]
[202.37577820 24.10333824]
[214.63815308 15.46422195]
[226.90051270 6.82510567]
[229.35263062 -8.78779602]
[242.17553711 -18.02622223]
[257.76165771 -15.40918064]
[266.86398315 -2.48931313]
[264.08230591 13.06825066]
[251.06692505 22.03348351]
[235.53964233 19.08747482]
[223.27726746 27.72658920]
[211.01489258 36.36570740]
[198.75253296 45.00482178]
[192.28936768 61.29063034]
[173.97348022 62.87427902]
[161.89349365 71.76663208]
[149.81350708 80.65898132]
[137.73352051 89.55133057]
[125.65352631 98.44367981]
[138.23039246 90.26918030]
[151.67387390 83.61540222]
[165.80093384 78.57293701]
[180.41918945 75.21044159]
[195.32962036 73.57369995]
[210.32920837 73.68499756]
[225.21371460 75.54282379]
[239.78047180 79.12187195]
[253.83114624 84.37342834]
[267.17440796 91.22596741]
[279.62857056 99.58619690]
[291.02410889 109.34027863]
[301.20581055 120.35540771]
[310.03503418 132.48159790]
[317.39160156 145.55374146]
[323.17535400 159.39384460]
[327.30746460 173.81346130]
[329.73175049 188.61625671]
[330.41519165 203.60067749]
[329.34841919 218.56269836]
[326.54605103 233.29859924]
[322.04617310 247.60772705]
[315.91006470 261.29525757]
[308.22128296 274.17480469]
[299.08456421 286.07101440]
[288.62423706 296.82192993]
[276.98278809 306.28112793]
[264.31869507 314.31982422]
[250.80439758 320.82855225]
[236.62390137 325.71875000]
[221.97030640 328.92376709]
[207.04312134 330.39996338]
[192.04560852 330.12728882]
[177.18194580 328.10943604]
[162.65454102 324.37387085]
[148.66119385 318.97143555]
[135.39244080 311.97573853]
[123.02893066 303.48199463]
[111.73902130 293.60586548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 44]
[11 43]
[12 42]
[14 39]
[15 38]
[16 37]
[17 36]
[19 34]
[20 33]
[46 61]
[47 60]
[48 59]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
