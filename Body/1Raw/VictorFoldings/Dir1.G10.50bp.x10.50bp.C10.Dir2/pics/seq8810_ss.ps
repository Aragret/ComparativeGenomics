%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCAGCGGGGGGGGGGCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUxxxxxxxxxxGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAACCCCCCCCCCACAACCCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.72827911 446.60751343]
[75.88233948 440.59149170]
[64.17368317 431.06207275]
[55.47115707 418.72640991]
[50.42055511 404.49987793]
[49.39666367 389.43820190]
[52.47546387 374.65902710]
[59.42848587 361.25909424]
[69.73976898 350.23275757]
[82.64414978 342.39825439]
[97.18403625 338.33694458]
[97.18403625 323.33694458]
[97.18403625 308.33694458]
[97.18403625 293.33694458]
[97.18403625 278.33694458]
[97.18403625 263.33694458]
[97.18403625 248.33694458]
[97.18403625 233.33694458]
[97.18403625 218.33694458]
[97.18403625 203.33694458]
[81.48062134 193.32392883]
[74.86094666 175.75675964]
[80.13428497 157.58456421]
[95.36713409 146.11056519]
[94.43151093 131.13977051]
[80.72084808 125.08003235]
[71.33926392 113.38864899]
[56.63130188 116.33412933]
[41.92333984 119.27960968]
[27.21537781 122.22509766]
[12.50741577 125.17057800]
[-1.83604848 134.20945740]
[-14.49235249 122.92875671]
[-7.15611601 107.64424896]
[9.56193352 110.46261597]
[24.26989555 107.51713562]
[38.97785568 104.57164764]
[53.68581772 101.62616730]
[68.39377594 98.68068695]
[70.27970886 89.16496277]
[74.96054840 80.66817474]
[81.99610901 73.98935699]
[90.72476196 69.75659180]
[100.32566833 68.36793518]
[104.03182983 53.83299637]
[107.73799133 39.29806137]
[111.44415283 24.76312447]
[115.15031433 10.22818756]
[106.96972656 -0.52056617]
[106.50129700 -13.82502079]
[113.69200897 -24.79625893]
[125.71552277 -29.53247833]
[129.72326660 -43.98716736]
[105.66211700 -77.77449036]
[104.10453796 -92.69339752]
[100.48085022 -98.34816742]
[100.32961273 -104.11083984]
[102.80578613 -108.26344299]
[101.87015533 -123.23423004]
[90.30238342 -133.66612244]
[89.56678772 -148.86196899]
[99.58329773 -159.82577515]
[98.64766693 -174.79656982]
[89.48648071 -183.93585205]
[89.04924774 -196.46691895]
[97.02411652 -205.61618042]
[96.40013885 -220.60319519]
[95.77616119 -235.59020996]
[81.74066925 -241.58750916]
[71.70372009 -253.08630371]
[67.65816498 -267.80352783]
[70.40724945 -282.81701660]
[79.40514374 -295.14587402]
[92.86530304 -302.34219360]
[108.11521149 -302.97711182]
[122.12697601 -296.92459106]
[132.11856079 -285.38635254]
[136.10614014 -270.65332031]
[133.29794312 -255.65075684]
[124.25157166 -243.35743713]
[110.76317596 -236.21418762]
[111.38715363 -221.22717285]
[112.01113129 -206.24015808]
[122.20391083 -191.98858643]
[113.61846161 -175.73219299]
[114.55409241 -160.76141357]
[125.85773468 -151.13003540]
[127.01985931 -135.96086121]
[116.84095001 -124.16986084]
[117.77658081 -109.19906616]
[119.02345276 -94.25098419]
[120.58103180 -79.33206940]
[133.75019836 -72.14924622]
[146.91819763 -64.96704865]
[160.30448914 -71.73516846]
[173.69076538 -78.50328064]
[187.07705688 -85.27139282]
[188.56217957 -100.62711334]
[198.13140869 -112.72807312]
[212.73123169 -117.71292114]
[227.70289612 -113.99099731]
[238.26901245 -102.74996185]
[241.05795288 -87.57678223]
[235.17977905 -73.31317139]
[222.51020813 -64.51058960]
[207.09204102 -63.97790909]
[193.84516907 -71.88510895]
[180.45887756 -65.11699677]
[167.07260132 -58.34888077]
[153.68630981 -51.58076859]
[144.17794800 -39.97942734]
[140.17021179 -25.52473640]
[149.07127380 -11.28995705]
[144.87077332 5.31244612]
[129.68524170 13.93434906]
[125.97908783 28.46928406]
[122.27292633 43.00422287]
[118.56676483 57.53915787]
[114.86060333 72.07409668]
[127.85065460 84.99884033]
[131.49520874 102.95734406]
[124.57129669 119.92348480]
[109.40229797 130.20414734]
[110.33792877 145.17494202]
[121.03504181 149.59245300]
[129.25216675 157.66903687]
[133.81254578 168.19378662]
[134.08355713 179.60931396]
[130.06420898 190.24220276]
[122.37959290 198.54829407]
[112.18403625 203.33694458]
[112.18403625 218.33694458]
[112.18403625 233.33694458]
[112.18403625 248.33694458]
[112.18403625 263.33694458]
[112.18403625 278.33694458]
[112.18403625 293.33694458]
[112.18403625 308.33694458]
[112.18403625 323.33694458]
[112.18403625 338.33694458]
[126.72392273 342.39825439]
[139.62831116 350.23275757]
[149.93959045 361.25909424]
[156.89260864 374.65902710]
[159.97140503 389.43820190]
[158.94752502 404.49987793]
[153.89691162 418.72640991]
[145.19439697 431.06207275]
[133.48573303 440.59149170]
[119.63979340 446.60751343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 124]
[25 123]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[44 119]
[45 118]
[46 117]
[47 116]
[48 115]
[52 112]
[53 111]
[54 92]
[55 91]
[58 90]
[59 89]
[62 86]
[63 85]
[66 83]
[67 82]
[68 81]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
