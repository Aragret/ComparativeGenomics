%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCCAAGGGGGGGGGGAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAxxxxxxxxxxAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUCCCCCCCCCCAACCCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[136.78363037 534.46630859]
[122.93769073 528.45025635]
[111.22903442 518.92083740]
[102.52650452 506.58520508]
[97.47590637 492.35867310]
[96.45201111 477.29699707]
[99.53081512 462.51782227]
[106.48383331 449.11788940]
[116.79512024 438.09155273]
[129.69949341 430.25704956]
[144.23937988 426.19573975]
[144.23937988 411.19573975]
[144.23937988 396.19573975]
[144.23937988 381.19573975]
[144.23937988 366.19573975]
[144.23937988 351.19573975]
[144.23937988 336.19573975]
[144.23937988 321.19573975]
[144.23937988 306.19573975]
[144.23937988 291.19573975]
[144.23937988 276.19573975]
[144.23937988 261.19573975]
[125.63834381 235.53923035]
[137.83572388 212.98832703]
[132.34869385 199.02793884]
[126.86166382 185.06753540]
[121.37463379 171.10714722]
[115.74267578 157.20458984]
[109.96640778 143.36137390]
[104.19013214 129.51815796]
[85.16684723 132.48120117]
[65.04339600 122.55509186]
[52.50489044 100.17196655]
[37.54464340 99.08065796]
[22.58439255 97.98934174]
[7.62414455 96.89803314]
[-4.16924477 107.41903687]
[-19.94292641 106.43592834]
[-30.33865547 94.53195953]
[-29.18882942 78.76955414]
[-17.17562103 68.50025940]
[-1.42625177 69.81667328]
[8.71545506 81.93778229]
[23.67570305 83.02909851]
[38.63595200 84.12040710]
[53.59620285 85.21171570]
[57.32365799 78.70355988]
[44.30734634 71.24864960]
[31.29103661 63.79374313]
[18.27484322 56.33863068]
[25.73015594 43.32255173]
[38.74594879 50.77743149]
[51.76225662 58.23234177]
[64.77856445 65.68725586]
[68.50601959 59.17909622]
[59.99493027 46.82752609]
[51.48384094 34.47595215]
[42.97275162 22.12438011]
[34.46166229 9.77280712]
[20.49565506 0.16099082]
[25.86566353 -15.92003345]
[42.80480194 -15.21155834]
[46.81323242 1.26171732]
[55.32432556 13.61328983]
[63.83541489 25.96486282]
[72.34650421 38.31643677]
[80.85759735 50.66800690]
[95.72064209 48.64567184]
[100.62219238 34.46911621]
[105.52374268 20.29255676]
[93.44525146 29.18694496]
[78.81799316 32.51008224]
[64.08211517 29.70759964]
[51.69589615 21.24701118]
[43.72563553 8.53973293]
[41.50094986 -6.29437542]
[45.39296722 -20.78065109]
[54.75241089 -32.50246048]
[68.01791382 -39.50434113]
[82.97650146 -40.61822128]
[97.13273621 -35.65828323]
[108.12504578 -25.45195198]
[114.11966705 -11.70187664]
[114.11684418 3.29673266]
[122.62793732 -9.05484009]
[131.13902283 -21.40641212]
[139.65011597 -33.75798416]
[138.17144775 -49.73274994]
[149.83845520 -60.74457932]
[165.70121765 -58.34614563]
[173.59117126 -44.37731552]
[167.45582581 -29.55378342]
[152.00169373 -25.24689484]
[143.49060059 -12.89532185]
[134.97950745 -0.54374981]
[126.46841431 11.80782318]
[119.70030212 25.19410706]
[114.79875183 39.37066650]
[109.89720154 53.54722214]
[134.33103943 76.50370026]
[135.24885559 105.70695496]
[118.03335571 123.74188995]
[123.80962372 137.58511353]
[129.58589172 151.42832947]
[135.81849670 158.19638062]
[135.33502197 165.62011719]
[140.82205200 179.58050537]
[146.30908203 193.54089355]
[151.79612732 207.50129700]
[170.88960266 208.99328613]
[185.38755798 227.47106934]
[200.09552002 230.41654968]
[209.68142700 218.48471069]
[223.71896362 212.38502502]
[238.98240662 213.51914978]
[251.96429443 221.62649536]
[259.68151855 234.84400940]
[260.36071777 250.13444519]
[253.84579468 263.98416138]
[241.63383484 273.21057129]
[226.53108215 275.69354248]
[212.00801086 270.86248779]
[201.40193176 259.82757568]
[197.15002441 245.12451172]
[182.44206238 242.17903137]
[176.64140320 246.93321228]
[179.07524109 261.73443604]
[165.04005432 256.44155884]
[159.23937988 261.19573975]
[159.23937988 276.19573975]
[159.23937988 291.19573975]
[159.23937988 306.19573975]
[159.23937988 321.19573975]
[159.23937988 336.19573975]
[159.23937988 351.19573975]
[159.23937988 366.19573975]
[159.23937988 381.19573975]
[159.23937988 396.19573975]
[159.23937988 411.19573975]
[159.23937988 426.19573975]
[173.77926636 430.25704956]
[186.68365479 438.09155273]
[196.99493408 449.11788940]
[203.94796753 462.51782227]
[207.02676392 477.29699707]
[206.00286865 492.35867310]
[200.95227051 506.58520508]
[192.24974060 518.92083740]
[180.54107666 528.45025635]
[166.69514465 534.46630859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 109]
[25 108]
[26 107]
[27 106]
[28 104]
[29 103]
[30 102]
[33 46]
[34 45]
[35 44]
[36 43]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[68 99]
[69 98]
[70 97]
[84 96]
[85 95]
[86 94]
[87 93]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
