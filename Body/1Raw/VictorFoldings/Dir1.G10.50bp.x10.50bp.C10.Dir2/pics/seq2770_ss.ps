%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUAAAUAGGGGGGGGGGGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAAxxxxxxxxxxCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCCCCCCCCCCCUCCUUAAUUA\
) } def
/len { sequence length } bind def

/coor [
[87.42061615 402.13818359]
[72.54972076 399.62680054]
[58.77090836 393.49530029]
[46.95033646 384.12915039]
[37.83105469 372.11709595]
[31.98630905 358.21420288]
[29.78350449 343.29449463]
[31.36111069 328.29574585]
[36.61995697 314.16085815]
[45.22946930 301.77832031]
[56.64844894 291.92654419]
[70.15908813 285.22476196]
[84.91209412 282.09432983]
[85.53606415 267.10733032]
[86.16004181 252.12030029]
[86.78401947 237.13328552]
[87.40799713 222.14627075]
[88.03197479 207.15925598]
[88.65595245 192.17224121]
[89.27993011 177.18521118]
[89.90390778 162.19819641]
[90.52788544 147.21118164]
[91.15186310 132.22416687]
[91.77584076 117.23715210]
[82.04277039 106.50339508]
[82.64551544 92.02642059]
[93.23714447 82.13887024]
[93.86112213 67.15185547]
[94.48509979 52.16483688]
[85.79578400 64.39168549]
[73.33239746 72.73818970]
[58.71799469 76.11741638]
[43.85573578 74.08931732]
[30.68105507 66.91799927]
[20.90963364 55.53734207]
[15.81395435 41.42940140]
[16.05760193 26.43137932]
[21.60884857 12.49640083]
[31.74478340 1.43914735]
[45.14545059 -5.30044651]
[60.06574631 -6.84471703]
[74.56267548 -2.99256039]
[86.74836731 5.75437498]
[95.03594208 18.25701904]
[98.34607697 32.88543701]
[103.54148865 18.81391716]
[108.73690796 4.74239779]
[113.93231964 -9.32912159]
[100.35086060 -15.71859741]
[87.36895752 -23.25195694]
[75.08271790 -31.87342644]
[63.58310318 -41.51917267]
[52.95526886 -52.11778259]
[43.27788925 -63.59078217]
[34.62261581 -75.85323334]
[27.05353355 -88.81434631]
[20.62667847 -102.37815857]
[15.38963604 -116.44424438]
[11.38117981 -130.90846252]
[8.63098621 -145.66372681]
[7.15941763 -160.60079956]
[6.97737026 -175.60906982]
[8.08619022 -190.57743835]
[10.47766972 -205.39506531]
[14.13410187 -219.95227051]
[19.02841568 -234.14125061]
[25.12437439 -247.85696411]
[32.37684250 -260.99786377]
[40.73213196 -273.46664429]
[50.12837219 -285.17098999]
[60.49600220 -296.02429199]
[71.75826263 -305.94613647]
[83.83176422 -314.86306763]
[96.62712097 -322.70910645]
[110.04959869 -329.42614746]
[123.99982452 -334.96441650]
[138.37451172 -339.28298950]
[153.06723022 -342.34982300]
[167.96919250 -344.14224243]
[182.97009277 -344.64697266]
[197.95883179 -343.86026001]
[212.82446289 -341.78796387]
[227.45692444 -338.44537354]
[241.74786377 -333.85729980]
[255.59147644 -328.05767822]
[268.88528442 -321.08944702]
[281.53085327 -313.00421143]
[293.43453979 -303.86181641]
[304.50827026 -293.72998047]
[314.66998291 -282.68365479]
[323.84448242 -270.80468750]
[331.96383667 -258.18099976]
[338.96792603 -244.90606689]
[344.80490112 -231.07815552]
[349.43154907 -216.79965210]
[352.81362915 -202.17628479]
[354.92605591 -187.31629944]
[355.75323486 -172.32972717]
[355.28900146 -157.32752991]
[353.53683472 -142.42077637]
[350.50967407 -127.71983337]
[346.22994995 -113.33354187]
[340.72937012 -99.36840820]
[334.04858398 -85.92784119]
[326.23715210 -73.11134338]
[317.35281372 -61.01380920]
[307.46142578 -49.72480011]
[296.63616943 -39.32790375]
[284.95724487 -29.90009308]
[272.51104736 -21.51116943]
[259.38980103 -14.22324276]
[245.69059753 -8.09027195]
[231.51487732 -3.15766406]
[216.96760559 0.53806132]
[202.15647888 2.96954179]
[187.19116211 4.11877537]
[172.18246460 3.97725272]
[157.24147034 2.54602242]
[142.47883606 -0.16431944]
[128.00384521 -4.13370609]
[122.80842590 9.93781376]
[117.61301422 24.00933266]
[112.41759491 38.08085251]
[109.47211456 52.78881454]
[108.84813690 67.77583313]
[108.22415924 82.76284790]
[117.95722961 93.49660492]
[117.35448456 107.97357941]
[106.76285553 117.86112976]
[106.13887787 132.84814453]
[105.51490021 147.83515930]
[104.89092255 162.82217407]
[104.26694489 177.80918884]
[103.64296722 192.79621887]
[103.01899719 207.78323364]
[102.39501953 222.77024841]
[101.77104187 237.75726318]
[101.14706421 252.74427795]
[100.52308655 267.73129272]
[99.89910889 282.71832275]
[114.34083557 287.06427002]
[127.24762726 294.86590576]
[137.80815125 305.63278198]
[145.35858154 318.68814087]
[149.42425537 333.21124268]
[149.74963379 348.28921509]
[146.31425476 362.97421265]
[139.33406067 376.34310913]
[129.24783325 387.55557251]
[116.68961334 395.90670776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[27 126]
[28 125]
[29 124]
[45 123]
[46 122]
[47 121]
[48 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
