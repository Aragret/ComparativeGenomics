%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCUAGCGGGGGGGGGGAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAxxxxxxxxxxAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCCCCCCCCCCCACCCUAAC\
) } def
/len { sequence length } bind def

/coor [
[78.62800598 424.43176270]
[64.78206635 418.41574097]
[53.07340240 408.88632202]
[44.37088013 396.55065918]
[39.32027817 382.32412720]
[38.29638672 367.26245117]
[41.37518311 352.48327637]
[48.32820511 339.08334351]
[58.63949203 328.05700684]
[71.54386902 320.22250366]
[86.08375549 316.16119385]
[86.08375549 301.16119385]
[86.08375549 286.16119385]
[86.08375549 271.16119385]
[86.08375549 256.16119385]
[86.08375549 241.16119385]
[86.08375549 226.16119385]
[86.08375549 211.16119385]
[86.08375549 196.16119385]
[86.08375549 181.16119385]
[77.73519897 172.35160828]
[77.65077209 159.81318665]
[86.42385864 150.30073547]
[86.73590851 135.30398560]
[87.04796600 120.30722809]
[83.92015076 95.90550995]
[73.25852203 85.35421753]
[62.59689713 74.80293274]
[50.94366074 84.27126312]
[38.33501434 92.42413330]
[24.91878700 99.16595459]
[10.85227966 104.41767120]
[-3.69958830 108.11772156]
[-18.56620216 110.22272491]
[-33.57325745 110.70799255]
[-48.54480743 109.56784058]
[-63.30531693 106.81563568]
[-77.68172455 102.48365021]
[-91.50547791 96.62266541]
[-104.61449432 89.30140686]
[-116.85508728 80.60570526]
[-128.08372498 70.63751984]
[-138.16877747 59.51371765]
[-146.99200439 47.36471939]
[-154.44993591 34.33296967]
[-160.45513916 20.57125854]
[-164.93721008 6.24093294]
[-167.84361267 -8.48999119]
[-169.14024353 -23.44880104]
[-168.81192017 -38.46010971]
[-166.86247253 -53.34792328]
[-163.31478882 -67.93768311]
[-158.21043396 -82.05833435]
[-151.60926819 -95.54431915]
[-143.58868408 -108.23752594]
[-134.24272156 -119.98912811]
[-123.68094635 -130.66134644]
[-112.02719879 -140.12905884]
[-99.41811371 -148.28125000]
[-86.00152588 -155.02233887]
[-71.93473816 -160.27330017]
[-57.38266754 -163.97257996]
[-42.51594162 -166.07678223]
[-27.50885963 -166.56123352]
[-12.53737068 -165.42027283]
[2.22298932 -162.66728210]
[16.59916496 -158.33451843]
[30.42259979 -152.47279358]
[43.53122711 -145.15083313]
[55.77134705 -136.45446777]
[66.99945831 -126.48567200]
[77.08390808 -115.36132812]
[85.90647125 -103.21186066]
[93.36370087 -90.17971039]
[99.36817169 -76.41767120]
[103.84947205 -62.08710861]
[106.75507355 -47.35602570]
[108.05090332 -32.39714813]
[107.72177124 -17.38585472]
[105.77153015 -2.49814820]
[102.22305298 12.09142208]
[97.11794281 26.21179962]
[90.51605225 39.69742966]
[82.49478149 52.39020538]
[73.14818573 64.14130402]
[83.80981445 74.69259644]
[94.47143555 85.24388123]
[109.17939758 88.18936920]
[123.08195496 82.55741119]
[136.98451233 76.92545319]
[150.88706970 71.29349518]
[164.78962708 65.66153717]
[178.17590332 58.89342499]
[190.95326233 51.03599930]
[203.73062134 43.17857361]
[203.93417358 27.75255394]
[212.46438599 14.89802456]
[226.59931946 8.71682167]
[241.82855225 11.18134403]
[253.29251099 21.50517082]
[257.33306885 36.39400864]
[252.66090393 51.09687805]
[240.76689148 60.92215347]
[225.44636536 62.73462296]
[211.58804321 55.95593262]
[198.81069946 63.81335831]
[186.03334045 71.67078400]
[200.72526550 74.69519043]
[210.95159912 85.66889191]
[212.93389893 100.53733063]
[205.93974304 113.80691528]
[192.55332947 120.57479095]
[177.72068787 118.34037018]
[166.92216492 107.92922211]
[164.14761353 93.18805695]
[170.42158508 79.56409454]
[156.51902771 85.19605255]
[142.61647034 90.82801056]
[128.71391296 96.45996857]
[114.81135559 102.09192657]
[129.80422974 101.62970734]
[141.23663330 111.34053802]
[143.20597839 126.21070099]
[134.69549561 138.56268311]
[120.09915924 142.01914978]
[106.95310211 134.79550171]
[102.04472351 120.61928558]
[101.73266602 135.61604309]
[101.42060852 150.61279297]
[110.67486572 166.49795532]
[101.08375549 181.16119385]
[101.08375549 196.16119385]
[101.08375549 211.16119385]
[101.08375549 226.16119385]
[101.08375549 241.16119385]
[101.08375549 256.16119385]
[101.08375549 271.16119385]
[101.08375549 286.16119385]
[101.08375549 301.16119385]
[101.08375549 316.16119385]
[115.62364197 320.22250366]
[128.52803040 328.05700684]
[138.83930969 339.08334351]
[145.79232788 352.48327637]
[148.87112427 367.26245117]
[147.84724426 382.32412720]
[142.79663086 396.55065918]
[134.09411621 408.88632202]
[122.38545227 418.41574097]
[108.53951263 424.43176270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[26 87]
[27 86]
[28 85]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[93 107]
[94 106]
[95 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
