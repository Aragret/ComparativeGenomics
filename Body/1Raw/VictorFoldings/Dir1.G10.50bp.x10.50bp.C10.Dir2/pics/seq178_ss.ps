%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUAAUAGGGGGGGGGGACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAxxxxxxxxxxCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCCCCCCCCCCCAUAGUAAUA\
) } def
/len { sequence length } bind def

/coor [
[103.26869965 423.24374390]
[89.42276001 417.22772217]
[77.71410370 407.69830322]
[69.01157379 395.36264038]
[63.96097565 381.13610840]
[62.93708420 366.07443237]
[66.01588440 351.29525757]
[72.96890259 337.89532471]
[83.28018951 326.86898804]
[96.18457031 319.03448486]
[110.72445679 314.97317505]
[110.72445679 299.97317505]
[110.72445679 284.97317505]
[110.72445679 269.97317505]
[110.72445679 254.97317505]
[110.72445679 239.97317505]
[110.72445679 224.97317505]
[110.72445679 209.97317505]
[110.72445679 194.97317505]
[110.72445679 179.97317505]
[108.85684204 165.08990479]
[105.15068054 150.55496216]
[101.44451904 136.02003479]
[97.73835754 121.48509216]
[79.81238556 107.69313049]
[84.01329803 85.46901703]
[77.10629272 72.15386200]
[70.19929504 58.83870697]
[58.49967575 49.45154572]
[44.00407791 45.59438705]
[29.50848007 41.73722458]
[15.01288414 37.88006592]
[0.51728743 34.02290726]
[-13.97830963 30.16574860]
[-28.47390556 26.30858803]
[-36.89023590 38.89604568]
[-48.93919754 48.06671906]
[-63.31380844 52.82584000]
[-78.45482635 52.65717697]
[-92.71984863 47.57902145]
[-104.56153107 38.14221573]
[-112.69537354 25.37039757]
[-116.23906708 10.64895248]
[-114.80822754 -4.42524481]
[-108.55805969 -18.21705818]
[-98.16653442 -29.23045540]
[-84.76084137 -36.27078247]
[-69.79514313 -38.57436371]
[-54.89279556 -35.89131546]
[-41.67029572 -28.51268387]
[-31.56192207 -17.23884010]
[-25.66415787 -3.29269099]
[-24.61674690 11.81299210]
[-10.12115002 15.67015076]
[4.37444687 19.52731133]
[18.87004280 23.38446999]
[33.36563873 27.24162865]
[47.86123657 31.09878922]
[62.35683441 34.95594788]
[66.61274719 19.45468330]
[79.08834839 12.28287983]
[81.26519012 -2.55832553]
[83.44202423 -17.39953041]
[85.61886597 -32.24073792]
[87.79570007 -47.08194351]
[73.71083069 -52.41397858]
[61.10174179 -60.64956665]
[50.55817413 -71.40351105]
[42.57327652 -84.17282104]
[37.52050781 -98.36026764]
[35.63620377 -113.30227661]
[37.00849152 -128.29997253]
[41.57319260 -142.65188599]
[49.11680222 -155.68676758]
[59.28649139 -166.79493713]
[71.60660553 -175.45684814]
[85.50092316 -181.26737976]
[100.31955719 -183.95474243]
[115.36943817 -183.39326477]
[129.94664001 -179.60919189]
[143.36936951 -172.77951050]
[155.00981140 -163.22366333]
[164.32353210 -151.38861084]
[170.87490845 -137.82786560]
[174.35751343 -123.17572021]
[174.60847473 -108.11746216]
[171.61602783 -93.35740662]
[165.52017212 -79.58589172]
[156.60598755 -67.44705200]
[145.29042053 -57.50863647]
[132.10273743 -50.23548126]
[117.65971375 -45.96776962]
[102.63690186 -44.90510559]
[100.46006775 -30.06389999]
[98.28323364 -15.22269440]
[96.10639191 -0.38148850]
[93.92955780 14.45971680]
[103.42016602 26.96651268]
[99.69228363 43.51888275]
[83.51445007 51.93170929]
[90.42145538 65.24686432]
[97.32845306 78.56201935]
[105.48880005 79.10508728]
[112.86255646 82.64260864]
[118.39297485 88.66762543]
[133.10093689 85.72213745]
[145.05239868 74.49295807]
[160.67260742 79.48704529]
[163.89283752 95.56691742]
[151.40039062 106.19097137]
[136.04641724 100.43009949]
[121.33845520 103.37558746]
[119.66590118 108.94294739]
[116.56945038 113.86280823]
[112.27330017 117.77893066]
[115.97945404 132.31387329]
[119.68561554 146.84880066]
[123.39177704 161.38374329]
[128.84558105 147.41033936]
[139.73977661 137.09933472]
[153.99180603 132.42179871]
[168.87727356 134.27186584]
[181.55067444 142.29588318]
[189.58935547 154.95999146]
[191.45664978 169.84330750]
[186.79560852 184.10075378]
[176.49722290 195.00686646]
[162.53013611 200.47683716]
[147.56430054 199.46502686]
[134.46057129 192.16485596]
[125.72445679 179.97317505]
[125.72445679 194.97317505]
[125.72445679 209.97317505]
[125.72445679 224.97317505]
[125.72445679 239.97317505]
[125.72445679 254.97317505]
[125.72445679 269.97317505]
[125.72445679 284.97317505]
[125.72445679 299.97317505]
[125.72445679 314.97317505]
[140.26434326 319.03448486]
[153.16873169 326.86898804]
[163.48001099 337.89532471]
[170.43302917 351.29525757]
[173.51182556 366.07443237]
[172.48794556 381.13610840]
[167.43733215 395.36264038]
[158.73481750 407.69830322]
[147.02615356 417.22772217]
[133.18020630 423.24374390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 118]
[22 117]
[23 116]
[24 115]
[26 102]
[27 101]
[28 100]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[61 97]
[62 96]
[63 95]
[64 94]
[65 93]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
