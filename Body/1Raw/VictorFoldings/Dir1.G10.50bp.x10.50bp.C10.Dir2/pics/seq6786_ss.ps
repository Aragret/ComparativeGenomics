%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACCUUCUGGGGGGGGGGUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAxxxxxxxxxxUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUACCCCCCCCCCACCACGUUCU\
) } def
/len { sequence length } bind def

/coor [
[76.80004120 542.05816650]
[62.95410156 536.04217529]
[51.24544144 526.51275635]
[42.54291534 514.17706299]
[37.49231339 499.95053101]
[36.46842194 484.88885498]
[39.54722214 470.10971069]
[46.50024414 456.70977783]
[56.81152725 445.68344116]
[69.71591187 437.84893799]
[84.25579834 433.78762817]
[84.25579834 418.78762817]
[84.25579834 403.78762817]
[84.25579834 388.78762817]
[84.25579834 373.78762817]
[84.25579834 358.78762817]
[84.25579834 343.78762817]
[84.25579834 328.78762817]
[84.25579834 313.78762817]
[84.25579834 298.78762817]
[84.25579834 283.78762817]
[81.52542114 279.79757690]
[81.31691742 274.03668213]
[84.58083344 268.16690063]
[85.20481110 253.17987061]
[75.21625519 244.98075867]
[71.74146271 232.33163452]
[76.27223206 219.81364441]
[87.35794830 212.09584045]
[88.29357147 197.12504578]
[89.07341766 182.14532471]
[89.69739532 167.15830994]
[90.32137299 152.17129517]
[90.94535065 137.18428040]
[91.56932831 122.19726562]
[79.27409363 111.58583069]
[76.67561340 95.55388641]
[63.58246231 88.23477936]
[50.48930740 80.91567993]
[39.84968185 91.62552643]
[26.71455193 99.06669617]
[12.05862808 102.68698120]
[-3.03052020 102.21775055]
[-17.43317795 97.69381714]
[-30.08057594 89.45088196]
[-40.03418732 78.10063171]
[-46.55539322 64.48532867]
[-49.16027451 49.61531830]
[-47.65553284 34.59405899]
[-42.15282822 20.53621864]
[-33.06049728 8.48498917]
[-21.05325699 -0.66534972]
[-7.02211761 -6.23578262]
[7.99171400 -7.81294632]
[22.87411118 -5.27980471]
[36.52070236 1.17566621]
[47.91882324 11.07442760]
[56.22264862 23.68192673]
[60.81599045 38.06259918]
[61.35798264 53.14931107]
[57.80841064 67.82252502]
[70.90156555 75.14162445]
[83.99472046 82.46073151]
[94.61322784 76.87474060]
[106.60716248 77.19342041]
[115.11825562 64.84184265]
[123.62934875 52.49027252]
[132.14044189 40.13869858]
[118.45995331 46.29047775]
[103.69160461 48.91649246]
[88.72901154 47.85784531]
[74.47753143 43.17860031]
[61.79950714 35.16188431]
[51.46206665 24.29278564]
[44.09071732 11.22897339]
[40.13148499 -3.23907709]
[39.82394028 -18.23592377]
[43.18669128 -32.85412979]
[50.01626587 -46.20916367]
[59.89941025 -57.49293137]
[72.23811340 -66.02266693]
[86.28577423 -71.28224945]
[101.19239044 -72.95343018]
[116.05597687 -70.93508911]
[129.97717285 -65.34934235]
[142.11360168 -56.53419113]
[151.73092651 -45.02301788]
[158.24720764 -31.51235199]
[161.26814270 -16.81970406]
[160.61096191 -1.83410752]
[156.31541443 12.53767967]
[148.64263916 25.42447853]
[161.88522339 18.37934303]
[175.12780762 11.33420849]
[188.37039185 4.28907347]
[187.70666504 -10.95960522]
[193.73269653 -24.98278618]
[205.25204468 -34.99615479]
[219.97750854 -39.01155090]
[234.98535156 -36.23171616]
[247.29574585 -27.20858383]
[254.46446228 -13.73370743]
[255.06814575 1.51746714]
[248.98692322 15.51680851]
[237.42823792 25.48473740]
[222.68707275 29.44211388]
[207.69029236 26.60319901]
[195.41552734 17.53166008]
[182.17294312 24.57679367]
[168.93035889 31.62192917]
[155.68777466 38.66706467]
[144.49200439 48.64979172]
[135.98091125 61.00136185]
[127.46982574 73.35293579]
[118.95874023 85.70450592]
[123.74436188 99.99118805]
[118.96934509 114.28141022]
[106.55634308 122.82124329]
[105.93236542 137.80825806]
[105.30838776 152.79527283]
[104.68441010 167.78228760]
[104.06044006 182.76930237]
[106.84371185 191.53886414]
[103.26436615 198.06066895]
[102.32873535 213.03146362]
[114.13351440 225.89942932]
[113.03356171 242.98960876]
[100.19182587 253.80384827]
[99.56784821 268.79086304]
[99.25579834 283.78762817]
[99.25579834 298.78762817]
[99.25579834 313.78762817]
[99.25579834 328.78762817]
[99.25579834 343.78762817]
[99.25579834 358.78762817]
[99.25579834 373.78762817]
[99.25579834 388.78762817]
[99.25579834 403.78762817]
[99.25579834 418.78762817]
[99.25579834 433.78762817]
[113.79568481 437.84893799]
[126.70006561 445.68344116]
[137.01135254 456.70977783]
[143.96437073 470.10971069]
[147.04316711 484.88885498]
[146.01927185 499.95053101]
[140.96867371 514.17706299]
[132.26614380 526.51275635]
[120.55748749 536.04217529]
[106.71154785 542.05816650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[29 125]
[30 124]
[31 122]
[32 121]
[33 120]
[34 119]
[35 118]
[37 63]
[38 62]
[39 61]
[65 115]
[66 114]
[67 113]
[68 112]
[92 111]
[93 110]
[94 109]
[95 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
