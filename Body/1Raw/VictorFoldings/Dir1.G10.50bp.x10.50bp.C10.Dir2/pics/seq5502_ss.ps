%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUCCCUAGGGGGGGGGGGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAxxxxxxxxxxUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCCCCCCCCCCCUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[113.13425446 454.56060791]
[99.28831482 448.54455566]
[87.57965088 439.01513672]
[78.87712860 426.67947388]
[73.82653046 412.45297241]
[72.80263519 397.39126587]
[75.88143921 382.61212158]
[82.83445740 369.21218872]
[93.14574432 358.18585205]
[106.05012512 350.35134888]
[120.59001160 346.29003906]
[120.59001160 331.29003906]
[120.59001160 316.29003906]
[120.59001160 301.29003906]
[120.59001160 286.29003906]
[120.59001160 271.29003906]
[120.59001160 256.29003906]
[120.59001160 241.29003906]
[120.59001160 226.29003906]
[120.59001160 211.29003906]
[105.19727325 183.95402527]
[119.30591583 163.27613831]
[114.99833679 148.90795898]
[110.69075012 134.53977966]
[106.38316345 120.17158508]
[102.07557678 105.80340576]
[101.86532593 119.75839996]
[94.81658173 133.12602234]
[81.41661072 143.40077209]
[66.77310944 146.65159607]
[55.05783844 158.12698364]
[39.33710861 153.45893860]
[35.78305817 137.44953918]
[48.05178833 126.56788635]
[63.52228546 132.00808716]
[78.16578674 128.75726318]
[79.17694855 121.32574463]
[67.31632233 112.14285278]
[81.19928741 106.46269989]
[82.21045685 99.03117371]
[68.96786499 91.98603821]
[55.37691879 85.63890839]
[41.47436142 80.00695038]
[27.57180595 74.37500000]
[12.29716587 79.28060150]
[-0.98144621 70.27738190]
[-2.07781625 54.27183151]
[9.84909725 43.54204559]
[25.64998627 46.31899643]
[33.20376205 60.47244263]
[47.10631943 66.10440063]
[61.00887299 71.73635101]
[58.01808929 57.03753662]
[67.48088074 45.39899826]
[82.48070526 45.32756424]
[92.05391693 56.87545013]
[89.20326233 71.60208130]
[76.01300049 78.74345398]
[89.25559235 85.78858948]
[103.38039398 80.73983002]
[109.15666199 66.89661407]
[114.93293762 53.05339813]
[120.70920563 39.21017838]
[126.48548126 25.36696243]
[132.26174927 11.52374363]
[126.49457550 -2.94613433]
[132.54974365 -16.90283966]
[146.38009644 -22.31179237]
[152.15637207 -36.15501022]
[139.21926880 -28.56346703]
[124.24270630 -27.72532845]
[110.53935242 -33.82598495]
[101.14025879 -45.51602936]
[98.12442017 -60.20972443]
[102.15892029 -74.65696716]
[112.35135651 -85.66215515]
[126.44725800 -90.79105377]
[141.32875061 -88.90917969]
[153.70416260 -80.43280029]
[160.83618164 -67.23680878]
[161.14685059 -52.23809814]
[169.91305542 -64.40993500]
[178.67927551 -76.58177185]
[187.44548035 -88.75360870]
[180.11167908 -102.13935089]
[179.32057190 -117.38195801]
[185.22926331 -131.45498657]
[196.66455078 -141.56423950]
[211.35595703 -145.70251465]
[226.38648987 -143.04814148]
[238.77183533 -134.12815857]
[246.05287170 -120.71364594]
[246.78393555 -105.46804810]
[240.81988525 -91.41839600]
[229.34487915 -81.35424805]
[214.63728333 -77.27386475]
[199.61730957 -79.98740387]
[190.85110474 -67.81556702]
[182.08489990 -55.64373016]
[173.31869507 -43.47189331]
[165.99958801 -30.37873840]
[160.22331238 -16.53552055]
[166.10729980 -2.90048432]
[160.44654846 11.22079182]
[146.10496521 17.30001640]
[140.32870483 31.14323425]
[134.55242920 44.98645020]
[128.77615356 58.82966995]
[122.99988556 72.67288971]
[117.22360992 86.51610565]
[116.44376373 101.49581909]
[120.75135040 115.86400604]
[125.05893707 130.23219299]
[129.36651611 144.60037231]
[133.67410278 158.96855164]
[152.17257690 161.41784668]
[165.63467407 180.25114441]
[179.65138245 185.59265137]
[193.66809082 190.93417358]
[208.83737183 185.71185303]
[222.30041504 194.43688965]
[223.72952271 210.41616821]
[212.02841187 221.39175415]
[196.17317200 218.94412231]
[188.32658386 204.95088196]
[174.30987549 199.60937500]
[160.29315186 194.26785278]
[154.11737061 198.52340698]
[155.31271362 213.47569275]
[141.76579285 207.03450012]
[135.59001160 211.29003906]
[135.59001160 226.29003906]
[135.59001160 241.29003906]
[135.59001160 256.29003906]
[135.59001160 271.29003906]
[135.59001160 286.29003906]
[135.59001160 301.29003906]
[135.59001160 316.29003906]
[135.59001160 331.29003906]
[135.59001160 346.29003906]
[150.12989807 350.35134888]
[163.03427124 358.18585205]
[173.34556580 369.21218872]
[180.29858398 382.61212158]
[183.37738037 397.39126587]
[182.35348511 412.45297241]
[177.30288696 426.67947388]
[168.60037231 439.01513672]
[156.89170837 448.54455566]
[143.04576111 454.56060791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 115]
[23 114]
[24 113]
[25 112]
[26 111]
[29 36]
[30 35]
[40 59]
[41 58]
[42 52]
[43 51]
[44 50]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[68 102]
[69 101]
[81 100]
[82 99]
[83 98]
[84 97]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
