%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCCUUCUGGGGGGGGGGUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUxxxxxxxxxxUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAACCCCCCCCCCAUAUCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[82.29010010 407.34152222]
[68.44416046 401.32546997]
[56.73549652 391.79605103]
[48.03297043 379.46038818]
[42.98236847 365.23388672]
[41.95848083 350.17218018]
[45.03727722 335.39303589]
[51.99029922 321.99310303]
[62.30158234 310.96676636]
[75.20596313 303.13226318]
[89.74584961 299.07095337]
[89.74584961 284.07095337]
[89.74584961 269.07095337]
[89.74584961 254.07095337]
[89.74584961 239.07095337]
[89.74584961 224.07095337]
[89.74584961 209.07095337]
[89.74584961 194.07095337]
[89.74584961 179.07095337]
[89.74584961 164.07095337]
[89.74584961 149.07095337]
[78.55008698 139.08822632]
[63.64818192 140.80091858]
[48.74628067 142.51361084]
[33.84437943 144.22628784]
[19.07832336 146.86515808]
[4.50562048 150.41992188]
[-10.06708241 153.97468567]
[-24.63978577 157.52944946]
[-34.16757584 170.43682861]
[-50.20418930 170.89132690]
[-60.44770813 158.54426575]
[-57.04018021 142.86726379]
[-42.59556961 135.88638306]
[-28.19454765 142.95674133]
[-13.62184429 139.40197754]
[0.95085871 135.84721375]
[15.52356148 132.29244995]
[3.55526447 123.25034332]
[1.29565454 108.42150879]
[10.02763462 96.22509766]
[24.79358864 93.58566284]
[37.21008301 102.00175476]
[40.22761154 116.69509888]
[32.13169098 129.32438660]
[47.03359222 127.61170197]
[61.93549347 125.89900970]
[76.83739471 124.18632507]
[68.97213745 89.87834167]
[95.78102112 68.49574280]
[86.65255737 55.57360077]
[93.02644348 42.11169815]
[91.46886444 27.19278717]
[89.91128540 12.27387524]
[75.23665619 8.54818439]
[62.74558258 0.04259851]
[53.93478012 -12.20035839]
[49.85199356 -26.69176674]
[50.97141266 -41.67737198]
[57.13868332 -55.34994888]
[67.59185791 -66.06723022]
[81.05548859 -72.54920197]
[79.49790955 -87.46810913]
[77.94033051 -102.38702393]
[63.18094635 -105.76924133]
[50.32078934 -113.76268005]
[40.75482559 -125.50027466]
[35.52070618 -139.70881653]
[35.18618774 -154.84707642]
[39.78755569 -169.27294922]
[48.82568359 -181.42166138]
[61.32018661 -189.97537231]
[75.91575623 -194.00627136]
[91.02917480 -193.07708740]
[105.02104950 -187.28863525]
[116.37364197 -177.26878357]
[123.85551453 -164.10443115]
[126.65509033 -149.22352600]
[124.46868134 -134.24026489]
[117.53347015 -120.77989197]
[106.60172272 -110.30250549]
[92.85923767 -103.94460297]
[94.41682434 -89.02569580]
[95.97440338 -74.10678101]
[110.48657227 -70.54557800]
[122.92803192 -62.21855927]
[131.78643799 -50.11471558]
[135.97706604 -35.68349457]
[134.97560120 -20.66127205]
[128.88363647 -6.86242104]
[118.41880035 4.03983402]
[104.83019257 10.71629429]
[106.38777924 25.63520622]
[107.94535828 40.55411911]
[116.96241760 52.40915680]
[110.69993591 66.93815613]
[123.63799286 74.52806854]
[137.42036438 68.60810852]
[151.20275879 62.68814087]
[164.98513794 56.76817703]
[178.76751709 50.84821701]
[188.14179993 37.39255905]
[204.45672607 39.05252075]
[210.92887878 54.12047195]
[200.90026855 67.09580231]
[184.68748474 64.63059998]
[170.90509033 70.55056000]
[157.12271118 76.47052002]
[143.34033203 82.39048767]
[129.55795288 88.31044769]
[131.60005188 108.16164398]
[121.28265381 125.85600281]
[135.60525513 130.31282043]
[151.08111572 127.02526093]
[160.93470764 138.19468689]
[175.25730896 142.65150452]
[189.57991028 147.10830688]
[203.90251160 151.56512451]
[219.77168274 147.42973328]
[231.09341431 159.29356384]
[226.22087097 174.95211792]
[210.16651917 178.29722595]
[199.44569397 165.88772583]
[185.12309265 161.43090820]
[170.80049133 156.97409058]
[156.47790527 152.51727295]
[142.02647400 156.12362671]
[131.14843750 144.63542175]
[116.82584381 140.17860413]
[104.74584961 149.07095337]
[104.74584961 164.07095337]
[104.74584961 179.07095337]
[104.74584961 194.07095337]
[104.74584961 209.07095337]
[104.74584961 224.07095337]
[104.74584961 239.07095337]
[104.74584961 254.07095337]
[104.74584961 269.07095337]
[104.74584961 284.07095337]
[104.74584961 299.07095337]
[119.28573608 303.13226318]
[132.19012451 310.96676636]
[142.50140381 321.99310303]
[149.45442200 335.39303589]
[152.53321838 350.17218018]
[151.50933838 365.23388672]
[146.45872498 379.46038818]
[137.75621033 391.79605103]
[126.04754639 401.32546997]
[112.20160675 407.34152222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 48]
[23 47]
[24 46]
[25 45]
[26 38]
[27 37]
[28 36]
[29 35]
[50 96]
[52 94]
[53 93]
[54 92]
[62 84]
[63 83]
[64 82]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
[112 129]
[113 128]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
