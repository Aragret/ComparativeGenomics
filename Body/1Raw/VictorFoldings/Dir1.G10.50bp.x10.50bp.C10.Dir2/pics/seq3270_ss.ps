%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCAACCUCGGGGGGGGGGCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACxxxxxxxxxxUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCCCCCCCCCCCUGGUCAACCUC\
) } def
/len { sequence length } bind def

/coor [
[84.12962341 384.10897827]
[72.96234894 374.01019287]
[64.13907623 361.81005859]
[58.04552841 348.04190063]
[54.94808960 333.30758667]
[54.98216248 318.25128174]
[58.14626312 303.53115845]
[64.30207062 289.79071045]
[73.18046570 277.63061523]
[84.39334106 267.58248901]
[97.45051575 260.08554077]
[111.78117371 255.46754456]
[110.24388123 240.54653931]
[108.70658875 225.62551880]
[107.16929626 210.70449829]
[105.63200378 195.78347778]
[104.09471130 180.86247253]
[102.55741882 165.94145203]
[101.02012634 151.02043152]
[99.48283386 136.09942627]
[97.94554138 121.17840576]
[98.01766205 136.17822266]
[89.64910889 148.62681580]
[75.73182678 154.22227478]
[61.07523727 151.03097534]
[50.74425888 140.15573120]
[48.30899048 125.35472870]
[54.61100006 111.74279785]
[67.47248077 104.02384186]
[82.44918823 104.86543274]
[67.62670135 102.56455994]
[52.80422211 100.26367950]
[37.98173904 97.96280670]
[23.15925789 95.66193390]
[8.33677578 93.36106110]
[0.11738516 106.18141174]
[-12.60947704 114.54483795]
[-27.63880348 117.00231934]
[-42.36667633 113.12808228]
[-54.24139786 103.59336090]
[-61.20560074 90.05010986]
[-62.05270004 74.84476471]
[-56.63592529 60.61176300]
[-45.89376831 49.81704330]
[-31.68737221 44.33086395]
[-16.47807884 45.10373306]
[-2.90099406 52.00175095]
[6.69157314 63.82979202]
[10.63765144 78.53857422]
[25.46013260 80.83944702]
[40.28261566 83.14032745]
[55.10509872 85.44120026]
[69.92758179 87.74207306]
[84.75006104 90.04295349]
[92.51519775 77.20929718]
[83.59904480 65.14686584]
[74.68289185 53.08443451]
[65.76674652 41.02200317]
[56.85059357 28.95956993]
[42.57341766 19.81634521]
[47.40700531 3.56602955]
[64.36032104 3.71218419]
[68.91302490 20.04341888]
[77.82917786 32.10585022]
[86.74532318 44.16828156]
[95.66147614 56.23071289]
[104.57762909 68.29314423]
[119.49864197 69.83043671]
[130.68693542 59.83934021]
[121.97766876 47.60774994]
[114.66685486 34.49229431]
[108.84325409 20.65217781]
[104.57755280 6.25540876]
[101.92152405 -8.52324963]
[100.90743256 -23.50439835]
[101.54756927 -38.50617981]
[103.83416748 -53.34648132]
[107.73947144 -67.84516144]
[113.21607971 -81.82622528]
[120.19750214 -95.11994171]
[128.59899902 -107.56494141]
[138.31857300 -119.01015472]
[149.23825073 -129.31665039]
[161.22546387 -138.35931396]
[174.13471985 -146.02838135]
[187.80928040 -152.23075867]
[202.08317566 -156.89112854]
[216.78312683 -159.95295715]
[231.73068237 -161.37904358]
[246.74440002 -161.15209961]
[261.64202881 -159.27485657]
[276.24270630 -155.77014160]
[290.36923218 -150.68045044]
[303.85006714 -144.06761169]
[316.52163696 -136.01185608]
[328.23004150 -126.61100769]
[338.83322144 -115.97917175]
[348.20242310 -104.24541473]
[356.22393799 -91.55216217]
[362.80035400 -78.05350494]
[367.85189819 -63.91329956]
[371.31719971 -49.30320358]
[373.15420532 -34.40056610]
[373.34060669 -19.38629341]
[371.87417603 -4.44264078]
[368.77267456 10.24898720]
[364.07376099 24.51024628]
[357.83450317 38.16802216]
[350.13061523 51.05651474]
[341.05563354 63.01927567]
[330.71969604 73.91108704]
[319.24826050 83.59973145]
[306.78063965 91.96759796]
[293.46810913 98.91310883]
[279.47232056 104.35194397]
[264.96313477 108.21809387]
[250.11672974 110.46462250]
[235.11326599 111.06425476]
[220.13491821 110.00971985]
[205.36347961 107.31380463]
[190.97828674 103.00925446]
[177.15393066 97.14830017]
[164.05827332 89.80210876]
[151.85023499 81.05984497]
[140.67803955 71.02763367]
[129.48974609 81.01873779]
[112.86655426 119.64111328]
[114.40384674 134.56213379]
[115.94113922 149.48313904]
[117.47843170 164.40415955]
[119.01572418 179.32518005]
[120.55301666 194.24618530]
[122.09030914 209.16720581]
[123.62760162 224.08822632]
[125.16489410 239.00924683]
[126.70218658 253.93025208]
[141.67338562 255.52932739]
[155.98483276 260.20651245]
[169.01091003 267.75732422]
[180.18215942 277.85174561]
[189.01023865 290.04840088]
[195.10919189 303.81417847]
[198.21243286 318.54724121]
[198.18428040 333.60357666]
[195.02597046 348.32495117]
[188.87557983 362.06781006]
[180.00195312 374.23138428]
[168.79302979 384.28393555]
[155.73881531 391.78601074]
[141.40997314 396.40963745]
[126.43290710 397.95269775]
[111.46234131 396.34774780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[68 126]
[69 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
