%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACACUCGGGGGGGGGGAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUxxxxxxxxxxUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCCCCCCCCCCCAUACUC\
) } def
/len { sequence length } bind def

/coor [
[67.23571014 376.25842285]
[54.01551437 368.98596191]
[43.12870789 358.53894043]
[35.31757736 345.62969971]
[31.11469841 331.13839722]
[30.80662537 316.05303955]
[34.41436768 301.40222168]
[41.69194031 288.18484497]
[52.14314651 277.30206299]
[65.05541229 269.49591064]
[79.54834747 265.29864502]
[79.23628998 250.30187988]
[78.92423248 235.30513000]
[78.61217499 220.30836487]
[78.30011749 205.31161499]
[77.98806763 190.31486511]
[77.67601013 175.31811523]
[77.36395264 160.32135010]
[77.05189514 145.32460022]
[76.73983765 130.32785034]
[72.38190460 109.30164337]
[80.64567566 94.71006012]
[92.81958008 91.68526459]
[87.62416077 77.61374664]
[73.20816803 81.78230286]
[58.52895737 84.89976501]
[43.66306305 86.94987488]
[28.68799019 87.92194366]
[13.68181038 87.81090546]
[-1.27723920 86.61734009]
[-16.11116791 84.34746552]
[-30.74263763 81.01312256]
[-45.09536743 76.63169861]
[-59.09452438 71.22602081]
[-72.66712952 64.82428741]
[-85.74240875 57.45986176]
[-98.25220490 49.17115021]
[-110.13129425 40.00136185]
[-121.31774139 29.99830627]
[-131.75323486 19.21413231]
[-141.38334656 7.70506477]
[-150.15788269 -4.46889162]
[-158.03109741 -17.24426651]
[-164.96194458 -30.55445671]
[-170.91429138 -44.33006668]
[-175.85708618 -58.49927521]
[-179.76457214 -72.98821259]
[-182.61639404 -87.72133636]
[-184.39765930 -102.62183380]
[-185.09909058 -117.61202240]
[-184.71702576 -132.61373901]
[-183.25346375 -147.54879761]
[-180.71601868 -162.33930969]
[-177.11795044 -176.90815735]
[-172.47799683 -191.17941284]
[-166.82034302 -205.07864380]
[-160.17449951 -218.53340149]
[-152.57511902 -231.47354126]
[-144.06179810 -243.83158875]
[-134.67893982 -255.54310608]
[-124.47547150 -266.54705811]
[-113.50456238 -276.78604126]
[-101.82343292 -286.20672607]
[-89.49298096 -294.75994873]
[-76.57747650 -302.40112305]
[-63.14427567 -309.09042358]
[-49.26340103 -314.79296875]
[-35.00722504 -319.47903442]
[-20.45007706 -323.12420654]
[-5.66784668 -325.70944214]
[9.26239491 -327.22128296]
[24.26280785 -327.65182495]
[39.25518417 -326.99887085]
[54.16136551 -325.26577759]
[68.90363312 -322.46160889]
[83.40512085 -318.60098267]
[97.59023285 -313.70401001]
[111.38501740 -307.79623413]
[124.71753693 -300.90844727]
[137.51829529 -293.07656860]
[149.72056580 -284.34143066]
[161.26069641 -274.74856567]
[172.07855225 -264.34802246]
[182.11772156 -253.19395447]
[191.32586670 -241.34457397]
[199.65496826 -228.86164856]
[207.06163025 -215.81022644]
[213.50720215 -202.25839233]
[218.95811462 -188.27679443]
[223.38591003 -173.93829346]
[226.76753235 -159.31768799]
[229.08535767 -144.49116516]
[230.32727051 -129.53605652]
[230.48681641 -114.53031921]
[229.56317139 -99.55217743]
[227.56112671 -84.67973328]
[224.49113464 -69.99052429]
[220.36920166 -55.56112671]
[215.21682739 -41.46677780]
[209.06085205 -27.78095627]
[201.93338013 -14.57501411]
[193.87156677 -1.91780162]
[184.91744995 10.12469101]
[175.11772156 21.48967934]
[164.52345276 32.11791229]
[153.18989563 41.95397568]
[141.17613220 50.94659042]
[128.54478455 59.04887390]
[115.36172485 66.21858215]
[101.69567871 72.41833496]
[106.89109802 86.48985291]
[118.19010162 96.35557556]
[132.83360291 99.60639954]
[147.47709656 102.85722351]
[162.12060547 106.10805511]
[176.76411438 109.35887909]
[192.23460388 103.91867065]
[204.50332642 114.80032349]
[200.94927979 130.80972290]
[185.22854614 135.47776794]
[173.51327515 124.00238037]
[158.86978149 120.75155640]
[144.22627258 117.50072479]
[129.58277893 114.24990082]
[114.93927765 110.99907684]
[109.13860321 115.75325775]
[118.64677429 127.35475159]
[107.04511261 136.86273193]
[97.53726196 125.26161194]
[91.73659515 130.01579285]
[92.04865265 145.01254272]
[92.36070251 160.00929260]
[92.67276001 175.00605774]
[92.98481750 190.00280762]
[93.29687500 204.99955750]
[93.60893250 219.99630737]
[93.92098999 234.99307251]
[94.23303986 249.98982239]
[94.54509735 264.98657227]
[109.20008850 268.57733154]
[122.42590332 275.83959961]
[133.32077026 286.27819824]
[141.14186096 299.18139648]
[145.35594177 313.66946411]
[145.67565918 328.75457764]
[142.07923889 343.40817261]
[134.81187439 356.63116455]
[124.36906433 367.52200317]
[111.46283722 375.33813477]
[96.97314453 379.54660034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 111]
[24 110]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
