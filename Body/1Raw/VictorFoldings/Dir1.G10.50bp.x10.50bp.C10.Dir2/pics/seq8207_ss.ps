%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUCCUAGGGGGGGGGGGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCxxxxxxxxxxCCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGCCCCCCCCCCACUAUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[82.82402039 334.27233887]
[69.95074463 326.36947632]
[59.82645035 315.15896606]
[53.27186584 301.54962158]
[50.81834412 286.64471436]
[52.66477966 271.65246582]
[58.66149521 257.78826904]
[68.32235718 246.17601013]
[80.86420441 237.75704956]
[95.27032471 233.21388245]
[94.95826721 218.21713257]
[94.64620972 203.22038269]
[94.33415222 188.22363281]
[94.02210236 173.22686768]
[93.71004486 158.23011780]
[93.39798737 143.23336792]
[93.08592987 128.23661804]
[92.77387238 113.23986053]
[79.45871735 106.33286285]
[67.01927948 114.71500397]
[54.57983780 123.09714508]
[47.87424469 138.06268311]
[31.53549385 139.46882629]
[22.37149429 125.86908722]
[29.80938148 111.25368500]
[46.19769669 110.65770721]
[58.63713455 102.27556610]
[71.07657623 93.89341736]
[77.53205109 91.36213684]
[83.93038177 90.67087555]
[89.86131287 91.71790314]
[94.94837952 94.31974030]
[98.65454102 79.78480530]
[102.36070251 65.24987030]
[106.06686401 50.71493149]
[109.77302551 36.17999649]
[113.47918701 21.64505959]
[99.23227692 16.93228531]
[85.34881592 11.23717403]
[71.89645386 4.58747053]
[58.94071579 -2.98442912]
[46.54473114 -11.44163418]
[34.76889420 -20.74294281]
[23.67056847 -30.84303665]
[13.30382824 -41.69271088]
[3.71918058 -53.23910522]
[-5.03667974 -65.42597198]
[-12.92109489 -78.19392395]
[-19.89565086 -91.48077393]
[-25.92637062 -105.22177887]
[-30.98387146 -119.34999084]
[-35.04351425 -133.79658508]
[-38.08551788 -148.49116516]
[-40.09506607 -163.36216736]
[-41.06236267 -178.33711243]
[-40.98270035 -193.34306335]
[-39.85646820 -208.30688477]
[-37.68914795 -223.15571594]
[-34.49130249 -237.81716919]
[-30.27850914 -252.21984863]
[-25.07129478 -266.29357910]
[-18.89502525 -279.96975708]
[-11.77979469 -293.18182373]
[-3.76026654 -305.86535645]
[5.12448883 -317.95855713]
[14.83118534 -329.40255737]
[25.31253242 -340.14154053]
[36.51746368 -350.12322998]
[48.39139175 -359.29901123]
[60.87646866 -367.62411499]
[73.91186523 -375.05804443]
[87.43407440 -381.56454468]
[101.37721252 -387.11193848]
[115.67335510 -391.67318726]
[130.25285339 -395.22607422]
[145.04467773 -397.75326538]
[159.97674561 -399.24249268]
[174.97633362 -399.68649292]
[189.97035217 -399.08306885]
[204.88575745 -397.43518066]
[219.64987183 -394.75085449]
[234.19078064 -391.04315186]
[248.43762207 -386.33020020]
[262.32101440 -380.63488770]
[275.77328491 -373.98498535]
[288.72891235 -366.41290283]
[301.12475586 -357.95550537]
[312.90045166 -348.65402222]
[323.99865723 -338.55377197]
[334.36523438 -327.70394897]
[343.94970703 -316.15744019]
[352.70541382 -303.97042847]
[360.58963013 -291.20236206]
[367.56399536 -277.91540527]
[373.59451294 -264.17431641]
[378.65182495 -250.04605103]
[382.71124268 -235.59939575]
[385.75305176 -220.90476990]
[387.76239014 -206.03373718]
[388.72946167 -191.05877686]
[388.64959717 -176.05284119]
[387.52313232 -161.08901978]
[385.35562134 -146.24023438]
[382.15756226 -131.57881165]
[377.94454956 -117.17619324]
[372.73712158 -103.10254669]
[366.56066895 -89.42643738]
[359.44525146 -76.21449280]
[351.42553711 -63.53107834]
[342.54061890 -51.43798828]
[332.83374023 -39.99414444]
[322.35226440 -29.25529480]
[311.14718628 -19.27376175]
[299.27310181 -10.09817219]
[286.78793335 -1.77323151]
[273.75241089 5.66050291]
[260.23013306 12.16681385]
[246.28689575 17.71400452]
[231.99069214 22.27504730]
[217.41113281 25.82772064]
[202.61927795 28.35471916]
[187.68717957 29.84372711]
[172.68759155 30.28749466]
[157.69357300 29.68385696]
[142.77819824 28.03575516]
[128.01412964 25.35122108]
[124.30796051 39.88615799]
[120.60179901 54.42109299]
[116.89563751 68.95603180]
[113.18947601 83.49096680]
[109.48331451 98.02590179]
[107.77062988 112.92780304]
[108.08268738 127.92456055]
[108.39473724 142.92131042]
[108.70679474 157.91806030]
[109.01885223 172.91482544]
[109.33090973 187.91157532]
[109.64296722 202.90832520]
[109.95502472 217.90507507]
[110.26707458 232.90184021]
[124.84971619 236.84179688]
[137.73092651 244.73173523]
[147.86647034 255.93205261]
[154.43472290 269.53479004]
[156.90322876 284.43725586]
[155.07185364 299.43136597]
[149.08906555 313.30157471]
[139.43988037 324.92352295]
[126.90649414 333.35507202]
[112.50494385 337.91271973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 28]
[20 27]
[21 26]
[32 131]
[33 130]
[34 129]
[35 128]
[36 127]
[37 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
