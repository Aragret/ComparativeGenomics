%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAUAGGAGGGGGGGGGGGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCxxxxxxxxxxCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCCCCCCCCCCCACCAAUAGGA\
) } def
/len { sequence length } bind def

/coor [
[99.77653503 469.11639404]
[85.93059540 463.10034180]
[74.22193146 453.57092285]
[65.51940918 441.23526001]
[60.46880722 427.00875854]
[59.44491577 411.94705200]
[62.52371216 397.16790771]
[69.47673798 383.76797485]
[79.78801727 372.74163818]
[92.69239807 364.90713501]
[107.23228455 360.84582520]
[107.23228455 345.84582520]
[107.23228455 330.84582520]
[107.23228455 315.84582520]
[107.23228455 300.84582520]
[107.23228455 285.84582520]
[107.23228455 270.84582520]
[107.23228455 255.84582520]
[107.23228455 240.84582520]
[107.23228455 225.84582520]
[107.23228455 210.84582520]
[107.23228455 195.84582520]
[105.98541260 180.89773560]
[103.50029755 166.10502625]
[101.01517487 151.31231689]
[98.53005981 136.51960754]
[96.04493713 121.72690582]
[80.82698822 116.06838989]
[72.05232239 100.12088776]
[57.40881729 103.37171173]
[45.69355011 114.84709930]
[29.97281837 110.17904663]
[26.41876793 94.16965485]
[38.68750000 83.28800201]
[54.15799332 88.72821045]
[68.80149078 85.47738647]
[77.94322968 73.58500671]
[77.31925201 58.59798813]
[69.01457977 45.13162231]
[76.21575165 32.09350586]
[72.71313477 23.58565521]
[75.73796844 16.78889084]
[75.42591095 1.79213643]
[75.11386108 -13.20461750]
[67.09113312 -26.84083748]
[74.56198883 -39.72632217]
[63.89624023 -29.17919350]
[48.96154785 -27.78101730]
[36.52346420 -36.16517639]
[32.21657181 -50.53356934]
[37.99192810 -64.37716675]
[51.23324203 -71.42469025]
[65.94207001 -68.48353577]
[75.45530701 -56.88570404]
[77.32292175 -71.76898193]
[79.19052887 -86.65226746]
[81.05814362 -101.53554535]
[82.92575836 -116.41882324]
[73.52146149 -104.73297119]
[61.86347961 -95.29414368]
[48.47658539 -88.52723694]
[33.96338654 -84.73684692]
[18.97718430 -84.09360504]
[4.19257593 -86.62646484]
[-9.72491550 -92.22141266]
[-22.14880180 -100.62659454]
[-32.51982880 -111.46365356]
[-40.37115097 -124.24475861]
[-45.34934235 -138.39459229]
[-47.23031616 -153.27618408]
[-45.92939758 -168.21966553]
[-41.50514603 -182.55235291]
[-34.15672302 -195.62907410]
[-24.21490860 -206.86119080]
[-12.12722874 -215.74308777]
[1.56219339 -221.87493896]
[16.23713684 -224.98074341]
[31.23701668 -224.92070007]
[45.88661957 -221.69747925]
[59.52650452 -215.45620728]
[71.54267883 -206.47779846]
[81.39423370 -195.16644287]
[88.63771057 -182.03129578]
[92.94705200 -167.66365051]
[94.12827301 -152.71022034]
[92.12766266 -137.84194946]
[101.63601685 -149.44329834]
[111.14437866 -161.04463196]
[120.65273285 -172.64598083]
[120.50708771 -188.68836975]
[133.04907227 -198.69226074]
[148.65756226 -194.98353577]
[155.35905457 -180.40719604]
[148.01274109 -166.14497375]
[132.25407410 -163.13761902]
[122.74571991 -151.53627014]
[113.23735809 -139.93493652]
[103.72900391 -128.33358765]
[97.80903625 -114.55120850]
[95.94142151 -99.66793060]
[94.07381439 -84.78465271]
[92.20619965 -69.90136719]
[90.33858490 -55.01808929]
[89.55873871 -40.03837585]
[97.55914307 -27.47482491]
[90.11061096 -13.51667309]
[90.42266846 1.48008013]
[90.73472595 16.47683334]
[91.20276642 31.46953011]
[99.46280670 43.86392593]
[92.30626678 57.97401047]
[92.93024445 72.96102905]
[111.88353729 76.33409882]
[123.19090271 90.62024689]
[122.22721100 107.78146362]
[110.83764648 119.24179077]
[113.32276154 134.03450012]
[115.80788422 148.82720947]
[118.29299927 163.61990356]
[120.77812195 178.41261292]
[129.09753418 165.93113708]
[143.10800171 160.57322693]
[157.63288879 164.31852722]
[167.30558777 175.78321838]
[168.55220032 190.73132324]
[160.91212463 203.63983154]
[147.20823669 209.73928833]
[132.50382996 206.77606201]
[122.23228455 195.84582520]
[122.23228455 210.84582520]
[122.23228455 225.84582520]
[122.23228455 240.84582520]
[122.23228455 255.84582520]
[122.23228455 270.84582520]
[122.23228455 285.84582520]
[122.23228455 300.84582520]
[122.23228455 315.84582520]
[122.23228455 330.84582520]
[122.23228455 345.84582520]
[122.23228455 360.84582520]
[136.77217102 364.90713501]
[149.67655945 372.74163818]
[159.98783875 383.76797485]
[166.94085693 397.16790771]
[170.01965332 411.94705200]
[168.99577332 427.00875854]
[163.94515991 441.23526001]
[155.24264526 453.57092285]
[143.53398132 463.10034180]
[129.68804932 469.11639404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[29 36]
[30 35]
[37 112]
[38 111]
[40 109]
[42 108]
[43 107]
[44 106]
[46 104]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
