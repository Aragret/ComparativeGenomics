%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCACAGCCGGGGGGGGGGACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACxxxxxxxxxxACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUCCCCCCCCCCAGUCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[113.13773346 396.81317139]
[99.29179382 390.79714966]
[87.58312988 381.26773071]
[78.88060760 368.93206787]
[73.83000946 354.70553589]
[72.80611420 339.64385986]
[75.88491058 324.86468506]
[82.83793640 311.46478271]
[93.14921570 300.43844604]
[106.05360413 292.60394287]
[120.59349060 288.54260254]
[120.59349060 273.54260254]
[120.59349060 258.54260254]
[120.59349060 243.54261780]
[120.59349060 228.54261780]
[120.59349060 213.54261780]
[120.59349060 198.54261780]
[120.59349060 183.54261780]
[120.59349060 168.54261780]
[120.59349060 153.54261780]
[120.59349060 138.54261780]
[76.42814636 125.32215881]
[76.71504211 89.62537384]
[65.41603851 79.75965118]
[54.11703110 69.89392853]
[42.81802750 60.02820587]
[31.51902199 50.16247940]
[20.45938301 60.31864166]
[8.34958935 69.19647980]
[-4.66335678 76.68824005]
[-18.42148972 82.70297241]
[-32.75779724 87.16765594]
[-47.49825287 90.02810669]
[-62.46392059 91.24959564]
[-77.47312927 90.81729126]
[-92.34368134 88.73644257]
[-106.89505768 85.03231812]
[-120.95062256 79.74987030]
[-134.33975220 72.95323181]
[-146.89993286 64.72490692]
[-158.47865295 55.16477203]
[-168.93540955 44.38888931]
[-178.14321899 32.52806091]
[-185.99034119 19.72626686]
[-192.38150024 6.13891125]
[-197.23913574 -8.06906796]
[-200.50424194 -22.72520065]
[-202.13722229 -37.65157318]
[-202.11824036 -52.66699219]
[-200.44750977 -67.58918762]
[-197.14533997 -82.23701477]
[-192.25180054 -96.43266296]
[-185.82629395 -110.00380707]
[-177.94680786 -122.78571320]
[-168.70903015 -134.62321472]
[-158.22506714 -145.37261963]
[-146.62219238 -154.90344238]
[-134.04124451 -163.09997559]
[-120.63497162 -169.86273193]
[-106.56608582 -175.10960388]
[-92.00538635 -178.77691650]
[-77.12961578 -180.82014465]
[-62.11936569 -181.21449280]
[-47.15683746 -179.95515442]
[-32.42366409 -177.05743408]
[-18.09869194 -172.55650330]
[-4.35581589 -166.50698853]
[8.63814068 -158.98234558]
[20.72544098 -150.07391357]
[31.75935936 -139.88981628]
[41.60594940 -128.55368042]
[50.14568710 -116.20313263]
[57.27490997 -102.98808289]
[62.90706635 -89.06896210]
[66.97379303 -74.61473083]
[69.42572784 -59.80084229]
[70.23310089 -44.80713272]
[69.38610840 -29.81560707]
[66.89503479 -15.00825214]
[62.79012680 -0.56481379]
[57.12120819 13.33937740]
[49.95708847 26.53553772]
[41.38474655 38.86347580]
[52.68375015 48.72919846]
[63.98275375 58.59492111]
[75.28176117 68.46064758]
[86.58076477 78.32637024]
[96.28652954 68.65840149]
[111.78404999 64.26268005]
[129.94537354 68.17391968]
[141.24438477 58.30819702]
[152.54338074 48.44247437]
[163.84239197 38.57675171]
[166.35656738 22.73192787]
[180.38262939 14.94416523]
[195.16098022 21.18756866]
[199.35491943 36.67273331]
[189.74723816 49.52076721]
[173.70811462 49.87575912]
[162.40910339 59.74148178]
[151.11010742 69.60720062]
[139.81109619 79.47292328]
[142.55461121 86.45312500]
[157.38822937 88.68109894]
[148.04164124 100.41351318]
[150.78517151 107.39370728]
[165.77786255 106.92566681]
[180.77055359 106.45761871]
[195.76324463 105.98957825]
[206.40040588 94.30084229]
[222.19090271 93.64071655]
[233.76652527 104.40085602]
[234.25965881 120.19744873]
[223.37774658 131.65866089]
[207.57681274 131.98475647]
[196.23129272 120.98227692]
[181.23860168 121.45031738]
[166.24589539 121.91835785]
[151.25320435 122.38640594]
[164.63493347 129.16354370]
[179.56408691 130.61958313]
[191.43174744 139.79339600]
[196.60183716 153.87423706]
[193.49031067 168.54797363]
[183.05049133 179.31877136]
[168.48100281 182.88665771]
[154.24568176 178.15844727]
[144.70603943 166.58282471]
[142.78486633 151.70635986]
[135.59349060 138.54261780]
[135.59349060 153.54261780]
[135.59349060 168.54261780]
[135.59349060 183.54261780]
[135.59349060 198.54261780]
[135.59349060 213.54261780]
[135.59349060 228.54261780]
[135.59349060 243.54261780]
[135.59349060 258.54260254]
[135.59349060 273.54260254]
[135.59349060 288.54260254]
[150.13337708 292.60394287]
[163.03775024 300.43844604]
[173.34904480 311.46478271]
[180.30206299 324.86468506]
[183.38085938 339.64385986]
[182.35696411 354.70553589]
[177.30636597 368.93206787]
[168.60383606 381.26773071]
[156.89518738 390.79714966]
[143.04924011 396.81317139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[90 102]
[91 101]
[92 100]
[93 99]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
