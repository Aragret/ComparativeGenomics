%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAACCCCCCAGGGGGGGGGGAAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUxxxxxxxxxxAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGCCCCCCCCCCUCGAAGCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[72.63481140 473.48852539]
[58.47420502 468.33352661]
[45.88446045 460.05130005]
[35.54452515 449.08853149]
[28.01201248 436.03640747]
[23.69314766 421.59881592]
[22.82083893 406.55435181]
[25.44212914 391.71435547]
[31.41565514 377.87911987]
[40.41927338 365.79476929]
[51.96743011 356.11300659]
[65.43734741 349.35592651]
[80.10260773 345.88793945]
[80.10260773 330.88793945]
[80.10260773 315.88793945]
[80.10260773 300.88793945]
[80.10260773 285.88793945]
[80.10260773 270.88793945]
[80.10260773 255.88793945]
[80.10260773 240.88793945]
[80.10260773 225.88793945]
[80.10260773 210.88793945]
[72.36530304 198.16067505]
[80.10260773 184.36050415]
[79.64663696 169.36743164]
[78.73512268 154.39515686]
[77.82361603 139.42288208]
[66.15049744 130.00277710]
[51.32347107 132.27418518]
[36.49644470 134.54560852]
[21.66942215 136.81701660]
[13.70281315 150.27314758]
[-1.06645787 155.41149902]
[-15.66479301 149.80590820]
[-23.19930458 136.10316467]
[-20.11242676 120.77328491]
[-7.86168909 111.05456543]
[7.76848459 111.53589630]
[19.39800453 121.98999786]
[34.22502899 119.71858215]
[49.05205536 117.44716644]
[63.87907791 115.17575073]
[63.28239441 102.96006775]
[66.46900177 91.90597534]
[53.00193405 85.30005646]
[39.53486633 78.69414520]
[26.06779861 72.08823395]
[12.60073185 65.48232269]
[-4.28248596 63.93529510]
[-7.46965456 47.28361893]
[7.64897108 39.61136246]
[19.20664406 52.01525497]
[32.67370987 58.62116623]
[46.14078140 65.22708130]
[59.60784912 71.83299255]
[73.07491302 78.43890381]
[74.45149994 66.31495667]
[80.40385437 53.93333435]
[72.59880829 41.12391663]
[64.79375458 28.31449890]
[56.98870850 15.50508022]
[49.18365479 2.69566202]
[35.77863693 -7.68421030]
[42.04197693 -23.43879318]
[58.91473389 -21.78152466]
[61.99307251 -5.10938835]
[69.79812622 7.70002985]
[77.60317230 20.50944710]
[85.40822601 33.31886673]
[93.21327209 46.12828445]
[100.70980835 46.35626602]
[100.00139618 31.37300491]
[99.29298401 16.38974190]
[98.58456421 1.40648031]
[91.57151031 -11.85312176]
[96.69517517 -25.95092583]
[110.58527374 -31.61354637]
[124.10504150 -25.11617470]
[128.36132812 -10.73271084]
[120.55567932 2.07466316]
[118.93807983 16.98718643]
[117.32048035 31.89971161]
[115.70288086 46.81223297]
[123.19940948 47.04021835]
[131.76843262 34.72876740]
[140.33746338 22.41731453]
[148.90647888 10.10586357]
[157.47550964 -2.20558810]
[166.04452515 -14.51703930]
[174.61355591 -26.82849121]
[175.45692444 -43.20593643]
[190.18296814 -50.42228317]
[203.64279175 -41.05397415]
[201.99008179 -24.73831940]
[186.92500305 -18.25946808]
[178.35597229 -5.94801664]
[169.78695679 6.36343527]
[161.21792603 18.67488670]
[152.64891052 30.98633766]
[144.07987976 43.29779053]
[135.51086426 55.60924149]
[143.82861328 68.09183502]
[158.49020386 64.92361450]
[173.15179443 61.75539017]
[179.11929321 49.64126587]
[190.81283569 43.28541946]
[203.83689880 44.82096481]
[213.44166565 53.46141052]
[228.16447449 50.59098816]
[240.17304993 39.42291260]
[255.76759338 44.49660873]
[258.90576172 60.59269333]
[246.35928345 71.15289307]
[231.03489685 65.31378174]
[216.31210327 68.18420410]
[207.54890442 82.50738525]
[190.81475830 86.16062927]
[176.32002258 76.41698456]
[161.65843201 79.58520508]
[146.99682617 82.75342560]
[147.76850891 103.33836365]
[140.30305481 121.56247711]
[126.62315369 134.44212341]
[109.69215393 140.20402527]
[92.79589081 138.51136780]
[93.70740509 153.48364258]
[94.61891937 168.45591736]
[97.57053375 172.90347290]
[98.39684296 177.57008362]
[97.37874603 181.59524536]
[95.10260773 184.36050415]
[102.83990479 198.16067505]
[95.10260773 210.88793945]
[95.10260773 225.88793945]
[95.10260773 240.88793945]
[95.10260773 255.88793945]
[95.10260773 270.88793945]
[95.10260773 285.88793945]
[95.10260773 300.88793945]
[95.10260773 315.88793945]
[95.10260773 330.88793945]
[95.10260773 345.88793945]
[109.76786804 349.35592651]
[123.23778534 356.11300659]
[134.78593445 365.79476929]
[143.78956604 377.87911987]
[149.76309204 391.71435547]
[152.38436890 406.55435181]
[151.51206970 421.59881592]
[147.19320679 436.03640747]
[139.66069031 449.08853149]
[129.32075500 460.05130005]
[116.73101044 468.33352661]
[102.57040405 473.48852539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 127]
[26 126]
[27 125]
[28 42]
[29 41]
[30 40]
[31 39]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
[102 120]
[103 119]
[104 118]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
