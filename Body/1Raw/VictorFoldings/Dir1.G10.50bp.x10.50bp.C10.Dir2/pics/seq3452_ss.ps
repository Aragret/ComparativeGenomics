%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCACCAAGGGGGGGGGGAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCxxxxxxxxxxAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCCCCCCCCCCCUCUUCAACAA\
) } def
/len { sequence length } bind def

/coor [
[83.63500977 383.12704468]
[70.14613342 376.39550781]
[58.66062927 366.63095093]
[49.84626007 354.40106201]
[44.21547699 340.41687012]
[42.09564972 325.49139404]
[43.61001968 310.49240112]
[48.67054367 296.29187012]
[56.98300552 283.71545410]
[68.06414032 273.49429321]
[81.26969147 266.22265625]
[95.83191681 262.32330322]
[95.52394104 247.32646179]
[95.21596527 232.32962036]
[94.90798187 217.33277893]
[94.60000610 202.33593750]
[94.29203033 187.33911133]
[93.98405457 172.34226990]
[93.67607117 157.34542847]
[93.36809540 142.34858704]
[93.06011963 127.35175323]
[92.75214386 112.35491943]
[85.67907715 100.29409790]
[92.25102234 87.95306396]
[91.94304657 72.95622253]
[91.63506317 57.95938492]
[76.64320374 57.33436584]
[61.71920395 55.77851105]
[46.92079926 53.29784393]
[32.30524063 49.90196228]
[17.92907715 45.60400391]
[3.84792805 40.42059326]
[-9.88373089 34.37178802]
[-23.21277428 27.48098946]
[-36.08763504 19.77485466]
[-48.45849991 11.28319931]
[-60.27750778 2.03887510]
[-71.49893951 -7.92235231]
[-82.07936859 -18.56194496]
[-91.97787476 -29.83873940]
[-101.15615845 -41.70911026]
[-109.57870483 -54.12712860]
[-117.21293640 -67.04475403]
[-124.02931213 -80.41201019]
[-130.00144958 -94.17718506]
[-135.10627747 -108.28701782]
[-139.32400513 -122.68692017]
[-142.63835144 -137.32118225]
[-145.03646851 -152.13319397]
[-146.50907898 -167.06564331]
[-147.05050659 -182.06074524]
[-146.65863037 -197.06051636]
[-145.33499146 -212.00689697]
[-143.08468628 -226.84208679]
[-139.91644287 -241.50866699]
[-135.84251404 -255.94992065]
[-130.87864685 -270.10995483]
[-125.04405212 -283.93399048]
[-118.36130524 -297.36856079]
[-110.85626984 -310.36166382]
[-102.55796814 -322.86303711]
[-93.49850464 -334.82434082]
[-83.71293640 -346.19927979]
[-73.23912811 -356.94384766]
[-62.11758423 -367.01647949]
[-50.39134216 -376.37820435]
[-38.10576630 -384.99279785]
[-25.30838776 -392.82693481]
[-12.04871941 -399.85028076]
[1.62194133 -406.03570557]
[15.65070438 -411.35928345]
[29.98329544 -415.80038452]
[44.56426239 -419.34182739]
[59.33719635 -421.96994019]
[74.24494171 -423.67453003]
[89.22982788 -424.44900513]
[104.23387146 -424.29040527]
[119.19902802 -423.19927979]
[134.06739807 -421.17990112]
[148.78147888 -418.24005127]
[163.28431702 -414.39111328]
[177.51980591 -409.64797974]
[191.43287659 -404.02902222]
[204.96971130 -397.55593872]
[218.07792664 -390.25381470]
[230.70681763 -382.15087891]
[242.80752563 -373.27847290]
[254.33322144 -363.67092896]
[265.23931885 -353.36541748]
[275.48364258 -342.40182495]
[285.02651978 -330.82254028]
[293.83108521 -318.67239380]
[301.86322021 -305.99835205]
[309.09188843 -292.84948730]
[315.48910522 -279.27664185]
[321.03012085 -265.33233643]
[325.69351196 -251.07051086]
[329.46124268 -236.54637146]
[332.31869507 -221.81607056]
[334.25485229 -206.93663025]
[335.26220703 -191.96560669]
[335.33685303 -176.96090698]
[334.47854614 -161.98059082]
[332.69055176 -147.08262634]
[329.97982788 -132.32463074]
[326.35681152 -117.76370239]
[321.83560181 -103.45618439]
[316.43359375 -89.45743561]
[310.17178345 -75.82160187]
[303.07431030 -62.60144043]
[295.16870117 -49.84810257]
[286.48547363 -37.61092758]
[277.05828857 -25.93725777]
[266.92358398 -14.87225533]
[256.12057495 -4.45873022]
[244.69105530 5.26302910]
[232.67924500 14.25541210]
[220.13162231 22.48362732]
[207.09672546 29.91584015]
[193.62496948 36.52330017]
[179.76849365 42.28044128]
[165.58090210 47.16499329]
[151.11709595 51.15805435]
[136.43301392 54.24417496]
[121.58546448 56.41142273]
[106.63190460 57.65140915]
[106.93988037 72.64824677]
[107.24785614 87.64508057]
[114.32092285 99.70590210]
[107.74897766 112.04693604]
[108.05695343 127.04377747]
[108.36493683 142.04061890]
[108.67291260 157.03744507]
[108.98088837 172.03428650]
[109.28886414 187.03112793]
[109.59684753 202.02796936]
[109.90482330 217.02481079]
[110.21279907 232.02163696]
[110.52077484 247.01847839]
[110.82875824 262.01531982]
[125.53878784 265.31353760]
[139.03175354 272.03689575]
[150.52316284 281.79449463]
[159.34495544 294.01904297]
[164.98420715 307.99981689]
[167.11308289 322.92401123]
[165.60780334 337.92391968]
[160.55589294 352.12750244]
[152.25105286 364.70895386]
[141.17613220 374.93682861]
[127.97498322 382.21649170]
[113.41512299 386.12466431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 128]
[25 127]
[26 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
