%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUAGGGGGGGGGGCUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAxxxxxxxxxxAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCACCCCCCCCCCUCCUCGCCUUA\
) } def
/len { sequence length } bind def

/coor [
[164.82292175 444.52017212]
[151.33403015 437.78863525]
[139.84854126 428.02407837]
[131.03416443 415.79418945]
[125.40338898 401.80999756]
[123.28355408 386.88452148]
[124.79792786 371.88549805]
[129.85844421 357.68499756]
[138.17091370 345.10858154]
[149.25204468 334.88742065]
[162.45759583 327.61578369]
[177.01982117 323.71643066]
[176.71185303 308.71957397]
[176.40386963 293.72274780]
[176.09588623 278.72592163]
[175.78791809 263.72906494]
[175.47993469 248.73223877]
[175.17196655 233.73539734]
[174.86398315 218.73855591]
[174.55599976 203.74171448]
[168.99406433 189.81100464]
[158.88862610 178.72586060]
[148.78320312 167.64073181]
[135.91865540 168.84727478]
[124.54804993 162.30982971]
[118.95424652 150.23130798]
[121.39310455 136.94743347]
[111.51740265 125.65715027]
[101.64169312 114.36686707]
[87.65460968 108.94824219]
[72.75016785 110.63864136]
[57.84571838 112.32904053]
[48.19827271 124.84712219]
[32.51436996 126.79408264]
[20.09898567 117.01483154]
[18.31794930 101.31121826]
[28.22791862 88.99991608]
[43.94948578 87.38500977]
[56.15531921 97.42459106]
[71.05976868 95.73419189]
[85.96421814 94.04379272]
[88.87168884 79.32826996]
[75.73005676 72.09657288]
[62.58842468 64.86486816]
[49.44679260 57.63316345]
[36.34779358 65.65263367]
[20.99359322 66.03215027]
[7.51438856 58.66963577]
[-0.46397939 45.54556656]
[-0.79536974 30.19024849]
[6.60935974 16.73418999]
[19.75837326 8.79699802]
[35.11465454 8.51374054]
[48.54743576 15.96061230]
[56.44337463 29.13444138]
[56.67849350 44.49153519]
[69.82012939 51.72323608]
[82.96176147 58.95493698]
[96.10339355 66.18663788]
[102.39760590 62.10830688]
[121.28026581 49.87331009]
[120.04965973 34.92387390]
[118.81904602 19.97443962]
[117.58843231 5.02500582]
[102.79172516 1.98621809]
[89.45116425 -5.09940910]
[78.64820862 -15.65747547]
[71.25859833 -28.83208656]
[67.88138580 -43.55523300]
[68.79033661 -58.63338089]
[73.91177368 -72.84420776]
[82.83052063 -85.03570557]
[94.82357788 -94.21956635]
[108.91871643 -99.65129089]
[123.97331238 -100.89056396]
[138.76695251 -97.83690643]
[152.10038757 -90.73788452]
[162.89274597 -80.16896820]
[170.26910400 -66.98694611]
[173.63153076 -52.26041031]
[172.70742798 -37.18318558]
[167.57171631 -22.97751045]
[158.64073181 -10.79497814]
[146.63845825 -1.62317133]
[132.53787231 3.79439354]
[133.76847839 18.74382782]
[134.99908447 33.69326401]
[136.22970581 48.64269638]
[112.93197632 104.49116516]
[122.80768585 115.78144073]
[132.68339539 127.07172394]
[150.12762451 127.89972687]
[161.37797546 140.81333923]
[159.86833191 157.53529358]
[169.97377014 168.62043762]
[180.07919312 179.70556641]
[176.52534485 165.13264465]
[170.37522888 151.45141602]
[171.32969666 136.48181152]
[179.16758728 123.69245911]
[192.07276917 116.04679871]
[207.05497742 115.31641388]
[220.64266968 121.67053986]
[229.68740845 133.63685608]
[232.09342957 148.44262695]
[227.30380249 162.65631104]
[213.41351318 168.31842041]
[228.31794739 170.00881958]
[243.22239685 171.69921875]
[258.12686157 173.38961792]
[273.03131104 175.08001709]
[287.95230103 176.61730957]
[302.88833618 178.00132751]
[317.82434082 179.38536072]
[332.76034546 180.76937866]
[349.08981323 176.21028137]
[357.99118042 190.63949585]
[346.58999634 203.18739319]
[331.37631226 195.70539856]
[316.44030762 194.32136536]
[301.50430298 192.93734741]
[286.56829834 191.55331421]
[279.57464600 194.08337402]
[271.34091187 189.98446655]
[256.43646240 188.29406738]
[241.53199768 186.60366821]
[226.62756348 184.91326904]
[211.72311401 183.22286987]
[206.18054199 188.27558899]
[209.38957214 202.92829895]
[195.09541321 198.38102722]
[189.55284119 203.43374634]
[189.86082458 218.43057251]
[190.16879272 233.42741394]
[190.47677612 248.42425537]
[190.78475952 263.42108154]
[191.09272766 278.41793823]
[191.40071106 293.41476440]
[191.70867920 308.41159058]
[192.01666260 323.40844727]
[206.72669983 326.70666504]
[220.21965027 333.43002319]
[231.71107483 343.18762207]
[240.53285217 355.41217041]
[246.17211914 369.39294434]
[248.30099487 384.31713867]
[246.79571533 399.31704712]
[241.74380493 413.52062988]
[233.43896484 426.10208130]
[222.36402893 436.32995605]
[209.16288757 443.60961914]
[194.60302734 447.51779175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 96]
[22 95]
[23 94]
[27 91]
[28 90]
[29 89]
[30 41]
[31 40]
[32 39]
[42 59]
[43 58]
[44 57]
[45 56]
[61 88]
[62 87]
[63 86]
[64 85]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
