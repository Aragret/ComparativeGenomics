%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUUCGACCUGGGGGGGGGGUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGxxxxxxxxxxGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCCCCCCCCCCCUUCGCCCU\
) } def
/len { sequence length } bind def

/coor [
[180.74723816 831.54333496]
[166.58663940 826.38836670]
[153.99688721 818.10614014]
[143.65695190 807.14337158]
[136.12445068 794.09124756]
[131.80557251 779.65362549]
[130.93327332 764.60919189]
[133.55456543 749.76916504]
[139.52809143 735.93395996]
[148.53170776 723.84960938]
[160.07986450 714.16778564]
[173.54977417 707.41070557]
[188.21504211 703.94274902]
[188.21504211 688.94274902]
[188.21504211 673.94274902]
[188.21504211 658.94274902]
[188.21504211 643.94274902]
[188.21504211 628.94274902]
[188.21504211 613.94274902]
[188.21504211 598.94274902]
[188.21504211 583.94274902]
[188.21504211 568.94274902]
[187.91104126 553.94586182]
[187.30314636 538.95819092]
[186.69526672 523.97045898]
[184.87561035 509.08126831]
[181.85612488 494.38830566]
[178.83665466 479.69537354]
[168.69575500 468.78613281]
[173.49671936 453.71093750]
[161.15043640 441.27481079]
[167.02545166 423.85171509]
[163.70881653 409.22296143]
[160.39216614 394.59423828]
[157.07553101 379.96551514]
[152.50254822 374.10311890]
[153.84309387 365.00674438]
[150.82362366 350.31381226]
[147.65539551 335.65219116]
[144.33876038 321.02346802]
[140.87403870 306.42910767]
[137.26161194 291.87057495]
[133.64916992 277.31207275]
[130.03672791 262.75357056]
[126.42429352 248.19503784]
[122.81185913 233.63653564]
[118.12100220 227.86804199]
[119.27691650 218.74635315]
[115.96028137 204.11761475]
[111.38729858 198.25524902]
[112.72784424 189.15885925]
[109.70836639 174.46591187]
[106.54014587 159.80432129]
[103.22351074 145.17558289]
[99.90686798 130.54684448]
[96.59023285 115.91811371]
[86.80654144 127.28823090]
[71.81316376 127.73376465]
[61.37159348 116.96465302]
[62.27987289 101.99217987]
[73.94666290 92.56423187]
[88.77586365 94.81869507]
[81.76363373 81.55865479]
[67.59577179 73.30010223]
[67.93452454 56.90444946]
[82.43141174 49.23814392]
[96.17327881 58.18762207]
[95.02367401 74.54642487]
[102.03590393 87.80646515]
[116.66463470 84.48982239]
[117.27252197 69.50214386]
[103.46131134 63.15242004]
[93.13502502 51.99732590]
[87.86833954 37.73792648]
[88.46438599 22.54868126]
[94.83226776 8.74583817]
[106.00093842 -1.56576753]
[120.26725769 -6.81369257]
[135.45570374 -6.19766569]
[149.25015259 0.18837303]
[159.54705811 11.37059879]
[164.77621460 25.64380455]
[164.14021301 40.83142853]
[157.73603821 54.61746979]
[146.54026794 64.89965820]
[132.26019287 70.11003113]
[131.65231323 85.09770966]
[111.21896362 112.60147858]
[114.53560638 127.23020935]
[117.85224152 141.85894775]
[121.16888428 156.48768616]
[126.14571381 164.21894836]
[124.40131378 171.44644165]
[127.42079163 186.13938904]
[130.58901978 200.80097961]
[133.90565491 215.42971802]
[137.37037659 230.02409363]
[140.98280334 244.58261108]
[144.59524536 259.14111328]
[148.20768738 273.69964600]
[151.82011414 288.25814819]
[155.43255615 302.81665039]
[160.56504822 310.44546509]
[158.96749878 317.70681763]
[162.28413391 332.33557129]
[167.26097107 340.06683350]
[165.51657104 347.29431152]
[168.53604126 361.98727417]
[171.70426941 376.64886475]
[175.02090454 391.27758789]
[178.33753967 405.90634155]
[181.65419006 420.53506470]
[192.15582275 428.08956909]
[194.59291077 440.38531494]
[188.18966675 450.69146729]
[198.54653931 462.65164185]
[193.52960205 476.67590332]
[196.54908752 491.36883545]
[199.56855774 506.06179810]
[207.38885498 493.26168823]
[221.17854309 487.35873413]
[235.83821106 490.53588867]
[245.94671631 501.61822510]
[247.76597595 516.50750732]
[240.62321472 529.69769287]
[227.15980530 536.31103516]
[212.35452271 533.90203857]
[201.68293762 523.36260986]
[202.29083252 538.35028076]
[202.89871216 553.33795166]
[206.15165710 559.20294189]
[205.94114685 564.95629883]
[203.21504211 568.94274902]
[203.21504211 583.94274902]
[203.21504211 598.94274902]
[203.21504211 613.94274902]
[203.21504211 628.94274902]
[203.21504211 643.94274902]
[203.21504211 658.94274902]
[203.21504211 673.94274902]
[203.21504211 688.94274902]
[203.21504211 703.94274902]
[217.88029480 707.41070557]
[231.35021973 714.16778564]
[242.89837646 723.84960938]
[251.90199280 735.93395996]
[257.87551880 749.76916504]
[260.49679565 764.60919189]
[259.62451172 779.65362549]
[255.30563354 794.09124756]
[247.77311707 807.14337158]
[237.43318176 818.10614014]
[224.84344482 826.38836670]
[210.68283081 831.54333496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 130]
[24 129]
[25 128]
[26 119]
[27 118]
[28 117]
[30 115]
[32 112]
[33 111]
[34 110]
[35 109]
[37 108]
[38 107]
[39 105]
[40 104]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[48 96]
[49 95]
[51 94]
[52 93]
[53 91]
[54 90]
[55 89]
[56 88]
[62 69]
[63 68]
[70 87]
[71 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
