%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAAAAAGGGGGGGGGGCAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCxxxxxxxxxxAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUCCCCCCCCCCACCCCGAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.73919678]
[71.19830322 377.72317505]
[59.48964310 368.19375610]
[50.78712082 355.85809326]
[45.73651886 341.63156128]
[44.71262741 326.56988525]
[47.79142761 311.79071045]
[54.74444962 298.39080811]
[65.05573273 287.36447144]
[77.96011353 279.52996826]
[92.50000000 275.46862793]
[92.50000000 260.46862793]
[92.50000000 245.46864319]
[92.50000000 230.46864319]
[92.50000000 215.46864319]
[92.50000000 200.46864319]
[92.50000000 185.46864319]
[92.50000000 170.46864319]
[92.50000000 155.46864319]
[92.50000000 140.46864319]
[78.16047668 134.88546753]
[66.87384033 124.42577362]
[60.21780396 110.55166626]
[59.12279892 95.20257568]
[63.74189377 80.52410126]
[52.04227066 71.13694000]
[40.56132507 80.11582184]
[27.37108803 86.29891205]
[13.14007664 89.37657166]
[-1.41127932 89.19642639]
[-15.54710102 85.77095032]
[-28.55327606 79.27666473]
[-39.77352905 70.04502106]
[-48.64255142 58.54549026]
[-54.71445847 45.36171722]
[-57.68523026 31.16185760]
[-57.40791702 16.66474915]
[-53.89990616 2.60350633]
[-47.34188080 -10.31155396]
[-58.84368515 -19.94008064]
[-70.34548950 -29.56860733]
[-85.89386749 -32.49410248]
[-90.68638611 -46.59661865]
[-102.18818665 -56.22514725]
[-108.72583771 -57.76353073]
[-112.84518433 -61.79618073]
[-113.95731354 -66.50135803]
[-125.04862976 -76.60000610]
[-136.13993835 -86.69865417]
[-147.23126221 -96.79730225]
[-161.83996582 -92.05587769]
[-176.85885620 -95.26972961]
[-188.24789429 -105.57435608]
[-192.94351196 -120.19785309]
[-189.68260193 -135.20658875]
[-179.34231567 -146.56327820]
[-164.70417786 -151.21302795]
[-149.70573425 -147.90509033]
[-138.38151550 -137.52926636]
[-133.77767944 -122.87661743]
[-137.13261414 -107.88861847]
[-126.04129791 -97.78997040]
[-114.94998169 -87.69132233]
[-103.85866547 -77.59267426]
[-92.55966187 -67.72695160]
[-81.05785370 -58.09842300]
[-66.33216858 -55.86162567]
[-60.71696091 -41.07041168]
[-49.21515656 -31.44188309]
[-37.71335220 -21.81335831]
[-25.30069351 -31.03726006]
[-11.03917217 -37.04000854]
[4.25070190 -39.47173691]
[19.68818092 -38.18817520]
[34.38301468 -33.25917053]
[47.48678589 -24.96492767]
[58.24189377 -13.78006363]
[66.02536011 -0.34646559]
[70.38490295 14.56355667]
[71.06522369 30.09166718]
[68.02297211 45.34291458]
[61.42943192 59.43731308]
[73.12905884 68.82447815]
[89.33705139 60.24748611]
[107.66172028 59.56166458]
[124.46548462 66.90315247]
[136.41265869 80.81461334]
[150.73526001 76.35780334]
[165.05786133 71.90098572]
[175.93589783 60.41278076]
[190.38731384 64.01912689]
[204.70991516 59.56230927]
[218.16587830 52.93380737]
[230.42825317 44.29469299]
[242.69061279 35.65557861]
[245.14273071 20.04267502]
[257.96563721 10.80424786]
[273.55172729 13.42129040]
[282.65408325 26.34115791]
[279.87240601 41.89872360]
[266.85702515 50.86395645]
[251.32972717 47.91794586]
[239.06736755 56.55706024]
[226.80499268 65.19617462]
[229.10777283 72.33390808]
[233.71334839 86.60936737]
[236.01612854 93.74710083]
[251.01530457 93.59106445]
[266.01449585 93.43502808]
[281.01370239 93.27899170]
[293.22128296 82.86966705]
[308.94287109 86.06517792]
[316.11819458 100.41419983]
[309.24295044 114.90939331]
[293.59124756 118.43128204]
[281.16973877 108.27817535]
[266.17053223 108.43421173]
[251.17135620 108.59024811]
[236.17216492 108.74628448]
[209.16673279 73.88490295]
[194.84413147 78.34172058]
[184.99053955 89.51114655]
[169.51467896 86.22357941]
[155.19207764 90.68039703]
[140.86947632 95.13721466]
[140.79661560 105.44027710]
[138.16709900 115.40239716]
[133.14567566 124.39927673]
[126.04707336 131.86708069]
[117.31612396 137.33781433]
[107.50000000 140.46864319]
[107.50000000 155.46864319]
[107.50000000 170.46864319]
[107.50000000 185.46864319]
[107.50000000 200.46864319]
[107.50000000 215.46864319]
[107.50000000 230.46864319]
[107.50000000 245.46864319]
[107.50000000 260.46862793]
[107.50000000 275.46862793]
[122.03988647 279.52996826]
[134.94427490 287.36447144]
[145.25555420 298.39080811]
[152.20857239 311.79071045]
[155.28736877 326.56988525]
[154.26348877 341.63156128]
[149.21287537 355.85809326]
[140.51036072 368.19375610]
[128.80169678 377.72317505]
[114.95575714 383.73919678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 83]
[26 82]
[39 70]
[40 69]
[41 68]
[43 66]
[44 65]
[47 64]
[48 63]
[49 62]
[50 61]
[87 125]
[88 124]
[89 123]
[91 121]
[92 120]
[93 104]
[94 103]
[95 102]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
