%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCAAUGGGGGGGGGGAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACxxxxxxxxxxAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUCCCCCCCCCCACAGUCCAAU\
) } def
/len { sequence length } bind def

/coor [
[77.38647461 439.51922607]
[63.54053879 433.50320435]
[51.83187866 423.97378540]
[43.12935257 411.63812256]
[38.07875061 397.41159058]
[37.05485916 382.34991455]
[40.13365936 367.57077026]
[47.08668137 354.17083740]
[57.39796448 343.14450073]
[70.30234528 335.30999756]
[84.84223175 331.24868774]
[84.84223175 316.24868774]
[84.84223175 301.24868774]
[84.84223175 286.24868774]
[84.84223175 271.24868774]
[84.84223175 256.24868774]
[84.84223175 241.24867249]
[84.84223175 226.24867249]
[84.84223175 211.24867249]
[84.84223175 196.24867249]
[84.84223175 181.24867249]
[72.34175873 189.53952026]
[58.00179291 185.13890076]
[52.30369186 171.26333618]
[59.41230774 158.05471802]
[74.13181305 155.16748047]
[85.70316315 164.71138000]
[87.26074982 149.79246521]
[88.81832886 134.87355042]
[90.37590790 119.95464325]
[78.11490631 103.44292450]
[84.71395111 83.96417236]
[78.65093994 70.24412537]
[72.58792114 56.52406693]
[66.52490997 42.80401611]
[52.24967575 47.45252609]
[37.57739639 50.63296509]
[22.65863228 52.31269836]
[7.64647532 52.47448349]
[-7.30502415 51.11666107]
[-22.04244041 48.25317001]
[-36.41453934 43.91338730]
[-50.27384949 38.14184952]
[-63.47813797 30.99778366]
[-75.89192200 22.55449867]
[-87.38780212 12.89863396]
[-97.84781647 2.12927699]
[-107.16463470 -9.64306164]
[-115.24264526 -22.29757690]
[-121.99895477 -35.70441437]
[-127.36422729 -49.72600174]
[-131.28341675 -64.21844482]
[-133.71629333 -79.03303528]
[-134.63790894 -94.01775360]
[-134.03878784 -109.01882172]
[-131.92509460 -123.88230896]
[-128.31851196 -138.45568848]
[-123.25604248 -152.58943176]
[-116.78964233 -166.13847351]
[-108.98567200 -178.96380615]
[-99.92420197 -190.93379211]
[-89.69821930 -201.92562866]
[-78.41267395 -211.82650757]
[-66.18335724 -220.53482056]
[-53.13576889 -227.96122742]
[-39.40379715 -234.02951050]
[-25.12835884 -238.67739868]
[-10.45593834 -241.85719299]
[4.46289921 -243.53625488]
[19.47506332 -243.69738770]
[34.42650223 -242.33891296]
[49.16379166 -239.47476196]
[63.53570175 -235.13435364]
[77.39475250 -229.36219788]
[90.59873199 -222.21755981]
[103.01213837 -213.77372742]
[114.50759888 -204.11735535]
[124.96714020 -193.34753418]
[134.28343201 -181.57478333]
[142.36088562 -168.91992188]
[149.11660767 -155.51278687]
[154.48126221 -141.49096680]
[158.39981079 -126.99834442]
[160.83204651 -112.18364716]
[161.75300598 -97.19889069]
[161.15322876 -82.19785309]
[159.03887939 -67.33445740]
[155.43164062 -52.76122665]
[150.36856079 -38.62771606]
[143.90156555 -25.07895279]
[136.09701538 -12.25397110]
[127.03502655 -0.28437412]
[116.80856323 10.70700932]
[105.52257538 20.60738945]
[93.29287720 29.31517220]
[80.24496460 36.74100113]
[86.30797577 50.46105576]
[92.37099457 64.18110657]
[98.43400574 77.90116119]
[107.75973511 79.24915314]
[115.68174744 84.35092163]
[120.76698303 92.28355408]
[135.76617432 92.12751770]
[150.76535034 91.97148132]
[165.76454163 91.81544495]
[180.76373291 91.65940857]
[195.74345398 90.87956238]
[210.67774963 89.47725677]
[221.97782898 78.08921051]
[237.91064453 79.96680450]
[246.25387573 93.66971588]
[240.60734558 108.68624878]
[225.30256653 113.49699402]
[212.08006287 104.41156769]
[197.14575195 105.81387329]
[195.24220276 107.95486450]
[192.34866333 109.44528198]
[188.71812439 109.89376068]
[184.74415588 109.01137543]
[180.91976929 106.65859985]
[165.92057800 106.81463623]
[150.92138672 106.97067261]
[135.92221069 107.12670898]
[120.92301941 107.28274536]
[114.91520691 116.38132477]
[105.29482269 121.51222229]
[103.73724365 136.43113708]
[102.17965698 151.35005188]
[100.62207794 166.26896667]
[99.84223175 181.24867249]
[99.84223175 196.24867249]
[99.84223175 211.24867249]
[99.84223175 226.24867249]
[99.84223175 241.24867249]
[99.84223175 256.24868774]
[99.84223175 271.24868774]
[99.84223175 286.24868774]
[99.84223175 301.24868774]
[99.84223175 316.24868774]
[99.84223175 331.24868774]
[114.38211823 335.30999756]
[127.28649902 343.14450073]
[137.59777832 354.17083740]
[144.55081177 367.57077026]
[147.62960815 382.34991455]
[146.60571289 397.41159058]
[141.55511475 411.63812256]
[132.85258484 423.97378540]
[121.14392853 433.50320435]
[107.29798889 439.51922607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 129]
[28 128]
[29 127]
[30 126]
[32 99]
[33 98]
[34 97]
[35 96]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
