%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUCCUCAUCGCCCGGGGGGGGGGUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCxxxxxxxxxxAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACCCCCCCCCCCUAUUCCUCAUCACCC\
) } def
/len { sequence length } bind def

/coor [
[85.08102417 182.21366882]
[70.64151764 178.22877502]
[57.14554214 171.72975159]
[45.02683640 162.92546082]
[34.67487335 152.09884644]
[26.42234612 139.59786987]
[20.53447914 125.82428741]
[17.20049858 111.22075653]
[16.52754974 96.25660706]
[18.53726387 81.41275787]
[23.16505051 67.16628265]
[30.26217842 53.97501755]
[39.60056305 42.26291656]
[50.88007736 32.40639114]
[63.73822403 24.72220421]
[77.76176453 19.45731735]
[92.50000000 16.78093529]
[92.50000000 1.78093481]
[92.50000000 -13.21906471]
[92.50000000 -28.21906471]
[92.50000000 -43.21906662]
[92.50000000 -58.21906662]
[92.50000000 -73.21906281]
[92.50000000 -88.21906281]
[92.50000000 -103.21906281]
[92.50000000 -118.21906281]
[92.50000000 -133.21907043]
[77.52034760 -134.07551575]
[62.61402512 -135.78575134]
[47.82964325 -138.34416199]
[33.21543503 -141.74244690]
[18.81906128 -145.96949768]
[4.68748665 -151.01152039]
[-9.13319683 -156.85208130]
[-22.59790993 -163.47212219]
[-35.66273117 -170.85005188]
[-48.28504562 -178.96180725]
[-60.42368698 -187.78092957]
[-72.03905487 -197.27864075]
[-83.09326172 -207.42398071]
[-93.55025482 -218.18385315]
[-103.37592316 -229.52314758]
[-112.53822327 -241.40489197]
[-121.00725555 -253.79031372]
[-128.75541687 -266.63903809]
[-135.75741577 -279.90911865]
[-141.99041748 -293.55731201]
[-147.43408203 -307.53909302]
[-152.07067871 -321.80883789]
[-155.88507080 -336.31997681]
[-158.86480713 -351.02523804]
[-161.00018311 -365.87661743]
[-162.28421021 -380.82571411]
[-162.71273804 -395.82369995]
[-162.28433228 -410.82168579]
[-161.00041199 -425.77078247]
[-158.86515808 -440.62216187]
[-155.88552856 -455.32745361]
[-152.07125854 -469.83865356]
[-147.43478394 -484.10842896]
[-141.99121094 -498.09024048]
[-135.75831604 -511.73846436]
[-128.75642395 -525.00860596]
[-121.00836945 -537.85742188]
[-112.53942871 -550.24291992]
[-103.37722778 -562.12469482]
[-93.55164337 -573.46405029]
[-83.09473419 -584.22399902]
[-72.04060364 -594.36944580]
[-60.42531586 -603.86724854]
[-48.28674698 -612.68646240]
[-35.66449356 -620.79833984]
[-22.59972954 -628.17639160]
[-9.13506889 -634.79650879]
[4.68556929 -640.63720703]
[18.81710434 -645.67932129]
[33.21344376 -649.90649414]
[47.82762909 -653.30487061]
[62.61198807 -655.86340332]
[77.51830292 -657.57373047]
[92.49794006 -658.43029785]
[107.50205994 -658.43029785]
[122.48169708 -657.57373047]
[137.38801575 -655.86340332]
[152.17237854 -653.30487061]
[166.78656006 -649.90649414]
[181.18289185 -645.67932129]
[195.31443787 -640.63720703]
[209.13507080 -634.79650879]
[222.59973145 -628.17639160]
[235.66448975 -620.79833984]
[248.28674316 -612.68646240]
[260.42532349 -603.86724854]
[272.04061890 -594.36944580]
[283.09472656 -584.22399902]
[293.55163574 -573.46405029]
[303.37722778 -562.12469482]
[312.53942871 -550.24291992]
[321.00836182 -537.85742188]
[328.75640869 -525.00860596]
[335.75833130 -511.73846436]
[341.99121094 -498.09024048]
[347.43478394 -484.10842896]
[352.07125854 -469.83865356]
[355.88552856 -455.32745361]
[358.86514282 -440.62216187]
[361.00039673 -425.77078247]
[362.28433228 -410.82168579]
[362.71273804 -395.82369995]
[362.28421021 -380.82571411]
[361.00018311 -365.87661743]
[358.86480713 -351.02523804]
[355.88507080 -336.31997681]
[352.07067871 -321.80883789]
[347.43408203 -307.53909302]
[341.99041748 -293.55731201]
[335.75741577 -279.90911865]
[328.75540161 -266.63903809]
[321.00726318 -253.79031372]
[312.53820801 -241.40489197]
[303.37591553 -229.52314758]
[293.55026245 -218.18385315]
[283.09326172 -207.42398071]
[272.03906250 -197.27864075]
[260.42367554 -187.78092957]
[248.28504944 -178.96180725]
[235.66273499 -170.85005188]
[222.59791565 -163.47212219]
[209.13319397 -156.85208130]
[195.31251526 -151.01152039]
[181.18093872 -145.96949768]
[166.78456116 -141.74244690]
[152.17034912 -138.34416199]
[137.38597107 -135.78575134]
[122.47965240 -134.07551575]
[107.50000000 -133.21907043]
[107.50000000 -118.21906281]
[107.50000000 -103.21906281]
[107.50000000 -88.21906281]
[107.50000000 -73.21906281]
[107.50000000 -58.21906662]
[107.50000000 -43.21906662]
[107.50000000 -28.21906471]
[107.50000000 -13.21906471]
[107.50000000 1.78093481]
[107.50000000 16.78093529]
[122.23823547 19.45731735]
[136.26177979 24.72220421]
[149.11991882 32.40639114]
[160.39944458 42.26291656]
[169.73782349 53.97501755]
[176.83494568 67.16628265]
[181.46273804 81.41275787]
[183.47244263 96.25660706]
[182.79949951 111.22075653]
[179.46551514 125.82428741]
[173.57765198 139.59786987]
[165.32513428 152.09884644]
[154.97315979 162.92546082]
[142.85446167 171.72975159]
[129.35848999 178.22877502]
[114.91897583 182.21366882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
