%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCAUCAUGGGGGGGGGGGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAxxxxxxxxxxAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCCCCCCCCCCCGCCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[73.14313507 478.30667114]
[59.12118912 472.75366211]
[46.92123413 463.88732910]
[37.31016159 452.26501465]
[30.89213753 438.61734009]
[28.07060051 423.80215454]
[29.02291489 408.75076294]
[33.68922043 394.40933228]
[41.77618790 381.67938232]
[52.77546310 371.36111450]
[65.99562073 364.10314941]
[80.60563660 360.36169434]
[80.60563660 345.36169434]
[80.60563660 330.36169434]
[80.60563660 315.36169434]
[80.60563660 300.36169434]
[80.60563660 285.36169434]
[80.60563660 270.36169434]
[80.60563660 255.36169434]
[80.60563660 240.36169434]
[80.60563660 225.36169434]
[72.86833191 212.63442993]
[80.60563660 198.83425903]
[68.11463165 207.13937378]
[53.77045822 202.75248718]
[48.06163406 188.88131714]
[55.16247177 175.66851807]
[69.88080597 172.77534485]
[81.45427704 182.31672668]
[82.99156952 167.39570618]
[80.68646240 163.14886475]
[81.06806183 157.40061951]
[84.91059113 151.89811707]
[87.05916595 137.05278015]
[89.20774841 122.20746613]
[78.99479675 114.96552277]
[73.30088043 103.21007538]
[74.00238037 89.62434387]
[81.44434357 77.59415436]
[94.23006439 70.36442566]
[87.96066284 56.73744583]
[81.69125366 43.11046600]
[75.28227997 29.54857063]
[68.73441315 16.05318642]
[62.18653870 2.55780292]
[52.78268051 -9.12840557]
[41.00054550 -18.41179085]
[29.21840858 -27.69517708]
[17.43626976 -36.97856140]
[3.20219254 -31.20910835]
[-12.00738335 -33.34554672]
[-24.10115814 -42.81318665]
[-29.82596588 -57.06528091]
[-27.64186287 -72.26808167]
[-18.13636208 -84.33212280]
[-3.86639404 -90.01222992]
[11.32948971 -87.78048706]
[23.36367416 -78.23721313]
[28.99902344 -63.94951248]
[26.71965599 -48.76070023]
[38.50179291 -39.47731400]
[50.28393173 -30.19392776]
[62.06606674 -20.91054344]
[56.74654007 -34.93561554]
[55.16600037 -49.85211182]
[57.42824554 -64.68054199]
[63.38471222 -78.44718170]
[72.64427948 -90.24804688]
[84.59889984 -99.30823517]
[98.46358490 -105.03279877]
[113.32788849 -107.04582977]
[128.21575928 -105.21514893]
[142.14956665 -99.66095734]
[154.21435547 -90.74798584]
[163.61785889 -79.06150818]
[169.74263000 -65.36891174]
[172.18646240 -50.56932449]
[170.78887939 -35.63457489]
[165.64166260 -21.54535294]
[157.08280945 -9.22683430]
[145.67431641 0.51208150]
[132.16535950 7.03188515]
[117.44297791 9.90445232]
[102.47393799 8.94115448]
[88.24118805 4.20524597]
[75.68192291 -3.99006772]
[82.22979736 9.50531673]
[88.77766418 23.00070000]
[94.56276703 27.67454338]
[95.31823730 36.84106064]
[101.58763885 50.46804047]
[107.85704803 64.09502411]
[121.54766846 70.22419739]
[135.88772583 65.82389069]
[150.22779846 61.42359543]
[164.56785583 57.02329254]
[178.90791321 52.62299347]
[193.24797058 48.22269440]
[207.58804321 43.82239151]
[208.34101868 28.68274879]
[214.22952271 14.71487904]
[224.54246521 3.60547113]
[238.03453064 -3.30395889]
[253.07646179 -5.17906427]
[267.85189819 -1.79341698]
[280.57659912 6.44414949]
[289.71401978 18.53890991]
[294.16076660 33.03036118]
[293.37988281 48.16859055]
[287.46566772 62.12558746]
[277.13226318 73.21597290]
[263.62750244 80.10052490]
[248.58213806 81.94790649]
[233.81297302 78.53503418]
[221.10345459 70.27403259]
[211.98834229 58.16245270]
[197.64828491 62.56275558]
[183.30821228 66.96305084]
[168.96815491 71.36335754]
[154.62809753 75.76365662]
[140.28802490 80.16395569]
[125.94796753 84.56425476]
[128.18423462 103.13771057]
[119.25551605 118.24234009]
[104.05307007 124.35604095]
[101.90448761 139.20137024]
[99.75591278 154.04669189]
[97.91258240 168.93299866]
[96.37528992 183.85401917]
[95.60563660 198.83425903]
[103.34293365 212.63442993]
[95.60563660 225.36169434]
[95.60563660 240.36169434]
[95.60563660 255.36169434]
[95.60563660 270.36169434]
[95.60563660 285.36169434]
[95.60563660 300.36169434]
[95.60563660 315.36169434]
[95.60563660 330.36169434]
[95.60563660 345.36169434]
[95.60563660 360.36169434]
[110.21564484 364.10314941]
[123.43580627 371.36111450]
[134.43507385 381.67938232]
[142.52204895 394.40933228]
[147.18835449 408.75076294]
[148.14067078 423.80215454]
[145.31913757 438.61734009]
[138.90110779 452.26501465]
[129.29003906 463.88732910]
[117.09008026 472.75366211]
[103.06813049 478.30667114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[29 129]
[30 128]
[33 127]
[34 126]
[35 125]
[40 92]
[41 91]
[42 90]
[43 88]
[44 87]
[45 86]
[46 63]
[47 62]
[48 61]
[49 60]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
