%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUAACCUGGGGGGGGGGCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAxxxxxxxxxxUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACCU\
) } def
/len { sequence length } bind def

/coor [
[83.20951843 356.27606201]
[69.98931885 349.00360107]
[59.10251617 338.55657959]
[51.29138565 325.64733887]
[47.08850479 311.15603638]
[46.78043365 296.07067871]
[50.38817596 281.41986084]
[57.66574860 268.20248413]
[68.11695862 257.31970215]
[81.02922058 249.51356506]
[95.52215576 245.31626892]
[95.21009827 230.31951904]
[94.89804077 215.32276917]
[94.58598328 200.32600403]
[94.27392578 185.32925415]
[93.96187592 170.33250427]
[93.64981842 155.33575439]
[93.33776093 140.33898926]
[93.02570343 125.34223938]
[92.71364594 110.34548950]
[91.93379974 95.36577606]
[90.68692780 80.41768646]
[89.44005585 65.46960449]
[74.43877411 65.79414368]
[59.44597244 65.19457245]
[44.51851654 63.67316437]
[29.71303177 61.23569107]
[15.08568192 57.89139938]
[0.69195342 53.65297699]
[-13.41355228 48.53649902]
[-27.17732811 42.56137466]
[-40.54716492 35.75027084]
[-53.47234344 28.12902260]
[-65.90383148 19.72654152]
[-77.79447937 10.57470036]
[-89.09917450 0.70821714]
[-99.77503967 -9.83548260]
[-109.78157043 -21.01640129]
[-119.08081055 -32.79212570]
[-127.63749695 -45.11798859]
[-135.41914368 -57.94723129]
[-142.39627075 -71.23118591]
[-148.54237366 -84.91947174]
[-153.83415222 -98.96015167]
[-158.25154114 -113.29996490]
[-161.77777100 -127.88452148]
[-164.39947510 -142.65849304]
[-166.10670471 -157.56584167]
[-166.89299011 -172.55001831]
[-166.75534058 -187.55416870]
[-165.69427490 -202.52139282]
[-163.71382141 -217.39491272]
[-160.82148743 -232.11830139]
[-157.02825928 -246.63569641]
[-152.34852600 -260.89205933]
[-146.80001831 -274.83328247]
[-140.40380859 -288.40649414]
[-133.18414307 -301.56021118]
[-125.16841125 -314.24450684]
[-116.38703156 -326.41131592]
[-106.87329865 -338.01443481]
[-96.66330719 -349.00988770]
[-85.79579926 -359.35592651]
[-74.31198120 -369.01333618]
[-62.25542450 -377.94549561]
[-49.67186356 -386.11846924]
[-36.60903168 -393.50128174]
[-23.11647987 -400.06594849]
[-9.24539375 -405.78753662]
[4.95161104 -410.64434814]
[19.42068100 -414.61798096]
[34.10692596 -417.69332886]
[48.95463943 -419.85876465]
[63.90749741 -421.10601807]
[78.90877533 -421.43041992]
[93.90157318 -420.83071899]
[108.82901764 -419.30914307]
[123.63447571 -416.87152100]
[138.26179504 -413.52709961]
[152.65548706 -409.28854370]
[166.76094055 -404.17190552]
[180.52465820 -398.19665527]
[193.89442444 -391.38543701]
[206.81953430 -383.76403809]
[219.25093079 -375.36145020]
[231.14149475 -366.20950317]
[242.44609070 -356.34289551]
[253.12185669 -345.79910278]
[263.12826538 -334.61807251]
[272.42739868 -322.84225464]
[280.98394775 -310.51629639]
[288.76550293 -297.68698120]
[295.74246216 -284.40295410]
[301.88845825 -270.71463013]
[307.18008423 -256.67388916]
[311.59735107 -242.33403015]
[315.12341309 -227.74943542]
[317.74499512 -212.97543335]
[319.45205688 -198.06806946]
[320.23818970 -183.08389282]
[320.10040283 -168.07974243]
[319.03918457 -153.11253357]
[317.05859375 -138.23902893]
[314.16610718 -123.51567841]
[310.37274170 -108.99830627]
[305.69287109 -94.74199677]
[300.14422607 -80.80082703]
[293.74789429 -67.22767639]
[286.52807617 -54.07403946]
[278.51223755 -41.38980484]
[269.73074341 -29.22309685]
[260.21688843 -17.62006187]
[250.00679016 -6.62471819]
[239.13917542 3.72122622]
[227.65525818 13.37852573]
[215.59861755 22.31054497]
[203.01496887 30.48340416]
[189.95207214 37.86610031]
[176.45945740 44.43062592]
[162.58831787 50.15207672]
[148.39126587 55.00875854]
[133.92214966 58.98223877]
[119.23587799 62.05744934]
[104.38813782 64.22272491]
[105.63501740 79.17081451]
[106.88188934 94.11889648]
[109.50399017 97.04481506]
[110.79428864 101.12903595]
[110.25840759 105.73674774]
[107.71040344 110.03343201]
[108.02246094 125.03018951]
[108.33451080 140.02694702]
[108.64656830 155.02369690]
[108.95862579 170.02044678]
[109.27068329 185.01719666]
[109.58274078 200.01396179]
[109.89479828 215.01071167]
[110.20684814 230.00746155]
[110.51890564 245.00421143]
[125.17389679 248.59498596]
[138.39970398 255.85723877]
[149.29457092 266.29583740]
[157.11567688 279.19903564]
[161.32974243 293.68710327]
[161.64945984 308.77221680]
[158.05303955 323.42581177]
[150.78567505 336.64883423]
[140.34288025 347.53964233]
[127.43664551 355.35577393]
[112.94695282 359.56423950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 126]
[22 125]
[23 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
