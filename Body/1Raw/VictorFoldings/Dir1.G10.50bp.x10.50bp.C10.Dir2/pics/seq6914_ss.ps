%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCAUAAUGGGGGGGGGGCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCxxxxxxxxxxACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCCCCCCCCCCCACCAUAAU\
) } def
/len { sequence length } bind def

/coor [
[71.96068573 426.75283813]
[59.40246582 418.40170288]
[49.31624222 407.18923950]
[42.33604813 393.82034302]
[38.90066528 379.13534546]
[39.22604370 364.05737305]
[43.29172897 349.53427124]
[50.84214783 336.47891235]
[61.40267563 325.71203613]
[74.30947113 317.91040039]
[88.75119781 313.56445312]
[88.12722015 298.57742310]
[87.50324249 283.59042358]
[86.87926483 268.60339355]
[86.25528717 253.61637878]
[85.63130951 238.62936401]
[85.00733185 223.64234924]
[84.38335419 208.65533447]
[83.75937653 193.66831970]
[75.49934387 181.27391052]
[82.65587616 167.16383362]
[82.03189850 152.17681885]
[81.40792084 137.18980408]
[69.42108917 128.17227173]
[54.84838867 131.72703552]
[40.27568436 135.28178406]
[36.63909531 150.14900208]
[26.50123024 161.61557007]
[12.19169617 167.04656982]
[-3.00128126 165.19400024]
[-15.58646679 156.48356628]
[-22.67187691 142.91685486]
[-22.62933731 127.61141205]
[-15.46862030 114.08430481]
[-2.83520889 105.44396210]
[12.36783218 103.67587280]
[26.64695549 109.18634033]
[36.72092438 120.70909119]
[51.29362488 117.15432739]
[65.86632538 113.59956360]
[64.33570099 99.25656128]
[68.41793060 85.86489868]
[77.14517975 75.46607971]
[88.87011719 69.50895691]
[101.56851196 68.65140533]
[105.87609863 54.28322601]
[110.18368530 39.91503906]
[114.49127197 25.54685593]
[118.79885101 11.17867184]
[123.10643768 -3.18951225]
[127.41402435 -17.55769539]
[131.72160339 -31.92588043]
[136.02919006 -46.29406357]
[132.58082581 -61.73489761]
[143.64714050 -71.70414734]
[147.95472717 -86.07232666]
[135.55244446 -94.71183777]
[126.44013214 -106.74546051]
[121.50012207 -120.98711395]
[121.20433807 -136.03794861]
[125.56916046 -150.42373657]
[134.15509033 -162.73928833]
[146.11094666 -171.78570557]
[160.25827026 -176.68707275]
[175.20744324 -176.97526550]
[179.51502991 -191.34346008]
[183.82261658 -205.71163940]
[188.13020325 -220.07981873]
[174.91950989 -227.30279541]
[163.49949646 -237.11486816]
[154.36940002 -249.08714294]
[147.92834473 -262.69619751]
[144.45791626 -277.34713745]
[144.10981750 -292.39944458]
[146.89926147 -307.19515991]
[152.70433044 -321.08740234]
[161.27120972 -333.46893311]
[172.22543335 -343.79846191]
[185.08810425 -351.62438965]
[199.29693604 -356.60464478]
[214.23077393 -358.52148438]
[229.23677063 -357.29113770]
[243.65892029 -352.96737671]
[256.86679077 -345.73919678]
[268.28292847 -335.92263794]
[277.40832520 -323.94677734]
[283.84399414 -310.33517456]
[287.30868530 -295.68289185]
[287.65084839 -280.63043213]
[284.85559082 -265.83581543]
[279.04507446 -251.94584656]
[270.47329712 -239.56768799]
[259.51501465 -229.24249268]
[246.64926147 -221.42161560]
[232.43847656 -216.44694519]
[217.50389099 -214.53598022]
[202.49838257 -215.77223206]
[198.19079590 -201.40405273]
[193.88320923 -187.03587341]
[189.57562256 -172.66767883]
[201.90058899 -164.20268250]
[211.01802063 -152.32655334]
[216.02502441 -138.19467163]
[216.41938782 -123.18682098]
[212.14990234 -108.77244568]
[203.62265015 -96.36676025]
[191.66235352 -87.19181824]
[177.43264771 -82.15614319]
[162.32290649 -81.76474762]
[158.01531982 -67.39656067]
[161.77180481 -52.98343658]
[150.39736938 -41.98648071]
[146.08979797 -27.61829567]
[141.78221130 -13.25011158]
[137.47462463 1.11807239]
[133.16703796 15.48625660]
[128.85945129 29.85444069]
[124.55186462 44.22262573]
[120.24428558 58.59080887]
[115.93669891 72.95899200]
[126.87639618 82.12038422]
[132.86747742 95.50878906]
[132.38494873 110.56743622]
[125.17853546 124.25084686]
[112.39221191 133.64068604]
[96.39494324 136.56582642]
[97.01891327 151.55284119]
[97.64289093 166.53985596]
[105.94756317 180.00622559]
[98.74639893 193.04434204]
[99.37037659 208.03135681]
[99.99435425 223.01837158]
[100.61832428 238.00538635]
[101.24230194 252.99240112]
[101.86627960 267.97940063]
[102.49025726 282.96643066]
[103.11423492 297.95346069]
[103.73821259 312.94046021]
[118.49121857 316.07089233]
[132.00186157 322.77267456]
[143.42083740 332.62445068]
[152.03034973 345.00698853]
[157.28919983 359.14187622]
[158.86680603 374.14062500]
[156.66400146 389.06033325]
[150.81924438 402.96322632]
[141.69996643 414.97528076]
[129.87939453 424.34143066]
[116.10058594 430.47293091]
[101.22969055 432.98431396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[21 128]
[22 127]
[23 126]
[24 40]
[25 39]
[26 38]
[45 120]
[46 119]
[47 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
[53 112]
[55 110]
[56 109]
[65 100]
[66 99]
[67 98]
[68 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
