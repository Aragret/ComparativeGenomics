%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAACAGCUAAGGGGGGGGGGAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAxxxxxxxxxxUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACCCCCCCCCCCAAGAACUGCUAA\
) } def
/len { sequence length } bind def

/coor [
[90.37131500 463.43585205]
[76.66916656 457.17495728]
[64.70404816 448.02160645]
[55.07613754 436.43493652]
[48.26835632 422.99612427]
[44.62218857 408.37924194]
[44.32052231 393.31747437]
[47.37848663 378.56631470]
[53.64269638 364.86569214]
[62.79894257 352.90277100]
[74.38794708 343.27767944]
[87.82841492 336.47314453]
[102.44618225 332.83053589]
[102.14217377 317.83361816]
[101.83817291 302.83670044]
[101.53417206 287.83978271]
[101.23016357 272.84286499]
[100.92616272 257.84591675]
[100.62215424 242.84901428]
[100.31815338 227.85209656]
[100.01414490 212.85517883]
[99.71014404 197.85826111]
[91.18659973 189.22300720]
[90.84466553 176.69273376]
[99.41600800 167.00320435]
[99.41600800 152.00320435]
[99.41600800 137.00320435]
[99.41600800 122.00320435]
[88.73329926 132.53315735]
[74.56769562 127.60003662]
[72.73662567 112.71221924]
[85.28585052 104.49353027]
[70.62425995 101.32530975]
[55.96266174 98.15708923]
[44.68134689 104.48849487]
[32.50597000 101.50769043]
[25.86583900 91.35254669]
[11.27146530 87.88783264]
[-3.32290888 84.42311859]
[-17.91728210 80.95839691]
[-29.60282898 91.16759491]
[-45.06042862 92.52487946]
[-58.34632111 84.50834656]
[-64.35180664 70.20053101]
[-60.76765442 55.10306168]
[-48.97204590 45.02123642]
[-33.50063324 43.83171463]
[-20.30248642 51.99189758]
[-14.45256615 66.36402893]
[0.14180736 69.82874298]
[14.73618126 73.29345703]
[29.33055496 76.75817108]
[45.81593704 70.81510162]
[59.13088226 83.49549103]
[73.79248047 86.66371155]
[88.45407104 89.83193207]
[78.90477753 78.26426697]
[82.80439758 63.78003311]
[96.87066650 58.57041931]
[109.26419830 67.02028656]
[109.55349731 82.01757050]
[118.61441040 70.06349182]
[127.67532349 58.10942078]
[129.84532166 42.43773651]
[143.69950867 36.96868515]
[145.86950684 21.29700279]
[159.72370911 15.82795334]
[168.78460693 3.87387991]
[177.84552002 -8.08019352]
[186.90643311 -20.03426552]
[177.24568176 -31.03177261]
[169.93034363 -43.70519257]
[165.24253845 -57.56190109]
[163.36225891 -72.06372070]
[164.36051941 -86.64781952]
[168.19665527 -100.74857330]
[174.71994019 -113.81945801]
[183.67559814 -125.35428619]
[194.71463013 -134.90678406]
[207.40753174 -142.10784912]
[221.26094055 -146.67980957]
[235.73680115 -148.44717407]
[250.27333069 -147.34332275]
[264.30673218 -143.41300964]
[277.29315186 -136.81059265]
[286.59448242 -148.57856750]
[295.53378296 -160.62385559]
[304.10281372 -172.93530273]
[312.67181396 -185.24674988]
[321.24084473 -197.55819702]
[322.08422852 -213.93565369]
[336.81027222 -221.15199280]
[350.27008057 -211.78369141]
[348.61737061 -195.46803284]
[333.55230713 -188.98918152]
[324.98327637 -176.67773438]
[316.41424561 -164.36627197]
[307.84524536 -152.05482483]
[308.13369751 -148.48490906]
[306.66986084 -144.59960938]
[303.32577515 -141.24145508]
[298.36245728 -139.27723694]
[289.06112671 -127.50926208]
[298.95205688 -115.71529388]
[306.19049072 -102.12460327]
[310.46087646 -87.32463074]
[311.57608032 -71.95565033]
[309.48544312 -56.68304825]
[304.27719116 -42.16853714]
[296.17468262 -29.04145432]
[285.52682495 -17.87149811]
[272.79302979 -9.14400101]
[258.52340698 -3.23883319]
[243.33503723 -0.41387725]
[227.88520813 -0.79376358]
[212.84304810 -4.36437416]
[198.86051941 -10.97335434]
[189.79960632 0.98071927]
[180.73869324 12.93479252]
[171.67778015 24.88886642]
[170.15588379 39.70551682]
[155.65357971 46.02959824]
[154.13168335 60.84624863]
[139.62939453 67.17033386]
[130.56848145 79.12440491]
[121.50756836 91.07848358]
[114.41600800 122.00320435]
[114.41600800 137.00320435]
[114.41600800 152.00320435]
[114.41600800 167.00320435]
[123.99801636 182.69604492]
[114.70706177 197.55424500]
[115.01106262 212.55116272]
[115.31507111 227.54809570]
[115.61907196 242.54501343]
[115.92308044 257.54193115]
[116.22708130 272.53884888]
[116.53108978 287.53576660]
[116.83509064 302.53268433]
[117.13909912 317.52960205]
[117.44309998 332.52651978]
[132.19647217 335.57376099]
[145.90165710 341.82800293]
[157.87121582 350.97555542]
[167.50473022 362.55755615]
[174.31903076 375.99307251]
[177.97227478 390.60818481]
[178.28125000 405.66979980]
[175.23042297 420.42245483]
[168.97285461 434.12612915]
[159.82241821 446.09344482]
[148.23806763 455.72418213]
[134.80090332 462.53521729]
[120.18490601 466.18490601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[25 130]
[26 129]
[27 128]
[28 127]
[32 56]
[33 55]
[34 54]
[37 52]
[38 51]
[39 50]
[40 49]
[61 126]
[62 125]
[63 124]
[65 122]
[67 120]
[68 119]
[69 118]
[70 117]
[85 103]
[86 102]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
