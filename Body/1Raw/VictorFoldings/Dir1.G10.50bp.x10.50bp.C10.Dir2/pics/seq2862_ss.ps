%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAACUAGGGGGGGGGGCCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAxxxxxxxxxxGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCACCCCCCCCCCUCCUAAAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 356.32818604]
[71.19830322 350.31216431]
[59.48964310 340.78274536]
[50.78712082 328.44708252]
[45.73651886 314.22055054]
[44.71262741 299.15887451]
[47.79142761 284.37973022]
[54.74444962 270.97979736]
[65.05573273 259.95346069]
[77.96011353 252.11894226]
[92.50000000 248.05763245]
[92.50000000 233.05763245]
[92.50000000 218.05763245]
[92.50000000 203.05763245]
[92.50000000 188.05763245]
[92.50000000 173.05763245]
[92.50000000 158.05763245]
[92.50000000 143.05763245]
[92.50000000 128.05763245]
[92.50000000 113.05764008]
[80.80037689 103.67047119]
[66.15687561 106.92130280]
[51.54798126 110.32427979]
[36.97528076 113.87904358]
[22.40257645 117.43379974]
[19.72339630 132.42520142]
[11.17291927 145.02714539]
[-1.76742947 153.05630493]
[-16.85565758 155.12155151]
[-31.47764015 150.86508179]
[-43.10002518 141.02433777]
[-49.70917130 127.30432129]
[-50.15999985 112.08207703]
[-44.37440109 97.99496460]
[-33.35476685 87.48365784]
[-19.01031494 82.36930847]
[-3.82630801 83.53800201]
[9.56653214 90.78725433]
[18.84781456 102.86109924]
[33.42051697 99.30633545]
[47.99322128 95.75157928]
[53.78361511 91.08071136]
[62.90604782 92.27780151]
[77.54955292 89.02696991]
[89.69702148 86.45590210]
[98.34085083 91.10713196]
[105.79576111 78.09082031]
[113.25067139 65.07450867]
[120.70558167 52.05820084]
[128.16049194 39.04189301]
[118.43003082 27.44260597]
[113.26485443 13.24074078]
[113.27023315 -1.84303236]
[118.42620850 -15.98820591]
[128.09236145 -27.49415970]
[141.08726501 -34.98461151]
[155.83288574 -37.57223511]
[170.54618835 -34.96373367]
[178.00109863 -47.98004150]
[177.48309326 -66.35697174]
[192.92443848 -74.63735962]
[200.10693359 -87.80594635]
[207.28944397 -100.97452545]
[194.26223755 -93.53869629]
[179.95948792 -89.01856995]
[165.02505493 -87.61760712]
[150.13119507 -89.39888000]
[135.94834900 -94.28221130]
[123.11495209 -102.04776764]
[112.20868683 -112.34598541]
[103.72049713 -124.71331024]
[98.03247833 -138.59301758]
[95.40066528 -153.36033630]
[95.94353485 -168.35050964]
[99.63665009 -182.88876343]
[106.31375885 -196.32067871]
[115.67430115 -208.04161072]
[127.29692078 -217.52394104]
[140.65843201 -224.34085083]
[155.15734863 -228.18547058]
[170.14105225 -228.88471985]
[184.93501282 -226.40715027]
[198.87332153 -220.86427307]
[211.32855225 -212.50559998]
[221.74002075 -201.70738220]
[229.63906860 -188.95571899]
[234.67012024 -174.82460022]
[236.60670471 -159.95013428]
[235.36166382 -145.00189209]
[230.99102783 -130.65277100]
[223.69021606 -117.54679871]
[231.96072388 -131.03416443]
[246.84541321 -130.49061584]
[259.93856812 -137.80972290]
[273.03170776 -145.12881470]
[286.12487793 -152.44792175]
[299.21801758 -159.76702881]
[312.31118774 -167.08613586]
[318.04397583 -182.06994629]
[333.37615967 -186.79261780]
[346.54620361 -177.63131714]
[347.45117188 -161.61381531]
[335.39685059 -151.02735901]
[319.63027954 -153.99298096]
[306.53713989 -146.67387390]
[293.44396973 -139.35476685]
[280.35083008 -132.03565979]
[267.25765991 -124.71656036]
[254.16452026 -117.39745331]
[246.83052063 -104.43359375]
[231.00932312 -104.45364380]
[220.45803833 -93.79201508]
[213.27552795 -80.62343597]
[206.09301758 -67.45485687]
[209.20393372 -55.72329330]
[203.27423096 -44.67532349]
[191.01741028 -40.52513123]
[183.56250000 -27.50882149]
[193.25726318 -16.13794708]
[198.48652649 -2.10998249]
[198.60108948 12.88873005]
[193.56777954 27.04808807]
[183.97593689 38.65268326]
[170.96835327 46.28961563]
[156.10516357 49.02051926]
[141.17680359 46.49680328]
[133.72189331 59.51311111]
[126.26698303 72.52941895]
[118.81207275 85.54573059]
[111.35716248 98.56204224]
[107.50000000 113.05764008]
[107.50000000 128.05763245]
[107.50000000 143.05763245]
[107.50000000 158.05763245]
[107.50000000 173.05763245]
[107.50000000 188.05763245]
[107.50000000 203.05763245]
[107.50000000 218.05763245]
[107.50000000 233.05763245]
[107.50000000 248.05763245]
[122.03988647 252.11894226]
[134.94427490 259.95346069]
[145.25555420 270.97979736]
[152.20857239 284.37973022]
[155.28736877 299.15887451]
[154.26348877 314.22055054]
[149.21287537 328.44708252]
[140.51036072 340.78274536]
[128.80169678 350.31216431]
[114.95575714 356.32818604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 44]
[22 43]
[23 41]
[24 40]
[25 39]
[46 130]
[47 129]
[48 128]
[49 127]
[50 126]
[58 118]
[59 117]
[61 114]
[62 113]
[63 112]
[91 111]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
