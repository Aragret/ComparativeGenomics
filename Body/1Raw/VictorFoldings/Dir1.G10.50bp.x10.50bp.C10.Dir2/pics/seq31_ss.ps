%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUAACCAGGGGGGGGGGCUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACxxxxxxxxxxGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCCCCCCCCCCCUACUAACCA\
) } def
/len { sequence length } bind def

/coor [
[101.45114899 515.52465820]
[87.42920685 509.97164917]
[75.22924805 501.10531616]
[65.61817169 489.48300171]
[59.20014954 475.83529663]
[56.37861252 461.02011108]
[57.33092880 445.96875000]
[61.99723434 431.62731934]
[70.08419800 418.89736938]
[81.08347321 408.57907104]
[94.30363464 401.32110596]
[108.91365051 397.57968140]
[108.91365051 382.57968140]
[108.91365051 367.57968140]
[108.91365051 352.57968140]
[108.91365051 337.57968140]
[108.91365051 322.57968140]
[108.91365051 307.57968140]
[108.91365051 292.57968140]
[108.91365051 277.57968140]
[108.91365051 262.57968140]
[108.91365051 247.57966614]
[92.06015778 240.40942383]
[79.95908356 226.59397888]
[75.04437256 208.84565735]
[78.33338928 190.67425537]
[89.21662903 175.69302368]
[105.57016754 166.90016174]
[104.33955383 151.95071411]
[103.10894775 137.00128174]
[101.87833405 122.05184937]
[95.00953674 135.38674927]
[80.16059875 137.51019287]
[69.82966614 126.63491058]
[72.71215057 111.91447449]
[86.38198090 105.73888397]
[71.51538086 103.74282837]
[56.64878082 101.74676514]
[44.23938751 111.53362274]
[28.55429268 109.59626007]
[18.89918518 97.08409119]
[21.00226974 81.42035675]
[33.61582184 71.89807129]
[49.25644684 74.16664886]
[58.64483643 86.88017273]
[73.51143646 88.87622833]
[88.37803650 90.87228394]
[74.57829285 84.99291229]
[68.28347778 71.37764740]
[72.74362946 57.05608749]
[85.65595245 49.42248154]
[100.35379028 52.41807938]
[109.24861145 64.49624634]
[107.74708557 79.42282867]
[113.16571045 65.43574524]
[118.58433533 51.44866180]
[115.31730652 33.35564423]
[129.34530640 22.85517883]
[134.47560120 8.75978851]
[139.60591125 -5.33560038]
[144.73620605 -19.43099022]
[118.25798798 -52.19959641]
[117.95001221 -67.19643402]
[109.93099976 -80.83483887]
[117.40535736 -93.71828461]
[117.09738159 -108.71512604]
[109.07836914 -122.35352325]
[116.55271912 -135.23696899]
[116.24474335 -150.23381042]
[102.19187927 -156.10209656]
[91.74551392 -167.18331909]
[86.71555328 -181.55758667]
[87.97346497 -196.73445129]
[95.30130768 -210.08445740]
[107.42948914 -219.29463196]
[122.25672150 -222.76924133]
[137.21411133 -219.90629578]
[149.71018982 -211.20181274]
[157.57994080 -198.16390991]
[159.45986938 -183.05146790]
[155.02429199 -168.48281860]
[145.04167175 -156.98207092]
[131.24157715 -150.54179382]
[131.54956055 -135.54495239]
[139.54653931 -122.97922516]
[132.09422302 -109.02310181]
[132.40219116 -94.02626038]
[140.39916992 -81.46053314]
[132.94685364 -67.50440979]
[133.25482178 -52.50757217]
[139.89849854 -49.02739334]
[153.18583679 -42.06703949]
[159.82951355 -38.58686066]
[172.33354187 -46.87233353]
[184.83758545 -55.15781021]
[183.81199646 -70.48242188]
[190.60052490 -84.25962830]
[203.37709045 -92.78343201]
[218.70483398 -93.76097107]
[232.46069336 -86.92929840]
[240.94441223 -74.12608337]
[241.87390137 -58.79534531]
[234.99914551 -45.06096649]
[222.16940308 -36.61742401]
[206.83581543 -35.73599243]
[193.12306213 -42.65377426]
[180.61901855 -34.36829758]
[168.11499023 -26.08282471]
[158.83160400 -14.30068779]
[153.70129395 -0.20529822]
[148.57099915 13.89009094]
[143.44068909 27.98548126]
[148.27246094 39.11724854]
[144.06571960 50.92718887]
[132.57141113 56.86728668]
[127.15279388 70.85437012]
[121.73416901 84.84145355]
[116.82776642 120.82124329]
[118.05838013 135.77067566]
[119.28899384 150.72010803]
[120.51960754 165.66954041]
[132.04377747 168.57722473]
[142.26318359 174.60758972]
[150.35345459 183.26150513]
[155.66552734 193.82872009]
[157.77778625 205.44616699]
[156.52941895 217.16842651]
[152.03268433 228.04469299]
[144.66282654 237.19587708]
[135.02690125 243.88563538]
[123.91365051 247.57966614]
[123.91365051 262.57968140]
[123.91365051 277.57968140]
[123.91365051 292.57968140]
[123.91365051 307.57968140]
[123.91365051 322.57968140]
[123.91365051 337.57968140]
[123.91365051 352.57968140]
[123.91365051 367.57968140]
[123.91365051 382.57968140]
[123.91365051 397.57968140]
[138.52366638 401.32110596]
[151.74382019 408.57907104]
[162.74308777 418.89736938]
[170.83006287 431.62731934]
[175.49636841 445.96875000]
[176.44868469 461.02011108]
[173.62713623 475.83529663]
[167.20912170 489.48300171]
[157.59805298 501.10531616]
[145.39808655 509.97164917]
[131.37614441 515.52465820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[28 121]
[29 120]
[30 119]
[31 118]
[36 47]
[37 46]
[38 45]
[54 117]
[55 116]
[56 115]
[58 112]
[59 111]
[60 110]
[61 109]
[62 90]
[63 89]
[65 87]
[66 86]
[68 84]
[69 83]
[93 108]
[94 107]
[95 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
