%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAACAAUGGGGGGGGGGCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAxxxxxxxxxxUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCCCCCCCCCCCAAACAUU\
) } def
/len { sequence length } bind def

/coor [
[91.82430267 439.37039185]
[77.97836304 433.35437012]
[66.26969910 423.82495117]
[57.56717682 411.48928833]
[52.51657486 397.26275635]
[51.49268341 382.20108032]
[54.57148361 367.42190552]
[61.52450562 354.02200317]
[71.83579254 342.99566650]
[84.74017334 335.16116333]
[99.28005981 331.09982300]
[99.28005981 316.09982300]
[99.28005981 301.09982300]
[99.28005981 286.09982300]
[99.28005981 271.09982300]
[99.28005981 256.09982300]
[99.28005981 241.09983826]
[99.28005981 226.09983826]
[99.28005981 211.09983826]
[99.28005981 196.09983826]
[96.11447906 189.36747742]
[99.43933868 180.78858948]
[99.75139618 165.79183960]
[98.97154999 150.81211853]
[97.10393524 135.92884827]
[95.23632812 121.04556274]
[93.36871338 106.16228485]
[90.62716675 103.34797668]
[89.16808319 99.32096863]
[89.51183319 94.69495392]
[91.87889862 90.29598999]
[90.94326782 75.32520294]
[90.00763702 60.35440826]
[89.07201385 45.38361740]
[88.13638306 30.41282654]
[85.17050171 25.96051216]
[84.33805084 21.28510666]
[85.35744476 17.25242424]
[87.63912964 14.48450279]
[87.63912964 -0.51549757]
[73.95863342 -7.19422150]
[64.57278442 -19.10190010]
[61.30114365 -33.84355927]
[64.74033356 -48.48367691]
[74.15606689 -60.13071060]
[87.63912964 -66.50820923]
[87.63912964 -81.50820923]
[87.63912964 -96.50820923]
[87.63912964 -111.50820923]
[87.63912964 -126.50820923]
[87.63912964 -141.50820923]
[72.73731995 -143.38952637]
[58.18882370 -147.12373352]
[44.22308350 -152.65196228]
[31.06036377 -159.88702393]
[18.90825653 -168.71479797]
[7.95842171 -178.99606323]
[-1.61644816 -190.56866455]
[-9.66534328 -203.25009155]
[-16.06131935 -216.84033203]
[-20.70350647 -231.12504578]
[-23.51868629 -245.87896729]
[-24.46246147 -260.86938477]
[-23.51994896 -275.85986328]
[-20.70600891 -290.61401367]
[-16.06502724 -304.89913940]
[-9.67019272 -318.48992920]
[-1.62236547 -331.17202759]
[7.95153046 -342.74542236]
[18.90049934 -353.02761841]
[31.05186272 -361.85641479]
[44.21397400 -369.09255981]
[58.17924881 -374.62197876]
[72.72743225 -378.35742188]
[87.62908173 -380.23999023]
[102.64917755 -380.23999023]
[117.55082703 -378.35742188]
[132.09901428 -374.62197876]
[146.06428528 -369.09255981]
[159.22639465 -361.85641479]
[171.37776184 -353.02761841]
[182.32673645 -342.74542236]
[191.90063477 -331.17202759]
[199.94845581 -318.48992920]
[206.34329224 -304.89913940]
[210.98426819 -290.61401367]
[213.79821777 -275.85986328]
[214.74072266 -260.86938477]
[213.79695129 -245.87896729]
[210.98176575 -231.12504578]
[206.33958435 -216.84033203]
[199.94360352 -203.25009155]
[191.89471436 -190.56866455]
[182.31983948 -178.99606323]
[171.37001038 -168.71479797]
[159.21789551 -159.88702393]
[146.05517578 -152.65196228]
[132.08944702 -147.12373352]
[117.54093933 -143.38952637]
[102.63912964 -141.50820923]
[102.63912964 -126.50820923]
[102.63912964 -111.50820923]
[102.63912964 -96.50820923]
[102.63912964 -81.50820923]
[102.63912964 -66.50820923]
[116.12219238 -60.13071060]
[125.53793335 -48.48367691]
[128.97712708 -33.84355927]
[125.70548248 -19.10190010]
[116.31963348 -7.19422150]
[102.63912964 -0.51549757]
[102.63912964 14.48450279]
[103.10717773 29.47719765]
[104.04280090 44.44799042]
[104.97843170 59.41878128]
[105.91406250 74.38957214]
[106.84968567 89.36036682]
[108.25199127 104.29467010]
[110.11960602 119.17795563]
[111.98722076 134.06123352]
[113.85482788 148.94451904]
[123.36772156 137.34687805]
[138.07649231 134.40547180]
[151.31793213 141.45274353]
[157.09355164 155.29624939]
[152.78691101 169.66471863]
[140.34898376 178.04910278]
[125.41426086 176.65119934]
[114.74815369 166.10389709]
[114.43609619 181.10064697]
[114.28005981 196.09983826]
[114.28005981 211.09983826]
[114.28005981 226.09983826]
[114.28005981 241.09983826]
[114.28005981 256.09982300]
[114.28005981 271.09982300]
[114.28005981 286.09982300]
[114.28005981 301.09982300]
[114.28005981 316.09982300]
[114.28005981 331.09982300]
[128.81994629 335.16116333]
[141.72431946 342.99566650]
[152.03561401 354.02200317]
[158.98863220 367.42190552]
[162.06742859 382.20108032]
[161.04353333 397.26275635]
[155.99293518 411.48928833]
[147.29040527 423.82495117]
[135.58175659 433.35437012]
[121.73580933 439.37039185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 121]
[25 120]
[26 119]
[27 118]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[39 112]
[40 111]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
