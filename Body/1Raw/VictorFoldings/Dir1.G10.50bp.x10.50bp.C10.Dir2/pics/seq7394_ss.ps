%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAACCCCAGGGGGGGGGGUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUxxxxxxxxxxCCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCCCCCCCCCCCGCUAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.30782318 405.36743164]
[72.08763123 398.09494019]
[61.20082474 387.64794922]
[53.38969421 374.73870850]
[49.18681335 360.24737549]
[48.87874222 345.16204834]
[52.48648453 330.51123047]
[59.76405716 317.29382324]
[70.21526337 306.41107178]
[83.12752533 298.60491943]
[97.62046051 294.40762329]
[97.30840302 279.41088867]
[96.99635315 264.41412354]
[96.68429565 249.41737366]
[96.37223816 234.42060852]
[96.06018066 219.42385864]
[95.74812317 204.42710876]
[95.43606567 189.43035889]
[95.12401581 174.43359375]
[94.81195831 159.43684387]
[94.34391022 144.44415283]
[93.71994019 129.45713806]
[93.09596252 114.47011566]
[87.39544678 109.59629059]
[84.65413666 124.34367371]
[70.51184082 129.34321594]
[59.11103058 119.59531403]
[61.85266495 104.84799194]
[75.99443054 99.84864044]
[70.29391479 94.97481537]
[55.39201355 96.68750763]
[40.49011230 98.40019226]
[29.42939186 110.02086639]
[13.46097660 108.47513580]
[4.83446884 94.94876099]
[10.16738605 79.81800842]
[25.36877060 74.68991089]
[38.77742386 83.49829102]
[53.67932510 81.78559875]
[68.58123016 80.07291412]
[77.17754364 80.95938873]
[84.91583252 83.65835571]
[91.48246765 87.95025635]
[96.60770416 93.56639862]
[102.09473419 79.60601044]
[107.58176422 65.64562225]
[113.06880188 51.68523407]
[118.55583191 37.72484207]
[105.10272217 31.06994629]
[92.26245117 23.29811096]
[80.12754822 14.46533680]
[68.78543854 4.63526154]
[58.31784439 -6.12128639]
[48.80018616 -17.72680473]
[40.30104065 -30.09767151]
[32.88164902 -43.14475632]
[26.59546089 -56.77405167]
[21.48777580 -70.88735962]
[17.59539223 -85.38298798]
[14.94635773 -100.15649414]
[13.55975723 -115.10142517]
[13.44558144 -130.11012268]
[14.60465336 -145.07441711]
[17.02862167 -159.88652039]
[20.70002174 -174.43968201]
[25.59239960 -188.62907410]
[31.67050552 -202.35241699]
[38.89054489 -215.51087952]
[47.20050049 -228.00961304]
[56.54049301 -239.75859070]
[66.84323120 -250.67314148]
[78.03447723 -260.67462158]
[90.03359222 -269.69100952]
[102.75413513 -277.65728760]
[116.10444641 -284.51608276]
[129.98832703 -290.21798706]
[144.30575562 -294.72189331]
[158.95356750 -297.99536133]
[173.82620239 -300.01480103]
[188.81654358 -300.76568604]
[203.81654358 -300.24255371]
[218.71815491 -298.44921875]
[233.41398621 -295.39862061]
[247.79815674 -291.11267090]
[261.76705933 -285.62231445]
[275.21997070 -278.96707153]
[288.06005859 -271.19488525]
[300.19473267 -262.36181641]
[311.53659058 -252.53143311]
[322.00390625 -241.77461243]
[331.52127075 -230.16885376]
[340.02008057 -217.79777527]
[347.43914795 -204.75048828]
[353.72497559 -191.12103271]
[358.83230591 -177.00759888]
[362.72430420 -162.51187134]
[365.37295532 -147.73829651]
[366.75918579 -132.79331970]
[366.87295532 -117.78462982]
[365.71350098 -102.82035065]
[363.28915405 -88.00831604]
[359.61737061 -73.45524597]
[354.72463989 -59.26599503]
[348.64617920 -45.54279709]
[341.42578125 -32.38453293]
[333.11550903 -19.88600540]
[323.77520752 -8.13727379]
[313.47219849 2.77701426]
[302.28070068 12.77821827]
[290.28134155 21.79427910]
[277.56060791 29.76023293]
[264.21011353 36.61868668]
[250.32608032 42.32022476]
[236.00852966 46.82376099]
[221.36064148 50.09685135]
[206.48794556 52.11591339]
[191.49758911 52.86639786]
[176.49760437 52.34289551]
[161.59603882 50.54918289]
[146.90028381 47.49818039]
[132.51622009 43.21187592]
[127.02919006 57.17226410]
[121.54216003 71.13265228]
[116.05512238 85.09304047]
[110.56809235 99.05343628]
[108.08297729 113.84613800]
[108.70695496 128.83316040]
[109.33093262 143.82017517]
[112.83354187 152.32801819]
[109.80870819 159.12478638]
[110.12076569 174.12155151]
[110.43282318 189.11830139]
[110.74488068 204.11505127]
[111.05693817 219.11180115]
[111.36898804 234.10856628]
[111.68104553 249.10531616]
[111.99310303 264.10208130]
[112.30516052 279.09881592]
[112.61721802 294.09558105]
[127.27220917 297.68634033]
[140.49801636 304.94860840]
[151.39288330 315.38720703]
[159.21398926 328.29040527]
[163.42805481 342.77847290]
[163.74777222 357.86355591]
[160.15135193 372.51718140]
[152.88398743 385.74017334]
[142.44117737 396.63101196]
[129.53495789 404.44714355]
[115.04526520 408.65560913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 126]
[30 40]
[31 39]
[32 38]
[44 125]
[45 124]
[46 123]
[47 122]
[48 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
