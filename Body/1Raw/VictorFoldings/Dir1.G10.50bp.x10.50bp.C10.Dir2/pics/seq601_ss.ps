%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACUACUAAGGGGGGGGGGUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGxxxxxxxxxxCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACCCCCCCCCCCUAUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[69.42401123 245.11589050]
[59.04664230 242.53536987]
[48.88219833 239.21379089]
[38.98352432 235.16841125]
[29.40209198 230.42027283]
[20.18770981 224.99403381]
[11.38828945 218.91793823]
[3.04957891 212.22355652]
[-4.78506613 204.94570923]
[-12.07491207 197.12222290]
[-18.78205681 188.79377747]
[-24.87162971 180.00366211]
[-30.31196976 170.79760742]
[-35.07479095 161.22346497]
[-49.03260040 166.71704102]
[-62.99040985 172.21063232]
[-72.99805450 184.46452332]
[-87.67474365 181.92602539]
[-101.63256073 187.41961670]
[-115.59037018 192.91320801]
[-129.54817200 198.40679932]
[-143.50598145 203.90039062]
[-157.46380615 209.39398193]
[-158.53834534 224.61921692]
[-166.11990356 237.86621094]
[-178.70317078 246.50473022]
[-193.78971863 248.81961060]
[-208.38410950 244.35122681]
[-219.58862305 233.98677063]
[-225.17857361 219.78413391]
[-224.04408264 204.56323242]
[-216.41041565 191.34620667]
[-203.79322815 182.75729370]
[-188.69767761 180.50184631]
[-174.12098694 185.02767944]
[-162.95738220 195.43617249]
[-148.99957275 189.94258118]
[-135.04176331 184.44898987]
[-121.08395386 178.95539856]
[-107.12614441 173.46180725]
[-93.16833496 167.96821594]
[-84.15904999 156.10726929]
[-68.48400116 158.25282288]
[-54.52618790 152.75923157]
[-40.56837845 147.26565552]
[-45.77894974 127.23983765]
[-48.15140533 106.68370056]
[-47.63955688 85.99744415]
[-44.25337219 65.58380127]
[-38.05877686 45.84019089]
[-29.17636490 27.15099716]
[-17.77906990 9.88007259]
[-4.08877945 -5.63634205]
[11.62797546 -19.09616280]
[3.31022835 -31.57875443]
[-5.00751925 -44.06134415]
[-13.32526684 -56.54393387]
[-28.54056168 -54.88460922]
[-42.77991486 -60.49703979]
[-52.77122879 -72.09152985]
[-56.21857071 -87.00375366]
[-52.32976913 -101.80699158]
[-41.99843597 -113.09956360]
[-27.59864426 -118.28652191]
[-12.43935490 -116.17594147]
[-0.00406413 -107.25282288]
[6.84968996 -93.56761932]
[6.54696465 -78.26510620]
[-0.84267604 -64.86168671]
[7.47507143 -52.37909317]
[15.79281902 -39.89649963]
[24.11056709 -27.41390991]
[40.55265808 -35.86583328]
[57.91855621 -42.20640945]
[75.93839264 -46.33711243]
[94.33215332 -48.19374466]
[112.81398773 -47.74746323]
[131.09669495 -45.00519562]
[148.89614868 -40.00955963]
[165.93577576 -32.83818817]
[181.95075989 -23.60251999]
[196.69224548 -12.44607925]
[209.93113708 0.45776364]
[221.46170044 14.90848446]
[231.10476685 30.68152046]
[244.70294189 24.34990120]
[258.30111694 18.01828194]
[271.89932251 11.68666363]
[285.49749756 5.35504436]
[299.09567261 -0.97657448]
[312.69387817 -7.30819368]
[315.68762207 -23.92699242]
[327.86126709 -35.38896561]
[344.30072021 -37.33832550]
[358.52938843 -29.20575714]
[371.99645996 -35.81166840]
[385.46353149 -42.41758347]
[384.12399292 -57.53611755]
[388.34011841 -72.11653900]
[397.54171753 -84.18696594]
[410.48431396 -92.11497498]
[425.41757202 -94.82836151]
[440.32186890 -91.96017456]
[453.18151855 -83.89829254]
[462.25735474 -71.73303986]
[466.32196045 -57.10965729]
[464.82565308 -42.00583267]
[457.97073364 -28.46424294]
[446.68432617 -18.31627464]
[432.49279785 -12.93435383]
[417.31546021 -13.04634380]
[403.20489502 -18.63709831]
[392.06945801 -28.95051384]
[378.60238647 -22.34460258]
[365.13531494 -15.73868942]
[364.06768799 -2.39816570]
[356.47442627 8.75378895]
[344.25854492 14.73155785]
[330.57711792 13.87073994]
[319.02548218 6.28999043]
[305.42730713 12.62160969]
[291.82913208 18.95322800]
[278.23092651 25.28484726]
[264.63275146 31.61646652]
[251.03456116 37.94808578]
[237.43638611 44.27970505]
[241.09423828 54.32803345]
[244.01850891 64.61382294]
[246.19398499 75.08359528]
[247.60939026 85.68290710]
[248.25733948 96.35665894]
[248.13446045 107.04935455]
[247.24139404 117.70539856]
[245.58280945 128.26937866]
[243.16729736 138.68640137]
[240.00743103 148.90226746]
[236.11962891 158.86389160]
[231.52412415 168.51945496]
[226.24479675 177.81878662]
[220.30908203 186.71351624]
[213.74787903 195.15740967]
[206.59526062 203.10655212]
[198.88844299 210.51962280]
[190.66746521 217.35809326]
[181.97511292 223.58638000]
[172.85653687 229.17211914]
[163.35917664 234.08625793]
[153.53237915 238.30326843]
[143.42727661 241.80120850]
[133.09637451 244.56188965]
[122.59340668 246.57096863]
[111.97296906 247.81799316]
[101.29027557 248.29647827]
[90.60088348 248.00393677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 45]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[54 72]
[55 71]
[56 70]
[57 69]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
