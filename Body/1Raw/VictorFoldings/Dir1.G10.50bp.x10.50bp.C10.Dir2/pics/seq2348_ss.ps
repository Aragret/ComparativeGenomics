%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGCCUAAAAGGGGGGGGGGGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAxxxxxxxxxxUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUCCCCCCCCCCUAGGCUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[96.52254486 443.21054077]
[84.18943787 434.55938721]
[74.09098816 423.38043213]
[66.73373413 410.23440552]
[62.48671722 395.78067017]
[61.56295776 380.74423218]
[64.00879669 365.87930298]
[69.70154572 351.93154907]
[78.35566711 339.60052490]
[89.53707123 329.50479126]
[102.68490601 322.15072632]
[117.13967133 317.90719604]
[116.21625519 302.93563843]
[115.29284668 287.96411133]
[114.36943054 272.99255371]
[113.44601440 258.02099609]
[112.52260590 243.04945374]
[111.59918976 228.07789612]
[110.06189728 213.15687561]
[107.91331482 198.31155396]
[105.76473999 183.46623230]
[103.61615753 168.62091064]
[101.31528473 153.79843140]
[98.86235809 139.00035095]
[96.40943146 124.20227051]
[93.95649719 109.40419769]
[91.35177612 94.63208008]
[88.59553528 79.88748169]
[72.86945343 76.68259430]
[59.60197830 67.72032928]
[50.80011368 54.39196014]
[47.78169250 38.74649811]
[50.97814560 23.17569542]
[59.87311172 10.04840183]
[73.08558655 1.35020745]
[70.02719116 -13.33469009]
[66.96879578 -28.01958847]
[63.91040039 -42.70448685]
[60.34486008 -46.68470764]
[58.85501480 -51.18870163]
[59.28615952 -55.32194901]
[61.14525604 -58.38641739]
[58.99667358 -73.23174286]
[56.84809494 -88.07706451]
[41.84413528 -87.51734161]
[26.86568451 -88.55564117]
[12.08245659 -91.18019104]
[-2.33804107 -95.36125946]
[-16.23241425 -101.05147552]
[-29.44322586 -108.18635559]
[-41.82079315 -116.68505859]
[-53.22486115 -126.45129395]
[-63.52621841 -137.37438965]
[-72.60813904 -149.33059692]
[-80.36772919 -162.18441772]
[-86.71704865 -175.79023743]
[-91.58416748 -189.99388123]
[-94.91393280 -204.63438416]
[-96.66861725 -219.54589844]
[-96.82833862 -234.55944824]
[-95.39128113 -249.50491333]
[-92.37374115 -264.21295166]
[-87.80989838 -278.51693726]
[-81.75147247 -292.25473022]
[-74.26710510 -305.27075195]
[-65.44159698 -317.41744995]
[-55.37495422 -328.55725098]
[-44.18124008 -338.56387329]
[-31.98727989 -347.32397461]
[-18.93124771 -354.73831177]
[-5.16107750 -360.72280884]
[9.16720581 -365.20974731]
[23.89125252 -368.14819336]
[38.84422684 -369.50491333]
[53.85669708 -369.26452637]
[68.75856781 -367.42974854]
[83.38098145 -364.02136230]
[97.55825806 -359.07797241]
[111.12975311 -352.65563965]
[123.94170380 -344.82708740]
[135.84893799 -335.68106079]
[146.71652222 -325.32116699]
[156.42132568 -313.86477661]
[164.85340881 -301.44171143]
[171.91719055 -288.19274902]
[177.53265381 -274.26800537]
[181.63618469 -259.82525635]
[184.18125916 -245.02813721]
[185.13905334 -230.04431152]
[184.49871826 -215.04357910]
[182.26750183 -200.19589233]
[178.47068787 -185.66949463]
[173.15129089 -171.62896729]
[166.36959839 -158.23342896]
[158.20243835 -145.63462830]
[148.74237061 -133.97534180]
[138.09655762 -123.38766479]
[126.38563538 -113.99157715]
[113.74230957 -105.89353180]
[100.30982971 -99.18528748]
[86.24039459 -93.94285583]
[71.69342041 -90.22563934]
[73.84199524 -75.38031769]
[75.99057770 -60.53499603]
[78.59529877 -45.76288223]
[81.65369415 -31.07798386]
[84.71208954 -16.39308548]
[87.77048492 -1.70818794]
[101.67825317 0.38833374]
[114.05655670 7.12937117]
[123.40267181 17.71986580]
[128.57400513 30.89604759]
[128.92782593 45.07622147]
[124.40097046 58.55064011]
[115.52003479 69.68763733]
[103.34013367 77.13124084]
[106.09637451 91.87583923]
[110.58067322 98.63845062]
[108.75457764 106.95126343]
[111.20750427 121.74934387]
[113.66043854 136.54742432]
[116.11336517 151.34550476]
[120.62936401 159.35809326]
[118.46147919 166.47233582]
[120.61006165 181.31765747]
[122.75863647 196.16297913]
[124.90721893 211.00830078]
[127.81434631 214.42126465]
[129.29537964 218.20677185]
[129.41213989 221.85823059]
[128.38853455 224.94390869]
[126.57073975 227.15447998]
[127.49415588 242.12603760]
[128.41757202 257.09759521]
[129.34097290 272.06912231]
[130.26438904 287.04067993]
[131.18780518 302.01223755]
[132.11122131 316.98379517]
[146.97790527 319.41882324]
[160.92980957 325.10144043]
[173.26712036 333.74658203]
[183.37097168 344.92065430]
[190.73460388 358.06314087]
[194.98863220 372.51480103]
[195.91966248 387.55078125]
[193.48103333 402.41690063]
[187.79504395 416.36743164]
[179.14689636 428.70263672]
[167.97038269 438.80377197]
[154.82612610 446.16421509]
[140.37341309 450.41473389]
[125.33720398 451.34213257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 127]
[20 126]
[21 125]
[22 124]
[23 122]
[24 121]
[25 120]
[26 119]
[27 117]
[28 116]
[35 108]
[36 107]
[37 106]
[38 105]
[42 104]
[43 103]
[44 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
