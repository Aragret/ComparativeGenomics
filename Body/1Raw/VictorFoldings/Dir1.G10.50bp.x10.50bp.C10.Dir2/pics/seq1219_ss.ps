%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCCUCCCGGGGGGGGGGCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAxxxxxxxxxxGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACCCCCCCCCCCACCCACUCCC\
) } def
/len { sequence length } bind def

/coor [
[133.75201416 528.84674072]
[119.73007202 523.29376221]
[107.53011322 514.42742920]
[97.91903687 502.80508423]
[91.50101471 489.15740967]
[88.67948151 474.34219360]
[89.63179016 459.29083252]
[94.29809570 444.94940186]
[102.38506317 432.21945190]
[113.38433838 421.90118408]
[126.60449982 414.64318848]
[141.21450806 410.90176392]
[141.21450806 395.90176392]
[141.21450806 380.90176392]
[141.21450806 365.90176392]
[141.21450806 350.90176392]
[141.21450806 335.90176392]
[141.21450806 320.90176392]
[141.21450806 305.90176392]
[141.21450806 290.90176392]
[141.21450806 275.90176392]
[121.20948792 269.26892090]
[105.04856873 255.69860840]
[95.03024292 237.09494019]
[92.58892822 216.07974243]
[98.08959961 195.62300110]
[110.77345276 178.62315369]
[128.86244202 167.49645996]
[125.50318146 152.87745667]
[122.14392090 138.25845337]
[118.78466797 123.63944244]
[115.42540741 109.02043152]
[99.24997711 116.33786011]
[86.55634308 106.28639221]
[71.62033081 104.90236664]
[56.68431854 103.51834106]
[41.74830627 102.13431549]
[26.81229210 100.75028992]
[12.14850044 108.09230804]
[-1.39094484 98.83944702]
[0.12217758 82.51025391]
[15.13129711 75.90280914]
[28.19631767 85.81427765]
[43.13233185 87.19830322]
[58.06834412 88.58232880]
[73.00435638 89.96635437]
[87.94036865 91.35037994]
[99.75345612 83.64678955]
[114.19998169 89.15233612]
[115.73727417 74.23131561]
[117.27456665 59.31029892]
[107.57837677 47.11925888]
[109.34996033 32.00912476]
[121.03201294 22.84041214]
[122.56930542 7.91939592]
[124.10659790 -7.00162029]
[123.49077606 -21.98897362]
[120.73452759 -36.73357010]
[117.97828674 -51.47816849]
[102.92549133 -52.19235611]
[88.44331360 -56.35929108]
[75.31276703 -63.75424957]
[64.24195862 -73.97843170]
[55.82792664 -86.48046112]
[50.52442551 -100.58612061]
[48.61746979 -115.53470612]
[50.20989609 -130.52006531]
[55.21583176 -144.73405457]
[63.36530685 -157.41011047]
[74.21883392 -167.86466980]
[87.19110107 -175.53390503]
[101.58251953 -180.00422668]
[116.61698151 -181.03454590]
[131.48370361 -178.56932068]
[145.38093567 -172.74150085]
[157.55921936 -163.86534119]
[167.36180115 -152.41955566]
[174.26002502 -139.02137756]
[177.88189697 -124.39335632]
[178.03208923 -109.32437897]
[174.70248413 -94.62708282]
[168.07266235 -81.09407806]
[158.50015259 -69.45518494]
[146.50120544 -60.33806992]
[132.72288513 -54.23440933]
[135.47912598 -39.48981476]
[138.23536682 -24.74521637]
[144.08872986 -38.55601501]
[154.70744324 -49.15048981]
[168.53158569 -54.97227478]
[183.53033447 -55.16613007]
[197.50032043 -49.70357513]
[208.38931274 -39.38708115]
[214.59765625 -25.73217964]
[215.21334839 -10.74482155]
[210.14593506 3.37329721]
[200.13983154 14.54817390]
[186.66496277 21.13817978]
[171.70085144 22.17521858]
[157.44578552 17.50694656]
[145.99385071 7.81914902]
[139.02761841 -5.46432781]
[137.49032593 9.45668888]
[135.95303345 24.37770462]
[145.52024841 35.73569870]
[144.17376709 50.88963318]
[132.19558716 60.84759140]
[130.65829468 75.76860809]
[129.12100220 90.68962860]
[130.04441833 105.66117859]
[133.40367126 120.28018188]
[136.76292419 134.89918518]
[140.12219238 149.51820374]
[143.48144531 164.13720703]
[153.19863892 164.10043335]
[162.77366638 165.72868347]
[171.92349243 168.97215271]
[180.37794495 173.73335266]
[187.88768005 179.86996460]
[194.23152161 187.19915771]
[199.22300720 195.50300598]
[202.71586609 204.53495789]
[204.60827637 214.02719116]
[204.84584045 223.69853210]
[203.42317200 233.26278687]
[200.38398743 242.43721008]
[195.81976318 250.95083618]
[189.86697388 258.55258179]
[182.70306396 265.01849365]
[174.54107666 270.15847778]
[165.62341309 273.82186890]
[156.21450806 275.90176392]
[156.21450806 290.90176392]
[156.21450806 305.90176392]
[156.21450806 320.90176392]
[156.21450806 335.90176392]
[156.21450806 350.90176392]
[156.21450806 365.90176392]
[156.21450806 380.90176392]
[156.21450806 395.90176392]
[156.21450806 410.90176392]
[170.82452393 414.64318848]
[184.04467773 421.90118408]
[195.04396057 432.21945190]
[203.13092041 444.94940186]
[207.79722595 459.29083252]
[208.74954224 474.34219360]
[205.92800903 489.15740967]
[199.50997925 502.80508423]
[189.89891052 514.42742920]
[177.69895935 523.29376221]
[163.67701721 528.84674072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[49 109]
[50 108]
[51 107]
[54 104]
[55 103]
[56 102]
[57 87]
[58 86]
[59 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
