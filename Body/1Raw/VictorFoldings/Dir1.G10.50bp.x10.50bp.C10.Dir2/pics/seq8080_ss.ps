%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCAACUAAAGGGGGGGGGGAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAxxxxxxxxxxACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUAAA\
) } def
/len { sequence length } bind def

/coor [
[81.27941132 385.08255005]
[68.58392334 376.98818970]
[57.84905624 366.43090820]
[49.54407883 353.87219238]
[44.03205872 339.86108398]
[41.55395126 325.01007080]
[42.21809006 309.96838379]
[45.99544144 295.39355469]
[52.72087860 281.92276001]
[62.10039139 270.14489746]
[73.72395325 260.57479858]
[87.08341980 253.63087463]
[101.59478760 249.61665344]
[100.68327332 234.64437866]
[99.77175903 219.67208862]
[98.86024475 204.69981384]
[97.94873047 189.72753906]
[97.03721619 174.75524902]
[96.12570190 159.78297424]
[95.21419525 144.81069946]
[94.30268097 129.83842468]
[93.39116669 114.86613464]
[85.13137054 106.60321808]
[84.53961945 94.93489075]
[91.92108917 85.87873840]
[91.31320953 70.89105988]
[90.70532227 55.90338516]
[90.09744263 40.91570663]
[75.09642029 40.56211853]
[60.14887238 39.24813461]
[45.31622696 36.97915649]
[30.65942955 33.76450348]
[16.23871231 29.61738777]
[2.11333132 24.55485153]
[-11.65866852 18.59769630]
[-25.02069473 11.77040386]
[-37.91783905 4.10102797]
[-50.29710388 -4.37891626]
[-62.10762024 -13.63458252]
[-73.30085754 -23.62793732]
[-83.83081818 -34.31791306]
[-93.65422821 -45.66058731]
[-102.73072815 -57.60934448]
[-111.02301788 -70.11508942]
[-118.49701691 -83.12642670]
[-125.12202454 -96.58989716]
[-130.87080383 -110.45017242]
[-135.71974182 -124.65029144]
[-139.64891052 -139.13191223]
[-142.64215088 -153.83552551]
[-144.68717957 -168.70069885]
[-145.77560425 -183.66636658]
[-145.90290833 -198.67100525]
[-145.06861877 -213.65298462]
[-143.27613831 -228.55073547]
[-140.53282166 -243.30300903]
[-136.84996033 -257.84921265]
[-132.24269104 -272.12957764]
[-126.72994232 -286.08541870]
[-120.33435822 -299.65936279]
[-113.08222198 -312.79565430]
[-105.00334167 -325.44030762]
[-96.13091278 -337.54138184]
[-86.50138855 -349.04910278]
[-76.15435028 -359.91622925]
[-65.13230133 -370.09808350]
[-53.48054886 -379.55285645]
[-41.24696350 -388.24163818]
[-28.48181915 -396.12875366]
[-15.23757172 -403.18182373]
[-1.56864297 -409.37182617]
[12.46879673 -414.67330933]
[26.81706429 -419.06454468]
[41.41720200 -422.52743530]
[56.20920944 -425.04779053]
[71.13230133 -426.61523438]
[86.12516785 -427.22332764]
[101.12618256 -426.86959839]
[116.07371521 -425.55541992]
[130.90634155 -423.28628540]
[145.56309509 -420.07147217]
[159.98376465 -415.92419434]
[174.10908508 -410.86151123]
[187.88102722 -404.90420532]
[201.24298096 -398.07675171]
[214.14002991 -390.40722656]
[226.51921082 -381.92715454]
[238.32962036 -372.67135620]
[249.52275085 -362.67788696]
[260.05258179 -351.98779297]
[269.87588501 -340.64501953]
[278.95223999 -328.69613647]
[287.24438477 -316.19030762]
[294.71826172 -303.17889404]
[301.34310913 -289.71536255]
[307.09173584 -275.85501099]
[311.94052124 -261.65484619]
[315.86950684 -247.17317200]
[318.86260986 -232.46952820]
[320.90747070 -217.60432434]
[321.99569702 -202.63865662]
[322.12286377 -187.63400269]
[321.28839111 -172.65203857]
[319.49575806 -157.75431824]
[316.75228882 -143.00205994]
[313.06927490 -128.45588684]
[308.46182251 -114.17558289]
[302.94891357 -100.21981049]
[296.55319214 -86.64592743]
[289.30090332 -73.50971985]
[281.22189331 -60.86515045]
[272.34933472 -48.76418686]
[262.71966553 -37.25655746]
[252.37251282 -26.38954926]
[241.35035706 -16.20781517]
[229.69848633 -6.75319576]
[217.46481323 1.93545914]
[204.69958496 9.82244492]
[191.45524597 16.87535095]
[177.78625488 23.06519699]
[163.74876404 28.36654663]
[149.40043640 32.75761414]
[134.80026245 36.22035599]
[120.00823212 38.74054718]
[105.08512115 40.30782318]
[105.69300079 55.29550171]
[106.30088806 70.28318024]
[106.90876770 85.27085876]
[116.24806976 99.17599487]
[108.36344147 113.95462799]
[109.27495575 128.92691040]
[110.18647003 143.89918518]
[111.09798431 158.87145996]
[112.00949860 173.84373474]
[112.92101288 188.81602478]
[113.83252716 203.78829956]
[114.74404144 218.76057434]
[115.65554810 233.73286438]
[116.56706238 248.70513916]
[131.45822144 250.92933655]
[145.56140137 256.20132446]
[158.26007080 264.29067993]
[168.99908447 274.84375000]
[177.30900574 287.39916992]
[182.82653809 301.40814209]
[185.31048584 316.25817871]
[184.65226746 331.30010986]
[180.88064575 345.87643433]
[174.16050720 359.34985352]
[164.78562927 371.13143921]
[153.16584778 380.70608521]
[139.80909729 387.65527344]
[125.29931641 391.67520142]
[110.27079773 392.59014893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[25 128]
[26 127]
[27 126]
[28 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
