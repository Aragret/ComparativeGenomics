%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUUAAAUGGGGGGGGGGCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGxxxxxxxxxxACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUCCCCCCCCCCACAGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.82962036]
[71.19830322 356.81359863]
[59.48964310 347.28417969]
[50.78712082 334.94848633]
[45.73651886 320.72198486]
[44.71262741 305.66030884]
[47.79142761 290.88113403]
[54.74444962 277.48120117]
[65.05573273 266.45486450]
[77.96011353 258.62036133]
[92.50000000 254.55905151]
[92.50000000 239.55905151]
[92.50000000 224.55905151]
[92.50000000 209.55905151]
[92.50000000 194.55905151]
[92.50000000 179.55905151]
[92.50000000 164.55905151]
[92.50000000 149.55905151]
[92.50000000 134.55905151]
[92.50000000 119.55905151]
[83.60816956 114.23001862]
[78.10137939 105.01670837]
[77.58277130 93.92803955]
[82.52042389 83.57740021]
[92.05593109 76.56673431]
[104.13515472 74.83518219]
[99.52958679 60.55972290]
[87.92884827 49.80177689]
[91.38466644 35.31362152]
[86.77909851 21.03816223]
[75.27729797 11.40963650]
[60.41424942 9.38730145]
[45.55120468 7.36496735]
[30.68815804 5.34263277]
[15.82511044 3.32029819]
[5.06482363 10.50848866]
[-7.30813599 8.47653294]
[-14.71327114 -1.13966644]
[-29.53102875 -3.47077036]
[-44.63206482 2.92381763]
[-57.55564880 -7.17137718]
[-55.00711060 -23.37128448]
[-39.60816193 -29.01082802]
[-27.19992447 -18.28852844]
[-12.38216686 -15.95742416]
[3.59344697 -23.15323639]
[17.84744453 -11.54274845]
[32.71049118 -9.52041435]
[47.57353973 -7.49807978]
[62.43658447 -5.47574520]
[77.29962921 -3.45341086]
[64.83905029 -11.80409431]
[64.43003082 -26.79851723]
[76.41683960 -35.81607819]
[90.71034241 -31.26681709]
[95.27988434 -16.97970581]
[97.45671844 -31.82091141]
[99.63355255 -46.66211700]
[101.81039429 -61.50332260]
[103.98722839 -76.34452820]
[106.16406250 -91.18572998]
[108.34090424 -106.02693939]
[110.51773834 -120.86814117]
[96.31144714 -125.82575226]
[83.30025482 -133.38255310]
[71.95449829 -143.26538086]
[62.68432999 -155.11698914]
[55.82485199 -168.50892639]
[51.62403107 -182.95709229]
[50.23373032 -197.93920898]
[51.70420074 -212.91365051]
[55.98229218 -227.33912659]
[62.91334915 -240.69416809]
[72.24682617 -252.49598694]
[83.64530945 -262.31793213]
[96.69676971 -269.80499268]
[110.92938995 -274.68649292]
[125.82867432 -276.78598022]
[140.85601807 -276.02752686]
[155.46821594 -272.43859863]
[169.13700867 -266.14889526]
[181.36830139 -257.38577271]
[191.71994019 -246.46607971]
[199.81771851 -233.78448486]
[205.36889648 -219.79946899]
[208.17282104 -205.01655579]
[208.12811279 -189.97013855]
[205.23640442 -175.20414734]
[199.60221863 -161.25236511]
[191.42922974 -148.61912537]
[181.01287842 -137.76112366]
[168.72972107 -129.07086182]
[155.02378845 -122.86248779]
[140.39053345 -119.36044312]
[125.35894775 -118.69130707]
[123.18210602 -103.85010529]
[121.00527191 -89.00889587]
[118.82843781 -74.16769409]
[116.65159607 -59.32648468]
[114.47476196 -44.48527908]
[112.29792023 -29.64407349]
[110.12108612 -14.80286884]
[112.56206512 -5.48798656]
[111.46543884 3.58971000]
[107.33292389 11.19842052]
[101.05456543 16.43259811]
[105.66012573 30.70805931]
[116.93144989 40.44492722]
[113.80505371 55.95415878]
[118.41061401 70.22962189]
[129.18142700 80.66943359]
[143.59364319 84.82731628]
[158.00585938 88.98520660]
[172.41807556 93.14308929]
[186.83029175 97.30097961]
[198.37364197 87.06602478]
[213.62147522 84.71922302]
[227.70822144 91.00942993]
[236.13888550 103.92947388]
[236.22326660 119.35660553]
[227.93441772 132.36808777]
[213.91731262 138.81199646]
[198.64472961 136.63212585]
[186.99011230 126.52403259]
[182.67239380 111.71319580]
[168.26017761 107.55530548]
[153.84796143 103.39742279]
[139.43574524 99.23953247]
[125.02353668 95.08164978]
[120.32279205 111.24211884]
[107.50000000 119.55905151]
[107.50000000 134.55905151]
[107.50000000 149.55905151]
[107.50000000 164.55905151]
[107.50000000 179.55905151]
[107.50000000 194.55905151]
[107.50000000 209.55905151]
[107.50000000 224.55905151]
[107.50000000 239.55905151]
[107.50000000 254.55905151]
[122.03988647 258.62036133]
[134.94427490 266.45486450]
[145.25555420 277.48120117]
[152.20857239 290.88113403]
[155.28736877 305.66030884]
[154.26348877 320.72198486]
[149.21287537 334.94848633]
[140.51036072 347.28417969]
[128.80169678 356.81359863]
[114.95575714 362.82962036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 110]
[27 109]
[29 107]
[30 106]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[38 45]
[39 44]
[56 102]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[62 96]
[63 95]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
