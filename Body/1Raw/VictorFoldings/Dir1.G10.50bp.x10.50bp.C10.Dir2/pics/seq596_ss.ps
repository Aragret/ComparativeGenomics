%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUACUACUAAUCGGGGGGGGGGUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUxxxxxxxxxxUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCCCCCCCCCCCAAUACUACCAAUC\
) } def
/len { sequence length } bind def

/coor [
[0.57518792 309.72921753]
[-9.19831657 304.81054688]
[-18.72915840 299.43676758]
[-27.99615860 293.61978149]
[-36.97872543 287.37252808]
[-45.65689087 280.70889282]
[-54.01137924 273.64370728]
[-62.02361679 266.19262695]
[-69.67580414 258.37222290]
[-76.95093536 250.19987488]
[-83.83283997 241.69377136]
[-90.30622864 232.87277222]
[-96.35671997 223.75651550]
[-101.97085571 214.36524963]
[-107.13617706 204.71983337]
[-111.84118652 194.84170532]
[-116.07544708 184.75280762]
[-130.20936584 189.77600098]
[-144.34327698 194.79919434]
[-154.75556946 206.71115112]
[-169.33905029 203.68269348]
[-183.47296143 208.70588684]
[-197.60687256 213.72908020]
[-211.74078369 218.75228882]
[-225.87471008 223.77548218]
[-240.00862122 228.79867554]
[-242.71141052 243.91787720]
[-252.62397766 255.64974976]
[-267.07986450 260.83847046]
[-282.19052124 258.08828735]
[-293.89126587 248.13900757]
[-299.03463745 233.66693115]
[-296.23712158 218.56495667]
[-286.25122070 206.89546204]
[-271.76306152 201.79747009]
[-256.66995239 204.64231873]
[-245.03181458 214.66474915]
[-230.89790344 209.64155579]
[-216.76397705 204.61836243]
[-202.63006592 199.59516907]
[-188.49615479 194.57197571]
[-174.36224365 189.54878235]
[-164.96089172 177.99612427]
[-149.36647034 180.66528320]
[-135.23255920 175.64208984]
[-121.09864044 170.61889648]
[-128.54090881 140.50541687]
[-131.90118408 109.66847992]
[-131.11943054 78.65884399]
[-126.20962524 48.03038025]
[-117.25946045 18.33015823]
[-104.42879486 -9.91134739]
[-87.94680023 -36.18971252]
[-68.10785675 -60.03557587]
[-45.26631927 -81.02301788]
[-54.27145386 -93.01916504]
[-63.27658844 -105.01531219]
[-72.28172302 -117.01146698]
[-87.37992096 -114.50090790]
[-101.91179657 -119.30541229]
[-112.53801727 -130.32095337]
[-116.81676483 -145.01622009]
[-113.76480865 -160.01435852]
[-104.08347321 -171.86889648]
[-89.99745178 -177.85577393]
[-74.74360657 -176.59921265]
[-61.82716751 -168.38800049]
[-54.21623611 -155.10897827]
[-53.65974426 -139.81358337]
[-60.28557205 -126.01659393]
[-51.28043747 -114.02044678]
[-42.27530670 -102.02429962]
[-33.27017212 -90.02815247]
[-24.16657639 -96.09767914]
[-14.78705502 -101.73143005]
[-5.15245104 -106.91689301]
[4.71582413 -111.64253235]
[14.79584122 -115.89786530]
[25.06520081 -119.67342377]
[35.50108337 -122.96081543]
[46.08029556 -125.75274658]
[56.77932739 -128.04299927]
[67.57440948 -129.82649231]
[78.44154358 -131.09925842]
[89.35659027 -131.85847473]
[100.29528809 -132.10246277]
[111.23332214 -131.83064270]
[122.14640045 -131.04365540]
[133.01026917 -129.74324036]
[143.80076599 -127.93228912]
[154.49394226 -125.61482239]
[165.06600952 -122.79598236]
[175.49349976 -119.48204803]
[185.75321960 -115.68037415]
[195.82237244 -111.39940643]
[205.67858887 -106.64866638]
[215.29997253 -101.43870544]
[224.66513062 -95.78110504]
[233.75325012 -89.68843842]
[242.54414368 -83.17424011]
[251.01828003 -76.25299072]
[259.15679932 -68.94007111]
[266.94165039 -61.25172043]
[274.35552979 -53.20503998]
[281.38195801 -44.81790161]
[288.00531006 -36.10894775]
[294.21084595 -27.09752846]
[299.98483276 -17.80367088]
[305.31439209 -8.24802876]
[310.18771362 1.54816484]
[314.59393311 11.56313992]
[318.52328491 21.77464104]
[321.96704102 32.15997696]
[324.91754150 42.69606781]
[327.36819458 53.35950089]
[329.31362915 64.12657928]
[330.74945068 74.97337341]
[331.67248535 85.87578583]
[332.08071899 96.80958557]
[331.97320557 107.75047302]
[331.35018921 118.67413330]
[330.21307373 129.55630493]
[328.56439209 140.37278748]
[326.40774536 151.09956360]
[323.74801636 161.71276855]
[320.59103394 172.18884277]
[316.94387817 182.50450134]
[312.81460571 192.63681030]
[308.21243286 202.56326294]
[303.14755249 212.26181030]
[297.63122559 221.71087646]
[291.67572021 230.88946533]
[285.29428101 239.77720642]
[278.50106812 248.35430908]
[271.31118774 256.60174561]
[263.74063110 264.50119019]
[255.80619812 272.03506470]
[247.52552795 279.18664551]
[238.91702271 285.94003296]
[229.99981689 292.28021240]
[220.79371643 298.19311523]
[211.31919861 303.66558838]
[201.59729004 308.68548584]
[191.64961243 313.24160767]
[181.49827576 317.32388306]
[171.16583252 320.92321777]
[160.67523193 324.03158569]
[150.04980469 326.64212036]
[139.31315613 328.74902344]
[128.48915100 330.34756470]
[117.60182953 331.43426514]
[106.67539978 332.00662231]
[95.73413086 332.06344604]
[84.80233765 331.60455322]
[73.90431976 330.63098145]
[63.06429672 329.14492798]
[52.30635071 327.14962769]
[41.65438843 324.64956665]
[31.13208389 321.65026855]
[20.76281929 318.15844727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 46]
[18 45]
[19 44]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[55 73]
[56 72]
[57 71]
[58 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
