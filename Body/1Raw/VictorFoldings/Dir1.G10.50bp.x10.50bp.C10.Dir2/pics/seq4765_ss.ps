%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAACCAAAGGGGGGGGGGAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAxxxxxxxxxxAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUCCCCCCCCCCUUUUAACCAAA\
) } def
/len { sequence length } bind def

/coor [
[120.96881866 484.72631836]
[106.94687653 479.17330933]
[94.74691772 470.30697632]
[85.13584900 458.68466187]
[78.71781921 445.03695679]
[75.89628601 430.22177124]
[76.84860229 415.17037964]
[81.51490784 400.82897949]
[89.60186768 388.09899902]
[100.60114288 377.78073120]
[113.82130432 370.52276611]
[128.43132019 366.78134155]
[128.43132019 351.78134155]
[128.43132019 336.78134155]
[128.43132019 321.78134155]
[128.43132019 306.78134155]
[128.43132019 291.78134155]
[128.43132019 276.78134155]
[128.43132019 261.78134155]
[128.43132019 246.78132629]
[128.43132019 231.78132629]
[128.43132019 216.78132629]
[128.43132019 201.78132629]
[125.67507172 187.03672791]
[120.25644684 173.04965210]
[114.83782196 159.06256104]
[109.41919708 145.07548523]
[104.00057220 131.08839417]
[96.37345886 131.80807495]
[88.63870239 130.64530945]
[81.26314545 127.59254456]
[74.71019745 122.75841522]
[69.41091919 116.36535645]
[65.73602295 108.74010468]
[63.97069550 100.29731750]
[64.29390717 91.51708984]
[49.35789490 90.13306427]
[34.42188263 88.74903870]
[19.75808907 96.09105682]
[6.21864414 86.83819580]
[7.73176622 70.50900269]
[22.74088478 63.90155792]
[35.80590820 73.81302643]
[50.74192047 75.19705200]
[65.67793274 76.58107758]
[76.22994995 65.92017365]
[74.69265747 50.99915314]
[73.15536499 36.07813644]
[71.61807251 21.15712166]
[56.60190582 20.84989166]
[41.73731613 18.69963264]
[27.24964523 14.73894215]
[13.35852623 9.02786446]
[0.27454165 1.65297735]
[-11.80395794 -7.27391815]
[-22.69386482 -17.61749268]
[-32.23009491 -29.22093964]
[-40.26807404 -41.90835571]
[-46.68595505 -55.48739624]
[-51.38644028 -69.75222015]
[-54.29827118 -84.48655701]
[-55.37731171 -99.46705627]
[-54.60719681 -114.46660614]
[-51.99960327 -129.25782776]
[-47.59406281 -143.61647034]
[-41.45736313 -157.32489014]
[-33.68253326 -170.17523193]
[-24.38743401 -181.97273254]
[-13.71298409 -192.53851318]
[-1.82100058 -201.71240234]
[11.10823536 -209.35534668]
[24.87872124 -215.35145569]
[39.28169632 -219.60984802]
[54.09881973 -222.06594849]
[69.10546875 -222.68254089]
[84.07414246 -221.45027161]
[98.77791595 -218.38783264]
[112.99388885 -213.54162598]
[126.50655365 -206.98513794]
[139.11105347 -198.81776428]
[150.61631775 -189.16329956]
[160.84793091 -178.16813660]
[169.65075684 -165.99891663]
[176.89138794 -152.84016418]
[182.46002197 -138.89132690]
[186.27226257 -124.36389160]
[188.27030945 -109.47808075]
[188.42387390 -94.45955658]
[186.73063660 -79.53599548]
[183.21624756 -64.93364716]
[177.93399048 -50.87386703]
[170.96395874 -37.56980133]
[162.41178894 -25.22313499]
[152.40715027 -14.02104282]
[141.10171509 -4.13334560]
[128.66685486 4.29006338]
[115.29107666 11.12148571]
[101.17716980 16.25736046]
[86.53908539 19.61982918]
[88.07637787 34.54084396]
[89.61367035 49.46186066]
[91.15096283 64.38288116]
[110.91165924 66.08313751]
[126.32509613 77.61172485]
[133.11090088 94.99649811]
[129.79597473 112.76646423]
[117.98765564 125.66976929]
[123.40628052 139.65686035]
[128.82490540 153.64393616]
[134.24353027 167.63102722]
[139.66215515 181.61810303]
[142.36285400 166.86323547]
[149.41502380 153.62438965]
[160.15312195 143.15093994]
[173.56379700 136.43127441]
[188.38145447 134.09954834]
[203.20773315 136.37579346]
[216.64346313 143.04521179]
[227.42070007 153.47839355]
[234.52236938 166.69075012]
[237.27827454 181.43540955]
[235.42835999 196.32089233]
[229.14717102 209.94244385]
[219.02751160 221.01458740]
[206.02435303 228.49241638]
[191.36483765 231.67024231]
[176.43238831 230.24816895]
[162.63623047 224.36039734]
[151.27830505 214.56256104]
[143.43132019 201.78132629]
[143.43132019 216.78132629]
[143.43132019 231.78132629]
[143.43132019 246.78132629]
[143.43132019 261.78134155]
[143.43132019 276.78134155]
[143.43132019 291.78134155]
[143.43132019 306.78134155]
[143.43132019 321.78134155]
[143.43132019 336.78134155]
[143.43132019 351.78134155]
[143.43132019 366.78134155]
[158.04133606 370.52276611]
[171.26148987 377.78073120]
[182.26075745 388.09899902]
[190.34773254 400.82897949]
[195.01403809 415.17037964]
[195.96635437 430.22177124]
[193.14482117 445.03695679]
[186.72679138 458.68466187]
[177.11572266 470.30697632]
[164.91575623 479.17330933]
[150.89381409 484.72631836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 111]
[25 110]
[26 109]
[27 108]
[28 107]
[36 45]
[37 44]
[38 43]
[46 102]
[47 101]
[48 100]
[49 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
