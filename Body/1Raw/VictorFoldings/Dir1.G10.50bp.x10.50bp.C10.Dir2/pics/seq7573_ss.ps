%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAACAAGGGGGGGGGGAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAxxxxxxxxxxCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCCCCCCCCCCCACAACAA\
) } def
/len { sequence length } bind def

/coor [
[88.22578430 597.34692383]
[75.00558472 590.07446289]
[64.11878204 579.62744141]
[56.30765152 566.71820068]
[52.10477066 552.22686768]
[51.79669571 537.14154053]
[55.40443802 522.49072266]
[62.68201065 509.27334595]
[73.13321686 498.39056396]
[86.04547882 490.58441162]
[100.53841400 486.38714600]
[100.22636414 471.39038086]
[99.91430664 456.39361572]
[99.60224915 441.39688110]
[99.29019165 426.40011597]
[98.97813416 411.40335083]
[98.66607666 396.40661621]
[98.35402679 381.40985107]
[98.04196930 366.41311646]
[97.72991180 351.41635132]
[97.41785431 336.41958618]
[97.10579681 321.42285156]
[84.79129028 313.08673096]
[79.68637085 298.93032837]
[83.94591522 284.31149292]
[96.13764191 274.89514160]
[95.82558441 259.89837646]
[95.51352692 244.90162659]
[87.51312256 232.33807373]
[94.96165466 218.37991333]
[94.64959717 203.38316345]
[94.33753967 188.38641357]
[86.33714294 175.82286072]
[93.78567505 161.86470032]
[93.47361755 146.86795044]
[93.16156006 131.87120056]
[78.48560333 126.11019897]
[67.75222015 113.77750397]
[63.79638290 97.31349182]
[68.03479004 80.31807709]
[80.02967834 66.76409912]
[68.93836212 56.66544724]
[57.84704590 46.56679916]
[46.75572968 36.46815109]
[35.66441727 26.36950111]
[24.57310104 16.27085114]
[13.48178482 6.17220116]
[0.07002708 13.23623371]
[-14.94936371 15.28408623]
[-29.76272392 12.06847095]
[-42.58126831 3.97768807]
[-51.85709000 -8.01126003]
[-56.47009659 -22.45064926]
[-55.86323929 -37.59685516]
[-50.10980225 -51.62089920]
[-39.90454102 -62.82930756]
[-26.47978783 -69.86861420]
[-11.45664883 -71.88877869]
[3.35075998 -68.64587402]
[16.15437126 -60.53147888]
[25.40808678 -48.52545929]
[29.99447441 -34.07759094]
[29.35970688 -18.93252945]
[23.58043480 -4.91911411]
[34.67174911 5.17953539]
[45.76306534 15.27818489]
[56.85438156 25.37683487]
[67.94569397 35.47548294]
[79.03701019 45.57413483]
[90.12832642 55.67278290]
[85.23633575 41.49292374]
[80.34433746 27.31306648]
[70.21390533 16.25076866]
[65.05805206 2.16470861]
[65.65333557 -12.82347488]
[71.91010284 -26.45626068]
[82.88595581 -36.68027878]
[96.92771912 -41.95558929]
[111.92041779 -41.48762512]
[125.60585785 -35.34687042]
[135.92272949 -24.45824242]
[141.31710815 -10.46179199]
[140.97650146 4.53434086]
[134.95219421 18.27143669]
[124.15125275 28.68062973]
[118.38430786 42.52773666]
[112.61737061 56.37484741]
[124.31699371 46.98768616]
[136.01661682 37.60052109]
[147.71624756 28.21336174]
[143.80026245 13.49653435]
[146.21511841 -1.53970051]
[154.54241943 -14.29022408]
[167.33943176 -22.54593277]
[182.38896179 -24.87647247]
[197.08360291 -20.87806511]
[208.87742615 -11.24345875]
[215.72708130 2.35809302]
[216.44580078 17.57003975]
[210.90908813 31.75681877]
[200.07620239 42.46048737]
[185.82400513 47.82656479]
[170.62178040 46.92535019]
[157.10340881 39.91298294]
[145.40377808 49.30014801]
[133.70416260 58.68730927]
[122.00453186 68.07447052]
[130.37295532 77.34468842]
[135.19477844 88.55419922]
[136.12403870 100.43443298]
[133.24446106 111.70279694]
[127.04131317 121.20114136]
[118.33112335 128.01464844]
[108.15831757 131.55914307]
[108.47036743 146.55589294]
[108.78242493 161.55264282]
[116.80514526 175.18887329]
[109.33429718 188.07435608]
[109.64635468 203.07110596]
[109.95841217 218.06785583]
[117.98113251 231.70408630]
[110.51027679 244.58956909]
[110.82233429 259.58630371]
[111.13439178 274.58306885]
[123.70726776 283.48413086]
[128.57124329 297.91311646]
[124.05963135 312.26962280]
[112.10255432 321.11077881]
[112.41461182 336.10754395]
[112.72666168 351.10430908]
[113.03871918 366.10104370]
[113.35077667 381.09780884]
[113.66283417 396.09454346]
[113.97489166 411.09130859]
[114.28694916 426.08807373]
[114.59899902 441.08480835]
[114.91105652 456.08157349]
[115.22311401 471.07830811]
[115.53517151 486.07507324]
[130.19017029 489.66583252]
[143.41596985 496.92810059]
[154.31083679 507.36669922]
[162.13194275 520.26989746]
[166.34600830 534.75799561]
[166.66572571 549.84307861]
[163.06930542 564.49670410]
[155.80194092 577.71966553]
[145.35913086 588.61053467]
[132.45291138 596.42663574]
[117.96321869 600.63513184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[26 124]
[27 123]
[28 122]
[30 120]
[31 119]
[32 118]
[34 116]
[35 115]
[36 114]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[87 107]
[88 106]
[89 105]
[90 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
