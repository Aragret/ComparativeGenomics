%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCUAUUGGGGGGGGGGGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACxxxxxxxxxxACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAUU\
) } def
/len { sequence length } bind def

/coor [
[83.53659821 378.33499146]
[70.04772186 371.60345459]
[58.56221771 361.83889771]
[49.74784851 349.60900879]
[44.11706924 335.62481689]
[41.99723816 320.69934082]
[43.51160812 305.70031738]
[48.57213211 291.49981689]
[56.88459778 278.92340088]
[67.96572876 268.70223999]
[81.17127991 261.43060303]
[95.73350525 257.53125000]
[95.42552948 242.53439331]
[95.11755371 227.53756714]
[94.80957794 212.54072571]
[94.50159454 197.54388428]
[94.19361877 182.54704285]
[93.88564301 167.55021667]
[93.57766724 152.55337524]
[93.26968384 137.55653381]
[92.96170807 122.55969238]
[80.89927673 113.64354706]
[66.47189331 117.74848938]
[52.04450607 121.85343170]
[50.32746887 136.95707703]
[42.95684433 150.25152588]
[31.05659866 159.70947266]
[16.44143486 163.88862610]
[1.34005690 162.15173340]
[-11.94468307 154.76362610]
[-21.38695908 142.85093689]
[-25.54689217 128.23030090]
[-23.79012299 113.13121796]
[-16.38454819 99.85620117]
[-4.45946026 90.42961121]
[10.16664886 86.28890991]
[25.26340485 88.06553650]
[38.52865982 95.48857117]
[47.93956375 107.42604828]
[62.36694717 103.32110596]
[76.79433441 99.21616364]
[84.42729950 86.30345917]
[81.06804657 71.68445587]
[77.70878601 57.06544876]
[74.34952545 42.44644165]
[70.99026489 27.82743263]
[67.63101196 13.20842457]
[64.27175140 -1.41058266]
[49.31290054 -0.02627159]
[34.30301666 -0.64819610]
[19.50996399 -3.26525712]
[5.19774055 -7.83075047]
[-8.37823200 -14.26319885]
[-20.97567749 -22.44780922]
[-32.36977768 -32.23851395]
[-42.35718918 -43.46059036]
[-50.75968170 -55.91376877]
[-57.42729568 -69.37580109]
[-62.24104691 -83.60644531]
[-65.11502075 -98.35173798]
[-65.99793243 -113.34854126]
[-64.87402344 -128.32920837]
[-61.76335144 -143.02638245]
[-56.72143173 -157.17779541]
[-49.83824539 -170.53089905]
[-41.23662567 -182.84736633]
[-31.07007790 -193.90742493]
[-19.52004242 -203.51367188]
[-6.79263783 -211.49468994]
[6.88499832 -217.70803833]
[21.26877213 -222.04284668]
[36.10198975 -224.42172241]
[51.11993408 -224.80224609]
[66.05458832 -223.17761230]
[80.63943481 -219.57682800]
[94.61418915 -214.06413269]
[107.72944641 -206.73791504]
[119.75115204 -197.72891235]
[130.46476746 -187.19792175]
[139.67909241 -175.33285522]
[147.22970581 -162.34548950]
[152.98182678 -148.46757507]
[156.83280945 -133.94679260]
[158.71394348 -119.04226685]
[158.59165955 -104.01999664]
[156.46812439 -89.14807892]
[152.38124084 -74.69190979]
[146.40394592 -60.90947723]
[138.64289856 -48.04675293]
[129.23661804 -36.33328247]
[118.35298157 -25.97810364]
[106.18619537 -17.16601944]
[92.95339966 -10.05429363]
[78.89075470 -4.76984167]
[82.25001526 9.84916592]
[85.60927582 24.46817398]
[88.96853638 39.08718109]
[92.32778931 53.70618820]
[95.68704987 68.32519531]
[99.04631042 82.94420624]
[103.34971619 82.01133728]
[108.02913666 82.21508026]
[112.77500916 83.67573547]
[117.24378204 86.42791748]
[121.08171082 90.41184998]
[135.98616028 88.72145081]
[150.89060974 87.03105927]
[165.79504395 85.34066010]
[174.28129578 72.20606232]
[189.24005127 67.64866638]
[203.60823059 73.82032013]
[210.60162354 87.80697632]
[206.91818237 103.00454712]
[194.29708862 112.23721313]
[178.69764709 111.14558411]
[167.48544312 100.24510193]
[152.58099365 101.93550110]
[137.67655945 103.62590027]
[122.77210236 105.31629944]
[136.66241455 110.97840881]
[151.65982056 110.69985199]
[164.86424255 117.81626892]
[172.87768555 130.49635315]
[173.63803101 145.47706604]
[166.94960022 158.90335083]
[154.53356934 167.32011414]
[139.58502197 168.56146240]
[125.95075226 162.30792236]
[117.13934326 150.16876221]
[115.41868591 135.26502991]
[107.95854950 122.25171661]
[108.26652527 137.24855042]
[108.57450104 152.24539185]
[108.88247681 167.24223328]
[109.19046021 182.23907471]
[109.49843597 197.23590088]
[109.80641174 212.23274231]
[110.11438751 227.22958374]
[110.42237091 242.22642517]
[110.73034668 257.22326660]
[125.44038391 260.52148438]
[138.93333435 267.24484253]
[150.42475891 277.00244141]
[159.24653625 289.22698975]
[164.88580322 303.20776367]
[167.01467896 318.13195801]
[165.50939941 333.13186646]
[160.45748901 347.33544922]
[152.15264893 359.91690063]
[141.07771301 370.14477539]
[127.87657166 377.42443848]
[113.31671143 381.33261108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 41]
[23 40]
[24 39]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
