%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAAACCCGGGGGGGGGGCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUCCCCCCCCCCAGUAAAACCC\
) } def
/len { sequence length } bind def

/coor [
[74.20664215 504.69921875]
[60.36070251 498.68319702]
[48.65203857 489.15377808]
[39.94951630 476.81808472]
[34.89891434 462.59158325]
[33.87502289 447.52990723]
[36.95381927 432.75073242]
[43.90684128 419.35079956]
[54.21812820 408.32446289]
[67.12250519 400.48995972]
[81.66239166 396.42864990]
[81.66239166 381.42864990]
[81.66239166 366.42864990]
[81.66239166 351.42864990]
[81.66239166 336.42864990]
[81.66239166 321.42864990]
[81.66239166 306.42864990]
[81.66239166 291.42864990]
[81.66239166 276.42864990]
[81.66239166 261.42864990]
[72.30647278 273.15325928]
[58.39252853 278.75701904]
[43.52214050 276.78939819]
[31.54446220 267.75973511]
[25.55988312 254.00527954]
[27.11749077 239.08636475]
[35.81410217 226.86471558]
[49.39863205 220.50384521]
[64.35475922 221.65025330]
[76.81113434 230.00720215]
[83.54344940 243.41142273]
[86.64176941 228.73489380]
[89.74009705 214.05836487]
[92.83841705 199.38183594]
[95.78389740 184.67387390]
[90.55108643 170.72874451]
[100.72211456 158.61012268]
[103.51443481 143.87231445]
[106.30676270 129.13450623]
[94.57807922 128.63409424]
[84.21709442 123.70252228]
[76.78412628 115.31086731]
[73.30815125 104.93178558]
[74.14721680 94.28363800]
[78.96212006 85.04656982]
[86.80272675 78.59738159]
[83.09656525 64.06244659]
[79.39040375 49.52751160]
[75.68424225 34.99257278]
[71.97808075 20.45763779]
[61.27569962 13.18351078]
[58.51339340 0.95286798]
[64.64568329 -9.52101994]
[61.24270630 -24.12991333]
[56.21753693 -31.83702087]
[57.92424774 -39.07807159]
[54.82592773 -53.75459671]
[51.72760391 -68.43112183]
[48.62928391 -83.10764313]
[33.56201553 -83.90754700]
[19.21548271 -88.58081818]
[6.56785583 -96.80881500]
[-3.51852822 -108.03054810]
[-10.35596371 -121.48089600]
[-13.47826290 -136.24279785]
[-12.67254162 -151.30975342]
[-7.99373627 -165.65447998]
[0.23914525 -178.29893494]
[11.46477127 -188.38098145]
[24.91775894 -195.21322632]
[39.68086243 -198.32981873]
[54.74750900 -197.51828003]
[69.09043121 -192.83393860]
[81.73169708 -184.59617615]
[91.80941010 -173.36665344]
[98.63645935 -159.91102600]
[101.74736023 -145.14672852]
[100.93000031 -130.08039856]
[96.24011993 -115.73928833]
[87.99747467 -103.10119629]
[76.76406860 -93.02781677]
[63.30580902 -86.20597076]
[66.40412903 -71.52944183]
[69.50244904 -56.85291672]
[72.60077667 -42.17639160]
[75.85160065 -27.53289032]
[79.25457764 -12.92399788]
[91.92218781 -0.81897366]
[86.51301575 16.75147820]
[90.21917725 31.28641319]
[93.92533875 45.82135010]
[97.63150024 60.35628510]
[101.33766174 74.89122009]
[110.18995667 75.99595642]
[118.40511322 80.23105621]
[124.87686920 87.27318573]
[128.65229797 96.40995789]
[129.06733704 106.60948944]
[143.83338928 103.97062683]
[158.59944153 101.33176422]
[166.63293457 91.18696594]
[179.03213501 89.32180786]
[189.03211975 96.19986725]
[203.84986877 93.86876678]
[218.66763306 91.53765869]
[225.60643005 77.65843964]
[239.39350891 70.53833008]
[254.72746277 72.91516113]
[265.71209717 83.87499237]
[268.12353516 99.20354462]
[261.03460693 113.00667572]
[247.17108154 119.97679901]
[231.86381531 117.43376160]
[220.99873352 106.35541534]
[206.18098450 108.68652344]
[191.36322021 111.01762390]
[178.36865234 122.77097321]
[161.23831177 116.09781647]
[146.47224426 118.73667908]
[131.70619202 121.37554932]
[121.04457092 131.92683411]
[118.25224304 146.66464233]
[115.45992279 161.40245056]
[120.49300385 176.40173340]
[110.52170563 187.46620178]
[112.00285339 196.54684448]
[107.51493835 202.48016357]
[104.41661835 217.15669250]
[101.31829834 231.83322144]
[98.21997833 246.50973511]
[96.66239166 261.42864990]
[96.66239166 276.42864990]
[96.66239166 291.42864990]
[96.66239166 306.42864990]
[96.66239166 321.42864990]
[96.66239166 336.42864990]
[96.66239166 351.42864990]
[96.66239166 366.42864990]
[96.66239166 381.42864990]
[96.66239166 396.42864990]
[111.20228577 400.48995972]
[124.10666656 408.32446289]
[134.41795349 419.35079956]
[141.37097168 432.75073242]
[144.44976807 447.52990723]
[143.42587280 462.59158325]
[138.37527466 476.81808472]
[129.67274475 489.15377808]
[117.96408844 498.68319702]
[104.11814880 504.69921875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 125]
[37 123]
[38 122]
[39 121]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[53 87]
[54 86]
[56 85]
[57 84]
[58 83]
[59 82]
[98 120]
[99 119]
[100 118]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
