%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGUUAAAGGGGGGGGGGUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUxxxxxxxxxxGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACCCCCCCCCCCAAACUUAAA\
) } def
/len { sequence length } bind def

/coor [
[95.12184143 377.97451782]
[81.27590179 371.95849609]
[69.56723785 362.42907715]
[60.86471176 350.09341431]
[55.81410980 335.86688232]
[54.79021835 320.80520630]
[57.86901855 306.02606201]
[64.82203674 292.62612915]
[75.13332367 281.59979248]
[88.03770447 273.76528931]
[102.57759094 269.70397949]
[102.57759094 254.70396423]
[102.57759094 239.70396423]
[102.57759094 224.70396423]
[102.57759094 209.70396423]
[102.57759094 194.70396423]
[102.57759094 179.70396423]
[102.57759094 164.70396423]
[102.57759094 149.70396423]
[102.57759094 134.70396423]
[102.57759094 119.70396423]
[90.49760437 110.81161499]
[76.17501068 115.26843262]
[61.85240936 119.72525024]
[47.52981186 124.18206024]
[33.20721436 128.63888550]
[18.88461685 133.09568787]
[11.75720215 147.20156860]
[-3.28287196 152.05662537]
[-17.31259537 144.78048706]
[-22.00838280 129.68991089]
[-14.58430576 115.73790741]
[0.55506212 111.20192719]
[14.42780209 118.77309418]
[28.75039864 114.31628418]
[43.07299805 109.85946655]
[57.39559555 105.40264893]
[71.71819305 100.94583130]
[86.04078674 96.48902130]
[71.10036469 95.15345764]
[59.49187469 85.65383148]
[55.22689438 71.27294159]
[59.77928162 56.98043442]
[71.57585907 47.71540451]
[86.54004669 46.67958832]
[99.50064850 54.23093796]
[105.97882080 67.75991821]
[103.73574829 82.59159851]
[111.45983124 69.73319244]
[119.18392181 56.87479019]
[111.28755188 47.26223373]
[107.30803680 35.14151001]
[108.00250244 22.08535385]
[113.50521851 9.87614822]
[123.27899170 0.26263970]
[113.77063751 -11.33870125]
[104.26227570 -22.94004250]
[89.54562378 -31.35766983]
[93.56031036 -47.82942200]
[110.49971771 -48.53146362]
[115.86361694 -32.44840240]
[125.37197876 -20.84705925]
[134.88034058 -9.24571896]
[149.88034058 -9.24571896]
[159.38868713 -20.84705925]
[168.89704895 -32.44840240]
[178.16200256 -44.24504089]
[187.17953491 -56.23187256]
[196.19706726 -68.21870422]
[205.21458435 -80.20553589]
[191.26348877 -74.69494629]
[176.31455994 -73.45817566]
[161.64752197 -76.60109711]
[148.51794434 -83.85466766]
[138.04980469 -94.59794617]
[131.13920593 -107.91123199]
[128.37776184 -122.65486145]
[130.00184631 -137.56668091]
[135.87243652 -151.37016296]
[145.48696899 -162.88365173]
[158.02239990 -171.12155151]
[172.40563965 -175.37863159]
[187.40538025 -175.29048157]
[201.73756409 -170.86462402]
[214.17530823 -162.47994995]
[223.65385437 -150.85423279]
[229.36178589 -136.98269653]
[230.81047058 -122.05282593]
[227.87591553 -107.34268188]
[220.80728149 -94.10879517]
[233.74533081 -101.69869995]
[246.68339539 -109.28860474]
[259.62145996 -116.87851715]
[272.55950928 -124.46842194]
[271.26202393 -139.67630005]
[276.69949341 -153.93800354]
[287.79232788 -164.42190552]
[302.33801270 -169.04637146]
[317.44851685 -166.89324951]
[330.12359619 -158.39002991]
[337.84664917 -145.22502136]
[339.08422852 -130.01216125]
[333.59060669 -115.77196503]
[322.45660400 -105.33184052]
[307.89282227 -100.76467896]
[292.79092407 -102.97729492]
[280.14941406 -111.53037262]
[267.21136475 -103.94046021]
[254.27330017 -96.35055542]
[241.33525085 -88.76064301]
[228.39718628 -81.17073822]
[217.20141602 -71.18801117]
[208.18389893 -59.20117569]
[199.16636658 -47.21434402]
[190.14883423 -35.22751236]
[189.93203735 -30.39755058]
[186.63539124 -25.66855431]
[180.49839783 -22.94004250]
[170.99003601 -11.33870125]
[161.48167419 0.26263970]
[172.55035400 11.17943859]
[178.13211060 25.41377831]
[177.45709229 40.43139267]
[170.85018921 53.64795303]
[159.63906860 62.87378311]
[145.89292908 66.67609406]
[132.04232788 64.59887695]
[124.31823730 77.45727539]
[116.59415436 90.31568146]
[117.57759094 119.70396423]
[117.57759094 134.70396423]
[117.57759094 149.70396423]
[117.57759094 164.70396423]
[117.57759094 179.70396423]
[117.57759094 194.70396423]
[117.57759094 209.70396423]
[117.57759094 224.70396423]
[117.57759094 239.70396423]
[117.57759094 254.70396423]
[117.57759094 269.70397949]
[132.11747742 273.76528931]
[145.02186584 281.59979248]
[155.33314514 292.62612915]
[162.28616333 306.02606201]
[165.36495972 320.80520630]
[164.34107971 335.86688232]
[159.29046631 350.09341431]
[150.58795166 362.42907715]
[138.87928772 371.95849609]
[125.03334808 377.97451782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[48 129]
[49 128]
[50 127]
[55 63]
[56 62]
[57 61]
[64 120]
[65 119]
[66 118]
[67 115]
[68 114]
[69 113]
[70 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
