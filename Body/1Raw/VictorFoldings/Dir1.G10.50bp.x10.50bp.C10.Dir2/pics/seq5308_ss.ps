%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAACAUGGGGGGGGGGAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCxxxxxxxxxxAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUCCCCCCCCCCACCCUAGCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 416.01330566]
[71.19830322 409.99728394]
[59.48964310 400.46786499]
[50.78712082 388.13220215]
[45.73651886 373.90567017]
[44.71262741 358.84399414]
[47.79142761 344.06484985]
[54.74444962 330.66491699]
[65.05573273 319.63858032]
[77.96011353 311.80407715]
[92.50000000 307.74276733]
[92.50000000 292.74276733]
[92.50000000 277.74276733]
[92.50000000 262.74276733]
[92.50000000 247.74275208]
[92.50000000 232.74275208]
[92.50000000 217.74275208]
[92.50000000 202.74275208]
[92.50000000 187.74275208]
[92.50000000 172.74275208]
[92.50000000 157.74275208]
[83.73590851 155.91023254]
[75.35637665 152.75573730]
[67.55953979 148.35382080]
[60.52975464 142.80859375]
[54.43323898 136.25114441]
[49.41414642 128.83656311]
[45.59115219 120.74012756]
[43.05464935 112.15329742]
[41.86461639 103.27910614]
[26.90436554 102.18779755]
[11.94411755 101.09648132]
[-3.01613164 100.00517273]
[-17.34265137 106.71794891]
[-29.47327614 98.07519531]
[-44.43352509 96.98388672]
[-59.39377213 95.89257812]
[-73.91099548 103.52030182]
[-87.62902069 94.53431702]
[-86.43591309 78.17863464]
[-71.55904388 71.27857208]
[-58.30246353 80.93232727]
[-43.34221268 82.02363586]
[-28.38196564 83.11494446]
[-15.12550163 76.32411194]
[-1.92482102 85.04492188]
[13.03542805 86.13623810]
[27.99567604 87.22754669]
[42.95592499 88.31885529]
[45.40198517 79.76309204]
[49.12318039 71.67995453]
[54.03260040 64.25823975]
[60.01558304 57.67126083]
[66.93240356 52.07287216]
[74.62151337 47.59381866]
[82.90333557 44.33870697]
[91.58444977 42.38356018]
[100.46211243 41.77404404]
[109.32897949 42.52439117]
[117.97796631 44.61707687]
[126.20708466 48.00322723]
[133.82412720 52.60375977]
[144.03761292 41.61809158]
[154.25108337 30.63242912]
[145.97500610 19.42950821]
[139.80517578 6.94638157]
[135.93370056 -6.42534208]
[134.48056030 -20.26643944]
[135.49000549 -34.14321518]
[138.92907715 -47.62107849]
[144.68878174 -60.27817917]
[152.58749390 -71.71858215]
[162.37673950 -81.58467865]
[173.74891663 -89.56834412]
[186.34706116 -95.42057037]
[199.77598572 -98.95923615]
[213.61470032 -100.07476044]
[227.42962646 -98.73352814]
[240.78814697 -94.97884369]
[253.27217102 -88.92958832]
[264.49121094 -80.77643585]
[275.37002563 -91.10364532]
[286.24887085 -101.43084717]
[297.12768555 -111.75805664]
[308.00650024 -122.08525848]
[318.88534546 -132.41246033]
[329.76416016 -142.73966980]
[340.64297485 -153.06687927]
[335.51721191 -167.40725708]
[336.67382812 -182.59217834]
[343.91244507 -195.99078369]
[355.97888184 -205.28167725]
[370.78262329 -208.85513306]
[385.75875854 -206.09205627]
[398.31265259 -197.47116089]
[406.26922607 -184.48605347]
[408.24996948 -169.38650513]
[403.91168213 -154.78858948]
[394.00604248 -143.22148132]
[380.24920654 -136.68925476]
[365.02468872 -136.32366943]
[350.97018433 -142.18804932]
[340.09136963 -131.86083984]
[329.21252441 -121.53363800]
[318.33370972 -111.20643616]
[307.45489502 -100.87922668]
[296.57604980 -90.55202484]
[285.69723511 -80.22481537]
[274.81842041 -69.89761353]
[283.41625977 -56.24334335]
[289.03701782 -41.11261749]
[291.44039917 -25.14621544]
[290.52230835 -9.02078915]
[286.31958008 6.57982969]
[279.00823975 20.99361992]
[268.89645386 33.60846710]
[256.41119385 43.88815689]
[242.08052063 51.39517212]
[226.51100159 55.80930328]
[210.36222839 56.94131851]
[194.31871033 54.74106979]
[179.06100464 49.29970551]
[165.23675537 40.84590912]
[155.02326965 51.83157349]
[144.80979919 62.81723785]
[156.18316650 84.70529175]
[157.47413635 109.33806610]
[148.45104980 132.29507446]
[130.73313904 149.45654297]
[107.50000000 157.74275208]
[107.50000000 172.74275208]
[107.50000000 187.74275208]
[107.50000000 202.74275208]
[107.50000000 217.74275208]
[107.50000000 232.74275208]
[107.50000000 247.74275208]
[107.50000000 262.74276733]
[107.50000000 277.74276733]
[107.50000000 292.74276733]
[107.50000000 307.74276733]
[122.03988647 311.80407715]
[134.94427490 319.63858032]
[145.25555420 330.66491699]
[152.20857239 344.06484985]
[155.28736877 358.84399414]
[154.26348877 373.90567017]
[149.21287537 388.13220215]
[140.51036072 400.46786499]
[128.80169678 409.99728394]
[114.95575714 416.01330566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[62 125]
[63 124]
[64 123]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[88 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
