%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACxxxxxxxxxxUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCCCCCCCCCCCACCCUUAACAG\
) } def
/len { sequence length } bind def

/coor [
[93.52277374 663.16339111]
[80.30455780 655.88732910]
[69.42059326 645.43737793]
[61.61297226 632.52600098]
[57.41403198 618.03356934]
[57.11006546 602.94812012]
[60.72179031 588.29827881]
[68.00296021 575.08288574]
[78.45712280 564.20294189]
[91.37150574 556.40032959]
[105.86558533 552.20697021]
[105.55760956 537.21014404]
[105.24963379 522.21331787]
[104.94165039 507.21646118]
[104.63367462 492.21963501]
[104.32569885 477.22280884]
[104.01772308 462.22595215]
[103.70973969 447.22912598]
[103.40176392 432.23226929]
[103.09378815 417.23544312]
[102.78581238 402.23861694]
[102.47782898 387.24176025]
[102.16985321 372.24493408]
[87.03719330 369.43597412]
[72.80825043 363.55392456]
[60.09998703 354.85134888]
[49.46395874 343.70309448]
[41.36237335 330.59027100]
[36.14798737 316.07934570]
[34.04877472 300.79788208]
[35.15793228 285.40719604]
[39.42976761 270.57379150]
[46.68155670 256.94061279]
[56.60138321 245.09901428]
[68.76152802 235.56321716]
[82.63693237 228.74794006]
[97.62783813 224.95034790]
[97.01201630 209.96299744]
[96.39618683 194.97564697]
[95.78036499 179.98828125]
[95.16453552 165.00093079]
[86.91123962 152.60205078]
[94.07545471 138.49584961]
[93.45962524 123.50850677]
[88.07458496 121.28874207]
[83.36902618 117.85600281]
[79.61105347 113.40586090]
[77.01480865 108.19188690]
[75.72820282 102.51116180]
[75.82454681 96.68735504]
[77.29835510 91.05229187]
[65.70930481 81.52895355]
[54.12025833 72.00561523]
[38.04413605 66.62094116]
[38.76806259 49.68246078]
[55.24498749 45.68905258]
[63.64359665 60.41656876]
[75.23264313 69.93990326]
[86.82169342 79.46324158]
[90.75314331 77.41854858]
[94.98955536 76.11859131]
[99.39121246 75.60623932]
[103.64405823 61.22175980]
[107.89690399 46.83727646]
[112.14975739 32.45279694]
[98.62882233 25.87751961]
[86.37464142 17.16632652]
[75.72151184 6.55686045]
[66.96006775 -5.66144085]
[60.32931519 -19.15525436]
[56.01015472 -33.55646133]
[54.12041473 -48.47218323]
[54.71164703 -63.49550629]
[57.76772308 -78.21659088]
[63.20527267 -92.23382568]
[70.87595367 -105.16481781]
[80.57049561 -116.65679932]
[92.02444458 -126.39625549]
[104.92530823 -134.11749268]
[118.92115784 -139.60986328]
[133.63015747 -142.72354126]
[148.65106201 -143.37356567]
[163.57406616 -141.54222107]
[177.99206543 -137.27946472]
[191.51173401 -130.70158386]
[203.76423645 -121.98803711]
[214.41531372 -111.37651825]
[223.17440796 -99.15652466]
[229.80256653 -85.66143799]
[234.11894226 -71.25939941]
[236.00581360 -56.34331512]
[235.41168213 -41.32010269]
[232.35276794 -26.59960938]
[226.91252136 -12.58342075]
[219.23934937 0.34609261]
[209.54258728 11.83620358]
[198.08677673 21.57345390]
[185.18441772 29.29220390]
[171.18751526 34.78187943]
[156.47790527 37.89272308]
[141.45687866 38.53985977]
[126.53423309 36.70564270]
[122.28138733 51.09012222]
[118.02854156 65.47460175]
[113.77569580 79.85908508]
[124.21640778 102.99864197]
[108.44698334 122.89267731]
[109.06280518 137.88003540]
[117.36015320 151.35090637]
[110.15189362 164.38511658]
[110.76771545 179.37246704]
[111.38354492 194.35981750]
[111.99936676 209.34716797]
[112.61519623 224.33451843]
[127.06687164 226.67222595]
[140.77526855 231.79565430]
[153.20919800 239.50419617]
[163.88723755 249.49710083]
[172.39639282 261.38519287]
[178.40809631 274.70611572]
[181.69088745 288.94213867]
[182.11927795 303.54052734]
[179.67860413 317.93475342]
[174.46549988 331.56665039]
[166.68405151 343.90798950]
[156.63783264 354.48095703]
[144.71804810 362.87667847]
[131.38835144 368.77099609]
[117.16669464 371.93695068]
[117.47467041 386.93377686]
[117.78264618 401.93063354]
[118.09062195 416.92745972]
[118.39860535 431.92431641]
[118.70658112 446.92114258]
[119.01455688 461.91796875]
[119.32253265 476.91482544]
[119.63051605 491.91165161]
[119.93849182 506.90850830]
[120.24646759 521.90533447]
[120.55444336 536.90216064]
[120.86242676 551.89898682]
[135.51643372 555.49377441]
[148.74026489 562.75964355]
[159.63229370 573.20117188]
[167.44989014 586.10650635]
[171.66001892 600.59570312]
[171.97563171 615.68090820]
[168.37522888 630.33355713]
[161.10426331 643.55456543]
[150.65850830 654.44256592]
[137.75015259 662.25518799]
[123.25931549 666.45971680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[37 114]
[38 113]
[39 112]
[40 111]
[41 110]
[43 108]
[44 107]
[51 59]
[52 58]
[53 57]
[62 105]
[63 104]
[64 103]
[65 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
