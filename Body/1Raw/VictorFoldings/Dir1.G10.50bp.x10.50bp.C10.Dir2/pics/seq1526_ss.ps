%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCUCUAGGGGGGGGGGGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGxxxxxxxxxxCAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCCCCCCCCCCCAUCCCUGUAG\
) } def
/len { sequence length } bind def

/coor [
[83.64477539 373.71627808]
[70.77149963 365.81338501]
[60.64720917 354.60287476]
[54.09262466 340.99356079]
[51.63910294 326.08862305]
[53.48554230 311.09637451]
[59.48225403 297.23217773]
[69.14311218 285.61990356]
[81.68495941 277.20095825]
[96.09107971 272.65780640]
[95.77902985 257.66104126]
[95.46697235 242.66429138]
[95.15491486 227.66754150]
[94.84285736 212.67079163]
[94.53079987 197.67404175]
[94.21874237 182.67727661]
[93.90669250 167.68052673]
[93.59463501 152.68377686]
[93.28257751 137.68702698]
[92.97052002 122.69026947]
[92.65846252 107.69351196]
[91.25616455 92.75920105]
[88.77104187 77.96649933]
[86.28592682 63.17378998]
[83.80080414 48.38108444]
[68.86955261 49.87335205]
[53.87196350 50.36499023]
[38.87503433 49.85379410]
[23.94573593 48.34205246]
[9.15075302 45.83651352]
[-5.44384003 42.34837341]
[-19.77285767 37.89320755]
[-33.77230453 32.49091339]
[-47.37965012 26.16561699]
[-60.53412628 18.94557381]
[-73.17697906 10.86302853]
[-85.25173950 1.95407963]
[-96.70448303 -7.74148273]
[-107.48406219 -18.18035507]
[-117.54232025 -29.31591606]
[-126.83433533 -41.09843063]
[-135.31861877 -53.47527313]
[-142.95727539 -66.39116669]
[-149.71617126 -79.78842163]
[-155.56513977 -93.60720825]
[-160.47804260 -107.78580475]
[-164.43295288 -122.26088715]
[-167.41220093 -136.96780396]
[-169.40246582 -151.84086609]
[-170.39488220 -166.81365967]
[-170.38500977 -181.81929016]
[-169.37287903 -196.79075623]
[-167.36302185 -211.66119385]
[-164.36441040 -226.36418152]
[-160.39045715 -240.83403015]
[-155.45887756 -255.00614929]
[-149.59172058 -268.81723022]
[-142.81518555 -282.20556641]
[-135.15953064 -295.11138916]
[-126.65895844 -307.47705078]
[-117.35143280 -319.24731445]
[-107.27851868 -330.36962891]
[-96.48521423 -340.79428101]
[-85.01970673 -350.47476196]
[-72.93322754 -359.36779785]
[-60.27974319 -367.43371582]
[-47.11577225 -374.63641357]
[-33.50010681 -380.94378662]
[-19.49355888 -386.32763672]
[-5.15868664 -390.76394653]
[9.44048595 -394.23284912]
[24.23875618 -396.71890259]
[39.17003250 -398.21099854]
[54.16762161 -398.70245361]
[69.16455078 -398.19107056]
[84.09382629 -396.67913818]
[98.88877869 -394.17340088]
[113.48332977 -390.68508911]
[127.81228638 -386.22973633]
[141.81166077 -380.82727051]
[155.41893005 -374.50180054]
[168.57331848 -367.28158569]
[181.21606445 -359.19888306]
[193.29072571 -350.28979492]
[204.74334717 -340.59408569]
[215.52278137 -330.15505981]
[225.58090210 -319.01937866]
[234.87277222 -307.23675537]
[243.35690308 -294.85980225]
[250.99539185 -281.94381714]
[257.75411987 -268.54647827]
[263.60290527 -254.72761536]
[268.51565552 -240.54895020]
[272.47036743 -226.07382202]
[275.44943237 -211.36686707]
[277.43951416 -196.49377441]
[278.43173218 -181.52098083]
[278.42166138 -166.51533508]
[277.40936279 -151.54388428]
[275.39932251 -136.67347717]
[272.40051270 -121.97053528]
[268.42639160 -107.50072479]
[263.49462891 -93.32867432]
[257.62728882 -79.51767731]
[250.85058594 -66.12941742]
[243.19477844 -53.22368622]
[234.69404602 -40.85813522]
[225.38636780 -29.08798218]
[215.31332397 -17.96580315]
[204.51988220 -7.54126930]
[193.05426025 2.13906026]
[180.96766663 11.03195000]
[168.31407166 19.09768105]
[155.15000916 26.30023193]
[141.53427124 32.60743332]
[127.52765656 37.99111176]
[113.19272614 42.42722702]
[98.59351349 45.89596558]
[101.07862854 60.68867111]
[103.56375122 75.48137665]
[106.04886627 90.27408600]
[115.07107544 78.29077911]
[129.64476013 74.74004364]
[143.16790771 81.23040009]
[149.51437378 94.82165527]
[145.80917358 109.35683441]
[133.73078918 118.25136566]
[118.75084686 117.47592926]
[107.65522003 107.38145447]
[107.96727753 122.37821198]
[108.27932739 137.37496948]
[108.59138489 152.37171936]
[108.90344238 167.36846924]
[109.21549988 182.36521912]
[109.52755737 197.36198425]
[109.83961487 212.35873413]
[110.15166473 227.35548401]
[110.46372223 242.35223389]
[110.77577972 257.34899902]
[111.08783722 272.34573364]
[125.67047882 276.28570557]
[138.55168152 284.17565918]
[148.68724060 295.37597656]
[155.25549316 308.97872925]
[157.72398376 323.88116455]
[155.89260864 338.87527466]
[149.90982056 352.74548340]
[140.26063538 364.36743164]
[127.72724915 372.79898071]
[113.32569885 377.35662842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 121]
[23 120]
[24 119]
[25 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
