%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGCCUCCUGGGGGGGGGGAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGxxxxxxxxxxACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACCCCCCCCCCCUAGGCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 398.33456421]
[71.01555634 392.78155518]
[58.81560135 383.91522217]
[49.20452881 372.29293823]
[42.78650284 358.64523315]
[39.96496582 343.83004761]
[40.91728210 328.77865601]
[45.58358765 314.43722534]
[53.67055511 301.70727539]
[64.66983032 291.38900757]
[77.88998413 284.13104248]
[92.50000000 280.38958740]
[92.50000000 265.38958740]
[92.50000000 250.38960266]
[92.50000000 235.38960266]
[92.50000000 220.38960266]
[92.50000000 205.38960266]
[92.50000000 190.38960266]
[92.50000000 175.38960266]
[92.50000000 160.38960266]
[92.50000000 145.38960266]
[86.18279266 143.88108826]
[80.14096832 141.49800110]
[74.49494934 138.28782654]
[69.35726929 134.31454468]
[64.83031464 129.65734863]
[61.00432205 124.40906525]
[57.95554352 118.67429352]
[55.74474335 112.56732178]
[40.84029388 114.25772095]
[25.93584633 115.94811249]
[11.03139973 117.63851166]
[1.38395572 130.15660095]
[-14.29994965 132.10356140]
[-26.71533394 122.32430267]
[-28.49636841 106.62068939]
[-18.58639908 94.30939484]
[-2.86483335 92.69448853]
[9.34100246 102.73406219]
[24.24544907 101.04367065]
[39.14989853 99.35327148]
[54.05434418 97.66287231]
[60.15454102 77.00424194]
[74.99003601 61.38695526]
[95.30844879 54.23478699]
[96.23186493 39.26323700]
[97.15527344 24.29168701]
[98.07868958 9.32013702]
[95.47181702 0.49970555]
[99.17787933 -5.94834280]
[100.40848541 -20.89777756]
[101.63909912 -35.84721375]
[102.86971283 -50.79664612]
[104.10032654 -65.74607849]
[89.40309906 -68.84360504]
[75.20999908 -73.75881195]
[61.74487686 -80.41416931]
[49.22010040 -88.70471191]
[37.83319473 -98.49969482]
[27.76375580 -109.64463043]
[19.17058945 -121.96375275]
[12.18922138 -135.26277161]
[6.92975998 -149.33192444]
[3.47515368 -163.94934082]
[1.87988651 -178.88447571]
[2.16911840 -193.90179443]
[4.33828783 -208.76443481]
[8.35318279 -223.23799133]
[14.15048409 -237.09419250]
[21.63875961 -250.11451721]
[30.69990730 -262.09362793]
[41.19102097 -272.84255981]
[52.94664001 -282.19183350]
[65.78136444 -289.99395752]
[79.49276733 -296.12588501]
[93.86460114 -300.49093628]
[108.67020416 -303.02023315]
[123.67606354 -303.67391968]
[138.64552307 -302.44165039]
[153.34249878 -299.34289551]
[167.53518677 -294.42648315]
[180.99974060 -287.77001953]
[193.52381897 -279.47839355]
[204.90989685 -269.68246460]
[214.97840881 -258.53668213]
[223.57052612 -246.21684265]
[230.55078125 -232.91723633]
[235.80905151 -218.84762573]
[239.26243591 -204.22991943]
[240.85644531 -189.29464722]
[240.56594849 -174.27735901]
[238.39552307 -159.41491699]
[234.37940979 -144.94169617]
[228.58094788 -131.08596802]
[221.09156799 -118.06626892]
[212.02941895 -106.08793640]
[201.53739929 -95.33987427]
[189.78099060 -85.99160767]
[176.94561768 -78.19055939]
[163.23368835 -72.05977631]
[148.86149597 -67.69594574]
[134.05567932 -65.16788483]
[119.04975891 -64.51546478]
[117.81914520 -49.56603241]
[116.58853149 -34.61660004]
[115.35792542 -19.66716576]
[114.12731171 -4.71773052]
[113.05023956 10.24355030]
[112.12682343 25.21509933]
[111.20341492 40.18664932]
[110.27999878 55.15819931]
[121.33358765 59.24041748]
[130.98762512 65.99658203]
[138.60879517 74.98347473]
[143.69711304 85.61151886]
[145.91876221 97.18349457]
[145.12800598 108.94023895]
[159.16998291 114.21498108]
[170.98521423 104.40192413]
[186.12672424 101.82700348]
[200.52153015 107.18285370]
[210.29750061 119.02878571]
[212.82495117 134.17828369]
[207.42399597 148.55624390]
[195.54748535 158.29502869]
[180.39013672 160.77497864]
[166.02919006 155.32899475]
[156.32766724 143.42201233]
[153.89524841 128.25695801]
[139.85327148 122.98221588]
[126.19361877 137.82009888]
[107.50000000 145.38960266]
[107.50000000 160.38960266]
[107.50000000 175.38960266]
[107.50000000 190.38960266]
[107.50000000 205.38960266]
[107.50000000 220.38960266]
[107.50000000 235.38960266]
[107.50000000 250.38960266]
[107.50000000 265.38958740]
[107.50000000 280.38958740]
[122.11001587 284.13104248]
[135.33016968 291.38900757]
[146.32945251 301.70727539]
[154.41641235 314.43722534]
[159.08271790 328.77865601]
[160.03503418 343.83004761]
[157.21350098 358.64523315]
[150.79547119 372.29293823]
[141.18440247 383.91522217]
[128.98443604 392.78155518]
[114.96250153 398.33456421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[29 42]
[30 41]
[31 40]
[32 39]
[45 111]
[46 110]
[47 109]
[48 108]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[117 130]
[118 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
