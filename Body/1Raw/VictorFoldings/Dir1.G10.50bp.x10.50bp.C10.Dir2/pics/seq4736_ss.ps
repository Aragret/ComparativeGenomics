%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGGCCUAGGGGGGGGGGGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUxxxxxxxxxxCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGCCCCCCCCCCGUGGGCCUAG\
) } def
/len { sequence length } bind def

/coor [
[79.18544006 386.63485718]
[66.31216431 378.73199463]
[56.18787003 367.52148438]
[49.63328552 353.91213989]
[47.17976379 339.00723267]
[49.02620316 324.01498413]
[55.02291489 310.15078735]
[64.68377686 298.53851318]
[77.22562408 290.11956787]
[91.63174438 285.57641602]
[91.31968689 270.57965088]
[91.00762939 255.58290100]
[90.69557953 240.58615112]
[90.38352203 225.58938599]
[90.07146454 210.59263611]
[89.75940704 195.59588623]
[89.44734955 180.59913635]
[89.13529205 165.60237122]
[88.82324219 150.60562134]
[77.52423096 140.73989868]
[62.62232971 142.45259094]
[47.72042847 144.16528320]
[32.92772293 146.65040588]
[18.28421974 149.90122986]
[3.64071918 153.15205383]
[-11.00278187 156.40287781]
[-25.64628410 159.65370178]
[-30.18396568 174.32698059]
[-41.46125031 184.75378418]
[-56.44460678 188.12937927]
[-71.10358429 183.54573059]
[-81.49500275 172.23580933]
[-84.82360840 157.24194336]
[-80.19402313 142.59741211]
[-68.85159302 132.24150085]
[-53.84737396 128.95989990]
[-39.21741486 133.63536072]
[-28.89710999 145.01020813]
[-14.25360775 141.75936890]
[0.38989332 138.50854492]
[15.03339481 135.25772095]
[29.67689514 132.00689697]
[18.87397194 121.60031891]
[20.06221581 106.64746094]
[32.37311554 98.07764435]
[46.80840302 102.15471649]
[52.81704712 115.89866638]
[46.00774002 129.26338196]
[60.90964127 127.55068970]
[75.81154633 125.83799744]
[68.08640289 110.80061340]
[68.44799805 94.72367096]
[76.02999115 81.48417664]
[88.31595612 73.90979004]
[101.90663147 73.18227386]
[107.10205078 59.11075211]
[112.29746246 45.03923416]
[117.49288177 30.96771431]
[104.11823273 24.13726234]
[91.64533234 15.77285767]
[80.24929810 5.99192238]
[70.09010315 -5.06823397]
[61.31035995 -17.25234413]
[54.03333282 -30.38936234]
[48.36117935 -44.29486465]
[44.37351990 -58.77363968]
[42.12634277 -73.62242889]
[41.65119171 -88.63278198]
[42.95473480 -103.59396362]
[46.01867676 -118.29595947]
[50.80000305 -132.53236389]
[57.23159027 -146.10333252]
[65.22314453 -158.81832886]
[74.66249084 -170.49888611]
[85.41709900 -180.98100281]
[97.33600616 -190.11752319]
[110.25187683 -197.78019714]
[123.98339844 -203.86145020]
[138.33779907 -208.27592468]
[153.11357117 -210.96162415]
[168.10327148 -211.88084412]
[183.09649658 -211.02070618]
[197.88273621 -208.39326477]
[212.25442505 -204.03541565]
[226.00981140 -198.00833130]
[238.95578003 -190.39662170]
[250.91059875 -181.30714417]
[261.70645142 -170.86750793]
[271.19174194 -159.22424316]
[279.23336792 -146.54084778]
[285.71838379 -132.99533081]
[290.55578613 -118.77788544]
[293.67767334 -104.08808136]
[295.04016113 -89.13214874]
[294.62417603 -74.12004089]
[292.43554688 -59.26250839]
[288.50497437 -44.76812744]
[282.88769531 -30.84037781]
[275.66250610 -17.67477989]
[266.93084717 -5.45615864]
[256.81530762 5.64395428]
[245.45791626 15.46973038]
[233.01809692 23.88323212]
[219.67047119 30.76634789]
[205.60243225 36.02244568]
[191.01145935 39.57774353]
[176.10241699 41.38232803]
[161.08457947 41.41086197]
[146.16876221 39.66295242]
[131.56440735 36.16313171]
[126.36898804 50.23464966]
[121.17356873 64.30616760]
[115.97815704 78.37768555]
[131.13644409 99.57498932]
[121.80352020 127.87992096]
[135.70606995 133.51188660]
[149.60862732 139.14382935]
[158.80332947 139.47463989]
[163.73985291 145.04028320]
[177.52223206 150.96025085]
[191.30462646 156.88020325]
[208.24429321 157.57582092]
[212.26524353 174.04603577]
[197.55178833 182.46925354]
[185.38465881 170.66259766]
[171.60227966 164.74263000]
[157.81990051 158.82266235]
[143.97666931 153.04638672]
[130.07412720 147.41442871]
[116.17156219 141.78248596]
[103.81999207 150.29356384]
[104.13204956 165.29032898]
[104.44410706 180.28707886]
[104.75616455 195.28382874]
[105.06821442 210.28057861]
[105.38027191 225.27734375]
[105.69232941 240.27409363]
[106.00438690 255.27084351]
[106.31644440 270.26760864]
[106.62850189 285.26434326]
[121.21113586 289.20431519]
[134.09234619 297.09423828]
[144.22789001 308.29458618]
[150.79614258 321.89733887]
[153.26464844 336.79977417]
[151.43327332 351.79388428]
[145.45048523 365.66409302]
[135.80130005 377.28604126]
[123.26791382 385.71759033]
[108.86636353 390.27523804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 50]
[21 49]
[22 48]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[55 113]
[56 112]
[57 111]
[58 110]
[115 130]
[116 129]
[117 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
