%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCCCCUUAGGGGGGGGGGUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCxxxxxxxxxxACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACCCCCCCCCCCUAAACCCCAUUA\
) } def
/len { sequence length } bind def

/coor [
[130.45532227 499.21359253]
[116.75317383 492.95269775]
[104.78805542 483.79937744]
[95.16014862 472.21267700]
[88.35236359 458.77386475]
[84.70619965 444.15698242]
[84.40453339 429.09521484]
[87.46249390 414.34408569]
[93.72670746 400.64343262]
[102.88294983 388.68054199]
[114.47195435 379.05541992]
[127.91242981 372.25091553]
[142.53019714 368.60827637]
[142.22618103 353.61135864]
[141.92218018 338.61444092]
[141.61817932 323.61752319]
[141.31417847 308.62060547]
[141.01016235 293.62368774]
[140.70616150 278.62677002]
[140.40216064 263.62985229]
[140.09815979 248.63293457]
[139.79415894 233.63601685]
[139.49014282 218.63909912]
[137.06858826 203.83584595]
[132.57814026 189.52375793]
[128.08769226 175.21166992]
[122.45294189 161.31025696]
[115.71089172 147.91081238]
[108.96884155 134.51138306]
[93.07932281 134.97970581]
[78.56523132 128.49607849]
[68.31113434 116.34906006]
[64.35497284 100.95279694]
[67.48298645 85.36716461]
[77.07351685 72.68970490]
[70.06128693 59.42966461]
[54.25465012 50.03656387]
[55.52193451 32.55852509]
[48.24240494 19.44332504]
[40.96287537 6.32812500]
[27.50054169 -1.98308206]
[28.08905411 -16.86605644]
[20.80952454 -29.98125458]
[13.52999496 -43.09645462]
[-2.90119624 -38.68575287]
[-19.90395164 -38.60562897]
[-36.35673141 -42.85629272]
[-51.17556381 -51.15246964]
[-63.38545990 -62.94252014]
[-72.18456268 -77.44511414]
[-76.99680328 -93.70101929]
[-77.50961304 -110.63655090]
[-73.69424438 -127.13446808]
[-65.80728149 -142.10769653]
[-54.37344360 -154.57095337]
[-62.69118881 -167.05354309]
[-71.00894165 -179.53613281]
[-79.32668304 -192.01872253]
[-87.64443207 -204.50131226]
[-95.96218109 -216.98390198]
[-111.34738159 -221.53088379]
[-117.25119019 -236.44815063]
[-109.14469910 -250.29243469]
[-93.24652100 -252.44360352]
[-81.75238037 -241.25146484]
[-83.47959137 -225.30165100]
[-75.16184235 -212.81906128]
[-66.84409332 -200.33647156]
[-58.52634811 -187.85388184]
[-50.20859909 -175.37129211]
[-41.89085007 -162.88870239]
[-29.68095779 -167.70796204]
[-16.75219154 -170.01066589]
[-3.61790419 -169.70309448]
[9.19993782 -166.79521179]
[21.19149971 -161.40039062]
[31.87935638 -153.73097229]
[40.83749771 -144.08984375]
[47.70831299 -132.85862732]
[52.21686554 -120.48242950]
[54.18189240 -107.45227051]
[53.52308273 -94.28558350]
[50.26438141 -81.50568390]
[44.53310013 -69.62096405]
[36.55495834 -59.10464859]
[26.64519501 -50.37598419]
[33.92472458 -37.26078415]
[41.20425415 -24.14558601]
[54.14590454 -16.77246475]
[54.07807541 -0.95140457]
[61.35760498 12.16379452]
[68.63713074 25.27899361]
[80.20878601 28.92796707]
[86.36874390 39.84492493]
[83.32132721 52.41743469]
[90.33355713 65.67747498]
[104.14907837 64.58444977]
[117.33785248 68.84114075]
[127.90765381 77.80453491]
[134.26185608 90.12068176]
[135.44062805 103.92914581]
[131.26588440 117.14409637]
[122.36827850 127.76934052]
[129.11032104 141.16876221]
[135.85237122 154.56820679]
[140.06898499 140.17304993]
[151.84533691 130.88232422]
[166.82653809 130.13171387]
[179.47257996 138.19879150]
[185.10694885 152.10037231]
[181.64608765 166.69564819]
[170.36979675 176.58734131]
[155.44804382 178.11747742]
[142.39978027 170.72122192]
[146.89022827 185.03330994]
[151.38067627 199.34539795]
[155.51408386 184.92614746]
[164.76911926 173.12171936]
[177.78556824 165.66705322]
[192.65037537 163.65774536]
[207.17886353 167.38911438]
[219.23574829 176.31277466]
[227.04902649 189.11717224]
[229.47035217 203.92045593]
[226.14389038 218.54695129]
[217.55851746 230.84701538]
[204.97602844 239.01286316]
[190.24569702 241.84436035]
[175.53245544 238.92536926]
[162.99873352 230.68489075]
[154.48706055 218.33508301]
[154.79107666 233.33201599]
[155.09507751 248.32893372]
[155.39907837 263.32583618]
[155.70307922 278.32275391]
[156.00709534 293.31967163]
[156.31109619 308.31658936]
[156.61509705 323.31353760]
[156.91909790 338.31045532]
[157.22309875 353.30737305]
[157.52711487 368.30429077]
[172.28048706 371.35153198]
[185.98567200 377.60577393]
[197.95521545 386.75332642]
[207.58874512 398.33532715]
[214.40303040 411.77084351]
[218.05628967 426.38595581]
[218.36524963 441.44757080]
[215.31443787 456.20019531]
[209.05686951 469.90386963]
[199.90641785 481.87121582]
[188.32208252 491.50192261]
[174.88490295 498.31295776]
[160.26890564 501.96267700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 116]
[25 115]
[26 114]
[27 105]
[28 104]
[29 103]
[35 96]
[36 95]
[38 92]
[39 91]
[40 90]
[42 88]
[43 87]
[44 86]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
