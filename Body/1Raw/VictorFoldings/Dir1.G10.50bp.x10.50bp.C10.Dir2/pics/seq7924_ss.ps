%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUACCCCCUGGGGGGGGGGCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUxxxxxxxxxxCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCCCCCCCCCCCUCAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[41.80222321 489.28250122]
[27.78027725 483.72949219]
[15.58032036 474.86315918]
[5.96924877 463.24084473]
[-0.44877651 449.59313965]
[-3.27031326 434.77795410]
[-2.31799746 419.72656250]
[2.34830761 405.38516235]
[10.43527412 392.65518188]
[21.43454933 382.33691406]
[34.65470886 375.07894897]
[49.26472092 371.33752441]
[49.26472092 356.33752441]
[49.26472092 341.33752441]
[49.26472092 326.33752441]
[49.26472092 311.33752441]
[49.26472092 296.33752441]
[49.26472092 281.33752441]
[49.26472092 266.33752441]
[49.26472092 251.33750916]
[49.26472092 236.33750916]
[37.12630463 227.74700928]
[32.31699371 213.48745728]
[36.87974167 198.96043396]
[49.26472092 189.79972839]
[49.26472092 174.79972839]
[49.26472092 159.79972839]
[36.77371979 168.10482788]
[22.42954636 163.71795654]
[16.72072029 149.84678650]
[23.82155800 136.63398743]
[38.53989792 133.74079895]
[50.11336517 143.28218079]
[51.65065765 128.36117554]
[53.18795013 113.44015503]
[44.52134323 101.19720459]
[29.93759155 97.68803406]
[14.71027660 101.98214722]
[4.14628553 91.48208618]
[-10.43746376 87.97291565]
[-25.02121353 84.46375275]
[-39.60496140 80.95458221]
[-56.41906738 83.12766266]
[-63.16182327 67.57222748]
[-50.08088303 56.78680420]
[-36.09579468 66.37083435]
[-21.51204491 69.87999725]
[-6.92829657 73.38916779]
[7.65545273 76.89833832]
[21.83964157 72.35321808]
[33.44675827 83.10428619]
[48.03050995 86.61344910]
[53.87361145 81.91152191]
[44.46993637 70.22516632]
[56.15643692 60.82167435]
[65.55982208 72.50766754]
[71.40292358 67.80574036]
[71.09494781 52.80889893]
[70.78697205 37.81206131]
[70.47899628 22.81522369]
[70.17101288 7.81838560]
[69.86303711 -7.17845201]
[69.55506134 -22.17529106]
[54.82168579 -25.34142876]
[41.21587372 -31.82051849]
[29.47136879 -41.26314926]
[20.22153473 -53.16009521]
[13.96520424 -66.86976624]
[11.03977299 -81.65281677]
[11.60300827 -96.71201324]
[15.62453270 -111.23523712]
[22.88747215 -124.43927002]
[33.00014496 -135.61203003]
[45.41718674 -144.15098572]
[59.46896362 -149.59564209]
[74.39767456 -151.65237427]
[89.39824677 -150.21028137]
[103.66170502 -145.34710693]
[116.41884613 -137.32513428]
[126.98168945 -126.57696533]
[134.78059387 -113.68225098]
[139.39498901 -99.33637238]
[140.57600403 -84.31298828]
[138.25994873 -69.42230225]
[132.57174683 -55.46733856]
[123.81814575 -43.20067215]
[112.47120667 -33.28382874]
[99.14286041 -26.25161552]
[84.55189514 -22.48326874]
[84.85987854 -7.48642969]
[85.16785431 7.51040792]
[85.47583008 22.50724602]
[85.78380585 37.50408554]
[86.09178925 52.50092316]
[86.39976501 67.49775696]
[102.62962341 68.49588776]
[114.93784332 76.32416534]
[121.05108643 87.71199036]
[135.70381165 84.50299072]
[150.35653687 81.29399872]
[165.00926208 78.08499908]
[179.66198730 74.87599945]
[182.30555725 59.90670395]
[190.48062134 47.09121323]
[202.94053650 38.38380432]
[217.78526306 35.11228943]
[232.75106812 37.77555466]
[245.55578613 45.96746826]
[254.24679565 58.43882751]
[257.49877930 73.28783417]
[254.81584167 88.25012970]
[246.60708618 101.04406738]
[234.12429810 109.71866608]
[219.27102661 112.95111084]
[204.31228638 110.24848175]
[191.52915955 102.02290344]
[182.87098694 89.52872467]
[168.21826172 92.73772430]
[153.56553650 95.94672394]
[138.91281128 99.15571594]
[124.26008606 102.36471558]
[105.07026672 129.36956787]
[68.10896301 114.97744751]
[66.57167053 129.89846802]
[65.03437805 144.81947327]
[64.26471710 159.79972839]
[64.26471710 174.79972839]
[64.26471710 189.79972839]
[76.64969635 198.96043396]
[81.21244812 213.48745728]
[76.40313721 227.74700928]
[64.26471710 236.33750916]
[64.26471710 251.33750916]
[64.26471710 266.33752441]
[64.26471710 281.33752441]
[64.26471710 296.33752441]
[64.26471710 311.33752441]
[64.26471710 326.33752441]
[64.26471710 341.33752441]
[64.26471710 356.33752441]
[64.26471710 371.33752441]
[78.87473297 375.07894897]
[92.09489441 382.33691406]
[103.09416962 392.65518188]
[111.18112946 405.38516235]
[115.84743500 419.72656250]
[116.79975128 434.77795410]
[113.97821808 449.59313965]
[107.56018829 463.24084473]
[97.94911957 474.86315918]
[85.74916077 483.72949219]
[71.72721863 489.28250122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 128]
[26 127]
[27 126]
[33 125]
[34 124]
[35 123]
[36 52]
[37 51]
[39 49]
[40 48]
[41 47]
[42 46]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
