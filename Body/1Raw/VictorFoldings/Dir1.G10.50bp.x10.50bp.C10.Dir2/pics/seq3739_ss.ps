%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCAAACUGGGGGGGGGGCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAxxxxxxxxxxUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUACCCCCCCCCCAGCUUCAAACU\
) } def
/len { sequence length } bind def

/coor [
[84.73085022 360.65313721]
[71.24196625 353.92160034]
[59.75646973 344.15704346]
[50.94210052 331.92715454]
[45.31131744 317.94293213]
[43.19149017 303.01748657]
[44.70585632 288.01846313]
[49.76638031 273.81796265]
[58.07884598 261.24154663]
[69.15997314 251.02038574]
[82.36553192 243.74874878]
[96.92775726 239.84938049]
[96.61978149 224.85253906]
[96.31179810 209.85569763]
[96.00382233 194.85885620]
[95.69584656 179.86203003]
[95.38787079 164.86518860]
[95.07988739 149.86834717]
[94.77191162 134.87150574]
[94.46393585 119.87467194]
[82.97326660 110.23285675]
[68.15078735 112.53373718]
[53.32830429 114.83460999]
[49.10403061 126.67466736]
[40.27994537 135.52630615]
[28.58936882 139.73837280]
[16.29163933 138.56256104]
[5.73551416 132.28553772]
[-1.08942080 122.16231537]
[-15.99386787 123.85271454]
[-30.89831543 125.54311371]
[-45.80276489 127.23351288]
[-55.45020676 139.75158691]
[-71.13410950 141.69856262]
[-83.54949951 131.91929626]
[-85.33052826 116.21569061]
[-75.42056274 103.90438843]
[-59.69899750 102.28948212]
[-47.49316025 112.32906342]
[-32.58871460 110.63866425]
[-17.68426514 108.94826508]
[-2.77981830 107.25786591]
[5.15158510 91.53387451]
[21.05293274 83.60713196]
[38.69139862 86.79375458]
[51.02743149 100.01213074]
[65.84991455 97.71125031]
[80.67239380 95.41037750]
[92.64265442 86.37085724]
[98.91205597 72.74388123]
[105.18146515 59.11690140]
[111.45086670 45.48992157]
[98.42248535 38.03614044]
[86.10385895 29.46006775]
[74.59139252 19.82882309]
[63.97520447 9.21778679]
[54.33836746 -2.28999472]
[45.75631332 -14.60445595]
[38.29620361 -27.62921715]
[32.01642990 -41.26234055]
[26.96613884 -55.39712906]
[23.18485641 -69.92295074]
[20.70217705 -84.72612000]
[19.53752899 -99.69078827]
[19.70003128 -114.69982910]
[21.18840981 -129.63577271]
[23.99101639 -144.38171387]
[28.08591652 -158.82226562]
[33.44105911 -172.84439087]
[40.01453781 -186.33834839]
[47.75489807 -199.19854736]
[56.60156631 -211.32431030]
[66.48529816 -222.62074280]
[77.32875061 -232.99943542]
[89.04703522 -242.37916565]
[101.54846191 -250.68650818]
[114.73517609 -257.85644531]
[128.50396729 -263.83288574]
[142.74710083 -268.56906128]
[157.35305786 -272.02786255]
[172.20756531 -274.18222046]
[187.19435120 -275.01531982]
[202.19610596 -274.52059937]
[217.09544373 -272.70196533]
[231.77574158 -269.57360840]
[246.12210083 -265.16003418]
[260.02224731 -259.49578857]
[273.36737061 -252.62521362]
[286.05307007 -244.60206604]
[297.98001099 -235.48913574]
[309.05490112 -225.35775757]
[319.19100952 -214.28721619]
[328.30902100 -202.36416626]
[336.33758545 -189.68190002]
[343.21386719 -176.33969116]
[348.88406372 -162.44197083]
[353.30374146 -148.09750366]
[356.43835449 -133.41854858]
[358.26339722 -118.51998901]
[358.76449585 -103.51844025]
[357.93780518 -88.53130341]
[355.78979492 -73.67588043]
[352.33721924 -59.06843567]
[347.60717773 -44.82329178]
[341.63659668 -31.05194283]
[334.47229004 -17.86216736]
[326.17028809 -5.35719538]
[316.79556274 6.36510229]
[306.42150879 17.21298027]
[295.12930298 27.10153961]
[283.00732422 35.95338821]
[270.15042114 43.69924164]
[256.65927124 50.27848434]
[242.63943481 55.63961792]
[228.20063782 59.74068832]
[213.45588684 62.54959106]
[198.52058411 64.04434967]
[183.51162720 64.21326447]
[168.54646301 63.05501175]
[153.74223328 60.57865524]
[139.21478271 56.80357742]
[125.07785034 51.75932693]
[118.80844116 65.38630676]
[112.53903961 79.01328278]
[106.26963043 92.64026642]
[109.51919556 93.74224091]
[112.53791809 96.15058899]
[114.83770752 99.78893280]
[115.96530151 104.40886688]
[115.56002045 109.60643005]
[113.40425110 114.85714722]
[109.46076965 119.56669617]
[109.76875305 134.56353760]
[110.07672882 149.56037903]
[110.38470459 164.55720520]
[110.69268036 179.55404663]
[111.00066376 194.55088806]
[111.30863953 209.54772949]
[111.61661530 224.54455566]
[111.92459106 239.54139709]
[126.63462830 242.83963013]
[140.12759399 249.56297302]
[151.61900330 259.32058716]
[160.44079590 271.54513550]
[166.08004761 285.52590942]
[168.20892334 300.45010376]
[166.70364380 315.45001221]
[161.65173340 329.65359497]
[153.34689331 342.23504639]
[142.27195740 352.46292114]
[129.07081604 359.74255371]
[114.51096344 363.65075684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 48]
[22 47]
[23 46]
[29 42]
[30 41]
[31 40]
[32 39]
[49 125]
[50 124]
[51 123]
[52 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
