%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUCCUAGGGGGGGGGGGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUxxxxxxxxxxACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCCCCCCCCCCCAUCAGCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 365.14846802]
[71.01555634 359.59545898]
[58.81560135 350.72912598]
[49.20452881 339.10684204]
[42.78650284 325.45913696]
[39.96496582 310.64395142]
[40.91728210 295.59255981]
[45.58358765 281.25112915]
[53.67055511 268.52117920]
[64.66983032 258.20291138]
[77.88998413 250.94493103]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[80.00900269 96.10161591]
[65.66482544 91.71472931]
[59.95600128 77.84356689]
[67.05683899 64.63076019]
[81.77517700 61.73758316]
[93.34864044 71.27896881]
[94.88593292 56.35795212]
[96.42322540 41.43693542]
[81.62776184 38.93631363]
[67.02519226 35.48322678]
[52.67676163 31.09215546]
[38.64265823 25.78152084]
[24.98174667 19.57359314]
[11.75132179 12.49441338]
[-0.99312037 4.57367420]
[-13.19812489 -4.15540218]
[-24.81250000 -13.65620327]
[-35.78752899 -23.88887787]
[-46.07718277 -34.81050491]
[-55.63829422 -46.37528229]
[-64.43077087 -58.53469086]
[-72.41772461 -71.23773956]
[-79.56566620 -84.43114471]
[-85.84459686 -98.05956268]
[-91.22820282 -112.06584167]
[-95.69387817 -126.39122772]
[-99.22291565 -140.97563171]
[-101.80049896 -155.75787354]
[-103.41582489 -170.67597961]
[-104.06210327 -185.66734314]
[-103.73664093 -200.66911316]
[-102.44080353 -215.61834717]
[-100.18000793 -230.45236206]
[-96.96375275 -245.10891724]
[-92.80551910 -259.52655029]
[-87.72275543 -273.64477539]
[-81.73677826 -287.40438843]
[-74.87268829 -300.74768066]
[-67.15928650 -313.61865234]
[-58.62892151 -325.96337891]
[-49.31737518 -337.73001099]
[-39.26369858 -348.86923218]
[-28.51006317 -359.33435059]
[-17.10157394 -369.08142090]
[-5.08608198 -378.06954956]
[7.48601437 -386.26110840]
[20.56198311 -393.62167358]
[34.08697891 -400.12039185]
[48.00427246 -405.73001099]
[62.25548935 -410.42700195]
[76.78086090 -414.19165039]
[91.51944733 -417.00817871]
[106.40944672 -418.86477661]
[121.38838959 -419.75366211]
[136.39346313 -419.67108154]
[151.36170959 -418.61737061]
[166.23037720 -416.59701538]
[180.93707275 -413.61843872]
[195.42012024 -409.69412231]
[209.61877441 -404.84057617]
[223.47348022 -399.07809448]
[236.92613220 -392.43090820]
[249.92028809 -384.92687988]
[262.40145874 -376.59744263]
[274.31729126 -367.47760010]
[285.61782837 -357.60556030]
[296.25561523 -347.02273560]
[306.18606567 -335.77349854]
[315.36755371 -323.90509033]
[323.76153564 -311.46722412]
[331.33279419 -298.51214600]
[338.04959106 -285.09411621]
[343.88375854 -271.26943970]
[348.81082153 -257.09613037]
[352.81011963 -242.63359070]
[355.86486816 -227.94253540]
[357.96224976 -213.08453369]
[359.09347534 -198.12194824]
[359.25381470 -183.11750793]
[358.44256592 -168.13415527]
[356.66311646 -153.23474121]
[353.92300415 -138.48175049]
[350.23364258 -123.93708038]
[345.61056519 -109.66171265]
[340.07312012 -95.71553802]
[333.64456177 -82.15705872]
[326.35186768 -69.04312134]
[318.22555542 -56.42875671]
[309.29980469 -44.36685562]
[299.61196899 -32.90801620]
[289.20272827 -22.10030365]
[278.11572266 -11.98904705]
[266.39749146 -2.61665654]
[254.09715271 5.97755527]
[241.26629639 13.75754166]
[227.95875549 20.69067001]
[214.23034668 26.74786186]
[200.13864136 31.90370750]
[185.74275208 36.13658524]
[171.10305786 39.42873764]
[156.28096008 41.76636124]
[141.33863831 43.13964462]
[126.33876038 43.54282761]
[111.34424591 42.97422791]
[109.80695343 57.89524460]
[108.26966095 72.81626129]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.11001587 250.94493103]
[135.33016968 258.20291138]
[146.32945251 268.52117920]
[154.41641235 281.25112915]
[159.08271790 295.59255981]
[160.03503418 310.64395142]
[157.21350098 325.45913696]
[150.79547119 339.10684204]
[141.18440247 350.72912598]
[128.98443604 359.59545898]
[114.96250153 365.14846802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[29 129]
[30 128]
[31 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
