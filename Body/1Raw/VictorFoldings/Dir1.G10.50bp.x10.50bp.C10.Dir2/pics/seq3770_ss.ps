%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUACGCCGGGGGGGGGGCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACxxxxxxxxxxACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUCCCCCCCCCCAAACUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[89.33506775 394.82141113]
[75.48912811 388.80538940]
[63.78046799 379.27597046]
[55.07794189 366.94030762]
[50.02733994 352.71377563]
[49.00344849 337.65209961]
[52.08224869 322.87295532]
[59.03527069 309.47302246]
[69.34655762 298.44668579]
[82.25093842 290.61218262]
[96.79082489 286.55087280]
[96.79082489 271.55087280]
[96.79082489 256.55087280]
[96.79082489 241.55087280]
[96.79082489 226.55087280]
[96.79082489 211.55087280]
[96.79082489 196.55087280]
[96.79082489 181.55087280]
[96.79082489 166.55087280]
[96.79082489 151.55087280]
[84.89844513 142.40913391]
[70.40284729 146.26629639]
[55.90724945 150.12345886]
[44.56073380 161.14920044]
[30.27183914 156.94482422]
[15.77624321 160.80198669]
[1.28064692 164.65914917]
[-4.17943573 179.18385315]
[-17.15264511 187.69709778]
[-32.65052032 186.92538452]
[-44.71380615 177.16542053]
[-48.70392990 162.17013550]
[-43.08660126 147.70552063]
[-30.02180290 139.33349609]
[-14.53321362 140.27330017]
[-2.57651258 150.16354370]
[11.91908360 146.30638123]
[26.41468048 142.44923401]
[36.72437286 131.69937134]
[52.05009079 135.62785339]
[66.54568481 131.77069092]
[81.04128265 127.91353607]
[65.91197205 112.09835815]
[63.03527069 88.88559723]
[50.09721375 81.29568481]
[36.78290558 88.95236206]
[21.42407036 88.91004181]
[8.15216160 81.18009949]
[0.53725523 67.84185028]
[0.62772232 52.48322678]
[8.39922810 39.23561096]
[21.76127625 31.66255188]
[37.11954117 31.80116081]
[50.34273148 39.61415482]
[57.87387085 52.99987411]
[57.68712234 68.35762787]
[70.62517548 75.94754028]
[77.28275299 72.49404144]
[66.59933472 61.96482086]
[73.31201935 48.55065536]
[88.14395905 50.78978348]
[90.59791565 65.58704376]
[97.25549316 62.13354111]
[98.50236511 47.18545532]
[99.74923706 32.23736572]
[100.99611664 17.28927994]
[102.24298859 2.34119344]
[88.14830017 -3.09170747]
[76.15600586 -12.27656555]
[67.23827362 -24.46880722]
[62.11802292 -38.68005753]
[61.21032715 -53.75828171]
[64.58876801 -68.48114777]
[71.97946930 -81.65514374]
[82.78330994 -92.21231079]
[96.12445831 -99.29682922]
[110.92141724 -102.33438110]
[125.97465515 -101.07873535]
[140.06388855 -95.63167572]
[152.04693604 -86.43477631]
[160.95242310 -74.23358154]
[166.05839539 -60.01719666]
[166.95094299 -44.93806839]
[163.55770874 -30.21860313]
[156.15377808 -17.05204010]
[145.33934021 -6.50573158]
[131.99107361 0.56537873]
[117.19107819 3.58806801]
[115.94419861 18.53615570]
[114.69732666 33.48424149]
[113.45045471 48.43232727]
[112.20357513 63.38041687]
[131.66532898 80.89818573]
[134.89019775 105.75666046]
[121.76258850 125.78736115]
[136.75529480 125.31932068]
[151.74798584 124.85128021]
[166.74067688 124.38323975]
[182.12324524 114.31562805]
[197.26528931 123.13143158]
[212.24501038 122.35158539]
[221.47908020 113.28595734]
[234.01403809 112.97911072]
[243.07983398 121.04872131]
[258.07254028 120.58068085]
[273.06521606 120.11263275]
[288.05792236 119.64459229]
[303.05062866 119.17655182]
[318.04330444 118.70851135]
[328.68045044 107.01976776]
[344.47094727 106.35964966]
[356.04656982 117.11978149]
[356.53970337 132.91638184]
[345.65780640 144.37759399]
[329.85687256 144.70368958]
[318.51135254 133.70120239]
[303.51864624 134.16925049]
[288.52597046 134.63728333]
[273.53326416 135.10533142]
[258.54055786 135.57337952]
[243.54786682 136.04141235]
[229.19104004 146.08538818]
[213.02484131 137.33129883]
[198.04513550 138.11114502]
[189.68150330 146.90641785]
[177.16442871 147.64259338]
[167.20872498 139.37593079]
[152.21603394 139.84397888]
[137.22332764 140.31201172]
[122.23063660 140.78005981]
[111.79082489 151.55087280]
[111.79082489 166.55087280]
[111.79082489 181.55087280]
[111.79082489 196.55087280]
[111.79082489 211.55087280]
[111.79082489 226.55087280]
[111.79082489 241.55087280]
[111.79082489 256.55087280]
[111.79082489 271.55087280]
[111.79082489 286.55087280]
[126.33071136 290.61218262]
[139.23509216 298.44668579]
[149.54637146 309.47302246]
[156.49938965 322.87295532]
[159.57820129 337.65209961]
[158.55430603 352.71377563]
[153.50370789 366.94030762]
[144.80117798 379.27597046]
[133.09251404 388.80538940]
[119.24657440 394.82141113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 42]
[22 41]
[23 40]
[25 38]
[26 37]
[27 36]
[44 57]
[45 56]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[95 130]
[96 129]
[97 128]
[98 127]
[100 124]
[101 123]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
