%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAGAAAAGGGGGGGGGGACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUxxxxxxxxxxAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCCCCCCCCCCCUAAUAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[84.54022980 420.22711182]
[71.32003021 412.95462036]
[60.43322754 402.50762939]
[52.62209702 389.59838867]
[48.41921616 375.10705566]
[48.11114502 360.02172852]
[51.71888351 345.37091064]
[58.99645615 332.15350342]
[69.44766235 321.27075195]
[82.35992432 313.46459961]
[96.85286713 309.26730347]
[96.54080963 294.27056885]
[96.22875214 279.27380371]
[95.91669464 264.27706909]
[95.60463715 249.28030396]
[95.29257965 234.28355408]
[94.98052979 219.28678894]
[94.66847229 204.29003906]
[94.35641479 189.29328918]
[94.04435730 174.29653931]
[93.73229980 159.29977417]
[93.42024231 144.30302429]
[84.33955383 142.51245117]
[75.72024536 138.85990906]
[67.94409180 133.46028137]
[61.36489105 126.50672913]
[56.29247665 118.26389313]
[52.97828674 109.05802917]
[51.60317230 99.26406860]
[52.26806641 89.29042816]
[37.26887894 89.13439178]
[22.26968956 88.97835541]
[7.27050209 88.82231903]
[-7.72868633 88.66628265]
[-22.72787476 88.51024628]
[-37.72706223 88.35420990]
[-53.62823486 94.23545837]
[-63.68152237 80.58380127]
[-53.34640503 67.14424133]
[-37.57102585 73.35501862]
[-22.57183838 73.51105499]
[-7.57264996 73.66709137]
[7.42653847 73.82313538]
[22.42572784 73.97917175]
[37.42491531 74.13520813]
[52.42410278 74.29124451]
[61.31645203 62.21125412]
[56.71088791 47.93579102]
[52.10532379 33.66033173]
[44.78622055 20.56717682]
[35.03856659 9.16615677]
[25.29091454 -2.23486471]
[15.54326248 -13.63588524]
[5.79561043 -25.03690720]
[-3.95204163 -36.43792725]
[-19.72580719 -37.41969681]
[-30.12254906 -49.32277679]
[-28.97406387 -65.08528137]
[-16.96172905 -75.35559845]
[-1.21224821 -74.04052734]
[8.93049049 -61.92027664]
[7.44897938 -46.18558121]
[17.19663239 -34.78455734]
[26.94428444 -23.38353729]
[36.69193649 -11.98251629]
[46.43958664 -0.58149576]
[56.18724060 10.81952477]
[53.83112335 -3.99427605]
[55.86350250 -18.85595322]
[62.11039734 -32.49326706]
[72.03704071 -43.73878860]
[84.79365540 -51.62984085]
[99.28820801 -55.49091339]
[114.27989197 -54.99147034]
[128.48533630 -50.17427063]
[140.68847656 -41.45169067]
[149.84465027 -29.57042885]
[155.17005920 -15.54758930]
[156.20881653 -0.58359903]
[152.87197876 14.04054356]
[145.44522095 27.07293320]
[134.56428528 37.39792633]
[121.16067505 44.13165283]
[106.38178253 46.69766617]
[91.49277496 44.87630081]
[77.76822662 38.82347488]
[66.38078308 29.05476761]
[70.98635101 43.33022690]
[75.59191132 57.60569000]
[90.74845123 52.80554962]
[106.37281036 53.16482162]
[120.78578949 58.47047424]
[132.49459839 67.98719025]
[140.34730530 80.55402374]
[154.75952148 76.39614105]
[162.19494629 70.97707367]
[169.51493835 72.30501556]
[184.01054382 68.44786072]
[198.50613403 64.59069824]
[213.00172424 60.73353958]
[227.49732971 56.87638092]
[230.82383728 41.93673706]
[240.72096252 30.26174164]
[254.91441345 24.53422165]
[270.14263916 26.07032013]
[282.90631104 34.51705170]
[290.27243042 47.93341827]
[290.54830933 63.23643875]
[283.67056274 76.90959167]
[271.21963501 85.81089020]
[256.05667114 87.89486694]
[241.66598511 82.68265533]
[231.35449219 71.37197876]
[216.85888672 75.22913361]
[202.36329651 79.08629608]
[187.86769104 82.94345856]
[173.37210083 86.80061340]
[158.91740417 90.80835724]
[144.50520325 94.96623993]
[144.72508240 102.39127350]
[143.71473694 109.75052643]
[141.50195312 116.84157562]
[138.14759827 123.46936798]
[133.74394226 129.45161438]
[128.41210938 134.62373352]
[122.29875946 138.84349060]
[115.57204437 141.99479675]
[108.41699982 143.99096680]
[108.72905731 158.98771667]
[109.04111481 173.98448181]
[109.35316467 188.98123169]
[109.66522217 203.97798157]
[109.97727966 218.97473145]
[110.28933716 233.97149658]
[110.60139465 248.96824646]
[110.91345215 263.96499634]
[111.22550201 278.96176147]
[111.53755951 293.95849609]
[111.84961700 308.95526123]
[126.50460815 312.54602051]
[139.73042297 319.80828857]
[150.62528992 330.24688721]
[158.44638062 343.15008545]
[162.66046143 357.63815308]
[162.98017883 372.72326660]
[159.38374329 387.37686157]
[152.11637878 400.59985352]
[141.67358398 411.49069214]
[128.76734924 419.30682373]
[114.27766418 423.51528931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[47 89]
[48 88]
[49 87]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[94 119]
[95 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
