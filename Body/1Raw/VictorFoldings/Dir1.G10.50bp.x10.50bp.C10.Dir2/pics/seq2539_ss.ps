%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGCAUAAGGGGGGGGGGGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUAxxxxxxxxxxUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCCCCCCCCCCCGCAUAA\
) } def
/len { sequence length } bind def

/coor [
[90.92361450 421.57385254]
[77.07767487 415.55783081]
[65.36901855 406.02841187]
[56.66649246 393.69271851]
[51.61589050 379.46621704]
[50.59199905 364.40454102]
[53.67079926 349.62536621]
[60.62382126 336.22543335]
[70.93510437 325.19909668]
[83.83948517 317.36459351]
[98.37937164 313.30328369]
[98.37937164 298.30328369]
[98.37937164 283.30328369]
[98.37937164 268.30328369]
[98.37937164 253.30328369]
[98.37937164 238.30328369]
[98.37937164 223.30328369]
[98.37937164 208.30328369]
[98.37937164 193.30328369]
[98.37937164 178.30328369]
[97.75539398 163.31626892]
[96.50852203 148.36817932]
[95.26164246 133.42008972]
[85.31446838 130.39227295]
[76.76081085 124.48049927]
[70.41233063 116.24575806]
[66.87144470 106.46944427]
[51.87874985 106.00140381]
[36.88605499 105.53336334]
[21.89336014 105.06532288]
[6.90066290 104.59727478]
[0.68005508 118.46711731]
[-10.37822628 128.89701843]
[-24.58787346 134.29649353]
[-39.78201675 133.84217834]
[-53.64366150 127.60332489]
[-64.05900574 116.53133392]
[-69.43978882 102.31459808]
[-68.96547699 87.12106323]
[-62.70840454 73.26763916]
[-51.62271881 62.86686325]
[-37.39891815 57.50478745]
[-22.20602036 57.99908829]
[-8.36083603 64.27438354]
[2.02534461 75.37373352]
[7.36870527 89.60458374]
[22.36140060 90.07262421]
[37.35409927 90.54066467]
[52.34679413 91.00870514]
[67.33949280 91.47675323]
[78.06497192 74.34441376]
[96.65597534 66.41172791]
[98.52358246 51.52844620]
[100.39119720 36.64516449]
[102.25881195 21.76188469]
[86.22973633 10.85465717]
[79.04887390 -8.07592964]
[84.22836304 -28.53612709]
[100.84857941 -42.89620590]
[98.67174530 -57.73741150]
[96.49490356 -72.57861328]
[81.51955414 -74.48686981]
[67.61482239 -80.36572266]
[55.81252670 -89.77893066]
[46.98847961 -102.02796173]
[41.79748535 -116.20386505]
[40.62474823 -131.25468445]
[43.55729675 -146.06356812]
[50.37751007 -159.53157043]
[60.57928848 -170.65930176]
[73.40558624 -178.62098694]
[87.90461731 -182.82583618]
[103.00045013 -182.96182251]
[117.57286835 -179.01884460]
[130.54051208 -171.28948975]
[140.94108582 -160.34735107]
[148.00280762 -147.00439453]
[151.20166016 -132.25074768]
[150.30023193 -117.18123627]
[145.36544800 -102.91412354]
[136.76348877 -90.50812531]
[125.13269043 -80.88383484]
[111.33611298 -74.75545502]
[113.51294708 -59.91424942]
[115.68978882 -45.07304382]
[130.18537903 -41.21588135]
[139.45033264 -53.01252365]
[148.71528625 -64.80916595]
[157.98022461 -76.60580444]
[159.76695251 -92.90732574]
[174.88475037 -99.26217651]
[187.78173828 -89.13302612]
[185.19059753 -72.93987274]
[169.77687073 -67.34085083]
[160.51191711 -55.54421234]
[151.24696350 -43.74757385]
[141.98202515 -31.95093346]
[148.38832092 -17.49986076]
[148.12632751 -2.18673825]
[141.65672302 11.15033340]
[130.55311584 20.21138954]
[117.14208984 23.62949944]
[115.27447510 38.51277924]
[113.40686798 53.39605713]
[111.53925323 68.27933502]
[125.65558624 78.06497192]
[133.12855530 93.53055573]
[148.12124634 93.99859619]
[163.11393738 94.46663666]
[178.10664368 94.93467712]
[193.09933472 95.40272522]
[205.72938538 85.51023102]
[221.30442810 89.35697174]
[227.87663269 103.99205780]
[220.40435791 118.18869781]
[204.61970520 121.05644989]
[192.63130188 110.39541626]
[177.63859558 109.92737579]
[162.64590454 109.45933533]
[147.65321350 108.99129486]
[132.66050720 108.52324677]
[128.02243042 118.81748962]
[120.24891663 127.00622559]
[110.20973206 132.17321777]
[111.45660400 147.12130737]
[112.70348358 162.06939697]
[115.40348816 165.65707397]
[116.65351868 169.53115845]
[116.54641724 173.18771362]
[115.33303833 176.20793152]
[113.37937164 178.30328369]
[113.37937164 193.30328369]
[113.37937164 208.30328369]
[113.37937164 223.30328369]
[113.37937164 238.30328369]
[113.37937164 253.30328369]
[113.37937164 268.30328369]
[113.37937164 283.30328369]
[113.37937164 298.30328369]
[113.37937164 313.30328369]
[127.91925812 317.36459351]
[140.82363892 325.19909668]
[151.13491821 336.22543335]
[158.08795166 349.62536621]
[161.16674805 364.40454102]
[160.14285278 379.46621704]
[155.09225464 393.69271851]
[146.38972473 406.02841187]
[134.68106079 415.55783081]
[120.83512878 421.57385254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 126]
[22 125]
[23 124]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[52 105]
[53 104]
[54 103]
[55 102]
[59 85]
[60 84]
[61 83]
[86 97]
[87 96]
[88 95]
[89 94]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
