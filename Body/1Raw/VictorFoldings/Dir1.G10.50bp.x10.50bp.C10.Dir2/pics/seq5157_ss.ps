%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCUCCUCGGGGGGGGGGACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCCCCCCCCCCCUUCUCGUC\
) } def
/len { sequence length } bind def

/coor [
[90.24631500 383.05163574]
[77.02611542 375.77917480]
[66.13931274 365.33215332]
[58.32818222 352.42291260]
[54.12530136 337.93161011]
[53.81723022 322.84625244]
[57.42496872 308.19543457]
[64.70254517 294.97805786]
[75.15374756 284.09527588]
[88.06600952 276.28912354]
[102.55895233 272.09185791]
[102.24689484 257.09509277]
[101.93483734 242.09834290]
[101.62277985 227.10157776]
[101.31072235 212.10482788]
[100.99866486 197.10807800]
[100.68661499 182.11132812]
[100.37455750 167.11456299]
[100.06250000 152.11781311]
[99.75044250 137.12106323]
[99.43838501 122.12430573]
[92.01638794 135.15940857]
[77.09146118 136.65824890]
[67.22570801 125.35927582]
[70.72300720 110.77267456]
[84.63980103 105.17580414]
[69.82204437 102.84469604]
[55.00428391 100.51359558]
[40.18652725 98.18248749]
[25.36876869 95.85138702]
[16.33876610 97.61515808]
[10.26830196 93.31456757]
[-4.49775362 90.67569733]
[-11.83862305 103.91920471]
[-23.08357430 114.05970764]
[-37.01283646 119.99724579]
[-52.11546707 121.08776093]
[-66.75325012 117.21295929]
[-79.33838654 108.79315948]
[-88.50572968 96.74166107]
[-93.26087952 82.36573792]
[-93.08803558 67.22476959]
[-88.00594330 52.96114349]
[-78.56586456 41.12207031]
[-65.79180145 32.99175644]
[-51.06937790 29.45212746]
[-35.99557495 30.88713074]
[-22.20548820 37.14110947]
[-11.19496250 47.53567505]
[-4.15833569 60.94330597]
[-1.85888946 75.90964508]
[12.90716648 78.54850769]
[27.69987297 81.03363037]
[42.51763153 83.36473083]
[57.33538818 85.69583893]
[72.15314484 88.02693939]
[86.97090912 90.35804749]
[100.35719299 83.58992767]
[107.26419067 70.27477264]
[114.17118835 56.95961761]
[112.88917542 38.62014389]
[127.97270203 29.70458221]
[134.60119629 16.24861717]
[121.95830536 24.32061577]
[107.72739410 29.06204796]
[92.76956177 30.18601990]
[77.98989105 27.62451935]
[64.28267670 21.53253746]
[52.47732162 12.27869606]
[43.28815079 0.42293024]
[37.27119446 -13.31738377]
[34.79052734 -28.11083794]
[35.99625015 -43.06230164]
[40.81541061 -57.26707840]
[48.95640182 -69.86566162]
[59.92662430 -80.09572601]
[73.06228638 -87.33825684]
[87.56857300 -91.15502930]
[102.56771851 -91.31509399]
[117.15214539 -87.80876160]
[130.43937683 -80.84819794]
[141.62542725 -70.85457611]
[150.03341675 -58.43259430]
[155.15461731 -44.33389282]
[156.67913818 -29.41156578]
[154.51472473 -14.56854248]
[148.79335022 -0.70467567]
[160.87333679 -9.59702492]
[172.95332336 -18.48937416]
[185.03330994 -27.38172531]
[191.98747253 -44.39993286]
[209.45816040 -45.73235703]
[221.35054016 -54.87409210]
[233.24291992 -64.01582336]
[245.13529968 -73.15756226]
[250.89434814 -88.51220703]
[267.11358643 -90.93476105]
[277.10803223 -77.93310547]
[270.59625244 -62.88222504]
[254.27702332 -61.26517868]
[242.38464355 -52.12344360]
[230.49226379 -42.98171234]
[218.59988403 -33.83997726]
[216.70344543 -21.85203171]
[206.81411743 -14.14357471]
[193.92565918 -15.30173588]
[181.84567261 -6.40938663]
[169.76568604 2.48296309]
[157.68569946 11.37531281]
[148.05717468 22.87711525]
[141.42866516 36.33308029]
[145.02490234 47.92507935]
[139.55992126 59.21015167]
[127.48634338 63.86661530]
[120.57934570 77.18177032]
[113.67234802 90.49692535]
[122.48220062 78.35664368]
[135.43844604 70.79783630]
[150.34242249 69.10323334]
[164.66490173 73.56041718]
[175.97537231 83.41299438]
[182.35443115 96.98899078]
[182.71957397 111.98454285]
[177.00880432 125.85491180]
[166.19126892 136.24629211]
[152.10269165 141.39526367]
[137.13389587 140.42805481]
[123.82511902 133.50878906]
[114.43514252 121.81225586]
[114.74720001 136.80900574]
[115.05924988 151.80575562]
[115.37130737 166.80252075]
[115.68336487 181.79927063]
[115.99542236 196.79602051]
[116.30747986 211.79277039]
[116.61953735 226.78953552]
[116.93158722 241.78628540]
[117.24364471 256.78305054]
[117.55570221 271.77978516]
[132.21069336 275.37054443]
[145.43650818 282.63281250]
[156.33137512 293.07141113]
[164.15246582 305.97460938]
[168.36654663 320.46267700]
[168.68626404 335.54779053]
[165.08982849 350.20138550]
[157.82246399 363.42440796]
[147.37966919 374.31521606]
[134.47343445 382.13134766]
[119.98374939 386.33981323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[32 52]
[33 51]
[58 116]
[59 115]
[60 114]
[62 111]
[63 110]
[87 109]
[88 108]
[89 107]
[90 106]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
