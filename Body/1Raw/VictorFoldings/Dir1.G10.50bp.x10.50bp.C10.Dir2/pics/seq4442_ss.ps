%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAAUCUCGGGGGGGGGGCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUxxxxxxxxxxUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUCCCCCCCCCCUUACCAUCUC\
) } def
/len { sequence length } bind def

/coor [
[86.68030548 360.49871826]
[72.83436584 354.48269653]
[61.12570190 344.95327759]
[52.42317581 332.61761475]
[47.37257385 318.39108276]
[46.34868240 303.32940674]
[49.42748260 288.55023193]
[56.38050461 275.15029907]
[66.69178772 264.12399292]
[79.59616852 256.28945923]
[94.13605499 252.22816467]
[94.13605499 237.22816467]
[94.13605499 222.22816467]
[94.13605499 207.22816467]
[94.13605499 192.22816467]
[94.13605499 177.22816467]
[94.13605499 162.22816467]
[94.13605499 147.22816467]
[94.13605499 132.22816467]
[94.13605499 117.22815704]
[83.47443390 106.67686462]
[68.47524261 106.83290100]
[53.47605515 106.98893738]
[38.47930145 107.30099487]
[23.48660469 107.76903534]
[8.51581192 108.70466614]
[-6.41849518 110.10697174]
[-21.35280228 111.50927734]
[-25.79810715 126.04570007]
[-35.47173691 137.77128601]
[-48.89854050 144.89794922]
[-64.03102112 146.33895874]
[-78.56158447 141.87452698]
[-90.27443695 132.18548584]
[-97.38343811 118.74932098]
[-98.80452728 103.61495209]
[-94.32099152 89.09027100]
[-84.61654663 77.39018250]
[-71.17104340 70.29885864]
[-56.03482437 68.89768219]
[-41.51605225 73.40031433]
[-29.82873535 83.12014771]
[-22.75510597 96.57496643]
[-7.82079887 95.17266083]
[7.11350870 93.77036285]
[9.65600204 91.23989868]
[13.57572174 89.84796906]
[18.30847359 90.23967743]
[23.01856232 92.77634430]
[38.01125717 92.30830383]
[44.64157104 88.93419647]
[53.32001877 91.98975372]
[68.31920624 91.83371735]
[83.31839752 91.67768097]
[84.27086639 87.04115295]
[86.52183533 82.46390533]
[82.51409912 68.00921631]
[77.02706146 54.04882812]
[70.12006378 40.73367310]
[63.21306610 27.41851616]
[56.30606842 14.10336113]
[41.50843048 7.90582895]
[37.26646423 -7.56625271]
[46.83424759 -20.44402695]
[62.87219620 -20.84876633]
[73.07736206 -8.46999168]
[69.62122345 7.19636202]
[76.52822113 20.51151848]
[83.43521881 33.82667542]
[90.34222412 47.14183044]
[93.24845886 32.42606354]
[103.01921082 21.04482841]
[117.12533569 15.94412327]
[131.91551208 18.44425011]
[143.56135559 27.89805794]
[149.04835510 41.85845566]
[146.95623779 56.71184158]
[137.82652283 68.61345673]
[124.02243042 74.48261261]
[109.11709595 72.80007935]
[96.96878815 64.00148010]
[100.97652435 78.45616913]
[114.63276672 84.66157532]
[128.15695190 78.17340851]
[137.25263977 65.22817230]
[152.07443237 66.69911194]
[165.59863281 60.21094513]
[179.12281799 53.72278214]
[192.64700317 47.23461533]
[206.17118835 40.74645233]
[219.69538879 34.25828552]
[233.21957397 27.77012062]
[238.69169617 11.18720245]
[254.14604187 3.80833650]
[269.85153198 9.74088573]
[283.23782349 2.97277117]
[296.62411499 -3.79534340]
[310.01040649 -10.56345844]
[323.39666748 -17.33157349]
[329.74780273 -32.06394196]
[345.26318359 -36.14472961]
[358.04071045 -26.44350243]
[358.27859497 -10.40221405]
[345.79434204 -0.32636613]
[330.16479492 -3.94528818]
[316.77850342 2.82282662]
[303.39221191 9.59094143]
[290.00595093 16.35905647]
[276.61965942 23.12717056]
[274.33663940 35.84663010]
[264.99102783 45.05171585]
[251.85360718 47.20494080]
[239.70773315 41.29431152]
[226.18354797 47.78247452]
[212.65936279 54.27064133]
[199.13517761 60.75880814]
[185.61097717 67.24697113]
[172.08679199 73.73513794]
[158.56260681 80.22330475]
[150.43424988 92.70446014]
[134.64512634 91.69760132]
[121.12093353 98.18576050]
[135.63916016 94.41469574]
[149.76776123 99.45282745]
[158.62426758 111.55911255]
[159.14811707 126.54996490]
[151.15829468 139.24494934]
[137.41584778 145.25703430]
[122.66979218 142.50860596]
[112.01596069 131.94944763]
[109.13605499 117.22815704]
[109.13605499 132.22816467]
[109.13605499 147.22816467]
[109.13605499 162.22816467]
[109.13605499 177.22816467]
[109.13605499 192.22816467]
[109.13605499 207.22816467]
[109.13605499 222.22816467]
[109.13605499 237.22816467]
[109.13605499 252.22816467]
[123.67594147 256.28945923]
[136.58032227 264.12399292]
[146.89160156 275.15029907]
[153.84463501 288.55023193]
[156.92343140 303.32940674]
[155.89953613 318.39108276]
[150.84893799 332.61761475]
[142.14640808 344.95327759]
[130.43774414 354.48269653]
[116.59181213 360.49871826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 54]
[22 53]
[23 52]
[24 50]
[25 49]
[26 45]
[27 44]
[28 43]
[56 82]
[57 81]
[58 70]
[59 69]
[60 68]
[61 67]
[83 122]
[84 121]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
