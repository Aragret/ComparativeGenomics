%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCACUCUGGGGGGGGGGGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAxxxxxxxxxxAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGCCCCCCCCCCACCCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[86.26280975 397.54144287]
[71.77311707 393.33297729]
[58.86688614 385.51687622]
[48.42408371 374.62603760]
[41.15671921 361.40301514]
[37.56029510 346.74942017]
[37.88001633 331.66433716]
[42.09408569 317.17626953]
[49.91518402 304.27304077]
[60.81005096 293.83444214]
[74.03585815 286.57220459]
[88.69084930 282.98141479]
[89.00290680 267.98468018]
[89.31496429 252.98791504]
[89.62702179 237.99116516]
[89.93907928 222.99441528]
[90.25113678 207.99765015]
[90.56318665 193.00090027]
[90.87524414 178.00415039]
[91.18730164 163.00740051]
[91.49935913 148.01063538]
[91.81141663 133.01388550]
[82.45433044 132.54602051]
[72.90373993 129.33483887]
[63.97408295 123.28181458]
[56.50873566 114.52967834]
[51.30927658 103.46844482]
[49.06422806 90.72088623]
[34.16232681 92.43357086]
[19.26042557 94.14626312]
[4.35852242 95.85895538]
[-4.10807180 109.00622559]
[-19.05998611 113.58599854]
[-33.43738174 107.43583679]
[-40.45169449 93.45966339]
[-36.79098129 78.25659943]
[-24.18371391 69.00506592]
[-8.58266354 70.07334900]
[2.64583278 80.95704651]
[17.54773521 79.24436188]
[32.44963837 77.53166962]
[47.35153961 75.81897736]
[48.97695160 68.49723053]
[37.92051315 58.36041260]
[52.22777939 53.85372925]
[53.85319138 46.53197861]
[41.07583237 38.67455292]
[28.29847717 30.81712723]
[12.42219162 33.12431717]
[0.81868863 22.04558754]
[2.38918185 6.07958889]
[15.92892361 -2.52592993]
[31.05138206 2.83044863]
[36.15590286 18.03976822]
[48.93325806 25.89719391]
[61.71061707 33.75461960]
[68.25719452 30.09506798]
[60.93830490 17.00179100]
[74.03170013 9.68312073]
[81.35034943 22.77596283]
[87.89692688 19.11640930]
[87.89692688 4.11640930]
[73.20834351 0.77078873]
[59.63272476 -5.75993824]
[47.85102463 -15.14819241]
[38.45420837 -26.92306328]
[31.91361618 -40.49392700]
[28.55731964 -55.18008041]
[28.55366898 -70.24486542]
[31.90284920 -84.93264008]
[38.43686295 -98.50666809]
[47.82797241 -110.28609467]
[59.60512161 -119.68005371]
[73.17757416 -126.21736145]
[87.86453247 -129.57009888]
[102.92932129 -129.57009888]
[117.61627960 -126.21736145]
[131.18873596 -119.68005371]
[142.96588135 -110.28609467]
[152.35699463 -98.50666809]
[158.89100647 -84.93264008]
[162.24018860 -70.24486542]
[162.23652649 -55.18008041]
[158.88023376 -40.49392700]
[152.33964539 -26.92306328]
[142.94282532 -15.14819241]
[131.16113281 -5.75993824]
[117.58551025 0.77078873]
[102.89692688 4.11640930]
[102.89692688 19.11640930]
[110.08831024 5.95267105]
[117.27969360 -7.21106768]
[121.04670715 -21.73035049]
[131.09153748 -32.87043381]
[145.14494324 -38.11464691]
[160.03210449 -36.27826691]
[172.38986206 -27.77614975]
[179.42645264 -14.52901936]
[179.55223083 0.47045332]
[172.73878479 13.83372402]
[160.52534485 22.54188347]
[145.66853333 24.62740707]
[131.76977539 30.26873207]
[117.87101746 35.91005707]
[132.77291870 37.62274933]
[147.67481995 39.33543777]
[162.57672119 41.04812622]
[177.47862244 42.76081848]
[192.38052368 44.47350693]
[207.28242493 46.18619537]
[222.18432617 47.89888763]
[237.08622742 49.61157608]
[248.31472778 38.72787857]
[263.91577148 37.65958786]
[276.52304077 46.91112137]
[280.18377686 62.11418533]
[273.16946411 76.09036255]
[258.79205322 82.24052429]
[243.84013367 77.66075134]
[235.37355042 64.51348114]
[220.47164917 62.80078888]
[205.56973267 61.08810043]
[190.66783142 59.37540817]
[175.76593018 57.66271973]
[160.86402893 55.95003128]
[145.96212769 54.23733902]
[131.06022644 52.52465057]
[116.15832520 50.81196213]
[142.82218933 102.48384857]
[106.80816650 133.32594299]
[106.49610901 148.32269287]
[106.18405914 163.31945801]
[105.87200165 178.31620789]
[105.55994415 193.31295776]
[105.24788666 208.30970764]
[104.93582916 223.30647278]
[104.62377167 238.30322266]
[104.31172180 253.29997253]
[103.99966431 268.29672241]
[103.68760681 283.29348755]
[118.18054199 287.49075317]
[131.09280396 295.29690552]
[141.54400635 306.17968750]
[148.82157898 319.39706421]
[152.42932129 334.04788208]
[152.12126160 349.13323975]
[147.91838074 363.62454224]
[140.10723877 376.53378296]
[129.22044373 386.98080444]
[116.00024414 394.25326538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[28 42]
[29 41]
[30 40]
[31 39]
[46 56]
[47 55]
[48 54]
[61 90]
[62 89]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
