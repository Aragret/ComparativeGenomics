%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCGUAUUAGGGGGGGGGGCUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAAxxxxxxxxxxAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCCCCCCCCCCCAUCCGUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 421.26565552]
[71.01555634 415.71264648]
[58.81560135 406.84631348]
[49.20452881 395.22399902]
[42.78650284 381.57629395]
[39.96496582 366.76110840]
[40.91728210 351.70971680]
[45.58358765 337.36831665]
[53.67055511 324.63833618]
[64.66983032 314.32006836]
[77.88998413 307.06210327]
[92.50000000 303.32064819]
[92.50000000 288.32064819]
[92.50000000 273.32064819]
[92.50000000 258.32064819]
[92.50000000 243.32066345]
[92.50000000 228.32066345]
[92.50000000 213.32066345]
[92.50000000 198.32066345]
[92.50000000 183.32066345]
[92.50000000 168.32066345]
[92.50000000 153.32066345]
[92.50000000 138.32066345]
[72.81756592 128.03280640]
[61.92847824 108.67652893]
[46.93559265 109.13845825]
[38.39331818 112.54805756]
[31.63082314 109.45275879]
[16.63161469 109.60675049]
[1.63240504 109.76074982]
[-13.36680412 109.91474915]
[-28.36601448 110.06874847]
[-35.28248978 123.72235107]
[-47.75859451 132.58831787]
[-62.92741013 134.62931824]
[-77.30325317 129.37634277]
[-87.58265686 118.03647614]
[-91.40349579 103.21555328]
[-87.88776398 88.31930542]
[-77.84335327 76.77078247]
[-63.57839584 71.22374725]
[-48.37087250 72.95287323]
[-35.71536255 81.56081390]
[-28.52000999 95.06953430]
[-13.52080154 94.91553497]
[1.47840810 94.76154327]
[16.47761726 94.60754395]
[31.47682762 94.45354462]
[46.47366333 94.14556885]
[61.46655273 93.68364716]
[63.56947327 85.94511414]
[67.20890045 78.79936981]
[72.23132324 72.54779053]
[78.42493439 67.45404053]
[85.52849579 63.73295212]
[93.24241638 61.54147720]
[101.24134064 60.97203445]
[109.18791199 62.04864502]
[116.74697113 64.72589874]
[125.66312408 52.66347122]
[134.57926941 40.60103989]
[143.49542236 28.53860664]
[152.41157532 16.47617531]
[161.32772827 4.41374445]
[170.24388123 -7.64868736]
[172.85246277 -16.46861076]
[179.46900940 -19.86473083]
[188.63093567 -31.74155426]
[177.98095703 -42.33311462]
[168.74247742 -54.17598724]
[161.06118774 -67.08338928]
[155.05824280 -80.85175323]
[150.82830811 -95.26393127]
[148.43811035 -110.09262848]
[147.92533875 -125.10396576]
[149.29806519 -140.06120300]
[152.53466797 -154.72842407]
[157.58409119 -168.87432861]
[164.36669922 -182.27581787]
[172.77549744 -194.72149658]
[182.67790222 -206.01510620]
[193.91772461 -215.97853088]
[206.31768799 -224.45462036]
[219.68223572 -231.30970764]
[233.80058289 -236.43566895]
[248.45005798 -239.75166321]
[263.39962769 -241.20539856]
[278.41354370 -240.77392578]
[293.25497437 -238.46408081]
[307.68984985 -234.31227112]
[321.49050903 -228.38397217]
[334.43933105 -220.77270508]
[346.33206177 -211.59849548]
[356.98114014 -201.00604248]
[366.21862793 -189.16239929]
[373.89883423 -176.25434875]
[379.90063477 -162.48547363]
[384.12933350 -148.07293701]
[386.51831055 -133.24404907]
[387.02981567 -118.23265839]
[385.65582275 -103.27554321]
[382.41796875 -88.60858917]
[377.36737061 -74.46310425]
[370.58364868 -61.06220245]
[362.17376709 -48.61722183]
[352.27041626 -37.32444382]
[341.02978516 -27.36196518]
[328.62908936 -18.88691711]
[315.26397705 -12.03295708]
[301.14520264 -6.90818453]
[286.49542236 -3.59342384]
[271.54571533 -2.14095378]
[256.53186035 -2.57368207]
[241.69064331 -4.88478374]
[227.25611877 -9.03780937]
[213.45593262 -14.96725941]
[200.50776672 -22.57961845]
[191.34582520 -10.70279503]
[182.30630493 1.26746380]
[173.39015198 13.32989502]
[164.47399902 25.39232635]
[155.55786133 37.45475769]
[146.64170837 49.51718903]
[137.72555542 61.57962036]
[128.80940247 73.64205170]
[137.09863281 87.81746674]
[138.82682800 104.14740753]
[133.68832397 119.74386597]
[122.59189606 131.84854126]
[107.50000000 138.32066345]
[107.50000000 153.32066345]
[107.50000000 168.32066345]
[107.50000000 183.32066345]
[107.50000000 198.32066345]
[107.50000000 213.32066345]
[107.50000000 228.32066345]
[107.50000000 243.32066345]
[107.50000000 258.32064819]
[107.50000000 273.32064819]
[107.50000000 288.32064819]
[107.50000000 303.32064819]
[122.11001587 307.06210327]
[135.33016968 314.32006836]
[146.32945251 324.63833618]
[154.41641235 337.36831665]
[159.08271790 351.70971680]
[160.03503418 366.76110840]
[157.21350098 381.57629395]
[150.79547119 395.22399902]
[141.18440247 406.84631348]
[128.98443604 415.71264648]
[114.96250153 421.26565552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[25 50]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[65 119]
[67 118]
[68 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
