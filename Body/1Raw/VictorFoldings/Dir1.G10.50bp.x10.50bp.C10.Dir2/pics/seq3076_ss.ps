%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAGGCCUGGGGGGGGGGACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUxxxxxxxxxxCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCCCCCCCCCCCAAAAAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[85.38067627 445.63211060]
[72.82245636 437.28094482]
[62.73623276 426.06851196]
[55.75603867 412.69958496]
[52.32065201 398.01458740]
[52.64603043 382.93664551]
[56.71171570 368.41351318]
[64.26213074 355.35818481]
[74.82266235 344.59127808]
[87.72946167 336.78964233]
[102.17118835 332.44369507]
[101.54721069 317.45666504]
[100.92323303 302.46966553]
[100.29925537 287.48263550]
[99.67527771 272.49563599]
[99.05130005 257.50860596]
[98.42732239 242.52159119]
[97.80334473 227.53457642]
[97.17936707 212.54756165]
[96.55538940 197.56054688]
[95.93141174 182.57353210]
[95.30743408 167.58651733]
[78.34828949 164.19627380]
[62.80009079 156.62265015]
[49.67603683 145.35919189]
[39.83135986 131.13987732]
[33.90759659 114.89133453]
[32.29077148 97.67238617]
[35.08624268 80.60511780]
[42.11183929 64.80172729]
[52.90974426 51.29204178]
[66.77629852 40.95642853]
[82.80789185 34.46841431]
[80.63105774 19.62720680]
[78.45422363 4.78600168]
[76.27738190 -10.05520439]
[74.10054779 -24.89640999]
[59.11515045 -24.03876495]
[44.11259842 -24.50890160]
[29.21030426 -26.30313683]
[14.52490425 -29.40742874]
[0.17133102 -33.79748154]
[-13.73807526 -39.43893814]
[-27.09445381 -46.28764725]
[-39.79327011 -54.29000092]
[-51.73513794 -63.38337326]
[-62.82659149 -73.49659729]
[-72.98082733 -84.55051422]
[-82.11837006 -96.45861816]
[-90.16770935 -109.12770081]
[-97.06584167 -122.45862579]
[-102.75878143 -136.34703064]
[-107.20197296 -150.68424988]
[-110.36064148 -165.35804749]
[-112.21006012 -180.25360107]
[-112.73576355 -195.25430298]
[-111.93363190 -210.24276733]
[-109.80995178 -225.10169983]
[-106.38132477 -239.71478271]
[-101.67460632 -253.96765137]
[-95.72662354 -267.74877930]
[-88.58392334 -280.95025635]
[-80.30241394 -293.46881104]
[-70.94691467 -305.20645142]
[-60.59064102 -316.07131958]
[-49.31464767 -325.97836304]
[-37.20718765 -334.85006714]
[-24.36301613 -342.61697388]
[-10.88266182 -349.21832275]
[3.12837410 -354.60241699]
[17.56043243 -358.72714233]
[32.30056000 -361.56018066]
[47.23339462 -363.07940674]
[62.24206543 -363.27291870]
[77.20910645 -362.13919067]
[92.01737213 -359.68710327]
[106.55097961 -355.93582153]
[120.69616699 -350.91473389]
[134.34223938 -344.66314697]
[147.38237000 -337.22994995]
[159.71453857 -328.67337036]
[171.24220276 -319.06030273]
[181.87515259 -308.46606445]
[191.53015137 -296.97351074]
[200.13165283 -284.67263794]
[207.61231995 -271.65966797]
[213.91363525 -258.03649902]
[218.98625183 -243.90969849]
[222.79048157 -229.38987732]
[225.29653931 -214.59063721]
[226.48483276 -199.62783813]
[226.34603882 -184.61856079]
[224.88127136 -169.68028259]
[222.10195923 -154.92993164]
[218.02987671 -140.48292542]
[212.69689941 -126.45235443]
[206.14474487 -112.94802094]
[198.42471313 -100.07562256]
[189.59721375 -87.93589783]
[179.73133850 -76.62386322]
[168.90431213 -66.22805023]
[157.20085144 -56.82981873]
[144.71257019 -48.50273132]
[131.53720093 -41.31195450]
[117.77785492 -35.31377029]
[103.54223633 -30.55511856]
[88.94174957 -27.07324600]
[91.11859131 -12.23204136]
[93.29542542 2.60916471]
[95.47225952 17.45037079]
[97.64910126 32.29157639]
[110.41079712 33.05545044]
[122.80178070 36.20316315]
[134.38079834 41.62262726]
[144.73556519 49.12085724]
[153.49731445 58.43085098]
[160.35409546 69.22109222]
[165.06170654 81.10733795]
[167.45251465 93.66633606]
[167.44140625 106.45086670]
[165.02877808 119.00569153]
[160.30050659 130.88374329]
[153.42500305 141.66204834]
[144.64707947 150.95680237]
[134.27931213 158.43702698]
[122.69087982 163.83636475]
[110.29444885 166.96253967]
[110.91842651 181.94955444]
[111.54240417 196.93656921]
[112.16638184 211.92358398]
[112.79035950 226.91059875]
[113.41433716 241.89761353]
[114.03831482 256.88464355]
[114.66229248 271.87164307]
[115.28627014 286.85867310]
[115.91024780 301.84567261]
[116.53422546 316.83270264]
[117.15820312 331.81970215]
[131.91120911 334.95016479]
[145.42184448 341.65191650]
[156.84082031 351.50369263]
[165.45033264 363.88623047]
[170.70918274 378.02114868]
[172.28678894 393.01986694]
[170.08398438 407.93960571]
[164.23924255 421.84246826]
[155.11994934 433.85452271]
[143.29939270 443.22067261]
[129.52056885 449.35217285]
[114.64967346 451.86358643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[33 111]
[34 110]
[35 109]
[36 108]
[37 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
