%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCACCCUCGGGGGGGGGGCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCxxxxxxxxxxACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCACCCCCCCCCCAUCAACCCUC\
) } def
/len { sequence length } bind def

/coor [
[40.19889450 240.57217407]
[29.87696648 235.71835327]
[19.94597626 230.10789490]
[10.46128654 223.77207947]
[1.47577262 216.74624634]
[-6.96046972 209.06954956]
[-14.80040932 200.78480530]
[-22.00033760 191.93817139]
[-28.52011681 182.57899475]
[-34.32339859 172.75942993]
[-47.84758759 179.24760437]
[-61.37177658 185.73576355]
[-74.89596558 192.22392273]
[-88.42015839 198.71209717]
[-101.94435120 205.20025635]
[-111.04003143 218.14549255]
[-125.86182404 216.67456055]
[-139.38601685 223.16271973]
[-152.91020203 229.65087891]
[-162.00588989 242.59611511]
[-176.82768250 241.12518311]
[-190.35188293 247.61334229]
[-203.87606812 254.10151672]
[-217.40025330 260.58966064]
[-224.05650330 275.18673706]
[-239.65341187 278.94384766]
[-252.22636414 268.97891235]
[-252.13047791 252.93614197]
[-239.43930054 243.12219238]
[-223.88842773 247.06549072]
[-210.36422729 240.57731628]
[-196.84004211 234.08915710]
[-183.31585693 227.60098267]
[-175.18751526 215.11982727]
[-159.39837646 216.12669373]
[-145.87417603 209.63853455]
[-132.34999084 203.15036011]
[-124.22164917 190.66920471]
[-108.43251038 191.67607117]
[-94.90832520 185.18789673]
[-81.38413239 178.69973755]
[-67.85993958 172.21157837]
[-54.33575439 165.72340393]
[-40.81156158 159.23524475]
[-48.39071655 136.28918457]
[-52.25662613 112.43505096]
[-52.31254578 88.26974487]
[-48.55707932 64.39797211]
[-41.08420181 41.41708374]
[-30.08091164 19.90214157]
[-15.82254696 0.39152652]
[-26.70137215 -9.93567848]
[-37.58019638 -20.26288414]
[-53.59067154 -21.28476906]
[-62.65558243 -34.52134705]
[-57.82110214 -49.81864548]
[-42.79583359 -55.44188690]
[-29.10587502 -47.07740402]
[-27.25299263 -31.14170837]
[-16.37416649 -20.81450272]
[-5.49534178 -10.48729897]
[11.28193378 -24.36162949]
[29.86109352 -35.71014786]
[49.86479187 -44.30236053]
[70.88674927 -49.96375656]
[92.50000000 -52.57935715]
[92.50000000 -67.57936096]
[92.50000000 -82.57936096]
[92.50000000 -97.57936096]
[78.72612762 -104.15531921]
[69.17620850 -116.06169128]
[65.74636841 -130.93444824]
[69.11760712 -145.82060242]
[78.62057495 -157.76448059]
[92.36843872 -164.39463806]
[107.63156128 -164.39463806]
[121.37942505 -157.76448059]
[130.88238525 -145.82060242]
[134.25363159 -130.93444824]
[130.82379150 -116.06169128]
[121.27387238 -104.15531921]
[107.50000000 -97.57936096]
[107.50000000 -82.57936096]
[107.50000000 -67.57936096]
[107.50000000 -52.57935715]
[118.17431641 -51.67862320]
[128.75927734 -50.03204727]
[139.20280457 -47.64772415]
[149.45356750 -44.53738022]
[159.46115112 -40.71631241]
[169.17636108 -36.20330811]
[178.55140686 -31.02055740]
[187.54019165 -25.19354630]
[196.09852600 -18.75092697]
[204.18432617 -11.72437954]
[211.75781250 -4.14845610]
[218.78176880 3.93959117]
[225.22163391 12.49999142]
[231.04576111 21.49065208]
[236.22550964 30.86736107]
[240.73539734 40.58401108]
[244.55325317 50.59282684]
[247.66029358 60.84458923]
[250.04127502 71.28888702]
[251.68444824 81.87436676]
[252.58175659 92.54897308]
[252.72879028 103.26022339]
[252.12480164 113.95543671]
[250.77279663 124.58203125]
[248.67938232 135.08773804]
[263.09161377 139.24563599]
[277.50381470 143.40351868]
[291.91604614 147.56140137]
[306.37072754 151.56915283]
[320.86633301 155.42630005]
[335.36190796 159.28346252]
[348.90771484 151.14176941]
[364.22265625 155.04403687]
[372.22067261 168.67514038]
[368.15670776 183.94798279]
[354.44180298 191.80145264]
[339.21279907 187.57623291]
[331.50476074 173.77906799]
[317.00915527 169.92190552]
[302.51358032 166.06474304]
[295.19357300 167.39268494]
[287.75814819 161.97361755]
[273.34594727 157.81573486]
[258.93371582 153.65785217]
[244.52149963 149.49995422]
[240.42526245 160.14527893]
[235.54617310 170.45527649]
[229.91140747 180.37249756]
[223.55238342 189.84164429]
[216.50454712 198.80992126]
[208.80722046 207.22732544]
[200.50328064 215.04695129]
[191.63903809 222.22518921]
[182.26391602 228.72201538]
[172.43017578 234.50122070]
[162.19262695 239.53059387]
[151.60836792 243.78207397]
[140.73638916 247.23197937]
[129.63729858 249.86106873]
[118.37298584 251.65467834]
[107.00624084 252.60282898]
[95.60044098 252.70021057]
[84.21916962 251.94628906]
[72.92587280 250.34527588]
[61.78351212 247.90608215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[17 37]
[18 36]
[19 35]
[21 33]
[22 32]
[23 31]
[24 30]
[51 61]
[52 60]
[53 59]
[66 85]
[67 84]
[68 83]
[69 82]
[110 130]
[111 129]
[112 128]
[113 127]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
