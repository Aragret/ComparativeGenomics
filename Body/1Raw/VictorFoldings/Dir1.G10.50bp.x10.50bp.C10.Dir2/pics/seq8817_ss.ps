%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGACCCCUGGGGGGGGGGAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUxxxxxxxxxxCGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCCCCCCCCCCCUGACCCCU\
) } def
/len { sequence length } bind def

/coor [
[69.18753815 383.46301270]
[55.16559601 377.91000366]
[42.96563721 369.04367065]
[33.35456467 357.42138672]
[26.93654060 343.77368164]
[24.11500359 328.95849609]
[25.06731987 313.90710449]
[29.73362541 299.56567383]
[37.82059097 286.83572388]
[48.81986618 276.51745605]
[62.04002380 269.25949097]
[76.65003967 265.51803589]
[76.65003967 250.51803589]
[76.65003967 235.51803589]
[76.65003967 220.51803589]
[76.65003967 205.51803589]
[76.65003967 190.51803589]
[76.65003967 175.51803589]
[76.65003967 160.51803589]
[76.65003967 145.51803589]
[76.65003967 130.51803589]
[70.90470123 125.69713593]
[65.28543091 139.60482788]
[50.32199860 138.55810547]
[46.69371414 124.00353241]
[59.41403580 116.05532074]
[53.66870499 111.23441315]
[38.89658737 113.83913422]
[24.12447166 116.44386292]
[9.35235500 119.04858398]
[1.69077814 132.68067932]
[-12.95903969 138.15031433]
[-27.67990303 132.87487793]
[-35.52106857 119.34527588]
[-32.78017807 103.94977570]
[-20.75139809 93.95765686]
[-5.11434889 94.08689117]
[6.74763250 104.27646637]
[21.51974869 101.67174530]
[36.29186630 99.06702423]
[51.06398010 96.46229553]
[97.13222504 83.91391754]
[98.97555542 69.02761078]
[100.81887817 54.14130020]
[102.66220093 39.25499344]
[104.50552368 24.36868477]
[98.52275085 9.72228718]
[107.76543427 -1.95769453]
[109.60876465 -16.84400177]
[99.37672424 -24.14720345]
[93.27780914 -35.05680084]
[92.42581177 -47.45378494]
[96.92218018 -58.96027756]
[105.84839630 -67.39564514]
[117.45290375 -71.18968964]
[119.90583038 -85.98777008]
[122.35875702 -100.78584290]
[113.64218903 -108.97789764]
[110.02723694 -120.25432587]
[112.30953217 -131.75140381]
[119.80230713 -140.60833740]
[130.53732300 -144.67903137]
[133.59571838 -159.36392212]
[125.19998932 -172.48449707]
[128.51083374 -187.33351135]
[141.07102966 -195.25669861]
[144.12942505 -209.94158936]
[146.88568115 -224.68618774]
[149.33860779 -239.48426819]
[151.79153442 -254.28234863]
[154.24446106 -269.08041382]
[140.80665588 -276.02886963]
[130.17518616 -286.79116821]
[123.39159393 -300.31292725]
[121.12047577 -315.26943970]
[123.58432770 -330.19540405]
[130.54176331 -343.62854004]
[141.31118774 -354.25280762]
[154.83747864 -361.02731323]
[169.79551697 -363.28842163]
[184.71983337 -360.81457520]
[198.14830017 -353.84814453]
[208.76535034 -343.07159424]
[215.53080750 -329.54077148]
[217.78189087 -314.58120728]
[215.29803467 -299.65856934]
[208.32260132 -286.23477173]
[197.53895569 -275.62493896]
[184.00358582 -268.86856079]
[169.04254150 -266.62750244]
[166.58961487 -251.82942200]
[164.13668823 -237.03134155]
[161.68376160 -222.23326111]
[163.72305298 -217.85256958]
[162.98831177 -212.13871765]
[158.81433105 -206.88319397]
[155.75593567 -192.19830322]
[164.10873413 -179.91960144]
[161.21627808 -164.98345947]
[148.28060913 -156.30552673]
[145.22221375 -141.62063599]
[156.16557312 -127.00146484]
[152.95463562 -108.70197296]
[137.15682983 -98.33291626]
[134.70390320 -83.53483582]
[132.25097656 -68.73676300]
[145.20419312 -56.80505753]
[148.47673035 -39.34147644]
[140.58474731 -23.24841118]
[124.49507141 -15.00067806]
[122.65174103 -0.11437017]
[128.76637268 13.46725941]
[119.39183044 26.21200943]
[117.54850769 41.09831619]
[115.70518494 55.98462677]
[113.86186218 70.87093353]
[112.01853180 85.75724030]
[120.17520142 98.34568024]
[134.51525879 102.74597931]
[149.30485535 96.52928162]
[163.31683350 104.34236145]
[165.80238342 120.19170380]
[154.85482788 131.91903687]
[138.87217712 130.52816772]
[130.11495972 117.08604431]
[115.77490234 112.68573761]
[109.74368286 117.14381409]
[121.95092773 125.86064911]
[117.43295288 140.16407776]
[102.43345642 140.28720093]
[97.68125153 126.05996704]
[91.65003967 130.51803589]
[91.65003967 145.51803589]
[91.65003967 160.51803589]
[91.65003967 175.51803589]
[91.65003967 190.51803589]
[91.65003967 205.51803589]
[91.65003967 220.51803589]
[91.65003967 235.51803589]
[91.65003967 250.51803589]
[91.65003967 265.51803589]
[106.26004791 269.25949097]
[119.48020935 276.51745605]
[130.47947693 286.83572388]
[138.56645203 299.56567383]
[143.23275757 313.90710449]
[144.18507385 328.95849609]
[141.36354065 343.77368164]
[134.94551086 357.42138672]
[125.33443451 369.04367065]
[113.13448334 377.91000366]
[99.11253357 383.46301270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 41]
[28 40]
[29 39]
[30 38]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
[48 111]
[49 110]
[55 106]
[56 105]
[57 104]
[62 101]
[63 100]
[66 97]
[67 96]
[68 93]
[69 92]
[70 91]
[71 90]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
