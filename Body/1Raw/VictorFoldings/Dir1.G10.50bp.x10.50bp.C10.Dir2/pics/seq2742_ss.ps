%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCAUCACGGGGGGGGGGCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUxxxxxxxxxxUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCCCCCCCCCCCUAGCAACAC\
) } def
/len { sequence length } bind def

/coor [
[76.58316040 384.25811768]
[64.02494049 375.90698242]
[53.93871689 364.69451904]
[46.95852280 351.32562256]
[43.52313614 336.64062500]
[43.84851456 321.56265259]
[47.91419983 307.03955078]
[55.46461868 293.98419189]
[66.02514648 283.21731567]
[78.93194580 275.41567993]
[93.37367249 271.06973267]
[92.74969482 256.08270264]
[92.12571716 241.09568787]
[91.50173950 226.10867310]
[90.87776184 211.12165833]
[90.25378418 196.13464355]
[89.62980652 181.14762878]
[89.00582886 166.16061401]
[88.38185120 151.17358398]
[87.75787354 136.18656921]
[87.13389587 121.19956207]
[80.98154449 105.66918945]
[86.56368256 93.57715607]
[77.29873657 81.78051758]
[68.03378296 69.98387909]
[55.30442810 67.65635681]
[47.83419418 57.58588028]
[49.20965958 45.52705002]
[40.19213104 33.54021835]
[31.17460251 21.55338478]
[22.15707207 9.56655216]
[7.67779255 3.18995047]
[6.20960379 -11.63211727]
[-4.66922140 -21.95932198]
[-17.10866165 -30.34146500]
[-29.54810143 -38.72360992]
[-41.98754120 -47.10575104]
[-54.42698288 -55.48789597]
[-67.25611115 -53.79459381]
[-77.45753479 -61.08499908]
[-79.85102081 -72.98368073]
[-92.11338806 -81.62279510]
[-104.37575531 -90.26190948]
[-116.47279358 -81.17803192]
[-130.78549194 -76.27885437]
[-145.91162109 -76.04434967]
[-160.36930847 -80.49749756]
[-172.74212646 -89.20202637]
[-181.81790161 -101.30514526]
[-186.70748901 -115.62112427]
[-186.93185425 -130.74742126]
[-182.46900940 -145.20211792]
[-173.75619507 -157.56909180]
[-161.64700317 -166.63674927]
[-147.32774353 -171.51673889]
[-132.20130920 -171.73097229]
[-117.74960327 -167.25845337]
[-105.38846588 -158.53735352]
[-96.32892609 -146.42207336]
[-91.45852661 -132.09956360]
[-91.25443268 -116.97298431]
[-95.73664093 -102.52427673]
[-83.47426605 -93.88516235]
[-71.21189880 -85.24604797]
[-53.70092010 -84.64153290]
[-46.04483795 -67.92733765]
[-33.60540009 -59.54519272]
[-21.16595840 -51.16304779]
[-8.72651863 -42.78090668]
[3.71292186 -34.39876175]
[-2.28130937 -48.14900589]
[-3.30711913 -63.11388779]
[0.75476283 -77.55345917]
[9.43206501 -89.78883362]
[21.71588326 -98.39742279]
[36.17798996 -102.37830353]
[51.13689041 -101.26863861]
[64.85331726 -95.19743347]
[75.73248291 -84.87058258]
[82.50947571 -71.48879242]
[84.39633179 -56.60793686]
[81.17366791 -41.95820999]
[73.21619415 -29.24292183]
[61.44910431 -19.94046783]
[47.24055862 -15.13243675]
[32.24256516 -15.37785244]
[18.19643593 -20.64964676]
[32.03072357 -15.13042450]
[34.14390564 0.54902202]
[43.16143417 12.53585434]
[52.17896271 24.52268791]
[61.19649506 36.50952148]
[77.67604065 42.46136475]
[79.83042145 60.71892548]
[89.09537506 72.51556396]
[98.36032104 84.31221008]
[90.89717865 71.30061340]
[88.80049896 56.44787216]
[92.37023926 41.87883377]
[101.09570312 29.67775536]
[113.72862244 21.59014511]
[128.46170044 18.77302361]
[143.18722534 21.62941170]
[155.79853821 29.75067139]
[164.49145508 41.97496796]
[168.02233887 56.55347061]
[165.88606262 71.40057373]
[158.38825989 84.39221954]
[146.60156250 93.66981506]
[132.21220398 97.90609741]
[117.27701569 96.49452209]
[131.84971619 100.04927826]
[146.42242432 103.60404205]
[156.49638367 92.08129120]
[170.77551270 86.57083130]
[185.97856140 88.33891296]
[198.61196899 96.97925568]
[205.77267456 110.50637054]
[205.81521606 125.81181335]
[198.72981262 139.37852478]
[186.14462280 148.08895874]
[170.95164490 149.94152832]
[156.64212036 144.51052856]
[146.50424194 133.04394531]
[142.86766052 118.17675018]
[128.29495239 114.62198639]
[113.72225189 111.06722260]
[102.12091064 120.57558441]
[102.74488831 135.56259155]
[103.36886597 150.54960632]
[103.99284363 165.53663635]
[104.61682129 180.52365112]
[105.24079895 195.51066589]
[105.86477661 210.49768066]
[106.48875427 225.48469543]
[107.11273193 240.47171021]
[107.73670959 255.45872498]
[108.36068726 270.44573975]
[123.11369324 273.57617188]
[136.62432861 280.27795410]
[148.04330444 290.12973022]
[156.65281677 302.51226807]
[161.91166687 316.64715576]
[163.48927307 331.64590454]
[161.28646851 346.56561279]
[155.44172668 360.46850586]
[146.32243347 372.48056030]
[134.50187683 381.84671021]
[120.72306061 387.97821045]
[105.85215759 390.48959351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[23 96]
[24 95]
[25 94]
[28 92]
[29 91]
[30 90]
[31 89]
[33 87]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 64]
[42 63]
[43 62]
[111 127]
[112 126]
[113 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
