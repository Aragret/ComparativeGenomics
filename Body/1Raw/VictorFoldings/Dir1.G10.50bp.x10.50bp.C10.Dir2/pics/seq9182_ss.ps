%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCAUUAUUGGGGGGGGGGGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUxxxxxxxxxxAAACCCCACAAACCCCAUUACUAAACCCACACUCAACAGAAACAAAGCAUCCCCCCCCCCACAUCAUUAUU\
) } def
/len { sequence length } bind def

/coor [
[86.08123016 384.35040283]
[71.52136993 380.44223022]
[58.32022858 373.16256714]
[47.24529648 362.93469238]
[38.94045639 350.35324097]
[33.88854599 336.14965820]
[32.38327026 321.14974976]
[34.51214600 306.22555542]
[40.15140533 292.24478149]
[48.97318649 280.02023315]
[60.46460342 270.26263428]
[73.95756531 263.53927612]
[88.66759491 260.24105835]
[88.97557831 245.24421692]
[89.28355408 230.24737549]
[89.59152985 215.25053406]
[89.89950562 200.25370789]
[90.20748901 185.25686646]
[90.51546478 170.26002502]
[90.82344055 155.26318359]
[91.13141632 140.26634216]
[91.43939972 125.26950836]
[91.74737549 110.27267456]
[83.69171143 122.92597961]
[72.31781769 132.70527649]
[58.59984207 138.77299500]
[43.71268463 140.60943604]
[28.93138695 138.05734253]
[15.52191925 131.33528137]
[4.63276482 121.01896667]
[-2.80345416 107.99196625]
[-6.14984846 93.37001038]
[-5.11980867 78.40541840]
[0.19844474 64.37985992]
[9.34941959 52.49459076]
[21.54936218 43.76754379]
[35.75338745 38.94615936]
[50.74495697 38.44338226]
[65.24009705 42.30226898]
[77.99732971 50.19231796]
[87.92404938 61.43777466]
[94.17005920 75.07549286]
[96.20037842 89.93962860]
[102.18867493 76.18679810]
[108.17697144 62.43397141]
[114.16526794 48.68114471]
[120.15356445 34.92831421]
[106.90594482 27.87604141]
[94.25247955 19.80610466]
[82.27117920 10.76825905]
[71.03592682 0.81822705]
[60.61598206 -9.98264599]
[51.07559204 -21.56776619]
[42.47357559 -33.86571121]
[34.86296844 -46.80065155]
[28.29069138 -60.29284668]
[22.79726982 -74.25910950]
[18.41656876 -88.61331940]
[15.17559814 -103.26699829]
[13.09434032 -118.12978363]
[12.18562698 -133.11004639]
[12.45506001 -148.11543274]
[13.90097904 -163.05342102]
[16.51446915 -177.83190918]
[20.27941704 -192.35978699]
[25.17261124 -206.54748535]
[31.16388130 -220.30752563]
[38.21628952 -233.55508423]
[46.28635788 -246.20846558]
[55.32432556 -258.18966675]
[65.27446747 -269.42480469]
[76.07544708 -279.84466553]
[87.66066742 -289.38491821]
[99.95870209 -297.98681641]
[112.89372253 -305.59729004]
[126.38597870 -312.16943359]
[140.35229492 -317.66271973]
[154.70655823 -322.04327393]
[169.36026001 -325.28408813]
[184.22306824 -327.36520386]
[199.20335388 -328.27374268]
[214.20872498 -328.00415039]
[229.14669800 -326.55810547]
[243.92515564 -323.94445801]
[258.45300293 -320.17935181]
[272.64065552 -315.28601074]
[286.40063477 -309.29461670]
[299.64810181 -302.24206543]
[312.30142212 -294.17187500]
[324.28253174 -285.13378906]
[335.51757812 -275.18350220]
[345.93728638 -264.38241577]
[355.47744751 -252.79711914]
[364.07922363 -240.49899292]
[371.68957520 -227.56388855]
[378.26156616 -214.07156372]
[383.75469971 -200.10519409]
[388.13510132 -185.75088501]
[391.37576294 -171.09715271]
[393.45672607 -156.23431396]
[394.36514282 -141.25402832]
[394.09539795 -126.24865723]
[392.64916992 -111.31069946]
[390.03536987 -96.53226471]
[386.27014160 -82.00446320]
[381.37664795 -67.81686401]
[375.38510132 -54.05694580]
[368.33242798 -40.80953979]
[360.26208496 -28.15632057]
[351.22387695 -16.17530060]
[341.27349854 -4.94035101]
[330.47232056 5.47926235]
[318.88690186 15.01929855]
[306.58871460 23.62093735]
[293.65353394 31.23114777]
[280.16113281 37.80300903]
[266.19470215 43.29600525]
[251.84034729 47.67626572]
[237.18656921 50.91679001]
[222.32373047 52.99758911]
[207.34342957 53.90584564]
[192.33805847 53.63595200]
[177.40011597 52.18957520]
[162.62170410 49.57563400]
[148.09394836 45.81023788]
[133.90640259 40.91661072]
[127.91809845 54.66944122]
[121.92980194 68.42227173]
[115.94150543 82.17509460]
[109.95320892 95.92792511]
[106.74420929 110.58065033]
[106.43623352 125.57749176]
[106.12825775 140.57432556]
[105.82028198 155.57116699]
[105.51230621 170.56800842]
[105.20432281 185.56483459]
[104.89634705 200.56167603]
[104.58837128 215.55851746]
[104.28039551 230.55535889]
[103.97241211 245.55220032]
[103.66443634 260.54904175]
[118.22666168 264.44839478]
[131.43222046 271.72003174]
[142.51335144 281.94119263]
[150.82580566 294.51760864]
[155.88633728 308.71810913]
[157.40071106 323.71713257]
[155.28086853 338.64260864]
[149.65010071 352.62680054]
[140.83572388 364.85668945]
[129.35021973 374.62124634]
[115.86134338 381.35278320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
