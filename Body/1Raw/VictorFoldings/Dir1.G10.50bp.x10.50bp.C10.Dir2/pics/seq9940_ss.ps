%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACAAUGGGGGGGGGGCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACxxxxxxxxxxUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCCCCCCCCCCCUCACCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 394.48410034]
[71.19830322 388.46807861]
[59.48964310 378.93865967]
[50.78712082 366.60299683]
[45.73651886 352.37646484]
[44.71262741 337.31478882]
[47.79142761 322.53561401]
[54.74444962 309.13568115]
[65.05573273 298.10934448]
[77.96011353 290.27484131]
[92.50000000 286.21353149]
[92.50000000 271.21353149]
[92.50000000 256.21353149]
[92.50000000 241.21353149]
[92.50000000 226.21353149]
[92.50000000 211.21353149]
[92.50000000 196.21353149]
[92.50000000 181.21353149]
[92.50000000 166.21353149]
[92.50000000 151.21353149]
[76.48900604 146.11192322]
[62.95610809 136.15005493]
[53.32768250 122.37791443]
[39.00508881 126.83473206]
[24.68248940 131.29154968]
[10.35989189 135.74836731]
[5.50874186 150.48762512]
[-7.09910011 159.53317261]
[-22.61566162 159.40681458]
[-35.07450485 150.15711975]
[-39.68495560 135.34080505]
[-34.67419815 120.65502930]
[-21.96897125 111.74678040]
[-6.45469427 112.04146576]
[5.90307665 121.42576599]
[20.22567368 116.96894836]
[34.54827118 112.51213837]
[48.87086868 108.05532074]
[48.44164658 95.43792725]
[51.07971954 83.09194946]
[56.62813950 71.75184631]
[64.75682831 62.09228516]
[74.98218536 54.68791199]
[86.69589996 49.97923279]
[99.20109558 48.24637222]
[111.75382233 49.59242249]
[117.24085236 35.63203430]
[122.72789001 21.67164230]
[128.21492004 7.71125269]
[133.70195007 -6.24913692]
[129.64677429 -10.22095013]
[126.74332428 -15.30012035]
[125.29353333 -21.14785004]
[125.49856567 -27.34357834]
[127.43691254 -33.41519928]
[126.81293488 -48.40221786]
[126.18895721 -63.38923264]
[125.56497955 -78.37625122]
[111.15503693 -90.59723663]
[110.20227814 -109.14958954]
[122.84482574 -122.32394409]
[121.59794617 -137.27203369]
[120.35107422 -152.22012329]
[119.10420227 -167.16819763]
[104.37368774 -170.61309814]
[91.42971802 -178.44308472]
[81.54041290 -189.89109802]
[75.67461395 -203.83554077]
[74.40699768 -218.91029358]
[77.86176300 -233.63850403]
[85.70043182 -246.57720947]
[97.15505219 -256.45886230]
[111.10343170 -262.31530762]
[126.17903137 -263.57281494]
[140.90490723 -260.10818481]
[153.83837891 -252.26084900]
[163.71234131 -240.79960632]
[169.55943298 -226.84730530]
[170.80685425 -211.77087402]
[167.33235168 -197.04731750]
[159.47634888 -184.11911011]
[148.00849915 -174.25283813]
[134.05229187 -168.41508484]
[135.29916382 -153.46699524]
[136.54603577 -138.51890564]
[137.79290771 -123.57081604]
[147.95498657 -118.22079468]
[154.31347656 -108.51320648]
[155.17533875 -96.82000732]
[150.20800781 -86.06665039]
[140.55200195 -79.00022888]
[141.17597961 -64.01321411]
[141.79995728 -49.02619553]
[142.42393494 -34.03917694]
[154.59576416 -25.27297211]
[169.00798035 -29.43085861]
[183.42019653 -33.58874512]
[197.83241272 -37.74663162]
[198.84056091 -52.87142944]
[204.96374512 -66.73802948]
[215.46253967 -77.67196655]
[229.06916809 -84.35292816]
[244.14057922 -85.97414398]
[258.85681152 -82.33985138]
[271.44082642 -73.88890839]
[280.37304688 -61.64179993]
[284.57482910 -47.07743073]
[283.53878784 -31.95451736]
[277.39007568 -18.09922791]
[266.87115479 -7.18465185]
[253.25222778 -0.52877986]
[238.17785645 1.06465995]
[223.46833801 -2.59674811]
[210.89991760 -11.07087135]
[201.99031067 -23.33441734]
[187.57809448 -19.17653084]
[173.16587830 -15.01864243]
[158.75366211 -10.86075497]
[147.66233826 -0.76210564]
[142.17530823 13.19828415]
[136.68827820 27.15867424]
[131.20124817 41.11906433]
[125.71421051 55.07945251]
[138.17562866 65.04721832]
[147.00849915 78.33720398]
[151.37326050 93.68621063]
[150.85505676 109.63534546]
[145.50312805 124.66864014]
[135.82617188 137.35722351]
[122.74398041 146.49502563]
[107.50000000 151.21353149]
[107.50000000 166.21353149]
[107.50000000 181.21353149]
[107.50000000 196.21353149]
[107.50000000 211.21353149]
[107.50000000 226.21353149]
[107.50000000 241.21353149]
[107.50000000 256.21353149]
[107.50000000 271.21353149]
[107.50000000 286.21353149]
[122.03988647 290.27484131]
[134.94427490 298.10934448]
[145.25555420 309.13568115]
[152.20857239 322.53561401]
[155.28736877 337.31478882]
[154.26348877 352.37646484]
[149.21287537 366.60299683]
[140.51036072 378.93865967]
[128.80169678 388.46807861]
[114.95575714 394.48410034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 38]
[24 37]
[25 36]
[26 35]
[46 123]
[47 122]
[48 121]
[49 120]
[50 119]
[55 94]
[56 93]
[57 92]
[58 91]
[61 86]
[62 85]
[63 84]
[64 83]
[95 118]
[96 117]
[97 116]
[98 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
