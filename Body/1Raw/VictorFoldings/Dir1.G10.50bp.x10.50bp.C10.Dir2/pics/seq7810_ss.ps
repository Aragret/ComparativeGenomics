%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAAUUACAGGGGGGGGGGUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACxxxxxxxxxxAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCCCCCCCCCCCAUAAUAGUUACA\
) } def
/len { sequence length } bind def

/coor [
[100.86557007 413.32797241]
[87.16341400 407.06710815]
[75.19829559 397.91375732]
[65.57038879 386.32708740]
[58.76260757 372.88824463]
[55.11643982 358.27136230]
[54.81476974 343.20959473]
[57.87273407 328.45846558]
[64.13694763 314.75781250]
[73.29319000 302.79492188]
[84.88219452 293.16983032]
[98.32266998 286.36529541]
[112.94042969 282.72265625]
[112.63642883 267.72573853]
[112.33242035 252.72883606]
[112.02841949 237.73190308]
[111.72441101 222.73498535]
[111.42041016 207.73806763]
[111.11640167 192.74114990]
[110.81240082 177.74423218]
[110.50839996 162.74731445]
[110.20439148 147.75039673]
[94.32248688 147.44012451]
[79.72689819 142.10195923]
[67.92688751 132.52488708]
[60.06472015 119.92259216]
[45.70785904 124.26776886]
[31.35099983 128.61294556]
[16.99414062 132.95812988]
[6.17702198 145.28378296]
[-9.85080338 141.81379700]
[-14.60128403 126.11778259]
[-3.18753242 114.34245300]
[12.64896202 118.60126495]
[27.00582314 114.25608826]
[41.36268234 109.91091156]
[55.71954346 105.56573486]
[55.46780777 97.06396484]
[56.83356476 88.66883087]
[59.76720810 80.68527222]
[64.16217804 73.40325928]
[69.85883331 67.08728790]
[76.65028381 61.96676636]
[84.28983307 58.22768021]
[92.50000000 56.00583649]
[92.50000000 41.00583649]
[92.50000000 26.00583839]
[82.16066742 16.11511803]
[80.77949524 2.35373092]
[68.38184357 -6.09008789]
[55.98418427 -14.53390694]
[39.59902954 -15.21127033]
[32.23382187 -29.86342812]
[41.46524811 -43.41749573]
[57.79681396 -41.93021011]
[64.42800140 -26.93156433]
[76.82566071 -18.48774529]
[89.22332001 -10.04392719]
[91.69194031 -11.42127895]
[94.33276367 -12.42988014]
[97.09104156 -13.04882622]
[100.70348358 -27.60733986]
[104.31591797 -42.16585159]
[107.92835236 -56.72436523]
[111.54079437 -71.28287506]
[97.74225616 -77.25366974]
[85.11476135 -85.41431427]
[74.00279236 -95.54219055]
[64.70948029 -107.36100769]
[57.48837280 -120.54832458]
[52.53644943 -134.74440002]
[49.98881531 -149.56193542]
[49.91496658 -164.59671021]
[52.31691360 -179.43855286]
[57.12913895 -193.68258667]
[64.22035217 -206.94020081]
[73.39710236 -218.84974670]
[84.40904999 -229.08628845]
[96.95577240 -237.37059021]
[110.69498444 -243.47665405]
[125.25186920 -247.23788452]
[140.22930908 -248.55166626]
[155.21871948 -247.38218689]
[169.81115723 -243.76133728]
[183.60853577 -237.78788757]
[196.23446655 -229.62480164]
[207.34448242 -219.49478149]
[216.63551331 -207.67417908]
[223.85408020 -194.48547363]
[228.80326843 -180.28845215]
[231.34805298 -165.47042847]
[231.41900635 -150.43563843]
[229.01419067 -135.59425354]
[224.19923401 -121.35114288]
[217.10545349 -108.09489441]
[207.92640686 -96.18712616]
[196.91249084 -85.95269775]
[184.36418152 -77.67080688]
[170.62379456 -71.56739807]
[156.06617737 -67.80897522]
[141.08848572 -66.49806976]
[126.09930420 -67.67044067]
[122.48686981 -53.11192703]
[118.87442780 -38.55341339]
[115.26199341 -23.99490166]
[111.64955902 -9.43638897]
[120.14213562 9.10884190]
[107.50000000 26.00583839]
[107.50000000 41.00583649]
[107.50000000 56.00583649]
[117.98563385 58.58278275]
[127.66284943 63.65004349]
[135.94265747 70.96704102]
[142.30525208 80.15460205]
[146.33235168 90.71433258]
[147.73440552 102.05555725]
[146.37049866 113.52832031]
[142.25999451 124.46063995]
[156.42897034 129.38406372]
[170.59794617 134.30749512]
[184.76692200 139.23092651]
[198.88014221 132.11808777]
[213.86285400 137.14736938]
[220.82608032 151.33500671]
[215.63867188 166.26371765]
[201.37820435 173.07655334]
[186.50517273 167.73159790]
[179.84349060 153.39990234]
[165.67451477 148.47647095]
[151.50553894 143.55303955]
[137.33656311 138.62960815]
[125.20130920 147.44639587]
[125.50531769 162.44331360]
[125.80931854 177.44023132]
[126.11332703 192.43714905]
[126.41732788 207.43406677]
[126.72133636 222.43098450]
[127.02533722 237.42790222]
[127.32933807 252.42481995]
[127.63334656 267.42175293]
[127.93734741 282.41867065]
[142.69071960 285.46591187]
[156.39590454 291.72015381]
[168.36546326 300.86770630]
[177.99899292 312.44970703]
[184.81327820 325.88522339]
[188.46652222 340.50033569]
[188.77549744 355.56195068]
[185.72468567 370.31460571]
[179.46710205 384.01824951]
[170.31666565 395.98559570]
[158.73231506 405.61630249]
[145.29515076 412.42733765]
[130.67915344 416.07705688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[26 37]
[27 36]
[28 35]
[29 34]
[45 110]
[46 109]
[47 108]
[49 58]
[50 57]
[51 56]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
