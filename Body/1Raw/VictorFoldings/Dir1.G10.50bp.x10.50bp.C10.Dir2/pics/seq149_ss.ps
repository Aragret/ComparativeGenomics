%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUACUUACUAGGGGGGGGGGAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUxxxxxxxxxxGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUCCCCCCCCCCACAAACUUACUA\
) } def
/len { sequence length } bind def

/coor [
[77.53479004 447.62426758]
[63.37418747 442.46926880]
[50.78444290 434.18704224]
[40.44450760 423.22427368]
[32.91199493 410.17214966]
[28.59313011 395.73455811]
[27.72082138 380.69009399]
[30.34211159 365.85009766]
[36.31563950 352.01486206]
[45.31925583 339.93051147]
[56.86741257 330.24871826]
[70.33732605 323.49163818]
[85.00258636 320.02368164]
[85.00258636 305.02368164]
[85.00258636 290.02368164]
[85.00258636 275.02368164]
[85.00258636 260.02368164]
[85.00258636 245.02368164]
[85.00258636 230.02368164]
[85.00258636 215.02368164]
[85.00258636 200.02368164]
[85.00258636 185.02368164]
[85.00258636 170.02368164]
[85.00258636 155.02368164]
[77.26528931 142.29640198]
[85.00258636 128.49623108]
[73.72081757 118.61080933]
[58.85080338 120.58126068]
[43.98078918 122.55171204]
[29.11077499 124.52216339]
[14.24076080 126.49261475]
[-0.62925375 128.46307373]
[-15.49926758 130.43351746]
[-28.16431808 140.85122681]
[-43.42171860 134.83926392]
[-45.57596970 118.58222198]
[-32.41095734 108.80395508]
[-17.46971893 115.56350708]
[-2.59970522 113.59305573]
[12.27030849 111.62260437]
[27.14032364 109.65215302]
[42.01033783 107.68170166]
[56.88035202 105.71125031]
[71.75036621 103.74079895]
[81.11891937 83.66957092]
[99.72205353 78.57097626]
[104.78881073 64.45262146]
[109.85557556 50.33426666]
[98.87059784 23.39953613]
[94.67113495 8.99937820]
[90.47167206 -5.40077829]
[86.27220917 -19.80093575]
[82.07274628 -34.20109177]
[77.87328339 -48.60124969]
[73.67382050 -63.00140762]
[69.47435760 -77.40156555]
[54.45998001 -76.27812958]
[39.54018021 -78.30130768]
[25.36718941 -83.38264465]
[12.56058788 -91.30001068]
[1.68022752 -101.70729065]
[-6.79824972 -114.14952087]
[-12.50420094 -128.08277893]
[-15.18818665 -142.89797974]
[-14.73287392 -157.94743347]
[-11.15816879 -172.57327271]
[-4.62034035 -186.13610840]
[4.59480476 -198.04302979]
[16.08442116 -207.77352905]
[29.34622955 -214.90220642]
[43.80048370 -219.11744690]
[58.81530380 -220.23497009]
[73.73430634 -218.20591736]
[87.90529633 -213.11900330]
[100.70878601 -205.19660950]
[111.58505249 -194.78504944]
[120.05863190 -182.33947754]
[125.75910187 -168.40397644]
[128.43725586 -153.58772278]
[127.97602081 -138.53845215]
[124.39556885 -123.91401672]
[117.85240173 -110.35375214]
[108.63257599 -98.45045471]
[97.13912964 -88.72448730]
[83.87451935 -81.60102844]
[88.07398224 -67.20086670]
[92.27343750 -52.80071259]
[96.47290039 -38.40055466]
[100.67236328 -24.00039673]
[104.87182617 -9.60024071]
[109.07128906 4.79991627]
[113.27075195 19.20007324]
[110.47307587 4.46328163]
[117.28160858 -8.90249157]
[130.84709167 -15.30388832]
[145.49256897 -12.06202698]
[155.08917236 -0.53357357]
[155.62086487 14.45699978]
[146.86514282 26.63638306]
[132.48487854 30.90764809]
[147.20767212 28.03722382]
[161.93046570 25.16679955]
[176.65325928 22.29637527]
[178.99159241 7.31945896]
[186.31402588 -5.95298386]
[197.73634338 -15.91824150]
[211.87925720 -21.37296104]
[227.03492737 -21.65845680]
[241.37322998 -16.74025536]
[253.16276550 -7.21225262]
[260.97985840 5.77499819]
[263.88058472 20.65322304]
[261.51467896 35.62580490]
[254.16778564 48.88473129]
[242.72711182 58.82892227]
[228.57418823 64.25756836]
[213.41801453 64.51513672]
[199.08879089 59.57051468]
[187.31684875 50.02080536]
[179.52368164 37.01916885]
[164.80088806 39.88959503]
[150.07809448 42.76001740]
[135.35530090 45.63044357]
[123.97393036 55.40103149]
[118.90716553 69.51938629]
[113.84040070 83.63773346]
[123.74925232 98.67897034]
[118.99172974 117.96305847]
[100.00258636 128.49623108]
[107.73989105 142.29640198]
[100.00258636 155.02368164]
[100.00258636 170.02368164]
[100.00258636 185.02368164]
[100.00258636 200.02368164]
[100.00258636 215.02368164]
[100.00258636 230.02368164]
[100.00258636 245.02368164]
[100.00258636 260.02368164]
[100.00258636 275.02368164]
[100.00258636 290.02368164]
[100.00258636 305.02368164]
[100.00258636 320.02368164]
[114.66784668 323.49163818]
[128.13777161 330.24871826]
[139.68592834 339.93051147]
[148.68954468 352.01486206]
[154.66307068 365.85009766]
[157.28436279 380.69009399]
[156.41204834 395.73455811]
[152.09318542 410.17214966]
[144.56066895 423.22427368]
[134.22073364 434.18704224]
[121.63098907 442.46926880]
[107.47039032 447.62426758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[26 129]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[46 126]
[47 125]
[48 124]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[100 123]
[101 122]
[102 121]
[103 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
