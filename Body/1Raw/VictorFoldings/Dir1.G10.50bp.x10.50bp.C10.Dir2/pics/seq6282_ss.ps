%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACUAUACGGGGGGGGGGCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUxxxxxxxxxxUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCCCCCCCCCCCAUCACUAUAC\
) } def
/len { sequence length } bind def

/coor [
[96.47931671 386.58694458]
[83.25912476 379.31445312]
[72.37232208 368.86746216]
[64.56118774 355.95822144]
[60.35830688 341.46688843]
[60.05023575 326.38156128]
[63.65797424 311.73074341]
[70.93554688 298.51333618]
[81.38675690 287.63058472]
[94.29901886 279.82443237]
[108.79195404 275.62713623]
[108.47989655 260.63040161]
[108.16783905 245.63363647]
[107.85578918 230.63688660]
[107.54373169 215.64012146]
[107.23167419 200.64337158]
[106.91961670 185.64662170]
[106.60755920 170.64987183]
[106.29550171 155.65310669]
[105.98345184 140.65635681]
[105.67139435 125.65960693]
[83.13619995 115.94259644]
[80.61466980 94.55823517]
[68.72229004 85.41649628]
[56.82991028 76.27476501]
[43.73675537 68.95565796]
[38.45632553 69.81395721]
[33.85538483 68.63764191]
[30.60568428 66.04127502]
[29.02964211 62.81891632]
[15.37340164 56.61351013]
[1.71716022 50.40810013]
[-9.76683235 58.09686279]
[-23.44314766 59.08249283]
[-35.71526718 53.21345901]
[-43.40917587 42.12674332]
[-44.59411621 28.79288101]
[-58.11830521 22.30471611]
[-71.64249420 15.81655025]
[-85.16668701 9.32838535]
[-98.69087219 2.84021997]
[-112.21506500 -3.64794517]
[-124.66264343 -0.11077587]
[-135.81407166 -5.84354687]
[-139.90898132 -17.26891327]
[-153.29527283 -24.03702927]
[-168.92481995 -20.41810608]
[-181.40908813 -30.49395370]
[-181.17120361 -46.53524399]
[-168.39366150 -56.23646927]
[-152.87828064 -52.15568542]
[-146.52716064 -37.42331314]
[-133.14086914 -30.65519905]
[-115.72753906 -32.59832001]
[-105.72689819 -17.17213440]
[-92.20271301 -10.68397045]
[-78.67852020 -4.19580507]
[-65.15432739 2.29236031]
[-51.63014221 8.78052521]
[-38.10594940 15.26869011]
[-23.95174217 7.01256037]
[-7.49822712 8.81472111]
[4.77672863 20.16403961]
[7.92256737 36.75186157]
[21.57880783 42.95726776]
[35.23505020 49.16267395]
[49.07826614 54.93894577]
[40.38122940 42.71759033]
[36.91905212 28.12261581]
[39.20009995 13.29706955]
[46.88943863 0.41785884]
[58.85800552 -8.62390137]
[73.34839630 -12.50056458]
[88.23292542 -10.64290428]
[101.32601166 -3.32368708]
[110.70515442 8.38237000]
[114.99314880 22.75641060]
[113.56038666 37.68782806]
[106.61724091 50.98416519]
[95.18319702 60.69306564]
[80.93717957 65.38892365]
[65.97164154 64.38238525]
[77.86402130 73.52411652]
[89.75640106 82.66585541]
[103.39375305 78.07841492]
[118.05827332 83.84355164]
[126.25511932 98.88246918]
[140.82781982 95.32770538]
[155.40052795 91.77294159]
[169.97322083 88.21818542]
[184.54592896 84.66342163]
[199.11863708 81.10865784]
[213.69132996 77.55389404]
[219.87008667 61.84163666]
[234.04321289 52.97574615]
[250.54461670 54.26799011]
[262.91448975 65.01467896]
[277.41009521 61.15752029]
[291.90567017 57.30036163]
[293.53567505 42.21038055]
[300.51019287 28.73000717]
[311.88601685 18.68235397]
[326.12463379 13.42628193]
[341.30038452 13.67263317]
[355.36090088 19.38809013]
[366.40460205 29.79968452]
[372.93789673 43.49933243]
[374.07723999 58.63426971]
[369.66851807 73.15762329]
[360.30801392 85.10522461]
[347.26162720 92.86125946]
[332.29376221 95.37678528]
[317.42874146 92.31160736]
[304.67691040 84.08025360]
[295.76284790 71.79595947]
[281.26724243 75.65311432]
[266.77163696 79.51027679]
[263.12527466 92.39048767]
[253.50198364 101.85115051]
[240.35183716 105.33308411]
[227.09805298 101.81877136]
[217.24609375 92.12660217]
[202.67340088 95.68135834]
[188.10069275 99.23612213]
[173.52798462 102.79088593]
[158.95529175 106.34564972]
[144.38258362 109.90040588]
[129.80987549 113.45516968]
[120.66814423 125.34754944]
[120.98020172 140.34429932]
[121.29225922 155.34106445]
[121.60431671 170.33781433]
[121.91637421 185.33456421]
[122.22842407 200.33131409]
[122.54048157 215.32807922]
[122.85253906 230.32482910]
[123.16459656 245.32157898]
[123.47665405 260.31832886]
[123.78871155 275.31509399]
[138.44369507 278.90585327]
[151.66950989 286.16812134]
[162.56437683 296.60671997]
[170.38546753 309.50991821]
[174.59954834 323.99798584]
[174.91926575 339.08306885]
[171.32284546 353.73669434]
[164.05548096 366.95968628]
[153.61267090 377.85052490]
[140.70645142 385.66665649]
[126.21675873 389.87512207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 84]
[24 83]
[25 82]
[26 67]
[30 66]
[31 65]
[32 64]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[45 53]
[46 52]
[87 128]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[97 117]
[98 116]
[99 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
