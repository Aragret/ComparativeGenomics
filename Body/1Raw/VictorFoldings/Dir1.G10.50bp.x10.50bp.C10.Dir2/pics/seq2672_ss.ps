%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAAAAAGGGGGGGGGGGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCxxxxxxxxxxUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACACCCCCCCCCCUUCAAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[143.45304871 536.00842285]
[129.60710144 529.99243164]
[117.89844513 520.46301270]
[109.19591522 508.12731934]
[104.14531708 493.90081787]
[103.12142181 478.83911133]
[106.20022583 464.05996704]
[113.15324402 450.66003418]
[123.46453094 439.63369751]
[136.36891174 431.79919434]
[150.90879822 427.73788452]
[150.90879822 412.73788452]
[150.90879822 397.73788452]
[150.90879822 382.73788452]
[150.90879822 367.73788452]
[150.90879822 352.73788452]
[150.90879822 337.73788452]
[150.90879822 322.73788452]
[150.90879822 307.73788452]
[150.90879822 292.73788452]
[150.90879822 277.73788452]
[149.97317505 262.76708984]
[148.10556030 247.88380432]
[146.23794556 233.00053406]
[144.37033081 218.11724854]
[142.32067871 185.01670837]
[134.59658813 172.15830994]
[121.41020203 165.23237610]
[120.93657684 149.41827393]
[113.21248627 136.55986023]
[105.48840332 123.70146179]
[77.64106750 125.64994812]
[56.45408249 96.04096222]
[41.63632584 93.70985413]
[26.81856728 91.37875366]
[18.18194389 103.96332550]
[4.93610525 111.54689026]
[-10.28897858 112.62373352]
[-24.47035599 106.98003387]
[-34.79230118 95.73636627]
[-39.20539093 81.12515259]
[-36.83339691 66.04747772]
[-28.14728165 53.49700928]
[-14.87168026 45.96566391]
[0.35752562 44.94878769]
[14.51656723 50.64828873]
[24.79415703 61.93251801]
[29.14967155 76.56099701]
[43.96743011 78.89209747]
[58.78518677 81.22319794]
[65.96769714 68.05461884]
[55.98497009 56.85885239]
[46.00224304 45.66308594]
[36.01951599 34.46731949]
[26.03679085 23.27155495]
[10.16667080 20.92233658]
[2.23342419 6.97804880]
[8.32275963 -7.86444283]
[23.76346016 -12.21924877]
[36.71073914 -2.74573565]
[37.23255539 13.28882885]
[47.21528244 24.48459435]
[57.19800949 35.68035889]
[67.18073273 46.87612534]
[77.16345978 58.07189178]
[84.60510254 57.13808441]
[81.21197510 42.52690125]
[77.81884003 27.91571999]
[74.42571259 13.30453682]
[71.03257751 -1.30664563]
[61.78855133 -13.11968517]
[62.37847900 -28.10807991]
[72.52237701 -39.15802765]
[87.40573120 -41.02499771]
[99.96460724 -32.82288742]
[104.23829651 -18.44458389]
[98.19972229 -4.71568727]
[98.52188873 10.28085327]
[98.84405518 25.27739334]
[99.16622162 40.27393341]
[99.48838043 55.27047348]
[106.93002319 54.33666611]
[113.83702087 41.02151108]
[120.74401855 27.70635414]
[127.65101624 14.39119911]
[129.57720947 -2.45297241]
[146.29632568 -5.26498556]
[153.62675476 10.02230072]
[140.96617126 21.29819679]
[134.05917358 34.61335373]
[127.15217590 47.92850876]
[120.24517822 61.24366379]
[133.43721008 93.69174194]
[118.34680939 115.97737885]
[126.07089233 128.83578491]
[133.79498291 141.69418335]
[147.53384399 149.53982544]
[147.45498657 164.43421936]
[155.17907715 177.29261780]
[168.96145630 183.21258545]
[183.60496521 179.96176147]
[198.24845886 176.71093750]
[212.89196777 173.46011353]
[227.53546143 170.20927429]
[234.59109497 156.25392151]
[248.98661804 150.14631653]
[263.92492676 154.77030945]
[272.35256958 167.94256592]
[270.29031372 183.44357300]
[258.71188354 193.95420837]
[243.08422852 194.51168823]
[230.78628540 184.85278320]
[216.14279175 188.10360718]
[201.49928284 191.35443115]
[186.85578918 194.60525513]
[172.21228027 197.85607910]
[185.27001953 205.23820496]
[184.41459656 220.21379089]
[170.60118103 226.06098938]
[159.25361633 216.24963379]
[161.12121582 231.13291931]
[162.98883057 246.01620483]
[164.85644531 260.89947510]
[175.20596313 250.04187012]
[190.19581604 249.49018860]
[201.31546021 259.55764771]
[202.25166321 274.52838135]
[192.47290039 285.90274048]
[177.53111267 287.22286987]
[165.90879822 277.73788452]
[165.90879822 292.73788452]
[165.90879822 307.73788452]
[165.90879822 322.73788452]
[165.90879822 337.73788452]
[165.90879822 352.73788452]
[165.90879822 367.73788452]
[165.90879822 382.73788452]
[165.90879822 397.73788452]
[165.90879822 412.73788452]
[165.90879822 427.73788452]
[180.44868469 431.79919434]
[193.35307312 439.63369751]
[203.66435242 450.66003418]
[210.61737061 464.05996704]
[213.69616699 478.83911133]
[212.67228699 493.90081787]
[207.62167358 508.12731934]
[198.91915894 520.46301270]
[187.21049500 529.99243164]
[173.36454773 536.00842285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 123]
[23 122]
[24 121]
[25 120]
[26 99]
[27 98]
[29 96]
[30 95]
[31 94]
[33 50]
[34 49]
[35 48]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[82 92]
[83 91]
[84 90]
[85 89]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
