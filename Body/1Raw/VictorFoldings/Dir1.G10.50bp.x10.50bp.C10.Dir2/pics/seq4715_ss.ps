%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCACUGAGGGGGGGGGGUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUxxxxxxxxxxAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCCCCCCCCCCCUCGAACUGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 423.35592651]
[71.19830322 417.33990479]
[59.48964310 407.81048584]
[50.78712082 395.47482300]
[45.73651886 381.24829102]
[44.71262741 366.18661499]
[47.79142761 351.40744019]
[54.74444962 338.00753784]
[65.05573273 326.98120117]
[77.96011353 319.14669800]
[92.50000000 315.08535767]
[92.50000000 300.08535767]
[92.50000000 285.08535767]
[92.50000000 270.08535767]
[92.50000000 255.08537292]
[92.50000000 240.08537292]
[92.50000000 225.08537292]
[92.50000000 210.08537292]
[92.50000000 195.08537292]
[92.50000000 180.08537292]
[76.34541321 176.87898254]
[61.18255234 170.44943237]
[47.64710999 161.06628418]
[36.30656433 149.12294006]
[27.63637161 135.12010193]
[22.00002480 119.64485931]
[19.63383293 103.34600830]
[20.63699341 86.90686798]
[24.96745491 71.01666260]
[32.44365692 56.34158325]
[42.75216293 43.49688721]
[55.46078491 33.02108383]
[70.03672028 25.35337639]
[85.86886597 20.81523132]
[84.62198639 5.86714411]
[83.37511444 -9.08094311]
[82.12824249 -24.02902985]
[80.88136292 -38.97711563]
[72.53243256 -26.51536179]
[59.13245392 -19.77440071]
[44.14997101 -20.49911308]
[31.46315384 -28.50190544]
[24.35594749 -41.71128082]
[24.66803169 -56.70803452]
[32.31862259 -69.61029816]
[45.32738876 -77.07836914]
[60.32704926 -77.17914581]
[73.43498993 -69.88655853]
[81.25822449 -57.08835983]
[83.12583923 -71.97164154]
[84.99345398 -86.85491943]
[86.86106873 -101.73819733]
[88.72868347 -116.62147522]
[74.16075897 -120.27292633]
[60.13920593 -125.65375519]
[46.86848831 -132.68550110]
[34.54214096 -141.26562500]
[23.33991432 -151.26899719]
[13.42517090 -162.54974365]
[4.94249582 -174.94335938]
[-1.98440778 -188.26908875]
[-7.25452566 -202.33264160]
[-10.79100418 -216.92889404]
[-12.54226971 -231.84500122]
[-12.48278522 -246.86344910]
[-10.61341763 -261.76522827]
[-6.96142769 -276.33300781]
[-1.58007228 -290.35437012]
[5.45217276 -303.62481689]
[14.03275681 -315.95083618]
[24.03654861 -327.15270996]
[35.31766510 -337.06701660]
[47.71159363 -345.54922485]
[61.03759003 -352.47564697]
[75.10133362 -357.74523926]
[89.69771576 -361.28115845]
[104.61389923 -363.03186035]
[119.63234711 -362.97183228]
[134.53404236 -361.10189819]
[149.10169983 -357.44937134]
[163.12284851 -352.06747437]
[176.39303589 -345.03472900]
[188.71875000 -336.45370483]
[199.92022705 -326.44949341]
[209.83412170 -315.16799927]
[218.31587219 -302.77374268]
[225.24177551 -289.44750977]
[230.51084900 -275.38357544]
[234.04623413 -260.78704834]
[235.79638672 -245.87080383]
[235.73577881 -230.85235596]
[233.86529541 -215.95071411]
[230.21220398 -201.38320923]
[224.82980347 -187.36225891]
[217.79656982 -174.09233093]
[209.21505737 -161.76695251]
[199.21043396 -150.56584167]
[187.92857361 -140.65235901]
[175.53401184 -132.17108154]
[162.20750427 -125.24566650]
[148.14337158 -119.97712708]
[133.54670715 -116.44229126]
[118.63040161 -114.69269562]
[103.61196136 -114.75386810]
[101.74434662 -99.87058258]
[99.87673187 -84.98730469]
[98.00911713 -70.10402679]
[96.14151001 -55.22074509]
[95.82945251 -40.22399139]
[97.07632446 -25.27590370]
[98.32320404 -10.32781792]
[99.57007599 4.62026930]
[100.81694794 19.56835556]
[114.31631470 20.84850121]
[127.40881348 24.37808800]
[139.72236633 30.05681038]
[150.90704346 37.72328186]
[160.64495850 47.15962219]
[168.65937805 58.09766006]
[174.72253418 70.22653961]
[178.66212463 83.20156097]
[180.36616516 96.65399170]
[179.78625488 110.20151520]
[176.93885803 123.45910645]
[171.90489197 136.05001831]
[164.82743835 147.61639404]
[155.90760803 157.82954407]
[145.39892578 166.39920044]
[133.60002136 173.08183289]
[120.84622955 177.68753052]
[107.50000000 180.08537292]
[107.50000000 195.08537292]
[107.50000000 210.08537292]
[107.50000000 225.08537292]
[107.50000000 240.08537292]
[107.50000000 255.08537292]
[107.50000000 270.08535767]
[107.50000000 285.08535767]
[107.50000000 300.08535767]
[107.50000000 315.08535767]
[122.03988647 319.14669800]
[134.94427490 326.98120117]
[145.25555420 338.00753784]
[152.20857239 351.40744019]
[155.28736877 366.18661499]
[154.26348877 381.24829102]
[149.21287537 395.47482300]
[140.51036072 407.81048584]
[128.80169678 417.33990479]
[114.95575714 423.35592651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[49 108]
[50 107]
[51 106]
[52 105]
[53 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
