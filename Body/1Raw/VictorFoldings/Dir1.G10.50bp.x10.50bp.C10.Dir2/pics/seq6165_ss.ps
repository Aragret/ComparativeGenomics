%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUGAAGCGGGGGGGGGGUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAxxxxxxxxxxGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUCCCCCCCCCCGGUUUCAAGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 428.48733521]
[71.19830322 422.47131348]
[59.48964310 412.94189453]
[50.78712082 400.60623169]
[45.73651886 386.37973022]
[44.71262741 371.31802368]
[47.79142761 356.53887939]
[54.74444962 343.13894653]
[65.05573273 332.11260986]
[77.96011353 324.27810669]
[92.50000000 320.21679688]
[92.50000000 305.21679688]
[92.50000000 290.21679688]
[92.50000000 275.21679688]
[92.50000000 260.21679688]
[92.50000000 245.21679688]
[92.50000000 230.21679688]
[92.50000000 215.21679688]
[92.50000000 200.21679688]
[92.50000000 185.21679688]
[84.76270294 172.48951721]
[92.50000000 158.68934631]
[92.50000000 143.68934631]
[92.50000000 128.68934631]
[92.50000000 113.68934631]
[83.48246765 101.70251465]
[69.07025146 97.54463196]
[54.65803909 93.38674164]
[40.24582291 89.22885132]
[25.83360672 85.07096863]
[11.42138958 80.91307831]
[-3.15131307 77.35831451]
[-17.85927391 74.41283417]
[-32.56723785 71.46735382]
[-47.27519608 68.52187347]
[-62.32603073 73.39865112]
[-73.28617096 63.31279373]
[-87.99413300 60.36731339]
[-99.31064606 70.98410034]
[-114.71045685 72.88817596]
[-128.27201843 65.34738159]
[-134.78063965 51.26130676]
[-131.73362732 36.04633713]
[-120.30260468 25.55293655]
[-104.88304901 23.81603241]
[-91.40408325 31.50349998]
[-85.04865265 45.65935135]
[-70.34069061 48.60483170]
[-56.34186935 43.51736832]
[-44.32971573 53.81390762]
[-29.62175369 56.75939178]
[-14.91379166 59.70487213]
[-0.20583056 62.65035629]
[2.23236632 61.14618301]
[5.43204451 60.54949570]
[9.03844357 61.16249847]
[12.59163189 63.14892960]
[15.57927704 66.50086212]
[29.99149323 70.65875244]
[44.40370941 74.81663513]
[58.81592560 78.97452545]
[73.22814178 83.13241577]
[87.64035797 87.29029846]
[96.42023468 85.88287354]
[103.09275818 89.02814484]
[113.97158051 78.70093536]
[124.85041046 68.37373352]
[115.77265930 56.41305923]
[108.06580353 43.52634048]
[101.82339478 29.87000275]
[97.12121582 15.60982513]
[94.01633453 0.91891176]
[92.54645538 -14.02440262]
[92.72941589 -29.03871918]
[94.56298828 -43.94178009]
[98.02491760 -58.55267334]
[103.07318878 -72.69403839]
[109.64651489 -86.19420624]
[117.66509247 -98.88930511]
[127.03159332 -110.62522888]
[137.63232422 -121.25950623]
[149.33857727 -130.66305542]
[162.00827026 -138.72171021]
[175.48760986 -145.33766174]
[189.61294556 -150.43060303]
[204.21282959 -153.93869019]
[219.11001587 -155.81935120]
[234.12368774 -156.04975891]
[249.07156372 -154.62710571]
[263.77221680 -151.56866455]
[278.04718018 -146.91157532]
[291.72317505 -140.71235657]
[304.63418579 -133.04626465]
[316.62350464 -124.00635529]
[327.54553223 -113.70237732]
[337.26776123 -102.25939941]
[345.67211914 -89.81632996]
[352.65658569 -76.52422333]
[358.13641357 -62.54442596]
[362.04507446 -48.04664230]
[364.33508301 -33.20686340]
[364.97866821 -18.20523262]
[363.96801758 -3.22385049]
[361.31539917 11.55541897]
[357.05300903 25.95316887]
[351.23260498 39.79462814]
[343.92480469 52.91176605]
[335.21835327 65.14536285]
[325.21893311 76.34690094]
[314.04791260 86.38041687]
[301.84088135 95.12410736]
[288.74606323 102.47183228]
[274.92242432 108.33439636]
[260.53771973 112.64063263]
[245.76660156 115.33826447]
[230.78836060 116.39455414]
[215.78483582 115.79667664]
[200.93815613 113.55187988]
[186.42852783 109.68743134]
[172.43209839 104.25022125]
[159.11877441 97.30626678]
[146.65016174 88.93985748]
[135.17761230 79.25255585]
[124.29878998 89.57976532]
[113.41996002 99.90696716]
[107.50000000 113.68934631]
[107.50000000 128.68934631]
[107.50000000 143.68934631]
[107.50000000 158.68934631]
[115.23729706 172.48951721]
[107.50000000 185.21679688]
[107.50000000 200.21679688]
[107.50000000 215.21679688]
[107.50000000 230.21679688]
[107.50000000 245.21679688]
[107.50000000 260.21679688]
[107.50000000 275.21679688]
[107.50000000 290.21679688]
[107.50000000 305.21679688]
[107.50000000 320.21679688]
[122.03988647 324.27810669]
[134.94427490 332.11260986]
[145.25555420 343.13894653]
[152.20857239 356.53887939]
[155.28736877 371.31802368]
[154.26348877 386.37973022]
[149.21287537 400.60623169]
[140.51036072 412.94189453]
[128.80169678 422.47131348]
[114.95575714 428.48733521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 126]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 53]
[33 52]
[34 51]
[35 50]
[37 48]
[38 47]
[65 125]
[66 124]
[67 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
