%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCACCAGUCGGGGGGGGGGAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAxxxxxxxxxxUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAACCCCCCCCCCUACACCAGUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 457.01177979]
[71.19830322 450.99575806]
[59.48964310 441.46633911]
[50.78712082 429.13067627]
[45.73651886 414.90414429]
[44.71262741 399.84246826]
[47.79142761 385.06332397]
[54.74444962 371.66339111]
[65.05573273 360.63705444]
[77.96011353 352.80255127]
[92.50000000 348.74124146]
[92.50000000 333.74124146]
[92.50000000 318.74124146]
[92.50000000 303.74124146]
[92.50000000 288.74124146]
[92.50000000 273.74124146]
[92.50000000 258.74124146]
[92.50000000 243.74124146]
[92.50000000 228.74124146]
[92.50000000 213.74124146]
[81.81912994 203.42355347]
[81.60544586 188.21142578]
[92.50000000 177.07829285]
[92.50000000 162.07829285]
[82.19035339 159.93981934]
[72.38567352 156.10182190]
[63.36396790 150.67312622]
[55.38102341 143.80766296]
[48.66319275 135.70010376]
[43.40095139 126.58029938]
[39.74349976 116.70685577]
[37.79454422 106.35971069]
[37.60934067 95.83223724]
[39.19314194 85.42294312]
[42.50104141 75.42695618]
[47.43924713 66.12770844]
[53.86774445 57.78886414]
[61.60426331 50.64686203]
[53.88018036 37.78845978]
[46.15609360 24.93005753]
[38.43201065 12.07165527]
[30.70792389 -0.78674728]
[22.98383904 -13.64514923]
[8.57585907 -9.22975445]
[-6.46108961 -8.39160633]
[-21.25268936 -11.17508793]
[-34.93992615 -17.41413307]
[-46.72898865 -26.74212646]
[-55.93728256 -38.61343765]
[-62.03298187 -52.33534622]
[-64.66571045 -67.10845184]
[-63.68671799 -82.07325745]
[-59.15723801 -96.36016846]
[-51.34469986 -109.14000702]
[-40.70694351 -119.67217255]
[-48.43103027 -132.53057861]
[-56.15511322 -145.38897705]
[-72.44866943 -153.90367126]
[-72.14197540 -171.42239380]
[-80.13188934 -184.11732483]
[-93.68597412 -194.30178833]
[-87.65166473 -210.14550781]
[-70.75666046 -208.73300171]
[-67.43696594 -192.10723877]
[-59.44704819 -179.41230774]
[-47.68889618 -176.40345764]
[-40.93872070 -165.83680725]
[-43.29671097 -153.11306763]
[-35.57262802 -140.25465393]
[-27.84854126 -127.39625549]
[-13.55403900 -131.84098816]
[1.39786077 -132.73580933]
[16.13828468 -130.02439880]
[29.80961037 -123.86009216]
[41.61535645 -114.59724426]
[50.86659241 -102.77088165]
[57.02213669 -89.06577301]
[59.72021866 -74.27679443]
[58.79972839 -59.26284027]
[54.30984116 -44.89690399]
[46.50740051 -32.01535797]
[35.84224319 -21.36923409]
[43.56632614 -8.51083183]
[51.29041290 4.34756994]
[59.01449585 17.20597267]
[66.73857880 30.06437492]
[74.46266937 42.92277908]
[87.03227234 38.82972336]
[100.18144989 37.47055054]
[113.32250977 38.90600967]
[125.86815643 43.07194519]
[137.25767517 49.78216553]
[146.98202515 58.73677444]
[154.60661316 69.53556061]
[159.79066467 81.69589233]
[174.55673218 79.05702972]
[189.32278442 76.41816711]
[204.08883667 73.77929688]
[218.85488892 71.14043427]
[233.59269714 68.34811401]
[248.30065918 65.40262604]
[263.00863647 62.45714569]
[268.29986572 58.32067871]
[274.02316284 57.63136673]
[278.38906860 59.70848465]
[293.20681763 57.37738037]
[308.02456665 55.04627609]
[320.43280029 44.32397842]
[335.83175659 49.96352005]
[338.38031006 66.16342926]
[325.45672607 76.25862122]
[310.35568237 69.86403656]
[295.53793335 72.19513702]
[280.72015381 74.52624512]
[265.95410156 77.16510773]
[251.24613953 80.11058807]
[236.53817749 83.05607605]
[230.55850220 87.48202515]
[221.49375916 85.90649414]
[206.72770691 88.54535675]
[191.96163940 91.18421936]
[177.19558716 93.82308197]
[162.42953491 96.46194458]
[159.35183716 119.68054962]
[147.94696045 140.13792419]
[129.81503296 154.96388245]
[107.50000000 162.07829285]
[107.50000000 177.07829285]
[118.39455414 188.21142578]
[118.18087006 203.42355347]
[107.50000000 213.74124146]
[107.50000000 228.74124146]
[107.50000000 243.74124146]
[107.50000000 258.74124146]
[107.50000000 273.74124146]
[107.50000000 288.74124146]
[107.50000000 303.74124146]
[107.50000000 318.74124146]
[107.50000000 333.74124146]
[107.50000000 348.74124146]
[122.03988647 352.80255127]
[134.94427490 360.63705444]
[145.25555420 371.66339111]
[152.20857239 385.06332397]
[155.28736877 399.84246826]
[154.26348877 414.90414429]
[149.21287537 429.13067627]
[140.51036072 441.46633911]
[128.80169678 450.99575806]
[114.95575714 457.01177979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[55 70]
[56 69]
[57 68]
[59 65]
[60 64]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 117]
[101 116]
[102 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
