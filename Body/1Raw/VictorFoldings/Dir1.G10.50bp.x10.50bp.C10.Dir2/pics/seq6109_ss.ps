%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAAACAGGGGGGGGGGCUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCxxxxxxxxxxUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCCCCCCCCCCCUACAAACA\
) } def
/len { sequence length } bind def

/coor [
[88.45854950 354.03833008]
[75.90032959 345.68719482]
[65.81410217 334.47473145]
[58.83391190 321.10583496]
[55.39852905 306.42083740]
[55.72390366 291.34286499]
[59.78958893 276.81976318]
[67.34001160 263.76440430]
[77.90053558 252.99751282]
[90.80733490 245.19589233]
[105.24906158 240.84992981]
[104.62508392 225.86291504]
[104.00110626 210.87590027]
[103.37712860 195.88888550]
[102.75315094 180.90187073]
[102.12917328 165.91485596]
[101.50519562 150.92784119]
[100.88121796 135.94082642]
[100.25724030 120.95380402]
[87.73127747 112.70151520]
[73.71456909 118.04302979]
[59.69785309 123.38454437]
[45.68114090 128.72605896]
[31.66442680 134.06756592]
[17.64771461 139.40907288]
[3.63100147 144.75059509]
[-4.21558380 158.74383545]
[-20.07082558 161.19145203]
[-31.77193642 150.21586609]
[-30.34282875 134.23660278]
[-16.87978935 125.51156616]
[-1.71051109 130.73388672]
[12.30620193 125.39236450]
[26.32291412 120.05085754]
[40.33962631 114.70934296]
[54.35634232 109.36782837]
[68.37305450 104.02631378]
[82.38977051 98.68480682]
[67.47676849 97.07157135]
[56.67170334 86.66722107]
[54.49631119 71.82580566]
[61.86095810 58.75821304]
[75.68366241 52.93302155]
[90.17984772 56.78797913]
[99.28308868 68.70984650]
[99.18341827 83.71071625]
[106.09041595 70.39556122]
[112.99741364 57.08040237]
[113.08238220 50.36472702]
[116.12644196 45.46931839]
[120.47876740 43.36391068]
[127.93367767 30.34759903]
[135.38859558 17.33128929]
[123.07369995 8.74984932]
[111.56543732 -0.88641161]
[100.95387268 -11.50207424]
[91.32205200 -23.01405525]
[82.74536896 -35.33225632]
[75.29093933 -48.36026764]
[69.01710510 -61.99612808]
[63.97297287 -76.13311005]
[60.19802094 -90.66058350]
[57.72179413 -105.46483612]
[56.56367111 -120.43000793]
[56.73271179 -135.43898010]
[58.22760010 -150.37426758]
[61.03663635 -165.11898804]
[65.13782501 -179.55775452]
[70.49908447 -193.57754517]
[77.07843781 -207.06863403]
[84.82440948 -219.92546082]
[93.67636108 -232.04736328]
[103.56501770 -243.33947754]
[114.41298676 -253.71345520]
[126.13536072 -263.08807373]
[138.64041138 -271.38995361]
[151.83024597 -278.55416870]
[165.60163879 -284.52459717]
[179.84683228 -289.25454712]
[194.45429993 -292.70700073]
[209.30973816 -294.85488892]
[224.29689026 -295.68145752]
[239.29843140 -295.18020630]
[254.19697571 -293.35504150]
[268.87591553 -290.22030640]
[283.22033691 -285.80047607]
[297.11801147 -280.13018799]
[310.46014404 -273.25378418]
[323.14233398 -265.22509766]
[335.06533813 -256.10699463]
[346.13577271 -245.97077942]
[356.26705933 -234.89582825]
[365.37988281 -222.96879578]
[373.40292358 -210.28303528]
[380.27340698 -196.93783569]
[385.93750000 -183.03764343]
[390.35095215 -168.69123840]
[393.47918701 -154.01092529]
[395.29769897 -139.11157227]
[395.79229736 -124.10980225]
[394.95907593 -109.12303162]
[392.80456543 -94.26854706]
[389.34564209 -79.66260529]
[384.60934448 -65.41952515]
[378.63281250 -51.65077972]
[371.46273804 -38.46413040]
[363.15527344 -25.96277809]
[353.77545166 -14.24456692]
[343.39666748 -3.40121055]
[332.10012817 6.48242617]
[319.97430420 15.32898903]
[307.11404419 23.06924057]
[293.62002563 29.64260101]
[279.59786987 34.99762344]
[265.15728760 39.09239960]
[250.41130066 41.89487839]
[235.47534180 43.38312531]
[220.46630859 43.54549789]
[205.50164795 42.38072205]
[190.69850159 39.89791489]
[176.17271423 36.11650467]
[162.03796387 31.06609154]
[148.40489197 24.78619957]
[140.94998169 37.80250931]
[133.49507141 50.81882095]
[126.31256866 63.98740005]
[119.40557098 77.30255890]
[112.49857330 90.61771393]
[120.31357574 102.89852142]
[115.24425507 120.32982635]
[115.86823273 135.31684875]
[116.49221039 150.30386353]
[117.11618805 165.29087830]
[117.74016571 180.27789307]
[118.36414337 195.26490784]
[118.98812103 210.25192261]
[119.61209869 225.23893738]
[120.23607635 240.22595215]
[134.98907471 243.35639954]
[148.49972534 250.05815125]
[159.91870117 259.90994263]
[168.52821350 272.29248047]
[173.78706360 286.42736816]
[175.36466980 301.42611694]
[173.16186523 316.34585571]
[167.31710815 330.24871826]
[158.19783020 342.26077271]
[146.37725830 351.62692261]
[132.59844971 357.75842285]
[117.72754669 360.26980591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[46 128]
[47 127]
[48 126]
[51 125]
[52 124]
[53 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
