%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUUAUUACGGGGGGGGGGCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAxxxxxxxxxxAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCCCCCCCCCCCUAUCUAUUAC\
) } def
/len { sequence length } bind def

/coor [
[98.64756012 575.97821045]
[84.94540405 569.71728516]
[72.98028564 560.56396484]
[63.35237503 548.97729492]
[56.54459763 535.53845215]
[52.89842987 520.92156982]
[52.59676361 505.85983276]
[55.65472794 491.10867310]
[61.91893768 477.40802002]
[71.07518005 465.44512939]
[82.66419220 455.82003784]
[96.10466003 449.01550293]
[110.72241974 445.37289429]
[110.41841888 430.37594604]
[110.11441040 415.37902832]
[109.81040955 400.38211060]
[109.50640106 385.38519287]
[109.20240021 370.38827515]
[108.89839935 355.39135742]
[108.59439087 340.39443970]
[108.29039001 325.39752197]
[107.98638153 310.40060425]
[107.68238068 295.40368652]
[107.37837219 280.40676880]
[107.07437134 265.40985107]
[106.77036285 250.41293335]
[106.46636200 235.41601562]
[95.57857513 225.31692505]
[95.05663300 210.11224365]
[105.72331238 198.76060486]
[105.41931152 183.76368713]
[105.11531067 168.76676941]
[104.81130219 153.76985168]
[102.69026184 138.92056274]
[98.78350830 124.43825531]
[94.87675476 109.95594788]
[84.99247742 121.23872375]
[70.00033569 120.75319672]
[60.86679459 108.85452271]
[64.27286530 94.24634552]
[77.72706604 87.61427307]
[91.38759613 93.80915833]
[88.96604156 79.00591278]
[84.46822357 70.98651123]
[86.64859009 63.87837219]
[84.52754211 49.02909088]
[81.22544098 44.83518982]
[80.02391815 40.25081635]
[80.71269989 36.15643311]
[82.75742340 33.21591949]
[81.54264832 18.26519012]
[80.32788086 3.31445980]
[79.11311340 -11.63627052]
[75.27951050 -19.99358559]
[78.02836609 -26.90179825]
[77.11685944 -41.87407684]
[62.15084457 -43.25934219]
[47.57171631 -46.91303253]
[33.72122574 -52.74950027]
[20.92404938 -60.63192749]
[9.48016930 -70.37554169]
[-0.34215266 -81.75193787]
[-8.31266689 -94.49444580]
[-14.24453259 -108.30434418]
[-17.99869919 -122.85792542]
[-19.48716354 -137.81402588]
[-18.67503357 -152.82205200]
[-15.58134651 -167.53019714]
[-10.27862358 -181.59367371]
[-2.89116812 -194.68283081]
[6.40784788 -206.49082947]
[17.40044212 -216.74085999]
[29.82893181 -225.19267273]
[43.40197372 -231.64813232]
[57.80140305 -235.95590210]
[72.68966675 -238.01502991]
[87.71777344 -237.77722168]
[102.53343201 -235.24806213]
[116.78934479 -230.48683167]
[130.15133667 -223.60514832]
[142.30618286 -214.76432800]
[152.96896362 -204.17160034]
[161.88970947 -192.07530212]
[168.85931396 -178.75895691]
[173.71441650 -164.53472900]
[176.34117126 -149.73606873]
[176.67803955 -134.70985413]
[174.71710205 -119.80834198]
[170.50431824 -105.38083649]
[164.13847351 -91.76553345]
[155.76876831 -79.28160095]
[145.59141541 -68.22168732]
[133.84497070 -58.84503937]
[120.80479431 -51.37146759]
[106.77656555 -45.97615814]
[92.08913422 -42.78559113]
[93.00064850 -27.81331253]
[94.06384277 -12.85103893]
[95.27861023 2.09969115]
[96.49338531 17.05042076]
[97.70815277 32.00115204]
[99.37682343 46.90804672]
[101.49787140 61.75732803]
[103.76928711 76.58435059]
[106.19084167 91.38759613]
[109.35906219 106.04919434]
[113.26581573 120.53150177]
[117.17256927 135.01380920]
[122.37020874 120.94311523]
[133.07637024 110.43701935]
[147.24261475 105.50571442]
[162.15841675 107.09272003]
[174.96989441 114.89439392]
[183.22575378 127.41799927]
[185.34637451 142.26734924]
[180.92599487 156.60122681]
[170.81039429 167.67709351]
[156.93504333 173.37571716]
[141.95475769 172.60679626]
[128.73580933 165.51741028]
[119.80821991 153.46583557]
[120.11222839 168.46276855]
[120.41622925 183.45968628]
[120.72023773 198.45660400]
[131.83818054 209.36663818]
[131.93284607 224.57997131]
[121.46327972 235.11201477]
[121.76728821 250.10893250]
[122.07128906 265.10583496]
[122.37529755 280.10275269]
[122.67929840 295.09967041]
[122.98329926 310.09661865]
[123.28730774 325.09353638]
[123.59130859 340.09045410]
[123.89531708 355.08737183]
[124.19931793 370.08428955]
[124.50332642 385.08120728]
[124.80732727 400.07812500]
[125.11133575 415.07504272]
[125.41533661 430.07196045]
[125.71933746 445.06887817]
[140.47271729 448.11611938]
[154.17790222 454.37036133]
[166.14744568 463.51791382]
[175.78097534 475.09991455]
[182.59526062 488.53543091]
[186.24851990 503.15054321]
[186.55747986 518.21215820]
[183.50666809 532.96478271]
[177.24909973 546.66845703]
[168.09864807 558.63580322]
[156.51431274 568.26654053]
[143.07714844 575.07757568]
[128.46115112 578.72729492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 127]
[30 124]
[31 123]
[32 122]
[33 121]
[34 108]
[35 107]
[36 106]
[42 105]
[43 104]
[45 103]
[46 102]
[50 101]
[51 100]
[52 99]
[53 98]
[55 97]
[56 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
