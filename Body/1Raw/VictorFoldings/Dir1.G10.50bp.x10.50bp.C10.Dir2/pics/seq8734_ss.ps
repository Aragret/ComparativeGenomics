%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUCUACUGGGGGGGGGGGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACxxxxxxxxxxAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAACCCCCCCCCCUAAUUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 424.09234619]
[71.19830322 418.07632446]
[59.48964310 408.54690552]
[50.78712082 396.21121216]
[45.73651886 381.98471069]
[44.71262741 366.92303467]
[47.79142761 352.14385986]
[54.74444962 338.74392700]
[65.05573273 327.71759033]
[77.96011353 319.88308716]
[92.50000000 315.82177734]
[92.50000000 300.82177734]
[92.50000000 285.82177734]
[92.50000000 270.82177734]
[92.50000000 255.82177734]
[92.50000000 240.82177734]
[92.50000000 225.82177734]
[92.50000000 210.82177734]
[92.50000000 195.82177734]
[92.50000000 180.82177734]
[77.77803040 178.06788635]
[63.81266022 172.65594482]
[51.07939148 164.77024841]
[40.01176071 154.67926025]
[30.98659325 142.72656250]
[24.31117439 129.31913757]
[20.21278954 114.91345215]
[18.83097839 100.00000000]
[20.21278954 85.08654785]
[24.31117439 70.68086243]
[30.98659325 57.27343369]
[40.01176071 45.32074356]
[51.07939148 35.22975922]
[63.81266022 27.34405327]
[77.77803040 21.93211937]
[92.50000000 19.17822075]
[92.50000000 4.17822075]
[92.50000000 -10.82177925]
[92.50000000 -25.82177925]
[92.34396362 -40.82096863]
[92.03190613 -55.81772232]
[91.71984863 -70.81447601]
[76.74861908 -71.90841675]
[61.94561386 -74.39949036]
[47.44092178 -78.26581573]
[33.36201859 -83.47340393]
[19.83263397 -89.97649384]
[6.97166300 -97.71793365]
[-5.10786724 -106.62969208]
[-16.29979897 -116.63344574]
[-26.50577545 -127.64128113]
[-35.63610458 -139.55647278]
[-43.61054611 -152.27427673]
[-50.35901642 -165.68295288]
[-55.82221603 -179.66465759]
[-59.95212173 -194.09651184]
[-62.71244812 -208.85168457]
[-64.07893372 -223.80049133]
[-64.03957367 -238.81158447]
[-62.59470367 -253.75303650]
[-59.75703049 -268.49353027]
[-55.55149078 -282.90353394]
[-50.01503754 -296.85638428]
[-43.19633484 -310.22946167]
[-35.15530396 -322.90530396]
[-25.96261215 -334.77243042]
[-15.69904423 -345.72659302]
[-4.45480061 -355.67150879]
[7.67130232 -364.51977539]
[20.57269669 -372.19366455]
[34.13600540 -378.62570190]
[48.24202347 -383.75939941]
[62.76679230 -387.54959106]
[77.58265686 -389.96301270]
[92.55942535 -390.97839355]
[107.56546021 -390.58688354]
[122.46889496 -388.79190063]
[137.13876343 -385.60919189]
[151.44612122 -381.06674194]
[165.26525879 -375.20446777]
[178.47470093 -368.07391357]
[190.95838928 -359.73770142]
[202.60658264 -350.26913452]
[213.31695557 -339.75140381]
[222.99534607 -328.27694702]
[231.55670166 -315.94659424]
[238.92581177 -302.86874390]
[245.03788757 -289.15826416]
[249.83921814 -274.93569946]
[253.28761292 -260.32598877]
[255.35278320 -245.45758057]
[256.01654053 -230.46112061]
[255.27308655 -215.46839905]
[253.12895203 -200.61117554]
[249.60295105 -186.02001953]
[244.72610474 -171.82316589]
[238.54125977 -158.14537048]
[231.10275269 -145.10684204]
[222.47598267 -132.82215881]
[212.73675537 -121.39929199]
[201.97065735 -110.93862915]
[190.27229309 -101.53209686]
[177.74449158 -93.26235962]
[164.49732971 -86.20209503]
[150.64724731 -80.41335297]
[136.31593323 -75.94700623]
[121.62937164 -72.84230804]
[106.71660614 -71.12653351]
[107.02866364 -56.12977600]
[107.34071350 -41.13302231]
[110.64566803 -34.46797180]
[107.50000000 -25.82177925]
[107.50000000 -10.82177925]
[107.50000000 4.17822075]
[107.50000000 19.17822075]
[122.22196960 21.93211937]
[136.18733215 27.34405327]
[148.92060852 35.22975922]
[159.98823547 45.32074356]
[169.01341248 57.27343369]
[175.68882751 70.68086243]
[179.78721619 85.08654785]
[181.16902161 100.00000000]
[179.78721619 114.91345215]
[175.68882751 129.31913757]
[169.01341248 142.72656250]
[159.98823547 154.67926025]
[148.92060852 164.77024841]
[136.18733215 172.65594482]
[122.22196960 178.06788635]
[107.50000000 180.82177734]
[107.50000000 195.82177734]
[107.50000000 210.82177734]
[107.50000000 225.82177734]
[107.50000000 240.82177734]
[107.50000000 255.82177734]
[107.50000000 270.82177734]
[107.50000000 285.82177734]
[107.50000000 300.82177734]
[107.50000000 315.82177734]
[122.03988647 319.88308716]
[134.94427490 327.71759033]
[145.25555420 338.74392700]
[152.20857239 352.14385986]
[155.28736877 366.92303467]
[154.26348877 381.98471069]
[149.21287537 396.21121216]
[140.51036072 408.54690552]
[128.80169678 418.07632446]
[114.95575714 424.09234619]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 115]
[37 114]
[38 113]
[39 112]
[40 110]
[41 109]
[42 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
