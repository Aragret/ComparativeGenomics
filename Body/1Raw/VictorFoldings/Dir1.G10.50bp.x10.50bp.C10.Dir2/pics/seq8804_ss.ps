%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUCACAUGGGGGGGGGGGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCxxxxxxxxxxCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCCCCCCCCCCCAAUCACUU\
) } def
/len { sequence length } bind def

/coor [
[86.20629883 400.25698853]
[71.71661377 396.04849243]
[58.81037903 388.23239136]
[48.36758041 377.34155273]
[41.10021591 364.11853027]
[37.50378799 349.46493530]
[37.82350922 334.37985229]
[42.03758240 319.89178467]
[49.85867691 306.98855591]
[60.75354767 296.54995728]
[73.97935486 289.28771973]
[88.63434601 285.69692993]
[88.94640350 270.70019531]
[89.25846100 255.70343018]
[89.57051849 240.70668030]
[89.88257599 225.70993042]
[90.19462585 210.71318054]
[90.50668335 195.71641541]
[90.81874084 180.71966553]
[91.13079834 165.72291565]
[91.44285583 150.72616577]
[91.75491333 135.72940063]
[81.97470093 131.93212891]
[73.67010498 125.52075195]
[67.52098846 117.02014923]
[64.03072357 107.12622070]
[49.03153229 106.97018433]
[34.03234482 106.81414795]
[19.03315544 106.65810394]
[13.98784542 120.93478394]
[4.57831860 132.79815674]
[-8.17474842 140.96136475]
[-22.88799858 144.53894043]
[-37.96545029 143.14279175]
[-51.77161026 136.92437744]
[-62.80889130 126.55822754]
[-69.88005829 113.16877747]
[-72.21807098 98.20841217]
[-69.56932831 83.29993439]
[-62.22114563 70.06048584]
[-50.97059631 59.92619324]
[-37.03805923 53.99634933]
[-21.93482590 52.91417313]
[-7.29918718 56.79705811]
[5.28129435 65.22381592]
[14.44198227 77.28037262]
[19.18919182 91.65892029]
[34.18838120 91.81495667]
[49.18756866 91.97099304]
[64.18675995 92.12702942]
[66.59219360 84.88409424]
[70.44484711 78.29597473]
[75.57780457 72.64806366]
[81.76873016 68.18502045]
[88.74942017 65.10019684]
[96.21748352 63.52720642]
[103.84939575 63.53420639]
[111.31455994 65.12088776]
[118.28958893 68.21851349]
[128.27230835 57.02274323]
[138.13803101 45.72373962]
[147.88568115 34.32271957]
[157.63333130 22.92169762]
[167.38099670 11.52067757]
[157.08993530 0.58718288]
[148.04133606 -11.39489460]
[140.34129333 -24.28507233]
[134.08009338 -37.93222046]
[129.33114624 -52.17633057]
[126.15011597 -66.85039520]
[124.57431030 -81.78237915]
[124.62220001 -96.79720306]
[126.29322052 -111.71883392]
[129.56779480 -126.37230682]
[134.40751648 -140.58583069]
[140.75563049 -154.19276428]
[148.53773499 -167.03356934]
[157.66258240 -178.95768738]
[168.02317810 -189.82530212]
[179.49804688 -199.50903320]
[191.95266724 -207.89530945]
[205.24101257 -214.88581848]
[219.20727539 -220.39860535]
[233.68769836 -224.36903381]
[248.51252747 -226.75054932]
[263.50796509 -227.51522827]
[278.49813843 -226.65409851]
[293.30734253 -224.17727661]
[307.76193237 -220.11378479]
[321.69244385 -214.51127625]
[334.93554688 -207.43542480]
[347.33596802 -198.96920776]
[358.74829102 -189.21186829]
[369.03878784 -178.27781677]
[378.08673096 -166.29525757]
[385.78607178 -153.40466309]
[392.04653931 -139.75718689]
[396.79470825 -125.51281738]
[399.97497559 -110.83857727]
[401.54995728 -95.90650940]
[401.50128174 -80.89168549]
[399.82943726 -65.97015381]
[396.55407715 -51.31684875]
[391.71359253 -37.10358047]
[385.36474609 -23.49699211]
[377.58193970 -10.65661144]
[368.45648193 1.26701200]
[358.09527588 12.13408184]
[346.61990356 21.81718636]
[334.16482544 30.20279503]
[320.87609863 37.19259262]
[306.90954590 42.70462799]
[292.42889404 46.67427444]
[277.60394287 49.05498886]
[262.60848999 49.81885910]
[247.61834717 48.95693207]
[232.80926514 46.47930908]
[218.35490417 42.41504288]
[204.42468262 36.81177902]
[191.18197632 29.73521805]
[178.78201294 21.26832962]
[169.03436279 32.66934967]
[159.28671265 44.07036972]
[149.53906250 55.47139359]
[147.57012939 62.64558029]
[139.46807861 67.00547028]
[129.48535156 78.20124054]
[136.64268494 101.37310028]
[127.77123260 123.94432831]
[106.75166321 136.04145813]
[106.43960571 151.03822327]
[106.12754822 166.03497314]
[105.81549835 181.03172302]
[105.50344086 196.02847290]
[105.19138336 211.02523804]
[104.87932587 226.02198792]
[104.56726837 241.01873779]
[104.25521088 256.01550293]
[103.94316101 271.01223755]
[103.63110352 286.00900269]
[118.12403870 290.20629883]
[131.03630066 298.01242065]
[141.48750305 308.89520264]
[148.76507568 322.11257935]
[152.37281799 336.76339722]
[152.06474304 351.84875488]
[147.86186218 366.34005737]
[140.05073547 379.24929810]
[129.16394043 389.69631958]
[115.94373322 396.96878052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[26 50]
[27 49]
[28 48]
[29 47]
[59 127]
[60 126]
[61 124]
[62 123]
[63 122]
[64 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
