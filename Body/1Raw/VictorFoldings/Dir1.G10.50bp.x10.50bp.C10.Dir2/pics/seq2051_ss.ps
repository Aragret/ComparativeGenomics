%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUAACCGGGGGGGGGGAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAxxxxxxxxxxGUUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGCCCCCCCCCCAAUUAUAUCC\
) } def
/len { sequence length } bind def

/coor [
[107.95188904 371.96371460]
[94.10594940 365.94766235]
[82.39728546 356.41824341]
[73.69476318 344.08258057]
[68.64416504 329.85607910]
[67.62026978 314.79437256]
[70.69906616 300.01522827]
[77.65209198 286.61529541]
[87.96337891 275.58895874]
[100.86775970 267.75445557]
[115.40764618 263.69314575]
[115.40764618 248.69314575]
[115.40764618 233.69314575]
[115.40764618 218.69314575]
[115.40764618 203.69314575]
[115.40764618 188.69314575]
[115.40764618 173.69314575]
[115.40764618 158.69314575]
[115.40764618 143.69314575]
[115.40764618 128.69314575]
[109.18792725 124.50206757]
[96.74848175 116.11992645]
[90.52876282 111.92885590]
[76.62620544 117.56081390]
[73.01704407 132.65231323]
[61.20475006 142.71458435]
[45.73138428 143.87847900]
[32.54677963 135.69644165]
[26.72067833 121.31463623]
[30.49334145 106.26316833]
[42.41410065 96.32962799]
[57.89917755 95.33367157]
[70.99424744 103.65825653]
[84.89680481 98.02629852]
[83.96299744 90.58466339]
[82.09539032 75.70137787]
[81.16158295 68.25974274]
[66.29853058 66.23740387]
[52.70953751 74.76493073]
[37.61812592 69.32169342]
[32.60113907 54.08327484]
[41.50717926 40.73928833]
[57.50429535 39.52609634]
[68.32086945 51.37435913]
[83.18391418 53.39669418]
[96.63987732 46.76819611]
[104.09478760 33.75188446]
[111.54969788 20.73557663]
[119.00460815 7.71926689]
[126.45951843 -5.29704285]
[125.94151306 -23.67397308]
[141.38285828 -31.95436287]
[148.56536865 -45.12294769]
[155.74787903 -58.29152679]
[162.79301453 -71.53411102]
[169.70001221 -84.84927368]
[169.18630981 -100.66213226]
[181.91500854 -108.39707184]
[188.82200623 -121.71222687]
[183.29324341 -134.03660583]
[185.85534668 -147.10043335]
[195.34754944 -156.15429688]
[208.13206482 -158.03930664]
[215.31457520 -171.20788574]
[222.49707031 -184.37646484]
[229.67958069 -197.54504395]
[236.86209106 -210.71363831]
[224.77096558 -220.95552063]
[215.05097961 -233.46315002]
[208.11686707 -247.69918823]
[204.26377869 -263.05261230]
[203.65461731 -278.86499023]
[206.31326294 -294.45861816]
[212.12358093 -309.16564941]
[220.83450317 -322.35675049]
[232.07087708 -333.46786499]
[245.34963989 -342.02447510]
[260.10055542 -347.66180420]
[275.69073486 -350.14035034]
[291.45178223 -349.35614014]
[306.70840454 -345.34503174]
[313.33688354 -358.80099487]
[319.96539307 -372.25695801]
[326.59390259 -385.71292114]
[324.97491455 -402.03198242]
[338.45407104 -411.37243652]
[353.16516113 -404.12564087]
[353.97467041 -387.74649048]
[340.04986572 -379.08444214]
[333.42135620 -365.62847900]
[326.79284668 -352.17251587]
[320.16436768 -338.71652222]
[331.48840332 -330.14318848]
[341.02764893 -319.61413574]
[348.44952393 -307.49407959]
[353.49484253 -294.20321655]
[355.98681641 -280.20272827]
[355.83734131 -265.97866821]
[353.05001831 -252.02520752]
[347.72009277 -238.82740784]
[340.03125000 -226.84432983]
[330.24926758 -216.49313354]
[318.71279907 -208.13450623]
[305.82168579 -202.06010437]
[292.02310181 -198.48239136]
[277.79595947 -197.52719116]
[263.63442993 -199.22927856]
[250.03068542 -203.53112793]
[242.84817505 -190.36253357]
[235.66566467 -177.19395447]
[228.48315430 -164.02537537]
[221.30064392 -150.85679626]
[226.74024963 -134.97383118]
[218.88275146 -119.75726318]
[202.13716125 -114.80522919]
[195.23016357 -101.49007416]
[196.23791504 -86.62960052]
[183.01516724 -77.94226837]
[176.10816956 -64.62711334]
[175.81814575 -57.19330597]
[168.91645813 -51.10902023]
[161.73394775 -37.94043732]
[154.55143738 -24.77185440]
[157.66235352 -13.04029369]
[151.73265076 -1.99232495]
[139.47583008 2.15786767]
[132.02091980 15.17417717]
[124.56600952 28.19048691]
[117.11109924 41.20679474]
[109.65618896 54.22310638]
[130.40763855 128.69314575]
[130.40763855 143.69314575]
[130.40763855 158.69314575]
[130.40763855 173.69314575]
[130.40763855 188.69314575]
[130.40763855 203.69314575]
[130.40763855 218.69314575]
[130.40763855 233.69314575]
[130.40763855 248.69314575]
[130.40763855 263.69314575]
[144.94752502 267.75445557]
[157.85191345 275.58895874]
[168.16319275 286.61529541]
[175.11621094 300.01522827]
[178.19502258 314.79437256]
[177.17112732 329.85607910]
[172.12052917 344.08258057]
[163.41799927 356.41824341]
[151.70933533 365.94766235]
[137.86340332 371.96371460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 34]
[24 33]
[37 45]
[38 44]
[46 130]
[47 129]
[48 128]
[49 127]
[50 126]
[52 123]
[53 122]
[54 121]
[55 119]
[56 118]
[58 116]
[59 115]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
