%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAACAACCGGGGGGGGGGGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUxxxxxxxxxxUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGCCCCCCCCCCAGAAAACACCC\
) } def
/len { sequence length } bind def

/coor [
[92.63928986 434.62344360]
[78.61734772 429.07043457]
[66.41738892 420.20410156]
[56.80631638 408.58178711]
[50.38829041 394.93411255]
[47.56675720 380.11892700]
[48.51906967 365.06753540]
[53.18537521 350.72610474]
[61.27234268 337.99615479]
[72.27161407 327.67788696]
[85.49177551 320.41992188]
[100.10179138 316.67846680]
[100.10179138 301.67846680]
[100.10179138 286.67846680]
[100.10179138 271.67846680]
[100.10179138 256.67846680]
[100.10179138 241.67846680]
[100.10179138 226.67846680]
[100.10179138 211.67846680]
[100.10179138 196.67846680]
[100.10179138 181.67846680]
[99.33213043 166.69822693]
[97.79483795 151.77722168]
[96.25754547 136.85620117]
[83.51170349 133.17410278]
[72.88055420 125.23728943]
[65.72759247 114.06368256]
[62.97021103 101.08634949]
[48.19809723 98.48162842]
[33.42597961 95.87690735]
[18.65386391 93.27217865]
[3.80854034 91.12360382]
[-11.09590721 89.43320465]
[-26.00035477 87.74280548]
[-32.29806137 90.06260681]
[-37.95487213 88.97247314]
[-41.47743225 85.66478729]
[-56.29991150 83.36390686]
[-71.12239838 81.06303406]
[-85.94487762 78.76216125]
[-102.52401733 82.30735016]
[-110.52022552 67.35753632]
[-98.36822510 55.53530121]
[-83.64400482 63.93967819]
[-68.82151794 66.24055481]
[-53.99903870 68.54142761]
[-39.17655563 70.84230042]
[-24.30995750 72.83835602]
[-9.40550995 74.52875519]
[5.49893808 76.21915436]
[8.50470352 74.26657104]
[12.62271214 73.70835114]
[17.17045021 75.05878448]
[21.25858498 78.50006104]
[36.03070068 81.10478973]
[50.80281830 83.70951080]
[65.57493591 86.31423187]
[71.55153656 76.27089691]
[80.35951996 68.58922577]
[91.12223816 64.03376007]
[102.76853180 63.05787659]
[114.13928223 65.75870514]
[122.55268860 53.34039307]
[130.96609497 40.92208099]
[139.37951660 28.50376511]
[140.24740601 10.13865089]
[156.27069092 3.04646850]
[145.18707275 -7.68218422]
[136.39981079 -20.35466576]
[130.24182129 -34.48773956]
[126.94575500 -49.54289627]
[126.63528442 -64.94687653]
[129.32041931 -80.11348724]
[134.89723206 -94.46593475]
[143.15180969 -107.45872498]
[153.76853943 -118.59842682]
[166.34214783 -127.46239471]
[180.39312744 -133.71479797]
[195.38609314 -137.11940002]
[210.75012207 -137.54835510]
[225.90055847 -134.98718262]
[240.26118469 -129.53509521]
[248.15766907 -142.28834534]
[256.05413818 -155.04161072]
[263.95062256 -167.79486084]
[257.21438599 -181.67385864]
[259.07369995 -196.98876953]
[268.93533325 -208.85266113]
[283.65243530 -213.47981262]
[298.52883911 -209.39372253]
[308.81753540 -197.89823914]
[311.23544312 -182.66152954]
[305.01101685 -168.54557800]
[292.13046265 -160.05473328]
[276.70388794 -159.89837646]
[268.80740356 -147.14512634]
[260.91091919 -134.39186096]
[253.01445007 -121.63861084]
[263.78814697 -111.77851105]
[272.55819702 -100.09512329]
[279.02163696 -86.98941803]
[282.95483398 -72.91154480]
[284.22100830 -58.34534454]
[282.77505493 -43.79174042]
[278.66522217 -29.75150299]
[272.03140259 -16.70802116]
[263.10043335 -5.11066437]
[252.17832947 4.64070749]
[239.63975525 12.20952511]
[225.91523743 17.33412552]
[211.47634888 19.83680153]
[196.81950378 19.62996292]
[182.44888306 16.71919632]
[168.85913086 11.20313454]
[171.07519531 23.13423729]
[164.33045959 33.70210648]
[151.79782104 36.91717529]
[143.38441467 49.33549118]
[134.97100830 61.75380325]
[126.55759430 74.17211914]
[135.77635193 90.38554382]
[135.92681885 109.03595734]
[126.97086334 125.39601898]
[111.17855835 135.31890869]
[112.71585083 150.23992920]
[114.25314331 165.16093445]
[125.82721710 155.61940002]
[140.54545593 158.51310730]
[147.64582825 171.72615051]
[141.93650818 185.59712219]
[127.59217834 189.98348999]
[115.10179138 181.67846680]
[115.10179138 196.67846680]
[115.10179138 211.67846680]
[115.10179138 226.67846680]
[115.10179138 241.67846680]
[115.10179138 256.67846680]
[115.10179138 271.67846680]
[115.10179138 286.67846680]
[115.10179138 301.67846680]
[115.10179138 316.67846680]
[129.71180725 320.41992188]
[142.93196106 327.67788696]
[153.93122864 337.99615479]
[162.01820374 350.72610474]
[166.68450928 365.06753540]
[167.63682556 380.11892700]
[164.81529236 394.93411255]
[158.39726257 408.58178711]
[148.78619385 420.20410156]
[136.58622742 429.07043457]
[122.56428528 434.62344360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 126]
[23 125]
[24 124]
[28 57]
[29 56]
[30 55]
[31 54]
[32 50]
[33 49]
[34 48]
[37 47]
[38 46]
[39 45]
[40 44]
[62 120]
[63 119]
[64 118]
[65 117]
[67 114]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
