%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAGCAUCGGGGGGGGGGACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGxxxxxxxxxxGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACCCCCCCCCCCUCUACCAUC\
) } def
/len { sequence length } bind def

/coor [
[74.07975769 416.68850708]
[60.23381805 410.67248535]
[48.52515411 401.14306641]
[39.82263184 388.80740356]
[34.77202988 374.58087158]
[33.74813843 359.51919556]
[36.82693863 344.74002075]
[43.77995682 331.34008789]
[54.09124374 320.31375122]
[66.99562073 312.47924805]
[81.53550720 308.41793823]
[81.53550720 293.41793823]
[81.53550720 278.41793823]
[81.53550720 263.41793823]
[81.53550720 248.41793823]
[81.53550720 233.41793823]
[81.53550720 218.41793823]
[81.53550720 203.41793823]
[81.53550720 188.41793823]
[81.53550720 173.41793823]
[71.26319885 184.34861755]
[56.55869293 187.31130981]
[42.85501862 181.21136475]
[35.21540833 168.30259705]
[36.46255112 153.35452271]
[46.13564301 141.89018250]
[60.66067886 138.14540100]
[74.67094421 143.50381470]
[82.98967743 155.98474121]
[85.47480011 141.19203186]
[87.95991516 126.39932251]
[90.44503021 111.60661316]
[81.05786896 99.90699005]
[66.07815552 99.12715149]
[51.09844208 98.34730530]
[36.11872864 97.56745911]
[23.28561211 107.19506073]
[7.79396105 103.02513123]
[1.52764416 88.25648499]
[9.29364395 74.21836853]
[25.13455009 71.67961121]
[36.89857483 82.58774567]
[51.87828827 83.36759186]
[66.85800171 84.14743042]
[81.83771515 84.92727661]
[86.48749542 85.70608521]
[90.64556122 87.34416199]
[94.17789459 89.72991943]
[96.97071075 92.73266602]
[104.15322113 79.56408691]
[111.33572388 66.39550018]
[118.51823425 53.22692108]
[111.06006622 38.08004379]
[114.04640198 21.63123512]
[126.11136627 10.29975128]
[142.38563538 8.38834095]
[149.29263306 -4.92681456]
[134.60978699 -1.85862577]
[121.95353699 -9.90967751]
[118.50952911 -24.50895309]
[126.23311615 -37.36765289]
[140.73919678 -41.18520355]
[153.79188538 -33.79417038]
[157.98030090 -19.38930893]
[166.49139404 -31.74088097]
[175.00248718 -44.09245300]
[183.51358032 -56.44402695]
[172.38879395 -66.53969574]
[162.70893860 -78.02812195]
[154.64675903 -90.70427704]
[148.34614563 -104.34193420]
[143.91954041 -118.69771576]
[141.44592285 -133.51542664]
[140.96945190 -148.53063965]
[142.49864197 -163.47537231]
[146.00616455 -178.08293152]
[151.42947388 -192.09260559]
[158.67173767 -205.25440979]
[167.60374451 -217.33343506]
[178.06607056 -228.11412048]
[189.87200928 -237.40406799]
[202.81088257 -245.03749084]
[216.65174866 -250.87817383]
[231.14764404 -254.82185364]
[246.03984070 -256.79818726]
[261.06259155 -256.77188110]
[275.94775391 -254.74340820]
[290.42974854 -250.74896240]
[304.25009155 -244.85984802]
[317.16213989 -237.18115234]
[328.93548584 -227.84991455]
[339.35998535 -217.03265381]
[348.24960327 -204.92240906]
[355.44573975 -191.73533630]
[360.81994629 -177.70674133]
[364.27630615 -163.08699036]
[365.75311279 -148.13699341]
[365.22406006 -133.12355042]
[362.69857788 -118.31458282]
[358.22171021 -103.97438812]
[351.87335205 -90.35888672]
[343.76684570 -77.71104431]
[334.04681396 -66.25659943]
[322.88671875 -56.19995117]
[310.48577881 -47.72058105]
[297.06524658 -40.96981049]
[282.86465454 -36.06811905]
[268.13742065 -33.10298157]
[253.14637756 -32.12730789]
[238.15904236 -33.15851974]
[223.44290161 -36.17820740]
[209.26057434 -41.13248444]
[195.86514282 -47.93293762]
[187.35404968 -35.58136368]
[178.84297180 -23.22979164]
[170.33187866 -10.87821865]
[162.60778809 1.98018384]
[155.70079041 15.29533958]
[162.76977539 26.66307259]
[163.28639221 40.14804840]
[157.00775146 52.21574020]
[145.48617554 59.64987564]
[131.68681335 60.40943146]
[124.50431061 73.57801056]
[117.32180023 86.74659729]
[110.13928986 99.91517639]
[105.23773956 114.09173584]
[102.75262451 128.88444519]
[100.26750183 143.67715454]
[97.78238678 158.46986389]
[96.53550720 173.41793823]
[96.53550720 188.41793823]
[96.53550720 203.41793823]
[96.53550720 218.41793823]
[96.53550720 233.41793823]
[96.53550720 248.41793823]
[96.53550720 263.41793823]
[96.53550720 278.41793823]
[96.53550720 293.41793823]
[96.53550720 308.41793823]
[111.07540131 312.47924805]
[123.97978210 320.31375122]
[134.29106140 331.34008789]
[141.24407959 344.74002075]
[144.32287598 359.51919556]
[143.29899597 374.58087158]
[138.24839783 388.80740356]
[129.54586792 401.14306641]
[117.83720398 410.67248535]
[103.99126434 416.68850708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 130]
[30 129]
[31 128]
[32 127]
[33 45]
[34 44]
[35 43]
[36 42]
[49 126]
[50 125]
[51 124]
[52 123]
[56 118]
[57 117]
[64 116]
[65 115]
[66 114]
[67 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
