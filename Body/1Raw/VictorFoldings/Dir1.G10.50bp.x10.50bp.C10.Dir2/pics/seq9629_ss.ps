%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUCAUAAGGGGGGGGGGCCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAxxxxxxxxxxUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCCCCCCCCCCCAUUCUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[-7.05749512 507.37924194]
[-20.27769279 500.10678101]
[-31.16449547 489.65979004]
[-38.97562790 476.75051880]
[-43.17850876 462.25921631]
[-43.48657990 447.17388916]
[-39.87883759 432.52304077]
[-32.60126495 419.30566406]
[-22.15005875 408.42288208]
[-9.23779678 400.61676025]
[5.25513983 396.41946411]
[4.94308376 381.42269897]
[4.63102770 366.42596436]
[4.31897116 351.42919922]
[4.00691509 336.43246460]
[3.69485879 321.43569946]
[3.38280272 306.43893433]
[3.07074642 291.44219971]
[2.75869012 276.44543457]
[2.44663405 261.44866943]
[1.97859192 246.45599365]
[-5.50887728 259.45358276]
[-15.34614754 270.77737427]
[-27.16931534 280.00845337]
[-40.54101944 286.80532837]
[-54.96660614 290.91659546]
[-69.91244507 292.19012451]
[-84.82565308 290.57885742]
[-99.15456390 286.14239502]
[-112.36911011 279.04479980]
[-123.98046875 269.54867554]
[-133.55909729 258.00527954]
[-140.75067139 244.84165955]
[-145.28915405 230.54472351]
[-147.00666809 215.64338684]
[-145.83966064 200.68884277]
[-141.83129883 186.23432922]
[-135.12988281 172.81452942]
[-125.98330688 160.92587280]
[-114.72991943 151.00814819]
[-101.78599548 143.42825317]
[-87.63037872 138.46655273]
[-72.78670502 136.30661011]
[-57.80407715 137.02832031]
[-43.23673630 140.60499573]
[-29.62355804 146.90431213]
[-17.46812820 155.69325256]
[-7.22009850 166.64669800]
[0.74143153 179.35945129]
[6.12194824 193.36123657]
[8.72241402 208.13410950]
[8.44738674 223.12503052]
[16.69967461 210.59907532]
[24.95196533 198.07310486]
[33.20425415 185.54714966]
[41.45654297 173.02117920]
[49.70883179 160.49522400]
[45.36842346 148.32322693]
[48.90325928 135.69075012]
[59.23315811 127.29306793]
[72.71032715 126.38561249]
[81.22142029 114.03404236]
[76.89485931 103.96761322]
[77.61537933 93.03449249]
[83.22559357 83.62292480]
[92.50000000 77.78875732]
[92.50000000 62.78875732]
[92.50000000 47.78875732]
[92.50000000 32.78875732]
[92.50000000 17.78875542]
[79.15887451 10.17890263]
[71.42390442 -3.09007740]
[71.37576294 -18.44889450]
[79.02739716 -31.76610374]
[92.32055664 -39.45944214]
[107.67944336 -39.45944214]
[120.97260284 -31.76610374]
[128.62423706 -18.44889450]
[128.57609558 -3.09007740]
[120.84112549 10.17890263]
[107.50000000 17.78875542]
[107.50000000 32.78875732]
[107.50000000 47.78875732]
[107.50000000 62.78875732]
[107.50000000 77.78875732]
[110.74462128 79.16391754]
[113.74645996 81.00989532]
[116.43767548 83.28497314]
[129.82395935 76.51686096]
[143.21025085 69.74874115]
[147.20393372 64.34893036]
[152.53498840 62.15550995]
[157.29714966 62.99062347]
[170.95338440 56.78521729]
[184.60963440 50.57980728]
[183.71707153 35.42831421]
[188.36184692 20.97873306]
[197.91581726 9.18525124]
[211.08685303 1.64284003]
[226.09371948 -0.62845099]
[240.90681458 2.67855167]
[253.52282715 11.11660290]
[262.23553467 23.54452705]
[265.86660767 38.28154755]
[263.92495728 53.33460236]
[256.67321777 66.66789246]
[245.09210205 76.47819519]
[230.74786377 81.43875885]
[215.58044434 80.87869263]
[201.64109802 74.87374878]
[190.81503296 64.23605347]
[177.15879822 70.44145966]
[163.50254822 76.64686584]
[149.97836304 83.13503265]
[136.59207153 89.90314484]
[123.20579529 96.67125702]
[115.41902161 117.65908051]
[93.57299042 122.54512787]
[85.06190491 134.89669800]
[88.55505371 152.00621033]
[78.81174469 166.08996582]
[62.23479462 168.74751282]
[53.98250580 181.27346802]
[45.73021698 193.79943848]
[37.47792816 206.32539368]
[29.22563744 218.85136414]
[20.97334862 231.37731934]
[16.96560860 245.83201599]
[20.46822357 254.33985901]
[17.44338799 261.13662720]
[17.75544357 276.13339233]
[18.06750107 291.13012695]
[18.37955666 306.12689209]
[18.69161224 321.12362671]
[19.00366974 336.12039185]
[19.31572533 351.11715698]
[19.62778091 366.11389160]
[19.93983841 381.11065674]
[20.25189400 396.10742188]
[34.90688705 399.69818115]
[48.13269424 406.96044922]
[59.02756119 417.39901733]
[66.84866333 430.30224609]
[71.06272888 444.79031372]
[71.38245392 459.87539673]
[67.78602600 474.52902222]
[60.51866150 487.75201416]
[50.07586288 498.64285278]
[37.16963196 506.45895386]
[22.67994118 510.66744995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[52 127]
[53 126]
[54 125]
[55 124]
[56 123]
[57 122]
[61 119]
[62 118]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[88 116]
[89 115]
[90 114]
[93 113]
[94 112]
[95 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
