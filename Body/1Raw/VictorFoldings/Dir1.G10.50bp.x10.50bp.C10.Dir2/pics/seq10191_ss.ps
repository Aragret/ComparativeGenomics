%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCAACCCCGGGGGGGGGGCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUxxxxxxxxxxCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGCCCCCCCCCCUCUCCACCCC\
) } def
/len { sequence length } bind def

/coor [
[26.44009018 443.41732788]
[12.59415150 437.40130615]
[0.88549006 427.87188721]
[-7.81703424 415.53622437]
[-12.86763573 401.30969238]
[-13.89152718 386.24801636]
[-10.81272888 371.46887207]
[-3.85970664 358.06893921]
[6.45157766 347.04260254]
[19.35595894 339.20809937]
[33.89584351 335.14678955]
[33.89584351 320.14678955]
[33.89584351 305.14678955]
[33.89584351 290.14678955]
[33.89584351 275.14678955]
[33.89584351 260.14678955]
[33.89584351 245.14677429]
[33.89584351 230.14677429]
[33.89584351 215.14677429]
[33.89584351 200.14677429]
[33.89584351 185.14677429]
[22.83444023 187.30047607]
[13.09855556 183.36248779]
[7.53375769 175.37347412]
[-7.46543074 175.21743774]
[-22.46461868 175.06140137]
[-37.46380615 174.90536499]
[-41.67615128 189.40220642]
[-49.64447403 202.22439575]
[-60.77746964 212.42042542]
[-74.24900055 219.23367310]
[-89.05938721 222.15856934]
[-104.10960388 220.97805786]
[-118.28282166 215.77973938]
[-130.52729797 206.94935608]
[-139.93440247 195.14221191]
[-145.80606079 181.23443604]
[-147.70657349 166.25810242]
[-145.49491882 151.32453918]
[-139.33517456 137.54193115]
[-129.68447876 125.93303680]
[-117.25894928 117.35930634]
[-102.98065948 112.45696259]
[-87.90914154 111.58980560]
[-73.16281128 114.82218170]
[-59.83593369 121.91421509]
[-48.91746140 132.33964539]
[-41.21761322 145.32482910]
[-37.30776978 159.90617371]
[-22.30858231 160.06221008]
[-7.30939436 160.21824646]
[7.68979406 160.37428284]
[23.91663361 149.50402832]
[42.00075531 161.70527649]
[51.26570511 149.90863037]
[60.53065491 138.11198425]
[51.12994766 124.94135284]
[45.97993469 109.60133362]
[45.52855682 93.42619324]
[49.81507874 77.82283783]
[58.46665573 64.14844513]
[70.73078156 53.59239578]
[85.54072571 47.07285690]
[101.60833740 45.15689468]
[104.09345245 30.36418724]
[106.57857513 15.57147980]
[109.06369019 0.77877271]
[111.54880524 -14.01393414]
[97.81842041 -20.27003670]
[86.17569733 -29.86740303]
[77.41446686 -42.15166855]
[72.13207245 -56.28527451]
[70.68869019 -71.30456543]
[73.18272400 -86.18550110]
[79.44412231 -99.91346741]
[89.04598236 -111.55248260]
[101.33363342 -120.30897522]
[115.46927643 -125.58590698]
[130.48912048 -127.02349091]
[145.36909485 -124.52371979]
[159.09465027 -118.25701141]
[170.72994995 -108.65065765]
[179.48170471 -96.35962677]
[184.75317383 -82.22195435]
[186.18495178 -67.20155334]
[183.67944336 -52.32254791]
[177.40744019 -38.59941483]
[167.79658508 -26.96781731]
[155.50218201 -18.22081757]
[141.36247253 -12.95480251]
[126.34151459 -11.52881622]
[123.85639954 3.26389122]
[121.37127686 18.05659866]
[118.88616180 32.84930420]
[116.40103912 47.64201355]
[122.31940460 49.87817764]
[127.94100189 52.78079224]
[133.19107056 56.31126404]
[137.99981689 60.42264938]
[142.30329895 65.06027222]
[146.04428101 70.16248322]
[149.17303467 75.66143036]
[163.39981079 70.90761566]
[173.86015320 58.27776337]
[189.98062134 61.28815460]
[195.17785645 76.84195709]
[184.10539246 88.93875122]
[168.15362549 85.13439178]
[153.92684937 89.88820648]
[154.62638855 94.87068176]
[154.86659241 99.89629364]
[169.72962952 101.91862488]
[184.59268188 103.94096375]
[197.01934814 94.17606354]
[212.70100403 96.14114380]
[222.33396912 108.67036438]
[220.20320129 124.33036041]
[207.57283020 133.83032227]
[191.93624878 131.53410339]
[182.57034302 118.80400848]
[167.70729065 116.78167725]
[152.84425354 114.75933838]
[144.08113098 132.66812134]
[129.49711609 146.26309204]
[111.01800537 153.74900818]
[91.08396912 154.13739014]
[72.32729340 147.37693787]
[63.06234741 159.17358398]
[53.79739761 170.97021484]
[48.89584351 185.14677429]
[48.89584351 200.14677429]
[48.89584351 215.14677429]
[48.89584351 230.14677429]
[48.89584351 245.14677429]
[48.89584351 260.14678955]
[48.89584351 275.14678955]
[48.89584351 290.14678955]
[48.89584351 305.14678955]
[48.89584351 320.14678955]
[48.89584351 335.14678955]
[63.43573380 339.20809937]
[76.34011078 347.04260254]
[86.65139771 358.06893921]
[93.60441589 371.46887207]
[96.68321991 386.24801636]
[95.65932465 401.30969238]
[90.60872650 415.53622437]
[81.90620422 427.87188721]
[70.19754028 437.40130615]
[56.35160065 443.41732788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 52]
[25 51]
[26 50]
[27 49]
[54 129]
[55 128]
[56 127]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[102 109]
[103 108]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
