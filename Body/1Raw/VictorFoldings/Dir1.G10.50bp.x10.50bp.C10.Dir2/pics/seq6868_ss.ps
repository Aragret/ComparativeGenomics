%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUCUGAGCGGGGGGGGGGUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUxxxxxxxxxxUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGCCCCCCCCCCUGCUCUGAGC\
) } def
/len { sequence length } bind def

/coor [
[72.53433228 364.11758423]
[58.68839645 358.10156250]
[46.97973251 348.57214355]
[38.27721024 336.23645020]
[33.22660828 322.00994873]
[32.20271683 306.94827271]
[35.28151703 292.16909790]
[42.23453903 278.76916504]
[52.54582214 267.74282837]
[65.45020294 259.90832520]
[79.99008942 255.84701538]
[79.99008942 240.84701538]
[79.99008942 225.84701538]
[79.99008942 210.84701538]
[79.99008942 195.84701538]
[79.99008942 180.84701538]
[79.99008942 165.84701538]
[79.99008942 150.84701538]
[79.99008942 135.84701538]
[79.99008942 120.84701538]
[79.48504639 99.19156647]
[92.29251099 90.58760071]
[89.80738831 75.79489136]
[79.89067841 63.46730423]
[85.41246796 49.63404083]
[82.92735291 34.84133530]
[73.01063538 22.51374817]
[78.53242493 8.68048763]
[76.04730988 -6.11221933]
[73.56218719 -20.90492630]
[70.92332458 -35.67098236]
[68.13100433 -50.40878677]
[65.33867645 -65.14659119]
[62.54635239 -79.88439941]
[57.84613800 -87.79387665]
[59.85258484 -94.95766449]
[57.36746979 -109.75036621]
[54.88235092 -124.54307556]
[52.39723206 -139.33578491]
[49.91211319 -154.12849426]
[37.32364273 -163.30281067]
[35.01410675 -178.34011841]
[43.83799744 -190.28475952]
[41.35287857 -205.07746887]
[38.71401215 -219.84352112]
[35.92168808 -234.58132935]
[21.51764107 -239.72630310]
[11.68771076 -251.31376648]
[8.99548531 -266.16699219]
[14.06546593 -280.27908325]
[25.44179535 -289.89389038]
[22.64947128 -304.63171387]
[12.47844505 -316.75030518]
[17.71125603 -330.69546509]
[14.91893101 -345.43325806]
[4.74790525 -357.55187988]
[9.98071575 -371.49700928]
[7.18839121 -386.23483276]
[4.39606667 -400.97262573]
[-10.65505600 -401.92895508]
[-24.99523926 -406.59906006]
[-37.72304916 -414.68939209]
[-48.03840256 -425.69140625]
[-55.29286957 -438.91348267]
[-59.03042984 -453.52450562]
[-59.01613235 -468.60595703]
[-55.25087738 -483.20986938]
[-47.97135544 -496.41818237]
[-37.63516235 -507.40060425]
[-24.89203453 -515.46679688]
[-10.54302216 -520.10974121]
[4.50988626 -521.03747559]
[19.32045174 -518.19177246]
[32.95767212 -511.75152588]
[44.56429672 -502.12152100]
[53.41072464 -489.90713501]
[58.94086075 -475.87612915]
[60.80707932 -460.91058350]
[58.89206696 -445.95117188]
[53.31620407 -431.93832397]
[44.42998886 -419.75283813]
[32.79202271 -410.16070557]
[19.13387299 -403.76495361]
[21.92619705 -389.02716064]
[24.71852112 -374.28933716]
[34.68982315 -363.22488403]
[29.65673637 -348.22558594]
[32.44906235 -333.48779297]
[42.42036057 -322.42330933]
[37.38727570 -307.42404175]
[40.17959976 -292.68621826]
[54.28458786 -287.89926147]
[64.16541290 -276.61984253]
[67.09312439 -261.81124878]
[62.18319702 -247.43107605]
[50.65949631 -237.37365723]
[53.45182037 -222.63584900]
[57.81532669 -216.61045837]
[56.14558411 -207.56259155]
[58.63070297 -192.76988220]
[70.87335205 -184.36433411]
[73.60433960 -169.39782715]
[64.70481873 -156.61360168]
[67.18994141 -141.82090759]
[69.67505646 -127.02819061]
[72.16017914 -112.23548889]
[74.64529419 -97.44277954]
[77.28415680 -82.67672729]
[80.07648468 -67.93891907]
[82.86880493 -53.20111084]
[85.66113281 -38.46330643]
[90.02464294 -32.43790817]
[88.35489655 -23.39004517]
[90.84001923 -8.59733772]
[93.32513428 6.19536924]
[103.06409454 17.46488190]
[97.72005463 32.35621643]
[100.20517731 47.14892578]
[109.94413757 58.41843796]
[104.60009766 73.30976868]
[107.08522034 88.10247803]
[115.59630585 100.45404816]
[128.53436279 108.04396057]
[141.47241211 115.63386536]
[158.19366455 118.43318176]
[160.13265991 135.27587891]
[144.48493958 141.80162048]
[133.88250732 128.57192993]
[120.94445801 120.98201752]
[108.00640106 113.39210510]
[94.99008942 120.84701538]
[94.99008942 135.84701538]
[94.99008942 150.84701538]
[94.99008942 165.84701538]
[94.99008942 180.84701538]
[94.99008942 195.84701538]
[94.99008942 210.84701538]
[94.99008942 225.84701538]
[94.99008942 240.84701538]
[94.99008942 255.84701538]
[109.52997589 259.90832520]
[122.43435669 267.74282837]
[132.74563599 278.76916504]
[139.69866943 292.16909790]
[142.77746582 306.94827271]
[141.75357056 322.00994873]
[136.70297241 336.23645020]
[128.00044250 348.57214355]
[116.29178619 358.10156250]
[102.44584656 364.11758423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 121]
[23 120]
[25 118]
[26 117]
[28 115]
[29 114]
[30 113]
[31 111]
[32 110]
[33 109]
[34 108]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[43 100]
[44 99]
[45 97]
[46 96]
[51 91]
[52 90]
[54 88]
[55 87]
[57 85]
[58 84]
[59 83]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
