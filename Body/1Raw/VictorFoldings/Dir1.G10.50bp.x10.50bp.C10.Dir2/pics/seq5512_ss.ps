%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGAGGCCUGGGGGGGGGGGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCAxxxxxxxxxxAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACCCCCCCCCCCUAGGAGGCGU\
) } def
/len { sequence length } bind def

/coor [
[67.54142761 374.98867798]
[54.05255127 368.25714111]
[42.56705093 358.49258423]
[33.75268173 346.26269531]
[28.12190056 332.27850342]
[26.00207138 317.35302734]
[27.51644135 302.35400391]
[32.57696533 288.15350342]
[40.88942719 275.57708740]
[51.97055817 265.35592651]
[65.17611694 258.08428955]
[79.73834229 254.18492126]
[79.43035889 239.18807983]
[79.12238312 224.19125366]
[78.81440735 209.19441223]
[78.50643158 194.19757080]
[78.19844818 179.20072937]
[77.89047241 164.20388794]
[77.58249664 149.20706177]
[77.27452087 134.21022034]
[66.50583649 123.76821136]
[51.50662994 123.92220306]
[36.50741959 124.07620239]
[21.50821114 124.23020172]
[6.50900126 124.38419342]
[-8.31348133 126.68507385]
[-22.65354156 131.08537292]
[-36.99360275 135.48567200]
[-45.75081635 148.92779541]
[-61.73346710 150.31867981]
[-72.68103027 138.59133911]
[-70.19547272 122.74199677]
[-56.18350220 114.92890930]
[-41.39390182 121.14561462]
[-27.05384254 116.74530792]
[-12.71378136 112.34500885]
[-12.94474411 104.84856415]
[-13.40666962 89.85568237]
[-13.63763332 82.35923767]
[-28.22138214 78.85007477]
[-42.80513000 75.34090424]
[-57.18397141 82.45627594]
[-71.65034485 75.52059937]
[-75.10688782 59.85433578]
[-64.90203857 47.47529602]
[-48.86407852 47.87962723]
[-39.29596329 60.75715637]
[-24.71221542 64.26631927]
[-10.12846565 67.77548981]
[8.36718464 88.50592041]
[6.35500431 109.38498688]
[21.35421371 109.23098755]
[36.35342407 109.07699585]
[51.35263443 108.92299652]
[66.35184479 108.76899719]
[67.58140564 91.52223206]
[76.77219391 77.63390350]
[91.03443909 70.34332275]
[106.40267944 70.97889709]
[113.22625732 57.62080002]
[120.04983521 44.26269913]
[126.87340546 30.90460014]
[126.26080322 15.09525967]
[138.94087219 7.28085184]
[145.76445007 -6.07724762]
[152.58802795 -19.43534660]
[159.41160583 -32.79344559]
[166.23518372 -46.15154648]
[173.05874634 -59.50964355]
[160.93997192 -68.40522766]
[150.40518188 -79.12970734]
[141.72726440 -91.40528107]
[135.13096619 -104.91398621]
[130.78718567 -119.30591583]
[128.80841064 -134.20828247]
[129.24591064 -149.23509216]
[132.08834839 -163.99708557]
[137.26208496 -178.11192322]
[144.63313293 -191.21397400]
[154.01055908 -202.96388245]
[165.15144348 -213.05728149]
[177.76724243 -221.23272705]
[191.53114319 -227.27847290]
[206.08665466 -231.03790283]
[221.05674744 -232.41365051]
[236.05364990 -231.37005615]
[250.68890381 -227.93418884]
[264.58343506 -222.19502258]
[277.37734985 -214.30122375]
[288.73922729 -204.45724487]
[298.37478638 -192.91809082]
[306.03445435 -179.98263550]
[311.51977539 -165.98594666]
[314.68875122 -151.29058838]
[315.45919800 -136.27717590]
[313.81124878 -121.33460236]
[309.78753662 -106.84992218]
[303.49230957 -93.19831848]
[295.08859253 -80.73341370]
[284.79409790 -69.77806091]
[272.87548828 -60.61603928]
[259.64144897 -53.48466492]
[245.43479919 -48.56865692]
[230.62350464 -45.99535370]
[215.59123230 -45.83141327]
[200.72734070 -48.08107376]
[186.41685486 -52.68606949]
[179.59327698 -39.32796860]
[172.76969910 -25.96987152]
[165.94612122 -12.61177158]
[159.12255859 0.74632794]
[152.29898071 14.10442734]
[153.39965820 28.95830917]
[140.23150635 37.72817612]
[133.40792847 51.08627701]
[126.58435822 64.44437408]
[119.76078033 77.80247498]
[125.78050232 85.21540070]
[129.13848877 94.15476990]
[129.48806763 103.69763947]
[143.41877747 109.25957489]
[158.66854858 104.27718353]
[171.99229431 113.21348572]
[173.16917419 129.21331787]
[161.29640198 140.00297546]
[145.48173523 137.30555725]
[137.85684204 123.19029236]
[123.92613220 117.62835693]
[118.64681244 124.74259949]
[111.23347473 130.22552490]
[102.20490265 133.43614197]
[92.27135468 133.90223694]
[92.57933044 148.89907837]
[92.88731384 163.89591980]
[93.19528961 178.89276123]
[93.50326538 193.88958740]
[93.81124115 208.88642883]
[94.11922455 223.88327026]
[94.42720032 238.88011169]
[94.73517609 253.87693787]
[109.44521332 257.17517090]
[122.93817139 263.89852905]
[134.42959595 273.65612793]
[143.25137329 285.88067627]
[148.89062500 299.86145020]
[151.01950073 314.78564453]
[149.51423645 329.78555298]
[144.46232605 343.98913574]
[136.15748596 356.57058716]
[125.08255005 366.79846191]
[111.88140106 374.07809448]
[97.32154846 377.98629761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 36]
[27 35]
[28 34]
[39 49]
[40 48]
[41 47]
[59 117]
[60 116]
[61 115]
[62 114]
[64 112]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
