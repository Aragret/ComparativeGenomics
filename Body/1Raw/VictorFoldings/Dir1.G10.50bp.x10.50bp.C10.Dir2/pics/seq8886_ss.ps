%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCACUCCAGGGGGGGGGGUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAxxxxxxxxxxCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUCCCCCCCCCCUUCUACUCCA\
) } def
/len { sequence length } bind def

/coor [
[64.86577606 413.29370117]
[51.01983643 407.27764893]
[39.31117249 397.74822998]
[30.60865021 385.41256714]
[25.55804825 371.18606567]
[24.53415680 356.12435913]
[27.61295509 341.34521484]
[34.56597900 327.94528198]
[44.87726212 316.91894531]
[57.78164291 309.08444214]
[72.32153320 305.02313232]
[72.32153320 290.02313232]
[72.32153320 275.02313232]
[72.32153320 260.02313232]
[72.32153320 245.02313232]
[72.32153320 230.02313232]
[72.32153320 215.02313232]
[72.32153320 200.02313232]
[72.32153320 185.02313232]
[72.32153320 170.02313232]
[69.15595245 163.29077148]
[72.48081207 154.71188354]
[65.00996399 141.82640076]
[73.03268433 128.19018555]
[86.48736572 90.21418762]
[81.00033569 76.25379944]
[75.51330566 62.29340744]
[63.39033127 62.03554916]
[52.10689926 57.69097137]
[42.99403763 49.79746628]
[37.11812210 39.30993652]
[35.15612030 27.48493576]
[37.31768036 15.73012447]
[43.32297897 5.43670321]
[52.43872452 -2.18523860]
[47.83316040 -16.46069908]
[43.22759628 -30.73616028]
[38.62203217 -45.01161957]
[34.01646805 -59.28708267]
[29.41090202 -73.56253815]
[14.70048046 -70.55145264]
[-0.25190708 -69.17692566]
[-15.26475143 -69.45566559]
[-30.15581131 -71.38427734]
[-44.74431992 -74.93935394]
[-58.85319138 -80.07773590]
[-72.31114960 -86.73705292]
[-84.95484161 -94.83645630]
[-96.63076782 -104.27764130]
[-107.19719696 -114.94599152]
[-116.52587128 -126.71200562]
[-124.50354004 -139.43284607]
[-131.03337097 -152.95411682]
[-136.03608704 -167.11166382]
[-139.45095825 -181.73362732]
[-141.23654175 -196.64250183]
[-141.37117004 -211.65733337]
[-139.85317993 -226.59584045]
[-136.70101929 -241.27668762]
[-131.95295715 -255.52165222]
[-125.66661835 -269.15780640]
[-117.91831970 -282.01965332]
[-108.80210876 -293.95104980]
[-98.42865753 -304.80712891]
[-86.92388916 -314.45614624]
[-74.42745972 -322.78094482]
[-61.09106064 -329.68051147]
[-47.07659149 -335.07101440]
[-32.55416870 -338.88711548]
[-17.70008278 -341.08239746]
[-2.69464946 -341.63027954]
[12.27997971 -340.52407837]
[27.04202461 -337.77722168]
[41.41229248 -333.42306519]
[55.21633530 -327.51446533]
[68.28659058 -320.12313843]
[80.46438599 -311.33880615]
[91.60191345 -301.26812744]
[101.56395721 -290.03332520]
[110.22959137 -277.77078247]
[117.49362183 -264.62936401]
[123.26788330 -250.76858521]
[127.48226166 -236.35670471]
[130.08560181 -221.56867981]
[131.04632568 -206.58401489]
[130.35273743 -191.58460999]
[128.01327515 -176.75254822]
[124.05633545 -162.26786804]
[118.52994537 -148.30641174]
[111.50120544 -135.03765869]
[103.05541992 -122.62266541]
[93.29512024 -111.21215057]
[82.33879089 -100.94462585]
[70.31943512 -91.94473267]
[57.38294220 -84.32170868]
[43.68636322 -78.16810608]
[48.29192734 -63.89264679]
[52.89749146 -49.61718369]
[57.50305557 -35.34172440]
[62.10861969 -21.06626320]
[66.71418762 -6.79080296]
[84.52377319 -3.85539794]
[98.48165894 7.72172737]
[104.71659088 24.84033775]
[101.44354248 42.84843063]
[89.47369385 56.80637741]
[94.96072388 70.76676941]
[100.44775391 84.72715759]
[112.34013367 93.86888885]
[127.24203491 95.58158112]
[142.14393616 97.29427338]
[157.04583740 99.00695801]
[171.94773865 100.71965027]
[185.35639954 91.91127014]
[200.55778503 97.03936768]
[205.89070129 112.17012024]
[197.26419067 125.69649506]
[181.29577637 127.24222565]
[170.23506165 115.62155151]
[155.33316040 113.90886688]
[140.43124390 112.19617462]
[125.52935028 110.48348236]
[110.62744904 108.77079773]
[104.97794342 113.70365906]
[114.84347534 125.00282288]
[103.54414368 134.86817932]
[93.67893982 123.56938171]
[88.02943420 128.50224304]
[95.47796631 142.46038818]
[87.47756958 155.02394104]
[87.32153320 170.02313232]
[87.32153320 185.02313232]
[87.32153320 200.02313232]
[87.32153320 215.02313232]
[87.32153320 230.02313232]
[87.32153320 245.02313232]
[87.32153320 260.02313232]
[87.32153320 275.02313232]
[87.32153320 290.02313232]
[87.32153320 305.02313232]
[101.86141968 309.08444214]
[114.76580048 316.91894531]
[125.07707977 327.94528198]
[132.03010559 341.34521484]
[135.10890198 356.12435913]
[134.08500671 371.18606567]
[129.03440857 385.41256714]
[120.33188629 397.74822998]
[108.62322235 407.27764893]
[94.77728271 413.29370117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[24 128]
[25 108]
[26 107]
[27 106]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
