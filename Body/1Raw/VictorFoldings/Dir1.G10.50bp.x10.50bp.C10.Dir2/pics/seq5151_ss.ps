%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCUCCUGGGGGGGGGGCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCxxxxxxxxxxACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGCCCCCCCCCCGCCUCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 377.19647217]
[71.19830322 371.18045044]
[59.48964310 361.65103149]
[50.78712082 349.31536865]
[45.73651886 335.08883667]
[44.71262741 320.02716064]
[47.79142761 305.24798584]
[54.74444962 291.84808350]
[65.05573273 280.82174683]
[77.96011353 272.98721313]
[92.50000000 268.92590332]
[92.50000000 253.92591858]
[92.50000000 238.92591858]
[92.50000000 223.92591858]
[92.50000000 208.92591858]
[92.50000000 193.92591858]
[92.50000000 178.92591858]
[92.50000000 163.92591858]
[92.50000000 148.92591858]
[92.50000000 133.92591858]
[92.50000000 118.92591095]
[86.61036682 115.33486176]
[82.25804901 109.98316193]
[67.39500427 112.00549316]
[65.14585114 126.94262695]
[58.77827454 140.64045715]
[48.80846786 151.98857117]
[36.04463577 160.06701660]
[21.52149200 164.22091675]
[6.41635466 164.11354065]
[-8.04626656 159.75358582]
[-20.69395256 151.49447632]
[-30.50141144 140.00576782]
[-36.67359543 126.21878815]
[-38.71015549 111.25119019]
[-36.44599915 96.31632233]
[-30.06466484 82.62489319]
[-20.08346176 71.28680420]
[-7.31152391 63.22117996]
[7.21578836 59.08186722]
[22.32080841 59.20442581]
[36.77904129 63.57891464]
[49.41842651 71.85071564]
[59.21433640 83.34927368]
[65.37266541 97.14244843]
[80.23571777 95.12010956]
[88.62386322 83.11735535]
[102.89791107 79.84951019]
[110.35282135 66.83319855]
[107.73063660 54.16125870]
[114.25952911 43.45647049]
[125.95253754 40.20365143]
[133.67662048 27.34524727]
[141.40071106 14.48684502]
[148.58322144 1.31826282]
[155.21171570 -12.13770294]
[161.84020996 -25.59366798]
[168.46871948 -39.04963303]
[175.09721375 -52.50559998]
[181.44433594 -66.09654999]
[187.50735474 -79.81660461]
[193.57037354 -93.53665924]
[199.63337708 -107.25671387]
[205.69639587 -120.97676086]
[211.75939941 -134.69682312]
[199.45446777 -126.11845398]
[185.47875977 -120.67053223]
[170.61439514 -118.65793610]
[155.69317627 -120.19327545]
[141.55010986 -125.19064331]
[128.97665405 -133.37037659]
[118.67640686 -144.27473450]
[111.22579956 -157.29350281]
[107.04175568 -171.69815063]
[106.35842896 -186.68257141]
[109.21405029 -201.40824890]
[115.44882202 -215.05110168]
[124.71384430 -226.84770203]
[136.49063110 -236.13786316]
[150.12016296 -242.40173340]
[164.83970642 -245.28875732]
[179.82556152 -244.63740540]
[194.23908997 -240.48411560]
[207.27372742 -233.06129456]
[218.20004272 -222.78434753]
[226.40658569 -210.22836304]
[231.43411255 -196.09599304]
[233.00129700 -181.17808533]
[231.02041626 -166.30946350]
[225.60267639 -152.32283020]
[237.49505615 -161.46455383]
[249.38743591 -170.60629272]
[247.28997803 -185.82128906]
[253.09590149 -200.04054260]
[265.24340820 -209.43911743]
[280.46490479 -211.48887634]
[294.66589355 -205.63841248]
[304.02636719 -193.46150208]
[306.02838135 -178.23364258]
[300.13345337 -164.05107117]
[287.92724609 -154.72883606]
[272.69317627 -152.77455139]
[258.52917480 -158.71391296]
[246.63679504 -149.57217407]
[234.74441528 -140.43045044]
[225.47946167 -128.63380432]
[219.41644287 -114.91374969]
[213.35343933 -101.19369507]
[207.29042053 -87.47364044]
[201.22740173 -73.75359344]
[195.16439819 -60.03353500]
[196.04899597 -55.28032684]
[193.91114807 -49.92673874]
[188.55317688 -45.87710190]
[181.92468262 -32.42113495]
[175.29617310 -18.96516991]
[168.66767883 -5.50920391]
[162.03918457 7.94676161]
[162.86579895 10.68975830]
[162.61964417 13.93527603]
[161.09989929 17.26277161]
[158.26658630 20.18568039]
[154.25910950 22.21092987]
[146.53501892 35.06933212]
[138.81094360 47.92773438]
[139.48202515 65.43629456]
[123.36913300 74.28810883]
[115.91422272 87.30442047]
[119.67323303 105.23488617]
[107.50000000 118.92591095]
[107.50000000 133.92591858]
[107.50000000 148.92591858]
[107.50000000 163.92591858]
[107.50000000 178.92591858]
[107.50000000 193.92591858]
[107.50000000 208.92591858]
[107.50000000 223.92591858]
[107.50000000 238.92591858]
[107.50000000 253.92591858]
[107.50000000 268.92590332]
[122.03988647 272.98721313]
[134.94427490 280.82174683]
[145.25555420 291.84808350]
[152.20857239 305.24798584]
[155.28736877 320.02716064]
[154.26348877 335.08883667]
[149.21287537 349.31536865]
[140.51036072 361.65103149]
[128.80169678 371.18045044]
[114.95575714 377.19647217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 46]
[24 45]
[48 128]
[49 127]
[52 125]
[53 124]
[54 123]
[55 118]
[56 117]
[57 116]
[58 115]
[59 114]
[60 111]
[61 110]
[62 109]
[63 108]
[64 107]
[65 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
