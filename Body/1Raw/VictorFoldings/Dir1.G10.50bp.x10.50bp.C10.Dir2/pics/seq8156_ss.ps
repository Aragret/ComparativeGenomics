%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAAUAAAAGGGGGGGGGGAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAxxxxxxxxxxUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACCCCCCCCCCCUUAAAAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[92.30588531 614.75463867]
[78.81700897 608.02307129]
[67.33150482 598.25854492]
[58.51713943 586.02862549]
[52.88635635 572.04443359]
[50.76652908 557.11895752]
[52.28089905 542.11993408]
[57.34141922 527.91943359]
[65.65388489 515.34301758]
[76.73501587 505.12188721]
[89.94057465 497.85025024]
[104.50279236 493.95086670]
[104.19481659 478.95404053]
[103.88684082 463.95718384]
[103.57886505 448.96035767]
[103.27088165 433.96353149]
[102.96290588 418.96667480]
[102.65493011 403.96984863]
[102.34695435 388.97299194]
[102.03897858 373.97616577]
[101.73099518 358.97933960]
[93.20425415 350.34469604]
[92.86067963 337.81262207]
[101.43298340 328.12139893]
[101.43298340 313.12139893]
[85.50158691 309.44879150]
[70.88146973 302.11294556]
[58.40197754 291.52572632]
[48.77202606 278.28350830]
[42.53983307 263.13369751]
[40.06173706 246.93241882]
[41.48179245 230.59622192]
[46.72342682 215.05021667]
[55.49353790 201.17562866]
[67.29889679 189.75994873]
[81.47389221 181.45211792]
[97.21803284 176.72573853]
[96.29461670 161.75418091]
[95.37120056 146.78263855]
[94.44779205 131.81108093]
[83.12638092 127.53276062]
[74.17521667 119.38691711]
[68.85165405 108.51778412]
[67.90350342 96.45216370]
[71.46395111 84.88490295]
[79.03285980 75.44086456]
[72.20928955 62.08276367]
[65.38571167 48.72466660]
[57.22904587 36.13622665]
[47.82518768 24.45001793]
[38.42133331 12.76380920]
[29.01747513 1.07760060]
[19.49413681 -10.51144791]
[9.85232258 -22.00211525]
[0.21050854 -33.49278259]
[-9.43130589 -44.98344803]
[-25.19531822 -46.11103058]
[-35.48155212 -58.10973740]
[-34.18736649 -73.86094666]
[-22.08057785 -84.01974487]
[-6.34393167 -82.55910492]
[3.68630147 -70.34558868]
[2.05936098 -54.62526321]
[11.70117474 -43.13459396]
[21.34298897 -31.64392853]
[30.98480415 -20.15326118]
[37.73519135 -17.03164864]
[40.70368195 -8.32625675]
[50.10754013 3.35995221]
[59.51139832 15.04616070]
[68.91525269 26.73236847]
[68.82460022 11.73264313]
[76.12761688 -1.36949039]
[88.93308258 -9.18102741]
[103.92481232 -9.67904663]
[117.22046661 -2.73457813]
[125.37691498 9.85399818]
[126.28192902 24.82667160]
[119.70114136 38.30603027]
[107.33873749 46.80138779]
[92.39617157 48.11272812]
[78.74381256 41.90108871]
[85.56738281 55.25918961]
[92.39096069 68.61728668]
[105.60744476 68.19860840]
[117.88367462 73.11234283]
[128.86448669 62.89363480]
[139.84527588 52.67492676]
[150.82608032 42.45622253]
[161.80688477 32.23751450]
[157.23744202 17.67444801]
[159.44767761 2.57221055]
[167.99876404 -10.07063961]
[181.19287109 -17.74385643]
[196.41030884 -18.92391396]
[210.62962341 -13.37651443]
[221.02757263 -2.20309591]
[225.53964233 12.37785053]
[223.26995850 27.47126770]
[214.66914368 40.08034515]
[201.44491577 47.70154572]
[186.22296143 48.82167053]
[172.02558899 43.21831512]
[161.04478455 53.43702316]
[150.06399536 63.65573120]
[139.08319092 73.87443542]
[128.10238647 84.09314728]
[132.18464661 102.63063049]
[125.14633179 120.25917053]
[109.41934204 130.88766479]
[110.34275055 145.85922241]
[111.26616669 160.83076477]
[112.18958282 175.80232239]
[125.76554871 177.83491516]
[138.66667175 182.50942993]
[150.38442993 189.63935852]
[160.45739746 198.94142151]
[168.48944092 210.04689026]
[174.16523743 222.51614380]
[177.26269531 235.85610962]
[177.66163635 249.53973389]
[175.34844971 263.02682495]
[170.41654968 275.78540039]
[163.06259155 287.31262207]
[153.57865906 297.15457153]
[142.34066772 304.92431641]
[129.79341125 310.31689453]
[116.43298340 313.12139893]
[116.43298340 328.12139893]
[126.01535034 343.81246948]
[116.72783661 358.67135620]
[117.03581238 373.66818237]
[117.34378815 388.66503906]
[117.65177155 403.66186523]
[117.95974731 418.65869141]
[118.26772308 433.65554810]
[118.57569885 448.65237427]
[118.88368225 463.64923096]
[119.19165802 478.64605713]
[119.49963379 493.64288330]
[134.20967102 496.94113159]
[147.70262146 503.66448975]
[159.19404602 513.42205811]
[168.01582336 525.64660645]
[173.65509033 539.62738037]
[175.78396606 554.55157471]
[174.27868652 569.55151367]
[169.22677612 583.75506592]
[160.92193604 596.33654785]
[149.84700012 606.56439209]
[136.64585876 613.84405518]
[122.08600616 617.75225830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 129]
[25 128]
[37 113]
[38 112]
[39 111]
[40 110]
[46 84]
[47 83]
[48 82]
[49 71]
[50 70]
[51 69]
[52 68]
[53 66]
[54 65]
[55 64]
[56 63]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
