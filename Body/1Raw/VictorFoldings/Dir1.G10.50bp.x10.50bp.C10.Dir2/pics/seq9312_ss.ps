%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACACCCGGGGGGGGGGUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACxxxxxxxxxxACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACCCCCCCCCCCAUCAAAACCC\
) } def
/len { sequence length } bind def

/coor [
[84.29009247 408.20593262]
[71.06989288 400.93347168]
[60.18308640 390.48648071]
[52.37195587 377.57720947]
[48.16907501 363.08590698]
[47.86100388 348.00057983]
[51.46874619 333.34973145]
[58.74631882 320.13235474]
[69.19752502 309.24957275]
[82.10978699 301.44345093]
[96.60272217 297.24615479]
[96.29066467 282.24938965]
[95.97861481 267.25265503]
[95.66655731 252.25588989]
[95.35449982 237.25914001]
[95.04244232 222.26239014]
[94.73038483 207.26562500]
[94.41832733 192.26887512]
[94.10627747 177.27212524]
[93.79421997 162.27537537]
[93.48216248 147.27861023]
[79.63003540 143.16033936]
[67.64558411 135.08477783]
[58.62763596 123.79238129]
[44.61092377 129.13389587]
[30.59421158 134.47540283]
[22.74762535 148.46864319]
[6.89238453 150.91627502]
[-4.80872774 139.94068909]
[-3.37961936 123.96141052]
[10.08341980 115.23638153]
[25.25269890 120.45869446]
[39.26941299 115.11717987]
[53.28612518 109.77567291]
[52.53221893 104.95578766]
[52.27429581 100.08411407]
[37.45653915 97.75301361]
[22.63878059 95.42190552]
[7.82102203 93.09080505]
[-7.28001404 99.48538971]
[-20.20359993 89.39019775]
[-17.65505981 73.19029236]
[-2.25611138 67.55075073]
[10.15212536 78.27304840]
[24.96988297 80.60414886]
[39.78764343 82.93525696]
[54.60540009 85.26635742]
[66.92269135 65.59590912]
[87.06211090 54.06133652]
[110.26107788 53.39034271]
[115.74810791 39.42995453]
[121.23513794 25.46956253]
[126.72217560 11.50917339]
[132.20919800 -2.45121670]
[137.25796509 -16.57601929]
[141.86352539 -30.85148048]
[146.46908569 -45.12694168]
[151.07466125 -59.40240097]
[155.68022156 -73.67786407]
[144.16360474 -83.55931854]
[137.32600403 -97.06081390]
[136.18159485 -112.11086273]
[140.87371826 -126.41371155]
[150.65776062 -137.79954529]
[164.01918030 -144.55363464]
[178.90786743 -145.67456055]
[183.51342773 -159.95001221]
[188.11900330 -174.22547913]
[192.72456360 -188.50093079]
[180.97189331 -179.18028259]
[166.57664490 -174.96398926]
[151.65255737 -176.47117615]
[138.39100647 -183.48052979]
[128.73922729 -194.96282959]
[124.11445618 -209.23208618]
[125.19576263 -224.19305420]
[131.82437134 -237.64897156]
[143.02697754 -247.62402344]
[157.15866089 -252.65351868]
[172.14436340 -251.99897766]
[185.78369141 -245.75648499]
[196.07391357 -234.84266663]
[201.50407410 -220.86006165]
[201.27694702 -205.86242676]
[209.78804016 -218.21400452]
[218.29913330 -230.56556702]
[213.96432495 -245.59033203]
[220.34863281 -259.86529541]
[234.43757629 -266.65026855]
[249.57878113 -262.74157715]
[258.62304688 -249.98480225]
[257.29992676 -234.40328979]
[246.23417664 -223.35417175]
[230.65069580 -222.05448914]
[222.13961792 -209.70291138]
[213.62852478 -197.35133362]
[207.00001526 -183.89537048]
[202.39445496 -169.61990356]
[197.78889465 -155.34445190]
[193.18333435 -141.06898499]
[204.60975647 -131.45826721]
[211.50477600 -118.16902161]
[212.79006958 -103.21198273]
[208.23872375 -88.86371613]
[198.51463318 -77.32006836]
[185.07575989 -70.36019135]
[169.95567322 -69.07229614]
[165.35011292 -54.79683685]
[160.74455261 -40.52137756]
[156.13899231 -26.24591637]
[151.53341675 -11.97045517]
[152.85504150 -8.63566685]
[152.58700562 -4.48478317]
[150.35925293 -0.29080433]
[146.16960144 3.03581476]
[140.68255615 16.99620438]
[135.19552612 30.95659447]
[129.70849609 44.91698456]
[124.22146606 58.87737274]
[133.40695190 65.91590118]
[140.62835693 74.95830536]
[145.46113586 85.47296906]
[147.62115479 96.84170532]
[146.98143005 108.39612579]
[143.57955933 119.45691681]
[137.61555481 129.37379456]
[129.44004822 137.56372070]
[119.53369904 143.54519653]
[108.47891235 146.96656799]
[108.79096985 161.96331787]
[109.10302734 176.96006775]
[109.41508484 191.95681763]
[109.72714233 206.95358276]
[110.03919983 221.95033264]
[110.35124969 236.94708252]
[110.66330719 251.94383240]
[110.97536469 266.94058228]
[111.28742218 281.93734741]
[111.59947968 296.93411255]
[126.25447083 300.52487183]
[139.48028564 307.78710938]
[150.37515259 318.22570801]
[158.19624329 331.12893677]
[162.41030884 345.61700439]
[162.73004150 360.70208740]
[159.13360596 375.35571289]
[151.86624146 388.57870483]
[141.42344666 399.46954346]
[128.51721191 407.28564453]
[114.02752686 411.49414062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 34]
[25 33]
[26 32]
[36 47]
[37 46]
[38 45]
[39 44]
[50 119]
[51 118]
[52 117]
[53 116]
[54 115]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[66 100]
[67 99]
[68 98]
[69 97]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
