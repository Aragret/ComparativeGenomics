%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAGCCCACGGGGGGGGGGUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAxxxxxxxxxxAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUCCCCCCCCCCAAAUAGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[-4.79677057 522.32855225]
[-18.81871414 516.77557373]
[-31.01867104 507.90921021]
[-40.62974167 496.28689575]
[-47.04776764 482.63919067]
[-49.86930466 467.82400513]
[-48.91698837 452.77264404]
[-44.25068283 438.43121338]
[-36.16371918 425.70126343]
[-25.16444397 415.38299561]
[-11.94428444 408.12500000]
[2.66572857 404.38357544]
[2.66572857 389.38357544]
[2.66572857 374.38357544]
[2.66572857 359.38357544]
[2.66572857 344.38357544]
[2.66572857 329.38357544]
[2.66572857 314.38357544]
[2.66572857 299.38357544]
[2.66572857 284.38357544]
[2.66572857 269.38357544]
[-5.09139490 282.22207642]
[-15.55376339 292.97097778]
[-28.17804146 301.07205200]
[-42.30862045 306.10461426]
[-57.21166992 307.80731201]
[-72.11323547 306.09170532]
[-86.23944855 301.04687500]
[-98.85669708 292.93484497]
[-109.30973816 282.17687988]
[-117.05573273 269.33166504]
[-121.69239807 255.06628418]
[-122.97894287 240.12155151]
[-120.84856415 225.27360535]
[-115.41188812 211.29353333]
[-106.95126343 198.90733337]
[-95.90605927 188.75827026]
[-82.84988403 181.37341309]
[-68.46077728 177.13624573]
[-53.48599243 176.26683044]
[-38.70320892 178.81033325]
[-24.88013268 184.63464355]
[-12.73462677 193.43728638]
[-2.89743447 204.76113892]
[4.12057495 218.01812744]
[7.95493984 232.51976013]
[8.40689182 247.50871277]
[15.77313137 234.44201660]
[23.13937187 221.37532043]
[30.50561142 208.30862427]
[26.26819801 194.07556152]
[33.55247116 180.71914673]
[48.51014328 176.37106323]
[55.87638474 163.30436707]
[63.24262238 150.23767090]
[62.75270081 135.35112000]
[76.26979065 127.12926483]
[83.63603210 114.06256866]
[91.00226593 100.99588013]
[90.47804260 97.10546875]
[91.70331573 93.00540924]
[94.73043823 89.49654388]
[99.24565887 87.37179565]
[107.40232849 74.78335571]
[115.55899048 62.19491959]
[101.98437500 68.57691193]
[87.08311462 70.29515076]
[72.41225433 67.17009735]
[59.50478745 59.52828217]
[49.70943069 48.16822433]
[44.04971313 34.27694702]
[43.11703110 19.30597115]
[47.00883865 4.81963921]
[55.31847763 -7.66835070]
[67.17765808 -16.85310936]
[81.34720612 -21.77490425]
[96.34650421 -21.91945267]
[110.60826874 -17.27165031]
[122.64226532 -8.31715107]
[131.19102478 4.00837374]
[135.36129761 18.41701126]
[134.71731567 33.40318298]
[129.32661438 47.40052414]
[141.29687500 38.36100388]
[153.26713562 29.32148361]
[165.23739624 20.28196526]
[177.01953125 10.99857903]
[188.60858154 1.47524130]
[200.19763184 -8.04809570]
[211.78668213 -17.57143402]
[222.97497559 -27.56253052]
[233.74365234 -38.00453949]
[244.51232910 -48.44654846]
[246.19609070 -64.40100098]
[259.79656982 -72.91021729]
[274.88061523 -67.44665527]
[279.87707520 -52.20149231]
[270.95306396 -38.86951065]
[254.95434570 -37.67787170]
[244.18565369 -27.23586082]
[233.41697693 -16.79385185]
[233.27110291 -13.93557549]
[231.94873047 -10.96562672]
[229.40248108 -8.34583473]
[225.75770569 -6.54607248]
[221.31001282 -5.98238516]
[209.72096252 3.54095221]
[198.13191223 13.06429005]
[186.54286194 22.58762741]
[185.19364929 27.22754478]
[180.87873840 31.04453087]
[174.27691650 32.25222397]
[162.30665588 41.29174042]
[150.33639526 50.33126068]
[138.36613464 59.37078094]
[128.14743042 70.35158539]
[119.99076843 82.94002533]
[111.83409882 95.52846527]
[104.06896210 108.36211395]
[96.70272064 121.42881012]
[89.33648682 134.49549866]
[89.29952240 150.31666565]
[76.30931854 157.60391235]
[68.94307709 170.67060852]
[61.57683945 183.73730469]
[65.59993744 198.78562927]
[57.94338608 211.93218994]
[43.57230377 215.67486572]
[36.20606613 228.74156189]
[28.83982658 241.80824280]
[21.47358704 254.87493896]
[17.66572762 269.38357544]
[17.66572762 284.38357544]
[17.66572762 299.38357544]
[17.66572762 314.38357544]
[17.66572762 329.38357544]
[17.66572762 344.38357544]
[17.66572762 359.38357544]
[17.66572762 374.38357544]
[17.66572762 389.38357544]
[17.66572762 404.38357544]
[32.27574158 408.12500000]
[45.49589920 415.38299561]
[56.49517441 425.70126343]
[64.58213806 438.43121338]
[69.24844360 452.77264404]
[70.20075989 467.82400513]
[67.37922668 482.63919067]
[60.96120071 496.28689575]
[51.35012817 507.90921021]
[39.15017319 516.77557373]
[25.12822723 522.32855225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[47 131]
[48 130]
[49 129]
[50 128]
[53 125]
[54 124]
[55 123]
[57 121]
[58 120]
[59 119]
[63 118]
[64 117]
[65 116]
[83 115]
[84 114]
[85 113]
[86 112]
[87 109]
[88 108]
[89 107]
[90 106]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
