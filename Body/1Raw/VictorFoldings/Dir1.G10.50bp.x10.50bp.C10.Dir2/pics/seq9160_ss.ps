%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAUUUCCGGGGGGGGGGGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUxxxxxxxxxxAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACCCCCCCCCCCAACAUUUCC\
) } def
/len { sequence length } bind def

/coor [
[81.13946533 365.09851074]
[67.29353333 359.08248901]
[55.58486938 349.55307007]
[46.88234329 337.21740723]
[41.83174133 322.99087524]
[40.80784988 307.92919922]
[43.88665009 293.15002441]
[50.83967209 279.75012207]
[61.15095520 268.72378540]
[74.05533600 260.88925171]
[88.59522247 256.82794189]
[88.59522247 241.82795715]
[88.59522247 226.82795715]
[88.59522247 211.82795715]
[88.59522247 196.82795715]
[88.59522247 181.82795715]
[88.59522247 166.82795715]
[88.59522247 151.82795715]
[88.59522247 136.82795715]
[88.59522247 121.82794952]
[82.03325653 110.18288422]
[83.35239410 99.03202820]
[89.75164032 92.49979401]
[81.24055481 80.14821625]
[72.72946167 67.79664612]
[64.21837616 55.44507217]
[54.33734512 57.90098190]
[44.19445801 57.51408768]
[34.58883667 54.33234787]
[26.27242279 48.62321854]
[19.89110184 40.85127258]
[15.93456650 31.64042282]
[14.69875813 21.72386551]
[0.05525684 18.47303963]
[-14.58824444 15.22221279]
[-29.23174667 11.97138691]
[-35.74344254 13.61616802]
[-41.25699615 11.93330002]
[-44.41078186 8.26872063]
[-58.90637970 4.41156101]
[-73.40197754 0.55440176]
[-87.94697571 7.32364130]
[-102.24323273 0.04376315]
[-105.32387543 -15.70073223]
[-94.82571411 -27.83201599]
[-78.80202484 -27.04400635]
[-69.54481506 -13.94119453]
[-55.04922104 -10.08403492]
[-40.55362320 -6.22687578]
[-25.98092079 -2.67211413]
[-11.33741856 0.57871175]
[3.30608249 3.82953739]
[17.94958305 7.08036327]
[26.86087608 -4.83690357]
[39.87077713 -12.06012154]
[38.62390137 -27.00820923]
[37.37702942 -41.95629501]
[36.13015366 -56.90438080]
[34.88327789 -71.85247040]
[19.94600677 -73.74233246]
[5.72820473 -78.69690704]
[-7.14858627 -86.49959564]
[-18.12144852 -96.80929565]
[-26.71069527 -109.17532349]
[-32.54084015 -123.05707550]
[-35.35701752 -137.84770203]
[-35.03611374 -152.90063477]
[-31.59215546 -167.55781555]
[-25.17570305 -181.17849731]
[-16.06725121 -193.16722107]
[-4.66498566 -202.99992371]
[8.53263664 -210.24674988]
[22.94867325 -214.59089661]
[37.95291519 -215.84245300]
[52.88944244 -213.94671631]
[67.10529327 -208.98655701]
[79.97901154 -201.17880249]
[90.94782257 -190.86477661]
[99.53220367 -178.49537659]
[105.35688782 -164.61132812]
[108.16724396 -149.81959534]
[107.84041595 -134.76678467]
[104.39069366 -120.11096191]
[97.96887970 -106.49281311]
[88.85571289 -94.50765991]
[77.44958496 -84.67944336]
[64.24910736 -77.43781281]
[49.83136749 -73.09934235]
[51.07823944 -58.15125656]
[52.32511520 -43.20317078]
[53.57199097 -28.25508308]
[54.81886292 -13.30699539]
[72.68855286 -5.86084509]
[84.08925629 9.91643906]
[85.56525421 29.43235207]
[76.56994629 46.93398285]
[85.08103943 59.28555679]
[93.59212494 71.63713074]
[102.10321808 83.98870087]
[115.88559723 89.90866089]
[130.70335388 87.57756042]
[145.52111816 85.24645233]
[157.95118713 75.45851898]
[171.72625732 81.12390900]
[186.54402161 78.79280090]
[201.36178589 76.46170044]
[210.46081543 63.53950882]
[226.04624939 60.91848755]
[238.87152100 70.15364075]
[241.32762146 85.76591492]
[231.95738220 98.49282837]
[216.32002258 100.78372192]
[203.69288635 91.27945709]
[188.87512207 93.61056519]
[174.05737305 95.94166565]
[162.68714905 105.56286621]
[147.85221863 100.06421661]
[133.03445435 102.39531708]
[118.21670532 104.72642517]
[132.33810425 109.78469849]
[147.33598328 109.53269958]
[160.54830933 116.63442993]
[168.61235046 129.28240967]
[169.47569275 144.25753784]
[162.91862488 157.74845886]
[150.61000061 166.32153320]
[135.68252563 167.79479980]
[121.93545532 161.79330444]
[112.86759949 149.84449768]
[110.78660583 134.99169922]
[103.59522247 121.82794952]
[103.59522247 136.82795715]
[103.59522247 151.82795715]
[103.59522247 166.82795715]
[103.59522247 181.82795715]
[103.59522247 196.82795715]
[103.59522247 211.82795715]
[103.59522247 226.82795715]
[103.59522247 241.82795715]
[103.59522247 256.82794189]
[118.13510895 260.88925171]
[131.03948975 268.72378540]
[141.35076904 279.75012207]
[148.30380249 293.15002441]
[151.38259888 307.92919922]
[150.35870361 322.99087524]
[145.30810547 337.21740723]
[136.60557556 349.55307007]
[124.89691925 359.08248901]
[111.05097961 365.09851074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 99]
[24 98]
[25 97]
[26 96]
[33 53]
[34 52]
[35 51]
[36 50]
[39 49]
[40 48]
[41 47]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[100 119]
[101 118]
[102 117]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
