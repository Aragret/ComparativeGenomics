%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCCCUAGGGGGGGGGGCUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUxxxxxxxxxxACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGCCCCCCCCCCAUCCUCCCGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.11764526]
[71.19830322 366.10162354]
[59.48964310 356.57220459]
[50.78712082 344.23654175]
[45.73651886 330.01000977]
[44.71262741 314.94833374]
[47.79142761 300.16915894]
[54.74444962 286.76922607]
[65.05573273 275.74291992]
[77.96011353 267.90838623]
[92.50000000 263.84707642]
[92.50000000 248.84707642]
[92.50000000 233.84707642]
[92.50000000 218.84707642]
[92.50000000 203.84707642]
[92.50000000 188.84707642]
[92.50000000 173.84707642]
[92.50000000 158.84707642]
[92.50000000 143.84707642]
[92.50000000 128.84707642]
[92.50000000 113.84708405]
[80.32816315 105.08087921]
[66.10138702 109.83469391]
[51.87460327 114.58850861]
[41.23791885 126.30052948]
[26.71459961 122.99561310]
[12.48781967 127.74942780]
[-1.73895931 132.50323486]
[-14.84540367 143.25765991]
[-28.80775833 133.64053345]
[-23.43164253 117.56155396]
[-6.49277401 118.27645874]
[7.73400497 113.52264404]
[21.96078491 108.76882935]
[31.57987785 97.39683533]
[47.12078857 100.36172485]
[61.34756851 95.60791016]
[75.57434845 90.85409546]
[81.76811218 88.69390869]
[87.71176147 88.50868988]
[92.89338684 90.08934784]
[96.87826538 93.10754395]
[102.94128418 79.38748932]
[109.00429535 65.66743469]
[115.06730652 51.94738388]
[106.57308197 24.83749390]
[132.49504089 5.68704319]
[130.62742615 -9.19623661]
[126.42971802 -17.38348961]
[128.87910461 -24.40817070]
[127.32152557 -39.32708359]
[125.76393890 -54.24599457]
[116.63547516 -67.16813660]
[123.00936890 -80.63003540]
[121.45178223 -95.54895020]
[119.89420319 -110.46785736]
[118.33662415 -125.38677216]
[116.62393188 -140.28868103]
[114.75631714 -155.17195129]
[112.88871002 -170.05523682]
[97.91522980 -171.80409241]
[83.79563141 -177.08616638]
[71.35080719 -185.59437561]
[61.30427170 -196.83407593]
[54.24013138 -210.15177917]
[50.56907654 -224.77322388]
[50.50454330 -239.84834290]
[54.05028152 -254.50068665]
[61.00014496 -267.87838745]
[70.95008087 -279.20367432]
[83.32160950 -287.81811523]
[97.39546204 -293.22088623]
[112.35341644 -295.09786987]
[127.32582855 -293.33996582]
[141.44223022 -288.04931641]
[153.88189697 -279.53356934]
[163.92161560 -268.28778076]
[170.97767639 -254.96578979]
[174.63986206 -240.34211731]
[174.69525146 -225.26696777]
[171.14064026 -210.61677551]
[164.18266296 -197.24328613]
[154.22587585 -185.92402649]
[141.84912109 -177.31709290]
[127.77198792 -171.92285156]
[129.63960266 -157.03956604]
[131.50721741 -142.15629578]
[135.48638916 -135.87045288]
[133.25553894 -126.94435120]
[134.81311035 -112.02544403]
[136.37069702 -97.10652924]
[137.92828369 -82.18761444]
[146.94534302 -70.33258057]
[140.68286133 -55.80357742]
[142.24043274 -40.88466263]
[143.79801941 -25.96575165]
[145.51071167 -11.06384945]
[147.37832642 3.81943011]
[152.87475586 -10.13725853]
[151.29277039 -25.05360222]
[155.39613342 -39.48143387]
[164.59101868 -51.33276749]
[177.54673767 -58.89247513]
[192.38836670 -61.06651688]
[206.96798706 -57.54027176]
[219.17567444 -48.82405090]
[227.24472046 -36.17926788]
[230.00737000 -21.43586922]
[227.06382751 -6.72752094]
[218.84005737 5.81719160]
[206.52622986 14.38279915]
[191.90438843 17.72968864]
[177.09269714 15.37426472]
[162.86912537 20.13766861]
[177.63517761 22.77653313]
[192.86598206 16.69748688]
[205.57675171 27.05935478]
[202.69174194 43.20273590]
[187.17880249 48.52070236]
[174.99632263 37.54258728]
[160.23025513 34.90372467]
[157.44062805 44.14689255]
[151.99340820 51.58345032]
[144.73977661 56.53373337]
[136.67082214 58.66615295]
[128.78736877 58.01039886]
[122.72434998 71.73045349]
[116.66133118 85.45050049]
[110.59832001 99.17055511]
[107.50000000 113.84708405]
[107.50000000 128.84707642]
[107.50000000 143.84707642]
[107.50000000 158.84707642]
[107.50000000 173.84707642]
[107.50000000 188.84707642]
[107.50000000 203.84707642]
[107.50000000 218.84707642]
[107.50000000 233.84707642]
[107.50000000 248.84707642]
[107.50000000 263.84707642]
[122.03988647 267.90838623]
[134.94427490 275.74291992]
[145.25555420 286.76922607]
[152.20857239 300.16915894]
[155.28736877 314.94833374]
[154.26348877 330.01000977]
[149.21287537 344.23654175]
[140.51036072 356.57220459]
[128.80169678 366.10162354]
[114.95575714 372.11764526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 38]
[23 37]
[24 36]
[26 34]
[27 33]
[28 32]
[42 129]
[43 128]
[44 127]
[45 126]
[47 98]
[48 97]
[50 96]
[51 95]
[52 94]
[54 92]
[55 91]
[56 90]
[57 89]
[58 87]
[59 86]
[60 85]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
