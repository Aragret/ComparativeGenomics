%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGCCCCCGGGGGGGGGGACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUxxxxxxxxxxAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACCCCCCCCCCCAUUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.67628479 377.06896973]
[74.83034515 371.05294800]
[63.12168503 361.52352905]
[54.41915894 349.18786621]
[49.36855698 334.96133423]
[48.34466553 319.89965820]
[51.42346573 305.12051392]
[58.37648773 291.72058105]
[68.68777466 280.69424438]
[81.59215546 272.85974121]
[96.13204193 268.79843140]
[96.13204193 253.79843140]
[96.13204193 238.79843140]
[96.13204193 223.79843140]
[96.13204193 208.79843140]
[96.13204193 193.79843140]
[96.13204193 178.79843140]
[96.13204193 163.79843140]
[96.13204193 148.79843140]
[96.13204193 133.79843140]
[74.36695099 118.72579956]
[71.08868408 94.28976440]
[85.78834534 76.81359863]
[81.78060150 62.35890961]
[77.77286530 47.90422058]
[73.76512146 33.44953156]
[69.75737762 18.99484253]
[65.74964142 4.54015446]
[60.84809113 -9.63640308]
[55.07181931 -23.47962189]
[49.29554367 -37.32283783]
[43.51927185 -51.16605759]
[30.52017403 -54.83771515]
[22.14761925 -65.18799591]
[21.29830933 -78.27818298]
[28.05930328 -89.29116058]
[22.57227325 -103.25154877]
[16.79599953 -117.09477234]
[10.59059334 -130.75100708]
[4.24346352 -144.34196472]
[-2.10366583 -157.93290710]
[-8.73216438 -171.38887024]
[-15.63916302 -184.70404053]
[-22.41278267 -190.93058777]
[-22.54808807 -198.36882019]
[-29.17658615 -211.82478333]
[-43.57272339 -207.48876953]
[-58.48622513 -205.58155823]
[-73.51023102 -206.15521240]
[-88.23487854 -209.19404602]
[-102.25847626 -214.61517334]
[-115.19844055 -222.27070618]
[-126.70175934 -231.95179749]
[-136.45462036 -243.39433289]
[-144.19094849 -256.28616333]
[-149.69970703 -270.27557373]
[-152.83059692 -284.98092651]
[-153.49821472 -300.00103760]
[-151.68435669 -314.92617798]
[-147.43847656 -329.34915161]
[-140.87643433 -342.87652588]
[-132.17723083 -355.13922119]
[-121.57818604 -365.80270386]
[-109.36845398 -374.57611084]
[-95.88113403 -381.22006226]
[-81.48416138 -385.55328369]
[-66.57029724 -387.45761108]
[-51.54639816 -386.88107300]
[-36.82233429 -383.83941650]
[-22.79978561 -378.41555786]
[-9.86129761 -370.75753784]
[1.64015830 -361.07424927]
[11.39081383 -349.62982178]
[19.12466431 -336.73651123]
[24.63072395 -322.74606323]
[27.75878334 -308.04010010]
[28.42350769 -293.01983643]
[26.60676384 -278.09506226]
[22.35811043 -263.67288208]
[15.79345608 -250.14680481]
[7.09188986 -237.88578796]
[-3.50920463 -227.22431946]
[-15.72062111 -218.45327759]
[-9.09212208 -204.99731445]
[-2.32400727 -191.61103821]
[4.58299112 -178.29588318]
[8.84397030 -176.01123047]
[11.68174934 -170.99343872]
[11.48728466 -164.28004456]
[17.83441544 -150.68908691]
[24.18154335 -137.09814453]
[29.89850616 -132.33767700]
[30.51605415 -123.15778351]
[34.62623215 -120.61181641]
[37.14549637 -115.42678070]
[36.53266144 -108.73858643]
[42.01969528 -94.77819061]
[57.69023514 -88.75390625]
[64.31436157 -72.96134186]
[57.36249161 -56.94232941]
[63.13876343 -43.09910965]
[68.91503906 -29.25589371]
[74.69130707 -15.41267586]
[81.76361084 -28.64077187]
[96.06111908 -33.17743301]
[109.46636200 -26.44694710]
[114.36846161 -12.27057934]
[107.98423004 1.30298257]
[93.93833923 6.56729460]
[80.20433044 0.53241432]
[84.21206665 14.98710251]
[88.21981049 29.44179153]
[92.22754669 43.89648056]
[96.23529053 58.35116959]
[100.24303436 72.80585480]
[109.32048798 73.24442291]
[118.10298157 76.74590302]
[125.55063629 83.14884186]
[130.70373535 91.93840790]
[132.80233765 102.28372192]
[131.38920593 113.11536407]
[144.48236084 120.43447113]
[159.61979675 115.89205170]
[173.49575806 123.45732117]
[177.87786865 138.64193726]
[170.16632080 152.43713379]
[154.93621826 156.65846252]
[141.22332764 148.80149841]
[137.16325378 133.52761841]
[124.07009125 126.20851898]
[111.13204193 133.79843140]
[111.13204193 148.79843140]
[111.13204193 163.79843140]
[111.13204193 178.79843140]
[111.13204193 193.79843140]
[111.13204193 208.79843140]
[111.13204193 223.79843140]
[111.13204193 238.79843140]
[111.13204193 253.79843140]
[111.13204193 268.79843140]
[125.67192841 272.85974121]
[138.57630920 280.69424438]
[148.88758850 291.72058105]
[155.84060669 305.12051392]
[158.91941833 319.89965820]
[157.89552307 334.96133423]
[152.84492493 349.18786621]
[144.14239502 361.52352905]
[132.43373108 371.05294800]
[118.58779144 377.06896973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 103]
[30 102]
[31 101]
[32 100]
[36 97]
[37 96]
[38 93]
[39 91]
[40 90]
[41 89]
[42 86]
[43 85]
[45 84]
[46 83]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
