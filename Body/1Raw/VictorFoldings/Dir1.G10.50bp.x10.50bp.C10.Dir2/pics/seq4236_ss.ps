%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUACUUCUAAGGGGGGGGGGCCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACxxxxxxxxxxAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUACCCCCCCCCCACCCUACUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 386.73480225]
[70.75619507 381.92538452]
[57.85220718 374.16000366]
[46.91955185 363.80184937]
[38.46956635 351.33541870]
[32.89747238 337.34378052]
[30.46388245 322.48135376]
[31.28262329 307.44326782]
[35.31539917 292.93292236]
[42.37359238 279.62893677]
[52.12707901 268.15359497]
[64.11966705 259.04360962]
[77.79044342 252.72505188]
[92.50000000 249.49349976]
[92.50000000 234.49349976]
[92.50000000 219.49349976]
[92.50000000 204.49349976]
[92.50000000 189.49349976]
[92.50000000 174.49349976]
[92.50000000 159.49349976]
[92.50000000 144.49349976]
[92.50000000 129.49349976]
[92.50000000 114.49349213]
[88.28488922 128.88908386]
[74.81365204 135.48648071]
[60.85680389 129.99044800]
[55.50101471 115.97918701]
[62.23319626 102.57479095]
[76.66988373 98.50420380]
[61.67063522 98.35412598]
[46.67138672 98.20405579]
[31.67213821 98.05397797]
[16.67288971 97.90390778]
[1.67363977 97.75382996]
[-6.06930971 111.01815796]
[-19.41501236 118.61998749]
[-34.77354431 118.51446533]
[-48.01353073 110.72997284]
[-55.57349014 97.36050415]
[-55.41982651 82.00238037]
[-47.59387207 68.78685760]
[-34.20077515 61.26884842]
[-18.84321022 61.47064972]
[-5.65228271 69.33798981]
[1.82371342 82.75458527]
[16.82296181 82.90465546]
[31.82221222 83.05473328]
[46.82146072 83.20480347]
[61.82070923 83.35488129]
[76.81996155 83.50495148]
[86.60929871 82.95039368]
[94.48072815 86.15024567]
[99.24687958 91.89641571]
[107.47092438 79.35189819]
[95.61295319 70.15251923]
[84.52336121 60.04010010]
[74.27226257 49.07857513]
[64.92446899 37.33724213]
[56.53908539 24.89033699]
[49.16912842 11.81655407]
[42.86118698 -1.80144775]
[37.65514374 -15.87757015]
[33.58391953 -30.32281876]
[30.67325020 -45.04586411]
[28.94153786 -59.95362473]
[28.39973068 -74.95184326]
[29.05125618 -89.94569397]
[30.89199448 -104.84038544]
[33.91030502 -119.54174042]
[38.08711243 -133.95681763]
[43.39599991 -147.99447632]
[49.80340576 -161.56596375]
[57.26882172 -174.58546448]
[65.74504852 -186.97068787]
[75.17848969 -198.64331055]
[85.50951385 -209.52954102]
[96.67279816 -219.56056213]
[108.59776306 -228.67292786]
[121.20901489 -236.80905151]
[134.42681885 -243.91748047]
[148.16760254 -249.95326233]
[162.34451294 -254.87826538]
[176.86788940 -258.66131592]
[191.64591980 -261.27853394]
[206.58517456 -262.71334839]
[221.59120178 -262.95669556]
[236.56913757 -262.00701904]
[251.42425537 -259.87033081]
[266.06265259 -256.56018066]
[280.39178467 -252.09744263]
[294.32107544 -246.51034546]
[307.76239014 -239.83422852]
[320.63082886 -232.11129761]
[332.84497070 -223.39038086]
[344.32763672 -213.72659302]
[355.00619507 -203.18106079]
[364.81317139 -191.82043457]
[373.68649292 -179.71655273]
[381.57012939 -166.94595337]
[388.41421509 -153.58935547]
[394.17547607 -139.73121643]
[398.81747437 -125.45914459]
[402.31088257 -110.86338806]
[404.63357544 -96.03620911]
[405.77093506 -81.07136536]
[405.71569824 -66.06346893]
[404.46826172 -51.10739899]
[402.03649902 -36.29771805]
[398.43579102 -21.72806168]
[393.68890381 -7.49053955]
[387.82580566 6.32483006]
[380.88363647 19.63070107]
[372.90625000 32.34294891]
[363.94406128 44.38119888]
[354.05377197 55.66934204]
[343.29788208 66.13600922]
[331.74441528 75.71503448]
[319.46643066 84.34584045]
[306.54153442 91.97386932]
[293.05142212 98.55089569]
[279.08142090 104.03532410]
[264.71981812 108.39249420]
[250.05746460 111.59484863]
[235.18701172 113.62214661]
[220.20251465 114.46157074]
[205.19866943 114.10781097]
[190.27038574 112.56310272]
[175.51200867 109.83721161]
[161.01686096 105.94738007]
[146.87658691 100.91819000]
[133.18058777 94.78144836]
[120.01544952 87.57594299]
[111.79139709 100.12046814]
[107.50000000 114.49349213]
[107.50000000 129.49349976]
[107.50000000 144.49349976]
[107.50000000 159.49349976]
[107.50000000 174.49349976]
[107.50000000 189.49349976]
[107.50000000 204.49349976]
[107.50000000 219.49349976]
[107.50000000 234.49349976]
[107.50000000 249.49349976]
[122.20955658 252.72505188]
[135.88034058 259.04360962]
[147.87292480 268.15359497]
[157.62640381 279.62893677]
[164.68460083 292.93292236]
[168.71737671 307.44326782]
[169.53611755 322.48135376]
[167.10252380 337.34378052]
[161.53042603 351.33541870]
[153.08044434 363.80184937]
[142.14779663 374.16000366]
[129.24380493 381.92538452]
[114.97203827 386.73480225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[53 133]
[54 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
