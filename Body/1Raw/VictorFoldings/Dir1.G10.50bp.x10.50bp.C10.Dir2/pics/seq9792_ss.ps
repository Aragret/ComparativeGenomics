%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUAAUUAGGGGGGGGGGUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUxxxxxxxxxxUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCCCCCCCCCCCAGCCCAAUUA\
) } def
/len { sequence length } bind def

/coor [
[87.95045471 385.68597412]
[73.92851257 380.13296509]
[61.72855377 371.26663208]
[52.11748123 359.64434814]
[45.69945908 345.99664307]
[42.87792206 331.18145752]
[43.83023834 316.13006592]
[48.49654007 301.78863525]
[56.58350754 289.05868530]
[67.58278656 278.74041748]
[80.80294037 271.48245239]
[95.41295624 267.74099731]
[95.41295624 252.74101257]
[95.41295624 237.74101257]
[95.41295624 222.74101257]
[95.41295624 207.74101257]
[95.41295624 192.74101257]
[95.41295624 177.74101257]
[95.41295624 162.74101257]
[95.41295624 147.74101257]
[95.41295624 132.74101257]
[75.23646545 110.29879761]
[83.53518677 87.65526581]
[75.63870239 74.90200806]
[67.74221802 62.14875031]
[54.38041687 68.98358154]
[40.50596619 74.70655060]
[26.21120071 79.27957916]
[11.59125710 82.67221832]
[-3.25657392 84.86190033]
[-18.23348045 85.83405304]
[-33.23979187 85.58220673]
[-48.17564011 84.10803986]
[-62.94163132 81.42134857]
[-77.43949890 77.54003143]
[-91.57276154 72.48990631]
[-105.24736023 66.30458069]
[-118.37228394 59.02523041]
[-130.86019897 50.70028305]
[-142.62800598 41.38515091]
[-153.59736633 31.14182472]
[-163.69531250 20.03846931]
[-172.85461426 8.14897823]
[-181.01432800 -4.44752407]
[-188.12014771 -17.66720963]
[-194.12478638 -31.42210197]
[-198.98829651 -45.62066269]
[-202.67829895 -60.16839981]
[-205.17022705 -74.96850586]
[-206.44750977 -89.92247772]
[-206.50166321 -104.93080902]
[-205.33229065 -119.89360809]
[-202.94720459 -134.71130371]
[-199.36225891 -149.28527832]
[-194.60131836 -163.51856995]
[-188.69607544 -177.31642151]
[-181.68580627 -190.58703613]
[-173.61718750 -203.24208069]
[-164.54391479 -215.19734192]
[-154.52635193 -226.37326050]
[-143.63116455 -236.69546509]
[-131.93087769 -246.09526062]
[-119.50334930 -254.51008606]
[-106.43128204 -261.88394165]
[-92.80166626 -268.16775513]
[-78.70520782 -273.31973267]
[-64.23571777 -277.30554199]
[-49.48949814 -280.09869385]
[-34.56467056 -281.68057251]
[-19.56056786 -282.04067993]
[-4.57703829 -281.17660522]
[10.28620434 -279.09411621]
[24.93024445 -275.80703735]
[39.25762939 -271.33728027]
[53.17301178 -265.71453857]
[66.58377838 -258.97628784]
[79.40069580 -251.16735840]
[91.53845215 -242.33969116]
[102.91628265 -232.55206299]
[113.45845795 -221.86958313]
[123.09483337 -210.36337280]
[131.76127625 -198.10997009]
[139.40010071 -185.19094849]
[145.96047974 -171.69227600]
[151.39875793 -157.70379639]
[155.67874146 -143.31857300]
[158.77195740 -128.63235474]
[160.65779114 -113.74288177]
[161.32371521 -98.74923706]
[160.76530457 -83.75120544]
[158.98625183 -68.84859467]
[155.99841309 -54.14058685]
[151.82167053 -39.72505188]
[146.48381042 -25.69793320]
[140.02037048 -12.15257549]
[132.47434998 0.82087517]
[123.89597321 13.13608265]
[114.34233856 24.71108818]
[103.87700653 35.46886444]
[92.56964111 45.33781433]
[80.49547577 54.25226593]
[88.39196014 67.00552368]
[96.28844452 79.75878143]
[116.24783325 78.66210175]
[132.93324280 97.09896088]
[147.91348267 97.86862183]
[162.89372253 98.63828278]
[177.87396240 99.40794373]
[168.10627747 88.02407837]
[167.76856995 73.02787781]
[177.01388550 61.21584702]
[191.65211487 57.94136429]
[205.04899597 64.68847656]
[211.13285828 78.39929199]
[207.14642334 92.85987091]
[194.89808655 101.51598358]
[209.61360168 104.42345428]
[224.95263672 98.62293243]
[237.47250366 109.21467590]
[234.29383850 125.30281067]
[218.68656921 130.33724976]
[206.70613098 119.13897705]
[191.99061584 116.23150635]
[177.10430908 114.38818359]
[162.12406921 113.61852264]
[147.14382935 112.84886169]
[132.16358948 112.07920074]
[126.72592163 117.24465179]
[137.05665588 128.12013245]
[126.18103027 138.45069885]
[115.85060883 127.57555389]
[110.41295624 132.74101257]
[110.41295624 147.74101257]
[110.41295624 162.74101257]
[110.41295624 177.74101257]
[110.41295624 192.74101257]
[110.41295624 207.74101257]
[110.41295624 222.74101257]
[110.41295624 237.74101257]
[110.41295624 252.74101257]
[110.41295624 267.74099731]
[125.02296448 271.48245239]
[138.24313354 278.74041748]
[149.24240112 289.05868530]
[157.32936096 301.78863525]
[161.99566650 316.13006592]
[162.94798279 331.18145752]
[160.12644958 345.99664307]
[153.70841980 359.64434814]
[144.09735107 371.26663208]
[131.89739990 380.13296509]
[117.87545013 385.68597412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 103]
[24 102]
[25 101]
[105 127]
[106 126]
[107 125]
[108 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
