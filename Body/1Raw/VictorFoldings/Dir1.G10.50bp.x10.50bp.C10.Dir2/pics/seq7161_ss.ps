%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUAUUCAUGGGGGGGGGGCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAxxxxxxxxxxCGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCCCCCCCCCCCUCAUAAUCAU\
) } def
/len { sequence length } bind def

/coor [
[33.43605423 426.27755737]
[20.21585655 419.00509644]
[9.32905388 408.55810547]
[1.51792300 395.64883423]
[-2.68495822 381.15753174]
[-2.99303055 366.07220459]
[0.61471051 351.42135620]
[7.89228344 338.20397949]
[18.34349060 327.32122803]
[31.25575256 319.51507568]
[45.74868774 315.31777954]
[45.43663406 300.32101440]
[45.12457657 285.32427979]
[44.81251907 270.32751465]
[44.50046539 255.33076477]
[44.18840790 240.33401489]
[43.87635040 225.33726501]
[43.56429672 210.34049988]
[43.25223923 195.34375000]
[42.94018173 180.34700012]
[39.63523102 173.68194580]
[42.78089905 165.03575134]
[42.78089905 150.03575134]
[42.78089905 135.03575134]
[42.78089905 120.03575134]
[42.78089905 105.03575134]
[31.08127785 95.64859009]
[16.43777657 98.89942169]
[1.79427433 102.15024567]
[-6.48102379 115.61483002]
[-21.87262344 119.20288849]
[-35.24896240 110.78569794]
[-38.67409515 95.35702515]
[-30.11595154 82.07042694]
[-14.65192604 78.80860138]
[-1.45655143 87.50674438]
[13.18694973 84.25592041]
[27.83045197 81.00508881]
[30.64642906 74.05381012]
[16.23701859 69.88621521]
[1.82760906 65.71861267]
[-12.58180141 61.55101013]
[-27.23881340 64.74036407]
[-40.33684540 57.42999649]
[-45.31671524 43.28075790]
[-39.68461990 29.37825775]
[-26.26098061 22.68453789]
[-11.76803684 26.55165482]
[-3.46360707 39.04263306]
[9.78372383 46.07884216]
[23.03105545 53.11505127]
[36.27838516 60.15125656]
[39.09436417 53.19997787]
[30.84207535 40.67401886]
[22.58978653 28.14805603]
[15.20622635 22.65852928]
[14.29927635 15.27455425]
[6.30936003 2.57962441]
[-1.68055594 -10.11530495]
[-16.94215393 -15.06133461]
[-22.45555305 -30.12725639]
[-13.99134541 -43.75578308]
[1.95745218 -45.49227905]
[13.15628815 -34.00464630]
[11.01437378 -18.10522079]
[19.00428963 -5.41029167]
[26.99420547 7.28463793]
[35.11574936 19.89576530]
[43.36803818 32.42172623]
[51.62032700 44.94768906]
[59.08747864 45.64884186]
[57.85068130 30.69991684]
[56.61388397 15.75099373]
[51.52090836 1.64207351]
[58.15215302 -11.81253910]
[72.44383240 -16.36753464]
[85.63765717 -9.23150349]
[89.64813995 5.22242403]
[82.01778412 18.13637161]
[78.01978302 32.59375763]
[74.02178955 47.05114365]
[81.48894501 47.75229645]
[91.92875671 36.98148727]
[102.36856842 26.21068001]
[106.12744904 17.81290245]
[113.13937378 15.32723999]
[123.80100250 4.77594995]
[134.46263123 -5.77534056]
[145.12425232 -16.32663155]
[141.14874268 -31.16209030]
[145.13906860 -45.99357224]
[156.02188110 -56.83147812]
[170.86972046 -60.76047134]
[185.68862915 -56.72366714]
[196.49237061 -45.80694962]
[200.37480164 -30.94685936]
[196.29156494 -16.14068604]
[185.34103394 -5.37121487]
[170.46884155 -1.53538120]
[155.67553711 -5.66500425]
[145.01391602 4.88628578]
[134.35229492 15.43757629]
[123.69066620 25.98886681]
[113.13937378 36.65049362]
[102.69956207 47.42130280]
[92.25975037 58.19210815]
[113.56557465 63.77208328]
[127.29165649 78.32683563]
[130.75572205 95.98541260]
[145.65762329 97.69810486]
[160.55952454 99.41078949]
[175.46144104 101.12348175]
[186.68992615 90.23978424]
[202.29098511 89.17149353]
[214.89823914 98.42302704]
[218.55895996 113.62609100]
[211.54464722 127.60226440]
[197.16725159 133.75242615]
[182.21533203 129.17265320]
[173.74874878 116.02538300]
[158.84684753 114.31269836]
[143.94494629 112.60000610]
[129.04302979 110.88731384]
[95.59958649 136.50321960]
[57.78089905 105.03575134]
[57.78089905 120.03575134]
[57.78089905 135.03575134]
[57.78089905 150.03575134]
[57.78089905 165.03575134]
[57.93693542 180.03494263]
[58.24899292 195.03169250]
[58.56105042 210.02844238]
[58.87310410 225.02520752]
[59.18516159 240.02195740]
[59.49721909 255.01870728]
[59.80927277 270.01547241]
[60.12133026 285.01220703]
[60.43338776 300.00897217]
[60.74544144 315.00573730]
[75.40043640 318.59649658]
[88.62624359 325.85876465]
[99.52111053 336.29733276]
[107.34220886 349.20056152]
[111.55628204 363.68862915]
[111.87599945 378.77371216]
[108.27957916 393.42733765]
[101.01221466 406.65032959]
[90.56941223 417.54116821]
[77.66317749 425.35726929]
[63.17348862 429.56576538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[27 38]
[28 37]
[29 36]
[53 70]
[54 69]
[55 68]
[57 67]
[58 66]
[59 65]
[82 106]
[83 105]
[84 104]
[86 103]
[87 102]
[88 101]
[89 100]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
