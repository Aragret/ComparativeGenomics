%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACAUAAUGGGGGGGGGGGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCxxxxxxxxxxAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAACCCCCCCCCCAAAACACAUAAU\
) } def
/len { sequence length } bind def

/coor [
[77.25291443 535.57446289]
[62.63691711 531.92474365]
[49.19974899 525.11370850]
[37.61540604 515.48303223]
[28.46496010 503.51568604]
[22.20738983 489.81201172]
[19.15657425 475.05935669]
[19.46554184 459.99774170]
[23.11879349 445.38262939]
[29.93308258 431.94711304]
[39.56660843 420.36511230]
[51.53615952 411.21755981]
[65.24134827 404.96331787]
[79.99472046 401.91607666]
[80.29872131 386.91915894]
[80.60272980 371.92224121]
[80.90673065 356.92532349]
[81.21073914 341.92840576]
[81.51473999 326.93148804]
[81.81874847 311.93457031]
[82.12274933 296.93765259]
[82.42675018 281.94073486]
[82.73075867 266.94381714]
[69.81402588 263.52987671]
[57.98851395 257.29489136]
[47.86169815 248.55496216]
[39.95474625 237.75495911]
[34.67568207 225.44592285]
[32.29833984 212.25686646]
[32.94814682 198.86276245]
[36.59553909 185.94989014]
[43.05725098 174.18069458]
[52.00555038 164.15982056]
[62.98484039 156.40309143]
[75.43486023 151.31082153]
[88.71928406 149.14733887]
[89.93405151 134.19660950]
[91.14881897 119.24588776]
[92.36358643 104.29515839]
[90.53723907 101.77377319]
[89.61158752 98.51736450]
[89.86592102 94.86724091]
[91.44609070 91.26482391]
[94.33073425 88.19915009]
[96.75228882 73.39590454]
[99.17384338 58.59265900]
[87.53508759 43.70261765]
[90.36651611 25.33835030]
[105.42575836 15.00521374]
[107.24542236 0.11599499]
[109.06507874 -14.77322388]
[110.88473511 -29.66244316]
[112.70439148 -44.55166245]
[114.52404785 -59.44087982]
[99.92980194 -62.97988510]
[85.84510803 -68.18928528]
[72.46044159 -74.99862671]
[59.95680618 -83.31581879]
[48.50331116 -93.02838898]
[38.25484848 -104.00498199]
[29.35001755 -116.09714508]
[21.90924454 -129.14135742]
[16.03315735 -142.96119690]
[11.80122375 -157.36978149]
[9.27067661 -172.17224121]
[8.47573757 -187.16839600]
[9.42715740 -202.15544128]
[12.11207008 -216.93067932]
[16.49416351 -231.29431152]
[22.51417732 -245.05206299]
[30.09069633 -258.01791382]
[39.12125778 -270.01644897]
[49.48373032 -280.88549805]
[61.03797913 -290.47796631]
[73.62773895 -298.66421509]
[87.08275604 -305.33346558]
[101.22105408 -310.39556885]
[115.85144806 -313.78207397]
[130.77606201 -315.44711304]
[145.79306030 -315.36825562]
[160.69935608 -313.54650879]
[175.29336548 -310.00653076]
[189.37771606 -304.79620361]
[202.76193237 -297.98596191]
[215.26501465 -289.66793823]
[226.71784973 -279.95458984]
[236.96559143 -268.97732544]
[245.86961365 -256.88455200]
[253.30950928 -243.83985901]
[259.18466187 -230.01960754]
[263.41564941 -215.61074829]
[265.94522095 -200.80812073]
[266.73913574 -185.81192017]
[265.78671265 -170.82493591]
[263.10083008 -156.04988098]
[258.71777344 -141.68653870]
[252.69683838 -127.92918396]
[245.11946106 -114.96385193]
[236.08810425 -102.96589661]
[225.72489929 -92.09756470]
[214.17001343 -82.50584412]
[201.57969666 -74.32044983]
[188.12423706 -67.65208435]
[173.98559570 -62.59091949]
[159.35498047 -59.20541382]
[144.43026733 -57.54134750]
[129.41326904 -57.62122345]
[127.59361267 -42.73200607]
[125.77395630 -27.84278488]
[123.95429230 -12.95356655]
[122.13463593 1.93565261]
[120.31497955 16.82487106]
[129.17173767 24.12496948]
[133.42366028 34.91522598]
[131.89636230 46.53328705]
[124.85718536 56.05140686]
[113.97708893 61.01421356]
[111.55553436 75.81745911]
[109.13397980 90.62070465]
[107.31431580 105.50992584]
[106.09954834 120.46065521]
[104.88478088 135.41137695]
[103.67001343 150.36212158]
[119.39897919 156.13285828]
[132.88311768 166.05415344]
[143.05639648 179.33236694]
[149.11711121 194.90885925]
[150.59107971 211.54434204]
[147.36872864 227.91755676]
[139.71318054 242.73013306]
[128.23883057 254.80955505]
[113.86196136 263.20205688]
[97.72767639 267.24780273]
[97.42367554 282.24472046]
[97.11966705 297.24163818]
[96.81566620 312.23855591]
[96.51165771 327.23547363]
[96.20765686 342.23239136]
[95.90364838 357.22930908]
[95.59964752 372.22622681]
[95.29563904 387.22317505]
[94.99163818 402.22009277]
[109.60940552 405.86270142]
[123.04987335 412.66723633]
[134.63888550 422.29232788]
[143.79512024 434.25521851]
[150.05934143 447.95587158]
[153.11729431 462.70703125]
[152.81562805 477.76879883]
[149.16946411 492.38568115]
[142.36167908 505.82449341]
[132.73376465 517.41113281]
[120.76865387 526.56451416]
[107.06650543 532.82537842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[36 123]
[37 122]
[38 121]
[39 120]
[44 119]
[45 118]
[46 117]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
