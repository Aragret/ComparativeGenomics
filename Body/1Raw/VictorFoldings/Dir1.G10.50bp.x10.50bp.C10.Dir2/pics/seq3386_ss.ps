%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGGCCCCGGGGGGGGGGAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAxxxxxxxxxxAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCCCCCCCCCCCAAACGCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.60939026 375.49313354]
[70.38919830 368.22067261]
[59.50239182 357.77365112]
[51.69126129 344.86441040]
[47.48838043 330.37310791]
[47.18030930 315.28775024]
[50.78804779 300.63693237]
[58.06562042 287.41955566]
[68.51683044 276.53677368]
[81.42909241 268.73062134]
[95.92202759 264.53335571]
[95.60997009 249.53659058]
[95.29791260 234.53984070]
[94.98586273 219.54309082]
[94.67380524 204.54634094]
[94.36174774 189.54957581]
[94.04969025 174.55282593]
[93.73763275 159.55607605]
[93.42557526 144.55932617]
[93.11352539 129.56256104]
[84.45237732 129.29734802]
[75.55561829 126.40183258]
[67.23233795 120.76570129]
[60.32392883 112.52677917]
[45.32474136 112.68281555]
[30.32555389 112.83885956]
[15.32636452 112.99489594]
[0.32717645 113.15093231]
[-14.67201233 113.30696869]
[-29.67119980 113.46300507]
[-44.66389465 113.93104553]
[-59.64361191 114.71089172]
[-74.62332153 115.49073792]
[-89.60304260 116.27057648]
[-103.05758667 125.64646149]
[-117.78768921 118.43839264]
[-118.64027405 102.06142426]
[-104.73828125 93.36277008]
[-90.38288116 101.29086304]
[-75.40316772 100.51101685]
[-60.42345428 99.73117828]
[-45.44374084 98.95133209]
[-41.60102844 96.01720428]
[-35.85877228 95.50948334]
[-29.82723618 98.46381378]
[-14.82804871 98.30777740]
[0.17113991 98.15174103]
[15.17032814 97.99570465]
[30.16951752 97.83966827]
[45.16870499 97.68363190]
[60.16789246 97.52759552]
[63.41197586 90.76550293]
[49.88789368 84.27710724]
[56.37650681 70.75313568]
[69.90013885 77.24131012]
[73.14422607 70.47921753]
[63.87927628 58.68257523]
[48.46554565 53.08355331]
[45.87440491 36.89040375]
[58.77139664 26.76125336]
[73.88919830 33.11610031]
[75.67591095 49.41762543]
[84.94086456 61.21426392]
[98.79207611 62.16350937]
[110.29093933 67.48474884]
[118.24774170 75.74327850]
[129.94737244 66.35611725]
[121.80506134 53.74235535]
[115.00289154 40.35824203]
[109.61296082 26.34565353]
[105.69241333 11.85312653]
[103.28279877 -2.96570539]
[102.40966034 -17.95375633]
[103.08226776 -32.95214462]
[105.29347992 -47.80187607]
[109.01985168 -62.34553909]
[114.22190094 -76.42896271]
[120.84445953 -89.90285492]
[128.81733704 -102.62437439]
[138.05601501 -114.45868683]
[148.46257019 -125.28031921]
[159.92666626 -134.97457886]
[172.32678223 -143.43867493]
[185.53147888 -150.58290100]
[199.40077209 -156.33152771]
[213.78765869 -160.62359619]
[228.53959656 -163.41363525]
[243.50021362 -164.67205811]
[258.51095581 -164.38551331]
[273.41265869 -162.55703735]
[288.04736328 -159.20603943]
[302.25994873 -154.36801147]
[315.89974976 -148.09425354]
[328.82217407 -140.45127869]
[340.89022827 -131.52009583]
[351.97598267 -121.39538574]
[361.96194458 -110.18447113]
[370.74224854 -98.00618744]
[378.22378540 -84.98965454]
[384.32730103 -71.27282715]
[388.98806763 -57.00113297]
[392.15667725 -42.32584763]
[393.79953003 -27.40254402]
[393.89923096 -12.38941288]
[392.45474243 2.55439568]
[389.48132324 17.27046967]
[385.01052856 31.60280991]
[379.08972168 45.39948654]
[371.78170776 58.51424408]
[363.16394043 70.80806732]
[353.32775879 82.15061951]
[342.37744141 92.42167664]
[330.42907715 101.51235962]
[317.60931396 109.32629395]
[304.05404663 115.78065491]
[289.90695190 120.80701447]
[275.31805420 124.35209656]
[260.44195557 126.37831879]
[245.43634033 126.86420441]
[230.46032715 125.80460358]
[215.67262268 123.21074677]
[201.23001099 119.11013031]
[187.28559875 113.54621887]
[173.98716736 106.57800293]
[161.47572327 98.27934265]
[149.88388062 88.73820496]
[139.33453369 78.05574036]
[127.63491058 87.44290161]
[127.50270081 112.84407806]
[108.11027527 129.25050354]
[108.42233276 144.24726868]
[108.73439026 159.24401855]
[109.04644775 174.24076843]
[109.35849762 189.23751831]
[109.67055511 204.23428345]
[109.98261261 219.23103333]
[110.29467010 234.22778320]
[110.60672760 249.22453308]
[110.91878510 264.22128296]
[125.57377625 267.81207275]
[138.79957581 275.07431030]
[149.69445801 285.51290894]
[157.51554871 298.41613770]
[161.72961426 312.90417480]
[162.04934692 327.98928833]
[158.45291138 342.64288330]
[151.18554688 355.86590576]
[140.74275208 366.75674438]
[127.83651733 374.57284546]
[113.34682465 378.78131104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 42]
[32 41]
[33 40]
[34 39]
[56 63]
[57 62]
[66 128]
[67 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
