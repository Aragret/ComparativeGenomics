%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUAAAACGGGGGGGGGGCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAxxxxxxxxxxUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUCCCCCCCCCCAAUAGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.19323730]
[71.19830322 361.17721558]
[59.48964310 351.64779663]
[50.78712082 339.31213379]
[45.73651886 325.08560181]
[44.71262741 310.02392578]
[47.79142761 295.24475098]
[54.74444962 281.84481812]
[65.05573273 270.81851196]
[77.96011353 262.98397827]
[92.50000000 258.92266846]
[92.50000000 243.92268372]
[92.50000000 228.92268372]
[92.50000000 213.92268372]
[92.50000000 198.92268372]
[92.50000000 183.92268372]
[92.50000000 168.92268372]
[92.50000000 153.92268372]
[92.50000000 138.92268372]
[92.50000000 123.92267609]
[78.55796051 116.16426849]
[71.37513733 100.71407318]
[74.83016205 82.92466736]
[88.84839630 69.79615784]
[108.97589874 67.22877502]
[99.95836639 55.24193954]
[90.94084167 43.25510788]
[79.96883392 46.36024475]
[68.60014343 45.94699097]
[57.93278885 42.07168579]
[48.99201584 35.12424850]
[42.63173676 25.78901291]
[39.45302200 14.97733688]
[39.74729919 3.73864532]
[43.46971512 -6.84143448]
[50.24506760 -15.74593639]
[42.25515366 -28.44086647]
[34.26523590 -41.13579559]
[26.27532005 -53.83072662]
[18.28540421 -66.52565765]
[7.51459503 -76.96546936]
[-5.42346096 -84.55537415]
[-21.24164772 -84.86447144]
[-28.30436516 -97.97810364]
[-41.24242020 -105.56800842]
[-54.18047714 -113.15791321]
[-68.34500122 -106.82184601]
[-83.52162170 -110.05449677]
[-93.87460327 -121.61284637]
[-95.42301941 -137.05247498]
[-87.57147217 -150.43652344]
[-73.33904266 -156.61856079]
[-58.19839096 -153.22146606]
[-47.97140503 -141.55148315]
[-46.59056854 -126.09597015]
[-33.65251160 -118.50606537]
[-20.71445656 -110.91615295]
[-5.82168627 -111.14994049]
[2.16644716 -97.49343109]
[15.10450268 -89.90352631]
[7.97371864 -103.10018921]
[4.28020716 -117.63834381]
[4.24745703 -132.63830566]
[7.87745047 -147.19244385]
[14.95054150 -160.42012024]
[25.03874779 -171.52093506]
[37.53164291 -179.82319641]
[51.67330170 -184.82455444]
[66.60803223 -186.22236633]
[81.43215179 -183.93205261]
[95.24867249 -178.09220886]
[107.22157288 -169.05619812]
[116.62639618 -157.37077332]
[122.89406586 -143.74299622]
[125.64533997 -128.99746704]
[124.71372986 -114.02642059]
[120.15560913 -99.73574066]
[112.24678802 -86.99012756]
[101.46582031 -76.56080627]
[88.46504974 -69.07884216]
[74.03112030 -64.99695587]
[59.03742599 -64.56213379]
[44.39120483 -67.80068970]
[30.98033333 -74.51557159]
[38.97024918 -61.82064056]
[46.96016693 -49.12571335]
[54.95008087 -36.43078232]
[62.93999863 -23.73585320]
[81.67611694 -25.52623558]
[98.83178711 -17.59016991]
[109.69071198 -2.01951957]
[111.22245026 16.98289299]
[102.92767334 34.23757553]
[111.94519806 46.22440720]
[120.96273041 58.21124268]
[135.23818970 62.81680679]
[149.56079102 58.35998917]
[163.88339233 53.90317535]
[178.20597839 49.44635773]
[192.52857971 44.98954391]
[195.23074341 29.92445374]
[204.63363647 17.84785843]
[218.57655334 11.53487015]
[233.85549927 12.43616676]
[246.95948792 20.34463692]
[254.87733459 33.44297409]
[255.78955078 48.72127151]
[249.48654175 62.66869354]
[237.41667175 72.08022308]
[222.35351562 74.79315948]
[207.75848389 70.18408966]
[196.98539734 59.31214142]
[182.66279602 63.76895523]
[168.34019470 68.22576904]
[154.01760864 72.68258667]
[139.69500732 77.13940430]
[139.07102966 92.12641907]
[152.97358704 97.75837708]
[166.87614441 103.39033508]
[181.33023071 96.99853516]
[196.04014587 102.77727509]
[202.27876282 117.29812622]
[196.34483337 131.94612122]
[181.75883484 138.03088379]
[167.17437744 131.94239807]
[161.24418640 117.29289246]
[147.34162903 111.66093445]
[133.43907166 106.02897644]
[126.57678986 115.97615051]
[117.33923340 122.03608704]
[107.50000000 123.92267609]
[107.50000000 138.92268372]
[107.50000000 153.92268372]
[107.50000000 168.92268372]
[107.50000000 183.92268372]
[107.50000000 198.92268372]
[107.50000000 213.92268372]
[107.50000000 228.92268372]
[107.50000000 243.92268372]
[107.50000000 258.92266846]
[122.03988647 262.98397827]
[134.94427490 270.81851196]
[145.25555420 281.84481812]
[152.20857239 295.24475098]
[155.28736877 310.02392578]
[154.26348877 325.08560181]
[149.21287537 339.31213379]
[140.51036072 351.64779663]
[128.80169678 361.17721558]
[114.95575714 367.19323730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 95]
[26 94]
[27 93]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[41 60]
[42 59]
[44 57]
[45 56]
[46 55]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
