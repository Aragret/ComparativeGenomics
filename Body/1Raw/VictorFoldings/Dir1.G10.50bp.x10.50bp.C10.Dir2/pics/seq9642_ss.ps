%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCAACAGGGGGGGGGGCCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCxxxxxxxxxxCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGCCCCCCCCCCACCCACAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.23748779]
[71.19830322 375.22146606]
[59.48964310 365.69204712]
[50.78712082 353.35638428]
[45.73651886 339.12985229]
[44.71262741 324.06817627]
[47.79142761 309.28900146]
[54.74444962 295.88906860]
[65.05573273 284.86276245]
[77.96011353 277.02822876]
[92.50000000 272.96691895]
[92.50000000 257.96691895]
[92.50000000 242.96693420]
[92.50000000 227.96693420]
[92.50000000 212.96693420]
[92.50000000 197.96693420]
[92.50000000 182.96693420]
[92.50000000 167.96693420]
[92.50000000 152.96693420]
[92.50000000 137.96693420]
[92.50000000 122.96692657]
[84.10927582 118.19931030]
[78.25392914 110.52797699]
[63.39088440 112.55031586]
[48.52783585 114.57264709]
[45.85343933 129.46234131]
[38.70698547 142.79588318]
[27.78860855 153.26698303]
[14.16797924 159.84982300]
[-0.82048965 161.89944458]
[-15.70838165 159.21507263]
[-29.03713226 152.05969238]
[-39.50092697 141.13429260]
[-46.07463074 127.50926208]
[-48.11421585 112.51942444]
[-45.41986847 97.63333130]
[-38.25555038 84.30937958]
[-27.32315063 73.85290527]
[-13.69371319 67.28833771]
[1.29748952 65.25879669]
[16.18177032 67.96311951]
[29.50092125 75.13636017]
[39.95006561 86.07576752]
[46.50550079 99.70960236]
[61.36854935 97.68726349]
[76.23159790 95.66493225]
[84.35449982 78.00553131]
[104.56867981 70.52963257]
[103.63304901 55.55883789]
[102.69741821 40.58804703]
[91.12965393 30.15615082]
[90.39405823 14.96031094]
[100.41056061 3.99649787]
[99.47492981 -10.97429371]
[84.50671387 -12.33545017]
[69.92171478 -15.96565151]
[56.06184387 -21.77980042]
[43.25198364 -29.64160728]
[31.79242516 -39.36677551]
[21.95179176 -50.72734070]
[13.96076393 -63.45698547]
[8.00666237 -77.25731659]
[4.22905827 -91.80483246]
[2.71650577 -106.75851440]
[3.50446105 -121.76782990]
[6.57445288 -136.48094177]
[11.85451603 -150.55294800]
[19.22087860 -163.65397644]
[28.50086403 -175.47692871]
[39.47693253 -185.74467468]
[51.89179230 -194.21649170]
[65.45442200 -200.69380188]
[79.84689331 -205.02476501]
[94.73181915 -207.10786438]
[109.76028442 -206.89425659]
[124.58000183 -204.38896179]
[138.84356689 -199.65071106]
[152.21662903 -192.79055786]
[164.38569641 -183.96931458]
[175.06552124 -173.39378357]
[184.00573730 -161.31185913]
[190.99679565 -148.00675964]
[195.87478638 -133.79037476]
[198.52539062 -118.99596405]
[198.88644409 -103.97031403]
[196.94950867 -89.06566620]
[192.75999451 -74.63138580]
[186.41607666 -61.00585175]
[178.06649780 -48.50845718]
[167.90696716 -37.43215942]
[156.17564392 -28.03660583]
[143.14752197 -20.54203987]
[129.12800598 -15.12414360]
[114.44572449 -11.90992165]
[115.38135529 3.06086946]
[126.68499756 12.69223881]
[127.84712219 27.86142159]
[117.66821289 39.65241623]
[118.60384369 54.62321091]
[119.53946686 69.59400177]
[130.20109558 80.14529419]
[145.18081665 80.92513275]
[160.16052246 81.70497894]
[175.14024353 82.48482513]
[190.11994934 83.26467133]
[204.30372620 76.25530243]
[216.61152649 84.64382172]
[231.59123230 85.42366791]
[238.87440491 72.01030731]
[251.26116943 63.09230804]
[266.29214478 60.44033813]
[280.98287964 64.58094788]
[292.41656494 74.69202423]
[298.32299805 88.76599121]
[297.52947998 104.00846863]
[290.19354248 117.39304352]
[277.77175903 126.26219940]
[262.73046875 128.85496521]
[248.05613708 124.65652466]
[236.66236877 114.50051117]
[230.81138611 100.40338135]
[215.83168030 99.62354279]
[202.71936035 106.68869019]
[189.34010315 98.24438477]
[174.36039734 97.46453857]
[159.38067627 96.68469238]
[144.40097046 95.90485382]
[129.42124939 95.12500763]
[123.07445526 114.00385284]
[107.50000000 122.96692657]
[107.50000000 137.96693420]
[107.50000000 152.96693420]
[107.50000000 167.96693420]
[107.50000000 182.96693420]
[107.50000000 197.96693420]
[107.50000000 212.96693420]
[107.50000000 227.96693420]
[107.50000000 242.96693420]
[107.50000000 257.96691895]
[107.50000000 272.96691895]
[122.03988647 277.02822876]
[134.94427490 284.86276245]
[145.25555420 295.88906860]
[152.20857239 309.28900146]
[155.28736877 324.06817627]
[154.26348877 339.12985229]
[149.21287537 353.35638428]
[140.51036072 365.69204712]
[128.80169678 375.22146606]
[114.95575714 381.23748779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 46]
[24 45]
[25 44]
[48 100]
[49 99]
[50 98]
[53 95]
[54 94]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
