%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUUUACCAGGGGGGGGGGCUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGxxxxxxxxxxAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUCCCCCCCCCCACCCUUUUACCA\
) } def
/len { sequence length } bind def

/coor [
[37.00801468 255.98908997]
[27.42383957 251.76721191]
[18.12093544 246.95715332]
[9.13536072 241.57756042]
[0.50193709 235.64926147]
[-7.74587584 229.19525146]
[-15.57611275 222.24053955]
[-22.95842743 214.81207275]
[-29.86421013 206.93864441]
[-36.26669693 198.65077209]
[-42.14107132 189.98057556]
[-47.46456909 180.96163940]
[-52.21656036 171.62895203]
[-66.06016541 177.40429688]
[-79.90377045 183.17964172]
[-93.74737549 188.95497131]
[-107.59098053 194.73031616]
[-121.43458557 200.50566101]
[-135.15829468 206.56039429]
[-148.75648499 212.89201355]
[-162.35466003 219.22363281]
[-175.95285034 225.55525208]
[-189.55104065 231.88687134]
[-203.14921570 238.21849060]
[-207.03001404 253.36686707]
[-219.77011108 262.43460083]
[-235.35403442 261.14019775]
[-246.42352295 250.09480286]
[-247.75190735 234.51374817]
[-238.71195984 221.75390625]
[-223.57206726 217.84010315]
[-209.48083496 224.62030029]
[-195.88265991 218.28868103]
[-182.28446960 211.95706177]
[-168.68627930 205.62544250]
[-155.08810425 199.29382324]
[-141.48991394 192.96220398]
[-139.02671814 188.80815125]
[-133.89987183 186.18875122]
[-127.20993042 186.66206360]
[-113.36632538 180.88671875]
[-99.52272034 175.11137390]
[-85.67911530 169.33602905]
[-71.83551025 163.56068420]
[-57.99190521 157.78533936]
[-66.00287628 127.26961517]
[-68.17521667 95.79476166]
[-64.43251038 64.46781158]
[-54.90640259 34.39059830]
[-39.93194199 6.62099457]
[-20.03581047 -17.86429405]
[-30.25960732 -28.84035683]
[-38.44946289 -33.01976776]
[-40.57659912 -40.14401627]
[-50.57584381 -51.32503128]
[-60.57509232 -62.50604248]
[-70.57434082 -73.68705750]
[-86.31410217 -78.29050446]
[-89.93386841 -94.28517151]
[-77.70993042 -105.21711731]
[-62.21722794 -99.84048462]
[-59.39332199 -83.68630219]
[-49.39407730 -72.50528717]
[-39.39483261 -61.32427597]
[-29.39558601 -50.14326096]
[-19.28354454 -39.06415558]
[-9.05974674 -28.08809090]
[0.30430993 -35.50408554]
[10.17100048 -42.23690796]
[20.49057961 -48.25262070]
[31.21102142 -53.52088928]
[42.27827454 -58.01515579]
[53.63653946 -61.71276093]
[65.22856140 -64.59506226]
[76.99588013 -66.64752960]
[88.87918091 -67.85980988]
[100.81855774 -68.22579193]
[112.75379944 -67.74363708]
[124.62474060 -66.41577148]
[136.37153625 -64.24889374]
[147.93495178 -61.25392151]
[159.25669861 -57.44596100]
[170.27969360 -52.84420776]
[180.94836426 -47.47186279]
[191.20890808 -41.35601425]
[201.00961304 -34.52748871]
[210.30105591 -27.02072334]
[219.03640747 -18.87355804]
[227.17160034 -10.12707043]
[234.66563416 -0.82535756]
[241.48074341 8.98468494]
[247.58253479 19.25359726]
[261.04962158 12.64768505]
[274.51666260 6.04177237]
[287.98373413 -0.56413972]
[301.45080566 -7.17005205]
[306.37533569 -19.13265228]
[317.77566528 -24.34392548]
[329.28216553 -20.49435806]
[342.88034058 -26.82597733]
[356.47851562 -33.15759659]
[370.07669067 -39.48921585]
[375.25430298 -54.42132950]
[389.51028442 -61.24354935]
[404.38681030 -55.90837479]
[411.05792236 -41.58106613]
[405.56576538 -26.76176453]
[391.16873169 -20.24249840]
[376.40832520 -25.89103127]
[362.81015015 -19.55941391]
[349.21194458 -13.22779369]
[335.61376953 -6.89617491]
[326.36569214 7.98874807]
[308.05673218 6.29701614]
[294.58966064 12.90292835]
[281.12258911 19.50884056]
[267.65551758 26.11475372]
[254.18844604 32.72066498]
[258.07604980 42.44523621]
[261.35101318 52.39286423]
[264.00064087 62.52499390]
[266.01467896 72.80236053]
[267.38531494 83.18513489]
[268.10726929 93.63307953]
[268.17767334 104.10569763]
[267.59631348 114.56240082]
[266.36541748 124.96266937]
[264.48977661 135.26618958]
[261.97662354 145.43304443]
[258.83572388 155.42381287]
[255.07925415 165.19978333]
[250.72177124 174.72306824]
[245.78015137 183.95675659]
[240.27354431 192.86506653]
[234.22329712 201.41346741]
[227.65287781 209.56884766]
[220.58770752 217.29957581]
[213.05520630 224.57571411]
[205.08454895 231.36903381]
[196.70663452 237.65324402]
[187.95393372 243.40394592]
[178.86035156 248.59889221]
[169.46113586 253.21794128]
[159.79272461 257.24316406]
[149.89259338 260.65899658]
[139.79908752 263.45220947]
[129.55134583 265.61190796]
[119.18907166 267.12979126]
[108.75242615 267.99993896]
[98.28186798 268.21902466]
[87.81796265 267.78613281]
[77.40126801 266.70297241]
[67.07215881 264.97375488]
[56.87066650 262.60519409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[51 67]
[52 66]
[54 65]
[55 64]
[56 63]
[57 62]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
