%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAAUAAUGGGGGGGGGGCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGxxxxxxxxxxCAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUACCCCCCCCCCAUAUUAAUAAU\
) } def
/len { sequence length } bind def

/coor [
[103.44178009 530.69732666]
[89.95290375 523.96582031]
[78.46740723 514.20123291]
[69.65303802 501.97134399]
[64.02225494 487.98715210]
[61.90242386 473.06167603]
[63.41679382 458.06268311]
[68.47731781 443.86218262]
[76.78977966 431.28573608]
[87.87091064 421.06460571]
[101.07646942 413.79293823]
[115.63869476 409.89358521]
[115.33071136 394.89675903]
[115.02273560 379.89990234]
[114.71475983 364.90307617]
[114.40678406 349.90625000]
[114.09880066 334.90939331]
[113.79082489 319.91256714]
[113.48284912 304.91571045]
[113.17487335 289.91888428]
[112.25145721 274.94732666]
[110.71416473 260.02630615]
[109.17687225 245.10530090]
[107.33354950 230.21899414]
[105.18496704 215.37367249]
[95.70441437 203.88592529]
[101.38521576 189.11976624]
[99.23663330 174.27444458]
[97.08805847 159.42912292]
[94.93947601 144.58380127]
[92.79090118 129.73847961]
[90.64231873 114.89315796]
[80.20030975 104.12448120]
[65.42819214 101.51976013]
[56.37017441 103.11602020]
[50.38084793 98.70692444]
[35.66532516 95.79944611]
[20.94980240 92.89197540]
[10.32603931 104.07853699]
[-4.66456652 107.72343445]
[-19.23856735 102.66359711]
[-28.74545479 90.51358795]
[-30.15161324 75.15044403]
[-23.00834274 61.47647858]
[-9.59503746 53.85501099]
[5.80816889 54.71802521]
[18.28616714 63.79013062]
[23.85727501 78.17645264]
[38.57279587 81.08392334]
[53.28831863 83.99140167]
[68.03291321 86.74764252]
[82.80503082 89.35236359]
[95.13631439 80.81190491]
[97.89256287 66.06730652]
[100.64880371 51.32271194]
[103.40504456 36.57811356]
[106.16128540 21.83351898]
[108.91753387 7.08892250]
[103.84774780 -7.89800119]
[113.79193878 -18.98684120]
[116.54817963 -33.73143768]
[102.36810303 -38.71400833]
[89.11486053 -45.80286407]
[77.09910583 -54.83182907]
[66.60252380 -65.58924866]
[57.87115860 -77.82295990]
[51.10969162 -91.24618530]
[46.47661591 -105.54426575]
[44.08053970 -120.38203430]
[43.97763443 -135.41166687]
[46.17030334 -150.28085327]
[50.60715866 -164.64102173]
[57.18418503 -178.15557861]
[65.74720764 -190.50770569]
[76.09550476 -201.40785217]
[87.98648834 -210.60050964]
[101.14142609 -217.87017822]
[115.25193787 -223.04646301]
[129.98725891 -226.00799561]
[145.00196838 -226.68537903]
[159.94410706 -225.06272888]
[174.46340942 -221.17808533]
[188.21951294 -215.12249756]
[200.88995361 -207.03793335]
[212.17773438 -197.11389160]
[221.81823730 -185.58302307]
[229.58547974 -172.71560669]
[235.29739380 -158.81327820]
[238.82006836 -144.20195007]
[240.07093811 -129.22410583]
[239.02069092 -114.23086548]
[235.69392395 -99.57367706]
[230.16864014 -85.59613800]
[222.57434082 -72.62589264]
[213.08906555 -60.96699524]
[201.93516541 -50.89273453]
[189.37408447 -42.63927078]
[175.70027161 -36.40007401]
[161.23428345 -32.32140732]
[146.31521606 -30.49887276]
[131.29277039 -30.97519493]
[128.53652954 -16.23059845]
[133.80346680 -2.29830790]
[123.66212463 9.84516525]
[120.90588379 24.58976173]
[118.14964294 39.33435822]
[115.39340210 54.07895279]
[112.63715363 68.82354736]
[109.88091278 83.56814575]
[115.04502869 89.91167450]
[116.85813141 97.41834259]
[115.34189606 104.52415466]
[111.17438507 109.90961456]
[105.48764038 112.74458313]
[107.63622284 127.58990479]
[109.78479767 142.43522644]
[111.93338013 157.28054810]
[114.08195496 172.12586975]
[116.23053741 186.97119141]
[125.86476898 199.52078247]
[120.03028870 213.22509766]
[122.17887115 228.07041931]
[126.02139282 233.57292175]
[126.40299225 239.32116699]
[124.09788513 243.56800842]
[125.63517761 258.48901367]
[127.17247009 273.41003418]
[129.93702698 276.93948364]
[131.26139832 280.78259277]
[131.22814941 284.43576050]
[130.07873535 287.47683716]
[128.17170715 289.61090088]
[128.47969055 304.60775757]
[128.78765869 319.60458374]
[129.09564209 334.60140991]
[129.40362549 349.59826660]
[129.71159363 364.59509277]
[130.01957703 379.59194946]
[130.32754517 394.58877563]
[130.63552856 409.58560181]
[145.34556580 412.88385010]
[158.83851624 419.60717773]
[170.32994080 429.36477661]
[179.15171814 441.58932495]
[184.79098511 455.57012939]
[186.91986084 470.49429321]
[185.41458130 485.49423218]
[180.36267090 499.69781494]
[172.05783081 512.27923584]
[160.98289490 522.50714111]
[147.78175354 529.78680420]
[133.22189331 533.69494629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 127]
[22 126]
[23 125]
[24 122]
[25 121]
[27 119]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[33 52]
[34 51]
[36 50]
[37 49]
[38 48]
[53 109]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[60 102]
[61 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
