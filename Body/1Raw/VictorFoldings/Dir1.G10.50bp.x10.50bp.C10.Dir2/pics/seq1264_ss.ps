%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAACUCAGGGGGGGGGGCCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCxxxxxxxxxxCACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCCCCCCCCCCCUAAACCUCA\
) } def
/len { sequence length } bind def

/coor [
[59.35209274 402.00421143]
[46.79386902 393.65304565]
[36.70764542 382.44061279]
[29.72745323 369.07168579]
[26.29207039 354.38668823]
[26.61744690 339.30874634]
[30.68313026 324.78561401]
[38.23355103 311.73028564]
[48.79407883 300.96337891]
[61.70087433 293.16174316]
[76.14260101 288.81579590]
[75.51862335 273.82876587]
[74.89464569 258.84176636]
[74.27066803 243.85475159]
[73.64669037 228.86772156]
[73.02271271 213.88070679]
[72.39873505 198.89369202]
[71.77475739 183.90667725]
[71.15078735 168.91966248]
[70.52680969 153.93264771]
[69.90283203 138.94563293]
[57.91599655 129.92810059]
[43.34329224 133.48286438]
[28.77058983 137.03762817]
[14.23565483 140.74378967]
[-0.25994214 144.60095215]
[-14.75553894 148.45809937]
[-29.25113487 152.31526184]
[-36.95916367 166.11242676]
[-52.18818283 170.33766174]
[-65.90308380 162.48419189]
[-69.96706390 147.21134949]
[-61.96902847 133.58024597]
[-46.65407562 129.67796326]
[-33.10829544 137.81967163]
[-18.61269760 133.96250916]
[-4.11710167 130.10534668]
[10.37849522 126.24819183]
[16.07046318 121.45787048]
[25.21582794 122.46492004]
[39.78853226 118.91016388]
[54.36123276 115.35540009]
[55.45254517 100.39514923]
[41.54998779 94.76319122]
[27.64743233 89.13124084]
[10.69695663 88.78818512]
[6.33423996 72.40517426]
[20.86927605 63.67768860]
[33.27938843 75.22868347]
[47.18194580 80.86064148]
[61.08450317 86.49259186]
[83.11746979 68.81740570]
[107.18898773 71.15649414]
[114.37149811 57.98790741]
[121.55400085 44.81932449]
[128.73651123 31.65074348]
[128.26847839 16.65804672]
[120.27855682 3.96311736]
[112.28863525 -8.73181248]
[97.02703857 -13.67784214]
[91.51364136 -28.74376297]
[99.97785187 -42.37229156]
[115.92664337 -44.10878372]
[127.12548065 -32.62115479]
[124.98356628 -16.72172928]
[132.97348022 -4.02679873]
[140.96339417 8.66813087]
[155.94311523 9.44797611]
[165.20806885 -2.34866405]
[151.05815125 2.62929630]
[136.05830383 2.56363177]
[121.95251465 -2.53802252]
[110.38087463 -12.08250141]
[102.68879700 -24.96007729]
[99.77063751 -39.67348480]
[101.96568298 -54.51200867]
[109.01873016 -67.75038147]
[120.10971069 -77.84939575]
[133.94909668 -83.63484955]
[148.92779541 -84.43405914]
[163.30422974 -80.15411377]
[175.40689087 -71.29264069]
[183.82858276 -58.87994385]
[187.59014893 -44.35924530]
[186.25421143 -29.41885376]
[179.97447205 -15.79349232]
[192.58560181 -23.91503525]
[199.99873352 -37.89201736]
[214.88833618 -38.27795029]
[227.49946594 -46.39949417]
[240.11059570 -54.52103424]
[252.72172546 -62.64257812]
[256.22906494 -75.09859467]
[266.95382690 -81.59465790]
[278.83123779 -79.09786987]
[291.60861206 -86.95529175]
[304.38595581 -94.81272125]
[317.16333008 -102.67014313]
[327.48822021 -116.11754608]
[343.26831055 -109.91875458]
[341.68014526 -93.03936005]
[325.02075195 -89.89279175]
[312.24337769 -82.03536224]
[299.46603394 -74.17794037]
[286.68869019 -66.32051086]
[279.22225952 -50.46955490]
[260.84326172 -50.03144836]
[248.23213196 -41.90990829]
[235.62100220 -33.78836441]
[223.00988770 -25.66682434]
[216.49877930 -12.27074623]
[200.70715332 -11.30390644]
[188.09602356 -3.18236446]
[177.00469971 6.91628504]
[167.73976135 18.71292496]
[164.98989868 27.88309860]
[158.89459229 34.92077255]
[150.68823242 38.72916412]
[141.90509033 38.83325195]
[134.72257996 52.00183487]
[127.54007721 65.17041779]
[120.35756683 78.33899689]
[129.65400696 88.97524261]
[133.36520386 103.50009155]
[129.94895935 118.98509979]
[119.38472748 131.94993591]
[103.33036041 139.14041138]
[84.88984680 138.32165527]
[85.51382446 153.30867004]
[86.13780212 168.29568481]
[86.76177979 183.28269958]
[87.38575745 198.26971436]
[88.00973511 213.25672913]
[88.63371277 228.24375916]
[89.25769043 243.23077393]
[89.88166046 258.21777344]
[90.50563812 273.20480347]
[91.12961578 288.19180298]
[105.88262177 291.32226562]
[119.39325714 298.02401733]
[130.81224060 307.87579346]
[139.42175293 320.25833130]
[144.68060303 334.39321899]
[146.25820923 349.39196777]
[144.05540466 364.31170654]
[138.21064758 378.21456909]
[129.09136963 390.22662354]
[117.27080536 399.59277344]
[103.49198914 405.72427368]
[88.62109375 408.23568726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 42]
[23 41]
[24 40]
[25 38]
[26 37]
[27 36]
[28 35]
[43 51]
[44 50]
[45 49]
[53 122]
[54 121]
[55 120]
[56 119]
[57 67]
[58 66]
[59 65]
[68 115]
[69 114]
[86 113]
[87 112]
[89 110]
[90 109]
[91 108]
[92 107]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
