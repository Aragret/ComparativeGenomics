%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUACUCCCGGGGGGGGGGCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCAxxxxxxxxxxACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAACCCCCCCCCCACUCUACUCCC\
) } def
/len { sequence length } bind def

/coor [
[124.84007263 478.20852661]
[110.81813049 472.65551758]
[98.61817169 463.78918457]
[89.00710297 452.16690063]
[82.58907318 438.51919556]
[79.76753998 423.70401001]
[80.71985626 408.65261841]
[85.38616180 394.31118774]
[93.47312927 381.58123779]
[104.47240448 371.26296997]
[117.69255829 364.00500488]
[132.30256653 360.26354980]
[132.30256653 345.26354980]
[132.30256653 330.26354980]
[132.30256653 315.26354980]
[132.30256653 300.26354980]
[132.30256653 285.26354980]
[132.30256653 270.26354980]
[132.30256653 255.26354980]
[132.30256653 240.26354980]
[132.30256653 225.26354980]
[112.25279999 209.90687561]
[109.22600555 187.50408936]
[121.35113525 171.64344788]
[115.64646912 157.77056885]
[109.94181061 143.89768982]
[95.74130249 144.80747986]
[81.96645355 141.23878479]
[69.99404907 133.54830933]
[61.02071381 122.50469971]
[55.94333267 109.21176147]
[55.26939011 94.99811554]
[59.06623840 81.28440094]
[66.95439148 69.44129944]
[57.79245758 57.56447220]
[48.63051987 45.68764877]
[39.46858597 33.81082535]
[25.66611671 40.69866943]
[10.79352379 44.77464676]
[-4.58278656 45.88539124]
[-19.87758636 43.99043655]
[-34.50910187 39.16367340]
[-47.92114258 31.59047508]
[-59.60424042 21.56058693]
[-69.11499786 9.45702839]
[-76.09293365 -4.25852489]
[-80.27412415 -19.06335449]
[-81.50120544 -34.39361954]
[-79.72927856 -49.66583252]
[-75.02754974 -64.29906464]
[-67.57664490 -77.73704529]
[-57.66165543 -89.46929932]
[-67.06551361 -101.15550995]
[-76.46936798 -112.84172058]
[-85.87322998 -124.52793121]
[-101.20208740 -122.78734589]
[-115.02845001 -129.63096619]
[-122.94037628 -142.87501526]
[-122.41320038 -158.29338074]
[-113.61514282 -170.96609497]
[-99.35363007 -176.84934998]
[-84.17945862 -174.06582642]
[-72.93464661 -163.50372314]
[-69.20738220 -148.53338623]
[-74.18701935 -133.93179321]
[-64.78316498 -122.24557495]
[-55.37930298 -110.55937195]
[-45.97544861 -98.87316132]
[-33.09515381 -105.75737762]
[-19.16115189 -110.14584351]
[-4.65228844 -111.88614655]
[9.93253708 -110.91690826]
[24.09152794 -107.26995087]
[37.33725739 -101.06923676]
[49.21344757 -92.52668762]
[59.31068420 -81.93491364]
[67.28053284 -69.65718842]
[72.84756470 -56.11503601]
[75.81887054 -41.77369308]
[76.09075165 -27.12616730]
[73.65232849 -12.67628860]
[68.58597565 1.07864082]
[61.06452942 13.66494465]
[51.34540939 24.64889145]
[60.50734329 36.52571487]
[69.66928101 48.40253830]
[78.83121490 60.27936172]
[95.12775421 55.25508118]
[112.12372589 56.65416336]
[127.37928009 64.27575684]
[138.36007690 54.05704880]
[142.54490662 45.86663055]
[149.67282104 43.74412155]
[160.86112976 33.75302505]
[172.04942322 23.76192856]
[179.83630371 8.70202446]
[196.46328735 12.01560307]
[197.88201904 28.91008568]
[182.04051208 34.95022583]
[170.85221863 44.94132233]
[159.66392517 54.93241882]
[148.57879639 65.03784943]
[137.59799194 75.25656128]
[143.46182251 88.29888916]
[144.93867493 102.52231598]
[141.87945557 116.49114227]
[134.59295654 128.79537964]
[123.81468964 138.19302368]
[129.51934814 152.06590271]
[135.22401428 165.93878174]
[157.60119629 168.59159851]
[172.38558960 190.92253113]
[187.20808411 193.22340393]
[202.03056335 195.52427673]
[216.85304260 197.82514954]
[229.46075439 188.29515076]
[245.10276794 190.55413818]
[254.49894714 203.26191711]
[252.07469177 218.87916565]
[239.26829529 228.14045715]
[223.67755127 225.55123901]
[214.55216980 212.64762878]
[199.72969055 210.34675598]
[184.90719604 208.04588318]
[170.08471680 205.74501038]
[164.38919067 210.62464905]
[178.53646851 215.61007690]
[181.29249573 230.35470581]
[169.90119934 240.11373901]
[155.75402832 235.12800598]
[152.99810791 220.38392639]
[147.30256653 225.26354980]
[147.30256653 240.26354980]
[147.30256653 255.26354980]
[147.30256653 270.26354980]
[147.30256653 285.26354980]
[147.30256653 300.26354980]
[147.30256653 315.26354980]
[147.30256653 330.26354980]
[147.30256653 345.26354980]
[147.30256653 360.26354980]
[161.91258240 364.00500488]
[175.13275146 371.26296997]
[186.13201904 381.58123779]
[194.21897888 394.31118774]
[198.88528442 408.65261841]
[199.83760071 423.70401001]
[197.01606750 438.51919556]
[190.59803772 452.16690063]
[180.98696899 463.78918457]
[168.78701782 472.65551758]
[154.76507568 478.20852661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 110]
[25 109]
[26 108]
[34 87]
[35 86]
[36 85]
[37 84]
[52 68]
[53 67]
[54 66]
[55 65]
[90 103]
[91 102]
[93 101]
[94 100]
[95 99]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
