%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACACCCGGGGGGGGGGACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAAxxxxxxxxxxAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACCCCCCCCCCCACCCACUCCC\
) } def
/len { sequence length } bind def

/coor [
[75.64342499 382.84548950]
[62.42322540 375.57302856]
[51.53642273 365.12600708]
[43.72529221 352.21676636]
[39.52241135 337.72546387]
[39.21434021 322.64010620]
[42.82207870 307.98928833]
[50.09965515 294.77191162]
[60.55086136 283.88912964]
[73.46311951 276.08297729]
[87.95606232 271.88571167]
[87.64400482 256.88894653]
[87.33194733 241.89219666]
[87.01988983 226.89544678]
[86.70783234 211.89869690]
[86.39577484 196.90193176]
[86.08372498 181.90518188]
[85.77166748 166.90843201]
[85.45960999 151.91168213]
[85.14755249 136.91491699]
[72.53642273 128.79338074]
[58.75404358 134.71334839]
[44.97166061 140.63330078]
[31.18928146 146.55326843]
[26.85484123 161.57814026]
[13.84790134 170.25877380]
[-1.69005978 168.49645996]
[-12.42249203 157.12329102]
[-13.28186893 141.50933838]
[-3.86241961 129.02703857]
[11.38828087 125.57013702]
[25.26931763 132.77088928]
[39.05170059 126.85092926]
[52.83407974 120.93096161]
[66.61646271 115.01100159]
[66.26994324 92.13928223]
[79.19994354 74.81392670]
[98.80985260 69.32765198]
[101.90818024 54.65112686]
[105.00650024 39.97460175]
[108.10482025 25.29807472]
[110.89714813 10.56026840]
[113.38226318 -4.23243856]
[115.86737823 -19.02514648]
[102.07239532 -13.35260487]
[85.47495270 -14.37044048]
[72.38180542 -21.68954659]
[59.28864670 -29.00865173]
[42.51277924 -31.45949364]
[40.22381973 -48.25821304]
[55.73239136 -55.10807037]
[66.60774994 -42.10180664]
[79.70090485 -34.78269958]
[92.79405975 -27.46359444]
[99.90744781 -29.84050179]
[114.13423157 -34.59431839]
[121.24761963 -36.97122574]
[127.31063080 -50.69127655]
[133.37364197 -64.41133118]
[132.79104614 -69.72924042]
[134.20497131 -74.26280212]
[136.96676636 -77.37312317]
[140.26670837 -78.77951050]
[147.17370605 -92.09466553]
[153.94181824 -105.48094940]
[160.57032776 -118.93691254]
[167.19882202 -132.39288330]
[173.82731628 -145.84884644]
[161.61590576 -154.61988831]
[151.01480103 -165.28134155]
[142.31324768 -177.54235840]
[135.74858093 -191.06845093]
[131.49993896 -205.49061584]
[129.68318176 -220.41540527]
[130.34791565 -235.43565369]
[133.47596741 -250.14161682]
[138.98204041 -264.13208008]
[146.71588135 -277.02539062]
[156.46653748 -288.46981812]
[167.96800232 -298.15310669]
[180.90647888 -305.81112671]
[194.92903137 -311.23495483]
[209.65309143 -314.27664185]
[224.67698669 -314.85317993]
[239.59086609 -312.94885254]
[253.98783875 -308.61560059]
[267.47515869 -301.97164917]
[279.68487549 -293.19827271]
[290.28393555 -282.53475952]
[298.98312378 -270.27206421]
[305.54516602 -256.74472046]
[309.79104614 -242.32173157]
[311.60491943 -227.39659119]
[310.93728638 -212.37648010]
[307.80639648 -197.67112732]
[302.29763794 -183.68171692]
[294.56130981 -170.78990173]
[284.80847168 -159.34736633]
[273.30514526 -149.66627502]
[260.36517334 -142.01074219]
[246.34158325 -136.58961487]
[231.61692810 -133.55076599]
[216.59292603 -132.97712708]
[201.67942810 -134.88432312]
[187.28327942 -139.22035217]
[180.65478516 -125.76438141]
[174.02629089 -112.30841827]
[167.39778137 -98.85244751]
[167.26248169 -91.41421509]
[160.48886108 -85.18766785]
[153.58186340 -71.87250519]
[147.09370422 -58.34832001]
[141.03068542 -44.62826538]
[134.96766663 -30.90821075]
[130.66009521 -16.54002762]
[128.17497253 -1.74732018]
[125.68984985 13.04538727]
[127.72144318 17.43265915]
[126.97263336 23.14847755]
[122.78134918 28.39639664]
[119.68302155 43.07292175]
[116.58470154 57.74944687]
[113.48638153 72.42597198]
[123.44638062 78.90496826]
[130.42663574 88.91391754]
[133.20828247 101.12441254]
[131.15028381 113.80258942]
[124.31690216 125.05516815]
[113.50238037 133.11201477]
[100.14431000 136.60287476]
[100.45635986 151.59962463]
[100.76841736 166.59637451]
[101.08047485 181.59312439]
[101.39253235 196.58988953]
[101.70458984 211.58663940]
[102.01664734 226.58338928]
[102.32869720 241.58013916]
[102.64075470 256.57690430]
[102.95281219 271.57363892]
[117.60780334 275.16442871]
[130.83361816 282.42666626]
[141.72848511 292.86526489]
[149.54957581 305.76849365]
[153.76365662 320.25656128]
[154.08337402 335.34164429]
[150.48693848 349.99523926]
[143.21957397 363.21826172]
[132.77677917 374.10910034]
[119.87055206 381.92520142]
[105.38085938 386.13366699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 35]
[22 34]
[23 33]
[24 32]
[38 123]
[39 122]
[40 121]
[41 120]
[42 117]
[43 116]
[44 115]
[46 54]
[47 53]
[48 52]
[57 114]
[58 113]
[59 112]
[63 111]
[64 110]
[65 108]
[66 107]
[67 106]
[68 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
