%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCACCUUGGGGGGGGGGGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCAxxxxxxxxxxCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUCCCCCCCCCCUCCCCACCCU\
) } def
/len { sequence length } bind def

/coor [
[65.84619904 377.90078735]
[52.00025940 371.88476562]
[40.29159927 362.35534668]
[31.58907318 350.01968384]
[26.53847122 335.79315186]
[25.51457977 320.73147583]
[28.59337997 305.95233154]
[35.54640198 292.55239868]
[45.85768509 281.52606201]
[58.76206589 273.69155884]
[73.30195618 269.63024902]
[73.30195618 254.63023376]
[73.30195618 239.63023376]
[73.30195618 224.63023376]
[73.30195618 209.63023376]
[73.30195618 194.63023376]
[73.30195618 179.63023376]
[73.30195618 164.63023376]
[73.30195618 149.63023376]
[73.30195618 134.63023376]
[73.30195618 119.63024139]
[67.38198853 105.84785461]
[56.50316620 95.52065277]
[45.62434006 85.19345093]
[34.74551392 74.86624146]
[23.86668968 64.53903961]
[9.41200066 60.53129959]
[-5.23150063 63.78212357]
[-19.87500191 67.03295135]
[-34.51850510 70.28377533]
[-46.23377228 81.75916290]
[-61.95450211 77.09111023]
[-65.50855255 61.08171844]
[-53.23982239 50.20006943]
[-37.76932907 55.64027405]
[-23.12582779 52.38945007]
[-8.48232651 49.13862228]
[6.16117525 45.88779831]
[11.93744755 32.04457855]
[3.94753122 19.34964943]
[-4.04238510 6.65471983]
[-12.03230095 -6.04020977]
[-25.77389336 -1.07757509]
[-40.24289703 0.90467060]
[-54.80073929 -0.17839296]
[-68.80545807 -4.27645826]
[-81.64001465 -11.20631981]
[-92.73948669 -20.66006470]
[-101.61590576 -32.21875381]
[-107.87976074 -45.37097931]
[-111.25704193 -59.53550720]
[-111.60124207 -74.08693695]
[-108.89971924 -88.38335419]
[-103.27413940 -101.79460144]
[-94.97499084 -113.73010254]
[-84.37043762 -123.66481018]
[-92.09452057 -136.52320862]
[-99.81860352 -149.38162231]
[-107.54269409 -162.24002075]
[-115.26677704 -175.09841919]
[-129.86344910 -182.57299805]
[-130.41825867 -198.96275330]
[-116.36046600 -207.40731812]
[-102.15152740 -199.21963501]
[-102.40837097 -182.82250977]
[-94.68428802 -169.96409607]
[-86.96020508 -157.10569763]
[-79.23612213 -144.24729919]
[-71.51203156 -131.38890076]
[-56.88323593 -136.27915955]
[-41.52763748 -137.80766296]
[-26.20808411 -135.89540100]
[-11.68632984 -130.63433838]
[1.31486011 -122.28305054]
[12.14767456 -111.25399780]
[20.27153587 -98.09316254]
[25.28007317 -83.45299530]
[26.92145157 -68.06010437]
[25.11103630 -52.67918396]
[19.93574333 -38.07500076]
[11.64987469 -24.97440529]
[0.66262835 -14.03012562]
[8.65254498 -1.33519626]
[16.64246178 11.35973358]
[24.63237762 24.05466270]
[34.19389343 53.66021347]
[45.07271957 63.98741913]
[55.95154572 74.31462097]
[66.83036804 84.64183044]
[77.70919800 94.96903229]
[85.21839142 84.02772522]
[97.02131653 79.54206085]
[108.65128326 82.42964935]
[116.13175964 90.95227051]
[131.06607056 89.54996490]
[146.00038147 88.14765930]
[147.63378906 73.18380737]
[152.24629211 58.85517502]
[159.64900208 45.74851227]
[169.53880310 34.40052414]
[181.51069641 25.27590942]
[195.07444763 18.74831200]
[209.67463684 15.08503246]
[224.71337891 14.43608189]
[239.57484436 16.82803345]
[253.65048218 22.16293716]
[266.36392212 30.22233391]
[277.19448853 40.67619705]
[285.69876099 53.09644318]
[291.52841187 66.97447968]
[294.44479370 81.74199677]
[294.32846069 96.79428101]
[291.18414307 111.51495361]
[285.14062500 125.30120850]
[276.44540405 137.58851624]
[265.45449829 147.87370300]
[252.61801147 155.73559570]
[238.46157837 160.85227966]
[223.56491089 163.01420593]
[208.53799438 162.13285828]
[193.99618530 158.24432373]
[180.53495789 151.50782776]
[168.70555115 142.19923401]
[158.99235535 130.69972229]
[151.79313660 117.48018646]
[147.40267944 103.08197021]
[132.46836853 104.48426819]
[117.53406525 105.88657379]
[107.18095398 119.38643646]
[88.30195618 119.63024139]
[88.30195618 134.63023376]
[88.30195618 149.63023376]
[88.30195618 164.63023376]
[88.30195618 179.63023376]
[88.30195618 194.63023376]
[88.30195618 209.63023376]
[88.30195618 224.63023376]
[88.30195618 239.63023376]
[88.30195618 254.63023376]
[88.30195618 269.63024902]
[102.84184265 273.69155884]
[115.74622345 281.52606201]
[126.05750275 292.55239868]
[133.01052856 305.95233154]
[136.08932495 320.73147583]
[135.06542969 335.79315186]
[130.01483154 350.01968384]
[121.31230927 362.35534668]
[109.60364532 371.88476562]
[95.75770569 377.90078735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 38]
[28 37]
[29 36]
[30 35]
[39 85]
[40 84]
[41 83]
[42 82]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[94 128]
[95 127]
[96 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
