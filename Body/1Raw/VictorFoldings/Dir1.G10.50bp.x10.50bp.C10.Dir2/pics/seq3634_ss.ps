%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCCCCUGGGGGGGGGGGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGxxxxxxxxxxUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCCCCCCCCCCCGACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.42929077]
[71.19830322 349.41326904]
[59.48964310 339.88385010]
[50.78712082 327.54818726]
[45.73651886 313.32165527]
[44.71262741 298.25997925]
[47.79142761 283.48080444]
[54.74444962 270.08090210]
[65.05573273 259.05456543]
[77.96011353 251.22004700]
[92.50000000 247.15873718]
[92.50000000 232.15873718]
[92.50000000 217.15873718]
[92.50000000 202.15873718]
[92.50000000 187.15873718]
[92.50000000 172.15873718]
[92.50000000 157.15873718]
[92.50000000 142.15873718]
[92.50000000 127.15873718]
[92.50000000 112.15873718]
[79.88887024 104.03719330]
[66.23262787 110.24259949]
[52.57638931 116.44800568]
[49.59813690 131.67658997]
[38.21464157 142.22151184]
[22.80308533 144.02806091]
[9.28952980 136.40156555]
[2.87021232 122.27457428]
[6.01349020 107.07920074]
[17.51070976 96.65837097]
[32.94095612 95.01911926]
[46.37098312 102.79176331]
[60.02722549 96.58635712]
[73.68346405 90.38095093]
[85.86569214 88.42699432]
[95.55564117 92.73541260]
[100.16120911 78.45995331]
[104.76676941 64.18449402]
[90.83740234 58.60297012]
[77.32630157 52.07373810]
[64.29785919 44.62791443]
[51.81415558 36.30098343]
[39.93468475 27.13262367]
[28.71605682 17.16652679]
[18.21173668 6.45018816]
[8.47177982 -4.96532440]
[-0.45739487 -17.02560997]
[-8.53323746 -29.67319679]
[-15.71726131 -42.84781265]
[-21.97523308 -56.48667145]
[-27.27732849 -70.52478027]
[-31.59827995 -84.89523315]
[-34.91749954 -99.52955627]
[-37.21916199 -114.35800934]
[-38.49230957 -129.30992126]
[-38.73086548 -144.31405640]
[-37.93369675 -159.29888916]
[-36.10460663 -174.19300842]
[-33.25230408 -188.92546082]
[-29.39038277 -203.42602539]
[-24.53725052 -217.62559509]
[-18.71603394 -231.45649719]
[-11.95447254 -244.85284424]
[-4.28479004 -257.75076294]
[4.25646544 -270.08883667]
[13.62858868 -281.80822754]
[23.78691864 -292.85308838]
[34.68304443 -303.17077637]
[46.26504135 -312.71215820]
[58.47771454 -321.43176270]
[71.26286316 -329.28799438]
[84.55957031 -336.24346924]
[98.30445099 -342.26498413]
[112.43202209 -347.32388306]
[126.87494659 -351.39605713]
[141.56440735 -354.46206665]
[156.43038940 -356.50735474]
[171.40206909 -357.52212524]
[186.40806580 -357.50155640]
[201.37690735 -356.44573975]
[216.23722839 -354.35974121]
[230.91822815 -351.25347900]
[245.34994507 -347.14175415]
[259.46359253 -342.04412842]
[273.19192505 -335.98495483]
[286.46951294 -328.99307251]
[299.23309326 -321.10183716]
[311.42181396 -312.34878540]
[322.97760010 -302.77569580]
[333.84542847 -292.42816162]
[343.97344971 -281.35549927]
[353.31341553 -269.61047363]
[361.82080078 -257.24905396]
[369.45510864 -244.33015442]
[376.17993164 -230.91532898]
[381.96322632 -217.06852722]
[386.77740479 -202.85569763]
[390.59957886 -188.34461975]
[393.41149902 -173.60440063]
[395.19976807 -158.70532227]
[395.95584106 -143.71835327]
[395.67617798 -128.71493530]
[394.36206055 -113.76657104]
[392.01974487 -98.94448090]
[388.66043091 -84.31931305]
[384.30010986 -69.96074677]
[378.95956421 -55.93722534]
[372.66424561 -42.31557083]
[365.44412231 -29.16069603]
[357.33364868 -16.53529167]
[348.37145996 -4.49952412]
[338.60025024 6.88925028]
[328.06658936 17.57675934]
[316.82070923 27.51206970]
[304.91613770 36.64783478]
[292.40966797 44.94052124]
[279.36083984 52.35060883]
[265.83190918 58.84278107]
[251.88729858 64.38610840]
[237.59347534 68.95416260]
[223.01853943 72.52517700]
[208.23197937 75.08214569]
[193.30422974 76.61286926]
[178.30644226 77.11006165]
[163.31010437 76.57135010]
[148.38664246 74.99930573]
[133.60722351 72.40141296]
[119.04223633 68.79005432]
[114.43666840 83.06551361]
[109.83110046 97.34097290]
[107.50000000 112.15873718]
[107.50000000 127.15873718]
[107.50000000 142.15873718]
[107.50000000 157.15873718]
[107.50000000 172.15873718]
[107.50000000 187.15873718]
[107.50000000 202.15873718]
[107.50000000 217.15873718]
[107.50000000 232.15873718]
[107.50000000 247.15873718]
[122.03988647 251.22004700]
[134.94427490 259.05456543]
[145.25555420 270.08090210]
[152.20857239 283.48080444]
[155.28736877 298.25997925]
[154.26348877 313.32165527]
[149.21287537 327.54818726]
[140.51036072 339.88385010]
[128.80169678 349.41326904]
[114.95575714 355.42929077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 34]
[22 33]
[23 32]
[36 130]
[37 129]
[38 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
