%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAACCCCGGGGGGGGGGAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACxxxxxxxxxxUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUCCCCCCCCCCAGCCUACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 429.69900513]
[71.19830322 423.68298340]
[59.48964310 414.15356445]
[50.78712082 401.81790161]
[45.73651886 387.59136963]
[44.71262741 372.52969360]
[47.79142761 357.75054932]
[54.74444962 344.35061646]
[65.05573273 333.32427979]
[77.96011353 325.48977661]
[92.50000000 321.42846680]
[92.50000000 306.42846680]
[92.50000000 291.42846680]
[92.50000000 276.42846680]
[92.50000000 261.42846680]
[92.50000000 246.42846680]
[92.50000000 231.42846680]
[92.50000000 216.42846680]
[92.50000000 201.42846680]
[92.50000000 186.42846680]
[92.50000000 171.42846680]
[92.50000000 156.42846680]
[92.50000000 141.42846680]
[78.63835907 136.28013611]
[67.41172791 126.65655518]
[60.20494080 113.74483490]
[57.90696335 99.13765717]
[60.80126190 84.63684845]
[68.53082275 72.03112030]
[80.14217377 62.87542343]
[75.53660583 48.59996414]
[70.93104553 34.32450485]
[66.32547760 20.04904366]
[54.62585449 10.66188145]
[39.69154739 9.25957775]
[24.75724030 7.85727406]
[9.82293320 6.45497036]
[-5.11137438 5.05266666]
[-21.44639206 9.59177494]
[-30.33009338 -4.84831476]
[-18.91358185 -17.38225174]
[-3.70907068 -9.88164139]
[11.22523689 -8.47933769]
[26.15954399 -7.07703400]
[41.09385300 -5.67473030]
[56.02816010 -4.27242661]
[65.89388275 -15.57143116]
[62.49090576 -30.18032455]
[59.08792877 -44.78921509]
[55.68494797 -59.39810944]
[52.28197098 -74.00700378]
[48.87899399 -88.61589050]
[38.21265411 -100.30091858]
[42.86083984 -114.45166779]
[39.66876602 -117.60953522]
[37.86975098 -121.26119232]
[37.44507217 -124.89458466]
[38.20730209 -128.05891418]
[39.83620071 -130.41561890]
[37.65936661 -145.25682068]
[35.48252869 -160.09802246]
[33.30569077 -174.93922424]
[18.36522484 -177.23573303]
[4.76615524 -183.83547974]
[-6.28230047 -194.15162659]
[-13.79771996 -207.26689148]
[-17.11183739 -222.01504517]
[-15.92996407 -237.08470154]
[-10.35719013 -251.13587952]
[-0.88904464 -262.91915894]
[11.63257217 -271.38677979]
[26.09424782 -275.78579712]
[41.21005630 -275.72506714]
[55.63591766 -271.20996094]
[68.08908081 -262.64199829]
[77.46223450 -250.78302002]
[82.92191315 -236.68751526]
[83.98265076 -221.60884094]
[80.55013275 -206.88780212]
[72.92955780 -193.83335876]
[61.79856110 -183.60632324]
[48.14689636 -177.11607361]
[50.32373428 -162.27485657]
[52.50057220 -147.43365479]
[54.67740631 -132.59245300]
[57.46973038 -117.85464478]
[67.89266968 -107.21454620]
[63.48788452 -92.01887512]
[66.89086151 -77.40998077]
[70.29383850 -62.80108643]
[73.69682312 -48.19219589]
[77.09980011 -33.58330154]
[80.50277710 -18.97440910]
[91.88887024 -28.73949623]
[106.58103180 -31.76278305]
[120.89761353 -27.28667450]
[131.25106812 -16.43282509]
[135.04695129 -1.92106152]
[131.33406067 12.61215973]
[121.04281616 23.52500725]
[106.75205994 28.08286858]
[92.04285431 25.14360428]
[80.60093689 15.44347858]
[85.20650482 29.71893883]
[89.81207275 43.99440002]
[94.41763306 58.26985931]
[116.10714722 61.10106659]
[133.44903564 74.43185425]
[141.76235962 94.66399384]
[156.74206543 95.44384003]
[171.72178650 96.22368622]
[183.29374695 85.45960999]
[199.08447266 86.11435699]
[209.72558594 97.79947662]
[208.90393066 113.58238983]
[197.10696411 124.09938049]
[181.33361816 123.11090088]
[170.94194031 111.20339966]
[155.96221924 110.42355347]
[140.98251343 109.64370728]
[139.15785217 115.46707153]
[136.51049805 120.96547699]
[133.09606934 126.02340698]
[128.98631287 130.53459167]
[124.26755524 134.40426636]
[119.03895569 137.55110168]
[113.41034698 139.90902710]
[107.50000000 141.42846680]
[107.50000000 156.42846680]
[107.50000000 171.42846680]
[107.50000000 186.42846680]
[107.50000000 201.42846680]
[107.50000000 216.42846680]
[107.50000000 231.42846680]
[107.50000000 246.42846680]
[107.50000000 261.42846680]
[107.50000000 276.42846680]
[107.50000000 291.42846680]
[107.50000000 306.42846680]
[107.50000000 321.42846680]
[122.03988647 325.48977661]
[134.94427490 333.32427979]
[145.25555420 344.35061646]
[152.20857239 357.75054932]
[155.28736877 372.52969360]
[154.26348877 387.59136963]
[149.21287537 401.81790161]
[140.51036072 414.15356445]
[128.80169678 423.68298340]
[114.95575714 429.69900513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[30 106]
[31 105]
[32 104]
[33 103]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[47 93]
[48 92]
[49 91]
[50 90]
[51 89]
[52 88]
[54 86]
[59 85]
[60 84]
[61 83]
[62 82]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
