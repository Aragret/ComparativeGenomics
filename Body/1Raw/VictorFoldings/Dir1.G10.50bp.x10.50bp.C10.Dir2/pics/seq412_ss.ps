%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAAAACAGGGGGGGGGGAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGxxxxxxxxxxAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCCCCCCCCCCCACAAACA\
) } def
/len { sequence length } bind def

/coor [
[67.70813751 373.84274292]
[53.86219788 367.82669067]
[42.15353394 358.29727173]
[33.45101166 345.96160889]
[28.40040779 331.73510742]
[27.37651634 316.67340088]
[30.45531654 301.89425659]
[37.40833664 288.49432373]
[47.71962357 277.46798706]
[60.62400436 269.63348389]
[75.16388702 265.57217407]
[75.16388702 250.57217407]
[75.16388702 235.57217407]
[75.16388702 220.57217407]
[75.16388702 205.57217407]
[75.16388702 190.57217407]
[75.16388702 175.57217407]
[75.16388702 160.57217407]
[75.16388702 145.57217407]
[75.16388702 130.57217407]
[65.53536224 119.07037354]
[50.76931000 116.43150330]
[36.00325394 113.79264069]
[21.23719788 111.15377808]
[16.13107491 125.29717255]
[8.70800877 138.37409973]
[-0.81842786 150.00831604]
[-12.17413902 159.86508179]
[-25.03239822 167.66079712]
[-39.02324677 173.17117310]
[-53.74414062 176.23764038]
[-68.77153015 176.77198792]
[-83.67304993 174.75885010]
[-98.01995087 170.25613403]
[-111.39944458 163.39340210]
[-123.42657471 154.36810303]
[-133.75529480 143.43989563]
[-142.08843994 130.92324829]
[-148.18623352 117.17824554]
[-151.87324524 102.60038757]
[-153.04336548 87.60909271]
[-151.66296387 72.63570404]
[-147.77172852 58.11102295]
[-141.48162842 44.45296097]
[-132.97363281 32.05448532]
[-122.49256134 21.27232552]
[-110.33995056 12.41670609]
[-96.86545563 5.74241972]
[-82.45677185 1.44149983]
[-67.52847290 -0.36230767]
[-52.51005936 0.38289624]
[-37.83364868 3.65567064]
[-23.92151451 9.36185074]
[-11.17393112 17.33725929]
[0.04232560 27.35242844]
[9.40454197 39.11919785]
[16.64334869 52.29901886]
[21.55047226 66.51268005]
[23.98472214 81.35122681]
[23.87606239 96.38772583]
[38.64211655 99.02658844]
[53.40817261 101.66545105]
[68.17422485 104.30431366]
[72.18653107 81.53391266]
[90.95155334 66.54682159]
[91.57553101 51.55980682]
[92.19950867 36.57279205]
[92.82348633 21.58577538]
[78.79785156 15.83622932]
[67.58660889 5.63407707]
[60.54357910 -7.78872204]
[58.51924133 -22.81130028]
[61.75804138 -37.61960983]
[69.86888123 -50.42546844]
[81.87232971 -59.68251801]
[96.31892395 -64.27291107]
[111.46416473 -63.64234924]
[125.47917938 -57.86696625]
[136.67160034 -47.64416885]
[143.68988037 -34.20841599]
[145.68653870 -19.18213081]
[142.42045593 -4.37981701]
[134.28602600 8.41107655]
[122.26553345 17.64598656]
[107.81050110 22.20975113]
[107.18652344 37.19676971]
[106.56254578 52.18378448]
[105.93856812 67.17079926]
[119.72095490 73.09076691]
[130.16076660 62.31995392]
[140.60057068 51.54914474]
[141.78895569 35.55016708]
[155.11911011 26.62344170]
[170.36529541 31.61678886]
[175.83193970 46.69974136]
[167.32550049 60.30194473]
[151.37138367 61.98896027]
[140.93157959 72.75976562]
[130.49176025 83.53057861]
[128.91346741 89.06856537]
[126.46534729 93.86763000]
[141.44505310 94.64747620]
[156.42477417 95.42732239]
[171.40449524 96.20716858]
[186.39151001 96.83114624]
[201.38420105 97.29918671]
[216.37689209 97.76722717]
[222.96412659 84.03666687]
[234.57077026 74.17738342]
[249.18594360 69.89756012]
[264.27743530 71.93870544]
[277.23059082 79.94718170]
[285.80120850 92.53546143]
[288.50430298 107.52256012]
[284.87164307 122.31185913]
[275.53253174 134.34103394]
[262.10507202 141.52595520]
[246.91563416 142.62179565]
[232.59588623 137.43869019]
[221.62680054 126.87463379]
[215.90885925 112.75992584]
[200.91615295 112.29188538]
[185.92346191 111.82383728]
[179.09559631 114.77780914]
[170.62464905 111.18688202]
[155.64492798 110.40703583]
[140.66522217 109.62718964]
[125.68550110 108.84734344]
[119.05056000 121.62057495]
[106.21701050 129.82478333]
[90.16388702 130.57217407]
[90.16388702 145.57217407]
[90.16388702 160.57217407]
[90.16388702 175.57217407]
[90.16388702 190.57217407]
[90.16388702 205.57217407]
[90.16388702 220.57217407]
[90.16388702 235.57217407]
[90.16388702 250.57217407]
[90.16388702 265.57217407]
[104.70377350 269.63348389]
[117.60815430 277.46798706]
[127.91944122 288.49432373]
[134.87246704 301.89425659]
[137.95126343 316.67340088]
[136.92736816 331.73510742]
[131.87677002 345.96160889]
[123.17424774 358.29727173]
[111.46558380 367.82669067]
[97.61964417 373.84274292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 63]
[22 62]
[23 61]
[24 60]
[65 88]
[66 87]
[67 86]
[68 85]
[89 99]
[90 98]
[91 97]
[101 128]
[102 127]
[103 126]
[104 125]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
