%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUCUUCGGGGGGGGGGGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCxxxxxxxxxxGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCCCCCCCCCCCUGCCUCUUC\
) } def
/len { sequence length } bind def

/coor [
[78.03571320 395.26885986]
[63.54602432 391.06039429]
[50.63979340 383.24426270]
[40.19699478 372.35342407]
[32.92963028 359.13043213]
[29.33320427 344.47683716]
[29.65292549 329.39172363]
[33.86699677 314.90365601]
[41.68809128 302.00045776]
[52.58296204 291.56185913]
[65.80876923 284.29959106]
[80.46376038 280.70883179]
[80.77581787 265.71206665]
[81.08787537 250.71533203]
[81.39993286 235.71856689]
[81.71199036 220.72181702]
[82.02404022 205.72506714]
[82.33609772 190.72831726]
[82.64815521 175.73155212]
[82.96021271 160.73480225]
[83.27227020 145.73805237]
[83.58432770 130.74130249]
[72.18330383 120.99364471]
[57.41724777 123.63250732]
[42.65119171 126.27136993]
[27.88513565 128.91023254]
[15.66137505 138.95465088]
[1.77142227 133.57705688]
[-12.99463367 136.21592712]
[-19.64318466 150.23649597]
[-33.27915955 157.64189148]
[-48.65924835 155.58456421]
[-59.86949158 144.85563660]
[-62.59931946 129.58056641]
[-55.79906464 115.63294983]
[-42.08355713 108.37591553]
[-26.72669220 110.59995270]
[-15.63349724 121.44986725]
[-0.86744201 118.81100464]
[10.30015278 108.95533752]
[25.24627304 114.14418030]
[40.01232910 111.50531769]
[54.77838516 108.86645508]
[69.54444122 106.22759247]
[72.23038483 98.59280396]
[76.59219360 92.68308258]
[64.32982635 84.04396057]
[52.06745529 75.40484619]
[37.42526245 80.54156494]
[22.56988716 76.05854797]
[13.21352291 63.67961121]
[12.95388222 48.16470718]
[21.89080429 35.47963333]
[36.58785629 30.50205994]
[51.39372635 35.14596558]
[60.61525345 47.62567139]
[60.70656967 63.14247894]
[72.96894073 71.78159332]
[85.23130798 80.42070770]
[93.60131836 76.32469940]
[102.89512634 75.64674377]
[111.77095032 78.48471069]
[122.64978027 68.15750885]
[133.52859497 57.83030319]
[144.40742493 47.50309753]
[155.28625488 37.17589569]
[148.61943054 3.11714745]
[179.03523254 -24.42563438]
[179.03523254 -39.42563248]
[179.03523254 -54.42563248]
[165.69409180 -62.03548813]
[157.95912170 -75.30446625]
[157.91098022 -90.66328430]
[165.56262207 -103.98049164]
[178.85577393 -111.67383575]
[194.21467590 -111.67383575]
[207.50782776 -103.98049164]
[215.15946960 -90.66328430]
[215.11132812 -75.30446625]
[207.37635803 -62.03548813]
[194.03523254 -54.42563248]
[194.03523254 -39.42563248]
[194.03523254 -24.42563438]
[207.99562073 -18.93860245]
[218.20909119 -29.92426682]
[228.42257690 -40.90993118]
[238.63604736 -51.89559555]
[233.02593994 -66.09029388]
[234.13882446 -81.31278229]
[241.75372314 -94.54063416]
[254.35871887 -103.14744568]
[269.45104980 -105.42432404]
[284.03414917 -100.91919708]
[295.21249390 -90.52655792]
[300.76666260 -76.30987549]
[299.59387207 -61.09188461]
[291.92691040 -47.89412689]
[279.28814697 -39.33702469]
[264.18695068 -37.11959839]
[249.62171936 -41.68211746]
[239.40823364 -30.69645119]
[229.19476318 -19.71078682]
[218.98127747 -8.72512245]
[226.16378784 4.44345999]
[240.92984009 1.80459583]
[255.69589233 -0.83426845]
[270.46194458 -3.47313261]
[284.99035645 -12.21165943]
[297.40924072 -0.67009795]
[289.75662231 14.45847416]
[273.10083008 11.29292297]
[258.33477783 13.93178749]
[243.56871033 16.57065201]
[228.80265808 19.20951653]
[226.79292297 28.90349388]
[222.81080627 37.65149689]
[217.16706848 45.07276917]
[210.24095154 50.87516022]
[202.45686340 54.86613846]
[194.25961304 56.95795059]
[186.08972168 57.16692734]
[178.36006165 55.60720062]
[171.43505859 52.47932053]
[165.61346436 48.05471802]
[154.73463440 58.38192368]
[143.85580444 68.70912933]
[132.97698975 79.03633118]
[122.09815979 89.36354065]
[123.19799042 115.32921600]
[98.58107758 131.05335999]
[98.26902008 146.05010986]
[97.95696259 161.04685974]
[97.64491272 176.04360962]
[97.33285522 191.04037476]
[97.02079773 206.03712463]
[96.70874023 221.03387451]
[96.39668274 236.03062439]
[96.08462524 251.02738953]
[95.77257538 266.02413940]
[95.46051788 281.02090454]
[109.95345306 285.21817017]
[122.86571503 293.02432251]
[133.31692505 303.90710449]
[140.59449768 317.12448120]
[144.20223999 331.77529907]
[143.89416504 346.86065674]
[139.69128418 361.35195923]
[131.88015747 374.26119995]
[120.99334717 384.70822144]
[107.77314758 391.98068237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 38]
[46 59]
[47 58]
[48 57]
[62 128]
[63 127]
[64 126]
[65 125]
[66 124]
[68 83]
[69 82]
[70 81]
[84 103]
[85 102]
[86 101]
[87 100]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
