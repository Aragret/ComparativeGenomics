%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACUGCAGGGGGGGGGGGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACxxxxxxxxxxUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCCCCCCCCCCCAUUCCUGCA\
) } def
/len { sequence length } bind def

/coor [
[72.29483032 415.13317871]
[57.42393112 412.62179565]
[43.64512253 406.49029541]
[31.82455063 397.12414551]
[22.70527077 385.11209106]
[16.86052322 371.20922852]
[14.65771866 356.28948975]
[16.23532486 341.29074097]
[21.49417305 327.15585327]
[30.10368538 314.77331543]
[41.52266312 304.92153931]
[55.03330231 298.21978760]
[69.78630829 295.08932495]
[70.41028595 280.10232544]
[71.03426361 265.11529541]
[71.65824127 250.12828064]
[72.28221130 235.14126587]
[72.90618896 220.15425110]
[73.53016663 205.16723633]
[74.15414429 190.18022156]
[74.77812195 175.19320679]
[75.40209961 160.20619202]
[76.02607727 145.21917725]
[63.94609070 136.32682800]
[49.82128906 141.37557983]
[45.58746719 156.30389404]
[33.36682129 165.86607361]
[17.85843468 166.38528442]
[5.02559948 157.66186523]
[-0.19719598 143.05015564]
[4.19831896 128.16865540]
[16.52197838 118.73960114]
[32.03508377 118.38866425]
[44.77253342 127.25077820]
[58.89733505 122.20201874]
[55.03850555 110.43746185]
[54.43631744 98.21968842]
[57.05528641 86.42295074]
[62.63220596 75.87070465]
[70.70030975 67.27818298]
[80.62744904 61.20396805]
[91.66516113 58.01403809]
[103.00491333 57.86037445]
[106.71107483 43.32543945]
[110.41723633 28.79050255]
[114.12339783 14.25556660]
[106.31736755 0.77581853]
[110.28299713 -13.91187763]
[123.18198395 -21.27066612]
[117.77281189 -38.84111786]
[130.44041443 -50.94614029]
[133.84339905 -65.55503082]
[137.24638367 -80.16392517]
[120.26992798 -97.90373230]
[121.35647583 -123.90367126]
[141.94706726 -142.11949158]
[140.07945251 -157.00276184]
[138.21183777 -171.88604736]
[136.34422302 -186.76933289]
[134.47662354 -201.65260315]
[119.50314331 -203.40145874]
[105.38354492 -208.68353271]
[92.93871307 -217.19174194]
[82.89218140 -228.43144226]
[75.82804108 -241.74914551]
[72.15698242 -256.37060547]
[72.09245300 -271.44570923]
[75.63819122 -286.09805298]
[82.58805084 -299.47576904]
[92.53798676 -310.80105591]
[104.90951538 -319.41549683]
[118.98337555 -324.81826782]
[133.94132996 -326.69525146]
[148.91374207 -324.93731689]
[163.03013611 -319.64669800]
[175.46980286 -311.13092041]
[185.50952148 -299.88516235]
[192.56558228 -286.56317139]
[196.22776794 -271.93948364]
[196.28317261 -256.86434937]
[192.72854614 -242.21414185]
[185.77056885 -228.84065247]
[175.81378174 -217.52140808]
[163.43702698 -208.91445923]
[149.35989380 -203.52021790]
[151.22750854 -188.63693237]
[153.09512329 -173.75366211]
[154.96273804 -158.87037659]
[156.83035278 -143.98710632]
[170.90187073 -138.79168701]
[181.99317932 -148.89033508]
[193.08450317 -158.98898315]
[193.57360840 -174.78570557]
[205.14648438 -185.54878235]
[220.93714905 -184.89270020]
[231.57727051 -173.20668030]
[230.75427246 -157.42382812]
[218.95640564 -146.90785217]
[203.18315125 -147.89767456]
[192.09182739 -137.79901123]
[181.00051880 -127.70037079]
[184.70889282 -118.81669617]
[185.88311768 -109.45288849]
[184.53764343 -100.30360413]
[180.87023926 -92.02095795]
[175.24046326 -85.16807556]
[168.13684082 -80.18091583]
[160.13577271 -77.34104156]
[151.85527039 -76.76094818]
[148.45228577 -62.15205383]
[145.04931641 -47.54316330]
[151.18161011 -37.06927490]
[148.41929626 -24.83863068]
[137.71691895 -17.56450462]
[145.51737976 -4.92771196]
[141.96585083 9.86557579]
[128.65834045 17.96172905]
[124.95217133 32.49666595]
[121.24600983 47.03160095]
[117.53984833 61.56653595]
[128.11425781 67.87016296]
[136.52226257 77.03867340]
[142.00184631 88.35087585]
[144.02531433 100.88748932]
[142.34924316 113.60577393]
[137.04104614 125.42623138]
[128.47956848 135.32426453]
[117.32878113 142.41886902]
[104.48667908 146.05076599]
[91.01309204 145.84315491]
[90.38911438 160.83016968]
[89.76514435 175.81718445]
[89.14116669 190.80419922]
[88.51718903 205.79121399]
[87.89321136 220.77822876]
[87.26923370 235.76524353]
[86.64525604 250.75225830]
[86.02127838 265.73928833]
[85.39730072 280.72628784]
[84.77332306 295.71331787]
[99.21504974 300.05926514]
[112.12184143 307.86090088]
[122.68237305 318.62777710]
[130.23278809 331.68313599]
[134.29847717 346.20626831]
[134.62385559 361.28421021]
[131.18847656 375.96920776]
[124.20827484 389.33810425]
[114.12205505 400.55056763]
[101.56382751 408.90170288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 35]
[25 34]
[43 120]
[44 119]
[45 118]
[46 117]
[49 114]
[51 111]
[52 110]
[53 109]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
