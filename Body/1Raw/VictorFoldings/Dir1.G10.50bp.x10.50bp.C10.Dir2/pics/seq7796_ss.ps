%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAAGCCCCCAUGGGGGGGGGGUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCAxxxxxxxxxxAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGCCCCCCCCCCUCGAAGCCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[106.84757996 390.93429565]
[92.57581329 386.12484741]
[79.67182922 378.35946655]
[68.73917389 368.00131226]
[60.28918839 355.53488159]
[54.71709061 341.54324341]
[52.28350449 326.68081665]
[53.10224533 311.64276123]
[57.13502121 297.13238525]
[64.19321442 283.82839966]
[73.94670105 272.35305786]
[85.93928528 263.24307251]
[99.61006165 256.92453003]
[114.31961823 253.69296265]
[114.31961823 238.69296265]
[114.31961823 223.69296265]
[114.31961823 208.69296265]
[114.31961823 193.69296265]
[114.31961823 178.69296265]
[114.31961823 163.69296265]
[114.31961823 148.69296265]
[114.31961823 133.69296265]
[114.31961823 118.69296265]
[106.08212280 126.78548431]
[93.54524994 130.71643066]
[78.98455048 128.37171936]
[64.61151886 132.66311646]
[50.23849487 136.95451355]
[44.20061874 151.37942505]
[30.27956200 158.50250244]
[15.04841614 154.96043396]
[5.69886589 142.42568970]
[6.64548159 126.81678009]
[17.44130135 115.50376129]
[32.98886871 113.82830048]
[45.94709778 122.58148956]
[60.32012177 118.29009247]
[74.69315338 113.99869537]
[74.99322510 106.50469971]
[60.00524139 105.90431976]
[60.60585022 90.91635132]
[75.59336853 91.51670837]
[75.89344025 84.02271271]
[61.90954590 78.59585571]
[47.92565536 73.16899872]
[33.94176102 67.74214172]
[17.82672119 70.78146362]
[7.34372187 58.17041016]
[13.27677631 42.88214874]
[29.52246666 40.64393616]
[39.36861801 53.75825500]
[53.35251236 59.18510818]
[67.33640289 64.61196136]
[81.32029724 70.03881836]
[94.25617981 67.54911804]
[106.29338837 70.05078125]
[115.70454407 76.51586151]
[121.38940430 85.39624786]
[122.99639130 94.93595123]
[132.66372681 83.46675110]
[142.33106995 71.99755096]
[151.99839783 60.52834702]
[154.97642517 44.98994446]
[169.09504700 40.24510574]
[178.76239014 28.77590561]
[188.42973328 17.30670357]
[195.75576782 4.21743107]
[200.47657776 -10.02033424]
[205.19738770 -24.25809860]
[209.91819763 -38.49586487]
[198.15948486 -29.18283272]
[183.76037598 -24.97977257]
[168.83808899 -26.50468826]
[155.58676147 -33.53336334]
[145.95483398 -45.03231430]
[141.35855103 -59.31076813]
[142.47375488 -74.26925659]
[149.13645935 -87.70831299]
[160.36700439 -97.65190125]
[174.51406860 -102.63793945]
[189.49751282 -101.93328857]
[203.11419678 -95.64156342]
[213.36196899 -84.68787384]
[218.73400879 -70.68283844]
[218.44087219 -55.68769455]
[226.91427612 -68.06514740]
[235.38768005 -80.44260406]
[243.86108398 -92.82006073]
[252.33448792 -105.19751740]
[260.80789185 -117.57497406]
[269.28128052 -129.95242310]
[269.99780273 -146.33592224]
[284.66751099 -153.66610718]
[298.19946289 -144.40234375]
[296.67318726 -128.07437134]
[281.65875244 -121.47902679]
[273.18533325 -109.10157013]
[264.71194458 -96.72411346]
[256.23852539 -84.34665680]
[247.76513672 -71.96920013]
[239.29173279 -59.59174347]
[230.81832886 -47.21428680]
[224.15597534 -33.77505493]
[219.43516541 -19.53729057]
[214.71435547 -5.29952478]
[209.99354553 8.93824100]
[221.36410522 -0.84492165]
[235.08087158 -6.91537189]
[249.96791077 -8.75270081]
[264.74902344 -6.19939613]
[278.15698242 0.52565098]
[289.04238892 10.84591293]
[296.47204590 23.87664986]
[299.80902100 38.50075912]
[298.76724243 53.46453857]
[293.43603516 67.48516846]
[284.27239990 79.36067963]
[272.06195068 88.07301331]
[257.85144043 92.87525940]
[242.85913086 93.35574341]
[228.37030029 89.47326660]
[215.62702942 81.56066895]
[205.72180176 70.29628754]
[199.50375366 56.64579773]
[197.50595093 41.77943420]
[199.89892578 26.97404289]
[190.23159790 38.44324493]
[180.56425476 49.91244507]
[178.27770996 64.63049316]
[163.46760559 70.19568634]
[153.80026245 81.66488647]
[144.13293457 93.13408661]
[134.46559143 104.60328674]
[129.31962585 118.69296265]
[129.31962585 133.69296265]
[129.31962585 148.69296265]
[129.31962585 163.69296265]
[129.31962585 178.69296265]
[129.31962585 193.69296265]
[129.31962585 208.69296265]
[129.31962585 223.69296265]
[129.31962585 238.69296265]
[129.31962585 253.69296265]
[144.02917480 256.92453003]
[157.69995117 263.24307251]
[169.69255066 272.35305786]
[179.44602966 283.82839966]
[186.50422668 297.13238525]
[190.53700256 311.64276123]
[191.35574341 326.68081665]
[188.92214966 341.54324341]
[183.35005188 355.53488159]
[174.90007019 368.00131226]
[163.96740723 378.35946655]
[151.06343079 386.12484741]
[136.79165649 390.93429565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 38]
[27 37]
[28 36]
[43 54]
[44 53]
[45 52]
[46 51]
[59 133]
[60 132]
[61 131]
[62 130]
[64 128]
[65 127]
[66 126]
[67 106]
[68 105]
[69 104]
[70 103]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
