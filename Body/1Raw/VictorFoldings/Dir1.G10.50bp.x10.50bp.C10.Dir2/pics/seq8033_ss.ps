%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUACUCCGGGGGGGGGGUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACxxxxxxxxxxCUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCCAUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 387.32128906]
[71.01555634 381.76828003]
[58.81560135 372.90194702]
[49.20452881 361.27963257]
[42.78650284 347.63192749]
[39.96496582 332.81674194]
[40.91728210 317.76538086]
[45.58358765 303.42395020]
[53.67055511 290.69400024]
[64.66983032 280.37573242]
[77.88998413 273.11773682]
[92.50000000 269.37631226]
[92.50000000 254.37631226]
[92.50000000 239.37631226]
[92.50000000 224.37631226]
[92.50000000 209.37631226]
[92.50000000 194.37631226]
[92.50000000 179.37631226]
[92.50000000 164.37631226]
[92.50000000 149.37631226]
[92.50000000 134.37631226]
[84.25878906 131.99768066]
[76.73319244 127.64778900]
[70.39329529 121.53476715]
[65.65007019 113.97840118]
[62.82899475 105.39363861]
[62.14819336 96.26787567]
[63.70259476 87.13335419]
[67.45513916 78.53607941]
[73.23580933 71.00321960]
[80.74869537 65.01084900]
[70.87299347 53.72056580]
[60.99728394 42.43028641]
[51.12157822 31.14000511]
[38.68791962 39.56519318]
[25.31312561 46.39852905]
[11.19995213 51.53642273]
[-3.43764806 54.90098190]
[-18.37777328 56.44120789]
[-33.39393234 56.13374329]
[-48.25848770 53.98325348]
[-62.74609756 50.02233887]
[-76.63713074 44.31104660]
[-89.72100067 36.93595505]
[-101.79936218 28.00887108]
[-112.68910217 17.66512680]
[-122.22515106 6.06153250]
[-130.26293945 -6.62600708]
[-136.68060303 -20.20515060]
[-141.38087463 -34.47004318]
[-144.29246521 -49.20442963]
[-145.37127686 -64.18494415]
[-144.60093689 -79.18448639]
[-141.99310303 -93.97566223]
[-137.58734131 -108.33424377]
[-131.45042419 -122.04255676]
[-123.67539978 -134.89279175]
[-114.38011932 -146.69013977]
[-103.70550537 -157.25575256]
[-91.81337738 -166.42945862]
[-78.88402557 -174.07218933]
[-65.11344147 -180.06809998]
[-50.71039963 -184.32626343]
[-35.89323807 -186.78213501]
[-20.88658333 -187.39849854]
[-5.91793108 -186.16600037]
[8.78579712 -183.10331726]
[23.00169754 -178.25689697]
[36.51425934 -171.70021057]
[49.11863708 -163.53262329]
[60.62374878 -153.87799072]
[70.85517883 -142.88265991]
[79.65782928 -130.71330261]
[86.89824677 -117.55443573]
[92.46667480 -103.60551453]
[96.27868652 -89.07801819]
[98.27650452 -74.19217682]
[98.42983246 -59.17365265]
[96.73635864 -44.25012207]
[93.22174072 -29.64782524]
[87.93927002 -15.58812618]
[80.96902466 -2.28416872]
[72.41667175 10.06236362]
[62.41185760 21.26429939]
[72.28756714 32.55458069]
[82.16326904 43.84486008]
[92.03897858 55.13513947]
[107.03818512 54.98114395]
[116.68000031 43.49047470]
[126.32181549 31.99980927]
[135.96362305 20.50914383]
[138.27690125 4.27397060]
[153.59240723 -1.58836627]
[166.15489197 8.95280266]
[163.04112244 25.05362511]
[147.45429993 30.15095711]
[137.81248474 41.64162445]
[128.17066956 53.13228989]
[118.52885437 64.62295532]
[129.98200989 77.37580109]
[134.45149231 92.85331726]
[149.45071411 93.00731659]
[164.44992065 93.16131592]
[179.44912720 93.31530762]
[193.32800293 85.72009277]
[205.97517395 93.58765411]
[220.97438049 93.74164581]
[235.97358704 93.89564514]
[242.27185059 80.03015900]
[253.66950989 69.93000031]
[268.19186401 65.34507751]
[283.32278442 67.06976318]
[296.44079590 74.80524445]
[305.27313232 87.21130371]
[308.28945923 102.13851166]
[304.96728516 117.00064087]
[295.88211060 129.22273254]
[282.60803223 136.68724060]
[267.44488525 138.10090637]
[253.01972961 133.21878052]
[241.83184814 122.88673401]
[235.81959534 108.89485931]
[220.82038879 108.74085999]
[205.82118225 108.58686066]
[193.01513672 116.19309235]
[179.29513550 108.31452179]
[164.29592896 108.16052246]
[149.29670715 108.00652313]
[134.29750061 107.85253143]
[128.99868774 119.92628479]
[119.62751770 129.20173645]
[107.50000000 134.37631226]
[107.50000000 149.37631226]
[107.50000000 164.37631226]
[107.50000000 179.37631226]
[107.50000000 194.37631226]
[107.50000000 209.37631226]
[107.50000000 224.37631226]
[107.50000000 239.37631226]
[107.50000000 254.37631226]
[107.50000000 269.37631226]
[122.11001587 273.11773682]
[135.33016968 280.37573242]
[146.32945251 290.69400024]
[154.41641235 303.42395020]
[159.08271790 317.76538086]
[160.03503418 332.81674194]
[157.21350098 347.63192749]
[150.79547119 361.27963257]
[141.18440247 372.90194702]
[128.98443604 381.76828003]
[114.96250153 387.32128906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[31 87]
[32 86]
[33 85]
[34 84]
[88 99]
[89 98]
[90 97]
[91 96]
[101 129]
[102 128]
[103 127]
[104 126]
[106 124]
[107 123]
[108 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
