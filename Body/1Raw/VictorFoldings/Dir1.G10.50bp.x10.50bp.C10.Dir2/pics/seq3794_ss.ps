%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUAGCCGGGGGGGGGGAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACxxxxxxxxxxACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCACCCCCCCCCCUCAUCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[87.48733521 459.56448364]
[73.99845886 452.83294678]
[62.51295471 443.06838989]
[53.69858551 430.83847046]
[48.06780624 416.85427856]
[45.94797516 401.92880249]
[47.46234512 386.92980957]
[52.52286911 372.72930908]
[60.83533478 360.15286255]
[71.91646576 349.93173218]
[85.12201691 342.66009521]
[99.68424225 338.76071167]
[99.37626648 323.76388550]
[99.06829071 308.76702881]
[98.76030731 293.77020264]
[98.45233154 278.77337646]
[98.14435577 263.77651978]
[97.83638000 248.77969360]
[97.52840424 233.78285217]
[97.22042084 218.78601074]
[96.75849915 203.79312134]
[96.14266968 188.80577087]
[95.52684784 173.81842041]
[80.34955597 171.29536438]
[66.02277374 165.68650818]
[53.16658783 157.23460388]
[42.33744431 146.30548096]
[34.00404358 133.37217712]
[28.52707481 118.99445343]
[26.14358902 103.79462433]
[26.95675087 88.43054962]
[30.93136406 73.56722260]
[37.89539719 59.84795380]
[47.54743576 47.86654663]
[59.46972275 38.14157104]
[73.14624023 31.09394836]
[87.98503113 27.02871132]
[87.06162262 12.05716038]
[86.13820648 -2.91438913]
[85.21479034 -17.88593864]
[76.64261627 -31.18362236]
[83.58174133 -44.36306763]
[82.65832520 -59.33461761]
[81.73490906 -74.30616760]
[80.81150055 -89.27771759]
[69.73334503 -97.00327301]
[65.21217346 -109.52286530]
[68.69468689 -122.16805267]
[78.68663025 -130.36033630]
[78.07080841 -145.34768677]
[77.45497894 -160.33503723]
[76.83915710 -175.32238770]
[76.22332764 -190.30973816]
[75.60750580 -205.29710388]
[60.65901184 -206.82133484]
[46.07961655 -210.45753479]
[32.16613388 -216.13166809]
[19.20182610 -223.72821045]
[7.45062971 -233.09251404]
[-2.84821486 -244.03393555]
[-11.48503685 -256.32971191]
[-18.28400230 -269.72952271]
[-23.10669327 -283.96054077]
[-25.85492516 -298.73309326]
[-26.47274590 -313.74639893]
[-24.94758224 -328.69479370]
[-21.31047821 -343.27395630]
[-15.63548660 -357.18710327]
[-8.03813934 -370.15093994]
[1.32689071 -381.90155029]
[12.26894283 -392.19970703]
[24.56525230 -400.83578491]
[37.96548080 -407.63391113]
[52.19681549 -412.45571899]
[66.96952820 -415.20303345]
[81.98286438 -415.81991577]
[96.93116760 -414.29382324]
[111.51010895 -410.65582275]
[125.42288971 -404.97998047]
[138.38626099 -397.38183594]
[150.13629150 -388.01608276]
[160.43379211 -377.07339478]
[169.06909180 -364.77655029]
[175.86639404 -351.37588501]
[180.68731689 -337.14425659]
[183.43373108 -322.37136841]
[184.04968262 -307.35800171]
[182.52267456 -292.40979004]
[178.88377380 -277.83108521]
[173.20704651 -263.91864014]
[165.60809326 -250.95574951]
[156.24162292 -239.20628357]
[145.29829407 -228.90946960]
[133.00091553 -220.27493286]
[119.59984589 -213.47845459]
[105.36791229 -208.65841675]
[90.59485626 -205.91291809]
[91.21068573 -190.92556763]
[91.82650757 -175.93821716]
[92.44233704 -160.95086670]
[93.05815887 -145.96351624]
[93.67398834 -130.97615051]
[106.51029205 -120.15338898]
[107.59867096 -103.06108093]
[95.78305054 -90.20113373]
[96.70645905 -75.22958374]
[97.62987518 -60.25803375]
[98.55329132 -45.28648376]
[107.05941772 -33.05966568]
[100.18634033 -18.80935287]
[101.10975647 -3.83780265]
[102.03317261 11.13374710]
[102.95658112 26.10529709]
[117.38159180 28.11781311]
[131.13243103 32.91840744]
[143.67573547 40.32087326]
[154.52500916 50.03810120]
[163.25944519 61.69318390]
[169.54023743 74.83406830]
[173.12379456 88.95104980]
[173.87112427 103.49658966]
[171.75321960 117.90650940]
[166.85226440 131.62188721]
[159.35830688 144.11076355]
[149.56204224 154.88871765]
[137.84342957 163.53773499]
[124.65699768 169.72230530]
[110.51419830 173.20259094]
[111.13002777 188.18995667]
[111.74584961 203.17730713]
[115.24296570 211.68412781]
[112.21726227 218.47804260]
[112.52523804 233.47486877]
[112.83321381 248.47171021]
[113.14119720 263.46853638]
[113.44917297 278.46539307]
[113.75714874 293.46221924]
[114.06512451 308.45907593]
[114.37310791 323.45590210]
[114.68108368 338.45272827]
[129.39111328 341.75097656]
[142.88407898 348.47433472]
[154.37548828 358.23193359]
[163.19728088 370.45648193]
[168.83653259 384.43725586]
[170.96540833 399.36141968]
[169.46012878 414.36135864]
[164.40821838 428.56494141]
[156.10337830 441.14639282]
[145.02845764 451.37426758]
[131.82730103 458.65390015]
[117.26744843 462.56210327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 130]
[22 129]
[23 128]
[37 113]
[38 112]
[39 111]
[40 110]
[42 108]
[43 107]
[44 106]
[45 105]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
