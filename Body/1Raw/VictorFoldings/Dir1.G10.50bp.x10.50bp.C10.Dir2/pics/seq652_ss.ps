%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUCAUCAGGGGGGGGGGAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCxxxxxxxxxxGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCCCCCCCCCCCAAACUCAUCA\
) } def
/len { sequence length } bind def

/coor [
[92.69676208 468.17199707]
[79.47656250 460.89953613]
[68.58975983 450.45251465]
[60.77862930 437.54327393]
[56.57574844 423.05197144]
[56.26767731 407.96661377]
[59.87541580 393.31579590]
[67.15299225 380.09841919]
[77.60419464 369.21563721]
[90.51645660 361.40948486]
[105.00939941 357.21221924]
[104.69734192 342.21545410]
[104.38528442 327.21871948]
[104.07322693 312.22195435]
[103.76116943 297.22518921]
[103.44911194 282.22845459]
[103.13706207 267.23168945]
[102.82500458 252.23493958]
[102.51294708 237.23818970]
[102.20088959 222.24142456]
[101.42104340 207.26171875]
[100.17417145 192.31362915]
[98.92729950 177.36553955]
[97.68041992 162.41744995]
[96.43354797 147.46936035]
[95.18666840 132.52128601]
[85.24082184 130.60827637]
[76.04111481 125.63228607]
[68.53427124 117.88116455]
[63.55706787 107.93536377]
[61.74626160 96.62637329]
[63.46403503 84.96772766]
[68.74717712 74.06417847]
[77.28626251 65.00720978]
[88.43832397 58.76671982]
[101.27321625 56.08958054]
[92.25568390 44.10274887]
[83.23815918 32.11591721]
[74.22062683 20.12908363]
[63.44981766 9.68927002]
[51.18745041 1.05015421]
[38.32587051 2.47619367]
[28.27832603 -5.02486086]
[26.13289642 -16.97075844]
[14.05290794 -25.86310768]
[1.97291946 -34.75545883]
[-10.10706902 -43.64780807]
[-23.84137917 -36.89300919]
[-39.14131165 -37.30617905]
[-52.49104691 -44.79237366]
[-60.82292175 -57.63131714]
[-62.22232819 -72.87271881]
[-56.36769104 -87.01420593]
[-44.60436630 -96.80618286]
[-29.63547897 -99.99851227]
[-14.90076828 -95.85763550]
[-3.78616548 -85.33507538]
[1.15427685 -70.84885406]
[-1.21471918 -55.72779465]
[10.86526871 -46.83544540]
[22.94525719 -37.94309616]
[35.02524567 -29.05074692]
[52.51986313 -28.08206749]
[59.82656860 -11.21221447]
[72.08893585 -2.57309794]
[66.51402283 -16.49862671]
[66.24489594 -31.49621201]
[71.31659698 -45.61279297]
[81.06867218 -57.01003265]
[94.23114777 -64.20372009]
[109.08994293 -66.25706482]
[123.71006775 -62.90266800]
[136.18760681 -54.57735443]
[144.89768982 -42.36528778]
[148.70602417 -27.85678482]
[147.11666870 -12.94122410]
[140.33662415 0.43901718]
[129.24879456 10.54149437]
[115.29709625 16.05060959]
[100.29840851 16.24893951]
[86.20745850 11.11155319]
[95.22499084 23.09838486]
[104.24252319 35.08521652]
[113.26004791 47.07205200]
[111.09321594 32.22938156]
[102.78359222 19.74138260]
[100.55110168 4.90844631]
[104.81674194 -9.47224522]
[114.77610779 -20.68879509]
[128.55107117 -26.62599945]
[143.54396057 -26.16422462]
[156.92742920 -19.39055061]
[166.17764282 -7.58235168]
[169.55020142 7.03359365]
[166.40911865 21.70102501]
[157.34671021 33.65397263]
[144.07189941 40.63838577]
[135.06245422 52.63129425]
[148.71868896 46.42588425]
[162.37493896 40.22047806]
[176.03117371 34.01507187]
[187.95004272 21.95783615]
[202.83555603 30.07313347]
[199.15811157 46.62344742]
[182.23658752 47.67131424]
[168.58033752 53.87672043]
[154.92410278 60.08212662]
[141.26786804 66.28753662]
[144.21334839 80.99549866]
[159.20603943 81.46353912]
[174.19873047 81.93157959]
[186.82878113 72.03908539]
[202.40383911 75.88582611]
[208.97604370 90.52091217]
[201.50376892 104.71755219]
[185.71910095 107.58530426]
[173.73069763 96.92427826]
[158.73799133 96.45623016]
[143.74530029 95.98818970]
[132.05912781 121.14101410]
[110.13475800 131.27439880]
[111.38162994 146.22248840]
[112.62850952 161.17057800]
[113.87538147 176.11866760]
[115.12225342 191.06675720]
[116.36913300 206.01484680]
[119.42700195 210.40449524]
[120.35652924 215.06156921]
[119.42124939 219.11457825]
[117.19764709 221.92936707]
[117.50969696 236.92613220]
[117.82175446 251.92288208]
[118.13381195 266.91964722]
[118.44586945 281.91638184]
[118.75792694 296.91314697]
[119.06998444 311.90988159]
[119.38203430 326.90664673]
[119.69409180 341.90341187]
[120.00614929 356.90014648]
[134.66114807 360.49093628]
[147.88694763 367.75317383]
[158.78181458 378.19177246]
[166.60292053 391.09500122]
[170.81698608 405.58303833]
[171.13670349 420.66815186]
[167.54028320 435.32174683]
[160.27291870 448.54476929]
[149.83012390 459.43560791]
[136.92388916 467.25170898]
[122.43419647 471.46017456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 126]
[22 125]
[23 124]
[24 123]
[25 122]
[26 121]
[36 84]
[37 83]
[38 82]
[39 81]
[40 65]
[41 64]
[44 62]
[45 61]
[46 60]
[47 59]
[98 108]
[99 107]
[100 106]
[101 105]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
