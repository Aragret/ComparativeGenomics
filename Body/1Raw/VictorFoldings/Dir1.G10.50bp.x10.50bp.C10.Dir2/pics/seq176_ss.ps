%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAUAAUAGGGGGGGGGGAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAxxxxxxxxxxCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUCCCCCCCCCCGGCCAUAAUA\
) } def
/len { sequence length } bind def

/coor [
[82.34132385 486.55728149]
[68.49538422 480.54125977]
[56.78672409 471.01184082]
[48.08419800 458.67617798]
[43.03359604 444.44964600]
[42.00970459 429.38796997]
[45.08850479 414.60882568]
[52.04152679 401.20889282]
[62.35280991 390.18255615]
[75.25719452 382.34805298]
[89.79708099 378.28674316]
[89.79708099 363.28674316]
[89.79708099 348.28674316]
[89.79708099 333.28674316]
[89.79708099 318.28674316]
[89.79708099 303.28674316]
[89.79708099 288.28674316]
[89.79708099 273.28674316]
[89.79708099 258.28674316]
[89.79708099 243.28672791]
[89.79708099 228.28672791]
[75.73314667 223.23785400]
[64.22360992 213.66395569]
[56.66994095 200.70568848]
[54.00048828 185.91732788]
[56.55643463 171.08030701]
[64.04830933 157.98863220]
[75.58865356 148.23196411]
[89.79708099 143.00262451]
[89.79708099 128.00262451]
[89.79708099 113.00262451]
[81.41493225 100.56318665]
[67.51238251 94.93122864]
[53.60982513 89.29927063]
[39.70726776 83.66731262]
[25.80471230 78.03536224]
[11.90215588 72.40340424]
[-2.00040054 66.77144623]
[-11.91847324 78.21305847]
[-25.01549530 85.81218719]
[-39.87080002 88.74452972]
[-54.87299728 86.69200897]
[-68.39476013 79.87725830]
[-78.96934509 69.03951263]
[-85.44969940 55.35434723]
[-87.13288879 40.30623627]
[-83.83633423 25.52748871]
[-75.91761017 12.62118721]
[-64.23569489 2.98731303]
[-50.05774689 -2.32912350]
[-34.92168427 -2.75143480]
[-20.46935654 1.76618779]
[-8.26844215 10.73370647]
[0.35759473 23.17839241]
[4.47306633 37.75033951]
[3.63155627 52.86888885]
[17.53411293 58.50084686]
[31.43666840 64.13280487]
[45.33922577 69.76476288]
[59.24177933 75.39671326]
[73.14433289 81.02867126]
[87.04689026 86.66062927]
[101.36949158 82.20381165]
[109.62178040 69.67784882]
[98.16699219 59.96470642]
[87.96653748 48.94163132]
[79.16918182 36.76937485]
[71.90321350 23.62543869]
[66.27458191 9.70150661]
[62.36537933 -4.79937267]
[60.23261261 -19.66573334]
[59.90737534 -34.68077850]
[61.39442062 -49.62554550]
[64.67205811 -64.28209686]
[69.69248199 -78.43669128]
[76.38249969 -91.88291931]
[84.64453125 -104.42469788]
[94.35810852 -115.87911987]
[105.38156128 -126.07916260]
[117.55415344 -134.87606812]
[130.69834900 -142.14154053]
[144.62249756 -147.76965332]
[159.12351990 -151.67831421]
[173.98995972 -153.81053162]
[189.00502014 -154.13519287]
[203.94973755 -152.64759827]
[218.60615540 -149.36941528]
[232.76057434 -144.34844971]
[246.20654297 -137.65794373]
[258.74801636 -129.39543152]
[270.20208740 -119.68143463]
[280.40170288 -108.65759277]
[289.19815063 -96.48468018]
[296.46313477 -83.34020233]
[302.09072876 -69.41584778]
[305.99884033 -54.91467667]
[308.13049316 -40.04815674]
[308.45462036 -25.03308678]
[306.96646118 -10.08843136]
[303.68771362 4.56787395]
[298.66622925 18.72209549]
[291.97521973 32.16782379]
[283.71224976 44.70898438]
[273.99780273 56.16268158]
[262.97360229 66.36189270]
[250.80035400 75.15788269]
[237.65559387 82.42238617]
[223.73103333 88.04944611]
[209.22972107 91.95702362]
[194.36311340 94.08812714]
[179.34803772 94.41168213]
[164.40344238 92.92295837]
[149.74725342 89.64368439]
[135.59321594 84.62166595]
[122.14774323 77.93013763]
[113.89545441 90.45610046]
[115.93400574 97.64006042]
[114.63669586 104.65241241]
[110.56320953 110.09137726]
[104.79708099 113.00262451]
[104.79708099 128.00262451]
[104.79708099 143.00262451]
[119.00550079 148.23196411]
[130.54585266 157.98863220]
[138.03771973 171.08030701]
[140.59367371 185.91732788]
[137.92420959 200.70568848]
[130.37054443 213.66395569]
[118.86100769 223.23785400]
[104.79708099 228.28672791]
[104.79708099 243.28672791]
[104.79708099 258.28674316]
[104.79708099 273.28674316]
[104.79708099 288.28674316]
[104.79708099 303.28674316]
[104.79708099 318.28674316]
[104.79708099 333.28674316]
[104.79708099 348.28674316]
[104.79708099 363.28674316]
[104.79708099 378.28674316]
[119.33696747 382.34805298]
[132.24134827 390.18255615]
[142.55262756 401.20889282]
[149.50564575 414.60882568]
[152.58445740 429.38796997]
[151.56056213 444.44964600]
[146.50996399 458.67617798]
[137.80743408 471.01184082]
[126.09877014 480.54125977]
[112.25283051 486.55728149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 122]
[30 121]
[31 120]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[63 116]
[64 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
