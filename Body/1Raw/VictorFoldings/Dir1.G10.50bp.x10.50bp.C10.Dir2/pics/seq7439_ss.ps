%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUUAUAGGGGGGGGGGGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAxxxxxxxxxxACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGCCCCCCCCCCUAAAUUAUGG\
) } def
/len { sequence length } bind def

/coor [
[86.27308655 397.04751587]
[71.78339386 392.83905029]
[58.87716293 385.02291870]
[48.43436432 374.13208008]
[41.16699982 360.90908813]
[37.57057190 346.25546265]
[37.89029312 331.17037964]
[42.10436630 316.68231201]
[49.92546082 303.77911377]
[60.82033157 293.34051514]
[74.04614258 286.07824707]
[88.70113373 282.48748779]
[89.01318359 267.49072266]
[89.32524109 252.49397278]
[89.63729858 237.49722290]
[89.94935608 222.50047302]
[90.26141357 207.50370789]
[90.57347107 192.50695801]
[90.88552094 177.51020813]
[91.19757843 162.51345825]
[91.50963593 147.51669312]
[91.82169342 132.51994324]
[75.59836578 122.99981689]
[67.05358887 106.24224854]
[68.87619781 87.52040863]
[80.49264526 72.72557068]
[74.71637726 58.88235092]
[60.35834503 61.88177872]
[45.69748688 62.17780304]
[31.23823547 59.76176834]
[17.47780418 54.71830368]
[4.88908863 47.22235489]
[-6.09557867 37.53313446]
[-15.09928417 25.98513794]
[-21.81345940 12.97661114]
[-26.00846481 -1.04419100]
[-27.54143333 -15.59445095]
[-26.36113930 -30.17341042]
[-22.50971413 -44.27960968]
[-16.12113571 -57.42812729]
[-7.41657495 -69.16726685]
[3.30326533 -79.09404755]
[15.66853428 -86.86806488]
[10.18150330 -100.82845306]
[4.69447184 -114.78884125]
[-4.44726229 -126.68122101]
[-16.52725029 -135.57357788]
[-32.22782898 -137.52354431]
[-37.89066696 -151.29966736]
[-49.97065353 -160.19201660]
[-62.05064011 -169.08436584]
[-78.39082336 -173.60485840]
[-78.57040405 -190.55784607]
[-62.32965088 -195.42346191]
[-53.15829086 -181.16435242]
[-41.07830429 -172.27200317]
[-28.99831581 -163.37965393]
[-14.16177750 -162.06571960]
[-7.63490105 -147.65356445]
[4.44508696 -138.76121521]
[11.10266495 -142.21470642]
[24.41781998 -149.12170410]
[31.07539940 -152.57521057]
[30.76334190 -167.57196045]
[30.45128632 -182.56871033]
[30.13923073 -197.56547546]
[15.71207523 -202.16285706]
[3.56087852 -211.19763184]
[-4.99628830 -223.68977356]
[-9.03120804 -238.28422546]
[-8.10620308 -253.39790344]
[-2.32161117 -267.39135742]
[7.69509888 -278.74673462]
[20.85738945 -286.23223877]
[35.73751450 -289.03591919]
[50.72138596 -286.85366821]
[64.18367004 -279.92214966]
[74.66407776 -268.99331665]
[81.02576447 -255.25257874]
[82.57867432 -240.19046021]
[79.15435791 -225.44079590]
[71.12425232 -212.60350037]
[59.35940552 -203.07107544]
[45.13598251 -197.87753296]
[45.44804001 -182.88076782]
[45.76009750 -167.88401794]
[46.07215118 -152.88726807]
[18.65486145 -120.27587891]
[24.14189339 -106.31548309]
[29.62892532 -92.35509491]
[44.73199844 -95.14946747]
[60.09485626 -94.95880890]
[75.13299561 -91.78855896]
[89.27392578 -85.75757599]
[101.97895050 -77.09365845]
[112.76369476 -66.12493134]
[121.21657562 -53.26743317]
[127.01449585 -39.00934601]
[129.93519592 -23.89242935]
[129.86582947 -8.49146938]
[126.80718994 6.60760164]
[120.87390900 20.82998466]
[112.29004669 33.63389587]
[101.38068390 44.53121567]
[88.55959320 53.10607910]
[94.33586121 66.94929504]
[108.56943512 67.58092499]
[121.25596619 74.06517029]
[130.10516357 85.23142242]
[133.51947021 99.06384277]
[148.22743225 102.00932312]
[162.93539429 104.95480347]
[172.52131653 93.02297211]
[186.55885315 86.92328644]
[201.82228088 88.05741882]
[214.80418396 96.16474915]
[222.52140808 109.38227081]
[223.20059204 124.67270660]
[216.68566895 138.52241516]
[204.47372437 147.74882507]
[189.37095642 150.23179626]
[174.84788513 145.40075684]
[164.24180603 134.36582947]
[159.98991394 119.66276550]
[145.28195190 116.71728516]
[130.57398987 113.77180481]
[126.51256561 120.53083801]
[120.98503113 126.15454102]
[114.29704285 130.33192444]
[106.81844330 132.83200073]
[106.50639343 147.82875061]
[106.19433594 162.82550049]
[105.88227844 177.82226562]
[105.57022095 192.81901550]
[105.25816345 207.81576538]
[104.94610596 222.81251526]
[104.63405609 237.80928040]
[104.32199860 252.80603027]
[104.00994110 267.80279541]
[103.69788361 282.79953003]
[118.19081879 286.99682617]
[131.10308838 294.80297852]
[141.55429077 305.68572998]
[148.83186340 318.90313721]
[152.43960571 333.55395508]
[152.13153076 348.63928223]
[147.92864990 363.13061523]
[140.11752319 376.03985596]
[129.23071289 386.48684692]
[116.01052094 393.75933838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[26 106]
[27 105]
[43 90]
[44 89]
[45 88]
[46 60]
[47 59]
[49 57]
[50 56]
[51 55]
[63 87]
[64 86]
[65 85]
[66 84]
[110 126]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
