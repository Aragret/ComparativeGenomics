%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUUAUAGGGGGGGGGGACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAxxxxxxxxxxGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUCCCCCCCCCCAAAUAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.08346558]
[71.19830322 381.06744385]
[59.48964310 371.53802490]
[50.78712082 359.20236206]
[45.73651886 344.97583008]
[44.71262741 329.91415405]
[47.79142761 315.13497925]
[54.74444962 301.73507690]
[65.05573273 290.70874023]
[77.96011353 282.87423706]
[92.50000000 278.81289673]
[92.50000000 263.81289673]
[92.50000000 248.81291199]
[92.50000000 233.81291199]
[92.50000000 218.81291199]
[92.50000000 203.81291199]
[92.50000000 188.81291199]
[92.50000000 173.81291199]
[92.50000000 158.81291199]
[92.50000000 143.81291199]
[92.50000000 128.81291199]
[77.78150177 123.09035492]
[67.14852142 109.91535950]
[64.28263855 92.07363892]
[71.04159546 74.09040833]
[86.69602203 61.08271027]
[107.85990906 57.31811142]
[99.60762024 44.79215240]
[91.35533142 32.26618958]
[83.10304260 19.74022675]
[74.85075378 7.21426487]
[66.59846497 -5.31169701]
[54.38514328 -5.25885725]
[43.75997925 -10.98690510]
[37.24712372 -20.98013878]
[36.31925583 -32.72914124]
[22.93297195 -39.49725342]
[9.54668617 -46.26536942]
[-3.97750354 -52.75353241]
[-17.63374519 -58.95894241]
[-31.28998566 -65.16434479]
[-42.65664291 -55.02930832]
[-57.16486359 -50.39990997]
[-72.30101776 -52.07822037]
[-85.44267273 -59.77346802]
[-94.31295776 -72.15239716]
[-97.37503815 -87.07029724]
[-94.09839630 -101.94253540]
[-85.05072784 -114.19241333]
[-71.79959106 -121.69757080]
[-56.64083481 -123.15768433]
[-42.20079803 -118.31978607]
[-30.98130798 -108.02207184]
[-24.92620659 -94.04868317]
[-25.08457947 -78.82058716]
[-11.42833805 -72.61518097]
[2.22790337 -66.40977478]
[6.99005651 -67.24488831]
[12.32111740 -65.05146790]
[16.31480026 -59.65165329]
[29.70108604 -52.88354111]
[43.08737183 -46.11542511]
[47.79098892 -49.73493958]
[53.24546814 -52.07451248]
[53.86944580 -67.06153107]
[54.49342346 -82.04854584]
[55.11740112 -97.03556061]
[55.74137497 -112.02257538]
[56.36535263 -127.00959015]
[42.56097412 -133.37414551]
[32.24666977 -144.54032898]
[26.99529648 -158.80537415]
[27.60765266 -173.99397278]
[33.99036026 -187.78996277]
[45.17009735 -198.08956909]
[59.44203949 -203.32217407]
[74.62981415 -202.68983459]
[88.41740417 -196.28898621]
[98.70229340 -185.09571838]
[103.91612244 -170.81689453]
[103.26380157 -155.62995911]
[96.84482574 -141.85081482]
[85.63803101 -131.58065796]
[71.35237122 -126.38561249]
[70.72839355 -111.39859772]
[70.10441589 -96.41158295]
[69.48043823 -81.42456818]
[68.85646057 -66.43755341]
[68.23248291 -51.45053482]
[83.28354645 -35.57612228]
[79.12442780 -13.56398678]
[87.37671661 -1.03802431]
[95.62900543 11.48793793]
[103.88129425 24.01389885]
[112.13358307 36.53985977]
[120.38587189 49.06582260]
[134.92080688 52.77198410]
[148.16339111 45.72684860]
[161.40597534 38.68171310]
[169.62933350 24.49338913]
[186.02577209 24.79142761]
[193.72804260 39.26923370]
[184.81272888 53.03328323]
[168.45111084 51.92430115]
[155.20852661 58.96943665]
[141.96594238 66.01457214]
[142.89974976 73.45620728]
[156.47747803 67.08084106]
[166.73654175 78.02394104]
[159.49923706 91.16249084]
[144.76736450 88.33949280]
[145.70117188 95.78112793]
[160.27388000 99.33589172]
[174.84657288 102.89065552]
[189.41928101 106.44541931]
[203.99198914 110.00017548]
[218.39300537 102.92980957]
[232.83761597 109.91069794]
[236.24514771 125.58769989]
[226.00163269 137.93475342]
[209.96501160 137.48027039]
[200.43722534 124.57288361]
[185.86451721 121.01811981]
[171.29180908 117.46335602]
[156.71911621 113.90859222]
[142.14640808 110.35383606]
[134.90933228 119.51339722]
[126.04774475 125.69187164]
[116.58592224 128.73669434]
[107.50000000 128.81291199]
[107.50000000 143.81291199]
[107.50000000 158.81291199]
[107.50000000 173.81291199]
[107.50000000 188.81291199]
[107.50000000 203.81291199]
[107.50000000 218.81291199]
[107.50000000 233.81291199]
[107.50000000 248.81291199]
[107.50000000 263.81289673]
[107.50000000 278.81289673]
[122.03988647 282.87423706]
[134.94427490 290.70874023]
[145.25555420 301.73507690]
[152.20857239 315.13497925]
[155.28736877 329.91415405]
[154.26348877 344.97583008]
[149.21287537 359.20236206]
[140.51036072 371.53802490]
[128.80169678 381.06744385]
[114.95575714 387.08346558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[36 62]
[37 61]
[38 60]
[39 57]
[40 56]
[41 55]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[97 106]
[98 105]
[99 104]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
