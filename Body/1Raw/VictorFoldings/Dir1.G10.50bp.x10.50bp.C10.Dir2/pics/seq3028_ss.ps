%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCGCUAUGGGGGGGGGGUAAAGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGAxxxxxxxxxxUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACCCCCCCCCCCAACCGCUAU\
) } def
/len { sequence length } bind def

/coor [
[80.46353149 471.00106812]
[66.61759186 464.98504639]
[54.90892792 455.45562744]
[46.20640564 443.11993408]
[41.15580368 428.89343262]
[40.13191223 413.83175659]
[43.21070862 399.05258179]
[50.16373062 385.65264893]
[60.47501755 374.62631226]
[73.37939453 366.79180908]
[87.91928101 362.73049927]
[87.91928101 347.73049927]
[87.91928101 332.73049927]
[87.91928101 317.73049927]
[87.91928101 302.73049927]
[87.91928101 287.73049927]
[87.91928101 272.73049927]
[87.91928101 257.73049927]
[87.91928101 242.73049927]
[87.91928101 227.73049927]
[87.91928101 212.73049927]
[73.19046021 203.08013916]
[67.10350037 186.39033508]
[72.25105286 169.22393799]
[86.76838684 158.45082092]
[86.14440918 143.46380615]
[85.52043152 128.47679138]
[74.11941528 118.72914124]
[59.21751022 120.44182587]
[44.31560898 122.15451813]
[29.41370392 123.86721039]
[14.51180267 125.57989502]
[3.45108199 137.20057678]
[-12.51733303 135.65484619]
[-21.14384079 122.12846375]
[-15.81092358 106.99771118]
[-0.60953844 101.86961365]
[12.79911232 110.67799377]
[27.70101547 108.96530914]
[42.60291672 107.25261688]
[57.50481796 105.53992462]
[72.40672302 103.82723999]
[74.05689240 94.82608795]
[78.40550232 87.30319977]
[84.68304443 81.98394775]
[91.95782471 79.26100922]
[99.26541901 79.17267609]
[104.16696930 64.99612427]
[109.06851959 50.81956100]
[113.97006989 36.64300537]
[110.04016113 18.68372536]
[123.67016602 7.67358971]
[128.27572632 -6.60187101]
[132.88128662 -20.87733269]
[126.95262146 -25.83105659]
[123.05440521 -33.11624908]
[122.09345245 -41.86405182]
[124.59564972 -50.86182404]
[125.53127289 -65.83261871]
[126.46690369 -80.80340576]
[127.40253448 -95.77420044]
[128.33816528 -110.74498749]
[120.38616180 -120.95378876]
[121.51255035 -133.44178772]
[130.56451416 -141.52691650]
[131.81138611 -156.47500610]
[133.05825806 -171.42309570]
[118.96357727 -176.85600281]
[106.97128296 -186.04084778]
[98.05355072 -198.23309326]
[92.93329620 -212.44435120]
[92.02560425 -227.52256775]
[95.40404510 -242.24543762]
[102.79474640 -255.41943359]
[113.59858704 -265.97659302]
[126.93973541 -273.06112671]
[141.73669434 -276.09866333]
[156.78993225 -274.84301758]
[170.87916565 -269.39596558]
[182.86221313 -260.19906616]
[191.76770020 -247.99787903]
[196.87367249 -233.78147888]
[197.76622009 -218.70236206]
[194.37298584 -203.98289490]
[186.96905518 -190.81632996]
[176.15461731 -180.27001953]
[162.80635071 -173.19891357]
[148.00634766 -170.17622375]
[146.75947571 -155.22813416]
[145.51260376 -140.28004456]
[153.85163879 -124.87029266]
[143.30895996 -109.80936432]
[142.37332153 -94.83856964]
[141.43769836 -79.86777496]
[140.50205994 -64.89698792]
[139.56643677 -49.92619705]
[151.73828125 -41.15998840]
[165.64083862 -46.79194641]
[179.54338074 -52.42390060]
[193.44593811 -58.05585861]
[207.34849548 -63.68781662]
[221.25105286 -69.31977081]
[233.66116333 -80.87076569]
[248.19621277 -72.14327240]
[243.83349609 -55.76026535]
[226.88301086 -55.41721725]
[212.98045349 -49.78525925]
[199.07789612 -44.15330124]
[185.17533875 -38.52134705]
[171.27278137 -32.88938904]
[157.37023926 -27.25743294]
[147.15675354 -16.27176666]
[142.55119324 -1.99630666]
[137.94561768 12.27915382]
[143.18605042 23.22653961]
[139.41662598 35.18523788]
[128.14663696 41.54455566]
[123.24507904 55.72111511]
[118.34352875 69.89767456]
[113.44197845 84.07422638]
[122.94358063 108.15222931]
[100.50744629 127.85281372]
[101.13142395 142.83982849]
[101.75540161 157.82684326]
[113.04987335 163.35417175]
[120.85691833 173.11892700]
[123.72939301 185.21205139]
[121.17725372 197.30279541]
[113.74988556 207.08793640]
[102.91928101 212.73049927]
[102.91928101 227.73049927]
[102.91928101 242.73049927]
[102.91928101 257.73049927]
[102.91928101 272.73049927]
[102.91928101 287.73049927]
[102.91928101 302.73049927]
[102.91928101 317.73049927]
[102.91928101 332.73049927]
[102.91928101 347.73049927]
[102.91928101 362.73049927]
[117.45916748 366.79180908]
[130.36355591 374.62631226]
[140.67483521 385.65264893]
[147.62785339 399.05258179]
[150.70664978 413.83175659]
[149.68276978 428.89343262]
[144.63215637 443.11993408]
[135.92964172 455.45562744]
[124.22097778 464.98504639]
[110.37503815 471.00106812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 124]
[26 123]
[27 122]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[47 120]
[48 119]
[49 118]
[50 117]
[52 114]
[53 113]
[54 112]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[65 90]
[66 89]
[67 88]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
