%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAACCGGGGGGGGGGGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGxxxxxxxxxxUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCCCCCCCCCCCACCCUAACAG\
) } def
/len { sequence length } bind def

/coor [
[107.25623322 416.88616943]
[95.16129303 407.85205078]
[85.95315552 395.88906860]
[80.31512451 381.88494873]
[78.66558075 366.87890625]
[81.12692261 351.98446655]
[87.51651001 338.30691528]
[97.36019135 326.86117554]
[109.92749786 318.49664307]
[124.28585052 313.83401489]
[123.66187286 298.84701538]
[123.03789520 283.85998535]
[122.41391754 268.87298584]
[121.78993988 253.88595581]
[121.16596222 238.89894104]
[120.54198456 223.91192627]
[119.91800690 208.92491150]
[119.29402924 193.93789673]
[118.67005157 178.95088196]
[115.72457123 164.24291992]
[110.52915955 150.17138672]
[105.33374023 136.09986877]
[100.13832855 122.02835846]
[87.69010162 118.26838684]
[79.53136444 108.14264679]
[64.53867340 108.61068726]
[49.54597473 109.07872772]
[34.55327988 109.54676819]
[25.13259506 118.41832733]
[12.59397984 118.46434021]
[3.69802117 110.20787048]
[-11.30116749 110.36390686]
[-26.30035591 110.51994324]
[-35.17987823 123.24526215]
[-49.85429764 128.28918457]
[-64.68099213 123.71221161]
[-73.95880127 111.27429199]
[-74.12022400 95.75805664]
[-65.10317230 83.12981415]
[-50.37490463 78.24537659]
[-35.59872818 82.98292542]
[-26.45639229 95.52075958]
[-11.45720387 95.36472321]
[3.54198456 95.20868683]
[18.10466003 85.46556091]
[34.08523560 94.55407715]
[49.07793427 94.08602905]
[64.07062531 93.61798859]
[79.06332397 93.14994812]
[82.98164368 86.01275635]
[89.22484589 80.78636932]
[96.94005585 78.18476868]
[100.03837585 63.50824356]
[103.13669586 48.83171844]
[106.23501587 34.15519333]
[109.33334351 19.47866631]
[103.94144440 33.47607803]
[91.44147491 41.76767349]
[76.44902039 41.29179001]
[64.50005341 32.22414398]
[60.00672150 17.91296196]
[64.62818909 3.64263988]
[76.65797424 -5.31750965]
[91.65357971 -5.65910435]
[90.71794891 -20.62989616]
[89.78232574 -35.60068893]
[88.84669495 -50.57147980]
[74.56044006 -55.84622574]
[63.65927124 -66.48033142]
[58.03186798 -80.63138580]
[58.65321350 -95.84761810]
[65.41566467 -109.49273682]
[77.14757538 -119.20263672]
[91.81632996 -123.29501343]
[106.88047028 -121.06084442]
[119.73004913 -112.88721466]
[128.13879395 -100.19025421]
[130.64984131 -85.16978455]
[126.82814789 -70.42819214]
[117.33582306 -58.51955414]
[103.81748199 -51.50710678]
[104.75311279 -36.53631592]
[105.68874359 -21.56552505]
[106.62437439 -6.59473276]
[120.64108276 -1.25322008]
[131.30270386 -11.80451012]
[141.96434021 -22.35580063]
[152.62596130 -32.90708923]
[147.61119080 -47.32287216]
[149.35633850 -62.48589325]
[157.51490784 -75.38552856]
[170.46701050 -83.46053314]
[185.64099121 -85.10762024]
[200.02406311 -79.99976349]
[210.76043701 -69.15111542]
[215.71839905 -54.71569824]
[213.91355896 -39.55966949]
[205.70423889 -26.69226456]
[192.72044373 -18.66832352]
[177.54008484 -17.08100128]
[163.17724609 -22.24546432]
[152.51562500 -11.69417477]
[141.85400391 -1.14288402]
[131.19236755 9.40840626]
[124.00986481 22.57698822]
[120.91154480 37.25351334]
[117.81322479 51.93003845]
[114.71489716 66.60656738]
[111.61657715 81.28308868]
[121.97041321 98.39731598]
[114.20984650 116.83293915]
[119.40525818 130.90446472]
[124.60067749 144.97598267]
[129.79609680 159.04750061]
[141.19747925 149.59553528]
[154.94245911 152.17254639]
[161.33775330 163.67332458]
[175.24031067 169.30528259]
[189.14286804 174.93722534]
[203.59695435 168.54544067]
[218.30686951 174.32417297]
[224.54548645 188.84503174]
[218.61155701 203.49302673]
[204.02555847 209.57777405]
[189.44110107 203.48930359]
[183.51091003 188.83978271]
[169.60835266 183.20782471]
[155.70579529 177.57588196]
[145.38206482 182.19058228]
[133.65707397 178.32690430]
[134.28105164 193.31391907]
[134.90502930 208.30093384]
[135.52900696 223.28794861]
[136.15298462 238.27496338]
[136.77696228 253.26197815]
[137.40093994 268.24899292]
[138.02491760 283.23602295]
[138.64889526 298.22302246]
[139.27287292 313.21005249]
[153.96911621 316.66299438]
[167.18823242 323.95391846]
[177.94926453 334.54177856]
[185.45368958 347.64086914]
[189.14460754 362.27917480]
[188.74815369 377.37039185]
[184.29371643 391.79470825]
[176.11187744 404.48171997]
[164.80975342 414.48995972]
[151.22605896 421.07672119]
[136.36878967 423.75329590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 114]
[21 113]
[22 112]
[23 111]
[25 49]
[26 48]
[27 47]
[28 46]
[31 44]
[32 43]
[33 42]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[64 84]
[65 83]
[66 82]
[67 81]
[85 104]
[86 103]
[87 102]
[88 101]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
