%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAUAAAAGGGGGGGGGGGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAxxxxxxxxxxUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUCCCCCCCCCCUCCGAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[128.57489014 549.11486816]
[114.08519745 544.90643311]
[101.17897034 537.09033203]
[90.73616791 526.19946289]
[83.46880341 512.97644043]
[79.87237549 498.32284546]
[80.19210052 483.23776245]
[84.40616608 468.74969482]
[92.22726440 455.84649658]
[103.12213135 445.40789795]
[116.34793854 438.14562988]
[131.00292969 434.55487061]
[131.31498718 419.55810547]
[131.62704468 404.56134033]
[131.93910217 389.56460571]
[132.25115967 374.56784058]
[132.56321716 359.57110596]
[132.87527466 344.57434082]
[133.18733215 329.57757568]
[133.49938965 314.58084106]
[133.81144714 299.58407593]
[134.12348938 284.58731079]
[146.80125427 243.50465393]
[141.02497864 229.66143799]
[135.24870300 215.81820679]
[124.15153503 210.90290833]
[119.24526978 199.36395264]
[123.67867279 187.20671082]
[118.19164276 173.24630737]
[112.70461273 159.28591919]
[107.21758270 145.32553101]
[101.73055267 131.36514282]
[96.24351501 117.40475464]
[60.45016479 93.91622162]
[51.43263626 81.92938995]
[42.41510773 69.94255829]
[33.39757538 57.95572281]
[24.38004684 45.96889114]
[13.71842098 35.41760254]
[1.63843226 26.52525139]
[-10.44155598 17.63290215]
[-22.52154350 8.74055290]
[-34.60153198 -0.15179715]
[-46.68152237 -9.04414654]
[-62.10593414 -6.87038422]
[-74.23008728 -16.06057549]
[-76.20738220 -30.77879143]
[-88.28736877 -39.67114258]
[-102.66120148 -34.06788254]
[-117.77803802 -37.14759827]
[-128.81416321 -47.92755890]
[-132.24798584 -62.96791840]
[-126.98377228 -77.46935272]
[-114.70133209 -86.80451202]
[-99.31993866 -87.99457550]
[-85.74773407 -80.65979767]
[-78.31557465 -67.14068604]
[-79.39501953 -51.75112915]
[-67.31503296 -42.85877991]
[-52.67399597 -45.34387207]
[-40.29649353 -36.49784851]
[-37.78917313 -21.12413597]
[-25.70918274 -12.23178577]
[-13.62919426 -3.33943582]
[-1.54920638 5.55291367]
[10.53078175 14.44526386]
[22.61076927 23.33761406]
[17.49523926 9.23685646]
[18.05845070 -5.75256681]
[24.21770287 -19.42968750]
[35.06860352 -29.78622818]
[49.01786423 -35.30148697]
[64.01725006 -35.16563797]
[77.86432648 -29.39862251]
[88.52586365 -18.84724236]
[94.43637848 -5.06080484]
[94.72799683 9.93636036]
[89.35790253 23.94214821]
[79.11460876 34.90002060]
[65.50219727 41.20098495]
[50.51943207 41.91983795]
[36.36687851 36.95136261]
[45.38441086 48.93819427]
[54.40193939 60.92502594]
[63.41946793 72.91185760]
[72.43699646 84.89868927]
[79.92239380 85.36650848]
[94.89318848 86.30213165]
[102.37857819 86.76995087]
[106.42752838 71.47561646]
[120.84135437 67.72181702]
[131.28115845 56.95100403]
[137.96340942 41.36948013]
[154.78582764 43.47717667]
[157.41740417 60.22564316]
[142.05197144 67.39081573]
[131.61216736 78.16162872]
[128.30993652 92.68555450]
[113.14939117 97.20976257]
[110.20391083 111.91772461]
[115.69094086 125.87811279]
[121.17797089 139.83850098]
[126.66500092 153.79888916]
[132.15203857 167.75927734]
[137.63906860 181.71966553]
[152.29678345 192.81611633]
[149.09191895 210.04194641]
[154.86819458 223.88516235]
[160.64447021 237.72837830]
[163.95634460 223.09855652]
[176.99131775 215.67631531]
[191.26287842 220.29393005]
[197.47949219 233.94508362]
[191.59378052 247.74212646]
[177.43811035 252.70246887]
[191.85032654 256.86035156]
[206.26254272 261.01824951]
[220.94522095 254.55305481]
[235.08692932 262.12878418]
[237.83937073 277.93395996]
[227.09111023 289.84420776]
[211.08728027 288.72302246]
[202.10466003 275.43045044]
[187.69244385 271.27258301]
[173.28022766 267.11468506]
[167.24023438 271.56085205]
[176.13240051 283.64099121]
[164.05213928 292.53295898]
[155.16024780 280.45321655]
[149.12025452 284.89938354]
[148.80819702 299.89614868]
[148.49613953 314.89288330]
[148.18408203 329.88964844]
[147.87202454 344.88638306]
[147.55996704 359.88314819]
[147.24790955 374.87991333]
[146.93585205 389.87664795]
[146.62379456 404.87341309]
[146.31173706 419.87017822]
[145.99969482 434.86691284]
[160.49263000 439.06420898]
[173.40489197 446.87036133]
[183.85609436 457.75311279]
[191.13366699 470.97052002]
[194.74140930 485.62133789]
[194.43333435 500.70666504]
[190.23045349 515.19799805]
[182.41932678 528.10723877]
[171.53251648 538.55426025]
[158.31231689 545.82672119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 109]
[24 108]
[25 107]
[28 105]
[29 104]
[30 103]
[31 102]
[32 101]
[33 100]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[47 59]
[48 58]
[89 99]
[91 97]
[92 96]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
