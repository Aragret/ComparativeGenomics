%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUACUCCUGGGGGGGGGGACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUAxxxxxxxxxxCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCU\
) } def
/len { sequence length } bind def

/coor [
[83.60372162 375.22042847]
[70.38352203 367.94796753]
[59.49671555 357.50094604]
[51.68558502 344.59170532]
[47.48270416 330.10040283]
[47.17463303 315.01504517]
[50.78237534 300.36422729]
[58.05994797 287.14685059]
[68.51115417 276.26406860]
[81.42341614 268.45794678]
[95.91635132 264.26065063]
[95.60429382 249.26388550]
[95.29224396 234.26713562]
[94.98018646 219.27038574]
[94.66812897 204.27363586]
[94.35607147 189.27687073]
[94.04401398 174.28012085]
[93.73195648 159.28337097]
[93.41990662 144.28662109]
[93.10784912 129.28987122]
[87.41616058 127.33212280]
[82.22799683 124.28072357]
[77.75094604 120.25777435]
[74.16416168 115.42424774]
[71.61115265 109.97353363]
[70.19408417 104.12374878]
[55.29218292 102.41105652]
[40.39028168 100.69837189]
[32.96267700 113.93114471]
[21.06671333 123.28684998]
[6.53439951 127.36428070]
[-8.41135883 125.57210541]
[-21.49677086 118.21433258]
[-30.74308395 106.43930817]
[-34.76580048 92.06060791]
[-49.66770172 90.34792328]
[-64.56960297 88.63523102]
[-79.47150421 86.92253876]
[-94.29346466 93.93977356]
[-107.62580872 84.39092255]
[-105.75336456 68.09902191]
[-90.60234833 61.82378769]
[-77.75881958 72.02063751]
[-62.85691452 73.73332977]
[-47.95501328 75.44602203]
[-33.05311203 77.15870667]
[-25.87325668 64.06752777]
[-14.19668579 54.69719696]
[0.21676166 50.49989319]
[15.17940998 52.14511490]
[28.40778160 59.41311646]
[37.87108994 71.22365570]
[42.10297012 85.79647064]
[57.00487137 87.50915527]
[71.90677643 89.22184753]
[76.17150879 81.62607574]
[82.43338013 75.57027435]
[90.16754150 71.56198120]
[98.72579956 69.93716431]
[107.39083862 70.83197784]
[115.43643951 74.17144775]
[126.09806824 63.62015533]
[136.75968933 53.06886673]
[147.42132568 42.51757812]
[158.08294678 31.96628571]
[148.69464111 20.24973488]
[140.58251953 7.61601067]
[133.83541870 -5.79646444]
[128.52729797 -19.84073639]
[124.71630859 -34.36292648]
[122.44420624 -49.20392609]
[121.73587036 -64.20112610]
[122.59908295 -79.19020844]
[125.02436829 -94.00694275]
[128.98516846 -108.48899078]
[134.43807983 -122.47768402]
[141.32334900 -135.81974792]
[149.56555176 -148.36900330]
[159.07437134 -159.98796082]
[169.74563599 -170.54930115]
[181.46241760 -179.93730164]
[194.09634399 -188.04913330]
[207.50897217 -194.79589844]
[221.55337524 -200.10368347]
[236.07566833 -203.91432190]
[250.91671753 -206.18606567]
[265.91394043 -206.89402771]
[280.90298462 -206.03045654]
[295.71966553 -203.60481262]
[310.20162964 -199.64366150]
[324.19018555 -194.19041443]
[337.53207397 -187.30480957]
[350.08114624 -179.06231689]
[361.69985962 -169.55320740]
[372.26092529 -158.88168335]
[381.64865112 -147.16467285]
[389.76019287 -134.53056335]
[396.50662231 -121.11775970]
[401.81405640 -107.07322693]
[405.62435913 -92.55084991]
[407.89572144 -77.70973969]
[408.60333252 -62.71250916]
[407.73941040 -47.72346878]
[405.31338501 -32.90684891]
[401.35189819 -18.42499161]
[395.89831543 -4.43656397]
[389.01239014 8.90516663]
[380.76956177 21.45402145]
[371.26019287 33.07250977]
[360.58840942 43.63332748]
[348.87118530 53.02077484]
[336.23684692 61.13198853]
[322.82388306 67.87809753]
[308.77923584 73.18519592]
[294.25677490 76.99513245]
[279.41558838 79.26615906]
[264.41833496 79.97339630]
[249.42932129 79.10909271]
[234.61276245 76.68272400]
[220.13101196 72.72087860]
[206.14271545 67.26694489]
[192.80114746 60.38069916]
[180.25248718 52.13758469]
[168.63423157 42.62791061]
[157.97261047 53.17920303]
[147.31098938 63.73049164]
[136.64935303 74.28178406]
[125.98773193 84.83307648]
[127.88836670 111.29763794]
[108.10459900 128.97781372]
[108.41665649 143.97456360]
[108.72871399 158.97131348]
[109.04077148 173.96806335]
[109.35282898 188.96482849]
[109.66487885 203.96157837]
[109.97693634 218.95832825]
[110.28899384 233.95507812]
[110.60105133 248.95184326]
[110.91310883 263.94857788]
[125.56809998 267.53936768]
[138.79391479 274.80160522]
[149.68878174 285.24020386]
[157.50987244 298.14343262]
[161.72393799 312.63150024]
[162.04367065 327.71658325]
[158.44723511 342.37017822]
[151.17987061 355.59320068]
[140.73707581 366.48403931]
[127.83084106 374.30014038]
[113.34115601 378.50863647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 55]
[27 54]
[28 53]
[35 46]
[36 45]
[37 44]
[38 43]
[61 128]
[62 127]
[63 126]
[64 125]
[65 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
