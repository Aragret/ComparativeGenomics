%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACGUAGGGGGGGGGGAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACxxxxxxxxxxCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCCCCCCCCCCCUAACAACCUA\
) } def
/len { sequence length } bind def

/coor [
[93.41029358 461.59100342]
[79.38835144 456.03799438]
[67.18839264 447.17166138]
[57.57732391 435.54934692]
[51.15929794 421.90164185]
[48.33776093 407.08645630]
[49.29007721 392.03509521]
[53.95638275 377.69366455]
[62.04335022 364.96371460]
[73.04262543 354.64544678]
[86.26278687 347.38745117]
[100.87279510 343.64602661]
[100.87279510 328.64602661]
[100.87279510 313.64602661]
[100.87279510 298.64602661]
[100.87279510 283.64602661]
[100.87279510 268.64602661]
[100.87279510 253.64602661]
[100.87279510 238.64602661]
[100.87279510 223.64602661]
[100.87279510 208.64602661]
[89.36458588 201.81130981]
[82.69647980 190.08087158]
[82.71124268 176.47920227]
[89.51237488 164.57492065]
[101.40879059 157.54441833]
[101.71676636 142.54757690]
[102.02474976 127.55073547]
[78.27344513 110.91726685]
[84.10992432 86.26201630]
[77.01351929 73.04682922]
[69.91711426 59.83164597]
[62.82070923 46.61646271]
[46.95520020 37.32581329]
[48.10796738 19.84108543]
[40.74172592 6.77439022]
[32.97658920 -6.05926371]
[24.81992531 -18.64770317]
[16.66325951 -31.23614311]
[8.50659370 -43.82458115]
[0.34992769 -56.41302109]
[-7.80673790 -69.00145721]
[-21.49543762 -62.79846573]
[-35.95578384 -58.70504761]
[-50.86472321 -56.81264877]
[-65.88919067 -57.16355515]
[-80.69352722 -59.74991989]
[-94.94699860 -64.51396942]
[-108.33118439 -71.34926605]
[-120.54706573 -80.10311127]
[-131.32174683 -90.57994080]
[-140.41450500 -102.54569244]
[-147.62222290 -115.73305511]
[-152.78385925 -129.84741211]
[-155.78411865 -144.57345581]
[-156.55595398 -159.58218384]
[-155.08213806 -174.53829956]
[-151.39558411 -189.10768127]
[-145.57865906 -202.96484375]
[-137.76132202 -215.80021667]
[-128.11819458 -227.32705688]
[-116.86473083 -237.28784180]
[-104.25231934 -245.46003723]
[-90.56273651 -251.66107178]
[-76.10180664 -255.75244141]
[-61.19260025 -257.64270020]
[-46.16818619 -257.28967285]
[-31.36421776 -254.70118713]
[-17.11142349 -249.93511963]
[-3.72821331 -243.09791565]
[8.48642540 -234.34233093]
[19.25961304 -223.86396790]
[28.35067368 -211.89691162]
[35.55651093 -198.70852661]
[40.71613693 -184.59342957]
[43.71429443 -169.86697388]
[44.48399353 -154.85812378]
[43.00804520 -139.90222168]
[39.31941986 -125.33335876]
[33.50052261 -111.47702026]
[25.68135071 -98.64276123]
[16.03658867 -87.11730194]
[4.78170109 -77.15812683]
[12.93836689 -64.56968689]
[21.09503365 -51.98124695]
[29.25169754 -39.39280701]
[37.40836334 -26.80436897]
[45.56502914 -14.21592999]
[48.98192978 -13.13333988]
[52.02769470 -10.30616188]
[53.87165070 -5.93518639]
[53.80842209 -0.59184945]
[61.17465973 12.47484589]
[72.77181244 16.04811478]
[79.00335693 26.92649651]
[76.03589630 39.52006149]
[83.13229370 52.73524475]
[90.22869873 65.95042419]
[97.32510376 79.16561127]
[105.06302643 78.25225067]
[113.06436920 80.28202057]
[120.19374084 85.30059814]
[125.32852936 92.91381836]
[127.52849579 102.30748749]
[142.52770996 102.15348816]
[157.52691650 101.99949646]
[172.52612305 101.84549713]
[178.16630554 87.72966003]
[188.78262329 76.85021973]
[202.75617981 70.86621857]
[217.95608521 70.69016266]
[232.06449890 76.34890747]
[242.92996216 86.97953033]
[248.89558411 100.96093750]
[249.05163574 116.16107178]
[243.37434387 130.26202393]
[232.72943115 141.11349487]
[218.74018860 147.06071472]
[203.53985596 147.19677734]
[189.44639587 141.50093079]
[178.60893250 130.84176636]
[172.68011475 116.84470367]
[157.68090820 116.99870300]
[142.68170166 117.15270233]
[127.68249512 117.30669403]
[117.02158356 127.85871124]
[116.71360779 142.85554504]
[116.40563202 157.85238647]
[130.00421143 167.86132812]
[134.93057251 183.83816528]
[129.43972778 199.45425415]
[115.87279510 208.64602661]
[115.87279510 223.64602661]
[115.87279510 238.64602661]
[115.87279510 253.64602661]
[115.87279510 268.64602661]
[115.87279510 283.64602661]
[115.87279510 298.64602661]
[115.87279510 313.64602661]
[115.87279510 328.64602661]
[115.87279510 343.64602661]
[130.48280334 347.38745117]
[143.70297241 354.64544678]
[154.70223999 364.96371460]
[162.78921509 377.69366455]
[167.45552063 392.03509521]
[168.40783691 407.08645630]
[165.58628845 421.90164185]
[159.16827393 435.54934692]
[149.55718994 447.17166138]
[137.35723877 456.03799438]
[123.33529663 461.59100342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 128]
[27 127]
[28 126]
[30 99]
[31 98]
[32 97]
[33 96]
[35 93]
[36 92]
[37 88]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[104 125]
[105 124]
[106 123]
[107 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
