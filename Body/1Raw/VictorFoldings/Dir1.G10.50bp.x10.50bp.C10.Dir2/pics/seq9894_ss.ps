%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCUCCUGGGGGGGGGGAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCxxxxxxxxxxAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCCCCCCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[79.18245697 153.38011169]
[66.07752228 146.17436218]
[55.28377151 135.82269287]
[47.53659821 123.03036499]
[43.36383057 108.66895294]
[43.04976654 93.71691132]
[46.61579895 79.19294739]
[53.81896973 66.08659363]
[64.16851807 55.29081345]
[76.95932007 47.54112625]
[91.31991577 43.36553574]
[91.00785828 28.36878395]
[90.69580078 13.37202930]
[90.38374329 -1.62472427]
[90.07168579 -16.62147713]
[89.75962830 -31.61823082]
[89.44757843 -46.61498642]
[89.13552094 -61.61174011]
[88.82346344 -76.60848999]
[88.51140594 -91.60524750]
[88.19934845 -106.60199738]
[87.88729095 -121.59875488]
[87.57524109 -136.59550476]
[72.58214569 -137.18092346]
[57.65089798 -138.66194153]
[42.83494949 -141.03326416]
[28.18733406 -144.28639221]
[13.76048851 -148.40969849]
[-0.39394471 -153.38841248]
[-14.22529411 -159.20469666]
[-27.68404770 -165.83775330]
[-40.72202682 -173.26383972]
[-53.29255676 -181.45634460]
[-65.35063934 -190.38597107]
[-76.85311127 -200.02073669]
[-87.75879669 -210.32615662]
[-98.02864838 -221.26533508]
[-107.62590790 -232.79911804]
[-116.51622009 -244.88619995]
[-124.66776276 -257.48333740]
[-132.05134583 -270.54544067]
[-138.64054871 -284.02572632]
[-144.41177368 -297.87591553]
[-149.34437561 -312.04650879]
[-153.42068481 -326.48669434]
[-156.62609863 -341.14483643]
[-158.94917297 -355.96841431]
[-160.38156128 -370.90441895]
[-160.91816711 -385.89932251]
[-160.55703735 -400.89950562]
[-159.29946899 -415.85122681]
[-157.14999390 -430.70095825]
[-154.11627197 -445.39559937]
[-150.20918274 -459.88250732]
[-145.44271851 -474.10980225]
[-139.83392334 -488.02658081]
[-133.40287781 -501.58303833]
[-126.17260742 -514.73059082]
[-118.16900635 -527.42224121]
[-109.42070770 -539.61254883]
[-99.95903778 -551.25781250]
[-89.81787109 -562.31640625]
[-79.03350067 -572.74865723]
[-67.64453888 -582.51733398]
[-55.69174576 -591.58746338]
[-43.21792221 -599.92645264]
[-30.26771545 -607.50457764]
[-16.88748550 -614.29461670]
[-3.12512827 -620.27233887]
[10.97008896 -625.41632080]
[25.34770775 -629.70812988]
[39.95626068 -633.13238525]
[54.74345398 -635.67687988]
[69.65634918 -637.33245850]
[84.64157104 -638.09326172]
[99.64546204 -637.95648193]
[114.61431885 -636.92266846]
[129.49456787 -634.99554443]
[144.23291016 -632.18188477]
[158.77662659 -628.49188232]
[173.07362366 -623.93872070]
[187.07272339 -618.53869629]
[200.72383118 -612.31109619]
[213.97807312 -605.27825928]
[226.78799438 -597.46533203]
[239.10772705 -588.90032959]
[250.89320374 -579.61389160]
[262.10220337 -569.63922119]
[272.69461060 -559.01208496]
[282.63250732 -547.77044678]
[291.88034058 -535.95465088]
[300.40496826 -523.60693359]
[308.17590332 -510.77151489]
[315.16531372 -497.49432373]
[321.34814453 -483.82290649]
[326.70233154 -469.80618286]
[331.20867920 -455.49435425]
[334.85104370 -440.93865967]
[337.61639404 -426.19116211]
[339.49484253 -411.30468750]
[340.47964478 -396.33251953]
[340.56726074 -381.32827759]
[339.75741577 -366.34564209]
[338.05300903 -351.43823242]
[335.46011353 -336.65945435]
[331.98803711 -322.06219482]
[327.64916992 -307.69869995]
[322.45910645 -293.62039185]
[316.43637085 -279.87768555]
[309.60250854 -266.51974487]
[301.98205566 -253.59442139]
[293.60223389 -241.14796448]
[284.49307251 -229.22494507]
[274.68716431 -217.86802673]
[264.21960449 -207.11785889]
[253.12789917 -197.01295471]
[241.45170593 -187.58946228]
[229.23284912 -178.88111877]
[216.51507568 -170.91911316]
[203.34390259 -163.73193359]
[189.76646423 -157.34530640]
[175.83139038 -151.78210449]
[161.58856201 -147.06224060]
[147.08894348 -143.20260620]
[132.38446045 -140.21701050]
[117.52775574 -138.11616516]
[102.57199097 -136.90756226]
[102.88404846 -121.91081238]
[103.19610596 -106.91405487]
[103.50816345 -91.91730499]
[103.82021332 -76.92054749]
[104.13227081 -61.92379379]
[104.44432831 -46.92704010]
[104.75638580 -31.93028831]
[105.06844330 -16.93353462]
[105.38050079 -1.93678057]
[105.69255066 13.05997276]
[106.00460815 28.05672646]
[106.31666565 43.05348206]
[120.83852386 46.62807846]
[133.94062805 53.83897781]
[144.73031616 64.19489288]
[152.47245789 76.99025726]
[156.63957214 91.35330963]
[156.94775391 106.30547333]
[153.37602234 120.82803345]
[146.16769409 133.93154907]
[135.81390381 144.72326660]
[123.02005768 152.46792603]
[108.65782166 156.63787842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
