%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAUCGCCCUGGGGGGGGGGCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCxxxxxxxxxxGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCCCUACUCAUCGCACU\
) } def
/len { sequence length } bind def

/coor [
[82.94261932 422.50552368]
[70.41000366 414.17907715]
[59.67985153 403.63107300]
[51.14005280 391.24282837]
[45.09931183 377.46218872]
[41.77599716 362.78732300]
[41.29025269 347.74868774]
[43.65962982 332.88992310]
[48.79847717 318.74819946]
[56.52103424 305.83468628]
[66.54813385 294.61624146]
[78.51729584 285.49835205]
[91.99584961 278.81066895]
[106.49655151 274.79495239]
[105.29722595 259.84295654]
[104.09790039 244.89099121]
[102.89857483 229.93901062]
[101.69924164 214.98704529]
[100.49991608 200.03506470]
[99.30059052 185.08308411]
[98.10126495 170.13110352]
[96.90193939 155.17913818]
[95.70260620 140.22715759]
[80.63668823 135.52117920]
[68.51814270 125.40834808]
[61.19159698 111.42800903]
[59.77225494 95.70815277]
[64.47615814 80.64158630]
[74.58731079 68.52164459]
[88.56664276 61.19317245]
[87.06838989 46.26818466]
[85.57012939 31.34319878]
[84.07186890 16.41821098]
[82.57361603 1.49322534]
[67.57183838 1.88557386]
[52.58205414 1.16892588]
[37.68613052 -0.65280455]
[22.96542549 -3.56966758]
[8.50034046 -7.56573200]
[-5.63012171 -12.61917305]
[-19.34878349 -18.70238876]
[-32.58071899 -25.78215790]
[-45.25365829 -33.81980896]
[-57.29838562 -42.77144241]
[-68.64911652 -52.58816910]
[-79.24385834 -63.21637344]
[-89.02474213 -74.59800720]
[-97.93834686 -86.67090607]
[-105.93598938 -99.36912537]
[-112.97399139 -112.62332916]
[-119.01391602 -126.36110687]
[-124.02276611 -140.50743103]
[-127.97319794 -154.98504639]
[-130.84361267 -169.71487427]
[-132.61836243 -184.61647034]
[-133.28773499 -199.60844421]
[-132.84808350 -214.60890198]
[-131.30178833 -229.53593445]
[-128.65733337 -244.30799866]
[-124.92912292 -258.84442139]
[-120.13754272 -273.06582642]
[-114.30875397 -286.89450073]
[-107.47459412 -300.25494385]
[-99.67238617 -313.07418823]
[-90.94475555 -325.28219604]
[-81.33935547 -336.81231689]
[-70.90865326 -347.60156250]
[-59.70961761 -357.59100342]
[-47.80342102 -366.72607422]
[-35.25508118 -374.95687866]
[-22.13314247 -382.23849487]
[-8.50926781 -388.53115845]
[5.54213190 -393.80044556]
[19.94431114 -398.01760864]
[34.61861038 -401.15960693]
[49.48488235 -403.20928955]
[64.46192932 -404.15545654]
[79.46795654 -403.99291992]
[94.42099762 -402.72262573]
[109.23939514 -400.35144043]
[123.84220123 -396.89236450]
[138.14967346 -392.36428833]
[152.08364868 -386.79190063]
[165.56805420 -380.20568848]
[178.52920532 -372.64160156]
[190.89634705 -364.14093018]
[202.60191345 -354.75015259]
[213.58197021 -344.52050781]
[223.77655029 -333.50790405]
[233.12998962 -321.77246094]
[241.59118652 -309.37829590]
[249.11392212 -296.39306641]
[255.65711975 -282.88775635]
[261.18505859 -268.93609619]
[265.66751099 -254.61425781]
[269.08001709 -240.00048828]
[271.40393066 -225.17462158]
[272.62658691 -210.21760559]
[272.74124146 -195.21113586]
[271.74734497 -180.23716736]
[269.65029907 -165.37751770]
[266.46151733 -150.71330261]
[262.19848633 -136.32464600]
[256.88442993 -122.29010773]
[250.54838562 -108.68636322]
[243.22499084 -95.58769989]
[234.95420837 -83.06566620]
[225.78121948 -71.18864441]
[215.75613403 -60.02151108]
[204.93370056 -49.62525558]
[193.37301636 -40.05665970]
[181.13725281 -31.36798477]
[168.29321289 -23.60668373]
[154.91104126 -16.81514740]
[141.06385803 -11.03047085]
[126.82726288 -6.28424644]
[112.27902222 -2.60239744]
[97.49859619 -0.00503290]
[98.99685669 14.91995335]
[100.49511719 29.84494019]
[101.99337769 44.76992798]
[103.49163055 59.69491196]
[117.04853821 63.31159973]
[128.55474854 71.34136200]
[136.62625122 82.81834412]
[140.29214478 96.36203003]
[139.11148071 110.34330750]
[133.22627258 123.08043671]
[123.34442139 133.04133606]
[110.65458679 139.02783203]
[111.85391235 153.97979736]
[113.05323792 168.93177795]
[114.25257111 183.88375854]
[115.45189667 198.83573914]
[116.65122223 213.78771973]
[117.85054779 228.73968506]
[119.04987335 243.69166565]
[120.24920654 258.64364624]
[121.44853210 273.59561157]
[136.40393066 275.24862671]
[150.77616882 279.70233154]
[164.04566956 286.79577637]
[175.73275757 296.27249146]
[185.41497803 307.78991699]
[192.74229431 320.93173218]
[197.44982910 335.22283936]
[199.36743164 350.14660645]
[198.42575073 365.16360474]
[194.65885925 379.73092651]
[188.20291138 393.32199097]
[179.29129028 405.44549561]
[168.24612427 415.66317749]
[155.46672058 423.60568237]
[141.41503906 428.98587036]
[126.59902191 431.60928345]
[111.55427551 431.38107300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[30 122]
[31 121]
[32 120]
[33 119]
[34 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
