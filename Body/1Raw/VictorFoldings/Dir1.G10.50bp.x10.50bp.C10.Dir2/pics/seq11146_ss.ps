%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUACUAAGGGGGGGGGGCAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAxxxxxxxxxxACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAACCCCCCCCCCUCAAUACUAA\
) } def
/len { sequence length } bind def

/coor [
[270.91616821 151.59284973]
[259.18460083 142.23980713]
[247.97196960 132.27053833]
[237.31063843 121.71378326]
[227.23132324 110.59998322]
[217.76310730 98.96118164]
[208.93325806 86.83094025]
[200.76725769 74.24422455]
[193.28863525 61.23732376]
[179.90235901 68.00543976]
[166.51606750 74.77355194]
[153.12977600 81.54167175]
[139.74349976 88.30978394]
[126.35721588 95.07789612]
[112.97093201 101.84601593]
[99.87777710 109.16512299]
[87.10041809 117.02254486]
[74.32305908 124.87997437]
[61.54570389 132.73739624]
[48.76834488 140.59481812]
[47.70933914 156.07571411]
[37.72734451 167.95593262]
[22.66064262 171.66726685]
[8.30268383 165.78265381]
[0.17439984 152.56484985]
[1.40128016 137.09634399]
[11.51156521 125.32511902]
[26.61764336 121.77744293]
[40.91091919 127.81746674]
[53.68827820 119.96003723]
[66.46563721 112.10261536]
[79.24298859 104.24518585]
[92.02034760 96.38776398]
[92.97435760 93.41727448]
[95.05882263 90.73965454]
[98.16279602 88.78483582]
[102.01425934 87.93383026]
[106.20281219 88.45973206]
[119.58909607 81.69161224]
[132.97538757 74.92350006]
[146.36166382 68.15538788]
[159.74795532 61.38726807]
[173.13423157 54.61915588]
[186.52052307 47.85103989]
[180.47914124 34.11747742]
[175.18365479 20.07942772]
[170.64930725 5.77737379]
[166.88919067 -8.74745083]
[163.91412354 -23.45316696]
[161.73271179 -38.29737473]
[160.35124207 -53.23727417]
[159.77368164 -68.22978973]
[160.00170898 -83.23168945]
[161.03465271 -98.19972229]
[162.86953735 -113.09073639]
[165.50108337 -127.86178589]
[168.92170715 -142.47029114]
[173.12152100 -156.87413025]
[178.08843994 -171.03176880]
[183.80813599 -184.90238953]
[190.26411438 -198.44599915]
[197.43775940 -211.62355042]
[205.30839539 -224.39704895]
[213.85331726 -236.72966003]
[223.04791260 -248.58583069]
[232.86563110 -259.93136597]
[243.27819824 -270.73358154]
[254.25558472 -280.96127319]
[265.76611328 -290.58502197]
[277.77664185 -299.57702637]
[290.25253296 -307.91140747]
[303.15777588 -315.56408691]
[316.45516968 -322.51303101]
[330.10641479 -328.73822021]
[344.07211304 -334.22164917]
[358.31204224 -338.94754028]
[372.78509521 -342.90228271]
[387.44955444 -346.07443237]
[402.26312256 -348.45489502]
[417.18313599 -350.03677368]
[432.16656494 -350.81552124]
[447.17016602 -350.78887939]
[462.15072632 -349.95690918]
[477.06500244 -348.32205200]
[491.87005615 -345.88900757]
[506.52316284 -342.66476440]
[520.98205566 -338.65866089]
[535.20507812 -333.88220215]
[549.15124512 -328.34918213]
[562.78027344 -322.07559204]
[576.05291748 -315.07943726]
[588.93090820 -307.38098145]
[601.37707520 -299.00234985]
[613.35559082 -289.96771240]
[624.83190918 -280.30316162]
[635.77288818 -270.03652954]
[646.14703369 -259.19738770]
[655.92437744 -247.81706238]
[665.07678223 -235.92831421]
[673.57788086 -223.56542969]
[681.40307617 -210.76405334]
[688.52990723 -197.56111145]
[694.93768311 -183.99465942]
[700.60809326 -170.10380554]
[705.52471924 -155.92860413]
[709.67333984 -141.50994873]
[713.04205322 -126.88938141]
[715.62109375 -112.10907745]
[717.40307617 -97.21163940]
[718.38287354 -82.24003601]
[718.55761719 -67.23741913]
[717.92681885 -52.24704742]
[716.49224854 -37.31214905]
[714.25811768 -22.47578430]
[711.23089600 -7.78072834]
[707.41918945 6.73064947]
[702.83404541 21.01650810]
[697.48876953 35.03565979]
[691.39862061 48.74767685]
[684.58129883 62.11303329]
[677.05633545 75.09318542]
[668.84552002 87.65071106]
[659.97247314 99.74940491]
[650.46282959 111.35437775]
[640.34393311 122.43217468]
[629.64508057 132.95085144]
[618.39697266 142.88008118]
[606.63214111 152.19125366]
[594.38446045 160.85748291]
[581.68927002 168.85380554]
[568.58319092 176.15718079]
[555.10394287 182.74652100]
[541.29046631 188.60284424]
[527.18255615 193.70925903]
[512.82086182 198.05104065]
[498.24682617 201.61569214]
[483.50247192 204.39289856]
[468.63027954 206.37467957]
[453.67318726 207.55531311]
[438.67425537 207.93139648]
[423.67678833 207.50184631]
[408.72396851 206.26789856]
[393.85894775 204.23312378]
[379.12460327 201.40335083]
[364.56335449 197.78678894]
[350.21725464 193.39382935]
[336.12762451 188.23715210]
[322.33508301 182.33161926]
[308.87942505 175.69427490]
[295.79943848 168.34422302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
