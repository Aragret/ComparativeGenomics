%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAACACCCGGGGGGGGGGAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACAxxxxxxxxxxUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCCCCCCCCCCCUUAAACACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.93508911]
[71.19830322 359.91906738]
[59.48964310 350.38964844]
[50.78712082 338.05398560]
[45.73651886 323.82748413]
[44.71262741 308.76577759]
[47.79142761 293.98663330]
[54.74444962 280.58670044]
[65.05573273 269.56036377]
[77.96011353 261.72586060]
[92.50000000 257.66455078]
[92.50000000 242.66455078]
[92.50000000 227.66455078]
[92.50000000 212.66455078]
[92.50000000 197.66455078]
[92.50000000 182.66455078]
[92.50000000 167.66455078]
[92.50000000 152.66455078]
[92.50000000 137.66455078]
[92.50000000 122.66454315]
[80.64824677 113.98002625]
[76.12675476 100.00000000]
[80.64824677 86.01997375]
[92.50000000 77.33545685]
[92.50000000 62.33545303]
[84.76270294 48.53528214]
[92.50000000 35.80801010]
[92.50000000 20.80801010]
[92.50000000 5.80800962]
[77.52785492 4.80592728]
[62.65607834 2.80605006]
[47.95109177 -0.18269028]
[33.47856522 -4.14694548]
[19.30314445 -9.06900978]
[5.48813915 -14.92689896]
[-7.90475035 -21.69445229]
[-20.81570816 -29.34144211]
[-33.18706894 -37.83371353]
[-44.96357727 -47.13334274]
[-56.09263992 -57.19879150]
[-66.52455139 -67.98509979]
[-76.21271515 -79.44410706]
[-85.11386108 -91.52462006]
[-93.18824005 -104.17269135]
[-100.39978790 -117.33182526]
[-106.71629333 -130.94325256]
[-112.10954285 -144.94618225]
[-116.55545807 -159.27807617]
[-120.03417206 -173.87492371]
[-122.53015137 -188.67152405]
[-124.03225708 -203.60179138]
[-124.53376770 -218.59904480]
[-124.03244019 -233.59631348]
[-122.53053284 -248.52659607]
[-120.03473663 -263.32324219]
[-116.55620575 -277.92010498]
[-112.11047363 -292.25207520]
[-106.71739197 -306.25506592]
[-100.40106201 -319.86657715]
[-93.18968201 -333.02578735]
[-85.11546326 -345.67398071]
[-76.21446228 -357.75460815]
[-66.52644348 -369.21371460]
[-56.09466934 -380.00015259]
[-44.96573257 -390.06576538]
[-33.18933868 -399.36553955]
[-20.81808662 -407.85797119]
[-7.90722561 -415.50512695]
[5.48557901 -422.27282715]
[19.30051231 -428.13088989]
[33.47587204 -433.05313110]
[47.94834518 -437.01757812]
[62.65329742 -440.00650024]
[77.52504730 -442.00656128]
[92.49717712 -443.00885010]
[107.50282288 -443.00885010]
[122.47495270 -442.00656128]
[137.34671021 -440.00650024]
[152.05165100 -437.01757812]
[166.52412415 -433.05313110]
[180.69949341 -428.13088989]
[194.51441956 -422.27282715]
[207.90722656 -415.50512695]
[220.81808472 -407.85797119]
[233.18934631 -399.36553955]
[244.96572876 -390.06576538]
[256.09466553 -380.00015259]
[266.52642822 -369.21371460]
[276.21447754 -357.75460815]
[285.11544800 -345.67398071]
[293.18966675 -333.02578735]
[300.40106201 -319.86657715]
[306.71740723 -306.25506592]
[312.11047363 -292.25207520]
[316.55621338 -277.92010498]
[320.03472900 -263.32324219]
[322.53051758 -248.52659607]
[324.03244019 -233.59631348]
[324.53375244 -218.59904480]
[324.03225708 -203.60179138]
[322.53015137 -188.67152405]
[320.03417969 -173.87492371]
[316.55545044 -159.27807617]
[312.10955811 -144.94618225]
[306.71627808 -130.94325256]
[300.39978027 -117.33182526]
[293.18823242 -104.17269135]
[285.11386108 -91.52462006]
[276.21270752 -79.44410706]
[266.52453613 -67.98509979]
[256.09265137 -57.19879150]
[244.96357727 -47.13334274]
[233.18707275 -37.83371353]
[220.81570435 -29.34144211]
[207.90475464 -21.69445229]
[194.51185608 -14.92689896]
[180.69685364 -9.06900978]
[166.52143860 -4.14694548]
[152.04890442 -0.18269028]
[137.34391785 2.80605006]
[122.47214508 4.80592728]
[107.50000000 5.80800962]
[107.50000000 20.80801010]
[107.50000000 35.80801010]
[115.23729706 48.53528214]
[107.50000000 62.33545303]
[107.50000000 77.33545685]
[119.35175323 86.01997375]
[123.87324524 100.00000000]
[119.35175323 113.98002625]
[107.50000000 122.66454315]
[107.50000000 137.66455078]
[107.50000000 152.66455078]
[107.50000000 167.66455078]
[107.50000000 182.66455078]
[107.50000000 197.66455078]
[107.50000000 212.66455078]
[107.50000000 227.66455078]
[107.50000000 242.66455078]
[107.50000000 257.66455078]
[122.03988647 261.72586060]
[134.94427490 269.56036377]
[145.25555420 280.58670044]
[152.20857239 293.98663330]
[155.28736877 308.76577759]
[154.26348877 323.82748413]
[149.21287537 338.05398560]
[140.51036072 350.38964844]
[128.80169678 359.91906738]
[114.95575714 365.93508911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 127]
[25 126]
[27 124]
[28 123]
[29 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
