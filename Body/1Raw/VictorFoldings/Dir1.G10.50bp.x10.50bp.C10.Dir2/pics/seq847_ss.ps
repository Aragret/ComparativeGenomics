%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUACCUCCUCAGGGGGGGGGGAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAxxxxxxxxxxCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGCCCCCCCCCCGCUUACAUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[83.22277832 373.95730591]
[69.34864044 368.10906982]
[56.99383926 359.50369263]
[46.69846344 348.51736450]
[38.91258621 335.63040161]
[33.97657394 321.40615845]
[32.10620499 306.46643066]
[33.38324356 291.46432495]
[37.75186920 277.05569458]
[45.02109528 263.87039185]
[54.87314987 252.48484802]
[66.87734222 243.39677429]
[80.50889587 237.00346375]
[95.17189789 233.58441162]
[94.87176514 218.58741760]
[94.57163239 203.59042358]
[94.27149963 188.59341431]
[93.97136688 173.59642029]
[93.67123413 158.59942627]
[93.37110901 143.60243225]
[93.07097626 128.60543823]
[92.77084351 113.60843658]
[87.76609802 99.46797943]
[78.56537628 87.62117004]
[69.36465454 75.77436829]
[60.16394043 63.92756653]
[50.96321869 52.08076096]
[39.03757095 52.92017365]
[28.30825233 47.92545700]
[21.41464424 38.45379639]
[19.98998260 26.94718552]
[24.27565956 16.30334663]
[15.55629349 4.09791183]
[-4.55729961 11.12384796]
[-25.84446716 11.23092079]
[-45.99367142 4.41918468]
[-62.82074356 -8.56063747]
[-74.50563812 -26.28987503]
[-79.78929901 -46.83695984]
[-78.10930634 -67.96786499]
[-69.65973663 -87.38900757]
[-81.22508240 -96.94111633]
[-92.79042816 -106.49321747]
[-104.35578156 -116.04532623]
[-115.92112732 -125.59743500]
[-127.48647308 -135.14953613]
[-140.69250488 -132.33563232]
[-152.92242432 -137.58161926]
[-159.78103638 -148.75750732]
[-158.94535828 -161.64813232]
[-170.31727600 -171.42973328]
[-181.68917847 -181.21133423]
[-196.44606018 -176.71266174]
[-211.28627014 -180.92829895]
[-221.47436523 -192.51304626]
[-223.75935364 -207.77024841]
[-217.41210938 -221.83140564]
[-204.45800781 -230.20962524]
[-189.03065491 -230.23149109]
[-176.05287170 -221.88998413]
[-169.66581726 -207.84686279]
[-171.90757751 -192.58325195]
[-160.53567505 -182.80165100]
[-149.16375732 -173.02003479]
[-132.48950195 -175.00984192]
[-119.25771332 -164.13130188]
[-117.93437195 -146.71488953]
[-106.36901855 -137.16278076]
[-94.80367279 -127.61067200]
[-83.23832703 -118.05857086]
[-71.67297363 -108.50646210]
[-60.10762787 -98.95435333]
[-52.63821411 -105.12088776]
[-44.32408142 -110.09624481]
[-35.35366058 -113.76655579]
[-25.93042374 -116.04756165]
[-16.26826668 -116.88652039]
[-6.58665514 -116.26342010]
[2.89436436 -114.19148254]
[11.95916080 -110.71688080]
[20.40142441 -105.91766357]
[28.02886200 -99.90208435]
[34.66757965 -92.80606842]
[40.16604614 -84.79022980]
[44.39854050 -76.03616333]
[47.26804733 -66.74237823]
[48.70846939 -57.11976242]
[48.68614197 -47.38682938]
[47.20063019 -37.76473236]
[44.28475952 -28.47225571]
[40.00388718 -19.72082138]
[34.45443344 -11.70969963]
[27.76172829 -4.62145424]
[36.48109436 7.58398151]
[54.65024185 9.45802593]
[65.91765594 24.23598862]
[62.81002426 42.88004303]
[72.01074219 54.72684479]
[81.21146393 66.57364655]
[90.41217804 78.42045593]
[99.61289978 90.26725769]
[107.24919128 85.75868988]
[118.47132111 87.64952087]
[133.47056580 87.79959869]
[148.46981812 87.94966888]
[163.46681213 87.64953613]
[178.44805908 86.89947510]
[193.42929077 86.14940643]
[184.48345947 74.10896301]
[188.12071228 59.55663300]
[201.67948914 53.14105988]
[215.23817444 59.55683899]
[218.87519836 74.10923004]
[209.92942810 86.14940643]
[224.91065979 86.89947510]
[239.89189148 87.64953613]
[252.70584106 77.99645233]
[268.20574951 82.13557434]
[274.50140381 96.89173126]
[266.76333618 110.94525909]
[250.92750549 113.51549530]
[239.14183044 102.63077545]
[224.16058350 101.88070679]
[209.17935181 101.13063812]
[194.17935181 101.13063812]
[179.19812012 101.88070679]
[164.21688843 102.63077545]
[161.57003784 105.03961945]
[157.60441589 106.25691986]
[152.90667725 105.66772461]
[148.31974792 102.94892120]
[133.32049561 102.79884338]
[118.32125092 102.64877319]
[107.76783752 113.30830383]
[108.06797028 128.30529785]
[108.36810303 143.30229187]
[108.66823578 158.29928589]
[108.96836853 173.29629517]
[109.26850128 188.29328918]
[109.56863403 203.29028320]
[109.86876678 218.28727722]
[110.16889191 233.28427124]
[124.95695496 236.11393738]
[138.83338928 241.95674133]
[151.19157410 250.55725098]
[161.49127197 261.53952026]
[169.28222656 274.42340088]
[174.22383118 288.64572144]
[176.10006714 303.58471680]
[174.82893372 318.58731079]
[170.46598816 332.99765015]
[163.20193481 346.18582153]
[153.35437012 357.57522583]
[141.35375977 366.66802979]
[127.72471619 373.06671143]
[113.06305695 376.49154663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[32 94]
[33 93]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[50 64]
[51 63]
[52 62]
[103 133]
[104 132]
[105 131]
[106 127]
[107 126]
[108 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
