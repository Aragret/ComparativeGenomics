%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGACAAAGGGGGGGGGGACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAAxxxxxxxxxxAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCCCCCCCCCCCUAACAAA\
) } def
/len { sequence length } bind def

/coor [
[120.68075562 384.57409668]
[106.83481598 378.55807495]
[95.12615204 369.02865601]
[86.42362976 356.69299316]
[81.37302399 342.46646118]
[80.34913635 327.40478516]
[83.42793274 312.62561035]
[90.38095856 299.22567749]
[100.69223785 288.19934082]
[113.59661865 280.36483765]
[128.13650513 276.30352783]
[128.13650513 261.30352783]
[128.13650513 246.30352783]
[128.13650513 231.30352783]
[128.13650513 216.30352783]
[128.13650513 201.30352783]
[128.13650513 186.30352783]
[128.13650513 171.30352783]
[128.13650513 156.30352783]
[128.13650513 141.30352783]
[128.13650513 126.30353546]
[128.13650513 111.30353546]
[98.01245880 126.75157928]
[77.30561066 105.40203094]
[62.37129974 103.99972534]
[47.43699265 102.59741974]
[32.50268555 101.19512177]
[17.56837845 99.79281616]
[12.47748280 113.98906708]
[4.01538086 126.47280121]
[-7.28599215 136.45928955]
[-20.71622276 143.32075500]
[-35.43107605 146.62588501]
[-50.50556564 146.16691589]
[-64.99208832 141.97271729]
[-77.98001862 134.30691528]
[-88.65292358 123.65140533]
[-96.33988953 110.67598724]
[-100.55770874 96.19631958]
[-101.04125214 81.12260437]
[-97.76011658 66.40238190]
[-90.92055511 52.96097946]
[-80.95252228 41.64333725]
[-68.48259735 33.16088867]
[-54.29466629 28.04685402]
[-39.28058624 26.62269974]
[-24.38415527 28.97795105]
[-10.54177856 34.96455765]
[1.37640107 44.20618820]
[10.62119770 56.12191772]
[16.61147690 69.96270752]
[18.97068214 84.85850525]
[33.90498734 86.26081085]
[48.83929825 87.66311646]
[63.77360535 89.06542206]
[78.70790863 90.46772003]
[92.29072571 74.30633545]
[116.28273773 74.42060852]
[114.72515106 59.50169373]
[113.16757202 44.58278275]
[98.22148132 42.65637589]
[84.12273407 37.33452606]
[71.63166046 28.90423393]
[61.42189407 17.82013130]
[54.04402542 4.67997265]
[49.89593887 -9.80761147]
[49.20133591 -24.86132431]
[51.99766922 -39.66933441]
[58.13414764 -53.43307114]
[67.27983093 -65.41026306]
[78.94149780 -74.95500946]
[92.49026489 -81.55256653]
[107.19544983 -84.84712982]
[122.26403046 -84.66103363]
[136.88337708 -81.00431824]
[150.26507568 -74.07418823]
[161.68746948 -64.24436188]
[170.53457642 -52.04496002]
[176.32928467 -38.13387680]
[178.75907898 -23.26132393]
[177.69291687 -8.22935772]
[173.18832397 6.15136862]
[165.48818970 19.10531998]
[155.00781250 29.93390465]
[142.31236267 38.05315018]
[128.08648682 43.02519989]
[129.64407349 57.94411087]
[131.20164490 72.86302185]
[144.85789490 79.06842804]
[157.12025452 70.42931366]
[169.38262939 61.79019928]
[181.64498901 53.15108490]
[193.90736389 44.51196671]
[192.44464111 29.22288513]
[198.83703613 15.25746536]
[211.36500549 6.37233543]
[226.65859985 4.95755100]
[240.60391235 11.39368248]
[249.44972229 23.94944191]
[250.81657410 39.24739456]
[244.33676147 53.17246628]
[231.75332642 61.97888184]
[216.45117188 63.29776382]
[202.54647827 56.77433395]
[190.28410339 65.41345215]
[178.02174377 74.05256653]
[165.75936890 82.69168091]
[153.49700928 91.33080292]
[168.40005493 89.62815094]
[181.11074829 81.66334534]
[195.56784058 77.66427612]
[210.56483459 77.96469879]
[224.85017395 82.53952789]
[237.23170471 91.00698853]
[246.67611694 102.66043854]
[252.39527893 116.52735138]
[253.91188049 131.45048523]
[251.09936523 146.18444824]
[244.19244385 159.49964905]
[233.76753235 170.28486633]
[220.69461060 177.64006042]
[206.06466675 180.95138550]
[191.09863281 179.94253540]
[177.04547119 174.69766235]
[165.07797241 165.65449524]
[156.19485474 153.56771851]
[151.13745117 139.44601440]
[150.32789612 124.46726990]
[143.13650513 111.30353546]
[143.13650513 126.30353546]
[143.13650513 141.30352783]
[143.13650513 156.30352783]
[143.13650513 171.30352783]
[143.13650513 186.30352783]
[143.13650513 201.30352783]
[143.13650513 216.30352783]
[143.13650513 231.30352783]
[143.13650513 246.30352783]
[143.13650513 261.30352783]
[143.13650513 276.30352783]
[157.67639160 280.36483765]
[170.58078003 288.19934082]
[180.89205933 299.22567749]
[187.84507751 312.62561035]
[190.92387390 327.40478516]
[189.89999390 342.46646118]
[184.84938049 356.69299316]
[176.14686584 369.02865601]
[164.43820190 378.55807495]
[150.59225464 384.57409668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[58 88]
[59 87]
[60 86]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
