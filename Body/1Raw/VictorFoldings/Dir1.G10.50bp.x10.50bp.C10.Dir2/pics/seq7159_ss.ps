%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUAUUCAGGGGGGGGGGUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAxxxxxxxxxxGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUACCCCCCCCCCAUCAUAUUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.75909424]
[71.19830322 366.74307251]
[59.48964310 357.21365356]
[50.78712082 344.87799072]
[45.73651886 330.65145874]
[44.71262741 315.58978271]
[47.79142761 300.81060791]
[54.74444962 287.41067505]
[65.05573273 276.38436890]
[77.96011353 268.54983521]
[92.50000000 264.48852539]
[92.50000000 249.48854065]
[92.50000000 234.48854065]
[92.50000000 219.48854065]
[92.50000000 204.48854065]
[92.50000000 189.48854065]
[92.50000000 174.48854065]
[92.50000000 159.48854065]
[92.50000000 144.48854065]
[92.50000000 129.48854065]
[92.50000000 114.48853302]
[81.77336884 94.65515900]
[102.00896454 78.41966248]
[90.63453674 67.42270660]
[94.39101410 53.00958633]
[90.08342743 38.64140320]
[84.58731079 31.26274681]
[85.83903503 23.92934036]
[81.83129883 9.47465324]
[77.82355499 -4.98003578]
[73.81581879 -19.43472481]
[69.80807495 -33.88941193]
[64.46665192 -41.38080978]
[65.87066650 -48.68658829]
[62.12780762 -52.50896454]
[60.43956375 -56.94768143]
[60.69043350 -61.09963989]
[62.41697311 -64.24392700]
[59.62464905 -78.98173523]
[56.83232498 -93.71953583]
[44.11969376 -93.45092773]
[31.11944580 -101.66221619]
[23.26399422 -117.98673248]
[15.53990936 -130.84513855]
[1.03358769 -126.72180939]
[-14.03404713 -126.49419403]
[-28.63579559 -130.17181396]
[-41.77777100 -137.49815369]
[-52.56705475 -147.96853638]
[-60.27235794 -160.86494446]
[-64.37359619 -175.30517578]
[-64.59698486 -190.30325317]
[-60.93328476 -204.83673096]
[-53.63807678 -217.91636658]
[-43.21389008 -228.65348816]
[-50.93797684 -241.51188660]
[-58.08678818 -247.30380249]
[-58.68579102 -254.71911621]
[-66.14070129 -267.73541260]
[-73.59561157 -280.75173950]
[-88.63825226 -286.32833862]
[-93.52015686 -301.61056519]
[-84.49635315 -314.87521362]
[-68.48912048 -315.94674683]
[-57.77785110 -304.00320435]
[-60.57930374 -288.20663452]
[-53.12439346 -275.19033813]
[-45.66948318 -262.17404175]
[-38.07957458 -249.23597717]
[-30.35548782 -236.37756348]
[-15.98034954 -240.53749084]
[-1.00675833 -240.83479309]
[13.54470634 -237.24322510]
[26.68068123 -230.00178528]
[37.50283432 -219.59881592]
[45.26928711 -206.73915100]
[49.44549179 -192.29626465]
[49.74099731 -177.25302124]
[46.12965775 -162.63473511]
[38.85181427 -149.43934631]
[28.39831161 -138.56921387]
[36.12239838 -125.71081543]
[43.55392075 -124.69965363]
[37.87370300 -138.58256531]
[47.05647659 -150.44328308]
[61.91955948 -148.42121887]
[67.60002899 -134.53842163]
[58.41696548 -122.67731476]
[65.84848785 -121.66614532]
[76.72731781 -131.99334717]
[87.60614014 -142.32055664]
[98.48497009 -152.64776611]
[100.33785248 -168.58346558]
[114.02780914 -176.94793701]
[129.05307007 -171.32470703]
[133.88755798 -156.02740479]
[124.82264709 -142.79081726]
[108.81217194 -141.76893616]
[97.93334961 -131.44172668]
[87.05451965 -121.11452484]
[76.17569733 -110.78732300]
[71.57012939 -96.51186371]
[74.36245728 -81.77405548]
[77.15477753 -67.03624725]
[80.40560913 -52.39274979]
[84.26276398 -37.89715195]
[88.27050781 -23.44246483]
[92.27824402 -8.98777580]
[96.28598785 5.46691275]
[100.29372406 19.92160034]
[104.45161438 34.33381653]
[108.75920105 48.70199966]
[119.82551575 58.67124939]
[116.37714386 74.11208344]
[126.70435333 84.99090576]
[140.82914734 90.03966522]
[154.95396423 95.08841705]
[169.07876587 100.13717651]
[183.25444031 93.14964294]
[198.19201660 98.31147003]
[205.02928162 112.56023407]
[199.70980835 127.44239807]
[185.38955688 134.12863159]
[170.56446838 128.65213013]
[164.02999878 114.26197815]
[149.90519714 109.21321869]
[135.78039551 104.16446686]
[121.65559387 99.11570740]
[116.42504883 109.53913879]
[107.50000000 114.48853302]
[107.50000000 129.48854065]
[107.50000000 144.48854065]
[107.50000000 159.48854065]
[107.50000000 174.48854065]
[107.50000000 189.48854065]
[107.50000000 204.48854065]
[107.50000000 219.48854065]
[107.50000000 234.48854065]
[107.50000000 249.48854065]
[107.50000000 264.48852539]
[122.03988647 268.54983521]
[134.94427490 276.38436890]
[145.25555420 287.41067505]
[152.20857239 300.81060791]
[155.28736877 315.58978271]
[154.26348877 330.65145874]
[149.21287537 344.87799072]
[140.51036072 357.21365356]
[128.80169678 366.74307251]
[114.95575714 372.75909424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 114]
[25 112]
[26 111]
[28 110]
[29 109]
[30 108]
[31 107]
[32 106]
[34 105]
[38 104]
[39 103]
[40 102]
[43 82]
[44 81]
[55 70]
[56 69]
[58 68]
[59 67]
[60 66]
[89 101]
[90 100]
[91 99]
[92 98]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
