%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCUUGUAGGGGGGGGGGAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAxxxxxxxxxxCCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCCCCCCCCCCCUCCCCUUUUA\
) } def
/len { sequence length } bind def

/coor [
[83.69419098 379.56823730]
[70.47399139 372.29577637]
[59.58718872 361.84875488]
[51.77605820 348.93951416]
[47.57317734 334.44821167]
[47.26510239 319.36285400]
[50.87284470 304.71203613]
[58.15041733 291.49465942]
[68.60162354 280.61187744]
[81.51388550 272.80572510]
[96.00682068 268.60845947]
[95.69477081 253.61169434]
[95.38271332 238.61494446]
[95.07065582 223.61819458]
[94.75859833 208.62144470]
[94.44654083 193.62467957]
[94.13448334 178.62792969]
[93.82243347 163.63117981]
[93.51037598 148.63442993]
[93.19831848 133.63766479]
[92.88626099 118.64091492]
[86.66654205 114.44984436]
[73.18768311 121.03166962]
[74.22710419 106.06770325]
[68.00737762 101.87663269]
[53.99066925 107.21814728]
[39.97395325 112.55965424]
[27.32622337 123.84996796]
[12.97589684 114.82199097]
[17.67849731 98.53328705]
[34.63244247 98.54294586]
[48.64915466 93.20143127]
[62.66586685 87.85991669]
[62.66586685 72.85991669]
[48.64915466 67.51840210]
[34.63244247 62.17689133]
[20.61572838 56.83538055]
[6.59901619 51.49386978]
[-7.41769695 46.15235519]
[-21.43441010 40.81084442]
[-35.45112228 35.46932983]
[-49.46783447 30.12781715]
[-63.48455048 24.78630447]
[-77.80252838 31.47741890]
[-92.62948608 26.00595093]
[-99.16884613 11.61802959]
[-93.54092407 -3.15024948]
[-79.08467102 -9.53712654]
[-64.37671661 -3.75338173]
[-58.14303589 10.76959229]
[-44.12632370 16.11110497]
[-30.10960960 21.45261765]
[-16.09289742 26.79413033]
[-2.07618427 32.13564301]
[11.94052887 37.47715378]
[25.95724106 42.81866837]
[39.97395325 48.16017914]
[53.99066925 53.50169373]
[68.00737762 58.84320450]
[89.71900940 64.29504395]
[102.21565247 77.92839813]
[103.33208466 93.60681915]
[114.21090698 83.27961731]
[125.08972931 72.95240784]
[135.96855164 62.62520218]
[126.80591583 50.73192978]
[118.91472626 37.95956802]
[112.37865448 24.44351006]
[107.26698303 10.32703686]
[103.63389587 -4.24021053]
[101.51789856 -19.10381126]
[100.94143677 -34.10620117]
[101.91061401 -49.08834839]
[104.41515350 -63.89143372]
[108.42850494 -78.35853577]
[113.90813446 -92.33628845]
[120.79594421 -105.67653656]
[129.01892090 -118.23784637]
[138.48991394 -129.88708496]
[149.10848999 -140.50073242]
[160.76211548 -149.96629333]
[173.32725525 -158.18344116]
[186.67070007 -165.06506348]
[200.65100098 -170.53819275]
[215.11996460 -174.54481506]
[229.92420959 -177.04248047]
[244.90679932 -178.00469971]
[259.90893555 -177.42126465]
[274.77154541 -175.29835510]
[289.33709717 -171.65850830]
[303.45120239 -166.54026794]
[316.96420288 -159.99792480]
[329.73291016 -152.10079956]
[341.62191772 -142.93263245]
[352.50521851 -132.59060669]
[362.26745605 -121.18433380]
[370.80511475 -108.83474731]
[378.02770996 -95.67275238]
[383.85867310 -81.83786774]
[388.23620605 -67.47676849]
[391.11389160 -52.74167252]
[392.46121216 -37.78878784]
[392.26391602 -22.77662277]
[390.52404785 -7.86431408]
[387.26010132 6.79005909]
[382.50665283 21.03115273]
[376.31408691 34.70800018]
[368.74804688 47.67562485]
[359.88876343 59.79655838]
[349.83013916 70.94231415]
[338.67877197 80.99474335]
[326.55291748 89.84727478]
[313.58108521 97.40607452]
[299.90078735 103.59101868]
[285.65704346 108.33653259]
[271.00085449 111.59232330]
[256.08758545 113.32386780]
[241.07530212 113.51281738]
[226.12316895 112.15715790]
[211.38967896 109.27127838]
[197.03102112 104.88574982]
[183.19938660 99.04708099]
[170.04142761 91.81715393]
[157.69659424 83.27260590]
[146.29576111 73.50402832]
[135.41693115 83.83123016]
[124.53811646 94.15843964]
[113.65928650 104.48564148]
[107.88301849 118.32886505]
[108.19506836 133.32562256]
[108.50712585 148.32237244]
[108.81918335 163.31912231]
[109.13124084 178.31587219]
[109.44329834 193.31263733]
[109.75535583 208.30938721]
[110.06740570 223.30613708]
[110.37946320 238.30288696]
[110.69152069 253.29965210]
[111.00357819 268.29638672]
[125.65856934 271.88717651]
[138.88438416 279.14941406]
[149.77925110 289.58801270]
[157.60034180 302.49124146]
[161.81440735 316.97930908]
[162.13414001 332.06439209]
[158.53770447 346.71798706]
[151.27033997 359.94100952]
[140.82754517 370.83184814]
[127.92131805 378.64794922]
[113.43162537 382.85641479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 33]
[26 32]
[27 31]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[62 128]
[63 127]
[64 126]
[65 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
