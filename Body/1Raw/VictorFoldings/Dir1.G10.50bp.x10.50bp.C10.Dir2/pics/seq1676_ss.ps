%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGUUGAACGGGGGGGGGGAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUxxxxxxxxxxAGGCGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCCCCCCCCCCCUUAGUUCAAC\
) } def
/len { sequence length } bind def

/coor [
[75.52087402 397.74395752]
[61.49892807 392.19094849]
[49.29896927 383.32461548]
[39.68790054 371.70230103]
[33.26987457 358.05459595]
[30.44833755 343.23941040]
[31.40065384 328.18804932]
[36.06695938 313.84661865]
[44.15392685 301.11666870]
[55.15319824 290.79840088]
[68.37335968 283.54040527]
[82.98336792 279.79898071]
[82.98336792 264.79898071]
[82.98336792 249.79898071]
[82.98336792 234.79898071]
[82.98336792 219.79898071]
[82.98336792 204.79898071]
[82.98336792 189.79898071]
[82.98336792 174.79898071]
[82.98336792 159.79898071]
[82.98336792 144.79898071]
[82.98336792 129.79898071]
[71.89823914 119.69354248]
[56.96222687 121.07756805]
[42.02621078 122.46159363]
[27.09020042 123.84561920]
[17.00978851 135.72093201]
[1.84283268 136.91175842]
[-9.41634178 127.22844696]
[-24.35235405 128.61247253]
[-30.12536240 142.78749084]
[-41.83203888 152.64710999]
[-56.78227234 155.92568970]
[-71.54061127 151.86982727]
[-82.71569824 141.41152954]
[-87.73957062 126.95403290]
[-85.45779419 111.81956482]
[-76.39469147 99.48592377]
[-62.63290787 92.78727722]
[-47.33479309 93.26293182]
[-34.01574326 100.80358887]
[-25.73637962 113.67646027]
[-10.80036736 112.29243469]
[-1.51220596 100.70513153]
[13.61531925 99.08876038]
[25.70617485 108.90960693]
[40.64218521 107.52558136]
[55.57820129 106.14155579]
[70.51421356 104.75753021]
[80.03182220 78.01081085]
[107.48615265 71.42604065]
[109.32948303 56.53973007]
[111.17280579 41.65342331]
[113.01612854 26.76711464]
[114.85945129 11.88080788]
[105.55767822 23.64843178]
[93.91001892 33.09999847]
[80.47905731 39.77900314]
[65.91347504 43.36285400]
[50.91679764 43.67845917]
[36.21334076 40.71057129]
[22.51327133 34.60253906]
[10.47828770 25.64937401]
[0.68966991 14.28350449]
[-6.37980032 1.05389440]
[-10.38867378 -13.40047932]
[-11.14332581 -28.38148499]
[-8.60730839 -43.16555023]
[-2.90310717 -57.03862000]
[5.69376945 -69.33064270]
[16.76809883 -79.44791412]
[29.78500366 -86.90178680]
[44.11577606 -91.33223724]
[59.06825638 -92.52529144]
[73.92024994 -90.42331696]
[87.95442200 -85.12784576]
[100.49292755 -76.89463043]
[110.93017578 -66.12133789]
[118.76205444 -53.32830811]
[123.61029816 -39.13342667]
[125.24072266 -24.22230148]
[123.57360077 -9.31068420]
[132.73553467 -21.18750763]
[141.89747620 -33.06433105]
[151.05940247 -44.94115448]
[143.46241760 -58.10756302]
[141.48724365 -73.17962646]
[145.43507385 -87.85897064]
[154.70390320 -99.90708923]
[167.88029480 -107.48674774]
[182.95494080 -109.44210052]
[197.62907410 -105.47496033]
[209.66499329 -96.19029236]
[217.22732544 -83.00394440]
[219.16282654 -67.92673492]
[215.17639160 -53.25783157]
[205.87590027 -41.23413467]
[192.67962646 -33.68916702]
[177.59988403 -31.77348709]
[162.93623352 -35.77922058]
[153.77429199 -23.90239525]
[144.61236572 -12.02557182]
[135.45042419 -0.14874843]
[129.74575806 13.72413254]
[127.90243530 28.61043930]
[126.05911255 43.49674606]
[124.21578979 58.38305664]
[122.37246704 73.26936340]
[131.53439331 85.14618683]
[146.40100098 87.14224243]
[161.10804749 81.31015015]
[172.69252014 90.67226410]
[187.55912781 92.66831970]
[202.44543457 94.51164246]
[217.34986877 96.20204163]
[232.16131592 89.16264343]
[245.50793457 98.69154358]
[243.65986633 114.98622894]
[228.51824951 121.28411865]
[215.65948486 111.10649109]
[200.75503540 109.41609192]
[193.71092224 111.80202484]
[185.56306458 107.53491974]
[170.69647217 105.53886414]
[157.05278015 111.51372528]
[144.40493774 102.00884247]
[129.53834534 100.01278687]
[127.16660309 111.80475616]
[120.27686310 121.70487976]
[109.98657227 128.06083679]
[97.98336792 129.79898071]
[97.98336792 144.79898071]
[97.98336792 159.79898071]
[97.98336792 174.79898071]
[97.98336792 189.79898071]
[97.98336792 204.79898071]
[97.98336792 219.79898071]
[97.98336792 234.79898071]
[97.98336792 249.79898071]
[97.98336792 264.79898071]
[97.98336792 279.79898071]
[112.59338379 283.54040527]
[125.81354523 290.79840088]
[136.81282043 301.11666870]
[144.89978027 313.84661865]
[149.56608582 328.18804932]
[150.51840210 343.23941040]
[147.69686890 358.05459595]
[141.27883911 371.70230103]
[131.66777039 383.32461548]
[119.46781158 392.19094849]
[105.44586945 397.74395752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 49]
[24 48]
[25 47]
[26 46]
[29 43]
[30 42]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[82 103]
[83 102]
[84 101]
[85 100]
[109 127]
[110 126]
[112 124]
[113 123]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
