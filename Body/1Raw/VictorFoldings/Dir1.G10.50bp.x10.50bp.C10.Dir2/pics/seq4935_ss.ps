%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUAAUAAGGGGGGGGGGUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAxxxxxxxxxxACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCCCCCCCCCCCUCAUUACUAA\
) } def
/len { sequence length } bind def

/coor [
[104.71656036 374.22375488]
[91.49636078 366.95129395]
[80.60955811 356.50427246]
[72.79843140 343.59503174]
[68.59555054 329.10372925]
[68.28747559 314.01837158]
[71.89521790 299.36755371]
[79.17279053 286.15017700]
[89.62400055 275.26739502]
[102.53626251 267.46124268]
[117.02919769 263.26397705]
[116.71714020 248.26721191]
[116.40508270 233.27046204]
[116.09302521 218.27369690]
[115.78096771 203.27694702]
[115.46891785 188.28019714]
[115.15686035 173.28344727]
[114.84480286 158.28668213]
[114.53274536 143.28993225]
[114.22068787 128.29318237]
[108.32237244 123.66070557]
[103.15606689 137.74293518]
[88.16659546 137.18095398]
[84.06925964 122.75141144]
[96.52573395 114.39575958]
[90.62741089 109.76328278]
[75.98390961 113.01410675]
[64.18856049 123.55831909]
[50.08693314 118.76318359]
[35.44342804 122.01400757]
[23.72816086 133.48939514]
[8.00743008 128.82135010]
[4.45337868 112.81195068]
[16.72210884 101.93029785]
[32.19260406 107.37050629]
[46.83610535 104.11968231]
[57.58405304 93.80799103]
[72.73308563 98.37060547]
[87.37658691 95.11978149]
[98.77760315 85.37213135]
[104.26464081 71.41174316]
[109.75167084 57.45135117]
[106.57224274 39.34413910]
[120.64844513 28.91052055]
[125.84386444 14.83900070]
[119.47975159 0.62155354]
[124.94909668 -13.57495785]
[138.54248047 -19.55455017]
[143.73789978 -33.62606812]
[148.93330383 -47.69758987]
[154.12872314 -61.76910782]
[159.32414246 -75.84062958]
[162.87890625 -90.41333008]
[164.74652100 -105.29660797]
[166.61412048 -120.17989349]
[152.08049011 -123.97837830]
[138.16702271 -129.64143372]
[125.11178589 -137.07218933]
[113.13818359 -146.14344788]
[102.45110321 -156.70002747]
[93.23339844 -168.56126404]
[85.64281464 -181.52421570]
[79.80922699 -195.36705017]
[75.83245087 -209.85292053]
[73.78054810 -224.73393250]
[73.68861389 -239.75547791]
[75.55823517 -254.66049194]
[79.35741425 -269.19393921]
[85.02114105 -283.10714722]
[92.45250702 -296.16201782]
[101.52434540 -308.13519287]
[112.08142090 -318.82177734]
[123.94309998 -328.03890991]
[136.90641785 -335.62887573]
[150.74952698 -341.46182251]
[165.23558044 -345.43789673]
[180.11669922 -347.48910522]
[195.13824463 -347.58029175]
[210.04316711 -345.70999146]
[224.57644653 -341.91009521]
[238.48937988 -336.24572754]
[251.54389954 -328.81372070]
[263.51663208 -319.74133301]
[274.20272827 -309.18374634]
[283.41928101 -297.32162476]
[291.00863647 -284.35794067]
[296.84091187 -270.51455688]
[300.81631470 -256.02832031]
[302.86679077 -241.14709473]
[302.95730591 -226.12554932]
[301.08624268 -211.22070312]
[297.28570557 -196.68762207]
[291.62063599 -182.77494812]
[284.18804932 -169.72077942]
[275.11505127 -157.74847412]
[264.55697632 -147.06289673]
[252.69441223 -137.84689331]
[239.73037720 -130.25816345]
[225.88670349 -124.42654419]
[211.40026855 -120.45184326]
[196.51895142 -118.40206146]
[181.49740601 -118.31227875]
[179.62979126 -103.42899323]
[177.76217651 -88.54571533]
[190.37316895 -91.78919983]
[200.39013672 -85.28456879]
[215.25318909 -87.30690765]
[226.06976318 -99.15516663]
[242.06687927 -97.94197083]
[250.97291565 -84.59798431]
[245.95593262 -69.35956573]
[230.86451721 -63.91632843]
[217.27552795 -72.44385529]
[202.41247559 -70.42152405]
[188.75143433 -60.63800430]
[173.39566040 -70.64521027]
[168.20024109 -56.57369232]
[163.00482178 -42.50217438]
[157.80941772 -28.43065453]
[152.61399841 -14.35913467]
[159.06008911 -0.98066580]
[153.99165344 13.36386681]
[139.91539001 20.03441620]
[134.71997070 34.10593414]
[139.50045776 45.26184082]
[135.23684692 57.05338287]
[123.71205902 62.93838120]
[118.22502899 76.89877319]
[112.73799896 90.85916138]
[129.21743774 127.98112488]
[129.52949524 142.97787476]
[129.84155273 157.97463989]
[130.15361023 172.97138977]
[130.46566772 187.96813965]
[130.77772522 202.96488953]
[131.08978271 217.96165466]
[131.40184021 232.95840454]
[131.71389771 247.95515442]
[132.02595520 262.95190430]
[146.68093872 266.54266357]
[159.90675354 273.80493164]
[170.80162048 284.24353027]
[178.62271118 297.14672852]
[182.83679199 311.63479614]
[183.15650940 326.71990967]
[179.56008911 341.37350464]
[172.29272461 354.59652710]
[161.84991455 365.48733521]
[148.94367981 373.30346680]
[134.45399475 377.51193237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 39]
[27 38]
[29 36]
[30 35]
[40 129]
[41 128]
[42 127]
[44 124]
[45 123]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
[53 104]
[54 103]
[55 102]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
