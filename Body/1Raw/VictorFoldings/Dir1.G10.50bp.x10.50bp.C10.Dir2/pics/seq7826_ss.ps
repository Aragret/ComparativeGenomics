%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCCCCACGGGGGGGGGGAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUxxxxxxxxxxAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCCCCCCCCCCCUGUACCCAC\
) } def
/len { sequence length } bind def

/coor [
[60.48640060 401.18246460]
[46.64046097 395.16644287]
[34.93180084 385.63702393]
[26.22927666 373.30136108]
[21.17867470 359.07482910]
[20.15478325 344.01315308]
[23.23358154 329.23397827]
[30.18660355 315.83404541]
[40.49788666 304.80773926]
[53.40226746 296.97320557]
[67.94215393 292.91189575]
[67.94215393 277.91189575]
[67.94215393 262.91189575]
[67.94215393 247.91191101]
[67.94215393 232.91191101]
[67.94215393 217.91191101]
[67.94215393 202.91191101]
[67.94215393 187.91191101]
[67.94215393 172.91191101]
[67.94215393 157.91191101]
[67.94215393 142.91191101]
[67.94215393 127.91190338]
[87.88206482 89.12371826]
[84.17590332 74.58877563]
[80.46974182 60.05384064]
[76.76358032 45.51890564]
[61.14162064 45.38392639]
[46.09371185 41.22734451]
[32.63653946 33.33593369]
[21.67777443 22.24860764]
[13.95486450 8.71961975]
[9.98539543 -6.33275795]
[10.03241730 -21.88854980]
[14.08701611 -36.89519501]
[21.86930466 -50.33877563]
[32.84773636 -61.31250381]
[46.27540588 -69.07790375]
[42.26766586 -83.53259277]
[38.25992584 -97.98728180]
[34.25218582 -112.44197083]
[30.24444389 -126.89665985]
[15.42149925 -124.50010681]
[0.42487660 -123.74877167]
[-14.56337738 -124.65177917]
[-29.36132050 -127.19816589]
[-43.78931808 -131.35702515]
[-57.67222595 -137.07786560]
[-70.84152222 -144.29124451]
[-83.13733673 -152.90960693]
[-94.41042328 -162.82830811]
[-104.52391815 -173.92697144]
[-113.35507202 -186.07086182]
[-120.79666138 -199.11256409]
[-126.75837708 -212.89375305]
[-131.16783142 -227.24714661]
[-133.97149658 -241.99850464]
[-135.13534546 -256.96875000]
[-134.64526367 -271.97619629]
[-132.50717163 -286.83862305]
[-128.74703979 -301.37564087]
[-123.41051483 -315.41076660]
[-116.56237030 -328.77362061]
[-108.28574371 -341.30200195]
[-98.68109894 -352.84384155]
[-87.86502838 -363.25903320]
[-75.96883392 -372.42111206]
[-63.13692474 -380.21887207]
[-49.52505875 -386.55767822]
[-35.29848099 -391.36056519]
[-20.62988663 -394.56921387]
[-5.69733810 -396.14471436]
[9.31789684 -396.06790161]
[24.23354721 -394.33972168]
[38.86854935 -390.98117065]
[53.04524994 -386.03302002]
[66.59156036 -379.55529785]
[79.34302521 -371.62667847]
[91.14487457 -362.34338379]
[101.85382843 -351.81808472]
[111.33989716 -340.17861938]
[119.48793030 -327.56619263]
[126.19901276 -314.13397217]
[131.39167786 -300.04501343]
[135.00289917 -285.47027588]
[136.98884583 -270.58676147]
[137.32537842 -255.57510376]
[136.00843811 -240.61753845]
[133.05401611 -225.89562988]
[128.49795532 -211.58808899]
[122.39558411 -197.86860657]
[114.82096100 -184.90373230]
[105.86604309 -172.85081482]
[95.63953400 -161.85620117]
[84.26557922 -152.05332947]
[71.88224030 -143.56120300]
[58.63983917 -136.48292542]
[44.69913483 -130.90440369]
[48.70687485 -116.44971466]
[52.71461487 -101.99502563]
[56.72235489 -87.54033661]
[60.73009491 -73.08564758]
[75.15540314 -73.45666504]
[89.25670624 -70.34953308]
[102.20719910 -63.94177628]
[113.24645233 -54.60456085]
[121.72502899 -42.88122940]
[127.14271545 -29.45566368]
[129.17800903 -15.11240101]
[127.70721436 -0.69078183]
[122.81192780 12.96415901]
[114.77455902 25.05121231]
[104.06198883 34.86000443]
[91.29851532 41.81274414]
[95.00467682 56.34768295]
[98.71083832 70.88261414]
[102.41699982 85.41755676]
[112.51564789 96.50886536]
[126.64044952 101.55762482]
[140.76525879 106.60638428]
[156.79270935 103.13470459]
[167.61112976 115.45922852]
[162.09144592 130.90153503]
[145.91183472 133.57591248]
[135.71649170 120.73118591]
[121.59169769 115.68242645]
[107.46689606 110.63367462]
[101.33570862 114.95323181]
[89.07334137 123.59234619]
[82.94215393 127.91190338]
[82.94215393 142.91191101]
[82.94215393 157.91191101]
[82.94215393 172.91191101]
[82.94215393 187.91191101]
[82.94215393 202.91191101]
[82.94215393 217.91191101]
[82.94215393 232.91191101]
[82.94215393 247.91191101]
[82.94215393 262.91189575]
[82.94215393 277.91189575]
[82.94215393 292.91189575]
[97.48204041 296.97320557]
[110.38642120 304.80773926]
[120.69770813 315.83404541]
[127.65072632 329.23397827]
[130.72952271 344.01315308]
[129.70564270 359.07482910]
[124.65503693 373.30136108]
[115.95251465 385.63702393]
[104.24385071 395.16644287]
[90.39791107 401.18246460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 116]
[24 115]
[25 114]
[26 113]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
