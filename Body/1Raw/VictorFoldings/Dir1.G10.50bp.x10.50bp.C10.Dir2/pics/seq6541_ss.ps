%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCCCACGGGGGGGGGGCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUxxxxxxxxxxACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCCCCCCCCCCCUACUCCCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 403.47982788]
[71.19830322 397.46380615]
[59.48964310 387.93438721]
[50.78712082 375.59869385]
[45.73651886 361.37219238]
[44.71262741 346.31051636]
[47.79142761 331.53134155]
[54.74444962 318.13140869]
[65.05573273 307.10507202]
[77.96011353 299.27056885]
[92.50000000 295.20925903]
[92.50000000 280.20925903]
[92.50000000 265.20925903]
[92.50000000 250.20925903]
[92.50000000 235.20925903]
[92.50000000 220.20925903]
[92.50000000 205.20925903]
[92.50000000 190.20925903]
[92.50000000 175.20925903]
[92.50000000 160.20925903]
[72.92971802 154.30105591]
[56.43238068 142.22874451]
[44.88071442 125.36275482]
[39.58603668 105.61765289]
[24.59333992 105.14960480]
[9.60064411 104.68156433]
[-5.39205217 104.21352386]
[-9.73987293 118.66201019]
[-17.67991447 131.49237061]
[-28.67081261 141.82980347]
[-41.96319199 148.96949768]
[-56.65074921 152.42463684]
[-71.73207092 151.95965576]
[-86.17887878 147.60626221]
[-99.00617218 139.66127014]
[-109.33936310 128.66636658]
[-116.47391510 115.37123871]
[-119.92338562 100.68235016]
[-119.45258331 85.60121155]
[-115.09360504 71.15608215]
[-107.14366150 58.33185577]
[-96.14478302 48.00291061]
[-82.84689331 40.87349319]
[-68.15666962 37.42969131]
[-53.07571793 37.90631866]
[-38.63227081 42.27087402]
[-25.81111717 50.22577286]
[-15.48642063 61.22863770]
[-8.36213684 74.52927399]
[-4.92401028 89.22082520]
[10.06868553 89.68887329]
[25.06138229 90.15691376]
[40.05407715 90.62495422]
[44.41072464 75.68462372]
[52.42450714 62.34395981]
[63.56820297 51.48062897]
[56.11329269 38.46432114]
[48.65838242 25.44801140]
[41.20347214 12.43170261]
[33.74856186 -0.58460718]
[26.29365158 -13.60091686]
[13.17496204 -24.34039116]
[19.86311913 -39.91938019]
[36.68474197 -37.80529022]
[39.30995941 -21.05582619]
[46.76486969 -8.03951740]
[54.21977997 4.97679186]
[61.67469025 17.99310112]
[69.12960052 31.00941086]
[76.58451080 44.02571869]
[82.99699402 41.75652313]
[89.62316895 40.21934891]
[96.37976837 39.43351746]
[103.18186188 39.40890503]
[109.94396973 40.14582443]
[116.58110046 41.63500977]
[123.00982666 43.85774612]
[129.14936829 46.78609467]
[134.92254639 50.38325882]
[140.25680542 54.60401917]
[145.08509827 59.39533234]
[149.34675598 64.69697571]
[152.98818970 70.44232178]
[166.89074707 64.81037140]
[180.79330444 59.17841339]
[192.96514893 50.41220474]
[202.71279907 39.01118469]
[205.94055176 30.39529800]
[212.78376770 27.47710419]
[222.76649475 16.28133965]
[232.74922180 5.08557320]
[238.77751160 -10.76043797]
[255.67304993 -9.35435009]
[258.99905396 7.27014875]
[243.94499207 15.06829929]
[233.96226501 26.26406479]
[223.97953796 37.45983124]
[214.11381531 48.75883484]
[204.36616516 60.15985870]
[207.32614136 67.05104828]
[221.10853577 61.13108444]
[234.89091492 55.21112061]
[248.67338562 49.29138565]
[254.59289551 63.07396317]
[240.81086731 68.99349976]
[227.02848816 74.91346741]
[213.24610901 80.83342743]
[216.20608521 87.72461700]
[231.18580627 88.50446320]
[246.16552734 89.28430939]
[261.14523315 90.06415558]
[272.71719360 79.30007935]
[288.50790405 79.95482635]
[299.14904785 91.63994598]
[298.32739258 107.42285919]
[286.53042603 117.93984985]
[270.75708008 116.95137024]
[260.36538696 105.04386902]
[245.38568115 104.26402283]
[230.40596008 103.48417664]
[215.42625427 102.70433044]
[192.45440674 91.44188690]
[186.42526245 73.08097076]
[172.52270508 78.71292114]
[158.62014771 84.34487915]
[160.65759277 101.43602753]
[157.81364441 118.41161346]
[150.31718445 133.90553284]
[138.77149963 146.67092896]
[124.10569000 155.68052673]
[107.50000000 160.20925903]
[107.50000000 175.20925903]
[107.50000000 190.20925903]
[107.50000000 205.20925903]
[107.50000000 220.20925903]
[107.50000000 235.20925903]
[107.50000000 250.20925903]
[107.50000000 265.20925903]
[107.50000000 280.20925903]
[107.50000000 295.20925903]
[122.03988647 299.27056885]
[134.94427490 307.10507202]
[145.25555420 318.13140869]
[152.20857239 331.53134155]
[155.28736877 346.31051636]
[154.26348877 361.37219238]
[149.21287537 375.59869385]
[140.51036072 387.93438721]
[128.80169678 397.46380615]
[114.95575714 403.47982788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 53]
[25 52]
[26 51]
[27 50]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[83 125]
[84 124]
[85 123]
[86 99]
[87 98]
[89 97]
[90 96]
[91 95]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
