%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACAACAGGGGGGGGGGCCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAxxxxxxxxxxCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGCCCCCCCCCCACCCACAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.52185059]
[71.19830322 367.50582886]
[59.48964310 357.97640991]
[50.78712082 345.64074707]
[45.73651886 331.41421509]
[44.71262741 316.35253906]
[47.79142761 301.57339478]
[54.74444962 288.17346191]
[65.05573273 277.14712524]
[77.96011353 269.31262207]
[92.50000000 265.25131226]
[92.50000000 250.25131226]
[92.50000000 235.25131226]
[92.50000000 220.25131226]
[92.50000000 205.25131226]
[92.50000000 190.25131226]
[92.50000000 175.25131226]
[92.50000000 160.25131226]
[92.50000000 145.25131226]
[92.50000000 130.25131226]
[92.50000000 115.25130463]
[80.59682465 97.27763367]
[96.06552887 78.16078186]
[87.81324005 65.63481903]
[79.56095123 53.10886002]
[71.17880249 40.66941833]
[62.66771317 28.31784630]
[54.15662384 15.96627426]
[41.05285263 23.28922653]
[27.32092094 29.35293007]
[13.08150673 34.10409546]
[-1.54024792 37.50097275]
[-16.41584587 39.51370239]
[-31.41455460 40.12459946]
[-46.40456390 39.32829666]
[-61.25413513 37.13179016]
[-75.83277130 33.55438232]
[-90.01235199 28.62751389]
[-103.66825867 22.39448547]
[-116.68048096 14.91007042]
[-128.93467712 6.24004507]
[-140.32313538 -3.53939629]
[-150.74577332 -14.34230900]
[-160.11100769 -26.07375717]
[-168.33653259 -38.63063812]
[-175.35005188 -51.90260315]
[-181.08993530 -65.77301025]
[-185.50573730 -80.11997223]
[-188.55863953 -94.81739044]
[-190.22183228 -109.73611450]
[-190.48068237 -124.74502563]
[-189.33293152 -139.71223450]
[-186.78865051 -154.50617981]
[-182.87022400 -168.99688721]
[-177.61204529 -183.05697632]
[-171.06036377 -196.56289673]
[-163.27273560 -209.39595032]
[-154.31761169 -221.44335938]
[-144.27368164 -232.59925842]
[-133.22923279 -242.76559448]
[-121.28130341 -251.85302734]
[-108.53490448 -259.78170776]
[-95.10205078 -266.48193359]
[-81.10079956 -271.89483643]
[-66.65419769 -275.97283936]
[-51.88919830 -278.68008423]
[-36.93556595 -279.99282837]
[-21.92470932 -279.89950562]
[-6.98855352 -278.40093994]
[7.74164104 -275.51028442]
[22.13642120 -271.25296021]
[36.06928635 -265.66638184]
[49.41778564 -258.79965210]
[62.06460953 -250.71310425]
[73.89862061 -241.47781372]
[84.81581116 -231.17492676]
[94.72024536 -219.89500427]
[103.52487946 -207.73716736]
[111.15233612 -194.80827332]
[117.53557587 -181.22192383]
[122.61850739 -167.09754944]
[126.35646820 -152.55924988]
[128.71659851 -137.73480225]
[129.67816162 -122.75447845]
[129.23269653 -107.74994659]
[127.38413239 -92.85305786]
[124.14870453 -78.19473267]
[119.55485535 -63.90379333]
[113.64295197 -50.10582733]
[106.46494293 -36.92209625]
[98.08392334 -24.46846390]
[88.57353973 -12.85437489]
[78.01737976 -2.18189430]
[66.50819397 7.45518398]
[75.01928711 19.80675697]
[83.53038025 32.15832901]
[89.95702362 35.90584946]
[92.08691406 44.85657120]
[100.33920288 57.38253403]
[108.59149170 69.90849304]
[121.60779572 77.36340332]
[136.58750916 78.14324951]
[151.56723022 78.92309570]
[166.54693604 79.70294189]
[181.52665710 80.48278809]
[195.71041870 73.47341156]
[208.01821899 81.86193848]
[222.99794006 82.64178467]
[230.28111267 69.22842407]
[242.66787720 60.31042099]
[257.69882202 57.65845108]
[272.38958740 61.79906082]
[283.82327271 71.91013336]
[289.72970581 85.98410797]
[288.93618774 101.22658539]
[281.60025024 114.61116028]
[269.17846680 123.48031616]
[254.13716125 126.07307434]
[239.46282959 121.87464142]
[228.06906128 111.71862030]
[222.21809387 97.62149811]
[207.23837280 96.84165192]
[194.12605286 103.90679932]
[180.74681091 95.46250153]
[165.76708984 94.68265533]
[150.78738403 93.90280914]
[135.80766296 93.12296295]
[120.82794952 92.34311676]
[118.19018555 107.28092194]
[107.50000000 115.25130463]
[107.50000000 130.25131226]
[107.50000000 145.25131226]
[107.50000000 160.25131226]
[107.50000000 175.25131226]
[107.50000000 190.25131226]
[107.50000000 205.25131226]
[107.50000000 220.25131226]
[107.50000000 235.25131226]
[107.50000000 250.25131226]
[107.50000000 265.25131226]
[122.03988647 269.31262207]
[134.94427490 277.14712524]
[145.25555420 288.17346191]
[152.20857239 301.57339478]
[155.28736877 316.35253906]
[154.26348877 331.41421509]
[149.21287537 345.64074707]
[140.51036072 357.97640991]
[128.80169678 367.50582886]
[114.95575714 373.52185059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 100]
[24 99]
[25 98]
[26 96]
[27 95]
[28 94]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
