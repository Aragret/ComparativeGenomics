%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACGCAAAAGGGGGGGGGGUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUAxxxxxxxxxxCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACCCCCCCCCCCUACUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[59.07054138 519.72515869]
[45.22460175 513.70910645]
[33.51594162 504.17971802]
[24.81341743 491.84405518]
[19.76281548 477.61752319]
[18.73892403 462.55584717]
[21.81772232 447.77667236]
[28.77074432 434.37673950]
[39.08202744 423.35043335]
[51.98640823 415.51589966]
[66.52629852 411.45458984]
[66.52629852 396.45458984]
[66.52629852 381.45458984]
[66.52629852 366.45458984]
[66.52629852 351.45458984]
[66.52629852 336.45458984]
[66.52629852 321.45458984]
[66.52629852 306.45458984]
[66.52629852 291.45458984]
[66.52629852 276.45458984]
[66.52629852 261.45458984]
[66.52629852 246.45460510]
[56.25398254 257.38525391]
[41.54947662 260.34796143]
[27.84580421 254.24801636]
[20.20619583 241.33924866]
[21.45333481 226.39117432]
[31.12643051 214.92683411]
[45.65146637 211.18205261]
[59.66172791 216.54046631]
[67.98046112 229.02139282]
[70.46558380 214.22868347]
[72.95069885 199.43597412]
[75.43582153 184.64326477]
[77.92093658 169.85057068]
[75.88935089 165.46328735]
[76.63816071 159.74746704]
[80.82944489 154.49955750]
[83.92776489 139.82302856]
[87.02608490 125.14649963]
[78.19075012 118.02846527]
[72.86184692 108.01184845]
[71.89615631 96.70710754]
[57.99360275 91.07514954]
[42.71896362 95.98075867]
[29.44035149 86.97753143]
[28.34398079 70.97198486]
[40.27089310 60.24219894]
[56.07178497 63.01914978]
[63.62556076 77.17259216]
[77.52811432 82.80455017]
[89.10359955 73.88606262]
[103.58506012 71.93193054]
[109.36133575 58.08871460]
[115.13760376 44.24549866]
[120.91387939 30.40228081]
[126.69015503 16.55906296]
[132.46643066 2.71584487]
[123.64860535 -6.81680536]
[119.12885284 -18.94041252]
[119.55126190 -31.82531738]
[124.81693268 -43.54134750]
[134.10411072 -52.34696960]
[145.99621582 -56.94813538]
[158.69787598 -56.68836975]
[165.04501343 -70.27931976]
[171.39213562 -83.87026978]
[177.73927307 -97.46121979]
[165.38449097 -106.03253174]
[154.65608215 -116.56863403]
[145.86276245 -128.76638794]
[139.25749207 -142.27485657]
[135.03034973 -156.70535278]
[133.30294800 -171.64268494]
[134.12496948 -186.65708923]
[137.47279358 -201.31655884]
[143.25007629 -215.19932556]
[151.29058838 -227.90594482]
[161.36302185 -239.07081604]
[173.17753601 -248.37271118]
[186.39421082 -255.54399109]
[200.63279724 -260.37832642]
[215.48359680 -262.73663330]
[230.51934814 -262.55105591]
[245.30741882 -259.82690430]
[259.42233276 -254.64259338]
[272.45797729 -247.14727783]
[284.03930664 -237.55661011]
[293.83306885 -226.14653015]
[301.55752563 -213.24531555]
[306.99038696 -199.22419739]
[309.97534180 -184.48655701]
[310.42654419 -169.45643616]
[308.33096313 -154.56628418]
[303.74893188 -140.24452209]
[296.81225586 -126.90321350]
[287.72055054 -114.92620850]
[276.73535156 -104.65811157]
[264.17276001 -96.39436340]
[250.39424133 -90.37272644]
[235.79620361 -86.76644897]
[220.79866028 -85.67929077]
[205.83314514 -87.14253998]
[191.33021545 -91.11408997]
[184.98309326 -77.52313995]
[178.63595581 -63.93218994]
[172.28883362 -50.34123993]
[182.64909363 -36.65660095]
[184.70054626 -19.52636337]
[177.79400635 -3.61981297]
[163.73429871 6.68183851]
[146.30964661 8.49211788]
[140.53337097 22.33533478]
[134.75709534 36.17855453]
[128.98081970 50.02177048]
[123.20455170 63.86498642]
[117.42828369 77.70820618]
[127.00894165 91.56281281]
[127.01824188 108.40736389]
[117.45288086 122.27253723]
[101.70261383 128.24482727]
[98.60429382 142.92135620]
[95.50596619 157.59786987]
[92.71364594 172.33567810]
[90.22852325 187.12838745]
[87.74340820 201.92109680]
[85.25829315 216.71380615]
[82.77317047 231.50651550]
[81.52629852 246.45460510]
[81.52629852 261.45458984]
[81.52629852 276.45458984]
[81.52629852 291.45458984]
[81.52629852 306.45458984]
[81.52629852 321.45458984]
[81.52629852 336.45458984]
[81.52629852 351.45458984]
[81.52629852 366.45458984]
[81.52629852 381.45458984]
[81.52629852 396.45458984]
[81.52629852 411.45458984]
[96.06618500 415.51589966]
[108.97056580 423.35043335]
[119.28184509 434.37673950]
[126.23487091 447.77667236]
[129.31367493 462.55584717]
[128.28977966 477.61752319]
[123.23917389 491.84405518]
[114.53665161 504.17971802]
[102.82798767 513.70910645]
[88.98204803 519.72515869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[38 123]
[39 122]
[40 121]
[43 51]
[44 50]
[53 117]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
[65 107]
[66 106]
[67 105]
[68 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
