%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAAUAAGGGGGGGGGGAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUxxxxxxxxxxUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAACCCCCCCCCCAUAAAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[95.30492401 497.30966187]
[81.45898438 491.29364014]
[69.75032043 481.76422119]
[61.04779816 469.42855835]
[55.99719620 455.20202637]
[54.97330475 440.14035034]
[58.05210495 425.36120605]
[65.00512695 411.96127319]
[75.31641388 400.93493652]
[88.22079468 393.10043335]
[102.76068115 389.03912354]
[102.76068115 374.03912354]
[102.76068115 359.03912354]
[102.76068115 344.03912354]
[102.76068115 329.03912354]
[102.76068115 314.03912354]
[102.76068115 299.03912354]
[102.76068115 284.03912354]
[102.76068115 269.03912354]
[102.76068115 254.03912354]
[88.89842987 250.27189636]
[76.47926331 243.02844238]
[66.35824585 232.80014038]
[59.23409653 220.28416443]
[55.60097885 206.33590698]
[55.71421432 191.91053772]
[59.57234955 177.99760437]
[66.91681671 165.55313110]
[77.24927521 155.43394470]
[89.86538696 148.33866882]
[103.90287781 144.75949097]
[104.21493530 129.76272583]
[85.22003937 124.45532990]
[74.48717499 109.10721588]
[75.87351227 91.42650604]
[87.49494934 79.37543488]
[84.09197235 64.76654053]
[80.68899536 50.15764999]
[77.28601837 35.54875565]
[73.88303375 20.93986511]
[70.48005676 6.33097219]
[67.07707977 -8.27792072]
[62.05191422 -15.98502922]
[63.75862122 -23.22607803]
[60.66030121 -37.90260315]
[57.56197739 -52.57912827]
[54.46365738 -67.25565338]
[34.78553009 -71.75737000]
[20.09545517 -86.65242004]
[15.55620098 -107.82560730]
[23.35821724 -128.81051636]
[13.61056423 -140.21153259]
[3.86291242 -151.61254883]
[-5.88473988 -163.01358032]
[-15.75046253 -174.31257629]
[-25.73318863 -185.50834656]
[-40.78726578 -193.30650330]
[-37.46125031 -209.93099976]
[-20.56571198 -211.33708191]
[-14.53742313 -195.49107361]
[-4.55469704 -184.29530334]
[2.28853321 -181.37712097]
[5.51628113 -172.76123047]
[15.26393318 -161.36021423]
[25.01158524 -149.95918274]
[34.75923920 -138.55816650]
[48.98601532 -143.31198120]
[49.92164612 -158.28277588]
[50.85727310 -173.25357056]
[37.06172943 -179.58186340]
[26.48661613 -190.46907043]
[20.56213188 -204.44279480]
[20.08951759 -219.61320496]
[25.13268661 -233.92860413]
[35.00959396 -245.45297241]
[48.38446808 -252.62773132]
[63.44846725 -254.48255920]
[78.16431427 -250.76658630]
[90.54180145 -241.98239136]
[98.90698242 -229.31794739]
[102.12853241 -214.48600769]
[99.77076721 -199.49250793]
[92.15254974 -186.36515808]
[80.30418396 -176.87934875]
[65.82806396 -172.31793213]
[64.89243317 -157.34713745]
[63.95681000 -142.37635803]
[76.76685333 -136.02319336]
[86.37035370 -125.79128265]
[91.69359589 -113.09547424]
[92.23728180 -99.60592651]
[88.11814117 -87.02889252]
[80.03116608 -76.89098358]
[69.14018250 -70.35397339]
[72.23850250 -55.67745209]
[75.33683014 -41.00092697]
[78.43515015 -26.32439995]
[81.68597412 -11.68089867]
[85.08895111 2.92799425]
[88.49192810 17.53688622]
[91.89490509 32.14577866]
[95.29788971 46.75467300]
[98.70086670 61.36356354]
[102.10384369 75.97245789]
[115.42245483 78.94449615]
[125.93074036 89.22679138]
[129.71726990 104.52430725]
[144.71646118 104.36827087]
[159.71565247 104.21223450]
[174.71484375 104.05619812]
[189.71403503 103.90016174]
[205.48941040 97.68938446]
[215.82452393 111.12894440]
[205.77124023 124.78060150]
[189.87007141 118.89935303]
[174.87088013 119.05538940]
[159.87168884 119.21142578]
[144.87249756 119.36746216]
[129.87330627 119.52349854]
[119.21168518 130.07478333]
[118.89962769 145.07154846]
[133.88471985 149.74574280]
[146.94116211 158.43345642]
[157.02182007 170.42814636]
[163.32099915 184.75848389]
[165.33880615 200.26696777]
[162.92077637 215.70346069]
[156.26972961 229.82588196]
[145.92871094 241.50022888]
[132.73674011 249.79162598]
[117.76068115 254.03912354]
[117.76068115 269.03912354]
[117.76068115 284.03912354]
[117.76068115 299.03912354]
[117.76068115 314.03912354]
[117.76068115 329.03912354]
[117.76068115 344.03912354]
[117.76068115 359.03912354]
[117.76068115 374.03912354]
[117.76068115 389.03912354]
[132.30056763 393.10043335]
[145.20494080 400.93493652]
[155.51623535 411.96127319]
[162.46925354 425.36120605]
[165.54804993 440.14035034]
[164.52415466 455.20202637]
[159.47355652 469.42855835]
[150.77102661 481.76422119]
[139.06237793 491.29364014]
[125.21643066 497.30966187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 121]
[32 120]
[36 104]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[42 98]
[44 97]
[45 96]
[46 95]
[47 94]
[51 66]
[52 65]
[53 64]
[54 63]
[55 61]
[56 60]
[67 87]
[68 86]
[69 85]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
