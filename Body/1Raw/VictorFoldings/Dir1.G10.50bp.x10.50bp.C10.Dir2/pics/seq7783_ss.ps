%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUUCCUAGGGGGGGGGGGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGxxxxxxxxxxAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGCCCCCCCCCCACUAUUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[135.46252441 500.72183228]
[122.24430084 493.44577026]
[111.36033630 482.99578857]
[103.55271912 470.08441162]
[99.35378265 455.59197998]
[99.04981232 440.50653076]
[102.66153717 425.85668945]
[109.94270325 412.64129639]
[120.39687347 401.76135254]
[133.31124878 393.95874023]
[147.80532837 389.76538086]
[147.49736023 374.76855469]
[147.18937683 359.77172852]
[146.88139343 344.77487183]
[146.57342529 329.77804565]
[146.26544189 314.78118896]
[145.95747375 299.78436279]
[145.64949036 284.78753662]
[145.34150696 269.79067993]
[145.03353882 254.79385376]
[142.55125427 248.95875549]
[141.79171753 242.80737305]
[142.73606873 236.82640076]
[145.23361206 231.46775818]
[149.01939392 227.11454773]
[142.74998474 213.48757935]
[136.48059082 199.86059570]
[130.21118164 186.23361206]
[123.94177246 172.60664368]
[117.67237091 158.97966003]
[111.98445129 154.18801880]
[111.41734314 145.00791931]
[105.42904663 131.25509644]
[91.04480743 131.62666321]
[77.47150421 125.48773956]
[67.59862518 113.66223145]
[63.73242569 98.22579956]
[67.07022858 82.14712524]
[53.64278030 75.46105194]
[40.21533203 68.77497864]
[26.78788185 62.08890152]
[8.47060585 63.67257690]
[-0.69072849 48.73555756]
[-14.25262451 42.32658386]
[-27.81452179 35.91760635]
[-41.94414902 42.61742783]
[-57.06149292 38.61744308]
[-66.02861023 25.80632019]
[-64.61149597 10.23307991]
[-53.47927094 -0.74906880]
[-37.88822937 -1.95469129]
[-25.19998932 7.18547010]
[-21.40554619 22.35571098]
[-7.84364891 28.76468658]
[5.71824694 35.17366409]
[17.24834824 31.38962173]
[28.61976051 36.66810226]
[33.47395706 48.66145325]
[46.90140533 55.34752655]
[60.32885742 62.03360367]
[73.75630951 68.71968079]
[86.82299805 61.35343933]
[88.05361176 46.40400314]
[89.28422546 31.45456886]
[78.17098236 23.24186325]
[72.62568665 10.70324039]
[74.00498199 -2.82831383]
[81.84018707 -13.81360245]
[93.98825836 -19.43289566]
[95.52555084 -34.35391235]
[97.06284332 -49.27492905]
[83.53312683 -56.15323257]
[73.40467834 -67.45716858]
[68.04729462 -81.65797424]
[68.18551636 -96.83510590]
[73.80065155 -110.93598175]
[84.13329315 -122.05357361]
[97.78604889 -128.68432617]
[112.91248322 -129.93145752]
[127.46687317 -125.62634277]
[139.48086548 -116.35118866]
[147.32965088 -103.36038208]
[149.95176697 -88.41083527]
[146.99256897 -73.52434540]
[138.85227966 -60.71418762]
[126.63180542 -51.71282959]
[111.98386383 -47.73763657]
[110.44657135 -32.81661987]
[108.90927887 -17.89560318]
[121.46273804 -7.36181355]
[125.32424164 8.73478794]
[118.78641510 24.12261963]
[104.23365784 32.68518066]
[103.00304413 47.63461685]
[101.77243805 62.58404922]
[118.55396271 68.78725433]
[130.06063843 81.75543213]
[133.96272278 98.07858276]
[129.84385681 113.77626801]
[119.18187714 125.26679993]
[125.17017365 139.01962280]
[131.29934692 152.71025085]
[137.56875610 166.33723450]
[143.83816528 179.96421814]
[150.10755920 193.59118652]
[156.37696838 207.21817017]
[162.64637756 220.84515381]
[174.42851257 230.12854004]
[189.14402771 233.03601074]
[203.85955811 235.94348145]
[218.57507324 238.85095215]
[226.40093994 225.86897278]
[238.19688416 216.34892273]
[252.53851318 211.44038391]
[267.69396973 211.73609924]
[281.83322144 217.20034790]
[293.24880981 227.17330933]
[300.56228638 240.45068359]
[302.89053345 255.42916870]
[299.95236206 270.30004883]
[292.10260010 283.26757812]
[280.28912354 292.76586914]
[265.93847656 297.64797974]
[250.78356934 297.32434082]
[236.65443420 291.83404541]
[225.25723267 281.84005737]
[217.96823120 268.54922485]
[215.66760254 253.56646729]
[200.95208740 250.65899658]
[186.23655701 247.75152588]
[171.52104187 244.84405518]
[160.03036499 254.48587036]
[160.33834839 269.48269653]
[160.64633179 284.47955322]
[160.95429993 299.47637939]
[161.26228333 314.47323608]
[161.57026672 329.47006226]
[161.87823486 344.46688843]
[162.18621826 359.46374512]
[162.49418640 374.46057129]
[162.80216980 389.45739746]
[177.45619202 393.05215454]
[190.68002319 400.31802368]
[201.57205200 410.75958252]
[209.38963318 423.66491699]
[213.59976196 438.15411377]
[213.91539001 453.23931885]
[210.31497192 467.89193726]
[203.04400635 481.11297607]
[192.59825134 492.00094604]
[179.68989563 499.81356812]
[165.19906616 504.01809692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[32 101]
[33 100]
[38 61]
[39 60]
[40 59]
[41 58]
[43 55]
[44 54]
[45 53]
[62 95]
[63 94]
[64 93]
[69 89]
[70 88]
[71 87]
[108 131]
[109 130]
[110 129]
[111 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
