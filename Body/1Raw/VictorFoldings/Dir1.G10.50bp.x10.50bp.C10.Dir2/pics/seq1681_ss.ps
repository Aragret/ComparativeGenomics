%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGGGCCCGGGGGGGGGGUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUCAAAGGAxxxxxxxxxxACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUCCCCCCCCCCAACAGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.21237183]
[71.19830322 389.19635010]
[59.48964310 379.66693115]
[50.78712082 367.33126831]
[45.73651886 353.10473633]
[44.71262741 338.04306030]
[47.79142761 323.26388550]
[54.74444962 309.86398315]
[65.05573273 298.83764648]
[77.96011353 291.00314331]
[92.50000000 286.94183350]
[92.50000000 271.94183350]
[92.50000000 256.94183350]
[92.50000000 241.94181824]
[92.50000000 226.94181824]
[92.50000000 211.94181824]
[92.50000000 196.94181824]
[92.50000000 181.94181824]
[92.50000000 166.94181824]
[92.50000000 151.94181824]
[84.76270294 139.21455383]
[92.50000000 125.41437531]
[86.38783264 122.73432159]
[81.13916779 118.61207581]
[77.08697510 113.30915833]
[62.51427078 116.86391449]
[47.94156647 120.41867828]
[40.28714752 125.52375031]
[33.02873993 123.89245605]
[18.38523674 127.14328003]
[6.66996717 138.61866760]
[-9.05076313 133.95062256]
[-12.60481453 117.94122314]
[-0.33608338 107.05957031]
[15.13441086 112.49977875]
[29.77791214 109.24895477]
[44.38680649 105.84597778]
[58.95950699 102.29121399]
[73.53221130 98.73645020]
[77.80130005 85.53078461]
[88.16004944 76.29438782]
[101.76679230 73.56103516]
[106.96220398 59.48951721]
[112.15762329 45.41799545]
[117.35303497 31.34647751]
[103.73138428 25.04642296]
[90.65333557 17.68403435]
[78.20157623 9.30586147]
[66.45483398 -0.03512840]
[55.48736954 -10.27987671]
[45.36853027 -21.36361122]
[36.16228867 -33.21625900]
[27.92685318 -45.76287842]
[20.71428680 -58.92414474]
[14.57019424 -72.61685181]
[9.53341866 -86.75442505]
[5.63580561 -101.24748230]
[2.90199709 -116.00439453]
[1.34927773 -130.93185425]
[0.98746425 -145.93548584]
[1.81884420 -160.92045593]
[3.83816123 -175.79197693]
[7.03264856 -190.45606995]
[11.38210869 -204.81999207]
[16.85904312 -218.79293823]
[23.42882538 -232.28656006]
[31.04991722 -245.21556091]
[39.67413330 -257.49819946]
[49.24695206 -269.05679321]
[59.70784760 -279.81829834]
[70.99068451 -289.71463013]
[83.02412415 -298.68325806]
[95.73208618 -306.66748047]
[109.03423309 -313.61682129]
[122.84645081 -319.48730469]
[137.08142090 -324.24185181]
[151.64913940 -327.85037231]
[166.45751953 -330.29010010]
[181.41291809 -331.54553223]
[196.42077637 -331.60882568]
[211.38623047 -330.47952271]
[226.21466064 -328.16476440]
[240.81228638 -324.67919922]
[255.08683777 -320.04486084]
[268.94808960 -314.29104614]
[282.30834961 -307.45413208]
[295.08319092 -299.57736206]
[307.19180298 -290.71051025]
[318.55770874 -280.90963745]
[329.10897827 -270.23672485]
[338.77890015 -258.75927734]
[347.50637817 -246.54980469]
[355.23623657 -233.68551636]
[361.91955566 -220.24777222]
[367.51412964 -206.32150269]
[371.98455811 -191.99476624]
[375.30258179 -177.35813904]
[377.44720459 -162.50416565]
[378.40490723 -147.52674866]
[378.16961670 -132.52058411]
[376.74282837 -117.58056641]
[374.13354492 -102.80112457]
[370.35830688 -88.27571869]
[365.44091797 -74.09617615]
[359.41250610 -60.35214996]
[352.31115723 -47.13053513]
[344.18182373 -34.51491928]
[335.07583618 -22.58506393]
[325.05081177 -11.41639996]
[314.17013550 -1.07953644]
[302.50256348 8.36017132]
[290.12191772 16.84304237]
[277.10641479 24.31544495]
[263.53836060 30.73013496]
[249.50355530 36.04655838]
[235.09071350 40.23109436]
[220.39099121 43.25729752]
[205.49728394 45.10602951]
[190.50378418 45.76560211]
[175.50527954 45.23184586]
[160.59658813 43.50813293]
[145.87199402 40.60536575]
[131.42456055 36.54189301]
[126.22914124 50.61341095]
[121.03372192 64.68492889]
[115.83831024 78.75644684]
[126.01025391 94.93965912]
[122.64754486 113.75605774]
[107.50000000 125.41437531]
[115.23729706 139.21455383]
[107.50000000 151.94181824]
[107.50000000 166.94181824]
[107.50000000 181.94181824]
[107.50000000 196.94181824]
[107.50000000 211.94181824]
[107.50000000 226.94181824]
[107.50000000 241.94181824]
[107.50000000 256.94183350]
[107.50000000 271.94183350]
[107.50000000 286.94183350]
[122.03988647 291.00314331]
[134.94427490 298.83764648]
[145.25555420 309.86398315]
[152.20857239 323.26388550]
[155.28736877 338.04306030]
[154.26348877 353.10473633]
[149.21287537 367.33126831]
[140.51036072 379.66693115]
[128.80169678 389.19635010]
[114.95575714 395.21237183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[25 39]
[26 38]
[27 37]
[29 36]
[30 35]
[42 126]
[43 125]
[44 124]
[45 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
