%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAGCAGGGGGGGGGGGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACxxxxxxxxxxACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCCCCCCCCCCCAUUAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[81.46279144 341.44421387]
[69.96662903 331.62942505]
[61.87557220 318.86126709]
[57.90906525 304.27502441]
[58.41981125 289.16772461]
[63.36239243 274.88269043]
[72.29732513 262.69015503]
[84.43011475 253.67422485]
[98.68191528 248.63661194]
[98.05793762 233.64959717]
[97.43395996 218.66258240]
[96.80998993 203.67556763]
[96.18601227 188.68855286]
[95.56203461 173.70153809]
[94.93805695 158.71452332]
[94.31407928 143.72750854]
[93.69010162 128.74049377]
[93.06612396 113.75347137]
[79.89753723 106.57096100]
[66.95948029 114.16087341]
[54.02142715 121.75077820]
[41.08337021 129.34068298]
[35.66354370 144.44052124]
[20.43292618 149.48114014]
[7.07514238 140.59580994]
[5.83714151 124.60059357]
[17.66861153 113.76565552]
[33.49346161 116.40263367]
[46.43151855 108.81272888]
[59.36957550 101.22281647]
[72.30763245 93.63291168]
[78.67574310 90.88497925]
[84.99038696 90.12556458]
[90.76257324 91.22311401]
[95.55256653 93.93862915]
[99.86015320 79.57044983]
[104.01803589 65.15823364]
[108.02577972 50.70354462]
[102.98330688 33.02436447]
[115.90000916 21.18549347]
[119.60617065 6.65055656]
[123.31233215 -7.88437939]
[109.10549927 -12.72174549]
[95.32200623 -18.65886116]
[82.04682922 -25.65912247]
[69.36180878 -33.67937088]
[57.34515381 -42.67015457]
[46.07096100 -52.57604599]
[35.60873795 -63.33596802]
[26.02298164 -74.88358307]
[17.37279892 -87.14768982]
[9.71151829 -100.05268860]
[3.08637643 -113.51899719]
[-2.46178031 -127.46360779]
[-6.89874554 -141.80053711]
[-10.19716358 -156.44137573]
[-12.33669758 -171.29589844]
[-13.30415726 -186.27247620]
[-13.09357834 -201.27880859]
[-11.70625782 -216.22235107]
[-9.15074921 -231.01097107]
[-5.44280910 -245.55349731]
[-0.60529798 -259.76028442]
[5.33195877 -273.54373169]
[12.33235550 -286.81881714]
[20.35273170 -299.50375366]
[29.34363937 -311.52032471]
[39.24964523 -322.79440308]
[50.00967407 -333.25653076]
[61.55738449 -342.84216309]
[73.82158661 -351.49221802]
[86.72665405 -359.15338135]
[100.19303894 -365.77838135]
[114.13770294 -371.32638550]
[128.47467041 -375.76321411]
[143.11555481 -379.06149292]
[157.97009277 -381.20086670]
[172.94668579 -382.16818237]
[187.95300293 -381.95742798]
[202.89653015 -380.56997681]
[217.68513489 -378.01431274]
[232.22763062 -374.30621338]
[246.43435669 -369.46856689]
[260.21774292 -363.53115845]
[273.49276733 -356.53063965]
[286.17761230 -348.51013184]
[298.19409180 -339.51910400]
[309.46807861 -329.61297607]
[319.93008423 -318.85284424]
[329.51562500 -307.30502319]
[338.16555786 -295.04074097]
[345.82656860 -282.13558960]
[352.45141602 -268.66912842]
[357.99929810 -254.72442627]
[362.43597412 -240.38740540]
[365.73410034 -225.74649048]
[367.87332153 -210.89193726]
[368.84048462 -195.91532898]
[368.62957764 -180.90901184]
[367.24197388 -165.96549988]
[364.68615723 -151.17692566]
[360.97790527 -136.63446045]
[356.14010620 -122.42778015]
[350.20257568 -108.64447021]
[343.20190430 -95.36949921]
[335.18127441 -82.68473053]
[326.19012451 -70.66835022]
[316.28387451 -59.39446259]
[305.52365112 -48.93256760]
[293.97573853 -39.34716797]
[281.71136475 -30.69735909]
[268.80612183 -23.03647423]
[255.33961487 -16.41174507]
[241.39483643 -10.86401463]
[227.05776978 -6.42748928]
[212.41682434 -3.12951970]
[197.56224060 -0.99044037]
[182.58563232 -0.02343936]
[167.57931519 -0.23447862]
[152.63581848 -1.62225699]
[137.84725952 -4.17821836]
[134.14111328 10.35671806]
[130.43495178 24.89165306]
[136.34800720 35.49084854]
[133.33186340 47.66138077]
[122.48046875 54.71128464]
[118.47272491 69.16596985]
[119.72444916 76.49937439]
[114.22833252 83.87802887]
[109.92075348 98.24621582]
[108.05313873 113.12949371]
[108.67711639 128.11651611]
[109.30109406 143.10353088]
[109.92507172 158.09054565]
[110.54904938 173.07756042]
[111.17302704 188.06457520]
[111.79700470 203.05158997]
[112.42098236 218.03860474]
[113.04496002 233.02561951]
[113.66893768 248.01263428]
[128.29016113 251.84812927]
[141.13041687 259.82431030]
[151.04792786 271.23196411]
[157.16084290 285.05670166]
[158.92561340 300.06924438]
[156.18531799 314.93472290]
[149.18362427 328.33126831]
[138.54309082 339.06768799]
[125.20989990 346.18930054]
[110.36961365 349.06286621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 31]
[20 30]
[21 29]
[22 28]
[35 130]
[36 129]
[37 127]
[38 126]
[40 123]
[41 122]
[42 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
