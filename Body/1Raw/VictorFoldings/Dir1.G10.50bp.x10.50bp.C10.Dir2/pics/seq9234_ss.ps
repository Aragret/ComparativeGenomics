%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUUGGCUGGGGGGGGGGUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUxxxxxxxxxxGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCCCCCCCCCCCACCUUGGCU\
) } def
/len { sequence length } bind def

/coor [
[85.60525513 428.27383423]
[73.72097778 418.99871826]
[64.40227509 407.14862061]
[58.19090652 393.41244507]
[55.44800568 378.58880615]
[56.33303452 363.53955078]
[60.79454041 349.13961792]
[68.57313538 336.22619629]
[79.21659088 325.55001831]
[92.10610199 317.73184204]
[106.49228668 313.22616577]
[105.55665588 298.25537109]
[104.62103271 283.28457642]
[103.68540192 268.31378174]
[102.74977112 253.34300232]
[101.81414032 238.37220764]
[100.87851715 223.40142822]
[99.94288635 208.43063354]
[99.00725555 193.45983887]
[98.07163239 178.48904419]
[87.28568268 171.37144470]
[82.51620483 159.15153503]
[85.72263336 146.23074341]
[95.94701385 137.40351868]
[95.32303619 122.41650391]
[94.69905853 107.42948914]
[91.03031921 109.58639526]
[86.74694061 110.85327148]
[82.02606964 111.11233521]
[67.04635620 111.89218140]
[52.06664276 112.67202759]
[45.16068268 126.39074707]
[32.31178665 134.80509949]
[16.97624207 135.65168762]
[3.27923679 128.70275879]
[-5.09480524 115.82754517]
[-5.89330912 100.48942566]
[1.09851897 86.81426239]
[13.99991226 78.48062134]
[29.34046173 77.73020172]
[42.99363327 84.76485443]
[51.28679657 97.69230652]
[66.26651001 96.91246796]
[81.24622345 96.13262177]
[66.30910492 94.76064301]
[53.87352371 86.37277222]
[47.00584793 73.03729248]
[47.39950562 58.04245758]
[54.95742798 45.08568954]
[67.81598663 37.36186600]
[82.80451965 36.77552032]
[96.22716522 43.47123337]
[104.77416992 55.79798126]
[106.33802032 70.71623993]
[100.53382874 84.54649353]
[108.25791168 71.68808746]
[115.98200226 58.82968903]
[123.70608521 45.97128677]
[131.43017578 33.11288452]
[139.15425110 20.25448036]
[146.87834167 7.39607811]
[154.60243225 -5.46232414]
[162.19233704 -18.40038109]
[169.64724731 -31.41668892]
[156.52262878 -24.15414429]
[141.94309998 -20.62746811]
[126.95019531 -21.08860207]
[112.61495972 -25.50460243]
[99.96147919 -33.55999756]
[89.89369202 -44.67933273]
[83.13080597 -58.06826401]
[80.15596771 -72.77031708]
[81.18167114 -87.73520660]
[86.13465881 -101.89387512]
[94.66109467 -114.23485565]
[106.15186310 -123.87654877]
[119.78610229 -130.13015747]
[134.58979797 -132.54895020]
[149.50541687 -130.96011353]
[163.46740723 -125.47718048]
[175.47837830 -116.49181366]
[184.68026733 -104.64592743]
[190.41572571 -90.78575134]
[192.27502441 -75.90142822]
[190.12533569 -61.05626297]
[184.12309265 -47.31546402]
[196.38545227 -55.95457840]
[208.64782715 -64.59369659]
[220.91018677 -73.23281097]
[216.42799377 -87.68151855]
[216.63208008 -102.80809784]
[221.50247192 -117.13061523]
[230.56202698 -129.24588013]
[242.92315674 -137.96697998]
[257.37484741 -142.43949890]
[272.50131226 -142.22528076]
[286.82055664 -137.34529114]
[298.92974854 -128.27761841]
[307.64257812 -115.91064453]
[312.10540771 -101.45594788]
[311.88104248 -86.32965088]
[306.99145508 -72.01367950]
[297.91567993 -59.91055679]
[285.54287720 -51.20603180]
[271.08517456 -46.75288391]
[255.95904541 -46.98738480]
[241.64634705 -51.88656235]
[229.54930115 -60.97044373]
[217.28694153 -52.33132553]
[205.02456665 -43.69221115]
[192.76220703 -35.05309296]
[182.66355896 -23.96177864]
[175.20864868 -10.94546986]
[174.60963440 -3.53015852]
[167.46083069 2.26176071]
[159.73674011 15.12016296]
[152.01266479 27.97856522]
[144.28857422 40.83696747]
[136.56448364 53.69536972]
[128.84040833 66.55377197]
[121.11631775 79.41217804]
[113.39223480 92.27057648]
[109.68607330 106.80551147]
[110.31005096 121.79252625]
[110.93402863 136.77954102]
[124.01117706 148.35215759]
[124.69179535 165.46417236]
[113.04241943 177.55342102]
[113.97805023 192.52421570]
[114.91368103 207.49499512]
[115.84930420 222.46578979]
[116.78493500 237.43658447]
[117.72056580 252.40737915]
[118.65618896 267.37817383]
[119.59181976 282.34896851]
[120.52745056 297.31976318]
[121.46308136 312.29052734]
[136.29830933 314.96997070]
[150.06094360 321.12246704]
[161.95083618 330.39035034]
[171.27673340 342.23483276]
[177.49641418 355.96722412]
[180.24830627 370.78918457]
[179.37240601 385.83898926]
[174.91963196 400.24163818]
[167.14886475 413.15975952]
[156.51188660 423.84237671]
[143.62712097 431.66836548]
[129.24366760 436.18276978]
[114.19776154 437.12310791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[24 125]
[25 124]
[26 123]
[29 44]
[30 43]
[31 42]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[63 113]
[64 112]
[86 111]
[87 110]
[88 109]
[89 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
