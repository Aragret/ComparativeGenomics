%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUACUCCGGGGGGGGGGUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUxxxxxxxxxxACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAACCCCCCCCCCACUCUACUCC\
) } def
/len { sequence length } bind def

/coor [
[79.28641510 413.95312500]
[65.44047546 407.93710327]
[53.73181534 398.40768433]
[45.02929306 386.07202148]
[39.97869110 371.84548950]
[38.95479965 356.78381348]
[42.03359604 342.00466919]
[48.98661804 328.60473633]
[59.29790497 317.57839966]
[72.20228577 309.74389648]
[86.74217224 305.68258667]
[86.74217224 290.68258667]
[86.74217224 275.68258667]
[86.74217224 260.68258667]
[86.74217224 245.68257141]
[86.74217224 230.68257141]
[86.74217224 215.68257141]
[86.74217224 200.68257141]
[86.74217224 185.68257141]
[86.74217224 170.68257141]
[86.74217224 155.68257141]
[77.47721863 143.88592529]
[62.90451813 140.33117676]
[48.33181763 136.77641296]
[33.75911331 133.22164917]
[19.18641090 129.66688538]
[4.47844934 126.72140503]
[-10.33930874 124.39029694]
[-25.15706635 122.05919647]
[-33.12870407 134.97154236]
[-45.40355301 143.82427979]
[-60.09290314 147.29367065]
[-74.95117188 144.88133240]
[-87.71918488 136.98558044]
[-96.46767426 124.83612823]
[-99.88877869 110.30253601]
[-114.70653534 107.97142792]
[-129.52429199 105.64032745]
[-144.34205627 103.30921936]
[-159.44308472 109.70381165]
[-172.36666870 99.60861206]
[-169.81813049 83.40870667]
[-154.41918945 77.76916504]
[-142.01094055 88.49146271]
[-127.19318390 90.82256317]
[-112.37542725 93.15367126]
[-97.55767059 95.48477173]
[-89.83945465 82.70359802]
[-77.78320312 73.82710266]
[-63.20763016 70.23300934]
[-48.32637405 72.49922943]
[-35.41178894 80.31121826]
[-26.44797325 92.50519562]
[-22.82596207 107.24143982]
[-8.00820446 109.57254028]
[6.80955315 111.90364075]
[9.18306828 110.29934692]
[12.35515594 109.57007599]
[15.98393250 110.03253174]
[19.61667824 111.86943054]
[22.74117279 115.09418488]
[37.31387711 118.64894104]
[51.88657761 122.20370483]
[66.45928192 125.75846863]
[81.03198242 129.31323242]
[68.74785614 109.43064117]
[72.14818573 87.88362885]
[87.59823608 74.78221893]
[106.29941559 74.94843292]
[114.02350616 62.09002686]
[100.54047394 68.66330719]
[85.60221863 70.02285767]
[71.15406036 65.99163055]
[59.07751846 57.09459686]
[50.94526672 44.49037170]
[47.81632614 29.82034302]
[50.09816360 14.99491787]
[57.49362564 1.94474018]
[69.03963470 -7.63072968]
[83.23262024 -12.48452377]
[98.22428131 -11.98455715]
[112.06233978 -6.19593620]
[122.94473267 4.12751341]
[129.45428467 17.64142036]
[130.74330139 32.58592987]
[126.64470673 47.01330566]
[137.94371033 37.14758301]
[139.60629272 24.31443405]
[149.27476501 16.33073807]
[161.38880920 17.07741356]
[172.89060974 7.44888687]
[184.29162598 -2.29876518]
[195.59063721 -12.16448879]
[206.88963318 -22.03021049]
[214.84396362 -37.00235367]
[231.43296814 -33.50358200]
[232.66322327 -16.59433174]
[216.75535583 -10.73120689]
[205.45635986 -0.86548358]
[194.15734863 9.00023937]
[191.16813660 15.81274319]
[182.51913452 18.95068932]
[171.01733398 28.57921600]
[165.93029785 45.34591293]
[147.80943298 48.44658661]
[136.51043701 58.31230927]
[126.88190460 69.81410980]
[119.15782166 82.67251587]
[127.83578491 92.38246918]
[131.24490356 106.36731720]
[127.38464355 121.65946198]
[142.15069580 124.29833221]
[156.91674805 126.93719482]
[171.68281555 129.57604980]
[184.50492859 120.33654022]
[200.09126282 122.95225525]
[209.19470215 135.87135315]
[206.41433716 151.42915344]
[193.39971924 160.39549255]
[177.87219238 157.45080566]
[169.04394531 144.34211731]
[154.27789307 141.70324707]
[139.51184082 139.06437683]
[124.74578094 136.42552185]
[118.99487305 141.23977661]
[131.70629883 149.20343018]
[128.06028748 163.75357056]
[113.09558868 164.78205872]
[107.49307251 150.86831665]
[101.74217224 155.68257141]
[101.74217224 170.68257141]
[101.74217224 185.68257141]
[101.74217224 200.68257141]
[101.74217224 215.68257141]
[101.74217224 230.68257141]
[101.74217224 245.68257141]
[101.74217224 260.68258667]
[101.74217224 275.68258667]
[101.74217224 290.68258667]
[101.74217224 305.68258667]
[116.28205872 309.74389648]
[129.18643188 317.57839966]
[139.49772644 328.60473633]
[146.45074463 342.00466919]
[149.52954102 356.78381348]
[148.50564575 371.84548950]
[143.45504761 386.07202148]
[134.75253296 398.40768433]
[123.04386139 407.93710327]
[109.19792938 413.95312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 56]
[28 55]
[29 54]
[36 47]
[37 46]
[38 45]
[39 44]
[69 108]
[70 107]
[86 106]
[87 105]
[90 103]
[91 102]
[92 100]
[93 99]
[94 98]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
