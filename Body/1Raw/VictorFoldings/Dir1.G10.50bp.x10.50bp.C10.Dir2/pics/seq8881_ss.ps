%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCACUUCCAGGGGGGGGGGCUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUxxxxxxxxxxUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGCCCCCCCCCCUUAACUUCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.76455688]
[71.19830322 387.74853516]
[59.48964310 378.21911621]
[50.78712082 365.88345337]
[45.73651886 351.65692139]
[44.71262741 336.59524536]
[47.79142761 321.81607056]
[54.74444962 308.41613770]
[65.05573273 297.38983154]
[77.96011353 289.55529785]
[92.50000000 285.49398804]
[92.50000000 270.49398804]
[92.50000000 255.49400330]
[92.50000000 240.49400330]
[92.50000000 225.49400330]
[92.50000000 210.49400330]
[92.50000000 195.49400330]
[92.50000000 180.49400330]
[92.50000000 165.49400330]
[92.50000000 150.49400330]
[92.50000000 135.49400330]
[81.40751648 131.15113831]
[72.31974030 123.44945526]
[66.21654510 113.21937561]
[63.75599289 101.56393433]
[65.20339966 89.73986816]
[70.40269470 79.02207947]
[78.79326630 70.56620026]
[72.73025513 56.84614944]
[60.07513428 47.35096741]
[62.00783920 32.58228683]
[55.94482422 18.86223221]
[49.88181305 5.14217901]
[37.22669220 -4.35300446]
[39.15939713 -19.12168503]
[33.09638214 -32.84173965]
[27.03337097 -46.56179047]
[12.72425365 -42.01246262]
[-1.99285781 -39.03691483]
[-16.94541168 -37.67004013]
[-31.95809937 -37.92785645]
[-46.85490417 -39.80735016]
[-61.46116638 -43.28647995]
[-75.60563660 -48.32445526]
[-89.12247467 -54.86221313]
[-101.85321045 -62.82309341]
[-113.64857483 -72.11376190]
[-124.37028503 -82.62529755]
[-133.89262390 -94.23444366]
[-142.10394287 -106.80509949]
[-148.90797424 -120.18988037]
[-154.22494507 -134.23185730]
[-157.99252319 -148.76638794]
[-160.16651917 -163.62307739]
[-160.72146606 -178.62771606]
[-159.65083313 -193.60440063]
[-156.96719360 -208.37751770]
[-152.70199585 -222.77389526]
[-146.90525818 -236.62469482]
[-139.64492798 -249.76757812]
[-131.00616455 -262.04840088]
[-121.09020996 -273.32321167]
[-110.01335144 -283.45980835]
[-97.90544891 -292.33932495]
[-84.90847015 -299.85766602]
[-71.17478180 -305.92672729]
[-56.86542511 -310.47528076]
[-42.14815140 -313.45001221]
[-27.19552422 -314.81610107]
[-12.18285084 -314.55746460]
[2.71385098 -312.67718506]
[17.31992531 -309.19726562]
[31.46412468 -304.15853882]
[44.98061371 -297.62005615]
[57.71092224 -289.65847778]
[69.50579071 -280.36715698]
[80.22692871 -269.85507202]
[89.74863434 -258.24539185]
[97.95928192 -245.67430115]
[104.76259613 -232.28915405]
[110.07881165 -218.24688721]
[113.84560394 -203.71215820]
[116.01880646 -188.85536194]
[116.57293701 -173.85069275]
[115.50150299 -158.87406921]
[112.81706238 -144.10108948]
[108.55109406 -129.70494080]
[102.75360870 -115.85444641]
[95.49258423 -102.71196747]
[86.85314941 -90.43160248]
[76.93659210 -79.15732574]
[65.85919189 -69.02133942]
[53.75081253 -60.14245987]
[40.75342560 -52.62480545]
[46.81643677 -38.90475082]
[52.87945175 -25.18469810]
[65.10090637 -16.67086411]
[63.60186768 -0.92083395]
[69.66487885 12.79922009]
[75.72789001 26.51927376]
[87.94934845 35.03310776]
[86.45030975 50.78313828]
[92.51332092 64.50318909]
[112.80302429 66.05657196]
[129.06443787 78.28980255]
[136.18109131 97.35385895]
[151.04414368 99.37619019]
[165.90719604 101.39852905]
[180.77023315 103.42086029]
[191.53051758 96.23267365]
[203.90348816 98.26462555]
[211.30862427 107.88082886]
[226.12637329 110.21192932]
[240.94413757 112.54303741]
[255.76188660 114.87413788]
[272.34823608 111.36277008]
[280.31393433 126.32886505]
[268.13784790 138.12628174]
[253.43078613 129.69189453]
[238.61303711 127.36079407]
[223.79527283 125.02968597]
[208.97750854 122.69858551]
[193.00190735 129.89439392]
[178.74790955 118.28391266]
[163.88485718 116.26157379]
[149.02180481 114.23924255]
[134.15876770 112.21690369]
[128.13615417 122.90044403]
[118.89797211 130.96676636]
[107.50000000 135.49400330]
[107.50000000 150.49400330]
[107.50000000 165.49400330]
[107.50000000 180.49400330]
[107.50000000 195.49400330]
[107.50000000 210.49400330]
[107.50000000 225.49400330]
[107.50000000 240.49400330]
[107.50000000 255.49400330]
[107.50000000 270.49398804]
[107.50000000 285.49398804]
[122.03988647 289.55529785]
[134.94427490 297.38983154]
[145.25555420 308.41613770]
[152.20857239 321.81607056]
[155.28736877 336.59524536]
[154.26348877 351.65692139]
[149.21287537 365.88345337]
[140.51036072 378.21911621]
[128.80169678 387.74853516]
[114.95575714 393.76455688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 103]
[29 102]
[31 100]
[32 99]
[33 98]
[35 96]
[36 95]
[37 94]
[106 127]
[107 126]
[108 125]
[109 124]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
