%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACACAAUGGGGGGGGGGAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACxxxxxxxxxxUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACCCCCCCCCCCAACACAUAAU\
) } def
/len { sequence length } bind def

/coor [
[83.61913300 375.96112061]
[70.39893341 368.68865967]
[59.51213074 358.24163818]
[51.70100021 345.33239746]
[47.49811935 330.84109497]
[47.19004440 315.75573730]
[50.79778671 301.10491943]
[58.07535934 287.88754272]
[68.52656555 277.00476074]
[81.43882751 269.19860840]
[95.93176270 265.00134277]
[95.61971283 250.00457764]
[95.30765533 235.00782776]
[94.99559784 220.01106262]
[94.68354034 205.01431274]
[94.37148285 190.01756287]
[94.05942535 175.02081299]
[93.74737549 160.02404785]
[93.43531799 145.02729797]
[93.12326050 130.03054810]
[76.37695312 119.77561188]
[69.22803497 101.48638916]
[54.52007294 98.54090118]
[39.81211090 95.59542084]
[25.10415077 92.64994049]
[10.39618874 89.70446014]
[-4.31177282 86.75897217]
[-18.19901085 103.40390778]
[-45.63772964 101.73572540]
[-60.45548630 104.06682587]
[-75.27324677 106.39793396]
[-90.09100342 108.72903442]
[-104.79805756 117.16342926]
[-116.97414398 105.36600494]
[-109.00844574 90.39990997]
[-92.42210388 93.91127777]
[-77.60434723 91.58017731]
[-62.78659058 89.24906921]
[-47.96883392 86.91796875]
[-46.88041306 79.49736023]
[-44.70357513 64.65615845]
[-43.61515808 57.23555374]
[-57.13934708 50.74739075]
[-70.66353607 44.25922394]
[-84.25235748 51.75079346]
[-99.64516449 49.79088593]
[-110.92310333 39.13313293]
[-113.74958038 23.87565422]
[-107.03775787 9.88526249]
[-93.36846161 2.54154921]
[-77.99782562 4.66832161]
[-66.83616638 15.44779205]
[-64.17536926 30.73503494]
[-50.65118408 37.22320175]
[-37.12699127 43.71136475]
[-16.79763603 45.52898788]
[-3.80200386 57.41182327]
[-1.36629045 72.05101013]
[13.34167099 74.99649811]
[28.04963303 77.94197845]
[42.75759506 80.88745880]
[57.46555710 83.83293915]
[72.17351532 86.77842712]
[81.22418976 75.57476044]
[94.37844086 69.70938873]
[95.31406403 54.73859406]
[81.05581665 49.77826309]
[68.66524506 41.15409470]
[59.06180573 29.50606537]
[52.95814896 15.69853401]
[50.80719757 0.75611115]
[52.76856995 -14.21237564]
[58.69672012 -28.09616470]
[68.15174103 -39.86499023]
[80.43199921 -48.64551926]
[94.62622833 -53.78618622]
[109.68112183 -54.90551758]
[124.47949219 -51.92045212]
[137.92321777 -45.05249786]
[149.01467896 -34.81130219]
[156.93081665 -21.95683670]
[161.08421326 -7.44298124]
[161.16662598 7.65323639]
[157.17196655 22.21157646]
[149.39666748 35.15171432]
[138.41769409 45.51340866]
[125.04975891 52.52774811]
[110.28485870 55.67422485]
[109.34922791 70.64501190]
[114.57818604 72.85962677]
[119.31184387 75.99633789]
[123.38938904 79.94857788]
[126.67227173 84.58205414]
[129.04896545 89.73936462]
[143.98327637 88.33705902]
[158.91758728 86.93476105]
[144.14210510 84.34918976]
[133.27679443 74.00776672]
[129.96479797 59.37797546]
[135.31663513 45.36520386]
[147.53782654 36.66793442]
[162.53059387 36.20237350]
[175.26797485 44.12474823]
[189.76356506 40.26758957]
[204.25917053 36.41042709]
[218.01089478 26.49447060]
[231.34619141 36.96376801]
[224.97761536 52.67610931]
[208.11633301 50.90602493]
[193.62072754 54.76318359]
[179.12513733 58.62034225]
[179.12513733 66.12034607]
[179.12513733 81.12034607]
[179.12513733 88.62034607]
[193.62072754 92.47750092]
[205.57743835 82.58725739]
[221.06602478 81.64746094]
[234.13081360 90.01947784]
[239.74815369 104.48410034]
[235.75802612 119.47937775]
[223.69473267 129.23933411]
[208.19686890 130.01106262]
[195.22364807 121.49781036]
[189.76356506 106.97309875]
[175.26797485 103.11594391]
[160.31988525 101.86906433]
[145.38557434 103.27136993]
[130.45127869 104.67367554]
[122.99449158 120.50308228]
[108.12001038 129.71849060]
[108.43206787 144.71524048]
[108.74412537 159.71199036]
[109.05618286 174.70875549]
[109.36824036 189.70550537]
[109.68029785 204.70225525]
[109.99234772 219.69900513]
[110.30440521 234.69577026]
[110.61646271 249.69252014]
[110.92852020 264.68927002]
[125.58351135 268.28002930]
[138.80932617 275.54229736]
[149.70419312 285.98089600]
[157.52528381 298.88409424]
[161.73934937 313.37216187]
[162.05908203 328.45727539]
[158.46264648 343.11087036]
[151.19528198 356.33386230]
[140.75248718 367.22470093]
[127.84626007 375.04083252]
[113.35656738 379.24929810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 39]
[30 38]
[31 37]
[32 36]
[42 55]
[43 54]
[44 53]
[65 89]
[66 88]
[94 128]
[95 127]
[96 126]
[103 111]
[104 110]
[105 109]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
