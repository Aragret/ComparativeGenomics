%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUUAUUACAGGGGGGGGGGUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAxxxxxxxxxxCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCCCCCCCCCCCAUAAUUAUAACA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 375.66171265]
[70.87159729 370.50668335]
[58.28185654 362.22448730]
[47.94191742 351.26171875]
[40.40940475 338.20959473]
[36.09054184 323.77200317]
[35.21823120 308.72753906]
[37.83952332 293.88754272]
[43.81304932 280.05230713]
[52.81666565 267.96795654]
[64.36482239 258.28616333]
[77.83473969 251.52909851]
[92.50000000 248.06111145]
[92.50000000 233.06111145]
[92.50000000 218.06111145]
[92.50000000 203.06111145]
[92.50000000 188.06111145]
[92.50000000 173.06111145]
[92.50000000 158.06111145]
[92.50000000 143.06111145]
[92.50000000 128.06111145]
[92.50000000 113.06111908]
[86.66344452 108.35106659]
[74.99032593 98.93096161]
[69.15376282 94.22090912]
[54.49217224 97.38913727]
[39.83057404 100.55735779]
[25.16897964 103.72557831]
[20.54865074 118.37303925]
[9.21276283 128.73611450]
[-5.78938580 132.02717590]
[-20.42229271 127.36095428]
[-30.74977875 115.99263763]
[-33.99380493 100.98024750]
[-29.28174019 86.36203766]
[-17.88110924 76.07023621]
[-2.85862327 72.87328339]
[11.74474335 77.63114929]
[22.00075912 89.06398010]
[36.66235352 85.89575958]
[51.32395172 82.72753906]
[65.98554230 79.55931854]
[84.56143188 81.60327911]
[97.00656891 92.20603180]
[95.65769958 76.44242859]
[107.95973206 68.04545593]
[114.15322113 54.38380432]
[114.85714722 45.21616364]
[120.61317444 40.51001358]
[127.08226776 26.97669411]
[133.55137634 13.44337273]
[140.02046204 -0.08994809]
[146.48956299 -13.62326908]
[133.56304932 -21.25180435]
[121.35060120 -29.97794151]
[109.94516754 -39.73526764]
[99.43354797 -50.44952011]
[89.89574432 -62.03915787]
[81.40435028 -74.41596985]
[74.02398682 -87.48577118]
[67.81082916 -101.14907837]
[62.81216049 -115.30191040]
[59.06602478 -129.83656311]
[56.60093307 -144.64239502]
[55.43564606 -159.60673523]
[55.57903671 -174.61569214]
[57.03000641 -189.55503845]
[59.77751923 -204.31106567]
[63.80065918 -218.77148438]
[69.06880951 -232.82623291]
[75.54187775 -246.36834717]
[83.17059326 -259.29473877]
[91.89690399 -271.50708008]
[101.65438843 -282.91238403]
[112.36878967 -293.42385864]
[123.95855713 -302.96148682]
[136.33549500 -311.45269775]
[149.40539551 -318.83288574]
[163.06878662 -325.04586792]
[177.22169495 -330.04431152]
[191.75639343 -333.79025269]
[206.56225586 -336.25512695]
[221.52661133 -337.42022705]
[236.53556824 -337.27661133]
[251.47489929 -335.82543945]
[266.23089600 -333.07772827]
[280.69125366 -329.05438232]
[294.74591064 -323.78601074]
[308.28793335 -317.31277466]
[321.21423340 -309.68386841]
[333.42645264 -300.95739746]
[344.83160400 -291.19973755]
[355.34292603 -280.48519897]
[364.88040161 -268.89529419]
[373.37145996 -256.51824951]
[380.75146484 -243.44822693]
[386.96423340 -229.78474426]
[391.96249390 -215.63177490]
[395.70822144 -201.09703064]
[398.17291260 -186.29112244]
[399.33776855 -171.32675171]
[399.19396973 -156.31779480]
[397.74255371 -141.37849426]
[394.99462891 -126.62254333]
[390.97109985 -112.16223145]
[385.70254517 -98.10763550]
[379.22909546 -84.56570435]
[371.60003662 -71.63951111]
[362.87338257 -59.42742920]
[353.11557007 -48.02240372]
[342.40087891 -37.51123428]
[330.81085205 -27.97391891]
[318.43365479 -19.48304558]
[305.36355591 -12.10323334]
[291.69998169 -5.89064932]
[277.54693604 -0.89257604]
[263.01214600 2.85294771]
[248.20620728 5.31741571]
[233.24182129 6.48207188]
[218.23286438 6.33805180]
[203.29357910 4.88645172]
[188.53765869 2.13831997]
[174.07740784 -1.88542902]
[160.02288818 -7.15417099]
[153.55378723 6.37914991]
[147.08468628 19.91246986]
[140.61558533 33.44579315]
[134.14649963 46.97911072]
[127.81487274 60.57729721]
[121.62138367 74.23894501]
[123.41325378 89.02537537]
[110.66822052 98.39952087]
[107.50000000 113.06111908]
[107.50000000 128.06111145]
[107.50000000 143.06111145]
[107.50000000 158.06111145]
[107.50000000 173.06111145]
[107.50000000 188.06111145]
[107.50000000 203.06111145]
[107.50000000 218.06111145]
[107.50000000 233.06111145]
[107.50000000 248.06111145]
[122.16526031 251.52909851]
[135.63517761 258.28616333]
[147.18333435 267.96795654]
[156.18695068 280.05230713]
[162.16047668 293.88754272]
[164.78176880 308.72753906]
[163.90945435 323.77200317]
[159.59059143 338.20959473]
[152.05809021 351.26171875]
[141.71813965 362.22448730]
[129.12840271 370.50668335]
[114.96779633 375.66171265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 42]
[26 41]
[27 40]
[28 39]
[44 132]
[46 130]
[47 129]
[49 128]
[50 127]
[51 126]
[52 125]
[53 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
