%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCGCUAACAGGGGGGGGGGUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAxxxxxxxxxxUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGCCCCCCCCCCUUACCGCUAACA\
) } def
/len { sequence length } bind def

/coor [
[95.44644928 405.51998901]
[81.28584290 400.36499023]
[68.69609833 392.08276367]
[58.35616302 381.11999512]
[50.82365036 368.06787109]
[46.50478745 353.63027954]
[45.63247681 338.58581543]
[48.25376892 323.74581909]
[54.22729492 309.91058350]
[63.23091125 297.82623291]
[74.77906799 288.14447021]
[88.24898529 281.38739014]
[102.91424561 277.91940308]
[102.91424561 262.91940308]
[102.91424561 247.91940308]
[102.91424561 232.91940308]
[102.91424561 217.91940308]
[102.91424561 202.91940308]
[102.91424561 187.91940308]
[102.91424561 172.91940308]
[102.91424561 157.91940308]
[102.91424561 142.91940308]
[91.40905762 141.11970520]
[81.07862854 136.36929321]
[72.64220428 129.16242981]
[66.64185333 120.15750885]
[63.40855026 110.11904144]
[48.44627762 111.18223572]
[33.48400497 112.24542999]
[18.52173233 113.30863190]
[5.30468702 122.00462341]
[-7.93899155 115.18888855]
[-15.24838448 128.77478027]
[-28.75358391 136.23219299]
[-44.14512634 135.18151855]
[-56.51163101 125.95800781]
[-61.90698624 111.50485229]
[-58.60956192 96.43400574]
[-47.67154312 85.55451202]
[-32.58322144 82.33798218]
[-18.15921974 87.81080627]
[-9.00218773 100.22661591]
[3.14465642 91.60666656]
[17.45853615 98.34635162]
[32.42081070 97.28315735]
[47.38308334 96.21996307]
[62.34535599 95.15676880]
[69.18230438 77.82797241]
[83.43927765 65.83757019]
[101.68360138 62.07250977]
[105.29603577 47.51399612]
[108.90847015 32.95548248]
[112.52091217 18.39697075]
[116.13334656 3.83845758]
[119.59806824 -10.75591564]
[122.91470337 -25.38465118]
[126.23134613 -40.01338577]
[129.54798889 -54.64212418]
[132.86462402 -69.27085876]
[118.76001740 -74.43693542]
[105.43185425 -81.36431122]
[93.09899902 -89.93922424]
[81.96397400 -100.02086639]
[72.20961761 -111.44368744]
[63.99611282 -124.02011871]
[57.45832443 -137.54364014]
[52.70361710 -151.79219055]
[49.81005859 -166.53178406]
[48.82516861 -181.52038574]
[49.76512146 -196.51188660]
[52.61448288 -211.26008606]
[57.32645798 -225.52281189]
[63.82367706 -239.06587219]
[71.99944305 -251.66687012]
[81.71951294 -263.11889648]
[92.82427216 -273.23385620]
[105.13136292 -281.84570312]
[118.43869781 -288.81298828]
[132.52775574 -294.02133179]
[147.16717529 -297.38519287]
[162.11657715 -298.84933472]
[177.13047791 -298.38970947]
[191.96232605 -296.01385498]
[206.36857605 -291.76083374]
[220.11265564 -285.70040894]
[232.96888733 -277.93215942]
[244.72615051 -268.58361816]
[255.19137573 -257.80831909]
[264.19271851 -245.78318787]
[271.58239746 -232.70567322]
[277.23901367 -218.79054260]
[281.06973267 -204.26628113]
[283.01162720 -189.37141418]
[283.03277588 -174.35049438]
[281.13290405 -159.45019531]
[277.34313965 -144.91520691]
[271.72576904 -130.98419189]
[264.37298584 -117.88590240]
[255.40556335 -105.83543396]
[244.97074890 -95.03067017]
[233.23988342 -85.64903259]
[220.40560913 -77.84457397]
[206.67866516 -71.74545288]
[192.28445435 -67.45181274]
[177.45936584 -65.03417206]
[162.44682312 -64.53222656]
[147.49336243 -65.95421600]
[144.17671204 -51.32548523]
[140.86007690 -36.69674683]
[137.54344177 -22.06801224]
[134.22680664 -7.43927717]
[135.82435608 -0.17791137]
[130.69186401 7.45089531]
[127.07942200 22.00940895]
[123.46698761 36.56792068]
[119.85454559 51.12643433]
[116.24211121 65.68494415]
[125.51589966 70.76085663]
[133.21144104 78.34203339]
[138.65371704 87.93952179]
[141.31867981 98.88344574]
[140.88140869 110.36947632]
[137.24981689 121.51787567]
[150.71688843 128.12379456]
[164.18395996 134.72970581]
[180.50025940 133.08335876]
[189.86331177 146.54682922]
[182.64123535 161.27005005]
[166.26345825 162.10704041]
[157.57804871 148.19677734]
[144.11097717 141.59086609]
[130.64390564 134.98495483]
[117.91424561 142.91940308]
[117.91424561 157.91940308]
[117.91424561 172.91940308]
[117.91424561 187.91940308]
[117.91424561 202.91940308]
[117.91424561 217.91940308]
[117.91424561 232.91940308]
[117.91424561 247.91940308]
[117.91424561 262.91940308]
[117.91424561 277.91940308]
[132.57951355 281.38739014]
[146.04942322 288.14447021]
[157.59757996 297.82623291]
[166.60119629 309.91058350]
[172.57472229 323.74581909]
[175.19601440 338.58581543]
[174.32369995 353.63027954]
[170.00483704 368.06787109]
[162.47233582 381.11999512]
[152.13238525 392.08276367]
[139.54264832 400.36499023]
[125.38204193 405.51998901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[50 117]
[51 116]
[52 115]
[53 114]
[54 113]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
