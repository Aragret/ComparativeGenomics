%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAACACUACGAGGGGGGGGGGGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAxxxxxxxxxxGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCCCCCCCCCCCAGAAAACUACGA\
) } def
/len { sequence length } bind def

/coor [
[80.65747833 504.41720581]
[67.02197266 498.05566406]
[54.83697128 489.22830200]
[44.54295349 478.25424194]
[36.51204300 465.53021240]
[31.03455162 451.51617432]
[28.30848503 436.71868896]
[28.43239021 421.67272949]
[31.40178871 406.92214966]
[37.10933685 393.00021362]
[45.34871292 380.41018677]
[55.82206726 369.60714722]
[68.15079498 360.98165894]
[81.88922119 354.84552002]
[96.54070282 351.42056274]
[95.94810486 336.43228149]
[95.35550690 321.44396973]
[94.76290894 306.45568848]
[94.17031097 291.46740723]
[93.57771301 276.47909546]
[92.98511505 261.49081421]
[92.39250946 246.50253296]
[91.79991150 231.51423645]
[91.20731354 216.52595520]
[78.36764526 208.77076721]
[64.82568359 215.22174072]
[55.98125839 229.03144836]
[39.61416245 228.00662231]
[32.56146240 213.20150757]
[42.07836533 199.84634399]
[58.37470245 201.67977905]
[71.91667175 195.22879028]
[72.25182343 176.58930969]
[82.33555603 162.23634338]
[97.70426178 156.39756775]
[99.18373108 141.47070312]
[100.66320801 126.54384613]
[102.14268494 111.61698914]
[97.75988007 117.41988373]
[90.10814667 121.11116028]
[80.22136688 121.29621124]
[69.65056610 117.05761719]
[60.25787735 108.12868500]
[46.84600830 101.41141510]
[33.43413544 94.69414520]
[17.63015747 95.43228912]
[9.71529102 82.81468201]
[-3.69657993 76.09741211]
[-17.10845184 69.38014221]
[-33.43782806 70.89124298]
[-42.68901825 57.35065079]
[-35.34518433 42.68776703]
[-18.96103668 41.98650742]
[-10.39118099 55.96826935]
[3.02068973 62.68553925]
[16.43256187 69.40280914]
[31.27723122 68.18419647]
[40.15140533 81.28227234]
[53.56327820 87.99954224]
[66.97515106 94.71681213]
[73.35636139 90.77598572]
[60.14948654 83.66413116]
[59.70520401 68.67071533]
[72.46780396 60.78933716]
[85.67452240 67.90147400]
[86.11878967 82.89433289]
[92.50000000 78.95350647]
[92.50000000 63.95350266]
[92.50000000 48.95350266]
[78.00247955 44.71102524]
[65.28820038 36.55481339]
[55.38785172 25.14605522]
[49.10401154 11.40960693]
[46.94607925 -3.54097819]
[49.08898926 -18.49372482]
[55.35903168 -32.23647690]
[65.24790955 -43.65517807]
[77.95399475 -51.82415771]
[92.44724274 -56.08119583]
[107.55275726 -56.08119583]
[122.04600525 -51.82415771]
[134.75209045 -43.65517807]
[144.64097595 -32.23647690]
[150.91101074 -18.49372482]
[153.05392456 -3.54097819]
[150.89599609 11.40960693]
[144.61215210 25.14605522]
[134.71179199 36.55481339]
[121.99752045 44.71102524]
[107.50000000 48.95350266]
[107.50000000 63.95350266]
[107.50000000 78.95350647]
[120.02326202 87.20989227]
[133.80950928 81.29894257]
[147.59576416 75.38800049]
[161.38201904 69.47705841]
[175.16827393 63.56611252]
[188.95451355 57.65516663]
[202.74076843 51.74422073]
[216.52702332 45.83327866]
[230.31327820 39.92233276]
[244.09953308 34.01138687]
[244.26795959 18.78340340]
[250.62150574 4.94315958]
[262.05938721 -5.11143732]
[276.59988403 -9.63836765]
[291.72384644 -7.85331297]
[304.81088257 -0.06554553]
[313.59359741 12.37565708]
[316.55035400 27.31478119]
[313.16888428 42.16353607]
[304.03500366 54.34928131]
[290.73126221 61.76076126]
[275.56259155 63.11389923]
[261.15704346 58.17425156]
[250.01046753 47.79763794]
[236.22421265 53.70858383]
[222.43797302 59.61952972]
[208.65171814 65.53047180]
[194.86546326 71.44142151]
[181.07920837 77.35236359]
[167.29296875 83.26330566]
[153.50671387 89.17425537]
[139.72045898 95.08519745]
[125.93420410 100.99613953]
[117.06954193 113.09645844]
[115.59006500 128.02331543]
[114.11059570 142.95018005]
[112.63111877 157.87704468]
[127.31932831 168.70803833]
[132.40414429 187.20184326]
[124.60152435 205.73715210]
[106.19560242 215.93334961]
[106.78820038 230.92164612]
[107.38079834 245.90992737]
[107.97340393 260.89822388]
[108.56600189 275.88650513]
[109.15859985 290.87478638]
[109.75119781 305.86309814]
[110.34379578 320.85137939]
[110.93639374 335.83966064]
[111.52899170 350.82797241]
[126.40515137 353.08547974]
[140.58514404 358.11779785]
[153.55638123 365.74298096]
[164.84996033 375.68539429]
[174.05761719 387.58563232]
[180.84651184 401.01348877]
[184.97122192 415.48358154]
[186.28263855 430.47280884]
[184.73336792 445.43930054]
[180.37940979 459.84207153]
[173.37814331 473.16043091]
[163.98268127 484.91293335]
[152.53265381 494.67477417]
[139.44197083 502.09301758]
[125.18384552 506.89953613]
[110.27371979 508.92056274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 32]
[26 31]
[35 129]
[36 128]
[37 127]
[38 126]
[43 60]
[44 59]
[45 58]
[47 56]
[48 55]
[49 54]
[67 92]
[68 91]
[69 90]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
