%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCCCAUAGGGGGGGGGGCCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUAxxxxxxxxxxUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACACCCCCCCCCCUCACCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[99.38806152 459.30300903]
[86.16786194 452.03051758]
[75.28105927 441.58352661]
[67.46993256 428.67428589]
[63.26704788 414.18295288]
[62.95897675 399.09762573]
[66.56671906 384.44680786]
[73.84429169 371.22940063]
[84.29549408 360.34664917]
[97.20775604 352.54049683]
[111.70069885 348.34320068]
[111.38864136 333.34646606]
[111.07658386 318.34970093]
[110.76452637 303.35293579]
[110.45246887 288.35620117]
[110.14041138 273.35943604]
[109.82836151 258.36270142]
[109.51630402 243.36593628]
[109.20424652 228.36918640]
[108.11293793 213.40893555]
[106.24532318 198.52565002]
[104.37770844 183.64237976]
[102.51009369 168.75909424]
[100.33325958 153.91789246]
[90.59429932 142.64837646]
[95.93833923 127.75704193]
[93.45321655 112.96433258]
[87.84091187 126.87483215]
[79.32615662 139.22387695]
[68.32001495 149.41528320]
[55.35383224 156.95704651]
[41.05358124 161.48506165]
[26.10964394 162.78071594]
[11.24347305 160.78149414]
[-2.82723498 155.58387756]
[-15.42318249 147.43881226]
[-25.93626976 136.73950195]
[-33.85895538 124.00251007]
[-38.80875397 109.84272766]
[-40.54669571 94.94374847]
[-38.98888397 80.02486420]
[-34.21052551 65.80630493]
[-26.44230461 52.97452164]
[-16.05925179 42.14898682]
[-3.56263089 33.85233307]
[10.44425297 28.48509789]
[25.28518486 26.30640030]
[40.24368668 27.42142105]
[54.59759903 31.77632904]
[67.65395355 39.16088104]
[78.78242493 49.21857071]
[87.44576263 61.46384048]
[93.22571564 75.30551910]
[95.84311676 90.07327271]
[101.33014679 76.11288452]
[106.81717682 62.15249252]
[104.66426086 46.47845078]
[116.52097321 37.46359253]
[122.00800323 23.50320435]
[127.49503326 9.54281330]
[123.54842377 -10.18210697]
[139.05596924 -21.66885567]
[143.95751953 -35.84541321]
[148.85906982 -50.02197266]
[153.76062012 -64.19853210]
[158.36619568 -78.47399139]
[162.67378235 -92.84217834]
[166.98135376 -107.21035767]
[171.28894043 -121.57854462]
[158.17982483 -129.00140381]
[147.05146790 -139.15557861]
[138.46208191 -151.53176880]
[132.84248352 -165.50918579]
[130.47456360 -180.38670349]
[131.47709656 -195.41809082]
[135.79978943 -209.84938049]
[143.22581482 -222.95669556]
[153.38270569 -234.08259583]
[165.76097107 -242.66899109]
[179.73973083 -248.28518677]
[194.61782837 -250.64950562]
[209.64898682 -249.64334106]
[224.07922363 -245.31715393]
[237.18473816 -237.88793945]
[248.30816650 -227.72836304]
[256.89157104 -215.34800720]
[262.50439453 -201.36788940]
[264.86508179 -186.48921204]
[263.85528564 -171.45831299]
[259.52560425 -157.02912903]
[252.09321594 -143.92539978]
[241.93093872 -132.80444336]
[229.54850769 -124.22404480]
[215.56703186 -118.61460876]
[200.68778992 -116.25749969]
[185.65713501 -117.27095795]
[181.34954834 -102.90277100]
[177.04196167 -88.53459167]
[172.73437500 -74.16640472]
[174.20390320 -69.56032562]
[172.74926758 -63.98221588]
[167.93717957 -59.29697800]
[163.03562927 -45.12042236]
[158.13407898 -30.94386292]
[153.23252869 -16.76730537]
[158.54003906 -7.94334555]
[158.06979370 2.56369925]
[151.73548889 11.23435307]
[141.45542908 15.02984524]
[135.96839905 28.99023438]
[130.48136902 42.95062637]
[133.02674866 57.62612534]
[120.77756500 67.63951874]
[115.29053497 81.59991455]
[109.80350494 95.56030273]
[108.24592590 110.47921753]
[110.73104095 125.27191925]
[120.64775848 137.59950256]
[115.12596893 151.43276978]
[119.09531403 156.85049438]
[119.60571289 162.59251404]
[117.39337921 166.89147949]
[119.26098633 181.77476501]
[121.12860107 196.65803528]
[122.99621582 211.54132080]
[134.36714172 201.75859070]
[149.14343262 204.33952332]
[156.52481079 217.39767456]
[151.11608887 231.38858032]
[136.87059021 236.08604431]
[124.20099640 228.05712891]
[124.51305389 243.05387878]
[124.82511139 258.05062866]
[125.13716888 273.04739380]
[125.44922638 288.04412842]
[125.76128387 303.04089355]
[126.07333374 318.03765869]
[126.38539124 333.03439331]
[126.69744873 348.03115845]
[141.35244751 351.62191772]
[154.57824707 358.88418579]
[165.47311401 369.32278442]
[173.29421997 382.22598267]
[177.50828552 396.71405029]
[177.82800293 411.79916382]
[174.23158264 426.45275879]
[166.96421814 439.67575073]
[156.52142334 450.56658936]
[143.61518860 458.38272095]
[129.12550354 462.59118652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 125]
[21 124]
[22 123]
[23 122]
[24 119]
[26 117]
[27 116]
[54 115]
[55 114]
[56 113]
[58 111]
[59 110]
[60 109]
[62 105]
[63 104]
[64 103]
[65 102]
[66 99]
[67 98]
[68 97]
[69 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
