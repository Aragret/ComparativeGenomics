%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUAAUUAAGGGGGGGGGGUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCxxxxxxxxxxAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCACCCCCCCCCCUAAUGAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 420.06933594]
[71.01555634 414.51632690]
[58.81560135 405.64999390]
[49.20452881 394.02767944]
[42.78650284 380.37997437]
[39.96496582 365.56478882]
[40.91728210 350.51342773]
[45.58358765 336.17199707]
[53.67055511 323.44204712]
[64.66983032 313.12377930]
[77.88998413 305.86578369]
[92.50000000 302.12435913]
[92.50000000 287.12435913]
[92.50000000 272.12435913]
[92.50000000 257.12435913]
[92.50000000 242.12435913]
[92.50000000 227.12435913]
[92.50000000 212.12435913]
[92.50000000 197.12435913]
[92.50000000 182.12435913]
[92.50000000 167.12435913]
[92.50000000 152.12435913]
[92.50000000 137.12435913]
[92.50000000 122.12435913]
[73.09209442 101.88590240]
[86.23549652 72.68532562]
[71.58277130 69.47633362]
[56.93004990 66.26733398]
[39.55229187 72.27101135]
[27.02431297 60.01971436]
[12.30879021 57.11224365]
[-2.40673256 54.20476913]
[-17.12225533 51.29729843]
[-31.83777809 48.38982773]
[-46.55329895 45.48235321]
[-57.72228241 52.01362228]
[-69.95010376 49.24745560]
[-76.76822662 39.20875931]
[-91.42095184 35.99976349]
[-106.07367706 32.79076767]
[-120.72640228 29.58176994]
[-136.18130493 35.06613159]
[-148.48104858 24.21956062]
[-144.97273254 8.20008183]
[-129.26539612 3.48715949]
[-117.51741028 14.92904472]
[-102.86468506 18.13804054]
[-88.21195984 21.34703827]
[-73.55923462 24.55603409]
[-57.18193054 18.32478333]
[-43.64582825 30.76683044]
[-28.93030548 33.67430496]
[-14.21478271 36.58177567]
[0.50073981 39.48925018]
[15.21626282 42.39672089]
[29.93178558 45.30419159]
[40.19066238 38.82209396]
[52.50611496 41.16750336]
[60.13904572 51.61461258]
[74.79177094 54.82360840]
[89.44449615 58.03260422]
[102.35719299 50.39963531]
[106.61003876 36.01515198]
[92.99333191 29.65566826]
[80.47660828 21.33766556]
[69.33948517 11.24697018]
[59.83077240 -0.39098677]
[52.16289902 -13.31620979]
[46.50716782 -27.23994446]
[42.98993301 -41.85112762]
[41.68976593 -56.82334137]
[42.63571548 -71.82210541]
[45.80664825 -86.51233673]
[51.13172531 -100.56584930]
[58.49198151 -113.66867828]
[67.72299194 -125.52811432]
[78.61851501 -135.87921143]
[90.93516541 -144.49070740]
[104.39776611 -151.17022705]
[118.70555878 -155.76855469]
[133.53890991 -158.18295288]
[148.56643677 -158.35949707]
[163.45240784 -156.29421997]
[177.86428833 -152.03327942]
[191.48008728 -145.67184448]
[203.99562073 -137.35206604]
[215.13131714 -127.25978088]
[224.63836670 -115.62046814]
[232.30439758 -102.69415283]
[237.95814514 -88.76961517]
[241.47329712 -74.15792847]
[242.77133179 -59.18553162]
[241.82324219 -44.18690491]
[238.65022278 -29.49712753]
[233.32315063 -15.44437313]
[225.96101379 -2.34258699]
[216.72833252 9.51553345]
[205.83132935 19.86507225]
[193.51345825 28.47481728]
[180.04989624 35.15242386]
[165.74145508 39.74871445]
[150.90774536 42.16099930]
[135.88020325 42.33539581]
[120.99452209 40.26799774]
[116.74167633 54.65248108]
[125.40827942 66.89543152]
[140.38851929 67.66509247]
[155.36875916 68.43475342]
[170.34899902 69.20441437]
[177.21121216 55.60919189]
[189.01391602 45.98547745]
[203.71224976 42.00064087]
[218.75962830 44.34507370]
[231.54899597 52.61259460]
[239.86453247 65.37080383]
[242.26550293 80.40925598]
[238.33593750 95.12245941]
[228.75665283 106.96126556]
[215.18731689 113.87451935]
[199.97889709 114.66445923]
[185.76635742 109.19422913]
[175.01208496 98.41157532]
[169.57934570 84.18465424]
[154.59910583 83.41499329]
[139.61886597 82.64533234]
[124.63861847 81.87567902]
[128.17727661 99.76997375]
[121.00475311 114.92894745]
[107.50000000 122.12435913]
[107.50000000 137.12435913]
[107.50000000 152.12435913]
[107.50000000 167.12435913]
[107.50000000 182.12435913]
[107.50000000 197.12435913]
[107.50000000 212.12435913]
[107.50000000 227.12435913]
[107.50000000 242.12435913]
[107.50000000 257.12435913]
[107.50000000 272.12435913]
[107.50000000 287.12435913]
[107.50000000 302.12435913]
[122.11001587 305.86578369]
[135.33016968 313.12377930]
[146.32945251 323.44204712]
[154.41641235 336.17199707]
[159.08271790 350.51342773]
[160.03503418 365.56478882]
[157.21350098 380.37997437]
[150.79547119 394.02767944]
[141.18440247 405.64999390]
[128.98443604 414.51632690]
[114.96250153 420.06933594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[26 61]
[27 60]
[28 59]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[38 49]
[39 48]
[40 47]
[41 46]
[62 105]
[63 104]
[106 126]
[107 125]
[108 124]
[109 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
