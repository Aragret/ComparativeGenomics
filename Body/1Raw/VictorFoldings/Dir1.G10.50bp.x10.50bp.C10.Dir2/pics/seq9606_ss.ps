%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUGCCUAGGGGGGGGGGGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACxxxxxxxxxxAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGCCCCCCCCCCACUAUUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[87.14170837 359.01000977]
[72.58184814 355.10180664]
[59.38070679 347.82217407]
[48.30577469 337.59429932]
[40.00093460 325.01284790]
[34.94902039 310.80926514]
[33.44374466 295.80935669]
[35.57262421 280.88516235]
[41.21188354 266.90438843]
[50.03366470 254.67982483]
[61.52508163 244.92222595]
[75.01804352 238.19888306]
[89.72807312 234.90065002]
[90.03605652 219.90380859]
[90.34403229 204.90698242]
[90.65200806 189.91014099]
[90.95998383 174.91329956]
[91.26796722 159.91645813]
[91.57594299 144.91961670]
[91.88391876 129.92279053]
[92.19189453 114.92594910]
[87.49809265 100.67925262]
[78.33615875 88.80242920]
[69.17422485 76.92560577]
[60.01229095 65.04878235]
[50.85035324 53.17195892]
[37.35496902 46.62408829]
[22.35576057 46.77808762]
[7.35655165 46.93208313]
[-7.64265776 47.08607864]
[-22.64186668 47.24007797]
[-37.63475418 47.70200348]
[-52.61499405 48.47166443]
[-61.89372635 61.05892563]
[-77.10466003 64.68680573]
[-91.06565857 57.64233398]
[-97.18476105 43.25169373]
[-92.57271576 28.30970192]
[-79.40719604 19.87151337]
[-63.90454865 21.92138100]
[-53.38465500 33.49142075]
[-38.40441132 32.72176361]
[-34.56141281 29.79250526]
[-28.82266426 29.28785706]
[-22.79586411 32.24086761]
[-7.79665470 32.08687210]
[7.20255470 31.93287468]
[22.20176506 31.77887726]
[37.20097351 31.62487984]
[46.36290741 19.74805641]
[42.70420456 5.20110226]
[39.04549789 -9.34585190]
[24.06012344 -8.12583065]
[9.07833576 -9.38911247]
[-5.49115324 -13.10123348]
[-19.25087738 -19.16092491]
[-31.82546043 -27.40287399]
[-42.87186050 -37.60223389]
[-52.08871841 -49.48075867]
[-59.22459793 -62.71439362]
[-64.08482361 -76.94211578]
[-66.53680420 -91.77577972]
[-66.51365662 -106.81071472]
[-64.01599884 -121.63675690]
[-59.11197662 -135.84944153]
[-51.93537140 -149.06103516]
[-42.68197250 -160.91111755]
[-31.60421371 -171.07641602]
[-19.00430489 -179.27958679]
[-5.22598362 -185.29687500]
[9.35486889 -188.96411133]
[24.34047699 -190.18124390]
[39.32202148 -188.91506958]
[53.89079666 -185.20014954]
[67.64935303 -179.13780212]
[80.22234344 -170.89343262]
[91.26677704 -160.69194031]
[100.48135376 -148.81164551]
[107.61468506 -135.57664490]
[112.47216797 -121.34797668]
[114.92129517 -106.51383972]
[114.89524078 -91.47891235]
[112.39472961 -76.65335083]
[107.48796844 -62.44160843]
[100.30882263 -49.23139572]
[91.05313873 -37.38309860]
[79.97341919 -27.21994209]
[67.37193298 -19.01918793]
[53.59245300 -13.00455761]
[57.25115585 1.54239655]
[60.90986252 16.08934975]
[65.27907562 22.84592247]
[66.98155975 30.38360596]
[66.01991272 37.73003769]
[62.72717667 44.01002502]
[71.88911438 55.88684845]
[81.05104828 67.76367188]
[90.21298218 79.64049530]
[99.37492371 91.51731873]
[102.69137573 88.34893799]
[107.75823212 86.68533325]
[113.89563751 87.24474335]
[120.16941071 90.45377350]
[135.07385254 92.14416504]
[149.97830200 93.83456421]
[164.88275146 95.52496338]
[179.78720093 97.21536255]
[193.23648071 86.07515717]
[210.25042725 88.03911591]
[220.40029907 101.41384125]
[235.33630371 102.79786682]
[250.27232361 104.18189240]
[265.20834351 105.56591797]
[276.19436646 94.43752289]
[291.76809692 93.02584839]
[304.57608032 101.99742889]
[308.57080078 117.11617279]
[301.86605835 131.24345398]
[287.62762451 137.70881653]
[272.57846069 133.45951843]
[263.82431030 120.50193024]
[248.88829041 119.11790466]
[233.95228577 117.73387909]
[219.01626587 116.34985352]
[210.32209778 125.90827942]
[197.51487732 128.73738098]
[185.24375916 123.57977295]
[178.09680176 112.11981201]
[163.19235229 110.42941284]
[148.28790283 108.73901367]
[133.38346863 107.04861450]
[118.47901154 105.35821533]
[107.18873596 115.23392487]
[106.88076019 130.23075867]
[106.57277679 145.22760010]
[106.26480103 160.22444153]
[105.95682526 175.22128296]
[105.64884949 190.21810913]
[105.34086609 205.21495056]
[105.03289032 220.21179199]
[104.72491455 235.20863342]
[119.28713989 239.10798645]
[132.49269104 246.37963867]
[143.57382202 256.60079956]
[151.88629150 269.17721558]
[156.94680786 283.37771606]
[158.46118164 298.37673950]
[156.34135437 313.30218506]
[150.71057129 327.28640747]
[141.89619446 339.51629639]
[130.41070557 349.28085327]
[116.92182159 356.01239014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 42]
[33 41]
[50 91]
[51 90]
[52 89]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
