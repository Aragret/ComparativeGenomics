%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCUUCCGGGGGGGGGGUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACxxxxxxxxxxACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCCCCCCCCCCCUUCUCGUCC\
) } def
/len { sequence length } bind def

/coor [
[53.75107956 606.67474365]
[41.19285583 598.32360840]
[31.10663414 587.11114502]
[24.12644005 573.74224854]
[20.69105530 559.05725098]
[21.01643372 543.97930908]
[25.08211708 529.45617676]
[32.63253784 516.40081787]
[43.19306564 505.63394165]
[56.09986115 497.83230591]
[70.54158783 493.48635864]
[69.91761017 478.49932861]
[69.29363251 463.51232910]
[68.66965485 448.52529907]
[68.04567719 433.53829956]
[67.42169952 418.55126953]
[66.79772186 403.56427002]
[66.17374420 388.57723999]
[65.54976654 373.59024048]
[64.92579651 358.60321045]
[64.14595032 343.62350464]
[63.21031952 328.65270996]
[54.60394287 340.93807983]
[41.06662750 347.39880371]
[26.10246277 346.36254883]
[13.58487988 338.09756470]
[6.75401688 324.74319458]
[7.37802124 309.75616455]
[15.29537106 297.01586914]
[28.45668602 289.82003784]
[43.45519638 290.03134155]
[56.40858841 297.59503174]
[63.96388245 310.55322266]
[66.14071655 295.71200562]
[68.31755829 280.87081909]
[70.49439240 266.02960205]
[61.42391968 254.27111816]
[63.42012405 239.18901062]
[75.81501007 229.75479126]
[77.99184418 214.91358948]
[80.16868591 200.07238770]
[68.37251282 186.13510132]
[70.48062134 167.67829895]
[85.62479401 156.37992859]
[87.18237305 141.46102905]
[88.73995972 126.54210663]
[90.29753876 111.62319946]
[84.09213257 97.96695709]
[71.82976532 89.32784271]
[59.56739426 80.68872070]
[43.19502640 79.75193787]
[36.06280136 64.98496246]
[45.50774384 51.57880402]
[61.81370544 53.32456589]
[68.20651245 68.42635345]
[80.46887970 77.06547546]
[92.73124695 85.70458984]
[103.61006927 75.37738037]
[95.62015533 62.68245316]
[87.63024139 49.98752213]
[74.07615662 39.80306244]
[80.11046600 23.95934105]
[97.00547028 25.37184715]
[100.32517242 41.99760818]
[108.31508636 54.69253540]
[116.30500031 67.38746643]
[123.70135498 68.63002777]
[122.77581787 53.65860748]
[121.85028076 38.68718719]
[120.92474365 23.71577072]
[119.99920654 8.74435139]
[113.75260162 -4.89309740]
[114.53178406 -19.87284660]
[122.15955353 -32.78861237]
[134.90142822 -40.70345306]
[149.86000061 -41.81758499]
[163.63378906 -35.87767029]
[173.09075928 -24.23439598]
[176.08044434 -9.53535748]
[171.92303467 4.87699556]
[161.56182861 15.72671318]
[155.79489136 29.57382202]
[150.02793884 43.42092896]
[144.26100159 57.26803589]
[138.49406433 71.11514282]
[145.89041138 72.35770416]
[157.59004211 62.97054291]
[169.28965759 53.58338165]
[180.98928833 44.19622040]
[187.22950745 26.90345764]
[204.62963867 24.84543419]
[216.13143921 15.21690750]
[227.63323975 5.58838177]
[239.13504028 -4.04014444]
[244.25038147 -19.62107277]
[260.35479736 -22.71622276]
[270.88143921 -10.14157104]
[265.00140381 5.16715908]
[248.76356506 7.46165895]
[237.26176453 17.09018517]
[225.75996399 26.71871185]
[214.25816345 36.34723663]
[212.86203003 48.40369415]
[203.30194092 56.51686096]
[190.37644958 55.89584351]
[178.67681885 65.28300476]
[166.97720337 74.67016602]
[155.27757263 84.05732727]
[105.21645355 113.18077850]
[103.65886688 128.09968567]
[102.10128784 143.01860046]
[100.54370880 157.93751526]
[109.74014282 165.59248352]
[114.02705383 176.63471985]
[112.43750763 188.25140381]
[105.48588562 197.54347229]
[95.00988770 202.24922180]
[92.83305359 217.09042358]
[90.65621185 231.93162537]
[99.81977081 244.52793884]
[97.40072632 259.54803467]
[85.33560181 268.20645142]
[83.15876007 283.04763794]
[80.98192596 297.88885498]
[78.80509186 312.73007202]
[78.18111420 327.71707153]
[79.11673737 342.68786621]
[82.79559326 351.12100220]
[79.91281128 357.97924805]
[80.53678894 372.96624756]
[81.16076660 387.95327759]
[81.78474426 402.94027710]
[82.40872192 417.92730713]
[83.03269958 432.91430664]
[83.65666962 447.90133667]
[84.28064728 462.88833618]
[84.90462494 477.87536621]
[85.52860260 492.86236572]
[100.28160858 495.99282837]
[113.79224396 502.69458008]
[125.21122742 512.54638672]
[133.82073975 524.92889404]
[139.07958984 539.06378174]
[140.65719604 554.06250000]
[138.45439148 568.98223877]
[132.60963440 582.88513184]
[123.49035645 594.89721680]
[111.66978455 604.26336670]
[97.89097595 610.39483643]
[83.02008057 612.90625000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 127]
[22 126]
[33 125]
[34 124]
[35 123]
[36 122]
[39 119]
[40 118]
[41 117]
[44 112]
[45 111]
[46 110]
[47 109]
[48 57]
[49 56]
[50 55]
[58 66]
[59 65]
[60 64]
[86 108]
[87 107]
[88 106]
[89 105]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
