%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAUCUACGGGGGGGGGGAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUxxxxxxxxxxCAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCCCCCCCCCCCAAUAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[54.69479370 406.01751709]
[40.84885406 400.00149536]
[29.14019394 390.47207642]
[20.43766975 378.13641357]
[15.38706779 363.90988159]
[14.36317635 348.84820557]
[17.44197464 334.06903076]
[24.39499664 320.66909790]
[34.70627975 309.64276123]
[47.61066055 301.80825806]
[62.15055084 297.74694824]
[62.15055084 282.74694824]
[62.15055084 267.74694824]
[62.15055084 252.74694824]
[62.15055084 237.74694824]
[62.15055084 222.74694824]
[62.15055084 207.74694824]
[62.15055084 192.74694824]
[62.15055084 177.74694824]
[62.15055084 162.74694824]
[54.34103775 175.55364990]
[43.83546829 186.26033020]
[31.17914009 194.31126404]
[17.02899170 199.28854370]
[2.11949801 200.93382263]
[-12.77545547 199.16171265]
[-26.88273430 194.06419373]
[-39.47008896 185.90585327]
[-49.88416290 175.11016846]
[-57.58440781 162.23747253]
[-62.17113495 147.95594788]
[-63.40626526 133.00688171]
[-61.22569275 118.16622162]
[-55.74259949 104.20428467]
[-47.24158859 91.84577942]
[-36.16390991 81.73217010]
[-23.08456421 74.38841248]
[-8.68244076 70.19570160]
[6.29490709 69.37165833]
[21.07006836 71.95905304]
[34.87612915 77.82357788]
[46.99647141 86.66085052]
[56.80198288 98.01214600]
[63.78370285 111.28827667]
[67.57923126 125.80012512]
[67.99140167 140.79644775]
[75.44631195 127.78013611]
[63.00059891 112.19361877]
[60.06149673 91.47633362]
[68.42124176 71.23035431]
[58.43851852 60.03458405]
[48.45579147 48.83882141]
[38.47306442 37.64305496]
[23.25182533 40.15649414]
[9.09710693 34.02073669]
[0.52563018 21.19368362]
[0.27252194 5.76839685]
[8.41854858 -7.33296967]
[22.36434174 -13.92981720]
[37.65985107 -11.91711521]
[49.42433167 -1.93711054]
[53.90378571 12.82561398]
[49.66883087 27.66032791]
[59.65155792 38.85609436]
[69.63428497 50.05186081]
[79.61701202 61.24762344]
[93.89247131 56.64205933]
[95.45005035 41.72314835]
[97.00762939 26.80423546]
[83.26515198 20.44633865]
[72.33340454 9.96895123]
[65.39818573 -3.49141717]
[63.21178436 -18.47468567]
[66.01136017 -33.35558319]
[73.49323273 -46.51993942]
[84.84582520 -56.53978729]
[98.83769989 -62.32824326]
[113.95111847 -63.25742340]
[128.54669189 -59.22653198]
[141.04118347 -50.67281723]
[150.07931519 -38.52411652]
[154.68067932 -24.09823036]
[154.34616089 -8.95997334]
[149.11204529 5.24857044]
[139.54608154 16.98616409]
[126.68592834 24.97960281]
[111.92654419 28.36181641]
[110.36896515 43.28072739]
[108.81138611 58.19964218]
[124.37963104 68.41776276]
[133.15980530 83.41546631]
[147.65541077 79.55831146]
[162.15100098 75.70114899]
[148.24774170 70.07095337]
[138.45579529 58.70795059]
[134.94104004 44.12554550]
[138.48094177 29.54922295]
[148.29248047 18.20313454]
[162.20544434 12.59693050]
[177.14241028 13.97065067]
[189.79945374 22.02044106]
[197.37696838 34.96576309]
[198.19886780 49.94322586]
[192.08334351 63.63996124]
[180.38133240 73.02721405]
[195.37402344 72.55917358]
[210.75659180 62.49156570]
[225.89863586 71.30736542]
[240.87834167 70.52751923]
[252.64236450 59.61939240]
[268.48327637 62.15814209]
[276.24926758 76.19626617]
[269.98297119 90.96490479]
[254.49130249 95.13483429]
[241.65818787 85.50723267]
[226.67848206 86.28707886]
[218.31483459 95.08235168]
[205.79777527 95.81853485]
[195.84207153 87.55186462]
[180.84936523 88.01991272]
[166.00816345 90.19674683]
[151.51257324 94.05390930]
[137.01696777 97.91106415]
[135.75663757 109.80216217]
[130.77693176 120.67365265]
[122.59584808 129.39468384]
[112.06435394 135.05810547]
[100.27794647 137.07482910]
[88.46261597 135.23504639]
[81.00770569 148.25135803]
[77.15055084 162.74694824]
[77.15055084 177.74694824]
[77.15055084 192.74694824]
[77.15055084 207.74694824]
[77.15055084 222.74694824]
[77.15055084 237.74694824]
[77.15055084 252.74694824]
[77.15055084 267.74694824]
[77.15055084 282.74694824]
[77.15055084 297.74694824]
[91.69043732 301.80825806]
[104.59481812 309.64276123]
[114.90609741 320.66909790]
[121.85912323 334.06903076]
[124.93791962 348.84820557]
[123.91403198 363.90988159]
[118.86342621 378.13641357]
[110.16090393 390.47207642]
[98.45223999 400.00149536]
[84.60630035 406.01751709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[46 130]
[47 129]
[50 66]
[51 65]
[52 64]
[53 63]
[67 89]
[68 88]
[69 87]
[91 123]
[92 122]
[93 121]
[105 120]
[106 119]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
