%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAAACAAGGGGGGGGGGAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUxxxxxxxxxxAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCCCCCCCCCCCUAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.45867920]
[71.19830322 356.44265747]
[59.48964310 346.91323853]
[50.78712082 334.57757568]
[45.73651886 320.35104370]
[44.71262741 305.28936768]
[47.79142761 290.51019287]
[54.74444962 277.11026001]
[65.05573273 266.08395386]
[77.96011353 258.24942017]
[92.50000000 254.18812561]
[92.50000000 239.18812561]
[92.50000000 224.18812561]
[92.50000000 209.18812561]
[92.50000000 194.18812561]
[92.50000000 179.18812561]
[92.50000000 164.18812561]
[92.50000000 149.18812561]
[92.50000000 134.18812561]
[92.50000000 119.18811798]
[85.97226715 115.08829498]
[81.40838623 108.87613678]
[66.44813538 109.96744537]
[51.48788834 111.05876160]
[41.17688751 122.73442078]
[25.98952293 123.62805176]
[14.92210770 113.72613525]
[-0.03814114 114.81744385]
[-4.44871378 129.34022522]
[-13.81076431 141.28663635]
[-26.85815239 149.04098511]
[-41.82632446 151.55459595]
[-56.69095993 148.48750305]
[-69.44174194 140.25451660]
[-78.35422516 127.96907806]
[-82.22307587 113.29269409]
[-80.52505493 98.21021271]
[-73.48981476 84.76142883]
[-62.06880951 74.76517487]
[-47.80664062 69.57335663]
[-32.63214493 69.88813782]
[-18.59754753 75.66693878]
[-7.60091496 86.12822723]
[-1.12945163 99.85720062]
[13.83079720 98.76588440]
[23.34405899 87.36266327]
[38.50033188 86.04280853]
[50.39657593 96.09851074]
[65.35682678 95.00720215]
[80.31707764 93.91588593]
[89.94755554 82.01716614]
[105.12788391 80.04658508]
[113.89408875 67.87474823]
[122.66030121 55.70291138]
[123.18869781 50.37934113]
[125.50856018 46.23559952]
[128.85325623 43.76281738]
[132.37252808 43.06837845]
[135.13612366 27.49041176]
[149.18801880 22.55145073]
[158.69638062 10.95010948]
[168.20474243 -0.65123141]
[177.71310425 -12.25257301]
[187.22146606 -23.85391426]
[173.18788147 -58.42899323]
[174.43475342 -73.37708282]
[175.68162537 -88.32516479]
[176.77294922 -103.28541565]
[177.70857239 -118.25620270]
[178.64419556 -133.22700500]
[165.12585449 -140.23944092]
[155.63354492 -152.14808655]
[151.81184387 -166.88967896]
[154.32289124 -181.91014099]
[162.73162842 -194.60710144]
[175.58120728 -202.78073120]
[190.64535522 -205.01490784]
[205.31410217 -200.92253113]
[217.04602051 -191.21263123]
[223.80847168 -177.56750488]
[224.42982483 -162.35127258]
[218.80241394 -148.20022583]
[207.90124512 -137.56611633]
[193.61499023 -132.29136658]
[192.67936707 -117.32057953]
[191.74372864 -102.34978485]
[194.48321533 -95.43307495]
[190.62971497 -87.07829285]
[189.38284302 -72.13020325]
[188.13597107 -57.18211746]
[193.57537842 -52.01851654]
[201.83610535 -64.53890991]
[210.09684753 -77.05931091]
[217.26208496 -90.23729706]
[232.07830811 -92.57814026]
[242.95718384 -82.25097656]
[241.38990784 -67.33308411]
[228.60218811 -59.49229050]
[216.52819824 -50.59180069]
[204.45420837 -41.69131088]
[209.89361572 -36.52770615]
[224.75666809 -38.55004120]
[239.61972046 -40.57237625]
[254.48275757 -42.59471130]
[259.64349365 -57.00392914]
[270.91720581 -67.35581207]
[285.71334839 -71.27156830]
[300.63183594 -67.85139465]
[312.24450684 -57.88121796]
[317.88284302 -43.65211105]
[316.25125122 -28.43381882]
[307.72460938 -15.72339344]
[294.26226807 -8.44159794]
[278.95782471 -8.26173496]
[265.32809448 -15.22513676]
[256.50509644 -27.73166466]
[241.64204407 -25.70932961]
[226.77900696 -23.68699455]
[211.91595459 -21.66466141]
[198.82279968 -14.34555531]
[189.31443787 -2.74421406]
[179.80607605 8.85712719]
[170.29772949 20.45846748]
[160.78936768 32.05981064]
[158.70587158 46.80797195]
[143.97387695 52.57674026]
[134.83213806 64.46911621]
[126.06592560 76.64095306]
[117.29972076 88.81278992]
[119.60667419 106.32552338]
[107.50000000 119.18811798]
[107.50000000 134.18812561]
[107.50000000 149.18812561]
[107.50000000 164.18812561]
[107.50000000 179.18812561]
[107.50000000 194.18812561]
[107.50000000 209.18812561]
[107.50000000 224.18812561]
[107.50000000 239.18812561]
[107.50000000 254.18812561]
[122.03988647 258.24942017]
[134.94427490 266.08395386]
[145.25555420 277.11026001]
[152.20857239 290.51019287]
[155.28736877 305.28936768]
[154.26348877 320.35104370]
[149.21287537 334.57757568]
[140.51036072 346.91323853]
[128.80169678 356.44265747]
[114.95575714 362.45867920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 50]
[23 49]
[24 48]
[27 45]
[28 44]
[52 129]
[53 128]
[54 127]
[58 126]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[65 90]
[66 89]
[67 88]
[68 86]
[69 85]
[70 84]
[101 119]
[102 118]
[103 117]
[104 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
