%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACCAUUGGGGGGGGGGUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUxxxxxxxxxxCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUCCCCCCCCCCAAAAUCCAUU\
) } def
/len { sequence length } bind def

/coor [
[89.42848206 463.61114502]
[75.58254242 457.59512329]
[63.87388229 448.06570435]
[55.17135620 435.73004150]
[50.12075424 421.50350952]
[49.09686279 406.44183350]
[52.17566299 391.66265869]
[59.12868500 378.26272583]
[69.43997192 367.23641968]
[82.34435272 359.40188599]
[96.88423920 355.34057617]
[96.88423920 340.34057617]
[96.88423920 325.34057617]
[96.88423920 310.34057617]
[96.88423920 295.34057617]
[96.88423920 280.34057617]
[96.88423920 265.34057617]
[96.88423920 250.34059143]
[96.88423920 235.34059143]
[96.88423920 220.34059143]
[89.14693451 207.61331177]
[96.88423920 193.81314087]
[96.88423920 178.81314087]
[96.88423920 163.81314087]
[96.88423920 148.81314087]
[96.88423920 133.81314087]
[73.16528320 108.11107635]
[86.11480713 82.79234314]
[81.21325684 68.61578369]
[76.31170654 54.43922806]
[71.41015625 40.26267242]
[66.50860596 26.08611298]
[51.51039505 23.08596611]
[40.10292816 13.04771614]
[35.28366470 -1.25756621]
[38.25199127 -15.95603561]
[48.11256027 -27.12002945]
[43.21100998 -41.29658508]
[38.30945969 -55.47314453]
[33.40790939 -69.64970398]
[28.50635910 -83.82626343]
[19.61400986 -95.90625000]
[7.53402090 -104.79859924]
[-4.63781595 -113.56480408]
[-16.90018463 -122.20392609]
[-29.16255188 -130.84303284]
[-41.42491913 -139.48214722]
[-53.68729019 -148.12127686]
[-65.94965363 -156.76039124]
[-81.47694397 -153.81437683]
[-94.49232483 -162.77961731]
[-97.27400208 -178.33717346]
[-88.17166138 -191.25703430]
[-72.58556366 -193.87408447]
[-59.76264954 -184.63565063]
[-57.31053925 -169.02275085]
[-45.04817200 -160.38363647]
[-32.78580475 -151.74452209]
[-20.52343559 -143.10540771]
[-8.26106834 -134.46629333]
[4.00130033 -125.82717133]
[11.32813740 -124.53755951]
[16.42637062 -116.87858582]
[28.50635910 -107.98623657]
[22.99517250 -121.93711090]
[20.34841728 -136.70175171]
[20.67040253 -151.69830322]
[23.94843864 -166.33572388]
[30.05333900 -180.03720093]
[38.74451065 -192.26272583]
[49.67943954 -202.53050232]
[62.42717743 -210.43589783]
[76.48534393 -215.66734314]
[91.29990387 -218.01867676]
[106.28702545 -217.39723206]
[120.85606384 -213.82748413]
[134.43286133 -207.45014954]
[146.48236084 -198.51652527]
[156.52969360 -187.37869263]
[164.17889404 -174.47560120]
[169.12850952 -160.31576538]
[171.18347168 -145.45718384]
[170.26281738 -130.48547363]
[166.40280151 -115.99063110]
[159.75555420 -102.54391479]
[150.58305359 -90.67525482]
[139.24678040 -80.85238647]
[126.19348145 -73.46242523]
[111.93759155 -68.79661560]
[97.04094696 -67.03882599]
[82.09059906 -68.25833893]
[67.67575073 -72.40709686]
[54.36448669 -79.32158661]
[42.68291855 -88.72781372]
[47.58446884 -74.55125427]
[52.48601913 -60.37469482]
[57.38756943 -46.19813919]
[62.28911972 -32.02157974]
[76.93948364 -29.33225250]
[88.35260773 -19.60617447]
[93.39837646 -5.37920904]
[90.62731934 9.56127357]
[80.68516541 21.18456268]
[85.58671570 35.36112213]
[90.48826599 49.53767776]
[95.38981628 63.71423721]
[100.29136658 77.89079285]
[109.47222137 76.78568268]
[119.34650421 79.71196747]
[128.10963440 86.94077301]
[133.89389038 97.94081879]
[146.52394104 88.04832458]
[162.09899902 91.89506531]
[168.67120361 106.53015137]
[161.19892883 120.72679138]
[145.41426086 123.59455109]
[133.42585754 112.93351746]
[128.04045105 118.15341949]
[142.91813660 120.06508636]
[150.69976807 132.88874817]
[145.52575684 146.96815491]
[131.29216003 151.70147705]
[118.71688080 143.52453613]
[117.26963806 128.59323120]
[111.88423920 133.81314087]
[111.88423920 148.81314087]
[111.88423920 163.81314087]
[111.88423920 178.81314087]
[111.88423920 193.81314087]
[119.62153625 207.61331177]
[111.88423920 220.34059143]
[111.88423920 235.34059143]
[111.88423920 250.34059143]
[111.88423920 265.34057617]
[111.88423920 280.34057617]
[111.88423920 295.34057617]
[111.88423920 310.34057617]
[111.88423920 325.34057617]
[111.88423920 340.34057617]
[111.88423920 355.34057617]
[126.42412567 359.40188599]
[139.32850647 367.23641968]
[149.63978577 378.26272583]
[156.59280396 391.66265869]
[159.67161560 406.44183350]
[158.64772034 421.50350952]
[153.59712219 435.73004150]
[144.89459229 448.06570435]
[133.18592834 457.59512329]
[119.33998871 463.61114502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[28 107]
[29 106]
[30 105]
[31 104]
[32 103]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 64]
[43 63]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
