%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCGAGCAGGGGGGGGGGGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCxxxxxxxxxxCAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCCCCCCCCCCCUCCUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[80.66780090 363.77072144]
[67.44958496 356.49465942]
[56.56562042 346.04467773]
[48.75799942 333.13330078]
[44.55905914 318.64086914]
[44.25508881 303.55541992]
[47.86681747 288.90557861]
[55.14798355 275.69018555]
[65.60214996 264.81024170]
[78.51653290 257.00762939]
[93.01061249 252.81428528]
[92.70263672 237.81744385]
[92.39465332 222.82060242]
[92.08667755 207.82376099]
[91.77870178 192.82691956]
[91.47072601 177.83009338]
[91.16274261 162.83325195]
[90.85476685 147.83641052]
[90.54679108 132.83956909]
[90.23881531 117.84273529]
[79.57790375 107.29071808]
[64.57869720 107.13672638]
[49.57948685 106.98272705]
[37.34274673 119.44264221]
[20.21710587 119.23271179]
[8.74995613 106.96863556]
[-6.24925327 107.12263489]
[-21.24846268 107.27663422]
[-36.24767303 107.43062592]
[-47.26836014 118.43890381]
[-62.48188782 118.38140869]
[-72.90867615 107.80702972]
[-87.90789032 107.96102142]
[-102.90709686 108.11502075]
[-117.90631104 108.26902008]
[-130.11532593 118.67668152]
[-145.83647156 115.47902679]
[-153.00984192 101.12902832]
[-146.13262939 86.63477325]
[-130.48043823 83.11501312]
[-118.06030273 93.26980591]
[-103.06109619 93.11581421]
[-88.06188965 92.96181488]
[-73.06267548 92.80781555]
[-62.85519409 82.02158356]
[-47.64605713 81.65174103]
[-36.40166855 92.43141937]
[-21.40246010 92.27742004]
[-6.40325022 92.12342834]
[8.59595966 91.96942902]
[16.26475143 81.57029724]
[28.71459198 77.44353485]
[41.44967270 81.31636047]
[49.73348236 91.98352051]
[64.73268890 92.13751221]
[79.73190308 92.29151154]
[64.86618805 90.28889465]
[53.19403458 80.86759186]
[48.09963989 66.75918579]
[51.06004715 52.05422211]
[61.21693039 41.01620865]
[75.62543488 36.84547043]
[90.10800171 40.75126266]
[100.46560669 51.60114670]
[103.69519806 66.24934387]
[98.86178589 80.44678497]
[105.40966034 66.95140076]
[111.95752716 53.45602036]
[118.36650085 39.89412308]
[124.63591003 26.26714516]
[111.97546387 34.31159973]
[97.28379059 37.33726501]
[82.47498322 34.94994736]
[69.47841644 27.46067429]
[59.98734283 15.84518719]
[55.23830795 1.61681211]
[55.85004044 -13.37070847]
[61.74283981 -27.16472626]
[72.14896393 -37.96808624]
[85.71265411 -44.37327194]
[100.66675568 -45.54578018]
[115.06298065 -41.33285904]
[127.02571869 -32.28338242]
[134.99639893 -19.57636642]
[137.93655396 -4.86733961]
[135.46322632 9.92707920]
[145.56866455 -1.15805411]
[155.67410278 -12.24318790]
[165.77952576 -23.32832146]
[161.04704285 -37.93992996]
[164.27008057 -52.95684052]
[174.58168030 -64.33957672]
[189.20805359 -69.02623749]
[204.21478271 -65.75614166]
[215.56513977 -55.40892410]
[220.20593262 -40.76793289]
[216.88880920 -25.77152443]
[206.50607300 -14.45365620]
[191.85060120 -9.85877705]
[176.86466980 -13.22288704]
[166.75923157 -2.13775325]
[156.65379333 8.94738102]
[146.54835510 20.03251457]
[138.26289368 32.53654861]
[131.99348450 46.16352844]
[132.05535889 53.60048676]
[125.45291138 60.00389099]
[118.90504456 73.49927521]
[112.35717010 86.99465942]
[119.04324341 100.42211151]
[133.75877380 103.32958221]
[148.47428894 106.23705292]
[163.18981934 109.14452362]
[172.31086731 96.90650940]
[185.84251404 89.84552765]
[201.09802246 89.36354828]
[215.04840088 95.55625916]
[224.92379761 107.19409943]
[228.76342773 121.96636963]
[225.80496216 136.94001770]
[216.63577271 149.14201355]
[203.07643127 156.14965820]
[187.81915283 156.57156372]
[173.89326477 150.32395935]
[164.06378174 138.64732361]
[160.28234863 123.86004639]
[145.56681824 120.95257568]
[130.85130310 118.04510498]
[116.13577271 115.13763428]
[112.47798920 116.70375824]
[108.79307556 117.48867798]
[105.23564911 117.53475952]
[105.54363251 132.53160095]
[105.85160828 147.52844238]
[106.15958405 162.52526855]
[106.46755981 177.52210999]
[106.77553558 192.51895142]
[107.08351898 207.51579285]
[107.39149475 222.51261902]
[107.69947052 237.50946045]
[108.00744629 252.50630188]
[122.66146851 256.10104370]
[135.88529968 263.36691284]
[146.77732849 273.80847168]
[154.59490967 286.71380615]
[158.80503845 301.20300293]
[159.12066650 316.28820801]
[155.52024841 330.94082642]
[148.24929810 344.16186523]
[137.80352783 355.04983521]
[124.89517212 362.86245728]
[110.40434265 367.06698608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 56]
[22 55]
[23 54]
[26 50]
[27 49]
[28 48]
[29 47]
[32 44]
[33 43]
[34 42]
[35 41]
[66 109]
[67 108]
[68 107]
[69 105]
[70 104]
[86 103]
[87 102]
[88 101]
[89 100]
[110 129]
[111 128]
[112 127]
[113 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
