%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACAAUCUGGGGGGGGGGCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUxxxxxxxxxxUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUACCCCCCCCCCAUUACAAACU\
) } def
/len { sequence length } bind def

/coor [
[81.53022003 561.62115479]
[67.68428040 555.60510254]
[55.97561646 546.07568359]
[47.27309036 533.74005127]
[42.22248840 519.51348877]
[41.19860077 504.45184326]
[44.27739716 489.67266846]
[51.23041916 476.27273560]
[61.54170227 465.24642944]
[74.44608307 457.41189575]
[88.98596954 453.35058594]
[88.98596954 438.35058594]
[88.98596954 423.35058594]
[88.98596954 408.35058594]
[88.98596954 393.35058594]
[88.98596954 378.35058594]
[88.98596954 363.35058594]
[88.98596954 348.35058594]
[88.98596954 333.35058594]
[88.98596954 318.35058594]
[75.29515076 314.26901245]
[63.30106354 306.47827148]
[53.98519135 295.60516357]
[48.11288452 282.52911377]
[46.17049789 268.31109619]
[48.32510757 254.10757446]
[54.41019058 241.07633972]
[63.93844604 230.28225708]
[76.14083099 222.61013794]
[90.02859497 218.69229126]
[90.34065247 203.69552612]
[90.65270996 188.69877625]
[90.96476746 173.70202637]
[91.27682495 158.70527649]
[91.58888245 143.70851135]
[91.90093231 128.71176147]
[75.70635223 117.31412506]
[70.21703339 98.28683472]
[77.85189056 80.01447296]
[69.59960175 67.48851013]
[61.34731293 54.96254730]
[51.71878815 43.46074295]
[40.83996201 33.13353729]
[29.96113586 22.80633354]
[14.62551212 18.91670227]
[10.72197342 4.54270935]
[-0.15685141 -5.78449583]
[-11.03567696 -16.11170006]
[-16.23939896 -17.35301018]
[-20.03254128 -20.21036148]
[-22.03180695 -23.85791016]
[-22.24542618 -27.43867302]
[-32.45890808 -38.42433548]
[-42.67238617 -49.40999985]
[-58.47333908 -49.73475647]
[-69.35623169 -61.19504547]
[-68.86443329 -76.99167633]
[-57.28973007 -87.75279999]
[-41.49917603 -87.09401703]
[-30.86103249 -75.40618896]
[-31.68672180 -59.62348175]
[-21.47324181 -48.63781738]
[-11.25976181 -37.65215302]
[-0.70847172 -26.99052620]
[10.17035389 -16.66332054]
[21.04917908 -6.33611584]
[35.60667419 -3.18515539]
[40.28834152 11.92750740]
[51.16716766 22.25471306]
[62.04598999 32.58191681]
[59.55900192 17.78952408]
[64.10897827 3.49624801]
[74.68949127 -7.13637114]
[88.96025085 -11.75649548]
[103.76467896 -9.34219646]
[115.82818604 -0.42749408]
[122.48242188 13.01576138]
[122.25553894 28.01404572]
[115.19772339 41.24987411]
[102.87009430 49.79560852]
[87.99941254 51.76100922]
[73.87327576 46.71025848]
[82.12556458 59.23621750]
[90.37785339 71.76218414]
[96.33885193 68.58473206]
[103.21637726 66.73155212]
[110.70291138 66.44641113]
[118.42968750 67.89934540]
[129.93148804 58.27082062]
[135.54669189 43.47960663]
[150.27238464 41.24280930]
[161.77418518 31.61428070]
[173.27600098 21.98575592]
[184.77780151 12.35722923]
[189.89314270 -3.22369838]
[205.99755859 -6.31884909]
[216.52420044 6.25580215]
[210.64416504 21.56453323]
[194.40632629 23.85903168]
[182.90452576 33.48756027]
[171.40272522 43.11608505]
[159.90090942 52.74460983]
[155.10839844 66.84712982]
[139.56001282 69.77262115]
[128.05821228 79.40115356]
[134.12123108 93.12120056]
[148.98426819 91.09886932]
[163.84732056 89.07653809]
[178.72665405 80.94992828]
[190.65467834 92.99810791]
[182.37934875 107.79524994]
[165.86965942 103.93958282]
[151.00660706 105.96191406]
[136.14356995 107.98425293]
[123.82135010 123.44521332]
[106.89768982 129.02381897]
[106.58563232 144.02056885]
[106.27357483 159.01731873]
[105.96151733 174.01408386]
[105.64946747 189.01083374]
[105.33740997 204.00758362]
[105.02535248 219.00433350]
[119.96073151 224.12373352]
[132.57376099 233.58804321]
[141.64202881 246.46504211]
[146.29125977 261.49252319]
[146.07965088 277.20193481]
[141.03976440 292.06198120]
[131.67428589 304.62786865]
[118.90578461 313.68170166]
[103.98596954 318.35058594]
[103.98596954 333.35058594]
[103.98596954 348.35058594]
[103.98596954 363.35058594]
[103.98596954 378.35058594]
[103.98596954 393.35058594]
[103.98596954 408.35058594]
[103.98596954 423.35058594]
[103.98596954 438.35058594]
[103.98596954 453.35058594]
[118.52585602 457.41189575]
[131.43023682 465.24642944]
[141.74153137 476.27273560]
[148.69454956 489.67266846]
[151.77334595 504.45184326]
[150.74945068 519.51348877]
[145.69885254 533.74005127]
[136.99632263 546.07568359]
[125.28766632 555.60510254]
[111.44172668 561.62115479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 122]
[31 121]
[32 120]
[33 119]
[34 118]
[35 117]
[36 116]
[39 84]
[40 83]
[41 82]
[42 70]
[43 69]
[44 68]
[46 66]
[47 65]
[48 64]
[52 63]
[53 62]
[54 61]
[88 105]
[89 104]
[91 102]
[92 101]
[93 100]
[94 99]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
