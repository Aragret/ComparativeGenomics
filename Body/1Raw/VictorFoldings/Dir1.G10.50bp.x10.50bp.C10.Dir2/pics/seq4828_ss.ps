%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAUCCUGGGGGGGGGGUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAAxxxxxxxxxxUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCCCCCCCCCCCAUCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[79.66390991 360.87646484]
[65.81797028 354.86044312]
[54.10931015 345.33102417]
[45.40678787 332.99536133]
[40.35618591 318.76885986]
[39.33229446 303.70715332]
[42.41109467 288.92800903]
[49.36411285 275.52807617]
[59.67539978 264.50173950]
[72.57978058 256.66723633]
[87.11966705 252.60592651]
[87.11966705 237.60592651]
[87.11966705 222.60592651]
[87.11966705 207.60592651]
[87.11966705 192.60592651]
[87.11966705 177.60592651]
[87.11966705 162.60592651]
[87.11966705 147.60592651]
[87.11966705 132.60592651]
[87.11966705 117.60592651]
[86.61902618 97.12622070]
[75.95739746 86.57492828]
[65.29577637 76.02363586]
[53.79779053 85.67356110]
[41.45846176 94.22140503]
[28.38306808 101.59424591]
[14.68316650 107.72917175]
[0.47564206 112.57384491]
[-14.11828995 116.08693695]
[-28.97411537 118.23847198]
[-43.96508789 119.01008606]
[-58.96330643 118.39520264]
[-73.84081268 116.39907074]
[-88.47066498 113.03871155]
[-102.72805023 108.34280396]
[-116.49132538 102.35140991]
[-129.64306641 95.11563873]
[-142.07107544 86.69724274]
[-153.66929626 77.16802979]
[-164.33879089 66.60930634]
[-173.98851013 55.11116028]
[-182.53614807 42.77169037]
[-189.90876770 29.69617271]
[-196.04347229 15.99617004]
[-200.88790894 1.78856468]
[-204.40075684 -12.80542564]
[-206.55204773 -27.66128731]
[-207.32341003 -42.65227127]
[-206.70828247 -57.65048218]
[-204.71189880 -72.52794647]
[-201.35128784 -87.15774536]
[-196.65515137 -101.41505432]
[-190.66352844 -115.17823792]
[-183.42753601 -128.32986450]
[-175.00892639 -140.75772095]
[-165.47952271 -152.35577393]
[-154.92062378 -163.02510071]
[-143.42231750 -172.67463684]
[-131.08270264 -181.22206116]
[-118.00706482 -188.59446716]
[-104.30696106 -194.72894287]
[-90.09927368 -199.57315063]
[-75.50522614 -203.08575439]
[-60.64932632 -205.23678589]
[-45.65832901 -206.00790405]
[-30.66013145 -205.39251709]
[-15.78269577 -203.39588928]
[-1.15295303 -200.03504944]
[13.10427761 -195.33865356]
[26.86735535 -189.34680176]
[40.01885605 -182.11059570]
[52.44657516 -173.69178772]
[64.04447937 -164.16218567]
[74.71362305 -153.60310364]
[84.36296844 -142.10464478]
[92.91019440 -129.76489258]
[100.28237915 -116.68912506]
[106.41661835 -102.98891449]
[111.26058960 -88.78115082]
[114.77294922 -74.18704224]
[116.92373657 -59.33111191]
[117.69460297 -44.34009933]
[117.07897186 -29.34191322]
[115.08209229 -14.46450901]
[111.72100830 0.16517730]
[107.02438354 14.42232990]
[101.03230286 28.18530846]
[93.79587555 41.33668900]
[85.37685394 53.76426697]
[75.84706116 65.36201477]
[86.50868988 75.91330719]
[97.17031860 86.46459198]
[111.24183655 91.66001129]
[126.20208740 90.56869507]
[136.51307678 78.89303589]
[151.70045471 77.99940491]
[162.76786804 87.90132141]
[177.72811890 86.81001282]
[192.68835449 85.71870422]
[207.64860535 84.62738800]
[222.60885620 83.53607941]
[228.37394714 80.09059906]
[234.13853455 80.11924744]
[238.21183777 82.72378540]
[253.20454407 82.25574493]
[268.19723511 81.78770447]
[274.34020996 67.81535339]
[285.94281006 57.89856339]
[300.70129395 54.00632095]
[315.68539429 56.91143417]
[327.91998291 66.03709412]
[334.97589111 79.57138062]
[335.45211792 94.82707214]
[329.25418091 108.77512360]
[317.61264038 118.64614105]
[302.83892822 122.48023224]
[287.86636353 119.51613617]
[275.66781616 110.34236908]
[268.66528320 96.78039551]
[253.67257690 97.24844360]
[238.67988586 97.71648407]
[223.70016479 98.49633026]
[208.73991394 99.58763885]
[193.77967834 100.67894745]
[178.81942749 101.77026367]
[163.85917664 102.86157227]
[154.34591675 114.26479340]
[139.18963623 115.58464813]
[127.29339600 105.52894592]
[112.33314514 106.62025452]
[102.11966705 117.60592651]
[102.11966705 132.60592651]
[102.11966705 147.60592651]
[102.11966705 162.60592651]
[102.11966705 177.60592651]
[102.11966705 192.60592651]
[102.11966705 207.60592651]
[102.11966705 222.60592651]
[102.11966705 237.60592651]
[102.11966705 252.60592651]
[116.65955353 256.66723633]
[129.56393433 264.50173950]
[139.87521362 275.52807617]
[146.82824707 288.92800903]
[149.90704346 303.70715332]
[148.88314819 318.76885986]
[143.83255005 332.99536133]
[135.13002014 345.33102417]
[123.42136383 354.86044312]
[109.57542419 360.87646484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 92]
[22 91]
[23 90]
[93 130]
[94 129]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
