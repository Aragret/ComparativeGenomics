%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCCUUAGGGGGGGGGGCACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACxxxxxxxxxxGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACCCCCCCCCCCUUCGCCUUA\
) } def
/len { sequence length } bind def

/coor [
[94.43011475 364.76449585]
[80.58417511 358.74847412]
[68.87551117 349.21905518]
[60.17298508 336.88339233]
[55.12238312 322.65686035]
[54.09849167 307.59518433]
[57.17729187 292.81600952]
[64.13031769 279.41610718]
[74.44159698 268.38977051]
[87.34597778 260.55526733]
[101.88586426 256.49392700]
[101.88586426 241.49394226]
[101.88586426 226.49394226]
[101.88586426 211.49394226]
[101.88586426 196.49394226]
[101.88586426 181.49394226]
[101.88586426 166.49394226]
[101.88586426 151.49394226]
[101.88586426 136.49394226]
[101.88586426 121.49394226]
[89.19093323 113.50402069]
[75.66674805 119.99218750]
[62.14255524 126.48035431]
[48.61836624 132.96852112]
[35.09417725 139.45668030]
[23.42872429 151.75926208]
[8.37761211 143.95539856]
[11.70993996 127.33216858]
[28.60601234 125.93249512]
[42.13020325 119.44432831]
[55.65439224 112.95616150]
[69.17858124 106.46800232]
[82.70277405 99.97983551]
[82.00161743 92.51268005]
[68.36696625 86.25998688]
[80.59931946 77.57836914]
[79.89816284 70.11122131]
[65.40256500 66.25405884]
[50.90697098 62.39690018]
[36.41137314 58.53974152]
[21.91577721 54.68258286]
[7.42018127 50.82542038]
[-9.44110966 52.59550476]
[-15.80968666 36.88316727]
[-2.47439098 26.41386795]
[11.27734089 36.32982635]
[25.77293777 40.18698502]
[40.26853561 44.04414368]
[54.76412964 47.90130234]
[69.25972748 51.75846100]
[83.75532532 55.61562347]
[71.17458344 47.44708633]
[66.22646332 33.28671646]
[70.98165894 19.06039810]
[83.45021057 10.72161865]
[98.41422272 11.76001835]
[109.61150360 21.74104500]
[112.35617065 36.48780060]
[105.49871826 49.82988358]
[116.16034698 39.27859116]
[126.82196808 28.72730255]
[112.17037964 31.94146347]
[97.17445374 32.29124069]
[82.38893890 29.76369858]
[68.36077118 24.45233536]
[55.60889435 16.55362892]
[44.60501862 6.35977173]
[35.75620651 -5.75214481]
[29.38979340 -19.33407402]
[25.74128914 -33.88359070]
[24.94565582 -48.86247253]
[27.03232956 -63.71662521]
[31.92411804 -77.89655304]
[39.44006348 -90.87771606]
[49.30213547 -102.17990875]
[61.14551163 -111.38504028]
[74.53208160 -118.15258789]
[88.96664429 -122.23220825]
[103.91523743 -123.47299194]
[118.82488251 -121.82903290]
[133.14402771 -117.36115265]
[146.34298706 -110.23461151]
[157.93350220 -100.71305847]
[167.48680115 -89.14869690]
[174.64950562 -75.96932983]
[179.15663147 -61.66248703]
[180.84146118 -46.75740814]
[179.64167786 -31.80546951]
[175.60165405 -17.35977173]
[168.87083435 -3.95469522]
[159.69821167 7.91387749]
[148.42843628 17.80305672]
[163.24620056 15.47195244]
[178.06396484 13.14084816]
[192.88171387 10.80974483]
[206.89108276 -1.09476709]
[223.01293945 5.76713467]
[237.77900696 3.12827039]
[245.81248474 -7.01652479]
[258.21170044 -8.88168240]
[268.21166992 -2.00362492]
[283.02941895 -4.33472872]
[297.84719849 -6.66583300]
[312.66494751 -8.99693680]
[327.48269653 -11.32804012]
[342.30047607 -13.65914440]
[351.39950562 -26.58133507]
[366.98495483 -29.20235634]
[379.81021118 -19.96720314]
[382.26629639 -4.35492706]
[372.89605713 8.37198448]
[357.25869751 10.66287994]
[344.63156128 1.15861368]
[329.81381226 3.48971748]
[314.99606323 5.82082129]
[300.17828369 8.15192509]
[285.36053467 10.48302937]
[270.54278564 12.81413269]
[257.54821777 24.56748199]
[240.41786194 17.89432526]
[225.65180969 20.53318977]
[218.44833374 30.30136299]
[206.12031555 32.59028244]
[195.21281433 25.62750244]
[180.39506531 27.95860672]
[165.57730103 30.28971100]
[150.75955200 32.62081528]
[137.37326050 39.38892746]
[126.71163177 49.94021988]
[116.05001068 60.49150848]
[116.88586426 121.49394226]
[116.88586426 136.49394226]
[116.88586426 151.49394226]
[116.88586426 166.49394226]
[116.88586426 181.49394226]
[116.88586426 196.49394226]
[116.88586426 211.49394226]
[116.88586426 226.49394226]
[116.88586426 241.49394226]
[116.88586426 256.49392700]
[131.42575073 260.55526733]
[144.33013916 268.38977051]
[154.64141846 279.41610718]
[161.59443665 292.81600952]
[164.67323303 307.59518433]
[163.64935303 322.65686035]
[158.59873962 336.88339233]
[149.89622498 349.21905518]
[138.18756104 358.74847412]
[124.34162140 364.76449585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[59 130]
[60 129]
[61 128]
[92 127]
[93 126]
[94 125]
[95 124]
[97 121]
[98 120]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
