%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCCCAAGGGGGGGGGGUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAxxxxxxxxxxGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGCCCCCCCCCCUACCACCCAA\
) } def
/len { sequence length } bind def

/coor [
[82.94820404 343.71783447]
[69.72800446 336.44537354]
[58.84120178 325.99835205]
[51.03007126 313.08911133]
[46.82719040 298.59780884]
[46.51911926 283.51245117]
[50.12686157 268.86163330]
[57.40443420 255.64425659]
[67.85564423 244.76147461]
[80.76790619 236.95533752]
[95.26084137 232.75805664]
[94.94878387 217.76129150]
[94.63672638 202.76454163]
[94.32466888 187.76779175]
[94.01261139 172.77104187]
[93.70056152 157.77427673]
[93.38850403 142.77752686]
[93.07644653 127.78077698]
[92.76438904 112.78401947]
[80.77755737 103.76648712]
[66.28195953 107.62364960]
[51.78636551 111.48081207]
[44.23980713 116.74401855]
[36.94903183 115.26407623]
[22.37632751 118.81884003]
[14.72190952 123.92391205]
[7.46349859 122.29261780]
[-7.18000269 125.54344177]
[-21.82350349 128.79426575]
[-36.46700668 132.04508972]
[-48.18227386 143.52047729]
[-63.90300369 138.85243225]
[-67.45705414 122.84303284]
[-55.18832397 111.96138763]
[-39.71783066 117.40158844]
[-25.07432938 114.15076447]
[-10.43082809 110.89994049]
[4.21267271 107.64911652]
[18.82156563 104.24613190]
[33.39426804 100.69137573]
[47.92920303 96.98521423]
[62.42480087 93.12805176]
[76.92039490 89.27089691]
[62.35009384 85.70630646]
[54.59957504 72.86382294]
[55.64460373 57.90027237]
[65.10498047 46.25976944]
[79.53877258 42.17742157]
[93.69461060 47.13849258]
[102.42224884 59.33802032]
[102.54670715 74.33630371]
[100.37987518 89.17897034]
[109.39740753 77.19213867]
[118.41493225 65.20530701]
[126.92602539 52.85373688]
[134.78344727 40.07637787]
[142.50753784 27.21797562]
[150.23161316 14.35957336]
[150.31567383 9.01050568]
[152.28305054 4.68826389]
[155.41062927 1.94601130]
[158.85998535 0.96144009]
[167.37107849 -11.39013290]
[175.88217163 -23.74170494]
[184.39326477 -36.09327698]
[192.90435791 -48.44485092]
[181.72612000 -58.47857285]
[171.92279053 -69.85939026]
[163.65534973 -82.40042877]
[157.05952454 -95.89574432]
[152.24366760 -110.12373352]
[149.28681946 -124.85076904]
[148.23756409 -139.83500671]
[149.11311340 -154.83039856]
[151.89909363 -169.59069824]
[156.54977417 -183.87353516]
[162.98875427 -197.44438171]
[171.11033630 -210.08038330]
[180.78111267 -221.57403564]
[191.84233093 -231.73661804]
[204.11230469 -240.40124512]
[217.38960266 -247.42562866]
[231.45614624 -252.69444275]
[246.08099365 -256.12115479]
[261.02395630 -257.64947510]
[276.03970337 -257.25433350]
[290.88162231 -254.94223022]
[305.30599976 -250.75111389]
[319.07598877 -244.74978638]
[331.96545410 -237.03683472]
[343.76275635 -227.73889160]
[354.27420044 -217.00863647]
[363.32711792 -205.02226257]
[370.77288818 -191.97662354]
[376.48922729 -178.08590698]
[380.38229370 -163.57824707]
[382.38812256 -148.69184875]
[382.47381592 -133.67115784]
[380.63793945 -118.76284027]
[376.91064453 -104.21170044]
[371.35314941 -90.25668335]
[364.05673218 -77.12693787]
[355.14114380 -65.03806305]
[344.75283813 -54.18857956]
[333.06237793 -44.75664139]
[320.26171875 -36.89712524]
[306.56109619 -30.73909950]
[292.18548584 -26.38367653]
[277.37091064 -23.90238190]
[262.36065674 -23.33595848]
[247.40122986 -24.69370651]
[232.73823547 -27.95333290]
[218.61248779 -33.06130981]
[205.25592041 -39.93376160]
[196.74484253 -27.58218765]
[188.23374939 -15.23061466]
[179.72265625 -2.87904215]
[171.21156311 9.47253036]
[163.09002686 22.08365822]
[155.36593628 34.94206238]
[147.64184570 47.80046463]
[146.88871765 55.20170975]
[139.62095642 60.84365082]
[140.15827942 63.65765381]
[139.57644653 66.86006927]
[137.71939087 70.01176453]
[134.59786987 72.62466431]
[130.40176392 74.22283936]
[121.38423920 86.20967102]
[112.36670685 98.19650269]
[107.76114655 112.47196198]
[108.07319641 127.46871948]
[108.38525391 142.46546936]
[108.69731140 157.46221924]
[109.00936890 172.45898438]
[109.32142639 187.45573425]
[109.63348389 202.45248413]
[109.94553375 217.44923401]
[110.25759125 232.44599915]
[124.91258240 236.03675842]
[138.13839722 243.29902649]
[149.03326416 253.73760986]
[156.85435486 266.64083862]
[161.06843567 281.12887573]
[161.38815308 296.21398926]
[157.79173279 310.86758423]
[150.52436829 324.09060669]
[140.08155823 334.98144531]
[127.17533112 342.79754639]
[112.68563843 347.00601196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 43]
[21 42]
[22 41]
[24 40]
[25 39]
[27 38]
[28 37]
[29 36]
[30 35]
[52 130]
[53 129]
[54 128]
[55 123]
[56 121]
[57 120]
[58 119]
[62 118]
[63 117]
[64 116]
[65 115]
[66 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
