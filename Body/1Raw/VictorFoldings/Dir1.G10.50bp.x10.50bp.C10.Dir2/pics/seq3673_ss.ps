%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACCUAGGGGGGGGGGGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCxxxxxxxxxxGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACCCCCCCCCCCUCACCCUAG\
) } def
/len { sequence length } bind def

/coor [
[85.72083282 408.59658813]
[72.84756470 400.69372559]
[62.72326660 389.48321533]
[56.16868591 375.87387085]
[53.71516418 360.96893311]
[55.56159973 345.97671509]
[61.55831528 332.11248779]
[71.21917725 320.50024414]
[83.76102448 312.08129883]
[98.16714478 307.53814697]
[97.85508728 292.54138184]
[97.54302979 277.54461670]
[97.23097229 262.54788208]
[96.91892242 247.55111694]
[96.60686493 232.55436707]
[96.29480743 217.55761719]
[95.98274994 202.56085205]
[95.67069244 187.56410217]
[95.35863495 172.56735229]
[94.89059448 157.57466125]
[94.26661682 142.58763123]
[80.05509949 138.06283569]
[68.24617004 128.95294189]
[60.26234436 116.35534668]
[57.06536102 101.78756714]
[59.04033279 87.00444794]
[65.94935608 73.78679657]
[76.96015930 63.72681046]
[90.74636841 58.03633881]
[90.12239075 43.04932404]
[89.49841309 28.06230736]
[81.19374084 14.59594059]
[88.39490509 1.55782485]
[87.77093506 -13.42919159]
[87.14695740 -28.41620827]
[86.36711121 -43.39592361]
[85.43148041 -58.36671448]
[84.49584961 -73.33750153]
[69.49066162 -73.69213104]
[54.57150650 -75.33537292]
[39.84884262 -78.25506592]
[25.43167305 -82.42958832]
[11.42673969 -87.82804108]
[-2.06226826 -94.41044617]
[-14.93548107 -102.12807465]
[-27.09758949 -110.92378998]
[-38.45854568 -120.73246765]
[-48.93423843 -131.48147583]
[-58.44710541 -143.09124756]
[-66.92671967 -155.47583008]
[-74.31029510 -168.54350281]
[-80.54315948 -182.19754028]
[-85.57918549 -196.33685303]
[-89.38107300 -210.85673523]
[-91.92066956 -225.64970398]
[-93.17918396 -240.60623169]
[-93.14730072 -255.61557007]
[-91.82524109 -270.56661987]
[-89.22280121 -285.34866333]
[-85.35925293 -299.85226440]
[-80.26319885 -313.97003174]
[-73.97235870 -327.59747314]
[-66.53332520 -340.63363647]
[-58.00116730 -352.98208618]
[-48.43905258 -364.55133057]
[-37.91777802 -375.25573730]
[-26.51524544 -385.01602173]
[-14.31587219 -393.75997925]
[-1.40998101 -401.42285156]
[12.10687542 -407.94787598]
[26.13462257 -413.28677368]
[40.56940079 -417.39999390]
[55.30433655 -420.25711060]
[70.23033905 -421.83694458]
[85.23690033 -422.12780762]
[100.21291351 -421.12753296]
[115.04749298 -418.84356689]
[129.63081360 -415.29275513]
[143.85491943 -410.50146484]
[157.61447144 -404.50509644]
[170.80760193 -397.34811401]
[183.33663940 -389.08343506]
[195.10882568 -379.77230835]
[206.03698730 -369.48364258]
[216.04022217 -358.29360962]
[225.04447937 -346.28509521]
[232.98307800 -333.54696655]
[239.79725647 -320.17352295]
[245.43655396 -306.26382446]
[249.85920715 -291.92083740]
[253.03250122 -277.25073242]
[254.93292236 -262.36215210]
[255.54638672 -247.36532593]
[254.86839294 -232.37126160]
[252.90391541 -217.49099731]
[249.66754150 -202.83470154]
[245.18319702 -188.51086426]
[239.48410034 -174.62556458]
[232.61244202 -161.28158569]
[224.61911011 -148.57772827]
[215.56326294 -136.60804749]
[205.51196289 -125.46117401]
[194.53962708 -115.21962738]
[182.72747803 -105.95923615]
[170.16299438 -97.74856567]
[156.93919373 -90.64840698]
[143.15396118 -84.71131897]
[128.90939331 -79.98126221]
[114.31092072 -76.49325562]
[99.46664429 -74.27313232]
[100.40227509 -59.30234146]
[101.33789825 -44.33155060]
[104.91724396 -37.80974579]
[102.13397217 -29.04018402]
[102.75794983 -14.05316830]
[103.38192749 0.93384743]
[111.64196014 13.32824230]
[104.48542786 27.43832970]
[105.10940552 42.42534637]
[105.73338318 57.41236115]
[119.94490051 61.93716049]
[131.75382996 71.04705811]
[139.73765564 83.64465332]
[142.93463135 98.21243286]
[140.95967102 112.99555206]
[134.05064392 126.21320343]
[123.03984070 136.27319336]
[109.25363159 141.96365356]
[109.87760925 156.95068359]
[113.38022614 165.45852661]
[110.35539246 172.25529480]
[110.66744995 187.25204468]
[110.97950745 202.24879456]
[111.29155731 217.24555969]
[111.60361481 232.24230957]
[111.91567230 247.23905945]
[112.22772980 262.23580933]
[112.53978729 277.23257446]
[112.85184479 292.22930908]
[113.16389465 307.22607422]
[127.74653625 311.16604614]
[140.62774658 319.05596924]
[150.76329041 330.25628662]
[157.33154297 343.85903931]
[159.80004883 358.76150513]
[157.96867371 373.75558472]
[151.98588562 387.62582397]
[142.33670044 399.24777222]
[129.80331421 407.67932129]
[115.40176392 412.23693848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[29 120]
[30 119]
[31 118]
[33 116]
[34 115]
[35 114]
[36 112]
[37 111]
[38 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
