%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUUAUCCUAGGGGGGGGGGACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGACCCUxxxxxxxxxxCUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAACCCCCCCCCCAUAUUAUACUA\
) } def
/len { sequence length } bind def

/coor [
[78.81364441 411.34606934]
[64.79169464 405.79306030]
[52.59173965 396.92672729]
[42.98066711 385.30441284]
[36.56264496 371.65670776]
[33.74110794 356.84152222]
[34.69342422 341.79013062]
[39.35972595 327.44869995]
[47.44669342 314.71875000]
[58.44596863 304.40048218]
[71.66613007 297.14251709]
[86.27613831 293.40106201]
[86.27613831 278.40106201]
[86.27613831 263.40106201]
[86.27613831 248.40107727]
[86.27613831 233.40107727]
[86.27613831 218.40107727]
[86.27613831 203.40107727]
[86.27613831 188.40107727]
[86.27613831 173.40107727]
[86.27613831 158.40107727]
[83.55538177 96.05520630]
[73.39515686 107.10624695]
[62.21577454 117.12506866]
[50.12161255 126.01814270]
[37.22559738 133.70243835]
[23.64813805 140.10618591]
[9.51600361 145.16961670]
[-5.03885174 148.84544373]
[-19.88053131 151.09934998]
[-34.87045670 151.91027832]
[-49.86867142 151.27067566]
[-64.73513794 149.18650818]
[-79.33103943 145.67721558]
[-93.52010345 140.77558899]
[-107.16985321 134.52738953]
[-120.15282440 126.99095917]
[-132.34780884 118.23665619]
[-143.64094543 108.34621429]
[-153.92677307 97.41199493]
[-163.10926819 85.53608704]
[-171.10269165 72.82936096]
[-177.83241272 59.41048050]
[-183.23558044 45.40472412]
[-187.26176453 30.94286346]
[-189.87335205 16.15993118]
[-191.04598999 1.19395459]
[-190.76869202 -13.81533051]
[-189.04408264 -28.72778130]
[-185.88824463 -43.40416336]
[-181.33064270 -57.70744324]
[-175.41383362 -71.50407410]
[-168.19306946 -84.66522980]
[-159.73576355 -97.06803131]
[-150.12088013 -108.59667206]
[-139.43820190 -119.14350891]
[-127.78746033 -128.61007690]
[-115.27744293 -136.90797424]
[-102.02496338 -143.95971680]
[-88.15374756 -149.69947815]
[-73.79331207 -154.07366943]
[-59.07775116 -157.04144287]
[-44.14445114 -158.57508850]
[-29.13284492 -158.66027832]
[-14.18310070 -157.29621887]
[0.56520033 -154.49566650]
[14.97435284 -150.28474426]
[28.90981865 -144.70277405]
[42.24148560 -137.80189514]
[54.84487152 -129.64651489]
[66.60230255 -120.31279755]
[77.40399933 -109.88788605]
[87.14910889 -98.46910858]
[95.74663544 -86.16309357]
[103.11631775 -73.08473969]
[109.18933105 -59.35615540]
[113.90897369 -45.10552597]
[117.23118591 -30.46590805]
[119.12493896 -15.57398987]
[119.57256317 -0.56881940]
[118.56987000 14.40950203]
[116.12622070 29.22112274]
[112.26443481 43.72774887]
[107.02057648 57.79392624]
[100.44359589 71.28833008]
[92.59490204 84.08495331]
[107.58779144 83.62302399]
[118.97886658 73.86375427]
[130.36993408 64.10447693]
[141.76101685 54.34520340]
[153.15208435 44.58592606]
[157.66964722 36.57422256]
[164.87869263 34.74613953]
[176.46774292 25.22280121]
[188.05677795 15.69946384]
[199.64582825 6.17612600]
[208.04444885 -8.55138874]
[224.52136230 -4.55798244]
[225.24528503 12.38050270]
[209.16917419 17.76517487]
[197.58012390 27.28851128]
[185.99107361 36.81185150]
[174.40202332 46.33518600]
[162.91136169 55.97700119]
[151.52027893 65.73627472]
[140.12921143 75.49555206]
[128.73814392 85.25482178]
[117.34706116 95.01409912]
[119.47348785 102.20633698]
[123.72633362 116.59082031]
[125.85276031 123.78305817]
[140.71936035 125.77912140]
[155.58595276 127.77517700]
[170.45256042 129.77122498]
[185.31915283 131.76728821]
[198.89305115 123.21575165]
[213.99406433 128.63230896]
[219.03797913 143.86183167]
[210.15554810 157.22154236]
[194.16059875 158.46301270]
[183.32308960 146.63388062]
[168.45649719 144.63783264]
[153.58990479 142.64176941]
[138.72329712 140.64572144]
[123.85669708 138.64965820]
[118.21156311 143.58750916]
[132.40927124 148.42742920]
[135.31654358 163.14299011]
[124.02603912 173.01846313]
[109.82843018 168.17822266]
[106.92127991 153.46322632]
[101.27613831 158.40107727]
[101.27613831 173.40107727]
[101.27613831 188.40107727]
[101.27613831 203.40107727]
[101.27613831 218.40107727]
[101.27613831 233.40107727]
[101.27613831 248.40107727]
[101.27613831 263.40106201]
[101.27613831 278.40106201]
[101.27613831 293.40106201]
[115.88615417 297.14251709]
[129.10630798 304.40048218]
[140.10559082 314.71875000]
[148.19255066 327.44869995]
[152.85885620 341.79013062]
[153.81117249 356.84152222]
[150.98963928 371.65670776]
[144.57160950 385.30441284]
[134.96054077 396.92672729]
[122.76058197 405.79306030]
[108.73863983 411.34606934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 86]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[93 103]
[94 102]
[95 101]
[96 100]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
