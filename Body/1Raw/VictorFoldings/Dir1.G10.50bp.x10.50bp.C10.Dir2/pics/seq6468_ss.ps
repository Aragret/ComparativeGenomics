%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCCUCUCGGGGGGGGGGUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUxxxxxxxxxxAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCACCCCCCCCCCACCUCCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[84.22453308 382.15661621]
[70.20259094 376.60360718]
[58.00263214 367.73727417]
[48.39155960 356.11495972]
[41.97353363 342.46725464]
[39.15199661 327.65206909]
[40.10431290 312.60067749]
[44.77061844 298.25924683]
[52.85758591 285.52929688]
[63.85685730 275.21102905]
[77.07701874 267.95306396]
[91.68702698 264.21160889]
[91.68702698 249.21162415]
[91.68702698 234.21162415]
[91.68702698 219.21162415]
[91.68702698 204.21162415]
[91.68702698 189.21162415]
[91.68702698 174.21162415]
[91.68702698 159.21162415]
[91.68702698 144.21162415]
[91.68702698 129.21162415]
[91.68702698 114.21161652]
[83.02042389 101.96866608]
[68.87310791 96.98334503]
[54.72579193 91.99802399]
[40.60467911 98.57312012]
[26.32830429 93.31575775]
[20.14697647 79.81291962]
[5.99966002 74.82759857]
[-8.14765644 69.84227753]
[-22.29497337 64.85694885]
[-36.44229126 59.87163162]
[-50.58960724 54.88630676]
[-64.73692322 49.90098572]
[-78.88423920 44.91566467]
[-93.13092804 40.22186279]
[-107.47099304 35.82156372]
[-122.93377686 39.17012787]
[-132.83134460 28.03964806]
[-147.17140198 23.63934898]
[-161.51145935 19.23904800]
[-175.85151672 14.83874798]
[-190.19158936 10.43844700]
[-206.04432678 14.63638783]
[-217.41275024 2.81730056]
[-212.60200500 -12.86035156]
[-196.56097412 -16.26874352]
[-185.79127502 -3.90161395]
[-171.45121765 0.49868640]
[-157.11116028 4.89898682]
[-142.77110291 9.29928684]
[-128.43103027 13.69958782]
[-113.99394989 10.03628445]
[-103.07069397 21.48150253]
[-88.73062897 25.88180161]
[-84.11752319 24.44358444]
[-78.55226898 25.93213844]
[-73.89891815 30.76834869]
[-59.75160217 35.75366974]
[-45.60428619 40.73899078]
[-31.45696831 45.72431564]
[-17.30965042 50.70963669]
[-3.16233468 55.69495773]
[10.98498154 60.68027878]
[25.13229752 65.66560364]
[38.41330338 59.02101898]
[52.83171463 63.87531281]
[59.71111298 77.85070801]
[73.85842896 82.83602905]
[88.00574493 87.82135010]
[75.33384705 79.79496002]
[67.60417175 66.93991852]
[66.45685577 51.98385620]
[72.13533020 38.10023880]
[83.43471527 28.23494911]
[97.95745087 24.48126030]
[112.62203217 27.63564301]
[124.31684875 37.02878571]
[130.56045532 50.66761017]
[130.02803040 65.65815735]
[122.83256531 78.81966400]
[110.50099945 87.35938263]
[124.43171692 81.79744720]
[138.36244202 76.23551178]
[147.81121826 56.51947784]
[168.84701538 53.16099930]
[177.76316833 41.09856796]
[186.67932129 29.03613472]
[195.59545898 16.97370338]
[194.64755249 0.95867908]
[206.67344666 -9.66005516]
[222.44790649 -6.73671532]
[229.87011719 7.48616266]
[223.24639893 22.09800339]
[207.65789795 25.88985443]
[198.74174500 37.95228577]
[189.82559204 50.01471710]
[180.90943909 62.07714844]
[181.67187500 63.27905655]
[182.35729980 64.52648163]
[197.22389221 62.53042603]
[212.09049988 60.53437042]
[226.95709229 58.53831100]
[230.17570496 43.72560501]
[238.26908875 30.90869904]
[250.25990295 21.63529968]
[264.70022583 17.02521706]
[279.84631348 17.63513756]
[293.86920166 23.39141464]
[305.07553101 33.59894562]
[312.11212158 47.02512360]
[314.12924194 62.04867172]
[310.88333130 76.85542297]
[302.76635742 89.65739441]
[290.75848389 98.90867615]
[276.30966187 103.49214172]
[261.16473389 102.85430908]
[247.15249634 97.07219696]
[235.96498108 86.84403229]
[228.95315552 73.40490723]
[214.08654785 75.40097046]
[199.21995544 77.39702606]
[184.35334778 79.39308167]
[178.75477600 90.67257690]
[167.87910461 97.34512329]
[154.95329285 97.22296906]
[143.92437744 90.16622162]
[129.99365234 95.72816467]
[116.06294250 101.29010010]
[113.08121490 109.05673981]
[106.68702698 114.21161652]
[106.68702698 129.21162415]
[106.68702698 144.21162415]
[106.68702698 159.21162415]
[106.68702698 174.21162415]
[106.68702698 189.21162415]
[106.68702698 204.21162415]
[106.68702698 219.21162415]
[106.68702698 234.21162415]
[106.68702698 249.21162415]
[106.68702698 264.21160889]
[121.29704285 267.95306396]
[134.51719666 275.21102905]
[145.51647949 285.52929688]
[153.60343933 298.25924683]
[158.26974487 312.60067749]
[159.22206116 327.65206909]
[156.40052795 342.46725464]
[149.98249817 356.11495972]
[140.37142944 367.73727417]
[128.17147827 376.60360718]
[114.14952850 382.15661621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 70]
[24 69]
[25 68]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 55]
[37 54]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[82 129]
[83 128]
[84 127]
[86 98]
[87 97]
[88 96]
[89 95]
[100 123]
[101 122]
[102 121]
[103 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
