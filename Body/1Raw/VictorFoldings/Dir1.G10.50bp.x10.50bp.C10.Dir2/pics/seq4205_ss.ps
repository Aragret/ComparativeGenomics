%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAUAUUGGGGGGGGGGUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAxxxxxxxxxxCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUACCCCCCCCCCACAACCUAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 400.07553101]
[71.19830322 394.05950928]
[59.48964310 384.53009033]
[50.78712082 372.19442749]
[45.73651886 357.96789551]
[44.71262741 342.90621948]
[47.79142761 328.12704468]
[54.74444962 314.72711182]
[65.05573273 303.70080566]
[77.96011353 295.86627197]
[92.50000000 291.80496216]
[92.50000000 276.80496216]
[92.50000000 261.80496216]
[92.50000000 246.80497742]
[92.50000000 231.80497742]
[92.50000000 216.80497742]
[92.50000000 201.80497742]
[92.50000000 186.80497742]
[92.50000000 171.80497742]
[92.50000000 156.80497742]
[92.50000000 141.80497742]
[84.76270294 129.07769775]
[92.50000000 115.27752686]
[82.99163818 103.67618561]
[68.28367615 100.73070526]
[53.57571793 97.78521729]
[42.38801956 104.28823853]
[30.16589737 101.48847198]
[23.37499428 91.42910004]
[8.73149300 88.17827606]
[-5.91200876 84.92745209]
[-20.55550957 81.67662811]
[-24.78339958 83.18872070]
[-28.85393333 83.23123169]
[-32.31353760 82.04252625]
[-34.83683777 79.98657227]
[-36.25709534 77.49855804]
[-50.57969284 73.04174805]
[-60.59601212 84.51315308]
[-74.41494751 90.91291809]
[-89.64228821 91.13222504]
[-103.63979340 85.13309479]
[-113.98233032 73.95490265]
[-118.87797546 59.53434753]
[-117.47853088 44.36986542]
[-110.02646637 31.08880424]
[-97.81289673 21.99218369]
[-82.95388794 18.65604782]
[-68.02385712 21.65840530]
[-55.60952759 30.47907829]
[-47.86175156 43.58983231]
[-46.12287903 58.71914673]
[-31.80028152 63.17596436]
[-17.30468369 67.03312683]
[-2.66118288 70.28395081]
[11.98231888 73.53477478]
[26.62582016 76.78559875]
[43.01916504 70.60028076]
[56.52120209 83.07726288]
[71.22916412 86.02274323]
[85.93712616 88.96822357]
[91.16334534 86.65188599]
[96.31027985 86.34720612]
[100.69792938 87.74275970]
[103.83968353 90.32228088]
[115.13868713 80.45655823]
[126.23000336 70.35791016]
[137.10882568 60.03070450]
[147.98765564 49.70349884]
[139.00810242 37.66588593]
[131.51535034 24.65070724]
[125.61456299 10.84067059]
[121.38859558 -3.57035041]
[118.89675903 -18.38004684]
[118.17404175 -33.38051605]
[119.23059845 -48.36117172]
[122.05158234 -63.11170959]
[126.59739685 -77.42505646]
[132.80422974 -91.10028076]
[140.58493042 -103.94538879]
[149.83029175 -115.78006744]
[160.41052246 -126.43817139]
[172.17707825 -135.77008057]
[184.96478271 -143.64479065]
[198.59410095 -149.95175171]
[212.87373352 -154.60241699]
[227.60317993 -157.53150940]
[242.57568359 -158.69790649]
[257.58105469 -158.08522034]
[272.40863037 -155.70207214]
[286.85025024 -151.58190918]
[300.70318604 -145.78256226]
[313.77297974 -138.38545227]
[325.87612915 -129.49444580]
[336.84271240 -119.23431396]
[346.51882935 -107.74913025]
[354.76858521 -95.20011139]
[361.47616577 -81.76342773]
[366.54745483 -67.62771606]
[369.91125488 -52.99141693]
[371.52029419 -38.05999374]
[371.35202026 -23.04306984]
[369.40878296 -8.15145493]
[365.71789551 6.40579653]
[360.33111572 20.42432213]
[353.32409668 33.70732117]
[344.79522705 46.06832886]
[334.86419678 57.33380508]
[323.67044067 67.34561157]
[311.37109375 75.96318817]
[298.13882446 83.06555939]
[284.15942383 88.55303192]
[269.62908936 92.34854889]
[254.75184631 94.39884186]
[239.73651123 94.67512512]
[224.79389954 93.17352295]
[210.13378906 89.91510773]
[195.96195984 84.94562531]
[182.47738647 78.33483887]
[169.86935425 70.17556000]
[158.31486511 60.58232498]
[147.43603516 70.90953064]
[136.55720520 81.23673248]
[135.54321289 85.96402740]
[131.50863647 90.08150482]
[125.00440979 91.75556183]
[113.70540619 101.62128448]
[107.50000000 115.27752686]
[115.23729706 129.07769775]
[107.50000000 141.80497742]
[107.50000000 156.80497742]
[107.50000000 171.80497742]
[107.50000000 186.80497742]
[107.50000000 201.80497742]
[107.50000000 216.80497742]
[107.50000000 231.80497742]
[107.50000000 246.80497742]
[107.50000000 261.80496216]
[107.50000000 276.80496216]
[107.50000000 291.80496216]
[122.03988647 295.86627197]
[134.94427490 303.70080566]
[145.25555420 314.72711182]
[152.20857239 328.12704468]
[155.28736877 342.90621948]
[154.26348877 357.96789551]
[149.21287537 372.19442749]
[140.51036072 384.53009033]
[128.80169678 394.05950928]
[114.95575714 400.07553101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 61]
[25 60]
[26 59]
[29 57]
[30 56]
[31 55]
[32 54]
[37 53]
[38 52]
[65 127]
[66 126]
[67 123]
[68 122]
[69 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
