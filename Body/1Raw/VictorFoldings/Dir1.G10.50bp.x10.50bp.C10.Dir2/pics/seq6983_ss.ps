%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGAUUCAUGGGGGGGGGGCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUxxxxxxxxxxUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACCCCCCCCCCCUAGGACUCAU\
) } def
/len { sequence length } bind def

/coor [
[119.98753357 445.07086182]
[105.96559143 439.51785278]
[93.76563263 430.65151978]
[84.15456390 419.02920532]
[77.73653412 405.38150024]
[74.91500092 390.56631470]
[75.86731720 375.51495361]
[80.53362274 361.17352295]
[88.62058258 348.44357300]
[99.61985779 338.12527466]
[112.84001923 330.86730957]
[127.45003510 327.12588501]
[127.45003510 312.12588501]
[127.45003510 297.12588501]
[127.45003510 282.12588501]
[127.45003510 267.12588501]
[127.45003510 252.12586975]
[127.45003510 237.12586975]
[127.45003510 222.12586975]
[127.45003510 207.12586975]
[127.45003510 192.12586975]
[119.73606110 187.99487305]
[114.17786407 180.82228088]
[111.94760132 171.69288635]
[113.68675995 162.12803650]
[119.35186005 153.83226013]
[128.17845154 148.39001465]
[118.30274200 137.09973145]
[108.42703247 125.80945587]
[98.55133057 114.51918030]
[84.62061310 108.95723724]
[69.68460083 110.34126282]
[54.74858856 111.72528839]
[39.81257248 113.10931396]
[24.59889412 120.59131622]
[13.19773102 108.04341125]
[22.09909821 93.61420441]
[38.42855072 98.17330170]
[53.36456299 96.78927612]
[68.30057526 95.40525055]
[83.23658752 94.02122498]
[85.23264313 79.15463257]
[71.19066620 73.87989044]
[57.14868927 68.60514832]
[42.00444031 73.89959717]
[28.50002670 65.23873901]
[26.99488449 49.26644897]
[38.64362717 38.23529434]
[54.51033783 40.60743713]
[62.42343140 54.56317139]
[76.46540833 59.83790970]
[90.50738525 65.11265564]
[96.10153198 60.11710358]
[107.28983307 50.12600708]
[112.88397980 45.13045883]
[109.22527313 30.58350563]
[105.56656647 16.03655052]
[101.90785980 1.48959708]
[86.83281708 1.56946659]
[72.17687225 -1.96136332]
[58.79210663 -8.89761448]
[47.45669937 -18.83602333]
[38.82967377 -31.19878197]
[33.41258621 -45.26713943]
[31.52038956 -60.22317505]
[33.26308441 -75.19736481]
[38.53936005 -89.31913757]
[47.04245758 -101.76745605]
[58.27801895 -111.81861115]
[71.59281921 -118.88822174]
[86.21276093 -122.56528473]
[101.28785706 -122.63601685]
[115.94165802 -119.09630585]
[129.32220459 -112.15193939]
[140.65159607 -102.20665741]
[149.27111816 -89.83866882]
[154.67967224 -75.76703644]
[156.56280518 -60.80985641]
[154.81103516 -45.83671951]
[149.52619934 -31.71815300]
[141.01554871 -19.27498627]
[129.77389526 -9.23065090]
[116.45481873 -2.16910863]
[120.11351776 12.37784576]
[123.77222443 26.92479897]
[127.43093109 41.47175217]
[135.52415466 87.20014191]
[109.84160614 104.64347076]
[119.71731567 115.93375397]
[129.59301758 127.22402954]
[139.46873474 138.51431274]
[153.56411743 143.64460754]
[168.38659668 141.34373474]
[183.20907593 139.04286194]
[198.03155518 136.74198914]
[198.57496643 121.70532990]
[201.95451355 107.04329681]
[208.04804993 93.28592682]
[216.63528442 80.93052673]
[227.40580750 70.42374420]
[239.97024536 62.14538574]
[253.87443542 56.39471817]
[268.61572266 53.37962341]
[283.66122437 53.20908737]
[298.46707153 55.88928223]
[312.49804688 61.32331848]
[325.24688721 69.31475830]
[336.25280762 79.57471466]
[345.11785889 91.73229980]
[351.52166748 105.34802246]
[355.23269653 119.92968750]
[356.11676025 134.95016479]
[354.14196777 149.86648560]
[349.37966919 164.13943481]
[342.00201416 177.25305176]
[332.27572632 188.73327637]
[320.55236816 198.16511536]
[307.25576782 205.20761108]
[292.86657715 209.60620117]
[277.90493774 211.20184326]
[262.91174316 209.93688965]
[248.42893982 205.85704041]
[234.98010254 199.10978699]
[223.05139160 189.93905640]
[213.07402039 178.67634583]
[205.40867615 165.72880554]
[200.33244324 151.56446838]
[185.50994873 153.86534119]
[170.68746948 156.16622925]
[155.86499023 158.46710205]
[156.96368408 179.63043213]
[142.45002747 192.12586975]
[142.45002747 207.12586975]
[142.45002747 222.12586975]
[142.45002747 237.12586975]
[142.45002747 252.12586975]
[142.45002747 267.12588501]
[142.45002747 282.12588501]
[142.45002747 297.12588501]
[142.45002747 312.12588501]
[142.45002747 327.12588501]
[157.06004333 330.86730957]
[170.28019714 338.12527466]
[181.27947998 348.44357300]
[189.36643982 361.17352295]
[194.03274536 375.51495361]
[194.98506165 390.56631470]
[192.16352844 405.38150024]
[185.74549866 419.02920532]
[176.13442993 430.65151978]
[163.93447876 439.51785278]
[149.91253662 445.07086182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 91]
[28 90]
[29 89]
[30 88]
[31 41]
[32 40]
[33 39]
[34 38]
[42 52]
[43 51]
[44 50]
[55 86]
[56 85]
[57 84]
[58 83]
[92 130]
[93 129]
[94 128]
[95 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
