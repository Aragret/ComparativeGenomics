%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAACUAGGGGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCACCCCCCCCCCAAUAAAAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.10940552]
[71.19830322 352.09338379]
[59.48964310 342.56396484]
[50.78712082 330.22830200]
[45.73651886 316.00177002]
[44.71262741 300.94009399]
[47.79142761 286.16094971]
[54.74444962 272.76101685]
[65.05573273 261.73468018]
[77.96011353 253.90017700]
[92.50000000 249.83885193]
[92.50000000 234.83885193]
[92.50000000 219.83885193]
[92.50000000 204.83885193]
[92.50000000 189.83885193]
[92.50000000 174.83885193]
[92.50000000 159.83885193]
[92.50000000 144.83885193]
[92.50000000 129.83885193]
[92.50000000 114.83885956]
[86.86804199 100.93630219]
[76.42823029 90.16549683]
[65.98841858 79.39468384]
[57.71201706 75.37560272]
[55.44635773 68.28952789]
[45.23287582 57.30386353]
[35.01939774 46.31819916]
[24.80591774 35.33253479]
[12.36647701 26.95039177]
[-1.65023565 21.60887909]
[-12.58809948 33.35193634]
[-27.15438461 39.99475098]
[-43.11572266 40.55118561]
[-58.03721619 34.96582794]
[-69.65387726 24.11794090]
[-76.21443939 9.68319893]
[-76.74530792 -6.12512159]
[-90.87010956 -11.17387772]
[-104.99491119 -16.22263527]
[-119.11971283 -21.27139091]
[-133.24452209 -26.32014656]
[-147.36932373 -31.36890411]
[-161.49412537 -36.41765976]
[-176.55148315 -30.88090134]
[-190.19311523 -39.32395935]
[-191.95434570 -55.27004623]
[-180.48410034 -66.48668671]
[-164.58137512 -64.36943054]
[-156.44537354 -50.54246140]
[-142.32057190 -45.49370575]
[-128.19577026 -40.44495010]
[-114.07096100 -35.39619446]
[-99.94615936 -30.34743690]
[-85.82135010 -25.29868126]
[-71.69654846 -20.24992561]
[-62.65352249 -31.02431679]
[-50.44469070 -38.07066727]
[-36.53261185 -40.52122498]
[-22.59198761 -38.06021500]
[-10.30807877 -30.96435356]
[-1.17296553 -20.07191086]
[3.69567132 -6.68371725]
[3.69127679 7.59216547]
[17.70799065 12.93367767]
[8.48642159 1.10309589]
[2.57331491 -12.68222809]
[0.35675234 -27.51755333]
[1.98220861 -42.42922211]
[7.34300375 -56.43857193]
[16.08730507 -68.62615967]
[27.64121437 -78.19209290]
[41.24644089 -84.50856781]
[56.01006317 -87.16101074]
[70.96312714 -85.97535706]
[85.12425995 -81.02941132]
[97.56404877 -72.64778137]
[107.46605682 -61.38056564]
[114.18041229 -47.96723557]
[117.26644897 -33.28812027]
[116.52162170 -18.30662346]
[111.99481201 -4.00599337]
[103.98312378 8.67520809]
[93.01237488 18.90470314]
[79.80257416 26.01112175]
[65.22069550 29.52806473]
[50.22376251 29.22470856]
[35.79158401 25.11905479]
[46.00506210 36.10472107]
[56.21854401 47.09038544]
[66.43202209 58.07604980]
[76.75922394 68.95487213]
[87.19903564 79.72568512]
[97.63885498 90.49649048]
[102.41616058 86.71868896]
[109.76393127 85.83251190]
[117.89525604 89.17804718]
[132.89443970 89.02201080]
[147.89363098 88.86597443]
[158.91282654 77.85619354]
[174.12635803 77.91162109]
[184.55458069 88.48458862]
[199.55377197 88.32855225]
[205.52253723 85.24938202]
[211.27412415 85.63753510]
[215.17704773 88.49108124]
[230.16973877 88.95912170]
[244.20462036 81.65619659]
[256.68426514 89.78684998]
[271.67697144 90.25489807]
[286.66964722 90.72293854]
[301.66235352 91.19097900]
[316.65505981 91.65901947]
[332.67514038 86.10984802]
[342.44223022 99.96769714]
[331.82977295 113.18933868]
[316.18701172 106.65171814]
[301.19430542 106.18367767]
[286.20162964 105.71562958]
[271.20892334 105.24758911]
[256.21621704 104.77954865]
[243.25372314 112.11595154]
[229.70169067 103.95182037]
[214.70899963 103.48377228]
[199.70980835 103.32773590]
[184.71061707 103.48377228]
[174.50460815 114.27140045]
[159.29551697 114.64331055]
[148.04966736 103.86515808]
[133.05047607 104.02119446]
[118.05129242 104.17723083]
[107.50000000 114.83885956]
[107.50000000 129.83885193]
[107.50000000 144.83885193]
[107.50000000 159.83885193]
[107.50000000 174.83885193]
[107.50000000 189.83885193]
[107.50000000 204.83885193]
[107.50000000 219.83885193]
[107.50000000 234.83885193]
[107.50000000 249.83885193]
[122.03988647 253.90017700]
[134.94427490 261.73468018]
[145.25555420 272.76101685]
[152.20857239 286.16094971]
[155.28736877 300.94009399]
[154.26348877 316.00177002]
[149.21287537 330.22830200]
[140.51036072 342.56396484]
[128.80169678 352.09338379]
[114.95575714 358.10940552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 93]
[22 92]
[23 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 64]
[30 63]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[96 130]
[97 129]
[98 128]
[101 125]
[102 124]
[105 123]
[106 122]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
