%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACCACCGGGGGGGGGGUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCCCCCCCCCCCUCAACACC\
) } def
/len { sequence length } bind def

/coor [
[83.84135437 386.64089966]
[70.62116241 379.36843872]
[59.73435593 368.92144775]
[51.92322540 356.01217651]
[47.72034454 341.52087402]
[47.41227341 326.43554688]
[51.02001572 311.78469849]
[58.29758835 298.56732178]
[68.74879456 287.68453979]
[81.66105652 279.87841797]
[96.15399170 275.68112183]
[95.84193420 260.68435669]
[95.52988434 245.68762207]
[95.21782684 230.69085693]
[94.90576935 215.69410706]
[94.59371185 200.69735718]
[94.28165436 185.70060730]
[93.96959686 170.70384216]
[93.65754700 155.70709229]
[93.34548950 140.71034241]
[93.03343201 125.71358490]
[81.06452179 118.73951721]
[74.21533966 106.69870758]
[59.22264099 106.23066711]
[44.22994232 105.76262665]
[29.23724747 105.29457855]
[14.24455166 104.82653809]
[-1.73602521 113.91505432]
[-16.29870033 104.17192841]
[-31.29788971 104.01589203]
[-36.90040207 118.12178802]
[-47.22309875 129.24862671]
[-60.86991119 135.89158630]
[-75.99522400 137.15226746]
[-90.55346680 132.86016846]
[-102.57574463 123.59576416]
[-110.43615723 110.61199188]
[-113.07164001 95.66479492]
[-110.12577057 80.77565765]
[-101.99694824 67.95822144]
[-89.78453827 58.94593430]
[-75.14015198 54.95763397]
[-60.04434204 56.53270340]
[-46.53867722 63.45813370]
[-36.44969940 74.79730988]
[-31.14185333 89.01670074]
[-16.14266396 89.17273712]
[-7.24670506 80.91627502]
[5.29190922 80.96228027]
[14.71259403 89.83383942]
[29.70528984 90.30188751]
[44.69798660 90.76992798]
[59.69068146 91.23796844]
[74.68338013 91.70600891]
[77.49915314 85.73699188]
[81.69586945 80.64333344]
[87.01596832 76.73765564]
[93.13293457 74.25965881]
[99.67135620 73.36142731]
[106.22994995 74.09808350]
[112.40618896 76.42441559]
[122.84600067 65.65361023]
[133.28581238 54.88280106]
[143.72563171 44.11199188]
[149.21266174 30.15160179]
[148.90060425 15.15484810]
[148.58854675 0.15809430]
[148.27648926 -14.83865929]
[134.22203064 -20.70312691]
[123.77265167 -31.78150368]
[118.73877716 -46.15439606]
[119.99256134 -61.33161163]
[127.31677246 -74.68360901]
[139.44244385 -83.89707184]
[154.26873779 -87.37570953]
[169.22691345 -84.51683807]
[181.72535706 -75.81575775]
[189.59864807 -62.77999496]
[191.48269653 -47.66807175]
[187.05107117 -33.09821701]
[177.07157898 -21.59475136]
[163.27323914 -15.15071583]
[163.58529663 -0.15396193]
[163.89735413 14.84279156]
[164.20941162 29.83954620]
[176.73536682 38.09183502]
[190.63792419 32.45987701]
[200.52336121 20.10719681]
[215.22454834 22.49978256]
[229.12710571 16.86782646]
[235.35517883 2.59026599]
[249.53457642 -2.92329168]
[263.10766602 3.10222101]
[277.01022339 -2.52973580]
[290.91278076 -8.16169262]
[304.81533813 -13.79364872]
[318.71789551 -19.42560577]
[332.50027466 -25.34556961]
[346.15652466 -31.55097580]
[350.17745972 -46.66276550]
[363.00097656 -55.61212158]
[378.57223511 -54.17343140]
[389.53897095 -43.02600098]
[390.72299194 -27.43330574]
[381.56524658 -14.75774097]
[366.38977051 -10.98431873]
[352.36193848 -17.89473534]
[338.70568848 -11.68932819]
[336.20260620 -7.55288839]
[331.04406738 -4.97982168]
[324.34985352 -5.52304983]
[310.44729614 0.10890689]
[296.54473877 5.74086380]
[282.64218140 11.37281990]
[268.73962402 17.00477791]
[263.18710327 30.77812195]
[249.16816711 36.68777466]
[234.75906372 30.77038193]
[220.85650635 36.40233994]
[211.96546936 48.35218430]
[196.26988220 46.36243439]
[182.36732483 51.99439240]
[167.41944885 58.63388443]
[154.49642944 54.55180359]
[144.05662537 65.32260895]
[133.61680603 76.09342194]
[123.17699432 86.86422729]
[124.79421234 109.74518585]
[108.03018188 125.40152740]
[108.34223938 140.39828491]
[108.65429688 155.39503479]
[108.96635437 170.39178467]
[109.27841187 185.38854980]
[109.59046936 200.38529968]
[109.90251923 215.38204956]
[110.21457672 230.37879944]
[110.52663422 245.37556458]
[110.83869171 260.37231445]
[111.15074921 275.36907959]
[125.80574036 278.95983887]
[139.03155518 286.22210693]
[149.92642212 296.66067505]
[157.74751282 309.56390381]
[161.96157837 324.05197144]
[162.28131104 339.13705444]
[158.68487549 353.79067993]
[151.41751099 367.01367188]
[140.97471619 377.90451050]
[128.06848145 385.72061157]
[113.57879639 389.92910767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[29 47]
[30 46]
[61 127]
[62 126]
[63 125]
[64 124]
[65 85]
[66 84]
[67 83]
[68 82]
[86 122]
[87 121]
[89 119]
[90 118]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
