%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCUGCUCGCAGGGGGGGGGGUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCxxxxxxxxxxCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUACCCCCCCCCCUCCUCCUGCUUGCA\
) } def
/len { sequence length } bind def

/coor [
[101.81094360 588.92163086]
[87.44868469 584.41491699]
[74.28779602 577.10900879]
[62.86720276 567.30316162]
[53.65456390 555.39886475]
[47.02713394 541.88360596]
[43.25630569 527.31085205]
[42.49648666 512.27728271]
[44.77879715 497.39859009]
[50.00977325 483.28399658]
[57.97521210 470.51150513]
[68.34893799 459.60412598]
[80.70613861 451.00851440]
[94.54080963 445.07669067]
[109.28643036 442.05151367]
[109.28643036 427.05151367]
[109.28643036 412.05151367]
[109.28643036 397.05151367]
[109.28643036 382.05151367]
[109.28643036 367.05151367]
[109.28643036 352.05151367]
[109.28643036 337.05151367]
[109.28643036 322.05151367]
[109.28643036 307.05151367]
[109.28643036 292.05151367]
[97.27427673 283.06774902]
[82.88568115 287.30664062]
[71.83452606 298.62841797]
[57.43950653 294.80316162]
[50.09881210 308.79922485]
[34.98677826 313.42544556]
[21.06911087 305.93719482]
[16.60291100 290.77706909]
[24.23789787 276.93936157]
[39.44437027 272.63369751]
[53.20059586 280.41455078]
[63.22257996 269.39596558]
[78.64676666 272.91806030]
[93.03536224 268.67913818]
[103.26895142 257.71221924]
[106.50348663 243.06509399]
[109.73802185 228.41798401]
[112.97255707 213.77087402]
[99.79594421 200.59248352]
[97.14103699 181.99615479]
[106.24697113 165.39559937]
[123.62799835 157.51751709]
[125.98915100 142.70451355]
[128.35031128 127.89151764]
[130.71145630 113.07851410]
[115.19438171 127.25808716]
[95.62825012 128.70259094]
[80.53010559 118.50401306]
[75.43708038 102.47172546]
[80.91786194 88.05275726]
[71.58207703 76.31210327]
[62.24628830 64.57144165]
[47.60119247 58.58548355]
[45.73598480 43.80812836]
[36.40019989 32.06746674]
[20.95304871 26.56132317]
[18.26448631 10.38406563]
[31.10027504 0.17746961]
[46.25605392 6.44120646]
[48.14085770 22.73167992]
[57.47664642 34.47233963]
[71.45398712 39.61852646]
[73.98694611 55.23565292]
[83.32273865 66.97631073]
[92.65852356 78.71697235]
[99.72189331 72.05442810]
[110.25481415 68.23397827]
[113.19933319 53.52582932]
[116.14385986 38.81767273]
[102.76121521 31.81185722]
[91.89538574 21.31850433]
[84.42721558 8.18826771]
[80.96211243 -6.51444578]
[81.78099060 -21.59775162]
[86.81745148 -35.83891296]
[95.66321564 -48.08346558]
[107.60120392 -57.33879852]
[121.66365051 -62.85462189]
[136.71057129 -64.18379211]
[151.52220154 -61.21855545]
[164.89779663 -54.19929886]
[175.75308228 -43.69503403]
[183.20805359 -30.55730247]
[186.65838623 -15.85111523]
[185.82435608 -0.76863945]
[180.77359009 13.46745682]
[171.91552734 25.70311737]
[159.96824646 34.94644928]
[145.90026855 40.44814301]
[130.85200500 41.76219559]
[127.90749359 56.47034836]
[124.96297455 71.17850494]
[130.83329773 75.84639740]
[144.78854370 70.34629059]
[142.57395935 85.18218231]
[148.44429016 89.85007477]
[162.11106873 83.66790771]
[175.77784729 77.48574066]
[189.44462585 71.30357361]
[203.11140442 65.12140656]
[208.45237732 50.24694443]
[222.78228760 43.58141708]
[237.59944153 49.07935715]
[244.11309814 63.47893906]
[238.45880127 78.23713684]
[223.99116516 84.59819031]
[209.29356384 78.78817749]
[195.62678528 84.97034454]
[181.96000671 91.15251923]
[168.29322815 97.33468628]
[154.62646484 103.51685333]
[145.52445984 115.43966675]
[143.16329956 130.25267029]
[140.80215454 145.06567383]
[138.44099426 159.87866211]
[147.89785767 166.51657104]
[154.14485168 176.17481995]
[156.30145264 187.42086792]
[154.09042358 198.60385132]
[147.87280273 208.09689331]
[138.58963013 214.53373718]
[127.61966705 217.00541687]
[124.38513184 231.65252686]
[121.15059662 246.29963684]
[117.91605377 260.94674683]
[124.24111938 266.69256592]
[127.81478119 274.67880249]
[127.88840485 283.63198853]
[124.28643036 292.05151367]
[124.28643036 307.05151367]
[124.28643036 322.05151367]
[124.28643036 337.05151367]
[124.28643036 352.05151367]
[124.28643036 367.05151367]
[124.28643036 382.05151367]
[124.28643036 397.05151367]
[124.28643036 412.05151367]
[124.28643036 427.05151367]
[124.28643036 442.05151367]
[139.03204346 445.07669067]
[152.86671448 451.00851440]
[165.22392273 459.60412598]
[175.59764099 470.51150513]
[183.56307983 483.28399658]
[188.79406738 497.39859009]
[191.07637024 512.27728271]
[190.31655884 527.31085205]
[186.54573059 541.88360596]
[179.91828918 555.39886475]
[170.70565796 567.30316162]
[159.28506470 577.10900879]
[146.12417603 584.41491699]
[131.76191711 588.92163086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 39]
[27 38]
[29 36]
[40 130]
[41 129]
[42 128]
[43 127]
[47 120]
[48 119]
[49 118]
[50 117]
[55 70]
[56 69]
[57 68]
[59 66]
[60 65]
[72 97]
[73 96]
[74 95]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
