%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCACCAAGGGGGGGGGGACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAxxxxxxxxxxUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCCCCCCCCCCCAUUUACACCAA\
) } def
/len { sequence length } bind def

/coor [
[-0.23768431 320.91006470]
[-10.33266544 316.04525757]
[-20.19221306 310.71942139]
[-29.79528618 304.94396973]
[-39.12139511 298.73117065]
[-48.15063858 292.09432983]
[-56.86375427 285.04757690]
[-65.24214172 277.60595703]
[-73.26792145 269.78536987]
[-80.92398071 261.60247803]
[-88.19396973 253.07473755]
[-95.06237793 244.22036743]
[-107.39366150 252.76081848]
[-119.72494507 261.30126953]
[-132.05622864 269.84173584]
[-144.38751221 278.38220215]
[-156.71879578 286.92266846]
[-169.05007935 295.46310425]
[-181.38136292 304.00357056]
[-193.71264648 312.54403687]
[-206.04393005 321.08450317]
[-212.55769348 336.13452148]
[-228.87713623 337.74938965]
[-238.21421814 324.26788330]
[-230.96374512 309.55862427]
[-214.58439636 308.75320435]
[-202.25311279 300.21273804]
[-189.92182922 291.67230225]
[-177.59054565 283.13183594]
[-165.25926208 274.59136963]
[-152.92797852 266.05090332]
[-140.59669495 257.51046753]
[-128.26541138 248.97000122]
[-115.93412018 240.42953491]
[-103.60283661 231.88908386]
[-122.02545929 197.74221802]
[-134.76847839 161.09503174]
[-141.50595093 122.88499451]
[-142.06549072 84.08953094]
[-136.43280029 45.70107651]
[-150.94143677 41.89321899]
[-165.45005798 38.08536148]
[-181.11708069 42.93059540]
[-192.96116638 31.58820343]
[-188.79812622 15.72626495]
[-172.91053772 11.66218185]
[-161.64219666 23.57673454]
[-147.13357544 27.38459396]
[-132.62495422 31.19245148]
[-129.19912720 20.52292633]
[-125.28422546 10.02299500]
[-120.88860321 -0.28493857]
[-116.02163696 -10.37887859]
[-110.69371033 -20.23728561]
[-104.91619873 -29.83912468]
[-98.70141602 -39.16390610]
[-92.06263733 -48.19173050]
[-85.01402283 -56.90333557]
[-77.57061768 -65.28012848]
[-69.74829865 -73.30423737]
[-61.56376648 -80.95854187]
[-53.03447723 -88.22670746]
[-44.17863464 -95.09322357]
[-35.01513290 -101.54344177]
[-25.56352997 -107.56359100]
[-15.84399414 -113.14083099]
[-5.87726212 -118.26325989]
[4.31539631 -122.91994476]
[14.71223164 -127.10095215]
[25.29105949 -130.79736328]
[36.02930450 -134.00126648]
[46.90405655 -136.70585632]
[57.89210510 -138.90536499]
[68.97000885 -140.59506226]
[80.11412048 -141.77137756]
[91.30066681 -142.43177795]
[102.50578308 -142.57487488]
[113.70554352 -142.20033264]
[124.87606812 -141.30899048]
[135.99349976 -139.90270996]
[147.03413391 -137.98452759]
[157.97439575 -135.55851746]
[168.79095459 -132.62985229]
[179.46072388 -129.20478821]
[189.96093750 -125.29064178]
[200.26918030 -120.89575958]
[210.36347961 -116.02951050]
[220.22225952 -110.70228577]
[229.82450867 -104.92545319]
[239.14973450 -98.71134186]
[248.17803955 -92.07320404]
[256.89013672 -85.02521515]
[265.26745605 -77.58240509]
[273.29214478 -69.76065826]
[280.94702148 -61.57666779]
[288.21578979 -53.04789734]
[295.08294678 -44.19254303]
[301.53381348 -35.02950287]
[307.55462646 -25.57833099]
[313.13256836 -15.85919189]
[318.25570679 -5.89282560]
[322.91311646 4.29950094]
[327.09487915 14.69603825]
[330.79202271 25.27460289]
[333.99670410 36.01261902]
[336.70208740 46.88717651]
[338.90234375 57.87506866]
[340.59286499 68.95285034]
[341.76995850 80.09687805]
[342.43115234 91.28337860]
[342.57504272 102.48848724]
[342.20132446 113.68827820]
[341.31076050 124.85885620]
[339.90527344 135.97639465]
[337.98788452 147.01716614]
[335.56265259 157.95761108]
[332.63476562 168.77436829]
[329.21044922 179.44438171]
[325.29705811 189.94487000]
[320.90289307 200.25343323]
[316.03738403 210.34806824]
[310.71084595 220.20724487]
[304.93472290 229.80990601]
[298.72125244 239.13555908]
[292.08377075 248.16433716]
[285.03640747 256.87695312]
[277.59417725 265.25479126]
[269.77301025 273.28002930]
[261.58956909 280.93551636]
[253.06132507 288.20489502]
[244.20645142 295.07266235]
[235.04386902 301.52420044]
[225.59312439 307.54568481]
[215.87438965 313.12429810]
[205.90838623 318.24816895]
[195.71640015 322.90631104]
[185.32015991 327.08877563]
[174.74185181 330.78671265]
[164.00405884 333.99215698]
[153.12969971 336.69830322]
[142.14196777 338.89935303]
[131.06430054 340.59063721]
[119.92035675 341.76852417]
[108.73390198 342.43054199]
[97.52881622 342.57522583]
[86.32899475 342.20230103]
[75.15834808 341.31253052]
[64.04071045 339.90783691]
[52.99980545 337.99124146]
[42.05919266 335.56677246]
[31.24221611 332.63964844]
[20.57195854 329.21612549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
