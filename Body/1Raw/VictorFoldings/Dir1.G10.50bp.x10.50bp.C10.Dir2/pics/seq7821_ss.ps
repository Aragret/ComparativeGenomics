%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAAGACGGGGGGGGGGGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUxxxxxxxxxxCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACCCCCCCCCCCUCACCAGACG\
) } def
/len { sequence length } bind def

/coor [
[85.64707947 469.94250488]
[72.77380371 462.03964233]
[62.64950562 450.82913208]
[56.09492493 437.21978760]
[53.64140320 422.31488037]
[55.48783875 407.32263184]
[61.48455429 393.45843506]
[71.14541626 381.84616089]
[83.68726349 373.42721558]
[98.09338379 368.88406372]
[97.78132629 353.88729858]
[97.46926880 338.89053345]
[97.15721130 323.89379883]
[96.84516144 308.89703369]
[96.53310394 293.90029907]
[96.22104645 278.90353394]
[95.90898895 263.90676880]
[95.59693146 248.91001892]
[95.28487396 233.91326904]
[94.97282410 218.91651917]
[94.66076660 203.91976929]
[83.76755524 193.82652283]
[83.23745728 178.62211609]
[93.89804077 167.26475525]
[93.58598328 152.26800537]
[93.27392578 137.27125549]
[92.96186829 122.27449799]
[87.71994019 119.87180328]
[83.22628021 116.25824738]
[79.75469971 111.65402222]
[77.51673889 106.33967590]
[62.53702545 105.55982971]
[47.55731201 104.77998352]
[39.80445099 117.97663879]
[26.80072021 126.04891205]
[11.53428459 127.14186096]
[-2.48674250 121.00431824]
[-12.04043102 109.04666138]
[-14.93141365 94.01666260]
[-10.49536324 79.36811066]
[0.24834748 68.46713257]
[14.83089256 63.81869888]
[29.90131187 66.49098206]
[41.99652863 75.86991119]
[48.33715820 89.80027008]
[63.31687164 90.58011627]
[78.29658508 91.35996246]
[83.82453918 83.14642334]
[92.25804138 77.96025085]
[102.08221436 76.73300934]
[108.14522552 63.01295471]
[114.20823669 49.29290009]
[120.27125549 35.57284927]
[112.64585114 22.18780518]
[114.34427643 7.05609179]
[124.50692749 -4.04275894]
[139.08186340 -6.99388123]
[145.14488220 -20.71393394]
[138.07624817 -42.60009003]
[152.43727112 -59.82055664]
[151.50164795 -74.79134369]
[150.56600952 -89.76213837]
[147.18069458 -95.56275177]
[147.26930237 -101.32672882]
[149.91607666 -105.37272644]
[149.60401917 -120.36948395]
[149.29196167 -135.36624146]
[135.01812744 -140.52587891]
[123.57460785 -150.49635315]
[116.50906372 -163.92924500]
[114.77704620 -179.00785828]
[118.61279297 -193.69293213]
[127.49755859 -205.99844360]
[140.22973633 -214.26014709]
[155.08741760 -217.36074829]
[170.06123352 -214.88088989]
[183.12606812 -207.15597534]
[192.51502991 -195.23071289]
[196.95832825 -180.71791077]
[195.85505676 -165.58029175]
[189.35441589 -151.86511230]
[178.33557129 -141.42723083]
[164.28871155 -135.67828369]
[164.60076904 -120.68153381]
[164.91282654 -105.68478394]
[165.53680420 -90.69776917]
[166.47242737 -75.72697449]
[167.40806580 -60.75618362]
[171.62202454 -59.12447739]
[175.43421936 -56.69815063]
[188.04534912 -64.81969452]
[200.65647888 -72.94123840]
[213.26760864 -81.06277466]
[211.33862305 -96.20350647]
[216.17813110 -110.67906952]
[226.82524109 -121.61533356]
[241.16596985 -126.84088135]
[256.35293579 -125.31819153]
[269.37078857 -117.34959412]
[277.63479614 -104.51725006]
[279.50411987 -89.36904144]
[274.60766602 -74.91264343]
[263.91757202 -64.01840210]
[249.55636597 -58.84936142]
[234.37550354 -60.43184662]
[221.38914490 -68.45165253]
[208.77803040 -60.33010864]
[196.16690063 -52.20856476]
[183.55577087 -44.08702469]
[183.84884644 -33.17074966]
[179.02803040 -23.21505165]
[170.05619812 -16.50627899]
[158.86492920 -14.65092182]
[152.80192566 -0.93086809]
[160.43228149 11.83297253]
[159.06748962 26.81967735]
[149.02224731 38.26285553]
[133.99130249 41.63586044]
[127.92829132 55.35591507]
[121.86528015 69.07596588]
[115.80226898 82.79602051]
[122.90517426 104.58708954]
[107.95862579 121.96244049]
[108.27068329 136.95919800]
[108.58273315 151.95594788]
[108.89479065 166.95269775]
[120.01860046 177.85676575]
[120.12142944 193.07005310]
[109.65751648 203.60771179]
[109.96957397 218.60446167]
[110.28163147 233.60121155]
[110.59368896 248.59796143]
[110.90574646 263.59472656]
[111.21779633 278.59146118]
[111.52985382 293.58822632]
[111.84191132 308.58499146]
[112.15396881 323.58172607]
[112.46602631 338.57849121]
[112.77808380 353.57525635]
[113.09013367 368.57199097]
[127.67277527 372.51196289]
[140.55398560 380.40188599]
[150.68952942 391.60223389]
[157.25778198 405.20495605]
[159.72628784 420.10742188]
[157.89491272 435.10150146]
[151.91212463 448.97174072]
[142.26293945 460.59368896]
[129.72955322 469.02523804]
[115.32800293 473.58285522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 126]
[25 125]
[26 124]
[27 123]
[31 47]
[32 46]
[33 45]
[50 121]
[51 120]
[52 119]
[53 118]
[57 114]
[58 113]
[60 88]
[61 87]
[62 86]
[65 85]
[66 84]
[67 83]
[90 109]
[91 108]
[92 107]
[93 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
