%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUACUUCGGGGGGGGGGGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUxxxxxxxxxxUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUCCCCCCCCCCAGACUACUUC\
) } def
/len { sequence length } bind def

/coor [
[84.81002045 467.35903931]
[70.32033539 463.15057373]
[57.41410446 455.33447266]
[46.97130203 444.44363403]
[39.70393753 431.22061157]
[36.10751343 416.56701660]
[36.42723465 401.48190308]
[40.64130402 386.99386597]
[48.46240234 374.09063721]
[59.35726929 363.65203857]
[72.58307648 356.38980103]
[87.23806763 352.79901123]
[87.55012512 337.80227661]
[87.86218262 322.80551147]
[88.17424011 307.80874634]
[88.48629761 292.81201172]
[88.79835510 277.81524658]
[89.11040497 262.81851196]
[89.42246246 247.82174683]
[89.73451996 232.82499695]
[90.04657745 217.82823181]
[90.35863495 202.83148193]
[90.67069244 187.83473206]
[90.98274231 172.83798218]
[67.96485138 166.03355408]
[48.37322617 152.16664124]
[34.30325317 132.72032166]
[27.25976562 109.77445984]
[12.26706886 110.24250031]
[-1.28495789 118.40663910]
[-14.24745846 111.07022858]
[-29.24015427 111.53827667]
[-37.08342361 124.82310486]
[-50.87417603 131.73820496]
[-66.21183777 130.07699585]
[-78.20221710 120.36955261]
[-83.01922607 105.71349335]
[-79.12577057 90.78551483]
[-67.76424408 80.34907532]
[-52.56007004 77.73441315]
[-38.36483383 83.77584076]
[-29.70819664 96.54557800]
[-14.71549988 96.07753754]
[-2.23585105 87.94687653]
[11.79902744 95.24980164]
[26.79172325 94.78176117]
[28.58608818 83.06674957]
[32.24261475 71.79328918]
[37.66596222 61.25532913]
[44.71471024 51.72766495]
[53.20505524 43.45873260]
[62.91561127 36.66415024]
[73.59317017 31.52109146]
[84.95929718 28.16366386]
[83.40171814 13.24475288]
[81.84413910 -1.67415977]
[80.28655243 -16.59307289]
[78.72897339 -31.51198387]
[77.17139435 -46.43089676]
[73.16365051 -60.88558578]
[66.81652069 -74.47653198]
[60.46939468 -88.06748962]
[45.94237137 -94.87521362]
[42.34769440 -110.51036072]
[52.44289398 -122.97898102]
[68.48379517 -122.71621704]
[78.16519165 -109.92363739]
[74.06034851 -94.41461945]
[80.40747833 -80.82366180]
[86.75460815 -67.23271179]
[88.69672394 -82.10645294]
[95.52337646 -95.46298218]
[106.44082642 -105.74934387]
[120.17971039 -111.76956177]
[135.14262390 -112.82365417]
[149.58984375 -108.78907013]
[161.84161377 -100.13491058]
[170.47340393 -87.86738586]
[174.48161316 -73.41283417]
[173.40022278 -58.45186234]
[167.35494995 -44.72397995]
[157.04869080 -33.82531738]
[143.67973328 -27.02304649]
[128.80247498 -25.10806465]
[114.14668274 -28.30302620]
[101.41637421 -36.23645401]
[92.09030914 -47.98847580]
[93.64788818 -33.06956482]
[95.20546722 -18.15065384]
[96.76304626 -3.23174071]
[98.32063293 11.68717194]
[99.87821198 26.60608292]
[106.70966339 26.91332436]
[113.48286438 27.85504723]
[120.13901520 29.42307854]
[126.62033844 31.60380554]
[132.87055969 34.37829590]
[138.83541870 37.72246552]
[144.46315002 41.60728073]
[149.70487976 45.99901581]
[154.51512146 50.85954666]
[158.85208130 56.14667892]
[162.67814636 61.81451416]
[165.96008301 67.81384277]
[168.66941833 74.09259033]
[170.78259277 80.59624481]
[172.28131104 87.26834869]
[173.15251160 94.05097961]
[173.38867188 100.88526154]
[188.29057312 102.59794617]
[203.19248962 104.31063843]
[218.09439087 106.02333069]
[229.32287598 95.13963318]
[244.92393494 94.07134247]
[257.53118896 103.32287598]
[261.19192505 118.52593994]
[254.17759705 132.50210571]
[239.80020142 138.65226746]
[224.84829712 134.07250977]
[216.38169861 120.92523193]
[201.47979736 119.21253967]
[186.57789612 117.49984741]
[171.67599487 115.78716278]
[165.39306641 133.32310486]
[154.89782715 148.71253967]
[140.86633301 160.96412659]
[124.20241547 169.28871155]
[105.97949982 173.15003967]
[105.66744232 188.14678955]
[105.35538483 203.14353943]
[105.04332733 218.14028931]
[104.73127747 233.13705444]
[104.41921997 248.13380432]
[104.10716248 263.13055420]
[103.79510498 278.12731934]
[103.48304749 293.12405396]
[103.17098999 308.12081909]
[102.85894012 323.11758423]
[102.54688263 338.11431885]
[102.23482513 353.11108398]
[116.72776031 357.30834961]
[129.64002991 365.11450195]
[140.09123230 375.99728394]
[147.36880493 389.21466064]
[150.97654724 403.86547852]
[150.66847229 418.95083618]
[146.46559143 433.44213867]
[138.65446472 446.35137939]
[127.76765442 456.79840088]
[114.54746246 464.07086182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[28 46]
[29 45]
[31 43]
[32 42]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 70]
[61 69]
[62 68]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
