%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCACCCUGGGGGGGGGGGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCxxxxxxxxxxUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCCU\
) } def
/len { sequence length } bind def

/coor [
[82.38719177 573.82495117]
[68.54125214 567.80895996]
[56.83258820 558.27954102]
[48.13006592 545.94384766]
[43.07946396 531.71734619]
[42.05557251 516.65563965]
[45.13436890 501.87649536]
[52.08739090 488.47656250]
[62.39867783 477.45022583]
[75.30305481 469.61572266]
[89.84294128 465.55441284]
[89.84294128 450.55441284]
[89.84294128 435.55441284]
[89.84294128 420.55441284]
[89.84294128 405.55441284]
[89.84294128 390.55441284]
[89.84294128 375.55441284]
[89.84294128 360.55441284]
[89.84294128 345.55441284]
[89.84294128 330.55441284]
[89.84294128 315.55441284]
[82.10564423 302.82714844]
[89.84294128 289.02697754]
[82.10564423 276.29968262]
[89.84294128 262.49951172]
[89.84294128 247.49952698]
[79.52196503 239.72300720]
[75.52399445 227.22938538]
[79.53011322 214.53375244]
[90.28517914 206.36148071]
[90.59723663 191.36473083]
[90.90929413 176.36796570]
[91.22135162 161.37121582]
[83.75049591 148.48573303]
[91.77321625 134.84951782]
[81.65288544 130.74983215]
[73.23863983 123.79071808]
[67.31293488 114.61931610]
[64.42679596 104.08846283]
[64.84860229 93.17742157]
[68.53912354 82.90081787]
[75.15519714 74.21426392]
[84.08158112 67.92551422]
[80.37541962 53.39057922]
[76.66925812 38.85564423]
[72.96309662 24.32070923]
[69.25693512 9.78577232]
[65.55077362 -4.74916363]
[55.46472168 -6.11036158]
[46.30427551 -11.76883316]
[39.90007401 -21.14846611]
[37.74483871 -32.90066528]
[40.67350006 -45.09322739]
[31.65597153 -57.08006287]
[22.63844109 -69.06689453]
[13.62091160 -81.05372620]
[4.60338211 -93.04055786]
[-4.41414785 -105.02738953]
[-18.76790237 -114.04992676]
[-14.07148838 -130.34040833]
[2.88245916 -130.33718872]
[7.57268476 -114.04492188]
[16.59021568 -102.05809021]
[25.60774422 -90.07125854]
[34.62527466 -78.08442688]
[43.64280319 -66.09759521]
[52.66033554 -54.11075974]
[67.15592957 -57.96791840]
[69.02354431 -72.85119629]
[55.32225418 -79.26445770]
[44.27474594 -89.59923553]
[36.96333694 -102.84304810]
[34.10432816 -117.69839478]
[35.97781754 -132.70989990]
[42.40025330 -146.40689087]
[52.74243546 -157.44746399]
[65.99114227 -164.75000000]
[80.84839630 -167.59904480]
[95.85864258 -165.71549988]
[109.55132294 -159.28388977]
[120.58497620 -148.93431091]
[127.87862396 -135.68072510]
[130.71772766 -120.82155609]
[128.82412720 -105.81257629]
[122.38333893 -92.12420654]
[112.02636719 -81.09749603]
[98.76788330 -73.81272888]
[83.90682220 -70.98358154]
[82.03920746 -56.10030365]
[94.76280212 -29.63751030]
[80.08570862 -8.45532513]
[83.79187012 6.07961130]
[87.49803162 20.61454773]
[91.20419312 35.14948273]
[94.91035461 49.68442154]
[98.61651611 64.21935272]
[108.89860535 65.31594849]
[118.43861389 69.30495453]
[126.44097137 75.85370636]
[132.23834229 84.41609192]
[146.81103516 80.86133575]
[161.38374329 77.30657196]
[175.95645142 73.75180817]
[190.52914429 70.19704437]
[198.52253723 56.56322098]
[213.83616638 52.65573120]
[227.38471985 60.79282379]
[231.13008118 76.14690399]
[222.85020447 89.60867310]
[207.45738220 93.19149017]
[194.08390808 84.76975250]
[179.51121521 88.32450867]
[164.93850708 91.87927246]
[150.36579895 95.43403625]
[135.79310608 98.98880005]
[127.92885590 122.40864563]
[106.76997375 135.16157532]
[114.21850586 149.11972046]
[106.21810150 161.68327332]
[105.90604401 176.68002319]
[105.59398651 191.67677307]
[105.28193665 206.67353821]
[117.61177826 219.03930664]
[117.22370911 236.16044617]
[104.84294128 247.49952698]
[104.84294128 262.49951172]
[112.58024597 276.29968262]
[104.84294128 289.02697754]
[112.58024597 302.82714844]
[104.84294128 315.55441284]
[104.84294128 330.55441284]
[104.84294128 345.55441284]
[104.84294128 360.55441284]
[104.84294128 375.55441284]
[104.84294128 390.55441284]
[104.84294128 405.55441284]
[104.84294128 420.55441284]
[104.84294128 435.55441284]
[104.84294128 450.55441284]
[104.84294128 465.55441284]
[119.38282776 469.61572266]
[132.28721619 477.45022583]
[142.59849548 488.47656250]
[149.55151367 501.87649536]
[152.63031006 516.65563965]
[151.60643005 531.71734619]
[146.55581665 545.94384766]
[137.85330200 558.27954102]
[126.14463806 567.80895996]
[112.29869843 573.82495117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[25 126]
[26 125]
[30 122]
[31 121]
[32 120]
[33 119]
[35 117]
[43 96]
[44 95]
[45 94]
[46 93]
[47 92]
[48 91]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[68 89]
[69 88]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
