%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAGGCUGGGGGGGGGGAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACxxxxxxxxxxAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGCCCCCCCCCCAUUAUAGGCU\
) } def
/len { sequence length } bind def

/coor [
[74.99508667 361.51995850]
[61.77489090 354.24749756]
[50.88808823 343.80047607]
[43.07695770 330.89123535]
[38.87407684 316.39990234]
[38.56600189 301.31457520]
[42.17374420 286.66375732]
[49.45131683 273.44635010]
[59.90252304 262.56359863]
[72.81478882 254.75744629]
[87.30772400 250.56016541]
[86.99566650 235.56341553]
[86.68360901 220.56665039]
[86.37155151 205.56990051]
[86.05950165 190.57315063]
[85.74744415 175.57640076]
[85.43538666 160.57963562]
[85.12332916 145.58288574]
[84.81127167 130.58613586]
[72.03391266 122.72870636]
[58.50972748 129.21687317]
[49.41403961 142.16210938]
[34.59224701 140.69116211]
[21.06805611 147.17933655]
[14.41181469 161.77638245]
[-1.18509436 165.53350830]
[-13.75805569 155.56857300]
[-13.66217041 139.52580261]
[-0.97099286 129.71185303]
[14.57989120 133.65515137]
[28.10408211 127.16697693]
[36.23242569 114.68582153]
[52.02156067 115.69268036]
[65.54575348 109.20452118]
[70.15563965 95.01931763]
[79.37444305 86.13666534]
[89.79277039 83.44801331]
[98.23314667 86.07083130]
[96.67556763 71.15191650]
[95.11798096 56.23300552]
[93.56040192 41.31409454]
[92.00282288 26.39518166]
[87.97634888 18.12237358]
[90.57134247 11.15016842]
[89.32447052 -3.79791880]
[88.07759094 -18.74600601]
[86.83071899 -33.69409180]
[84.13071442 -37.28177643]
[82.88068390 -41.15585327]
[82.98778534 -44.81240845]
[84.20116425 -47.83262253]
[86.15483093 -49.92798233]
[86.15483093 -64.92798615]
[83.47243500 -69.55662537]
[82.93323517 -74.27484894]
[84.20218658 -78.23609924]
[86.65207672 -80.85630798]
[87.58770752 -95.82710266]
[88.52333832 -110.79788971]
[89.45896149 -125.76868439]
[90.39459229 -140.73947144]
[83.53314972 -154.99539185]
[92.04924774 -167.21525574]
[92.98487854 -182.18605042]
[85.03288269 -192.39485168]
[86.15927124 -204.88285828]
[95.21123505 -212.96798706]
[96.45810699 -227.91607666]
[97.70497894 -242.86416626]
[83.93065643 -249.19216919]
[73.15351105 -259.85186768]
[66.67494965 -273.55603027]
[65.27728271 -288.64981079]
[69.12928009 -303.31057739]
[77.76580048 -315.76794434]
[90.14394379 -324.51766968]
[104.76898956 -328.50311279]
[119.87488556 -327.24307251]
[133.63752747 -320.88970947]
[144.39500427 -310.21017456]
[150.84829712 -296.49407959]
[152.21815491 -281.39776611]
[148.33914185 -266.74411011]
[139.67967224 -254.30267334]
[127.28543091 -245.57579041]
[112.65306854 -241.61727905]
[111.40619659 -226.66920471]
[110.15931702 -211.72111511]
[118.49835205 -196.31135559]
[107.95566559 -181.25042725]
[107.02004242 -166.27963257]
[113.94841003 -153.09452820]
[105.36538696 -139.80384827]
[104.42975616 -124.83305359]
[103.49412537 -109.86225891]
[102.55850220 -94.89147186]
[101.62287140 -79.92067719]
[101.15483093 -64.92798615]
[101.15483093 -49.92798233]
[101.77880859 -34.94096756]
[103.02568054 -19.99287987]
[104.27255249 -5.04479313]
[105.51943207 9.90329361]
[106.92173004 24.83760071]
[108.47931671 39.75651169]
[110.03689575 54.67542648]
[111.59447479 69.59433746]
[113.15205383 84.51325226]
[123.70334625 95.17487335]
[138.60525513 96.88756561]
[153.50715637 98.60025787]
[168.42607117 100.15783691]
[183.36036682 101.56014252]
[198.03314209 94.23607635]
[211.56124878 103.50550079]
[210.02813721 119.83282471]
[195.01095581 126.42189789]
[181.95806885 116.49444580]
[167.02375793 115.09214783]
[160.02493286 117.61447144]
[151.79446411 113.50215912]
[136.89256287 111.78946686]
[121.99066162 110.07678223]
[116.44499969 115.12610626]
[131.25579834 117.50106812]
[138.63349915 130.56129456]
[133.02270508 144.47239685]
[118.64833069 148.75929260]
[106.33432770 140.19393921]
[105.35368347 125.22475433]
[99.80802917 130.27407837]
[100.12008667 145.27082825]
[100.43213654 160.26757812]
[100.74419403 175.26434326]
[101.05625153 190.26109314]
[101.36830902 205.25784302]
[101.68036652 220.25459290]
[101.99242401 235.25135803]
[102.30447388 250.24810791]
[116.95947266 253.83888245]
[130.18527222 261.10113525]
[141.08013916 271.53973389]
[148.90124512 284.44293213]
[153.11531067 298.93099976]
[153.43502808 314.01611328]
[149.83860779 328.66970825]
[142.57124329 341.89270020]
[132.12844849 352.78353882]
[119.22221375 360.59967041]
[104.73252106 364.80813599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 34]
[21 33]
[23 31]
[24 30]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[44 103]
[45 102]
[46 101]
[47 100]
[52 99]
[53 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[63 91]
[64 90]
[67 88]
[68 87]
[69 86]
[109 123]
[110 122]
[111 121]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
