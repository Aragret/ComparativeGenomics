%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUACCGUAUGGGGGGGGGGGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAAxxxxxxxxxxUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUCCCCCCCCCCAUACAACCGUAU\
) } def
/len { sequence length } bind def

/coor [
[24.02446556 217.92453003]
[16.96368980 213.06391907]
[10.21297264 207.78111267]
[3.79752445 202.09584045]
[-2.25869966 196.02934265]
[-7.93308592 189.60427856]
[-13.20444584 182.84461975]
[-18.05309677 175.77561951]
[-22.46093178 168.42366028]
[-35.92799759 175.02957153]
[-49.39506912 181.63549805]
[-62.86213684 188.24140930]
[-76.32920074 194.84732056]
[-89.79627228 201.45323181]
[-103.26333618 208.05914307]
[-116.73040771 214.66505432]
[-130.19747925 221.27096558]
[-142.92713928 229.20542908]
[-154.78877258 238.38700867]
[-166.65040588 247.56860352]
[-172.35791016 262.94250488]
[-188.56892395 265.41946411]
[-198.60693359 252.45141602]
[-192.14570618 237.37876892]
[-175.83200073 235.70697021]
[-163.97036743 226.52537537]
[-152.10873413 217.34379578]
[-167.10783386 217.17976379]
[-180.08319092 209.65379333]
[-187.67312622 196.71575928]
[-187.91120911 181.71765137]
[-180.73577881 168.54521179]
[-168.00584412 160.61119080]
[-153.01950073 159.97114563]
[-139.65945435 166.79090881]
[-131.38705444 179.30360413]
[-130.34552002 194.26739502]
[-136.80339050 207.80389404]
[-123.33631897 201.19798279]
[-109.86925507 194.59207153]
[-96.40218353 187.98616028]
[-82.93511200 181.38024902]
[-69.46804810 174.77433777]
[-56.00098038 168.16842651]
[-42.53391266 161.56251526]
[-29.06684303 154.95660400]
[-34.46686554 139.96423340]
[-38.13172531 124.45616150]
[-40.01413345 108.63250732]
[-40.08979416 92.69745636]
[-38.35773468 76.85664368]
[-34.84030533 61.31447601]
[-29.58289337 46.27149963]
[-22.65334129 31.92184258]
[-14.14106846 18.45066452]
[-4.15591764 6.03180027]
[7.17326307 -5.17449617]
[19.70028114 -15.02361870]
[33.26348877 -23.38847542]
[47.68786621 -30.16112518]
[62.78728104 -35.25417328]
[78.36688232 -38.60189819]
[76.84935760 -53.52493668]
[75.33183289 -68.44797516]
[73.81430817 -83.37101746]
[72.29678345 -98.29405975]
[70.77925873 -113.21709442]
[56.13659668 -117.21169281]
[43.92805862 -126.22923279]
[35.80474472 -139.05015564]
[32.86527634 -153.94056702]
[35.50718689 -168.88662720]
[43.37318039 -181.86701965]
[55.39944458 -191.12625122]
[69.95952606 -195.41207886]
[85.08429718 -194.14489746]
[98.72825623 -187.49607849]
[109.04616547 -176.36480713]
[114.64261627 -162.25650024]
[114.76072693 -147.07919312]
[109.38453674 -132.88549805]
[99.24112701 -121.59499359]
[85.70230103 -114.73461914]
[87.21982574 -99.81158447]
[88.73735046 -84.88854218]
[90.25487518 -69.96549988]
[91.77239990 -55.04246140]
[93.28992462 -40.11942291]
[118.62366486 -39.03825760]
[143.34890747 -33.41420746]
[166.65777588 -23.43102837]
[187.78869629 -9.41491127]
[197.78793335 -20.59592628]
[200.61184692 -36.75010681]
[216.10455322 -42.12673569]
[228.32849121 -31.19479561]
[224.70872498 -15.20012951]
[208.96894836 -10.59667969]
[198.96971130 0.58433449]
[218.28973389 24.59431076]
[231.90072632 52.24359131]
[242.86787415 40.84041977]
[257.29077148 44.55915833]
[271.64764404 40.21398163]
[286.00451660 35.86880493]
[291.98834229 21.42138863]
[305.88262939 14.24624920]
[321.12692261 17.73126793]
[330.52334595 30.23092461]
[329.63516235 45.84326553]
[318.88177490 57.19661713]
[303.34057617 58.93027878]
[290.34967041 50.22566223]
[275.99282837 54.57084274]
[261.63595581 58.91601944]
[251.69570923 70.00839233]
[236.24591064 66.60044861]
[238.03152466 74.98446655]
[239.30171204 83.46189880]
[240.05175781 92.00108337]
[240.27883911 100.57013702]
[239.98211670 109.13705444]
[239.16268921 117.66986084]
[237.82362366 126.13668823]
[235.96992493 134.50592041]
[233.60850525 142.74629211]
[230.74818420 150.82705688]
[227.39964294 158.71803284]
[223.57539368 166.38975525]
[219.28970337 173.81358337]
[214.55857849 180.96177673]
[209.39968872 187.80764771]
[203.83230591 194.32565308]
[197.87719727 200.49143982]
[191.55662537 206.28199768]
[184.89416504 211.67568970]
[177.91470337 216.65237427]
[170.64431763 221.19346619]
[163.11013794 225.28202820]
[155.34030151 228.90278625]
[147.36381531 232.04220581]
[139.21047974 234.68858337]
[130.91073608 236.83203125]
[122.49555969 238.46453857]
[113.99639130 239.58000183]
[105.44495392 240.17428589]
[96.87318420 240.24514771]
[88.31309509 239.79232788]
[79.79664612 238.81752014]
[71.35563660 237.32435608]
[63.02157974 235.31842041]
[54.82560730 232.80720520]
[46.79831696 229.80006409]
[38.96968460 226.30827332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[18 27]
[19 26]
[20 25]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[92 99]
[93 98]
[101 117]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
