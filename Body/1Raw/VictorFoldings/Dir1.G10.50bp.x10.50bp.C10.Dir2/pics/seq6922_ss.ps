%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUCAUCGGGGGGGGGGGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGxxxxxxxxxxUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCCCCCCCCCCCAUAAUCCUC\
) } def
/len { sequence length } bind def

/coor [
[203.87388611 234.19963074]
[194.90341187 223.04887390]
[186.88929749 211.19163513]
[179.88691711 198.70971680]
[173.94467163 185.68923950]
[169.10363770 172.22006226]
[165.39729309 158.39512634]
[162.85128784 144.30984497]
[161.48324585 130.06143188]
[161.30268860 115.74823761]
[146.34243774 114.65692902]
[133.08596802 121.44776154]
[119.88529205 112.72695160]
[104.92504120 111.63563538]
[90.42945099 115.49279785]
[77.99000549 123.87493896]
[70.86925507 138.00312805]
[55.99090195 138.69873047]
[43.55146408 147.08087158]
[31.11202240 155.46301270]
[18.67258263 163.84515381]
[11.96698761 178.81068420]
[-4.37176228 180.21684265]
[-13.53576279 166.61709595]
[-6.09787464 152.00169373]
[10.29043961 151.40571594]
[22.72987938 143.02357483]
[35.16931915 134.64143372]
[47.60876083 126.25929260]
[53.83975983 112.73065948]
[69.60786438 111.43550110]
[82.04730225 103.05335999]
[80.17969513 88.17007446]
[66.05488586 83.12132263]
[51.93008423 78.07256317]
[37.80528259 73.02381134]
[23.57850266 68.26999664]
[9.25590611 63.81317902]
[-5.06669140 59.35636139]
[-15.83977699 70.22830963]
[-30.43481255 74.83737946]
[-45.49796295 72.12444305]
[-57.56783295 62.71291733]
[-63.87084961 48.76549530]
[-62.95862579 33.48719406]
[-55.04078674 20.38885880]
[-41.93679047 12.48038864]
[-26.65784264 11.57909203]
[-12.71493244 17.89208031]
[-3.31203771 29.96867561]
[-0.60987550 45.03376389]
[13.71272182 49.49058151]
[28.03531837 53.94739532]
[32.65643692 52.52585602]
[38.21911240 54.03845215]
[42.85403824 58.89900589]
[56.97884369 63.94776154]
[71.10364532 68.99652100]
[85.22844696 74.04527283]
[93.47093964 74.79992676]
[100.23046112 77.80072021]
[104.97520447 82.31778717]
[107.45126343 87.51771545]
[107.69505310 92.55730438]
[106.01635742 96.67539215]
[120.97660065 97.76670074]
[135.30313110 91.05392456]
[147.43374634 99.69667816]
[162.39399719 100.78798676]
[165.39678955 83.15933990]
[170.21046448 65.93766785]
[176.78300476 49.30847549]
[185.04345703 33.45083618]
[194.90264893 18.53551292]
[206.25427246 4.72309923]
[218.97586060 -7.83771133]
[232.93028259 -19.01171875]
[247.96707153 -28.67867279]
[263.92416382 -36.73457336]
[280.62957764 -43.09278488]
[297.90328979 -47.68495941]
[315.55911255 -50.46179581]
[333.40689087 -51.39353561]
[351.25430298 -50.47031403]
[368.90905762 -47.70224380]
[386.18106079 -43.11930847]
[402.88418579 -36.77104187]
[418.83862305 -28.72599220]
[433.87252808 -19.07098007]
[447.82406616 -7.91015768]
[458.26388550 -18.68096542]
[468.70370483 -29.45177460]
[475.38592529 -45.03330231]
[492.20834351 -42.92560196]
[494.83993530 -26.17713547]
[479.47451782 -19.01196289]
[469.03469849 -8.24115372]
[458.59487915 2.52965474]
[465.84399414 10.70068359]
[472.56021118 19.31504631]
[478.71658325 28.33805084]
[484.28820801 37.73336411]
[489.25274658 47.46315384]
[493.59011841 57.48823166]
[497.28292847 67.76823425]
[500.31628418 78.26175690]
[502.67794800 88.92654419]
[504.35842896 99.71965027]
[505.35095215 110.59761810]
[505.65151978 121.51663208]
[505.25894165 132.43272400]
[504.17477417 143.30194092]
[502.40338135 154.08049011]
[499.95193481 164.72500610]
[514.27453613 169.18182373]
[523.46490479 168.74717712]
[528.84698486 173.88320923]
[543.07379150 178.63702393]
[557.30053711 183.39083862]
[574.23944092 182.67591858]
[579.61553955 198.75491333]
[565.65319824 208.37202454]
[552.54675293 197.61761475]
[538.31994629 192.86380005]
[524.09320068 188.10998535]
[509.81771851 183.50440979]
[495.49511719 179.04760742]
[490.10458374 192.29394531]
[483.63290405 205.04743958]
[476.12466431 217.22006226]
[467.63165283 228.72772217]
[458.21243286 239.49095154]
[447.93197632 249.43542480]
[436.86117554 258.49243164]
[425.07644653 266.59942627]
[412.65908813 273.70037842]
[399.69476318 279.74624634]
[386.27294922 284.69519043]
[372.48623657 288.51300049]
[358.42980957 291.17327881]
[344.20065308 292.65759277]
[329.89700317 292.95562744]
[315.61761475 292.06524658]
[301.46096802 289.99252319]
[287.52490234 286.75173950]
[273.90554810 282.36517334]
[260.69696045 276.86303711]
[247.99032593 270.28326416]
[235.87341309 262.67120361]
[224.42988586 254.07936096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 69]
[11 68]
[13 66]
[14 65]
[15 32]
[16 31]
[18 29]
[19 28]
[20 27]
[21 26]
[33 59]
[34 58]
[35 57]
[36 56]
[37 53]
[38 52]
[39 51]
[90 98]
[91 97]
[92 96]
[114 127]
[115 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
