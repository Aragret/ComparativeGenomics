%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCCUUAUGGGGGGGGGGCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAxxxxxxxxxxACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCACCCCCCCCCCUCCACCUUUAU\
) } def
/len { sequence length } bind def

/coor [
[99.96035767 459.34500122]
[86.47147369 452.61346436]
[74.98597717 442.84890747]
[66.17160797 430.61901855]
[60.54082489 416.63482666]
[58.42099762 401.70935059]
[59.93536758 386.71032715]
[64.99588776 372.50982666]
[73.30835724 359.93341064]
[84.38948822 349.71224976]
[97.59503937 342.44061279]
[112.15726471 338.54125977]
[111.84928894 323.54440308]
[111.54131317 308.54757690]
[111.23332977 293.55072021]
[110.92535400 278.55389404]
[110.61737823 263.55706787]
[110.30940247 248.56022644]
[110.00141907 233.56338501]
[109.69344330 218.56654358]
[109.23151398 203.57365417]
[108.61569214 188.58630371]
[107.84603119 173.60606384]
[106.92261505 158.63452148]
[105.99920654 143.66296387]
[105.07579041 128.69142151]
[99.38025665 123.81177521]
[89.62080383 135.20269775]
[78.23003387 125.44307709]
[87.98918152 114.05250549]
[82.29364777 109.17286682]
[67.35762787 110.55689240]
[52.42161942 111.94091797]
[41.10760880 123.31513214]
[25.17711830 121.41803741]
[16.85065269 107.70492554]
[22.51556587 92.69531250]
[37.82622147 87.90329742]
[51.03759384 97.00490570]
[65.97360229 95.62088013]
[80.90962219 94.23685455]
[92.09791565 84.24575806]
[95.15631104 69.56085968]
[98.21470642 54.87596130]
[101.27310181 40.19106293]
[86.89162445 35.89606857]
[72.92620087 30.39690399]
[59.47745895 23.73319054]
[46.64228821 15.95293903]
[34.51317596 7.11221027]
[23.17751503 -2.72529840]
[12.71697426 -13.48870564]
[3.20692706 -25.10046005]
[-5.28410578 -37.47689819]
[-12.69494534 -50.52884293]
[-18.97219467 -64.16226196]
[-24.07062721 -78.27890778]
[-27.95350647 -92.77708435]
[-30.59285545 -107.55232239]
[-31.96965790 -122.49816895]
[-32.07399368 -137.50692749]
[-30.90511131 -152.47047424]
[-28.47143364 -167.28097534]
[-24.79049301 -181.83172607]
[-19.88881493 -196.01789856]
[-13.80171299 -209.73727417]
[-6.57304716 -222.89099121]
[1.74509895 -235.38427734]
[11.09279156 -247.12712097]
[21.40268135 -258.03491211]
[32.60047913 -268.02908325]
[44.60551071 -277.03756714]
[57.33127213 -284.99551392]
[70.68607330 -291.84555054]
[84.57369232 -297.53836060]
[98.89406586 -302.03286743]
[113.54401398 -305.29675293]
[128.41798401 -307.30642700]
[143.40881348 -308.04748535]
[158.40846252 -307.51452637]
[173.30889893 -305.71142578]
[188.00271606 -302.65118408]
[202.38409424 -298.35580444]
[216.34936523 -292.85629272]
[229.79794312 -286.19223022]
[242.63290405 -278.41165161]
[254.76179504 -269.57058716]
[266.09719849 -259.73278809]
[276.55746460 -248.96911621]
[286.06719971 -237.35711670]
[294.55792236 -224.98046875]
[301.96841431 -211.92832947]
[308.24533081 -198.29475403]
[313.34338379 -184.17796326]
[317.22589111 -169.67968750]
[319.86486816 -154.90438843]
[321.24127197 -139.95851135]
[321.34521484 -124.94973755]
[320.17596436 -109.98622894]
[317.74191284 -95.17578888]
[314.06057739 -80.62512970]
[309.15853882 -66.43908691]
[303.07107544 -52.71987534]
[295.84207153 -39.56634521]
[287.52362061 -27.07327080]
[278.17559814 -15.33066463]
[267.86544800 -4.42313337]
[256.66738892 5.57073164]
[244.66212463 14.57892418]
[231.93615723 22.53653717]
[218.58117676 29.38623619]
[204.69340515 35.07867050]
[190.37292480 39.57281876]
[175.72288513 42.83630753]
[160.84886169 44.84561920]
[145.85803223 45.58627701]
[130.85838318 45.05294037]
[115.95800018 43.24945831]
[112.89960480 57.93435669]
[109.84120941 72.61925507]
[106.78281403 87.30415344]
[119.31307220 91.72232819]
[126.62725067 107.37740326]
[120.04734039 127.76800537]
[120.97075653 142.73954773]
[121.89416504 157.71110535]
[122.81758118 172.68264771]
[126.48862457 181.11587524]
[123.60304260 187.97047424]
[124.21887207 202.95783997]
[127.71598816 211.46464539]
[124.69028473 218.25856018]
[124.99826050 233.25540161]
[125.30623627 248.25224304]
[125.61421204 263.24908447]
[125.92219543 278.24591064]
[126.23017120 293.24276733]
[126.53814697 308.23959351]
[126.84612274 323.23641968]
[127.15410614 338.23327637]
[141.86413574 341.53149414]
[155.35710144 348.25485229]
[166.84851074 358.01245117]
[175.67030334 370.23699951]
[181.30955505 384.21777344]
[183.43843079 399.14196777]
[181.93315125 414.14187622]
[176.88124084 428.34545898]
[168.57640076 440.92691040]
[157.50148010 451.15478516]
[144.30032349 458.43444824]
[129.74047852 462.34262085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 130]
[22 129]
[23 127]
[24 126]
[25 125]
[26 124]
[31 41]
[32 40]
[33 39]
[42 121]
[43 120]
[44 119]
[45 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
