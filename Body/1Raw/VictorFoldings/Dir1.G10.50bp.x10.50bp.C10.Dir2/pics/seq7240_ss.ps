%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUCAUCUGGGGGGGGGGGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUxxxxxxxxxxUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCCCCCCCCCCCUAUCAUAU\
) } def
/len { sequence length } bind def

/coor [
[81.16068268 383.45877075]
[67.94048309 376.18630981]
[57.05368042 365.73928833]
[49.24254990 352.83004761]
[45.03966904 338.33874512]
[44.73159790 323.25338745]
[48.33934021 308.60256958]
[55.61691284 295.38519287]
[66.06812286 284.50241089]
[78.98037720 276.69625854]
[93.47332001 272.49899292]
[93.16126251 257.50222778]
[92.84920502 242.50547791]
[92.53714752 227.50871277]
[92.22509003 212.51196289]
[91.91303253 197.51521301]
[91.60098267 182.51846313]
[91.28892517 167.52169800]
[90.97686768 152.52494812]
[82.85966492 94.03130341]
[72.64617920 83.04563904]
[62.43270111 72.05997467]
[51.99288940 61.28916168]
[41.33126450 50.73787308]
[30.66963768 40.18658066]
[20.00801086 29.63529205]
[9.34638500 19.08400154]
[-2.27187133 28.59367180]
[-14.82052612 36.83678818]
[-28.16208839 43.72303772]
[-42.15038300 49.17696381]
[-56.63214493 53.13881683]
[-71.44870758 55.56518555]
[-86.43772125 56.42948532]
[-101.43497467 55.72224808]
[-116.27613831 53.45122147]
[-130.79861450 49.64128494]
[-144.84326172 44.33419037]
[-158.25624084 37.58807755]
[-170.89054871 29.47686195]
[-182.60778809 20.08941841]
[-193.27955627 9.52859783]
[-202.78894043 -2.08988929]
[-211.03175354 -14.63874435]
[-217.91767883 -27.98047447]
[-223.37127686 -41.96890259]
[-227.33277893 -56.45075989]
[-229.75877380 -71.26737976]
[-230.62271118 -86.25641632]
[-229.91511536 -101.25365448]
[-227.64372253 -116.09476471]
[-223.83343506 -130.61714172]
[-218.52600098 -144.66166687]
[-211.77955627 -158.07446289]
[-203.66804504 -170.70858765]
[-194.28031921 -182.42559814]
[-183.71923828 -193.09710693]
[-172.10050964 -202.60621643]
[-159.55146790 -210.84872437]
[-146.20956421 -217.73432922]
[-132.22100830 -223.18757629]
[-117.73905182 -227.14872742]
[-102.92237091 -229.57437134]
[-87.93331146 -230.43794250]
[-72.93609619 -229.72998047]
[-58.09503937 -227.45823669]
[-43.57275772 -223.64758301]
[-29.52835464 -218.33981323]
[-16.11571693 -211.59304810]
[-3.48179483 -203.48121643]
[8.23498440 -194.09320068]
[18.90624619 -183.53186035]
[28.41506958 -171.91291809]
[36.65727234 -159.36366272]
[43.54254913 -146.02159119]
[48.99545670 -132.03289795]
[52.95625305 -117.55085754]
[55.38154221 -102.73411560]
[56.24475098 -87.74503326]
[55.53641891 -72.74783325]
[53.26430893 -57.90683746]
[49.45331573 -43.38464737]
[44.14519882 -29.34037590]
[37.39810562 -15.92790031]
[29.28597260 -3.29417562]
[19.89767456 8.42237568]
[30.55930138 18.97366524]
[41.22092819 29.52495575]
[51.88255310 40.07624435]
[62.54417801 50.62753677]
[67.30081177 51.49353790]
[71.54217529 55.39766312]
[73.41836548 61.84649277]
[83.63184357 72.83215332]
[93.84532928 83.81781769]
[108.70837402 85.84015656]
[121.48573303 77.98272705]
[126.59024811 62.77341080]
[141.71270752 57.41703033]
[155.25245667 66.02255249]
[156.82293701 81.98854828]
[145.21943665 93.06727600]
[129.34315491 90.76008606]
[116.56579590 98.61751556]
[117.73135376 106.02639008]
[131.72946167 111.41645050]
[120.06245422 120.84414673]
[121.22800446 128.25302124]
[135.80070496 131.80778503]
[150.37341309 135.36254883]
[161.82194519 129.33055115]
[173.91702271 132.63632202]
[180.28358459 142.96946716]
[194.77919006 146.82662964]
[209.27478027 150.68379211]
[221.23149109 140.79354858]
[236.72007751 139.85374451]
[249.78486633 148.22576904]
[255.40220642 162.69038391]
[251.41207886 177.68566895]
[239.34878540 187.44561768]
[223.85092163 188.21734619]
[210.87770081 179.70410156]
[205.41761780 165.17938232]
[190.92202759 161.32223511]
[176.42643738 157.46507263]
[159.78997803 162.96308899]
[146.81864929 149.93525696]
[132.24594116 146.38049316]
[117.67324829 142.82572937]
[105.97361755 152.21289062]
[106.28567505 167.20964050]
[106.59773254 182.20640564]
[106.90979004 197.20315552]
[107.22184753 212.19990540]
[107.53390503 227.19665527]
[107.84595490 242.19342041]
[108.15801239 257.19015503]
[108.47006989 272.18692017]
[123.12506104 275.77767944]
[136.35087585 283.03994751]
[147.24574280 293.47854614]
[155.06683350 306.38174438]
[159.28091431 320.86981201]
[159.60063171 335.95492554]
[156.00419617 350.60852051]
[148.73683167 363.83151245]
[138.29403687 374.72235107]
[125.38780975 382.53848267]
[110.89811707 386.74694824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 95]
[21 94]
[22 93]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[96 104]
[97 103]
[108 130]
[109 129]
[110 128]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
