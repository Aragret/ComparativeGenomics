%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAACUCAUGGGGGGGGGGGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCAxxxxxxxxxxCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUCCCCCCCCCCUCCCACUCAU\
) } def
/len { sequence length } bind def

/coor [
[91.34217834 156.63787842]
[76.97994232 152.46792603]
[64.18609619 144.72326660]
[53.83230591 133.93154907]
[46.62398148 120.82803345]
[43.05223846 106.30547333]
[43.36042786 91.35330963]
[47.52754974 76.99025726]
[55.26969147 64.19489288]
[66.05937195 53.83897781]
[79.16147614 46.62807846]
[93.68333435 43.05348206]
[93.99539185 28.05672646]
[94.30744934 13.05997276]
[94.61949921 -1.93678057]
[94.93155670 -16.93353462]
[95.24361420 -31.93028831]
[95.55567169 -46.92704010]
[95.86772919 -61.92379379]
[96.17978668 -76.92054749]
[96.49183655 -91.91730499]
[96.80389404 -106.91405487]
[97.11595154 -121.91081238]
[97.42800903 -136.90756226]
[82.47224426 -138.11616516]
[67.61553192 -140.21701050]
[52.91105270 -143.20260620]
[38.41144180 -147.06224060]
[24.16860580 -151.78210449]
[10.23353100 -157.34530640]
[-3.34389734 -163.73193359]
[-16.51507568 -170.91911316]
[-29.23285484 -178.88111877]
[-41.45170975 -187.58946228]
[-53.12789536 -197.01295471]
[-64.21961975 -207.11785889]
[-74.68717194 -217.86802673]
[-84.49308014 -229.22494507]
[-93.60224915 -241.14796448]
[-101.98206329 -253.59442139]
[-109.60252380 -266.51974487]
[-116.43635559 -279.87768555]
[-122.45909119 -293.62039185]
[-127.64917755 -307.69869995]
[-131.98803711 -322.06219482]
[-135.46011353 -336.65945435]
[-138.05300903 -351.43823242]
[-139.75743103 -366.34564209]
[-140.56727600 -381.32827759]
[-140.47962952 -396.33251953]
[-139.49482727 -411.30468750]
[-137.61639404 -426.19116211]
[-134.85104370 -440.93865967]
[-131.20867920 -455.49435425]
[-126.70233917 -469.80618286]
[-121.34815979 -483.82290649]
[-115.16529846 -497.49432373]
[-108.17589569 -510.77151489]
[-100.40496826 -523.60693359]
[-91.88034058 -535.95465088]
[-82.63252258 -547.77044678]
[-72.69461823 -559.01208496]
[-62.10220337 -569.63922119]
[-50.89319992 -579.61389160]
[-39.10773087 -588.90032959]
[-26.78798676 -597.46533203]
[-13.97806931 -605.27825928]
[-0.72383469 -612.31109619]
[12.92727089 -618.53869629]
[26.92637825 -623.93872070]
[41.22337723 -628.49188232]
[55.76708221 -632.18188477]
[70.50543976 -634.99554443]
[85.38568115 -636.92266846]
[100.35453796 -637.95648193]
[115.35842896 -638.09326172]
[130.34364319 -637.33245850]
[145.25654602 -635.67687988]
[160.04373169 -633.13238525]
[174.65229797 -629.70812988]
[189.02990723 -625.41632080]
[203.12512207 -620.27233887]
[216.88748169 -614.29461670]
[230.26771545 -607.50457764]
[243.21792603 -599.92645264]
[255.69174194 -591.58746338]
[267.64453125 -582.51733398]
[279.03350830 -572.74865723]
[289.81787109 -562.31640625]
[299.95904541 -551.25781250]
[309.42071533 -539.61254883]
[318.16900635 -527.42224121]
[326.17260742 -514.73059082]
[333.40286255 -501.58303833]
[339.83392334 -488.02658081]
[345.44271851 -474.10980225]
[350.20919800 -459.88250732]
[354.11627197 -445.39559937]
[357.14999390 -430.70095825]
[359.29946899 -415.85122681]
[360.55703735 -400.89950562]
[360.91815186 -385.89932251]
[360.38156128 -370.90441895]
[358.94915771 -355.96841431]
[356.62609863 -341.14483643]
[353.42068481 -326.48669434]
[349.34436035 -312.04650879]
[344.41177368 -297.87591553]
[338.64056396 -284.02572632]
[332.05136108 -270.54544067]
[324.66775513 -257.48333740]
[316.51623535 -244.88619995]
[307.62591553 -232.79911804]
[298.02865601 -221.26533508]
[287.75878906 -210.32615662]
[276.85311890 -200.02073669]
[265.35064697 -190.38597107]
[253.29255676 -181.45634460]
[240.72203064 -173.26383972]
[227.68405151 -165.83775330]
[214.22529602 -159.20469666]
[200.39395142 -153.38841248]
[186.23951721 -148.40969849]
[171.81266785 -144.28639221]
[157.16505432 -141.03326416]
[142.34910583 -138.66194153]
[127.41785431 -137.18092346]
[112.42475891 -136.59550476]
[112.11270905 -121.59875488]
[111.80065155 -106.60199738]
[111.48859406 -91.60524750]
[111.17653656 -76.60848999]
[110.86447906 -61.61174011]
[110.55242157 -46.61498642]
[110.24037170 -31.61823082]
[109.92831421 -16.62147713]
[109.61625671 -1.62472427]
[109.30419922 13.37202930]
[108.99214172 28.36878395]
[108.68008423 43.36553574]
[123.04067993 47.54112625]
[135.83148193 55.29081345]
[146.18103027 66.08659363]
[153.38420105 79.19294739]
[156.95024109 93.71691132]
[156.63616943 108.66895294]
[152.46339417 123.03036499]
[144.71623230 135.82269287]
[133.92248535 146.17436218]
[120.81754303 153.38011169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
