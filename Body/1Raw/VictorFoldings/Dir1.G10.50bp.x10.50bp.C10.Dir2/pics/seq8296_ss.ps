%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCAACAACCGGGGGGGGGGGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGxxxxxxxxxxCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCACCCCCCCCCCUCAUCCACAACC\
) } def
/len { sequence length } bind def

/coor [
[80.65093231 397.21029663]
[66.49033356 392.05529785]
[53.90058899 383.77310181]
[43.56064987 372.81033325]
[36.02813721 359.75817871]
[31.70927238 345.32058716]
[30.83696365 330.27612305]
[33.45825577 315.43612671]
[39.43178177 301.60089111]
[48.43539810 289.51654053]
[59.98355484 279.83477783]
[73.45346832 273.07769775]
[88.11873627 269.60971069]
[88.11873627 254.60972595]
[88.11873627 239.60972595]
[88.11873627 224.60972595]
[88.11873627 209.60972595]
[88.11873627 194.60972595]
[88.11873627 179.60972595]
[88.11873627 164.60972595]
[88.11873627 149.60972595]
[88.11873627 134.60972595]
[75.23087311 126.93488312]
[62.04257965 134.08113098]
[53.92802811 148.33195496]
[37.52978897 148.15937805]
[29.71696472 133.74092102]
[38.52672195 119.90906525]
[54.89633179 120.89283752]
[68.08463287 113.74658966]
[66.96345520 97.99016571]
[72.84067535 84.15142822]
[83.79505920 74.99959564]
[96.97699738 72.02221680]
[99.39855957 57.21897125]
[101.82011414 42.41572571]
[104.24166870 27.61248207]
[93.71740723 20.50447083]
[86.67243958 10.00388050]
[84.10836792 -2.32232237]
[86.36178589 -14.65332985]
[93.06074524 -25.18345070]
[103.18542480 -32.38652039]
[100.16594696 -47.07947159]
[97.14646912 -61.77241898]
[82.19198608 -60.41470718]
[67.17951965 -60.73993683]
[52.29785919 -62.74401855]
[37.73417282 -66.40174103]
[23.67160225 -71.66711426]
[10.28700352 -78.47391510]
[-2.25129676 -86.73654938]
[-13.78561783 -96.35108948]
[-24.17090225 -107.19663239]
[-33.27654648 -119.13678741]
[-40.98803329 -132.02139282]
[-47.20838928 -145.68840027]
[-51.85937881 -159.96594238]
[-54.88251495 -174.67446899]
[-56.23978043 -189.62899780]
[-55.91410065 -204.64146423]
[-53.90957642 -219.52305603]
[-50.25141525 -234.08663940]
[-44.98562241 -248.14904785]
[-38.17842102 -261.53344727]
[-29.91541672 -274.07150269]
[-20.30052757 -285.60552979]
[-9.45467091 -295.99047852]
[2.48575521 -305.09576416]
[15.37058735 -312.80688477]
[29.03778458 -319.02682495]
[43.31547165 -323.67739868]
[58.02408218 -326.70007324]
[72.97865295 -328.05688477]
[87.99109650 -327.73077393]
[102.87263489 -325.72579956]
[117.43610382 -322.06719971]
[131.49836731 -316.80099487]
[144.88255310 -309.99337769]
[157.42036438 -301.73001099]
[168.95410156 -292.11477661]
[179.33874512 -281.26861572]
[188.44366455 -269.32791138]
[196.15438843 -256.44284058]
[202.37391663 -242.77546692]
[207.02406311 -228.49763489]
[210.04631042 -213.78894043]
[211.40267944 -198.83433533]
[211.07611084 -183.82188416]
[209.07069397 -168.94041443]
[205.41166687 -154.37704468]
[200.14503479 -140.31495667]
[193.33702087 -126.93096924]
[185.07327271 -114.39340973]
[175.45768738 -102.85994720]
[164.61122131 -92.47563934]
[152.67024231 -83.37106323]
[139.78495789 -75.66073608]
[126.11738586 -69.44160461]
[111.83942413 -64.79190063]
[114.85890198 -50.09894943]
[117.87837982 -35.40599823]
[135.86915588 -29.24656487]
[147.28657532 -14.03969193]
[162.19346619 -15.70836926]
[177.10035706 -17.37704659]
[191.98957825 -19.19670486]
[206.85960388 -21.16715622]
[221.72961426 -23.13760757]
[236.59962463 -25.10805893]
[247.45748901 -36.91849899]
[263.45025635 -35.64948654]
[272.30969238 -22.27449989]
[267.23953247 -7.05368280]
[252.12922668 -1.66314447]
[238.57008362 -10.23804474]
[223.70005798 -8.26759243]
[208.83004761 -6.29714108]
[193.96003723 -4.32668972]
[187.70552063 -0.30666706]
[178.76904297 -2.47015119]
[163.86215210 -0.80147439]
[148.95524597 0.86720258]
[144.08824158 14.88269329]
[133.40162659 25.36182404]
[119.04491425 30.03403854]
[116.62335968 44.83728409]
[114.20180511 59.64052963]
[111.78024292 74.44377136]
[126.37205505 86.13872528]
[130.98651123 105.35186005]
[122.43483734 124.33374023]
[103.11873627 134.60972595]
[103.11873627 149.60972595]
[103.11873627 164.60972595]
[103.11873627 179.60972595]
[103.11873627 194.60972595]
[103.11873627 209.60972595]
[103.11873627 224.60972595]
[103.11873627 239.60972595]
[103.11873627 254.60972595]
[103.11873627 269.60971069]
[117.78399658 273.07769775]
[131.25390625 279.83477783]
[142.80206299 289.51654053]
[151.80567932 301.60089111]
[157.77920532 315.43612671]
[160.40049744 330.27612305]
[159.52819824 345.32058716]
[155.20932007 359.75817871]
[147.67681885 372.81033325]
[137.33688354 383.77310181]
[124.74713135 392.05529785]
[110.58653259 397.21029663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 30]
[24 29]
[34 129]
[35 128]
[36 127]
[37 126]
[43 102]
[44 101]
[45 100]
[104 123]
[105 122]
[106 121]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
