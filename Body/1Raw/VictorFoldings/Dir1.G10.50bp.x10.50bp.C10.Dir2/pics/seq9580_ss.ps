%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAGUAUGGGGGGGGGGAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAxxxxxxxxxxUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCCCCCCCCCCCAUACUAGUCU\
) } def
/len { sequence length } bind def

/coor [
[76.42991638 369.91732788]
[63.87169647 361.56619263]
[53.78547287 350.35372925]
[46.80527878 336.98483276]
[43.36989594 322.29983521]
[43.69527054 307.22186279]
[47.76095581 292.69876099]
[55.31137466 279.64340210]
[65.87190247 268.87652588]
[78.77870178 261.07489014]
[93.22042847 256.72894287]
[92.59645081 241.74191284]
[91.97247314 226.75489807]
[91.34849548 211.76788330]
[90.72451782 196.78086853]
[90.10054016 181.79385376]
[89.47656250 166.80683899]
[88.85258484 151.81982422]
[88.22860718 136.83280945]
[87.60462952 121.84578705]
[81.99932861 111.56092834]
[82.39754486 101.53751373]
[87.13725281 94.61232758]
[93.49079132 92.11898804]
[88.58924103 77.94243622]
[83.68769073 63.76587677]
[69.17770386 67.59635925]
[54.42204285 70.33179474]
[39.50321960 71.95688629]
[24.50466919 72.46253204]
[9.51026917 71.84592438]
[-5.39612198 70.11049652]
[-20.13114166 67.26596069]
[-34.61238861 63.32822418]
[-48.75886917 58.31930923]
[-62.49147415 52.26722336]
[-75.73340607 45.20581436]
[-88.41060638 37.17457962]
[-100.45218658 28.21842384]
[-111.79078674 18.38743973]
[-122.36301422 7.73660660]
[-132.10974121 -3.67451262]
[-140.97644043 -15.78210163]
[-148.91354370 -28.51844788]
[-155.87667847 -41.81232452]
[-161.82685852 -55.58938599]
[-166.73085022 -69.77258301]
[-170.56120300 -84.28260040]
[-173.29650879 -99.03829193]
[-174.92146301 -113.95713043]
[-175.42698669 -128.95568848]
[-174.81024170 -143.95007324]
[-173.07469177 -158.85646057]
[-170.23002625 -173.59144592]
[-166.29216003 -188.07266235]
[-161.28311157 -202.21910095]
[-155.23091125 -215.95164490]
[-148.16938782 -229.19351196]
[-140.13803101 -241.87065125]
[-131.18177795 -253.91213989]
[-121.35069275 -265.25067139]
[-110.69976807 -275.82278442]
[-99.28855896 -285.56942749]
[-87.18089294 -294.43600464]
[-74.44447327 -302.37301636]
[-61.15053940 -309.33602905]
[-47.37342453 -315.28607178]
[-33.19018173 -320.18994141]
[-18.68013191 -324.02017212]
[-3.92441940 -326.75534058]
[10.99443340 -328.38018799]
[25.99299240 -328.88555908]
[40.98738098 -328.26867676]
[55.89374161 -326.53298950]
[70.62871552 -323.68820190]
[85.10988617 -319.75021362]
[99.25627899 -314.74105835]
[112.98878479 -308.68872070]
[126.23059082 -301.62707520]
[138.90765381 -293.59561157]
[150.94906616 -284.63925171]
[162.28749084 -274.80807495]
[172.85952759 -264.15704346]
[182.60604858 -252.74575806]
[191.47254944 -240.63801575]
[199.40943909 -227.90151978]
[206.37231445 -214.60752869]
[212.32226562 -200.83035278]
[217.22599792 -186.64706421]
[221.05610657 -172.13699341]
[223.79115295 -157.38125610]
[225.41584778 -142.46238708]
[225.92109680 -127.46382141]
[225.30409241 -112.46943665]
[223.56826782 -97.56309509]
[220.72334290 -82.82814789]
[216.78521729 -68.34700775]
[211.77593994 -54.20065689]
[205.72348022 -40.46820831]
[198.66172791 -27.22646523]
[190.63015747 -14.54947662]
[181.67367554 -2.50813890]
[171.84239197 8.83020592]
[161.19128418 19.40215111]
[149.77990723 29.14856911]
[137.67208862 38.01495743]
[124.93553162 45.95172882]
[111.64146423 52.91449738]
[97.86425018 58.86432648]
[102.76580048 73.04088593]
[107.66735077 87.21743774]
[118.54617310 97.54464722]
[132.95838928 101.70252991]
[147.37060547 105.86042023]
[161.78282166 110.01831055]
[176.19503784 114.17619324]
[189.07151794 105.30318451]
[204.63395691 106.83435059]
[215.53425598 118.04673767]
[216.62561035 133.64619446]
[207.39274597 146.26712036]
[192.19509888 149.95033264]
[178.20857239 142.95669556]
[172.03715515 128.58840942]
[157.62493896 124.43052673]
[143.21272278 120.27263641]
[128.80050659 116.11474609]
[114.38829041 111.95686340]
[102.59164429 121.22180939]
[103.21562195 136.20883179]
[103.83959961 151.19584656]
[104.46357727 166.18286133]
[105.08755493 181.16987610]
[105.71153259 196.15689087]
[106.33551025 211.14390564]
[106.95948792 226.13092041]
[107.58346558 241.11793518]
[108.20744324 256.10494995]
[122.96044922 259.23541260]
[136.47108459 265.93716431]
[147.89006042 275.78894043]
[156.49957275 288.17147827]
[161.75842285 302.30636597]
[163.33602905 317.30511475]
[161.13322449 332.22485352]
[155.28848267 346.12771606]
[146.16920471 358.13977051]
[134.34863281 367.50592041]
[120.56981659 373.63742065]
[105.69891357 376.14880371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 111]
[25 110]
[26 109]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
