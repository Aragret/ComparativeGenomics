%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCGUGCAGGGGGGGGGGAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCxxxxxxxxxxCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAACCCCCCCCCCUAACCAUGCA\
) } def
/len { sequence length } bind def

/coor [
[67.75293732 385.35061646]
[53.90699768 379.33459473]
[42.19833755 369.80517578]
[33.49581146 357.46951294]
[28.44521141 343.24298096]
[27.42131996 328.18130493]
[30.50011826 313.40216064]
[37.45314026 300.00222778]
[47.76442337 288.97589111]
[60.66880417 281.14138794]
[75.20869446 277.08007812]
[75.20869446 262.08007812]
[75.20869446 247.08007812]
[75.20869446 232.08007812]
[75.20869446 217.08007812]
[75.20869446 202.08007812]
[75.20869446 187.08007812]
[75.20869446 172.08007812]
[75.20869446 157.08007812]
[75.20869446 142.08007812]
[63.60734940 132.57171631]
[48.89939117 135.51719666]
[34.19142914 138.46267700]
[19.48346710 141.40815735]
[11.66276360 151.71789551]
[-0.69495076 153.84059143]
[-10.83585835 147.17205811]
[-25.60191345 149.81092834]
[-40.36796951 152.44978333]
[-47.01652145 166.47035217]
[-60.65249634 173.87574768]
[-76.03258514 171.81843567]
[-87.24282837 161.08949280]
[-89.97265625 145.81443787]
[-83.17240143 131.86680603]
[-69.45689392 124.60977936]
[-54.10002899 126.83381653]
[-43.00683212 137.68373108]
[-28.24077797 135.04487610]
[-13.47472286 132.40600586]
[-0.72748393 120.38486481]
[16.53798485 126.70020294]
[31.24594498 123.75471497]
[45.95390701 120.80923462]
[60.66186905 117.86375427]
[58.24304962 108.27099609]
[58.09371948 98.52523041]
[60.15504456 89.14832306]
[64.25157928 80.62715912]
[70.10407257 73.38842773]
[77.34754181 67.77728271]
[85.55355835 64.04111481]
[82.76123047 49.30331039]
[79.96891022 34.56550598]
[77.17658234 19.82769966]
[74.38426208 5.08989286]
[64.73214722 16.57190704]
[49.80589294 18.05751610]
[38.07994461 8.70325661]
[36.21175385 -6.17995071]
[45.26199341 -18.14210510]
[60.09235382 -20.39164734]
[72.28366089 -11.65008259]
[71.34803009 -26.62087440]
[70.41240692 -41.59166718]
[69.47677612 -56.56245804]
[68.54114532 -71.53324890]
[54.25489807 -76.80799866]
[43.35372162 -87.44210815]
[37.72631836 -101.59315491]
[38.34766769 -116.80938721]
[45.11011505 -130.45451355]
[56.84202957 -140.16439819]
[71.51078033 -144.25679016]
[86.57492828 -142.02261353]
[99.42449951 -133.84898376]
[107.83325195 -121.15202332]
[110.34429932 -106.13155365]
[106.52259827 -91.38996887]
[97.03027344 -79.48132324]
[83.51194000 -72.46887970]
[84.44756317 -57.49808502]
[85.38319397 -42.52729416]
[86.31882477 -27.55650330]
[87.25445557 -12.58571148]
[89.12206268 2.29756832]
[91.91439056 17.03537369]
[94.70671082 31.77318001]
[97.49903870 46.51098633]
[100.29136658 61.24879074]
[109.32514954 62.38640213]
[117.84413910 65.60047150]
[125.37805176 70.71355438]
[131.51097107 77.44339752]
[145.16720581 71.23799133]
[154.53022766 58.48478699]
[169.31822205 60.26375580]
[182.97445679 54.05834579]
[196.63069153 47.85293961]
[210.28694153 41.64753342]
[223.94317627 35.44212723]
[235.86204529 23.38488960]
[250.74755859 31.50018883]
[247.07012939 48.05050278]
[230.14859009 49.09836578]
[216.49234009 55.30377579]
[202.83610535 61.50918198]
[189.17987061 67.71459198]
[175.52362061 73.91999817]
[167.13739014 86.22935486]
[151.37260437 84.89423370]
[137.71636963 91.09963989]
[138.69989014 97.98528290]
[138.43667603 104.93582153]
[152.66346741 109.68963623]
[166.89024353 114.44345093]
[178.84936523 104.69754028]
[194.18161011 102.98705292]
[207.99452209 109.85781097]
[215.88043213 123.11737061]
[215.32298279 138.53466797]
[206.50006104 151.19007874]
[192.22702026 157.04531860]
[177.05833435 154.23200989]
[165.83428955 143.64785767]
[162.13642883 128.67022705]
[147.90965271 123.91641998]
[133.68286133 119.16260529]
[123.58000183 132.60276794]
[108.23835754 140.89874268]
[90.20869446 142.08007812]
[90.20869446 157.08007812]
[90.20869446 172.08007812]
[90.20869446 187.08007812]
[90.20869446 202.08007812]
[90.20869446 217.08007812]
[90.20869446 232.08007812]
[90.20869446 247.08007812]
[90.20869446 262.08007812]
[90.20869446 277.08007812]
[104.74858093 281.14138794]
[117.65296173 288.97589111]
[127.96424103 300.00222778]
[134.91726685 313.40216064]
[137.99606323 328.18130493]
[136.97216797 343.24298096]
[131.92156982 357.46951294]
[123.21904755 369.80517578]
[111.51038361 379.33459473]
[97.66444397 385.35061646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 45]
[22 44]
[23 43]
[24 42]
[27 40]
[28 39]
[29 38]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[94 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[114 128]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
