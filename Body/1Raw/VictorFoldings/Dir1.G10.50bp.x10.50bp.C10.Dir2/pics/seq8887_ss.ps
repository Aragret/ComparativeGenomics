%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAACGCUGGGGGGGGGGCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCxxxxxxxxxxUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCCCCCCCCCCCAUAACACU\
) } def
/len { sequence length } bind def

/coor [
[101.20952606 536.17901611]
[87.98932648 528.90655518]
[77.10252380 518.45953369]
[69.29139709 505.55032349]
[65.08851624 491.05899048]
[64.78044128 475.97366333]
[68.38818359 461.32284546]
[75.66575623 448.10543823]
[86.11696625 437.22268677]
[99.02922821 429.41653442]
[113.52216339 425.21923828]
[113.21010590 410.22250366]
[112.89804840 395.22573853]
[112.58599091 380.22897339]
[112.27394104 365.23223877]
[111.96188354 350.23547363]
[111.64982605 335.23870850]
[111.33776855 320.24197388]
[111.02571106 305.24520874]
[110.71365356 290.24847412]
[110.40160370 275.25170898]
[110.08954620 260.25494385]
[95.92362213 255.49974060]
[84.21740723 246.16735840]
[76.39578247 233.36904907]
[73.41925812 218.63941956]
[75.66598511 203.75244141]
[82.88388824 190.50773621]
[94.21875763 180.51310730]
[108.31531525 174.98930359]
[108.00325775 159.99255371]
[107.69120026 144.99578857]
[97.20188904 155.71839905]
[83.10081482 160.83305359]
[68.17648315 159.32832336]
[55.38019180 151.50177002]
[47.24242783 138.90109253]
[45.37244034 124.01811981]
[50.14002609 109.79594421]
[60.60239029 99.04704285]
[74.69042206 93.89702606]
[63.39141846 84.03130341]
[52.09241104 74.16558075]
[36.60826111 70.91725159]
[32.11016464 56.71808243]
[20.81116104 46.85235977]
[7.69877386 54.42494583]
[-7.16243982 57.32719421]
[-22.16044807 55.24429321]
[-35.66837692 48.40217972]
[-46.22099304 37.54302979]
[-52.67361832 23.84477234]
[-54.32632828 8.79328442]
[-50.99984741 -5.97875786]
[-43.05500793 -18.86899567]
[-31.35360146 -28.47918892]
[-17.16491508 -33.76689911]
[-2.02802873 -34.15855789]
[12.41512108 -29.61167336]
[24.59784889 -20.61946106]
[33.19866562 -8.15733147]
[37.28461456 6.42291975]
[36.41248703 21.53973579]
[30.67688370 35.55335617]
[41.97588730 45.41907883]
[56.65185928 47.96174240]
[61.95813751 62.86657333]
[73.25714111 72.73229980]
[84.55614471 82.59802246]
[79.37021637 68.52300262]
[74.18428802 54.44798279]
[63.98101044 43.45283890]
[59.62427521 29.09948349]
[61.99431610 14.28790283]
[70.61228943 2.01066780]
[83.73699951 -5.25169992]
[98.71669769 -6.03189373]
[112.52484894 -0.17228085]
[122.37161255 11.14324760]
[126.26753235 25.62847519]
[123.42546844 40.35676956]
[114.41844177 52.35338974]
[110.72208405 66.89082336]
[107.02571869 81.42825317]
[117.23919678 70.44258881]
[127.45267487 59.45692444]
[121.09636688 45.64874268]
[120.51306152 30.45900345]
[125.79170990 16.20402908]
[136.12734985 5.05759764]
[149.94387817 -1.28053939]
[165.13438416 -1.84386230]
[179.38240051 3.45353174]
[190.51522827 13.80382824]
[196.83517456 27.62868309]
[197.37852478 42.81990433]
[192.06239319 57.06094360]
[181.69744873 68.18014526]
[167.86430359 74.48191071]
[152.67237854 75.00526428]
[138.43833923 69.67040253]
[128.22486877 80.65606689]
[118.01138306 91.64173126]
[124.64018250 105.09828949]
[131.26837158 118.55366516]
[146.20268250 117.15135956]
[161.13699341 115.74905396]
[176.07130432 114.34675598]
[191.00561523 112.94445038]
[206.21011353 105.44384003]
[217.62663269 117.97777557]
[208.74293518 132.41786194]
[192.40791321 127.87875366]
[177.47360229 129.28106689]
[162.53929138 130.68336487]
[147.60499573 132.08566284]
[132.67068481 133.48797607]
[122.68795776 144.68373108]
[123.00001526 159.68049622]
[123.31206512 174.67724609]
[137.62620544 179.60986328]
[149.36703491 189.12434387]
[157.12963867 202.05732727]
[159.99369812 216.83795166]
[157.63247681 231.67864990]
[150.35002136 244.79124451]
[139.04214478 254.60252380]
[125.08629608 259.94290161]
[125.39835358 274.93963623]
[125.71041107 289.93640137]
[126.02246857 304.93316650]
[126.33452606 319.92990112]
[126.64657593 334.92666626]
[126.95863342 349.92343140]
[127.27069092 364.92016602]
[127.58274841 379.91693115]
[127.89480591 394.91366577]
[128.20686340 409.91043091]
[128.51892090 424.90719604]
[143.17390442 428.49795532]
[156.39971924 435.76022339]
[167.29458618 446.19882202]
[175.11567688 459.10202026]
[179.32975769 473.59008789]
[179.64947510 488.67517090]
[176.05305481 503.32879639]
[168.78569031 516.55181885]
[158.34288025 527.44262695]
[145.43666077 535.25872803]
[130.94696045 539.46722412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[30 120]
[31 119]
[32 118]
[41 69]
[42 68]
[43 67]
[45 65]
[46 64]
[84 103]
[85 102]
[86 101]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
