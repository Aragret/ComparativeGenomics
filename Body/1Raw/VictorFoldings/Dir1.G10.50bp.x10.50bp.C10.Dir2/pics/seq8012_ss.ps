%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUACCCCCAUGGGGGGGGGGACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUxxxxxxxxxxAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCCCCCCCCCCCUAAUUCCCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[68.09663391 169.41380310]
[55.16831970 161.85644531]
[43.96268463 151.92224121]
[34.91030502 139.99290466]
[28.35902977 126.52680969]
[24.56059074 112.04141235]
[23.66094398 97.09332275]
[25.69466019 82.25692749]
[30.58359337 68.10231018]
[38.13988113 55.17337799]
[48.07317352 43.96693039]
[60.00178146 34.91357803]
[73.46733093 28.36119843]
[87.95241547 24.56157494]
[87.05249786 9.58859444]
[86.15258789 -5.38438606]
[85.25267029 -20.35736656]
[84.35275269 -35.33034897]
[83.45283508 -50.30332947]
[82.55292511 -65.27630615]
[81.65300751 -80.24929047]
[80.75308990 -95.22226715]
[79.85317230 -110.19525146]
[78.95326233 -125.16822815]
[63.94892502 -125.14846802]
[48.96928787 -126.00930023]
[34.06599426 -127.74777985]
[19.29041672 -130.35789490]
[4.69348574 -133.83067322]
[-9.67447567 -138.15411377]
[-23.76393890 -143.31332397]
[-37.52633667 -149.29052734]
[-50.91422272 -156.06510925]
[-63.88144684 -163.61372375]
[-76.38330841 -171.91033936]
[-88.37671661 -180.92636108]
[-99.82032013 -190.63072205]
[-110.67466736 -200.98994446]
[-120.90235138 -211.96832275]
[-130.46810913 -223.52803040]
[-139.33895874 -235.62921143]
[-147.48434448 -248.23013306]
[-154.87615967 -261.28738403]
[-161.48893738 -274.75592041]
[-167.29986572 -288.58932495]
[-172.28894043 -302.73992920]
[-176.43894958 -317.15896606]
[-179.73556519 -331.79666138]
[-182.16746521 -346.60263062]
[-183.72624207 -361.52578735]
[-184.40650940 -376.51470947]
[-184.20594788 -391.51773071]
[-183.12524414 -406.48309326]
[-181.16812134 -421.35925293]
[-178.34130859 -436.09490967]
[-174.65457153 -450.63928223]
[-170.12062073 -464.94219971]
[-164.75506592 -478.95437622]
[-158.57641602 -492.62753296]
[-151.60598755 -505.91448975]
[-143.86776733 -518.76947021]
[-135.38847351 -531.14819336]
[-126.19730377 -543.00787354]
[-116.32595825 -554.30773926]
[-105.80846405 -565.00878906]
[-94.68107605 -575.07421875]
[-82.98215485 -584.46917725]
[-70.75202179 -593.16137695]
[-58.03284836 -601.12084961]
[-44.86847305 -608.32012939]
[-31.30427933 -614.73443604]
[-17.38702393 -620.34161377]
[-3.16468263 -625.12231445]
[11.31371593 -629.06018066]
[25.99826050 -632.14147949]
[40.83833313 -634.35571289]
[55.78277206 -635.69519043]
[70.78006744 -636.15527344]
[85.77851105 -635.73443604]
[100.72640228 -634.43408203]
[115.57221985 -632.25872803]
[130.26478577 -629.21588135]
[144.75344849 -625.31597900]
[158.98825073 -620.57244873]
[172.92013550 -615.00170898]
[186.50106812 -608.62298584]
[199.68424988 -601.45819092]
[212.42422485 -593.53204346]
[224.67706299 -584.87188721]
[236.40054321 -575.50756836]
[247.55424500 -565.47131348]
[258.09970093 -554.79785156]
[268.00061035 -543.52386475]
[277.22277832 -531.68823242]
[285.73446655 -519.33178711]
[293.50628662 -506.49710083]
[300.51150513 -493.22842407]
[306.72592163 -479.57150269]
[312.12814331 -465.57342529]
[316.69952393 -451.28240967]
[320.42431641 -436.74774170]
[323.28967285 -422.01956177]
[325.28573608 -407.14855957]
[326.40563965 -392.18606567]
[326.64547729 -377.18362427]
[326.00442505 -362.19299316]
[324.48474121 -347.26580811]
[322.09161377 -332.45352173]
[318.83331299 -317.80722046]
[314.72106934 -303.37741089]
[309.76904297 -289.21377563]
[303.99435425 -275.36520386]
[297.41683960 -261.87939453]
[290.05923462 -248.80284119]
[281.94689941 -236.18063354]
[273.10772705 -224.05627441]
[263.57226562 -212.47157288]
[253.37336731 -201.46644592]
[242.54617310 -191.07884216]
[231.12800598 -181.34457397]
[219.15824890 -172.29718018]
[206.67814636 -163.96786499]
[193.73072815 -156.38533020]
[180.36062622 -149.57571411]
[166.61392212 -143.56251526]
[152.53800964 -138.36642456]
[138.18141174 -134.00538635]
[123.59362793 -130.49443054]
[108.82493591 -127.84563446]
[93.92623901 -126.06814575]
[94.82615662 -111.09516907]
[95.72607422 -96.12218475]
[96.62598419 -81.14920807]
[97.52590179 -66.17622375]
[98.42581940 -51.20324326]
[99.32573700 -36.23026276]
[100.22564697 -21.25728226]
[101.12556458 -6.28430176]
[102.02548218 8.68867874]
[102.92539978 23.66165924]
[117.76129913 25.69901466]
[131.91471863 30.59141922]
[144.84179688 38.15087891]
[156.04580688 48.08691788]
[165.09623718 60.01774216]
[171.64530945 73.48490143]
[175.44137573 87.97091675]
[176.33857727 102.91915894]
[174.30244446 117.75522614]
[169.41119385 131.90904236]
[161.85278320 144.83673096]
[151.91766357 156.04156494]
[139.98757935 165.09295654]
[126.52095032 171.64314270]
[112.03524780 175.44039917]
[97.08708191 176.33882141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
