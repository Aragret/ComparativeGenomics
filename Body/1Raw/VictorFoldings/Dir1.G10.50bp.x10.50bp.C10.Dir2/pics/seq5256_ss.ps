%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCUCAAGGGGGGGGGGUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAxxxxxxxxxxAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCCCCCCCCCCCUACUACUCAA\
) } def
/len { sequence length } bind def

/coor [
[104.93487549 553.81701660]
[92.37665558 545.46588135]
[82.29042816 534.25341797]
[75.31024170 520.88452148]
[71.87485504 506.19952393]
[72.20023346 491.12155151]
[76.26591492 476.59841919]
[83.81633759 463.54309082]
[94.37686157 452.77618408]
[107.28366089 444.97454834]
[121.72538757 440.62860107]
[121.10140991 425.64160156]
[120.47743225 410.65457153]
[119.85345459 395.66757202]
[119.22947693 380.68054199]
[118.60549927 365.69351196]
[117.98152161 350.70651245]
[117.35754395 335.71948242]
[116.73356628 320.73248291]
[116.10958862 305.74545288]
[98.98795319 301.99707031]
[83.55722809 293.65856934]
[71.02173615 281.37298584]
[62.36197662 266.09161377]
[58.25797272 249.00050354]
[59.03584290 231.42831421]
[64.64191437 214.74308777]
[74.64636230 200.24568176]
[88.27616119 189.06843567]
[104.47478485 182.08662415]
[102.29795074 167.24542236]
[100.12111664 152.40422058]
[97.94427490 137.56300354]
[95.76744080 122.72180176]
[93.59060669 107.88059998]
[89.37339020 100.94524384]
[91.52619171 92.70832825]
[89.65858459 77.82505035]
[87.79096985 62.94176865]
[85.45986176 48.12400818]
[82.66754150 33.38620377]
[79.87521362 18.64839745]
[77.08289337 3.91059113]
[74.29056549 -10.82721519]
[59.31405258 -9.73095417]
[44.31019592 -10.34906673]
[29.47460365 -12.67349529]
[15.00068760 -16.67393684]
[1.07714558 -22.29823494]
[-12.11450100 -29.47306824]
[-24.40227127 -38.10489655]
[-35.62596893 -48.08118439]
[-45.63927460 -59.27187729]
[-54.31163406 -71.53107452]
[-61.52999496 -84.69895172]
[-67.20024872 -98.60384369]
[-71.24846649 -113.06446838]
[-73.62187958 -127.89230347]
[-74.28954315 -142.89402771]
[-73.24275208 -157.87408447]
[-70.49514771 -172.63716125]
[-66.08255768 -186.99079895]
[-60.06251144 -200.74786377]
[-52.51348495 -213.72900391]
[-43.53390121 -225.76498413]
[-33.24082184 -236.69888306]
[-21.76844406 -246.38818359]
[-9.26633263 -254.70652771]
[4.10252428 -261.54550171]
[18.16383553 -266.81591797]
[32.73427963 -270.44906616]
[47.62390518 -272.39761353]
[62.63859558 -272.63613892]
[77.58259583 -271.16149902]
[92.26109314 -267.99298096]
[106.48271179 -263.17184448]
[120.06204987 -256.76098633]
[132.82206726 -248.84393311]
[144.59642029 -239.52392578]
[155.23159790 -228.92248535]
[164.58895874 -217.17779541]
[172.54649353 -204.44297791]
[179.00047302 -190.88407898]
[183.86674500 -176.67784119]
[187.08187866 -162.00949097]
[188.60395813 -147.07023621]
[188.41313171 -132.05487061]
[186.51190186 -117.15912628]
[182.92503357 -102.57721710]
[177.69931030 -88.49923706]
[170.90283203 -75.10872650]
[162.62423706 -62.58025360]
[152.97143555 -51.07715607]
[142.07028198 -40.74940109]
[130.06288147 -31.73163223]
[117.10578918 -24.14141273]
[103.36791992 -18.07769775]
[89.02837372 -13.61953926]
[91.82069397 1.11826658]
[94.61302185 15.85607243]
[97.40534210 30.59387779]
[100.19766998 45.33168411]
[102.95473480 47.62647629]
[104.70701599 51.39890289]
[104.75946808 56.14754868]
[102.67424774 61.07415390]
[104.54186249 75.95743561]
[106.40947723 90.84071350]
[108.43180847 105.70375824]
[110.60864258 120.54496765]
[112.78548431 135.38616943]
[114.96231842 150.22737122]
[117.13916016 165.06858826]
[119.31599426 179.90979004]
[131.93481445 180.86810303]
[144.10437012 184.31840515]
[155.33784485 190.12019348]
[165.18638611 198.03900146]
[173.25701904 207.75579834]
[179.22827148 218.87985229]
[182.86309814 230.96447754]
[184.01814270 243.52497864]
[182.64952087 256.05798340]
[178.81442261 268.06182861]
[172.66868591 279.05633545]
[164.46057129 288.60235596]
[154.52062988 296.31906128]
[143.24845886 301.89923096]
[131.09660339 305.12149048]
[131.72058105 320.10848999]
[132.34455872 335.09552002]
[132.96853638 350.08251953]
[133.59251404 365.06954956]
[134.21649170 380.05654907]
[134.84046936 395.04357910]
[135.46444702 410.03060913]
[136.08842468 425.01760864]
[136.71240234 440.00463867]
[151.46540833 443.13507080]
[164.97604370 449.83682251]
[176.39501953 459.68862915]
[185.00453186 472.07113647]
[190.26338196 486.20605469]
[191.84098816 501.20477295]
[189.63818359 516.12451172]
[183.79344177 530.02740479]
[174.67416382 542.03942871]
[162.85359192 551.40557861]
[149.07478333 557.53710938]
[134.20387268 560.04846191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[30 114]
[31 113]
[32 112]
[33 111]
[34 110]
[35 109]
[37 108]
[38 107]
[39 106]
[40 102]
[41 101]
[42 100]
[43 99]
[44 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
