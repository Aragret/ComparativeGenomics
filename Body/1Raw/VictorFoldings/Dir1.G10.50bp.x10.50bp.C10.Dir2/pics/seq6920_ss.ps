%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUCAUCGGGGGGGGGGGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAxxxxxxxxxxUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCCCCCCCCCCCAUAUUCAUCG\
) } def
/len { sequence length } bind def

/coor [
[104.65979767 604.56951904]
[91.44157410 597.29345703]
[80.55761719 586.84350586]
[72.75000000 573.93212891]
[68.55105591 559.43963623]
[68.24708557 544.35424805]
[71.85881042 529.70440674]
[79.13997650 516.48895264]
[89.59414673 505.60906982]
[102.50852966 497.80642700]
[117.00260925 493.61306763]
[116.69463348 478.61624146]
[116.38665009 463.61941528]
[116.07867432 448.62255859]
[115.77069855 433.62573242]
[115.46272278 418.62887573]
[115.15473938 403.63204956]
[114.84676361 388.63522339]
[114.53878784 373.63836670]
[114.23081207 358.64154053]
[97.56894684 355.53848267]
[81.97293854 348.88888550]
[68.18815613 339.00762939]
[56.87403870 326.36422729]
[48.57253265 311.56027222]
[43.68213654 295.30105591]
[42.43877792 278.36181641]
[44.90443420 261.55075073]
[50.96403503 245.67062378]
[60.33085632 231.48023987]
[72.56005096 219.65830994]
[87.06980133 210.77096558]
[103.16899109 205.24459839]
[101.32566833 190.35829163]
[99.48234558 175.47198486]
[97.63902283 160.58567810]
[95.79569244 145.69937134]
[93.19411469 143.23381042]
[91.68799591 139.36067200]
[91.93704224 134.62319946]
[94.32643127 129.84344482]
[93.40301514 114.87189484]
[85.13565826 106.61398315]
[84.53608704 94.94423676]
[91.91358948 85.88251495]
[91.29776001 70.89516449]
[90.68193817 55.90780640]
[88.22901154 41.10972977]
[83.97616577 26.72524834]
[79.72331238 12.34076691]
[75.32301331 -1.99929452]
[70.77572632 -16.29342461]
[66.22843933 -30.58755493]
[51.28637314 -28.81802750]
[36.27946472 -29.90855217]
[21.75020409 -33.81970215]
[8.22381592 -40.41009903]
[-3.81073165 -49.44149780]
[-13.91839600 -60.58742142]
[-21.73379326 -73.44495392]
[-26.97439957 -87.54929352]
[-29.45077133 -102.39059448]
[-29.07338905 -117.43233490]
[-25.85589409 -132.13078308]
[-19.91459846 -145.95457458]
[-11.46427631 -158.40402222]
[-0.81039953 -169.02905273]
[11.66189957 -177.44560242]
[25.50175476 -183.34941101]
[40.20886612 -186.52705383]
[55.25157928 -186.86366272]
[70.08610535 -184.34706116]
[84.17619324 -179.06825256]
[97.01249695 -171.21803284]
[108.13098145 -161.08018494]
[117.12972260 -149.02120972]
[123.68342590 -135.47700500]
[127.55518341 -120.93719482]
[128.60502625 -105.92738342]
[126.79500580 -90.99017334]
[122.19055176 -76.66552734]
[114.95810699 -63.47127151]
[105.35913086 -51.88437653]
[93.74061584 -42.32369614]
[80.52256775 -35.13484573]
[85.06985474 -20.84071541]
[89.61714935 -6.54658461]
[94.67311859 -1.09228730]
[94.10779572 8.08792019]
[98.36064148 22.47240067]
[102.61348724 36.85688400]
[107.50328827 22.67626572]
[117.97682953 11.93825054]
[132.03111267 6.69640493]
[146.97837830 7.95319653]
[159.96003723 15.46827221]
[168.49346924 27.80442619]
[170.94668579 42.60245514]
[166.85054016 57.03234482]
[156.98840332 68.33447266]
[143.24632263 74.34739685]
[128.25238037 73.92117310]
[114.87406158 67.13732910]
[105.66928864 55.29198074]
[106.28511810 70.27933502]
[106.90093994 85.26668549]
[116.24797058 99.16520691]
[108.37456512 113.94847870]
[109.29798126 128.92002869]
[110.68200684 143.85604858]
[112.52532959 158.74235535]
[114.36865234 173.62866211]
[116.21197510 188.51496887]
[118.05529785 203.40127563]
[131.22337341 204.18518066]
[144.06718445 207.17842102]
[156.21885681 212.29409790]
[167.33053589 219.38449097]
[177.08438110 228.24543762]
[185.20158386 238.62210083]
[191.45037842 250.21636963]
[195.65269470 262.69537354]
[197.68916321 275.70104980]
[197.50254822 288.86050415]
[195.09934998 301.79653931]
[190.54956055 314.13858032]
[183.98469543 325.53329468]
[175.59388733 335.65466309]
[165.61851501 344.21328735]
[154.34526062 350.96478271]
[142.09782410 355.71658325]
[129.22764587 358.33355713]
[129.53562927 373.33038330]
[129.84359741 388.32723999]
[130.15158081 403.32406616]
[130.45956421 418.32092285]
[130.76753235 433.31774902]
[131.07551575 448.31457520]
[131.38348389 463.31143188]
[131.69146729 478.30825806]
[131.99945068 493.30511475]
[146.65345764 496.89984131]
[159.87728882 504.16571045]
[170.76931763 514.60723877]
[178.58691406 527.51257324]
[182.79704285 542.00183105]
[183.11265564 557.08697510]
[179.51225281 571.73962402]
[172.24128723 584.96063232]
[161.79553223 595.84863281]
[148.88717651 603.66125488]
[134.39633179 607.86578369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[41 109]
[42 108]
[45 106]
[46 105]
[47 104]
[48 91]
[49 90]
[50 89]
[51 87]
[52 86]
[53 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
