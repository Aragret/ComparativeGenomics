%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCAAAAGGGGGGGGGGCCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAxxxxxxxxxxAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCCCCCCCCCCCUACUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[72.21801758 360.24526978]
[58.99781799 352.97280884]
[48.11101532 342.52581787]
[40.29988480 329.61654663]
[36.09700394 315.12524414]
[35.78892899 300.03991699]
[39.39667130 285.38906860]
[46.67424393 272.17169189]
[57.12545395 261.28890991]
[70.03771210 253.48277283]
[84.53064728 249.28549194]
[84.21859741 234.28874207]
[83.90653992 219.29199219]
[83.59448242 204.29522705]
[83.28242493 189.29847717]
[82.97036743 174.30172729]
[82.65830994 159.30497742]
[82.34626007 144.30821228]
[82.03420258 129.31146240]
[71.26338959 118.87165070]
[56.26420593 119.02768707]
[41.26501465 119.18372345]
[26.26582718 119.33975983]
[23.29422569 134.09994507]
[17.31838036 147.91961670]
[8.59953213 160.19459534]
[-2.48117018 170.38830566]
[-15.43932438 178.05511475]
[-29.70845795 182.85986328]
[-44.66478348 184.59249878]
[-59.65447235 183.17727661]
[-74.02224731 178.67608643]
[-87.14000702 171.28567505]
[-98.43429565 161.32913208]
[-107.41137695 149.24171448]
[-113.67881775 135.55183411]
[-116.96262360 120.85794067]
[-117.11924744 105.80240631]
[-114.14183807 91.04338837]
[-108.16055298 77.22608185]
[-99.43688202 64.95452118]
[-88.35216522 54.76517105]
[-75.39099884 47.10346222]
[-61.11997604 42.30433273]
[-46.16297150 40.57758331]
[-31.17383575 41.99869537]
[-16.80783463 46.50554657]
[-3.69298649 53.90111542]
[7.59738493 63.86209869]
[16.56971169 75.95304871]
[22.83176422 89.64539337]
[26.10979080 104.34056854]
[41.10897827 104.18453217]
[56.10816574 104.02849579]
[71.10735321 103.87245941]
[82.38426971 75.58524323]
[113.62215424 72.08459473]
[118.52370453 57.90803528]
[123.42525482 43.73147583]
[128.32681274 29.55491829]
[125.52374268 13.98400307]
[136.99517822 4.48372698]
[141.89672852 -9.69283104]
[134.32609558 -10.56656933]
[126.65141296 -14.58298683]
[120.01579285 -21.77135277]
[115.54807281 -31.77796936]
[114.24180603 -43.88139343]
[115.17742920 -58.85218811]
[116.11306000 -73.82297516]
[102.59471893 -80.83542633]
[93.10240173 -92.74406433]
[89.28070068 -107.48565674]
[91.79174805 -122.50612640]
[100.20049286 -135.20309448]
[113.05007172 -143.37672424]
[128.11421204 -145.61088562]
[142.78297424 -141.51850891]
[154.51487732 -131.80860901]
[161.27732849 -118.16349030]
[161.89868164 -102.94725800]
[156.27127075 -88.79620361]
[145.37010193 -78.16209412]
[131.08384705 -72.88735199]
[130.14822388 -57.91655731]
[129.21260071 -42.94576645]
[135.83389282 -39.42319870]
[138.44221497 -54.19467926]
[153.29676819 -56.27847290]
[159.86871338 -42.79479599]
[149.07647705 -32.37806320]
[155.69776917 -28.85549736]
[167.59014893 -37.99723053]
[167.03590393 -53.50440598]
[175.73031616 -66.35691071]
[190.33018494 -71.61270142]
[205.22158813 -67.25080872]
[214.67845154 -54.94847870]
[215.06442261 -39.43620300]
[206.23110962 -26.67877197]
[191.57507324 -21.58167458]
[176.73187256 -26.10485077]
[164.83949280 -16.96311760]
[156.07328796 -4.79128027]
[151.17173767 9.38527775]
[154.32540894 23.94219017]
[142.50337219 34.45646667]
[137.60182190 48.63302612]
[132.70027161 62.80958557]
[127.79871368 76.98614502]
[138.89683533 66.89497375]
[146.75743103 54.11956024]
[160.16253662 47.38881302]
[175.10375977 48.71535873]
[187.11337280 57.70253372]
[192.60023499 71.66298676]
[189.92367554 86.42225647]
[179.88403320 97.56701660]
[165.48336792 101.76474762]
[151.02833557 97.76058197]
[136.02926636 97.92672729]
[149.27185059 104.97186279]
[164.97331238 101.67887878]
[177.24525452 112.01226044]
[176.67370605 128.04513550]
[163.69709778 137.47843933]
[148.26997375 133.07575989]
[142.22671509 118.21444702]
[128.98413086 111.16931152]
[115.74836731 125.65897369]
[97.03095245 128.99940491]
[97.34300995 143.99615479]
[97.65506744 158.99291992]
[97.96712494 173.98966980]
[98.27918243 188.98641968]
[98.59123230 203.98316956]
[98.90328979 218.97993469]
[99.21534729 233.97668457]
[99.52740479 248.97343445]
[114.18239594 252.56420898]
[127.40820312 259.82647705]
[138.30307007 270.26504517]
[146.12417603 283.16827393]
[150.33824158 297.65634155]
[150.65795898 312.74142456]
[147.06153870 327.39505005]
[139.79417419 340.61804199]
[129.35137939 351.50888062]
[116.44514465 359.32498169]
[101.95545197 363.53347778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 55]
[21 54]
[22 53]
[23 52]
[57 110]
[58 109]
[59 108]
[60 107]
[62 105]
[63 104]
[68 86]
[69 85]
[70 84]
[92 103]
[93 102]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
