%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAACCCCGGGGGGGGGGAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUxxxxxxxxxxGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUACCCCCCCCCCAACCAAACCAC\
) } def
/len { sequence length } bind def

/coor [
[96.63112640 650.37139893]
[82.60918427 644.81842041]
[70.40922546 635.95208740]
[60.79815292 624.32977295]
[54.38012695 610.68206787]
[51.55858994 595.86688232]
[52.51090622 580.81549072]
[57.17721176 566.47406006]
[65.26417542 553.74407959]
[76.26345062 543.42584229]
[89.48361206 536.16784668]
[104.09362030 532.42639160]
[104.09362030 517.42639160]
[104.09362030 502.42642212]
[104.09362030 487.42642212]
[104.09362030 472.42642212]
[104.09362030 457.42642212]
[104.09362030 442.42642212]
[104.09362030 427.42642212]
[104.09362030 412.42642212]
[104.09362030 397.42642212]
[95.74596405 388.61853027]
[95.65976715 376.08203125]
[104.42924500 366.56887817]
[104.73722076 351.57205200]
[105.04520416 336.57522583]
[105.35317993 321.57836914]
[96.06566620 306.71948242]
[105.64802551 291.02844238]
[105.64802551 276.02844238]
[89.48440552 269.00466919]
[77.95235443 255.60827637]
[73.38389587 238.47808838]
[76.73333740 221.01490784]
[87.37836456 206.70625305]
[103.23506165 198.42988586]
[102.31164551 183.45834351]
[100.92761993 168.52232361]
[99.08429718 153.63601685]
[97.24097443 138.74971008]
[95.39765167 123.86340332]
[71.98297882 110.55569458]
[71.88761139 78.19771576]
[60.69931793 68.20661926]
[49.51102066 58.21552277]
[38.32272339 48.22442245]
[26.93165016 38.46514893]
[15.34260178 28.94181252]
[3.75355363 19.41847420]
[-7.83549500 9.89513683]
[-22.48744965 14.72460365]
[-37.41873550 10.84384251]
[-47.86483002 -0.50880724]
[-50.49242020 -15.71075726]
[-44.46305847 -29.91112137]
[-31.70068741 -38.57861328]
[-16.27773476 -38.94747162]
[-3.11560750 -30.89998817]
[3.58570671 -17.00409317]
[1.68784273 -1.69391108]
[13.27689075 7.82942629]
[24.86594009 17.35276413]
[36.45498657 26.87610054]
[41.26842880 27.30036736]
[45.84939194 30.79359627]
[48.31381989 37.03612900]
[59.50211716 47.02722549]
[70.69041443 57.01832199]
[81.87870789 67.00942230]
[89.34671783 66.31740570]
[84.31804657 52.18544006]
[79.28938293 38.05347061]
[69.64377594 26.56598854]
[68.49736023 11.60986137]
[76.27949524 -1.21349168]
[90.07559204 -7.10142612]
[104.71868134 -3.84877324]
[114.72460175 7.32627249]
[116.34588623 22.23839569]
[108.97533417 35.30266190]
[106.62902832 50.11802292]
[104.28273010 64.93338013]
[111.75074005 64.24137115]
[120.91267395 52.36454391]
[130.07460022 40.48772049]
[138.74121094 28.24476624]
[146.89787292 15.65632725]
[155.05455017 3.06788826]
[155.35516357 -13.32850361]
[169.83418274 -21.02850342]
[183.59683228 -12.11101341]
[182.48527527 4.25041914]
[167.64299011 11.22455406]
[159.48631287 23.81299400]
[151.32965088 36.40143204]
[151.82759094 39.21977997]
[151.20393372 42.41043854]
[149.30905151 45.53392410]
[146.15991211 48.10422516]
[141.95143127 49.64965439]
[132.78948975 61.52647781]
[123.62756348 73.40330505]
[130.77320862 88.77154541]
[129.62658691 104.31755066]
[121.76535797 116.18138123]
[110.28395844 122.02008057]
[112.12728119 136.90638733]
[113.97060394 151.79269409]
[115.81392670 166.67900085]
[119.04090881 170.93832397]
[120.15621948 175.54936218]
[119.38743591 179.63331604]
[117.28319550 182.53492737]
[118.20661163 197.50648499]
[130.21432495 201.08253479]
[140.51184082 208.17622375]
[148.10220337 218.08238220]
[152.25628662 229.82450867]
[152.58273315 242.25094604]
[149.06481934 254.14788818]
[142.06056213 264.35797119]
[132.26643372 271.89273071]
[120.64802551 276.02844238]
[120.64802551 291.02844238]
[129.22033691 300.71963501]
[128.87675476 313.25170898]
[120.35001373 321.88635254]
[120.04203796 336.88317871]
[119.73406219 351.88003540]
[119.42608643 366.87686157]
[128.68426514 382.76135254]
[119.09362030 397.42642212]
[119.09362030 412.42642212]
[119.09362030 427.42642212]
[119.09362030 442.42642212]
[119.09362030 457.42642212]
[119.09362030 472.42642212]
[119.09362030 487.42642212]
[119.09362030 502.42642212]
[119.09362030 517.42639160]
[119.09362030 532.42639160]
[133.70364380 536.16784668]
[146.92379761 543.42584229]
[157.92306519 553.74407959]
[166.01004028 566.47406006]
[170.67634583 580.81549072]
[171.62866211 595.86688232]
[168.80711365 610.68206787]
[162.38909912 624.32977295]
[152.77803040 635.95208740]
[140.57806396 644.81842041]
[126.55612183 650.37139893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 130]
[25 129]
[26 128]
[27 127]
[29 124]
[30 123]
[36 114]
[37 113]
[38 109]
[39 108]
[40 107]
[41 106]
[43 69]
[44 68]
[45 67]
[46 66]
[47 63]
[48 62]
[49 61]
[50 60]
[83 102]
[84 101]
[85 100]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
