%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCCCACGGGGGGGGGGGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCxxxxxxxxxxCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAACCCCCCCCCCACACCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[78.73625183 389.60662842]
[64.89031219 383.59060669]
[53.18165207 374.06118774]
[44.47912979 361.72552490]
[39.42852783 347.49899292]
[38.40463638 332.43731689]
[41.48343658 317.65817261]
[48.43645477 304.25823975]
[58.74774170 293.23190308]
[71.65212250 285.39739990]
[86.19200897 281.33609009]
[86.19200897 266.33609009]
[86.19200897 251.33607483]
[86.19200897 236.33607483]
[86.19200897 221.33607483]
[86.19200897 206.33607483]
[86.19200897 191.33607483]
[86.19200897 176.33607483]
[86.19200897 161.33607483]
[86.19200897 146.33607483]
[84.05744171 96.67310333]
[71.79507446 88.03398895]
[59.53270721 79.39487457]
[47.07869339 90.98852539]
[32.41036987 99.59948730]
[16.22847366 104.81945801]
[-0.69460642 106.40204620]
[-17.55171013 104.27442169]
[-33.53939819 98.54064941]
[-47.89624405 89.47660065]
[-59.93910217 77.51669312]
[-69.09560394 63.23307419]
[-74.93138885 47.30821609]
[-77.17066193 30.50235558]
[-75.70927429 13.61716461]
[-70.61952972 -2.54247379]
[-83.71268463 -9.86157990]
[-96.80583954 -17.18068504]
[-109.89899445 -24.49979019]
[-125.72018433 -24.47974014]
[-133.05418396 -37.44360352]
[-146.14733887 -44.76270676]
[-159.24049377 -52.08181381]
[-172.33364868 -59.40091705]
[-188.15484619 -59.38086700]
[-195.48884583 -72.34472656]
[-210.04255676 -66.62429047]
[-224.85185242 -71.64611816]
[-232.92424011 -85.03904724]
[-230.44818115 -100.47935486]
[-218.59278870 -110.67659760]
[-202.95582581 -110.81594849]
[-190.92057800 -100.83161163]
[-188.16973877 -85.43788147]
[-173.28504944 -85.98144531]
[-165.01454163 -72.49407196]
[-151.92138672 -65.17496490]
[-138.82823181 -57.85586166]
[-125.73507690 -50.53675461]
[-110.85039520 -51.08031845]
[-102.57988739 -37.59294510]
[-89.48673248 -30.27383995]
[-76.39357758 -22.95473480]
[-63.30042267 -15.63562870]
[-54.93751526 -25.77193832]
[-44.98131561 -34.35369492]
[-33.71669769 -41.13383484]
[-21.46622276 -45.91686249]
[-8.58091927 -48.56449509]
[4.56979132 -48.99964905]
[17.60868073 -47.20869446]
[30.16152954 -43.24187088]
[41.86788177 -37.21188354]
[52.39137268 -29.29070282]
[61.42941666 -19.70464897]
[68.72189331 -8.72793961]
[74.05863953 3.32516026]
[77.28550720 16.10933685]
[78.30880737 29.25811768]
[77.09804535 42.39438248]
[73.68679810 55.14117050]
[68.17182159 67.13250732]
[80.43418884 75.77162170]
[92.69655609 84.41073608]
[107.68357849 83.78675842]
[119.18537903 74.15823364]
[130.68717957 64.52970886]
[142.18898010 54.90118027]
[144.11817932 42.10539627]
[153.95065308 34.32456970]
[166.04653931 35.32310104]
[177.74615479 25.93593979]
[189.44578552 16.54877853]
[201.14540100 7.16161585]
[204.31652832 -8.56490707]
[218.65440369 -15.76246643]
[233.16024780 -8.90970993]
[236.70640564 6.73651361]
[226.57258606 19.17376137]
[210.53257751 18.86123848]
[198.83294678 28.24840164]
[187.13331604 37.63556290]
[175.43370056 47.02272415]
[169.99896240 63.67996216]
[151.81750488 66.40298462]
[140.31570435 76.03150940]
[128.81390381 85.66003418]
[117.31210327 95.28856659]
[118.16844940 102.73951721]
[132.87838745 99.80394745]
[147.58833313 96.86837769]
[160.65681458 89.50531006]
[174.01919556 96.32048798]
[175.73193359 111.22238922]
[164.26414490 120.89140320]
[149.86589050 116.68511963]
[134.87351990 117.16326904]
[119.88113403 117.64141846]
[120.73748016 125.09236908]
[134.12376404 131.86048889]
[147.51005554 138.62860107]
[160.89633179 145.39671326]
[177.23132324 143.94758606]
[186.43107605 157.52317810]
[179.03164673 172.15809631]
[162.64495850 172.79718018]
[154.12821960 158.78298950]
[140.74194336 152.01487732]
[127.35565186 145.24676514]
[113.96936798 138.47865295]
[101.19200897 146.33607483]
[101.19200897 161.33607483]
[101.19200897 176.33607483]
[101.19200897 191.33607483]
[101.19200897 206.33607483]
[101.19200897 221.33607483]
[101.19200897 236.33607483]
[101.19200897 251.33607483]
[101.19200897 266.33609009]
[101.19200897 281.33609009]
[115.73189545 285.39739990]
[128.63627625 293.23190308]
[138.94755554 304.25823975]
[145.90058899 317.65817261]
[148.97938538 332.43731689]
[147.95549011 347.49899292]
[142.90489197 361.72552490]
[134.20236206 374.06118774]
[122.49370575 383.59060669]
[108.64776611 389.60662842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 84]
[22 83]
[23 82]
[36 64]
[37 63]
[38 62]
[39 61]
[41 59]
[42 58]
[43 57]
[44 56]
[46 54]
[85 108]
[86 107]
[87 106]
[88 105]
[91 103]
[92 102]
[93 101]
[94 100]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
