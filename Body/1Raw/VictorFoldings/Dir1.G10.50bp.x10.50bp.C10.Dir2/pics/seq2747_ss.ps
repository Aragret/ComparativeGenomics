%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCAGUGGGGGGGGGGAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUACCCxxxxxxxxxxUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACCCCCCCCCCCUUCACCAGU\
) } def
/len { sequence length } bind def

/coor [
[57.39149094 499.31466675]
[43.54555130 493.29864502]
[31.83689117 483.76922607]
[23.13436699 471.43356323]
[18.08376503 457.20703125]
[17.05987358 442.14535522]
[20.13867188 427.36621094]
[27.09169388 413.96627808]
[37.40297699 402.93994141]
[50.30735779 395.10543823]
[64.84724426 391.04412842]
[64.84724426 376.04412842]
[64.84724426 361.04412842]
[64.84724426 346.04412842]
[64.84724426 331.04412842]
[64.84724426 316.04412842]
[64.84724426 301.04412842]
[64.84724426 286.04412842]
[64.84724426 271.04412842]
[64.84724426 256.04412842]
[55.25613785 241.38088989]
[64.51039124 225.49571228]
[64.19834137 210.49896240]
[63.88628387 195.50221252]
[63.57422638 180.50544739]
[58.63518143 184.37332153]
[53.32887268 187.77513123]
[38.62091064 190.72061157]
[23.91295052 193.66609192]
[9.20498848 196.61157227]
[-0.85148418 209.11145020]
[-16.89312363 208.89845276]
[-26.61415672 196.13595581]
[-22.55743790 180.61427307]
[-7.83493614 174.24031067]
[6.25950623 181.90361023]
[20.96746826 178.95812988]
[35.67543030 176.01264954]
[50.38339233 173.06716919]
[35.44296646 171.73159790]
[23.83447647 162.23197937]
[19.56949425 147.85108948]
[24.12188148 133.55857849]
[35.91845703 124.29354858]
[50.88265228 123.25773621]
[63.84325027 130.80908203]
[70.32142639 144.33805847]
[68.07835388 159.16973877]
[74.42548370 145.57879639]
[80.77261353 131.98783875]
[87.11973572 118.39688873]
[93.46686554 104.80593872]
[89.25426483 103.69555664]
[85.38935089 100.41269684]
[82.80077362 95.15171051]
[82.30590057 88.46395111]
[84.48335266 81.20101166]
[82.61573792 66.31773376]
[73.22042084 53.58829498]
[79.31287384 39.99670410]
[77.44525909 25.11342621]
[62.49662781 23.06382370]
[48.58821487 17.21417618]
[36.66831207 7.96332026]
[27.54964066 -4.05800486]
[21.85392761 -18.03016663]
[19.96951675 -33.00051498]
[22.02489090 -47.94835281]
[27.87990761 -61.85451126]
[37.13536453 -73.77084351]
[49.16020966 -82.88486481]
[63.13457108 -88.57518768]
[78.10564423 -90.45381927]
[93.05268860 -88.39266968]
[106.95658875 -82.53228760]
[118.86933899 -73.27222443]
[127.97872162 -61.24386215]
[133.66365051 -47.26730728]
[135.53649902 -32.29550552]
[133.46957397 -17.34926033]
[127.60382843 -3.44762945]
[118.33916473 8.46154976]
[106.30728912 17.56628799]
[92.32853699 23.24581337]
[94.19615173 38.12909317]
[103.45788574 49.79397583]
[97.49901581 64.45011902]
[99.36663055 79.33339691]
[112.30468750 86.92330933]
[126.20724487 81.29135132]
[139.98962402 75.37138367]
[153.64587402 69.16597748]
[167.30210876 62.96057129]
[180.95834351 56.75516510]
[194.61459351 50.54975891]
[208.27082825 44.34434891]
[221.92707825 38.13894272]
[222.73249817 22.85464096]
[230.55859375 9.70128727]
[243.60699463 1.70142412]
[258.87927246 0.69336289]
[272.86596680 6.90874863]
[282.35302734 18.91933060]
[285.16043091 33.96516800]
[280.64300537 48.58883286]
[269.83886719 59.42991638]
[255.23071289 63.99721527]
[240.17536926 61.24120331]
[228.13247681 51.79518509]
[214.47624207 58.00059128]
[200.81999207 64.20600128]
[187.16375732 70.41140747]
[173.50752258 76.61681366]
[159.85127258 82.82221985]
[146.19503784 89.02762604]
[143.69195557 93.16407013]
[138.53340149 95.73713684]
[131.83920288 95.19390869]
[117.93664551 100.82585907]
[107.05782318 111.15306854]
[100.71069336 124.74401855]
[94.36356354 138.33497620]
[88.01643372 151.92591858]
[81.66930389 165.51687622]
[78.57097626 180.19338989]
[78.88303375 195.19015503]
[79.19509125 210.18690491]
[79.50714874 225.18365479]
[88.28022766 234.69612122]
[88.19580841 247.23452759]
[79.84724426 256.04412842]
[79.84724426 271.04412842]
[79.84724426 286.04412842]
[79.84724426 301.04412842]
[79.84724426 316.04412842]
[79.84724426 331.04412842]
[79.84724426 346.04412842]
[79.84724426 361.04412842]
[79.84724426 376.04412842]
[79.84724426 391.04412842]
[94.38713074 395.10543823]
[107.29151154 402.93994141]
[117.60279846 413.96627808]
[124.55581665 427.36621094]
[127.63462067 442.14535522]
[126.61072540 457.20703125]
[121.56012726 471.43356323]
[112.85760498 483.76922607]
[101.14894104 493.29864502]
[87.30300140 499.31466675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[24 126]
[25 125]
[27 39]
[28 38]
[29 37]
[30 36]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
[57 88]
[58 87]
[60 85]
[61 84]
[89 119]
[90 118]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
