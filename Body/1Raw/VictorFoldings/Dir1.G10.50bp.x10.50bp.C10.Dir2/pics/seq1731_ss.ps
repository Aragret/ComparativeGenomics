%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAACUAAAACGGGGGGGGGGCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGxxxxxxxxxxCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGCCCCCCCCCCUUUAACCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[66.42729950 626.14288330]
[52.26669693 620.98785400]
[39.67694855 612.70562744]
[29.33701324 601.74285889]
[21.80450058 588.69073486]
[17.48563576 574.25317383]
[16.61332703 559.20867920]
[19.23461723 544.36871338]
[25.20814514 530.53344727]
[34.21176147 518.44909668]
[45.75991821 508.76733398]
[59.22983551 502.01025391]
[73.89509583 498.54226685]
[73.89509583 483.54226685]
[73.89509583 468.54226685]
[73.89509583 453.54226685]
[73.89509583 438.54226685]
[73.89509583 423.54226685]
[73.89509583 408.54226685]
[73.89509583 393.54226685]
[73.89509583 378.54226685]
[73.89509583 363.54226685]
[73.89509583 348.54226685]
[63.21422195 338.22460938]
[63.00054169 323.01248169]
[73.89509583 311.87933350]
[71.94779968 309.78573608]
[70.73788452 306.77221680]
[70.62853241 303.12521362]
[71.86900330 299.26016235]
[74.55224609 295.67691040]
[75.76702118 280.72616577]
[76.98178864 265.77542114]
[78.19655609 250.82470703]
[79.41132355 235.87397766]
[80.62609100 220.92324829]
[81.84085846 205.97251892]
[79.23257446 199.01000977]
[83.23477173 190.73210144]
[84.75229645 175.80906677]
[86.26982117 160.88603210]
[87.78734589 145.96298218]
[89.30487061 131.03994751]
[90.82239532 116.11690521]
[78.80467224 107.67440796]
[75.14872742 90.69245148]
[61.68166351 84.08654022]
[46.09696579 87.89400482]
[33.49189377 77.96970367]
[33.53598022 61.92671204]
[46.19540405 52.07183456]
[61.75894165 55.96489716]
[68.28757477 70.61946869]
[81.75464630 77.22537994]
[95.47835541 71.17065430]
[99.67781830 56.77050018]
[103.87728119 42.37034225]
[100.31294250 26.95586586]
[111.30401611 16.90371895]
[115.50347900 2.50356221]
[119.70294189 -11.89659500]
[123.90239716 -26.29675102]
[128.10186768 -40.69690704]
[132.30133057 -55.09706497]
[136.20808411 -69.57937622]
[139.82051086 -84.13788605]
[143.43295288 -98.69640350]
[147.04539490 -113.25491333]
[133.42466736 -119.65507507]
[121.31445312 -128.58978271]
[111.18022919 -139.71559143]
[103.41153717 -152.60487366]
[98.30697632 -166.76220703]
[96.06275177 -181.64338684]
[96.76513672 -196.67645264]
[100.38711548 -211.28355408]
[106.78948975 -224.90324402]
[115.72615051 -237.01200867]
[126.85360718 -247.14442444]
[139.74414062 -254.91104126]
[153.90229797 -260.01330566]
[168.78384399 -262.25512695]
[183.81678772 -261.55029297]
[198.42330933 -257.92596436]
[212.04196167 -251.52137756]
[224.14927673 -242.58274841]
[234.27989197 -231.45365906]
[242.04441833 -218.56185913]
[247.14439392 -204.40289307]
[249.38380432 -189.52098083]
[248.67655945 -174.48814392]
[245.04983521 -159.88221741]
[238.64306641 -146.26460266]
[229.70248413 -134.15872192]
[218.57174683 -124.02990723]
[205.67869568 -116.26747894]
[191.51889038 -111.16979218]
[176.63661194 -108.93279266]
[161.60389709 -109.64247894]
[157.99147034 -95.08396149]
[154.37902832 -80.52545166]
[150.76658630 -65.96693420]
[152.45240784 -61.44127274]
[151.27114868 -55.80653381]
[146.70147705 -50.89760208]
[142.50201416 -36.49744797]
[138.30255127 -22.09729004]
[134.10308838 -7.69713259]
[129.90362549 6.70302439]
[125.70417023 21.10318184]
[129.56887817 35.48766327]
[118.27743530 46.56980515]
[114.07797241 60.96996307]
[109.87851715 75.37011719]
[122.52947998 100.74908447]
[105.74542999 117.63442993]
[104.22790527 132.55746460]
[102.71038055 147.48051453]
[101.19285583 162.40354919]
[99.67533112 177.32658386]
[98.15780640 192.24963379]
[96.79158783 207.18728638]
[95.57682037 222.13801575]
[94.36205292 237.08874512]
[93.14728546 252.03947449]
[91.93251801 266.99020386]
[90.71775055 281.94094849]
[89.50298309 296.89166260]
[88.89509583 311.87933350]
[99.78964996 323.01248169]
[99.57596588 338.22460938]
[88.89509583 348.54226685]
[88.89509583 363.54226685]
[88.89509583 378.54226685]
[88.89509583 393.54226685]
[88.89509583 408.54226685]
[88.89509583 423.54226685]
[88.89509583 438.54226685]
[88.89509583 453.54226685]
[88.89509583 468.54226685]
[88.89509583 483.54226685]
[88.89509583 498.54226685]
[103.56035614 502.01025391]
[117.03027344 508.76733398]
[128.57843018 518.44909668]
[137.58204651 530.53344727]
[143.55557251 544.36871338]
[146.17686462 559.20867920]
[145.30455017 574.25317383]
[140.98568726 588.69073486]
[133.45318604 601.74285889]
[123.11324310 612.70562744]
[110.52349854 620.98785400]
[96.36289215 626.14288330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[26 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[36 123]
[37 122]
[39 121]
[40 120]
[41 119]
[42 118]
[43 117]
[44 116]
[46 54]
[47 53]
[55 114]
[56 113]
[57 112]
[59 110]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 102]
[66 101]
[67 100]
[68 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
