%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUAAUAGGGGGGGGGGGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUxxxxxxxxxxCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCCCCCCACUACUAG\
) } def
/len { sequence length } bind def

/coor [
[83.65111542 399.69744873]
[71.55618286 390.66333008]
[62.34804535 378.70034790]
[56.71001053 364.69622803]
[55.06046295 349.69018555]
[57.52180481 334.79574585]
[63.91139221 321.11819458]
[73.75507355 309.67245483]
[86.32238007 301.30792236]
[100.68074036 296.64529419]
[100.05676270 281.65829468]
[99.43278503 266.67126465]
[98.80880737 251.68424988]
[98.18482971 236.69723511]
[97.56085205 221.71022034]
[96.93687439 206.72320557]
[96.31289673 191.73619080]
[95.68891907 176.74917603]
[95.06494141 161.76214600]
[94.44096375 146.77513123]
[93.81698608 131.78811646]
[74.99154663 120.57405090]
[67.61619568 99.94017792]
[75.06772614 79.33370209]
[66.05019379 67.34686279]
[57.03266525 55.36003494]
[42.32176971 59.08363342]
[27.34636497 56.89724350]
[14.38397121 49.16484451]
[5.39389658 37.09147644]
[1.72111177 22.53553391]
[3.89509749 7.72272873]
[11.55376244 -5.09421825]
[2.53623223 -17.08105087]
[-6.48129749 -29.06788254]
[-15.49882698 -41.05471420]
[-24.51635742 -53.04154968]
[-33.53388596 -65.02838135]
[-47.41741943 -58.30854416]
[-62.33683014 -54.41278839]
[-77.72406006 -53.48759079]
[-92.99359894 -55.56635284]
[-107.56475830 -60.56820679]
[-120.88375854 -68.30115509]
[-132.44479370 -78.46944427]
[-141.80921936 -90.68486786]
[-148.62217712 -104.48160553]
[-152.62609863 -119.33395386]
[-153.67039490 -134.67640686]
[-151.71710205 -149.92510986]
[-146.84236145 -164.50019836]
[-139.23329163 -177.84770203]
[-129.18098450 -189.46072388]
[-138.44593811 -201.25737000]
[-147.71087646 -213.05401611]
[-163.21145630 -212.33848572]
[-176.15370178 -220.89872742]
[-181.56108093 -235.44314575]
[-177.35433960 -250.37910461]
[-165.15104675 -259.96343994]
[-149.64363098 -260.51074219]
[-136.79499817 -251.81062317]
[-131.54571533 -237.20840454]
[-135.91424561 -222.31895447]
[-126.64929199 -210.52232361]
[-117.38434601 -198.72567749]
[-104.42221069 -205.45758057]
[-90.43582153 -209.68093872]
[-75.90592957 -211.24902344]
[-61.33226395 -210.10633850]
[-47.21634674 -206.29067993]
[-34.04423141 -199.93186951]
[-22.26976585 -191.24728394]
[-12.29895020 -180.53450012]
[-4.47594690 -168.16102600]
[0.92880774 -154.55178833]
[3.72794580 -140.17442322]
[3.82366586 -125.52328491]
[1.21114838 -111.10243225]
[-4.02122498 -97.40829468]
[-11.69486237 -84.91255188]
[-21.54705429 -74.04591370]
[-12.52952480 -62.05907822]
[-3.51199484 -50.07224655]
[5.50553513 -38.08541489]
[14.52306461 -26.09858131]
[23.54059410 -14.11174774]
[37.97822571 -17.91754150]
[52.81319427 -15.90034008]
[65.78068542 -8.33667755]
[74.88896942 3.64776230]
[78.72528839 18.24558067]
[76.67493439 33.24021530]
[69.01950073 46.34250259]
[78.03702545 58.32933807]
[87.05455780 70.31616974]
[99.14761353 63.85857391]
[114.21489716 62.69757462]
[129.83433533 68.08697510]
[143.73689270 62.45502090]
[157.63945007 56.82306290]
[165.19322205 42.66961670]
[180.99412537 39.89266968]
[192.92103577 50.62245560]
[191.82466125 66.62799835]
[178.54605103 75.63122559]
[163.27140808 70.72561646]
[149.36885071 76.35757446]
[135.46629333 81.98953247]
[136.08973694 89.46357727]
[149.65872192 95.85751343]
[137.33660889 104.41166687]
[137.96005249 111.88570404]
[152.60354614 115.13653564]
[167.24705505 118.38735962]
[180.44242859 109.68921661]
[195.90644836 112.95104218]
[204.46459961 126.23764038]
[201.03945923 141.66632080]
[187.66311646 150.08351135]
[172.27153015 146.49543762]
[163.99623108 133.03085327]
[149.35272217 129.78002930]
[134.70922852 126.52920532]
[128.07510376 129.68853760]
[121.37448120 131.46131897]
[114.87100983 131.91499329]
[108.80400085 131.16413879]
[109.42797852 146.15115356]
[110.05195618 161.13816833]
[110.67593384 176.12519836]
[111.29991150 191.11221313]
[111.92388916 206.09922791]
[112.54786682 221.08624268]
[113.17184448 236.07325745]
[113.79582214 251.06027222]
[114.41979980 266.04730225]
[115.04377747 281.03430176]
[115.66775513 296.02133179]
[130.36399841 299.47427368]
[143.58311462 306.76519775]
[154.34414673 317.35305786]
[161.84857178 330.45214844]
[165.53948975 345.09045410]
[165.14303589 360.18167114]
[160.68861389 374.60598755]
[152.50675964 387.29299927]
[141.20463562 397.30120850]
[127.62094879 403.88800049]
[112.76367188 406.56457520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 96]
[25 95]
[26 94]
[33 87]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[53 66]
[54 65]
[55 64]
[99 109]
[100 108]
[101 107]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
