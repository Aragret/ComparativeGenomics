%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCUCACGGGGGGGGGGAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAxxxxxxxxxxCCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCACCCCCCCCCCUACCUCUCAC\
) } def
/len { sequence length } bind def

/coor [
[72.05250549 373.48306274]
[58.20656586 367.46704102]
[46.49790192 357.93762207]
[37.79537964 345.60195923]
[32.74477768 331.37542725]
[31.72088623 316.31375122]
[34.79968643 301.53457642]
[41.75270844 288.13467407]
[52.06399155 277.10833740]
[64.96836853 269.27383423]
[79.50825500 265.21249390]
[79.50825500 250.21250916]
[79.50825500 235.21250916]
[79.50825500 220.21250916]
[79.50825500 205.21250916]
[79.50825500 190.21250916]
[79.50825500 175.21250916]
[79.50825500 160.21250916]
[79.50825500 145.21250916]
[79.50825500 130.21250916]
[74.25418854 144.26223755]
[60.33755112 149.85929871]
[46.81884003 143.35972595]
[42.49947357 128.99508667]
[50.19159698 116.11753082]
[64.88677979 113.11097717]
[50.06902313 110.77987671]
[35.25126266 108.44876862]
[27.74234200 119.85729980]
[14.66834354 126.36217499]
[-0.84825158 125.36331940]
[-14.56056404 116.19436646]
[-29.49487114 117.59667206]
[-42.54775238 127.52412415]
[-57.56494522 120.93505096]
[-59.09805298 104.60771942]
[-45.56994247 95.33829498]
[-30.89717484 102.66236115]
[-15.96286678 101.26006317]
[-14.09525394 86.37677765]
[-28.22005653 81.32802582]
[-42.34486008 76.27926636]
[-56.46966171 71.23051453]
[-71.52701569 76.76727295]
[-85.16865540 68.32421112]
[-86.92987823 52.37812424]
[-75.45963287 41.16148758]
[-59.55690384 43.27873993]
[-51.42090607 57.10570908]
[-37.29610443 62.15446472]
[-23.17130089 67.20322418]
[-9.04649734 72.25197601]
[12.48143482 66.81833649]
[30.71240616 76.16238403]
[37.58236694 93.63101196]
[52.40012741 95.96211243]
[67.21788788 98.29322052]
[99.76807404 77.46897125]
[105.54434204 63.62575531]
[111.32061768 49.78253555]
[117.09688568 35.93931961]
[109.21177673 18.76887131]
[116.19879913 1.55611694]
[133.22836304 -5.03109264]
[138.42378235 -19.10261154]
[143.61920166 -33.17412949]
[148.81460571 -47.24565125]
[135.85958862 -54.88809967]
[124.47750092 -64.72110748]
[115.03424835 -76.42857361]
[107.83338928 -89.63415527]
[103.10639954 -103.91334534]
[101.00522614 -118.80712891]
[101.59742737 -133.83673096]
[104.86396027 -148.51902771]
[110.69981384 -162.38201904]
[118.91738892 -174.98007202]
[129.25253296 -185.90823364]
[141.37301636 -194.81518555]
[154.88920593 -201.41461182]
[169.36660767 -205.49436951]
[184.33984375 -206.92330933]
[199.32759094 -205.65550232]
[213.84805298 -201.73170471]
[227.43443298 -195.27804565]
[239.65002441 -186.50196838]
[250.10211182 -175.68562317]
[258.45471191 -163.17666626]
[264.43936157 -149.37725830]
[267.86361694 -134.73094177]
[268.61743164 -119.70858002]
[266.67657471 -104.79306030]
[262.10345459 -90.46384430]
[255.04505920 -77.18157959]
[245.72827148 -65.37321472]
[234.45262146 -55.41835403]
[221.58053589 -47.63700104]
[207.52583313 -42.27929306]
[192.74029541 -39.51745605]
[177.69923401 -39.44027710]
[162.88612366 -42.05023575]
[157.69071960 -27.97871590]
[152.49530029 -13.90719604]
[147.29988098 0.16432309]
[154.24354553 9.31178188]
[155.89704895 20.79801750]
[151.73007202 31.75749016]
[142.67916870 39.39882660]
[130.94010925 41.71559143]
[125.16383362 55.55880737]
[119.38755798 69.40202332]
[113.61128998 83.24524689]
[120.65642548 96.48783112]
[135.36437988 99.43331146]
[150.07234192 102.37879181]
[164.16679382 94.71549225]
[178.88929749 101.08946228]
[182.94601440 116.61113739]
[173.22497559 129.37362671]
[157.18333435 129.58663940]
[147.12686157 117.08675385]
[132.41889954 114.14127350]
[117.71093750 111.19579315]
[111.91027069 115.94997406]
[126.57756042 119.09172821]
[133.26629639 132.51785278]
[126.93984222 146.11843872]
[112.36203766 149.65222168]
[100.51000214 140.45825195]
[100.30892944 125.45832825]
[94.50825500 130.21250916]
[94.50825500 145.21250916]
[94.50825500 160.21250916]
[94.50825500 175.21250916]
[94.50825500 190.21250916]
[94.50825500 205.21250916]
[94.50825500 220.21250916]
[94.50825500 235.21250916]
[94.50825500 250.21250916]
[94.50825500 265.21249390]
[109.04814911 269.27383423]
[121.95252991 277.10833740]
[132.26380920 288.13467407]
[139.21682739 301.53457642]
[142.29563904 316.31375122]
[141.27174377 331.37542725]
[136.22114563 345.60195923]
[127.51861572 357.93762207]
[115.80995178 367.46704102]
[101.96401215 373.48306274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 57]
[27 56]
[28 55]
[32 39]
[33 38]
[40 52]
[41 51]
[42 50]
[43 49]
[58 112]
[59 111]
[60 110]
[61 109]
[64 104]
[65 103]
[66 102]
[67 101]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
