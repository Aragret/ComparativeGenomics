%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACAACCAGGGGGGGGGGUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCxxxxxxxxxxUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGCCCCCCCCCCAGGACAACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 341.31054688]
[71.19830322 335.29452515]
[59.48964310 325.76510620]
[50.78712082 313.42944336]
[45.73651886 299.20291138]
[44.71262741 284.14123535]
[47.79142761 269.36209106]
[54.74444962 255.96215820]
[65.05573273 244.93582153]
[77.96011353 237.10131836]
[92.50000000 233.03999329]
[92.50000000 218.03999329]
[92.50000000 203.03999329]
[92.50000000 188.03999329]
[92.50000000 173.03999329]
[92.50000000 158.03999329]
[92.50000000 143.03999329]
[92.50000000 128.03999329]
[92.50000000 113.04000092]
[86.72372437 99.19677734]
[76.06210327 88.64549255]
[65.40047455 78.09420013]
[54.73884964 67.54290771]
[56.49128342 82.44019318]
[50.68695450 96.27166748]
[38.82830048 105.45710754]
[23.98489380 107.61888123]
[9.99890614 102.19743347]
[0.49056828 90.59606934]
[-2.07891560 75.81778717]
[2.95555758 61.68788528]
[14.29082966 51.86385345]
[28.99279976 48.88861084]
[43.25581741 53.53223038]
[35.00352859 41.00626755]
[26.75123978 28.48030663]
[18.49895096 15.95434475]
[10.24666214 3.42838311]
[-1.45296180 -5.95877886]
[-15.46967506 -11.30029106]
[-29.48638725 -16.64180374]
[-43.50310135 -21.98331642]
[-56.42215729 -13.38810635]
[-71.92460632 -14.06170177]
[-84.04943848 -23.74509239]
[-88.13440704 -38.71481705]
[-82.60876465 -53.21471024]
[-69.59722900 -61.66926575]
[-54.10300064 -60.82753754]
[-42.08392715 -51.01318741]
[-38.16158676 -36.00003052]
[-24.14487457 -30.65851593]
[-10.12816238 -25.31700516]
[3.88855076 -19.97549248]
[-5.09894562 -31.98485947]
[-11.62110901 -45.49268723]
[-15.43667126 -59.99928665]
[-16.40448570 -74.96803284]
[-14.48875046 -89.84519196]
[-9.76033306 -104.08043671]
[-2.39414859 -117.14716339]
[7.33731222 -128.56201172]
[19.07406044 -137.90270996]
[32.38193130 -144.82373047]
[46.76863098 -149.06906128]
[61.70196915 -150.48165894]
[76.62953186 -149.00924683]
[90.99910736 -144.70629883]
[104.27913666 -137.73200989]
[115.97836304 -128.34434509]
[125.66400909 -116.89060211]
[132.97776794 -103.79446411]
[137.64910889 -89.54039764]
[139.50521851 -74.65567780]
[138.47743225 -59.69092941]
[134.60377502 -45.19972992]
[128.02754211 -31.71814728]
[118.99200439 -19.74488831]
[107.83139038 -9.72287083]
[94.95858002 -2.02283239]
[80.84974670 3.07038546]
[66.02681732 5.36837387]
[51.03812027 4.78612566]
[36.43812180 1.34517848]
[22.77262306 -4.82390594]
[31.02491379 7.70205593]
[39.27720261 20.22801781]
[47.52949142 32.75397873]
[55.78178024 45.27994156]
[65.29013824 56.88128281]
[75.95176697 67.43257141]
[86.61338806 77.98386383]
[97.27501678 88.53515625]
[89.56721497 75.66698456]
[93.89253998 61.30413055]
[107.42453003 54.83225250]
[121.32047272 60.48051453]
[126.49980927 74.55796051]
[119.57697296 87.86627197]
[134.53723145 88.95758057]
[149.49746704 90.04888916]
[164.45771790 91.14019775]
[153.15747070 81.27590942]
[147.61614990 67.33697510]
[149.05944824 52.40657425]
[157.16812134 39.78717041]
[170.14860535 32.27005386]
[185.12973022 31.51794624]
[198.79783630 37.69720840]
[208.12962341 49.44104004]
[211.06101990 64.15181732]
[206.94360352 78.57564545]
[196.68812561 89.52211761]
[182.56103516 94.57017517]
[196.88363647 99.02699280]
[211.20622253 103.48381042]
[225.52882385 107.94062042]
[239.40156555 100.36945343]
[254.54093933 104.90543365]
[261.96499634 118.85744476]
[257.26922607 133.94801331]
[243.23950195 141.22416687]
[228.19941711 136.36909485]
[221.07200623 122.26322174]
[206.74940491 117.80640411]
[192.42681885 113.34958649]
[178.10421753 108.89277649]
[163.36640930 106.10044861]
[148.40615845 105.00914001]
[133.44590759 103.91783142]
[118.48566437 102.82651520]
[107.50000000 113.04000092]
[107.50000000 128.03999329]
[107.50000000 143.03999329]
[107.50000000 158.03999329]
[107.50000000 173.03999329]
[107.50000000 188.03999329]
[107.50000000 203.03999329]
[107.50000000 218.03999329]
[107.50000000 233.03999329]
[122.03988647 237.10131836]
[134.94427490 244.93582153]
[145.25555420 255.96215820]
[152.20857239 269.36209106]
[155.28736877 284.14123535]
[154.26348877 299.20291138]
[149.21287537 313.42944336]
[140.51036072 325.76510620]
[128.80169678 335.29452515]
[114.95575714 341.31054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 93]
[21 92]
[22 91]
[23 90]
[34 89]
[35 88]
[36 87]
[37 86]
[38 85]
[39 54]
[40 53]
[41 52]
[42 51]
[99 131]
[100 130]
[101 129]
[102 128]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
