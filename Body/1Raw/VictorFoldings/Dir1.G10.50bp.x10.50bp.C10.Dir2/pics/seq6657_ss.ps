%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCCAAUGGGGGGGGGGACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUxxxxxxxxxxACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUACCCCCCCCCCAAAACCCAAU\
) } def
/len { sequence length } bind def

/coor [
[99.65909576 380.67770386]
[85.81316376 374.66168213]
[74.10449982 365.13226318]
[65.40197754 352.79660034]
[60.35137177 338.57006836]
[59.32748032 323.50839233]
[62.40628052 308.72924805]
[69.35929871 295.32931519]
[79.67058563 284.30297852]
[92.57496643 276.46847534]
[107.11485291 272.40716553]
[107.11485291 257.40716553]
[107.11485291 242.40715027]
[107.11485291 227.40715027]
[107.11485291 212.40715027]
[107.11485291 197.40715027]
[107.11485291 182.40715027]
[107.11485291 167.40715027]
[107.11485291 152.40715027]
[107.11485291 137.40715027]
[91.02243805 135.27934265]
[77.99204254 126.86624908]
[70.19709778 114.29876709]
[55.55360031 117.54959106]
[43.75825119 128.09379578]
[29.65662193 123.29866791]
[15.01311970 126.54949188]
[0.36961836 129.80032349]
[-5.68994427 144.08532715]
[-19.00606346 152.05154419]
[-34.45841980 150.63580322]
[-46.10526657 140.38247681]
[-49.46815109 125.23418427]
[-43.25398254 111.01576233]
[-29.85222816 103.19446564]
[-14.41613960 104.77775574]
[-2.88120747 115.15681458]
[11.76229382 111.90599060]
[26.40579605 108.65516663]
[37.15374374 98.34347534]
[52.30277252 102.90608978]
[66.94627380 99.65526581]
[69.53811646 87.16484833]
[76.66656494 76.58592987]
[87.27001190 69.49401855]
[84.78489685 54.70130920]
[82.29977417 39.90860367]
[79.81465912 25.11589432]
[64.80237579 25.65106201]
[49.84867859 24.22209549]
[35.20944214 20.85344696]
[21.13516426 15.60275745]
[7.86667442 8.55987453]
[-4.36898613 -0.15468970]
[-15.36244965 -10.39181709]
[-24.92560196 -21.97633743]
[-32.89480972 -34.71002579]
[-39.13370132 -48.37498856]
[-43.53553009 -62.73740387]
[-46.02496719 -77.55150604]
[-46.55941772 -92.56381226]
[-45.12974167 -107.51744080]
[-41.76039505 -122.15651703]
[-36.50903702 -136.23054504]
[-29.46552086 -149.49870300]
[-20.75037575 -161.73394775]
[-10.51272392 -172.72692871]
[1.07225192 -182.28952026]
[13.80631828 -190.25811768]
[27.47157860 -196.49636841]
[41.83420181 -200.89750671]
[56.64842606 -203.38624573]
[71.66075897 -203.91998291]
[86.61431885 -202.48959351]
[101.25323486 -199.11955261]
[115.32701111 -193.86752319]
[128.59483337 -186.82337952]
[140.82966614 -178.10765076]
[151.82214355 -167.86947632]
[161.38420105 -156.28404236]
[169.35218811 -143.54959106]
[175.58978271 -129.88403320]
[179.99024963 -115.52120209]
[182.47827148 -100.70686340]
[183.01129150 -85.69450378]
[181.58020020 -70.74101257]
[178.20945740 -56.10225677]
[172.95675659 -42.02872849]
[165.91198730 -28.76124382]
[157.19566345 -16.52682877]
[146.95697021 -5.53482723]
[135.37107849 4.02667141]
[122.63626099 11.99405861]
[108.97040558 18.23100090]
[94.60736084 22.63077736]
[97.09248352 37.42348480]
[99.57759857 52.21619034]
[102.06272125 67.00889587]
[112.29294586 68.41535950]
[121.83480835 72.99284363]
[129.70761108 80.44382477]
[135.05105591 90.16883850]
[137.21755981 101.31320190]
[135.84698486 112.84174347]
[150.66473389 115.17284393]
[163.35568237 106.14082336]
[178.34979248 108.71597290]
[186.88224792 120.87052155]
[201.69999695 123.20162201]
[216.51776123 125.53273010]
[231.33551025 127.86383057]
[237.73193359 125.81608582]
[243.33972168 127.15177155]
[246.71594238 130.61248779]
[261.42391968 133.55798340]
[275.51834106 125.89466858]
[290.24084473 132.26864624]
[294.29757690 147.79032898]
[284.57653809 160.55281067]
[268.53491211 160.76580811]
[258.47842407 148.26593018]
[243.77046204 145.32044983]
[229.00440979 142.68159485]
[214.18666077 140.35049438]
[199.36889648 138.01937866]
[184.55113220 135.68827820]
[172.69892883 144.63594055]
[157.63841248 142.48295593]
[148.33363342 129.99060059]
[133.51586914 127.65950012]
[122.11485291 137.40715027]
[122.11485291 152.40715027]
[122.11485291 167.40715027]
[122.11485291 182.40715027]
[122.11485291 197.40715027]
[122.11485291 212.40715027]
[122.11485291 227.40715027]
[122.11485291 242.40715027]
[122.11485291 257.40716553]
[122.11485291 272.40716553]
[136.65473938 276.46847534]
[149.55912781 284.30297852]
[159.87040710 295.32931519]
[166.82342529 308.72924805]
[169.90222168 323.50839233]
[168.87834167 338.57006836]
[163.82772827 352.79660034]
[155.12521362 365.13226318]
[143.41654968 374.66168213]
[129.57060242 380.67770386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 42]
[24 41]
[26 39]
[27 38]
[28 37]
[45 98]
[46 97]
[47 96]
[48 95]
[104 130]
[105 129]
[108 126]
[109 125]
[110 124]
[111 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
