%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCACCCUGGGGGGGGGGCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACxxxxxxxxxxUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCCCCCCCCCCCAUCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[101.65593719 386.73864746]
[87.80999756 380.72262573]
[76.10133362 371.19320679]
[67.39881134 358.85754395]
[62.34820938 344.63101196]
[61.32431793 329.56933594]
[64.40311432 314.79016113]
[71.35614014 301.39022827]
[81.66741943 290.36392212]
[94.57180023 282.52938843]
[109.11168671 278.46807861]
[109.11168671 263.46807861]
[109.11168671 248.46809387]
[109.11168671 233.46809387]
[109.11168671 218.46809387]
[109.11168671 203.46809387]
[109.11168671 188.46809387]
[109.11168671 173.46809387]
[109.11168671 158.46809387]
[109.11168671 143.46809387]
[109.11168671 128.46809387]
[81.43082428 118.74165344]
[78.14987183 93.22855377]
[66.06988525 84.33620453]
[53.98989487 75.44385529]
[43.81275940 86.48419952]
[32.48284912 96.33794403]
[20.13769150 104.88546753]
[6.92714691 112.02302551]
[-6.98841858 117.66397095]
[-21.44008446 121.73982239]
[-36.25241852 124.20109558]
[-51.24561691 125.01792908]
[-66.23767090 124.18040466]
[-81.04660034 121.69867706]
[-95.49262238 117.60288239]
[-109.40039062 111.94273376]
[-122.60106659 104.78694916]
[-134.93441772 96.22238922]
[-146.25071716 86.35301208]
[-156.41259766 75.29862976]
[-165.29670715 63.19343567]
[-172.79519653 50.18436813]
[-178.81704712 36.42935181]
[-183.28915405 22.09535599]
[-186.15724182 7.35638285]
[-187.38647461 -7.60864878]
[-186.96194458 -22.61807823]
[-184.88879395 -37.48970413]
[-181.19219971 -52.04299927]
[-175.91702271 -66.10129547]
[-169.12731934 -79.49394989]
[-160.90550232 -92.05837250]
[-151.35136414 -103.64205170]
[-140.58088684 -114.10437775]
[-128.72482300 -123.31832886]
[-115.92710114 -131.17207336]
[-102.34305573 -137.57026672]
[-88.13758850 -142.43525696]
[-73.48315430 -145.70796204]
[-58.55762863 -147.34866333]
[-43.54219818 -147.33744812]
[-28.61914253 -145.67445374]
[-13.96960831 -142.37985229]
[0.22857080 -137.49366760]
[13.80304241 -131.07518005]
[26.58902550 -123.20232391]
[38.43130875 -113.97066498]
[49.18613815 -103.49227142]
[58.72296143 -91.89432526]
[66.92601013 -79.31763458]
[73.69570160 -65.91485596]
[78.94985962 -51.84869385]
[82.62471008 -37.28989410]
[84.67563629 -22.41518593]
[85.07775116 -7.40513992]
[83.82616425 7.55803919]
[80.93606567 22.29271126]
[76.44255066 36.62001038]
[70.40016174 50.36601639]
[62.88224411 63.36386490]
[74.96223450 72.25621796]
[87.04222107 81.14856720]
[95.29312897 76.18222809]
[105.40333557 74.89337921]
[115.71658325 77.94184113]
[124.36590576 85.24031830]
[129.60839844 95.90150452]
[143.13258362 89.41333771]
[156.65678406 82.92517090]
[170.18096924 76.43701172]
[183.70515442 69.94884491]
[197.22935486 63.46067810]
[210.75354004 56.97251511]
[209.24195862 41.88970947]
[212.98316956 27.20028877]
[221.52540588 14.67806530]
[233.83714294 5.83516026]
[248.43167114 1.73939753]
[263.54666138 2.88536072]
[277.35687256 9.13466835]
[288.19467163 19.73268700]
[294.75131226 33.39965439]
[296.23510742 48.48521805]
[292.46682739 63.16772079]
[283.90155029 75.67417908]
[271.57351685 84.49438477]
[256.97146606 88.56324005]
[241.85862732 87.38942719]
[228.05995178 81.11467743]
[217.24169922 70.49670410]
[203.71751404 76.98487091]
[190.19332886 83.47303772]
[176.66912842 89.96119690]
[163.14494324 96.44936371]
[149.62075806 102.93753052]
[136.09655762 109.42569733]
[151.07574463 110.21563721]
[165.84352112 107.58641052]
[180.23609924 111.81177521]
[191.23895264 122.00673676]
[196.54754639 136.03594971]
[195.04998779 150.96101379]
[187.05993652 163.65585327]
[174.25091553 171.46156311]
[159.30577087 172.74320984]
[145.35475159 167.23237610]
[135.31991577 156.08329773]
[131.30307007 141.63182068]
[124.11168671 128.46809387]
[124.11168671 143.46809387]
[124.11168671 158.46809387]
[124.11168671 173.46809387]
[124.11168671 188.46809387]
[124.11168671 203.46809387]
[124.11168671 218.46809387]
[124.11168671 233.46809387]
[124.11168671 248.46809387]
[124.11168671 263.46807861]
[124.11168671 278.46807861]
[138.65158081 282.52938843]
[151.55595398 290.36392212]
[161.86724854 301.39022827]
[168.82026672 314.79016113]
[171.89906311 329.56933594]
[170.87516785 344.63101196]
[165.82456970 358.85754395]
[157.12203979 371.19320679]
[145.41339111 380.72262573]
[131.56744385 386.73864746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 83]
[24 82]
[25 81]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
