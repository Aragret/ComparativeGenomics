%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUACAACGGGGGGGGGGCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCxxxxxxxxxxUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACCCCCCCCCCCUACCACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.70401001]
[71.19830322 375.68798828]
[59.48964310 366.15856934]
[50.78712082 353.82290649]
[45.73651886 339.59637451]
[44.71262741 324.53469849]
[47.79142761 309.75555420]
[54.74444962 296.35562134]
[65.05573273 285.32928467]
[77.96011353 277.49478149]
[92.50000000 273.43347168]
[92.50000000 258.43347168]
[92.50000000 243.43347168]
[92.50000000 228.43347168]
[92.50000000 213.43347168]
[92.50000000 198.43347168]
[92.50000000 183.43347168]
[92.50000000 168.43347168]
[92.50000000 153.43347168]
[92.50000000 138.43347168]
[86.09014893 138.61766052]
[79.46386719 137.70452881]
[72.81201172 135.63513184]
[66.33787537 132.38401794]
[60.25128174 127.96150970]
[46.34872437 133.59346008]
[36.69653320 146.85119629]
[20.41967964 144.85217285]
[14.26239491 129.65284729]
[24.55876541 116.88895416]
[40.71677017 119.69091034]
[54.61932373 114.05895233]
[54.77535248 106.56057739]
[39.77859879 106.24851990]
[24.78184509 105.93646240]
[9.78509617 105.62417603]
[10.09761620 90.62743378]
[25.09390068 90.93971252]
[40.09065628 91.25177002]
[55.08740997 91.56382751]
[55.24343872 84.06544495]
[41.58719635 77.86003876]
[27.93095398 71.65463257]
[14.27471352 65.44922638]
[0.61847216 59.24382019]
[-14.84701157 63.50977325]
[-27.73960876 53.96197510]
[-28.16922379 37.92467499]
[-15.80629158 27.70031929]
[-0.13459583 31.13215637]
[6.82387924 45.58757782]
[20.48011971 51.79298401]
[34.13636017 57.99839020]
[47.79260254 64.20379639]
[61.44884491 70.40920258]
[71.02692413 62.96056366]
[81.82127380 58.34191895]
[93.04695892 56.67597961]
[103.93733215 57.87854004]
[113.79611206 61.67582321]
[122.04190063 67.63434601]
[132.70353699 57.08305359]
[143.36515808 46.53176498]
[154.02677917 35.98047256]
[144.59956360 24.29635429]
[136.40280151 11.71843433]
[129.52059937 -1.62421381]
[124.02357483 -15.59467411]
[119.96814728 -30.04958725]
[117.39592743 -44.84062195]
[116.33330536 -59.81599426]
[116.79119873 -74.82203674]
[118.76489258 -89.70476532]
[122.23413849 -104.31145477]
[127.16334534 -118.49221039]
[133.50192261 -132.10153198]
[141.18482971 -144.99974060]
[150.13322449 -157.05450439]
[160.25529480 -168.14210510]
[171.44714355 -178.14877319]
[183.59394836 -186.97181702]
[196.57106018 -194.52070618]
[210.24530029 -200.71797180]
[224.47634888 -205.50003052]
[239.11819458 -208.81777954]
[254.02056885 -210.63720703]
[269.03054810 -210.93963623]
[283.99411011 -209.72195435]
[298.75772095 -206.99665833]
[313.16983032 -202.79171753]
[327.08261108 -197.15028381]
[340.35324097 -190.13023376]
[352.84558105 -181.80361938]
[364.43142700 -172.25588989]
[374.99188232 -161.58499146]
[384.41857910 -149.90046692]
[392.61480713 -137.32218933]
[399.49642944 -123.97923279]
[404.99282837 -110.00852966]
[409.04760742 -95.55343628]
[411.61917114 -80.76229095]
[412.68115234 -65.78687286]
[412.22259521 -50.78084564]
[410.24826050 -35.89820862]
[406.77835083 -21.29167366]
[401.84851074 -7.11113024]
[395.50933838 6.49790525]
[387.82586670 19.39578247]
[378.87695312 31.45014763]
[368.75439453 42.53730392]
[357.56210327 52.54347992]
[345.41491699 61.36598969]
[332.43746948 68.91430664]
[318.76296997 75.11097717]
[304.53167725 79.89239502]
[289.88970947 83.20951843]
[274.98724365 85.02828979]
[259.97726440 85.33005524]
[245.01374817 84.11170959]
[230.25027466 81.38576508]
[215.83831787 77.18019104]
[201.92579651 71.53813934]
[188.65547180 64.51750946]
[176.16349792 56.19034576]
[164.57807922 46.64209747]
[153.91644287 57.19338989]
[143.25482178 67.74468231]
[132.59320068 78.29596710]
[139.06869507 102.64929962]
[129.36473083 125.90547943]
[107.50000000 138.43347168]
[107.50000000 153.43347168]
[107.50000000 168.43347168]
[107.50000000 183.43347168]
[107.50000000 198.43347168]
[107.50000000 213.43347168]
[107.50000000 228.43347168]
[107.50000000 243.43347168]
[107.50000000 258.43347168]
[107.50000000 273.43347168]
[122.03988647 277.49478149]
[134.94427490 285.32928467]
[145.25555420 296.35562134]
[152.20857239 309.75555420]
[155.28736877 324.53469849]
[154.26348877 339.59637451]
[149.21287537 353.82290649]
[140.51036072 366.15856934]
[128.80169678 375.68798828]
[114.95575714 381.70401001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 32]
[26 31]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[61 128]
[62 127]
[63 126]
[64 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
