%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAACAACAUAAGGGGGGGGGGGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAxxxxxxxxxxUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACCCCCCCCCCCAUUAACAACAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 412.15539551]
[70.66226196 407.64865112]
[57.50136948 400.34277344]
[46.08077240 390.53692627]
[36.86813354 378.63262939]
[30.24070549 365.11737061]
[26.46987534 350.54461670]
[25.71005821 335.51104736]
[27.99236870 320.63235474]
[33.22334671 306.51776123]
[41.18878555 293.74526978]
[51.56250763 282.83789062]
[63.91971207 274.24227905]
[77.75438690 268.31045532]
[92.50000000 265.28524780]
[92.50000000 250.28526306]
[92.50000000 235.28526306]
[92.50000000 220.28526306]
[92.50000000 205.28526306]
[92.50000000 190.28526306]
[92.50000000 175.28526306]
[92.50000000 160.28526306]
[92.50000000 145.28526306]
[92.50000000 130.28526306]
[81.54934692 125.15989685]
[73.36949921 116.25617981]
[69.18885040 104.91121674]
[69.63522339 92.82871246]
[74.64158630 81.82315063]
[83.45611572 73.54726410]
[78.79268646 59.29060745]
[64.21372986 62.85104752]
[49.40499496 65.28503418]
[34.45339966 66.57826233]
[19.44667435 66.72316742]
[4.47289181 65.71887970]
[-10.38007641 63.57130432]
[-25.02506638 60.29303741]
[-39.37613297 55.90332031]
[-53.34906006 50.42791367]
[-66.86184692 43.89894867]
[-79.83518982 36.35474396]
[-92.19296265 27.83956718]
[-103.86264038 18.40339279]
[-114.77574158 8.10159588]
[-124.86821747 -3.00536799]
[-134.08084106 -14.85231686]
[-142.35955811 -27.36972809]
[-149.65577698 -40.48414612]
[-155.92669678 -54.11860275]
[-161.13548279 -68.19309235]
[-165.25160217 -82.62501526]
[-168.25086975 -97.32968140]
[-170.11570740 -112.22078705]
[-170.83515930 -127.21095276]
[-170.40501404 -142.21221924]
[-168.82777405 -157.13652039]
[-166.11271667 -171.89630127]
[-162.27577209 -186.40495300]
[-157.33946228 -200.57730103]
[-151.33273315 -214.33018494]
[-144.29086304 -227.58291626]
[-136.25515747 -240.25769043]
[-127.27277374 -252.28016663]
[-117.39643097 -263.57974243]
[-106.68408966 -274.09014893]
[-95.19861603 -283.74966431]
[-83.00740051 -292.50164795]
[-70.18200684 -300.29473877]
[-56.79767990 -307.08312988]
[-42.93297958 -312.82708740]
[-28.66926193 -317.49282837]
[-14.09023666 -321.05297852]
[0.71853918 -323.48669434]
[15.67016220 -324.77963257]
[30.67688751 -324.92425537]
[45.65065002 -323.91967773]
[60.50357819 -321.77182007]
[75.14850616 -318.49328613]
[89.49948883 -314.10330200]
[103.47231293 -308.62762451]
[116.98497772 -302.09838867]
[129.95817566 -294.55395508]
[142.31579590 -286.03854370]
[153.98529053 -276.60214233]
[164.89819336 -266.30014038]
[174.99046326 -255.19297791]
[184.20286560 -243.34585571]
[192.48133850 -230.82829285]
[199.77731323 -217.71372986]
[206.04795837 -204.07916260]
[211.25648499 -190.00457764]
[215.37232971 -175.57257080]
[218.37132263 -160.86785889]
[220.23587036 -145.97669983]
[220.95504761 -130.98652649]
[220.52461243 -115.98527527]
[218.94709778 -101.06099701]
[216.23176575 -86.30126190]
[212.39454651 -71.79269409]
[207.45796204 -57.62043762]
[201.45097351 -43.86766052]
[194.40884399 -30.61507034]
[186.37289429 -17.94043922]
[177.39028931 -5.91814661]
[167.51373291 5.38125277]
[156.80119324 15.89144993]
[145.31553650 25.55076599]
[133.12416077 34.30251312]
[120.29860687 42.09533691]
[106.91415405 48.88350296]
[93.04934692 54.62717438]
[97.71277618 68.88383484]
[120.13364410 76.16549683]
[131.06068420 97.05371094]
[145.89630127 99.26840973]
[160.73190308 101.48310852]
[175.56750488 103.69780731]
[185.65538025 92.02569580]
[200.45870972 87.68233490]
[215.25381470 92.05367279]
[225.31961060 103.74482727]
[227.44415283 119.02520752]
[220.94950867 133.01889038]
[207.90808105 141.26052856]
[192.48135376 141.12026978]
[179.59193420 132.64286804]
[173.35279846 118.53340912]
[158.51719666 116.31871033]
[143.68159485 114.10401154]
[128.84599304 111.88931274]
[125.29811096 118.26068878]
[120.36812592 123.63443756]
[114.32537842 127.71697235]
[107.50000000 130.28526306]
[107.50000000 145.28526306]
[107.50000000 160.28526306]
[107.50000000 175.28526306]
[107.50000000 190.28526306]
[107.50000000 205.28526306]
[107.50000000 220.28526306]
[107.50000000 235.28526306]
[107.50000000 250.28526306]
[107.50000000 265.28524780]
[122.24561310 268.31045532]
[136.08029175 274.24227905]
[148.43750000 282.83789062]
[158.81121826 293.74526978]
[166.77665710 306.51776123]
[172.00762939 320.63235474]
[174.28994751 335.51104736]
[173.53012085 350.54461670]
[169.75929260 365.11737061]
[163.13186646 378.63262939]
[153.91921997 390.53692627]
[142.49862671 400.34277344]
[129.33773804 407.64865112]
[114.97548676 412.15539551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[30 113]
[31 112]
[115 131]
[116 130]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
