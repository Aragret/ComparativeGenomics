%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAACAUAUGGGGGGGGGGGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUxxxxxxxxxxUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUCCCCCCCCCCAACAACCUAU\
) } def
/len { sequence length } bind def

/coor [
[86.82495117 371.23739624]
[72.33526611 367.02890015]
[59.42903519 359.21279907]
[48.98623276 348.32196045]
[41.71886826 335.09896851]
[38.12244415 320.44534302]
[38.44216537 305.36026001]
[42.65623474 290.87219238]
[50.47733307 277.96896362]
[61.37220001 267.53036499]
[74.59800720 260.26812744]
[89.25299835 256.67736816]
[89.56505585 241.68060303]
[89.87711334 226.68385315]
[90.18917084 211.68708801]
[90.50122833 196.69033813]
[90.81328583 181.69358826]
[91.12533569 166.69683838]
[91.43739319 151.70007324]
[91.74945068 136.70332336]
[92.06150818 121.70657349]
[92.37356567 106.70981598]
[89.36363983 99.17162323]
[92.85134125 91.40519714]
[93.47531891 76.41818237]
[78.54872894 74.89012146]
[63.74163055 72.46359253]
[49.10805893 69.14746094]
[34.70140839 64.95382690]
[20.57424927 59.89798355]
[6.77813005 53.99839020]
[-6.63660955 47.27656555]
[-19.62101936 39.75704193]
[-32.12772369 31.46725464]
[-44.11108017 22.43745613]
[-55.52736664 12.70059013]
[-66.33492279 2.29218984]
[-76.49432373 -8.74976730]
[-85.96848297 -20.38498878]
[-94.72283936 -32.57102203]
[-102.72544861 -45.26339722]
[-109.94711304 -58.41580200]
[-116.36147308 -71.98024750]
[-121.94512939 -85.90723419]
[-126.67769623 -100.14594269]
[-130.54193115 -114.64442444]
[-133.52369690 -129.34976196]
[-135.61215210 -144.20831299]
[-136.79963684 -159.16586304]
[-137.08184814 -174.16781616]
[-136.45776367 -189.15942383]
[-134.92962646 -204.08601379]
[-132.50302124 -218.89309692]
[-129.18682861 -233.52665710]
[-124.99312592 -247.93328857]
[-119.93721771 -262.06042480]
[-114.03755951 -275.85650635]
[-107.31567383 -289.27120972]
[-99.79608917 -302.25558472]
[-91.50624847 -314.76226807]
[-82.47638702 -326.74557495]
[-72.73947144 -338.16183472]
[-62.33102036 -348.96932983]
[-51.28901672 -359.12869263]
[-39.65375137 -368.60278320]
[-27.46767807 -377.35708618]
[-14.77526569 -385.35964966]
[-1.62282658 -392.58123779]
[11.94164753 -398.99554443]
[25.86865997 -404.57913208]
[40.10739136 -409.31164551]
[54.60589218 -413.17578125]
[69.31124878 -416.15750122]
[84.16980743 -418.24588013]
[99.12735748 -419.43328857]
[114.12931061 -419.71545410]
[129.12092590 -419.09127808]
[144.04750061 -417.56307983]
[158.85458374 -415.13641357]
[173.48811340 -411.82012939]
[187.89472961 -407.62637329]
[202.02183533 -402.57040405]
[215.81790161 -396.67068481]
[229.23258972 -389.94873047]
[242.21691895 -382.42907715]
[254.72354126 -374.13919067]
[266.70681763 -365.10928345]
[278.12301636 -355.37231445]
[288.93048096 -344.96380615]
[299.08978271 -333.92175293]
[308.56384277 -322.28643799]
[317.31808472 -310.10031128]
[325.32055664 -297.40786743]
[332.54211426 -284.25540161]
[338.95632935 -270.69088745]
[344.53985596 -256.76385498]
[349.27230835 -242.52510071]
[353.13638306 -228.02659607]
[356.11804199 -213.32121277]
[358.20632935 -198.46264648]
[359.39370728 -183.50509644]
[359.67578125 -168.50314331]
[359.05154419 -153.51153564]
[357.52325439 -138.58496094]
[355.09652710 -123.77789307]
[351.78021240 -109.14437103]
[347.58636475 -94.73777771]
[342.53033447 -80.61068726]
[336.63052368 -66.81465149]
[329.90853882 -53.40000534]
[322.38882446 -40.41569901]
[314.09884644 -27.90911293]
[305.06890869 -15.92588043]
[295.33187866 -4.50972843]
[284.92330933 6.29768658]
[273.88122559 16.45693016]
[262.24588013 25.93092918]
[250.05970764 34.68511963]
[237.36723328 42.68754959]
[224.21472168 49.90902710]
[210.65019226 56.32320023]
[196.72312927 61.90665817]
[182.48434448 66.63903809]
[167.98580933 70.50305939]
[153.28042603 73.48462677]
[138.42184448 75.57286835]
[123.46428680 76.76015472]
[108.46233368 77.04216003]
[107.83835602 92.02917480]
[107.37031555 107.02187347]
[107.05825806 122.01863098]
[106.74620819 137.01538086]
[106.43415070 152.01213074]
[106.12209320 167.00889587]
[105.81003571 182.00564575]
[105.49797821 197.00239563]
[105.18592072 211.99914551]
[104.87387085 226.99591064]
[104.56181335 241.99266052]
[104.24975586 256.98941040]
[118.74269104 261.18670654]
[131.65495300 268.99282837]
[142.10615540 279.87561035]
[149.38372803 293.09298706]
[152.99147034 307.74383545]
[152.68339539 322.82916260]
[148.48051453 337.32046509]
[140.66938782 350.22973633]
[129.78259277 360.67672729]
[116.56239319 367.94918823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 129]
[25 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
