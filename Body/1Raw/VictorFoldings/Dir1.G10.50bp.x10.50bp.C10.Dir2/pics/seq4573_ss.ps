%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUCCGUGGGGGGGGGGGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGxxxxxxxxxxCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCCCCCCCCCCCAUCCUCCGUG\
) } def
/len { sequence length } bind def

/coor [
[100.00643921 605.85491943]
[87.91149902 596.82080078]
[78.70336151 584.85784912]
[73.06533051 570.85369873]
[71.41578674 555.84765625]
[73.87712860 540.95324707]
[80.26671600 527.27569580]
[90.11038971 515.82995605]
[102.67770386 507.46542358]
[117.03605652 502.80276489]
[116.41207886 487.81576538]
[115.78810120 472.82873535]
[115.16412354 457.84173584]
[114.54014587 442.85470581]
[113.91616821 427.86770630]
[113.29219055 412.88067627]
[112.66821289 397.89367676]
[112.04423523 382.90664673]
[111.42025757 367.91964722]
[110.79627991 352.93261719]
[99.14286804 344.08581543]
[96.47781372 328.80850220]
[105.39663696 315.06323242]
[122.13409424 310.83700562]
[118.42793274 296.30206299]
[114.72177124 281.76712036]
[111.01560974 267.23220825]
[107.30944824 252.69726562]
[103.60328674 238.16232300]
[91.80664825 228.89736938]
[76.80745697 228.74133301]
[70.50730896 242.60597229]
[59.10827255 252.70457458]
[44.58530807 257.28753662]
[29.45460320 255.56077576]
[16.33764458 247.82351685]
[7.50702238 235.41625977]
[4.49269819 220.48864746]
[7.81692028 205.62696838]
[16.90374756 193.40609741]
[30.17883301 185.94338989]
[45.34218597 184.53179932]
[59.76666641 189.41587830]
[70.95314026 199.74945068]
[76.96349335 213.74214172]
[91.96268463 213.89817810]
[92.16521454 197.73915100]
[100.34760284 184.59646606]
[113.55030823 177.90142822]
[113.55030823 162.90142822]
[113.55030823 147.90142822]
[113.55030823 132.90142822]
[113.55030823 117.90142059]
[53.30686569 105.48109436]
[43.79850769 93.87975311]
[34.29014969 82.27841187]
[18.53148842 79.27104950]
[11.18517017 65.00882721]
[17.88665962 50.43248749]
[33.49514771 46.72375870]
[46.03713989 56.72766113]
[45.89149094 72.77005005]
[55.39984894 84.37139130]
[64.90820312 95.97273254]
[72.06950378 93.74432373]
[75.37105560 79.11218262]
[86.39210510 89.28751373]
[93.55339813 87.05910492]
[94.80027771 72.11101532]
[81.02594757 65.78300476]
[70.24880981 55.12331009]
[63.77024460 41.41915131]
[62.37257385 26.32536697]
[66.22457123 11.66460609]
[74.86109924 -0.79277271]
[87.23923492 -9.54248047]
[101.86428070 -13.52794743]
[116.97017670 -12.26791000]
[130.73281860 -5.91452217]
[141.49029541 4.76501226]
[147.94358826 18.48108864]
[149.31344604 33.57742310]
[145.43443298 48.23106003]
[136.77496338 60.67250061]
[124.38072205 69.39938354]
[109.74835968 73.35789490]
[108.50148773 88.30597687]
[122.34470367 94.08225250]
[132.09236145 82.68122864]
[141.84001160 71.28021240]
[144.30329895 55.06711960]
[159.67236328 49.34665298]
[172.13684082 60.00352859]
[168.87432861 76.07487488]
[153.24102783 81.02786255]
[143.49337769 92.42887878]
[133.74572754 103.82990265]
[128.55030823 117.90142059]
[128.55030823 132.90142822]
[128.55030823 147.90142822]
[128.55030823 162.90142822]
[128.55030823 177.90142822]
[137.68472290 181.97534180]
[144.85031128 189.20198059]
[148.98686218 198.69175720]
[149.41831970 209.21028137]
[145.95988464 219.33868408]
[138.95997620 227.66505432]
[129.26919556 232.98100281]
[118.13822174 234.45616150]
[121.84438324 248.99110413]
[125.55054474 263.52603149]
[129.25669861 278.06097412]
[132.96286011 292.59591675]
[136.66902161 307.13082886]
[146.76766968 318.22216797]
[160.89248657 323.27090454]
[175.01728821 328.31967163]
[189.14208984 333.36843872]
[205.16954041 329.89675903]
[215.98796082 342.22128296]
[210.46827698 357.66357422]
[194.28866577 360.33795166]
[184.09332275 347.49322510]
[169.96852112 342.44445801]
[155.84371948 337.39572144]
[141.71891785 332.34695435]
[136.53997803 345.52499390]
[125.78330231 352.30865479]
[126.40727997 367.29565430]
[127.03125763 382.28268433]
[127.65523529 397.26968384]
[128.27920532 412.25671387]
[128.90318298 427.24371338]
[129.52716064 442.23074341]
[130.15113831 457.21774292]
[130.77511597 472.20477295]
[131.39909363 487.19177246]
[132.02307129 502.17880249]
[146.71931458 505.63177490]
[159.93843079 512.92266846]
[170.69947815 523.51055908]
[178.20388794 536.60961914]
[181.89482117 551.24792480]
[181.49835205 566.33917236]
[177.04393005 580.76348877]
[168.86207581 593.45050049]
[157.55996704 603.45867920]
[143.97627258 610.04547119]
[129.11898804 612.72204590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[30 46]
[31 45]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 64]
[55 63]
[56 62]
[68 87]
[69 86]
[88 97]
[89 96]
[90 95]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
