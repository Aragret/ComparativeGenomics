%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUUCAUGGGGGGGGGGGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCxxxxxxxxxxGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACCCCCCCCCCCAAUAUUCAUG\
) } def
/len { sequence length } bind def

/coor [
[82.13015747 416.74932861]
[69.25688171 408.84643555]
[59.13258743 397.63595581]
[52.57800293 384.02661133]
[50.12448120 369.12167358]
[51.97092056 354.12942505]
[57.96763229 340.26522827]
[67.62849426 328.65298462]
[80.17034149 320.23400879]
[94.57646179 315.69085693]
[94.26440430 300.69409180]
[93.95234680 285.69735718]
[93.64028931 270.70059204]
[93.32823944 255.70384216]
[93.01618195 240.70709229]
[92.70412445 225.71034241]
[92.39206696 210.71357727]
[92.08000946 195.71682739]
[91.76795197 180.72007751]
[91.45590210 165.72332764]
[88.64310455 161.79092407]
[88.31480408 156.03562927]
[91.45590210 150.09921265]
[91.76795197 135.10246277]
[92.08000946 120.10570526]
[78.81591797 111.56838989]
[73.84532928 94.81045532]
[59.07927704 97.44932556]
[44.31322098 100.08818817]
[29.54716492 102.72705078]
[14.78110981 105.36591339]
[2.59862185 116.34403229]
[-12.91431713 111.02606201]
[-15.79932499 94.88268280]
[-3.08855391 84.52081299]
[12.14224529 90.59986115]
[26.90830040 87.96099854]
[41.67435455 85.32212830]
[56.44041061 82.68326569]
[71.20646667 80.04440308]
[82.19213104 69.83092499]
[85.89829254 55.29598618]
[89.60445404 40.76105118]
[89.91651154 25.76429558]
[86.81819153 11.08777046]
[83.71986389 -3.58875489]
[80.62154388 -18.26527977]
[70.20060730 -30.16967583]
[75.14217377 -44.22066116]
[72.04385376 -58.89718628]
[57.04107666 -58.01718903]
[42.07472229 -59.38317108]
[27.47914505 -62.96461487]
[13.58041096 -68.68150330]
[0.68902618 -76.40613556]
[-10.90701199 -85.96591949]
[-20.94864464 -97.14730072]
[-29.21153450 -109.70047760]
[-35.51108932 -123.34501648]
[-39.70657349 -137.77607727]
[-41.70425797 -152.67127991]
[-41.45951462 -167.69784546]
[-38.97781372 -182.52008057]
[-34.31459045 -196.80685425]
[-27.57402611 -210.23899841]
[-18.90670967 -222.51643372]
[-8.50626945 -233.36486816]
[3.39494348 -242.54194641]
[16.53105164 -249.84265137]
[30.60859108 -255.10388184]
[45.31306076 -258.20809937]
[60.31595993 -259.08596802]
[75.28211975 -257.71786499]
[89.87718964 -254.13433838]
[103.77510834 -248.41546631]
[116.66539001 -240.68899536]
[128.26007080 -231.12756348]
[138.30010986 -219.94474792]
[146.56121826 -207.39039612]
[152.85882568 -193.74496460]
[157.05224609 -179.31330872]
[159.04782104 -164.41781616]
[158.80093384 -149.39128113]
[156.31712341 -134.56939697]
[151.65185547 -120.28328705]
[144.90937805 -106.85210419]
[136.24032593 -94.57590485]
[125.83833313 -83.72895813]
[113.93581390 -74.55357361]
[100.79866791 -67.25473785]
[86.72037506 -61.99551010]
[89.81870270 -47.31898117]
[100.01802826 -36.46435165]
[95.29807281 -21.36360168]
[98.39639282 -6.68707657]
[101.49471283 7.98944902]
[104.59303284 22.66597366]
[109.54660797 8.50751114]
[117.93494415 -3.92775822]
[129.20748901 -13.82369614]
[142.62443542 -20.53082466]
[157.30520630 -23.60894775]
[172.28630066 -22.85604668]
[186.58448792 -18.32153511]
[199.26138306 -10.30301571]
[209.48495483 0.67324793]
[216.58425903 13.88687515]
[220.09333801 28.47064400]
[219.78190613 43.46741104]
[215.67039490 57.89292526]
[208.02864075 70.80043030]
[197.35818481 81.34278870]
[184.35932922 88.82810211]
[169.88522339 92.76510620]
[154.88578796 92.89540100]
[140.34545898 89.21044922]
[127.21852875 81.95208740]
[116.36653900 71.59669495]
[108.50170135 58.82389832]
[104.13938904 44.46721268]
[100.43322754 59.00214767]
[96.72706604 73.53708649]
[111.46109772 77.04904938]
[121.36745453 87.72467041]
[123.58192444 101.52912140]
[117.99468231 113.70673370]
[107.07676697 120.41775513]
[106.76470947 135.41450500]
[106.45265198 150.41127014]
[106.45265198 165.41127014]
[106.76470947 180.40802002]
[107.07676697 195.40476990]
[107.38882446 210.40151978]
[107.70087433 225.39828491]
[108.01293182 240.39503479]
[108.32498932 255.39178467]
[108.63704681 270.38854980]
[108.94910431 285.38528442]
[109.26116180 300.38204956]
[109.57321167 315.37881470]
[124.15585327 319.31875610]
[137.03706360 327.20870972]
[147.17260742 338.40902710]
[153.74085999 352.01177979]
[156.20936584 366.91424561]
[154.37799072 381.90832520]
[148.39520264 395.77853394]
[138.74601746 407.40048218]
[126.21263123 415.83203125]
[111.81108093 420.38967896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 129]
[24 128]
[25 127]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[41 122]
[42 121]
[43 120]
[44 97]
[45 96]
[46 95]
[47 94]
[49 92]
[50 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
