%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGCUUCGAAGCGGGGGGGGGGGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUxxxxxxxxxxUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUCCCCCCCCCCUUGGCUUCGAAGC\
) } def
/len { sequence length } bind def

/coor [
[154.21672058 649.53381348]
[139.55505371 646.10900879]
[125.92601776 639.71032715]
[113.92540741 630.61749268]
[104.07783508 619.22808838]
[96.81379700 606.03991699]
[92.45083618 591.62957764]
[91.17970276 576.62701416]
[93.05594635 561.68798828]
[97.99755859 547.46569824]
[105.78850555 534.58178711]
[116.08819580 523.59954834]
[128.44638062 514.99902344]
[142.32281494 509.15621948]
[157.11088562 506.32656860]
[157.41101074 491.32955933]
[157.71115112 476.33258057]
[158.01127625 461.33557129]
[158.31140137 446.33856201]
[158.61154175 431.34158325]
[158.91166687 416.34457397]
[159.21180725 401.34759521]
[159.51193237 386.35058594]
[159.81207275 371.35357666]
[160.11219788 356.35659790]
[158.16670227 341.48327637]
[154.01933289 327.06805420]
[149.87194824 312.65280151]
[145.72456360 298.23754883]
[141.57717896 283.82232666]
[129.51268005 279.20556641]
[122.21571350 268.31082153]
[122.54848480 255.00741577]
[130.61380005 244.17839050]
[126.75568390 229.68304443]
[122.89756012 215.18769836]
[119.03944397 200.69236755]
[108.28889465 190.38337708]
[112.21636963 175.05740356]
[108.35825348 160.56205750]
[104.50012970 146.06672668]
[90.60677338 145.89920044]
[77.22220612 141.58551025]
[65.57019043 133.41587830]
[56.74643326 122.03747559]
[51.61589813 108.40385437]
[50.72870255 93.69539642]
[54.26290512 79.21715546]
[61.99983215 66.28305054]
[50.43448639 56.73094177]
[38.86913681 47.17883682]
[27.30378914 37.62673187]
[15.73844147 28.07462502]
[0.03125266 29.82384682]
[-12.25994492 19.88895798]
[-13.84300232 4.16415405]
[-3.77871990 -8.02131939]
[11.96194267 -9.43803596]
[24.04032898 0.75451624]
[25.29054642 16.50927734]
[36.85589600 26.06138420]
[48.42124176 35.61349106]
[59.98659134 45.16559601]
[71.55194092 54.71770096]
[85.24697113 48.59837723]
[85.84711456 33.61038589]
[86.44725800 18.62239838]
[71.96378326 14.44001675]
[58.90242767 6.91243649]
[48.02256775 -3.52270031]
[39.95674133 -16.25870895]
[35.17388535 -30.55513191]
[33.95207214 -45.58079529]
[36.36233139 -60.46213150]
[42.26453781 -74.33395386]
[51.31554413 -86.38977051]
[62.98913193 -95.92867279]
[76.60662079 -102.39608765]
[91.37630463 -105.41600800]
[106.43949127 -104.81285095]
[120.92043304 -100.62168884]
[133.97721863 -93.08619690]
[144.85075378 -82.64446259]
[152.90885925 -69.90356445]
[157.68304443 -55.60424805]
[158.89573669 -40.57784271]
[156.47645569 -25.69797516]
[150.56584167 -11.82973480]
[141.50753784 0.22059384]
[129.82817078 9.75242138]
[116.20675659 16.21158028]
[101.43524933 19.22254181]
[100.83510590 34.21053314]
[100.23496246 49.19852066]
[115.16188812 52.03927231]
[128.43618774 59.11882782]
[138.89930725 69.71787262]
[145.66850281 82.81480408]
[148.21093750 97.18379974]
[146.38476562 111.50939941]
[140.44395447 124.50692749]
[131.00737000 135.03768921]
[118.99547577 142.20860291]
[122.85359192 156.70394897]
[126.71170807 171.19927979]
[137.73822021 182.54507446]
[133.53479004 196.83424377]
[137.39289856 211.32957458]
[141.25102234 225.82492065]
[145.10914612 240.32026672]
[160.38656616 248.78686523]
[164.75521851 265.35000610]
[155.99241638 279.67492676]
[160.13980103 294.09017944]
[164.28718567 308.50543213]
[168.43457031 322.92065430]
[172.58195496 337.33590698]
[176.84590149 322.95471191]
[185.93969727 311.02563477]
[198.67750549 303.10424805]
[213.39828491 300.22354126]
[228.18243408 302.75909424]
[241.10206604 310.38034058]
[250.47242737 322.09341431]
[255.07164001 336.37094116]
[254.29992676 351.35107422]
[248.25794983 365.08038330]
[237.73356628 375.76858521]
[224.09919739 382.02188110]
[209.13276672 383.02484131]
[194.78591919 378.64669800]
[182.92953491 369.45834351]
[175.10919189 356.65673828]
[174.80906677 371.65371704]
[174.50892639 386.65072632]
[174.20880127 401.64770508]
[173.90867615 416.64471436]
[173.60853577 431.64172363]
[173.30841064 446.63870239]
[173.00827026 461.63571167]
[172.70814514 476.63269043]
[172.40800476 491.62969971]
[172.10787964 506.62670898]
[186.77088928 510.04574585]
[200.40243530 516.43908691]
[212.40663147 525.52716064]
[222.25868225 536.91265869]
[229.52790833 550.09796143]
[233.89653015 564.50659180]
[235.17356873 579.50872803]
[233.30320740 594.44842529]
[228.36718750 608.67266846]
[220.58131409 621.55963135]
[210.28593445 632.54595947]
[197.93113708 641.15136719]
[184.05700684 646.99957275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[34 110]
[35 109]
[36 108]
[37 107]
[39 105]
[40 104]
[41 103]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[65 94]
[66 93]
[67 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
