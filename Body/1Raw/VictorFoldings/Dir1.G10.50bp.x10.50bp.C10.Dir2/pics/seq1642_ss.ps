%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAAACUAGGGGGGGGGGCGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUxxxxxxxxxxAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCCCCCCCCCCCAGUAAACUA\
) } def
/len { sequence length } bind def

/coor [
[122.96615601 599.28259277]
[109.12021637 593.26654053]
[97.41156006 583.73712158]
[88.70903015 571.40148926]
[83.65843201 557.17492676]
[82.63453674 542.11328125]
[85.71334076 527.33410645]
[92.66635895 513.93420410]
[102.97764587 502.90783691]
[115.88202667 495.07333374]
[130.42192078 491.01202393]
[130.42192078 476.01202393]
[130.42192078 461.01202393]
[130.42192078 446.01202393]
[130.42192078 431.01202393]
[130.42192078 416.01202393]
[130.42192078 401.01202393]
[130.42192078 386.01202393]
[130.42192078 371.01202393]
[130.42192078 356.01202393]
[130.42192078 341.01202393]
[122.68461609 328.28475952]
[130.42192078 314.48458862]
[122.68461609 301.75732422]
[130.42192078 287.95715332]
[128.86433411 273.03823853]
[125.76601410 258.36169434]
[122.66768646 243.68518066]
[119.56936646 229.00865173]
[116.47104645 214.33212280]
[113.37272644 199.65559387]
[110.27439880 184.97908020]
[100.07507324 174.12443542]
[104.79502869 159.02369690]
[91.14396667 153.12568665]
[83.49299622 140.16703796]
[84.95671844 125.01082611]
[95.18242645 113.48949432]
[85.98494720 102.95867920]
[90.14104462 89.60883331]
[87.04272461 74.93230438]
[83.94440460 60.25577927]
[80.84607697 45.57925415]
[77.74775696 30.90272713]
[74.64943695 16.22620201]
[71.09467316 1.65349901]
[67.08693695 -12.80118942]
[63.07919312 -27.25587845]
[51.93600845 -38.48708344]
[55.99151993 -52.81893921]
[51.98377991 -67.27362823]
[40.84059525 -78.50483704]
[44.89610672 -92.83669281]
[38.83309555 -106.55674744]
[30.84317780 -119.25167847]
[23.57541847 -124.89361572]
[22.82227898 -132.29486084]
[15.09819412 -145.15325928]
[7.37410927 -158.01167297]
[-0.34997579 -170.87007141]
[-14.94664288 -178.34465027]
[-15.50145245 -194.73440552]
[-1.44366360 -203.17897034]
[12.76527596 -194.99128723]
[12.50842667 -178.59416199]
[20.23251152 -165.73574829]
[27.95659637 -152.87734985]
[35.68068314 -140.01895142]
[43.53810883 -127.24159241]
[51.52802277 -114.54666138]
[51.92512512 -129.54139709]
[57.93246078 -143.28591919]
[68.66795349 -153.76205444]
[82.55525208 -159.43153381]
[97.55522156 -159.46186829]
[111.46533966 -153.84863281]
[122.24312592 -143.41601562]
[128.30603027 -129.69592285]
[128.76379395 -114.70290375]
[123.54920197 -100.63848114]
[113.42794800 -89.56778717]
[99.88617706 -83.11638641]
[84.91230011 -82.23158264]
[70.70499420 -87.04327393]
[59.35079575 -96.84442902]
[70.20732117 -86.64712524]
[66.43846893 -71.28137207]
[70.44621277 -56.82667923]
[81.30273438 -46.62937164]
[77.53388214 -31.26361847]
[81.54162598 -16.80892944]
[85.54936218 -2.35424137]
[88.48764038 -0.29657078]
[90.54743958 3.31714106]
[90.99444580 8.04499149]
[89.32596588 13.12788010]
[92.42428589 27.80440521]
[95.52260590 42.48093033]
[98.62092590 57.15745544]
[101.71925354 71.83398438]
[104.81757355 86.51050568]
[114.01505280 97.04132080]
[109.85895538 110.39116669]
[123.86903381 116.79615021]
[131.33401489 130.06744385]
[129.57380676 145.01287842]
[119.47155762 155.92536926]
[129.89248657 167.82977295]
[124.95092773 181.88075256]
[128.04925537 196.55728149]
[131.14756775 211.23381042]
[134.24589539 225.91032410]
[137.34420776 240.58685303]
[140.44253540 255.26338196]
[143.54086304 269.93991089]
[150.27323914 256.53561401]
[162.72964478 248.17871094]
[177.68577576 247.03234863]
[191.27027893 253.39326477]
[199.96685791 265.61495972]
[201.52441406 280.53387451]
[195.53977966 294.28829956]
[183.56207275 303.31793213]
[168.69168091 305.28549194]
[154.77775574 299.68170166]
[145.42192078 287.95715332]
[153.15921021 301.75732422]
[145.42192078 314.48458862]
[153.15921021 328.28475952]
[145.42192078 341.01202393]
[145.42192078 356.01202393]
[145.42192078 371.01202393]
[145.42192078 386.01202393]
[145.42192078 401.01202393]
[145.42192078 416.01202393]
[145.42192078 431.01202393]
[145.42192078 446.01202393]
[145.42192078 461.01202393]
[145.42192078 476.01202393]
[145.42192078 491.01202393]
[159.96180725 495.07333374]
[172.86618042 502.90783691]
[183.17745972 513.93420410]
[190.13049316 527.33410645]
[193.20928955 542.11328125]
[192.18539429 557.17492676]
[187.13479614 571.40148926]
[178.43226624 583.73712158]
[166.72360229 593.26654053]
[152.87767029 599.28259277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[25 126]
[26 115]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[34 107]
[38 103]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[46 92]
[47 91]
[48 90]
[50 88]
[51 87]
[53 85]
[54 70]
[55 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
