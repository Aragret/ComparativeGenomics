%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCCAACGGGGGGGGGGACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAxxxxxxxxxxAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAACCCCCCCCCCUCAACACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.85525513]
[71.19830322 364.83923340]
[59.48964310 355.30981445]
[50.78712082 342.97415161]
[45.73651886 328.74765015]
[44.71262741 313.68594360]
[47.79142761 298.90679932]
[54.74444962 285.50686646]
[65.05573273 274.48052979]
[77.96011353 266.64602661]
[92.50000000 262.58471680]
[92.50000000 247.58471680]
[92.50000000 232.58471680]
[92.50000000 217.58471680]
[92.50000000 202.58471680]
[92.50000000 187.58471680]
[92.50000000 172.58471680]
[92.50000000 157.58471680]
[92.50000000 142.58471680]
[92.50000000 127.58470917]
[76.10044861 115.68368530]
[71.70906830 95.90248871]
[81.53227234 78.18006897]
[75.18514252 64.58911896]
[62.33522797 55.35926056]
[63.96026993 40.55356979]
[57.61314011 26.96261787]
[51.26601028 13.37166786]
[44.91888046 -0.21928331]
[38.41014099 -6.72221565]
[38.58437347 -14.15964127]
[32.52135849 -27.87969398]
[26.45834541 -41.59974670]
[13.38567543 -45.00017929]
[4.79960918 -55.17404175]
[3.67815781 -68.24372864]
[10.20857811 -79.39497375]
[4.43230534 -93.23819733]
[-2.87001824 -92.69704437]
[-10.32087326 -94.47810364]
[-17.17114639 -98.60923004]
[-22.67331314 -104.87484741]
[-26.16060448 -112.82118988]
[-27.12257576 -121.78713989]
[-40.90495682 -127.70709991]
[-57.11775589 -125.24189758]
[-67.14636230 -138.21722412]
[-60.67420197 -153.28517151]
[-44.35928345 -154.94514465]
[-34.98499298 -141.48948669]
[-21.20261192 -135.56951904]
[-9.31023312 -144.71125793]
[-11.48707008 -159.55245972]
[-13.66390705 -174.39366150]
[-15.84074402 -189.23486328]
[-18.01758003 -204.07608032]
[-33.04917145 -204.74520874]
[-47.68242645 -208.24725342]
[-61.38836288 -214.45562744]
[-73.67151642 -223.14588928]
[-84.08786011 -234.00389099]
[-92.26084900 -246.63713074]
[-97.89503479 -260.58892822]
[-100.78675079 -275.35491943]
[-100.83145905 -290.40133667]
[-98.02754211 -305.18423462]
[-92.47635651 -319.16925049]
[-84.37857819 -331.85083008]
[-74.02693939 -342.77053833]
[-61.79564285 -351.53366089]
[-48.12684250 -357.82336426]
[-33.51465607 -361.41229248]
[-18.48730659 -362.17074585]
[-3.58802152 -360.07125854]
[10.64459896 -355.18975830]
[23.69605446 -347.70269775]
[35.09454346 -337.88073730]
[44.42801666 -326.07894897]
[51.35907364 -312.72390747]
[55.63716507 -298.29843140]
[57.10763550 -283.32397461]
[55.71733475 -268.34185791]
[51.51651382 -253.89369202]
[44.65703583 -240.50175476]
[35.38686371 -228.65014648]
[24.04110909 -218.76731873]
[11.02991390 -211.21051025]
[-3.17637491 -206.25291443]
[-0.99953806 -191.41171265]
[1.17729890 -176.57049561]
[3.35413575 -161.72929382]
[5.53097296 -146.88809204]
[28.37306595 -125.00958252]
[18.27552223 -99.01446533]
[24.05179596 -85.17124939]
[39.84427261 -79.47427368]
[46.79551315 -63.82293320]
[40.17839813 -47.66276169]
[46.24141312 -33.94270706]
[52.30442429 -20.22265434]
[58.50983429 -6.56641293]
[64.85696411 7.02453804]
[71.20409393 20.61548805]
[77.55122375 34.20643997]
[89.94715118 42.46417999]
[88.77610016 58.24198532]
[95.12322235 71.83293915]
[107.42539978 72.39511108]
[118.34947968 78.08053589]
[125.86804199 87.83403778]
[128.58570862 99.84544373]
[143.08129883 103.70260620]
[157.57690430 107.55976105]
[172.07249451 111.41692352]
[182.85704041 100.48123932]
[197.66882324 96.41841125]
[212.52355957 100.32131958]
[223.42536926 111.14009094]
[227.44175720 125.96453857]
[223.49230957 140.80696106]
[212.63941956 151.67481995]
[197.80245972 155.64471436]
[182.97248840 151.64875793]
[172.13870239 140.76185608]
[168.21533203 125.91252136]
[153.71974182 122.05535889]
[139.22413635 118.19819641]
[124.72854614 114.34104156]
[120.21205902 120.21482086]
[114.33765411 124.73050690]
[107.50000000 127.58470917]
[107.50000000 142.58471680]
[107.50000000 157.58471680]
[107.50000000 172.58471680]
[107.50000000 187.58471680]
[107.50000000 202.58471680]
[107.50000000 217.58471680]
[107.50000000 232.58471680]
[107.50000000 247.58471680]
[107.50000000 262.58471680]
[122.03988647 266.64602661]
[134.94427490 274.48052979]
[145.25555420 285.50686646]
[152.20857239 298.90679932]
[155.28736877 313.68594360]
[154.26348877 328.74765015]
[149.21287537 342.97415161]
[140.51036072 355.30981445]
[128.80169678 364.83923340]
[114.95575714 370.85525513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 107]
[24 106]
[26 104]
[27 103]
[28 102]
[29 101]
[31 100]
[32 99]
[33 98]
[37 95]
[38 94]
[44 51]
[45 50]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[111 128]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
