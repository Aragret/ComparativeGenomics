%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGUAGAAGGGGGGGGGGGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACxxxxxxxxxxAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUACCCCCCCCCCAAUAGGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[302.06756592 231.85060120]
[293.75314331 219.35957336]
[286.25610352 206.36148071]
[279.60729980 192.90975952]
[273.83398438 179.05969238]
[268.95989990 164.86817932]
[265.00509644 150.39352417]
[261.98583984 135.69525146]
[259.91448975 120.83370972]
[258.79959106 105.87000275]
[243.80036926 106.02399445]
[228.80116272 106.17799377]
[213.80194092 106.33199310]
[201.15478516 114.19954681]
[187.27590942 106.60433197]
[172.27668762 106.75833130]
[157.27748108 106.91233063]
[142.27827454 107.06632233]
[127.27906036 107.22032166]
[112.27985382 107.37432098]
[100.14705658 114.32318878]
[87.87414551 107.62489319]
[74.15412903 115.50346375]
[61.34809494 107.89723206]
[46.34888840 108.05123138]
[31.42786980 109.58852386]
[16.71234703 112.49599457]
[1.99682498 115.40346527]
[-12.71869755 118.31094360]
[-27.43421936 121.21841431]
[-36.02214813 134.48577881]
[-51.49345016 137.71290588]
[-64.66928101 128.98518372]
[-67.73265076 113.48062897]
[-58.86611557 100.39780426]
[-43.33003616 97.49853516]
[-30.34169197 106.50289154]
[-15.62617016 103.59542084]
[-0.91064739 100.68794250]
[13.80487537 97.78047180]
[28.52039719 94.87300110]
[15.44709015 87.51850128]
[8.29638767 74.33262634]
[9.26378727 59.36384964]
[18.05226517 47.20808411]
[31.96347427 41.59753799]
[46.72622681 44.25482941]
[57.80787277 54.36408615]
[61.80599594 68.82143402]
[57.49304199 83.18801117]
[46.19488907 93.05202484]
[61.19409943 92.89802551]
[73.84126282 85.03047180]
[87.72014618 92.62567902]
[99.85294342 85.67681122]
[112.12585449 92.37510681]
[127.12506866 92.22111511]
[142.12428284 92.06711578]
[157.12348938 91.91311646]
[172.12269592 91.75911713]
[187.12190247 91.60512543]
[200.84191895 83.72655487]
[213.64794922 91.33277893]
[228.64715576 91.17878723]
[243.64637756 91.02478790]
[258.64556885 90.87078857]
[259.45303345 75.88734436]
[261.21878052 60.98641205]
[263.93563843 46.22923279]
[267.59243774 31.67644310]
[272.17410278 17.38784599]
[277.66180420 3.42215538]
[284.03305054 -10.16323948]
[291.26162720 -23.31251335]
[299.31784058 -35.97163391]
[308.16854858 -48.08857727]
[317.77743530 -59.61355972]
[328.10498047 -70.49921417]
[339.10873413 -80.70081329]
[350.74353027 -90.17643738]
[362.96151733 -98.88714600]
[375.71249390 -106.79714203]
[388.94409180 -113.87392426]
[402.60189819 -120.08841705]
[416.62982178 -125.41507721]
[430.97018433 -129.83201599]
[445.56408691 -133.32109070]
[460.35156250 -135.86796570]
[475.27182007 -137.46215820]
[490.26354980 -138.09712219]
[505.26519775 -137.77026367]
[520.21502686 -136.48291016]
[535.05169678 -134.24035645]
[549.71423340 -131.05181885]
[564.14233398 -126.93040466]
[578.27667236 -121.89304352]
[592.05926514 -115.96043396]
[605.43347168 -109.15695953]
[618.34423828 -101.51057434]
[630.73858643 -93.05269623]
[642.56555176 -83.81809235]
[653.77661133 -73.84468842]
[664.32556152 -63.17349243]
[674.16918945 -51.84833908]
[683.26696777 -39.91576767]
[691.58154297 -27.42481995]
[699.07867432 -14.42681599]
[705.72766113 -0.97517157]
[711.50115967 12.87483788]
[716.37536621 27.06629944]
[720.33032227 41.54089737]
[723.34973145 56.23915100]
[725.42126465 71.10066223]
[726.53631592 86.06436157]
[726.69036865 101.06875610]
[725.88281250 116.05219269]
[724.11682129 130.95310974]
[721.39984131 145.71025085]
[717.74291992 160.26300049]
[713.16107178 174.55154419]
[707.67315674 188.51718140]
[701.30181885 202.10250854]
[694.07305908 215.25169373]
[686.01672363 227.91073608]
[677.16589355 240.02757263]
[667.55688477 251.55244446]
[657.22918701 262.43798828]
[646.22534180 272.63946533]
[634.59045410 282.11495972]
[622.37237549 290.82553101]
[609.62127686 298.73538208]
[596.38958740 305.81204224]
[582.73175049 312.02636719]
[568.70373535 317.35287476]
[554.36334229 321.76965332]
[539.76940918 325.25857544]
[524.98193359 327.80526733]
[510.06161499 329.39929199]
[495.06985474 330.03408813]
[480.06823730 329.70706177]
[465.11840820 328.41955566]
[450.28176880 326.17684937]
[435.61929321 322.98815918]
[421.19125366 318.86657715]
[407.05694580 313.82904053]
[393.27441406 307.89630127]
[379.90029907 301.09265137]
[366.98962402 293.44613647]
[354.59533691 284.98812866]
[342.76846313 275.75338745]
[331.55755615 265.77984619]
[321.00869751 255.10853577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 66]
[11 65]
[12 64]
[13 63]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[22 54]
[24 52]
[25 51]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
