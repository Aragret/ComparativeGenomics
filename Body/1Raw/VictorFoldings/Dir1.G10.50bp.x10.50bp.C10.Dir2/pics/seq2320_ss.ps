%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACACCCAUAGGGGGGGGGGGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCxxxxxxxxxxCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACCCCCCCCCCCUAACACCCUUA\
) } def
/len { sequence length } bind def

/coor [
[105.81584167 395.86102295]
[91.79389954 390.30801392]
[79.59394073 381.44168091]
[69.98287201 369.81936646]
[63.56484604 356.17169189]
[60.74330902 341.35650635]
[61.69562531 326.30511475]
[66.36193085 311.96368408]
[74.44889832 299.23373413]
[85.44817352 288.91546631]
[98.66833496 281.65750122]
[113.27834320 277.91604614]
[113.27834320 262.91604614]
[113.27834320 247.91604614]
[113.27834320 232.91604614]
[113.27834320 217.91604614]
[113.27834320 202.91604614]
[113.27834320 187.91604614]
[113.27834320 172.91604614]
[113.27834320 157.91604614]
[113.27834320 142.91604614]
[113.27834320 127.91605377]
[113.27834320 112.91605377]
[99.93923187 116.97467804]
[88.86594391 110.67619324]
[74.35732269 114.48405457]
[59.84869385 118.29191589]
[55.17378998 132.99391174]
[43.27794266 142.81697083]
[27.95708084 144.62657166]
[14.10002995 137.84530640]
[6.12852764 124.63702393]
[6.58624983 109.21644592]
[15.32713985 96.50423431]
[29.56200981 90.55680084]
[44.74856949 93.27194977]
[56.04083633 103.78328705]
[70.54946136 99.97542572]
[85.05808258 96.16757202]
[92.25128937 85.47981262]
[105.82173157 83.50608063]
[117.04750061 92.75283051]
[122.46612549 78.76574707]
[116.29045868 73.39392853]
[111.53703308 66.76882172]
[108.45009613 59.25539780]
[107.18254089 51.26354599]
[107.78845215 43.22570801]
[110.22091675 35.57348251]
[98.06758118 26.78164101]
[85.91425323 17.98979950]
[69.55488586 16.84826469]
[62.60795212 1.99322474]
[72.21987152 -11.29372883]
[88.50271606 -9.34411716]
[94.70609283 5.83646631]
[106.85942841 14.62830830]
[119.01276398 23.42015076]
[136.28984070 15.18116474]
[155.30123901 17.40497780]
[163.96784973 5.16202354]
[172.63444519 -7.08092976]
[181.30105591 -19.32388306]
[170.05522156 -29.27267265]
[159.95098877 -40.37904739]
[151.10681152 -52.51279449]
[143.62638855 -65.53165436]
[137.59744263 -79.28297424]
[133.09063721 -93.60554504]
[130.15881348 -108.33142853]
[128.83636475 -123.28797913]
[129.13876343 -138.29983521]
[131.06250000 -153.19099426]
[134.58500671 -167.78684998]
[139.66497803 -181.91629028]
[146.24284363 -195.41365051]
[154.24151611 -208.12068176]
[163.56716919 -219.88841248]
[174.11050415 -230.57884216]
[185.74789429 -240.06665039]
[198.34288025 -248.24060059]
[211.74781799 -255.00483704]
[225.80552673 -260.28009033]
[240.35118103 -264.00445557]
[255.21426392 -266.13433838]
[270.22048950 -266.64468384]
[285.19390869 -265.52957153]
[299.95901489 -262.80206299]
[314.34265137 -258.49414062]
[328.17617798 -252.65626526]
[341.29742432 -245.35694885]
[353.55252075 -236.68173218]
[364.79785156 -226.73233032]
[374.90148926 -215.62541199]
[383.74499512 -203.49119568]
[391.22470093 -190.47193909]
[397.25292969 -176.72027588]
[401.75897217 -162.39747620]
[404.69000244 -147.67143250]
[406.01162720 -132.71481323]
[405.70843506 -117.70297241]
[403.78387451 -102.81192017]
[400.26058960 -88.21624756]
[395.17987061 -74.08707428]
[388.60125732 -60.59006882]
[380.60192871 -47.88346863]
[371.27563477 -36.11625290]
[360.73171997 -25.42638588]
[349.09381104 -15.93920231]
[336.49838257 -7.76593494]
[323.09307861 -1.00241005]
[309.03509521 4.27207327]
[294.48925781 7.99567413]
[279.62606812 10.12473583]
[264.61981201 10.63429546]
[249.64642334 9.51837921]
[234.88148499 6.79007006]
[220.49807739 2.48135686]
[206.66487122 -3.35724330]
[193.54400635 -10.65727615]
[184.87741089 1.58567750]
[176.21080017 13.82863140]
[167.54418945 26.07158470]
[175.62255859 40.89617920]
[175.73088074 57.85709000]
[167.76921082 72.92242432]
[153.56478882 82.47579193]
[136.45321655 84.18437195]
[131.03459167 98.17145538]
[128.27835083 112.91605377]
[128.27835083 127.91605377]
[128.27835083 142.91604614]
[128.27835083 157.91604614]
[128.27835083 172.91604614]
[128.27835083 187.91604614]
[128.27835083 202.91604614]
[128.27835083 217.91604614]
[128.27835083 232.91604614]
[128.27835083 247.91604614]
[128.27835083 262.91604614]
[128.27835083 277.91604614]
[142.88835144 281.65750122]
[156.10852051 288.91546631]
[167.10778809 299.23373413]
[175.19476318 311.96368408]
[179.86106873 326.30511475]
[180.81338501 341.35650635]
[177.99183655 356.17169189]
[171.57382202 369.81936646]
[161.96273804 381.44168091]
[149.76278687 390.30801392]
[135.74084473 395.86102295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[25 39]
[26 38]
[27 37]
[42 129]
[43 128]
[49 58]
[50 57]
[51 56]
[60 123]
[61 122]
[62 121]
[63 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
