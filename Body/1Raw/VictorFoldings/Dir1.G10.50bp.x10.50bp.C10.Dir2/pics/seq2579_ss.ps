%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAAUAUCGGGGGGGGGGUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGxxxxxxxxxxCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGCCCCCCCCCCGCCAAAUAUC\
) } def
/len { sequence length } bind def

/coor [
[-33.33193207 514.78216553]
[-47.17787170 508.76614380]
[-58.88653564 499.23672485]
[-67.58905792 486.90106201]
[-72.63966370 472.67456055]
[-73.66355133 457.61285400]
[-70.58475494 442.83370972]
[-63.63172913 429.43377686]
[-53.32044601 418.40744019]
[-40.41606522 410.57293701]
[-25.87617874 406.51162720]
[-25.87617874 391.51162720]
[-25.87617874 376.51162720]
[-25.87617874 361.51162720]
[-25.87617874 346.51162720]
[-25.87617874 331.51162720]
[-25.87617874 316.51162720]
[-25.87617874 301.51162720]
[-25.87617874 286.51162720]
[-25.87617874 271.51162720]
[-33.79536819 284.25079346]
[-44.14717102 295.10620117]
[-56.49606705 303.62118530]
[-70.32251740 309.43746948]
[-85.04483032 312.31036377]
[-100.04360962 312.11901855]
[-114.68783569 308.87145996]
[-128.36140442 302.70434570]
[-140.48904419 293.87710571]
[-150.56054688 282.76110840]
[-158.15216064 269.82406616]
[-162.94450378 255.61021423]
[-164.73596191 240.71757507]
[-163.45117188 225.77268982]
[-159.14416504 211.40434265]
[-151.99617004 198.21699524]
[-142.30789185 186.76547241]
[-130.48693848 177.53157043]
[-117.03063202 170.90374756]
[-102.50511169 167.16085815]
[-87.52147675 166.46038818]
[-72.71011353 168.83178711]
[-58.69415665 174.17527771]
[-46.06328201 182.26608276]
[-35.34888840 192.76377869]
[-27.00174713 205.22674561]
[-21.37303352 219.13061523]
[-18.69955444 233.89044189]
[-19.09455681 248.89114380]
[-10.84226704 236.36518860]
[-2.58997774 223.83921814]
[5.66231155 211.31326294]
[13.91460037 198.78730774]
[14.97496891 191.42379761]
[22.47113419 186.08906555]
[15.24826717 176.08709717]
[11.45871162 164.32041931]
[11.48715591 151.93405151]
[15.34597874 140.13822937]
[22.67256165 130.09019470]
[32.76330566 122.78062439]
[44.64118958 118.93596649]
[57.15034485 118.94629669]
[69.06855011 122.82576752]
[78.33349609 111.02912903]
[87.59844971 99.23248291]
[92.50000000 85.05592346]
[92.50000000 70.05592346]
[92.50000000 55.05592728]
[92.50000000 40.05592728]
[79.15887451 32.44607544]
[71.42390442 19.17709351]
[71.37576294 3.81827712]
[79.02739716 -9.49893188]
[92.32055664 -17.19227219]
[107.67944336 -17.19227219]
[120.97260284 -9.49893188]
[128.62423706 3.81827712]
[128.57609558 19.17709351]
[120.84112549 32.44607544]
[107.50000000 40.05592728]
[107.50000000 55.05592728]
[107.50000000 70.05592346]
[107.50000000 85.05592346]
[121.51734161 90.39766693]
[135.53343201 95.73895264]
[145.51615906 84.54319000]
[155.49888611 73.34741974]
[165.48159790 62.15165329]
[163.05122375 46.70409012]
[171.16319275 33.33509445]
[185.98728943 28.35710526]
[200.52401733 34.12057114]
[207.90959167 47.90416336]
[204.65675354 63.19968796]
[192.30140686 72.78507233]
[176.67736816 72.13438416]
[166.69464111 83.33014679]
[156.71191406 94.52590942]
[146.72918701 105.72167969]
[150.45664978 112.22983551]
[161.63900757 131.75430298]
[176.34696960 128.80882263]
[191.05493164 125.86333466]
[205.76289368 122.91784668]
[220.47085571 119.97236633]
[232.42231750 108.74318695]
[248.04254150 113.73727417]
[251.26277161 129.81713867]
[238.77030945 140.44120789]
[223.41633606 134.68032837]
[208.70837402 137.62580872]
[194.00041199 140.57128906]
[179.29244995 143.51676941]
[164.58448792 146.46226501]
[118.68054199 139.88159180]
[99.39508820 108.49743652]
[90.13014221 120.29407501]
[80.86518860 132.09071350]
[89.21285248 147.90596008]
[89.84864044 165.72514343]
[82.69168854 181.99885559]
[69.20878601 193.50540161]
[52.11407089 197.98863220]
[34.82270432 194.60014343]
[26.44056320 207.03959656]
[18.18827438 219.56555176]
[9.93598461 232.09152222]
[1.68369508 244.61747742]
[-6.56859398 257.14343262]
[-10.87617874 271.51162720]
[-10.87617874 286.51162720]
[-10.87617874 301.51162720]
[-10.87617874 316.51162720]
[-10.87617874 331.51162720]
[-10.87617874 346.51162720]
[-10.87617874 361.51162720]
[-10.87617874 376.51162720]
[-10.87617874 391.51162720]
[-10.87617874 406.51162720]
[3.66370821 410.57293701]
[16.56808853 418.40744019]
[26.87937355 429.43377686]
[33.83239365 442.83370972]
[36.91119385 457.61285400]
[35.88730240 472.67456055]
[30.83670044 486.90106201]
[22.13417625 499.23672485]
[10.42551517 508.76614380]
[-3.42042375 514.78216553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[55 125]
[64 119]
[65 118]
[66 117]
[67 84]
[68 83]
[69 82]
[70 81]
[86 100]
[87 99]
[88 98]
[89 97]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
