%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGGCCUAGCCGGGGGGGGGGAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACxxxxxxxxxxAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACCCCCCCCCCCUCCAGCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[86.62609863 419.66131592]
[72.35433197 414.85189819]
[59.45034790 407.08651733]
[48.51769257 396.72836304]
[40.06770706 384.26193237]
[34.49561310 370.27029419]
[32.06202316 355.40786743]
[32.88076401 340.36978149]
[36.91353989 325.85943604]
[43.97173309 312.55545044]
[53.72521973 301.08010864]
[65.71780396 291.97009277]
[79.38858032 285.65158081]
[94.09813690 282.42001343]
[94.09813690 267.42001343]
[94.09813690 252.42001343]
[94.09813690 237.42001343]
[94.09813690 222.42001343]
[94.09813690 207.42001343]
[94.09813690 192.42001343]
[94.09813690 177.42001343]
[94.09813690 162.42001343]
[94.09813690 147.42001343]
[90.93553162 140.69351196]
[94.25122070 132.12062073]
[94.55134583 117.12362671]
[84.65646362 105.85015869]
[69.74721527 104.20265198]
[54.83796310 102.55514526]
[49.78022766 116.75077820]
[41.58458328 129.39704895]
[30.69300270 139.81195068]
[17.69285965 147.43382263]
[3.28523397 151.85163879]
[-11.75288868 152.82713318]
[-26.61052132 150.30770874]
[-40.48640823 144.42924500]
[-52.63224411 135.50874329]
[-62.39302063 124.02727509]
[-69.24234772 110.60403442]
[-72.81084442 95.96290588]
[-72.90608215 80.89347839]
[-69.52291107 66.20842743]
[-62.84378433 52.69968796]
[-53.22889709 41.09577560]
[-41.19677734 32.02248001]
[-27.39629173 25.96910286]
[-12.57168865 23.26210213]
[2.47756171 24.04746056]
[16.93987083 28.28282547]
[30.03530693 35.73978806]
[41.05764771 46.01620483]
[49.41247177 58.55788040]
[54.64921570 72.68845367]
[56.48546982 87.64588928]
[71.39472198 89.29339600]
[86.30397034 90.94090271]
[99.99900055 84.82157898]
[108.71836853 72.61614227]
[106.32510376 57.22426224]
[115.34165192 44.97042847]
[130.03019714 42.78366852]
[138.74957275 30.57823372]
[147.46893311 18.37279892]
[156.18830872 6.16736317]
[142.46855164 12.23106861]
[127.70787811 14.89986229]
[112.73345947 14.02418327]
[98.38446808 9.65310669]
[85.46500397 2.03158617]
[74.69908905 -8.41327000]
[66.69003296 -21.09613228]
[61.88666534 -35.30625916]
[60.55816269 -50.24731064]
[62.77898026 -65.08200073]
[68.42465973 -78.97898865]
[77.17881775 -91.15949249]
[88.55087280 -100.94092560]
[101.90354156 -107.77512360]
[116.48853302 -111.27911377]
[131.48852539 -111.25652313]
[146.06289673 -107.70861816]
[159.39491272 -100.83422852]
[170.73745728 -91.01859283]
[179.45487976 -78.81177521]
[185.05868530 -64.89784241]
[187.23480225 -50.05653000]
[185.86129761 -35.11954498]
[181.01515198 -20.92395401]
[172.96916199 -8.26677799]
[186.34106445 -15.06326008]
[199.71296692 -21.85974121]
[213.08486938 -28.65622330]
[226.45678711 -35.45270538]
[239.82868958 -42.24918747]
[236.86117554 -57.05109787]
[237.99836731 -72.10464478]
[243.15588379 -86.29276276]
[251.95097351 -98.56259918]
[263.73101807 -108.00364685]
[277.62182617 -113.91532135]
[292.59262085 -115.85892487]
[307.53250122 -113.69024658]
[321.33276367 -107.57021332]
[332.96939087 -97.95295715]
[341.57885742 -85.55216217]
[346.52227783 -71.28803253]
[347.43280029 -56.21907806]
[344.24288940 -41.46350098]
[337.18920898 -28.11627197]
[326.79525757 -17.16783905]
[313.83230591 -9.43065071]
[299.26226807 -5.47885752]
[284.16635132 -5.60570908]
[269.66479492 -9.80179214]
[256.83367920 -17.75572777]
[246.62516785 -28.87728500]
[233.25326538 -22.08080101]
[219.88136292 -15.28431988]
[206.50946045 -8.48783779]
[193.13754272 -1.69135523]
[179.76564026 5.10512686]
[168.39373779 14.88672924]
[159.67437744 27.09216499]
[150.95500183 39.29759979]
[142.23564148 51.50303650]
[144.92904663 66.10718536]
[136.26023865 78.60944366]
[120.92379761 81.33551025]
[112.20443726 93.54094696]
[116.12871552 104.83692169]
[109.54834747 117.42375946]
[109.24821472 132.42076111]
[109.09813690 147.42001343]
[109.09813690 162.42001343]
[109.09813690 177.42001343]
[109.09813690 192.42001343]
[109.09813690 207.42001343]
[109.09813690 222.42001343]
[109.09813690 237.42001343]
[109.09813690 252.42001343]
[109.09813690 267.42001343]
[109.09813690 282.42001343]
[123.80770111 285.65158081]
[137.47846985 291.97009277]
[149.47106934 301.08010864]
[159.22454834 312.55545044]
[166.28274536 325.85943604]
[170.31552124 340.36978149]
[171.13426208 355.40786743]
[168.70066833 370.27029419]
[163.12857056 384.26193237]
[154.67858887 396.72836304]
[143.74592590 407.08651733]
[130.84194946 414.85189819]
[116.57018280 419.66131592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 133]
[26 132]
[27 57]
[28 56]
[29 55]
[58 130]
[59 129]
[62 126]
[63 125]
[64 124]
[65 123]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
