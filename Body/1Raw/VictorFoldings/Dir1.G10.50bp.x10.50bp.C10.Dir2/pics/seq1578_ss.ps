%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCUCUUGCGGGGGGGGGGUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUxxxxxxxxxxCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCCCCCCCCCCCACCUCUAGC\
) } def
/len { sequence length } bind def

/coor [
[132.72209167 487.61926270]
[118.70014954 482.06625366]
[106.50019073 473.19995117]
[96.88911438 461.57763672]
[90.47109222 447.92993164]
[87.64955139 433.11474609]
[88.60186768 418.06335449]
[93.26817322 403.72192383]
[101.35514069 390.99197388]
[112.35441589 380.67370605]
[125.57457733 373.41574097]
[140.18458557 369.67428589]
[140.18458557 354.67428589]
[140.18458557 339.67428589]
[140.18458557 324.67428589]
[140.18458557 309.67428589]
[140.18458557 294.67428589]
[140.18458557 279.67428589]
[140.18458557 264.67428589]
[140.18458557 249.67430115]
[140.18458557 234.67430115]
[120.75454712 225.80137634]
[110.95806122 207.79405212]
[113.81812286 188.36413574]
[127.16848755 175.15722656]
[123.21187592 160.68846130]
[119.25526428 146.21969604]
[115.29866028 131.75091553]
[111.34204865 117.28215027]
[106.05223846 121.88722992]
[98.98013306 124.72457123]
[90.76023865 125.13829803]
[82.25669861 122.71000671]
[74.47315216 117.33521271]
[68.43842316 109.26580811]
[65.08071899 99.11116791]
[51.65326691 92.42508698]
[38.22581863 85.73901367]
[22.42359734 86.51389313]
[14.47942352 73.91471863]
[1.05197370 67.22863770]
[-14.75024509 68.00351715]
[-22.69441986 55.40433884]
[-36.12186813 48.71826553]
[-49.54932022 42.03218842]
[-62.97676849 35.34611511]
[-77.88024139 40.60559082]
[-92.10134888 33.71098328]
[-97.20296478 18.75273705]
[-90.15838623 4.60531759]
[-75.14704132 -0.33786342]
[-61.07489014 6.85589552]
[-56.29069519 21.91866493]
[-42.86324310 28.60474014]
[-29.43579483 35.29081726]
[-16.00834465 41.97689056]
[-1.16654706 40.72377777]
[7.73804903 53.80118942]
[21.16549873 60.48726654]
[36.00729752 59.23414993]
[44.91189194 72.31156158]
[58.33934402 78.99764252]
[71.76679230 85.68371582]
[78.58028412 82.54901123]
[68.40689087 71.52621460]
[75.74661255 58.44460297]
[90.45602417 61.38283539]
[92.20726013 76.27960968]
[99.02075195 73.14490509]
[102.67945862 58.59794998]
[89.36036682 51.53641129]
[78.11871338 41.49207306]
[69.60807800 29.04890633]
[64.32324219 14.93033886]
[62.57146454 -0.04279440]
[64.45459747 -14.99997520]
[69.86315155 -29.07161140]
[78.48268127 -41.43959808]
[89.81205750 -51.38488007]
[103.19261169 -58.32924271]
[117.84641266 -61.86895752]
[132.92150879 -61.79822922]
[147.54144287 -58.12116623]
[160.85624695 -51.05154800]
[172.09181213 -41.00040054]
[180.59490967 -28.55207634]
[185.87118530 -14.43030643]
[187.61387634 0.54388577]
[185.72167969 15.49992180]
[180.30459595 29.56827736]
[171.67756653 41.93103790]
[160.34216309 51.86944580]
[146.95739746 58.80569839]
[132.30145264 62.33652496]
[117.22640991 62.25665665]
[113.56770325 76.80361176]
[125.25391388 86.20746613]
[138.68136597 79.52139282]
[152.10881042 72.83531952]
[154.54481506 57.51064682]
[165.54696655 46.56842422]
[180.88471985 44.21615601]
[194.66038513 51.35833740]
[201.57693481 65.24864960]
[198.97482300 80.54599762]
[187.85461426 91.36822510]
[172.49226379 93.55397034]
[158.79489136 86.26276398]
[145.36743164 92.94884491]
[131.93998718 99.63491821]
[125.81081390 113.32554626]
[129.76742554 127.79431152]
[133.72402954 142.26307678]
[137.68064880 156.73184204]
[141.63725281 171.20060730]
[155.88697815 173.29643250]
[167.98759460 182.26242065]
[174.70797729 196.47119141]
[173.90220642 212.82701111]
[187.59283447 218.95617676]
[201.28344727 225.08535767]
[215.27253723 218.09683228]
[230.46882629 221.78559875]
[239.69708252 234.40989685]
[238.60002136 250.00895691]
[227.69561768 261.21734619]
[212.13262939 262.74282837]
[199.25939941 253.86511230]
[195.15428162 238.77597046]
[181.46365356 232.64680481]
[167.77302551 226.51762390]
[155.18458557 234.67430115]
[155.18458557 249.67430115]
[155.18458557 264.67428589]
[155.18458557 279.67428589]
[155.18458557 294.67428589]
[155.18458557 309.67428589]
[155.18458557 324.67428589]
[155.18458557 339.67428589]
[155.18458557 354.67428589]
[155.18458557 369.67428589]
[169.79460144 373.41574097]
[183.01475525 380.67370605]
[194.01403809 390.99197388]
[202.10099792 403.72192383]
[206.76730347 418.06335449]
[207.71961975 433.11474609]
[204.89808655 447.92993164]
[198.48005676 461.57763672]
[188.86898804 473.19995117]
[176.66903687 482.06625366]
[162.64709473 487.61926270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 115]
[26 114]
[27 113]
[28 112]
[29 111]
[36 63]
[37 62]
[38 61]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[46 53]
[69 96]
[70 95]
[97 110]
[98 109]
[99 108]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
