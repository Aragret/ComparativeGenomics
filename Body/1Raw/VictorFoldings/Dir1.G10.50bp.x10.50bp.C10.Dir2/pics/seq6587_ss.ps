%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCUAUCUGGGGGGGGGGUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCxxxxxxxxxxUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAACCCCCCCCCCUCCCCUAUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.04006958]
[71.19830322 365.02401733]
[59.48964310 355.49459839]
[50.78712082 343.15893555]
[45.73651886 328.93243408]
[44.71262741 313.87072754]
[47.79142761 299.09158325]
[54.74444962 285.69165039]
[65.05573273 274.66531372]
[77.96011353 266.83081055]
[92.50000000 262.76950073]
[92.50000000 247.76950073]
[92.50000000 232.76950073]
[92.50000000 217.76950073]
[92.50000000 202.76950073]
[92.50000000 187.76950073]
[92.50000000 172.76950073]
[92.50000000 157.76950073]
[92.50000000 142.76950073]
[92.50000000 127.76950073]
[92.50000000 112.76950073]
[89.70767212 98.03169250]
[84.22064209 84.07130432]
[78.73361206 70.11091614]
[73.24658203 56.15052414]
[58.90850067 60.58128357]
[44.27939987 63.92816544]
[29.44108963 66.17244720]
[14.47655582 67.30157471]
[-0.53051400 67.30924225]
[-15.49619389 66.19540405]
[-30.33678818 63.96628571]
[-44.96930313 60.63435364]
[-59.31190109 56.21824646]
[-73.28437805 50.74265671]
[-86.80859375 44.23820496]
[-99.80890656 36.74127197]
[-112.21262360 28.29378128]
[-123.95036316 18.94297600]
[-134.95649719 8.74115086]
[-145.16946411 -2.25464225]
[-154.53216553 -13.98290920]
[-162.99221802 -26.37805939]
[-170.50230408 -39.37077332]
[-177.02046204 -52.88838959]
[-182.51019287 -66.85531616]
[-186.94082642 -81.19343567]
[-190.28758240 -95.82256317]
[-192.53173828 -110.66089630]
[-193.66073608 -125.62543488]
[-193.66827393 -140.63250732]
[-192.55429077 -155.59817505]
[-190.32504272 -170.43875122]
[-186.99298096 -185.07124329]
[-182.57675171 -199.41380310]
[-177.10104370 -213.38623047]
[-170.59646606 -226.91038513]
[-163.09942627 -239.91062927]
[-154.65182495 -252.31427002]
[-145.30091858 -264.05194092]
[-135.09898376 -275.05798340]
[-124.10310364 -285.27084351]
[-112.37475586 -294.63342285]
[-99.97953033 -303.09338379]
[-86.98675537 -310.60336304]
[-73.46907806 -317.12139893]
[-59.50210571 -322.61102295]
[-45.16394424 -327.04150391]
[-30.53478622 -330.38815308]
[-15.69643688 -332.63217163]
[-0.73188353 -333.76101685]
[14.27518654 -333.76843262]
[29.24084663 -332.65432739]
[44.08140182 -330.42495728]
[58.71385574 -327.09274292]
[73.05638123 -322.67639160]
[87.02876282 -317.20056152]
[100.55285645 -310.69586182]
[113.55303955 -303.19869995]
[125.95660400 -294.75100708]
[137.69418335 -285.39999390]
[148.70013428 -275.19796753]
[158.91291809 -264.20199585]
[168.27540588 -252.47355652]
[176.73522949 -240.07826233]
[184.24510193 -227.08541870]
[190.76301575 -213.56768799]
[196.25250244 -199.60066223]
[200.68289185 -185.26246643]
[204.02937317 -170.63327026]
[206.27326965 -155.79490662]
[207.40200806 -140.83033752]
[207.40927124 -125.82327271]
[206.29504395 -110.85762024]
[204.06552124 -96.01708221]
[200.73321533 -81.38465881]
[196.31672668 -67.04217529]
[190.84075928 -53.06984329]
[184.33595276 -39.54580307]
[176.83868408 -26.54568481]
[168.39085388 -14.14219570]
[159.03974915 -2.40469766]
[148.83763123 8.60116577]
[137.84156799 18.81384468]
[126.11304474 28.17622375]
[113.71767426 36.63594818]
[100.72476196 44.14570236]
[87.20697021 50.66349030]
[92.69400024 64.62387848]
[98.18103027 78.58427429]
[103.66806793 92.54466248]
[116.70697784 82.25254059]
[135.14192200 79.99043274]
[149.63751221 83.84759521]
[160.42205811 72.91191101]
[175.23385620 68.84908295]
[190.08857727 72.75199127]
[200.99040222 83.57076263]
[205.00677490 98.39521027]
[201.05732727 113.23763275]
[190.20443726 124.10548401]
[175.36747742 128.07537842]
[160.53750610 124.07942963]
[149.70372009 113.19252777]
[145.78034973 98.34318542]
[131.28475952 94.48603058]
[125.33856964 99.05690002]
[127.30938721 113.92686462]
[113.44618988 108.19863129]
[107.50000000 112.76950073]
[107.50000000 127.76950073]
[107.50000000 142.76950073]
[107.50000000 157.76950073]
[107.50000000 172.76950073]
[107.50000000 187.76950073]
[107.50000000 202.76950073]
[107.50000000 217.76950073]
[107.50000000 232.76950073]
[107.50000000 247.76950073]
[107.50000000 262.76950073]
[122.03988647 266.83081055]
[134.94427490 274.66531372]
[145.25555420 285.69165039]
[152.20857239 299.09158325]
[155.28736877 313.87072754]
[154.26348877 328.93243408]
[149.21287537 343.15893555]
[140.51036072 355.49459839]
[128.80169678 365.02401733]
[114.95575714 371.04006958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 111]
[23 110]
[24 109]
[25 108]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
