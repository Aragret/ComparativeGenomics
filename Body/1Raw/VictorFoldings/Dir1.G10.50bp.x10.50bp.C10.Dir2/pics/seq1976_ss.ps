%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACCCAAAUGGGGGGGGGGAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCxxxxxxxxxxAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUCCCCCCCCCCUUUGCCCAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 412.18780518]
[71.01555634 406.63479614]
[58.81560135 397.76846313]
[49.20452881 386.14614868]
[42.78650284 372.49844360]
[39.96496582 357.68325806]
[40.91728210 342.63189697]
[45.58358765 328.29046631]
[53.67055511 315.56051636]
[64.66983032 305.24221802]
[77.88998413 297.98425293]
[92.50000000 294.24282837]
[92.50000000 279.24282837]
[92.50000000 264.24282837]
[92.50000000 249.24281311]
[92.50000000 234.24281311]
[92.50000000 219.24281311]
[92.50000000 204.24281311]
[92.50000000 189.24281311]
[92.50000000 174.24281311]
[92.50000000 159.24281311]
[92.50000000 144.24281311]
[92.50000000 129.24281311]
[82.76509094 124.78609467]
[75.19791412 117.21189117]
[70.75022888 107.47284698]
[69.98144531 96.79390717]
[72.98825836 86.51821136]
[79.39248657 77.93819427]
[88.38864136 72.13301849]
[86.24005890 57.28769302]
[84.09147644 42.44237137]
[78.38681793 28.56948853]
[69.47066498 16.50705719]
[60.55451584 4.44462633]
[46.12950897 -2.05381989]
[44.78633499 -16.88773918]
[35.87018204 -28.95017052]
[26.95403290 -41.01259995]
[13.03328419 -35.24212646]
[-1.85500765 -32.97253036]
[-16.84475517 -34.33144760]
[-31.06501770 -39.23556519]
[-43.69060516 -47.39570236]
[-53.98997498 -58.33388519]
[-61.36759567 -71.41130829]
[-65.39839935 -85.86566925]
[-65.85225677 -100.85559845]
[-62.70714188 -115.50960541]
[-56.15010834 -128.97680664]
[-46.56621552 -140.47625732]
[-55.48236465 -152.53868103]
[-64.39851379 -164.60112000]
[-79.03098297 -160.56933594]
[-94.13140869 -162.09954834]
[-107.65758514 -168.98481750]
[-117.78020477 -180.29397583]
[-123.13027191 -194.49754333]
[-122.98423004 -209.67460632]
[-117.36182404 -223.77258301]
[-107.02345276 -234.88484192]
[-93.36728668 -241.50856018]
[-78.24020386 -242.74790955]
[-63.68803406 -238.43528748]
[-51.67882919 -229.15393066]
[-43.83673477 -216.15908813]
[-41.22233200 -201.20819092]
[-44.18919754 -186.32322693]
[-52.33608627 -173.51727295]
[-43.41993332 -161.45483398]
[-34.50378418 -149.39241028]
[-20.69879532 -155.18124390]
[-5.90057278 -157.49914551]
[9.03135395 -156.20709229]
[23.22864151 -151.37585449]
[35.86462021 -143.28215027]
[46.20244217 -132.39280701]
[53.63803482 -119.33782196]
[57.73540115 -104.87390137]
[58.25219345 -89.84063721]
[55.15403366 -75.11173248]
[48.61676025 -61.54425812]
[39.01646423 -49.92875290]
[47.93261337 -37.86632156]
[56.84876633 -25.80389023]
[70.63602448 -20.16823006]
[72.61694336 -4.47152472]
[81.53309631 7.59090710]
[90.44924927 19.65333748]
[91.88492584 4.72220230]
[105.91474915 -0.58477807]
[116.87290192 9.65821648]
[112.52252960 24.01454735]
[125.35618591 16.24941063]
[138.18983459 8.48427582]
[151.02349854 0.71914059]
[163.85714722 -7.04599476]
[176.69079590 -14.81113052]
[180.22311401 -30.21562195]
[193.65763855 -38.53962326]
[209.02392578 -34.84464645]
[217.20541382 -21.32286263]
[213.34819031 -5.99650192]
[199.74066162 2.04157662]
[184.45593262 -1.97747648]
[171.62228394 5.78765917]
[158.78863525 13.55279446]
[145.95497131 21.31793022]
[133.12132263 29.08306503]
[120.28766632 36.84820175]
[114.73033905 39.77013016]
[109.12039185 41.26140594]
[103.76281738 41.39270782]
[98.93680573 40.29379272]
[101.08538055 55.13911438]
[103.23396301 69.98443604]
[123.32433319 80.83315277]
[130.07315063 102.64533234]
[144.22047424 107.63065338]
[158.36778259 112.61597443]
[173.40014648 107.01170349]
[187.07952881 115.39346313]
[188.91229248 131.33148193]
[177.49250793 142.59948730]
[161.58042908 140.55361938]
[153.38246155 126.76329041]
[139.23515320 121.77796936]
[125.08783722 116.79264832]
[117.44257355 124.64039612]
[107.50000000 129.24281311]
[107.50000000 144.24281311]
[107.50000000 159.24281311]
[107.50000000 174.24281311]
[107.50000000 189.24281311]
[107.50000000 204.24281311]
[107.50000000 219.24281311]
[107.50000000 234.24281311]
[107.50000000 249.24281311]
[107.50000000 264.24282837]
[107.50000000 279.24282837]
[107.50000000 294.24282837]
[122.11001587 297.98425293]
[135.33016968 305.24221802]
[146.32945251 315.56051636]
[154.41641235 328.29046631]
[159.08271790 342.63189697]
[160.03503418 357.68325806]
[157.21350098 372.49844360]
[150.79547119 386.14614868]
[141.18440247 397.76846313]
[128.98443604 406.63479614]
[114.96250153 412.18780518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[30 116]
[31 115]
[32 114]
[33 89]
[34 88]
[35 87]
[37 85]
[38 84]
[39 83]
[51 71]
[52 70]
[53 69]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
