%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACCCGCCGGGGGGGGGGGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAxxxxxxxxxxCAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCCCCCCCCCCCUACCCACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.42453003]
[71.19830322 353.40850830]
[59.48964310 343.87908936]
[50.78712082 331.54342651]
[45.73651886 317.31689453]
[44.71262741 302.25521851]
[47.79142761 287.47607422]
[54.74444962 274.07614136]
[65.05573273 263.04980469]
[77.96011353 255.21528625]
[92.50000000 251.15397644]
[92.50000000 236.15397644]
[92.50000000 221.15397644]
[92.50000000 206.15397644]
[92.50000000 191.15397644]
[92.50000000 176.15397644]
[92.50000000 161.15397644]
[92.50000000 146.15397644]
[92.50000000 131.15397644]
[92.50000000 116.15397644]
[86.43698883 102.43392181]
[75.34567261 92.33527374]
[64.25435638 82.23662567]
[53.16304016 72.13797760]
[42.07172394 62.03932571]
[35.60372925 60.23031616]
[31.65569687 56.02979660]
[30.74025917 51.28243256]
[20.07863235 40.73114014]
[9.41700649 30.17985153]
[-1.24461937 19.62856102]
[-13.01798153 28.95300674]
[-25.82946205 36.79030991]
[-39.49223328 43.02617645]
[-53.80705261 47.56967163]
[-68.56516266 50.35453415]
[-83.55135345 51.34015656]
[-98.54708099 50.51216125]
[-113.33366394 47.88262939]
[-127.69545746 43.48989868]
[-141.42304993 37.39803696]
[-154.31622314 29.69587517]
[-166.18698120 20.49573708]
[-176.86219788 9.93178463]
[-186.18620300 -1.84192586]
[-194.02302551 -14.65369987]
[-200.25837708 -28.31670570]
[-204.80134583 -42.63169479]
[-207.58564758 -57.38991165]
[-208.57070923 -72.37613678]
[-207.74215698 -87.37183380]
[-205.11207581 -102.15830994]
[-200.71881104 -116.51995087]
[-194.62643433 -130.24729919]
[-186.92378235 -143.14019775]
[-177.72320557 -155.01060486]
[-167.15885925 -165.68542480]
[-155.38479614 -175.00900269]
[-142.57272339 -182.84533691]
[-128.90948486 -189.08018494]
[-114.59432983 -193.62260437]
[-99.83601379 -196.40637207]
[-84.84974670 -197.39086914]
[-69.85408020 -196.56175232]
[-55.06769943 -193.93112183]
[-40.70623016 -189.53730774]
[-26.97910118 -183.44442749]
[-14.08649731 -175.74130249]
[-2.21643090 -166.54026794]
[8.45799732 -155.97552490]
[17.78112411 -144.20111084]
[25.61698914 -131.38874817]
[31.85132217 -117.72528076]
[36.39321136 -103.40995026]
[39.17641830 -88.65152740]
[40.16035843 -73.66522980]
[39.33068466 -58.66959381]
[36.69948959 -43.88331223]
[32.30515289 -29.52200317]
[26.21174812 -15.79510307]
[18.50814056 -2.90278769]
[9.30667114 8.96693420]
[19.96829796 19.51822472]
[30.62992287 30.06951523]
[41.29154968 40.62080383]
[52.17037582 50.94800949]
[63.26169205 61.04666138]
[74.35300446 71.14530945]
[85.44432068 81.24395752]
[96.53563690 91.34260559]
[98.96218872 87.11615753]
[103.60477448 83.87161255]
[110.00354004 82.53493500]
[117.35543823 83.81980896]
[131.85104370 79.96265411]
[146.34663391 76.10549164]
[153.50903320 65.32802582]
[165.71028137 62.43863678]
[176.24739075 68.46163940]
[190.82009888 64.90688324]
[193.10877991 49.87922668]
[200.97836304 36.87391281]
[213.22877502 27.87415504]
[227.99194336 24.25235176]
[243.01657104 26.56080055]
[256.01153564 34.44747925]
[264.99514771 46.70972824]
[268.59753418 61.47764206]
[266.26931763 76.49922180]
[258.36557007 89.48378754]
[246.09150696 98.45128632]
[231.31886292 102.03423309]
[216.30035400 99.68626404]
[203.32620239 91.76542664]
[194.37486267 79.47958374]
[179.80215454 83.03434753]
[167.82955933 95.82719421]
[150.20379639 90.60108948]
[135.70819092 94.45825195]
[121.21260071 98.31540680]
[135.78289795 101.87998962]
[150.77462769 102.37834167]
[163.30953979 110.61702728]
[169.71359253 124.18125153]
[168.10971069 139.09526062]
[158.96801758 150.98767090]
[144.96798706 156.37275696]
[130.21311951 153.67211914]
[119.02811432 143.67733765]
[114.69138336 129.31771851]
[107.50000000 116.15397644]
[107.50000000 131.15397644]
[107.50000000 146.15397644]
[107.50000000 161.15397644]
[107.50000000 176.15397644]
[107.50000000 191.15397644]
[107.50000000 206.15397644]
[107.50000000 221.15397644]
[107.50000000 236.15397644]
[107.50000000 251.15397644]
[122.03988647 255.21528625]
[134.94427490 263.04980469]
[145.25555420 274.07614136]
[152.20857239 287.47607422]
[155.28736877 302.25521851]
[154.26348877 317.31689453]
[149.21287537 331.54342651]
[140.51036072 343.87908936]
[128.80169678 353.40850830]
[114.95575714 359.42453003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[28 85]
[29 84]
[30 83]
[31 82]
[94 120]
[95 119]
[96 118]
[99 116]
[100 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
