%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUAAUUAUGGGGGGGGGGUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUxxxxxxxxxxAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACAACUAACCUGCCCCCCCCCCCCACUAAUAGUUAU\
) } def
/len { sequence length } bind def

/coor [
[85.31018829 459.42889404]
[72.10211182 452.19284058]
[60.75866318 442.28625488]
[51.81040955 430.17248535]
[45.67587280 416.41818237]
[42.64197540 401.66656494]
[42.85061646 386.60766602]
[46.29203796 371.94580078]
[52.80528259 358.36669922]
[62.08570862 346.50552368]
[73.69925690 336.91702271]
[87.10274506 330.04965210]
[101.66925812 326.22460938]
[101.06137085 311.23693848]
[100.45349121 296.24926758]
[99.84560394 281.26159668]
[99.23771667 266.27392578]
[98.62983704 251.28623962]
[98.02194977 236.29855347]
[97.41407013 221.31088257]
[96.80618286 206.32319641]
[96.19830322 191.33552551]
[95.59041595 176.34785461]
[94.98253632 161.36016846]
[83.89230347 151.48381042]
[83.06232452 136.29283142]
[93.49674988 124.72734833]
[92.88886261 109.73966980]
[91.97734833 94.76739502]
[90.76258087 79.81666565]
[89.54781342 64.86592865]
[75.32300568 62.13961411]
[62.30457687 55.81929016]
[51.38241959 46.34401321]
[43.30131531 34.36825943]
[38.61013794 20.71671295]
[37.62458420 6.32748652]
[40.40594101 -7.81234026]
[46.75730133 -20.73444176]
[56.23749542 -31.55555534]
[68.19173431 -39.53785324]
[81.79683685 -44.13924789]
[80.88533020 -59.11153030]
[79.97381592 -74.08380890]
[79.06230164 -89.05608368]
[69.91798401 -98.20684052]
[69.49785614 -110.73474884]
[77.48090363 -119.87198639]
[76.87302399 -134.85966492]
[61.89551163 -135.93397522]
[47.13246536 -138.67851257]
[32.76954269 -143.05874634]
[18.98737907 -149.01962280]
[5.95929432 -156.48614502]
[-6.15086699 -165.36444092]
[-17.19080734 -175.54283142]
[-27.02168846 -186.89332581]
[-35.51987457 -199.27317810]
[-42.57849503 -212.52670288]
[-48.10877991 -226.48721313]
[-52.04117584 -240.97915649]
[-54.32623291 -255.82026672]
[-54.93521500 -270.82391357]
[-53.86045837 -285.80139160]
[-51.11548615 -300.56436157]
[-46.73481369 -314.92712402]
[-40.77353287 -328.70913696]
[-33.30661392 -341.73699951]
[-24.42796516 -353.84689331]
[-14.24923897 -364.88650513]
[-2.89844775 -374.71707153]
[9.48166180 -383.21487427]
[22.73539734 -390.27310181]
[36.69607544 -395.80297852]
[51.18813324 -399.73492432]
[66.02931213 -402.01953125]
[81.03296661 -402.62808228]
[96.01041412 -401.55288696]
[110.77330017 -398.80746460]
[125.13595581 -394.42636108]
[138.91777039 -388.46466064]
[151.94540405 -380.99734497]
[164.05503845 -372.11834717]
[175.09436035 -361.93930054]
[184.92456055 -350.58819580]
[193.42201233 -338.20782471]
[200.47984314 -324.95388794]
[206.00929260 -310.99304199]
[209.94082642 -296.50088501]
[212.22499084 -281.65963745]
[212.83306885 -266.65594482]
[211.75741577 -251.67854309]
[209.01156616 -236.91574097]
[204.63003540 -222.55320740]
[198.66792297 -208.77157593]
[191.20022583 -195.74417114]
[182.32086182 -183.63479614]
[172.14146423 -172.59577942]
[160.79008484 -162.76591492]
[148.40946960 -154.26882935]
[135.15531921 -147.21141052]
[121.19430542 -141.68237305]
[106.70201111 -137.75128174]
[91.86070251 -135.46754456]
[92.46858215 -120.47987366]
[102.64526367 -106.21371460]
[94.03457642 -89.96759796]
[94.94609070 -74.99532318]
[95.85760498 -60.02304077]
[96.76911926 -45.05076218]
[111.97814941 -41.72015762]
[125.65133667 -34.24332047]
[136.68305969 -23.21553802]
[144.17871094 -9.51960182]
[147.52719116 5.74486589]
[146.45072937 21.34969521]
[141.02793884 36.03698349]
[131.68812561 48.62050247]
[119.17728424 58.08149719]
[104.49854279 63.65116501]
[105.71331024 78.60189056]
[106.92807770 93.55262756]
[110.09505463 97.81352997]
[110.61579132 103.55199432]
[107.87654114 109.13179016]
[108.48442841 124.11946869]
[119.82120514 134.80194092]
[120.22418213 150.01023865]
[109.97021484 160.75228882]
[110.57809448 175.73995972]
[111.18598175 190.72764587]
[111.79386139 205.71531677]
[112.40174866 220.70300293]
[113.00962830 235.69067383]
[113.61751556 250.67834473]
[114.22539520 265.66601562]
[114.83328247 280.65371704]
[115.44116211 295.64138794]
[116.04904938 310.62905884]
[116.65692902 325.61672974]
[131.48536682 328.24954224]
[145.40097046 334.00888062]
[157.75289917 342.62536621]
[167.96340942 353.69601440]
[175.55496216 366.70303345]
[180.17247009 381.03805542]
[181.59996033 396.03060913]
[179.77067566 410.97943115]
[174.77018738 425.18539429]
[166.83235168 437.98400879]
[156.32844543 448.77670288]
[143.74975586 457.05865479]
[129.68461609 462.44250488]
[114.79087830 464.67645264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[27 126]
[28 125]
[29 122]
[30 121]
[31 120]
[42 110]
[43 109]
[44 108]
[45 107]
[48 105]
[49 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
