%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCUUCGGGGGGGGGGGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCCCCCCCCCCCAUCCCCCUUC\
) } def
/len { sequence length } bind def

/coor [
[100.49835968 390.40194702]
[86.65242004 384.38592529]
[74.94375610 374.85650635]
[66.24123383 362.52084351]
[61.19063187 348.29431152]
[60.16674042 333.23263550]
[63.24554062 318.45349121]
[70.19856262 305.05355835]
[80.50984955 294.02722168]
[93.41423035 286.19271851]
[107.95411682 282.13140869]
[107.95411682 267.13140869]
[107.95411682 252.13139343]
[107.95411682 237.13139343]
[107.95411682 222.13139343]
[107.95411682 207.13139343]
[107.95411682 192.13139343]
[107.95411682 177.13139343]
[107.95411682 162.13139343]
[107.95411682 147.13139343]
[107.95411682 132.13139343]
[89.95992279 128.79582214]
[77.91810608 117.03746033]
[64.01554871 122.66941833]
[50.11299133 128.30137634]
[36.21043396 133.93333435]
[26.55824471 147.19105530]
[10.28139114 145.19204712]
[4.12410498 129.99270630]
[14.42047501 117.22882080]
[30.57847786 120.03077698]
[44.48103333 114.39881897]
[58.38359070 108.76686096]
[72.28614807 103.13491058]
[68.93170166 98.33224487]
[66.49132538 92.51047516]
[51.99572754 88.65331268]
[37.50012970 84.79615784]
[27.18862534 96.10683441]
[12.79795361 101.31904602]
[-2.36501431 99.23506927]
[-14.81593990 90.33377075]
[-21.69369125 76.66062164]
[-21.41781235 61.35759735]
[-14.05169773 47.94123077]
[-1.28802574 39.49449921]
[13.94020462 37.95840073]
[28.13365746 43.68592072]
[38.03078079 55.36091614]
[41.35728836 70.30056000]
[55.85288620 74.15772247]
[70.34848022 78.01487732]
[81.54425049 68.03215027]
[79.36740875 53.19094467]
[77.19057465 38.34973907]
[75.01373291 23.50853539]
[72.83689880 8.66732979]
[70.66006470 -6.17387581]
[68.48322296 -21.01508141]
[53.46993637 -22.31808281]
[39.16201019 -27.04883957]
[26.33106422 -34.95222473]
[15.66905022 -45.60202408]
[7.75095797 -58.42390060]
[3.00380015 -72.72638702]
[1.68358505 -87.73817444]
[3.86151052 -102.64969635]
[9.42012310 -116.65678406]
[18.05965424 -129.00405884]
[29.31418610 -139.02565002]
[42.57677460 -146.18109131]
[57.13218307 -150.08453369]
[72.19546509 -150.52542114]
[86.95426178 -147.48001099]
[100.61266327 -141.11253357]
[112.43408203 -131.76637268]
[121.78101349 -119.94556427]
[128.14936829 -106.28757477]
[131.19573975 -91.52896881]
[130.75581360 -76.46566010]
[126.85333252 -61.90999985]
[119.69873810 -48.64694977]
[109.67787933 -37.39176941]
[97.33116150 -28.75143814]
[83.32443237 -23.19191742]
[85.50126648 -8.35071278]
[87.67810822 6.49049282]
[89.85494232 21.33169937]
[92.03177643 36.17290497]
[94.20861816 51.01411057]
[96.38545227 65.85531616]
[112.02703094 68.16947937]
[124.83614349 77.19441223]
[132.14471436 90.89318848]
[132.50148010 106.27285767]
[147.48118591 105.49301147]
[158.03285217 94.03438568]
[173.23551941 93.45690155]
[184.09454346 103.58691406]
[199.07426453 102.80707550]
[214.05397034 102.02722931]
[217.35386658 87.29586029]
[224.50689697 74.00161743]
[234.98222351 63.13101959]
[248.00254822 55.49074173]
[262.60165405 51.64774323]
[277.69619751 51.88719940]
[292.16607666 56.19133759]
[304.93750000 64.24076843]
[315.06274414 75.43816376]
[321.79049683 88.95260620]
[324.62145996 103.78123474]
[323.34558105 118.82366180]
[318.05752563 132.96365356]
[309.14971924 145.15190125]
[297.28320312 154.48399353]
[283.33847046 160.26739502]
[268.35040283 162.07295227]
[253.43116760 159.76667786]
[239.68786621 153.51971436]
[228.14036560 143.79563904]
[219.64556885 131.31602478]
[214.83381653 117.00694275]
[199.85411072 117.78678894]
[184.87438965 118.56663513]
[175.12596130 129.76947021]
[159.94551086 130.77374268]
[148.26103210 120.47272491]
[133.28132629 121.25257111]
[122.95411682 132.13139343]
[122.95411682 147.13139343]
[122.95411682 162.13139343]
[122.95411682 177.13139343]
[122.95411682 192.13139343]
[122.95411682 207.13139343]
[122.95411682 222.13139343]
[122.95411682 237.13139343]
[122.95411682 252.13139343]
[122.95411682 267.13140869]
[122.95411682 282.13140869]
[137.49400330 286.19271851]
[150.39837646 294.02722168]
[160.70967102 305.05355835]
[167.66268921 318.45349121]
[170.74148560 333.23263550]
[169.71759033 348.29431152]
[164.66699219 362.52084351]
[155.96446228 374.85650635]
[144.25581360 384.38592529]
[130.40986633 390.40194702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 34]
[24 33]
[25 32]
[26 31]
[36 52]
[37 51]
[38 50]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[59 85]
[95 129]
[96 128]
[99 125]
[100 124]
[101 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
