%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACACCUGGGGGGGGGGAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAxxxxxxxxxxCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAACCCCCCCCCCAACCAUACCU\
) } def
/len { sequence length } bind def

/coor [
[92.65522003 511.47836304]
[79.43502045 504.20587158]
[68.54821777 493.75888062]
[60.73708725 480.84963989]
[56.53420639 466.35830688]
[56.22613144 451.27297974]
[59.83387375 436.62216187]
[67.11145020 423.40475464]
[77.56265259 412.52200317]
[90.47491455 404.71585083]
[104.96784973 400.51855469]
[104.65579987 385.52182007]
[104.34374237 370.52505493]
[104.03168488 355.52828979]
[103.71962738 340.53155518]
[103.40756989 325.53479004]
[103.09551239 310.53802490]
[102.78346252 295.54129028]
[102.47140503 280.54452515]
[101.84742737 265.55752563]
[100.91179657 250.58673096]
[99.97616577 235.61593628]
[87.32555389 227.79928589]
[81.63616180 213.86749268]
[85.28390503 199.08415222]
[97.07336426 189.16876221]
[96.13773346 174.19796753]
[95.20210266 159.22718811]
[94.26647949 144.25639343]
[85.75037384 132.03651428]
[92.61182404 117.78060150]
[79.75976562 105.58039856]
[81.74879456 86.44138336]
[75.12029266 72.98541260]
[68.49179840 59.52944946]
[61.84917831 53.16333008]
[61.86864471 45.72389221]
[55.52151871 32.13293839]
[49.17438889 18.54198837]
[34.91148376 23.24368477]
[20.19259834 26.22542381]
[5.22436047 27.44534302]
[-9.78309917 26.88632011]
[-24.61910057 24.55620193]
[-39.07536697 20.48769760]
[-52.94895554 14.73792553]
[-66.04510498 7.38760233]
[-78.17996216 -1.46008539]
[-89.18317413 -11.68092918]
[-98.90027618 -23.13144493]
[-107.19485474 -35.65088654]
[-113.95045471 -49.06349564]
[-119.07225800 -63.18098450]
[-122.48834991 -77.80516815]
[-124.15077972 -92.73073578]
[-124.03620148 -107.74816895]
[-122.14622498 -122.64663696]
[-118.50739288 -137.21699524]
[-113.17078400 -151.25468445]
[-106.21130371 -164.56266785]
[-97.72666931 -176.95408630]
[-87.83598328 -188.25500488]
[-76.67810059 -198.30676270]
[-64.40965271 -206.96826172]
[-51.20287704 -214.11790466]
[-37.24317169 -219.65531921]
[-22.72650909 -223.50277710]
[-7.85668278 -225.60624695]
[7.15755939 -225.93621826]
[22.10544205 -224.48805237]
[36.77711868 -221.28207397]
[50.96662140 -216.36329651]
[64.47475433 -209.80076599]
[77.11187744 -201.68663025]
[88.70059204 -192.13476562]
[99.07821655 -181.27928162]
[108.09904480 -169.27258301]
[115.63645935 -156.28321838]
[121.58464050 -142.49353027]
[125.86008453 -128.09710693]
[128.40275574 -113.29605103]
[129.17698669 -98.29815674]
[128.17189026 -83.31395721]
[125.40158844 -68.55381775]
[120.90495300 -54.22494125]
[114.74512482 -40.52848434]
[107.00857544 -27.65672874]
[97.80391693 -15.79036617]
[87.26035309 -5.09598637]
[75.52591705 4.27627945]
[62.76533890 12.19485950]
[69.11246490 25.78581047]
[75.45959473 39.37676239]
[81.94776154 52.90095139]
[88.57626343 66.35691833]
[95.20475769 79.81288147]
[91.55285645 65.26422119]
[97.57073212 51.52431107]
[110.74001312 44.34308243]
[125.54956818 46.72576523]
[135.80183411 57.67524338]
[137.20640564 72.60933685]
[129.17549133 85.27837372]
[115.06864166 90.38058472]
[129.93168640 88.35825348]
[144.79473877 86.33591461]
[159.65777588 84.31358337]
[170.47434998 72.46531677]
[186.47146606 73.67851257]
[195.37750244 87.02249908]
[190.36051941 102.26091766]
[175.26910400 107.70415497]
[161.68011475 99.17662811]
[146.81706238 101.19895935]
[131.95402527 103.22129822]
[117.09097290 105.24362946]
[107.58261108 116.84497070]
[116.16563416 130.13565063]
[109.23726654 143.32075500]
[110.17289734 158.29154968]
[111.10852814 173.26234436]
[112.04415131 188.23313904]
[124.97641754 196.60348511]
[130.43641663 210.81762695]
[126.52590942 225.34939575]
[114.94696045 234.68029785]
[115.88259125 249.65109253]
[116.81821442 264.62188721]
[120.20353699 270.42248535]
[120.11492920 276.18649292]
[117.46815491 280.23248291]
[117.78021240 295.22921753]
[118.09226990 310.22598267]
[118.40432739 325.22274780]
[118.71638489 340.21948242]
[119.02843475 355.21624756]
[119.34049225 370.21301270]
[119.65254974 385.20974731]
[119.96460724 400.20651245]
[134.61959839 403.79727173]
[147.84541321 411.05953979]
[158.74028015 421.49813843]
[166.56137085 434.40133667]
[170.77543640 448.88940430]
[171.09516907 463.97448730]
[167.49873352 478.62811279]
[160.23136902 491.85110474]
[149.78857422 502.74194336]
[136.88233948 510.55807495]
[122.39265442 514.76654053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 128]
[21 127]
[22 126]
[26 122]
[27 121]
[28 120]
[29 119]
[31 117]
[33 96]
[34 95]
[35 94]
[37 93]
[38 92]
[39 91]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
