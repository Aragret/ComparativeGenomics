%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGCCCACAGGGGGGGGGGGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAxxxxxxxxxxAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUCCCCCCCCCCUUUGCCCAAA\
) } def
/len { sequence length } bind def

/coor [
[19.23278618 550.62518311]
[4.74309540 546.41668701]
[-8.16313457 538.60058594]
[-18.60593605 527.70977783]
[-25.87329865 514.48675537]
[-29.46972466 499.83316040]
[-29.15000343 484.74804688]
[-24.93593407 470.25997925]
[-17.11483574 457.35678101]
[-6.21996832 446.91818237]
[7.00584078 439.65591431]
[21.66083336 436.06515503]
[21.97288895 421.06842041]
[22.28494453 406.07165527]
[22.59700203 391.07489014]
[22.90905762 376.07815552]
[23.22111320 361.08139038]
[23.53317070 346.08462524]
[23.84522629 331.08789062]
[24.15728188 316.09112549]
[24.46933937 301.09439087]
[24.78139496 286.09762573]
[25.09345055 271.10086060]
[25.24948883 256.10168457]
[25.24948883 241.10168457]
[19.68380928 238.54727173]
[14.91216469 234.70889282]
[11.22453785 229.81979370]
[8.84503460 224.17712402]
[-6.14766121 223.70907593]
[-21.14035797 223.24104309]
[-36.13305283 222.77299500]
[-51.12574768 222.30496216]
[-59.14817810 235.40214539]
[-72.65204620 242.71931458]
[-88.00489044 242.28819275]
[-101.07686615 234.22474670]
[-108.35166931 220.69801331]
[-107.87242889 205.34658813]
[-99.76805115 192.29995728]
[-86.21857452 185.06758118]
[-70.86874390 185.59494019]
[-57.84757614 193.74017334]
[-50.65770721 207.31225586]
[-35.66501236 207.78030396]
[-20.67231560 208.24833679]
[-5.67961884 208.71638489]
[9.31307697 209.18443298]
[13.58450699 201.18330383]
[20.50804138 195.16998291]
[29.21713829 191.99206543]
[38.58726120 192.13621521]
[46.04217148 179.11990356]
[53.49708176 166.10359192]
[60.95199203 153.08728027]
[68.40690613 140.07096863]
[75.86181641 127.05466461]
[66.34377289 115.73177338]
[61.97431946 101.22457123]
[63.73627853 85.81500244]
[71.62382507 72.04499054]
[84.59822845 62.29732513]
[100.71749878 58.38502502]
[100.71749878 43.38502502]
[100.56146240 28.38583565]
[100.24940491 13.38908195]
[99.93734741 -1.60767126]
[99.62528992 -16.60442543]
[85.57083130 -22.46889114]
[75.12145233 -33.54726791]
[70.08758545 -47.92016220]
[71.34136963 -63.09737778]
[78.66558075 -76.44937897]
[90.79125214 -85.66284180]
[105.61754608 -89.14147949]
[120.57571411 -86.28260040]
[133.07415771 -77.58152008]
[140.94744873 -64.54576111]
[142.83149719 -49.43383408]
[138.39987183 -34.86398315]
[128.42039490 -23.36051559]
[114.62204742 -16.91648102]
[114.93409729 -1.91972756]
[115.24615479 13.07702637]
[115.55821228 28.07378006]
[118.86316681 34.73883438]
[115.71749878 43.38502502]
[115.71749878 58.38502502]
[128.65554810 65.97492981]
[141.74870300 58.65582657]
[150.76765442 42.63589096]
[168.26828003 43.48906708]
[181.20634460 35.89915848]
[194.14439392 28.30924797]
[207.08245850 20.71934128]
[220.02050781 13.12943172]
[232.95857239 5.53952408]
[236.70001221 -9.81551170]
[250.24649048 -17.95606232]
[265.56109619 -14.05248260]
[273.55798340 -0.42069742]
[269.49270630 14.85179615]
[255.77713013 22.70409966]
[240.54847717 18.47757912]
[227.61041260 26.06748772]
[214.67236328 33.65739822]
[201.73431396 41.24730301]
[188.79624939 48.83721161]
[175.85820007 56.42712021]
[172.48391724 68.08566284]
[161.71179199 74.50284576]
[149.06781006 71.74898529]
[135.97465515 79.06808472]
[140.40753174 94.90704346]
[138.32342529 110.86302185]
[130.33193970 124.41812897]
[117.95232391 133.54348755]
[103.33232880 137.00169373]
[88.87812042 134.50956726]
[81.42321014 147.52587891]
[73.96829987 160.54219055]
[66.51338959 173.55850220]
[59.05848312 186.57481384]
[51.60357285 199.59112549]
[57.33397293 223.78422546]
[40.24948883 241.10168457]
[40.24948883 256.10168457]
[43.39515686 264.74786377]
[40.09020615 271.41293335]
[39.77814865 286.40966797]
[39.46609116 301.40643311]
[39.15403748 316.40319824]
[38.84197998 331.39993286]
[38.52992249 346.39669800]
[38.21786880 361.39346313]
[37.90581131 376.39019775]
[37.59375381 391.38696289]
[37.28170013 406.38369751]
[36.96964264 421.38046265]
[36.65758514 436.37722778]
[51.15052414 440.57449341]
[64.06278229 448.38064575]
[74.51399231 459.26342773]
[81.79156494 472.48080444]
[85.39930725 487.13162231]
[85.09123230 502.21697998]
[80.88835144 516.70831299]
[73.07722473 529.61755371]
[62.19041824 540.06451416]
[48.97022247 547.33697510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 127]
[25 126]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[52 124]
[53 123]
[54 122]
[55 121]
[56 120]
[57 119]
[63 88]
[64 87]
[65 85]
[66 84]
[67 83]
[68 82]
[89 113]
[90 112]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
