%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACCCUAGGGGGGGGGGGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAxxxxxxxxxxUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACCCCCCCCCCCAACACCCUAG\
) } def
/len { sequence length } bind def

/coor [
[83.08908081 353.80056763]
[69.87085724 346.52450562]
[58.98689651 336.07452393]
[51.17927933 323.16314697]
[46.98033905 308.67071533]
[46.67636871 293.58526611]
[50.28809357 278.93542480]
[57.56925964 265.72003174]
[68.02342987 254.84010315]
[80.93781281 247.03746033]
[95.43189240 242.84411621]
[95.12390900 227.84729004]
[94.81593323 212.85044861]
[94.50795746 197.85360718]
[94.19998169 182.85676575]
[93.89199829 167.85993958]
[93.58402252 152.86309814]
[93.27604675 137.86625671]
[92.96807098 122.86942291]
[92.66008759 107.87258148]
[89.00138855 93.32563019]
[82.17781067 79.96752930]
[75.35423279 66.60942841]
[68.53066254 53.25132751]
[61.70708466 39.89323044]
[46.86650848 42.65679550]
[31.86366081 41.12812424]
[17.91354179 35.43960953]
[6.14347458 26.06017303]
[-2.49798989 13.75663471]
[-7.31752157 -0.46898377]
[-7.93262959 -15.46106052]
[-4.30200386 -30.00424957]
[3.27182674 -42.92200470]
[14.16768646 -53.17176437]
[7.34411144 -66.52986145]
[0.52053607 -79.88796234]
[-6.30303955 -93.24606323]
[-13.12661457 -106.60416412]
[-19.95018959 -119.96225739]
[-34.06333160 -114.82427979]
[-48.70091248 -111.45962524]
[-63.64102554 -109.91931152]
[-78.65718842 -110.22667694]
[-93.52175903 -112.37707520]
[-108.00939178 -116.33790588]
[-121.90045929 -122.04911041]
[-134.98437500 -129.42411804]
[-147.06278992 -138.35112000]
[-157.95260620 -148.69480896]
[-167.48872375 -160.29833984]
[-175.52658081 -172.98582458]
[-181.94433594 -186.56492615]
[-186.64468384 -200.82978821]
[-189.55638123 -215.56416321]
[-190.63528442 -230.54467773]
[-189.86502075 -245.54421997]
[-187.25729370 -260.33541870]
[-182.85162354 -274.69403076]
[-176.71479797 -288.40237427]
[-168.93984985 -301.25265503]
[-159.64463806 -313.05004883]
[-148.97009277 -323.61572266]
[-137.07801819 -332.78952026]
[-124.14871216 -340.43234253]
[-110.37816620 -346.42831421]
[-95.97515106 -350.68658447]
[-81.15800476 -353.14254761]
[-66.15135193 -353.75900269]
[-51.18269348 -352.52658081]
[-36.47894669 -349.46401978]
[-22.26301575 -344.61767578]
[-8.75041294 -338.06106567]
[3.85401416 -329.89355469]
[15.35918617 -320.23901367]
[25.59068871 -309.24371338]
[34.39341354 -297.07443237]
[41.63391113 -283.91561890]
[47.20242310 -269.96673584]
[51.01453018 -255.43925476]
[53.01243973 -240.55342102]
[53.16586304 -225.53489685]
[51.47247696 -210.61135864]
[47.95795441 -196.00903320]
[42.67556763 -181.94931030]
[35.70540619 -168.64530945]
[27.15312767 -156.29872131]
[17.14838600 -145.09672546]
[5.84285021 -135.20912170]
[-6.59209061 -126.78583527]
[0.23148470 -113.42773438]
[7.05505991 -100.06963348]
[13.87863541 -86.71154022]
[20.70221138 -73.35343933]
[27.52578545 -59.99533844]
[42.21667862 -62.81578827]
[57.12212753 -61.38088226]
[71.03333282 -55.79840088]
[82.81971741 -46.51282883]
[91.52079773 -34.26997757]
[96.42443085 -20.05708504]
[97.12516022 -5.02321529]
[93.55763245 9.61365128]
[86.00268555 22.66527939]
[75.06518555 33.06965256]
[81.88875580 46.42775345]
[88.71233368 59.78585434]
[95.53591156 73.14395142]
[102.35948181 86.50205231]
[103.38880157 71.53740692]
[108.18744659 57.32568741]
[116.44030762 44.80010223]
[127.60546112 34.78315353]
[140.94975281 27.93260574]
[155.59690857 24.69830132]
[170.58512878 25.29262352]
[184.93020630 29.67654610]
[197.69017029 37.56219482]
[208.02711487 48.43175888]
[215.26228333 61.57148361]
[218.92056274 76.11854553]
[218.76173401 91.11770630]
[214.79623413 105.58403778]
[207.28443909 118.56760406]
[196.71963501 129.21583557]
[183.79556274 136.82952881]
[169.36087036 140.90869141]
[154.36341858 141.18550110]
[139.78804016 137.64175415]
[126.59180450 130.51016235]
[115.64127350 120.25903320]
[107.65692902 107.56460571]
[107.96490479 122.56143951]
[108.27288818 137.55827332]
[108.58086395 152.55511475]
[108.88883972 167.55195618]
[109.19681549 182.54879761]
[109.50479889 197.54563904]
[109.81277466 212.54246521]
[110.12075043 227.53930664]
[110.42872620 242.53614807]
[125.08274078 246.13090515]
[138.30657959 253.39675903]
[149.19860840 263.83831787]
[157.01618958 276.74365234]
[161.22631836 291.23284912]
[161.54194641 306.31805420]
[157.94152832 320.97067261]
[150.67057800 334.19171143]
[140.22480774 345.07968140]
[127.31645203 352.89230347]
[112.82561493 357.09683228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
