%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUCAGCAGGGGGGGGGGAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUxxxxxxxxxxUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACACCCCCCCCCCAUCUCCAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.31280518]
[71.19830322 384.29678345]
[59.48964310 374.76736450]
[50.78712082 362.43170166]
[45.73651886 348.20516968]
[44.71262741 333.14349365]
[47.79142761 318.36431885]
[54.74444962 304.96441650]
[65.05573273 293.93807983]
[77.96011353 286.10354614]
[92.50000000 282.04223633]
[92.50000000 267.04223633]
[92.50000000 252.04225159]
[92.50000000 237.04225159]
[92.50000000 222.04225159]
[92.50000000 207.04225159]
[92.50000000 192.04225159]
[92.50000000 177.04225159]
[92.50000000 162.04225159]
[92.50000000 147.04225159]
[82.29856873 144.22535706]
[72.97084045 139.22560120]
[64.97721863 132.28974915]
[58.71224594 123.76013947]
[44.69552994 129.10165405]
[30.67881775 134.44316101]
[22.83223343 148.43640137]
[6.97699213 150.88403320]
[-4.72412014 139.90844727]
[-3.29501200 123.92916870]
[10.16802692 115.20413971]
[25.33730507 120.42645264]
[39.35401917 115.08493805]
[53.37073135 109.74342346]
[52.39458847 98.28310394]
[54.19375992 86.92286682]
[58.66335678 76.32501221]
[65.54281616 67.10736847]
[74.43106842 59.80730820]
[84.80994415 54.85041428]
[82.32482147 40.05770493]
[79.83970642 25.26499939]
[77.35458374 10.47229195]
[74.86946869 -4.32041550]
[72.38434601 -19.11312294]
[62.32366943 -27.25171089]
[60.58759689 -39.66963959]
[67.56930542 -49.59753418]
[65.39247131 -64.43873596]
[55.73436356 -76.96996307]
[61.54273987 -90.68535614]
[59.36590195 -105.52656555]
[35.99399948 -110.25543976]
[16.61787033 -124.09505463]
[4.59862757 -144.61018372]
[2.00710273 -168.21066284]
[9.26710892 -190.77964783]
[25.08642769 -208.39176941]
[17.90391922 -221.56034851]
[10.72141075 -234.72894287]
[3.53890181 -247.89752197]
[-10.73419952 -255.97282410]
[-10.60674000 -272.37149048]
[3.79016232 -280.22393799]
[17.64620781 -271.45227051]
[16.70748520 -255.08003235]
[23.88999367 -241.91143799]
[31.07250214 -228.74285889]
[38.25501251 -215.57427979]
[45.85658646 -217.91763306]
[53.71436310 -219.17405701]
[61.67366791 -219.31794739]
[69.57771301 -218.34564209]
[77.27066803 -216.27545166]
[84.60076141 -213.14732361]
[91.42324829 -209.02214050]
[97.60328674 -203.98043823]
[103.01857758 -198.12089539]
[107.56182098 -191.55836487]
[111.14280701 -184.42166138]
[113.69024658 -176.85101318]
[115.15313721 -168.99530029]
[115.50183868 -161.00912476]
[114.72863007 -153.04980469]
[112.84790802 -145.27420044]
[109.89589691 -137.83572388]
[105.92998505 -130.88122559]
[101.02754974 -124.54813385]
[95.28453064 -118.96173096]
[88.81346130 -114.23268890]
[81.74134827 -110.45485687]
[74.20710754 -107.70339966]
[76.38394928 -92.86219025]
[85.88635254 -81.39250946]
[80.23367310 -66.61557770]
[82.41051483 -51.77437210]
[94.02805328 -38.65824509]
[87.17705536 -21.59824181]
[89.66217804 -6.80553389]
[92.14729309 7.98717308]
[94.63241577 22.77988052]
[97.11753082 37.57258606]
[99.60264587 52.36529541]
[122.98345947 58.27490234]
[140.47377014 74.87834930]
[147.59094238 97.92030334]
[162.49284363 99.63298798]
[177.39474487 101.34568024]
[194.07550049 93.61700439]
[207.77787781 104.53693390]
[222.71218872 105.93923187]
[237.64649963 107.34153748]
[252.58079529 108.74384308]
[267.25357056 101.41977692]
[280.78167725 110.68920135]
[279.24856567 127.01652527]
[264.23138428 133.60560608]
[251.17849731 123.67815399]
[236.24418640 122.27584839]
[221.30989075 120.87354279]
[206.37557983 119.47123718]
[196.82408142 126.95965576]
[184.33268738 125.87152863]
[175.68205261 116.24758148]
[160.78015137 114.53488922]
[145.87825012 112.82220459]
[141.79197693 122.86161041]
[135.54196167 131.71737671]
[127.45178986 138.93099976]
[117.94031525 144.12899780]
[107.50000000 147.04225159]
[107.50000000 162.04225159]
[107.50000000 177.04225159]
[107.50000000 192.04225159]
[107.50000000 207.04225159]
[107.50000000 222.04225159]
[107.50000000 237.04225159]
[107.50000000 252.04225159]
[107.50000000 267.04223633]
[107.50000000 282.04223633]
[122.03988647 286.10354614]
[134.94427490 293.93807983]
[145.25555420 304.96441650]
[152.20857239 318.36431885]
[155.28736877 333.14349365]
[154.26348877 348.20516968]
[149.21287537 362.43170166]
[140.51036072 374.76736450]
[128.80169678 384.29678345]
[114.95575714 390.31280518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 34]
[25 33]
[26 32]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[48 96]
[49 95]
[51 93]
[52 92]
[58 69]
[59 68]
[60 67]
[61 66]
[106 126]
[107 125]
[108 124]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
