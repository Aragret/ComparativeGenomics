%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCAAGCCGGGGGGGGGGCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAxxxxxxxxxxCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUCCCCCCCCCCACAUAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[80.62656403 331.44534302]
[68.06834412 323.09417725]
[57.98212051 311.88174438]
[51.00192642 298.51281738]
[47.56653976 283.82785034]
[47.89191818 268.74987793]
[51.95760345 254.22676086]
[59.50802231 241.17141724]
[70.06855011 230.40451050]
[82.97534943 222.60289001]
[97.41707611 218.25692749]
[96.79309845 203.26991272]
[96.16912079 188.28289795]
[95.54514313 173.29588318]
[94.92116547 158.30886841]
[94.29718781 143.32185364]
[93.67321014 128.33483887]
[93.04923248 113.34781647]
[80.78686523 104.70870209]
[66.46426392 109.16551971]
[52.14167023 113.62232971]
[37.81907272 118.07914734]
[23.49647522 122.53596497]
[9.17387772 126.99278259]
[-5.14871931 131.44960022]
[-8.45098114 146.44927979]
[-18.82250977 157.77743530]
[-33.47341537 162.38682556]
[-48.46267700 159.03756714]
[-59.75826263 148.63058472]
[-64.32171631 133.96530151]
[-60.92548370 118.98661041]
[-50.48314285 107.72370148]
[-35.80362701 103.20624542]
[-20.83565712 106.64940643]
[-9.60553551 117.12699890]
[4.71706200 112.67018127]
[19.03965950 108.21336365]
[33.36225510 103.75655365]
[47.68485260 99.29973602]
[62.00745010 94.84291840]
[76.33004761 90.38610077]
[88.78205109 86.82707977]
[97.97191620 91.17333984]
[104.87891388 77.85818481]
[92.10420990 69.98327637]
[79.94597626 61.18642807]
[68.47061920 51.51567841]
[57.74081421 41.02385330]
[47.81515884 29.76824760]
[38.74787140 17.81034279]
[30.58847046 5.21544695]
[23.38152122 -7.94764948]
[17.16638565 -21.60705376]
[11.97701073 -35.68816376]
[7.84173822 -50.11406708]
[4.78315401 -64.80597687]
[2.81796265 -79.68365479]
[1.95689809 -94.66584015]
[2.20466304 -109.67070007]
[3.55990410 -124.61628723]
[6.01521969 -139.42097473]
[9.55719852 -154.00389099]
[14.16649723 -168.28540039]
[19.81793976 -182.18750000]
[26.48065948 -195.63426208]
[34.11826706 -208.55224609]
[42.68904877 -220.87088013]
[52.14619064 -232.52290344]
[62.43804550 -243.44467163]
[73.50839996 -253.57653809]
[85.29678345 -262.86312866]
[97.73882294 -271.25378418]
[110.76655579 -278.70263672]
[124.30883789 -285.16900635]
[138.29168701 -290.61758423]
[152.63874817 -295.01858521]
[167.27166748 -298.34802246]
[182.11050415 -300.58767700]
[197.07423401 -301.72534180]
[212.08110046 -301.75476074]
[227.04917908 -300.67581177]
[241.89668274 -298.49435425]
[256.54254150 -295.22232056]
[270.90673828 -290.87759399]
[284.91085815 -285.48391724]
[298.47839355 -279.07067871]
[311.53524780 -271.67297363]
[324.01010132 -263.33120728]
[335.83480835 -254.09088135]
[346.94479370 -244.00251770]
[357.27941895 -233.12120056]
[366.78216553 -221.50634766]
[375.40118408 -209.22140503]
[383.08938599 -196.33348083]
[389.80480957 -182.91294861]
[395.51071167 -169.03312683]
[400.17599487 -154.76979065]
[403.77511597 -140.20086670]
[406.28848267 -125.40592957]
[407.70230103 -110.46577454]
[408.00891113 -95.46200562]
[407.20660400 -80.47656250]
[405.29977417 -65.59129333]
[402.29882812 -50.88749695]
[398.22015381 -36.44548798]
[393.08605957 -22.34413719]
[386.92453003 -8.66046524]
[379.76925659 4.53079224]
[371.65930176 17.15758705]
[362.63897705 29.15095901]
[352.75753784 40.44540024]
[342.06893921 50.97922134]
[330.63159180 60.69489670]
[318.50796509 69.53936005]
[305.76425171 77.46430206]
[292.47003174 84.42643738]
[278.69796753 90.38774872]
[264.52322388 95.31567383]
[250.02328491 99.18328857]
[235.27728271 101.96948242]
[220.36579895 103.65903473]
[205.37023926 104.24271393]
[190.37254333 103.71733093]
[175.45458984 102.08576202]
[160.69787598 99.35691833]
[146.18298340 95.54569244]
[131.98921204 90.67291260]
[118.19407654 84.76518250]
[111.28707123 98.08033752]
[108.03624725 112.72383881]
[108.66022491 127.71085358]
[109.28420258 142.69787598]
[109.90818024 157.68489075]
[110.53215790 172.67190552]
[111.15613556 187.65892029]
[111.78011322 202.64593506]
[112.40409088 217.63294983]
[127.15709686 220.76339722]
[140.66772461 227.46514893]
[152.08671570 237.31694031]
[160.69622803 249.69947815]
[165.95507812 263.83438110]
[167.53268433 278.83309937]
[165.32986450 293.75283813]
[159.48512268 307.65570068]
[150.36584473 319.66775513]
[138.54527283 329.03393555]
[124.76646423 335.16540527]
[109.89556122 337.67681885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[44 130]
[45 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
