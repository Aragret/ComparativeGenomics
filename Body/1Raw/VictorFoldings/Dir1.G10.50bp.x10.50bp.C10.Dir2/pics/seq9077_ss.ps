%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUCCUAAACACAUGGGGGGGGGGCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAxxxxxxxxxxGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCCCCCCCCCCCUACUCCUAAUCACAU\
) } def
/len { sequence length } bind def

/coor [
[84.14282990 441.04315186]
[69.83223724 436.43264771]
[56.47575760 429.52944946]
[44.43776321 420.52185059]
[34.04666519 409.65563965]
[25.58593369 397.22720337]
[19.28638649 383.57562256]
[15.31988049 369.07333374]
[13.79462337 354.11593628]
[14.75222683 339.11151123]
[18.16656685 324.46936035]
[23.94449425 310.58895874]
[31.92838669 297.84899902]
[41.90043640 286.59695435]
[53.58860016 277.13986206]
[66.67401123 269.73568726]
[80.79969788 264.58642578]
[95.58029938 261.83255005]
[95.29471588 246.83528137]
[95.00913239 231.83799744]
[94.72354889 216.84071350]
[94.43796539 201.84342957]
[94.15238953 186.84614563]
[93.86680603 171.84887695]
[93.58122253 156.85159302]
[93.29563904 141.85430908]
[93.01005554 126.85702515]
[83.47493744 122.29532623]
[76.33712769 114.49922180]
[61.90515137 118.58800507]
[55.66495514 132.92655945]
[41.64507294 139.85308838]
[26.46526146 136.09710693]
[17.29296494 123.43208313]
[18.45906258 107.83803558]
[29.41295624 96.67800903]
[44.98255539 95.22142029]
[57.81636810 104.15602875]
[72.24834442 100.06724548]
[73.54575348 91.61359406]
[77.35571289 83.95645142]
[83.31636810 77.82308960]
[90.86158752 73.79602051]
[99.27474213 72.25773621]
[102.94973755 57.71488953]
[106.62473297 43.17204285]
[110.29972839 28.62919617]
[98.98434448 38.47612762]
[84.54664612 42.54464722]
[69.75475311 40.05469894]
[57.44469070 31.48368073]
[49.97664642 18.47490120]
[48.78246689 3.52251220]
[54.09110260 -10.50668526]
[64.88473511 -20.92289543]
[79.09392548 -25.72903252]
[93.99436188 -24.00362396]
[106.72920227 -16.07748032]
[114.85681915 -3.47026730]
[116.81884766 11.40165901]
[123.69224548 -1.93087244]
[130.56564331 -15.26340389]
[137.43904114 -28.59593582]
[124.82186890 -36.72997284]
[113.04866028 -46.04378510]
[102.22933960 -56.45040512]
[92.46492767 -67.85267639]
[83.84658813 -80.14411926]
[76.45478821 -93.20999146]
[70.35855103 -106.92827606]
[65.61479950 -121.17089844]
[62.26782608 -135.80487061]
[60.34886932 -150.69357300]
[59.87585831 -165.69796753]
[60.85320663 -180.67796326]
[63.27178955 -195.49369812]
[67.10901642 -210.00683594]
[72.32907104 -224.08186340]
[78.88320923 -237.58737183]
[86.71023560 -250.39726257]
[95.73706818 -262.39190674]
[105.87942505 -273.45935059]
[117.04260254 -283.49621582]
[129.12237549 -292.40884399]
[142.00596619 -300.11395264]
[155.57305908 -306.53964233]
[169.69699097 -311.62588501]
[184.24589539 -315.32522583]
[199.08390808 -317.60311890]
[214.07250977 -318.43826294]
[229.07173157 -317.82290649]
[243.94154358 -315.76275635]
[258.54309082 -312.27703857]
[272.74008179 -307.39834595]
[286.39990234 -301.17221069]
[299.39501953 -293.65676880]
[311.60412598 -284.92218018]
[322.91323853 -275.05001831]
[333.21673584 -264.13241577]
[342.41839600 -252.27136230]
[350.43234253 -239.57757568]
[357.18371582 -226.16958618]
[362.60952759 -212.17257690]
[366.65905762 -197.71723938]
[369.29455566 -182.93853760]
[370.49136353 -167.97448730]
[370.23831177 -152.96476746]
[368.53781128 -138.04954529]
[365.40567017 -123.36808777]
[360.87118530 -109.05746460]
[354.97668457 -95.25129700]
[347.77719116 -82.07848358]
[339.33993530 -69.66203308]
[329.74371338 -58.11787415]
[319.07806396 -47.55378723]
[307.44265747 -38.06841278]
[294.94604492 -29.75031471]
[281.70498657 -22.67716026]
[267.84304810 -16.91498756]
[253.48971558 -12.51760197]
[238.77896118 -9.52606010]
[223.84815979 -7.96829271]
[208.83671570 -7.85884619]
[193.88478088 -9.19874096]
[179.13197327 -11.97546768]
[164.71603394 -16.16310120]
[150.77157593 -21.72253799]
[143.89817810 -8.39000607]
[137.02478027 4.94252539]
[130.15138245 18.27505684]
[124.84257507 32.30419159]
[121.16757965 46.84703827]
[117.49258423 61.38988495]
[113.81758881 75.93273163]
[126.71864319 92.49845886]
[124.32520294 113.35827637]
[108.00733948 126.57144165]
[108.29292297 141.56872559]
[108.57850647 156.56600952]
[108.86408234 171.56329346]
[109.14966583 186.56056213]
[109.43524933 201.55784607]
[109.72083282 216.55513000]
[110.00641632 231.55241394]
[110.29199982 246.54969788]
[110.57757568 261.54696655]
[125.45230103 263.73614502]
[139.76377869 268.34390259]
[153.12159729 275.24453735]
[165.16131592 284.24978638]
[175.55451965 295.11401367]
[184.01763916 307.54083252]
[190.31982422 321.19119263]
[194.28912354 335.69271851]
[195.81726074 350.64981079]
[194.86254883 365.65441895]
[191.45101929 380.29721069]
[185.67576599 394.17874146]
[177.69433594 406.92025757]
[167.72445679 418.17419434]
[156.03810120 427.63354492]
[142.95411682 435.04025269]
[128.82942200 440.19223022]
[114.04936218 442.94894409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 146]
[19 145]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[29 39]
[30 38]
[44 134]
[45 133]
[46 132]
[47 131]
[60 130]
[61 129]
[62 128]
[63 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
