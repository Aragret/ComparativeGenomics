%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAACACAGGGGGGGGGGUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCxxxxxxxxxxGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUCCCCCCCCCCAACCAACACA\
) } def
/len { sequence length } bind def

/coor [
[85.18793488 152.87287903]
[71.47409821 146.91706848]
[59.87530518 137.48262024]
[51.25152969 125.26905060]
[46.24217987 111.18192291]
[45.21867371 96.26571655]
[48.25689697 81.62638092]
[55.13158417 68.34934998]
[65.33300781 57.41903687]
[78.10480499 49.64586639]
[92.50000000 45.60617065]
[92.50000000 30.60617256]
[92.50000000 15.60617256]
[92.50000000 0.60617250]
[92.50000000 -14.39382744]
[92.50000000 -29.39382744]
[92.50000000 -44.39382935]
[92.50000000 -59.39382935]
[92.50000000 -74.39382935]
[92.50000000 -89.39382935]
[77.51963043 -90.23500061]
[62.60999298 -91.91480255]
[47.81799698 -94.42795563]
[33.19018936 -97.76655579]
[18.77258873 -101.92008972]
[4.61056042 -106.87548828]
[-9.25133514 -112.61716461]
[-22.76948547 -119.12705994]
[-35.90135193 -126.38468170]
[-48.60562515 -134.36720276]
[-60.84232712 -143.04948425]
[-72.57295227 -152.40423584]
[-83.76060486 -162.40202332]
[-94.37007141 -173.01136780]
[-104.36797333 -184.19889832]
[-113.72285461 -195.92942810]
[-122.40528107 -208.16603088]
[-130.38793945 -220.87020874]
[-137.64570618 -234.00199890]
[-144.15574646 -247.52008057]
[-149.89758301 -261.38189697]
[-154.85314941 -275.54388428]
[-159.00683594 -289.96142578]
[-162.34559631 -304.58920288]
[-164.85891724 -319.38116455]
[-166.53887939 -334.29080200]
[-167.38021851 -349.27114868]
[-167.38027954 -364.27511597]
[-166.53904724 -379.25549316]
[-164.85919189 -394.16513062]
[-162.34597778 -408.95709229]
[-159.00732422 -423.58489990]
[-154.85374451 -438.00250244]
[-149.89828491 -452.16448975]
[-144.15655518 -466.02636719]
[-137.64662170 -479.54449463]
[-130.38894653 -492.67633057]
[-122.40638733 -505.38058472]
[-113.72404480 -517.61724854]
[-104.36925507 -529.34783936]
[-94.37142944 -540.53546143]
[-83.76204681 -551.14489746]
[-72.57447052 -561.14276123]
[-60.84391022 -570.49755859]
[-48.60727310 -579.17999268]
[-35.90306473 -587.16259766]
[-22.77124786 -594.42028809]
[-9.25314713 -600.93029785]
[4.60870600 -606.67205811]
[18.77069664 -611.62756348]
[33.18826675 -615.78118896]
[47.81605148 -619.11993408]
[62.60802841 -621.63317871]
[77.51765442 -623.31311035]
[92.49801636 -624.15435791]
[107.50198364 -624.15435791]
[122.48234558 -623.31311035]
[137.39196777 -621.63317871]
[152.18394470 -619.11993408]
[166.81173706 -615.78118896]
[181.22930908 -611.62756348]
[195.39129639 -606.67205811]
[209.25314331 -600.93029785]
[222.77124023 -594.42028809]
[235.90306091 -587.16259766]
[248.60726929 -579.17999268]
[260.84390259 -570.49755859]
[272.57446289 -561.14276123]
[283.76205444 -551.14489746]
[294.37142944 -540.53546143]
[304.36926270 -529.34783936]
[313.72406006 -517.61724854]
[322.40637207 -505.38058472]
[330.38894653 -492.67633057]
[337.64660645 -479.54449463]
[344.15655518 -466.02636719]
[349.89828491 -452.16448975]
[354.85375977 -438.00250244]
[359.00732422 -423.58489990]
[362.34597778 -408.95709229]
[364.85919189 -394.16513062]
[366.53906250 -379.25549316]
[367.38027954 -364.27511597]
[367.38021851 -349.27114868]
[366.53887939 -334.29080200]
[364.85891724 -319.38116455]
[362.34558105 -304.58920288]
[359.00683594 -289.96142578]
[354.85314941 -275.54388428]
[349.89758301 -261.38189697]
[344.15576172 -247.52008057]
[337.64569092 -234.00199890]
[330.38793945 -220.87020874]
[322.40527344 -208.16603088]
[313.72283936 -195.92942810]
[304.36798096 -184.19889832]
[294.37005615 -173.01136780]
[283.76058960 -162.40202332]
[272.57296753 -152.40423584]
[260.84231567 -143.04948425]
[248.60562134 -134.36720276]
[235.90135193 -126.38468170]
[222.76948547 -119.12705994]
[209.25134277 -112.61716461]
[195.38943481 -106.87548828]
[181.22741699 -101.92008972]
[166.80981445 -97.76655579]
[152.18200684 -94.42795563]
[137.39001465 -91.91480255]
[122.48036957 -90.23500061]
[107.50000000 -89.39382935]
[107.50000000 -74.39382935]
[107.50000000 -59.39382935]
[107.50000000 -44.39382935]
[107.50000000 -29.39382744]
[107.50000000 -14.39382744]
[107.50000000 0.60617250]
[107.50000000 15.60617256]
[107.50000000 30.60617256]
[107.50000000 45.60617065]
[121.89519501 49.64586639]
[134.66699219 57.41903687]
[144.86842346 68.34934998]
[151.74310303 81.62638092]
[154.78132629 96.26571655]
[153.75781250 111.18192291]
[148.74847412 125.26905060]
[140.12469482 137.48262024]
[128.52589417 146.91706848]
[114.81206512 152.87287903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
