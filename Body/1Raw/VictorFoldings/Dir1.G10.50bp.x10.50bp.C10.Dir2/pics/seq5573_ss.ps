%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUCCCCGGGGGGGGGGACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUxxxxxxxxxxGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCCCCCCCCCCCAUCAUUCCC\
) } def
/len { sequence length } bind def

/coor [
[79.40582275 378.34826660]
[66.18563080 371.07580566]
[55.29882431 360.62878418]
[47.48769379 347.71954346]
[43.28481293 333.22824097]
[42.97673798 318.14288330]
[46.58448029 303.49206543]
[53.86205292 290.27468872]
[64.31326294 279.39190674]
[77.22552490 271.58575439]
[91.71846008 267.38848877]
[91.40640259 252.39172363]
[91.09434509 237.39497375]
[90.78228760 222.39820862]
[90.47023773 207.40145874]
[90.15818024 192.40470886]
[89.84612274 177.40795898]
[89.53406525 162.41119385]
[89.22200775 147.41444397]
[88.90995026 132.41769409]
[70.14020538 102.66793823]
[87.50453186 77.54753113]
[76.20552826 67.68180847]
[65.28711700 77.98442078]
[53.42531967 87.18514252]
[40.73089218 95.19806671]
[27.32235718 101.94837952]
[13.32491302 107.37305450]
[-1.13074672 111.42144012]
[-15.90965080 114.05573273]
[-30.87380981 115.25134277]
[-45.88350296 114.99710846]
[-60.79858398 113.29539490]
[-75.47979736 110.16209412]
[-89.79005432 105.62646484]
[-103.59575653 99.73085022]
[-116.76798248 92.53030396]
[-129.18376160 84.09205627]
[-140.72715759 74.49488831]
[-151.29039001 63.82841492]
[-160.77482605 52.19222641]
[-169.09191895 39.69496918]
[-176.16401672 26.45333099]
[-181.92507935 12.59094620]
[-186.32130432 -1.76275170]
[-189.31167603 -16.47374153]
[-190.86824036 -31.40467072]
[-190.97648621 -46.41612625]
[-189.63539124 -61.36794662]
[-186.85748291 -76.12052917]
[-182.66870117 -90.53613281]
[-177.10813904 -104.48015594]
[-170.22773743 -117.82240295]
[-162.09172058 -130.43829346]
[-152.77607727 -142.21005249]
[-142.36776733 -153.02774048]
[-130.96395874 -162.79037476]
[-118.67116547 -171.40679932]
[-105.60414886 -178.79653931]
[-91.88490295 -184.89062500]
[-77.64154053 -189.63215637]
[-63.00703812 -192.97683716]
[-48.11804581 -194.89346313]
[-33.11357880 -195.36413574]
[-18.13373566 -194.38444519]
[-3.31838012 -191.96354675]
[11.19415760 -188.12403870]
[25.26837349 -182.90177917]
[38.77285767 -176.34553528]
[51.58152008 -168.51649475]
[63.57476425 -159.48779297]
[74.64060974 -149.34370422]
[84.67574310 -138.17895508]
[93.58645630 -126.09778595]
[101.28955841 -113.21299744]
[107.71311951 -99.64488983]
[112.79716492 -85.52016449]
[116.49422455 -70.97068787]
[118.76978302 -56.13231277]
[119.60259247 -41.14358521]
[118.98487854 -26.14445496]
[116.92240143 -11.27496529]
[113.43442535 3.32604575]
[108.55351257 17.52224922]
[102.32523346 31.18109703]
[94.80775452 44.17505646]
[86.07125092 56.38280487]
[97.37025452 66.24852753]
[112.21146393 68.42536163]
[125.86770630 62.21995544]
[139.52394104 56.01454926]
[153.18019104 49.80914307]
[166.83642578 43.60373688]
[154.11694336 35.65297318]
[152.19097900 20.77713013]
[162.46624756 9.84924793]
[177.43238831 10.85672188]
[186.15032959 23.06316948]
[182.24841309 37.54616547]
[196.47518921 32.79235077]
[210.70196533 28.03853607]
[224.92874146 23.28472137]
[239.15553284 18.53090668]
[249.61587524 5.90105534]
[265.73635864 8.91144848]
[270.93359375 24.46525192]
[259.86111450 36.56204605]
[243.90934753 32.75768661]
[229.68255615 37.51150131]
[215.45578003 42.26531601]
[201.22900391 47.01913071]
[187.00222778 51.77294540]
[173.04183960 57.25997543]
[159.38558960 63.46538162]
[145.72935486 69.67079163]
[132.07310486 75.87619781]
[118.41687012 82.08160400]
[127.96511841 89.19826508]
[134.24180603 101.18090057]
[148.14436340 106.81285858]
[164.30236816 104.01090240]
[174.59873962 116.77478790]
[168.44145203 131.97412109]
[152.16459656 133.97314453]
[142.51240540 120.71541595]
[128.60984802 115.08345795]
[122.43406677 119.33900452]
[123.62940979 134.29130554]
[110.08249664 127.85009003]
[103.90670776 132.10563660]
[104.21876526 147.10238647]
[104.53082275 162.09915161]
[104.84287262 177.09590149]
[105.15493011 192.09265137]
[105.46698761 207.08940125]
[105.77904510 222.08616638]
[106.09110260 237.08291626]
[106.40316010 252.07966614]
[106.71520996 267.07641602]
[121.37020874 270.66717529]
[134.59600830 277.92944336]
[145.49087524 288.36804199]
[153.31198120 301.27124023]
[157.52604675 315.75930786]
[157.84576416 330.84442139]
[154.24934387 345.49801636]
[146.98197937 358.72103882]
[136.53918457 369.61184692]
[123.63294983 377.42797852]
[109.14325714 381.63644409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 88]
[23 87]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
