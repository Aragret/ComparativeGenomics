%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACGAUUAAGGGGGGGGGGAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUxxxxxxxxxxCUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUACCCCCCCCCCUCAACCAUUAA\
) } def
/len { sequence length } bind def

/coor [
[88.08026123 532.22802734]
[74.59137726 525.49645996]
[63.10588074 515.73193359]
[54.29151154 503.50201416]
[48.66072845 489.51782227]
[46.54090118 474.59234619]
[48.05527115 459.59335327]
[53.11579132 445.39285278]
[61.42825699 432.81640625]
[72.50939178 422.59527588]
[85.71494293 415.32363892]
[100.27716827 411.42425537]
[99.96919250 396.42742920]
[99.66121674 381.43057251]
[99.35323334 366.43374634]
[99.04525757 351.43692017]
[98.73728180 336.44006348]
[98.42930603 321.44323730]
[98.12132263 306.44638062]
[97.81334686 291.44955444]
[89.81636047 278.88381958]
[97.26869202 264.92770386]
[89.27170563 252.36196899]
[96.72402954 238.40585327]
[88.72705078 225.84011841]
[96.17937469 211.88400269]
[95.87139893 196.88716125]
[95.56342316 181.89031982]
[85.67370605 167.42526245]
[94.60379028 151.35403442]
[93.98796844 136.36668396]
[93.37213898 121.37932587]
[80.38797760 113.64015961]
[74.64316559 98.60955048]
[79.72727966 82.31748199]
[94.60567474 72.11014557]
[89.18704987 58.12306213]
[83.76842499 44.13597870]
[78.34980011 30.14889717]
[72.93117523 16.16181374]
[61.04900360 15.37540817]
[50.32094574 8.49995041]
[43.83391571 -3.42721581]
[43.88636780 -17.84002304]
[31.55508423 -26.38048172]
[19.22380066 -34.92094040]
[6.89251614 -43.46139908]
[-5.52579832 -51.87480927]
[-18.02983475 -60.16028214]
[-30.53386879 -68.44575500]
[-46.92631149 -68.91469574]
[-54.47725677 -83.47200775]
[-45.41894150 -97.14237213]
[-29.06978416 -95.86289978]
[-22.24839592 -80.94979095]
[-9.74435902 -72.66432190]
[2.75967646 -64.37884521]
[10.11811352 -63.29921722]
[15.43297482 -55.79268265]
[27.76425934 -47.25222397]
[40.09554291 -38.71176529]
[52.42682648 -30.17130661]
[65.92221069 -36.71917725]
[66.84562683 -51.69072723]
[67.76903534 -66.66227722]
[53.34508514 -71.02648163]
[40.31668854 -78.59996033]
[29.38645363 -88.97428894]
[21.14383507 -101.58999634]
[16.03334808 -115.76672363]
[14.33059311 -130.73994446]
[16.12739754 -145.70216370]
[21.32686424 -159.84651184]
[29.64858818 -172.41017151]
[40.64379501 -182.71560669]
[53.71952057 -190.20707703]
[68.17060852 -194.48056030]
[83.21773529 -195.30560303]
[98.04943085 -192.63771057]
[111.86582947 -186.62074280]
[123.92182922 -177.57919312]
[133.56727600 -166.00068665]
[140.28199768 -152.50959778]
[143.70388794 -137.83352661]
[143.64839172 -122.76389313]
[140.11851501 -108.11341095]
[133.30459595 -94.67214966]
[123.57413483 -83.16499329]
[111.45186615 -74.21249390]
[97.59152222 -68.29745483]
[82.74058533 -65.73886108]
[81.81717682 -50.76731491]
[80.89376068 -35.79576492]
[98.12136078 -12.31344509]
[86.91825867 10.74318886]
[92.33688354 24.73027229]
[97.75550842 38.71735382]
[103.17413330 52.70443726]
[108.59275818 66.69152069]
[121.95085907 73.51509857]
[136.45948792 69.70723724]
[150.96810913 65.89938354]
[163.71258545 52.64763641]
[180.44242859 57.85886765]
[194.86981201 53.75392151]
[203.90118408 40.49443054]
[219.90901184 39.43200302]
[230.61347961 51.38164139]
[227.80303955 67.17660522]
[213.63360596 74.70035553]
[198.97476196 68.18130493]
[184.54737854 72.28624725]
[178.36018372 82.72563934]
[166.32583618 86.23931885]
[154.77597046 80.40800476]
[140.26733398 84.21586609]
[125.75871277 88.02371979]
[123.61695862 109.33497620]
[108.35949707 120.76350403]
[108.97531891 135.75085449]
[109.59114838 150.73820496]
[118.55409241 160.06929016]
[118.72531891 172.60493469]
[110.56025696 181.58235168]
[110.86823273 196.57917786]
[111.17621613 211.57601929]
[119.19522858 225.21441650]
[111.72087097 238.09786987]
[119.73988342 251.73628235]
[112.26552582 264.61972046]
[120.28453827 278.25811768]
[112.81018829 291.14157104]
[113.11816406 306.13842773]
[113.42613983 321.13525391]
[113.73411560 336.13208008]
[114.04209900 351.12893677]
[114.35007477 366.12576294]
[114.65805054 381.12261963]
[114.96602631 396.11944580]
[115.27400970 411.11627197]
[129.98403931 414.41452026]
[143.47700500 421.13784790]
[154.96841431 430.89544678]
[163.79020691 443.12002563]
[169.42945862 457.10079956]
[171.55833435 472.02496338]
[170.05305481 487.02490234]
[165.00114441 501.22848511]
[156.69630432 513.80993652]
[145.62138367 524.03778076]
[132.42022705 531.31744385]
[117.86037445 535.22564697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 130]
[24 128]
[26 126]
[27 125]
[28 124]
[30 121]
[31 120]
[32 119]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[44 62]
[45 61]
[46 60]
[47 59]
[48 57]
[49 56]
[50 55]
[63 93]
[64 92]
[65 91]
[100 117]
[101 116]
[102 115]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
