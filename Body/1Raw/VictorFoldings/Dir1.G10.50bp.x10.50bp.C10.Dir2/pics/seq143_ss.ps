%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAACAUACUGGGGGGGGGGUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUxxxxxxxxxxCCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCCCCCCCCCCCAACAUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.65744019]
[71.19830322 365.64141846]
[59.48964310 356.11199951]
[50.78712082 343.77633667]
[45.73651886 329.54980469]
[44.71262741 314.48812866]
[47.79142761 299.70898438]
[54.74444962 286.30905151]
[65.05573273 275.28271484]
[77.96011353 267.44821167]
[92.50000000 263.38690186]
[92.50000000 248.38690186]
[92.50000000 233.38690186]
[92.50000000 218.38690186]
[92.50000000 203.38690186]
[92.50000000 188.38690186]
[92.50000000 173.38690186]
[92.50000000 158.38690186]
[92.50000000 143.38690186]
[92.50000000 128.38690186]
[83.53702545 124.31123352]
[76.42543793 117.50159454]
[71.96498871 108.72375488]
[70.65729523 98.96487427]
[72.64941406 89.32239532]
[77.71731567 80.88069153]
[69.20623016 68.52912140]
[60.69513702 56.17754745]
[52.18404770 43.82597351]
[37.98255920 36.85257721]
[37.13221741 21.98226547]
[28.62112617 9.63069248]
[20.11003685 -2.72088051]
[11.59894657 -15.07245255]
[-3.68904638 -18.05825806]
[-12.14454937 -30.70575333]
[-9.20382595 -45.26211548]
[-17.71491623 -57.61368942]
[-26.22600555 -69.96526337]
[-36.88763046 -80.51655579]
[-49.32707214 -88.89869690]
[-61.76651382 -97.28083801]
[-74.20595551 -105.66297913]
[-86.81707764 -113.78452301]
[-99.59443665 -121.64195251]
[-112.37179565 -129.49937439]
[-126.23011017 -122.72068787]
[-141.55064392 -124.53314972]
[-153.44465637 -134.35842896]
[-158.11680603 -149.06129456]
[-154.07624817 -163.95013428]
[-142.61230469 -174.27395630]
[-127.38306427 -176.73847961]
[-113.24813843 -170.55728149]
[-104.71791840 -157.70275879]
[-104.51437378 -142.27673340]
[-91.73701477 -134.41931152]
[-78.95965576 -126.56188202]
[-74.13057709 -126.79756927]
[-69.11409760 -123.95746613]
[-65.82380676 -118.10242462]
[-53.38436890 -109.72027588]
[-40.94493103 -101.33813477]
[-28.50548935 -92.95599365]
[-34.67802048 -106.62712860]
[-36.41051102 -121.52674103]
[-33.53955078 -136.24942017]
[-26.33593559 -149.40647888]
[-15.47914982 -159.75685120]
[-1.99325645 -166.32424927]
[12.84968758 -168.48919678]
[27.64962387 -166.04750061]
[41.01054764 -159.22944641]
[51.67219543 -148.67817688]
[58.62890244 -135.38893127]
[61.22448349 -120.61520386]
[59.21411133 -105.75054169]
[52.78740692 -92.19703674]
[42.55057526 -81.23312378]
[29.46920013 -73.89298248]
[14.77718449 -70.86897278]
[-0.13965023 -72.44631958]
[-13.87443352 -78.47634888]
[-5.36334324 -66.12477875]
[3.14774680 -53.77320862]
[17.79710007 -51.33762360]
[26.60450745 -38.93261719]
[23.95051956 -23.58354378]
[32.46160889 -11.23197079]
[40.97269821 1.11960196]
[49.48379135 13.47117424]
[63.07650757 19.56110573]
[64.53562164 35.31488419]
[73.04671478 47.66645813]
[81.55780029 60.01802826]
[90.06889343 72.36959839]
[113.51973724 73.93695068]
[128.30734253 92.20511627]
[143.30653381 92.04907990]
[158.30572510 91.89304352]
[173.30490112 91.73699951]
[188.30409241 91.58096313]
[203.30328369 91.42492676]
[218.30247498 91.26889038]
[233.30166626 91.11285400]
[248.30084229 90.95681763]
[254.31120300 76.96412659]
[265.49768066 66.63055420]
[279.92214966 61.74647141]
[295.08551025 63.15806580]
[308.36059570 70.62077332]
[317.44741821 82.84163666]
[320.77163696 97.70331573]
[317.75732422 112.63092804]
[308.92669678 125.03818512]
[295.80972290 132.77545166]
[280.67904663 134.50219727]
[266.15606689 129.91925049]
[254.75703430 119.82064056]
[248.45687866 105.95600891]
[233.45770264 106.11204529]
[218.45851135 106.26808167]
[203.45932007 106.42411804]
[188.46012878 106.58015442]
[173.46093750 106.73619080]
[158.46176147 106.89222717]
[143.46257019 107.04826355]
[128.46337891 107.20429993]
[124.18671417 116.64538574]
[116.89608765 124.01225281]
[107.50000000 128.38690186]
[107.50000000 143.38690186]
[107.50000000 158.38690186]
[107.50000000 173.38690186]
[107.50000000 188.38690186]
[107.50000000 203.38690186]
[107.50000000 218.38690186]
[107.50000000 233.38690186]
[107.50000000 248.38690186]
[107.50000000 263.38690186]
[122.03988647 267.44821167]
[134.94427490 275.28271484]
[145.25555420 286.30905151]
[152.20857239 299.70898438]
[155.28736877 314.48812866]
[154.26348877 329.54980469]
[149.21287537 343.77633667]
[140.51036072 356.11199951]
[128.80169678 365.64141846]
[114.95575714 371.65744019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 96]
[27 95]
[28 94]
[29 93]
[31 91]
[32 90]
[33 89]
[34 88]
[37 85]
[38 84]
[39 83]
[40 64]
[41 63]
[42 62]
[43 61]
[44 58]
[45 57]
[46 56]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
