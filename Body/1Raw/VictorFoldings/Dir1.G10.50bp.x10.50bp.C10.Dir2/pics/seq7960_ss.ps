%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCAACACGGGGGGGGGGCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAxxxxxxxxxxAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUCCCCCCCCCCGAAUCAACAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 384.13159180]
[71.19830322 378.11553955]
[59.48964310 368.58612061]
[50.78712082 356.25045776]
[45.73651886 342.02395630]
[44.71262741 326.96224976]
[47.79142761 312.18310547]
[54.74444962 298.78317261]
[65.05573273 287.75683594]
[77.96011353 279.92233276]
[92.50000000 275.86102295]
[92.50000000 260.86102295]
[92.50000000 245.86102295]
[92.50000000 230.86102295]
[92.50000000 215.86102295]
[92.50000000 200.86102295]
[92.50000000 185.86102295]
[92.50000000 170.86102295]
[92.50000000 155.86102295]
[92.50000000 140.86102295]
[81.02889252 136.95903015]
[71.17156982 129.91311646]
[63.76654434 120.32263947]
[59.44372177 109.00340271]
[58.57083130 96.91829681]
[61.22211838 85.09533691]
[67.17205811 74.54024506]
[75.91451263 66.15088654]
[69.56738281 52.55994034]
[63.22025299 38.96898651]
[56.87312317 25.37803650]
[50.52599335 11.78708649]
[48.90988922 26.69977188]
[43.70222855 40.76676559]
[35.21812820 53.13689041]
[23.97094345 63.06164932]
[10.64122677 69.94050598]
[-3.96445584 73.35723114]
[-18.96233559 73.10508728]
[-33.44491196 69.19932556]
[-46.53586578 61.87628174]
[-57.44307709 51.57906342]
[-65.50656891 38.93073654]
[-70.23842621 24.69664001]
[-71.35233307 9.73805618]
[-68.78088379 -5.03988934]
[-62.67968369 -18.74300385]
[-53.41790390 -30.54212952]
[-41.55595779 -39.72332001]
[-27.81159782 -45.73102951]
[-13.01647758 -48.20174408]
[1.93417048 -46.98596191]
[16.13570213 -42.15724945]
[28.72880554 -34.00778198]
[38.95148468 -23.03067780]
[46.18444824 -9.89198208]
[46.80842209 -24.87899780]
[43.40544510 -39.48789215]
[36.22293854 -52.65647125]
[29.04042816 -65.82505798]
[21.85791969 -78.99363708]
[7.58481741 -87.06894684]
[7.71227789 -103.46759796]
[22.10918045 -111.32006836]
[35.96522522 -102.54840851]
[35.02650070 -86.17614746]
[42.20901108 -73.00756836]
[49.39151764 -59.83898163]
[56.57402802 -46.67039871]
[57.33270264 -61.65119934]
[61.34473419 -76.10469818]
[68.41643524 -89.33311462]
[78.20640564 -100.69782257]
[90.24200439 -109.65015411]
[103.94219971 -115.75791931]
[118.64556122 -118.72625732]
[133.64227295 -118.41185760]
[148.20831299 -114.82990265]
[161.64048767 -108.15332031]
[173.29031372 -98.70442963]
[182.59538269 -86.93940735]
[189.10646057 -73.42623901]
[192.50920105 -58.81729126]
[192.63935852 -43.81785583]
[189.49063110 -29.15206146]
[183.21502686 -15.52793694]
[174.11550903 -3.60321522]
[162.63140869 6.04640818]
[149.31712341 12.95507622]
[134.81542969 16.78925705]
[119.82643127 17.36384583]
[105.07376862 14.65110207]
[91.26966095 8.78199196]
[79.08052063 0.03985882]
[69.09481049 -11.15324974]
[61.79544067 -24.25502014]
[61.17146301 -9.26800442]
[64.11694336 5.43995714]
[70.46407318 19.03090858]
[76.81120300 32.62186050]
[83.15833282 46.21281052]
[89.50546265 59.80376053]
[112.95411682 60.52768326]
[132.27183533 73.83892822]
[141.29838562 95.49268341]
[156.25863647 96.58399200]
[171.21888733 97.67530060]
[183.11512756 87.61959839]
[198.27140808 88.93946075]
[207.78466797 100.34267426]
[222.74491882 101.43399048]
[237.70516968 102.52529907]
[250.73579407 93.16676331]
[266.13732910 97.65806580]
[272.09506226 112.55387878]
[264.03869629 126.42739868]
[248.14840698 128.63604736]
[236.61386108 117.48554993]
[221.65361023 116.39423370]
[206.69335938 115.30292511]
[195.62594604 125.20484161]
[180.43856812 124.31121063]
[170.12757874 112.63555145]
[155.16732788 111.54423523]
[140.20707703 110.45292664]
[137.52449036 117.82653046]
[133.50332642 124.56420898]
[128.28700256 130.42562866]
[122.06160736 135.20167542]
[115.04922485 138.72200012]
[107.50000000 140.86102295]
[107.50000000 155.86102295]
[107.50000000 170.86102295]
[107.50000000 185.86102295]
[107.50000000 200.86102295]
[107.50000000 215.86102295]
[107.50000000 230.86102295]
[107.50000000 245.86102295]
[107.50000000 260.86102295]
[107.50000000 275.86102295]
[122.03988647 279.92233276]
[134.94427490 287.75683594]
[145.25555420 298.78317261]
[152.20857239 312.18310547]
[155.28736877 326.96224976]
[154.26348877 342.02395630]
[149.21287537 356.25045776]
[140.51036072 368.58612061]
[128.80169678 378.11553955]
[114.95575714 384.13159180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[56 97]
[57 96]
[58 69]
[59 68]
[60 67]
[61 66]
[105 125]
[106 124]
[107 123]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
