%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCAACCCGGGGGGGGGGGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCxxxxxxxxxxCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGACCCCCCCCCCGGCCUAACCC\
) } def
/len { sequence length } bind def

/coor [
[77.26847839 517.51617432]
[62.77878571 513.30773926]
[49.87255478 505.49160767]
[39.42975616 494.60076904]
[32.16239166 481.37777710]
[28.56596565 466.72415161]
[28.88568687 451.63906860]
[33.09975815 437.15100098]
[40.92085266 424.24777222]
[51.81572342 413.80920410]
[65.04153442 406.54693604]
[79.69652557 402.95617676]
[80.00858307 387.95941162]
[80.32063293 372.96264648]
[80.63269043 357.96591187]
[80.94474792 342.96914673]
[81.25680542 327.97241211]
[81.56886292 312.97564697]
[81.88092041 297.97888184]
[82.19297028 282.98214722]
[82.50502777 267.98538208]
[82.81708527 252.98863220]
[83.12914276 237.99188232]
[72.73585510 233.84759521]
[64.09680176 226.69488525]
[58.05730057 217.21231079]
[55.21482468 206.30740356]
[55.85994720 195.02983093]
[59.94671631 184.47035217]
[67.09551239 175.65530396]
[76.62825775 169.44686890]
[87.63271332 166.45875549]
[89.19029236 151.53984070]
[90.74787140 136.62094116]
[92.30545044 121.70202637]
[93.86303711 106.78311157]
[89.02756500 106.48368835]
[84.09549713 103.75826263]
[80.10817719 98.61296844]
[67.84580994 89.97385406]
[52.10805893 88.35094452]
[46.15985489 74.69561005]
[33.89748764 66.05649567]
[27.25458336 65.06687164]
[22.81427574 61.39060211]
[21.31488037 56.79415512]
[9.42250061 47.65242004]
[-4.18555975 54.56497955]
[-19.44542503 54.88007736]
[-33.32723618 48.53515244]
[-43.07475281 36.78999710]
[-46.75259399 21.97661781]
[-43.63052368 7.03622055]
[-34.32843399 -5.06476498]
[-20.69325829 -11.92368126]
[-5.43227100 -12.17868423]
[8.42444706 -5.77914381]
[18.12563515 6.00430679]
[21.74511337 20.83205605]
[18.56423378 35.76004028]
[30.45661354 44.90177536]
[42.53660202 53.79412460]
[54.79896927 62.43324280]
[69.65962982 63.43822479]
[76.48492432 77.71148682]
[88.74729156 86.35060120]
[103.64919281 84.63790894]
[113.63191986 73.44214630]
[123.61464691 62.24637985]
[133.59736633 51.05061340]
[119.02526855 54.60783386]
[104.24635315 52.04196167]
[91.72608948 43.78104019]
[83.55312347 31.20317650]
[81.09089661 16.40664101]
[84.75016785 1.85982871]
[93.92047882 -10.01052666]
[107.07202911 -17.22418213]
[122.01083374 -18.57773972]
[136.24476624 -13.84539509]
[147.39929199 -3.81660938]
[153.61358643 9.83559132]
[153.85095215 24.83371353]
[148.07261658 38.67456055]
[160.68374634 30.55301857]
[173.29487610 22.43147659]
[185.55723572 13.79236031]
[197.44961548 4.65062666]
[209.34199524 -4.49110794]
[221.23437500 -13.63284206]
[227.46002197 -28.17766953]
[242.26600647 -29.79996490]
[254.15838623 -38.94169998]
[253.60415649 -54.44887161]
[262.29855347 -67.30137634]
[276.89843750 -72.55716705]
[291.78982544 -68.19527435]
[301.24670410 -55.89294815]
[301.63265991 -40.38067245]
[292.79934692 -27.62324142]
[278.14331055 -22.52614403]
[263.30010986 -27.04932022]
[251.40774536 -17.90758514]
[246.03273010 -4.01663494]
[230.37611389 -1.74046218]
[218.48373413 7.40127182]
[206.59135437 16.54300690]
[194.69897461 25.68474007]
[194.22837830 28.51066971]
[192.57336426 31.31333160]
[189.73963928 33.62673187]
[185.90634155 34.99672699]
[181.41641235 35.04260635]
[168.80528259 43.16414642]
[156.19415283 51.28569031]
[144.79313660 61.03334045]
[134.81040955 72.22911072]
[124.82768250 83.42487335]
[114.84496307 94.62063599]
[108.78194427 108.34069061]
[107.22436523 123.25960541]
[105.66678619 138.17851257]
[104.10920715 153.09742737]
[102.55162048 168.01634216]
[118.54723358 178.53620911]
[127.01927948 195.61434937]
[125.72864532 214.55360413]
[115.10894012 230.19073486]
[98.12589264 238.30392456]
[97.81384277 253.30068970]
[97.50178528 268.29742432]
[97.18972778 283.29418945]
[96.87767029 298.29095459]
[96.56561279 313.28768921]
[96.25355530 328.28445435]
[95.94150543 343.28121948]
[95.62944794 358.27795410]
[95.31739044 373.27471924]
[95.00533295 388.27145386]
[94.69327545 403.26821899]
[109.18621063 407.46551514]
[122.09847260 415.27166748]
[132.54968262 426.15441895]
[139.82725525 439.37182617]
[143.43499756 454.02264404]
[143.12692261 469.10797119]
[138.92404175 483.59930420]
[131.11291504 496.50854492]
[120.22611237 506.95553589]
[107.00591278 514.22802734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[32 124]
[33 123]
[34 122]
[35 121]
[36 120]
[39 66]
[40 65]
[42 63]
[43 62]
[46 61]
[47 60]
[67 119]
[68 118]
[69 117]
[70 116]
[84 115]
[85 114]
[86 113]
[87 108]
[88 107]
[89 106]
[90 105]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
