%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACUCCUGGGGGGGGGGCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAxxxxxxxxxxUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCCCCCCCCCCCUCCUACUCCU\
) } def
/len { sequence length } bind def

/coor [
[78.42288971 383.81945801]
[64.40094757 378.26644897]
[52.20098877 369.40011597]
[42.58991623 357.77780151]
[36.17189026 344.13009644]
[33.35035324 329.31491089]
[34.30266953 314.26354980]
[38.96897507 299.92211914]
[47.05594254 287.19216919]
[58.05521774 276.87390137]
[71.27537537 269.61590576]
[85.88539124 265.87448120]
[85.88539124 250.87448120]
[85.88539124 235.87448120]
[85.88539124 220.87448120]
[85.88539124 205.87448120]
[85.88539124 190.87448120]
[85.88539124 175.87448120]
[85.88539124 160.87448120]
[85.88539124 145.87448120]
[85.88539124 130.87448120]
[74.39472198 121.23266602]
[59.62260437 123.83738708]
[44.85049057 126.44210815]
[30.07837296 129.04682922]
[15.30625629 131.65155029]
[0.53414035 134.25627136]
[-3.10910749 149.04298401]
[-12.45680046 161.06549072]
[-25.88939476 168.24081421]
[-41.07961273 169.32579041]
[-55.39565659 164.13244629]
[-66.35718536 153.56056213]
[-72.06504822 139.44177246]
[-71.53031921 124.22225189]
[-64.84564972 110.53886414]
[-53.16919708 100.76234436]
[-38.52397919 96.58653259]
[-23.44736290 98.73491669]
[-10.55146599 106.83526611]
[-2.07058239 119.48416138]
[12.70153427 116.87944031]
[27.47364998 114.27471924]
[42.24576569 111.66999054]
[57.01788330 109.06526947]
[71.79000092 106.46054840]
[74.99899292 91.80782318]
[62.66771317 83.26736450]
[50.33642960 74.72690582]
[38.00514221 66.18644714]
[25.67386055 57.64598846]
[9.21016979 53.59836578]
[8.54200649 36.65758896]
[24.63576317 31.32586479]
[34.21431732 45.31470490]
[46.54560089 53.85516357]
[58.87688828 62.39562225]
[71.20816803 70.93608093]
[83.53945160 79.47653961]
[97.23007965 73.34736633]
[99.07340240 58.46105957]
[100.91672516 43.57474899]
[93.33524323 26.82507133]
[104.37834167 13.22012901]
[105.91563416 -1.70088696]
[106.83905029 -16.67243767]
[107.14702606 -31.66927528]
[107.45500946 -46.66611481]
[107.76298523 -61.66295242]
[93.71456909 -67.40808105]
[82.69287872 -77.84296417]
[76.18850708 -91.55637360]
[75.08112335 -106.69367981]
[79.52047729 -121.20769501]
[88.90619659 -133.13549805]
[101.96893311 -140.86398315]
[116.94206238 -143.34791565]
[131.80058289 -140.25135803]
[144.53501892 -131.99310303]
[153.42312622 -119.69001770]
[157.26286316 -105.00598145]
[155.53494263 -89.92690277]
[148.47305298 -76.49208832]
[137.03225708 -66.51850128]
[122.75981903 -61.35497284]
[122.45184326 -46.35813522]
[122.14386749 -31.36129761]
[121.83589172 -16.36445999]
[123.74291229 -14.23037910]
[124.89233398 -11.18931770]
[124.92557526 -7.53615046]
[123.60121155 -3.69302654]
[120.83665466 -0.16359454]
[119.29936218 14.75742149]
[126.70037842 24.37444496]
[125.50130463 36.85376740]
[115.80303955 45.41807556]
[113.95970917 60.30438232]
[112.11638641 75.19068909]
[117.16910553 80.73325348]
[121.71649933 66.43916321]
[136.36926270 63.23037720]
[146.47445679 74.31572723]
[141.92675781 88.60972595]
[127.27453613 91.81838989]
[132.32725525 97.36095428]
[147.32014465 96.89903259]
[162.31303406 96.43710327]
[177.30590820 95.97518158]
[185.15460205 82.69355011]
[198.94818115 75.78408051]
[214.28515625 77.45154572]
[226.27157593 87.16387939]
[231.08261108 101.82189941]
[227.18305969 116.74828339]
[215.81727600 127.18009186]
[200.61203003 129.78855896]
[186.41926575 123.74133301]
[177.76783752 110.96806335]
[162.77494812 111.42999268]
[147.78207397 111.89191437]
[132.78918457 112.35384369]
[146.16813660 119.13643646]
[158.09312439 128.23558044]
[163.56010437 142.20384216]
[160.97964478 156.98020935]
[151.10195923 168.26876831]
[136.79881287 172.78758240]
[122.22852325 169.22290039]
[111.62714386 158.61108398]
[108.07677460 144.03822327]
[100.88539124 130.87448120]
[100.88539124 145.87448120]
[100.88539124 160.87448120]
[100.88539124 175.87448120]
[100.88539124 190.87448120]
[100.88539124 205.87448120]
[100.88539124 220.87448120]
[100.88539124 235.87448120]
[100.88539124 250.87448120]
[100.88539124 265.87448120]
[115.49539948 269.61590576]
[128.71556091 276.87390137]
[139.71482849 287.19216919]
[147.80180359 299.92211914]
[152.46810913 314.26354980]
[153.42042542 329.31491089]
[150.59889221 344.13009644]
[144.18086243 357.77780151]
[134.56979370 369.40011597]
[122.36983490 378.26644897]
[108.34788513 383.81945801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[60 99]
[61 98]
[62 97]
[64 94]
[65 93]
[66 88]
[67 87]
[68 86]
[69 85]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
