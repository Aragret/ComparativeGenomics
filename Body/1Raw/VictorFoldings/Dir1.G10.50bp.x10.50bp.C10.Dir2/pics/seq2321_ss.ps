%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACACCCAUGGGGGGGGGGAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCxxxxxxxxxxCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGCCCCCCCCCCUAAUACCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.88098145]
[71.19830322 361.86495972]
[59.48964310 352.33554077]
[50.78712082 339.99987793]
[45.73651886 325.77334595]
[44.71262741 310.71166992]
[47.79142761 295.93252563]
[54.74444962 282.53259277]
[65.05573273 271.50625610]
[77.96011353 263.67175293]
[92.50000000 259.61044312]
[92.50000000 244.61042786]
[92.50000000 229.61042786]
[92.50000000 214.61042786]
[92.50000000 199.61042786]
[92.50000000 184.61042786]
[92.50000000 169.61042786]
[92.50000000 154.61042786]
[92.50000000 139.61042786]
[92.50000000 124.61042786]
[84.32017517 120.39770508]
[78.14572144 113.57622528]
[63.65012741 117.43338013]
[56.10356903 122.69658661]
[48.81279373 121.21665192]
[34.24008942 124.77140808]
[19.66738701 128.32617188]
[14.73730373 142.94458008]
[2.67229247 152.55909729]
[-12.67774582 154.10177612]
[-26.41467094 147.08035278]
[-34.15507889 133.73533630]
[-33.42903137 118.32505798]
[-24.46821404 105.76690674]
[-10.13198471 100.06813049]
[5.00501537 103.04718018]
[16.11262512 113.75347137]
[30.68532753 110.19870758]
[45.25802994 106.64394379]
[59.79296494 102.93778229]
[74.28856659 99.08062744]
[78.68573761 85.59078979]
[89.56521606 76.48323059]
[103.61823273 74.52782440]
[109.96536255 60.93687439]
[108.79430389 45.15906906]
[121.19023132 36.90132904]
[127.53736115 23.31037712]
[133.88449097 9.71942711]
[140.23162842 -3.87152386]
[146.57875061 -17.46247482]
[136.79508972 -33.27466965]
[140.50846863 -52.86767197]
[157.54800415 -65.63171387]
[154.75567627 -80.36952209]
[151.96334839 -95.10732269]
[149.17103577 -109.84513092]
[134.11701965 -110.28194427]
[119.50897217 -113.94515991]
[106.03014374 -120.66342926]
[94.31095123 -130.12252808]
[84.89952850 -141.88005066]
[78.23606873 -155.38606262]
[74.63222504 -170.00886536]
[74.25656128 -185.06452942]
[77.12664795 -199.84886169]
[83.10824585 -213.67039490]
[91.92157745 -225.88264465]
[103.15444183 -235.91444397]
[116.28144836 -243.29656982]
[130.68861389 -247.68376160]
[145.70211792 -248.87080383]
[160.61972046 -246.80220032]
[174.74371338 -241.57469177]
[187.41348267 -233.43276978]
[198.03645325 -222.75726318]
[206.11576843 -210.04747009]
[211.27352905 -195.89785767]
[213.26852417 -180.97023010]
[212.00740051 -165.96276855]
[207.54919434 -151.57742310]
[200.10238647 -138.48699951]
[190.01528931 -127.30376434]
[177.75970459 -118.55078888]
[163.90882874 -112.63745117]
[166.70115662 -97.89965057]
[169.49348450 -83.16184235]
[172.28581238 -68.42403412]
[185.52839661 -61.37890244]
[199.31077576 -67.29886627]
[213.09315491 -73.21882629]
[226.87553406 -79.13879395]
[226.07284546 -94.25769043]
[230.48294067 -108.71185303]
[239.55513000 -120.76239777]
[252.17903137 -128.96650696]
[266.82049561 -132.35017395]
[281.70803833 -130.52383423]
[295.04718018 -123.72705841]
[305.23675537 -112.79737854]
[319.01913452 -118.71733856]
[328.39343262 -132.17300415]
[344.70834351 -130.51303101]
[351.18048096 -115.44508362]
[341.15188599 -102.46975708]
[324.93908691 -104.93495941]
[311.15670776 -99.01499176]
[312.06820679 -84.10009003]
[307.81384277 -69.74635315]
[298.88864136 -57.69168854]
[286.35424805 -49.40248871]
[271.71289062 -45.89531708]
[256.72714233 -47.61222839]
[243.20791626 -54.36518478]
[232.79550171 -65.35640717]
[219.01312256 -59.43644714]
[205.23074341 -53.51648331]
[191.44836426 -47.59651947]
[190.69447327 -27.27470398]
[177.80387878 -13.24986935]
[160.16970825 -11.11534500]
[153.82257080 2.47560573]
[147.47544861 16.06655693]
[141.12831116 29.65750694]
[134.78118896 43.24845886]
[136.40623474 58.05414963]
[123.55631256 67.28400421]
[117.20918274 80.87495422]
[125.49818420 96.56984711]
[121.65152740 113.89728546]
[107.50000000 124.61042786]
[107.50000000 139.61042786]
[107.50000000 154.61042786]
[107.50000000 169.61042786]
[107.50000000 184.61042786]
[107.50000000 199.61042786]
[107.50000000 214.61042786]
[107.50000000 229.61042786]
[107.50000000 244.61042786]
[107.50000000 259.61044312]
[122.03988647 263.67175293]
[134.94427490 271.50625610]
[145.25555420 282.53259277]
[152.20857239 295.93252563]
[155.28736877 310.71166992]
[154.26348877 325.77334595]
[149.21287537 339.99987793]
[140.51036072 352.33554077]
[128.80169678 361.86495972]
[114.95575714 367.88098145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 41]
[23 40]
[25 39]
[26 38]
[27 37]
[44 128]
[45 127]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[54 88]
[55 87]
[56 86]
[57 85]
[89 118]
[90 117]
[91 116]
[92 115]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
