%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCCUGCGGGGGGGGGGUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACxxxxxxxxxxCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCCCCCCCCCCCUACUCAUGC\
) } def
/len { sequence length } bind def

/coor [
[82.56142426 510.78060913]
[68.53948212 505.22760010]
[56.33952332 496.36126709]
[46.72845078 484.73895264]
[40.31042480 471.09124756]
[37.48888779 456.27606201]
[38.44120407 441.22470093]
[43.10750961 426.88327026]
[51.19447708 414.15332031]
[62.19374847 403.83505249]
[75.41390991 396.57705688]
[90.02391815 392.83563232]
[90.02391815 377.83563232]
[90.02391815 362.83563232]
[90.02391815 347.83563232]
[90.02391815 332.83563232]
[90.02391815 317.83563232]
[90.02391815 302.83563232]
[90.02391815 287.83563232]
[90.02391815 272.83563232]
[90.02391815 257.83563232]
[90.02391815 242.83563232]
[82.28662109 230.10835266]
[90.02391815 216.30818176]
[90.02391815 201.30818176]
[87.29570770 197.31994629]
[87.08618927 191.56286621]
[90.34454346 185.69552612]
[90.96037292 170.70816040]
[91.57619476 155.72080994]
[92.19202423 140.73345947]
[92.50000000 125.73662567]
[92.50000000 110.73662567]
[91.88417816 95.74926758]
[90.65356445 80.79983521]
[89.42295074 65.85040283]
[88.19233704 50.90096664]
[86.96172333 35.95153046]
[85.73110962 21.00209618]
[84.19381714 6.08107948]
[82.35049438 -8.80522823]
[80.50717163 -23.69153595]
[78.66384888 -38.57784271]
[76.36296844 -53.40032578]
[73.60672760 -68.14492035]
[70.85048676 -82.88951874]
[60.64339066 -90.84054565]
[58.67834473 -103.22238922]
[65.47329712 -113.27677917]
[63.02036667 -128.07485962]
[60.56744003 -142.87294006]
[58.11451340 -157.67102051]
[41.56528854 -163.42501831]
[30.23860931 -176.67620850]
[27.16208076 -193.74491882]
[33.08851242 -209.95037842]
[46.31420517 -220.89431763]
[43.25580978 -235.57922363]
[40.19741440 -250.26411438]
[37.13901901 -264.94900513]
[34.08062363 -279.63391113]
[19.02263832 -280.83132935]
[4.91245174 -286.22384644]
[-7.10608864 -295.37432861]
[-16.05869293 -307.54098511]
[-21.21961403 -321.73751831]
[-22.17047882 -336.81307983]
[-18.83420563 -351.54556274]
[-11.48124981 -364.74066162]
[-0.70768374 -375.32873535]
[12.61312771 -382.45141602]
[27.40132713 -385.53131104]
[42.45809937 -384.31878662]
[56.56286240 -378.91207886]
[68.57220459 -369.74954224]
[77.51258087 -357.57388306]
[82.65924072 -343.37219238]
[83.59495544 -328.29565430]
[80.24388885 -313.56655884]
[72.87767792 -300.37884521]
[62.09347916 -289.80160522]
[48.76552200 -282.69232178]
[51.82391739 -268.00741577]
[54.88231277 -253.32250977]
[57.94070816 -238.63761902]
[60.99910355 -223.95272827]
[73.41825104 -221.29142761]
[83.93502045 -214.08670044]
[90.95356750 -203.38868713]
[93.39253998 -190.78071594]
[90.85155487 -178.14511108]
[83.67642975 -167.38206482]
[72.91259003 -160.12394714]
[75.36551666 -145.32586670]
[77.81844330 -130.52778625]
[80.27137756 -115.72970581]
[92.13106537 -102.83039093]
[85.59508514 -85.64575958]
[88.35132599 -70.90116119]
[91.10756683 -56.15656662]
[93.85599518 -53.85584259]
[95.59769440 -50.08276367]
[95.64076233 -45.33895111]
[93.55015564 -40.42116928]
[95.39347839 -25.53486061]
[97.23680115 -10.64855194]
[99.08012390 4.23775530]
[102.27777100 7.86050320]
[103.19318390 13.54820061]
[100.68054962 19.77148438]
[101.91115570 34.72091675]
[103.14176941 49.67035294]
[104.37238312 64.61978912]
[105.60299683 79.56922150]
[106.83361053 94.51865387]
[109.04848480 96.71125031]
[110.49253845 99.77754211]
[110.83362579 103.42517853]
[109.85550690 107.24078369]
[107.50000000 110.73662567]
[107.50000000 125.73662567]
[110.51473236 131.73278809]
[110.06902313 137.47640991]
[107.17937469 141.34928894]
[106.56355286 156.33663940]
[105.94772339 171.32398987]
[105.33190155 186.31134033]
[105.02391815 201.30818176]
[105.02391815 216.30818176]
[112.76122284 230.10835266]
[105.02391815 242.83563232]
[105.02391815 257.83563232]
[105.02391815 272.83563232]
[105.02391815 287.83563232]
[105.02391815 302.83563232]
[105.02391815 317.83563232]
[105.02391815 332.83563232]
[105.02391815 347.83563232]
[105.02391815 362.83563232]
[105.02391815 377.83563232]
[105.02391815 392.83563232]
[119.63393402 396.57705688]
[132.85409546 403.83505249]
[143.85336304 414.15332031]
[151.94033813 426.88327026]
[156.60664368 441.22470093]
[157.55895996 456.27606201]
[154.73741150 471.09124756]
[148.31939697 484.73895264]
[138.70832825 496.36126709]
[126.50836182 505.22760010]
[112.48641968 510.78060913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 129]
[25 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 121]
[33 120]
[34 115]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[40 107]
[41 106]
[42 105]
[43 104]
[44 100]
[45 99]
[46 98]
[49 96]
[50 95]
[51 94]
[52 93]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
