%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAUACUCGGGGGGGGGGUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUxxxxxxxxxxCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCCCCCCCCCCCAACAUACUC\
) } def
/len { sequence length } bind def

/coor [
[83.86303711 387.68267822]
[70.64283752 380.41021729]
[59.75603485 369.96319580]
[51.94490433 357.05395508]
[47.74202347 342.56265259]
[47.43395233 327.47729492]
[51.04169083 312.82647705]
[58.31926346 299.60910034]
[68.77046967 288.72631836]
[81.68273163 280.92019653]
[96.17567444 276.72290039]
[95.86361694 261.72613525]
[95.55155945 246.72938538]
[95.23950195 231.73263550]
[94.92744446 216.73588562]
[94.61538696 201.73912048]
[94.30333710 186.74237061]
[93.99127960 171.74562073]
[93.67922211 156.74887085]
[93.36716461 141.75210571]
[74.55974579 133.76428223]
[61.69554901 117.88861847]
[57.77984619 97.83390045]
[63.72739792 78.28521729]
[52.42839432 68.41949463]
[41.44379425 78.65387726]
[29.46508980 87.70455170]
[16.61926270 95.47557068]
[3.04248714 101.88456726]
[-11.12131691 106.86358643]
[-25.72200394 110.35986328]
[-40.60480118 112.33633423]
[-55.61193848 112.77204132]
[-70.58433533 111.66236115]
[-85.36327362 109.01906586]
[-99.79209137 104.87017822]
[-113.71782684 99.25966644]
[-126.99287415 92.24701691]
[-139.47650146 83.90656281]
[-151.03636169 74.32672119]
[-161.54994202 63.60903549]
[-170.90577698 51.86712646]
[-179.00468445 39.22546387]
[-185.76081848 25.81805420]
[-191.10256958 11.78702354]
[-194.97329712 -2.71888924]
[-197.33197021 -17.54591370]
[-198.15359497 -32.53687668]
[-197.42944336 -47.53286362]
[-195.16722107 -62.37491226]
[-191.39088440 -76.90568542]
[-186.14047241 -90.97114563]
[-179.47164917 -104.42219543]
[-171.45510864 -117.11624908]
[-162.17581177 -128.91873169]
[-151.73213196 -139.70454407]
[-140.23478699 -149.35934448]
[-127.80565643 -157.78079224]
[-114.57648468 -164.87959290]
[-100.68751526 -170.58052063]
[-86.28598022 -174.82313538]
[-71.52454376 -177.56245422]
[-56.55967712 -178.76945496]
[-41.55002213 -178.43133545]
[-26.65468979 -176.55166626]
[-12.03158092 -173.15039062]
[2.16429496 -168.26354980]
[15.78245163 -161.94296265]
[28.67852974 -154.25563049]
[40.71582413 -145.28302002]
[51.76673126 -135.12026978]
[61.71410370 -123.87510681]
[70.45249939 -111.66672516]
[77.88928223 -98.62455750]
[83.94561768 -84.88684082]
[88.55731201 -70.59921265]
[91.67546844 -55.91312408]
[93.26703644 -40.98426056]
[93.31514740 -25.97087669]
[91.81929016 -11.03212070]
[88.79531860 3.67364812]
[84.27529907 17.99053955]
[78.30712891 31.76678848]
[70.95408630 44.85635757]
[62.29411697 57.12048721]
[73.59312439 66.98621368]
[80.04901886 62.72813416]
[87.17258453 59.71736526]
[94.72541046 58.05465317]
[102.45475769 57.79564285]
[110.10195160 58.94900894]
[117.41108704 61.47614288]
[124.13755798 65.29248047]
[130.05625916 70.27030945]
[134.96913147 76.24304199]
[138.71176147 83.01080322]
[141.15890503 90.34710693]
[156.13861084 89.56726074]
[171.11833191 88.78741455]
[186.09803772 88.00757599]
[201.07775879 87.22772980]
[216.05747986 86.44788361]
[231.03718567 85.66803741]
[246.01690674 84.88819122]
[260.99661255 84.10834503]
[266.41967773 69.87773895]
[277.16662598 59.08777618]
[291.37545776 53.60788345]
[306.58438110 54.38748550]
[320.15841675 61.29150772]
[329.74575806 73.12379456]
[333.68533325 87.83432007]
[331.29458618 102.87441254]
[322.98773193 115.63826752]
[310.20397949 123.91448212]
[295.15820312 126.26914215]
[280.45715332 122.29430389]
[268.64791870 112.67861176]
[261.77645874 99.08805847]
[246.79675293 99.86790466]
[231.81703186 100.64775085]
[216.83731079 101.42759705]
[201.85760498 102.20744324]
[186.87788391 102.98728943]
[171.89817810 103.76713562]
[156.91845703 104.54697418]
[141.93875122 105.32682037]
[136.22891235 121.78759003]
[124.36565399 134.54777527]
[108.36392212 141.44006348]
[108.67597198 156.43681335]
[108.98802948 171.43356323]
[109.30008698 186.43031311]
[109.61214447 201.42707825]
[109.92420197 216.42382812]
[110.23625946 231.42057800]
[110.54830933 246.41732788]
[110.86036682 261.41409302]
[111.17242432 276.41082764]
[125.82741547 280.00161743]
[139.05322266 287.26385498]
[149.94808960 297.70245361]
[157.76919556 310.60568237]
[161.98326111 325.09375000]
[162.30297852 340.17883301]
[158.70655823 354.83242798]
[151.43919373 368.05545044]
[140.99639893 378.94628906]
[128.09016418 386.76239014]
[113.60047150 390.97085571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 86]
[25 85]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
