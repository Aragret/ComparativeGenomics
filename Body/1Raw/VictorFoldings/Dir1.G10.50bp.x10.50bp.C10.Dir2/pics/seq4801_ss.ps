%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCUCGUUGGGGGGGGGGCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAxxxxxxxxxxGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAACCCCCCCCCCAAACCAUCGUU\
) } def
/len { sequence length } bind def

/coor [
[87.87665558 386.56747437]
[73.85471344 381.01446533]
[61.65475845 372.14813232]
[52.04368591 360.52581787]
[45.62565994 346.87811279]
[42.80412292 332.06292725]
[43.75643921 317.01156616]
[48.42274475 302.67013550]
[56.50971222 289.94018555]
[67.50898743 279.62191772]
[80.72914124 272.36392212]
[95.33915710 268.62249756]
[95.33915710 253.62249756]
[95.33915710 238.62249756]
[95.33915710 223.62249756]
[95.33915710 208.62249756]
[95.33915710 193.62249756]
[95.33915710 178.62249756]
[95.33915710 163.62249756]
[95.33915710 148.62249756]
[95.33915710 133.62249756]
[89.12999725 129.41578674]
[75.63475037 135.96394348]
[76.71168518 121.00237274]
[70.50252533 116.79566956]
[56.57181168 122.35760498]
[42.64109802 127.91954803]
[30.17302322 139.40795898]
[15.68208218 130.60743713]
[20.12717056 114.24658966]
[37.07915878 113.98883057]
[51.00987625 108.42689514]
[64.94058990 102.86495209]
[69.69361877 90.07125854]
[78.39429474 81.25118256]
[88.80522156 77.28763580]
[98.68261719 78.00293732]
[102.93546295 63.61845779]
[107.18830872 49.23397827]
[97.16958618 29.92157936]
[110.62490082 9.66191387]
[103.25866699 -3.40478158]
[95.89242554 -16.47147560]
[88.52618408 -29.53817177]
[74.46088409 -24.24026871]
[59.75168228 -21.15162277]
[44.74337769 -20.34463501]
[29.78778839 -21.83822441]
[15.23549557 -25.59737778]
[1.42762709 -31.53397751]
[-11.31214237 -39.50885773]
[-22.68517303 -49.33507538]
[-32.42486572 -60.78229523]
[-40.30290985 -73.58217621]
[-46.13462830 -87.43466187]
[-49.78332138 -102.01504517]
[-51.16345596 -116.98152924]
[-50.24268341 -131.98327637]
[-47.04258347 -146.66864014]
[-41.63817215 -160.69335938]
[-34.15613937 -173.72868347]
[-24.77186966 -185.46903992]
[-13.70534897 -195.63922119]
[-1.21598995 -204.00080872]
[12.40343857 -210.35783386]
[26.83367920 -214.56123352]
[41.73646164 -216.51249695]
[56.76245117 -216.16589355]
[71.55941010 -213.52952576]
[85.78047943 -208.66519165]
[99.09229279 -201.68695068]
[111.18280792 -192.75834656]
[121.76860809 -182.08869934]
[130.60154724 -169.92811584]
[137.47454834 -156.56166077]
[142.22651672 -142.30265808]
[144.74606323 -127.48535919]
[144.97412109 -112.45710754]
[142.90533447 -97.57018280]
[138.58821106 -83.17355347]
[132.12394714 -69.60469818]
[123.66407776 -57.18170166]
[113.40690613 -46.19576263]
[101.59288025 -36.90441132]
[108.95912170 -23.83771515]
[116.32535553 -10.77102089]
[123.69159698 2.29567385]
[137.67868042 7.71429873]
[151.92536926 3.02049828]
[166.17207336 -1.67330229]
[180.41876221 -6.36710310]
[194.66545105 -11.06090355]
[208.91213989 -15.75470448]
[212.12416077 -27.27734756]
[220.43563843 -35.71208191]
[231.67906189 -39.02529526]
[243.00155640 -36.49785233]
[251.58877563 -28.87742233]
[266.01614380 -32.98236847]
[280.44354248 -37.08731461]
[281.81475830 -52.20300674]
[288.55731201 -65.80089569]
[299.75930786 -76.04197693]
[313.90576172 -81.54122162]
[329.08352661 -81.55490875]
[343.23989868 -76.08119202]
[354.46035767 -65.86033630]
[361.22741699 -52.27463150]
[362.62588501 -37.16143799]
[358.46664429 -22.56468391]
[349.31219482 -10.45846462]
[336.40060425 -2.48004508]
[321.47805786 0.29155797]
[306.56268311 -2.51849151]
[293.67169189 -10.53015709]
[284.54849243 -22.65992737]
[270.12109375 -18.55498314]
[255.69371033 -14.45003796]
[247.82170105 2.02747059]
[230.12164307 7.67455482]
[213.60594177 -1.50801206]
[199.35925293 3.18578863]
[185.11256409 7.87958908]
[170.86585999 12.57339001]
[156.61917114 17.26719093]
[142.37248230 21.96099091]
[139.64202881 44.39984512]
[121.57279205 53.48682404]
[117.31994629 67.87130737]
[113.06710052 82.25579071]
[128.20262146 104.78921509]
[110.33915710 133.62249756]
[110.33915710 148.62249756]
[110.33915710 163.62249756]
[110.33915710 178.62249756]
[110.33915710 193.62249756]
[110.33915710 208.62249756]
[110.33915710 223.62249756]
[110.33915710 238.62249756]
[110.33915710 253.62249756]
[110.33915710 268.62249756]
[124.94917297 272.36392212]
[138.16932678 279.62191772]
[149.16860962 289.94018555]
[157.25556946 302.67013550]
[161.92187500 317.01156616]
[162.87419128 332.06292725]
[160.05265808 346.87811279]
[153.63462830 360.52581787]
[144.02355957 372.14813232]
[131.82359314 381.01446533]
[117.80165863 386.56747437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 33]
[26 32]
[27 31]
[37 130]
[38 129]
[39 128]
[41 87]
[42 86]
[43 85]
[44 84]
[88 126]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[98 118]
[99 117]
[100 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
