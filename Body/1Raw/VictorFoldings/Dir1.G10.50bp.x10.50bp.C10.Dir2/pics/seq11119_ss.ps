%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCCCACCGGGGGGGGGGCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUxxxxxxxxxxAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUCCCCCCCCCCUAACUCCACC\
) } def
/len { sequence length } bind def

/coor [
[86.48628998 366.53573608]
[72.64035034 360.51971436]
[60.93168640 350.99029541]
[52.22916031 338.65463257]
[47.17855835 324.42810059]
[46.15466690 309.36642456]
[49.23346710 294.58724976]
[56.18648911 281.18731689]
[66.49777222 270.16101074]
[79.40215302 262.32647705]
[93.94203949 258.26516724]
[93.94203949 243.26518250]
[93.94203949 228.26518250]
[93.94203949 213.26518250]
[93.94203949 198.26518250]
[93.94203949 183.26518250]
[93.94203949 168.26518250]
[93.94203949 153.26518250]
[93.94203949 138.26518250]
[93.94203949 123.26517487]
[86.75065613 136.42890930]
[85.05467224 151.33273315]
[75.67737579 163.04026794]
[61.50359344 167.94982910]
[46.89372253 164.55107117]
[36.34231567 153.88955688]
[33.09539032 139.24519348]
[38.15182877 125.12313843]
[49.95607376 115.86788177]
[64.87727356 114.32679749]
[78.11510468 107.27273560]
[63.11591721 107.11669922]
[48.11672974 106.96066284]
[39.72762299 119.90773010]
[25.66114616 126.24316406]
[10.40586281 123.94536591]
[-1.17032266 113.74755096]
[-5.37349081 98.90380096]
[-0.86242664 84.15070343]
[10.92340565 74.19592285]
[26.22319031 72.21598816]
[40.15481949 78.84268951]
[48.27276611 91.96147919]
[63.27195358 92.11751556]
[78.27114105 92.27355194]
[82.71731567 86.23355103]
[76.70162964 72.49268341]
[91.60966492 74.15356445]
[96.05583954 68.11357117]
[91.45027924 53.83811188]
[86.84471130 39.56265259]
[82.23915100 25.28718948]
[75.75098419 11.76300049]
[67.49869537 -0.76296151]
[53.44535065 -8.03029442]
[52.90455246 -22.91507912]
[44.65226364 -35.44104004]
[36.39997482 -47.96700287]
[20.87118721 -50.90508652]
[12.03736877 -64.01001740]
[15.13946724 -79.50687408]
[28.33706284 -88.20164490]
[43.80025482 -84.93587494]
[52.35500717 -71.64709473]
[48.92593384 -56.21929169]
[57.17822266 -43.69332886]
[65.43051147 -31.16736794]
[78.89360046 -24.79597473]
[80.02465820 -9.01525116]
[88.27694702 3.51071119]
[88.58647156 -11.48609447]
[94.86637115 -25.10824013]
[106.06901550 -35.08324814]
[120.32555389 -39.74705887]
[135.25767517 -38.32164764]
[148.37435913 -31.04480362]
[157.48745728 -19.13046837]
[161.07670593 -4.56621885]
[158.54331970 10.21829891]
[150.30993652 22.75669670]
[137.75007629 30.95729065]
[122.95899200 33.45203400]
[108.40416718 29.82474899]
[96.51461029 20.68162537]
[101.12017059 34.95708466]
[105.72573853 49.23254776]
[110.33129883 63.50800705]
[123.26935577 71.09791565]
[137.97732544 68.15243530]
[152.68528748 65.20694733]
[140.42628479 56.56304550]
[136.42254639 42.10725021]
[142.48777771 28.38818169]
[155.87438965 21.62071037]
[170.51811218 24.87056732]
[179.78518677 36.66553497]
[179.47753906 51.66238022]
[169.73419189 63.06758499]
[184.71391296 62.28773880]
[199.69363403 61.50789642]
[214.67333984 60.72805023]
[229.65306091 59.94820404]
[244.63276672 59.16835785]
[259.61248779 58.38851547]
[264.32421875 43.96062851]
[273.93280029 32.21158218]
[287.13867188 24.73033333]
[302.15588379 22.52866364]
[316.95352173 25.90432930]
[329.53024292 34.40079880]
[338.18521118 46.86899185]
[341.74789429 61.62269592]
[339.73648071 76.66658783]
[332.42297363 89.96610260]
[320.79647827 99.72258759]
[306.42941284 104.61656952]
[291.26473999 103.98617554]
[277.35339355 97.91664886]
[266.57678223 87.22885895]
[260.39233398 73.36822510]
[245.41261292 74.14807129]
[230.43290710 74.92791748]
[215.45318604 75.70776367]
[200.47348022 76.48760986]
[185.49375916 77.26745605]
[170.51403809 78.04730225]
[155.63076782 79.91490936]
[140.92280579 82.86039734]
[126.21484375 85.80587769]
[125.67264557 109.48185730]
[108.94203949 123.26517487]
[108.94203949 138.26518250]
[108.94203949 153.26518250]
[108.94203949 168.26518250]
[108.94203949 183.26518250]
[108.94203949 198.26518250]
[108.94203949 213.26518250]
[108.94203949 228.26518250]
[108.94203949 243.26518250]
[108.94203949 258.26516724]
[123.48192596 262.32647705]
[136.38630676 270.16101074]
[146.69758606 281.18731689]
[153.65061951 294.58724976]
[156.72941589 309.36642456]
[155.70552063 324.42810059]
[150.65492249 338.65463257]
[141.95239258 350.99029541]
[130.24372864 360.51971436]
[116.39779663 366.53573608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 45]
[32 44]
[33 43]
[49 87]
[50 86]
[51 85]
[52 84]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[88 129]
[89 128]
[90 127]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
