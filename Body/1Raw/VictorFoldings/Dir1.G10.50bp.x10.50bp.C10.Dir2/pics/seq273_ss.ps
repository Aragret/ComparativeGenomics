%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUCCACCGGGGGGGGGGAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCxxxxxxxxxxAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCCCCCCCCCCCAAAUCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[-2.68080711 287.43792725]
[-11.37136936 282.40817261]
[-19.81609535 276.97579956]
[-27.99634361 271.15274048]
[-35.89405823 264.95190430]
[-43.49180222 258.38696289]
[-50.77280807 251.47239685]
[-57.72100830 244.22348022]
[-64.32105255 236.65620422]
[-70.55838776 228.78729248]
[-76.41923523 220.63407898]
[-89.09075165 228.66108704]
[-101.76226807 236.68807983]
[-114.43378448 244.71507263]
[-127.10530090 252.74206543]
[-139.77680969 260.76907349]
[-152.36524963 268.92572021]
[-164.86929321 277.21121216]
[-177.37332153 285.49667358]
[-189.87736511 293.78216553]
[-202.38139343 302.06762695]
[-206.96810913 317.44104004]
[-221.90057373 323.30627441]
[-235.72387695 315.16406250]
[-237.83396912 299.26037598]
[-226.61216736 287.79519653]
[-210.66687012 289.56359863]
[-198.16284180 281.27810669]
[-185.65879822 272.99264526]
[-173.15476990 264.70718384]
[-160.65072632 256.42169189]
[-156.78828430 250.06610107]
[-147.80381775 248.09754944]
[-135.13229370 240.07055664]
[-122.46078491 232.04356384]
[-109.78926849 224.01655579]
[-97.11775208 215.98956299]
[-84.44623566 207.96257019]
[-102.78664398 167.48262024]
[-112.35877991 124.08480835]
[-112.74874115 79.64558411]
[-103.93967438 36.08647156]
[-118.08699036 31.10114861]
[-132.23429871 26.11582565]
[-148.24601746 29.65939331]
[-159.11964417 17.38353920]
[-153.66929626 1.91661072]
[-137.50186157 -0.83034229]
[-127.24898529 11.96850967]
[-113.10166931 16.95383263]
[-98.95435333 21.93915367]
[-95.06827545 12.68049717]
[-90.75161743 3.61458611]
[-86.01390839 -5.23856688]
[-80.86558533 -13.85942078]
[-75.31803894 -22.22894478]
[-69.38349152 -30.32866478]
[-63.07505798 -38.14070511]
[-56.40665817 -45.64781570]
[-49.39301300 -52.83342743]
[-42.04960251 -59.68168259]
[-34.39263535 -66.17745972]
[-26.43901634 -72.30642700]
[-18.20629883 -78.05504608]
[-9.71265793 -83.41063690]
[-0.97684157 -88.36137390]
[7.98186779 -92.89632416]
[17.14369392 -97.00548553]
[26.48841476 -100.67978668]
[35.99540329 -103.91110992]
[45.64367294 -106.69232941]
[55.41192627 -109.01730347]
[65.27860260 -110.88089752]
[75.22191620 -112.27900696]
[85.21993256 -113.20853424]
[95.25057220 -113.66743469]
[105.29168701 -113.65469360]
[115.32112885 -113.17033386]
[125.31674957 -112.21543884]
[135.25648499 -110.79209900]
[145.11840820 -108.90346527]
[154.88072205 -106.55371094]
[164.52189636 -103.74801636]
[174.02066040 -100.49256897]
[183.35601807 -96.79457092]
[192.50740051 -92.66217041]
[201.45455933 -88.10449219]
[210.17779541 -83.13159943]
[218.65780640 -77.75447083]
[226.87591553 -71.98497772]
[234.81394958 -65.83584595]
[242.45440674 -59.32065582]
[249.78041077 -52.45378494]
[256.77578735 -45.25039673]
[263.42514038 -37.72638321]
[269.71371460 -29.89836121]
[275.62768555 -21.78360558]
[281.15396118 -13.40002918]
[286.28039551 -4.76613712]
[290.99563599 4.09901142]
[295.28927612 13.17584896]
[299.15182495 22.44433784]
[302.57476807 31.88402176]
[305.55059814 41.47406006]
[308.07266235 51.19329071]
[310.13543701 61.02025223]
[311.73440552 70.93325806]
[312.86596680 80.91042328]
[313.52764893 90.92972565]
[313.71801758 100.96904755]
[313.43661499 111.00623322]
[312.68411255 121.01912689]
[311.46209717 130.98562622]
[309.77334595 140.88371277]
[307.62152100 150.69157410]
[305.01141357 160.38752747]
[301.94876099 169.95018005]
[298.44033813 179.35844421]
[294.49389648 188.59152222]
[290.11810303 197.62904358]
[285.32269287 206.45108032]
[280.11819458 215.03813171]
[274.51608276 223.37124634]
[268.52877808 231.43203735]
[262.16946411 239.20271301]
[255.45217896 246.66610718]
[248.39175415 253.80577087]
[241.00378418 260.60592651]
[233.30455017 267.05157471]
[225.31108093 273.12844849]
[217.04100037 278.82318115]
[208.51257324 284.12319946]
[199.74459839 289.01678467]
[190.75646973 293.49313354]
[181.56800842 297.54238892]
[172.19949341 301.15557861]
[162.67160034 304.32473755]
[153.00537109 307.04287720]
[143.22215271 309.30401611]
[133.34350586 311.10314941]
[123.39127350 312.43627930]
[113.38740540 313.30050659]
[103.35398865 313.69387817]
[93.31316376 313.61557007]
[83.28710175 313.06573486]
[73.29792786 312.04559326]
[63.36769867 310.55737305]
[53.51832581 308.60437012]
[43.77156067 306.19091797]
[34.14890671 303.32232666]
[24.67161369 300.00491333]
[15.36059666 296.24603271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
