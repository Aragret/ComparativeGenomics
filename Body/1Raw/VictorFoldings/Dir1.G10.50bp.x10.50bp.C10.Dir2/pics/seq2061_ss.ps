%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCAAGCAGGGGGGGGGGUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGxxxxxxxxxxUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUACCCCCCCCCCAUAACCAUGCA\
) } def
/len { sequence length } bind def

/coor [
[96.08429718 516.69567871]
[82.06235504 511.14263916]
[69.86239624 502.27630615]
[60.25132370 490.65399170]
[53.83329773 477.00628662]
[51.01176071 462.19110107]
[51.96407700 447.13973999]
[56.63038254 432.79830933]
[64.71734619 420.06835938]
[75.71662140 409.75009155]
[88.93678284 402.49209595]
[103.54679871 398.75067139]
[103.54679871 383.75067139]
[103.54679871 368.75067139]
[103.54679871 353.75067139]
[103.54679871 338.75067139]
[103.54679871 323.75067139]
[103.54679871 308.75067139]
[103.54679871 293.75067139]
[103.54679871 278.75067139]
[103.54679871 263.75067139]
[103.54679871 248.75067139]
[103.54679871 233.75067139]
[95.80949402 221.02339172]
[103.54679871 207.22322083]
[93.95616150 192.55815125]
[103.21433258 176.67367554]
[102.90635681 161.67683411]
[101.21595764 146.77238464]
[98.15756226 132.08747864]
[95.09916687 117.40258789]
[81.98693848 106.49597168]
[83.36027527 88.51639557]
[76.81240082 75.02101135]
[63.82709885 65.98262787]
[65.23252106 51.15447617]
[58.68465042 37.65909195]
[52.13677979 24.16370964]
[45.58890915 10.66832447]
[30.92727852 5.40768003]
[24.47905350 -8.37183571]
[29.58462906 -22.31703758]
[23.03675842 -35.81242371]
[21.03362274 -20.94677544]
[13.58552170 -7.92656898]
[1.78660703 1.33548355]
[-12.62981796 5.47875309]
[-27.54593086 3.89457870]
[-40.77050018 -3.18431878]
[-50.36078644 -14.71802425]
[-54.90794754 -29.01219559]
[-53.74398804 -43.96696854]
[-47.03989792 -57.38542938]
[-35.78052902 -67.29636383]
[-21.61992645 -72.24382019]
[-6.63833094 -71.50099945]
[6.96340752 -65.17701721]
[17.18677330 -54.20149612]
[14.73384476 -68.99957275]
[12.28091717 -83.79765320]
[9.82798862 -98.59573364]
[-5.18982410 -100.05439758]
[-19.31804657 -105.35116577]
[-31.59339333 -114.12489319]
[-41.17890930 -125.77736664]
[-47.42103958 -139.51411438]
[-49.89418411 -154.39854431]
[-48.42972183 -169.41578674]
[-43.12750244 -183.54196167]
[-34.34903336 -195.81391907]
[-22.69285393 -205.39494324]
[-8.95369816 -211.63175964]
[5.93167591 -214.09916687]
[20.94835854 -212.62890625]
[35.07248688 -207.32122803]
[47.34105301 -198.53802490]
[56.91756821 -186.87814331]
[63.14908981 -173.13658142]
[65.61074066 -158.25025940]
[64.13468170 -143.23414612]
[58.82155228 -129.11206055]
[50.03361130 -116.84688568]
[38.37003708 -107.27487183]
[24.62606812 -101.04866028]
[27.07899666 -86.25057983]
[29.53192329 -71.45249939]
[31.98485184 -56.65442276]
[36.53214264 -42.36029434]
[43.08001328 -28.86490822]
[57.19343567 -24.24463463]
[64.02615356 -10.65167332]
[59.08429337 4.12045431]
[65.63216400 17.61583900]
[72.18003082 31.11122322]
[78.72790527 44.60660553]
[91.24485779 52.67971039]
[90.30778503 68.47314453]
[96.85565948 81.96852875]
[110.89763641 87.24327087]
[124.71121979 81.39648438]
[138.52479553 75.54969025]
[152.33837891 69.70290375]
[166.15196228 63.85611725]
[178.38153076 52.11413956]
[193.05010986 60.61526489]
[188.94187927 77.06393433]
[171.99874878 77.66970062]
[158.18516541 83.51648712]
[144.37158203 89.36327362]
[130.55799866 95.21006012]
[116.74442291 101.05685425]
[109.78406525 114.34419250]
[112.84246063 129.02908325]
[115.90085602 143.71398926]
[123.12075043 130.56587219]
[136.23252869 123.28016663]
[151.21043396 124.09384155]
[163.45579529 132.75704956]
[169.20886230 146.60993958]
[166.70327759 161.39918518]
[156.70831299 172.58404541]
[142.29277039 176.73037720]
[127.88268280 172.56513977]
[117.90319824 161.36885071]
[118.21117401 176.36569214]
[126.98065186 185.87884521]
[126.89445496 198.41534424]
[118.54679871 207.22322083]
[126.28409576 221.02339172]
[118.54679871 233.75067139]
[118.54679871 248.75067139]
[118.54679871 263.75067139]
[118.54679871 278.75067139]
[118.54679871 293.75067139]
[118.54679871 308.75067139]
[118.54679871 323.75067139]
[118.54679871 338.75067139]
[118.54679871 353.75067139]
[118.54679871 368.75067139]
[118.54679871 383.75067139]
[118.54679871 398.75067139]
[133.15681458 402.49209595]
[146.37696838 409.75009155]
[157.37623596 420.06835938]
[165.46321106 432.79830933]
[170.12951660 447.13973999]
[171.08183289 462.19110107]
[168.26029968 477.00628662]
[161.84226990 490.65399170]
[152.23120117 502.27630615]
[140.03123474 511.14263916]
[126.00929260 516.69567871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[25 128]
[27 125]
[28 124]
[29 114]
[30 113]
[31 112]
[33 98]
[34 97]
[36 95]
[37 94]
[38 93]
[39 92]
[42 89]
[43 88]
[58 87]
[59 86]
[60 85]
[61 84]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
