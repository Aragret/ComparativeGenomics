%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAAAACUAGGGGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACCCCCCCCCCCAACAAAACUA\
) } def
/len { sequence length } bind def

/coor [
[108.89852905 472.40356445]
[94.87658691 466.85055542]
[82.67662811 457.98422241]
[73.06555939 446.36190796]
[66.64752960 432.71420288]
[63.82599640 417.89901733]
[64.77831268 402.84765625]
[69.44461823 388.50622559]
[77.53158569 375.77627563]
[88.53086090 365.45800781]
[101.75101471 358.20001221]
[116.36103058 354.45858765]
[116.36103058 339.45858765]
[116.36103058 324.45858765]
[116.36103058 309.45858765]
[116.36103058 294.45858765]
[116.36103058 279.45858765]
[116.36103058 264.45858765]
[116.36103058 249.45858765]
[116.36103058 234.45858765]
[116.36103058 219.45858765]
[114.97700500 204.52256775]
[112.22076416 189.77796936]
[109.46451569 175.03337097]
[106.70827484 160.28878784]
[96.76408386 149.19993591]
[101.83386993 134.21301270]
[99.07762909 119.46842194]
[99.22500610 134.46769714]
[91.57275391 147.36897278]
[78.33954620 154.43171692]
[63.36217117 153.60815430]
[50.98312378 145.13706970]
[44.79154205 131.47456360]
[46.58259201 116.58187103]
[55.83698654 104.77694702]
[69.87153625 99.48246765]
[84.61490631 102.23242188]
[70.57292938 96.95767975]
[56.53095245 91.68293762]
[42.48897552 86.40819550]
[28.44700050 81.13345337]
[14.40502453 75.85871124]
[0.36304784 70.58396912]
[-14.78120422 75.87841797]
[-28.28561592 67.21756744]
[-29.79076004 51.24527359]
[-18.14201546 40.21411896]
[-2.27530599 42.58626175]
[5.63778925 56.54199600]
[19.67976570 61.81673813]
[33.72174072 67.09147644]
[47.76371765 72.36621857]
[61.80569458 77.64096069]
[75.84767151 82.91570282]
[89.88964844 88.19044495]
[76.70540619 81.03671265]
[70.65886688 67.30939484]
[74.28040314 52.75314331]
[86.05446625 43.45951462]
[101.05379486 43.31774521]
[113.00141907 52.38715744]
[116.89744568 66.87236023]
[111.11062622 80.71246338]
[118.74359131 67.79976654]
[126.37656403 54.88706589]
[134.00953674 41.97436905]
[122.23686981 32.64065933]
[111.84484100 21.79079437]
[103.02706146 9.62689590]
[95.94778442 -3.62442851]
[90.73889923 -17.71631622]
[87.49744415 -32.38624191]
[86.28380585 -47.36091614]
[87.12059021 -62.36136627]
[89.99221802 -77.10814667]
[94.84517670 -91.32653046]
[101.58907318 -104.75164032]
[110.09826660 -117.13337708]
[120.21424103 -128.24107361]
[131.74853516 -137.86779785]
[144.48626709 -145.83421326]
[158.19015503 -151.99191284]
[172.60490417 -156.22618103]
[187.46195984 -158.45812988]
[202.48455811 -158.64617920]
[217.39282227 -156.78683472]
[231.90904236 -152.91471863]
[245.76277161 -147.10198975]
[258.69595337 -139.45692444]
[270.46759033 -130.12194824]
[280.85845947 -119.27095795]
[289.67492676 -107.10610199]
[296.75274658 -93.85401154]
[301.96011353 -79.76155853]
[305.19998169 -65.09128571]
[306.41198730 -50.11647797]
[305.57357788 -35.11611938]
[302.70037842 -20.36964989]
[297.84585571 -6.15178871]
[291.10052490 7.27259254]
[282.58999634 19.65340614]
[272.47280884 30.76000786]
[260.93746948 40.38548279]
[248.19886780 48.35052109]
[234.49432373 54.50673294]
[220.07911682 58.73943710]
[205.22181702 60.96977615]
[190.19920349 61.15620422]
[175.29113770 59.29524231]
[160.77532959 55.42156601]
[146.92222595 49.60733795]
[139.28926086 62.52003479]
[131.65629578 75.43273163]
[124.02332306 88.34542847]
[113.82222748 116.71218109]
[116.57846832 131.45677185]
[126.71980286 143.60025024]
[121.45287323 157.53253174]
[124.20911407 172.27713013]
[126.96535492 187.02172852]
[129.72160339 201.76632690]
[137.20993042 188.76921082]
[150.46852112 181.75425720]
[165.42657471 182.87528992]
[177.49147034 191.78810120]
[182.95890808 205.75617981]
[180.15019226 220.49085999]
[169.92770386 231.46813965]
[155.43006897 235.31762695]
[141.10853577 230.85740662]
[131.36102295 219.45858765]
[131.36102295 234.45858765]
[131.36102295 249.45858765]
[131.36102295 264.45858765]
[131.36102295 279.45858765]
[131.36102295 294.45858765]
[131.36102295 309.45858765]
[131.36102295 324.45858765]
[131.36102295 339.45858765]
[131.36102295 354.45858765]
[145.97103882 358.20001221]
[159.19120789 365.45800781]
[170.19047546 375.77627563]
[178.27743530 388.50622559]
[182.94374084 402.84765625]
[183.89605713 417.89901733]
[181.07452393 432.71420288]
[174.65649414 446.36190796]
[165.04542542 457.98422241]
[152.84547424 466.85055542]
[138.82353210 472.40356445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 122]
[23 121]
[24 120]
[25 119]
[27 117]
[28 116]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[64 115]
[65 114]
[66 113]
[67 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
