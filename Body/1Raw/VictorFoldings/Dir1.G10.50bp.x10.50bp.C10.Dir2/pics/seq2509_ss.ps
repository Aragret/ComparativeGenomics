%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUGAAAAGGGGGGGGGGCAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUxxxxxxxxxxGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCCCCCCCCCCCAAUAUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[72.90719604 493.39117432]
[59.68699646 486.11868286]
[48.80019379 475.67169189]
[40.98906326 462.76245117]
[36.78618240 448.27111816]
[36.47810745 433.18579102]
[40.08584976 418.53497314]
[47.36342239 405.31756592]
[57.81462860 394.43481445]
[70.72689056 386.62866211]
[85.21982574 382.43136597]
[84.90777588 367.43463135]
[84.59571838 352.43786621]
[84.28366089 337.44110107]
[83.97160339 322.44436646]
[83.65954590 307.44760132]
[83.34748840 292.45086670]
[83.03543854 277.45410156]
[82.72338104 262.45733643]
[82.41132355 247.46058655]
[74.41091919 234.89703369]
[81.85945129 220.93888855]
[81.54739380 205.94213867]
[81.23533630 190.94537354]
[70.56959534 201.49250793]
[55.63489914 202.89068604]
[43.19681931 194.50651550]
[38.88992310 180.13813782]
[44.66527939 166.29452515]
[57.90659714 159.24700928]
[72.61542511 162.18815613]
[82.12866211 173.78599548]
[83.99626923 158.90270996]
[85.86388397 144.01943970]
[83.56117249 136.94531250]
[87.92829132 128.84716797]
[90.10513306 114.00595856]
[81.96472931 101.17453003]
[87.11794281 86.03615570]
[83.41178894 71.50122070]
[79.70562744 56.96628189]
[75.99946594 42.43134689]
[72.29330444 27.89640999]
[36.36561203 17.06994629]
[25.27429581 6.97129774]
[14.18298054 -3.12735200]
[3.09166551 -13.22600174]
[-7.99965000 -23.32465172]
[-21.74096107 -16.82505035]
[-36.92380905 -16.08376694]
[-51.23292542 -21.21384048]
[-62.48627090 -31.43297386]
[-68.96778870 -45.18282318]
[-69.68910217 -60.36663437]
[-64.54020691 -74.66899109]
[-54.30627823 -85.90888214]
[-40.54791641 -92.37230682]
[-25.36316681 -93.07364655]
[-11.06759834 -87.90593719]
[0.15882054 -77.65723419]
[6.60414267 -63.89038086]
[7.28550339 -48.70472336]
[2.09899974 -34.41596603]
[13.19031525 -24.31731606]
[24.28163147 -14.21866703]
[35.37294769 -4.12001801]
[46.46426010 5.97863150]
[53.88486481 4.89021301]
[48.99287033 -9.28964520]
[44.10087585 -23.46950340]
[39.20888138 -37.64936447]
[30.70976830 -50.00917816]
[31.81090355 -64.96871185]
[42.02816391 -75.95085907]
[56.86943817 -78.12722778]
[69.80962372 -70.54095459]
[75.15946198 -56.52741623]
[70.56769562 -42.24892426]
[69.95381927 -27.26148987]
[69.33994293 -12.27405739]
[68.72606659 2.71337628]
[76.14667511 1.62495780]
[83.87075806 -11.23344421]
[91.59484100 -24.09184647]
[99.31892395 -36.95024872]
[95.25105286 -52.22204971]
[103.24560547 -65.85519409]
[118.55956268 -69.76138306]
[132.10742188 -61.62313843]
[135.85148621 -46.26873779]
[127.57045746 -32.80767822]
[112.17733002 -29.22616386]
[104.45324707 -16.36776161]
[96.72915649 -3.50935960]
[89.00507355 9.34904289]
[86.82823944 24.19024849]
[90.53440094 38.72518539]
[94.24056244 53.26012039]
[97.94672394 67.79505920]
[101.65288544 82.32999420]
[114.00445557 90.84107971]
[128.90635681 89.12839508]
[143.80825806 87.41570282]
[158.71015930 85.70301056]
[173.61206055 83.99032593]
[188.51396179 82.27763367]
[203.41586304 80.56494141]
[213.04457092 68.03244781]
[228.72555542 66.06202698]
[241.15554810 75.82269287]
[242.96006775 91.52362823]
[233.06852722 103.84973145]
[217.34939575 105.48815918]
[205.12855530 95.46685028]
[190.22665405 97.17953491]
[175.32475281 98.89222717]
[160.42285156 100.60491943]
[145.52095032 102.31760406]
[130.61904907 104.03029633]
[115.71714783 105.74298859]
[104.94633484 116.18280029]
[102.76950073 131.02400208]
[100.74716187 145.88705444]
[98.87955475 160.77032471]
[97.01194000 175.65361023]
[96.23209381 190.63333130]
[96.54415131 205.63008118]
[96.85620880 220.62683105]
[104.87892914 234.26304626]
[97.40807343 247.14852905]
[97.72013092 262.14529419]
[98.03218842 277.14202881]
[98.34424591 292.13879395]
[98.65630341 307.13555908]
[98.96836090 322.13229370]
[99.28041077 337.12905884]
[99.59246826 352.12582397]
[99.90452576 367.12255859]
[100.21658325 382.11932373]
[114.87157440 385.71008301]
[128.09738159 392.97235107]
[138.99224854 403.41094971]
[146.81335449 416.31414795]
[151.02742004 430.80221558]
[151.34713745 445.88729858]
[147.75071716 460.54092407]
[140.48335266 473.76391602]
[130.04054260 484.65475464]
[117.13432312 492.47088623]
[102.64463043 496.67935181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[24 126]
[32 125]
[33 124]
[34 123]
[36 122]
[37 121]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[82 95]
[83 94]
[84 93]
[85 92]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
