%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAAAAUGGGGGGGGGGCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUxxxxxxxxxxACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCCCCCCCCCCCAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[76.49179840 396.11697388]
[62.64585876 390.10095215]
[50.93719864 380.57153320]
[42.23467255 368.23587036]
[37.18407059 354.00933838]
[36.16017914 338.94766235]
[39.23897934 324.16848755]
[46.19200134 310.76858521]
[56.50328445 299.74224854]
[69.40766907 291.90774536]
[83.94755554 287.84640503]
[83.94755554 272.84640503]
[83.94755554 257.84640503]
[83.94755554 242.84642029]
[83.94755554 227.84642029]
[83.94755554 212.84642029]
[83.94755554 197.84642029]
[83.94755554 182.84642029]
[83.94755554 167.84642029]
[83.94755554 152.84642029]
[83.94755554 137.84642029]
[83.94755554 122.84642029]
[80.32705688 92.11908722]
[70.81869507 80.51774597]
[61.31033707 68.91640472]
[51.80197906 57.31506729]
[27.98396492 57.50967026]
[12.68262768 35.80919266]
[-2.31006885 35.34114838]
[-17.30276489 34.87310791]
[-32.29545975 34.40506363]
[-47.28815842 33.93702316]
[-62.28085327 33.46897888]
[-70.30328369 46.56616211]
[-83.80715179 53.88333893]
[-99.15999603 53.45221710]
[-112.23196411 45.38877487]
[-119.50677490 31.86203384]
[-119.02753448 16.51062012]
[-110.92315674 3.46398759]
[-97.37368011 -3.76838636]
[-82.02384186 -3.24102902]
[-69.00267792 4.90420341]
[-61.81281281 18.47628403]
[-46.82011414 18.94432640]
[-31.82741928 19.41236877]
[-16.83472252 19.88041115]
[-1.84202671 20.34845352]
[13.15066910 20.81649399]
[22.41561890 9.01985455]
[18.40787888 -5.43483353]
[14.40013790 -19.88952255]
[-0.57864732 -18.51993561]
[-15.56124783 -19.84713745]
[-30.06603432 -23.82846069]
[-43.62673950 -30.33592224]
[-55.80744171 -39.16033936]
[-66.21658325 -50.01803589]
[-74.51954651 -62.55998611]
[-80.44943237 -76.38301849]
[-83.81562042 -91.04277802]
[-84.50989532 -106.06801605]
[-82.50994873 -120.97573090]
[-77.88005829 -135.28669739]
[-70.76906586 -148.54089355]
[-61.40555954 -160.31224060]
[-50.09053421 -170.22232056]
[-37.18771744 -177.95260620]
[-23.11188889 -183.25456238]
[-8.31552219 -185.95777893]
[6.72573614 -185.97534180]
[21.52837372 -183.30668640]
[35.61654663 -178.03761292]
[48.53738022 -170.33749390]
[59.87552261 -160.45385742]
[69.26649475 -148.70440674]
[76.40842438 -135.46687317]
[81.07171631 -121.16674805]
[83.10647583 -106.26374054]
[82.44729614 -91.23692322]
[79.11534882 -76.56934357]
[73.21776581 -62.73249817]
[64.94410706 -50.17119217]
[54.56035614 -39.28921509]
[42.40029526 -30.43637657]
[28.85482597 -23.89726257]
[32.86256790 -9.44257355]
[36.87030792 5.01211452]
[53.73053741 7.98678493]
[65.45990753 19.24580765]
[68.74556732 34.28817749]
[63.40332031 47.80670547]
[72.91168213 59.40804672]
[82.42003632 71.00939178]
[91.92839813 82.61073303]
[90.27788544 67.70181274]
[100.17191315 56.42758560]
[115.16893005 56.12818527]
[125.50505066 66.99853516]
[124.45090485 81.96144867]
[112.69322205 91.27513885]
[127.62753296 89.87283325]
[140.64393616 80.87928772]
[154.03880310 87.39286804]
[168.97309875 85.99056244]
[183.90740967 84.58825684]
[198.84172058 83.18595886]
[213.77603149 81.78365326]
[225.07611084 70.39559937]
[241.00891113 72.27319336]
[249.35215759 85.97611237]
[243.70561218 100.99263763]
[228.40083313 105.80339050]
[215.17832947 96.71795654]
[200.24401855 98.12026215]
[185.30972290 99.52256775]
[170.37541199 100.92487335]
[155.44110107 102.32717133]
[143.49290466 111.22042084]
[129.02983093 104.80714417]
[114.09552765 106.20944977]
[129.09542847 106.26541138]
[140.92245483 115.49153137]
[144.62719727 130.02682495]
[138.65928650 143.78851318]
[125.51618195 151.01754761]
[110.69807434 148.68869019]
[100.40608978 137.77653503]
[98.94755554 122.84642029]
[98.94755554 137.84642029]
[98.94755554 152.84642029]
[98.94755554 167.84642029]
[98.94755554 182.84642029]
[98.94755554 197.84642029]
[98.94755554 212.84642029]
[98.94755554 227.84642029]
[98.94755554 242.84642029]
[98.94755554 257.84640503]
[98.94755554 272.84640503]
[98.94755554 287.84640503]
[113.48744202 291.90774536]
[126.39182281 299.74224854]
[136.70310974 310.76858521]
[143.65612793 324.16848755]
[146.73492432 338.94766235]
[145.71102905 354.00933838]
[140.66043091 368.23587036]
[131.95790100 380.57153320]
[120.24924469 390.10095215]
[106.40330505 396.11697388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 95]
[24 94]
[25 93]
[26 92]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[50 88]
[51 87]
[52 86]
[101 121]
[102 120]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
