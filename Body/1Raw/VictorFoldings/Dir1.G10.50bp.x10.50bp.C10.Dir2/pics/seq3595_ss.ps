%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCCAUGGGGGGGGGGACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCAxxxxxxxxxxCGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[84.86181641 377.10821533]
[70.83987427 371.55520630]
[58.63991928 362.68887329]
[49.02884674 351.06655884]
[42.61082077 337.41885376]
[39.78928375 322.60366821]
[40.74160004 307.55230713]
[45.40790558 293.21087646]
[53.49487305 280.48092651]
[64.49414825 270.16265869]
[77.71430969 262.90466309]
[92.32431793 259.16323853]
[92.32431793 244.16323853]
[92.32431793 229.16323853]
[92.32431793 214.16323853]
[92.32431793 199.16323853]
[92.32431793 184.16323853]
[92.32431793 169.16323853]
[92.32431793 154.16323853]
[92.32431793 139.16323853]
[92.32431793 124.16323853]
[92.32431793 109.16323853]
[83.33355713 121.17015839]
[69.84780121 127.73784637]
[54.85132599 127.41294098]
[41.66267776 120.26734924]
[33.20037079 107.88230133]
[31.33702850 92.99848175]
[36.48498535 78.90953064]
[47.50505447 68.73318481]
[61.95860672 64.72135162]
[76.64722443 67.76182556]
[88.32047272 77.18176270]
[94.39570618 90.89952850]
[97.75496674 76.28052521]
[101.11422729 61.66151428]
[104.47348785 47.04250717]
[90.11524963 42.68111420]
[76.09212494 37.33951950]
[62.47093964 31.04317665]
[49.31660080 23.82209015]
[36.69180298 15.71067429]
[24.65670013 6.74758101]
[13.26865387 -3.02447391]
[2.58193040 -13.55892277]
[-7.35254288 -24.80556297]
[-16.48742294 -36.71080017]
[-24.77917671 -49.21789551]
[-32.18828964 -62.26725006]
[-38.67945862 -75.79667664]
[-44.22174072 -89.74170685]
[-48.78873444 -104.03587341]
[-52.35866547 -118.61106873]
[-54.91453171 -133.39782715]
[-56.44414520 -148.32568359]
[-56.94021988 -163.32350159]
[-56.40039062 -178.31980896]
[-54.82723236 -193.24314880]
[-52.22823715 -208.02238464]
[-48.61579514 -222.58709717]
[-44.00712204 -236.86787415]
[-38.42417526 -250.79667664]
[-31.89356613 -264.30709839]
[-24.44641304 -277.33480835]
[-16.11820412 -289.81765747]
[-6.94862986 -301.69619751]
[3.01861310 -312.91378784]
[13.73602581 -323.41702271]
[25.15253448 -333.15579224]
[37.21373367 -342.08374023]
[49.86214447 -350.15829468]
[63.03749084 -357.34097290]
[76.67698669 -363.59756470]
[90.71563721 -368.89822388]
[105.08654022 -373.21771240]
[119.72119904 -376.53543091]
[134.54989624 -378.83557129]
[149.50193787 -380.10717773]
[164.50608826 -380.34420776]
[179.49082947 -379.54550171]
[194.38478088 -377.71490479]
[209.11692810 -374.86108398]
[223.61709595 -370.99768066]
[237.81617737 -366.14309692]
[251.64648438 -360.32046509]
[265.04214478 -353.55755615]
[277.93930054 -345.88653564]
[290.27645874 -337.34402466]
[301.99490356 -327.97070312]
[313.03872681 -317.81124878]
[323.35531616 -306.91406250]
[332.89550781 -295.33108521]
[341.61386108 -283.11752319]
[349.46881104 -270.33157349]
[356.42288208 -257.03414917]
[362.44302368 -243.28866577]
[367.50048828 -229.16056824]
[371.57116699 -214.71723938]
[374.63568115 -200.02746582]
[376.67944336 -185.16127014]
[377.69268799 -170.18949890]
[377.67059326 -155.18348694]
[376.61325073 -140.21476746]
[374.52572632 -125.35465240]
[371.41793823 -110.67397308]
[367.30474854 -96.24267578]
[362.20568848 -82.12954712]
[356.14511108 -68.40184021]
[349.15188599 -55.12496567]
[341.25930786 -42.36220169]
[332.50503540 -30.17436600]
[322.93078613 -18.61954117]
[312.58212280 -7.75279331]
[301.50842285 2.37409496]
[289.76245117 11.71286297]
[277.40014648 20.21900558]
[264.48046875 27.85198975]
[251.06495667 34.57543564]
[237.21755981 40.35730743]
[223.00424194 45.17005157]
[208.49276733 48.99073029]
[193.75227356 51.80113602]
[178.85299683 53.58787918]
[163.86596680 54.34244156]
[148.86257935 54.06122971]
[133.91433716 52.74557877]
[119.09249115 50.40176773]
[115.73323059 65.02077484]
[112.37397766 79.63977814]
[109.01471710 94.25878906]
[107.32431793 109.16323853]
[107.32431793 124.16323853]
[107.32431793 139.16323853]
[107.32431793 154.16323853]
[107.32431793 169.16323853]
[107.32431793 184.16323853]
[107.32431793 199.16323853]
[107.32431793 214.16323853]
[107.32431793 229.16323853]
[107.32431793 244.16323853]
[107.32431793 259.16323853]
[121.93433380 262.90466309]
[135.15449524 270.16265869]
[146.15376282 280.48092651]
[154.24073792 293.21087646]
[158.90704346 307.55230713]
[159.85935974 322.60366821]
[157.03781128 337.41885376]
[150.61979675 351.06655884]
[141.00871277 362.68887329]
[128.80876160 371.55520630]
[114.78681946 377.10821533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[34 130]
[35 129]
[36 128]
[37 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
