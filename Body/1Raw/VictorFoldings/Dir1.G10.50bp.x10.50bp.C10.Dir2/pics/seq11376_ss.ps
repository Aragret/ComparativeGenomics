%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCACCAGGGGGGGGGGAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCxxxxxxxxxxAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCCCCCCCCCCCACACUCAACA\
) } def
/len { sequence length } bind def

/coor [
[81.55596161 374.37753296]
[69.67168427 365.10241699]
[60.35298157 353.25231934]
[54.14161301 339.51614380]
[51.39871216 324.69253540]
[52.28374100 309.64324951]
[56.74524689 295.24331665]
[64.52384949 282.32989502]
[75.16729736 271.65371704]
[88.05680847 263.83554077]
[102.44299316 259.32986450]
[101.50736237 244.35908508]
[100.57173920 229.38829041]
[99.63610840 214.41749573]
[98.70047760 199.44670105]
[97.76485443 184.47590637]
[96.82922363 169.50512695]
[95.89359283 154.53433228]
[94.95796967 139.56353760]
[94.02233887 124.59275055]
[83.46124268 119.15737915]
[76.54286194 109.50254059]
[74.79098511 97.75473785]
[78.59146881 86.50145721]
[68.84381866 75.10044098]
[59.09616852 63.69941711]
[50.88771439 65.83302307]
[42.47438431 65.35037994]
[34.66460037 62.33105850]
[28.19861984 57.09675217]
[23.67837906 50.17736053]
[21.51152039 42.25746918]
[6.69376278 39.92636490]
[-8.12399483 37.59526062]
[-22.94175339 35.26415634]
[-37.75951004 32.93305206]
[-47.35021210 44.92947006]
[-61.66004944 50.50836945]
[-76.83974457 48.16906357]
[-88.80604553 38.54080582]
[-94.34006500 24.21355057]
[-91.95318604 9.04126167]
[-82.28746796 -2.89479566]
[-67.94293976 -8.38387966]
[-52.77820206 -5.94945574]
[-40.87250137 3.75362921]
[-35.42840576 18.11529350]
[-20.61064911 20.44639778]
[-5.79289150 22.77750206]
[9.02486706 25.10860634]
[23.84262466 27.43970871]
[26.15165520 23.50720406]
[29.10354805 20.03120804]
[32.61006165 17.11563301]
[36.56637573 14.84763622]
[34.38953781 0.00643091]
[32.21269989 -14.83477497]
[30.03586388 -29.67597961]
[27.85902596 -44.51718521]
[12.84573555 -45.82018661]
[-1.46218741 -50.55094528]
[-14.29313469 -58.45433044]
[-24.95514870 -69.10412598]
[-32.87324142 -81.92600250]
[-37.62039948 -96.22849274]
[-38.94061279 -111.24028015]
[-36.76268768 -126.15180206]
[-31.20407486 -140.15888977]
[-22.56454468 -152.50616455]
[-11.31001282 -162.52775574]
[1.95257497 -169.68319702]
[16.50798607 -173.58662415]
[31.57126236 -174.02752686]
[46.33006287 -170.98211670]
[59.98846436 -164.61463928]
[71.80988312 -155.26847839]
[81.15681458 -143.44766235]
[87.52517700 -129.78967285]
[90.57154083 -115.03107452]
[90.13161469 -99.96776581]
[86.22913361 -85.41210175]
[79.07453918 -72.14905548]
[69.05368042 -60.89387512]
[56.70696259 -52.25354385]
[42.70023346 -46.69402313]
[44.87706757 -31.85281754]
[47.05390549 -17.01161194]
[49.23074341 -2.17040610]
[51.40758133 12.67079926]
[72.20783234 27.78905487]
[70.49719238 53.95176697]
[80.24484253 65.35278320]
[89.99249268 76.75380707]
[109.25801086 76.44528198]
[123.15757751 89.78910828]
[138.05947876 88.07641602]
[152.96138000 86.36372375]
[167.86328125 84.65103912]
[169.76780701 69.69656372]
[175.19647217 55.63267517]
[183.83367920 43.27702713]
[195.17727661 33.34795761]
[208.56774902 26.42273521]
[223.22659302 22.90398026]
[238.30155945 22.99626732]
[252.91622925 26.69423103]
[266.22091675 33.78287888]
[277.44207764 43.85008621]
[285.92736816 56.31055832]
[291.18344116 70.43985748]
[292.90472412 85.41652679]
[290.99114990 100.36984253]
[285.55395508 114.43043518]
[276.90927124 126.78084564]
[265.55966187 136.70303345]
[252.16497803 143.62013245]
[237.50399780 147.13000488]
[222.42909241 147.02857971]
[207.81666565 143.32176208]
[194.51628113 136.22503662]
[183.30120850 126.15103912]
[174.82348633 113.68542480]
[169.57597351 99.55294037]
[154.67407227 101.26563263]
[139.77217102 102.97831726]
[124.87026215 104.69100952]
[119.40646362 116.24576569]
[108.99313354 123.65711975]
[109.92875671 138.62791443]
[110.86438751 153.59870911]
[111.80001831 168.56948853]
[112.73564148 183.54028320]
[113.67127228 198.51107788]
[114.60690308 213.48187256]
[115.54252625 228.45265198]
[116.47815704 243.42344666]
[117.41378784 258.39425659]
[132.24902344 261.07366943]
[146.01165771 267.22616577]
[157.90155029 276.49404907]
[167.22743225 288.33853149]
[173.44712830 302.07092285]
[176.19902039 316.89288330]
[175.32312012 331.94268799]
[170.87033081 346.34533691]
[163.09956360 359.26348877]
[152.46258545 369.94607544]
[139.57781982 377.77209473]
[125.19437408 382.28646851]
[110.14846802 383.22680664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[24 93]
[25 92]
[26 91]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[55 89]
[56 88]
[57 87]
[58 86]
[59 85]
[95 126]
[96 125]
[97 124]
[98 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
