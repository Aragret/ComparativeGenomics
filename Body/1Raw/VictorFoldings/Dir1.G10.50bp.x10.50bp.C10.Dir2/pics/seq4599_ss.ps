%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUCCUAGGGGGGGGGGAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGCCCCCCCCCCACCCCAUUCUA\
) } def
/len { sequence length } bind def

/coor [
[126.66160583 521.74511719]
[113.17272949 515.01361084]
[101.68722534 505.24902344]
[92.87285614 493.01913452]
[87.24208069 479.03494263]
[85.12224579 464.10946655]
[86.63661957 449.11044312]
[91.69714355 434.90994263]
[100.00960541 422.33352661]
[111.09073639 412.11236572]
[124.29629517 404.84072876]
[138.85852051 400.94137573]
[138.55053711 385.94451904]
[138.24255371 370.94769287]
[137.93458557 355.95086670]
[137.62660217 340.95401001]
[137.31863403 325.95718384]
[137.01065063 310.96032715]
[136.70266724 295.96350098]
[136.39469910 280.96667480]
[150.45948792 239.58792114]
[144.47119141 225.83508301]
[138.48289490 212.08226013]
[132.49459839 198.32943726]
[126.90625763 193.42202759]
[126.52775574 184.23220825]
[120.82309723 170.35932922]
[115.11843109 156.48645020]
[109.41377258 142.61357117]
[103.70910645 128.74069214]
[83.99298859 124.15699768]
[72.08677673 107.78697968]
[57.08757019 107.94097900]
[42.08835983 108.09497070]
[27.08915138 108.24897003]
[14.88013268 118.65663147]
[-0.84101820 115.45898438]
[-8.01437950 101.10898590]
[-1.13716221 86.61473083]
[14.51502132 83.09497070]
[26.93515396 93.24976349]
[41.93436432 93.09576416]
[56.93357468 92.94176483]
[71.93278503 92.78777313]
[72.47630310 90.93187714]
[73.14238739 89.11636353]
[61.17212677 80.07684326]
[49.20186996 71.03732300]
[37.23161316 61.99780655]
[25.26135254 52.95828629]
[10.06249619 56.63643265]
[-3.92171216 49.63815308]
[-10.08835602 35.26781845]
[-5.52573586 20.31066322]
[7.61181974 11.82899761]
[23.12115860 13.82760620]
[33.67924500 25.36280632]
[34.30087280 40.98802948]
[46.27112961 50.02754974]
[58.24139023 59.06706619]
[70.21164703 68.10659027]
[82.18190765 77.14611053]
[86.35562897 74.43408966]
[90.93187714 72.47630310]
[95.77565002 71.33050537]
[100.74404907 71.03050995]
[104.99689484 56.64603043]
[109.24974823 42.26154709]
[113.50259399 27.87706757]
[117.75543976 13.49258709]
[104.61815643 6.11969900]
[93.45121765 -3.99204302]
[84.81476593 -16.33543777]
[79.14199066 -30.29134750]
[76.71744537 -45.15974426]
[77.66273499 -60.19484329]
[81.93045044 -74.64248657]
[89.30651855 -87.77798462]
[99.42096710 -98.94246674]
[111.76645660 -107.57592773]
[125.72373962 -113.24532318]
[140.59272766 -115.66626740]
[155.62759399 -114.71733856]
[170.07420349 -110.44612122]
[183.20791626 -103.06686401]
[194.36993408 -92.94971466]
[203.00041199 -80.60213470]
[208.66642761 -66.64347839]
[211.08377075 -51.77390671]
[210.13119507 -36.73926926]
[205.85647583 -22.29369736]
[198.47404480 -9.16177464]
[188.35418701 1.99780607]
[176.00451660 10.62528515]
[162.04447937 16.28791237]
[147.17433167 18.70165253]
[132.13992310 17.74543381]
[127.88706970 32.12991333]
[123.63422394 46.51439667]
[119.38137817 60.89887619]
[115.12853241 75.28335571]
[126.96801758 89.39288330]
[127.91310120 107.78741455]
[117.58198547 123.03602600]
[123.28665161 136.90890503]
[128.99131775 150.78178406]
[134.69596863 164.65467834]
[140.40063477 178.52755737]
[146.24742126 192.34114075]
[152.23571777 206.09396362]
[158.22401428 219.84678650]
[164.21231079 233.59962463]
[170.24717712 219.86715698]
[184.93722534 216.83363342]
[195.91806030 227.05230713]
[193.94725037 241.92227173]
[180.68351746 248.92768860]
[194.83084106 253.91300964]
[210.41806030 251.20208740]
[219.85031128 262.72952271]
[233.99763489 267.71484375]
[250.94590759 267.27642822]
[256.05895996 283.44100952]
[241.94152832 292.82901001]
[229.01231384 281.86215210]
[214.86499023 276.87683105]
[200.28967285 279.94433594]
[189.84552002 268.06033325]
[175.69819641 263.07501221]
[169.62153625 267.47091675]
[157.46820068 276.26275635]
[151.39154053 280.65869141]
[151.69950867 295.65551758]
[152.00749207 310.65237427]
[152.31546021 325.64920044]
[152.62344360 340.64602661]
[152.93142700 355.64288330]
[153.23939514 370.63970947]
[153.54737854 385.63653564]
[153.85534668 400.63339233]
[168.56538391 403.93161011]
[182.05834961 410.65496826]
[193.54975891 420.41256714]
[202.37155151 432.63711548]
[208.01080322 446.61788940]
[210.13967896 461.54208374]
[208.63441467 476.54199219]
[203.58248901 490.74557495]
[195.27766418 503.32702637]
[184.20272827 513.55493164]
[171.00158691 520.83453369]
[156.44172668 524.74273682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 112]
[22 111]
[23 110]
[24 109]
[26 108]
[27 107]
[28 106]
[29 105]
[30 104]
[32 44]
[33 43]
[34 42]
[35 41]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[117 129]
[118 128]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
