%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCCUAGGGGGGGGGGGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUAxxxxxxxxxxACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[106.19638824 390.64685059]
[93.63816071 382.29568481]
[83.55194092 371.08325195]
[76.57174683 357.71432495]
[73.13636017 343.02932739]
[73.46173859 327.95138550]
[77.52742004 313.42825317]
[85.07784271 300.37292480]
[95.63837433 289.60601807]
[108.54516602 281.80438232]
[122.98689270 277.45843506]
[122.36291504 262.47140503]
[121.73893738 247.48440552]
[121.11495972 232.49739075]
[120.49098206 217.51037598]
[119.86700439 202.52336121]
[119.24302673 187.53633118]
[118.61905670 172.54931641]
[117.99507904 157.56230164]
[117.37110138 142.57528687]
[116.74712372 127.58827209]
[110.57133484 123.33272552]
[98.21976471 114.82164001]
[92.04397583 110.56609344]
[77.81719971 115.31990814]
[63.59041595 120.07372284]
[58.02203751 134.68629456]
[44.33853531 142.25569153]
[29.00084114 139.20787048]
[19.25094604 126.98193359]
[19.69245148 111.35058594]
[30.11689377 99.69447327]
[45.60216904 97.51725006]
[58.83660126 105.84694672]
[73.06338501 101.09313202]
[87.29016113 96.33930969]
[97.61736298 85.46048737]
[101.62510681 71.00579834]
[105.63284302 56.55111313]
[109.64058685 42.09642410]
[113.64833069 27.64173508]
[105.71450806 20.90315437]
[100.53314972 11.93619919]
[98.67606354 1.80168414]
[100.32421112 -8.31517315]
[105.25070953 -17.24335670]
[112.85132599 -23.96159172]
[108.24576569 -38.23705292]
[103.64019775 -52.51251221]
[99.03463745 -66.78797150]
[94.42906952 -81.06343079]
[79.52022552 -79.07193756]
[64.49538422 -79.77473450]
[49.83753586 -83.14923859]
[36.01786804 -89.08695984]
[23.48062706 -97.39704132]
[12.62883472 -107.81233215]
[3.81132889 -119.99803925]
[-2.68844295 -133.56242371]
[-6.66154003 -148.06947327]
[-7.98024416 -163.05282593]
[-6.60216427 -178.03082275]
[-2.57159996 -192.52200317]
[3.98188281 -206.06053162]
[12.84761715 -218.21119690]
[23.74060631 -228.58338928]
[36.31068420 -236.84371948]
[50.15377808 -242.72662354]
[64.82488251 -246.04299927]
[79.85239410 -246.68624878]
[94.75322723 -244.63566589]
[109.04839325 -239.95719910]
[122.27835846 -232.80123901]
[134.01782227 -223.39779663]
[143.88943481 -212.04917908]
[151.57583618 -199.12019348]
[156.82995605 -185.02642822]
[159.48291016 -170.22096252]
[159.44938660 -155.17973328]
[156.73046875 -140.38624573]
[151.41357422 -126.31604767]
[143.66961670 -113.42144775]
[133.74752808 -102.11693573]
[121.96626282 -92.76592255]
[108.70452881 -85.66899872]
[113.31009674 -71.39353943]
[117.91566467 -57.11807632]
[122.52122498 -42.84261703]
[127.12679291 -28.56715584]
[137.77198792 -27.22634888]
[147.24423218 -22.18705750]
[154.30479431 -14.10829544]
[168.71701050 -18.26618385]
[183.12922668 -22.42407036]
[182.52984619 -37.48741150]
[185.55346680 -52.25633621]
[192.02429199 -65.87220001]
[201.56613159 -77.54339600]
[213.62422180 -86.59137726]
[227.49751282 -92.49010468]
[242.37945557 -94.89663696]
[257.40481567 -93.67105103]
[271.70004272 -88.88461304]
[284.43402100 -80.81558990]
[294.86642456 -69.93311310]
[302.39074707 -56.86987686]
[306.56948853 -42.38534927]
[307.15972900 -27.32164955]
[304.12716675 -12.55456066]
[297.64807129 1.05737972]
[288.09915161 12.72278976]
[276.03558350 21.76345825]
[262.15872192 27.65377426]
[247.27532959 30.05127907]
[232.25071716 28.81658745]
[217.95838928 24.02148247]
[205.22930908 15.94474506]
[194.80349731 5.05594587]
[187.28710938 -8.01185417]
[172.87489319 -3.85396719]
[158.46267700 0.30392033]
[150.13819885 22.33816528]
[128.10301208 31.64947510]
[124.09527588 46.10416412]
[120.08753204 60.55885315]
[116.07979584 75.01354218]
[112.07205200 89.46823120]
[131.73413086 126.96429443]
[132.35810852 141.95130920]
[132.98208618 156.93832397]
[133.60606384 171.92533875]
[134.23004150 186.91235352]
[134.85401917 201.89938354]
[135.47799683 216.88639832]
[136.10197449 231.87341309]
[136.72595215 246.86042786]
[137.34992981 261.84744263]
[137.97390747 276.83444214]
[152.72691345 279.96490479]
[166.23754883 286.66665649]
[177.65652466 296.51843262]
[186.26603699 308.90097046]
[191.52488708 323.03588867]
[193.10249329 338.03460693]
[190.89968872 352.95434570]
[185.05494690 366.85720825]
[175.93566895 378.86926270]
[164.11509705 388.23541260]
[150.33628845 394.36691284]
[135.46537781 396.87832642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 36]
[25 35]
[26 34]
[37 127]
[38 126]
[39 125]
[40 124]
[41 123]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[92 121]
[93 120]
[94 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
