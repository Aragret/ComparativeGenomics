%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAUAAAGGGGGGGGGGGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGxxxxxxxxxxCCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCCCCCCCCCCCACCCAACUAAA\
) } def
/len { sequence length } bind def

/coor [
[85.05551147 385.66497803]
[71.03356934 380.11196899]
[58.83361053 371.24563599]
[49.22254181 359.62332153]
[42.80451584 345.97564697]
[39.98297882 331.16043091]
[40.93529510 316.10906982]
[45.60160065 301.76763916]
[53.68856430 289.03768921]
[64.68784332 278.71942139]
[77.90799713 271.46142578]
[92.51801300 267.72000122]
[92.51801300 252.72000122]
[92.51801300 237.72000122]
[92.51801300 222.72000122]
[92.51801300 207.72000122]
[92.51801300 192.72000122]
[92.51801300 177.72000122]
[92.51801300 162.72000122]
[92.51801300 147.72000122]
[92.51801300 132.72000122]
[92.51801300 117.72000885]
[82.07600403 106.95132446]
[67.08311462 106.48940277]
[52.09022903 106.02747345]
[42.13964844 114.29727173]
[29.62408066 113.56793976]
[21.25612450 104.77933502]
[6.27588415 104.00967407]
[-8.70435715 103.24001312]
[-22.88335609 110.25902557]
[-35.19685745 101.87887573]
[-50.17709732 101.10921478]
[-65.15734100 100.33955383]
[-73.44171143 113.27263641]
[-87.09009552 120.31658173]
[-102.43115234 119.57659149]
[-115.33821106 111.25171661]
[-122.33933258 97.58132172]
[-121.55126190 82.24266052]
[-113.18597412 69.36175537]
[-99.49369812 62.40351868]
[-84.15758514 63.23966980]
[-71.30297089 71.64528656]
[-64.38768005 85.35931396]
[-49.40744019 86.12897491]
[-34.42719650 86.89862823]
[-21.31968498 79.82456970]
[-7.93469715 88.25977325]
[7.04554415 89.02943420]
[22.02578545 89.79909515]
[37.16363907 80.97356415]
[52.55215836 91.03459167]
[67.54504395 91.49651337]
[82.53792572 91.95844269]
[95.82527161 84.99808502]
[103.98193359 72.40964508]
[106.04261780 63.44586182]
[112.43753815 59.64886475]
[120.85094452 47.23054886]
[129.26435852 34.81223679]
[137.67776489 22.39392281]
[146.09117126 9.97560787]
[146.46653748 4.64509583]
[148.66287231 0.44013464]
[151.93031311 -2.12763572]
[155.42451477 -2.92625046]
[157.72729492 -18.57897377]
[171.62736511 -23.93036842]
[180.78929138 -35.80719376]
[189.95123291 -47.68401718]
[179.61758423 -59.70032120]
[171.98257446 -73.58232880]
[167.37155151 -88.73387146]
[165.98002625 -104.50479126]
[167.86540222 -120.21883392]
[172.94462585 -135.20265198]
[180.99786377 -148.81465149]
[191.67796326 -160.47247314]
[204.52542114 -169.67788696]
[218.98820496 -176.03808594]
[234.44544983 -179.28251648]
[250.23406982 -179.27427673]
[265.67727661 -176.01594543]
[280.11346436 -169.64941406]
[288.78009033 -181.89237976]
[297.44668579 -194.13533020]
[306.11331177 -206.37828064]
[314.77990723 -218.62123108]
[315.75341797 -234.99145508]
[330.53637695 -242.09053040]
[343.92129517 -232.61553955]
[342.13894653 -216.31353760]
[327.02285767 -209.95463562]
[318.35626221 -197.71166992]
[309.68963623 -185.46871948]
[301.02304077 -173.22576904]
[292.35641479 -160.98281860]
[302.18576050 -150.73393250]
[309.94519043 -138.83566284]
[315.36389160 -125.70034027]
[318.25225830 -111.78350830]
[318.50839233 -97.56811523]
[316.12185669 -83.54779816]
[311.17391968 -70.20970154]
[303.83489990 -58.01757050]
[294.35836792 -47.39561844]
[283.07214355 -38.71376801]
[270.36721802 -32.27477646]
[256.68411255 -28.30366898]
[242.49749756 -26.93987846]
[228.29991150 -28.23234940]
[214.58451843 -32.13777924]
[201.82804871 -38.52207947]
[192.66612244 -26.64525795]
[183.50418091 -14.76843357]
[181.85671997 0.03478024]
[167.30133057 6.23568487]
[158.50949097 18.38901711]
[150.09608459 30.80733299]
[141.68266296 43.22564697]
[133.26925659 55.64395905]
[124.85585022 68.06227875]
[116.57037354 80.56630707]
[108.41371155 93.15474701]
[111.39939117 95.52321625]
[113.61810303 99.10723877]
[114.60457611 103.62493896]
[114.00482941 108.62582397]
[111.63427734 113.53559113]
[107.51801300 117.72000885]
[107.51801300 132.72000122]
[107.51801300 147.72000122]
[107.51801300 162.72000122]
[107.51801300 177.72000122]
[107.51801300 192.72000122]
[107.51801300 207.72000122]
[107.51801300 222.72000122]
[107.51801300 237.72000122]
[107.51801300 252.72000122]
[107.51801300 267.72000122]
[122.12802124 271.46142578]
[135.34819031 278.71942139]
[146.34745789 289.03768921]
[154.43441772 301.76763916]
[159.10072327 316.10906982]
[160.05303955 331.16043091]
[157.23150635 345.97564697]
[150.81347656 359.62332153]
[141.20240784 371.24563599]
[129.00245667 380.11196899]
[114.98051453 385.66497803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 55]
[24 54]
[25 53]
[28 51]
[29 50]
[30 49]
[32 47]
[33 46]
[34 45]
[56 125]
[57 124]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[67 118]
[69 116]
[70 115]
[71 114]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
