%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAGUAAUCGGGGGGGGGGCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGxxxxxxxxxxAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCCCCCCCCCCCGGACUAAUC\
) } def
/len { sequence length } bind def

/coor [
[37.18764496 563.56237793]
[23.34170723 557.54638672]
[11.63304520 548.01696777]
[2.93052101 535.68127441]
[-2.12008095 521.45477295]
[-3.14397216 506.39306641]
[-0.06517317 491.61392212]
[6.88784838 478.21398926]
[17.19913292 467.18765259]
[30.10351372 459.35314941]
[44.64340210 455.29183960]
[44.64340210 440.29183960]
[44.64340210 425.29183960]
[44.64340210 410.29183960]
[44.64340210 395.29183960]
[44.64340210 380.29183960]
[44.64340210 365.29183960]
[44.64340210 350.29183960]
[44.64340210 335.29183960]
[44.64340210 320.29183960]
[44.64340210 305.29183960]
[36.90610123 292.56454468]
[44.64340210 278.76437378]
[44.33134460 263.76763916]
[43.70736694 248.78060913]
[43.08338928 233.79359436]
[42.45941162 218.80657959]
[41.83543396 203.81956482]
[34.53483963 216.92304993]
[24.54878998 228.11584473]
[12.35938168 236.85760498]
[-1.44491243 242.72628784]
[-16.19765854 245.43858337]
[-31.18663025 244.86352539]
[-45.68820572 241.02890015]
[-59.00228119 234.11982727]
[-70.48609161 224.46984863]
[-79.58522797 212.54484558]
[-85.86041260 198.92053223]
[-89.00869751 184.25463867]
[-88.87808228 169.25520325]
[-85.47487640 154.64636230]
[-78.96338654 141.13339233]
[-69.65795898 129.36865234]
[-58.00783539 119.92012787]
[-44.57545853 113.24395752]
[-30.00930595 109.66245270]
[-15.01259232 109.34851074]
[-0.30931753 112.31729889]
[13.39068222 118.42549133]
[25.42600822 127.37819672]
[35.21562576 138.74320984]
[42.28692245 151.97183228]
[46.29851151 166.42546082]
[47.05684662 181.40419006]
[54.23935699 168.23559570]
[61.42186356 155.06701660]
[68.60437012 141.89843750]
[75.78688049 128.72985840]
[63.32567596 114.40782928]
[59.07210541 94.98870850]
[64.90118408 75.04814911]
[80.20513153 59.70479202]
[101.84752655 53.31115723]
[103.71514130 38.42787933]
[97.75627136 23.77173805]
[107.01800537 12.10685349]
[108.88562012 -2.77642632]
[110.75323486 -17.65970612]
[97.05194092 -24.07296371]
[86.00443268 -34.40774536]
[78.69302368 -47.65155792]
[75.83401489 -62.50690079]
[77.70750427 -77.51840210]
[84.12994385 -91.21539307]
[94.47212219 -102.25597382]
[107.72083282 -109.55850220]
[122.57808685 -112.40756226]
[137.58833313 -110.52401733]
[151.28100586 -104.09239960]
[162.31466675 -93.74282074]
[169.60832214 -80.48922729]
[172.44741821 -65.63006592]
[170.55380249 -50.62108612]
[164.11302185 -36.93271637]
[153.75605774 -25.90600395]
[140.49757385 -18.62123299]
[125.63651276 -15.79209328]
[123.76889801 -0.90881324]
[121.90128326 13.97446632]
[127.99373627 27.56605530]
[118.59841919 40.29549026]
[116.73080444 55.17877197]
[122.58061981 59.87235260]
[124.86043549 45.04661560]
[138.83984375 39.60823059]
[150.53926086 48.99564743]
[148.25912476 63.82133102]
[134.28024292 69.25951385]
[140.13005066 73.95309448]
[154.25485229 68.90434265]
[168.37965393 63.85558319]
[176.51565552 50.02861404]
[192.41838074 47.91136169]
[203.88862610 59.12800217]
[202.12741089 75.07408905]
[188.48576355 83.51714325]
[173.42842102 77.98038483]
[159.30360413 83.02914429]
[145.17880249 88.07789612]
[144.98948669 104.35599518]
[139.30650330 119.03807831]
[129.19633484 130.39900208]
[116.21866608 137.24528503]
[102.19482422 139.03617859]
[88.95546722 135.91236877]
[81.77295685 149.08094788]
[74.59044647 162.24952698]
[67.40793610 175.41810608]
[60.22542953 188.58670044]
[56.82245255 203.19558716]
[57.44643021 218.18260193]
[58.07040405 233.16961670]
[58.69438171 248.15663147]
[59.31835938 263.14364624]
[62.58227539 269.01342773]
[62.37377548 274.77432251]
[59.64340210 278.76437378]
[67.38069916 292.56454468]
[59.64340210 305.29183960]
[59.64340210 320.29183960]
[59.64340210 335.29183960]
[59.64340210 350.29183960]
[59.64340210 365.29183960]
[59.64340210 380.29183960]
[59.64340210 395.29183960]
[59.64340210 410.29183960]
[59.64340210 425.29183960]
[59.64340210 440.29183960]
[59.64340210 455.29183960]
[74.18328857 459.35314941]
[87.08766937 467.18765259]
[97.39895630 478.21398926]
[104.35197449 491.61392212]
[107.43077087 506.39306641]
[106.40688324 521.45477295]
[101.35627747 535.68127441]
[92.65375519 548.01696777]
[80.94509125 557.54638672]
[67.09915924 563.56237793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[55 120]
[56 119]
[57 118]
[58 117]
[59 116]
[64 93]
[65 92]
[67 90]
[68 89]
[69 88]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
