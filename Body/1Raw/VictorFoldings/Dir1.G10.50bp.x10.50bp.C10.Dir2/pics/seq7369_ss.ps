%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCCCCCAGGGGGGGGGGAAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUxxxxxxxxxxCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUCCCCCCCCCCGAAGCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[73.84886169 549.66473389]
[60.00292206 543.64868164]
[48.29426193 534.11926270]
[39.59173584 521.78363037]
[34.54113388 507.55709839]
[33.51724243 492.49542236]
[36.59604263 477.71624756]
[43.54906464 464.31631470]
[53.86034775 453.29000854]
[66.76473236 445.45547485]
[81.30461884 441.39416504]
[81.30461884 426.39416504]
[81.30461884 411.39416504]
[81.30461884 396.39416504]
[81.30461884 381.39416504]
[81.30461884 366.39416504]
[81.30461884 351.39416504]
[81.30461884 336.39416504]
[81.30461884 321.39416504]
[81.30461884 306.39416504]
[81.30461884 291.39416504]
[81.30461884 276.39416504]
[73.56731415 263.66690063]
[81.30461884 249.86672974]
[78.13903809 243.13436890]
[81.46389771 234.55548096]
[81.77595520 219.55873108]
[80.06326294 204.65682983]
[76.35710144 190.12188721]
[72.49994659 175.62629700]
[68.49220276 161.17160034]
[64.48446655 146.71691895]
[60.47672272 132.26223755]
[49.07570267 122.51457977]
[34.17380142 120.80188751]
[19.27189827 119.08919525]
[4.36999607 117.37651062]
[-7.85084295 127.39781952]
[-23.56997490 125.75939941]
[-33.46151733 113.43328857]
[-31.65699577 97.73236084]
[-19.22699738 87.97168732]
[-3.54602289 89.94210815]
[6.08268547 102.47460938]
[20.98458862 104.18729401]
[35.88648987 105.89998627]
[50.78839111 107.61267853]
[54.24189377 100.95510101]
[39.44407654 98.50057983]
[37.20587540 83.66850281]
[50.62045670 76.95664978]
[61.14889145 87.63993835]
[64.60238647 80.98236084]
[54.61966324 69.78659821]
[44.63693619 58.59083176]
[28.76681709 56.24161148]
[20.83357048 42.29732513]
[26.92290497 27.45483398]
[42.36360550 23.10002708]
[55.31088638 32.57353973]
[55.83270264 48.60810471]
[65.81542969 59.80387115]
[75.79815674 70.99964142]
[85.09362793 70.11730194]
[93.38570404 71.74778748]
[100.06806183 75.36205292]
[104.67362976 61.08659363]
[109.27919006 46.81113434]
[113.88475800 32.53567505]
[101.82595825 41.45673752]
[87.11362457 44.38032150]
[72.56017303 40.74755478]
[60.94763184 31.25287628]
[54.49585724 17.71128845]
[54.43816757 2.71139884]
[60.78559113 -10.87941456]
[72.32475281 -20.46313477]
[86.84983826 -24.20773888]
[101.58422089 -21.39740753]
[113.71128082 -12.56936550]
[120.91281891 0.58882093]
[121.81241608 15.56037045]
[129.80233765 2.86544108]
[130.60484314 -12.93539906]
[143.93246460 -19.58549500]
[151.92239380 -32.28042603]
[149.78047180 -48.17985153]
[160.97930908 -59.66748047]
[176.92810059 -57.93098831]
[185.39231873 -44.30245972]
[179.87892151 -29.23653793]
[164.61730957 -24.29050827]
[156.62739563 -11.59557819]
[156.39637756 3.29723501]
[142.49726868 10.85535717]
[134.50735474 23.55028725]
[128.16021729 37.14123917]
[123.55465698 51.41669846]
[118.94908905 65.69216156]
[114.34352112 79.96762085]
[126.04540253 91.93700409]
[128.09008789 110.22079468]
[117.62046814 127.33093262]
[97.31266022 135.04258728]
[74.93141174 128.25448608]
[78.93915558 142.70918274]
[82.94689178 157.16386414]
[86.95463562 171.61856079]
[92.29605865 179.10995483]
[90.89204407 186.41572571]
[94.59819794 200.95066833]
[99.36019897 197.86663818]
[105.35881042 196.15454102]
[112.21984863 196.15635681]
[126.79255676 199.71110535]
[141.36524963 203.26586914]
[155.93795776 206.82063293]
[172.75877380 204.70016479]
[179.45285034 220.27661133]
[166.33824158 231.02105713]
[152.38319397 221.39334106]
[137.81050110 217.83857727]
[123.23779297 214.28381348]
[108.66508484 210.72904968]
[96.77270508 219.87078857]
[96.46065521 234.86753845]
[96.30461884 249.86672974]
[104.04191589 263.66690063]
[96.30461884 276.39416504]
[96.30461884 291.39416504]
[96.30461884 306.39416504]
[96.30461884 321.39416504]
[96.30461884 336.39416504]
[96.30461884 351.39416504]
[96.30461884 366.39416504]
[96.30461884 381.39416504]
[96.30461884 396.39416504]
[96.30461884 411.39416504]
[96.30461884 426.39416504]
[96.30461884 441.39416504]
[110.84450531 445.45547485]
[123.74888611 453.29000854]
[134.06016541 464.31631470]
[141.01318359 477.71624756]
[144.09199524 492.49542236]
[143.06809998 507.55709839]
[138.01750183 521.78363037]
[129.31497192 534.11926270]
[117.60630798 543.64868164]
[103.76036835 549.66473389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 127]
[26 126]
[27 125]
[28 111]
[29 110]
[30 108]
[31 107]
[32 106]
[33 105]
[34 47]
[35 46]
[36 45]
[37 44]
[53 63]
[54 62]
[55 61]
[66 100]
[67 99]
[68 98]
[69 97]
[82 96]
[83 95]
[85 93]
[86 92]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
