%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUCUCCUGGGGGGGGGGACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAAxxxxxxxxxxUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCCCCCCCCCCCUCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 364.12176514]
[71.19830322 358.10574341]
[59.48964310 348.57632446]
[50.78712082 336.24066162]
[45.73651886 322.01412964]
[44.71262741 306.95245361]
[47.79142761 292.17327881]
[54.74444962 278.77337646]
[65.05573273 267.74703979]
[77.96011353 259.91253662]
[92.50000000 255.85121155]
[92.50000000 240.85121155]
[92.50000000 225.85121155]
[92.50000000 210.85121155]
[92.50000000 195.85121155]
[92.50000000 180.85121155]
[92.50000000 165.85121155]
[92.50000000 150.85121155]
[92.50000000 135.85121155]
[92.50000000 120.85121155]
[85.88288879 117.08010864]
[80.93350983 111.29122925]
[78.23656464 104.16845703]
[63.41880798 101.83734894]
[48.60105133 99.50624847]
[33.78329468 97.17514801]
[18.96553421 94.84403992]
[4.14777660 92.51293945]
[-10.66998100 90.18183136]
[-25.48773956 87.85073090]
[-40.35078812 85.82839203]
[-55.25268936 84.11570740]
[-69.84604645 90.22670746]
[-81.60665131 81.08682251]
[-96.50855255 79.37413025]
[-111.41045380 77.66143799]
[-126.31235504 75.94875336]
[-141.21426392 74.23606110]
[-156.03620911 81.25329590]
[-169.36856079 71.70443726]
[-167.49612427 55.41254044]
[-152.34509277 49.13730621]
[-139.50157166 59.33415985]
[-124.59966278 61.04684830]
[-109.69776154 62.75953674]
[-94.79586029 64.47222900]
[-79.89395905 66.18491364]
[-66.36647797 59.95140839]
[-53.53999710 69.21380615]
[-38.63809586 70.92649078]
[-34.36238098 68.66955566]
[-28.61536026 69.12019348]
[-23.15663528 73.03297424]
[-8.33887768 75.36407471]
[6.47888088 77.69517517]
[21.29663849 80.02628326]
[36.11439514 82.35738373]
[50.93215561 84.68849182]
[65.74991608 87.01959229]
[80.56767273 89.35070038]
[93.63653564 78.77432251]
[110.36849976 80.41640472]
[121.45981598 70.31775665]
[132.55113220 60.21910477]
[143.64244080 50.12045670]
[154.62811279 39.90697479]
[165.50694275 29.57977104]
[176.38575745 19.25256538]
[187.26458740 8.92536068]
[178.28503418 -3.11225152]
[170.79228210 -16.12743187]
[164.89149475 -29.93746758]
[160.66552734 -44.34848785]
[158.17369080 -59.15818405]
[157.45097351 -74.15865326]
[158.50752258 -89.13931274]
[161.32850647 -103.88984680]
[165.87432861 -118.20319366]
[172.08116150 -131.87841797]
[179.86186218 -144.72352600]
[189.10722351 -156.55821228]
[199.68745422 -167.21630859]
[211.45401001 -176.54821777]
[224.24171448 -184.42292786]
[237.87103271 -190.72988892]
[252.15066528 -195.38055420]
[266.88012695 -198.30964661]
[281.85263062 -199.47604370]
[296.85797119 -198.86335754]
[311.68554688 -196.48020935]
[326.12719727 -192.36004639]
[339.98013306 -186.56069946]
[353.04989624 -179.16360474]
[365.15304565 -170.27258301]
[376.11965942 -160.01245117]
[385.79574585 -148.52726746]
[394.04550171 -135.97825623]
[400.75311279 -122.54157257]
[405.82440186 -108.40585327]
[409.18817139 -93.76955414]
[410.79724121 -78.83813477]
[410.62896729 -63.82120895]
[408.68572998 -48.92959213]
[404.99481201 -34.37234116]
[399.60803223 -20.35381699]
[392.60104370 -7.07081556]
[384.07214355 5.29018879]
[374.14111328 16.55566788]
[362.94735718 26.56747055]
[350.64801025 35.18505096]
[337.41577148 42.28742599]
[323.43634033 47.77489090]
[308.90603638 51.57041168]
[294.02877808 53.62070465]
[279.01345825 53.89698792]
[264.07083130 52.39538193]
[249.41072083 49.13696671]
[235.23889160 44.16748428]
[221.75431824 37.55670166]
[209.14628601 29.39742088]
[197.59179688 19.80418587]
[186.71296692 30.13138962]
[175.83413696 40.45859528]
[164.95532227 50.78580093]
[162.25207520 57.71675491]
[153.74108887 61.21176910]
[142.64978027 71.31041718]
[131.55847168 81.40907288]
[120.46714783 91.50772095]
[120.26821136 108.95670319]
[107.50000000 120.85121155]
[107.50000000 135.85121155]
[107.50000000 150.85121155]
[107.50000000 165.85121155]
[107.50000000 180.85121155]
[107.50000000 195.85121155]
[107.50000000 210.85121155]
[107.50000000 225.85121155]
[107.50000000 240.85121155]
[107.50000000 255.85121155]
[122.03988647 259.91253662]
[134.94427490 267.74703979]
[145.25555420 278.77337646]
[152.20857239 292.17327881]
[155.28736877 306.95245361]
[154.26348877 322.01412964]
[149.21287537 336.24066162]
[140.51036072 348.57632446]
[128.80169678 358.10574341]
[114.95575714 364.12176514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 50]
[32 49]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[62 129]
[63 128]
[64 127]
[65 126]
[66 124]
[67 123]
[68 122]
[69 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
