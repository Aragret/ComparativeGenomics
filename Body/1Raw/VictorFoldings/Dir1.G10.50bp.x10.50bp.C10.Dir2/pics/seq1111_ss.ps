%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUUAGCAGGGGGGGGGGAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCxxxxxxxxxxAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCCCCCCCCCCCACCUCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[106.89826202 427.64706421]
[93.67806244 420.37460327]
[82.79125977 409.92758179]
[74.98013306 397.01834106]
[70.77724457 382.52703857]
[70.46917725 367.44168091]
[74.07691956 352.79086304]
[81.35449219 339.57348633]
[91.80569458 328.69070435]
[104.71795654 320.88455200]
[119.21089935 316.68728638]
[118.89884186 301.69052124]
[118.58678436 286.69375610]
[118.27472687 271.69702148]
[117.96266937 256.70025635]
[117.65061188 241.70350647]
[117.33856201 226.70675659]
[117.02650452 211.71000671]
[116.71444702 196.71324158]
[116.40238953 181.71649170]
[116.09033203 166.71974182]
[103.56436920 158.46745300]
[89.66181946 164.09941101]
[75.75926208 169.73136902]
[61.85670471 175.36331177]
[47.95414734 180.99526978]
[38.30195618 194.25300598]
[22.02510262 192.25398254]
[15.86781693 177.05464172]
[26.16418839 164.29075623]
[42.32218933 167.09271240]
[56.22474670 161.46076965]
[70.12730408 155.82881165]
[84.02986145 150.19685364]
[97.93241882 144.56489563]
[83.17466736 139.92951965]
[71.30160522 130.72959900]
[63.60387421 118.35672760]
[60.77925491 104.51820374]
[62.87742996 91.00430298]
[69.33046722 79.45719147]
[79.06072235 71.17141724]
[72.99770355 57.45136642]
[57.89108276 46.97426224]
[60.37660217 29.63003540]
[54.02947235 16.03908539]
[47.68234253 2.44813347]
[41.33521271 -11.14281750]
[32.19347763 -23.03519630]
[20.69167328 -32.66372299]
[9.18987083 -42.29224777]
[-2.31193280 -51.92077637]
[-18.54976845 -54.21527481]
[-24.42980385 -69.52400970]
[-13.90316200 -82.09865570]
[2.20124960 -79.00350952]
[7.31659365 -63.42258072]
[18.81839752 -53.79405212]
[30.32019997 -44.16552734]
[41.82200241 -34.53699875]
[36.98166656 -48.73457336]
[36.07488632 -63.70714188]
[39.16644287 -78.38509369]
[46.03548813 -91.71987152]
[56.19130325 -102.75886536]
[68.90838623 -110.71347046]
[83.27825165 -115.01544189]
[98.27435303 -115.35743713]
[112.82540131 -111.71504211]
[125.89189911 -104.34844971]
[136.54040527 -93.78391266]
[144.01020813 -80.77615356]
[147.76770020 -66.25439453]
[147.54443359 -51.25605774]
[143.35635376 -36.85258484]
[135.50268555 -24.07292366]
[124.54443359 -13.83002949]
[111.26445770 -6.85563183]
[96.61144257 -3.64796591]
[81.63216400 -4.43617964]
[67.39671326 -9.16396618]
[54.92616272 -17.48994637]
[61.27329254 -3.89899588]
[67.62042236 9.69195461]
[73.96755219 23.28290558]
[85.25958252 27.73232841]
[90.64160919 39.05720139]
[86.71775818 51.38835526]
[92.78076935 65.10840607]
[103.54010773 63.25635910]
[114.73815918 64.76089478]
[125.31888580 69.70750427]
[134.21887207 77.84790039]
[140.47291565 88.60485840]
[143.31542969 101.11042023]
[142.26731873 114.27508545]
[156.28404236 108.93357086]
[170.30075073 103.59206390]
[171.54075623 88.37939453]
[179.26589966 75.21562195]
[191.94233704 66.71441650]
[207.05317688 64.56369781]
[221.59811401 69.19049072]
[232.68927002 79.67614746]
[238.12448120 93.93872833]
[236.82458496 109.14639282]
[229.04765320 122.27964783]
[216.33782959 130.73086548]
[201.21865845 132.82206726]
[186.69204712 128.13803101]
[175.64225769 117.60877228]
[161.62554932 122.95028687]
[147.60884094 128.29179382]
[147.92088318 143.28855896]
[162.14767456 148.04237366]
[176.37445068 152.79618835]
[190.60122681 157.55000305]
[204.82800293 162.30381775]
[219.76692200 156.45500183]
[233.58125305 164.61244202]
[235.67382812 180.51843262]
[224.43942261 191.97126770]
[208.49607849 190.18530273]
[200.07418823 176.53059387]
[185.84741211 171.77677917]
[171.62063599 167.02296448]
[157.39385986 162.26914978]
[143.16706848 157.51533508]
[131.08708191 166.40768433]
[131.39913940 181.40443420]
[131.71119690 196.40118408]
[132.02325439 211.39794922]
[132.33531189 226.39469910]
[132.64736938 241.39144897]
[132.95942688 256.38821411]
[133.27148438 271.38494873]
[133.58354187 286.38171387]
[133.89559937 301.37847900]
[134.20765686 316.37521362]
[148.86264038 319.96597290]
[162.08845520 327.22824097]
[172.98332214 337.66683960]
[180.80441284 350.57003784]
[185.01849365 365.05810547]
[185.33821106 380.14321899]
[181.74177551 394.79681396]
[174.47441101 408.01983643]
[164.03161621 418.91064453]
[151.12538147 426.72677612]
[136.63569641 430.93524170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[42 89]
[43 88]
[45 85]
[46 84]
[47 83]
[48 82]
[49 60]
[50 59]
[51 58]
[52 57]
[96 113]
[97 112]
[98 111]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
