%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCCUUAGGGGGGGGGGGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUxxxxxxxxxxUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCCCCCCCCCCCUCGGCUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.30258179]
[71.19830322 387.28656006]
[59.48964310 377.75714111]
[50.78712082 365.42147827]
[45.73651886 351.19494629]
[44.71262741 336.13327026]
[47.79142761 321.35412598]
[54.74444962 307.95419312]
[65.05573273 296.92785645]
[77.96011353 289.09335327]
[92.50000000 285.03204346]
[92.50000000 270.03204346]
[92.50000000 255.03202820]
[92.50000000 240.03202820]
[92.50000000 225.03202820]
[92.50000000 210.03202820]
[92.50000000 195.03202820]
[92.50000000 180.03202820]
[92.50000000 165.03202820]
[92.50000000 150.03202820]
[92.50000000 135.03202820]
[92.50000000 120.03203583]
[79.51096344 106.14261627]
[82.71634674 87.39810944]
[74.46405792 74.87214661]
[66.21176147 62.34618759]
[57.95947647 49.82022476]
[49.70718765 37.29426575]
[41.45489883 24.76830292]
[28.19132233 31.79840469]
[14.31954575 37.53587341]
[-0.03480402 41.92875290]
[-14.74172974 44.93725967]
[-29.66803932 46.53414154]
[-44.67855453 46.70494080]
[-59.63733673 45.44810867]
[-74.40891266 42.77502823]
[-88.85949707 38.70991135]
[-102.85823822 33.28956985]
[-116.27834320 26.56309128]
[-128.99827576 18.59139442]
[-140.90284729 9.44667435]
[-151.88424683 -0.78825122]
[-161.84301758 -12.02069187]
[-170.68896484 -24.14892006]
[-178.34197998 -37.06310272]
[-184.73275757 -50.64627838]
[-189.80342102 -64.77543640]
[-193.50804138 -79.32262421]
[-195.81307983 -94.15608215]
[-196.69764709 -109.14148712]
[-196.15374756 -124.14311981]
[-194.18629456 -139.02511597]
[-190.81311035 -153.65270996]
[-186.06472778 -167.89341736]
[-179.98419189 -181.61827087]
[-172.62652588 -194.70297241]
[-164.05839539 -207.02903748]
[-154.35737610 -218.48481750]
[-143.61132812 -228.96658325]
[-131.91757202 -238.37937927]
[-119.38201904 -246.63800049]
[-106.11818695 -253.66761780]
[-92.24620056 -259.40457153]
[-77.89169312 -263.79693604]
[-63.18465805 -266.80490112]
[-48.25828934 -268.40124512]
[-33.24776840 -268.57150269]
[-18.28903198 -267.31411743]
[-3.51755500 -264.64050293]
[10.93288708 -260.57485962]
[24.93142700 -255.15400696]
[38.35128784 -248.42703247]
[51.07093430 -240.45487976]
[62.97517395 -231.30972290]
[73.95619965 -221.07440186]
[83.91455078 -209.84159851]
[92.76006317 -197.71304321]
[100.41260529 -184.79858398]
[106.80288696 -171.21516418]
[111.87303925 -157.08583069]
[115.57712555 -142.53851318]
[117.88162231 -127.70496368]
[118.76564789 -112.71952820]
[118.22119141 -97.71791840]
[116.25319672 -82.83599091]
[112.87947845 -68.20851898]
[108.13059235 -53.96798706]
[102.04954529 -40.24335098]
[94.69140625 -27.15891266]
[86.12281799 -14.83316326]
[76.42137909 -3.37773395]
[65.67495728 7.10363245]
[53.98085785 16.51601219]
[62.23315048 29.04197502]
[70.48543549 41.56793594]
[78.73772430 54.09389877]
[86.99001312 66.61985779]
[95.24230194 79.14582062]
[110.24226379 81.22159576]
[120.10897064 92.70878601]
[135.10815430 92.86482239]
[150.10734558 93.02085876]
[154.50039673 78.56826019]
[162.78843689 65.93951416]
[174.29956055 56.15837860]
[188.10063171 50.01776886]
[203.07286072 48.01547623]
[218.00250244 50.31381607]
[231.67929077 56.72647476]
[242.99450684 66.73360443]
[251.03086853 79.52397156]
[255.13691711 94.06072235]
[254.97978210 109.16542053]
[250.57220459 123.61360168]
[242.27148438 136.23402405]
[230.75053406 146.00358582]
[216.94331360 152.13032532]
[201.96908569 154.11756897]
[187.04174805 151.80424500]
[173.37141418 145.37783813]
[162.06625366 135.35934448]
[154.04273987 122.56091309]
[149.95130920 108.02005005]
[134.95211792 107.86401367]
[119.95293427 107.70797729]
[117.02890015 112.94406891]
[112.76622772 117.16262817]
[107.50000000 120.03203583]
[107.50000000 135.03202820]
[107.50000000 150.03202820]
[107.50000000 165.03202820]
[107.50000000 180.03202820]
[107.50000000 195.03202820]
[107.50000000 210.03202820]
[107.50000000 225.03202820]
[107.50000000 240.03202820]
[107.50000000 255.03202820]
[107.50000000 270.03204346]
[107.50000000 285.03204346]
[122.03988647 289.09335327]
[134.94427490 296.92785645]
[145.25555420 307.95419312]
[152.20857239 321.35412598]
[155.28736877 336.13327026]
[154.26348877 351.19494629]
[149.21287537 365.42147827]
[140.51036072 377.75714111]
[128.80169678 387.28656006]
[114.95575714 393.30258179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[101 126]
[102 125]
[103 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
