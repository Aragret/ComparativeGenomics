%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUUCUAGGGGGGGGGGUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCxxxxxxxxxxCAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCCCCCCCCCCCUCCUAGCCUUACUA\
) } def
/len { sequence length } bind def

/coor [
[65.56115723 539.07849121]
[52.32434464 531.92999268]
[40.62660217 522.47070312]
[30.86634827 511.02291870]
[23.37601471 497.97650146]
[18.41072083 483.77575684]
[16.13958168 468.90441895]
[16.63995361 453.86898804]
[19.89479065 439.18157959]
[25.79323578 425.34237671]
[34.13439178 412.82281494]
[44.63415909 402.04925537]
[56.93492126 393.38867188]
[70.61772156 387.13601685]
[85.21652222 383.50424194]
[84.32791138 368.53060913]
[83.43930054 353.55694580]
[82.55069733 338.58328247]
[81.66208649 323.60961914]
[80.77347565 308.63598633]
[79.88486481 293.66232300]
[78.99625397 278.68865967]
[78.10765076 263.71499634]
[77.21903992 248.74134827]
[76.33042908 233.76768494]
[67.33525085 245.77130127]
[53.32813644 251.13793945]
[38.61512375 248.21778870]
[27.71925735 237.90856934]
[23.99011993 223.37951660]
[28.57411575 209.09710693]
[40.06204224 199.45204163]
[54.92230606 197.40934753]
[68.58659363 203.59701538]
[76.85386658 216.11157227]
[78.62796783 201.21685791]
[71.38259888 191.48863220]
[72.77410126 179.03474426]
[82.59720612 170.62240601]
[84.66522980 155.76564026]
[86.73326111 140.90888977]
[88.80128479 126.05213165]
[90.86931610 111.19537354]
[85.23190308 97.29502869]
[73.39958954 88.07568359]
[61.56727219 78.85633850]
[49.31020737 87.68476105]
[35.06192780 92.70105743]
[19.97747803 93.49858093]
[5.27968597 90.01267242]
[-7.83996534 82.52591705]
[-18.31792259 71.64524078]
[-25.30478668 58.25269318]
[-28.23416138 43.43394089]
[-26.86857796 28.39027405]
[-21.31873703 14.34121990]
[-12.03453922 2.42566919]
[0.23138762 -6.39043665]
[14.48469925 -11.39241600]
[29.56994247 -12.17477989]
[44.26422501 -8.67410660]
[57.37635040 -1.17417979]
[67.84336853 9.71701527]
[74.81678009 23.11657906]
[77.73126221 37.93826675]
[76.35057068 52.98055267]
[70.78661346 67.02402496]
[82.61893463 76.24337006]
[94.45124817 85.46271515]
[96.79522705 86.66207886]
[98.73197937 88.19307709]
[100.21900940 89.97029114]
[109.78493500 78.41637421]
[95.56248474 83.18313599]
[80.56536102 82.88932800]
[66.54052734 77.56916809]
[55.12169266 67.84239960]
[47.63898849 54.84204483]
[44.96405792 40.08248138]
[47.40849304 25.28299522]
[54.68754959 12.16753387]
[65.95331573 2.26387119]
[79.89347839 -3.27434826]
[94.88419342 -3.80199552]
[109.17924500 0.74239302]
[121.11345673 9.82945728]
[129.29663086 22.40067482]
[132.77557373 36.99166489]
[131.14498901 51.90277863]
[124.59687805 65.39424896]
[137.28082275 57.38690186]
[149.96475220 49.37955093]
[162.64869690 41.37220001]
[175.17195129 33.11581421]
[187.52964783 24.61361504]
[199.88734436 16.11141586]
[211.89950562 7.12764359]
[223.54736328 -2.32367396]
[235.19522095 -11.77499199]
[238.27986145 -27.51870537]
[252.57797241 -34.79495239]
[267.12124634 -28.02201843]
[270.75335693 -12.39552021]
[260.68801880 0.09723157]
[244.64653015 -0.12713365]
[232.99867249 9.32418442]
[221.35081482 18.77550125]
[220.94955444 21.60104370]
[219.37471008 24.43280411]
[216.61999512 26.81159401]
[212.84944153 28.28529167]
[208.38954163 28.46911049]
[196.03184509 36.97130966]
[183.67416382 45.47350693]
[181.93562317 49.97372055]
[177.32200623 53.40577698]
[170.65605164 54.05614090]
[157.97210693 62.06349182]
[145.28816223 70.07083893]
[132.60423279 78.07819366]
[121.33885193 87.98229980]
[111.77292633 99.53621674]
[105.72607422 113.26340485]
[103.65804291 128.12016296]
[101.59001923 142.97691345]
[99.52198792 157.83367920]
[97.45396423 172.69042969]
[104.77976227 189.55780029]
[93.52268219 202.99095154]
[91.74858093 217.88566589]
[91.30408478 232.87908936]
[92.19269562 247.85273743]
[93.08130646 262.82638550]
[93.96990967 277.80004883]
[94.85852051 292.77371216]
[95.74713135 307.74737549]
[96.63574219 322.72100830]
[97.52435303 337.69467163]
[98.41295624 352.66833496]
[99.30156708 367.64199829]
[100.19017792 382.61563110]
[115.11605072 384.49526978]
[129.44233704 389.08572388]
[142.68107605 396.23068237]
[154.38136292 405.68676758]
[164.14469910 417.13192749]
[171.63854980 430.17636108]
[176.60768127 444.37573242]
[178.88282776 459.24645996]
[178.38650513 474.28201294]
[175.13563538 488.97033691]
[169.24090576 502.81109619]
[160.90313721 515.33294678]
[150.40626526 526.10931396]
[138.10783386 534.77325439]
[124.42672729 541.02954102]
[109.82890320 544.66528320]
[94.81156921 545.55645752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
[35 130]
[36 129]
[39 127]
[40 126]
[41 125]
[42 124]
[43 123]
[44 69]
[45 68]
[46 67]
[72 122]
[73 121]
[90 120]
[91 119]
[92 118]
[93 117]
[94 114]
[95 113]
[96 112]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
