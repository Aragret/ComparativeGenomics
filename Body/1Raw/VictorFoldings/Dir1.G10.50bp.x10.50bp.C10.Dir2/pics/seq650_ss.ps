%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCUCAUCGGGGGGGGGGAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCxxxxxxxxxxAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUCCCCCCCCCCUACUCUCAUC\
) } def
/len { sequence length } bind def

/coor [
[26.61843491 297.89489746]
[15.79757690 293.53863525]
[5.23391247 288.59118652]
[-5.04029131 283.06768799]
[-14.99365330 276.98504639]
[-24.59576988 270.36178589]
[-33.81731415 263.21817017]
[-42.63011551 255.57601929]
[-51.00725937 247.45864868]
[-58.92315674 238.89088440]
[-66.35363007 229.89886475]
[-73.27597809 220.51008606]
[-85.88710785 228.63163757]
[-98.49823761 236.75317383]
[-105.91136169 250.73016357]
[-120.80097198 251.11608887]
[-133.41209412 259.23764038]
[-146.02322388 267.35916138]
[-158.63435364 275.48071289]
[-171.24548340 283.60226440]
[-173.03077698 299.13760376]
[-184.41981506 309.85317993]
[-200.03501892 310.68948364]
[-212.50337219 301.25155640]
[-215.93771362 285.99575806]
[-208.71643066 272.12539673]
[-194.24920654 266.18963623]
[-179.36701965 270.99111938]
[-166.75588989 262.86959839]
[-154.14476013 254.74804688]
[-141.53364563 246.62651062]
[-128.92251587 238.50495911]
[-122.41141510 225.10888672]
[-106.61977386 224.14204407]
[-94.00865173 216.02050781]
[-81.39752197 207.89895630]
[-93.92126465 183.31741333]
[-103.13182831 157.31236267]
[-108.87184906 130.32814026]
[-111.04326630 102.82574463]
[-109.60897827 75.27507019]
[-104.59348297 48.14682770]
[-96.08248138 21.90450478]
[-84.22137451 -3.00354481]
[-69.21282196 -26.15176201]
[-80.91244507 -35.53892517]
[-92.61206818 -44.92608643]
[-104.31169128 -54.31324768]
[-118.31510162 -48.13562393]
[-133.58460999 -49.18489075]
[-146.61137390 -57.21993256]
[-154.40194702 -70.39435577]
[-155.16612244 -85.68077850]
[-148.72830200 -99.56648254]
[-136.56782532 -108.86064911]
[-121.47909546 -111.42753601]
[-106.92938995 -106.67729187]
[-96.26213074 -95.70149231]
[-91.92857361 -81.02229309]
[-94.92453003 -66.01287079]
[-83.22490692 -56.62570953]
[-71.52528381 -47.23854828]
[-59.82566071 -37.85138702]
[-51.10488892 -47.35860443]
[-41.81955338 -56.31525803]
[-32.00434875 -64.68788147]
[-21.69594193 -72.44519043]
[-10.93284988 -79.55820465]
[0.24471214 -86.00034332]
[11.79498386 -91.74754333]
[23.67481041 -96.77832794]
[35.83980560 -101.07390594]
[48.24451828 -104.61821747]
[60.84260559 -107.39803314]
[73.58699036 -109.40296173]
[86.43006134 -110.62550354]
[99.32382965 -111.06110382]
[112.22013092 -110.70812988]
[125.07077026 -109.56789398]
[137.82774353 -107.64466858]
[150.44337463 -104.94563293]
[162.87054443 -101.48087311]
[175.06282043 -97.26332855]
[186.97462463 -92.30876160]
[198.56149292 -86.63568878]
[209.78010559 -80.26529694]
[218.03239441 -92.79125214]
[218.45785522 -109.18488312]
[232.99508667 -116.77440643]
[246.68943787 -107.75237274]
[245.45330811 -91.39987946]
[230.55834961 -84.53896332]
[222.30606079 -72.01300812]
[231.09721375 -65.41089630]
[239.53266907 -58.35997772]
[247.58950806 -50.87936783]
[255.24589539 -42.98937225]
[262.48104858 -34.71139526]
[269.27529907 -26.06789970]
[275.61029053 -17.08233643]
[281.46878052 -7.77908945]
[286.83486938 1.81660044]
[291.69400024 11.67869568]
[296.03302002 21.78043747]
[299.84011841 32.09441757]
[303.10501099 42.59264755]
[305.81878662 53.24664688]
[307.97409058 64.02749634]
[309.56512451 74.90596008]
[310.58749390 85.85250854]
[311.03848267 96.83744812]
[310.91687012 107.83096313]
[310.22293091 118.80323792]
[308.95861816 129.72448730]
[323.72467041 132.36335754]
[338.95547485 126.28430176]
[351.66622925 136.64617920]
[348.78121948 152.78955078]
[333.26828003 158.10752869]
[321.08581543 147.12940979]
[306.31973267 144.49053955]
[303.54672241 155.82096863]
[300.15194702 166.98088074]
[296.14584351 177.93620300]
[291.54061890 188.65348816]
[286.35031128 199.09996033]
[280.59082031 209.24374390]
[274.27972412 219.05384827]
[267.43630981 228.50032043]
[260.08145142 237.55427551]
[252.23762512 246.18807983]
[243.92878723 254.37535095]
[235.18032837 262.09109497]
[226.01898193 269.31173706]
[216.47270203 276.01522827]
[206.57066345 282.18106079]
[196.34309387 287.79046631]
[185.82125854 292.82623291]
[175.03729248 297.27304077]
[164.02412415 301.11727905]
[152.81538391 304.34719849]
[141.44532776 306.95297241]
[129.94868469 308.92660522]
[118.36055756 310.26205444]
[106.71634674 310.95529175]
[95.05162811 311.00418091]
[83.40202332 310.40853882]
[71.80310822 309.17022705]
[60.29032898 307.29299927]
[48.89883804 304.78262329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 36]
[13 35]
[14 34]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[45 63]
[46 62]
[47 61]
[48 60]
[86 93]
[87 92]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
