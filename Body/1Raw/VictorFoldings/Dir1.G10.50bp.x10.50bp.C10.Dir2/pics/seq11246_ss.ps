%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCUAGGGGGGGGGGGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAxxxxxxxxxxGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[83.77003479 379.73593140]
[70.89675903 371.83306885]
[60.77246475 360.62255859]
[54.21788406 347.01321411]
[51.76436234 332.10830688]
[53.61079788 317.11605835]
[59.60751343 303.25186157]
[69.26837158 291.63958740]
[81.81021881 283.22064209]
[96.21633911 278.67749023]
[95.90428925 263.68072510]
[95.59223175 248.68397522]
[95.28017426 233.68722534]
[94.96811676 218.69046021]
[94.65605927 203.69371033]
[94.34400177 188.69696045]
[94.03195190 173.70021057]
[93.71989441 158.70344543]
[93.40783691 143.70669556]
[93.09577942 128.70994568]
[92.78372192 113.71318817]
[88.47614288 99.34500885]
[80.48622131 86.65007782]
[72.49630737 73.95514679]
[64.50639343 61.26021957]
[51.17968369 68.16423798]
[37.32200241 73.92887878]
[23.03054047 78.51371765]
[8.40555191 81.88658905]
[-6.45038033 84.02382660]
[-21.43305206 84.91045380]
[-36.43736649 84.54024506]
[-51.35808182 82.91578674]
[-66.09053040 80.04849243]
[-80.53138733 75.95845795]
[-94.57933807 70.67438507]
[-108.13586426 64.23332977]
[-121.10586548 56.68047333]
[-133.39836121 48.06879425]
[-144.92713928 38.45870590]
[-155.61132812 27.91760635]
[-165.37597656 16.51944160]
[-174.15260315 4.34416199]
[-181.87963867 -8.52283192]
[-188.50286865 -21.99128532]
[-193.97586060 -35.96672440]
[-198.26022339 -50.35112000]
[-201.32588196 -65.04357910]
[-203.15135193 -79.94103241]
[-203.72381592 -94.93899536]
[-203.03927612 -109.93225861]
[-201.10250854 -124.81565094]
[-197.92712402 -139.48478699]
[-193.53538513 -153.83676147]
[-187.95808411 -167.77090454]
[-181.23437500 -181.18948364]
[-173.41139221 -193.99836731]
[-164.54402161 -206.10771179]
[-154.69444275 -217.43257141]
[-143.93177795 -227.89352417]
[-132.33149719 -237.41717529]
[-119.97497559 -245.93673706]
[-106.94889069 -253.39245605]
[-93.34460449 -259.73199463]
[-79.25754547 -264.91094971]
[-64.78652954 -268.89291382]
[-50.03305817 -271.65002441]
[-35.10062027 -273.16293335]
[-20.09395790 -273.42098999]
[-5.11833191 -272.42239380]
[9.72121239 -270.17419434]
[24.32058334 -266.69210815]
[38.57737732 -262.00057983]
[52.39159012 -256.13253784]
[65.66632080 -249.12910461]
[78.30846405 -241.03942871]
[90.22933197 -231.92025757]
[101.34531403 -221.83554077]
[111.57843781 -210.85601807]
[120.85691833 -199.05871582]
[129.11567688 -186.52638245]
[136.29678345 -173.34692383]
[142.34986877 -159.61277771]
[147.23248291 -145.42028809]
[150.91035461 -130.86900330]
[153.35769653 -116.06100464]
[154.55734253 -101.10014343]
[154.50088501 -86.09136200]
[153.18870544 -71.13995361]
[150.63002014 -56.35077667]
[146.84277344 -41.82757950]
[141.85353088 -27.67222595]
[135.69729614 -13.98401165]
[128.41723633 -0.85895014]
[120.06441498 11.61089516]
[110.69744110 23.33805466]
[100.38200378 34.24026871]
[89.19046021 44.24106979]
[77.20131683 53.27030182]
[85.19123840 65.96523285]
[93.18115234 78.66016388]
[101.17106628 91.35508728]
[108.24710846 83.99783325]
[119.89216614 81.33067322]
[134.70991516 78.99956512]
[149.52767944 76.66846466]
[164.34544373 74.33735657]
[176.75367737 63.61506271]
[192.15261841 69.25460815]
[194.70115662 85.45451355]
[181.77757263 95.54970551]
[166.67654419 89.15512085]
[151.85877991 91.48622131]
[137.04103088 93.81732941]
[122.22326660 96.14842987]
[136.34466553 101.20670319]
[151.16606140 98.89884949]
[165.55703735 103.12968445]
[176.77114868 113.09178162]
[182.66828918 126.88394928]
[182.12298584 141.87403870]
[175.23934937 155.20127869]
[163.33103943 164.32226562]
[148.67071533 167.49630737]
[134.05616760 164.11767578]
[122.27651215 154.83113098]
[115.57981873 141.40898132]
[115.24415588 126.41241455]
[107.78047943 113.40113831]
[108.09253693 128.39788818]
[108.40458679 143.39463806]
[108.71664429 158.39140320]
[109.02870178 173.38815308]
[109.34075928 188.38490295]
[109.65281677 203.38165283]
[109.96487427 218.37841797]
[110.27692413 233.37516785]
[110.58898163 248.37191772]
[110.90103912 263.36868286]
[111.21309662 278.36541748]
[125.79573822 282.30538940]
[138.67694092 290.19531250]
[148.81250000 301.39566040]
[155.38075256 314.99838257]
[157.84924316 329.90084839]
[156.01786804 344.89495850]
[150.03507996 358.76516724]
[140.38589478 370.38711548]
[127.85250854 378.81866455]
[113.45095825 383.37631226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 102]
[23 101]
[24 100]
[25 99]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
