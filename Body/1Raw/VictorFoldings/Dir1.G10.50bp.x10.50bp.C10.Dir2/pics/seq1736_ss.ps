%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUAAAACGGGGGGGGGGCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGxxxxxxxxxxUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACCCCCCCCCCCUAACUAAUAC\
) } def
/len { sequence length } bind def

/coor [
[94.52128601 380.64968872]
[81.30108643 373.37722778]
[70.41428375 362.93020630]
[62.60315704 350.02096558]
[58.40027618 335.52966309]
[58.09220123 320.44430542]
[61.69994354 305.79348755]
[68.97751617 292.57611084]
[79.42872620 281.69332886]
[92.34098816 273.88717651]
[106.83392334 269.68991089]
[106.52186584 254.69314575]
[106.20980835 239.69639587]
[105.89775085 224.69963074]
[105.58570099 209.70288086]
[105.27364349 194.70613098]
[104.96158600 179.70938110]
[104.64952850 164.71261597]
[104.33747101 149.71586609]
[104.02541351 134.71911621]
[91.44622803 133.04165649]
[80.58982086 127.07041168]
[72.82376099 117.80465698]
[69.03549194 106.64021301]
[69.53411865 95.16162109]
[74.03572845 84.91788483]
[81.73072815 77.21340179]
[75.66770935 63.49335098]
[69.60469818 49.77329636]
[63.54168701 36.05324554]
[48.50078583 37.54616928]
[33.75483322 34.32137680]
[20.74524689 26.70697975]
[10.73974514 15.45953560]
[4.70879507 1.68890679]
[3.23149967 -13.25125885]
[6.44001198 -27.89658356]
[14.00782013 -40.81550217]
[25.18292618 -50.74917984]
[19.11991310 -64.46923065]
[13.05690098 -78.18928528]
[6.99388742 -91.90933990]
[0.78848034 -105.56558228]
[-5.72026157 -112.06851196]
[-5.54602957 -119.50593567]
[-11.60904217 -133.22599792]
[-19.73058510 -145.83712769]
[-29.71331215 -157.03288269]
[-39.69603729 -168.22865295]
[-44.01047134 -169.47248840]
[-47.33837509 -171.81687927]
[-49.45099258 -174.80329895]
[-50.29701614 -177.94625854]
[-49.99546432 -180.79519653]
[-59.01299286 -192.78202820]
[-68.03052521 -204.76885986]
[-77.04804993 -216.75569153]
[-92.66796875 -220.41598511]
[-99.41464233 -234.97146606]
[-92.11260223 -249.25640869]
[-76.36334229 -252.31263733]
[-64.24835968 -241.79566956]
[-65.06121826 -225.77322388]
[-56.04368973 -213.78639221]
[-47.02616119 -201.79956055]
[-38.00862885 -189.81271362]
[-28.50027275 -178.21138000]
[-18.51754570 -167.01560974]
[-8.53481865 -155.81985474]
[-10.80515480 -170.64703369]
[-7.66483593 -185.31463623]
[0.47719023 -197.91255188]
[12.56062603 -206.80021667]
[27.01190567 -210.82023621]
[41.94910812 -209.44909668]
[55.42703247 -202.86535645]
[65.69051361 -191.92639160]
[71.40299225 -178.05673218]
[71.82055664 -163.06254578]
[66.88882446 -148.89645386]
[57.25004196 -137.40324402]
[44.15941238 -130.07962036]
[29.32167244 -127.87930298]
[14.66906261 -131.08882141]
[2.11101103 -139.28900146]
[8.17402458 -125.56895447]
[14.37943077 -111.91271210]
[20.09639359 -107.15225220]
[20.71394157 -97.97235107]
[26.77695465 -84.25229645]
[32.83996582 -70.53224945]
[38.90298080 -56.81219101]
[53.77171707 -58.38751984]
[68.41921234 -55.28573990]
[81.40838623 -47.79831696]
[91.46087646 -36.64760590]
[97.58287048 -22.91720963]
[99.16333008 -7.94666576]
[96.03496552 6.79923725]
[88.49182129 19.87377548]
[77.26174164 29.99023056]
[83.32475281 43.71028519]
[89.38776398 57.43033981]
[95.45078278 71.15039062]
[115.37586212 72.94232941]
[130.66897583 87.71896362]
[133.46945190 110.07057190]
[148.17741394 113.01605225]
[162.88537598 115.96153259]
[177.59333801 118.90702057]
[185.72380066 106.09062195]
[197.93737793 97.07990265]
[212.58227539 93.09348297]
[227.67788696 94.67048645]
[241.18266296 101.59764862]
[251.27018738 112.93812561]
[256.57620239 127.15819550]
[256.38311768 142.33473206]
[250.71705627 156.41522217]
[240.34429932 167.49539185]
[226.66766357 174.07675171]
[211.53681946 175.26921082]
[196.99807739 170.91151428]
[185.01770020 161.59298706]
[177.21591187 148.57391357]
[174.64785767 133.61497498]
[159.93989563 130.66949463]
[145.23193359 127.72401428]
[130.52397156 124.77853394]
[119.02217102 134.40705872]
[119.33422852 149.40380859]
[119.64628601 164.40055847]
[119.95833588 179.39732361]
[120.27039337 194.39407349]
[120.58245087 209.39082336]
[120.89450836 224.38757324]
[121.20656586 239.38433838]
[121.51862335 254.38108826]
[121.83067322 269.37783813]
[136.48567200 272.96859741]
[149.71147156 280.23086548]
[160.60633850 290.66946411]
[168.42744446 303.57266235]
[172.64151001 318.06072998]
[172.96122742 333.14584351]
[169.36480713 347.79943848]
[162.09744263 361.02243042]
[151.65464783 371.91326904]
[138.74841309 379.72940063]
[124.25872040 383.93786621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 104]
[28 103]
[29 102]
[30 101]
[39 92]
[40 91]
[41 90]
[42 89]
[43 87]
[45 86]
[46 85]
[47 69]
[48 68]
[49 67]
[54 66]
[55 65]
[56 64]
[57 63]
[107 129]
[108 128]
[109 127]
[110 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
