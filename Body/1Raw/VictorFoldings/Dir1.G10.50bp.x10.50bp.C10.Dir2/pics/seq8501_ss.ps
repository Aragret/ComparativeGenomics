%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAUAAACGGGGGGGGGGCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGxxxxxxxxxxAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGCCCCCCCCCCAUAUAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[88.15290833 536.70971680]
[74.30696869 530.69372559]
[62.59830856 521.16430664]
[53.89578629 508.82861328]
[48.84518433 494.60208130]
[47.82129288 479.54040527]
[50.90008926 464.76126099]
[57.85311127 451.36132812]
[68.16439819 440.33499146]
[81.06877899 432.50048828]
[95.60866547 428.43917847]
[95.60866547 413.43917847]
[95.60866547 398.43917847]
[95.60866547 383.43917847]
[95.60866547 368.43917847]
[95.60866547 353.43917847]
[95.60866547 338.43917847]
[95.60866547 323.43917847]
[95.60866547 308.43917847]
[95.60866547 293.43917847]
[95.60866547 278.43917847]
[86.41210175 272.94711304]
[80.78145599 263.39041138]
[80.40791321 251.92382812]
[85.74597168 241.34060669]
[95.81491852 234.39192200]
[108.36055756 233.07496643]
[104.65439606 218.54003906]
[100.94823456 204.00509644]
[97.24207306 189.47015381]
[93.38491058 174.97456360]
[89.37717438 160.51988220]
[85.36943054 146.06518555]
[81.36169434 131.61050415]
[70.27037811 121.51184845]
[55.50432205 118.87298584]
[40.73826599 116.23412323]
[25.94555855 113.74900055]
[11.12780094 111.41790009]
[-3.97323489 117.81248474]
[-16.89682007 107.71729279]
[-14.34827995 91.51738739]
[1.05066788 85.87783813]
[13.45890522 96.60014343]
[28.27666283 98.93124390]
[35.41918945 96.85037994]
[43.37713242 101.46806335]
[58.14318466 104.10692596]
[72.90924072 106.74579620]
[77.05603790 88.70758057]
[90.69866943 78.71707916]
[89.45178986 63.76899338]
[88.20491791 48.82090759]
[86.95804596 33.87282181]
[85.71116638 18.92473412]
[84.46429443 3.97664666]
[75.11495209 -4.97006798]
[74.41712952 -17.48933411]
[82.19992828 -26.80251312]
[81.26430511 -41.77330399]
[80.32867432 -56.74409485]
[79.39304352 -71.71488953]
[78.45742035 -86.68567657]
[77.52178955 -101.65647125]
[62.82392502 -105.18695068]
[49.82052612 -112.89427948]
[39.66783524 -124.09313202]
[33.26863098 -137.78771973]
[31.19192505 -152.76031494]
[33.62237167 -167.67958069]
[40.34386444 -181.21888733]
[50.75872421 -192.17434692]
[63.94087601 -199.57179260]
[78.71817017 -202.75346375]
[93.77661896 -201.43643188]
[107.77723694 -195.73782349]
[119.47509003 -186.16433716]
[127.83002472 -173.56726074]
[132.09912109 -159.06669617]
[131.90277100 -143.95204163]
[127.25844574 -129.56727600]
[118.57910156 -117.19147491]
[106.63650513 -107.92510223]
[92.49257660 -102.59210205]
[93.42820740 -87.62130737]
[94.36383820 -72.65051270]
[95.29946899 -57.67972565]
[96.23509216 -42.70893097]
[97.17072296 -27.73814201]
[107.65777588 -13.70170212]
[99.41238403 2.72977209]
[100.65925598 17.67785835]
[101.90612793 32.62594604]
[103.15300751 47.57403183]
[104.39987946 62.52212143]
[105.64675140 77.47020721]
[113.95961761 80.70773315]
[120.62565613 86.96476746]
[124.56958008 95.45781708]
[125.07270050 105.03025818]
[121.89795685 114.30941772]
[115.34748840 121.90338898]
[106.24121094 126.60945129]
[95.81638336 127.60276031]
[99.82411957 142.05744934]
[103.83186340 156.51213074]
[107.83959961 170.96682739]
[113.18102264 178.45822144]
[111.77700806 185.76399231]
[115.48316956 200.29893494]
[119.18933105 214.83387756]
[122.89549255 229.36880493]
[133.22270203 240.24763489]
[147.54528809 244.70445251]
[161.41264343 237.60978699]
[175.87431335 242.33366394]
[182.55253601 255.59777832]
[196.87512207 260.05459595]
[212.74429321 255.91920471]
[224.06602478 267.78302002]
[219.19349670 283.44158936]
[203.13914490 286.78668213]
[192.41830444 274.37719727]
[178.09571838 269.92037964]
[165.07046509 277.05328369]
[150.48182678 272.73748779]
[143.08848572 259.02703857]
[128.76588440 254.57023621]
[123.50238800 270.43423462]
[110.60866547 278.43917847]
[110.60866547 293.43917847]
[110.60866547 308.43917847]
[110.60866547 323.43917847]
[110.60866547 338.43917847]
[110.60866547 353.43917847]
[110.60866547 368.43917847]
[110.60866547 383.43917847]
[110.60866547 398.43917847]
[110.60866547 413.43917847]
[110.60866547 428.43917847]
[125.14855194 432.50048828]
[138.05293274 440.33499146]
[148.36421204 451.36132812]
[155.31724548 464.76126099]
[158.39604187 479.54040527]
[157.37214661 494.60208130]
[152.32154846 508.82861328]
[143.61901855 521.16430664]
[131.91035461 530.69372559]
[118.06442261 536.70971680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 112]
[28 111]
[29 110]
[30 109]
[31 107]
[32 106]
[33 105]
[34 104]
[35 49]
[36 48]
[37 47]
[38 45]
[39 44]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[113 128]
[114 127]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
