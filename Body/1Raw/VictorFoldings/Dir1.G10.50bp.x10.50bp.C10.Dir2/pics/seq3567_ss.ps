%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUGAACCGGGGGGGGGGCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUxxxxxxxxxxUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAUUAACC\
) } def
/len { sequence length } bind def

/coor [
[-20.80574417 261.67349243]
[-30.82369423 253.67990112]
[-40.31408310 245.06655884]
[-49.23864746 235.86822510]
[-57.56138992 226.12199402]
[-65.24874878 215.86717224]
[-72.26972961 205.14509583]
[-78.59601593 193.99900818]
[-92.12020111 200.48716736]
[-105.64439392 206.97534180]
[-119.16858673 213.46350098]
[-132.69277954 219.95166016]
[-146.21696472 226.43983459]
[-159.74114990 232.92799377]
[-173.26535034 239.41616821]
[-186.78953552 245.90432739]
[-199.72758484 253.49423218]
[-211.98995972 262.13336182]
[-224.25231934 270.77246094]
[-236.51469421 279.41159058]
[-240.66058350 294.90969849]
[-255.41949463 301.19891357]
[-269.46963501 293.45468140]
[-272.03295898 277.61773682]
[-261.14309692 265.83679199]
[-245.15380859 267.14923096]
[-232.89144897 258.51010132]
[-220.62907410 249.87098694]
[-208.36669922 241.23187256]
[-223.21867371 239.12976074]
[-234.10958862 228.81529236]
[-237.01544189 214.09945679]
[-230.86259460 200.41944885]
[-217.92440796 192.82977295]
[-202.98127747 194.13465881]
[-191.55438232 203.85197449]
[-187.86575317 218.39135742]
[-193.27769470 232.38014221]
[-179.75350952 225.89196777]
[-166.22932434 219.40380859]
[-152.70512390 212.91564941]
[-139.18093872 206.42747498]
[-125.65674591 199.93931580]
[-112.13256073 193.45114136]
[-98.60836792 186.96298218]
[-85.08418274 180.47482300]
[-93.30808258 158.00288391]
[-98.81443787 134.71554565]
[-101.52583313 110.94016266]
[-101.40415955 87.01098633]
[-98.45111847 63.26440811]
[-92.70822906 40.03426743]
[-84.25621796 17.64712906]
[-73.21392059 -3.58228040]
[-59.73655319 -23.35551834]
[-44.01359177 -41.39461136]
[-26.26606750 -57.44595718]
[-6.74348259 -71.28391266]
[-14.19839287 -84.30022430]
[-21.65330315 -97.31652832]
[-29.10821342 -110.33283997]
[-42.22690201 -121.07231903]
[-35.53874588 -136.65130615]
[-18.71712303 -134.53721619]
[-16.09190369 -117.78775024]
[-8.63699436 -104.77143860]
[-1.18208361 -91.75513458]
[6.27282667 -78.73882294]
[16.29894638 -83.64771271]
[26.58114815 -87.99473572]
[37.08797455 -91.76659393]
[47.78728104 -94.95174408]
[58.64633179 -97.54043579]
[69.63190460 -99.52475739]
[80.71038818 -100.89863586]
[91.84788513 -101.65785980]
[103.01032257 -101.80011749]
[114.16355133 -101.32496643]
[125.27345276 -100.23387146]
[136.30603027 -98.53015137]
[147.22752380 -96.21903992]
[158.00451660 -93.30759430]
[168.60406494 -89.80472565]
[178.99369812 -85.72114563]
[189.14166260 -81.06935883]
[199.01690674 -75.86359406]
[208.58920288 -70.11976624]
[217.82926941 -63.85546875]
[226.70883179 -57.08985138]
[235.20072937 -49.84362030]
[243.27899170 -42.13894272]
[250.91889954 -33.99939346]
[258.09704590 -25.44987488]
[264.79153442 -16.51654243]
[270.98181152 -7.22672796]
[276.64898682 2.39114523]
[281.77569580 12.30765247]
[286.34625244 22.49245262]
[290.34671021 32.91438675]
[304.66931152 28.45757294]
[318.99191284 24.00075722]
[333.31451416 19.54394150]
[339.18566895 5.05037832]
[353.02368164 -2.23271227]
[368.29464722 1.13352239]
[377.78808594 13.55964947]
[377.02148438 29.17843056]
[366.35681152 40.61515427]
[350.82958984 42.46975327]
[337.77133179 33.86653900]
[323.44873047 38.32335281]
[309.12612915 42.78017044]
[294.80352783 47.23698425]
[297.75964355 59.70768738]
[299.91830444 72.34087372]
[301.27075195 85.08559418]
[301.81155396 97.89046478]
[301.53851318 110.70383453]
[300.45278931 123.47404480]
[298.55868530 136.14959717]
[295.86389160 148.67936707]
[292.37927246 161.01283264]
[288.11886597 173.10025024]
[283.09982300 184.89289856]
[277.34243774 196.34320068]
[270.86987305 207.40499878]
[263.70828247 218.03366089]
[255.88652039 228.18635559]
[247.43612671 237.82212830]
[238.39118958 246.90209961]
[228.78817749 255.38969421]
[218.66580200 263.25064087]
[208.06491089 270.45330811]
[197.02822876 276.96856689]
[185.60026550 282.77020264]
[173.82711792 287.83477783]
[161.75625610 292.14190674]
[149.43635559 295.67422485]
[136.91709900 298.41741943]
[124.24897003 300.36050415]
[111.48305511 301.49563599]
[98.67082977 301.81820679]
[85.86396790 301.32690430]
[73.11411285 300.02374268]
[60.47267532 297.91397095]
[47.99063492 295.00610352]
[35.71833038 291.31182861]
[23.70524406 286.84609985]
[11.99982548 281.62686157]
[0.64927590 275.67523193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 29]
[18 28]
[19 27]
[20 26]
[58 68]
[59 67]
[60 66]
[61 65]
[99 113]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
