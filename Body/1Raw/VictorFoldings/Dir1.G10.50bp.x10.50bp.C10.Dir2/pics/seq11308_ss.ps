%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCCCGAGGGGGGGGGGGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACxxxxxxxxxxCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCCCCCCCCCCCAUUCCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[94.35380554 614.97985840]
[80.50786591 608.96380615]
[68.79920197 599.43438721]
[60.09667969 587.09875488]
[55.04607773 572.87219238]
[54.02218628 557.81054688]
[57.10098648 543.03137207]
[64.05400848 529.63140869]
[74.36529541 518.60510254]
[87.26967621 510.77059937]
[101.80956268 506.70928955]
[101.80956268 491.70928955]
[101.80956268 476.70928955]
[101.80956268 461.70928955]
[101.80956268 446.70928955]
[101.80956268 431.70928955]
[101.80956268 416.70928955]
[101.80956268 401.70928955]
[101.80956268 386.70928955]
[101.80956268 371.70928955]
[101.80956268 356.70928955]
[87.77268219 354.16229248]
[74.39704132 349.19079590]
[62.09799957 341.94790649]
[51.25775909 332.65716553]
[42.21342468 321.60589600]
[35.24654770 309.13607788]
[30.57435799 295.63397217]
[28.34298706 281.51803589]
[28.62290192 267.22598267]
[31.40668106 253.20118713]
[36.60919952 239.87899780]
[44.07023239 227.67317200]
[53.55940247 216.96298218]
[64.78327179 208.08155823]
[77.39443207 201.30540466]
[91.00225067 196.84580994]
[105.18496704 194.84236145]
[105.80894470 179.85534668]
[106.43292236 164.86833191]
[107.05690002 149.88131714]
[107.68087769 134.89430237]
[108.30485535 119.90727997]
[84.96828461 111.70972443]
[86.75826263 90.09121704]
[80.12976837 76.63525391]
[70.50123596 65.13344574]
[58.42124939 56.24110031]
[46.34126282 47.34875107]
[34.26127243 38.45639801]
[18.24814987 39.43589020]
[7.60572338 27.43096161]
[10.49795437 11.65076637]
[24.70617104 4.20052052]
[39.33104324 10.79541492]
[43.15362167 26.37641144]
[55.23361206 35.26876068]
[67.31359863 44.16110992]
[79.39358521 53.05345917]
[73.67167664 39.18768311]
[71.50775146 24.34459114]
[73.03276062 9.42231369]
[78.15441132 -4.67622042]
[86.56281281 -17.09792709]
[97.74917603 -27.09118652]
[111.03663635 -34.05132294]
[125.62117767 -37.55718231]
[140.62031555 -37.39663315]
[155.12648010 -33.57938766]
[168.26191711 -26.33642578]
[179.23179626 -16.10600662]
[187.37239075 -3.50716114]
[192.19108582 10.69777298]
[193.39631653 25.64927483]
[190.91517639 40.44264984]
[184.89776611 54.18276596]
[175.70822144 66.03823853]
[163.90255737 75.29169464]
[150.19514465 81.38323212]
[135.41539001 83.94425201]
[120.45759583 82.81979370]
[106.22684479 78.07789612]
[93.58573151 70.00675201]
[100.21422577 83.46271515]
[112.01990509 85.21514130]
[121.05713654 95.32372284]
[132.94952393 86.18199158]
[144.84190369 77.04026031]
[129.91532898 75.55779266]
[118.60478973 65.70529938]
[115.08929443 51.12307358]
[120.66773987 37.19896317]
[133.27900696 29.07764244]
[148.26348877 29.75978470]
[160.08471680 38.99334717]
[164.37496948 53.36671448]
[159.54962158 67.56851196]
[172.79220581 60.52337265]
[186.03479004 53.47823715]
[194.25814819 39.28991318]
[210.65458679 39.58795166]
[218.35685730 54.06575775]
[209.44154358 67.82981110]
[193.07992554 66.72082520]
[179.83734131 73.76596069]
[166.59475708 80.81109619]
[153.98362732 88.93264008]
[142.09124756 98.07437134]
[130.19886780 107.21610260]
[123.29187012 120.53125763]
[122.66789246 135.51828003]
[122.04391479 150.50529480]
[121.41993713 165.49230957]
[120.79595947 180.47932434]
[120.17198181 195.46633911]
[135.52525330 199.10295105]
[149.88322449 205.63406372]
[162.70610046 214.81224060]
[173.51217651 226.29058838]
[181.89595032 239.63580322]
[187.54325867 254.34461975]
[190.24316406 269.86267090]
[189.89570618 285.60556030]
[186.51570129 300.98065186]
[180.23208618 315.40951538]
[171.28297424 328.34973145]
[160.00669861 339.31512451]
[146.82893372 347.89419556]
[132.24668884 353.76535034]
[116.80956268 356.70928955]
[116.80956268 371.70928955]
[116.80956268 386.70928955]
[116.80956268 401.70928955]
[116.80956268 416.70928955]
[116.80956268 431.70928955]
[116.80956268 446.70928955]
[116.80956268 461.70928955]
[116.80956268 476.70928955]
[116.80956268 491.70928955]
[116.80956268 506.70928955]
[131.34944153 510.77059937]
[144.25382996 518.60510254]
[154.56510925 529.63140869]
[161.51812744 543.03137207]
[164.59693909 557.81054688]
[163.57304382 572.87219238]
[158.52244568 587.09875488]
[149.81991577 599.43438721]
[138.11125183 608.96380615]
[124.26531219 614.97985840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[45 84]
[46 83]
[47 59]
[48 58]
[49 57]
[50 56]
[86 109]
[87 108]
[88 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
