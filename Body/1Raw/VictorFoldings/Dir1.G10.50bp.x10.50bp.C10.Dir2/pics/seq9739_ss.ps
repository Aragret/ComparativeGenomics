%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUGCUAAGGGGGGGGGGAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAxxxxxxxxxxUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCCCCCCCCCCCAAAGCUAA\
) } def
/len { sequence length } bind def

/coor [
[85.56267548 469.36370850]
[72.34247589 462.09124756]
[61.45567322 451.64422607]
[53.64454269 438.73498535]
[49.44166183 424.24368286]
[49.13359070 409.15832520]
[52.74133301 394.50750732]
[60.01890564 381.29013062]
[70.47011566 370.40734863]
[83.38237762 362.60119629]
[97.87531281 358.40393066]
[97.56325531 343.40716553]
[97.25119781 328.41040039]
[96.93914032 313.41366577]
[96.62708282 298.41690063]
[96.31503296 283.42016602]
[96.00297546 268.42340088]
[95.69091797 253.42665100]
[95.37886047 238.42988586]
[95.06680298 223.43313599]
[84.17359924 213.33988953]
[83.64349365 198.13549805]
[94.30407715 186.77813721]
[93.99201965 171.78138733]
[93.67996216 156.78462219]
[93.36791229 141.78787231]
[93.05585480 126.79112244]
[73.66040802 108.49771118]
[78.70803070 82.31844330]
[70.19693756 69.96687317]
[61.68585205 57.61530304]
[53.17475891 45.26372910]
[39.97618484 52.42122269]
[26.09157944 58.13522339]
[11.67826462 62.34098434]
[-3.10044670 64.99085236]
[-18.07709885 66.05480194]
[-33.08199692 65.52077484]
[-47.94511795 63.39482880]
[-62.49805832 59.70104599]
[-76.57592010 54.48128128]
[-90.01918793 47.79467773]
[-102.67554474 39.71700668]
[-114.40157318 30.33978462]
[-125.06442261 19.76926804]
[-134.54325867 8.12522888]
[-142.73069763 -4.46039772]
[-149.53395081 -17.84500694]
[-154.87594604 -31.87694168]
[-158.69615173 -46.39720917]
[-160.95127869 -61.24128342]
[-161.61576843 -76.24096680]
[-160.68211365 -91.22630310]
[-158.16087341 -106.02750397]
[-154.08061218 -120.47684479]
[-148.48757935 -134.41061401]
[-141.44512939 -147.67094421]
[-133.03308105 -160.10755920]
[-123.34672546 -171.57955933]
[-112.49584198 -181.95695496]
[-100.60335541 -191.12214661]
[-87.80403137 -198.97131348]
[-74.24288940 -205.41551208]
[-60.07359314 -210.38169861]
[-45.45668793 -213.81362915]
[-30.55779457 -215.67242432]
[-15.54572964 -215.93699646]
[-0.59059078 -214.60435486]
[14.13816833 -211.68960571]
[28.47365952 -207.22576904]
[42.25344849 -201.26342773]
[55.32140732 -193.87014771]
[67.52945709 -185.12968445]
[78.73927307 -175.14109802]
[88.82384491 -164.01753235]
[97.66889954 -151.88505554]
[105.17421722 -138.88111877]
[111.25476074 -125.15308380]
[115.84163666 -110.85648346]
[118.88285828 -96.15332031]
[120.34397888 -81.21018982]
[120.20843506 -66.19640350]
[118.47776794 -51.28208542]
[115.17158508 -36.63622284]
[110.32734680 -22.42476845]
[103.99994659 -8.80874538]
[96.26107025 4.05756521]
[87.19841003 16.02837753]
[76.91465759 26.96805382]
[65.52633667 36.75263977]
[74.03742218 49.10420990]
[82.54851532 61.45578384]
[91.05960083 73.80735779]
[96.63159943 72.52930450]
[102.34731293 72.42327881]
[107.96287537 73.49381256]
[113.23870087 75.69522095]
[117.94969940 78.93359375]
[121.89488220 83.07075500]
[124.90592957 87.93019867]
[139.67198181 85.29133606]
[154.43803406 82.65247345]
[168.19671631 70.45908356]
[184.45783997 76.98410797]
[199.16580200 74.03862762]
[213.87376404 71.09314728]
[225.82522583 59.86396408]
[241.44543457 64.85804749]
[244.66566467 80.93791962]
[232.17321777 91.56198120]
[216.81924438 85.80110931]
[202.11128235 88.74658966]
[187.40332031 91.69207001]
[180.40461731 101.60798645]
[168.12689209 104.15288544]
[157.07690430 97.41852570]
[142.31085205 100.05738831]
[127.54479218 102.69625092]
[126.15447998 109.05142975]
[123.31912231 114.90650940]
[119.19535828 119.93798828]
[114.01103973 123.86788177]
[108.05260468 126.47906494]
[108.36466217 141.47581482]
[108.67671967 156.47256470]
[108.98877716 171.46932983]
[109.30083466 186.46607971]
[120.42463684 197.37014771]
[120.52747345 212.58343506]
[110.06356049 223.12107849]
[110.37561798 238.11784363]
[110.68766785 253.11459351]
[110.99972534 268.11135864]
[111.31178284 283.10809326]
[111.62384033 298.10485840]
[111.93589783 313.10159302]
[112.24795532 328.09835815]
[112.56000519 343.09512329]
[112.87206268 358.09185791]
[127.52705383 361.68264771]
[140.75286865 368.94488525]
[151.64773560 379.38348389]
[159.46882629 392.28671265]
[163.68290710 406.77474976]
[164.00262451 421.85986328]
[160.40618896 436.51345825]
[153.13883972 449.73648071]
[142.69602966 460.62731934]
[129.78979492 468.44342041]
[115.30010986 472.65188599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[29 93]
[30 92]
[31 91]
[32 90]
[100 118]
[101 117]
[102 116]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
