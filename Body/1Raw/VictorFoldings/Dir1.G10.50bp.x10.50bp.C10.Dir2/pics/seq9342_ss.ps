%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCUUACGGGGGGGGGGUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAxxxxxxxxxxACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCCCCCCCCCCCUCGCCUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 401.26599121]
[71.01555634 395.71298218]
[58.81560135 386.84667969]
[49.20452881 375.22436523]
[42.78650284 361.57666016]
[39.96496582 346.76147461]
[40.91728210 331.71008301]
[45.58358765 317.36865234]
[53.67055511 304.63870239]
[64.66983032 294.32043457]
[77.88998413 287.06246948]
[92.50000000 283.32101440]
[92.50000000 268.32101440]
[92.50000000 253.32102966]
[92.50000000 238.32102966]
[92.50000000 223.32102966]
[92.50000000 208.32102966]
[92.50000000 193.32102966]
[92.50000000 178.32102966]
[92.50000000 163.32102966]
[92.50000000 148.32102966]
[92.50000000 133.32102966]
[83.83932495 134.10130310]
[74.54570770 132.54740906]
[65.25409698 128.43991089]
[51.00740051 133.13371277]
[36.76070786 137.82751465]
[22.51401711 142.52131653]
[12.00052166 155.10696411]
[-4.10711575 152.02864075]
[-9.23873806 136.45306396]
[1.88462842 124.40305328]
[17.82021713 128.27462769]
[32.06690979 123.58082581]
[46.31360245 118.88702393]
[60.56029510 114.19322205]
[60.71428299 106.69480133]
[45.71744919 106.38657379]
[46.02592468 91.38974762]
[61.02225876 91.69796753]
[61.17624664 84.19954681]
[47.13427353 78.92480469]
[33.09229660 73.65006256]
[19.55995750 81.48650360]
[4.16541147 78.74024200]
[-5.82250929 66.70797729]
[-5.68781328 51.07097244]
[4.50589991 39.21254730]
[19.94547081 36.73188782]
[33.34080505 44.80028534]
[38.36703873 59.60808563]
[52.40901184 64.88282776]
[66.45098877 70.15756989]
[94.38294983 55.17475510]
[125.45595551 62.34703064]
[128.51434326 47.66213608]
[131.57273865 32.97723770]
[134.63113403 18.29233932]
[128.44937134 0.97713286]
[140.57139587 -11.67596149]
[143.32765198 -26.42055893]
[146.08389282 -41.16515350]
[148.84013367 -55.90975189]
[151.59637451 -70.65435028]
[144.95079041 -81.75569153]
[147.59127808 -94.01126862]
[157.55943298 -100.93209076]
[160.61782837 -115.61698914]
[163.67622375 -130.30187988]
[150.07846069 -136.81065369]
[138.43391418 -146.38499451]
[129.41960144 -158.46827698]
[123.55957794 -172.35797119]
[121.19455719 -187.24655151]
[122.46202850 -202.26843262]
[127.28831482 -216.55026245]
[135.39280701 -229.26170349]
[146.30433655 -239.66371155]
[159.38850403 -247.15156555]
[173.88462830 -251.28990173]
[188.94992065 -251.83815002]
[203.70849609 -248.76440430]
[217.30230713 -242.24739075]
[228.94105530 -232.66598511]
[237.94804382 -220.57725525]
[243.79963684 -206.68400574]
[246.15563965 -191.79399109]
[244.87905884 -176.77288818]
[240.04411316 -162.49398804]
[231.93191528 -149.78747559]
[221.01408386 -139.39205933]
[207.92536926 -131.91215515]
[193.42674255 -127.78259277]
[178.36112976 -127.24349213]
[175.30273438 -112.55859375]
[172.24433899 -97.87369537]
[178.64340210 -81.56123352]
[166.34097290 -67.89810181]
[163.58473206 -53.15350723]
[160.82849121 -38.40891266]
[158.07223511 -23.66431618]
[155.31599426 -8.91971874]
[161.90307617 1.27206969]
[159.68423462 13.61095333]
[149.31604004 21.35073471]
[146.25764465 36.03563309]
[143.19924927 50.72053146]
[140.14085388 65.40542603]
[149.66418457 76.99447632]
[164.66339111 76.84047699]
[173.27388000 73.60698700]
[179.97138977 76.84047699]
[194.97059631 76.99447632]
[210.87097168 71.11106873]
[220.92611694 84.76136017]
[210.59281921 98.20231628]
[194.81660461 91.99368286]
[179.81739807 91.83969116]
[164.81739807 91.83969116]
[149.81819153 91.99368286]
[146.75978088 106.67858124]
[160.45040894 112.80775452]
[174.14103699 118.93692780]
[191.06814575 119.89044189]
[194.83779907 136.41999817]
[179.99777222 144.61814880]
[168.01187134 132.62756348]
[154.32124329 126.49838257]
[140.63061523 120.36920929]
[124.52109528 131.35223389]
[107.50000000 133.32102966]
[107.50000000 148.32102966]
[107.50000000 163.32102966]
[107.50000000 178.32102966]
[107.50000000 193.32102966]
[107.50000000 208.32102966]
[107.50000000 223.32102966]
[107.50000000 238.32102966]
[107.50000000 253.32102966]
[107.50000000 268.32101440]
[107.50000000 283.32101440]
[122.11001587 287.06246948]
[135.33016968 294.32043457]
[146.32945251 304.63870239]
[154.41641235 317.36865234]
[159.08271790 331.71008301]
[160.03503418 346.76147461]
[157.21350098 361.57666016]
[150.79547119 375.22436523]
[141.18440247 386.84667969]
[128.98443604 395.71298218]
[114.96250153 401.26599121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 36]
[26 35]
[27 34]
[28 33]
[41 53]
[42 52]
[43 51]
[55 108]
[56 107]
[57 106]
[58 105]
[60 102]
[61 101]
[62 100]
[63 99]
[64 98]
[67 96]
[68 95]
[69 94]
[109 120]
[110 119]
[112 118]
[113 117]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
