%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCCUCAAGGGGGGGGGGCCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAxxxxxxxxxxUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUCCCCCCCCCCGGCGCCUCAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.05718994]
[71.19830322 359.04116821]
[59.48964310 349.51174927]
[50.78712082 337.17608643]
[45.73651886 322.94955444]
[44.71262741 307.88787842]
[47.79142761 293.10870361]
[54.74444962 279.70880127]
[65.05573273 268.68246460]
[77.96011353 260.84796143]
[92.50000000 256.78665161]
[92.50000000 241.78663635]
[92.50000000 226.78663635]
[92.50000000 211.78663635]
[92.50000000 196.78663635]
[92.50000000 181.78663635]
[92.50000000 166.78663635]
[92.50000000 151.78663635]
[92.50000000 136.78663635]
[92.50000000 121.78663635]
[73.97483826 103.33293152]
[83.71501160 75.48144531]
[68.73529816 74.70159912]
[79.11713409 85.52830505]
[81.31134033 100.36695099]
[74.50719452 113.73496246]
[61.21870041 120.69311523]
[46.35568619 118.67051697]
[35.40974808 108.41447449]
[32.42518234 93.71439362]
[38.50473404 80.00166321]
[51.40127182 72.34305573]
[36.75777054 69.09222412]
[30.24607468 70.73700714]
[24.73252106 69.05413818]
[21.57873535 65.38955688]
[7.08313847 61.53240204]
[-7.41245842 57.67523956]
[-17.72396278 68.98592377]
[-32.11463165 74.19813538]
[-47.27760315 72.11415100]
[-59.72852707 63.21285629]
[-66.60627747 49.53970337]
[-66.33039856 34.23668289]
[-58.96428680 20.82031441]
[-46.20061493 12.37358284]
[-30.97238350 10.83748531]
[-16.77893066 16.56500626]
[-6.88180685 28.24000168]
[-3.55529881 43.17964554]
[10.94029808 47.03680420]
[25.43589401 50.89396286]
[40.00859833 54.44872665]
[54.65209961 57.69955063]
[69.51514435 59.72188568]
[84.49485779 60.50173187]
[95.89588165 50.75407791]
[97.45346069 35.83516693]
[99.01103973 20.91625404]
[92.74855804 6.38725233]
[101.76561737 -5.46778631]
[103.32319641 -20.38669777]
[104.88078308 -35.30561066]
[106.43836212 -50.22452164]
[107.99594116 -65.14343262]
[101.73345947 -79.67243958]
[110.75051880 -91.52747345]
[112.30809784 -106.44638824]
[113.71040344 -121.38069916]
[114.95727539 -136.32878113]
[101.42960358 -143.26206970]
[91.58872223 -154.84764099]
[86.93530273 -169.31878662]
[88.17894745 -184.46876526]
[95.13002014 -197.98730469]
[106.72853088 -207.81294250]
[121.20578766 -212.44732666]
[136.35411072 -211.18374634]
[149.86349487 -204.21488953]
[159.67387390 -192.60346985]
[164.28919983 -178.12013245]
[163.00569153 -162.97348022]
[156.01908875 -149.47326660]
[144.39476013 -139.67819214]
[129.90536499 -135.08190918]
[128.65849304 -120.13381958]
[131.25347900 -113.16161346]
[127.22701263 -104.88880920]
[125.66943359 -89.96989441]
[132.04331970 -76.50799561]
[122.91485596 -63.58585358]
[121.35727692 -48.66694260]
[119.79969025 -33.74803162]
[118.24211121 -18.82911682]
[116.68453217 -3.91020536]
[123.05841827 9.55169582]
[113.92995453 22.47383499]
[112.37237549 37.39274597]
[110.81479645 52.31166077]
[120.68051910 63.61066437]
[135.67321777 64.07870483]
[150.66590881 64.54674530]
[165.65859985 65.01479340]
[180.65536499 65.32685089]
[195.65454102 65.48288727]
[210.65373230 65.63892365]
[225.65292358 65.79496002]
[232.37181091 52.09024048]
[244.37687683 42.66468430]
[259.28451538 39.38974380]
[274.13479614 42.91565704]
[285.97918701 52.54235458]
[292.46597290 66.35844421]
[292.30718994 81.62073517]
[285.53439331 95.29888916]
[273.49227905 104.67709351]
[258.57186890 107.89331055]
[243.73559570 104.30893707]
[231.92921448 94.63567352]
[225.49688721 80.79414368]
[210.49769592 80.63810730]
[195.49850464 80.48207092]
[180.49932861 80.32603455]
[173.73439026 83.42140961]
[165.19056702 80.00748444]
[150.19786072 79.53944397]
[135.20516968 79.07140350]
[120.21247101 78.60336304]
[127.07458496 96.47461700]
[121.39543915 113.26194763]
[107.50000000 121.78663635]
[107.50000000 136.78663635]
[107.50000000 151.78663635]
[107.50000000 166.78663635]
[107.50000000 181.78663635]
[107.50000000 196.78663635]
[107.50000000 211.78663635]
[107.50000000 226.78663635]
[107.50000000 241.78663635]
[107.50000000 256.78665161]
[122.03988647 260.84796143]
[134.94427490 268.68246460]
[145.25555420 279.70880127]
[152.20857239 293.10870361]
[155.28736877 307.88787842]
[154.26348877 322.94955444]
[149.21287537 337.17608643]
[140.51036072 349.51174927]
[128.80169678 359.04116821]
[114.95575714 365.05718994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 56]
[23 55]
[32 54]
[33 53]
[36 52]
[37 51]
[38 50]
[57 99]
[58 98]
[59 97]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[67 89]
[68 88]
[69 86]
[70 85]
[100 128]
[101 127]
[102 126]
[103 125]
[104 123]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
