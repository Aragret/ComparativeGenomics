%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAGCAUGGGGGGGGGGUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCxxxxxxxxxxAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUCCCCCCCCCCACCCUAGCAU\
) } def
/len { sequence length } bind def

/coor [
[104.93945312 362.46044922]
[91.09351349 356.44442749]
[79.38484955 346.91500854]
[70.68232727 334.57934570]
[65.63172913 320.35281372]
[64.60783386 305.29113770]
[67.68663025 290.51199341]
[74.63965607 277.11206055]
[84.95094299 266.08572388]
[97.85532379 258.25122070]
[112.39521027 254.18989563]
[112.39521027 239.18989563]
[112.39521027 224.18989563]
[112.39521027 209.18989563]
[112.39521027 194.18989563]
[112.39521027 179.18989563]
[112.39521027 164.18989563]
[112.39521027 149.18989563]
[112.39521027 134.18989563]
[112.39521027 119.18989563]
[94.12020874 119.91954803]
[82.95600891 107.67771149]
[67.95681763 107.83374786]
[58.35361099 116.50740814]
[45.81675339 116.29255676]
[37.09448242 107.85280609]
[22.09529495 107.69676971]
[7.09610701 107.54073334]
[-7.90308142 107.38469696]
[-16.58152771 110.44025421]
[-23.21183968 107.06614685]
[-38.20453644 106.59810638]
[-53.19723129 106.13006592]
[-68.18992615 105.66201782]
[-77.59111786 118.00695038]
[-92.46265411 122.43606567]
[-107.08612061 117.24629211]
[-115.83850098 104.43318939]
[-115.35433197 88.92366791]
[-105.81977081 76.68145752]
[-90.90106201 72.41392517]
[-76.33475494 77.76203918]
[-67.72188568 90.66932678]
[-52.72919083 91.13736725]
[-37.73649597 91.60540771]
[-22.74379921 92.07344818]
[-7.74704456 92.38550568]
[7.25214386 92.54154205]
[22.25133133 92.69757843]
[37.25051880 92.85361481]
[52.01273727 83.41556549]
[67.80078125 92.83456421]
[82.79997253 92.67852783]
[87.93688202 84.64884186]
[96.68295288 79.91803741]
[107.03743744 80.01870728]
[116.40727234 85.32186890]
[122.25635529 94.84752655]
[132.69616699 84.07672119]
[143.13598633 73.30590820]
[144.06263733 68.91241455]
[146.15867615 65.42276764]
[148.98348999 63.09847641]
[152.05656433 62.02603149]
[154.91989136 62.11951447]
[166.21890259 52.25379181]
[177.51789856 42.38806915]
[169.72257996 28.59224892]
[164.93640137 13.49219608]
[163.36231995 -2.26435375]
[165.06556702 -18.00198936]
[169.97090149 -33.04657364]
[177.86599731 -46.75412369]
[188.41061401 -58.53836441]
[201.15122986 -67.89582825]
[215.54054260 -74.42733765]
[230.96104431 -77.85505676]
[246.75144958 -78.03428650]
[262.23507690 -74.95958710]
[276.74893188 -68.76491547]
[289.67187500 -59.71778870]
[300.55068970 -70.04499054]
[311.42953491 -80.37220001]
[322.30834961 -90.69940186]
[333.18716431 -101.02660370]
[344.06600952 -111.35381317]
[354.94482422 -121.68101501]
[365.82366943 -132.00822449]
[360.69790649 -146.34860229]
[361.85449219 -161.53352356]
[369.09310913 -174.93212891]
[381.15954590 -184.22302246]
[395.96328735 -187.79649353]
[410.93945312 -185.03341675]
[423.49331665 -176.41250610]
[431.44989014 -163.42739868]
[433.43063354 -148.32785034]
[429.09234619 -133.72993469]
[419.18670654 -122.16282654]
[405.42987061 -115.63059998]
[390.20535278 -115.26501465]
[376.15084839 -121.12939453]
[365.27203369 -110.80219269]
[354.39321899 -100.47498322]
[343.51437378 -90.14778137]
[332.63555908 -79.82057953]
[321.75674438 -69.49337006]
[310.87789917 -59.16616821]
[299.99908447 -48.83896255]
[307.65270996 -36.87409210]
[312.95465088 -23.69274902]
[315.71920776 -9.75225544]
[315.84878540 4.46341419]
[313.33728027 18.46043015]
[308.27038574 31.75226021]
[300.82266235 43.87658691]
[291.25143433 54.41138077]
[279.88806152 62.98960495]
[267.12631226 69.31198120]
[253.40884399 73.15744781]
[239.21173096 74.39087677]
[225.02807617 72.96784210]
[211.35075378 68.93618774]
[198.65534973 62.43444824]
[187.38362122 53.68707275]
[176.08462524 63.55279541]
[164.78561401 73.41851807]
[153.90678406 83.74572754]
[143.46697998 94.51653290]
[133.02716064 105.28733826]
[127.39521027 119.18989563]
[127.39521027 134.18989563]
[127.39521027 149.18989563]
[127.39521027 164.18989563]
[127.39521027 179.18989563]
[127.39521027 194.18989563]
[127.39521027 209.18989563]
[127.39521027 224.18989563]
[127.39521027 239.18989563]
[127.39521027 254.18989563]
[141.93508911 258.25122070]
[154.83947754 266.08572388]
[165.15075684 277.11206055]
[172.10377502 290.51199341]
[175.18258667 305.29113770]
[174.15869141 320.35281372]
[169.10809326 334.57934570]
[160.40556335 346.91500854]
[148.69689941 356.44442749]
[134.85096741 362.46044922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 53]
[23 52]
[26 50]
[27 49]
[28 48]
[29 47]
[31 46]
[32 45]
[33 44]
[34 43]
[58 130]
[59 129]
[60 128]
[65 127]
[66 126]
[67 125]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[88 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
