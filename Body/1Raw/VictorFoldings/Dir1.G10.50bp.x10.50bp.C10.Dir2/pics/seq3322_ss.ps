%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCUCAUUGGGGGGGGGGGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUxxxxxxxxxxUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAACCCCCCCCCCUACUCAUCAUU\
) } def
/len { sequence length } bind def

/coor [
[86.29895020 388.29928589]
[71.73908997 384.39108276]
[58.53794479 377.11145020]
[47.46301270 366.88357544]
[39.15817642 354.30212402]
[34.10626221 340.09854126]
[32.60098648 325.09863281]
[34.72986221 310.17443848]
[40.36912155 296.19366455]
[49.19090271 283.96911621]
[60.68232346 274.21151733]
[74.17527771 267.48815918]
[88.88531494 264.18994141]
[89.19329071 249.19309998]
[89.50127411 234.19625854]
[89.80924988 219.19941711]
[90.11722565 204.20257568]
[90.42520142 189.20573425]
[90.73318481 174.20890808]
[91.04116058 159.21206665]
[91.34913635 144.21522522]
[91.65711212 129.21838379]
[91.96509552 114.22154999]
[88.66349030 117.71022034]
[84.96077728 120.86630249]
[80.88421631 123.65663147]
[76.46348572 126.05007935]
[61.64100647 128.35095215]
[46.81852341 130.65182495]
[31.99604225 132.95269775]
[25.02895164 146.81773376]
[11.22737408 153.90971375]
[-4.10170460 151.50160217]
[-15.06394100 140.51939392]
[-17.44413185 125.18595886]
[-10.32704258 111.39731598]
[3.55065751 104.45548248]
[18.85271072 107.02973175]
[29.69516563 118.13021851]
[44.51764679 115.82934570]
[59.34012985 113.52847290]
[74.16261292 111.22759247]
[76.31119537 96.38227081]
[62.74929428 89.97329712]
[49.18740082 83.56432343]
[35.62550354 77.15534210]
[22.06360626 70.74636841]
[5.15963888 69.44551849]
[1.73016953 52.84205246]
[16.73539352 44.95030975]
[28.47258186 57.18447495]
[42.03447723 63.59344864]
[55.59637451 70.00242615]
[69.15827179 76.41139984]
[82.72016907 82.82037354]
[95.93534851 75.72397614]
[98.08393097 60.87865067]
[90.84794617 43.97684097]
[102.16805267 30.60150146]
[104.01137543 15.71519279]
[105.85469818 0.82888544]
[91.44053650 -3.44682002]
[77.92678070 -10.03684139]
[65.68211365 -18.76139832]
[55.04056549 -29.38247681]
[46.29244995 -41.61032867]
[39.67642212 -55.11137009]
[35.37297440 -69.51727295]
[33.49950409 -84.43505096]
[34.10712433 -99.45772552]
[37.17925644 -114.17546082]
[42.63209152 -128.18675232]
[50.31687164 -141.10937500]
[60.02395248 -152.59077454]
[71.48851013 -162.31773376]
[84.39779663 -170.02488708]
[98.39962769 -175.50198364]
[113.11202240 -178.59962463]
[128.13362122 -179.23326111]
[143.05461121 -177.38565063]
[157.46795654 -173.10716248]
[170.98043823 -166.51454163]
[183.22343445 -157.78762817]
[193.86293030 -147.16448975]
[202.60868835 -134.93495178]
[209.22210693 -121.43264008]
[213.52278137 -107.02590179]
[215.39338684 -92.10777283]
[214.78286743 -77.08522034]
[211.70790100 -62.36806870]
[206.25236511 -48.35782242]
[198.56509399 -35.43668747]
[188.85580444 -23.95716095]
[177.38937378 -14.23241234]
[164.47860718 -6.52774096]
[150.47572327 -1.05333626]
[135.76272583 2.04145670]
[120.74100494 2.67220974]
[118.89768219 17.55851746]
[117.05435944 32.44482422]
[124.25636292 42.21177673]
[122.80131531 54.66385269]
[112.92925262 63.02722931]
[110.78067017 77.87255096]
[119.94261169 89.74937439]
[134.84706116 91.43977356]
[149.75151062 93.13017273]
[155.60072327 79.20310211]
[165.13780212 67.48896027]
[177.58958435 58.93737030]
[191.94667053 54.24156189]
[207.04519653 53.78220367]
[221.66120911 57.59653854]
[234.60983276 65.37535095]
[244.84136963 76.48804474]
[251.52642822 90.03377533]
[254.12306213 104.91444397]
[252.42077637 119.92373657]
[246.55755615 133.84492493]
[237.00872803 145.54946899]
[224.54835510 154.08854675]
[210.18655396 158.76992798]
[195.08757019 159.21412659]
[180.47541809 155.38510132]
[167.53460693 147.59329224]
[157.31422424 136.47032166]
[150.64279175 122.91788483]
[148.06111145 108.03461456]
[133.15666199 106.34422302]
[118.25221252 104.65382385]
[106.96192932 114.52952576]
[106.65395355 129.52636719]
[106.34597778 144.52320862]
[106.03799438 159.52005005]
[105.73001862 174.51687622]
[105.42204285 189.51371765]
[105.11406708 204.51055908]
[104.80608368 219.50740051]
[104.49810791 234.50422668]
[104.19013214 249.50106812]
[103.88215637 264.49789429]
[118.44438171 268.39727783]
[131.64993286 275.66891479]
[142.73106384 285.89007568]
[151.04353333 298.46649170]
[156.10404968 312.66699219]
[157.61842346 327.66601562]
[155.49859619 342.59149170]
[149.86781311 356.57568359]
[141.05343628 368.80557251]
[129.56794739 378.57012939]
[116.07906342 385.30166626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[27 42]
[28 41]
[29 40]
[30 39]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[56 104]
[57 103]
[59 100]
[60 99]
[61 98]
[105 130]
[106 129]
[107 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
