%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCAxxxxxxxxxxUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUCCCCCCCCCCACCCCUCACA\
) } def
/len { sequence length } bind def

/coor [
[84.82283783 367.45721436]
[70.97689819 361.44119263]
[59.26823807 351.91177368]
[50.56571579 339.57611084]
[45.51511383 325.34957886]
[44.49122238 310.28790283]
[47.57001877 295.50875854]
[54.52304077 282.10882568]
[64.83432770 271.08248901]
[77.73870850 263.24798584]
[92.27859497 259.18667603]
[92.27859497 244.18666077]
[92.27859497 229.18666077]
[92.27859497 214.18666077]
[92.27859497 199.18666077]
[92.27859497 184.18666077]
[92.27859497 169.18666077]
[92.27859497 154.18666077]
[92.27859497 139.18666077]
[92.27859497 124.18666840]
[79.92702484 115.67557526]
[65.91030884 121.01708984]
[51.89359665 126.35860443]
[37.87688446 131.70011902]
[23.86017036 137.04162598]
[18.90447044 151.87318420]
[5.54768753 160.00523376]
[-9.90351486 157.59809875]
[-20.15355110 145.78831482]
[-20.36266708 130.15213013]
[-10.43212509 118.07246399]
[4.94917583 115.25296783]
[18.51865768 123.02491760]
[32.53536987 117.68340302]
[46.55208206 112.34188843]
[60.56879425 107.00037384]
[74.58551025 101.65886688]
[75.75106049 94.24998474]
[64.08386230 84.82255554]
[78.08216858 79.43222809]
[79.24771881 72.02334595]
[67.54809570 62.63618469]
[55.84846878 53.24902344]
[40.24259567 50.64762878]
[35.15773010 36.64786530]
[23.45810509 27.26070213]
[12.04297352 30.84786034]
[0.43820331 28.47337151]
[-8.46778202 20.84728241]
[-12.51615810 9.97169876]
[-10.80039024 -1.38376856]
[-22.09939575 -11.24949169]
[-33.39839935 -21.11521530]
[-49.30626297 -26.97834015]
[-48.07600403 -43.88759232]
[-31.48700523 -47.38636017]
[-23.53267670 -32.41421890]
[-12.23367214 -22.54849625]
[-0.93466723 -12.68277359]
[17.16986275 -15.05416012]
[31.54585838 -3.28861070]
[32.84526825 15.56107807]
[44.54489136 24.94824028]
[59.31393051 26.87820435]
[65.23563385 41.54940033]
[76.93525696 50.93656158]
[88.63488007 60.32372284]
[103.63406372 60.16768646]
[115.13587189 50.53916168]
[126.63767242 40.91063690]
[118.39928436 28.35494041]
[111.67426300 14.92770863]
[106.55355072 0.81052607]
[103.10640717 -13.80568790]
[101.37944031 -28.72326660]
[101.39601898 -43.74046326]
[103.15591431 -58.65419388]
[106.63532257 -73.26275635]
[111.78718567 -87.36859894]
[118.54183960 -100.78095245]
[126.80792999 -113.31842804]
[136.47367859 -124.81147003]
[147.40834045 -135.10464478]
[159.46406555 -144.05876160]
[172.47779846 -151.55271912]
[186.27354431 -157.48515320]
[200.66473389 -161.77586365]
[215.45674133 -164.36680603]
[230.44952393 -165.22294617]
[245.44032288 -164.33271790]
[260.22640991 -161.70812988]
[274.60778809 -157.38468933]
[288.39001465 -151.42088318]
[301.38665771 -143.89735413]
[313.42196655 -134.91584778]
[324.33319092 -124.59781647]
[333.97277832 -113.08281708]
[342.21032715 -100.52657318]
[348.93444824 -87.09889221]
[354.05422974 -72.98136902]
[357.50039673 -58.36492538]
[359.22634888 -43.44723129]
[359.20877075 -28.43003464]
[357.44790649 -13.51642323]
[353.96749878 1.09191215]
[348.81469727 15.19741058]
[342.05914307 28.60931206]
[333.79223633 41.14623260]
[324.12573242 52.63862991]
[313.19036865 62.93107986]
[301.13403320 71.88439178]
[288.11981201 79.37747192]
[274.32366943 85.30899811]
[259.93218994 89.59874725]
[245.14001465 92.18869781]
[230.14717102 93.04383850]
[215.15643311 92.15260315]
[200.37052917 89.52703094]
[185.98942566 85.20263672]
[172.20761108 79.23790741]
[159.21145630 71.71350861]
[147.17674255 62.73118973]
[136.26620483 52.41243744]
[124.76439667 62.04096603]
[113.26259613 71.66949463]
[122.54061890 79.78517151]
[127.70206451 90.53775787]
[128.19487000 102.05510712]
[124.25143433 112.46165466]
[116.80206299 120.18370056]
[107.27859497 124.18666840]
[107.27859497 139.18666077]
[107.27859497 154.18666077]
[107.27859497 169.18666077]
[107.27859497 184.18666077]
[107.27859497 199.18666077]
[107.27859497 214.18666077]
[107.27859497 229.18666077]
[107.27859497 244.18666077]
[107.27859497 259.18667603]
[121.81848145 263.24798584]
[134.72285461 271.08248901]
[145.03414917 282.10882568]
[151.98716736 295.50875854]
[155.06596375 310.28790283]
[154.04206848 325.34957886]
[148.99147034 339.57611084]
[140.28895569 351.91177368]
[128.58029175 361.44119263]
[114.73435211 367.45721436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[41 67]
[42 66]
[43 65]
[45 63]
[46 62]
[51 59]
[52 58]
[53 57]
[68 125]
[69 124]
[70 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
