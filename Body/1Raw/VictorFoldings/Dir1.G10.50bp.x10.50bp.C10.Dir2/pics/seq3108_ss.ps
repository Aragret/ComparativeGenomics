%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGUAAAUGGGGGGGGGGGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUxxxxxxxxxxGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCCUAAAU\
) } def
/len { sequence length } bind def

/coor [
[69.78009033 350.66226196]
[56.55989075 343.38980103]
[45.67308807 332.94281006]
[37.86195755 320.03353882]
[33.65907669 305.54223633]
[33.35100174 290.45690918]
[36.95874405 275.80606079]
[44.23631668 262.58868408]
[54.68752289 251.70591736]
[67.59978485 243.89976501]
[82.09272003 239.70248413]
[81.78067017 224.70573425]
[81.46861267 209.70898438]
[81.15655518 194.71221924]
[80.84449768 179.71546936]
[80.53244019 164.71871948]
[80.22038269 149.72196960]
[79.90833282 134.72520447]
[79.59627533 119.72845459]
[88.06522369 91.42736053]
[82.86981201 77.35584259]
[77.67439270 63.28432083]
[72.47898102 49.21280289]
[67.28356171 35.14128494]
[62.08814621 21.06976318]
[55.45439529 34.52313995]
[41.79644012 40.72477341]
[27.30146790 36.86526489]
[18.53584480 24.69300461]
[19.47048378 9.72215176]
[29.68198204 -1.26535404]
[44.54443359 -3.29206467]
[57.32525253 4.56045437]
[54.22693253 -10.11607170]
[51.12860870 -24.79259682]
[32.08735275 -28.80131149]
[20.65147591 -51.44603729]
[12.39918709 -63.97200012]
[4.14689779 -76.49796295]
[-4.10539150 -89.02392578]
[-12.35768032 -101.54988098]
[-25.99305725 -96.30244446]
[-40.41769409 -94.01962280]
[-54.99491501 -94.79959106]
[-69.08185577 -98.60542297]
[-82.05780792 -105.26677704]
[-93.35154724 -114.48756409]
[-102.46650696 -125.85908508]
[-109.00262451 -138.87815857]
[-112.67385101 -152.96936035]
[-113.32070160 -167.51048279]
[-110.91718292 -181.86000061]
[-105.57182312 -195.38539124]
[-97.52277374 -207.49095154]
[-87.12718964 -217.64411926]
[-95.11711121 -230.33905029]
[-103.10702515 -243.03398132]
[-111.09693909 -255.72891235]
[-126.61286926 -257.67572021]
[-137.20941162 -269.17559814]
[-137.88320923 -284.79867554]
[-128.31611633 -297.16818237]
[-113.02542114 -300.44363403]
[-99.23091888 -293.07846069]
[-93.44595337 -278.55026245]
[-98.40200806 -263.71884155]
[-90.41209412 -251.02389526]
[-82.42218018 -238.32896423]
[-74.43226624 -225.63403320]
[-59.90836716 -230.82757568]
[-44.58789062 -232.67521667]
[-29.23187065 -231.08206177]
[-14.60380936 -226.12425232]
[-1.43169463 -218.04524231]
[9.62822056 -207.24394226]
[18.02411842 -194.25495911]
[23.33614159 -179.72215271]
[25.29739571 -164.36674500]
[23.80735397 -148.95147705]
[18.93700218 -134.24279785]
[10.92546844 -120.97265625]
[0.16828144 -109.80216980]
[8.42057037 -97.27621460]
[16.67285919 -84.75025177]
[24.92514992 -72.22428894]
[33.17743683 -59.69832611]
[40.54634094 -58.30216217]
[38.64795303 -73.18154907]
[52.21253586 -79.58483887]
[62.49397278 -68.66275024]
[55.28414536 -55.50983810]
[62.65304947 -54.11367798]
[74.91542053 -62.75279236]
[87.17778778 -71.39190674]
[99.44015503 -80.03102875]
[111.70252228 -88.67014313]
[118.09532928 -103.77193451]
[134.40129089 -105.51769257]
[143.84623718 -92.11153412]
[136.71400452 -77.34455872]
[120.34163666 -76.40777588]
[108.07926941 -67.76865387]
[95.81690216 -59.12953949]
[83.55453491 -50.49042511]
[71.29216766 -41.85130692]
[65.80513763 -27.89091873]
[68.90345764 -13.21439266]
[72.00177765 1.46213245]
[76.15966797 15.87434864]
[81.35507965 29.94586754]
[86.55049896 44.01738739]
[91.74591064 58.08890533]
[96.94132996 72.16042328]
[102.13674164 86.23194885]
[112.57655334 97.00275421]
[126.47911072 102.63471222]
[142.17469788 100.64495850]
[151.06573486 112.59480286]
[164.96829224 118.22676086]
[179.42236328 111.83496094]
[194.13229370 117.61370087]
[200.37091064 132.13455200]
[194.43696594 146.78256226]
[179.85096741 152.86730957]
[165.26652527 146.77883911]
[159.33633423 132.12931824]
[145.43377686 126.49736023]
[130.73258972 128.88995361]
[120.84715271 116.53726959]
[106.94459534 110.90531158]
[94.59302521 119.41639709]
[94.90508270 134.41314697]
[95.21714020 149.40991211]
[95.52919769 164.40666199]
[95.84125519 179.40341187]
[96.15330505 194.40016174]
[96.46536255 209.39692688]
[96.77742004 224.39367676]
[97.08947754 239.39042664]
[111.74446869 242.98120117]
[124.97027588 250.24345398]
[135.86514282 260.68203735]
[143.68624878 273.58526611]
[147.90031433 288.07333374]
[148.22003174 303.15841675]
[144.62361145 317.81204224]
[137.35624695 331.03503418]
[126.91344452 341.92587280]
[114.00721741 349.74197388]
[99.51752472 353.95046997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[33 108]
[34 107]
[35 106]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[55 69]
[56 68]
[57 67]
[58 66]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[115 130]
[116 129]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
