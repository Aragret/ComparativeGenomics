%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGACCUAAAGGGGGGGGGGAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGxxxxxxxxxxAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCCCCCCCCCCCAGACCCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 407.65948486]
[71.19830322 401.64346313]
[59.48964310 392.11404419]
[50.78712082 379.77838135]
[45.73651886 365.55184937]
[44.71262741 350.49017334]
[47.79142761 335.71102905]
[54.74444962 322.31109619]
[65.05573273 311.28475952]
[77.96011353 303.45025635]
[92.50000000 299.38894653]
[92.50000000 284.38894653]
[92.50000000 269.38894653]
[92.50000000 254.38893127]
[92.50000000 239.38893127]
[92.50000000 224.38893127]
[92.50000000 209.38893127]
[92.50000000 194.38893127]
[92.50000000 179.38893127]
[92.50000000 164.38893127]
[92.50000000 149.38893127]
[73.90779114 142.59945679]
[59.41175461 129.12234497]
[51.28760529 111.07337189]
[36.32735825 112.16468048]
[21.36710930 113.25598907]
[8.16642857 121.97680664]
[-5.09003544 115.18596649]
[-20.05028343 116.27728271]
[-35.01053238 117.36859131]
[-49.97078323 118.45989990]
[-57.25463104 132.05949402]
[-70.74578857 139.54228210]
[-86.13928223 138.52053833]
[-98.52309418 129.32028198]
[-103.94560242 114.87728882]
[-100.67650604 99.80027008]
[-89.75894928 88.90024567]
[-74.67669678 85.65537262]
[-60.24243927 91.10107422]
[-51.06209183 103.49964905]
[-36.10184479 102.40834045]
[-21.14159393 101.31703186]
[-6.18134594 100.22572327]
[5.94927788 91.58296204]
[20.27579880 98.29573822]
[35.23604584 97.20442963]
[50.19629669 96.11312103]
[55.93734360 76.46281433]
[69.07821655 60.76531982]
[87.41205597 51.65684509]
[85.85447693 36.73793411]
[84.29689789 21.81902122]
[76.20902252 34.45176697]
[62.95218277 41.47003937]
[47.95786285 41.05717850]
[35.10730743 33.32004929]
[27.72683334 20.26138878]
[27.72686005 5.26138926]
[35.10737991 -7.79724550]
[47.95796585 -15.53432655]
[62.95228577 -15.94713497]
[76.20909882 -8.92881584]
[84.29689789 3.70385957]
[85.85447693 -11.21505260]
[87.41205597 -26.13396454]
[88.96964264 -41.05287552]
[90.52722168 -55.97179031]
[76.61738586 -61.88853836]
[65.07059479 -71.64369202]
[56.91357803 -84.36982727]
[52.87165070 -98.93534088]
[53.30422211 -114.04508209]
[58.17282486 -128.35549927]
[67.04454803 -140.59413147]
[79.13052368 -149.67271423]
[93.35607147 -154.78398132]
[108.45626831 -155.47346497]
[123.08841705 -151.67982483]
[135.95143127 -143.74043274]
[145.90155029 -132.36120605]
[152.05401611 -118.55401611]
[153.86174011 -103.54656219]
[151.16398621 -88.67331696]
[144.20065308 -75.25678253]
[133.59089661 -64.48995972]
[120.27813721 -57.33021927]
[105.44613647 -54.41420746]
[103.88854980 -39.49529648]
[102.33097076 -24.57638359]
[100.77339172 -9.65747166]
[99.21581268 5.26144075]
[99.21581268 20.26144028]
[100.77339172 35.18035126]
[102.33097076 50.09926605]
[114.68997192 52.25357056]
[126.12250519 57.41911697]
[135.90756226 65.27013397]
[143.42802429 75.31147003]
[148.20959473 86.90985107]
[163.11149597 85.19716644]
[178.01339722 83.48447418]
[192.91529846 81.77178192]
[207.81719971 80.05909729]
[222.71910095 78.34640503]
[237.62100220 76.63371277]
[245.13114929 63.05515289]
[259.20248413 56.51472855]
[274.42428589 59.52737045]
[284.94348145 70.93466187]
[286.71520996 86.35025787]
[279.05822754 99.84654999]
[264.91674805 106.23394012]
[249.72853088 103.05635071]
[239.33369446 91.53562164]
[224.43179321 93.24830627]
[209.52989197 94.96099854]
[194.62799072 96.67369080]
[179.72608948 98.38637543]
[164.82418823 100.09906769]
[149.92228699 101.81175995]
[149.05586243 109.43608856]
[147.03196716 116.83778381]
[143.89836121 123.84219360]
[139.72898865 130.28405762]
[134.62222290 136.01136780]
[128.69854736 140.88899231]
[122.09774780 144.80186462]
[114.97554779 147.65763855]
[107.50000000 149.38893127]
[107.50000000 164.38893127]
[107.50000000 179.38893127]
[107.50000000 194.38893127]
[107.50000000 209.38893127]
[107.50000000 224.38893127]
[107.50000000 239.38893127]
[107.50000000 254.38893127]
[107.50000000 269.38894653]
[107.50000000 284.38894653]
[107.50000000 299.38894653]
[122.03988647 303.45025635]
[134.94427490 311.28475952]
[145.25555420 322.31109619]
[152.20857239 335.71102905]
[155.28736877 350.49017334]
[154.26348877 365.55184937]
[149.21287537 379.77838135]
[140.51036072 392.11404419]
[128.80169678 401.64346313]
[114.95575714 407.65948486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 48]
[25 47]
[26 46]
[28 44]
[29 43]
[30 42]
[31 41]
[51 95]
[52 94]
[53 93]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
