%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCUUAAUGGGGGGGGGGCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUAxxxxxxxxxxCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCCCCCCCCCCCUCUCCUUAAU\
) } def
/len { sequence length } bind def

/coor [
[101.40576172 381.45230103]
[88.18556213 374.17984009]
[77.29875946 363.73281860]
[69.48763275 350.82357788]
[65.28475189 336.33227539]
[64.97667694 321.24691772]
[68.58441925 306.59609985]
[75.86199188 293.37872314]
[86.31320190 282.49594116]
[99.22546387 274.68978882]
[113.71839905 270.49252319]
[113.40634155 255.49575806]
[113.09428406 240.49900818]
[112.78222656 225.50224304]
[112.47016907 210.50549316]
[112.15811920 195.50874329]
[111.84606171 180.51199341]
[111.53400421 165.51522827]
[111.22194672 150.51847839]
[110.90988922 135.52172852]
[98.68656921 136.33312988]
[87.13452148 133.14500427]
[77.49610901 126.48142242]
[70.74776459 117.22976685]
[67.50193024 106.52597046]
[67.95409393 95.61643982]
[71.87928009 85.71322632]
[78.67629242 77.85942078]
[71.22138214 64.84310913]
[63.76646805 51.82680511]
[56.31155777 38.81049347]
[42.62593842 44.97972107]
[28.40878868 49.79927826]
[13.79285049 53.22416687]
[-1.08540773 55.22240829]
[-16.08706665 55.77534103]
[-31.07205772 54.87780762]
[-45.90046692 52.53818893]
[-60.43383789 48.77832413]
[-74.53648376 43.63332367]
[-88.07671356 37.15122604]
[-100.92811584 29.39255333]
[-112.97068787 20.42974663]
[-124.09199524 10.34649181]
[-134.18820190 -0.76306266]
[-143.16502380 -12.79518890]
[-150.93867493 -25.63754272]
[-157.43653870 -39.17021561]
[-162.59796143 -53.26685333]
[-166.37475586 -67.79583740]
[-168.73164368 -82.62151337]
[-169.64663696 -97.60544586]
[-169.11117554 -112.60774231]
[-167.13026428 -127.48831177]
[-163.72241211 -142.10823059]
[-158.91941833 -156.33099365]
[-152.76612854 -170.02378845]
[-145.32002258 -183.05877686]
[-136.65058899 -195.31423950]
[-126.83880615 -206.67576599]
[-115.97625732 -217.03726196]
[-104.16438293 -226.30198669]
[-91.51347351 -234.38343811]
[-78.14163208 -241.20616150]
[-64.17372894 -246.70645142]
[-49.74016953 -250.83293152]
[-34.97572708 -253.54710388]
[-20.01825142 -254.82362366]
[-5.00740290 -254.65054321]
[9.91666317 -253.02951050]
[24.61460114 -249.97563171]
[38.94918060 -245.51745605]
[52.78655243 -239.69657898]
[65.99752808 -232.56736755]
[78.45874786 -224.19636536]
[90.05386353 -214.66175842]
[100.67462158 -204.05256653]
[110.22184753 -192.46783447]
[118.60639191 -180.01573181]
[125.74998474 -166.81253052]
[131.58592224 -152.98149109]
[136.05970764 -138.65177917]
[139.12957764 -123.95717621]
[140.76686096 -109.03488159]
[140.95626831 -94.02423096]
[139.69604492 -79.06537628]
[136.99795532 -64.29798889]
[132.88717651 -49.85994720]
[127.40209961 -35.88606262]
[120.59394073 -22.50680542]
[112.52626801 -9.84709930]
[103.27439880 1.97485209]
[92.92473602 12.84866810]
[81.57389069 22.67282104]
[69.32786560 31.35558319]
[76.78277588 44.37189484]
[84.23768616 57.38820267]
[91.69259644 70.40451050]
[111.81829071 69.31809998]
[129.63687134 81.34495544]
[137.04190063 102.95227051]
[151.74986267 100.00679016]
[166.45782471 97.06130981]
[178.46998596 86.76477051]
[192.46881104 91.85223389]
[207.17677307 88.90674591]
[219.12823486 77.67756653]
[234.74844360 82.67165375]
[237.96867371 98.75152588]
[225.47621155 109.37557983]
[210.12225342 103.61470795]
[195.41429138 106.56019592]
[184.45414734 116.64604950]
[169.40330505 111.76927185]
[154.69534302 114.71475220]
[139.98738098 117.66023254]
[154.30697632 122.12670135]
[169.09600830 119.61982727]
[183.54794312 123.63749695]
[194.92120361 133.41752625]
[201.05822754 147.10464478]
[200.79483032 162.10232544]
[194.18095398 175.56549072]
[182.47128296 184.94010925]
[167.88717651 188.44781494]
[153.19529724 185.42317200]
[141.18272400 176.43995667]
[134.12828064 163.20231628]
[133.37033081 148.22094727]
[125.90664673 135.20967102]
[126.21870422 150.20642090]
[126.53075409 165.20317078]
[126.84281158 180.19993591]
[127.15486908 195.19668579]
[127.46692657 210.19343567]
[127.77898407 225.19018555]
[128.09103394 240.18695068]
[128.40309143 255.18370056]
[128.71514893 270.18045044]
[143.37014771 273.77120972]
[156.59594727 281.03347778]
[167.49081421 291.47207642]
[175.31192017 304.37527466]
[179.52598572 318.86334229]
[179.84570312 333.94845581]
[176.24928284 348.60205078]
[168.98191833 361.82504272]
[158.53912354 372.71588135]
[145.63288879 380.53201294]
[131.14320374 384.74047852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[28 98]
[29 97]
[30 96]
[31 95]
[101 116]
[102 115]
[103 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
