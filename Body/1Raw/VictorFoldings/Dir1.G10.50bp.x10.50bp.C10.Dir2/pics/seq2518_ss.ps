%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUUCUCGGGGGGGGGGCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCxxxxxxxxxxAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCCCCCCCCCCCAAACAAUCUC\
) } def
/len { sequence length } bind def

/coor [
[102.24665833 408.29421997]
[90.36238098 399.01910400]
[81.04367828 387.16900635]
[74.83231354 373.43283081]
[72.08940887 358.60919189]
[72.97443390 343.55993652]
[77.43594360 329.16000366]
[85.21453857 316.24655151]
[95.85799408 305.57040405]
[108.74750519 297.75222778]
[123.13368988 293.24655151]
[122.19805908 278.27575684]
[121.26243591 263.30496216]
[120.32680511 248.33418274]
[119.39117432 233.36338806]
[118.45555115 218.39259338]
[117.51992035 203.42179871]
[116.58428955 188.45101929]
[115.64865875 173.48022461]
[114.71303558 158.50942993]
[113.77740479 143.53863525]
[112.84177399 128.56784058]
[106.66599274 124.31230164]
[88.13863373 111.54566956]
[73.81603241 116.00247955]
[59.49343872 120.45929718]
[45.17084122 124.91611481]
[38.04342270 139.02198792]
[23.00334930 143.87704468]
[8.97362614 136.60090637]
[4.27783918 121.51033783]
[11.70191669 107.55832672]
[26.84128380 103.02234650]
[40.71402359 110.59351349]
[55.03662109 106.13670349]
[69.35922241 101.67988586]
[83.68181610 97.22306824]
[83.99387360 82.22631836]
[69.86907196 77.17755890]
[55.74426651 72.12879944]
[41.61946487 67.08004761]
[29.46017265 76.57505798]
[14.09566021 77.96620178]
[0.42868450 70.80957031]
[-7.17967129 57.38882446]
[-6.30160904 41.98646927]
[2.78268528 29.51734352]
[17.17444611 23.96029663]
[32.28131485 27.08856392]
[43.28274536 37.90392685]
[46.66822052 52.95524216]
[60.79302216 58.00400162]
[74.91782379 63.05275726]
[89.04262543 68.10150909]
[103.31809235 63.49594879]
[111.82917786 51.14437485]
[120.34027100 38.79280472]
[128.85136414 26.44123077]
[125.47260284 23.27975464]
[122.77506256 19.10732269]
[121.04032898 14.08574390]
[120.50847626 8.45129776]
[121.35920715 2.50360584]
[121.67126465 -12.49314785]
[108.64055634 -20.50238609]
[101.41605377 -33.87038422]
[101.84989166 -48.95939255]
[109.72545624 -61.71993256]
[122.84244537 -68.77757263]
[123.15450287 -83.77432251]
[109.72235870 -91.11164093]
[101.24826050 -103.85716248]
[99.67949677 -119.08206177]
[105.37655640 -133.28776550]
[117.03028870 -143.20991516]
[131.96275330 -146.56846619]
[146.74259949 -142.59165955]
[157.97349548 -132.19331360]
[163.07469177 -117.76291656]
[160.87394714 -102.61645508]
[151.87698364 -90.23447418]
[138.15126038 -83.46227264]
[137.83920288 -68.46551514]
[150.65124512 -60.86833954]
[157.98918152 -47.79123306]
[157.79495239 -32.69723892]
[150.02061462 -19.64133835]
[136.66801453 -12.18109131]
[136.35595703 2.81566215]
[148.43594360 11.70801163]
[162.66273499 6.95419693]
[176.88951111 2.20038199]
[178.02005005 -12.93228436]
[184.83975220 -26.44282150]
[196.28161621 -36.28647232]
[210.58177185 -40.98682022]
[225.55136108 -39.85719681]
[238.91160583 -33.10078812]
[248.64068604 -21.77495193]
[262.86746216 -26.52876663]
[277.09423828 -31.28258133]
[291.32101440 -36.03639603]
[298.15344238 -50.28748703]
[313.08926392 -55.45439911]
[327.26730347 -48.47169113]
[332.27603149 -33.48208237]
[325.14379883 -19.37864113]
[310.10208130 -14.52869034]
[296.07482910 -21.80961800]
[281.84805298 -17.05580330]
[267.62127686 -12.30198765]
[253.39450073 -7.54817295]
[252.42851257 7.35136271]
[245.81378174 20.78232384]
[234.53034973 30.68428421]
[220.27706909 35.52493286]
[205.21594238 34.53714371]
[191.64404297 27.84036636]
[181.64332581 16.42716026]
[167.41654968 21.18097687]
[153.18975830 25.93479156]
[141.20292664 34.95232010]
[132.69184875 47.30389404]
[124.18075562 59.65546417]
[115.66966248 72.00704193]
[127.81256866 127.63221741]
[128.74819946 142.60301208]
[129.68382263 157.57380676]
[130.61946106 172.54458618]
[131.55508423 187.51538086]
[132.49070740 202.48617554]
[133.42634583 217.45697021]
[134.36196899 232.42776489]
[135.29759216 247.39854431]
[136.23323059 262.36935425]
[137.16885376 277.34014893]
[138.10447693 292.31091309]
[152.93971252 294.99035645]
[166.70234680 301.14285278]
[178.59223938 310.41073608]
[187.91813660 322.25521851]
[194.13781738 335.98760986]
[196.88970947 350.80957031]
[196.01380920 365.85937500]
[191.56103516 380.26199341]
[183.79026794 393.18014526]
[173.15328979 403.86276245]
[160.26852417 411.68875122]
[145.88507080 416.20315552]
[130.83915710 417.14346313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[24 37]
[25 36]
[26 35]
[27 34]
[38 54]
[39 53]
[40 52]
[41 51]
[55 125]
[56 124]
[57 123]
[58 122]
[63 89]
[64 88]
[69 83]
[70 82]
[90 121]
[91 120]
[92 119]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
