%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGAACCCCCGGGGGGGGGGUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAxxxxxxxxxxCCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGCCCCCCCCCCAAUCGAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 360.53546143]
[70.87159729 355.38046265]
[58.28185654 347.09823608]
[47.94191742 336.13546753]
[40.40940475 323.08334351]
[36.09054184 308.64575195]
[35.21823120 293.60128784]
[37.83952332 278.76129150]
[43.81304932 264.92605591]
[52.81666565 252.84170532]
[64.36482239 243.15992737]
[77.83473969 236.40284729]
[92.50000000 232.93487549]
[92.50000000 217.93487549]
[92.50000000 202.93487549]
[92.50000000 187.93487549]
[92.50000000 172.93487549]
[92.50000000 157.93487549]
[92.50000000 142.93487549]
[92.50000000 127.93488312]
[92.50000000 112.93488312]
[81.31898499 102.93563080]
[66.41209412 104.60430908]
[51.50519562 106.27298737]
[36.59830093 107.94166565]
[21.69140625 109.61034393]
[11.83935070 121.67578125]
[-3.30213165 123.15570068]
[-14.74396610 113.68891144]
[-29.65086174 115.35758972]
[-44.55775452 117.02626801]
[-57.41153336 126.25074768]
[-70.92054749 119.97731781]
[-85.82743835 121.64599609]
[-100.89562988 129.41682434]
[-112.53407288 117.08869171]
[-103.90956116 102.49231720]
[-87.49611664 106.73909760]
[-72.58921814 105.07041931]
[-60.80168533 95.96530151]
[-46.22643280 102.11937714]
[-31.31953812 100.45069885]
[-16.41264343 98.78202057]
[-7.34719849 87.01965332]
[7.74674177 85.11502075]
[20.02272987 94.70344543]
[34.92962265 93.03476715]
[49.83651733 91.36609650]
[64.74341583 89.69741821]
[79.65030670 88.02873993]
[65.76827240 82.34639740]
[58.75341415 69.08774567]
[60.73181152 54.21878433]
[70.96949768 43.25568008]
[85.66845703 40.26557541]
[99.37557983 46.35775375]
[107.00573730 59.27211380]
[105.72754669 74.21932220]
[102.01752472 88.75327301]
[105.76186371 73.38153076]
[120.09827423 69.34214783]
[130.32206726 58.36608124]
[140.54586792 47.39001846]
[150.76966858 36.41395569]
[140.82331848 25.17003822]
[132.00860596 13.01864052]
[124.40785217 0.07321914]
[118.09199524 -13.54535484]
[113.12003326 -27.70992661]
[109.53837585 -42.28823853]
[107.38046265 -57.14418030]
[106.66644287 -72.13903809]
[107.40299225 -87.13279724]
[109.58322906 -101.98548126]
[113.18679047 -116.55839539]
[118.18003845 -130.71548462]
[124.51634216 -144.32453918]
[132.13655090 -157.25852966]
[140.96951294 -169.39666748]
[150.93273926 -180.62562561]
[161.93322754 -190.84056091]
[173.86825562 -199.94609070]
[186.62637329 -207.85720825]
[200.08848572 -214.50003052]
[214.12887573 -219.81254578]
[228.61647034 -223.74516296]
[243.41596985 -226.26113892]
[258.38922119 -227.33699036]
[273.39639282 -226.96269226]
[288.29739380 -225.14170837]
[302.95306396 -221.89105225]
[317.22656250 -217.24108887]
[330.98468018 -211.23521423]
[344.09887695 -203.92951965]
[356.44674683 -195.39221191]
[367.91299438 -185.70300293]
[378.39053345 -174.95237732]
[387.78158569 -163.24067688]
[395.99844360 -150.67729187]
[402.96438599 -137.37948608]
[408.61434937 -123.47146606]
[412.89562988 -109.08305359]
[415.76818848 -94.34860992]
[417.20526123 -79.40570831]
[417.19342041 -64.39386749]
[415.73275757 -49.45325089]
[412.83691406 -34.72336578]
[408.53292847 -20.34173393]
[402.86099243 -6.44264317]
[395.87408447 6.84413290]
[387.63739014 19.39453697]
[378.22787476 31.09138489]
[367.73333740 41.82546616]
[356.25180054 51.49655533]
[343.89047241 60.01435089]
[330.76473999 67.29933167]
[316.99719238 73.28347015]
[302.71636963 77.91088867]
[288.05557251 81.13839722]
[273.15170288 82.93584442]
[258.14395142 83.28645325]
[243.17243958 82.18695831]
[228.37692261 79.64761353]
[213.89556885 75.69213104]
[199.86358643 70.35744476]
[186.41197205 63.69336700]
[173.66636658 55.76211929]
[161.74572754 46.63775253]
[151.52192688 57.61381531]
[141.29814148 68.58988190]
[131.07434082 79.56594086]
[128.06127930 94.15260315]
[112.99359131 98.97706604]
[107.50000000 112.93488312]
[107.50000000 127.93488312]
[107.50000000 142.93487549]
[107.50000000 157.93487549]
[107.50000000 172.93487549]
[107.50000000 187.93487549]
[107.50000000 202.93487549]
[107.50000000 217.93487549]
[107.50000000 232.93487549]
[122.16526031 236.40284729]
[135.63517761 243.15992737]
[147.18333435 252.84170532]
[156.18695068 264.92605591]
[162.16047668 278.76129150]
[164.78176880 293.60128784]
[163.90945435 308.64575195]
[159.59059143 323.08334351]
[152.05809021 336.13546753]
[141.71813965 347.09823608]
[129.12840271 355.38046265]
[114.96779633 360.53546143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[29 43]
[30 42]
[31 41]
[33 39]
[34 38]
[59 133]
[61 131]
[62 130]
[63 129]
[64 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
