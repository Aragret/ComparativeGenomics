%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACACCCAGGGGGGGGGGCUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUxxxxxxxxxxAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAACCCCCCCCCCUCAACGCCCA\
) } def
/len { sequence length } bind def

/coor [
[70.75415039 362.56161499]
[58.19592667 354.21044922]
[48.10970688 342.99798584]
[41.12951279 329.62908936]
[37.69412613 314.94409180]
[38.01950455 299.86614990]
[42.08518982 285.34301758]
[49.63560867 272.28765869]
[60.19613647 261.52078247]
[73.10293579 253.71914673]
[87.54466248 249.37319946]
[86.92068481 234.38616943]
[86.29670715 219.39915466]
[85.67272949 204.41213989]
[85.04875183 189.42512512]
[84.42477417 174.43811035]
[83.80079651 159.45109558]
[83.17681885 144.46408081]
[70.16050720 137.00917053]
[56.91792297 144.05430603]
[43.67533875 151.09944153]
[30.43275261 158.14457703]
[27.36225510 173.47773743]
[15.12190914 183.20954895]
[-0.50877017 182.74491882]
[-12.14945316 172.30323792]
[-14.30376530 156.81475830]
[-5.95450640 143.59266663]
[8.95605946 138.88002014]
[23.38761711 144.90199280]
[36.63020325 137.85685730]
[49.87278748 130.81172180]
[63.11537552 123.76658630]
[58.94279480 94.55444336]
[73.88665009 71.09353638]
[66.16255951 58.23513031]
[58.43847656 45.37672806]
[50.71439362 32.51832581]
[42.99030685 19.65992546]
[35.26622391 6.80152273]
[27.54213715 -6.05687952]
[13.69208241 -0.22963858]
[-0.84632272 3.56713963]
[-15.77709579 5.25615692]
[-30.79626465 4.80302811]
[-45.59805679 2.21697712]
[-59.88113022 -2.44934678]
[-73.35469818 -9.10094357]
[-85.74445343 -17.60239410]
[-96.79816437 -27.78062248]
[-106.29078674 -39.42840958]
[-114.02905273 -52.30862427]
[-119.85543823 -66.15904236]
[-123.65132141 -80.69767761]
[-125.33940887 -95.62855530]
[-124.88535309 -110.64769745]
[-122.29838562 -125.44933319]
[-117.63117981 -139.73211670]
[-110.97874451 -153.20527649]
[-102.47653198 -165.59449768]
[-92.29761505 -176.64758301]
[-80.64924622 -186.13948059]
[-67.76854706 -193.87695312]
[-53.91777420 -199.70248413]
[-39.37889862 -203.49745178]
[-24.44791794 -205.18463135]
[-9.42880440 -204.72964478]
[5.37266922 -202.14175415]
[19.65516472 -197.47366333]
[33.12791061 -190.82040405]
[45.51661301 -182.31741333]
[56.56906128 -172.13781738]
[66.06024170 -160.48886108]
[73.79691315 -147.60768127]
[79.62158966 -133.75654602]
[83.41566467 -119.21743774]
[85.10191345 -104.28635406]
[84.64599609 -89.26727295]
[82.05719757 -74.46595764]
[77.38822174 -60.18375015]
[70.73412323 -46.71141815]
[62.23036957 -34.32323837]
[52.05009079 -23.27142143]
[40.40053940 -13.78096485]
[48.12462616 -0.92256230]
[55.84870911 11.93583965]
[63.57279587 24.79424286]
[71.29688263 37.65264511]
[79.02096558 50.51104736]
[86.74504852 63.36944962]
[92.46961212 60.55925751]
[98.75466919 58.66735458]
[105.44912720 57.80075455]
[112.38213348 58.04103470]
[119.36743164 59.44080734]
[126.20836639 62.02090073]
[132.70333862 65.76845551]
[138.65162659 70.63594818]
[152.55416870 65.00399017]
[166.45672607 59.37203598]
[180.35928345 53.74008179]
[187.91307068 39.58663559]
[203.71395874 36.80968475]
[215.64086914 47.53947067]
[214.54449463 63.54501724]
[201.26588440 72.54824066]
[185.99124146 67.64263916]
[172.08868408 73.27458954]
[158.18612671 78.90654755]
[144.28356934 84.53850555]
[144.36158752 92.03810120]
[158.57850647 87.25487518]
[167.52075195 99.29798126]
[158.83023071 111.52397156]
[144.51762390 107.03729248]
[144.59564209 114.53688049]
[158.61236572 119.87839508]
[172.62907410 125.21990967]
[186.64578247 130.56141663]
[201.81506348 125.33911133]
[215.27810669 134.06413269]
[216.70721436 150.04341125]
[205.00610352 161.01899719]
[189.15086365 158.57136536]
[181.30427551 144.57814026]
[167.28756714 139.23661804]
[153.27084351 133.89511108]
[139.25413513 128.55358887]
[127.07055664 138.40478516]
[112.82015991 143.58625793]
[98.16383362 143.84010315]
[98.78781128 158.82711792]
[99.41178894 173.81413269]
[100.03576660 188.80114746]
[100.65974426 203.78816223]
[101.28372192 218.77517700]
[101.90769958 233.76220703]
[102.53167725 248.74922180]
[117.28468323 251.87965393]
[130.79531860 258.58142090]
[142.21429443 268.43319702]
[150.82380676 280.81573486]
[156.08265686 294.95062256]
[157.66026306 309.94937134]
[155.45745850 324.86911011]
[149.61271667 338.77197266]
[140.49342346 350.78402710]
[128.67286682 360.15017700]
[114.89405060 366.28167725]
[100.02314758 368.79309082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 33]
[20 32]
[21 31]
[22 30]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[41 84]
[98 110]
[99 109]
[100 108]
[101 107]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
