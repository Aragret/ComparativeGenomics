%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAAGUAGGGGGGGGGGAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCxxxxxxxxxxAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGCCCCCCCCCCAAAAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.58670044]
[71.19830322 352.57067871]
[59.48964310 343.04125977]
[50.78712082 330.70559692]
[45.73651886 316.47906494]
[44.71262741 301.41738892]
[47.79142761 286.63824463]
[54.74444962 273.23831177]
[65.05573273 262.21197510]
[77.96011353 254.37747192]
[92.50000000 250.31616211]
[92.50000000 235.31616211]
[92.50000000 220.31616211]
[92.50000000 205.31616211]
[92.50000000 190.31616211]
[92.50000000 175.31616211]
[92.50000000 160.31616211]
[92.50000000 145.31616211]
[92.50000000 130.31616211]
[92.50000000 115.31615448]
[80.51011658 98.40119171]
[93.65777588 78.87467194]
[83.67504883 67.67890167]
[73.69232178 56.48313904]
[61.08119202 48.36159515]
[46.75859451 43.90478134]
[44.98031616 49.18650055]
[41.33317947 54.18701935]
[35.88478470 58.29269028]
[28.89321136 60.91586304]
[20.79582596 61.55140305]
[5.83557796 60.46009064]
[-9.12467098 59.36878204]
[-16.68531227 72.62772369]
[-29.25492477 81.28610229]
[-44.33780289 83.62480164]
[-58.93923187 79.17945862]
[-70.16008759 68.83271027]
[-75.77246094 54.63890839]
[-74.66200256 39.41624069]
[-67.04920959 26.18717766]
[-54.44559479 17.57836151]
[-39.35362244 15.29907990]
[-24.76981354 19.80188370]
[-13.58979225 30.19273758]
[-8.03336048 44.40853119]
[6.92688847 45.49984360]
[21.88713646 46.59115219]
[27.95015144 32.87110138]
[17.07132530 22.54389572]
[6.19250011 12.21669006]
[-4.68632507 1.88948512]
[-15.56515026 -8.43771935]
[-31.57562447 -9.45960522]
[-40.64053345 -22.69618225]
[-35.80605698 -37.99348068]
[-20.78078651 -43.61672592]
[-7.09082890 -35.25223923]
[-5.23794556 -19.31654549]
[5.64087963 -8.98933983]
[16.51970482 1.33786488]
[27.39853096 11.66506958]
[38.27735519 21.99227524]
[51.21541214 29.58218384]
[65.53800964 34.03899765]
[65.45917511 32.03213120]
[65.73929596 29.95539093]
[67.91613007 15.11418533]
[70.09297180 0.27297965]
[56.44130325 -6.21727657]
[45.31030655 -16.44431496]
[37.68973923 -29.49875069]
[34.25721359 -44.21979904]
[35.31795120 -59.29846573]
[40.77762985 -73.39397430]
[50.15078354 -85.25295258]
[62.60395050 -93.82091522]
[77.02980804 -98.33600616]
[92.14562225 -98.39674377]
[106.60729218 -93.99771881]
[119.12891388 -85.53010559]
[128.59706116 -73.74682617]
[134.16983032 -59.69565201]
[135.35169983 -44.62599564]
[132.03758240 -29.87784004]
[124.52217102 -16.76258659]
[113.47370911 -6.44643211]
[99.87464142 0.15331720]
[84.93417358 2.44981670]
[82.75733948 17.29102135]
[80.58050537 32.13222885]
[84.88808441 46.50041199]
[94.87081146 57.69617844]
[104.85353851 68.89194489]
[118.69675446 74.66821289]
[133.67646790 73.88837433]
[148.65618896 73.10852814]
[163.63589478 72.32868195]
[166.09834290 57.47100830]
[171.69760132 43.49021912]
[180.17178345 31.04022598]
[191.12452698 20.70333290]
[204.04356384 12.96301460]
[218.32464600 8.18130207]
[233.29981995 6.58184338]
[248.26867676 8.23944855]
[262.53106689 13.07658863]
[275.41995239 20.86702156]
[286.33245850 31.24637604]
[294.75823975 43.72918701]
[300.30316162 57.73161697]
[302.70788574 72.59873962]
[301.85992432 87.63520050]
[297.79898071 102.13770294]
[290.71496582 115.42795563]
[280.93920898 126.88434601]
[268.92895508 135.97102356]
[255.24594116 142.26301575]
[240.53013611 145.46600342]
[225.46983337 145.43019104]
[210.76942444 142.15725708]
[197.11648560 135.80027771]
[185.14958191 126.65658569]
[175.42842102 115.15383911]
[168.40768433 101.83005524]
[164.41574097 87.30839539]
[149.43603516 88.08824158]
[134.45631409 88.86808777]
[119.47660065 89.64793396]
[118.60252380 106.02974701]
[107.50000000 115.31615448]
[107.50000000 130.31616211]
[107.50000000 145.31616211]
[107.50000000 160.31616211]
[107.50000000 175.31616211]
[107.50000000 190.31616211]
[107.50000000 205.31616211]
[107.50000000 220.31616211]
[107.50000000 235.31616211]
[107.50000000 250.31616211]
[122.03988647 254.37747192]
[134.94427490 262.21197510]
[145.25555420 273.23831177]
[152.20857239 286.63824463]
[155.28736877 301.41738892]
[154.26348877 316.47906494]
[149.21287537 330.70559692]
[140.51036072 343.04125977]
[128.80169678 352.57067871]
[114.95575714 358.58670044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 94]
[23 93]
[24 92]
[25 65]
[26 64]
[31 48]
[32 47]
[33 46]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[67 91]
[68 90]
[69 89]
[95 129]
[96 128]
[97 127]
[98 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
