%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCUCACGGGGGGGGGGUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAAxxxxxxxxxxUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAACCCCCCCCCCUUCUUCUCAC\
) } def
/len { sequence length } bind def

/coor [
[63.07056046 456.60000610]
[49.22462082 450.58398438]
[37.51596069 441.05456543]
[28.81343651 428.71887207]
[23.76283455 414.49237061]
[22.73894310 399.43069458]
[25.81774139 384.65151978]
[32.77076340 371.25158691]
[43.08204651 360.22525024]
[55.98643112 352.39074707]
[70.52631378 348.32943726]
[70.52631378 333.32943726]
[70.52631378 318.32943726]
[70.52631378 303.32943726]
[70.52631378 288.32943726]
[70.52631378 273.32943726]
[70.52631378 258.32943726]
[70.52631378 243.32943726]
[70.52631378 228.32943726]
[70.52631378 213.32943726]
[70.52631378 198.32943726]
[61.17039490 210.05406189]
[47.25645065 215.65782166]
[32.38606262 213.69020081]
[20.40838432 204.66050720]
[14.42380428 190.90606689]
[15.98141193 175.98715210]
[24.67802429 163.76550293]
[38.26255035 157.40463257]
[53.21867752 158.55104065]
[65.67505646 166.90798950]
[72.40737152 180.31221008]
[75.50569153 165.63568115]
[78.60401154 150.95915222]
[76.94326019 147.77963257]
[76.77882385 143.62335205]
[78.55904388 139.22071838]
[82.38061523 135.47703552]
[86.38835144 121.02234650]
[74.64157867 107.58507538]
[74.47377777 88.75640106]
[87.23896027 73.60599518]
[107.76030731 70.25436401]
[108.69593811 55.28357697]
[100.11048889 39.02719498]
[110.30326843 24.77562141]
[103.14672852 10.66553402]
[111.40676880 -1.72886086]
[112.03074646 -16.71587753]
[112.65472412 -31.70289230]
[104.49206543 -41.74405289]
[105.35841370 -54.25278854]
[114.24021912 -62.52447891]
[115.17584229 -77.49526978]
[116.11147308 -92.46606445]
[117.04710388 -107.43685150]
[117.98272705 -122.40764618]
[118.91835785 -137.37843323]
[119.85398865 -152.34922791]
[105.22007751 -155.80706787]
[91.38111115 -161.68847656]
[78.73525238 -169.82423401]
[67.64636230 -179.98023987]
[58.43347931 -191.86428833]
[51.36168671 -205.13447571]
[46.63444138 -219.40896606]
[44.38776779 -234.27706909]
[44.68629837 -249.31098938]
[47.52144623 -264.07818604]
[52.81164169 -278.15377808]
[60.40467072 -291.13275146]
[70.08206940 -302.64169312]
[81.56539917 -312.34948730]
[94.52426910 -319.97680664]
[108.58580780 -325.30416870]
[123.34545898 -328.17834473]
[138.37854004 -328.51660156]
[153.25253296 -326.30923462]
[167.53947449 -321.61975098]
[180.82829285 -314.58306885]
[192.73666382 -305.40161133]
[202.92195129 -294.33959961]
[211.09109497 -281.71530151]
[217.00906372 -267.89193726]
[220.50556946 -253.26721191]
[221.48002625 -238.26193237]
[219.90440369 -223.30781555]
[215.82402039 -208.83514404]
[209.35627747 -195.26029968]
[200.68727112 -182.97387695]
[190.06642151 -172.32936096]
[177.79931641 -163.63302612]
[164.23890686 -157.13508606]
[149.77534485 -153.02250671]
[134.82478333 -151.41360474]
[133.88914490 -136.44281006]
[132.95352173 -121.47201538]
[132.01789856 -106.50122833]
[131.08226013 -91.53043365]
[130.14663696 -76.55964661]
[129.21101379 -61.58885193]
[137.86882019 -46.35591507]
[127.64173889 -31.07891655]
[127.01776123 -16.09189987]
[126.39378357 -1.10488343]
[133.59495544 11.93323231]
[125.29028320 25.39959908]
[133.26515198 34.54885101]
[132.82792664 47.07992554]
[123.66673279 56.21920395]
[122.73110199 71.18999481]
[132.35963440 82.69179535]
[147.26153564 84.40448761]
[160.67018127 75.59610748]
[175.87156677 80.72420502]
[181.20448303 95.85495758]
[172.57797241 109.38133240]
[156.60955811 110.92706299]
[145.54884338 99.30638885]
[130.64694214 97.59370422]
[128.71972656 107.17267609]
[123.99573517 115.30740356]
[117.17762756 121.24804688]
[109.14451599 124.53492737]
[100.84304047 125.03008270]
[96.83530426 139.48477173]
[93.28054047 154.05747986]
[90.18222046 168.73399353]
[87.08390045 183.41052246]
[85.52631378 198.32943726]
[85.52631378 213.32943726]
[85.52631378 228.32943726]
[85.52631378 243.32943726]
[85.52631378 258.32943726]
[85.52631378 273.32943726]
[85.52631378 288.32943726]
[85.52631378 303.32943726]
[85.52631378 318.32943726]
[85.52631378 333.32943726]
[85.52631378 348.32943726]
[100.06620026 352.39074707]
[112.97058105 360.22525024]
[123.28186798 371.25158691]
[130.23489380 384.65151978]
[133.31369019 399.43069458]
[132.28979492 414.49237061]
[127.23919678 428.71887207]
[118.53667450 441.05456543]
[106.82801056 450.58398438]
[92.98207092 456.60000610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 129]
[33 128]
[34 127]
[38 126]
[39 125]
[43 111]
[44 110]
[46 107]
[48 105]
[49 104]
[50 103]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
