%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAACUUGGGGGGGGGGGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGxxxxxxxxxxGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUACCCCCCCCCCAACUUUACUU\
) } def
/len { sequence length } bind def

/coor [
[112.15917206 377.55191040]
[97.66947937 373.34344482]
[84.76325226 365.52731323]
[74.32044983 354.63647461]
[67.05308533 341.41348267]
[63.45666122 326.75988770]
[63.77638245 311.67477417]
[67.99044800 297.18670654]
[75.81154633 284.28350830]
[86.70641327 273.84490967]
[99.93222809 266.58264160]
[114.58721924 262.99188232]
[114.89927673 247.99513245]
[115.21132660 232.99838257]
[115.52338409 218.00161743]
[115.83544159 203.00486755]
[116.14749908 188.00811768]
[116.45955658 173.01136780]
[116.77161407 158.01460266]
[117.08366394 143.01785278]
[117.39572144 128.02110291]
[111.26454163 123.70154572]
[97.65167236 130.00154114]
[99.00217438 115.06242371]
[92.87098694 110.74286652]
[78.85427094 116.08438110]
[64.83756256 121.42589569]
[52.18983078 132.71620178]
[37.83950424 123.68822479]
[42.54210281 107.39952087]
[59.49604797 107.40917969]
[73.51276398 102.06766510]
[87.52947235 96.72615814]
[97.62812805 85.63484192]
[101.63586426 71.18015289]
[105.64360809 56.72546387]
[95.31223297 47.24344635]
[90.11209106 34.29162598]
[91.00942230 20.43017960]
[97.77119446 8.37256432]
[109.02202606 0.45436046]
[122.52353668 -1.81908655]
[126.83112335 -16.18727112]
[131.13870239 -30.55545425]
[117.15596771 -36.00791168]
[103.65731049 -42.56784058]
[90.73028564 -50.19269180]
[78.45873260 -58.83301926]
[66.92223358 -68.43278503]
[56.19561005 -78.92973328]
[46.34843063 -90.25578308]
[37.44455719 -102.33747864]
[29.54173470 -115.09645844]
[22.69121933 -128.44999695]
[16.93743706 -142.31146240]
[12.31770706 -156.59097290]
[8.86198807 -171.19590759]
[6.59269333 -186.03157043]
[5.52453947 -201.00170898]
[5.66445446 -216.00927734]
[7.01153040 -230.95690918]
[9.55703163 -245.74766541]
[13.28444862 -260.28564453]
[18.16960716 -274.47653198]
[24.18082619 -288.22833252]
[31.27911949 -301.45181274]
[39.41844940 -314.06124878]
[48.54603195 -325.97482300]
[58.60266495 -337.11529541]
[69.52313232 -347.41043091]
[81.23661041 -356.79345703]
[93.66712189 -365.20349121]
[106.73405457 -372.58599854]
[120.35266876 -378.89309692]
[134.43463135 -384.08392334]
[148.88862610 -388.12475586]
[163.62091064 -390.98944092]
[178.53591919 -392.65933228]
[193.53694153 -393.12365723]
[208.52668762 -392.37939453]
[223.40794373 -390.43136597]
[238.08418274 -387.29220581]
[252.46022034 -382.98226929]
[266.44284058 -377.52951050]
[279.94134521 -370.96926880]
[292.86819458 -363.34414673]
[305.13958740 -354.70355225]
[316.67587280 -345.10351562]
[327.40225220 -334.60632324]
[337.24917603 -323.28005981]
[346.15280151 -311.19818115]
[354.05532837 -298.43902588]
[360.90554810 -285.08532715]
[366.65902710 -271.22375488]
[371.27844238 -256.94412231]
[374.73385620 -242.33911133]
[377.00280762 -227.50341797]
[378.07064819 -212.53323364]
[377.93038940 -197.52568054]
[376.58297729 -182.57807922]
[374.03717041 -167.78736877]
[370.30941772 -153.24948120]
[365.42395020 -139.05870056]
[359.41241455 -125.30704498]
[352.31384277 -112.08370972]
[344.17422485 -99.47446442]
[335.04638672 -87.56108093]
[324.98950195 -76.42081451]
[314.06881714 -66.12592316]
[302.35513306 -56.74317551]
[289.92443848 -48.33341599]
[276.85733032 -40.95119476]
[263.23858643 -34.64437866]
[249.15649414 -29.45387840]
[234.70242310 -25.41335487]
[219.97007751 -22.54901123]
[205.05502319 -20.87942505]
[190.05398560 -20.41542435]
[175.06427002 -21.16001892]
[160.18305969 -23.10837936]
[145.50689697 -26.24786949]
[141.19931030 -11.87968636]
[136.89172363 2.48849797]
[148.24700928 13.94315529]
[152.31764221 29.64703751]
[147.90608215 45.35589600]
[136.12049866 56.77498627]
[120.09829712 60.73320389]
[116.09055328 75.18788910]
[112.08280945 89.64257812]
[132.39247131 128.33316040]
[132.08041382 143.32991028]
[131.76837158 158.32666016]
[131.45631409 173.32342529]
[131.14425659 188.32017517]
[130.83219910 203.31692505]
[130.52014160 218.31367493]
[130.20808411 233.31044006]
[129.89602661 248.30718994]
[129.58396912 263.30395508]
[144.07690430 267.50122070]
[156.98916626 275.30737305]
[167.44038391 286.19015503]
[174.71795654 299.40753174]
[178.32569885 314.05834961]
[178.01762390 329.14370728]
[173.81474304 343.63500977]
[166.00360107 356.54425049]
[155.11680603 366.99127197]
[141.89660645 374.26373291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 33]
[26 32]
[27 31]
[34 130]
[35 129]
[36 128]
[42 123]
[43 122]
[44 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
