%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCCGCCUGCGGGGGGGGGGGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGxxxxxxxxxxCCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCCCCCCCCCCCUUGGCGCCUGC\
) } def
/len { sequence length } bind def

/coor [
[104.18168640 483.93405151]
[90.69281006 477.20251465]
[79.20730591 467.43795776]
[70.39293671 455.20806885]
[64.76215363 441.22387695]
[62.64232635 426.29840088]
[64.15669250 411.29937744]
[69.21721649 397.09887695]
[77.52968597 384.52246094]
[88.61081696 374.30130005]
[101.81636810 367.02966309]
[116.37859344 363.13027954]
[116.07061768 348.13345337]
[115.76264191 333.13662720]
[115.45465851 318.13977051]
[115.14668274 303.14294434]
[114.83870697 288.14611816]
[114.53073120 273.14926147]
[114.22274780 258.15243530]
[113.91477203 243.15559387]
[113.60679626 228.15875244]
[113.29882050 213.16191101]
[112.99083710 198.16506958]
[112.22118378 183.18482971]
[110.99057007 168.23539734]
[109.75995636 153.28596497]
[101.00458527 141.23637390]
[107.58362579 126.84794617]
[81.17052460 114.62928772]
[82.87512207 90.07969666]
[73.71318817 78.20287323]
[64.55124664 66.32604980]
[55.38931656 54.44922638]
[46.22737885 42.57240295]
[37.06544495 30.69557953]
[24.15545845 38.36953735]
[10.41458893 44.43137360]
[-3.95678043 48.79269409]
[-18.74907303 51.38989639]
[-33.74657440 52.18510437]
[-48.73057175 51.16672134]
[-63.48256302 48.34960175]
[-77.78741455 43.77482224]
[-91.43651581 37.50910187]
[-104.23083496 29.64381027]
[-115.98378754 20.29364586]
[-126.52397156 9.59496498]
[-135.69769287 -2.29621720]
[-143.37117004 -15.20649052]
[-149.43249512 -28.94758606]
[-153.79327393 -43.31911850]
[-156.38992310 -58.11150742]
[-157.18457031 -73.10903931]
[-156.16563416 -88.09300232]
[-153.34796143 -102.84488678]
[-148.77264404 -117.14956665]
[-142.50640869 -130.79843140]
[-134.64064026 -143.59245300]
[-125.29003906 -155.34506226]
[-114.59096527 -165.88484192]
[-102.69944000 -175.05812073]
[-89.78887939 -182.73110962]
[-76.04755402 -188.79191589]
[-61.67586136 -193.15216064]
[-46.88337326 -195.74826050]
[-31.88581467 -196.54234314]
[-16.90188980 -195.52284241]
[-2.15011144 -192.70462036]
[12.15439796 -188.12876892]
[25.80303574 -181.86203003]
[38.59676361 -173.99578857]
[50.34901428 -164.64474487]
[60.88840103 -153.94526672]
[70.06123352 -142.05340576]
[77.73374176 -129.14256287]
[83.79403687 -115.40100861]
[88.15374756 -101.02915192]
[90.74929047 -86.23656464]
[91.54281616 -71.23897552]
[90.52275085 -56.25509262]
[87.70397186 -41.50341797]
[83.12759399 -27.19908142]
[76.86034393 -13.55067825]
[68.99361420 -0.75724405]
[59.64213181 10.99465561]
[48.94226837 21.53364372]
[58.10420227 33.41046906]
[67.26613617 45.28729248]
[76.42807770 57.16411591]
[85.59001160 69.04093933]
[94.75194550 80.91776276]
[111.78132629 79.26921844]
[126.89633942 92.58984375]
[140.32379150 85.90377045]
[153.75123596 79.21768951]
[167.17869568 72.53161621]
[166.09120178 57.36962891]
[170.89347839 42.94719696]
[180.85321045 31.46363449]
[194.45159912 24.67010117]
[209.61500549 23.60256004]
[224.03111267 28.42380714]
[235.50155640 38.39863205]
[242.27720642 52.00595474]
[243.32479858 67.17074585]
[238.48458862 81.58049774]
[228.49467468 93.03781891]
[214.87846375 99.79554749]
[199.71229553 100.82319641]
[185.30892944 95.96403503]
[173.86476135 85.95906830]
[160.43731689 92.64514160]
[147.00987244 99.33121490]
[133.58241272 106.01728821]
[148.47303772 104.20910645]
[160.73213196 112.85286713]
[164.03030396 127.48577118]
[156.66470337 140.55282593]
[142.43821716 145.30747986]
[128.69598389 139.29489136]
[122.53305817 125.61733246]
[131.37644958 138.73620605]
[124.70938873 152.05535889]
[125.94000244 167.00479126]
[127.17061615 181.95422363]
[130.22000122 186.34243774]
[131.14506531 190.99537659]
[130.20927429 195.04431152]
[127.98767853 197.85710144]
[128.29565430 212.85394287]
[128.60363770 227.85076904]
[128.91160583 242.84761047]
[129.21958923 257.84445190]
[129.52757263 272.84127808]
[129.83554077 287.83813477]
[130.14352417 302.83496094]
[130.45149231 317.83181763]
[130.75947571 332.82864380]
[131.06745911 347.82546997]
[131.37542725 362.82232666]
[146.08546448 366.12054443]
[159.57843018 372.84390259]
[171.06983948 382.60150146]
[179.89163208 394.82604980]
[185.53088379 408.80682373]
[187.65975952 423.73101807]
[186.15447998 438.73092651]
[181.10256958 452.93450928]
[172.79772949 465.51596069]
[161.72280884 475.74383545]
[148.52165222 483.02346802]
[133.96180725 486.93167114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 125]
[25 124]
[26 123]
[28 121]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[93 114]
[94 113]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
