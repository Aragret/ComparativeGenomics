%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCCUACGGGGGGGGGGUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAAxxxxxxxxxxCAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAACCCCCCCCCCAACUUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[103.66181946 596.28302002]
[89.81588745 590.26702881]
[78.10722351 580.73760986]
[69.40470123 568.40191650]
[64.35409546 554.17541504]
[63.33020401 539.11370850]
[66.40900421 524.33453369]
[73.36202240 510.93463135]
[83.67330933 499.90829468]
[96.57769012 492.07379150]
[111.11757660 488.01248169]
[111.11757660 473.01248169]
[111.11757660 458.01248169]
[111.11757660 443.01248169]
[111.11757660 428.01248169]
[111.11757660 413.01248169]
[111.11757660 398.01248169]
[111.11757660 383.01248169]
[111.11757660 368.01248169]
[111.11757660 353.01248169]
[111.11757660 338.01248169]
[100.43670654 327.69479370]
[100.22302246 312.48266602]
[111.11757660 301.34954834]
[111.11757660 286.34954834]
[111.11757660 271.34954834]
[111.11757660 256.34954834]
[110.18194580 241.37875366]
[108.31433868 226.49546814]
[106.44672394 211.61218262]
[104.57910919 196.72891235]
[90.80017853 191.07147217]
[81.64214325 179.19770813]
[79.64382935 164.23530579]
[85.44116211 150.18939209]
[97.56975555 140.87036133]
[95.70214844 125.98708344]
[78.48007202 115.18856812]
[74.07466125 95.34417725]
[85.10964203 78.27265930]
[80.50408173 63.99720001]
[75.89851379 49.72173691]
[71.29295349 35.44627762]
[66.68738556 21.17081642]
[50.31618500 19.54165459]
[36.10034943 11.38098240]
[26.50878143 -1.83687055]
[23.18384552 -17.76437187]
[26.66032600 -33.59764481]
[14.39795780 -42.23675919]
[-1.97441077 -43.17354965]
[-9.10663319 -57.94052124]
[0.33830896 -71.34667969]
[16.64426994 -69.60092163]
[23.03707504 -54.49912643]
[35.29944229 -45.86001205]
[39.68728256 -49.46743393]
[44.55664825 -52.39247894]
[49.80228424 -54.57191467]
[47.93466949 -69.45519257]
[46.06705475 -84.33847809]
[44.19944382 -99.22175598]
[42.33182907 -114.10503387]
[27.47076797 -116.93417358]
[14.21228790 -124.21894836]
[3.85531855 -135.24565125]
[-2.58546877 -148.93402100]
[-4.47907162 -163.94300842]
[-1.63997364 -178.80216980]
[5.65367889 -192.05577087]
[16.68732834 -202.40534973]
[30.38001060 -208.83695984]
[45.39025497 -210.72050476]
[60.24751282 -207.87144470]
[73.49621582 -200.56890869]
[83.83840179 -189.52833557]
[90.26083374 -175.83134460]
[92.13432312 -160.81983948]
[89.27531433 -145.96449280]
[81.96390533 -132.72068787]
[70.91639709 -122.38591003]
[57.21511078 -115.97264862]
[59.08272171 -101.08937073]
[60.95033646 -86.20608521]
[62.81794739 -71.32280731]
[64.68556213 -56.43952942]
[80.48873901 -51.94105148]
[93.03931427 -41.25742722]
[100.04673004 -26.28285408]
[100.20906830 -9.69955730]
[93.45470428 5.50261641]
[80.96284485 16.56525230]
[85.56841278 30.84071350]
[90.17398071 45.11617279]
[94.77954102 59.39163589]
[99.38510895 73.66709137]
[109.63526154 75.48548126]
[118.38037109 81.13304901]
[131.47352600 73.81394196]
[142.34889221 60.80768204]
[157.85746765 67.65753937]
[155.56849670 84.45625305]
[138.79263306 86.90709686]
[125.69947815 94.22620392]
[126.13926697 103.24633026]
[123.50639343 111.88484955]
[118.11034393 119.12630463]
[110.58542633 124.11946869]
[112.45304108 139.00274658]
[126.50811768 145.03614807]
[135.59613037 157.21418762]
[137.35664368 172.20642090]
[131.41629028 185.97479248]
[119.46238708 194.86129761]
[121.33000183 209.74456787]
[123.19761658 224.62785339]
[125.06523132 239.51113892]
[135.41474915 228.65353394]
[150.40460205 228.10183716]
[161.52423096 238.16929626]
[162.46044922 253.14004517]
[152.68168640 264.51440430]
[137.73988342 265.83450317]
[126.11757660 256.34954834]
[126.11757660 271.34954834]
[126.11757660 286.34954834]
[126.11757660 301.34954834]
[137.01213074 312.48266602]
[136.79844666 327.69479370]
[126.11757660 338.01248169]
[126.11757660 353.01248169]
[126.11757660 368.01248169]
[126.11757660 383.01248169]
[126.11757660 398.01248169]
[126.11757660 413.01248169]
[126.11757660 428.01248169]
[126.11757660 443.01248169]
[126.11757660 458.01248169]
[126.11757660 473.01248169]
[126.11757660 488.01248169]
[140.65747070 492.07379150]
[153.56184387 499.90829468]
[163.87312317 510.93463135]
[170.82615662 524.33453369]
[173.90495300 539.11370850]
[172.88105774 554.17541504]
[167.83045959 568.40191650]
[159.12792969 580.73760986]
[147.41926575 590.26702881]
[133.57333374 596.28302002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[25 126]
[26 125]
[27 124]
[28 117]
[29 116]
[30 115]
[31 114]
[36 109]
[37 108]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[49 56]
[50 55]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
