%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACUUCUAACGGGGGGGGGGCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCxxxxxxxxxxACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCCCCCCCCCCCUCUACUUCUACC\
) } def
/len { sequence length } bind def

/coor [
[107.73857880 340.79684448]
[100.99132538 327.38861084]
[95.47314453 313.42950439]
[91.22848511 299.03198242]
[88.29150391 284.31192017]
[86.68585968 269.38781738]
[86.42446899 254.37989807]
[87.50945282 239.40896606]
[89.93206024 224.59555054]
[93.67279816 210.05892944]
[98.70153809 195.91616821]
[104.97779083 182.28109741]
[112.45102692 169.26353455]
[121.06107330 156.96827698]
[130.73861694 145.49433899]
[120.18520355 134.83480835]
[109.63179016 124.17527771]
[99.07838440 113.51574707]
[85.14949036 107.94925690]
[70.15624237 108.39941406]
[55.16300201 108.84957886]
[40.16975784 109.29973602]
[25.17651367 109.74990082]
[17.83955765 123.17063904]
[4.85581303 131.06489563]
[-10.23575211 131.39811707]
[-23.37988663 124.18093109]
[-31.09473801 111.43939972]
[-46.08798218 111.88955688]
[-61.08122635 112.33972168]
[-76.07447052 112.78987885]
[-91.06771088 113.24004364]
[-106.06095886 113.69020081]
[-113.26700592 127.25370026]
[-126.29787445 135.38339233]
[-141.64833069 135.89244080]
[-155.18917847 128.64392090]
[-163.27798462 115.58762360]
[-163.73892212 100.23564911]
[-156.44798279 86.71759796]
[-143.36639404 78.66975403]
[-128.01304626 78.25694275]
[-114.51792145 85.59021759]
[-106.51111603 98.69696045]
[-91.51787567 98.24679565]
[-76.52462769 97.79663849]
[-61.53138351 97.34647369]
[-46.53814316 96.89631653]
[-31.54489708 96.44615173]
[-24.60836411 83.26472473]
[-11.92089653 75.27197266]
[3.16347575 74.69918060]
[16.59744263 81.80026245]
[24.72635269 94.75665283]
[39.71959686 94.30649567]
[54.71284103 93.85633087]
[69.70608521 93.40617371]
[84.69932556 92.95600891]
[95.03733826 82.08745575]
[94.73720551 67.09046173]
[94.43707275 52.09346008]
[81.87128448 43.18239975]
[77.01877594 28.74956894]
[81.54180908 14.39665318]
[93.50591278 5.56499004]
[93.20578003 -9.43200684]
[92.90564728 -24.42900467]
[92.60551453 -39.42600250]
[78.07053375 -43.57638931]
[65.40555573 -51.82804489]
[55.73674774 -63.44723129]
[49.92384720 -77.40077972]
[48.48373795 -92.44795990]
[51.54447174 -107.25077057]
[58.83388901 -120.49297333]
[69.70382690 -130.99707031]
[83.18772125 -137.82904053]
[98.08661652 -140.38139343]
[113.07569122 -138.42716980]
[126.82213593 -132.14016724]
[138.10363770 -122.07938385]
[145.91703796 -109.13943481]
[149.56756592 -94.47093201]
[148.73063660 -79.37818909]
[143.48068237 -65.20323181]
[134.28448486 -53.20650482]
[121.95980072 -44.45473862]
[107.60250854 -39.72613144]
[107.90264130 -24.72913551]
[108.20277405 -9.73213863]
[108.50290680 5.26485825]
[120.81077576 13.61077023]
[125.90444183 27.77122879]
[121.63327789 42.38665009]
[109.43407440 51.79332733]
[109.73420715 66.79032898]
[110.03433990 81.78732300]
[114.11328125 90.07188416]
[113.54427338 97.82998657]
[109.73791504 102.96233368]
[120.29132080 113.62186432]
[130.84472656 124.28139496]
[141.39814758 134.94091797]
[152.96833801 125.37866974]
[165.34912109 116.89205933]
[178.44081116 109.54943848]
[192.13796997 103.40991211]
[206.33035278 98.52292633]
[220.90367126 94.92781830]
[235.74057007 92.65353394]
[250.72161865 91.71839142]
[265.72619629 92.12991333]
[280.63345337 93.88479614]
[295.32339478 96.96890259]
[309.67773438 101.35739899]
[323.58093262 107.01496124]
[336.92098999 113.89602661]
[349.59051514 121.94519043]
[361.48751831 131.09765625]
[372.51620483 141.27972412]
[382.58773804 152.40940857]
[391.62109375 164.39710999]
[399.54348755 177.14630127]
[406.29116821 190.55433655]
[411.80975342 204.51324463]
[416.05487061 218.91065979]
[418.99227905 233.63063049]
[420.59838867 248.55465698]
[420.86022949 263.56259155]
[419.77572632 278.53356934]
[417.35354614 293.34704590]
[413.61328125 307.88375854]
[408.58496094 322.02670288]
[402.30911255 335.66195679]
[394.83627319 348.67974854]
[386.22659302 360.97525024]
[376.54940796 372.44949341]
[365.88262939 383.01010132]
[354.31216431 392.57199097]
[341.93112183 401.05822754]
[328.83920288 408.40045166]
[315.14184570 414.53955078]
[300.94931030 419.42611694]
[286.37588501 423.02078247]
[271.53890991 425.29461670]
[256.55783081 426.22927856]
[241.55329895 425.81732178]
[226.64607239 424.06198120]
[211.95622253 420.97741699]
[197.60200500 416.58847046]
[183.69900513 410.93051147]
[170.35916138 404.04901123]
[157.68986511 395.99948120]
[145.79315186 386.84664917]
[134.76478577 376.66424561]
[124.69356537 365.53424072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 103]
[16 102]
[17 101]
[18 100]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[59 97]
[60 96]
[61 95]
[65 91]
[66 90]
[67 89]
[68 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
