%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUAGCAGGCGGGGGGGGGGAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCxxxxxxxxxxCUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCCCCCCCCCCCAUCAUAGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 396.39138794]
[70.66226196 391.88467407]
[57.50136948 384.57879639]
[46.08077240 374.77294922]
[36.86813354 362.86865234]
[30.24070549 349.35339355]
[26.46987534 334.78060913]
[25.71005821 319.74707031]
[27.99236870 304.86834717]
[33.22334671 290.75375366]
[41.18878555 277.98126221]
[51.56250763 267.07388306]
[63.91971207 258.47830200]
[77.75438690 252.54644775]
[92.50000000 249.52127075]
[92.50000000 234.52127075]
[92.50000000 219.52127075]
[92.50000000 204.52127075]
[92.50000000 189.52127075]
[92.50000000 174.52127075]
[92.50000000 159.52127075]
[92.50000000 144.52127075]
[92.50000000 129.52127075]
[92.50000000 114.52127838]
[88.54619598 100.05174255]
[80.91822815 87.13608551]
[73.29026031 74.22043610]
[59.61029053 66.27253723]
[59.80022812 51.37914658]
[52.17226028 38.46349335]
[44.54429626 25.54783821]
[36.91632843 12.63218403]
[29.28836060 -0.28347048]
[21.66039467 -13.19912434]
[14.03242779 -26.11477852]
[13.54631424 -11.12265778]
[7.76593733 2.71884656]
[-2.55460405 13.60399342]
[-16.06890869 20.11272430]
[-31.01392174 21.39591789]
[-45.43994141 17.28617287]
[-57.46496582 8.31964111]
[-65.52024078 -4.33392048]
[-68.55487823 -19.02374649]
[-66.17298126 -33.83342361]
[-58.68529892 -46.83090973]
[-47.06865692 -56.32056808]
[-32.83854294 -61.06439590]
[-17.85139847 -60.44351578]
[-4.06242180 -54.53893661]
[6.73032427 -44.11980057]
[3.20703340 -58.70014191]
[-0.31625727 -73.28048706]
[-3.83954787 -87.86083221]
[-7.36283875 -102.44117737]
[-22.35890770 -101.36054230]
[-37.32830429 -102.76306915]
[-51.86264801 -106.61049652]
[-65.56542969 -112.79785919]
[-78.06284332 -121.15637207]
[-89.01393127 -131.45799255]
[-98.11994171 -143.42170715]
[-105.13246918 -156.72111511]
[-109.86019897 -170.99342346]
[-112.17414856 -185.84924316]
[-112.01120758 -200.88331604]
[-109.37580109 -215.68548584]
[-104.33984375 -229.85195923]
[-97.04071045 -242.99626160]
[-87.67752838 -254.75979614]
[-76.50572968 -264.82165527]
[-63.83009720 -272.90731812]
[-49.99642181 -278.79623413]
[-35.38209915 -282.32772827]
[-20.38582420 -283.40548706]
[-5.41669941 -282.00006104]
[9.11690331 -278.14984131]
[22.81849670 -271.95983887]
[35.31429291 -263.59890747]
[46.26339722 -253.29518127]
[55.36710739 -241.32971191]
[62.37707138 -228.02894592]
[67.10205078 -213.75573730]
[69.41313934 -198.89947510]
[69.24729919 -183.86543274]
[66.60904694 -169.06376648]
[61.57035446 -154.89825439]
[54.26869202 -141.75537109]
[44.90324020 -129.99363708]
[33.72950745 -119.93394470]
[21.05231476 -111.85071564]
[7.21750498 -105.96446228]
[10.74079609 -91.38411713]
[14.26408672 -76.80377960]
[17.78737640 -62.22343445]
[21.31066704 -47.64308929]
[26.94808197 -33.74274445]
[34.57604980 -20.82709122]
[42.20401382 -7.91143703]
[49.83198166 5.00421715]
[57.45994949 17.91987038]
[65.08791351 30.83552551]
[72.71588135 43.75117874]
[85.85025024 50.77525711]
[86.20590973 66.59246826]
[93.83387756 79.50811768]
[101.46184540 92.42377472]
[104.59779358 88.17804718]
[109.24554443 84.96157074]
[115.11163330 83.16601562]
[121.81388855 83.10672760]
[136.77803040 82.07022858]
[151.74218750 81.03373718]
[166.70632935 79.99724579]
[181.67047119 78.96075439]
[194.96234131 69.35563660]
[209.81382751 76.31015778]
[210.94700623 92.67010498]
[197.19615173 101.60577393]
[182.70697021 93.92490387]
[167.74282837 94.96139526]
[152.77867126 95.99788666]
[137.81452942 97.03437805]
[122.85037994 98.07086945]
[136.47956848 104.33545685]
[151.42311096 105.63568878]
[163.40518188 114.65956116]
[168.78189087 128.66281128]
[165.91813660 143.38690186]
[155.68482971 154.35409546]
[141.19400024 158.22914124]
[126.85247803 153.83360291]
[117.02166748 142.50421143]
[114.69138336 127.68501282]
[107.50000000 114.52127838]
[107.50000000 129.52127075]
[107.50000000 144.52127075]
[107.50000000 159.52127075]
[107.50000000 174.52127075]
[107.50000000 189.52127075]
[107.50000000 204.52127075]
[107.50000000 219.52127075]
[107.50000000 234.52127075]
[107.50000000 249.52127075]
[122.24561310 252.54644775]
[136.08029175 258.47830200]
[148.43750000 267.07388306]
[158.81121826 277.98126221]
[166.77665710 290.75375366]
[172.00762939 304.86834717]
[174.28994751 319.74707031]
[173.53012085 334.78060913]
[169.75929260 349.35339355]
[163.13186646 362.86865234]
[153.91921997 374.77294922]
[142.49862671 384.57879639]
[129.33773804 391.88467407]
[114.97548676 396.39138794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 107]
[26 106]
[27 105]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
