%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUCCCUGUAGGGGGGGGGGCGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAxxxxxxxxxxCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUCCCCCCCCCCAUUCAUCCCUGUA\
) } def
/len { sequence length } bind def

/coor [
[308.95483398 285.58111572]
[300.75119019 276.27932739]
[293.12442017 266.49880981]
[286.10238647 256.27529907]
[279.71075439 245.64611816]
[273.97286987 234.65008545]
[268.90975952 223.32737732]
[264.53988647 211.71934509]
[260.87927246 199.86837769]
[257.94125366 187.81779480]
[255.73661804 175.61158752]
[254.27342224 163.29435730]
[253.55703735 150.91110229]
[253.59007263 138.50706482]
[254.37245178 126.12754059]
[239.49914551 124.18204498]
[224.62583923 122.23654938]
[209.75254822 120.29106140]
[194.87924194 118.34556580]
[180.00595093 116.40007019]
[165.13264465 114.45458221]
[150.25933838 112.50908661]
[135.38604736 110.56359100]
[120.51274109 108.61810303]
[105.63944244 106.67260742]
[106.56571960 120.84351349]
[96.80973053 134.82395935]
[77.45953369 142.47622681]
[62.47829819 143.22630310]
[47.49706268 143.97636414]
[34.10105515 152.39405823]
[21.00280380 145.30285645]
[14.63449955 159.22059631]
[2.52066183 168.57545471]
[-12.55503845 171.21777344]
[-27.12831497 166.54035950]
[-37.85033798 155.61805725]
[-42.25725937 140.96072388]
[-39.33640671 125.93649292]
[-29.75896835 113.99784851]
[-15.72576904 107.88819122]
[-0.46153584 109.01148224]
[12.52612209 117.10958862]
[20.25273705 130.32162476]
[32.57718658 121.95758057]
[46.74699402 128.99513245]
[61.72822952 128.24507141]
[76.70946503 127.49500275]
[78.78315735 120.28737640]
[85.00422668 98.66451263]
[72.71216583 90.06769562]
[60.42010498 81.47088623]
[44.04460907 80.59050751]
[36.86154938 65.84819794]
[46.26024628 52.40957642]
[62.57212448 54.09914780]
[69.01692200 69.17882538]
[81.30898285 77.77563477]
[93.60104370 86.37245178]
[107.58493805 91.79930878]
[122.45823669 93.74480438]
[137.33154297 95.69029236]
[152.20483398 97.63578796]
[167.07814026 99.58128357]
[181.95143127 101.52677155]
[196.82473755 103.47226715]
[211.69804382 105.41775513]
[226.57133484 107.36325073]
[241.44464111 109.30874634]
[256.31793213 111.25423431]
[260.43826294 92.31022644]
[266.32763672 73.84005737]
[273.93338013 56.00852585]
[283.18756104 38.97472763]
[294.00747681 22.89062309]
[306.29647827 7.89968967]
[319.94485474 -5.86435652]
[334.83071899 -18.27875710]
[350.82116699 -29.23280334]
[367.77343750 -38.62882614]
[385.53619385 -46.38306046]
[403.95086670 -52.42640305]
[422.85311890 -56.70501709]
[442.07424927 -59.18082428]
[461.44265747 -59.83182526]
[480.78555298 -58.65231705]
[499.93032837 -55.65292740]
[518.70611572 -50.86051941]
[536.94537354 -44.31796265]
[554.48541260 -36.08373642]
[571.16973877 -26.23141861]
[586.84948730 -14.84901905]
[601.38476562 -2.03819633]
[614.64599609 12.08664894]
[626.40020752 2.76786423]
[638.15435791 -6.55092049]
[649.90850830 -15.86970520]
[650.16217041 -31.50523186]
[660.44580078 -43.28576279]
[675.90380859 -45.64889526]
[689.23736572 -37.47882843]
[694.15075684 -22.63321495]
[688.32409668 -8.12170506]
[674.50848389 -0.79618704]
[659.22729492 -4.11554670]
[647.47314453 5.20323801]
[635.71899414 14.52202320]
[623.96478271 23.84080696]
[631.00207520 34.04568481]
[637.40997314 44.65718460]
[643.16522217 55.63654327]
[648.24664307 66.94366455]
[652.63574219 78.53724670]
[656.31640625 90.37493134]
[659.27526855 102.41349030]
[661.50140381 114.60894775]
[662.98675537 126.91674042]
[663.72583008 139.29191589]
[663.71588135 151.68927002]
[662.95697021 164.06350708]
[661.45184326 176.36943054]
[659.20605469 188.56205750]
[656.22766113 200.59687805]
[652.52764893 212.42988586]
[648.11938477 224.01786804]
[643.01910400 235.31848145]
[637.24536133 246.29045105]
[630.81921387 256.89364624]
[623.76416016 267.08938599]
[616.10595703 276.84033203]
[607.87249756 286.11093140]
[599.09399414 294.86727905]
[589.80236816 303.07733154]
[580.03161621 310.71115112]
[569.81738281 317.74081421]
[559.19708252 324.14059448]
[548.20935059 329.88714600]
[536.89440918 334.95941162]
[525.29364014 339.33889771]
[513.44927979 343.00958252]
[501.40472412 345.95800781]
[489.20388794 348.17340088]
[476.89135742 349.64767456]
[464.51214600 350.37539673]
[452.11145020 350.35391235]
[439.73455811 349.58328247]
[427.42669678 348.06628418]
[415.23284912 345.80850220]
[403.19757080 342.81811523]
[391.36480713 339.10604858]
[379.77777100 334.68582153]
[368.47885132 329.57363892]
[357.50927734 323.78808594]
[346.90917969 317.35031128]
[336.71728516 310.28384399]
[326.97079468 302.61447144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[28 48]
[29 47]
[30 46]
[32 44]
[50 59]
[51 58]
[52 57]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
