%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAACUACUAGGGGGGGGGGUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUxxxxxxxxxxUACCGUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCCCCCCCCCCCUAACUACUA\
) } def
/len { sequence length } bind def

/coor [
[83.65587616 377.72708130]
[70.43567657 370.45462036]
[59.54887772 360.00762939]
[51.73774719 347.09835815]
[47.53486633 332.60705566]
[47.22679138 317.52172852]
[50.83453369 302.87088013]
[58.11210632 289.65350342]
[68.56331635 278.77072144]
[81.47557831 270.96459961]
[95.96851349 266.76730347]
[95.65645599 251.77055359]
[95.34439850 236.77378845]
[95.03234100 221.77703857]
[94.72029114 206.78028870]
[94.40823364 191.78353882]
[94.09617615 176.78677368]
[93.78411865 161.79002380]
[93.47206116 146.79327393]
[93.16000366 131.79652405]
[81.75641632 126.92537689]
[73.00483704 118.14015961]
[68.17747498 106.71796417]
[67.97605896 94.31919861]
[72.42987823 82.74623871]
[80.89147949 73.68140411]
[75.11521149 59.83818436]
[69.33893585 45.99496460]
[62.85076904 32.47077560]
[55.66826248 19.30219269]
[47.50335312 19.95063210]
[39.52233887 18.29551506]
[32.35890579 14.49100018]
[26.57545662 8.86099243]
[22.61894608 1.87166595]
[20.78639221 -5.90708256]
[21.20266724 -13.84809017]
[7.67847681 -20.33625603]
[-5.84571314 -26.82442093]
[-19.36990356 -33.31258392]
[-32.89409256 -39.80075073]
[-46.41828156 -46.28891754]
[-59.94247437 -52.77708054]
[-78.23301697 -50.92345428]
[-87.61488342 -65.72144318]
[-101.27112579 -71.92684937]
[-118.19265747 -72.97471619]
[-121.87008667 -89.52503204]
[-106.98458099 -97.64032745]
[-95.06571960 -85.58309174]
[-81.40947723 -79.37768555]
[-69.93533325 -83.33386993]
[-58.48523712 -78.22367096]
[-53.45430756 -66.30126953]
[-39.93011856 -59.81310654]
[-26.40592766 -53.32493973]
[-12.88173771 -46.83677673]
[0.64245212 -40.34860992]
[14.16664219 -33.86044693]
[27.69083214 -27.37228012]
[31.49374580 -30.98144913]
[35.90181351 -33.81996918]
[40.76106644 -35.78870392]
[45.90178299 -36.81888580]
[48.38690186 -51.61159134]
[50.87202072 -66.40429688]
[53.35713959 -81.19700623]
[55.84225845 -95.98971558]
[42.11186981 -102.24581909]
[30.46914673 -111.84318542]
[21.70791245 -124.12744904]
[16.42552185 -138.26104736]
[14.98213673 -153.28034973]
[17.47616959 -168.16127014]
[23.73757362 -181.88925171]
[33.33943558 -193.52825928]
[45.62708282 -202.28475952]
[59.76272583 -207.56169128]
[74.78256989 -208.99926758]
[89.66254425 -206.49949646]
[103.38809204 -200.23278809]
[115.02339935 -190.62643433]
[123.77514648 -178.33540344]
[129.04661560 -164.19772339]
[130.47840881 -149.17733765]
[127.97288513 -134.29832458]
[121.70088196 -120.57519531]
[112.09003448 -108.94359589]
[99.79563141 -100.19659424]
[85.65591431 -94.93058014]
[70.63496399 -93.50459290]
[68.14984894 -78.71189117]
[65.66472626 -63.91918182]
[63.17960739 -49.12647247]
[60.69448853 -34.33376694]
[76.99317169 -13.51445103]
[68.83684540 12.11968422]
[76.01935577 25.28826714]
[83.02365112 12.02403736]
[97.71994781 9.02089691]
[109.36643982 18.47389984]
[109.45048523 33.47366333]
[97.91064453 43.05657578]
[83.18215179 40.21869278]
[88.95842743 54.06191254]
[94.73469543 67.90512848]
[112.97771454 70.17747498]
[127.07431030 81.97818756]
[132.52059937 99.53691864]
[147.16410828 102.78774261]
[161.80760193 106.03856659]
[176.45111084 109.28939056]
[191.60014343 104.72677612]
[202.34808350 115.03846741]
[216.99159241 118.28929138]
[231.63508606 121.54011536]
[247.10559082 116.09991455]
[259.37432861 126.98155975]
[255.82026672 142.99095154]
[240.09953308 147.65901184]
[228.38426208 136.18362427]
[213.74076843 132.93280029]
[199.09725952 129.68196106]
[184.99563599 134.47709656]
[173.20028687 123.93289185]
[158.55677795 120.68206787]
[143.91328430 117.43124390]
[129.26977539 114.18041992]
[120.61659241 125.15472412]
[108.15676117 131.48446655]
[108.46881866 146.48121643]
[108.78087616 161.47796631]
[109.09292603 176.47473145]
[109.40498352 191.47148132]
[109.71704102 206.46823120]
[110.02909851 221.46498108]
[110.34115601 236.46174622]
[110.65321350 251.45849609]
[110.96526337 266.45526123]
[125.62026215 270.04602051]
[138.84606934 277.30825806]
[149.74093628 287.74685669]
[157.56202698 300.65008545]
[161.77610779 315.13815308]
[162.09582520 330.22323608]
[158.49940491 344.87686157]
[151.23204041 358.09985352]
[140.78923035 368.99069214]
[127.88300323 376.80679321]
[113.39331055 381.01528931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 106]
[27 105]
[28 104]
[29 98]
[30 97]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[45 51]
[46 50]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[109 128]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
