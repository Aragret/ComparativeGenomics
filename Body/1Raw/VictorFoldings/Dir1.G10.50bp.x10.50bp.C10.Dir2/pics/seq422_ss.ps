%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACAAAGGGGGGGGGGGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUxxxxxxxxxxAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCACCCCCCCCCCAACAACAAAG\
) } def
/len { sequence length } bind def

/coor [
[84.85353851 395.94885254]
[72.75859833 386.91476440]
[63.55046463 374.95178223]
[57.91243362 360.94766235]
[56.26288223 345.94161987]
[58.72422791 331.04718018]
[65.11381531 317.36959839]
[74.95749664 305.92388916]
[87.52480316 297.55935669]
[101.88315582 292.89672852]
[101.25917816 277.90969849]
[100.63520050 262.92269897]
[100.01122284 247.93566895]
[99.38724518 232.94865417]
[98.76326752 217.96163940]
[98.13928986 202.97462463]
[97.51531982 187.98760986]
[96.89134216 173.00059509]
[96.11149597 158.02087402]
[95.17586517 143.05007935]
[94.24023438 128.07928467]
[80.43380737 120.94721222]
[72.37811279 107.65850830]
[72.44080353 92.11888123]
[80.60345459 78.89560699]
[73.69645691 65.58045197]
[66.78945923 52.26529312]
[56.12783051 41.71400452]
[40.32116699 42.39217377]
[32.45423508 29.74461746]
[19.06795120 22.97650146]
[5.68166590 16.20838737]
[-3.45370889 15.11441517]
[-7.91051006 9.15769005]
[-21.15309525 2.11255479]
[-34.39567947 -4.93257999]
[-50.21303558 -4.58339453]
[-57.81514359 -17.39187431]
[-71.05773163 -24.43700981]
[-77.77215576 -24.59183693]
[-82.63563538 -27.68665123]
[-84.69565582 -32.06064606]
[-97.63371277 -39.65055466]
[-110.57176971 -47.24046326]
[-123.50982666 -54.83037186]
[-136.82414246 -47.17369080]
[-152.18296814 -47.21601868]
[-165.45487976 -54.94596100]
[-173.06977844 -68.28420258]
[-172.97932434 -83.64282990]
[-165.20780945 -96.89044189]
[-151.84576416 -104.46350098]
[-136.48750305 -104.32489777]
[-123.26430511 -96.51190186]
[-115.73316956 -83.12618256]
[-115.91991425 -67.76842499]
[-102.98186493 -60.17851639]
[-90.04380798 -52.58860779]
[-77.10575104 -44.99870300]
[-64.01259613 -37.67959595]
[-50.77000809 -30.63446045]
[-35.89985657 -31.48756218]
[-27.35054588 -18.17516518]
[-14.10796070 -11.13003063]
[-0.86537504 -4.08489609]
[12.44978046 2.82210255]
[25.83606529 9.59021759]
[39.22235107 16.35833168]
[54.07153702 15.19606113]
[62.89594650 28.32771873]
[55.20407104 15.45002079]
[50.11980057 1.33796239]
[47.83121109 -13.48642159]
[48.42296600 -28.47474480]
[51.87316895 -43.07255554]
[58.05419540 -56.73984909]
[66.73738861 -68.97104645]
[77.60154724 -79.31367493]
[90.24477386 -87.38515472]
[104.19937897 -92.88690186]
[118.94913483 -95.61537933]
[133.94842529 -95.46967316]
[148.64239502 -92.45516205]
[162.48748779 -86.68336487]
[174.97151184 -78.36779022]
[185.63270569 -67.81604767]
[194.07664490 -55.41847610]
[199.99098206 -41.63368225]
[203.15695190 -26.97159958]
[203.45741272 -11.97460938]
[200.88127136 2.80251646]
[195.52380371 16.81314087]
[187.58320618 29.53897667]
[177.35322571 40.50926971]
[165.21226501 49.31820679]
[151.60948181 55.63992310]
[137.04804993 59.24056625]
[122.06662750 59.98693848]
[107.21941376 57.85142899]
[93.05564880 52.91303635]
[80.10461426 45.35829544]
[87.01161194 58.67345047]
[93.91860962 71.98860931]
[109.12650299 72.82779694]
[121.75753021 81.33904266]
[128.24534607 95.11919403]
[143.17964172 96.52149963]
[158.11395264 97.92379761]
[165.18759155 84.46897888]
[176.87489319 74.74915314]
[191.39367676 70.24651337]
[206.52989197 71.64769745]
[219.97540283 78.73901367]
[229.67984009 90.43910980]
[234.16337585 104.96379089]
[232.74227905 120.09815216]
[225.63328552 133.53431702]
[213.92044067 143.22335815]
[199.38986206 147.68778992]
[184.25738525 146.24679565]
[170.83058167 139.12011719]
[161.15695190 127.39453888]
[156.71165466 112.85810852]
[141.77734375 111.45580292]
[126.84303284 110.05350494]
[119.94974518 120.58225250]
[109.21102905 127.14366150]
[110.14665985 142.11445618]
[111.08228302 157.08525085]
[114.76113892 165.51838684]
[111.87835693 172.37661743]
[112.50233459 187.36363220]
[113.12631226 202.35064697]
[113.75028992 217.33766174]
[114.37426758 232.32467651]
[114.99824524 247.31169128]
[115.62222290 262.29870605]
[116.24619293 277.28573608]
[116.87017059 292.27273560]
[131.56642151 295.72570801]
[144.78553772 303.01663208]
[155.54656982 313.60449219]
[163.05099487 326.70358276]
[166.74191284 341.34185791]
[166.34545898 356.43310547]
[161.89102173 370.85742188]
[153.70918274 383.54440308]
[142.40705872 393.55264282]
[128.82336426 400.13943481]
[113.96609497 402.81597900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 129]
[20 128]
[21 127]
[25 103]
[26 102]
[27 101]
[28 70]
[30 68]
[31 67]
[32 66]
[34 65]
[35 64]
[36 63]
[38 61]
[39 60]
[42 59]
[43 58]
[44 57]
[45 56]
[106 125]
[107 124]
[108 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
