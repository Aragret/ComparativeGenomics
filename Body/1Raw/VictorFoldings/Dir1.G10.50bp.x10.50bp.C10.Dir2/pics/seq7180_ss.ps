%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCCCACGGGGGGGGGGAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCxxxxxxxxxxUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAACCCCCCCCCCUUCUUCUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 380.44876099]
[71.19830322 374.43273926]
[59.48964310 364.90332031]
[50.78712082 352.56762695]
[45.73651886 338.34112549]
[44.71262741 323.27944946]
[47.79142761 308.50027466]
[54.74444962 295.10034180]
[65.05573273 284.07400513]
[77.96011353 276.23950195]
[92.50000000 272.17819214]
[92.50000000 257.17819214]
[92.50000000 242.17819214]
[92.50000000 227.17819214]
[92.50000000 212.17819214]
[92.50000000 197.17819214]
[92.50000000 182.17819214]
[92.50000000 167.17819214]
[92.50000000 152.17819214]
[92.50000000 137.17819214]
[80.34197235 132.43501282]
[70.51146698 123.85150909]
[64.17241669 112.44396973]
[49.30937195 114.46630859]
[43.77042770 118.26467896]
[38.01527786 118.59565735]
[33.78743744 116.25025940]
[18.85313034 117.65256500]
[3.91882300 119.05486298]
[-4.39542294 122.99506378]
[-11.34025669 120.32768250]
[-26.30050659 121.41899109]
[-41.26075363 122.51029968]
[-52.79530334 133.66081238]
[-68.68559265 131.45214844]
[-76.74195862 117.57863617]
[-70.78424072 102.68282318]
[-55.38269424 98.19151306]
[-42.35206604 107.55005646]
[-27.39181709 106.45874023]
[-12.43156719 105.36743164]
[2.51651931 104.12055969]
[17.45082664 102.71825409]
[32.38513565 101.31594849]
[47.28703690 99.60326385]
[62.15008545 97.58092499]
[67.00415039 81.29861450]
[78.47991180 68.76934052]
[94.27438354 62.50753021]
[111.21788788 63.76980591]
[118.40039825 50.60122299]
[125.58290863 37.43264008]
[115.23262024 26.41769600]
[108.80240631 12.76138401]
[106.91061401 -2.19353151]
[109.73003387 -16.98089027]
[116.97218323 -30.15487480]
[127.91678619 -40.43138123]
[141.48339844 -46.81316757]
[156.33802795 -48.68663788]
[171.02435303 -45.88080215]
[178.20686340 -59.04938507]
[165.09542847 -51.76307678]
[150.83160400 -47.12161636]
[135.94302368 -45.29670715]
[120.98046875 -46.35584641]
[106.49742126 -50.25986481]
[93.02964783 -56.86433792]
[81.07534790 -65.92495728]
[71.07674408 -77.10654449]
[63.40369797 -89.99546814]
[58.34005737 -104.11493683]
[56.07313919 -118.94264984]
[56.68679428 -133.93009949]
[60.15832901 -148.52284241]
[66.35932159 -162.18109131]
[75.06038666 -174.39958191]
[85.93965149 -184.72633362]
[98.59465790 -192.77932739]
[112.55728149 -198.26066589]
[127.31101227 -200.96759033]
[142.31007385 -200.79995728]
[156.99963379 -197.76397705]
[170.83625793 -191.97195435]
[183.30813599 -183.63813782]
[193.95387268 -173.07083130]
[202.37969971 -160.66091919]
[208.27388000 -146.86750793]
[211.41841125 -132.20080566]
[211.69696045 -117.20339203]
[209.09922791 -102.43004608]
[203.72128296 -88.42726898]
[195.76611328 -75.71826935]
[209.29029846 -82.20643616]
[222.81449890 -88.69460297]
[236.33868408 -95.18276215]
[236.30984497 -110.44585419]
[242.91401672 -124.20622253]
[254.83992004 -133.73173523]
[269.71966553 -137.13110352]
[284.59887695 -133.72937012]
[296.52328491 -124.20195007]
[303.12524414 -110.44052887]
[303.09399414 -95.17744446]
[296.43566895 -81.44319153]
[284.47235107 -71.96471405]
[269.57931519 -68.62397766]
[254.71362305 -72.08427429]
[242.82684326 -81.65857697]
[229.30265808 -75.17041016]
[215.77847290 -68.68224335]
[202.25427246 -62.19408035]
[191.37545776 -51.86687469]
[184.19294739 -38.69829178]
[194.50363159 -27.87006378]
[200.97137451 -14.36678314]
[202.95138550 0.49456507]
[200.23730469 15.26022434]
[193.08253479 28.48187256]
[182.17672729 38.85868454]
[168.57922363 45.36530685]
[153.61624146 47.35317993]
[138.75149536 44.61515045]
[131.56898499 57.78372955]
[124.38647461 70.95231628]
[133.31349182 81.87049866]
[137.63423157 95.29547119]
[136.75123596 109.37094116]
[130.78660583 122.15068054]
[120.56508636 131.86763000]
[107.50000000 137.17819214]
[107.50000000 152.17819214]
[107.50000000 167.17819214]
[107.50000000 182.17819214]
[107.50000000 197.17819214]
[107.50000000 212.17819214]
[107.50000000 227.17819214]
[107.50000000 242.17819214]
[107.50000000 257.17819214]
[107.50000000 272.17819214]
[122.03988647 276.23950195]
[134.94427490 284.07400513]
[145.25555420 295.10034180]
[152.20857239 308.50027466]
[155.28736877 323.27944946]
[154.26348877 338.34112549]
[149.21287537 352.56762695]
[140.51036072 364.90332031]
[128.80169678 374.43273926]
[114.95575714 380.44876099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 46]
[24 45]
[27 44]
[28 43]
[29 42]
[31 41]
[32 40]
[33 39]
[50 125]
[51 124]
[52 123]
[61 114]
[62 113]
[93 112]
[94 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
