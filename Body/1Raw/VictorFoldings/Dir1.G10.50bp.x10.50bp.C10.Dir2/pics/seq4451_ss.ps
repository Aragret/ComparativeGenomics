%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCAGCAUGGGGGGGGGGUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAxxxxxxxxxxCUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUCCCCCCCCCCUCUCCAACAU\
) } def
/len { sequence length } bind def

/coor [
[84.15229034 362.91622925]
[70.30635071 356.90017700]
[58.59768677 347.37075806]
[49.89516449 335.03509521]
[44.84456253 320.80859375]
[43.82067108 305.74688721]
[46.89946747 290.96774292]
[53.85248947 277.56781006]
[64.16377258 266.54147339]
[77.06815338 258.70697021]
[91.60803986 254.64566040]
[91.60803986 239.64566040]
[91.60803986 224.64566040]
[91.60803986 209.64566040]
[91.60803986 194.64566040]
[91.60803986 179.64566040]
[91.60803986 164.64566040]
[91.60803986 149.64566040]
[91.60803986 134.64566040]
[91.60803986 119.64566040]
[85.73227692 133.44694519]
[71.42877960 137.96467590]
[58.69162369 130.04225159]
[56.42046356 115.21518707]
[66.20219421 103.84339142]
[81.20332336 103.87304688]
[66.38555908 101.54193878]
[51.56780243 99.21083832]
[44.19390488 112.43395996]
[32.76233292 122.31784058]
[18.66542244 127.68415833]
[3.61145067 127.90327454]
[-10.58238411 122.96804047]
[-22.20931625 113.49234009]
[-29.87824249 100.63478851]
[-32.68014908 85.95709229]
[-47.49790573 83.62599182]
[-62.31566620 81.29489136]
[-74.94279480 90.79915619]
[-90.58016968 88.50825500]
[-99.95040131 75.78134918]
[-97.49430847 60.16907120]
[-84.66903687 50.93391800]
[-69.08360291 53.55493927]
[-59.98456192 66.47712708]
[-45.16680145 68.80823517]
[-30.34904480 71.13933563]
[-23.17587471 58.03090668]
[-11.92962551 48.14905930]
[2.04509306 42.70096207]
[17.06863022 42.36215591]
[31.32817841 47.19282150]
[43.09650803 56.62821579]
[50.94118500 69.54460144]
[53.89890671 84.39308167]
[68.71666718 86.72418213]
[83.53442383 89.05528259]
[95.70626068 80.28907776]
[98.19137573 65.49636841]
[100.67649841 50.70366287]
[93.82550812 33.64366150]
[105.44304657 20.52753448]
[107.61988068 5.68632936]
[109.79671478 -9.15487576]
[111.97355652 -23.99608231]
[97.88868713 -29.32811928]
[85.27959442 -37.56370544]
[74.73603058 -48.31764984]
[66.75112915 -61.08696365]
[61.69836426 -75.27440643]
[59.81406021 -90.21641541]
[61.18634796 -105.21411133]
[65.75104523 -119.56603241]
[73.29465485 -132.60090637]
[83.46434784 -143.70907593]
[95.78446198 -152.37098694]
[109.67877197 -158.18151855]
[124.49741364 -160.86888123]
[139.54728699 -160.30740356]
[154.12449646 -156.52333069]
[167.54722595 -149.69364929]
[179.18766785 -140.13781738]
[188.50138855 -128.30274963]
[195.05276489 -114.74201202]
[198.53536987 -100.08985901]
[198.78633118 -85.03160095]
[195.79388428 -70.27154541]
[189.69802856 -56.50003433]
[180.78384399 -44.36119080]
[169.46827698 -34.42277527]
[156.28057861 -27.14962196]
[141.83757019 -22.88190842]
[126.81475830 -21.81924438]
[124.63792419 -6.97803926]
[122.46108246 7.86316633]
[120.28424835 22.70437241]
[127.26596069 32.63226318]
[125.52988434 45.05019760]
[115.46920776 53.18878174]
[112.98408508 67.98149109]
[110.49897003 82.77420044]
[119.51649475 94.76103210]
[134.41839600 96.47371674]
[149.32029724 98.18640900]
[164.22219849 99.89910126]
[179.12411499 101.61178589]
[194.02601624 103.32447815]
[208.92791748 105.03717041]
[223.82981873 106.74985504]
[231.53559875 93.61437988]
[243.92163086 84.75402069]
[258.84197998 81.70389557]
[273.71157837 84.99246216]
[285.95419312 94.04994202]
[293.44873047 107.30709076]
[294.89669800 122.46701050]
[290.04724121 136.90316772]
[279.74053955 148.11439514]
[265.76229858 154.15829468]
[250.53433228 153.98771667]
[236.69497681 147.63221741]
[226.64199829 136.19291687]
[222.11712646 121.65176392]
[207.21522522 119.93907166]
[192.31332397 118.22637939]
[177.41142273 116.51369476]
[162.50952148 114.80100250]
[147.60762024 113.08831024]
[132.70570374 111.37562561]
[117.80381012 109.66293335]
[106.60803986 119.64566040]
[106.60803986 134.64566040]
[106.60803986 149.64566040]
[106.60803986 164.64566040]
[106.60803986 179.64566040]
[106.60803986 194.64566040]
[106.60803986 209.64566040]
[106.60803986 224.64566040]
[106.60803986 239.64566040]
[106.60803986 254.64566040]
[121.14792633 258.70697021]
[134.05230713 266.54147339]
[144.36360168 277.56781006]
[151.31661987 290.96774292]
[154.39541626 305.74688721]
[153.37152100 320.80859375]
[148.32092285 335.03509521]
[139.61839294 347.37075806]
[127.90973663 356.90017700]
[114.06379700 362.91622925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 57]
[27 56]
[28 55]
[36 47]
[37 46]
[38 45]
[58 101]
[59 100]
[60 99]
[62 96]
[63 95]
[64 94]
[65 93]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
