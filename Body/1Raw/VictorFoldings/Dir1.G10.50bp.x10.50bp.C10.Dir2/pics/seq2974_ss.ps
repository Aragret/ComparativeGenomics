%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUACCCUAGGGGGGGGGGGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUAxxxxxxxxxxCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUCCCCCCCCCCAUUUACCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 363.71496582]
[71.19830322 357.69894409]
[59.48964310 348.16952515]
[50.78712082 335.83386230]
[45.73651886 321.60733032]
[44.71262741 306.54565430]
[47.79142761 291.76647949]
[54.74444962 278.36657715]
[65.05573273 267.34024048]
[77.96011353 259.50570679]
[92.50000000 255.44441223]
[92.50000000 240.44441223]
[92.50000000 225.44441223]
[92.50000000 210.44441223]
[92.50000000 195.44441223]
[92.50000000 180.44441223]
[92.50000000 165.44441223]
[92.50000000 150.44441223]
[92.50000000 135.44441223]
[92.50000000 120.44440460]
[80.32816315 111.67819977]
[66.10138702 116.43201447]
[51.87460327 121.18582916]
[37.64782715 125.93964386]
[23.42104721 130.69346619]
[19.72318077 145.67108154]
[8.49913216 156.25523376]
[-6.66954708 159.06855774]
[-20.94258690 153.21330261]
[-29.76551056 140.55789185]
[-30.32295609 125.14060211]
[-22.43704414 111.88103485]
[-8.62414169 105.01028442]
[6.70810509 106.72076416]
[18.66723251 116.46668243]
[32.89401245 111.71286774]
[47.12078857 106.95905304]
[61.34756851 102.20523834]
[75.57434845 97.45142365]
[82.34246063 84.06513977]
[77.73690033 69.78967285]
[73.13133240 55.51421738]
[68.52577209 41.23875427]
[63.92020416 26.96329498]
[59.31464005 12.68783379]
[54.70907593 -1.58762693]
[39.90737534 0.99225652]
[24.89067268 1.48695707]
[9.95126820 -0.11315490]
[-4.62003422 -3.77693272]
[-18.53960228 -9.43305969]
[-31.53648567 -16.97143745]
[-43.35769653 -26.24533081]
[-53.77313232 -37.07421875]
[-62.58005524 -49.24731445]
[-69.60703278 -62.52766418]
[-74.71728516 -76.65676880]
[-77.81134033 -91.35958862]
[-78.82896423 -106.34993744]
[-77.75035858 -121.33602142]
[-74.59651184 -136.02613831]
[-69.42881775 -150.13432312]
[-62.34786606 -163.38597107]
[-53.49149323 -175.52314758]
[-43.03208542 -186.30957031]
[-31.17323875 -195.53527832]
[-18.14579391 -203.02072144]
[-4.20332909 -208.62017822]
[10.38275909 -212.22463989]
[25.32854843 -213.76394653]
[40.34311676 -213.20816040]
[55.13419724 -210.56808472]
[69.41387939 -205.89509583]
[82.90420532 -199.28016663]
[95.34258270 -190.85206604]
[106.48689270 -180.77484131]
[116.12020874 -169.24464417]
[124.05502319 -156.48593140]
[130.13687134 -142.74702454]
[134.24736023 -128.29539490]
[136.30650330 -113.41230774]
[136.27420044 -98.38749695]
[134.15109253 -83.51340485]
[129.97848511 -69.07957458]
[123.83762360 -55.36695099]
[115.84803009 -42.64246750]
[106.16522217 -31.15380287]
[94.97768402 -21.12458992]
[82.50318146 -12.75004864]
[68.98453522 -6.19319153]
[73.59010315 8.08226967]
[78.19566345 22.35772896]
[82.80123138 36.63319016]
[87.40679169 50.90864944]
[92.01235962 65.18411255]
[96.61792755 79.45957184]
[92.58229065 65.01264954]
[98.33234406 51.15851974]
[111.41189575 43.81513214]
[126.23386383 46.11929321]
[136.46688843 57.08675385]
[137.73982239 72.03264618]
[129.50965881 84.57209015]
[144.50234985 85.04013062]
[159.49505615 85.50817108]
[174.48774719 85.97621155]
[189.48043823 86.44425201]
[196.06767273 72.71369171]
[207.67431641 62.85440826]
[222.28948975 58.57458878]
[237.38099670 60.61573410]
[250.33415222 68.62420654]
[258.90475464 81.21248627]
[261.60784912 96.19958496]
[257.97518921 110.98888397]
[248.63607788 123.01806641]
[235.20861816 130.20298767]
[220.01918030 131.29882812]
[205.69943237 126.11570740]
[194.73034668 115.55165863]
[189.01240540 101.43695068]
[174.01969910 100.96891022]
[159.02700806 100.50086975]
[144.03431702 100.03282166]
[129.04161072 99.56478119]
[123.65621185 104.78469086]
[136.91334534 111.80242157]
[134.33557129 126.57926941]
[119.48535919 128.69377136]
[112.88540649 115.22450256]
[107.50000000 120.44440460]
[107.50000000 135.44441223]
[107.50000000 150.44441223]
[107.50000000 165.44441223]
[107.50000000 180.44441223]
[107.50000000 195.44441223]
[107.50000000 210.44441223]
[107.50000000 225.44441223]
[107.50000000 240.44441223]
[107.50000000 255.44441223]
[122.03988647 259.50570679]
[134.94427490 267.34024048]
[145.25555420 278.36657715]
[152.20857239 291.76647949]
[155.28736877 306.54565430]
[154.26348877 321.60733032]
[149.21287537 335.83386230]
[140.51036072 348.16952515]
[128.80169678 357.69894409]
[114.95575714 363.71496582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
