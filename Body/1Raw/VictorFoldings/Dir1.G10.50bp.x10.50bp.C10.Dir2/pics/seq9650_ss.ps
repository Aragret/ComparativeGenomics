%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACACCCGGGGGGGGGGACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCxxxxxxxxxxCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCCCCCCCCCCCUCAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[61.91145706 443.19064331]
[48.06551743 437.17462158]
[36.35685730 427.64520264]
[27.65433121 415.30953979]
[22.60372925 401.08300781]
[21.57983780 386.02133179]
[24.65863800 371.24215698]
[31.61166000 357.84222412]
[41.92294312 346.81588745]
[54.82732391 338.98138428]
[69.36721039 334.92007446]
[69.36721039 319.92007446]
[69.36721039 304.92007446]
[69.36721039 289.92007446]
[69.36721039 274.92007446]
[69.36721039 259.92007446]
[69.36721039 244.92007446]
[69.36721039 229.92007446]
[69.36721039 214.92007446]
[69.36721039 199.92007446]
[69.36721039 184.92007446]
[61.31382370 197.57484436]
[49.47673798 206.78805542]
[35.23224258 211.48852539]
[20.23653603 211.12971497]
[6.23315191 205.75335693]
[-5.14974451 195.98454285]
[-12.58867455 182.95909119]
[-15.21872044 168.19146729]
[-12.73408890 153.39868164]
[-5.42366505 140.30067444]
[5.86257315 130.42034912]
[19.81238556 124.90647888]
[34.80383682 124.40016174]
[49.09388733 128.96025085]
[61.02104187 138.05657959]
[69.19853973 150.63148499]
[72.67577362 165.22581482]
[77.57732391 151.04925537]
[82.03414154 136.72666931]
[86.04187775 122.27197266]
[90.04962158 107.81729126]
[93.60437775 93.24458313]
[96.70270538 78.56806183]
[91.98274994 63.46731186]
[102.18207550 52.61267853]
[105.28039551 37.93615341]
[108.37871552 23.25962639]
[111.47703552 8.58310127]
[114.26936340 -6.15470457]
[116.75447845 -20.94741058]
[119.23960114 -35.74011993]
[121.72471619 -50.53282547]
[124.20983887 -65.32553101]
[126.69495392 -80.11824036]
[115.17478180 -70.51169586]
[100.30875397 -68.51139069]
[86.65906525 -74.73119354]
[78.41462708 -87.26232910]
[78.10556030 -102.25914001]
[85.82670593 -115.11930847]
[99.20854187 -121.89620972]
[114.14436340 -120.51009369]
[126.05054474 -111.38635254]
[131.27330017 -97.32413483]
[136.46871948 -111.39565277]
[141.66413879 -125.46717072]
[146.85954285 -139.53869629]
[152.05496216 -153.61021423]
[157.25038147 -167.68173218]
[144.57061768 -175.80807495]
[133.93453979 -186.47053528]
[125.83961487 -199.17039490]
[120.66447449 -213.31365967]
[118.65115356 -228.23883057]
[119.89382935 -243.24781799]
[124.33437347 -257.63864136]
[131.76509094 -270.73818970]
[141.83843994 -281.93380737]
[154.08326721 -290.70184326]
[167.92686462 -296.63217163]
[182.72172546 -299.44744873]
[197.77589417 -299.01602173]
[212.38525391 -295.35800171]
[225.86647034 -288.64456177]
[237.58903503 -279.18963623]
[247.00465393 -267.43545532]
[253.67292786 -253.93183899]
[257.28198242 -239.31031799]
[257.66302490 -224.25479126]
[254.79821777 -209.46943665]
[248.82154846 -195.64576721]
[240.01257324 -183.43037415]
[228.78329468 -173.39457703]
[215.65892029 -166.00776672]
[201.25331116 -161.61543274]
[186.24023438 -160.42303467]
[171.32189941 -162.48631287]
[166.12648010 -148.41479492]
[160.93107605 -134.34327698]
[155.73565674 -120.27175903]
[150.54023743 -106.20024109]
[145.34481812 -92.12871552]
[141.48765564 -77.63312531]
[139.00254822 -62.84041595]
[136.51742554 -48.04770660]
[134.03230286 -33.25500107]
[131.54719543 -18.46229362]
[129.06207275 -3.66958570]
[131.09365845 0.71768636]
[130.34484863 6.43350506]
[126.15356445 11.68142319]
[123.05524445 26.35794830]
[119.95691681 41.03447342]
[116.85859680 55.71099854]
[121.80016327 69.76198578]
[111.37922668 81.66638184]
[108.28090668 96.34290314]
[109.95232391 99.89857483]
[110.01539612 104.18130493]
[108.17887878 108.44104004]
[104.50431061 111.82502747]
[100.49656677 126.27971649]
[96.48883057 140.73440552]
[97.83701324 145.91146851]
[97.09597778 150.60223389]
[94.81478119 154.08042908]
[91.75388336 155.95080566]
[86.85233307 170.12736511]
[84.36721039 184.92007446]
[84.36721039 199.92007446]
[84.36721039 214.92007446]
[84.36721039 229.92007446]
[84.36721039 244.92007446]
[84.36721039 259.92007446]
[84.36721039 274.92007446]
[84.36721039 289.92007446]
[84.36721039 304.92007446]
[84.36721039 319.92007446]
[84.36721039 334.92007446]
[98.90709686 338.98138428]
[111.81147766 346.81588745]
[122.12276459 357.84222412]
[129.07579041 371.24215698]
[132.15458679 386.02133179]
[131.13069153 401.08300781]
[126.08009338 415.30953979]
[117.37756348 427.64520264]
[105.66890717 437.17462158]
[91.82296753 443.19064331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[38 129]
[39 128]
[40 124]
[41 123]
[42 122]
[43 118]
[44 117]
[46 115]
[47 114]
[48 113]
[49 112]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
