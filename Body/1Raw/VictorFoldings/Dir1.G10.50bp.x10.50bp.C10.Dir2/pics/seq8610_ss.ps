%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCAUUCGGGGGGGGGGAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACxxxxxxxxxxAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCCCCCCCCCCCUCCUCAUUC\
) } def
/len { sequence length } bind def

/coor [
[73.21084595 385.28631592]
[59.18889999 379.73330688]
[46.98894501 370.86697388]
[37.37787247 359.24465942]
[30.95984650 345.59695435]
[28.13830948 330.78176880]
[29.09062576 315.73040771]
[33.75693130 301.38897705]
[41.84389877 288.65902710]
[52.84317017 278.34075928]
[66.06333160 271.08276367]
[80.67333984 267.34133911]
[80.67333984 252.34133911]
[80.67333984 237.34133911]
[80.67333984 222.34133911]
[80.67333984 207.34133911]
[80.67333984 192.34133911]
[80.67333984 177.34133911]
[80.67333984 162.34133911]
[80.67333984 147.34133911]
[80.67333984 132.34133911]
[77.58029938 147.01898193]
[65.44338226 155.83346558]
[50.52891541 154.23388672]
[40.53726959 143.04608154]
[40.62715149 128.04634094]
[50.75215912 116.97908020]
[65.68669891 115.55889130]
[50.78224945 113.86849976]
[35.87780380 112.17810059]
[20.97335625 110.48770142]
[9.19040585 124.20138550]
[-8.30236149 128.10946655]
[-24.51573563 120.84223938]
[-33.08600235 105.45713043]
[-48.04728317 104.38005829]
[-63.00856400 103.30298615]
[-76.03028107 112.67392731]
[-91.43609619 108.19728088]
[-97.40798950 93.30714417]
[-89.36483002 79.42596436]
[-73.47664642 77.20218658]
[-61.93149185 88.34170532]
[-46.97021103 89.41877747]
[-32.00893021 90.49584961]
[-25.60536003 80.10095978]
[-15.31583786 73.39585114]
[-3.07675028 71.71614838]
[8.77689552 75.44470978]
[17.95694542 83.92661285]
[22.66375351 95.58325195]
[37.56819916 97.27365112]
[52.47264862 98.96405029]
[67.37709808 100.65444946]
[69.67498016 91.45280457]
[74.41200256 83.61656189]
[81.00467682 77.74324036]
[88.73976135 74.21361542]
[96.84828949 73.16970825]
[104.58068085 74.51658630]
[111.27567291 77.94649506]
[121.82769012 67.28558350]
[132.37969971 56.62467575]
[142.93171692 45.96376801]
[146.77676392 37.60844421]
[153.81152344 35.19508743]
[164.58020020 24.75307846]
[175.34889221 14.31106949]
[166.14479065 2.44735265]
[158.30168152 -10.35690117]
[151.91477966 -23.94626045]
[147.06161499 -38.15576172]
[143.80110168 -52.81291962]
[142.17280579 -67.73979950]
[142.19650269 -82.75521851]
[143.87190247 -97.67688751]
[147.17868042 -112.32367706]
[152.07667542 -126.51778412]
[158.50643921 -140.08691406]
[166.38992310 -152.86634827]
[175.63140869 -164.70095825]
[186.11875916 -175.44706726]
[197.72460938 -184.97424316]
[210.30812073 -193.16683960]
[223.71652222 -199.92538452]
[237.78704834 -205.16784668]
[252.34890747 -208.83059692]
[267.22531128 -210.86915588]
[282.23568726 -211.25878906]
[297.19781494 -209.99476624]
[311.93008423 -207.09242249]
[326.25363159 -202.58699036]
[339.99462891 -196.53317261]
[352.98620605 -189.00445557]
[365.07070923 -180.09222412]
[376.10144043 -169.90466309]
[385.94448853 -158.56544495]
[394.48034668 -146.21221924]
[401.60540771 -132.99493408]
[407.23321533 -119.07405090]
[411.29541016 -104.61853790]
[413.74267578 -89.80388641]
[414.54534912 -74.80992126]
[413.69366455 -59.81866455]
[411.19793701 -45.01208878]
[407.08850098 -30.56994057]
[401.41522217 -16.66752815]
[394.24697876 -3.47361660]
[385.67074585 8.85163307]
[375.79067993 20.15860367]
[364.72671509 30.31003761]
[352.61312866 39.18270874]
[339.59698486 46.66890717]
[325.83630371 52.67776108]
[311.49807739 57.13632202]
[296.75640869 59.99047470]
[281.79022217 61.20557022]
[266.78118896 60.76685715]
[251.91152954 58.67966080]
[237.36174011 54.96931839]
[223.30842590 49.68087387]
[209.92219543 42.87851715]
[197.36553955 34.64482498]
[185.79089355 25.07974815]
[175.02221680 35.52175903]
[164.25354004 45.96376801]
[153.59263611 56.51578140]
[143.04061890 67.17668915]
[132.48860168 77.83760071]
[121.93658447 88.49850464]
[123.51595306 116.45122528]
[95.67333984 132.34133911]
[95.67333984 147.34133911]
[95.67333984 162.34133911]
[95.67333984 177.34133911]
[95.67333984 192.34133911]
[95.67333984 207.34133911]
[95.67333984 222.34133911]
[95.67333984 237.34133911]
[95.67333984 252.34133911]
[95.67333984 267.34133911]
[110.28335571 271.08276367]
[123.50351715 278.34075928]
[134.50279236 288.65902710]
[142.58975220 301.38897705]
[147.25605774 315.73040771]
[148.20837402 330.78176880]
[145.38684082 345.59695435]
[138.96881104 359.24465942]
[129.35774231 370.86697388]
[117.15778351 379.73330688]
[103.13584137 385.28631592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 54]
[29 53]
[30 52]
[31 51]
[35 45]
[36 44]
[37 43]
[61 130]
[62 129]
[63 128]
[64 127]
[66 126]
[67 125]
[68 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
