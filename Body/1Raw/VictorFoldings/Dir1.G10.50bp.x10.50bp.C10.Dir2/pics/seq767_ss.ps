%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACCAAACCCCGGGGGGGGGGAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUxxxxxxxxxxUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGCCCCCCCCCCACCAACCGAACCCC\
) } def
/len { sequence length } bind def

/coor [
[42.10138321 269.78039551]
[33.73016357 266.69113159]
[25.52292442 263.18945312]
[17.49997139 259.28393555]
[9.68115711 254.98431396]
[2.08582878 250.30117798]
[-5.26721954 245.24613953]
[-12.35979366 239.83171082]
[-19.17434311 234.07127380]
[-25.69400597 227.97908020]
[-31.90264893 221.57022095]
[-37.78491211 214.86054993]
[-43.32623672 207.86666870]
[-48.51291656 200.60588074]
[-53.33211136 193.09614563]
[-61.68189621 206.53459167]
[-76.56311798 205.90339661]
[-89.69914246 213.14527893]
[-102.83516693 220.38716125]
[-115.97119141 227.62904358]
[-129.10722351 234.87092590]
[-142.24324036 242.11280823]
[-150.59303284 255.55123901]
[-165.47425842 254.92004395]
[-171.29516602 269.86984253]
[-186.65489197 274.50216675]
[-199.77076721 265.26345825]
[-200.58140564 249.24090576]
[-188.46496582 238.72561646]
[-172.71614075 241.78402710]
[-165.30592346 228.86357117]
[-149.48512268 228.97677612]
[-136.34910583 221.73489380]
[-123.21307373 214.49301147]
[-110.07704926 207.25112915]
[-96.94103241 200.00924683]
[-83.80500793 192.76736450]
[-76.39479828 179.84690857]
[-60.57399368 179.96012878]
[-71.71981049 151.86459351]
[-77.99015045 122.29651642]
[-79.20699310 92.09539795]
[-75.33578491 62.11870575]
[-66.48643494 33.21754074]
[-52.91019440 6.21246719]
[-34.99252701 -18.12978745]
[-45.85783005 -28.47121811]
[-56.72313309 -38.81264877]
[-67.58843231 -49.15407944]
[-78.65592957 -59.27882767]
[-89.92131042 -69.18292999]
[-101.18668365 -79.08703613]
[-112.45205688 -88.99114227]
[-127.25675964 -84.65244293]
[-142.05047607 -89.02844238]
[-152.11259460 -100.72277069]
[-154.23233032 -116.00381470]
[-147.73326111 -129.99545288]
[-134.68925476 -138.23298645]
[-119.26256561 -138.08787537]
[-106.37582397 -129.60639954]
[-100.14112854 -115.49497986]
[-102.54795074 -100.25652313]
[-91.28257751 -90.35241699]
[-80.01720428 -80.44831085]
[-68.75182343 -70.54420471]
[-63.96313858 -69.95862579]
[-59.50730515 -66.32407379]
[-57.24700165 -60.01938248]
[-46.38169861 -49.67795181]
[-35.51639557 -39.33652115]
[-24.65109444 -28.99509048]
[-11.96102619 -40.15119553]
[1.72241747 -50.06380463]
[16.27783012 -58.64497375]
[31.57607079 -65.81855774]
[47.48140335 -71.52091980]
[63.85270691 -75.70145416]
[80.54473114 -78.32308197]
[97.40936279 -79.36253357]
[114.29698944 -78.81058502]
[131.05776978 -76.67213440]
[147.54298401 -72.96616364]
[163.60636902 -67.72554779]
[179.10540771 -60.99678421]
[193.90257263 -52.83957291]
[202.28227234 -65.28065491]
[210.66198730 -77.72174072]
[219.04168701 -90.16282654]
[212.22769165 -103.92745972]
[213.22494507 -119.25394440]
[221.76516724 -132.01953125]
[235.55108643 -138.79034424]
[250.87437439 -137.74505615]
[263.61312866 -129.16485596]
[270.34069824 -115.35778046]
[269.24737549 -100.03784943]
[260.62728882 -87.32605743]
[246.79919434 -80.64179993]
[231.48277283 -81.78312683]
[223.10307312 -69.34204102]
[214.72335815 -56.90095520]
[206.34365845 -44.45986938]
[213.39581299 -38.99287796]
[220.16735840 -33.18196106]
[226.64157104 -27.04149437]
[232.80241394 -20.58667564]
[238.63465881 -13.83347702]
[244.12385559 -6.79860687]
[249.25643921 0.50052708]
[254.01969910 8.04586411]
[258.40185547 15.81873322]
[262.39202881 23.79990196]
[265.98040771 31.96961975]
[269.15808105 40.30767441]
[271.91717529 48.79343033]
[274.25088501 57.40589523]
[276.15341187 66.12375641]
[277.62008667 74.92543793]
[278.64724731 83.78916168]
[279.23236084 92.69300079]
[279.37396240 101.61492157]
[279.07174683 110.53284454]
[278.32641602 119.42471313]
[277.13983154 128.26850891]
[275.51492310 137.04235840]
[273.45574951 145.72454834]
[270.96734619 154.29359436]
[268.05590820 162.72830200]
[264.72863770 171.00779724]
[260.99374390 179.11157227]
[256.86050415 187.01960754]
[252.33911133 194.71232605]
[247.44078064 202.17066956]
[242.17761230 209.37620544]
[236.56263733 216.31111145]
[230.60975647 222.95820618]
[224.33369446 229.30105591]
[217.74996948 235.32395935]
[210.87489319 241.01200867]
[203.72546387 246.35115051]
[196.31936646 251.32814026]
[188.67494202 255.93069458]
[180.81109619 260.14743042]
[172.74729919 263.96786499]
[164.50349426 267.38256836]
[156.10006714 270.38311768]
[147.55784607 272.96206665]
[138.89793396 275.11303711]
[130.14176941 276.83071899]
[121.31102753 278.11083984]
[112.42755127 278.95022583]
[103.51332855 279.34683228]
[94.59040833 279.29965210]
[85.68087006 278.80880737]
[76.80677032 277.87551880]
[67.99005890 276.50210571]
[59.25254822 274.69195557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 39]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[24 30]
[46 72]
[47 71]
[48 70]
[49 69]
[50 66]
[51 65]
[52 64]
[53 63]
[86 103]
[87 102]
[88 101]
[89 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
