%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCCUAUGGGGGGGGGGCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCxxxxxxxxxxUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUCCCCCCCCCCAACAACCUAU\
) } def
/len { sequence length } bind def

/coor [
[85.50010681 402.48403931]
[72.27990723 395.21157837]
[61.39310455 384.76455688]
[53.58197403 371.85531616]
[49.37909317 357.36398315]
[49.07101822 342.27865601]
[52.67876053 327.62783813]
[59.95633316 314.41043091]
[70.40753937 303.52767944]
[83.31980133 295.72152710]
[97.81273651 291.52423096]
[97.50068665 276.52749634]
[97.18862915 261.53073120]
[96.87657166 246.53398132]
[96.56451416 231.53723145]
[96.25245667 216.54048157]
[95.94039917 201.54371643]
[95.62834930 186.54696655]
[95.31629181 171.55021667]
[94.84825134 156.55752563]
[94.22427368 141.57051086]
[78.22973633 135.88204956]
[65.79691315 124.32313538]
[58.95986938 108.78484344]
[43.96717453 109.25288391]
[28.97447777 109.72093201]
[13.98178101 110.18897247]
[9.99440861 124.76951599]
[1.88508785 137.52609253]
[-9.62510586 147.32440186]
[-23.51269341 153.29318237]
[-38.54280090 154.90168762]
[-53.37895966 152.00691223]
[-66.70195007 144.86622620]
[-77.32710266 134.11459351]
[-84.30963135 120.70803833]
[-87.02865601 105.83866119]
[-85.24240112 90.82864380]
[-79.10971069 77.01265717]
[-69.17588043 65.61921692]
[-56.32423782 57.66141129]
[-41.69752884 53.84685135]
[-26.59635925 54.51472473]
[-12.36351109 59.60563660]
[-0.26455864 68.66691589]
[8.62466621 80.89283752]
[13.51373863 95.19627380]
[28.50643539 94.72823334]
[43.49913025 94.26019287]
[58.49182892 93.79215240]
[66.13755798 75.20481873]
[81.54875946 62.30361557]
[101.19126129 58.04708862]
[104.28958893 43.37056351]
[107.38790894 28.69403839]
[110.48622894 14.01751328]
[113.58454895 -0.65901268]
[99.41696167 -5.65246105]
[86.02238464 -12.45248318]
[73.63002014 -20.94272423]
[62.45190430 -30.97790146]
[52.67932129 -42.38630295]
[44.47948456 -54.97271347]
[37.99271393 -68.52176666]
[33.32999802 -82.80161285]
[30.57112694 -97.56791687]
[29.76330757 -112.56800079]
[30.92036057 -127.54518890]
[34.02248764 -142.24320984]
[39.01661301 -156.41055298]
[45.81727219 -169.80480957]
[54.30810165 -182.19677734]
[64.34381104 -193.37442017]
[75.75267792 -203.14645386]
[88.33947754 -211.34568787]
[101.88883972 -217.83181763]
[116.16891479 -222.49385071]
[130.93534851 -225.25201416]
[145.93547058 -226.05912781]
[160.91259766 -224.90135193]
[175.61047363 -221.79853821]
[189.77758789 -216.80374146]
[203.17150879 -210.00244141]
[215.56307983 -201.51101685]
[226.74023438 -191.47477722]
[236.51173401 -180.06544495]
[244.71037292 -167.47825623]
[251.19584656 -153.92858887]
[255.85720825 -139.64828491]
[258.61468506 -124.88172913]
[259.42105103 -109.88156891]
[258.26257324 -94.90448761]
[255.15905762 -80.20676422]
[250.16358948 -66.03988647]
[243.36164856 -52.64628220]
[234.86964417 -40.25512314]
[224.83287048 -29.07844353]
[213.42306519 -19.30748940]
[200.83547974 -11.10945320]
[187.28550720 -4.62461519]
[173.00498962 0.03606008]
[158.23829651 2.79282284]
[143.23809814 3.59850121]
[128.26107788 2.43930912]
[125.16275787 17.11583519]
[122.06443024 31.79236031]
[118.96611023 46.46888733]
[115.86779022 61.14541245]
[126.48101807 67.43895721]
[134.80540466 76.54686737]
[140.12144470 87.68190002]
[141.96965027 99.88163757]
[156.73570251 102.52050018]
[171.50177002 105.15936279]
[186.26782227 107.79822540]
[201.49861145 101.71918488]
[214.20939636 112.08105469]
[211.32438660 128.22442627]
[195.81144714 133.54240417]
[183.62895203 122.56428528]
[168.86289978 119.92542267]
[154.09684753 117.28655243]
[139.33079529 114.64768982]
[135.66769409 122.11970520]
[130.60238647 128.72210693]
[124.33399200 134.19535828]
[117.10894775 138.32426453]
[109.21128845 140.94653320]
[109.83526611 155.93354797]
[113.33787537 164.44139099]
[110.31304169 171.23815918]
[110.62509918 186.23490906]
[110.93715668 201.23167419]
[111.24921417 216.22842407]
[111.56127167 231.22517395]
[111.87332153 246.22192383]
[112.18537903 261.21868896]
[112.49743652 276.21542358]
[112.80949402 291.21218872]
[127.46448517 294.80294800]
[140.69029236 302.06521606]
[151.58515930 312.50381470]
[159.40626526 325.40701294]
[163.62033081 339.89508057]
[163.94004822 354.98019409]
[160.34362793 369.63378906]
[153.07626343 382.85678101]
[142.63346863 393.74761963]
[129.72723389 401.56375122]
[115.23754120 405.77221680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[24 50]
[25 49]
[26 48]
[27 47]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
