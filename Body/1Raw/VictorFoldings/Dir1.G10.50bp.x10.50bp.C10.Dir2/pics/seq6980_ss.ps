%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGGAUUCAGGGGGGGGGGUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAxxxxxxxxxxCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCCUAGGAAUCA\
) } def
/len { sequence length } bind def

/coor [
[84.08290100 579.82635498]
[70.87482452 572.59027100]
[59.53137970 562.68371582]
[50.58312607 550.56994629]
[44.44858551 536.81561279]
[41.41468811 522.06402588]
[41.62332916 507.00512695]
[45.06475449 492.34323120]
[51.57799530 478.76416016]
[60.85842514 466.90295410]
[72.47196960 457.31445312]
[85.87545776 450.44708252]
[100.44197083 446.62207031]
[99.83408356 431.63439941]
[99.22620392 416.64669800]
[98.61831665 401.65902710]
[98.01043701 386.67135620]
[97.40254974 371.68368530]
[96.79467010 356.69601440]
[96.18678284 341.70831299]
[95.57889557 326.72064209]
[94.97101593 311.73297119]
[94.36312866 296.74530029]
[84.18645477 282.47912598]
[92.79713440 266.23303223]
[91.88562012 251.26074219]
[90.97410583 236.28846741]
[80.94001770 230.71614075]
[74.80124664 220.87623596]
[74.19562531 209.17387390]
[79.39137268 198.53672791]
[89.19067383 191.68255615]
[88.88666534 176.68563843]
[85.58737946 170.02273560]
[88.73157501 161.38241577]
[88.73157501 146.38241577]
[88.73157501 131.38241577]
[88.73157501 116.38240814]
[75.67724609 83.88034821]
[70.89765930 69.66220856]
[66.11807251 55.44406509]
[61.33848190 41.22592163]
[56.55889511 27.00778198]
[51.77930832 12.78964043]
[37.90517426 5.70824862]
[33.26053619 -8.77905560]
[40.09706116 -21.96228409]
[35.31747437 -36.18042374]
[24.10544205 -42.63372421]
[20.43691444 -54.61983490]
[25.76465225 -65.52091217]
[21.27420616 -79.83300018]
[13.59727573 -73.98072052]
[2.81536007 -71.56951904]
[-9.65117931 -73.75408173]
[-22.01743507 -81.14530945]
[-31.07834816 -93.09938812]
[-40.13925934 -105.05345917]
[-49.20017242 -117.00753021]
[-64.51543427 -122.87053680]
[-66.82798767 -139.10581970]
[-53.75888062 -149.01190186]
[-38.75248718 -142.39825439]
[-37.24610138 -126.06844330]
[-28.18518829 -114.11437225]
[-19.12427521 -102.16030121]
[-10.06336212 -90.20622253]
[-2.93043852 -92.52384949]
[18.46833229 -99.47673798]
[18.77233696 -114.47365570]
[4.72240067 -120.21505737]
[-6.30205250 -130.64701843]
[-12.81005573 -144.35870361]
[-13.92145443 -159.49572754]
[-9.48594189 -174.01091003]
[-0.10338483 -185.94120789]
[12.95730400 -193.67314148]
[27.92977333 -196.16104126]
[42.78911972 -193.06842041]
[55.52573776 -184.81353760]
[64.41710663 -172.51281738]
[68.26073456 -157.82980347]
[66.53681183 -142.75025940]
[59.47848129 -129.31358337]
[48.04032516 -119.33695221]
[33.76925659 -114.16964722]
[33.46525192 -99.17272949]
[35.58629608 -84.32344818]
[40.07674026 -70.01136017]
[53.61781693 -58.88808441]
[49.53561783 -40.96001053]
[54.31520462 -26.74187088]
[67.72696686 -20.36533165]
[72.77668762 -6.01420021]
[65.99745178 8.01005363]
[70.77703857 22.22819519]
[75.55662537 36.44633484]
[80.33621216 50.66447830]
[85.11579895 64.88262177]
[89.89538574 79.10076141]
[92.45230103 64.32029724]
[105.98242950 57.84452820]
[119.09764862 65.12402344]
[120.75905609 80.03173065]
[109.56818390 90.02005768]
[124.16255951 86.55533600]
[138.75692749 83.09062195]
[146.83435059 69.50640869]
[162.17181396 65.69355011]
[175.66986084 73.91413879]
[179.32035828 89.29105377]
[170.95751953 102.70143890]
[155.54286194 106.18915558]
[142.22164917 97.68499756]
[127.62727356 101.14971161]
[113.03289795 104.61442566]
[103.73157501 116.38240814]
[103.73157501 131.38241577]
[103.73157501 146.38241577]
[103.73157501 161.38241577]
[103.88358307 176.38163757]
[104.18759155 191.37855530]
[118.33437347 203.91021729]
[118.88128662 222.48342896]
[105.94638824 235.37695312]
[106.85790253 250.34922791]
[107.76941681 265.32150269]
[116.91372681 274.47225952]
[117.33386230 287.00018311]
[109.35080719 296.13742065]
[109.95869446 311.12509155]
[110.56657410 326.11276245]
[111.17446136 341.10043335]
[111.78234100 356.08810425]
[112.39022827 371.07580566]
[112.99810791 386.06347656]
[113.60599518 401.05114746]
[114.21387482 416.03881836]
[114.82176208 431.02651978]
[115.42964935 446.01419067]
[130.25808716 448.64697266]
[144.17369080 454.40631104]
[156.52561951 463.02279663]
[166.73612976 474.09347534]
[174.32768250 487.10049438]
[178.94517517 501.43548584]
[180.37268066 516.42803955]
[178.54339600 531.37689209]
[173.54289246 545.58282471]
[165.60505676 558.38146973]
[155.10115051 569.17413330]
[142.52247620 577.45611572]
[128.45733643 582.83996582]
[113.56359100 585.07391357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[25 127]
[26 126]
[27 125]
[32 122]
[33 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[47 92]
[48 91]
[51 89]
[52 88]
[56 67]
[57 66]
[58 65]
[59 64]
[69 87]
[70 86]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
