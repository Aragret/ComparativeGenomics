%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCCUGAACGGGGGGGGGGGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUxxxxxxxxxxGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACACCCCCCCCCCAACGCCUGAGC\
) } def
/len { sequence length } bind def

/coor [
[92.07345581 398.90066528]
[78.05150604 393.34765625]
[65.85155487 384.48132324]
[56.24047852 372.85903931]
[49.82245636 359.21133423]
[47.00091934 344.39614868]
[47.95323563 329.34475708]
[52.61953735 315.00332642]
[60.70650482 302.27337646]
[71.70578003 291.95510864]
[84.92594147 284.69714355]
[99.53594971 280.95568848]
[99.53594971 265.95568848]
[99.53594971 250.95570374]
[99.53594971 235.95570374]
[99.53594971 220.95570374]
[99.53594971 205.95570374]
[99.53594971 190.95570374]
[99.53594971 175.95570374]
[99.53594971 160.95570374]
[99.53594971 145.95570374]
[97.08302307 131.15762329]
[92.24320984 116.95986938]
[79.82489014 108.54645538]
[64.84465027 109.31611633]
[49.86441040 110.08577728]
[46.55450058 124.81489563]
[39.39244080 138.10427856]
[28.90971375 148.96774292]
[15.88420200 156.59916687]
[1.28248489 160.43223572]
[-13.81189251 160.18252563]
[-28.27882576 155.86854553]
[-41.04477692 147.81044006]
[-51.16242218 136.60615540]
[-57.88096619 123.08714294]
[-60.70185089 108.25659943]
[-59.41574478 93.21503448]
[-54.11808777 79.07865143]
[-45.20200348 66.89645386]
[-33.32911682 57.57243729]
[-19.38048363 51.79851913]
[-4.39117956 50.00315094]
[10.52648735 52.31956482]
[24.26552773 58.57586670]
[35.80641556 68.30780029]
[44.29273605 80.79319000]
[49.09474945 95.10553741]
[64.07498932 94.33587646]
[79.05523682 93.56621552]
[85.46421051 80.00431824]
[76.54805756 67.94188690]
[67.63190460 55.87945557]
[58.71575546 43.81702423]
[49.79960632 31.75459290]
[40.88345337 19.69216156]
[25.49605942 20.80195045]
[11.96231651 13.39645481]
[4.60079384 -0.16125567]
[5.76052570 -15.54496670]
[15.07144737 -27.84579086]
[29.56247520 -33.13858032]
[44.60957718 -29.73442841]
[55.41127777 -18.71958160]
[58.52079010 -3.60884142]
[52.94588470 10.77601051]
[61.86203766 22.83844185]
[70.77819061 34.90087509]
[79.69433594 46.96330643]
[88.61048889 59.02573776]
[97.52664185 71.08816528]
[104.98715210 71.85681152]
[102.94552612 56.99640274]
[95.24327087 44.12491608]
[98.19847870 29.41890526]
[110.27513885 20.52203941]
[125.19623566 22.05859566]
[135.20629883 33.22992706]
[135.10244751 48.22956848]
[124.93682861 59.26213837]
[119.90816498 73.39410400]
[127.36867523 74.16275024]
[138.55697632 64.17165375]
[149.74526978 54.18055725]
[160.93356323 44.18946075]
[172.12185669 34.19836426]
[165.46650696 20.64812851]
[162.71490479 5.80457020]
[164.07122803 -9.23082066]
[169.43482971 -23.34231758]
[178.40769958 -35.48275375]
[190.32398987 -44.75122833]
[204.29942322 -50.45995712]
[219.29695129 -52.18531799]
[234.20364380 -49.79927444]
[247.91331482 -43.47888947]
[259.40863037 -33.69317627]
[267.83657837 -21.16830063]
[272.57171631 -6.83369017]
[273.26266479 8.24693203]
[269.85818481 22.95448112]
[262.61087036 36.19756317]
[252.05856323 46.99345016]
[238.98428345 54.54101944]
[224.35824585 58.28018570]
[209.26577759 57.93348312]
[194.82685852 53.52663422]
[182.11296082 45.38666153]
[170.92466736 55.37775803]
[159.73635864 65.36885834]
[148.54806519 75.35995483]
[137.35977173 85.35105133]
[125.25450897 109.34245300]
[106.44096375 112.12004852]
[111.28077698 126.31780243]
[114.77914429 111.73146057]
[122.97611237 99.16922760]
[134.91813660 90.09243774]
[149.21603394 85.55699158]
[164.20654297 86.09046936]
[178.14585876 91.63082886]
[189.41242981 101.53356171]
[196.69566345 114.64671326]
[199.14830017 129.44483948]
[196.48503113 144.20651245]
[189.01565552 157.21453857]
[177.60910034 166.95570374]
[163.59225464 172.29684448]
[148.59565735 172.61665344]
[134.36386108 167.87789917]
[122.55239868 158.63185120]
[114.53594971 145.95570374]
[114.53594971 160.95570374]
[114.53594971 175.95570374]
[114.53594971 190.95570374]
[114.53594971 205.95570374]
[114.53594971 220.95570374]
[114.53594971 235.95570374]
[114.53594971 250.95570374]
[114.53594971 265.95568848]
[114.53594971 280.95568848]
[129.14596558 284.69714355]
[142.36611938 291.95510864]
[153.36540222 302.27337646]
[161.45236206 315.00332642]
[166.11866760 329.34475708]
[167.07098389 344.39614868]
[164.24945068 359.21133423]
[157.83142090 372.85903931]
[148.22035217 384.48132324]
[136.02040100 393.34765625]
[121.99845123 398.90066528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 115]
[23 114]
[24 50]
[25 49]
[26 48]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[82 112]
[83 111]
[84 110]
[85 109]
[86 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
