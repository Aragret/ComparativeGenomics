%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAUAGGGACCGGGGGGGGGGUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCAGUGxxxxxxxxxxAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUCCCCCCCCCCUGAAAUAGGGCCC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 403.45764160]
[70.75619507 398.64822388]
[57.85220718 390.88281250]
[46.91955185 380.52468872]
[38.46956635 368.05825806]
[32.89747238 354.06661987]
[30.46388245 339.20419312]
[31.28262329 324.16610718]
[35.31539917 309.65576172]
[42.37359238 296.35177612]
[52.12707901 284.87640381]
[64.11966705 275.76641846]
[77.79044342 269.44787598]
[92.50000000 266.21633911]
[92.50000000 251.21632385]
[92.50000000 236.21632385]
[92.50000000 221.21632385]
[92.50000000 206.21632385]
[92.50000000 191.21632385]
[92.50000000 176.21632385]
[92.50000000 161.21632385]
[92.50000000 146.21632385]
[92.50000000 131.21632385]
[85.43806458 128.61222839]
[79.17652130 124.43546295]
[74.05952454 118.91562653]
[70.36833191 112.35610199]
[68.30581665 105.11743164]
[67.98535919 97.59748077]
[69.42456818 90.20958710]
[72.54433441 83.35981750]
[77.17318726 77.42466736]
[83.05669403 72.73035431]
[78.33588409 58.49258804]
[74.88576508 55.65042877]
[72.76718140 52.19440079]
[72.00820160 48.63022995]
[72.46588135 45.41895294]
[73.85663605 42.92385101]
[70.28932190 28.35421562]
[66.72200775 13.78457928]
[63.15469360 -0.78505594]
[52.35741425 -12.34919643]
[56.84591293 -26.55140305]
[53.27860260 -41.12103653]
[42.65010071 -48.49274826]
[40.00113297 -60.74275970]
[46.22332001 -71.15716553]
[42.94824219 -85.79525757]
[39.09012222 -100.29059601]
[34.65513992 -114.61997223]
[30.22015762 -128.94934082]
[25.78517342 -143.27871704]
[21.35018921 -157.60809326]
[6.41865158 -155.79454041]
[-8.59673882 -156.67648315]
[-23.21330070 -160.22555542]
[-36.96117020 -166.32768250]
[-49.39841080 -174.78668213]
[-60.12521362 -185.33065796]
[-68.79676056 -197.62065125]
[-75.13430023 -211.26161194]
[-78.93409729 -225.81500244]
[-80.07401276 -240.81301880]
[-78.51740265 -255.77351379]
[-74.31429291 -270.21560669]
[-67.59981537 -283.67498779]
[-58.58979797 -295.71905518]
[-47.57388306 -305.96060181]
[-34.90618515 -314.07043457]
[-20.99391365 -319.78781128]
[-6.28429747 -322.92898560]
[8.74981403 -323.39297485]
[23.62513542 -321.16482544]
[37.86348724 -316.31619263]
[51.00716400 -309.00296021]
[62.63365173 -299.46017456]
[72.36920929 -287.99462891]
[79.90087128 -274.97488403]
[84.98653412 -260.81948853]
[87.46271515 -245.98342896]
[87.24980927 -230.94366455]
[84.35466003 -216.18365479]
[78.87034607 -202.17787170]
[70.97314453 -189.37654114]
[60.91694260 -178.19117737]
[49.02498627 -168.98133850]
[35.67956161 -162.04307556]
[40.11454773 -147.71369934]
[44.54953003 -133.38432312]
[48.98451233 -119.05495453]
[53.41949844 -104.72558594]
[55.89557266 -103.30123138]
[57.93984604 -100.78275299]
[59.12227631 -97.33583832]
[59.08312988 -93.28232574]
[57.58634186 -89.07033539]
[60.86141968 -74.43224335]
[73.42248535 -62.21136475]
[67.84823608 -44.68835068]
[71.41555023 -30.11871529]
[81.95767212 -19.59669304]
[77.72432709 -4.35236883]
[81.29164124 10.21726608]
[84.85895538 24.78690147]
[88.42626953 39.35653687]
[92.57365417 53.77178192]
[97.29446411 68.00954437]
[120.44447327 75.24656677]
[131.92539978 96.61209106]
[146.79870605 98.55758667]
[161.67199707 100.50308228]
[176.35913086 94.62100983]
[187.97537231 103.94367218]
[202.84867859 105.88916779]
[211.60691833 93.33721161]
[225.20048523 86.30345917]
[240.50566101 86.40422058]
[254.00543213 93.61634827]
[262.59765625 106.28253937]
[264.30789185 121.49219513]
[258.74316406 135.75024414]
[247.18215942 145.78030396]
[232.28155518 149.27754211]
[217.46539307 145.43830872]
[206.13830566 135.14482117]
[200.90318298 120.76246643]
[186.02987671 118.81697845]
[172.40658569 124.83820343]
[159.72650146 115.37638092]
[144.85321045 113.43088531]
[129.97990417 111.48538971]
[121.17813110 124.12873077]
[107.50000000 131.21632385]
[107.50000000 146.21632385]
[107.50000000 161.21632385]
[107.50000000 176.21632385]
[107.50000000 191.21632385]
[107.50000000 206.21632385]
[107.50000000 221.21632385]
[107.50000000 236.21632385]
[107.50000000 251.21632385]
[107.50000000 266.21633911]
[122.20955658 269.44787598]
[135.88034058 275.76641846]
[147.87292480 284.87640381]
[157.62640381 296.35177612]
[164.68460083 309.65576172]
[168.71737671 324.16610718]
[169.53611755 339.20419312]
[167.10252380 354.06661987]
[161.53042603 368.05825806]
[153.08044434 380.52468872]
[142.14779663 390.88281250]
[129.24380493 398.64822388]
[114.97203827 403.45764160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[33 108]
[34 107]
[39 106]
[40 105]
[41 104]
[42 103]
[44 101]
[45 100]
[48 98]
[49 97]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[110 132]
[111 131]
[112 130]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
