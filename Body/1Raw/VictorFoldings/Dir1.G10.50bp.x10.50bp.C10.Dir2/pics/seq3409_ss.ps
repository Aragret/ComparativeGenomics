%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGGCCCCUACGGGGGGGGGGGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCxxxxxxxxxxUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCCCCCCCCCCCGCAGGCCCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[85.96546173 471.66159058]
[71.69368744 466.85214233]
[58.78970718 459.08676147]
[47.85705185 448.72860718]
[39.40706635 436.26217651]
[33.83496857 422.27056885]
[31.40137863 407.40814209]
[32.22011948 392.37005615]
[36.25289917 377.85968018]
[43.31109238 364.55569458]
[53.06457520 353.08035278]
[65.05716705 343.97036743]
[78.72794342 337.65182495]
[93.43750000 334.42025757]
[93.43750000 319.42025757]
[93.43750000 304.42025757]
[93.43750000 289.42025757]
[93.43750000 274.42025757]
[93.43750000 259.42025757]
[93.43750000 244.42027283]
[93.43750000 229.42027283]
[93.43750000 214.42027283]
[93.43750000 199.42027283]
[93.43750000 184.42027283]
[93.43750000 169.42027283]
[93.43750000 154.42027283]
[93.28742218 139.42102051]
[92.98728943 124.42401886]
[79.37535858 114.84368134]
[74.61323547 98.89408112]
[80.74430847 83.41901398]
[72.77290344 70.71245575]
[57.62763977 67.07119751]
[49.72451401 54.07137680]
[53.28923416 39.65512466]
[45.31782913 26.94856071]
[37.34642792 14.24199772]
[29.37502670 1.53543437]
[21.40362358 -11.17112827]
[13.43222141 -23.87769127]
[5.46081829 -36.58425522]
[-2.63731289 -49.21043015]
[-17.37891006 -43.37748337]
[-33.00055695 -40.70740128]
[-48.83174133 -41.31250381]
[-64.19342804 -45.16459274]
[-78.42717743 -52.09624863]
[-90.92337036 -61.80809784]
[-101.14733887 -73.88175201]
[-108.66219330 -87.79782104]
[-113.14755249 -102.95827484]
[-114.41315460 -118.71212769]
[-112.40693665 -134.38339233]
[-107.21719360 -149.30009460]
[-99.06867218 -162.82307434]
[-88.31285095 -174.37338257]
[-97.03221893 -186.57881165]
[-105.75158691 -198.78425598]
[-114.47094727 -210.98968506]
[-123.19031525 -223.19511414]
[-138.71528625 -227.23927307]
[-145.10116577 -241.95660400]
[-137.44927979 -256.05725098]
[-121.62948608 -258.72439575]
[-109.77738190 -247.91203308]
[-110.98487854 -231.91448975]
[-102.26551819 -219.70904541]
[-93.54615021 -207.50361633]
[-84.82678223 -195.29818726]
[-76.10741425 -183.09274292]
[-63.20490265 -189.01092529]
[-49.42441940 -192.43434143]
[-35.24380493 -193.24266052]
[-21.15506554 -191.40621948]
[-7.64731979 -186.98719788]
[4.81018543 -180.13743591]
[15.78437901 -171.09321594]
[24.89341927 -160.16719055]
[31.81997871 -147.73748779]
[36.32229996 -134.23468018]
[38.24263382 -120.12684631]
[37.51276398 -105.90333557]
[34.15642929 -92.05783081]
[28.28855705 -79.07116699]
[20.11132812 -67.39468384]
[9.90720844 -57.43447876]
[16.24003792 -53.54305649]
[18.16738129 -44.55565643]
[26.13878441 -31.84909439]
[34.11018753 -19.14253044]
[42.08158875 -6.43596792]
[50.05298996 6.27059507]
[58.02439499 18.97715759]
[65.99579620 31.68372154]
[80.52670288 34.74776840]
[88.79184723 47.52047729]
[85.47946930 62.74105072]
[93.45086670 75.44761658]
[109.90019226 76.59707642]
[122.18066406 87.60124969]
[136.85078430 84.47278595]
[151.52091980 81.34432220]
[152.64643860 66.28079224]
[157.97154236 52.14502716]
[167.06455994 40.08294296]
[179.18833923 31.07236099]
[193.36007690 25.84373093]
[208.43092346 24.82091141]
[223.17915344 28.08681870]
[236.40921021 35.37670135]
[247.04858398 46.09960175]
[254.23477173 59.38626099]
[257.38525391 74.15959167]
[256.24459839 89.22197723]
[250.90528870 103.35238647]
[241.80017090 115.40533447]
[229.66734314 124.40373230]
[215.49035645 129.61811829]
[200.41848755 130.62580872]
[185.67353821 127.34507751]
[172.45080566 120.04190826]
[161.82221985 109.30832672]
[154.64938354 96.01445770]
[139.97924805 99.14291382]
[125.30912018 102.27137756]
[122.57755280 111.66039276]
[116.50276184 119.32277679]
[107.98429108 124.12388611]
[108.28442383 139.12088013]
[111.60010529 147.69377136]
[108.43750000 154.42027283]
[108.43750000 169.42027283]
[108.43750000 184.42027283]
[108.43750000 199.42027283]
[108.43750000 214.42027283]
[108.43750000 229.42027283]
[108.43750000 244.42027283]
[108.43750000 259.42025757]
[108.43750000 274.42025757]
[108.43750000 289.42025757]
[108.43750000 304.42025757]
[108.43750000 319.42025757]
[108.43750000 334.42025757]
[123.14705658 337.65182495]
[136.81782532 343.97036743]
[148.81042480 353.08035278]
[158.56390381 364.55569458]
[165.62210083 377.85968018]
[169.65487671 392.37005615]
[170.47361755 407.40814209]
[168.04002380 422.27056885]
[162.46792603 436.26217651]
[154.01794434 448.72860718]
[143.08528137 459.08676147]
[130.18130493 466.85214233]
[115.90953827 471.66159058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[27 129]
[28 128]
[31 98]
[32 97]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[42 86]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[100 125]
[101 124]
[102 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
