%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCUCUGAGGGGGGGGGGGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCxxxxxxxxxxAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCCCCCCCCCCCACCCCUCUGA\
) } def
/len { sequence length } bind def

/coor [
[72.44164276 339.00390625]
[60.55736923 329.72879028]
[51.23866272 317.87869263]
[45.02729416 304.14251709]
[42.28439331 289.31890869]
[43.16942215 274.26962280]
[47.63092804 259.86968994]
[55.40952682 246.95625305]
[66.05297852 236.28009033]
[78.94248962 228.46191406]
[93.32867432 223.95623779]
[92.39304352 208.98545837]
[91.45742035 194.01466370]
[90.52178955 179.04386902]
[89.58615875 164.07307434]
[88.65053558 149.10227966]
[87.71490479 134.13150024]
[86.77927399 119.16070557]
[86.70731354 96.94892120]
[76.26750183 86.17810822]
[65.82768250 75.40730286]
[55.38787460 64.63649750]
[44.94806290 53.86568451]
[34.50824738 43.09487915]
[18.93685722 42.68316650]
[8.50283623 31.61131668]
[8.99130154 16.76891136]
[-1.44851136 5.99810219]
[-11.88832378 -4.77270603]
[-22.32813644 -15.54351521]
[-32.76794815 -26.31432343]
[-44.71149826 -17.21004105]
[-57.64803314 -9.58229828]
[-71.39594269 -3.53817534]
[-85.76222229 0.83747798]
[-100.54519653 3.48323417]
[-115.53733063 4.36195087]
[-130.52816772 3.46129227]
[-145.30725098 0.79390210]
[-159.66711426 -3.60277343]
[-173.40615845 -9.66701221]
[-186.33151245 -17.31368065]
[-198.26173401 -26.43543434]
[-209.02932739 -36.90421295]
[-218.48312378 -48.57305908]
[-226.49043274 -61.27815247]
[-232.93882751 -74.84113312]
[-237.73779297 -89.07160950]
[-240.81994629 -103.76979828]
[-242.14201355 -118.72935486]
[-241.68547058 -133.74028015]
[-239.45668030 -148.59184265]
[-235.48696899 -163.07554626]
[-229.83204651 -176.98806763]
[-222.57130432 -190.13409424]
[-213.80667114 -202.32907104]
[-203.66117859 -213.40180969]
[-192.27726746 -223.19685364]
[-179.81474304 -231.57670593]
[-166.44856262 -238.42372131]
[-152.36637878 -243.64178467]
[-137.76585388 -247.15763855]
[-122.85198212 -248.92192078]
[-107.83411407 -248.90986633]
[-92.92308807 -247.12164307]
[-78.32823181 -243.58236694]
[-64.25443268 -238.34172058]
[-50.89925766 -231.47326660]
[-38.45020294 -223.07342529]
[-27.08202553 -213.26011658]
[-16.95432091 -202.17111206]
[-8.20926666 -189.96208191]
[-0.96962792 -176.80442810]
[4.66296101 -162.88284302]
[8.60942745 -148.39279175]
[10.81437016 -133.53767395]
[11.24683380 -118.52603149]
[9.90074825 -103.56861115]
[6.79501009 -88.87538910]
[1.97321916 -74.65264130]
[-4.49693441 -61.10001755]
[-12.52462006 -48.40779114]
[-21.99714088 -36.75413513]
[-11.55732822 -25.98332787]
[-1.11751533 -15.21251869]
[9.32229710 -4.44171000]
[19.76210976 6.32909822]
[34.61252975 6.30399609]
[45.35341644 17.07840919]
[45.27905655 32.65506363]
[55.71886826 43.42587280]
[66.15868378 54.19668198]
[76.59849548 64.96749115]
[87.03830719 75.73829651]
[97.47811890 86.50910950]
[111.38067627 92.14106750]
[126.37337494 91.67301941]
[141.36607361 91.20497894]
[156.35876465 90.73693848]
[171.32955933 89.80130768]
[184.34594727 80.80776215]
[197.74082947 87.32134247]
[212.67512512 85.91903687]
[227.60943604 84.51673126]
[242.54374695 83.11443329]
[257.47805786 81.71212769]
[272.41235352 80.30982208]
[287.34667969 78.90751648]
[298.64675903 67.51947021]
[314.57955933 69.39706421]
[322.92279053 83.09997559]
[317.27624512 98.11650848]
[301.97146606 102.92725372]
[288.74896240 93.84182739]
[273.81466675 95.24413300]
[258.88037109 96.64643097]
[243.94604492 98.04873657]
[229.01173401 99.45104218]
[214.07743835 100.85334778]
[199.14312744 102.25564575]
[187.19493103 111.14889526]
[172.73185730 104.73561859]
[170.18936157 107.26607513]
[166.26965332 108.65800476]
[161.53689575 108.26629639]
[156.82681274 105.72963715]
[141.83410645 106.19767761]
[126.84141541 106.66571808]
[111.84871674 107.13375854]
[101.75006866 118.22507477]
[102.68569946 133.19586182]
[103.62132263 148.16665649]
[104.55695343 163.13745117]
[105.49258423 178.10824585]
[106.42820740 193.07904053]
[107.36383820 208.04981995]
[108.29946899 223.02061462]
[123.13469696 225.70004272]
[136.89733887 231.85253906]
[148.78723145 241.12043762]
[158.11311340 252.96488953]
[164.33280945 266.69729614]
[167.08470154 281.51925659]
[166.20880127 296.56906128]
[161.75601196 310.97171021]
[153.98524475 323.88986206]
[143.34826660 334.57244873]
[130.46350098 342.39846802]
[116.08005524 346.91284180]
[101.03414917 347.85317993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 95]
[20 94]
[21 93]
[22 92]
[23 91]
[24 90]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[96 129]
[97 128]
[98 127]
[99 126]
[100 122]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
