%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCCUUACGGGGGGGGGGCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCxxxxxxxxxxUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCCCCCCCCCCCUCGGCUUAC\
) } def
/len { sequence length } bind def

/coor [
[103.55551147 384.50372314]
[90.06663513 377.77218628]
[78.58113098 368.00762939]
[69.76676178 355.77770996]
[64.13597870 341.79351807]
[62.01615143 326.86804199]
[63.53052139 311.86904907]
[68.59104156 297.66854858]
[76.90351105 285.09213257]
[87.98464203 274.87097168]
[101.19019318 267.59933472]
[115.75241852 263.69995117]
[115.44444275 248.70312500]
[115.13646698 233.70628357]
[114.82849121 218.70944214]
[114.52050781 203.71260071]
[114.21253204 188.71577454]
[113.90455627 173.71893311]
[113.59658051 158.72209167]
[113.28859711 143.72525024]
[112.98062134 128.72842407]
[112.67264557 113.73158264]
[99.02928925 116.91808319]
[88.47665405 109.92175293]
[73.76113129 112.82922363]
[59.04560852 115.73670197]
[44.33008957 118.64417267]
[40.54864883 133.43144226]
[30.71916008 145.10809326]
[16.79327583 151.35568237]
[1.53599119 150.93377686]
[-12.02335072 143.92614746]
[-21.19253159 131.72413635]
[-24.15100479 116.75048828]
[-20.31136131 101.97822571]
[-10.43596840 90.34038544]
[3.51441026 84.14766693]
[18.76991653 84.62965393]
[32.30155563 91.69063568]
[41.42261505 103.92864990]
[56.13813782 101.02117920]
[70.85366058 98.11370087]
[85.56918335 95.20623016]
[99.20303345 83.07283783]
[117.10089874 92.46929932]
[113.36379242 80.08229828]
[118.91383362 68.84093475]
[130.26901245 64.56050873]
[136.81689453 51.06512451]
[127.79888916 35.39417648]
[129.92675781 17.59692192]
[142.16947937 4.72050619]
[159.52838135 1.75073874]
[165.51667786 -12.00209045]
[171.50497437 -25.75491905]
[177.49327087 -39.50774765]
[178.06037903 -48.68784332]
[183.74829102 -53.47948074]
[190.01770020 -67.10646057]
[196.28710938 -80.73343658]
[202.55651855 -94.36042023]
[208.82591248 -107.98739624]
[215.09532166 -121.61437988]
[202.36351013 -129.58489990]
[190.75550842 -139.11814880]
[180.46194458 -150.05755615]
[171.65182495 -162.22349548]
[164.46981812 -175.41619873]
[159.03388977 -189.41900635]
[155.43327332 -204.00201416]
[153.72711182 -218.92573547]
[153.94342041 -233.94509888]
[156.07862854 -248.81349182]
[160.09770203 -263.28677368]
[165.93461609 -277.12722778]
[173.49354553 -290.10763550]
[182.65034485 -302.01483154]
[193.25468445 -312.65328979]
[205.13240051 -321.84829712]
[218.08845520 -329.44888306]
[231.91011047 -335.33023071]
[246.37039185 -339.39575195]
[261.23184204 -341.57873535]
[276.25045776 -341.84326172]
[291.17956543 -340.18505859]
[305.77404785 -336.63131714]
[319.79428101 -331.24038696]
[333.00997925 -324.10079956]
[345.20413208 -315.32980347]
[356.17657471 -305.07141113]
[365.74703979 -293.49411011]
[373.75842285 -280.78796387]
[380.07916260 -267.16165161]
[384.60546875 -252.83889771]
[387.26296997 -238.05491638]
[388.00811768 -223.05249023]
[386.82858276 -208.07794189]
[383.74380493 -193.37718201]
[378.80438232 -179.19160461]
[372.09146118 -165.75415039]
[363.71527100 -153.28547668]
[353.81335449 -141.99034119]
[342.54830933 -132.05419922]
[330.10510254 -123.64022064]
[316.68807983 -116.88658142]
[302.51754761 -111.90416718]
[287.82620239 -108.77479553]
[272.85531616 -107.54985809]
[257.85067749 -108.24947357]
[243.05871582 -110.86214447]
[228.72230530 -115.34497070]
[222.45289612 -101.71799469]
[216.18348694 -88.09101105]
[209.91409302 -74.46403503]
[203.64468384 -60.83705521]
[197.37527466 -47.21007538]
[191.24610901 -33.51945114]
[185.25781250 -19.76662254]
[179.26951599 -6.01379347]
[173.28121948 7.73903561]
[180.95693970 17.23338127]
[183.86111450 29.16646576]
[181.37762451 41.26807404]
[173.92140198 51.20868683]
[162.87062073 57.04788971]
[150.31227112 57.61299515]
[143.76440430 71.10837555]
[145.99134827 88.48897552]
[130.72787476 98.73870087]
[127.66947937 113.42359924]
[127.97746277 128.42044067]
[128.28543091 143.41728210]
[128.59341431 158.41410828]
[128.90139771 173.41094971]
[129.20936584 188.40779114]
[129.51734924 203.40463257]
[129.82533264 218.40147400]
[130.13330078 233.39830017]
[130.44128418 248.39514160]
[130.74925232 263.39196777]
[145.45928955 266.69021606]
[158.95225525 273.41357422]
[170.44366455 283.17117310]
[179.26545715 295.39572144]
[184.90470886 309.37649536]
[187.03358459 324.30068970]
[185.52832031 339.30059814]
[180.47639465 353.50418091]
[172.17155457 366.08563232]
[161.09663391 376.31350708]
[147.89549255 383.59313965]
[133.33563232 387.50134277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 43]
[25 42]
[26 41]
[27 40]
[45 129]
[48 127]
[49 126]
[53 120]
[54 119]
[55 118]
[56 117]
[58 116]
[59 115]
[60 114]
[61 113]
[62 112]
[63 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
