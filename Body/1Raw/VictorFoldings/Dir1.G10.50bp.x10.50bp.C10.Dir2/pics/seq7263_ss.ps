%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAUUAAUAAUGGGGGGGGGGUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGxxxxxxxxxxCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUCCCCCCCCCCUAAUUUUAAUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 403.85855103]
[70.75619507 399.04910278]
[57.85220718 391.28372192]
[46.91955185 380.92556763]
[38.46956635 368.45913696]
[32.89747238 354.46752930]
[30.46388245 339.60510254]
[31.28262329 324.56701660]
[35.31539917 310.05664062]
[42.37359238 296.75265503]
[52.12707901 285.27731323]
[64.11966705 276.16732788]
[77.79044342 269.84878540]
[92.50000000 266.61721802]
[92.50000000 251.61721802]
[92.50000000 236.61721802]
[92.50000000 221.61721802]
[92.50000000 206.61721802]
[92.50000000 191.61721802]
[92.50000000 176.61721802]
[92.50000000 161.61721802]
[92.50000000 146.61721802]
[92.50000000 131.61721802]
[84.77328491 131.23611450]
[76.89760590 128.90757751]
[69.37110901 124.56078339]
[55.18128204 129.42381287]
[40.99146271 134.28681946]
[32.67477036 148.00587463]
[16.74563217 149.91432190]
[5.42352295 138.54817200]
[7.39379358 122.62655640]
[21.14502144 114.36318970]
[36.12844086 120.09700775]
[50.31826401 115.23398590]
[64.50808716 110.37096405]
[63.30875778 95.41898346]
[48.52520370 92.87997437]
[33.74165344 90.34096527]
[18.95809937 87.80195618]
[4.17454720 85.26294708]
[-11.01482010 91.44478607]
[-23.79533005 81.16905975]
[-21.01948929 65.00655365]
[-5.54284620 59.58386230]
[6.71355677 70.47939301]
[21.49711037 73.01840210]
[36.28066254 75.55741119]
[51.06421661 78.09642792]
[65.84777069 80.63543701]
[75.52855682 71.49452972]
[87.23359680 66.47081757]
[99.37733459 65.81967926]
[110.44895935 69.23121643]
[118.42036438 56.52465439]
[126.39176178 43.81809235]
[134.36315918 31.11152840]
[134.99505615 24.43929863]
[138.41757202 19.81427002]
[142.91632080 18.06500435]
[151.38972473 5.68754864]
[159.86312866 -6.68990755]
[146.25918579 -0.37066245]
[131.57748413 2.70303059]
[116.58115387 2.37140536]
[102.04968262 -1.34830070]
[88.73838806 -8.26274204]
[77.33917999 -18.01251793]
[68.44458008 -30.09084511]
[62.51690292 -43.86991119]
[59.86426926 -58.63349915]
[60.62455750 -73.61421967]
[64.75824738 -88.03339386]
[72.05048370 -101.14153290]
[82.12221527 -112.25729370]
[94.44993591 -120.80290222]
[108.39286041 -126.33415985]
[123.22625732 -128.56356812]
[138.17910767 -127.37523651]
[152.47419739 -122.83093262]
[165.36846924 -115.16687012]
[176.19169617 -104.78141785]
[184.38131714 -92.21439362]
[189.51162720 -78.11901093]
[191.31597900 -63.22792816]
[189.70057678 -48.31516647]
[184.74938965 -34.15586472]
[176.71757507 -21.48329544]
[190.08947754 -28.27977753]
[203.46139526 -35.07625961]
[216.69462585 -42.13893890]
[229.78390503 -49.46498108]
[242.87316895 -56.79102707]
[247.29473877 -73.68874359]
[262.26107788 -82.02127075]
[278.30926514 -77.07696533]
[291.24932861 -84.66344452]
[304.18939209 -92.24992371]
[317.12945557 -99.83640289]
[330.06954956 -107.42288208]
[343.00961304 -115.00936127]
[346.75512695 -130.36340332]
[360.30374146 -138.50036621]
[375.61734009 -134.59272766]
[383.61059570 -120.95882416]
[379.54125977 -105.68740845]
[365.82360840 -97.83873749]
[350.59606934 -102.06929779]
[337.65600586 -94.48281860]
[324.71594238 -86.89633942]
[311.77587891 -79.30986023]
[298.83581543 -71.72338104]
[285.89575195 -64.13690186]
[284.40893555 -51.30506134]
[275.65942383 -41.53842926]
[262.68765259 -38.56789780]
[250.19921875 -43.70175552]
[237.10993958 -36.37570953]
[224.02067566 -29.04966354]
[221.87394714 -24.72644043]
[216.95988464 -21.73369217]
[210.25787354 -21.70435524]
[196.88597107 -14.90787315]
[183.51406860 -8.11139107]
[172.24058533 1.78349686]
[163.76718140 14.16095257]
[155.29377747 26.53840828]
[147.06973267 39.08293152]
[139.09832764 51.78949356]
[131.12692261 64.49605560]
[123.15552521 77.20262146]
[132.40937805 97.64813995]
[126.20427704 119.21547699]
[107.50000000 131.61721802]
[107.50000000 146.61721802]
[107.50000000 161.61721802]
[107.50000000 176.61721802]
[107.50000000 191.61721802]
[107.50000000 206.61721802]
[107.50000000 221.61721802]
[107.50000000 236.61721802]
[107.50000000 251.61721802]
[107.50000000 266.61721802]
[122.20955658 269.84878540]
[135.88034058 276.16732788]
[147.87292480 285.27731323]
[157.62640381 296.75265503]
[164.68460083 310.05664062]
[168.71737671 324.56701660]
[169.53611755 339.60510254]
[167.10252380 354.46752930]
[161.53042603 368.45913696]
[153.08044434 380.92556763]
[142.14779663 391.28372192]
[129.24380493 399.04910278]
[114.97203827 403.85855103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 36]
[27 35]
[28 34]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[54 131]
[55 130]
[56 129]
[57 128]
[60 127]
[61 126]
[62 125]
[88 124]
[89 123]
[90 122]
[91 119]
[92 118]
[93 117]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
