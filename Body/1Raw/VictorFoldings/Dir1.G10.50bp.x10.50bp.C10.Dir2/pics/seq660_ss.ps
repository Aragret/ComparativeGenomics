%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCAAUAGGGGGGGGGGCAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUAxxxxxxxxxxACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACCCCCCCCCCCUCCUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[53.05050659 304.71759033]
[40.18510437 301.33486938]
[27.55964661 297.14447021]
[15.22478676 292.16323853]
[3.23000193 286.41113281]
[-8.37659073 279.91125488]
[-19.54842949 272.68966675]
[-30.24070168 264.77532959]
[-40.41051102 256.19998169]
[-50.01706696 246.99804688]
[-59.02182770 237.20643616]
[-70.72145081 246.59359741]
[-82.42107391 255.98075867]
[-88.34277344 270.65194702]
[-103.11181641 272.58190918]
[-114.81143951 281.96908569]
[-126.51106262 291.35623169]
[-138.21067810 300.74340820]
[-149.91030884 310.13055420]
[-155.34869385 325.60171509]
[-171.51400757 328.36114502]
[-181.77676392 315.57022095]
[-175.57952881 300.38714600]
[-159.29747009 298.43093872]
[-147.59783936 289.04379272]
[-135.89822388 279.65661621]
[-124.19860077 270.26943970]
[-112.49897766 260.88229370]
[-107.41410828 246.88252258]
[-91.80823517 244.28112793]
[-80.10861206 234.89396667]
[-68.40898895 225.50680542]
[-82.62123871 203.74502563]
[-94.03678894 180.39447021]
[-102.48081970 155.81274414]
[-107.82402802 130.37629700]
[-109.98458099 104.47464752]
[-108.92938995 78.50447845]
[-104.67461395 52.86349869]
[-97.28540802 27.94437408]
[-86.87493896 4.12872267]
[-99.96809387 -3.19038320]
[-113.06124878 -10.50948906]
[-126.15440369 -17.82859421]
[-138.94082642 -9.41633320]
[-154.17314148 -7.92133141]
[-168.35108948 -13.68712902]
[-178.21667480 -25.38878632]
[-181.50285339 -40.33735275]
[-177.45449829 -55.09775162]
[-167.00189209 -66.27815247]
[-152.54695129 -71.30938721]
[-137.41131592 -69.03530884]
[-125.07306671 -59.97848129]
[-118.36742401 -46.22010422]
[-118.83530426 -30.92174911]
[-105.74214935 -23.60264397]
[-92.64899445 -16.28353691]
[-79.55583954 -8.96443176]
[-73.19185638 -18.81972694]
[-66.28754425 -28.30432320]
[-58.86443710 -37.38863373]
[-50.94570541 -46.04431152]
[-42.55604172 -54.24435425]
[-33.72163010 -61.96318054]
[-24.47002983 -69.17670441]
[-14.83010101 -75.86242676]
[-4.83192062 -81.99948883]
[5.49331760 -87.56874084]
[16.11340141 -92.55281067]
[26.99519730 -96.93614197]
[38.10475922 -100.70507050]
[49.40742111 -103.84783173]
[60.86792374 -106.35461426]
[72.45051575 -108.21760559]
[84.11904907 -109.43099213]
[95.83713531 -109.99098969]
[107.56820679 -109.89585114]
[119.27567291 -109.14586639]
[130.92298889 -107.74338531]
[142.47384644 -105.69277954]
[153.89218140 -103.00044250]
[165.14237976 -99.67477417]
[176.18936157 -95.72615814]
[186.99862671 -91.16690826]
[197.53646851 -86.01124573]
[207.77001953 -80.27525330]
[217.66735840 -73.97683716]
[227.19757080 -67.13564301]
[236.33096313 -59.77301025]
[245.03901672 -51.91191101]
[253.29457092 -43.57687378]
[261.07186890 -34.79389954]
[268.34667969 -25.59038925]
[275.09625244 -15.99505711]
[281.29953003 -6.03783894]
[286.93722534 4.25019979]
[291.99166870 14.83696175]
[296.44714355 25.68941879]
[300.28973389 36.77371216]
[303.50747681 48.05526352]
[306.09027100 59.49887466]
[308.03012085 71.06884003]
[309.32095337 82.72906494]
[309.95874023 94.44317627]
[309.94146729 106.17462158]
[309.26922607 117.88680267]
[307.94409180 129.54318237]
[322.71014404 132.18205261]
[337.47619629 134.82090759]
[352.24224854 137.45977783]
[367.00833130 140.09863281]
[376.84652710 128.30433655]
[391.26931763 123.02434540]
[406.39706421 125.67893982]
[418.16046143 135.55406189]
[423.39523315 149.99333191]
[420.69323730 165.11268616]
[410.78128052 176.84507751]
[396.32565308 182.03456116]
[381.21484375 179.28517151]
[369.51358032 169.33650208]
[364.36944580 154.86470032]
[349.60339355 152.22583008]
[334.83734131 149.58695984]
[320.07128906 146.94810486]
[305.30523682 144.30923462]
[302.08847046 157.21713257]
[298.06100464 169.89550781]
[293.23904419 182.29348755]
[287.64190674 194.36135864]
[281.29202271 206.05068970]
[274.21490479 217.31460571]
[266.43890381 228.10791016]
[257.99523926 238.38731384]
[248.91778564 248.11157227]
[239.24295044 257.24169922]
[229.00953674 265.74102783]
[218.25859070 273.57550049]
[207.03326416 280.71365356]
[195.37857056 287.12689209]
[183.34127808 292.78945923]
[170.96965027 297.67868042]
[158.31332397 301.77487183]
[145.42308044 305.06167603]
[132.35061646 307.52584839]
[119.14837646 309.15756226]
[105.86933136 309.95022583]
[92.56673431 309.90066528]
[79.29396057 309.00909424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[41 59]
[42 58]
[43 57]
[44 56]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
