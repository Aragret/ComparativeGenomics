%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACCCACUCCAGGGGGGGGGGCCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGxxxxxxxxxxACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACCCCCCCCCCCAAAACCCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 415.46380615]
[70.66226196 410.95709229]
[57.50136948 403.65121460]
[46.08077240 393.84533691]
[36.86813354 381.94107056]
[30.24070549 368.42581177]
[26.46987534 353.85302734]
[25.71005821 338.81948853]
[27.99236870 323.94076538]
[33.22334671 309.82617188]
[41.18878555 297.05368042]
[51.56250763 286.14630127]
[63.91971207 277.55072021]
[77.75438690 271.61886597]
[92.50000000 268.59368896]
[92.50000000 253.59368896]
[92.50000000 238.59368896]
[92.50000000 223.59368896]
[92.50000000 208.59368896]
[92.50000000 193.59368896]
[92.50000000 178.59368896]
[92.50000000 163.59368896]
[92.50000000 148.59368896]
[92.50000000 133.59368896]
[86.70032501 131.74751282]
[81.31649017 128.90869141]
[76.51683807 125.16599274]
[72.45142365 120.63642120]
[69.24736786 115.46161652]
[67.00485229 109.80337524]
[52.04070282 110.83987427]
[37.07655716 111.87636566]
[31.31485367 115.29116058]
[25.56484032 115.24909973]
[21.50286102 112.64627075]
[6.50944805 113.09076691]
[-5.49568558 123.73296356]
[-21.27582550 120.84043121]
[-28.72579765 106.63207245]
[-22.13062096 92.00732422]
[-6.54955196 88.18504333]
[6.06494808 98.09735870]
[21.05836105 97.65285492]
[36.04006577 96.91221619]
[51.00421143 95.87572479]
[65.96836090 94.83923340]
[79.11350250 72.64053345]
[103.99204254 65.81155396]
[108.93624115 51.64981461]
[113.88043213 37.48807144]
[118.82462311 23.32632828]
[123.76882172 9.16458511]
[128.29118347 -5.13745022]
[132.38774109 -19.56721878]
[136.48429871 -33.99698639]
[140.58085632 -48.42675400]
[144.67742920 -62.85652161]
[130.74172974 -68.44348907]
[117.46638489 -75.45654297]
[104.99684143 -83.81885529]
[93.46972656 -93.43879700]
[83.01132965 -104.21096802]
[73.73624420 -116.01734161]
[65.74609375 -128.72856140]
[59.12841797 -142.20536804]
[53.95572281 -156.30007935]
[50.28469086 -170.85827637]
[48.15554047 -185.72045898]
[47.59159470 -200.72378540]
[48.59904099 -215.70385742]
[51.16683578 -230.49656677]
[55.26684570 -244.93981934]
[60.85414886 -258.87536621]
[67.86753082 -272.15054321]
[76.23014069 -284.61990356]
[85.85036469 -296.14675903]
[96.62278748 -306.60491943]
[108.42938995 -315.87969971]
[121.14080811 -323.86953735]
[134.61776733 -330.48690796]
[148.71260071 -335.65924072]
[163.27088928 -339.32992554]
[178.13313293 -341.45870972]
[193.13645935 -342.02230835]
[208.11651611 -341.01449585]
[222.90916443 -338.44631958]
[237.35231018 -334.34597778]
[251.28773499 -328.75833130]
[264.56274414 -321.74462891]
[277.03189087 -313.38171387]
[288.55853271 -303.76119995]
[299.01638794 -292.98852539]
[308.29092407 -281.18170166]
[316.28045654 -268.47009277]
[322.89746094 -254.99298096]
[328.06948853 -240.89801025]
[331.73980713 -226.33963013]
[333.86822510 -211.47734070]
[334.43145752 -196.47399902]
[333.42327881 -181.49397278]
[330.85476685 -166.70138550]
[326.75405884 -152.25833130]
[321.16607666 -138.32304382]
[314.15203857 -125.04821014]
[305.78881836 -112.57928467]
[296.16802979 -101.05286407]
[285.39511108 -90.59525299]
[273.58804321 -81.32102966]
[260.87625122 -73.33180237]
[247.39897156 -66.71511078]
[233.30387878 -61.54344177]
[218.74540710 -57.87347031]
[203.88307190 -55.74540329]
[188.87971497 -55.18255234]
[173.89970398 -56.19108963]
[159.10719299 -58.75996017]
[155.01063538 -44.33019257]
[150.91406250 -29.90042686]
[146.81750488 -15.47065830]
[142.72094727 -1.04089046]
[144.15100098 2.23700190]
[144.03187561 6.37998247]
[141.97036743 10.63709641]
[137.93055725 14.10877895]
[132.98637390 28.27052116]
[128.04217529 42.43226242]
[123.09797668 56.59400558]
[118.15378571 70.75575256]
[126.82526398 78.43170929]
[132.46018982 88.54914093]
[134.42070007 99.96278381]
[132.48487854 111.38064575]
[126.87184143 121.51023865]
[118.21697998 129.20492554]
[107.50000000 133.59368896]
[107.50000000 148.59368896]
[107.50000000 163.59368896]
[107.50000000 178.59368896]
[107.50000000 193.59368896]
[107.50000000 208.59368896]
[107.50000000 223.59368896]
[107.50000000 238.59368896]
[107.50000000 253.59368896]
[107.50000000 268.59368896]
[122.24561310 271.61886597]
[136.08029175 277.55072021]
[148.43750000 286.14630127]
[158.81121826 297.05368042]
[166.77665710 309.82617188]
[172.00762939 323.94076538]
[174.28994751 338.81948853]
[173.53012085 353.85302734]
[169.75929260 368.42581177]
[163.13186646 381.94107056]
[153.91921997 393.84533691]
[142.49862671 403.65121460]
[129.33773804 410.95709229]
[114.97548676 415.46380615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[30 46]
[31 45]
[32 44]
[35 43]
[36 42]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
