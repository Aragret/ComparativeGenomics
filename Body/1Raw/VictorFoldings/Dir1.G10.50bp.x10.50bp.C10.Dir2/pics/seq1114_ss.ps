%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAGCAAUAAACGGGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGACCCCCCCCCCUUUAGCAGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[55.25366211 450.23034668]
[40.59200287 446.80551147]
[26.96296692 440.40686035]
[14.96235275 431.31405640]
[5.11477947 419.92462158]
[-2.14926076 406.73648071]
[-6.51221514 392.32611084]
[-7.78335333 377.32351685]
[-5.90710735 362.38452148]
[-0.96549869 348.16223145]
[6.82544708 335.27832031]
[17.12514305 324.29605103]
[29.48333168 315.69555664]
[43.35976410 309.85275269]
[58.14782333 307.02310181]
[58.44795609 292.02609253]
[58.74808884 277.02911377]
[59.04822159 262.03210449]
[59.34835434 247.03511047]
[59.64848709 232.03810120]
[59.94861603 217.04110718]
[60.24874878 202.04411316]
[60.54888153 187.04711914]
[60.84901428 172.05012512]
[57.13744736 170.13368225]
[53.86973953 167.53166199]
[51.17081833 164.34352112]
[49.14386368 160.69113159]
[34.16262817 161.44119263]
[19.18139267 162.19126892]
[29.27770424 173.28471375]
[28.75748444 188.27568054]
[17.91645241 198.64256287]
[2.91720462 198.49226379]
[-7.71391773 187.91023254]
[-7.93364143 172.91184998]
[2.38240266 162.02319336]
[-12.58082485 160.97351074]
[-25.58535957 170.36827087]
[-40.99934769 165.91984558]
[-46.99849701 151.04067993]
[-38.98077011 137.14479065]
[-23.09668541 134.89192200]
[-11.53115082 146.01028442]
[3.43207669 147.05995178]
[18.43132591 147.21003723]
[33.41255951 146.45996094]
[48.39379501 145.70989990]
[57.25200653 133.43930054]
[72.41387939 129.85704041]
[79.60859680 116.69512177]
[86.80332184 103.53320312]
[88.00264740 88.58123016]
[82.99790192 74.44077301]
[77.99315643 60.30031586]
[72.98841095 46.15985870]
[66.59629059 32.59000778]
[58.88072968 19.72649193]
[51.16516495 6.86297464]
[44.02653122 1.07264388]
[43.42688370 -6.33602095]
[35.97024918 -19.35134315]
[20.65444565 -23.25028610]
[12.65344715 -36.87965012]
[16.71409988 -52.15337372]
[30.42729378 -60.00982666]
[45.65723419 -55.78791809]
[53.36826324 -41.99242783]
[48.98556900 -26.80797768]
[56.44220352 -13.79265594]
[64.02868652 -0.85258877]
[71.74424744 12.01092911]
[79.45980835 24.87444687]
[81.36740112 9.99623775]
[90.35277557 -2.01472068]
[104.08707428 -8.04539871]
[119.01060486 -6.53275013]
[131.25546265 2.13117242]
[137.64797974 15.70083237]
[136.53134155 30.65921211]
[128.19494629 43.12936020]
[114.79946136 49.87923431]
[99.81674194 49.15938568]
[87.12886810 41.15511322]
[92.13361359 55.29557037]
[97.13835907 69.43602753]
[102.14310455 83.57648468]
[98.51048279 69.02299500]
[104.54656219 55.29107285]
[117.72534943 48.12730408]
[132.53173828 50.52960968]
[142.76948547 61.49266434]
[144.15426636 76.42860413]
[136.10656738 89.08699036]
[121.99296570 94.17050171]
[136.52618408 90.45759583]
[147.98171997 79.54515839]
[162.22811890 83.89134216]
[176.76133728 80.17844391]
[191.29454041 76.46553802]
[195.10328674 72.73387909]
[199.52612305 71.04436493]
[203.66746521 71.28363037]
[206.81124878 72.99388885]
[221.54103088 70.15958405]
[236.27082825 67.32527924]
[251.00061035 64.49098206]
[265.73040771 61.65667725]
[280.46020508 58.82237244]
[287.90869141 45.07268524]
[302.47161865 39.37572479]
[317.27279663 44.42142487]
[325.32357788 57.82735443]
[322.82260132 73.26364899]
[310.95077515 83.44176483]
[295.31362915 83.55589294]
[283.29449463 73.55216217]
[268.56469727 76.38646698]
[253.83491516 79.22077179]
[239.10513306 82.05506897]
[224.37533569 84.88937378]
[209.64553833 87.72367859]
[195.00744629 90.99875641]
[180.47422791 94.71165466]
[165.94102478 98.42456055]
[155.52499390 109.07142639]
[140.23907471 104.99081421]
[125.70586395 108.70372009]
[111.00947571 115.40376282]
[99.96523285 110.72792816]
[92.77051544 123.88983917]
[85.57579041 137.05175781]
[90.06882477 157.63507080]
[75.84600830 172.35025024]
[75.54587555 187.34724426]
[75.24575043 202.34423828]
[74.94561768 217.34124756]
[74.64548492 232.33824158]
[74.34535217 247.33523560]
[74.04521942 262.33224487]
[73.74508667 277.32922363]
[73.44495392 292.32623291]
[73.14482117 307.32321167]
[87.80783081 310.74227905]
[101.43938446 317.13558960]
[113.44357300 326.22366333]
[123.29562378 337.60922241]
[130.56484985 350.79452515]
[134.93347168 365.20315552]
[136.21051025 380.20523071]
[134.34014893 395.14495850]
[129.40412903 409.36923218]
[121.61825562 422.25619507]
[111.32288361 433.24249268]
[98.96807861 441.84786987]
[85.09394836 447.69613647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[28 48]
[29 47]
[30 46]
[37 45]
[38 44]
[50 132]
[51 131]
[52 130]
[53 87]
[54 86]
[55 85]
[56 84]
[57 73]
[58 72]
[59 71]
[61 70]
[62 69]
[95 128]
[96 127]
[98 125]
[99 124]
[100 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
