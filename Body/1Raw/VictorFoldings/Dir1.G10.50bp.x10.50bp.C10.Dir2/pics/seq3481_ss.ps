%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCCACAUGGGGGGGGGGCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUxxxxxxxxxxCAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCACAU\
) } def
/len { sequence length } bind def

/coor [
[84.24924469 413.03701782]
[70.76036835 406.30548096]
[59.27486420 396.54092407]
[50.46049500 384.31103516]
[44.82971573 370.32681274]
[42.70988464 355.40136719]
[44.22425461 340.40234375]
[49.28477859 326.20184326]
[57.59724426 313.62542725]
[68.67837524 303.40426636]
[81.88392639 296.13262939]
[96.44615173 292.23324585]
[96.13817596 277.23641968]
[95.83020020 262.23959351]
[95.52222443 247.24273682]
[95.21424103 232.24591064]
[94.90626526 217.24906921]
[94.59828949 202.25222778]
[94.29031372 187.25538635]
[93.98233032 172.25856018]
[93.67435455 157.26171875]
[86.00156403 155.88346863]
[78.58509827 153.48196411]
[71.56074524 150.10116577]
[65.05713654 145.80299377]
[59.19334793 140.66613770]
[54.07675171 134.78466797]
[49.80103683 128.26626587]
[46.44449615 121.23030090]
[44.06858063 113.80559540]
[42.71680450 106.12809753]
[42.41391754 98.33839417]
[43.16546249 90.57910919]
[44.95767593 82.99233246]
[47.75775146 75.71697235]
[51.51440811 68.88625336]
[56.15886307 62.62524033]
[61.60607529 57.04858017]
[67.75630188 52.25838470]
[74.49692535 48.34236526]
[81.70452881 45.37222672]
[89.24713135 43.40235138]
[96.98662567 42.46881104]
[104.78129578 42.58870316]
[112.48841858 43.75982285]
[117.61872101 29.66443443]
[122.74902344 15.56904602]
[127.87932587 1.47365630]
[133.00962830 -12.62173271]
[138.13992310 -26.71712303]
[124.54394531 -33.07691574]
[111.56325531 -40.61344910]
[99.29945374 -49.26773453]
[87.84851074 -58.97203827]
[77.30004883 -69.65041351]
[67.73664093 -81.21928406]
[59.23311615 -93.58810425]
[51.85604095 -106.66007233]
[45.66314316 -120.33287811]
[40.70289612 -134.49951172]
[37.01412201 -149.04910278]
[34.62568665 -163.86778259]
[33.55628586 -178.83955383]
[33.81428909 -193.84724426]
[35.39767838 -208.77342224]
[38.29405975 -223.50123596]
[42.48076630 -237.91543579]
[47.92502594 -251.90319824]
[54.58423615 -265.35507202]
[62.40627289 -278.16574097]
[71.32991791 -290.23495483]
[81.28533936 -301.46826172]
[92.19460297 -311.77777100]
[103.97234344 -321.08273315]
[116.52637482 -329.31036377]
[129.75845337 -336.39627075]
[143.56500244 -342.28497314]
[157.83796692 -346.93038940]
[172.46565247 -350.29617310]
[187.33355713 -352.35598755]
[202.32533264 -353.09368896]
[217.32365417 -352.50354004]
[232.21110535 -350.59011841]
[246.87120056 -347.36840820]
[261.18917847 -342.86364746]
[275.05300903 -337.11108398]
[288.35415649 -330.15570068]
[300.98852539 -322.05200195]
[312.85726929 -312.86337280]
[323.86743164 -302.66171265]
[333.93289185 -291.52691650]
[342.97485352 -279.54605103]
[350.92257690 -266.81298828]
[357.71380615 -253.42729187]
[363.29544067 -239.49375916]
[367.62377930 -225.12145996]
[370.66491699 -210.42285156]
[372.39508057 -195.51298523]
[372.80075073 -180.50854492]
[371.87872314 -165.52697754]
[369.63619995 -150.68553162]
[366.09075928 -136.10034180]
[361.27014160 -121.88558960]
[355.21206665 -108.15251160]
[347.96398926 -95.00859070]
[339.58258057 -82.55670166]
[330.13345337 -70.89429474]
[319.69058228 -60.11264420]
[308.33566284 -50.29613876]
[296.15759277 -41.52160645]
[283.25167847 -33.85771942]
[269.71893311 -27.36445999]
[255.66528320 -22.09264374]
[241.20068359 -18.08353615]
[226.43835449 -15.36851120]
[211.49383545 -13.96881866]
[196.48410034 -13.89541340]
[181.52661133 -15.14887047]
[166.73843384 -17.71937752]
[152.23532104 -21.58682060]
[147.10501099 -7.49143076]
[141.97471619 6.60395861]
[136.84440613 20.69934845]
[131.71411133 34.79473877]
[126.58380890 48.89012527]
[145.05946350 64.10343933]
[155.75854492 85.51195526]
[156.83453369 109.42089081]
[148.10176086 131.70391846]
[131.06735229 148.51533508]
[108.67119598 156.95373535]
[108.97917175 171.95057678]
[109.28714752 186.94741821]
[109.59512329 201.94425964]
[109.90310669 216.94108582]
[110.21108246 231.93792725]
[110.51905823 246.93476868]
[110.82703400 261.93161011]
[111.13501740 276.92843628]
[111.44299316 291.92529297]
[126.15303040 295.22351074]
[139.64598083 301.94686890]
[151.13740540 311.70446777]
[159.95918274 323.92901611]
[165.59844971 337.90979004]
[167.72732544 352.83398438]
[166.22204590 367.83389282]
[161.17013550 382.03747559]
[152.86529541 394.61892700]
[141.79035950 404.84680176]
[128.58921814 412.12643433]
[114.02935791 416.03463745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[45 125]
[46 124]
[47 123]
[48 122]
[49 121]
[50 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
