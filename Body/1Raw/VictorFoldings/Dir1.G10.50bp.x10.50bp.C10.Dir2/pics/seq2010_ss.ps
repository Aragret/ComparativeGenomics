%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGAAACCGGGGGGGGGGUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAxxxxxxxxxxUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUCCCCCCCCCCAAUUGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 356.67221069]
[71.19830322 350.65618896]
[59.48964310 341.12677002]
[50.78712082 328.79107666]
[45.73651886 314.56457520]
[44.71262741 299.50289917]
[47.79142761 284.72372437]
[54.74444962 271.32379150]
[65.05573273 260.29745483]
[77.96011353 252.46295166]
[92.50000000 248.40164185]
[92.50000000 233.40164185]
[92.50000000 218.40164185]
[92.50000000 203.40164185]
[92.50000000 188.40164185]
[92.50000000 173.40164185]
[92.50000000 158.40164185]
[92.50000000 143.40164185]
[92.50000000 128.40164185]
[92.50000000 113.40164185]
[86.69933319 108.64746857]
[75.09799194 99.13910675]
[69.29731750 94.38492584]
[54.58935547 97.33040619]
[39.88139343 100.27589417]
[37.31333923 115.23481750]
[29.51155281 128.25390625]
[17.53116798 137.57241821]
[2.99243069 141.93013000]
[-12.13841438 140.73765564]
[-25.81504440 134.15631104]
[-36.18780518 123.07613373]
[-41.85387039 108.99564362]
[-42.04694748 93.81911469]
[-36.74092865 79.59903717]
[-26.65340424 68.25856781]
[-13.14863110 61.33140564]
[1.94697988 59.75439453]
[16.59187317 63.74081802]
[28.80544472 72.75154114]
[36.93591309 85.56793213]
[51.64387512 82.62245178]
[66.35183716 79.67696381]
[85.91141510 80.66085052]
[98.03758240 91.68419647]
[105.22008514 78.51561737]
[112.40259552 65.34703064]
[119.58510590 52.17845154]
[126.76761627 39.00986862]
[126.99227905 32.29741669]
[130.13751221 27.46639442]
[134.53269958 25.45198441]
[142.25679016 12.59358120]
[149.98088074 -0.26482102]
[137.85810852 -9.11608791]
[126.57758331 -19.01840782]
[116.23011780 -29.89205170]
[106.89901733 -41.64946747]
[98.65942383 -54.19599533]
[91.57767487 -67.43061066]
[85.71078491 -81.24675751]
[81.10599518 -95.53318787]
[77.80038452 -110.17488098]
[75.82056427 -125.05394745]
[75.18247986 -140.05058289]
[75.89125824 -155.04403687]
[77.94120026 -169.91360474]
[81.31580353 -184.53955078]
[85.98789978 -198.80412292]
[91.91985321 -212.59245300]
[99.06391907 -225.79353333]
[107.36257935 -238.30107117]
[116.74900055 -250.01437378]
[127.14761353 -260.83911133]
[138.47470093 -270.68814087]
[150.63905334 -279.48214722]
[163.54273987 -287.15036011]
[177.08184814 -293.63098145]
[191.14738464 -298.87188721]
[205.62608337 -302.83087158]
[220.40138245 -305.47601318]
[235.35430908 -306.78604126]
[250.36447144 -306.75045776]
[265.31100464 -305.36947632]
[280.07360840 -302.65423584]
[294.53335571 -298.62661743]
[308.57385254 -293.31903076]
[322.08206177 -286.77420044]
[334.94921875 -279.04486084]
[347.07171631 -270.19323730]
[358.35192871 -260.29058838]
[368.69906616 -249.41661072]
[378.02981567 -237.65890503]
[386.26901245 -225.11213684]
[393.35037231 -211.87730408]
[399.21682739 -198.06097412]
[403.82119751 -183.77439880]
[407.12634277 -169.13261414]
[409.10571289 -154.25347900]
[409.74334717 -139.25683594]
[409.03411865 -124.26338959]
[406.98370361 -109.39389038]
[403.60864258 -94.76804352]
[398.93612671 -80.50362396]
[393.00375366 -66.71546936]
[385.85928345 -53.51461029]
[377.56024170 -41.00732040]
[368.17346191 -29.29431152]
[357.77450562 -18.46988869]
[346.44714355 -8.62120724]
[334.28250122 0.17243701]
[321.37860107 7.84024096]
[307.83929443 14.32046700]
[293.77359009 19.56093788]
[279.29476929 23.51946259]
[264.51937866 26.16416550]
[249.56642151 27.47375488]
[234.55625916 27.43768501]
[219.60975647 26.05624580]
[204.84725952 23.34056091]
[190.38763428 19.31249809]
[176.34729004 14.00448608]
[162.83927917 7.45926380]
[155.11518860 20.31766701]
[147.39111328 33.17606735]
[139.93620300 46.19237900]
[132.75369263 59.36096191]
[125.57118225 72.52954102]
[118.38867188 85.69812775]
[111.20616150 98.86670685]
[107.50000000 113.40164185]
[107.50000000 128.40164185]
[107.50000000 143.40164185]
[107.50000000 158.40164185]
[107.50000000 173.40164185]
[107.50000000 188.40164185]
[107.50000000 203.40164185]
[107.50000000 218.40164185]
[107.50000000 233.40164185]
[107.50000000 248.40164185]
[122.03988647 252.46295166]
[134.94427490 260.29745483]
[145.25555420 271.32379150]
[152.20857239 284.72372437]
[155.28736877 299.50289917]
[154.26348877 314.56457520]
[149.21287537 328.79107666]
[140.51036072 341.12677002]
[128.80169678 350.65618896]
[114.95575714 356.67221069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 43]
[24 42]
[25 41]
[45 130]
[46 129]
[47 128]
[48 127]
[49 126]
[52 125]
[53 124]
[54 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
