%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAUAAUCGGGGGGGGGGGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUxxxxxxxxxxAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCCCCCCCCCCCUCAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[118.13507080 448.95867920]
[104.11312103 443.40567017]
[91.91316986 434.53933716]
[82.30209351 422.91705322]
[75.88407135 409.26934814]
[73.06253052 394.45416260]
[74.01484680 379.40277100]
[78.68115234 365.06134033]
[86.76811981 352.33139038]
[97.76739502 342.01312256]
[110.98755646 334.75515747]
[125.59756470 331.01370239]
[125.59756470 316.01370239]
[125.59756470 301.01370239]
[125.59756470 286.01370239]
[125.59756470 271.01370239]
[125.59756470 256.01370239]
[125.59756470 241.01371765]
[125.59756470 226.01371765]
[125.59756470 211.01371765]
[125.59756470 196.01371765]
[117.86026764 183.28643799]
[125.59756470 169.48626709]
[125.59756470 154.48626709]
[125.59756470 139.48626709]
[111.86039734 144.47999573]
[97.57109833 144.94520569]
[84.15249634 141.03356934]
[72.87992859 133.32296753]
[64.76012421 122.74169159]
[60.44220734 110.46057892]
[60.16846085 97.76504517]
[63.76838684 85.92111206]
[49.62107086 80.93579102]
[35.47375488 75.95046234]
[21.32643890 70.96514130]
[7.20532513 77.54024506]
[-7.07104778 72.28288269]
[-13.25237560 58.78004074]
[-27.39969254 53.79471970]
[-41.54700851 48.80939484]
[-55.69432449 43.82407379]
[-68.39187622 52.74325562]
[-83.90640259 52.46193314]
[-96.27224731 43.08827591]
[-100.73449707 28.22665024]
[-95.57732391 13.59165096]
[-82.78376770 4.81073713]
[-67.27320099 5.26034737]
[-55.00976944 14.76759815]
[-50.70900345 29.67675781]
[-36.56168747 34.66207886]
[-22.41436958 39.64739990]
[-8.26705360 44.63272476]
[5.01395273 37.98814392]
[19.43236160 42.84243393]
[26.31175995 56.81782913]
[40.45907593 61.80315018]
[54.60639191 66.78847504]
[68.75370789 71.77379608]
[80.63053131 62.61185837]
[79.39991760 47.66242218]
[78.16931152 32.71298981]
[69.32591248 19.59411240]
[75.99297333 6.27496958]
[74.76235962 -8.67446518]
[73.53175354 -23.62389946]
[59.04735947 -28.23593712]
[47.43370438 -38.04365921]
[40.46178055 -51.55146027]
[39.19475555 -66.69950104]
[43.82584000 -81.17781067]
[53.64883041 -92.77855682]
[67.16579437 -99.73270416]
[82.31548309 -100.97980499]
[96.78768921 -96.32967377]
[108.37550354 -86.49143219]
[115.31186676 -72.96533203]
[116.53903198 -57.81401443]
[111.86987305 -43.34793854]
[102.01639557 -31.77307510]
[88.48118591 -24.85451126]
[89.71179962 -9.90507698]
[90.94241333 5.04435730]
[99.69778442 17.09395027]
[93.11874390 31.48237610]
[94.34935760 46.43181229]
[95.57997131 61.38124466]
[118.33635712 61.14519119]
[139.49087524 74.40953064]
[151.27301025 65.12614441]
[163.05514526 55.84276199]
[174.83728027 46.55937576]
[172.55790710 31.37056351]
[178.19326782 17.08286095]
[190.22744751 7.53959227]
[205.42332458 5.30784655]
[219.69329834 10.98795319]
[229.19880676 23.05199051]
[231.38290405 38.25479507]
[225.65809631 52.50688934]
[213.56431580 61.97452927]
[198.35475159 64.11096954]
[184.12066650 58.34151459]
[172.33853149 67.62490082]
[160.55639648 76.90828705]
[148.77426147 86.19167328]
[150.45388794 93.50117493]
[163.31933594 85.78882599]
[174.62983704 95.64136505]
[168.75462341 109.44288635]
[153.81314087 108.12017822]
[155.49276733 115.42968750]
[170.14549255 118.63867950]
[184.79821777 121.84767914]
[199.45094299 125.05667114]
[211.72126770 115.36268616]
[227.35043335 115.87553406]
[238.95884705 126.35307312]
[241.06535339 141.84812927]
[232.67535400 155.04440308]
[217.75030518 159.71102905]
[203.33740234 153.64456177]
[196.24194336 139.70939636]
[181.58923340 136.50039673]
[166.93650818 133.29141235]
[152.28378296 130.08241272]
[140.59756470 139.48626709]
[140.59756470 154.48626709]
[140.59756470 169.48626709]
[148.33486938 183.28643799]
[140.59756470 196.01371765]
[140.59756470 211.01371765]
[140.59756470 226.01371765]
[140.59756470 241.01371765]
[140.59756470 256.01370239]
[140.59756470 271.01370239]
[140.59756470 286.01370239]
[140.59756470 301.01370239]
[140.59756470 316.01370239]
[140.59756470 331.01370239]
[155.20758057 334.75515747]
[168.42773438 342.01312256]
[179.42701721 352.33139038]
[187.51397705 365.06134033]
[192.18028259 379.40277100]
[193.13259888 394.45416260]
[190.31106567 409.26934814]
[183.89303589 422.91705322]
[174.28196716 434.53933716]
[162.08201599 443.40567017]
[148.06007385 448.95867920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[25 128]
[33 60]
[34 59]
[35 58]
[36 57]
[39 54]
[40 53]
[41 52]
[42 51]
[61 88]
[62 87]
[63 86]
[65 84]
[66 83]
[67 82]
[90 107]
[91 106]
[92 105]
[93 104]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
