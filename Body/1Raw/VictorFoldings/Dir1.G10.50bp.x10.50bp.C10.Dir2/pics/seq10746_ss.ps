%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUAGAAGGGGGGGGGGUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAxxxxxxxxxxCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACCCCCCCCCCCAUCAUCGAA\
) } def
/len { sequence length } bind def

/coor [
[129.96228027 552.38470459]
[116.11634064 546.36865234]
[104.40767670 536.83923340]
[95.70515442 524.50360107]
[90.65454865 510.27706909]
[89.63066101 495.21539307]
[92.70945740 480.43621826]
[99.66248322 467.03628540]
[109.97376251 456.00997925]
[122.87814331 448.17544556]
[137.41802979 444.11413574]
[137.41802979 429.11413574]
[137.41802979 414.11413574]
[137.41802979 399.11413574]
[137.41802979 384.11413574]
[137.41802979 369.11413574]
[137.41802979 354.11413574]
[137.41802979 339.11413574]
[137.41802979 324.11413574]
[137.41802979 309.11413574]
[137.41802979 294.11413574]
[137.10597229 279.11740112]
[136.48199463 264.13037109]
[135.85801697 249.14335632]
[130.83114624 230.68698120]
[136.47047424 215.14154053]
[148.04850769 207.30987549]
[144.04075623 192.85519409]
[140.03302002 178.40049744]
[136.02528381 163.94581604]
[132.01753235 149.49111938]
[128.00979614 135.03643799]
[105.09683990 140.83169556]
[84.52703094 134.09390259]
[72.05545807 118.89463043]
[70.00450897 101.33016968]
[76.97946167 87.24676514]
[67.96193695 75.25993347]
[56.97627258 65.04645538]
[44.36514282 56.92491150]
[31.75401497 48.80336761]
[19.14288712 40.68182755]
[12.46456623 39.96939850]
[7.87517595 36.48101807]
[6.18587208 31.95092392]
[-6.07649612 23.31180763]
[-19.38522530 30.78445625]
[-34.61877441 31.73406982]
[-48.75251007 25.97210121]
[-58.98016739 14.64259243]
[-63.27104187 -0.00497223]
[-60.77317047 -15.06230927]
[-51.98251724 -27.53977394]
[-38.64446259 -34.95995712]
[-23.40729332 -35.84957123]
[-9.29635811 -30.03199005]
[0.88660610 -18.66229248]
[5.11976433 -3.99794459]
[2.56261992 11.04943943]
[14.82498837 19.68855476]
[27.26442909 28.07069969]
[39.87555695 36.19224167]
[52.48668289 44.31378174]
[65.09781647 52.43532562]
[58.71828079 38.85955429]
[57.00152206 23.95812035]
[60.12683868 9.28731918]
[67.76782227 -3.62063861]
[79.12644958 -13.41765404]
[93.01644135 -19.08053398]
[107.98712921 -20.01784706]
[122.47498322 -16.13170433]
[134.96690369 -7.82797146]
[144.15823364 4.02611542]
[149.08905029 18.19252205]
[149.24436951 33.19171906]
[144.60797119 47.45719528]
[135.66409302 59.49907684]
[123.34680176 68.05971527]
[108.94253540 72.24504852]
[93.95565033 71.61795044]
[79.94876862 66.24240112]
[88.96630096 78.22923279]
[103.92654419 77.13792419]
[111.10905457 63.96934128]
[110.17033386 47.59708405]
[124.02637482 38.82542419]
[138.42327881 46.67789078]
[138.55073547 63.07654190]
[124.27764130 71.15185547]
[117.09513092 84.32043457]
[122.64078522 89.36975861]
[139.27775574 104.51773071]
[151.71719360 96.13558960]
[164.15664673 87.75344849]
[176.59608459 79.37130737]
[181.06349182 63.96280670]
[195.95004272 57.98199463]
[209.83604431 66.01683044]
[212.06933594 81.90367889]
[200.93673706 93.45550537]
[184.97822571 91.81074524]
[172.53878784 100.19288635]
[160.09934998 108.57502747]
[147.65989685 116.95717621]
[142.46449280 131.02868652]
[146.47222900 145.48338318]
[150.47996521 159.93806458]
[154.48770142 174.39276123]
[158.49545288 188.84744263]
[162.50318909 203.30213928]
[174.00498962 212.93066406]
[188.93930054 214.33296204]
[203.61206055 207.00889587]
[217.14018250 216.27832031]
[215.60707092 232.60565186]
[200.58987427 239.19473267]
[187.53700256 229.26727295]
[172.60269165 227.86497498]
[167.16326904 233.02856445]
[180.34667969 240.18383789]
[177.61534119 254.93305969]
[162.74392700 256.89297485]
[156.28445435 243.35577393]
[150.84503174 248.51937866]
[151.46900940 263.50640869]
[152.09298706 278.49340820]
[155.35690308 284.36318970]
[155.14840698 290.12408447]
[152.41802979 294.11413574]
[152.41802979 309.11413574]
[152.41802979 324.11413574]
[152.41802979 339.11413574]
[152.41802979 354.11413574]
[152.41802979 369.11413574]
[152.41802979 384.11413574]
[152.41802979 399.11413574]
[152.41802979 414.11413574]
[152.41802979 429.11413574]
[152.41802979 444.11413574]
[166.95791626 448.17544556]
[179.86230469 456.00997925]
[190.17358398 467.03628540]
[197.12660217 480.43621826]
[200.20539856 495.21539307]
[199.18151855 510.27706909]
[194.13092041 524.50360107]
[185.42839050 536.83923340]
[173.71972656 546.36865234]
[159.87379456 552.38470459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 126]
[24 125]
[27 111]
[28 110]
[29 109]
[30 108]
[31 107]
[32 106]
[37 83]
[38 82]
[39 64]
[40 63]
[41 62]
[42 61]
[45 60]
[46 59]
[84 91]
[85 90]
[93 105]
[94 104]
[95 103]
[96 102]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
