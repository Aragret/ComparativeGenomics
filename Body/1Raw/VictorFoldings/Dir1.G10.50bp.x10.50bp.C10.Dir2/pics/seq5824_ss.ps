%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUUCCUGGGGGGGGGGCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAxxxxxxxxxxCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAACCCCCCCCCCACCCCAUUACU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 499.14575195]
[71.01555634 493.59274292]
[58.81560135 484.72640991]
[49.20452881 473.10409546]
[42.78650284 459.45639038]
[39.96496582 444.64120483]
[40.91728210 429.58981323]
[45.58358765 415.24841309]
[53.67055511 402.51843262]
[64.66983032 392.20016479]
[77.88998413 384.94219971]
[92.50000000 381.20077515]
[92.50000000 366.20077515]
[92.50000000 351.20077515]
[92.50000000 336.20077515]
[92.50000000 321.20077515]
[92.50000000 306.20077515]
[92.50000000 291.20077515]
[92.50000000 276.20077515]
[92.50000000 261.20077515]
[92.50000000 246.20075989]
[77.95760345 242.65010071]
[64.67964935 235.71786499]
[53.43997574 225.80314636]
[44.89479446 213.47903442]
[39.54439163 199.45944214]
[37.70384216 184.55773926]
[39.48443985 169.63961792]
[44.78699112 155.57276917]
[53.30733109 143.17639160]
[64.55376434 133.17355347]
[77.87543488 126.14892578]
[92.50000000 122.51468658]
[92.50000000 107.51468658]
[91.57658386 92.54313660]
[89.73326111 77.65682983]
[87.88993835 62.77051926]
[83.70670319 54.57928467]
[86.16483307 47.56004333]
[84.62754059 32.63902664]
[76.09815979 44.97797775]
[62.30874634 50.88153458]
[47.49308777 48.53712082]
[36.20007324 38.66453934]
[31.89702606 24.29499626]
[35.90511703 9.84040451]
[46.99373245 -0.26120749]
[61.75831223 -2.90831923]
[75.66564941 2.71181870]
[84.44512177 14.87191105]
[85.67573547 -0.07752381]
[86.90634918 -15.02695847]
[88.13696289 -29.97639275]
[89.36757660 -44.92582703]
[90.59818268 -59.87526321]
[75.91565704 -63.04991150]
[61.77313614 -68.11391449]
[48.41262054 -74.98061371]
[36.06272125 -83.53251648]
[24.93476486 -93.62328339]
[15.21916485 -105.08025360]
[7.08216715 -117.70737457]
[0.66300762 -131.28858948]
[-3.92847419 -145.59150696]
[-6.61371183 -160.37136841]
[-7.34675741 -175.37528992]
[-6.11506796 -190.34652710]
[-2.93971848 -205.02891541]
[2.12495613 -219.17118835]
[8.99229240 -232.53138733]
[17.54478264 -244.88087463]
[27.63607979 -256.00836182]
[39.09350967 -265.72338867]
[51.72102356 -273.85980225]
[65.30254364 -280.27832031]
[79.60567474 -284.86911011]
[94.38567352 -287.55364990]
[109.38962555 -288.28598022]
[124.36080933 -287.05358887]
[139.04302979 -283.87753296]
[153.18507385 -278.81219482]
[166.54493713 -271.94421387]
[178.89401245 -263.39114380]
[190.02101135 -253.29930115]
[199.73551941 -241.84141541]
[207.87132263 -229.21351624]
[214.28918457 -215.63168335]
[218.87930298 -201.32833862]
[221.56314087 -186.54821777]
[222.29475403 -171.54421997]
[221.06164551 -156.57310486]
[217.88488770 -141.89102173]
[212.81887817 -127.74922943]
[205.95025635 -114.38968658]
[197.39659119 -102.04101562]
[187.30424500 -90.91449738]
[175.84588623 -81.20053101]
[163.21760559 -73.06533813]
[149.63546753 -66.64811707]
[135.33189392 -62.05868149]
[120.55164337 -59.37555313]
[105.54762268 -58.64464951]
[104.31700897 -43.69521332]
[103.08639526 -28.74578094]
[101.85578156 -13.79634571]
[100.62516785 1.15308857]
[99.39456177 16.10252380]
[99.54855347 31.10173225]
[101.08584595 46.02275085]
[102.77624512 60.92719650]
[104.61956787 75.81350708]
[106.46289062 90.69981384]
[116.81590271 79.84554291]
[131.80603027 79.30124664]
[142.91897583 89.37608337]
[143.84268188 104.34761047]
[134.05249023 115.71212006]
[119.10915375 117.01465607]
[107.50000000 107.51468658]
[107.50000000 122.51468658]
[122.12456512 126.14892578]
[135.44624329 133.17355347]
[146.69267273 143.17639160]
[155.21301270 155.57276917]
[160.51556396 169.63961792]
[162.29615784 184.55773926]
[160.45561218 199.45944214]
[155.10520935 213.47903442]
[146.56002808 225.80314636]
[135.32034302 235.71786499]
[122.04239655 242.65010071]
[107.50000000 246.20075989]
[107.50000000 261.20077515]
[107.50000000 276.20077515]
[107.50000000 291.20077515]
[107.50000000 306.20077515]
[107.50000000 321.20077515]
[107.50000000 336.20077515]
[107.50000000 351.20077515]
[107.50000000 366.20077515]
[107.50000000 381.20077515]
[122.11001587 384.94219971]
[135.33016968 392.20016479]
[146.32945251 402.51843262]
[154.41641235 415.24841309]
[159.08271790 429.58981323]
[160.03503418 444.64120483]
[157.21350098 459.45639038]
[150.79547119 473.10409546]
[141.18440247 484.72640991]
[128.98443604 493.59274292]
[114.96250153 499.14575195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[33 120]
[34 119]
[35 112]
[36 111]
[37 110]
[39 109]
[40 108]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
