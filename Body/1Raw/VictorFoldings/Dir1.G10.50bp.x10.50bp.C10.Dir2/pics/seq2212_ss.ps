%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUCAACUGGGGGGGGGGUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAxxxxxxxxxxAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGCCCCCCCCCCUAUUUCAACU\
) } def
/len { sequence length } bind def

/coor [
[88.20980835 377.32659912]
[74.98960876 370.05413818]
[64.10280609 359.60711670]
[56.29167175 346.69787598]
[52.08879089 332.20654297]
[51.78071976 317.12121582]
[55.38846207 302.47039795]
[62.66603470 289.25299072]
[73.11724091 278.37023926]
[86.02950287 270.56408691]
[100.52243805 266.36679077]
[100.21038055 251.37005615]
[99.89833069 236.37329102]
[99.58627319 221.37654114]
[99.27421570 206.37979126]
[98.96215820 191.38304138]
[98.65010071 176.38627625]
[98.33804321 161.38952637]
[98.02599335 146.39277649]
[68.55880737 96.44493103]
[53.85084534 93.49945068]
[39.14288330 90.55397034]
[24.43492126 87.60848236]
[9.72695923 84.66300201]
[-4.98100233 81.71752167]
[-19.68896294 78.77203369]
[-34.39692688 75.82655334]
[-49.10488510 72.88107300]
[-53.30040359 74.48079681]
[-57.36917496 74.60797882]
[-60.85275650 73.49150085]
[-63.41828537 71.48849487]
[-64.88999176 69.03056335]
[-79.30220795 64.87268066]
[-93.71442413 60.71479034]
[-102.17903900 73.25295258]
[-114.10512543 82.56014252]
[-128.32426453 87.72454071]
[-143.44343567 88.24018860]
[-157.98141479 84.05657196]
[-170.51390076 75.58355713]
[-179.81309509 63.65124512]
[-184.96795654 49.42863846]
[-185.47348022 34.30912781]
[-181.28012085 19.77396584]
[-172.79870605 7.24715996]
[-160.86016846 -2.04404044]
[-146.63410950 -7.18937826]
[-131.51426697 -7.68476582]
[-116.98191833 -3.48167014]
[-104.46080017 5.00813246]
[-95.17759705 16.95289803]
[-90.04179382 31.18239784]
[-89.55654144 46.30257416]
[-75.14432526 50.46046066]
[-60.73210907 54.61834717]
[-46.15940475 58.17311096]
[-31.45144272 61.11859512]
[-16.74348068 64.06407928]
[-2.03551984 67.00955963]
[12.67244148 69.95503998]
[27.38040352 72.90052032]
[42.08836365 75.84600830]
[56.79632568 78.79148865]
[71.50428772 81.73696899]
[83.49111938 72.71944427]
[84.73799133 57.77135468]
[85.98487091 42.82326889]
[72.02865601 36.98551178]
[60.56080246 27.11923599]
[52.70479965 14.19103432]
[49.23030472 -0.53252137]
[50.47771454 -15.60896492]
[56.32481766 -29.56126022]
[66.19877625 -41.02250671]
[79.13224030 -48.86984253]
[93.85812378 -52.33446884]
[108.93372345 -51.07695770]
[122.88210297 -45.22050476]
[134.33673096 -35.33887100]
[142.17539978 -22.40015030]
[145.63015747 -7.67195272]
[144.36254883 7.40280581]
[138.49674988 21.34725380]
[128.60743713 32.79525375]
[115.66346741 40.62525177]
[100.93295288 44.07014084]
[99.68608093 59.01823044]
[98.43920898 73.96631622]
[111.68179321 81.01145172]
[123.38141632 71.62429047]
[120.38545990 56.61486435]
[124.71901703 41.93566895]
[135.38627625 30.95986938]
[149.93597412 26.20962715]
[165.02470398 28.77651405]
[177.18518066 38.07067490]
[183.62301636 51.95638275]
[182.85884094 67.24280548]
[175.06825256 80.41722870]
[162.04148865 88.45227051]
[146.77198792 89.50153351]
[132.76858521 83.32391357]
[121.06895447 92.71107483]
[122.77044678 100.01551819]
[126.17342377 114.62441254]
[127.87490845 121.92885590]
[142.51841736 125.17968750]
[157.16191101 128.43051147]
[171.80541992 131.68133545]
[186.44891357 134.93215942]
[201.09242249 138.18298340]
[215.73591614 141.43380737]
[226.05622864 130.05897522]
[240.68618774 125.38352203]
[255.69039917 128.66511536]
[267.03283691 139.02102661]
[271.66241455 153.66555786]
[268.33380127 168.65942383]
[257.94238281 179.96934509]
[243.28341675 184.55299377]
[228.30006409 181.17739868]
[217.02278137 170.75059509]
[212.48509216 156.07731628]
[197.84159851 152.82649231]
[183.19808960 149.57566833]
[168.55459595 146.32484436]
[153.91108704 143.07400513]
[139.26759338 139.82318115]
[124.62408447 136.57235718]
[113.02274323 146.08071899]
[113.33480072 161.07746887]
[113.64685822 176.07421875]
[113.95891571 191.07098389]
[114.27096558 206.06773376]
[114.58302307 221.06448364]
[114.89508057 236.06123352]
[115.20713806 251.05799866]
[115.51919556 266.05474854]
[130.17417908 269.64550781]
[143.39999390 276.90777588]
[154.29486084 287.34637451]
[162.11596680 300.24957275]
[166.33003235 314.73764038]
[166.64974976 329.82275391]
[163.05332947 344.47634888]
[155.78596497 357.69934082]
[145.34315491 368.59017944]
[132.43693542 376.40631104]
[117.94724274 380.61477661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[33 56]
[34 55]
[35 54]
[66 89]
[67 88]
[68 87]
[90 104]
[91 103]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
