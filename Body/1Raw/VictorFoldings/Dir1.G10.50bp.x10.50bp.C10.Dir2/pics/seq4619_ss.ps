%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCCUAAGGGGGGGGGGAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUxxxxxxxxxxCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACCCCCCCCCCCUCAUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[145.63464355 489.62979126]
[131.78871155 483.61376953]
[120.08003998 474.08435059]
[111.37751770 461.74868774]
[106.32691956 447.52215576]
[105.30302429 432.46047974]
[108.38182068 417.68130493]
[115.33484650 404.28137207]
[125.64613342 393.25506592]
[138.55050659 385.42053223]
[153.09039307 381.35922241]
[153.09039307 366.35922241]
[153.09039307 351.35922241]
[153.09039307 336.35922241]
[153.09039307 321.35922241]
[153.09039307 306.35922241]
[153.09039307 291.35922241]
[153.09039307 276.35922241]
[153.09039307 261.35922241]
[153.09039307 246.35923767]
[149.99208069 231.68270874]
[143.92906189 217.96264648]
[137.86604309 204.24259949]
[131.80303955 190.52253723]
[125.74002075 176.80249023]
[119.67700958 163.08244324]
[113.61399841 149.36238098]
[107.55098724 135.64233398]
[81.23902130 131.23168945]
[64.98704529 110.07402802]
[50.02679825 111.16534424]
[35.06654739 112.25665283]
[20.10630035 113.34796143]
[8.57175064 124.49846649]
[-7.31854200 122.28981018]
[-15.37490559 108.41629028]
[-9.41718864 93.52048492]
[5.98436022 89.02917480]
[19.01498985 98.38771057]
[33.97523880 97.29640198]
[48.93548584 96.20509338]
[63.89573669 95.11378479]
[64.79173279 90.63137054]
[66.24195862 86.29643250]
[53.80252075 77.91429138]
[41.36307907 69.53214264]
[28.92363930 61.15000153]
[16.48419952 52.76785660]
[1.50534129 57.25872040]
[-12.83526421 51.02325439]
[-19.76642227 37.00565720]
[-16.01545334 21.82460594]
[-3.35344720 12.64813519]
[12.24098110 13.80908871]
[23.40462112 24.75930214]
[24.86634254 40.32841873]
[37.30578232 48.71055984]
[49.74522400 57.09270477]
[62.18466187 65.47484589]
[74.62409973 73.85699463]
[81.66649628 68.51547241]
[89.78794861 65.02705383]
[98.51045990 63.59705734]
[100.99557495 48.80434799]
[103.48069763 34.01164246]
[105.19338226 19.10973930]
[106.12901306 4.13894796]
[107.06464386 -10.83184338]
[108.00026703 -25.80263519]
[94.20472717 -32.13093185]
[83.62960815 -43.01814651]
[77.70513153 -56.99187088]
[77.23251343 -72.16226959]
[82.27568054 -86.47767639]
[92.15258789 -98.00205231]
[105.52746582 -105.17681122]
[120.59146118 -107.03163147]
[135.30731201 -103.31565857]
[147.68479919 -94.53145599]
[156.04997253 -81.86701202]
[159.27153015 -67.03508759]
[156.91375732 -52.04157639]
[149.29554749 -38.91423035]
[137.44717407 -29.42841339]
[122.97106171 -24.86700630]
[122.03543091 -9.89621544]
[121.09980774 5.07457638]
[120.16417694 20.04536819]
[133.15745544 12.55038834]
[147.19500732 17.83689117]
[152.01652527 32.04087067]
[144.09785461 44.78036499]
[129.22691345 46.74383926]
[118.27339935 36.49676132]
[115.78828430 51.28946686]
[113.30316162 66.08217621]
[122.91241455 71.67308044]
[130.38824463 79.90155792]
[135.03457642 90.00144196]
[136.41877747 101.03230286]
[134.41195679 111.96704865]
[129.20097351 121.78752136]
[121.27104187 129.57931519]
[127.33405304 143.29937744]
[133.39706421 157.01942444]
[139.46008301 170.73947144]
[145.52308655 184.45953369]
[151.58610535 198.17958069]
[157.64912415 211.89964294]
[163.71212769 225.61968994]
[165.66810608 210.74777222]
[171.66162109 196.99720764]
[181.22494507 185.44113159]
[193.61174011 176.98138428]
[207.85531616 172.27815247]
[222.84411621 171.69850159]
[237.40838623 175.28764343]
[250.41151428 182.76550293]
[260.83874512 193.54850769]
[267.87631226 206.79510498]
[270.97500610 221.47155762]
[269.89300537 236.43247986]
[264.71472168 250.51031494]
[255.84431458 262.60641479]
[243.97401428 271.77679443]
[230.03018188 277.30578613]
[215.10102844 278.76193237]
[200.35162354 276.03152466]
[186.93302917 269.32769775]
[175.89244080 259.17361450]
[168.09039307 246.35923767]
[168.09039307 261.35922241]
[168.09039307 276.35922241]
[168.09039307 291.35922241]
[168.09039307 306.35922241]
[168.09039307 321.35922241]
[168.09039307 336.35922241]
[168.09039307 351.35922241]
[168.09039307 366.35922241]
[168.09039307 381.35922241]
[182.63027954 385.42053223]
[195.53466797 393.25506592]
[205.84594727 404.28137207]
[212.79896545 417.68130493]
[215.87777710 432.46047974]
[214.85388184 447.52215576]
[209.80328369 461.74868774]
[201.10075378 474.08435059]
[189.39208984 483.61376953]
[175.54615784 489.62979126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[30 42]
[31 41]
[32 40]
[33 39]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[63 96]
[64 95]
[65 94]
[66 88]
[67 87]
[68 86]
[69 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
