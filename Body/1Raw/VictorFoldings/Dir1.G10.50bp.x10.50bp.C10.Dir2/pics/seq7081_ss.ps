%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCUAUUGGGGGGGGGGCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAxxxxxxxxxxAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACCCCCCCCCCCUUCCCCCAUU\
) } def
/len { sequence length } bind def

/coor [
[78.89120483 408.42239380]
[65.67100525 401.14990234]
[54.78420258 390.70291138]
[46.97307205 377.79367065]
[42.77019119 363.30233765]
[42.46212006 348.21701050]
[46.06985855 333.56619263]
[53.34743118 320.34878540]
[63.79864120 309.46603394]
[76.71089935 301.65988159]
[91.20384216 297.46258545]
[90.89178467 282.46585083]
[90.57972717 267.46908569]
[90.26766968 252.47233582]
[89.95561218 237.47558594]
[89.64355469 222.47882080]
[89.33150482 207.48207092]
[89.01944733 192.48532104]
[88.70738983 177.48857117]
[88.39533234 162.49180603]
[77.35691071 93.93910217]
[66.26559448 83.84044647]
[55.17427826 73.74179840]
[43.87527084 63.87607574]
[32.37346649 54.24755096]
[20.87166405 44.61902618]
[10.04581451 55.02326584]
[-1.84148777 64.19601440]
[-14.65086937 72.02971649]
[-28.23214531 78.43254089]
[-42.42608643 83.32941437]
[-57.06626892 86.66291809]
[-71.98104858 88.39396667]
[-86.99555969 88.50227356]
[-101.93376160 86.98655701]
[-116.62051392 83.86460114]
[-130.88362122 79.17300415]
[-144.55584717 72.96676636]
[-157.47689819 65.31865692]
[-169.49528503 56.31835175]
[-180.47010803 46.07136536]
[-190.27267456 34.69784546]
[-198.78805542 22.33113670]
[-205.91642761 9.11623478]
[-211.57418823 -4.79192305]
[-215.69503784 -19.23027039]
[-218.23063660 -34.02952576]
[-219.15126038 -49.01617813]
[-218.44612122 -64.01451111]
[-216.12347412 -78.84867859]
[-212.21057129 -93.34476471]
[-206.75326538 -107.33280182]
[-199.81556702 -120.64878845]
[-191.47879028 -133.13659668]
[-181.84071350 -144.64982605]
[-171.01429749 -155.05348206]
[-159.12649536 -164.22558594]
[-146.31669617 -172.05860901]
[-132.73507690 -178.46070862]
[-118.54087067 -183.35681152]
[-103.90051270 -186.68952942]
[-88.98563385 -188.41976929]
[-73.97112274 -188.52726746]
[-59.03300095 -187.01075745]
[-44.34641647 -183.88800049]
[-30.08356667 -179.19563293]
[-16.41167068 -172.98866272]
[-3.49102616 -165.33985901]
[8.52687931 -156.33891296]
[19.50114250 -146.09133911]
[29.30309486 -134.71728516]
[37.81781387 -122.35012054]
[44.94546890 -109.13483429]
[50.60249329 -95.22637177]
[54.72255707 -80.78780365]
[57.25735855 -65.98841095]
[58.17717743 -51.00171280]
[57.47122955 -36.00341415]
[55.14779282 -21.16937065]
[51.23410416 -6.67349958]
[45.77605438 7.31424236]
[38.83763123 20.62985611]
[30.50019073 33.11722183]
[42.00199509 42.74574661]
[53.50379944 52.37427521]
[58.31595612 52.84188461]
[62.86716461 56.37993240]
[65.27292633 62.65048599]
[76.36424255 72.74913788]
[87.45555878 82.84778595]
[83.71267700 68.32225800]
[93.38640594 56.85844803]
[108.33449554 58.10528564]
[115.97534180 71.01332092]
[109.87768555 84.71809387]
[122.48881531 76.59654999]
[135.09994507 68.47501373]
[142.11543274 53.65222168]
[158.47988892 52.58627701]
[167.35897827 66.37372589]
[159.61865234 80.83123016]
[143.22148132 81.08613586]
[130.61035156 89.20767975]
[117.99922943 97.32922363]
[119.92781067 104.57701874]
[125.71354675 126.32041931]
[140.69326782 127.10026550]
[155.67297363 127.88010406]
[162.95614624 114.46675110]
[175.34291077 105.54874420]
[190.37387085 102.89677429]
[205.06462097 107.03738403]
[216.49830627 117.14846039]
[222.40473938 131.22242737]
[221.61122131 146.46490479]
[214.27528381 159.84948730]
[201.85348511 168.71864319]
[186.81221008 171.31140137]
[172.13787842 167.11296082]
[160.74411011 156.95693970]
[154.89312744 142.85981750]
[139.91342163 142.07997131]
[124.93370056 141.30012512]
[119.54830170 146.52003479]
[133.97486877 150.62783813]
[137.63078308 165.17549133]
[126.86017609 175.61550903]
[112.43352509 171.50796509]
[108.77748871 156.95985413]
[103.39208984 162.17976379]
[103.70413971 177.17651367]
[104.01619720 192.17326355]
[104.32825470 207.17001343]
[104.64031219 222.16677856]
[104.95236969 237.16352844]
[105.26442719 252.16027832]
[105.57647705 267.15704346]
[105.88853455 282.15377808]
[106.20059204 297.15054321]
[120.85558319 300.74130249]
[134.08139038 308.00357056]
[144.97625732 318.44216919]
[152.79736328 331.34536743]
[157.01142883 345.83343506]
[157.33114624 360.91854858]
[153.73472595 375.57214355]
[146.46736145 388.79513550]
[136.02456665 399.68597412]
[123.11833191 407.50210571]
[108.62863922 411.71057129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 90]
[22 89]
[23 88]
[24 85]
[25 84]
[26 83]
[95 104]
[96 103]
[97 102]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
