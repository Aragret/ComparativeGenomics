%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCACCUCGGGGGGGGGGUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACxxxxxxxxxxACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUCCCCCCCCCCACAUCACCGC\
) } def
/len { sequence length } bind def

/coor [
[69.11347961 550.68402100]
[55.26753998 544.66796875]
[43.55887985 535.13854980]
[34.85635376 522.80291748]
[29.80575371 508.57638550]
[28.78186226 493.51470947]
[31.86066055 478.73553467]
[38.81368256 465.33560181]
[49.12496567 454.30926514]
[62.02934647 446.47476196]
[76.56923676 442.41345215]
[76.56923676 427.41345215]
[76.56923676 412.41345215]
[76.56923676 397.41345215]
[76.56923676 382.41345215]
[76.56923676 367.41345215]
[76.56923676 352.41345215]
[76.56923676 337.41345215]
[76.56923676 322.41345215]
[76.56923676 307.41345215]
[62.02684021 303.86279297]
[48.74888611 296.93054199]
[37.50920868 287.01583862]
[28.96402740 274.69174194]
[23.61362648 260.67211914]
[21.77307701 245.77043152]
[23.55367279 230.85231018]
[28.85622597 216.78546143]
[37.37656403 204.38908386]
[48.62299728 194.38624573]
[61.94466782 187.36161804]
[76.56923676 183.72738647]
[76.56923676 168.72738647]
[74.28755188 165.95945740]
[73.26815796 161.92677307]
[74.10060120 157.25137329]
[77.06648254 152.79905701]
[78.00211334 137.82826233]
[78.93774414 122.85747528]
[70.68545532 110.33151245]
[56.56064987 105.28275299]
[42.43584824 100.23400116]
[28.31104469 95.18524170]
[13.25369167 100.72200012]
[-0.38794672 92.27894592]
[-2.14917445 76.33285522]
[9.32107162 65.11621857]
[25.22380066 67.23346710]
[33.35980225 81.06044006]
[47.48460388 86.10919952]
[61.60940552 91.15795135]
[75.73420715 96.20671082]
[81.52496338 87.27634430]
[89.91691589 82.37596130]
[98.69898987 81.87001801]
[103.89440155 67.79850006]
[109.08982086 53.72697830]
[99.88308716 44.56938934]
[94.86292267 32.64429092]
[94.74897766 19.75296783]
[99.52272034 7.82803297]
[108.43556213 -1.35629988]
[120.12596893 -6.44817352]
[132.82743835 -6.71700382]
[138.60371399 -20.56022072]
[144.37998962 -34.40343857]
[150.15626526 -48.24665833]
[141.68218994 -54.58593369]
[134.65217590 -62.48674774]
[129.34820557 -71.62785339]
[125.98216248 -81.63832855]
[124.68738556 -92.11265564]
[125.51333618 -102.62711334]
[128.42376709 -112.75696564]
[133.29827881 -122.09355164]
[139.93728638 -130.26084900]
[148.07023621 -136.93055725]
[157.36657715 -141.83532715]
[167.44920349 -144.77944946]
[177.90980530 -145.64669800]
[188.32533264 -144.40489197]
[198.27514648 -141.10707092]
[206.26506042 -153.80200195]
[214.25497437 -166.49693298]
[222.24488831 -179.19186401]
[230.23480225 -191.88679504]
[228.09289551 -207.78620911]
[239.29173279 -219.27384949]
[255.24052429 -217.53735352]
[263.70474243 -203.90882874]
[258.19134521 -188.84289551]
[242.92973328 -183.89686584]
[234.93981934 -171.20193481]
[226.94990540 -158.50701904]
[218.95999146 -145.81208801]
[210.97007751 -133.11715698]
[223.43133545 -117.59505463]
[229.17878723 -98.50705719]
[227.35437012 -78.62682343]
[218.20195007 -60.85169220]
[203.03500366 -47.78047943]
[184.04811096 -41.33347321]
[163.99948120 -42.47038269]
[158.22320557 -28.62716675]
[152.44692993 -14.78394890]
[146.67065430 -0.94073141]
[157.59121704 12.30108929]
[160.35348511 29.33116341]
[154.11462402 45.51124573]
[140.49560547 56.38884354]
[123.16133881 58.92239380]
[117.96591949 72.99391174]
[112.77050781 87.06543732]
[118.59872437 110.52150726]
[93.90853119 123.79309845]
[92.97290802 138.76390076]
[92.03727722 153.73468018]
[91.56923676 168.72738647]
[91.56923676 183.72738647]
[106.19380188 187.36161804]
[119.51547241 194.38624573]
[130.76190186 204.38908386]
[139.28224182 216.78546143]
[144.58479309 230.85231018]
[146.36538696 245.77043152]
[144.52484131 260.67211914]
[139.17443848 274.69174194]
[130.62925720 287.01583862]
[119.38957977 296.93054199]
[106.11162567 303.86279297]
[91.56923676 307.41345215]
[91.56923676 322.41345215]
[91.56923676 337.41345215]
[91.56923676 352.41345215]
[91.56923676 367.41345215]
[91.56923676 382.41345215]
[91.56923676 397.41345215]
[91.56923676 412.41345215]
[91.56923676 427.41345215]
[91.56923676 442.41345215]
[106.10912323 446.47476196]
[119.01350403 454.30926514]
[129.32478333 465.33560181]
[136.27780151 478.73553467]
[139.35661316 493.51470947]
[138.33271790 508.57638550]
[133.28211975 522.80291748]
[124.57958984 535.13854980]
[112.87092590 544.66796875]
[99.02498627 550.68402100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 119]
[33 118]
[37 117]
[38 116]
[39 115]
[40 52]
[41 51]
[42 50]
[43 49]
[55 113]
[56 112]
[57 111]
[64 106]
[65 105]
[66 104]
[67 103]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
