%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACUCCUCAUGGGGGGGGGGUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAxxxxxxxxxxUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[104.90783691 532.89886475]
[90.54558563 528.39215088]
[77.38469696 521.08624268]
[65.96410370 511.28039551]
[56.75146103 499.37609863]
[50.12403488 485.86083984]
[46.35320282 471.28808594]
[45.59338760 456.25454712]
[47.87569809 441.37582397]
[53.10667419 427.26123047]
[61.07211304 414.48873901]
[71.44583130 403.58135986]
[83.80303955 394.98574829]
[97.63771057 389.05392456]
[112.38333130 386.02874756]
[112.38333130 371.02874756]
[112.38333130 356.02874756]
[112.38333130 341.02874756]
[112.38333130 326.02874756]
[112.38333130 311.02874756]
[112.38333130 296.02874756]
[112.38333130 281.02874756]
[112.38333130 266.02874756]
[112.38333130 251.02874756]
[112.38333130 236.02874756]
[98.01746368 231.85749817]
[85.39631653 223.79910278]
[75.54732513 212.49940491]
[69.27513123 198.86854553]
[67.09580994 184.00762939]
[69.19444275 169.11979675]
[75.40940094 155.41276550]
[85.24480438 144.00093079]
[97.91004181 135.81472778]
[112.38333130 131.52473450]
[112.38333130 116.52473450]
[97.90430450 119.24916840]
[86.30126190 111.79356384]
[83.22476196 99.31605530]
[70.08873749 92.07417297]
[56.95271301 84.83229065]
[45.34420776 92.68815613]
[31.54753304 94.75463867]
[18.27349281 90.68354797]
[8.10528278 81.32697296]
[2.99581122 68.55966187]
[3.89276361 54.90359116]
[-9.09761715 47.40359116]
[-22.08799934 39.90359116]
[-35.07838058 32.40359116]
[-48.06875992 24.90359116]
[-64.80902100 22.22031021]
[-66.86476898 5.39145803]
[-51.26268005 -1.24263906]
[-40.56875992 11.91321087]
[-27.57837868 19.41320992]
[-14.58799839 26.91320992]
[-1.59761739 34.41321182]
[11.39276409 41.91321182]
[25.15962601 33.49921417]
[41.38425827 33.15873718]
[55.65586472 41.07872009]
[64.04708862 55.18758774]
[64.19459534 71.69626617]
[77.33061981 78.93814850]
[90.46664429 86.18003082]
[105.99283600 82.26571655]
[119.63259125 93.59883118]
[128.25645447 81.32573700]
[117.07549286 71.29965210]
[107.15885162 60.02150345]
[98.64575195 47.64962006]
[91.65570068 34.35768509]
[86.28682709 20.33229637]
[82.61450958 5.77034521]
[80.69028473 -9.12373924]
[80.54118347 -24.14086723]
[82.16928864 -39.07022095]
[85.55175018 -53.70221710]
[90.64108276 -67.83144379]
[97.36583710 -81.25955200]
[105.63160706 -93.79802704]
[115.32235718 -105.27085876]
[126.30204010 -115.51696777]
[138.41651917 -124.39253235]
[151.49574280 -131.77294922]
[165.35607910 -137.55459595]
[179.80294800 -141.65632629]
[194.63354492 -144.02055359]
[209.63969421 -144.61407471]
[224.61068726 -143.42857361]
[239.33639526 -140.48068237]
[253.61006165 -135.81178284]
[267.23132324 -129.48744202]
[280.00897217 -121.59641266]
[291.76361084 -112.24948883]
[302.33023071 -101.57788086]
[311.56045532 -89.73140717]
[319.32476807 -76.87637329]
[325.51412964 -63.19324493]
[330.04168701 -48.87410736]
[332.84384155 -34.11997986]
[333.88125610 -19.13798523]
[333.13940430 -4.13845253]
[330.62866211 10.66805172]
[326.38430786 25.07366562]
[320.46588135 38.87615967]
[312.95651245 51.88176346]
[303.96160889 63.90790176]
[293.60745239 74.78575134]
[282.03936768 84.36259460]
[269.41976929 92.50399017]
[255.92584229 99.09564972]
[241.74697876 104.04503632]
[227.08226013 107.28266144]
[212.13754272 108.76308441]
[197.12261963 108.46550751]
[182.24829102 106.39412689]
[167.72335815 102.57801056]
[153.75173950 97.07073212]
[140.52955627 89.94960022]
[131.90568542 102.22270203]
[127.38333130 116.52473450]
[127.38333130 131.52473450]
[141.85661316 135.81472778]
[154.52185059 144.00093079]
[164.35725403 155.41276550]
[170.57221985 169.11979675]
[172.67083740 184.00762939]
[170.49153137 198.86854553]
[164.21932983 212.49940491]
[154.37034607 223.79910278]
[141.74919128 231.85749817]
[127.38333130 236.02874756]
[127.38333130 251.02874756]
[127.38333130 266.02874756]
[127.38333130 281.02874756]
[127.38333130 296.02874756]
[127.38333130 311.02874756]
[127.38333130 326.02874756]
[127.38333130 341.02874756]
[127.38333130 356.02874756]
[127.38333130 371.02874756]
[127.38333130 386.02874756]
[142.12893677 389.05392456]
[155.96362305 394.98574829]
[168.32081604 403.58135986]
[178.69454956 414.48873901]
[186.65998840 427.26123047]
[191.89096069 441.37582397]
[194.17326355 456.25454712]
[193.41345215 471.28808594]
[189.64262390 485.86083984]
[183.01519775 499.37609863]
[173.80255127 511.28039551]
[162.38195801 521.08624268]
[149.22106934 528.39215088]
[134.85881042 532.89886475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[35 124]
[36 123]
[39 66]
[40 65]
[41 64]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[68 122]
[69 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
