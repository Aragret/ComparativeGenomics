%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUUCCCCUAGGGGGGGGGGAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUxxxxxxxxxxAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCCCCCCCCCCCUACUUCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 394.60397339]
[70.87159729 389.44897461]
[58.28185654 381.16674805]
[47.94191742 370.20397949]
[40.40940475 357.15185547]
[36.09054184 342.71426392]
[35.21823120 327.66979980]
[37.83952332 312.82980347]
[43.81304932 298.99456787]
[52.81666565 286.91021729]
[64.36482239 277.22845459]
[77.83473969 270.47137451]
[92.50000000 267.00338745]
[92.50000000 252.00338745]
[92.50000000 237.00338745]
[92.50000000 222.00338745]
[92.50000000 207.00338745]
[92.50000000 192.00338745]
[92.50000000 177.00338745]
[92.50000000 162.00338745]
[92.50000000 147.00338745]
[92.50000000 132.00338745]
[85.71652985 129.60488892]
[79.61741638 125.78792572]
[74.49489594 120.73538971]
[70.59439850 114.68936157]
[56.00002289 118.15408325]
[41.40565109 121.61879730]
[26.81127548 125.08351135]
[12.21690178 128.54823303]
[2.60959601 141.39654541]
[-13.42951870 141.75201416]
[-23.59660530 129.34193420]
[-20.09234619 113.68627167]
[-5.60490847 106.79470825]
[8.75218582 113.95385742]
[23.34655952 110.48913574]
[37.94093323 107.02442169]
[52.53530502 103.55970764]
[67.12967682 100.09499359]
[68.00309753 82.48567963]
[78.49645233 66.17327881]
[97.26950073 56.39608002]
[120.19541931 57.23294830]
[117.77386475 42.42970276]
[109.71080780 29.78110123]
[97.31314850 21.33728218]
[84.91548920 12.89346313]
[72.51782990 4.44964361]
[57.95883179 9.81762028]
[43.03431702 5.57044792]
[33.48306656 -6.65874767]
[32.97773361 -22.16759300]
[41.71262360 -34.99261856]
[56.32899857 -40.20234299]
[71.20655823 -35.79351807]
[80.62458801 -23.46142769]
[80.96165466 -7.94801426]
[93.35930634 0.49580485]
[105.75696564 8.93962383]
[118.15462494 17.38344193]
[125.10533905 14.56606483]
[139.00675964 8.93130970]
[145.95747375 6.11393118]
[148.97694397 -8.57901764]
[151.99642944 -23.27196693]
[154.86685181 -37.99476242]
[157.58792114 -52.74588776]
[160.30900574 -67.49701691]
[146.51617432 -73.56780243]
[134.49551392 -82.65628052]
[124.89527893 -94.27231598]
[118.23320770 -107.78947449]
[114.86856842 -122.47879028]
[114.98281860 -137.54808044]
[118.56980133 -152.18469238]
[125.43605804 -165.59927368]
[135.21131897 -177.06842041]
[147.36840820 -185.97358704]
[161.25169373 -191.83453369]
[176.11250305 -194.33520508]
[191.14938354 -193.34072876]
[205.55142212 -188.90473938]
[218.54193115 -181.26644897]
[229.42036438 -170.83781433]
[237.60003662 -158.18121338]
[242.63984680 -143.97920227]
[244.26800537 -128.99768066]
[242.39669800 -114.04459381]
[237.12684631 -99.92633057]
[228.74264526 -87.40427399]
[217.69625854 -77.15372467]
[204.58337402 -69.72747803]
[190.11117554 -65.52602386]
[175.06013489 -64.77593994]
[172.33905029 -50.02481079]
[169.61798096 -35.27368546]
[171.50848389 -28.08302689]
[166.68937683 -20.25248909]
[163.66989136 -5.55953979]
[160.65042114 9.13340950]
[132.57710266 40.00814438]
[134.99865723 54.81138992]
[147.39631653 63.25521088]
[162.05792236 60.08699036]
[173.91252136 49.60944366]
[187.98689270 54.48400116]
[202.64848328 51.31578064]
[217.31008911 48.14756012]
[231.51480103 38.89216995]
[244.34074402 49.97961807]
[237.23718262 65.37362671]
[220.47830200 62.80915451]
[205.81671143 65.97737885]
[191.15512085 69.14559937]
[180.34921265 79.39653015]
[165.22613525 74.74858093]
[150.56454468 77.91680908]
[149.88143921 85.38562775]
[148.51521301 100.32328033]
[147.83210754 107.79210663]
[161.67572021 113.56745148]
[175.51931763 119.34279633]
[189.36293030 125.11814117]
[206.30894470 125.63636017]
[210.50210571 142.06358337]
[195.87765503 150.64038086]
[183.58758545 138.96174622]
[169.74397278 133.18640137]
[155.90037537 127.41105652]
[142.05676270 121.63571167]
[124.66824341 131.59315491]
[107.50000000 132.00338745]
[107.50000000 147.00338745]
[107.50000000 162.00338745]
[107.50000000 177.00338745]
[107.50000000 192.00338745]
[107.50000000 207.00338745]
[107.50000000 222.00338745]
[107.50000000 237.00338745]
[107.50000000 252.00338745]
[107.50000000 267.00338745]
[122.16526031 270.47137451]
[135.63517761 277.22845459]
[147.18333435 286.91021729]
[156.18695068 298.99456787]
[162.16047668 312.82980347]
[164.78176880 327.66979980]
[163.90945435 342.71426392]
[159.59059143 357.15185547]
[152.05809021 370.20397949]
[141.71813965 381.16674805]
[129.12840271 389.44897461]
[114.96779633 394.60397339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[44 103]
[45 102]
[46 61]
[47 60]
[48 59]
[49 58]
[64 101]
[65 100]
[66 99]
[67 97]
[68 96]
[69 95]
[104 118]
[105 117]
[107 115]
[108 114]
[109 113]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
