%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACACCCUGGGGGGGGGGCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACxxxxxxxxxxGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCCCCCCCCCCCUAAGCACCCU\
) } def
/len { sequence length } bind def

/coor [
[84.92349243 438.64611816]
[71.70330048 431.37365723]
[60.81649399 420.92666626]
[53.00536346 408.01742554]
[48.80248260 393.52609253]
[48.49441147 378.44076538]
[52.10215378 363.78994751]
[59.37972641 350.57254028]
[69.83093262 339.68978882]
[82.74319458 331.88363647]
[97.23612976 327.68634033]
[96.92407227 312.68960571]
[96.61202240 297.69284058]
[96.29996490 282.69607544]
[95.98790741 267.69934082]
[95.67584991 252.70257568]
[95.36379242 237.70582581]
[95.05173492 222.70907593]
[94.73968506 207.71231079]
[94.42762756 192.71556091]
[94.11557007 177.71881104]
[82.13511658 175.86624146]
[70.58685303 172.17829895]
[59.75015640 166.74421692]
[49.88718796 159.69543457]
[41.23655319 151.20251465]
[34.00753403 141.47088623]
[28.37501335 130.73599243]
[24.47525215 119.25752258]
[22.40259552 107.31317902]
[22.20718575 95.19190979]
[23.89374733 83.18696594]
[27.42148399 71.58876038]
[32.70504761 60.67787933]
[39.61661911 50.71828842]
[47.98899078 41.95092773]
[57.61962509 34.58789444]
[50.71262360 21.27273941]
[43.80562592 7.95758390]
[36.89862823 -5.35757160]
[23.67588615 -14.04489994]
[24.68362617 -28.90537453]
[17.77662849 -42.22053146]
[3.57257390 -37.31515503]
[-11.19435787 -34.53027344]
[-26.20940971 -33.92524338]
[-41.15253448 -35.51296234]
[-55.70522308 -39.25958633]
[-69.55727386 -45.08525848]
[-82.41343689 -52.86580276]
[-93.99968719 -62.43537903]
[-104.06905365 -73.59000397]
[-112.40690613 -86.09192657]
[-118.83553314 -99.67465973]
[-123.21790314 -114.04869080]
[-125.46059418 -128.90763855]
[-125.51582336 -143.93476868]
[-123.38240051 -158.80979919]
[-119.10580444 -173.21563721]
[-112.77719116 -186.84526062]
[-104.53144836 -199.40812683]
[-94.54434204 -210.63647461]
[-83.02874756 -220.29093933]
[-70.23011780 -228.16577148]
[-56.42125702 -234.09310913]
[-41.89650345 -237.94659424]
[-26.96545219 -239.64410400]
[-11.94635773 -239.14944458]
[2.84064484 -236.47317505]
[17.08036995 -231.67233276]
[30.46929741 -224.84925842]
[42.72204208 -216.14936829]
[53.57743454 -205.75810242]
[62.80409241 -193.89695740]
[70.20534515 -180.81877136]
[75.62344360 -166.80227661]
[78.94289398 -152.14624023]
[80.09294128 -137.16308594]
[79.04907227 -122.17214203]
[75.83354187 -107.49296570]
[70.51489258 -93.43843842]
[63.20647430 -80.30812836]
[54.06408310 -68.38191986]
[43.28258133 -57.91401291]
[31.09178352 -49.12752914]
[37.99878311 -35.81237411]
[50.72748947 -28.07743454]
[50.21378326 -12.26457024]
[57.12078094 1.05058539]
[64.02777863 14.36574078]
[70.93477631 27.68089676]
[89.36567688 22.78762436]
[108.43315125 22.51631355]
[126.99581146 26.88320541]
[143.94250488 35.62689590]
[158.25877380 48.22398376]
[169.08764648 63.92040253]
[182.99020386 58.28844833]
[196.89276123 52.65649033]
[210.79531860 47.02453232]
[215.44139099 32.09309006]
[228.62609863 23.68492126]
[244.12403870 25.77010727]
[254.61753845 37.36408615]
[255.15190125 52.99253845]
[245.47480774 65.27618408]
[230.15550232 68.41506195]
[216.42726135 60.92708969]
[202.52471924 66.55904388]
[188.62216187 72.19100189]
[174.71960449 77.82295990]
[177.12649536 88.75971222]
[177.94122314 99.92850494]
[177.14698792 111.09877777]
[191.71968079 114.65353394]
[206.29238892 118.20829773]
[220.69340515 111.13793182]
[235.13801575 118.11882019]
[238.54554749 133.79582214]
[228.30203247 146.14288330]
[212.26541138 145.68840027]
[202.73762512 132.78100586]
[188.16491699 129.22624207]
[173.59222412 125.67147827]
[166.06791687 141.35057068]
[155.25427246 154.97094727]
[141.68968201 165.85446167]
[126.04946136 173.45927429]
[109.11231995 177.40675354]
[109.42437744 192.40350342]
[109.73643494 207.40025330]
[110.04849243 222.39701843]
[110.36054993 237.39376831]
[110.67260742 252.39051819]
[110.98465729 267.38726807]
[111.29671478 282.38403320]
[111.60877228 297.38076782]
[111.92082977 312.37753296]
[112.23288727 327.37429810]
[126.88787842 330.96505737]
[140.11369324 338.22732544]
[151.00856018 348.66592407]
[158.82965088 361.56912231]
[163.04371643 376.05718994]
[163.36344910 391.14227295]
[159.76701355 405.79589844]
[152.49964905 419.01889038]
[142.05685425 429.90972900]
[129.15061951 437.72583008]
[114.66093445 441.93432617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[37 91]
[38 90]
[39 89]
[40 88]
[42 86]
[43 85]
[97 111]
[98 110]
[99 109]
[100 108]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
