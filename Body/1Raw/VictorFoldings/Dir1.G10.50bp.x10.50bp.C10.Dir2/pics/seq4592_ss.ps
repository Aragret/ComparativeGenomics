%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCCCAUCCUAGGGGGGGGGGAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCAUCCAA\
) } def
/len { sequence length } bind def

/coor [
[63.28715134 492.33969116]
[49.27241516 486.85577393]
[36.59699249 478.74282837]
[25.74809074 468.31271362]
[17.14271545 455.96627808]
[11.11163235 442.17816162]
[7.88666248 427.47830200]
[7.59176302 412.43173218]
[10.23827076 397.61682129]
[15.72445869 383.60296631]
[23.83945465 370.92886353]
[34.27133942 360.08163452]
[46.61913681 351.47827148]
[60.40823364 345.44940186]
[75.10861206 342.22683716]
[74.81225586 327.22973633]
[74.51589966 312.23266602]
[74.21954346 297.23559570]
[73.92318726 282.23852539]
[73.62682343 267.24145508]
[73.33046722 252.24438477]
[73.03411102 237.24731445]
[72.73775482 222.25024414]
[72.44139862 207.25317383]
[72.14504242 192.25610352]
[59.84848785 200.84649658]
[45.40926743 196.78338623]
[39.39702606 183.04100037]
[46.21278381 169.67890930]
[60.86734009 166.47828674]
[72.63343811 175.78205872]
[73.81771088 160.82888794]
[75.00198364 145.87570190]
[76.18625641 130.92253113]
[66.28215027 119.65715027]
[51.30044174 118.91651154]
[36.31874084 118.17587280]
[21.33703613 117.43523407]
[8.52915859 127.09638214]
[-6.97335196 122.96701050]
[-13.27829742 108.21482086]
[-5.54906225 94.15642548]
[10.28514481 91.57622528]
[22.07767677 102.45352936]
[37.05937958 103.19416809]
[52.04108429 103.93480682]
[67.02278900 104.67544556]
[69.69415283 95.91146851]
[74.44404602 88.92179108]
[62.79618835 79.47047424]
[51.14833069 70.01915741]
[39.50047302 60.56783676]
[27.85261536 51.11651993]
[12.53477383 54.26258469]
[-1.19696867 46.78105927]
[-6.85890388 32.20448685]
[-1.77763832 17.41547775]
[11.64760971 9.39695263]
[27.07784843 11.93501282]
[37.22739029 23.83126450]
[37.30393219 39.46866226]
[48.95178986 48.91997910]
[60.59964752 58.37129593]
[72.24750519 67.82261658]
[83.89536285 77.27393341]
[96.43256378 72.37561035]
[109.80284882 73.92822266]
[118.66751099 61.82790375]
[127.53217316 49.72758484]
[136.39683533 37.62726212]
[137.94386292 19.30290985]
[154.22418213 12.81270218]
[162.84805298 0.53960449]
[171.47190857 -11.73349285]
[160.56417847 -22.06979370]
[151.27772522 -33.88417816]
[143.81050110 -46.92482758]
[138.32168579 -60.91377640]
[134.92825317 -75.55284882]
[133.70254517 -90.53001404]
[134.67068481 -105.52603149]
[137.81202698 -120.22126770]
[143.05963135 -134.30247498]
[150.30163574 -147.46952820]
[159.38366699 -159.44177246]
[170.11215210 -169.96398926]
[182.25842285 -178.81193542]
[195.56356812 -185.79699707]
[209.74398804 -190.77029419]
[224.49742126 -193.62580872]
[239.50939941 -194.30268860]
[254.45996094 -192.78649902]
[269.03039551 -189.10955811]
[282.91018677 -183.35025024]
[295.80343628 -175.63131714]
[307.43533325 -166.11729431]
[317.55795288 -155.01097107]
[325.95556641 -142.54910278]
[332.44909668 -128.99728394]
[336.90020752 -114.64439392]
[339.21398926 -99.79635620]
[339.34112549 -84.76965332]
[337.27893066 -69.88459015]
[333.07131958 -55.45843887]
[326.80798340 -41.79869080]
[318.62246704 -29.19650841]
[308.68920898 -17.92050552]
[297.21994019 -8.21103191]
[284.45913696 -0.27504465]
[270.67880249 5.71829939]
[256.17266846 9.64125156]
[241.24990845 11.41019440]
[226.22860718 10.98742294]
[211.42897034 8.38194847]
[197.16644287 3.64930606]
[183.74501038 -3.10962701]
[175.12113953 9.16347122]
[166.49728394 21.43656921]
[168.26422119 33.43704987]
[161.13446045 43.74249268]
[148.49716187 46.49192810]
[139.63249207 58.59224701]
[130.76783752 70.69256592]
[121.90316772 82.79288483]
[128.55271912 95.25421906]
[128.35070801 109.91678619]
[120.82897186 123.12929535]
[107.40492249 131.35380554]
[91.13942719 132.10679626]
[89.95515442 147.05998230]
[88.77088165 162.01315308]
[87.58660889 176.96632385]
[87.14211273 191.95974731]
[87.43846893 206.95681763]
[87.73482513 221.95388794]
[88.03118134 236.95095825]
[88.32754517 251.94802856]
[88.62390137 266.94509888]
[88.92025757 281.94216919]
[89.21661377 296.93923950]
[89.51296997 311.93630981]
[89.80932617 326.93338013]
[90.10568237 341.93045044]
[104.92190552 344.56976318]
[118.93841553 350.04916382]
[131.61645508 358.15798950]
[142.46873474 368.58462524]
[151.07810974 380.92825317]
[157.11366272 394.71441650]
[160.34338379 409.41320801]
[160.64315796 424.45968628]
[158.00144958 439.27548218]
[152.51979065 453.29110718]
[144.40890503 465.96783447]
[133.98052979 476.81842041]
[121.63551331 485.42581177]
[107.84836578 491.45910645]
[93.14903259 494.68646240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[31 132]
[32 131]
[33 130]
[34 129]
[35 47]
[36 46]
[37 45]
[38 44]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[67 124]
[68 123]
[69 122]
[70 121]
[72 118]
[73 117]
[74 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
