%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUUCAAGGGGGGGGGGCCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUxxxxxxxxxxAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGCCCCCCCCCCACUCAUUAAA\
) } def
/len { sequence length } bind def

/coor [
[25.86265564 509.68960571]
[12.01671696 503.67358398]
[0.30805513 494.14416504]
[-8.39446926 481.80850220]
[-13.44507122 467.58197021]
[-14.46896267 452.52029419]
[-11.39016342 437.74114990]
[-4.43714190 424.34121704]
[5.87414265 413.31488037]
[18.77852440 405.48037720]
[33.31840897 401.41906738]
[33.31840897 386.41906738]
[33.31840897 371.41906738]
[33.31840897 356.41906738]
[33.31840897 341.41906738]
[33.31840897 326.41906738]
[33.31840897 311.41906738]
[33.31840897 296.41906738]
[33.31840897 281.41906738]
[33.31840897 266.41906738]
[33.31840897 251.41906738]
[25.58111000 238.69178772]
[33.31840897 224.89161682]
[33.31840897 209.89161682]
[22.76712036 199.22999573]
[7.76793194 199.07395935]
[-7.23125648 198.91792297]
[-22.23044586 198.76188660]
[-32.54533768 213.60829163]
[-49.54275513 219.28898621]
[-66.41436005 213.72575378]
[-76.51960754 199.30522156]
[-91.51229858 199.77326965]
[-106.50499725 200.24130249]
[-118.49340820 210.90234375]
[-134.27806091 208.03459167]
[-141.75033569 193.83795166]
[-135.17813110 179.20286560]
[-119.60308838 175.35612488]
[-106.97303772 185.24861145]
[-91.98034668 184.78056335]
[-76.98764801 184.31253052]
[-71.68577576 173.31112671]
[-62.13714981 165.58206177]
[-50.13192749 162.65390015]
[-37.95507050 165.14764404]
[-27.95146751 172.64619446]
[-22.07440758 183.76269531]
[-7.07522011 183.91873169]
[7.92396832 184.07476807]
[22.92315674 184.23080444]
[34.04190826 163.42820740]
[55.02267456 160.30961609]
[62.74676132 147.45120239]
[70.47084808 134.59280396]
[78.19493103 121.73439789]
[71.25467682 111.02504730]
[69.25340271 98.42139435]
[72.53495789 86.08896637]
[80.53551483 76.14671326]
[91.88043213 70.30289459]
[91.56837463 55.30614471]
[91.25631714 40.30939102]
[83.23359680 26.67317009]
[90.70445251 13.78768730]
[76.16617584 9.64885712]
[63.49464035 1.40727532]
[53.81659317 -10.20422173]
[47.99260330 -24.15314674]
[46.54053116 -39.19917297]
[49.58949280 -54.00441742]
[56.86838150 -67.25240326]
[67.72995758 -77.76513672]
[81.20841980 -84.60782623]
[96.10527802 -87.17202759]
[111.09590149 -85.22973633]
[124.84735107 -78.95365143]
[136.13684082 -68.90184021]
[143.96052551 -55.96811295]
[147.62272644 -41.30251694]
[146.79779053 -26.20911026]
[141.55909729 -12.02998924]
[132.37245178 -0.02595153]
[120.05472565 8.73561287]
[105.70120239 13.47563076]
[113.70160675 26.03918266]
[106.25307465 39.99733353]
[106.56513214 54.99408722]
[106.87718201 69.99084473]
[112.11199951 65.49880981]
[118.41653442 61.87088013]
[129.71554565 52.00515747]
[141.01454163 42.13943481]
[143.52871704 26.29460907]
[157.55477905 18.50684738]
[172.33312988 24.75024986]
[176.52706909 40.23541641]
[166.91938782 53.08345032]
[150.88026428 53.43843842]
[139.58126831 63.30416107]
[128.28225708 73.16988373]
[130.95301819 80.17823792]
[142.63310242 70.76677704]
[155.19326782 78.96691132]
[151.27574158 93.44631958]
[136.29452515 94.19495392]
[138.96528625 101.20330811]
[153.96447754 101.04727173]
[168.96365356 100.89123535]
[183.96284485 100.73519897]
[196.17045593 90.32588196]
[211.89202881 93.52139282]
[219.06735229 107.87041473]
[212.19210815 122.36560822]
[196.54040527 125.88749695]
[184.11888123 115.73439026]
[169.11968994 115.89042664]
[154.12051392 116.04646301]
[139.12132263 116.20249939]
[115.62908936 133.05697632]
[91.05332947 129.45848083]
[83.32924652 142.31689453]
[75.60516357 155.17529297]
[67.88108063 168.03369141]
[74.65903473 184.46655273]
[67.28185272 202.12156677]
[48.31840897 209.89161682]
[48.31840897 224.89161682]
[56.05570984 238.69178772]
[48.31840897 251.41906738]
[48.31840897 266.41906738]
[48.31840897 281.41906738]
[48.31840897 296.41906738]
[48.31840897 311.41906738]
[48.31840897 326.41906738]
[48.31840897 341.41906738]
[48.31840897 356.41906738]
[48.31840897 371.41906738]
[48.31840897 386.41906738]
[48.31840897 401.41906738]
[62.85829926 405.48037720]
[75.76268005 413.31488037]
[86.07395935 424.34121704]
[93.02698517 437.74114990]
[96.10578156 452.52029419]
[95.08189392 467.58197021]
[90.03128815 481.80850220]
[81.32876587 494.14416504]
[69.62010193 503.67358398]
[55.77416611 509.68960571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 51]
[26 50]
[27 49]
[28 48]
[32 42]
[33 41]
[34 40]
[53 124]
[54 123]
[55 122]
[56 121]
[61 89]
[62 88]
[63 87]
[65 85]
[91 101]
[92 100]
[93 99]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
