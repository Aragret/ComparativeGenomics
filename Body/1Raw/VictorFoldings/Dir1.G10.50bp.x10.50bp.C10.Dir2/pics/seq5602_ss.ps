%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCAUCAUGGGGGGGGGGAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUxxxxxxxxxxCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACCCCCCCCCCCAACCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.80145264]
[71.19830322 352.78543091]
[59.48964310 343.25601196]
[50.78712082 330.92034912]
[45.73651886 316.69381714]
[44.71262741 301.63214111]
[47.79142761 286.85296631]
[54.74444962 273.45306396]
[65.05573273 262.42672729]
[77.96011353 254.59220886]
[92.50000000 250.53089905]
[92.50000000 235.53089905]
[92.50000000 220.53089905]
[92.50000000 205.53089905]
[92.50000000 190.53089905]
[92.50000000 175.53089905]
[92.50000000 160.53089905]
[92.50000000 145.53089905]
[92.50000000 130.53089905]
[92.50000000 115.53089905]
[80.27328491 100.02666473]
[90.28929901 80.02927399]
[78.58967590 70.64211273]
[68.07585907 81.35836792]
[56.54727554 90.97452545]
[44.11850739 99.39499664]
[30.91308594 106.53610229]
[17.06225204 112.32687378]
[2.70366502 116.70974731]
[-12.01996803 119.64117432]
[-26.96231270 121.09201050]
[-41.97486496 121.04784393]
[-56.90841293 119.50910187]
[-71.61454010 116.49108887]
[-85.94709015 112.02379608]
[-99.76361084 106.15162659]
[-112.92678070 98.93293762]
[-125.30577850 90.43946838]
[-136.77757263 80.75564575]
[-147.22816467 69.97770691]
[-156.55364990 58.21276855]
[-164.66139221 45.57776642]
[-171.47076416 32.19826889]
[-176.91412354 18.20725632]
[-180.93736267 3.74377942]
[-183.50048828 -11.04841423]
[-184.57803345 -26.02230835]
[-184.15928650 -41.02908325]
[-182.24841309 -55.91958618]
[-178.86437988 -70.54582977]
[-174.04086304 -84.76245117]
[-167.82575989 -98.42814636]
[-160.28086853 -111.40709686]
[-151.48117065 -123.57031250]
[-141.51411438 -134.79690552]
[-130.47877502 -144.97531128]
[-118.48480988 -154.00434875]
[-105.65143585 -161.79428101]
[-92.10620117 -168.26770020]
[-77.98371887 -173.36026001]
[-63.42435837 -177.02134705]
[-48.57281494 -179.21458435]
[-33.57669449 -179.91816711]
[-18.58504295 -179.12509155]
[-3.74685454 -176.84326172]
[10.79039764 -173.09533691]
[24.88223267 -167.91857910]
[38.38859177 -161.36444092]
[51.17524719 -153.49804688]
[63.11510849 -144.39758301]
[74.08950806 -134.15351868]
[83.98937988 -122.86763000]
[92.71633148 -110.65210724]
[100.18362427 -97.62835693]
[106.31704712 -83.92581177]
[111.05564117 -69.68066406]
[114.35231018 -55.03448105]
[116.17428589 -40.13283539]
[116.50346375 -25.12383080]
[115.33657074 -10.15663338]
[112.68520355 4.61999893]
[108.57571411 19.05920601]
[103.04895020 33.01748276]
[96.15983582 46.35610199]
[87.97683716 58.94248962]
[99.67646027 68.32965088]
[114.28535461 71.73262787]
[128.92886353 68.48180389]
[137.43629456 55.43338776]
[152.33320618 52.34518814]
[164.72044373 60.53614807]
[179.36395264 57.28532410]
[194.00744629 54.03449631]
[208.65095520 50.78367233]
[223.22364807 47.22890854]
[237.71925354 43.37174988]
[252.21484375 39.51459122]
[240.98837280 29.56640625]
[241.55357361 14.57705879]
[253.49732971 5.50254726]
[268.08972168 8.97560501]
[274.66488647 22.45770836]
[268.41741943 36.09410858]
[283.23519897 33.76300430]
[298.05294800 31.43190002]
[312.87069702 29.10079575]
[327.68844604 26.76969147]
[340.09671021 16.04739380]
[355.49563599 21.68693542]
[358.04418945 37.88684464]
[345.12060547 47.98203659]
[330.01956177 41.58744812]
[315.20181274 43.91855240]
[300.38403320 46.24965668]
[285.56628418 48.58076096]
[270.74853516 50.91186523]
[256.07199097 54.01018906]
[241.57640076 57.86734772]
[227.08081055 61.72450638]
[223.92701721 65.38908386]
[218.41346741 67.07195282]
[211.90177917 65.42716980]
[197.25827026 68.67800140]
[182.61477661 71.92882538]
[167.97126770 75.17964935]
[160.21357727 87.84274292]
[145.40930176 91.34814453]
[132.17968750 83.12530518]
[117.53617859 86.37612915]
[119.20631409 104.50127411]
[107.50000000 115.53089905]
[107.50000000 130.53089905]
[107.50000000 145.53089905]
[107.50000000 160.53089905]
[107.50000000 175.53089905]
[107.50000000 190.53089905]
[107.50000000 205.53089905]
[107.50000000 220.53089905]
[107.50000000 235.53089905]
[107.50000000 250.53089905]
[122.03988647 254.59220886]
[134.94427490 262.42672729]
[145.25555420 273.45306396]
[152.20857239 286.85296631]
[155.28736877 301.63214111]
[154.26348877 316.69381714]
[149.21287537 330.92034912]
[140.51036072 343.25601196]
[128.80169678 352.78543091]
[114.95575714 358.80145264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 86]
[23 85]
[87 129]
[88 128]
[91 125]
[92 124]
[93 123]
[94 122]
[95 119]
[96 118]
[97 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
