%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUCCGGGGGGGGGGUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCxxxxxxxxxxCACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACCCCCCCCCCCUACUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[84.96763611 393.38735962]
[71.12169647 387.37133789]
[59.41303253 377.84191895]
[50.71050644 365.50625610]
[45.65990448 351.27972412]
[44.63601303 336.21804810]
[47.71481323 321.43890381]
[54.66783524 308.03897095]
[64.97911835 297.01263428]
[77.88349915 289.17813110]
[92.42338562 285.11682129]
[92.42338562 270.11682129]
[92.42338562 255.11680603]
[92.42338562 240.11680603]
[92.42338562 225.11680603]
[92.42338562 210.11680603]
[92.42338562 195.11680603]
[92.42338562 180.11680603]
[92.42338562 165.11680603]
[92.42338562 150.11680603]
[92.42338562 135.11680603]
[84.68608856 122.38953400]
[92.42338562 108.58936310]
[81.54052734 118.91231537]
[66.57997894 119.99949646]
[54.31901550 111.35839081]
[50.31196594 96.90351105]
[56.37407303 83.18305206]
[69.75914001 76.41252899]
[84.40359497 79.65904236]
[93.67349243 91.45227814]
[95.85032654 76.61106873]
[98.02716827 61.76986694]
[85.78436279 50.14377975]
[82.88861847 33.67877960]
[90.28199768 18.86986732]
[104.88687134 11.43999863]
[106.75447845 -3.44328141]
[108.62209320 -18.32656097]
[110.48970795 -33.20984268]
[111.11368561 -48.19685745]
[110.48970795 -63.18387222]
[109.86573029 -78.17089081]
[109.24175262 -93.15790558]
[108.61777496 -108.14492035]
[93.63370514 -109.09111023]
[78.83061981 -111.59839630]
[64.37071991 -115.63931274]
[50.41243744 -121.16958618]
[37.10869598 -128.12863159]
[24.60526848 -136.44018555]
[13.03914547 -146.01319885]
[2.53705215 -156.74276733]
[-6.78594494 -168.51135254]
[-14.82769775 -181.18998718]
[-21.50009727 -194.63977051]
[-26.73003578 -208.71334839]
[-30.46021080 -223.25651550]
[-32.64975357 -238.10990906]
[-33.27467346 -253.11082458]
[-32.32812500 -268.09487915]
[-29.82047844 -282.89788818]
[-25.77920914 -297.35769653]
[-20.24859238 -311.31585693]
[-13.28922939 -324.61941528]
[-4.97736835 -337.12265015]
[4.59592152 -348.68853760]
[15.32575035 -359.19036865]
[27.09455490 -368.51306152]
[39.77339172 -376.55450439]
[53.22333908 -383.22659302]
[67.29704285 -388.45617676]
[81.84029388 -392.18600464]
[96.69374847 -394.37518311]
[111.69467163 -394.99975586]
[126.67869568 -394.05282593]
[141.48165894 -391.54483032]
[155.94136047 -387.50320435]
[169.89938354 -381.97225952]
[183.20277405 -375.01257324]
[195.70579529 -366.70040894]
[207.27145386 -357.12683105]
[217.77302551 -346.39675903]
[227.09545898 -334.62771606]
[235.13659668 -321.94869995]
[241.80833435 -308.49856567]
[247.03759766 -294.42474365]
[250.76705933 -279.88140869]
[252.95588684 -265.02789307]
[253.58007812 -250.02696228]
[252.63279724 -235.04295349]
[250.12443542 -220.24005127]
[246.08245850 -205.78045654]
[240.55116272 -191.82257080]
[233.59115601 -178.51933289]
[225.27868652 -166.01651001]
[215.70483398 -154.45108032]
[204.97450256 -143.94976807]
[193.20524597 -134.62763977]
[180.52601624 -126.58680725]
[167.07574463 -119.91539001]
[153.00178528 -114.68647766]
[138.45835876 -110.95735931]
[123.60478973 -108.76889801]
[124.22876740 -93.78188324]
[124.85274506 -78.79486847]
[125.47672272 -63.80784988]
[126.10070038 -48.82083511]
[135.90942383 -60.16935730]
[150.47795105 -63.74116898]
[164.42352295 -58.21655655]
[172.59350586 -45.63675690]
[171.96925354 -30.64975166]
[162.78143311 -18.79294205]
[148.42474365 -14.44718552]
[134.20370483 -19.21814919]
[125.37298584 -31.34222794]
[123.50537872 -16.45894814]
[121.63776398 -1.57566822]
[119.77014923 13.30761147]
[130.33891296 21.52327347]
[135.49421692 33.99461365]
[133.78399658 47.49000549]
[125.55048370 58.45460510]
[112.86837006 63.94670105]
[110.69153595 78.78791046]
[108.51469421 93.62911224]
[107.42338562 108.58936310]
[115.16069031 122.38953400]
[107.42338562 135.11680603]
[107.42338562 150.11680603]
[107.42338562 165.11680603]
[107.42338562 180.11680603]
[107.42338562 195.11680603]
[107.42338562 210.11680603]
[107.42338562 225.11680603]
[107.42338562 240.11680603]
[107.42338562 255.11680603]
[107.42338562 270.11682129]
[107.42338562 285.11682129]
[121.96327209 289.17813110]
[134.86766052 297.01263428]
[145.17893982 308.03897095]
[152.13195801 321.43890381]
[155.21075439 336.21804810]
[154.18687439 351.27972412]
[149.13626099 365.50625610]
[140.43374634 377.84191895]
[128.72508240 387.37133789]
[114.87914276 393.38735962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[31 127]
[32 126]
[33 125]
[37 120]
[38 119]
[39 118]
[40 117]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
