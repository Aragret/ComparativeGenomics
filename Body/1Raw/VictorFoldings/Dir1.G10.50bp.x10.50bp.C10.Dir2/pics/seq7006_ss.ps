%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACUAGACGGGGGGGGGGAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUxxxxxxxxxxUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACCCCCCCCCCCAUCACAAGAC\
) } def
/len { sequence length } bind def

/coor [
[64.52845764 409.56872559]
[50.50651169 404.01571655]
[38.30655670 395.14938354]
[28.69548416 383.52706909]
[22.27746010 369.87936401]
[19.45592308 355.06417847]
[20.40823746 340.01281738]
[25.07454300 325.67138672]
[33.16151047 312.94143677]
[44.16078568 302.62316895]
[57.38094330 295.36517334]
[71.99095917 291.62374878]
[71.99095917 276.62374878]
[71.99095917 261.62374878]
[71.99095917 246.62374878]
[71.99095917 231.62374878]
[71.99095917 216.62374878]
[71.99095917 201.62374878]
[71.99095917 186.62374878]
[71.99095917 171.62374878]
[71.99095917 156.62374878]
[86.27623749 92.25502777]
[78.64327240 79.34233093]
[71.01029968 66.42963409]
[63.37733078 53.51693726]
[55.22066498 40.92849731]
[46.55405807 28.68554306]
[37.88745117 16.44259071]
[29.22084236 4.19963646]
[20.55423355 -8.04331684]
[11.88762665 -20.28627014]
[-2.40091205 -27.07951927]
[-3.43923616 -41.93788910]
[-12.10584354 -54.18084335]
[-20.77245140 -66.42379761]
[-43.27672195 -58.13642502]
[-70.68852997 -74.38405609]
[-85.51100922 -76.68493652]
[-100.33348846 -78.98580933]
[-115.15597534 -81.28668213]
[-131.73512268 -77.74149323]
[-139.73132324 -92.69130707]
[-127.57932281 -104.51354218]
[-112.85510254 -96.10916901]
[-98.03261566 -93.80828857]
[-83.21013641 -91.50741577]
[-68.38764954 -89.20654297]
[-64.97586823 -95.88558960]
[-58.15229034 -109.24369049]
[-54.74050140 -115.92273712]
[-65.29251862 -126.58364868]
[-75.84453583 -137.24455261]
[-90.67971802 -133.26803589]
[-105.51147461 -137.25735474]
[-116.35012054 -148.13941956]
[-120.28012085 -162.98699951]
[-116.24432373 -177.80618286]
[-105.32834625 -188.61065674]
[-90.46851349 -192.49411011]
[-75.66206360 -188.41188049]
[-64.89185333 -177.46208191]
[-61.05500412 -162.59014893]
[-65.18362427 -147.79656982]
[-54.63160706 -137.13566589]
[-44.07959366 -126.47475433]
[-30.26601028 -132.32154846]
[-30.57398796 -147.31837463]
[-30.88196564 -162.31521606]
[-31.18994331 -177.31205750]
[-45.24280930 -183.18034363]
[-55.68917084 -194.26156616]
[-60.71913147 -208.63581848]
[-59.46122360 -223.81269836]
[-52.13338089 -237.16270447]
[-40.00519943 -246.37286377]
[-25.17796135 -249.84747314]
[-10.22057438 -246.98452759]
[2.27550387 -238.28005981]
[10.14525223 -225.24215698]
[12.02519035 -210.12971497]
[7.58960533 -195.56106567]
[-2.39300895 -184.06031799]
[-16.19310570 -177.62004089]
[-15.88512802 -162.62319946]
[-15.57715034 -147.62635803]
[-15.26917267 -132.62951660]
[5.15228605 -100.02661896]
[-8.52949715 -75.09040070]
[0.13711013 -62.84745026]
[8.80371761 -50.60449600]
[22.47236252 -44.68694687]
[24.13058090 -28.95287895]
[32.79718781 -16.70992470]
[41.46379471 -4.46697092]
[50.13040161 7.77598286]
[58.79701233 20.01893616]
[67.46361542 32.26189041]
[70.26569366 32.84448242]
[72.99765015 34.60675812]
[75.19586945 37.52473831]
[76.41525269 41.40245056]
[76.29003143 45.88396835]
[83.92299652 58.79666519]
[91.55596924 71.70936584]
[99.18893433 84.62206268]
[112.47628021 91.58242035]
[127.43756104 90.50534821]
[142.39883423 89.42827606]
[157.36012268 88.35120392]
[166.37846375 75.57608795]
[181.51170349 71.63666534]
[195.61437988 78.39300537]
[202.02766418 92.65497589]
[197.72338867 107.68851471]
[184.73388672 116.39523315]
[169.19242859 114.66409302]
[158.43719482 103.31248474]
[143.47590637 104.38955688]
[128.51463318 105.46662903]
[113.55335236 106.54370117]
[111.94885254 113.87006378]
[108.73985291 128.52278137]
[107.13535309 135.84915161]
[120.27698517 143.08085632]
[133.41862488 150.31254578]
[150.21044922 152.65156555]
[152.61128235 169.43466187]
[137.14869690 176.38769531]
[126.18692017 163.45417786]
[113.04528809 156.22248840]
[99.90365601 148.99078369]
[86.99095917 156.62374878]
[86.99095917 171.62374878]
[86.99095917 186.62374878]
[86.99095917 201.62374878]
[86.99095917 216.62374878]
[86.99095917 231.62374878]
[86.99095917 246.62374878]
[86.99095917 261.62374878]
[86.99095917 276.62374878]
[86.99095917 291.62374878]
[101.60096741 295.36517334]
[114.82112885 302.62316895]
[125.82040405 312.94143677]
[133.90736389 325.67138672]
[138.57366943 340.01281738]
[139.52598572 355.06417847]
[136.70445251 369.87936401]
[130.28642273 383.52706909]
[120.67535400 395.14938354]
[108.47540283 404.01571655]
[94.45345306 409.56872559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 105]
[23 104]
[24 103]
[25 102]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[33 90]
[34 89]
[35 88]
[37 47]
[38 46]
[39 45]
[40 44]
[50 65]
[51 64]
[52 63]
[66 86]
[67 85]
[68 84]
[69 83]
[106 120]
[107 119]
[108 118]
[109 117]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
