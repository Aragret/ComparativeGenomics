%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUAACCGGGGGGGGGGAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCxxxxxxxxxxACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCCCCCCCCCCCAUCCUAACC\
) } def
/len { sequence length } bind def

/coor [
[82.96923065 407.04284668]
[69.12329865 401.02682495]
[57.41463470 391.49740601]
[48.71210861 379.16174316]
[43.66150665 364.93521118]
[42.63761520 349.87353516]
[45.71641541 335.09436035]
[52.66943741 321.69445801]
[62.98072052 310.66812134]
[75.88510132 302.83361816]
[90.42498779 298.77230835]
[90.42498779 283.77230835]
[90.42498779 268.77230835]
[90.42498779 253.77229309]
[90.42498779 238.77229309]
[90.42498779 223.77229309]
[90.42498779 208.77229309]
[90.42498779 193.77229309]
[90.42498779 178.77229309]
[90.42498779 163.77229309]
[90.42498779 148.77229309]
[90.42498779 133.77229309]
[84.77548981 128.83943176]
[74.90959167 140.13829041]
[63.61088943 130.27221680]
[73.47647858 118.97370911]
[67.82698059 114.04084778]
[52.96393204 116.06317902]
[38.10088730 118.08551788]
[23.23783875 120.10784912]
[16.01180649 133.83972168]
[2.07958245 140.67146301]
[-13.20161057 137.97613525]
[-23.95584297 126.79016113]
[-26.04788971 111.41475677]
[-18.67331886 97.76209259]
[-4.66780281 91.08188629]
[10.58325291 93.94281769]
[21.21550369 105.24480438]
[36.07855225 103.22246552]
[50.94159698 101.20013428]
[65.80464172 99.17780304]
[74.64097595 83.79606628]
[88.51962280 76.69114685]
[101.89811707 78.21105957]
[108.24524689 64.62010956]
[110.11286163 49.73683167]
[107.32053375 34.99902725]
[104.52821350 20.26121902]
[101.73588562 5.52341366]
[98.94355774 -9.21439266]
[94.24334717 -17.12386894]
[96.24979401 -24.28765297]
[93.76467896 -39.08036041]
[91.27955627 -53.87306976]
[88.79444122 -68.66577148]
[86.30931854 -83.45848083]
[71.26664734 -84.10014343]
[56.68620682 -87.85571289]
[43.20537949 -94.56101990]
[31.41350174 -103.92292023]
[21.82605553 -115.53216553]
[14.86216640 -128.88124084]
[10.82626629 -143.38659668]
[9.89478493 -158.41410828]
[12.10844517 -173.30683899]
[17.37047386 -187.41374207]
[25.45083809 -200.11811829]
[35.99629974 -210.86460876]
[48.54585266 -219.18341064]
[62.55089188 -224.71084595]
[77.39916992 -227.20530701]
[92.44158936 -226.55772400]
[107.02055359 -222.79641724]
[120.49874115 -216.08581543]
[132.28694153 -206.71926880]
[141.86981201 -195.10624695]
[148.82844543 -181.75444031]
[152.85864258 -167.24749756]
[153.78421021 -152.21961975]
[151.56469727 -137.32775879]
[146.29711914 -123.22293091]
[138.21176147 -110.52172852]
[127.66206360 -99.77938843]
[115.10923767 -91.46553040]
[101.10202789 -85.94360352]
[103.58715057 -71.15089417]
[106.07226562 -56.35818481]
[108.55738068 -41.56547928]
[111.04250336 -26.77277184]
[113.68136597 -12.00671673]
[116.47369385 2.73108935]
[119.26601410 17.46889496]
[122.05834198 32.20669937]
[124.85066223 46.94450760]
[130.37261963 32.99789429]
[138.46241760 20.36637878]
[148.82078552 9.51722240]
[161.06455994 0.85176164]
[174.74078369 -5.30944967]
[189.34358215 -8.73849392]
[204.33274841 -9.30852413]
[219.15380859 -6.99845362]
[233.25848389 -1.89373672]
[246.12501526 5.81679201]
[257.27743530 15.84790325]
[266.30322266 27.82852364]
[272.86846924 41.31546402]
[276.73031616 55.80981445]
[277.74591064 70.77539062]
[275.87765503 85.65859222]
[271.19470215 99.90885162]
[263.87026978 112.99902344]
[254.17529297 124.44487000]
[242.46841431 133.82298279]
[229.18269348 140.78645325]
[214.80961609 145.07768250]
[199.88087463 146.53791809]
[184.94868469 145.11315918]
[170.56544495 140.85610962]
[157.26322937 133.92424011]
[145.53408813 124.57396698]
[135.81193542 113.15119934]
[128.45640564 100.07846832]
[123.73960114 85.83937836]
[121.83619690 70.96723938]
[115.48906708 84.55818939]
[126.66893768 108.65544128]
[105.42498779 133.77229309]
[105.42498779 148.77229309]
[105.42498779 163.77229309]
[105.42498779 178.77229309]
[105.42498779 193.77229309]
[105.42498779 208.77229309]
[105.42498779 223.77229309]
[105.42498779 238.77229309]
[105.42498779 253.77229309]
[105.42498779 268.77230835]
[105.42498779 283.77230835]
[105.42498779 298.77230835]
[119.96487427 302.83361816]
[132.86926270 310.66812134]
[143.18054199 321.69445801]
[150.13356018 335.09436035]
[153.21235657 349.87353516]
[152.18847656 364.93521118]
[147.13786316 379.16174316]
[138.43534851 391.49740601]
[126.72668457 401.02682495]
[112.88074493 407.04284668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 42]
[28 41]
[29 40]
[30 39]
[45 127]
[46 126]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
