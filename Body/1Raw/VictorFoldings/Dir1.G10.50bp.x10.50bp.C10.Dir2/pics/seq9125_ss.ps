%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCACUGCUGGGGGGGGGGUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUxxxxxxxxxxGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACCCCCCCCCCCAAGAACUGCU\
) } def
/len { sequence length } bind def

/coor [
[102.77838898 421.80575562]
[88.75644684 416.25274658]
[76.55648804 407.38641357]
[66.94541931 395.76409912]
[60.52738953 382.11639404]
[57.70585251 367.30120850]
[58.65816879 352.24984741]
[63.32447433 337.90841675]
[71.41144562 325.17846680]
[82.41071320 314.86019897]
[95.63087463 307.60220337]
[110.24089050 303.86077881]
[110.24089050 288.86077881]
[110.24089050 273.86077881]
[110.24089050 258.86077881]
[110.24089050 243.86077881]
[110.24089050 228.86077881]
[110.24089050 213.86077881]
[110.24089050 198.86077881]
[110.24089050 183.86077881]
[110.24089050 168.86077881]
[110.24089050 153.86077881]
[99.12608337 154.56234741]
[88.15130615 153.00477600]
[77.76881409 149.27362061]
[68.40211487 143.54350281]
[60.42870331 136.07014465]
[54.16488266 127.17896271]
[49.85319519 117.25092316]
[47.65311432 106.70627594]
[47.63522339 95.98674774]
[49.77913284 85.53704071]
[53.97520828 75.78637695]
[60.02997589 67.13088989]
[67.67494965 59.91754150]
[76.57849121 54.43018341]
[86.36016083 50.87847900]
[84.51683044 35.99217224]
[82.67350769 21.10586357]
[80.83018494 6.21955538]
[78.98686218 -8.66675186]
[76.99079895 -23.53335190]
[70.97516632 -9.79245758]
[60.89046097 1.31153560]
[47.79044724 8.61835575]
[33.04396439 11.36450100]
[18.19190216 9.26302338]
[4.78617096 2.53350949]
[-5.77244282 -8.12086391]
[-12.38065243 -21.58680534]
[-14.34795666 -36.45723724]
[-11.46878815 -51.17832184]
[-4.04399586 -64.21183777]
[7.15059233 -74.19588470]
[20.94523621 -80.08721161]
[35.89850998 -81.27024078]
[50.44792938 -77.62133789]
[63.07319641 -69.52178955]
[72.45507812 -57.81793594]
[77.61315155 -43.73321152]
[80.67154694 -58.41810989]
[83.72994232 -73.10300446]
[86.78833771 -87.78790283]
[89.84673309 -102.47280121]
[92.90512848 -117.15769958]
[94.90119171 -132.02429199]
[95.82460022 -146.99584961]
[96.74801636 -161.96739197]
[97.67143250 -176.93894958]
[83.67164612 -182.70825195]
[72.30535889 -192.71255493]
[64.80548096 -205.86666870]
[61.98554611 -220.74371338]
[64.15145111 -235.72996521]
[71.06823730 -249.19981384]
[81.98564148 -259.69213867]
[95.71941376 -266.06884766]
[110.77981567 -267.63818359]
[125.53321838 -264.22998047]
[138.37927246 -256.21389771]
[147.92454529 -244.45947266]
[153.13362122 -230.24172974]
[153.44146729 -215.10290527]
[148.81469727 -200.68515015]
[139.75518799 -188.55239868]
[127.24562836 -180.02070618]
[112.64298248 -176.01553345]
[111.71956635 -161.04399109]
[110.79615021 -146.07243347]
[109.87274170 -131.10089111]
[121.35627747 -140.75119019]
[136.35514832 -140.93492126]
[148.07165527 -131.56883240]
[151.19567871 -116.89775085]
[144.31138611 -103.57084656]
[130.53881836 -97.62805939]
[116.11993408 -101.76274872]
[107.59002686 -114.09930420]
[104.53163147 -99.41440582]
[101.47323608 -84.72950745]
[98.41484070 -70.04460907]
[95.35644531 -55.35971451]
[92.29804993 -40.67481613]
[91.83612823 -25.68193054]
[95.93209839 -19.47426033]
[93.87316895 -10.51007652]
[95.71649170 4.37623119]
[97.55981445 19.26253891]
[99.40313721 34.14884567]
[101.24646759 49.03515244]
[111.31401825 49.93274689]
[121.07441711 52.81294250]
[130.13848877 57.58918381]
[138.13934326 64.09877777]
[144.74716187 72.10834503]
[149.68278503 81.32212067]
[152.72944641 91.39283752]
[153.74209595 101.93477631]
[152.65419006 112.53858185]
[149.48124695 122.78710938]
[144.32138062 132.27188110]
[157.88327026 138.68086243]
[171.44517517 145.08984375]
[187.73574829 143.20590210]
[197.29400635 156.53152466]
[190.28721619 171.35841370]
[173.92337036 172.43397522]
[165.03619385 158.65173340]
[151.47430420 152.24275208]
[137.91239929 145.83378601]
[125.24089050 153.86077881]
[125.24089050 168.86077881]
[125.24089050 183.86077881]
[125.24089050 198.86077881]
[125.24089050 213.86077881]
[125.24089050 228.86077881]
[125.24089050 243.86077881]
[125.24089050 258.86077881]
[125.24089050 273.86077881]
[125.24089050 288.86077881]
[125.24089050 303.86077881]
[139.85090637 307.60220337]
[153.07106018 314.86019897]
[164.07032776 325.17846680]
[172.15730286 337.90841675]
[176.82360840 352.24984741]
[177.77592468 367.30120850]
[174.95439148 382.11639404]
[168.53636169 395.76409912]
[158.92529297 407.38641357]
[146.72532654 416.25274658]
[132.70338440 421.80575562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[37 110]
[38 109]
[39 108]
[40 107]
[41 106]
[42 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
[65 98]
[66 90]
[67 89]
[68 88]
[69 87]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
