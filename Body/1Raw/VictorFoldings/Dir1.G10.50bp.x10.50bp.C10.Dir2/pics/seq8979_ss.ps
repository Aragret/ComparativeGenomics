%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAAUCCUGGGGGGGGGGAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUxxxxxxxxxxACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCACCCCCCCCCCGGAUACUCCU\
) } def
/len { sequence length } bind def

/coor [
[97.71751404 609.47717285]
[83.87157440 603.46118164]
[72.16291046 593.93176270]
[63.46038818 581.59606934]
[58.40978622 567.36956787]
[57.38589478 552.30786133]
[60.46469498 537.52868652]
[67.41771698 524.12878418]
[77.72900391 513.10241699]
[90.63338470 505.26794434]
[105.17327118 501.20663452]
[105.17327118 486.20663452]
[105.17327118 471.20663452]
[105.17327118 456.20663452]
[105.17327118 441.20663452]
[105.17327118 426.20663452]
[105.17327118 411.20663452]
[105.17327118 396.20663452]
[105.17327118 381.20663452]
[105.17327118 366.20663452]
[89.18878174 362.21688843]
[74.74706268 354.26721191]
[62.81104279 342.88165283]
[54.17811966 328.81350708]
[49.42687988 312.99563599]
[48.87833405 296.47842407]
[52.57421875 280.36010742]
[60.27388000 265.71377563]
[71.46993256 253.51588440]
[85.42169952 244.58114624]
[101.20420074 239.50819397]
[100.26856995 224.53741455]
[99.33294678 209.56661987]
[98.39731598 194.59582520]
[87.09367371 184.96446228]
[85.93154907 169.79527283]
[96.11045837 158.00427246]
[95.17482758 143.03347778]
[94.23919678 128.06269836]
[81.00611877 121.44607544]
[72.83900452 109.10944366]
[71.91616058 94.34318542]
[78.48371887 81.08568573]
[90.79000854 72.87293243]
[89.85437775 57.90214157]
[88.91875458 42.93135071]
[87.98312378 27.96055984]
[85.35834503 24.31748390]
[84.18917847 20.41823959]
[84.37232971 16.76470184]
[85.64826965 13.77038479]
[87.64510345 11.71612167]
[87.95716095 -3.28063154]
[76.86190033 6.81368589]
[61.88197327 7.58939171]
[49.80342865 -1.30491686]
[46.09796524 -15.84003067]
[52.44419479 -29.43140221]
[65.96721649 -35.92200470]
[80.54096222 -32.37153244]
[89.56351471 -20.38800240]
[92.04862976 -35.18070984]
[94.53375244 -49.97341537]
[97.01886749 -64.76612091]
[88.11934662 -77.55034637]
[90.85034180 -92.51685333]
[103.09298706 -100.92240143]
[105.57810211 -115.71510315]
[108.06322479 -130.50781250]
[110.54833984 -145.30052185]
[97.12569427 -152.27818298]
[86.51765442 -163.06356812]
[79.76350403 -176.60006714]
[77.52492523 -191.56147766]
[80.02124786 -206.48205566]
[87.00789642 -219.90002441]
[97.80039978 -230.50082397]
[111.34141541 -237.24591064]
[126.30432892 -239.47445679]
[141.22322083 -236.96813965]
[154.63650513 -229.97250366]
[165.23008728 -219.17289734]
[171.96609497 -205.62736511]
[174.18461609 -190.66296387]
[171.66830444 -175.74575806]
[164.66366577 -162.33715820]
[153.85697937 -151.75082397]
[140.30693054 -145.02389526]
[125.34104919 -142.81539917]
[122.85592651 -128.02268982]
[120.37081146 -113.22998810]
[117.88568878 -98.43727875]
[126.70957947 -86.49263763]
[124.40004730 -71.45532227]
[111.81157684 -62.28100586]
[109.32645416 -47.48829651]
[106.84133911 -32.69559097]
[104.35621643 -17.90288353]
[102.95391846 -2.96857548]
[102.64186096 12.02817822]
[102.95391846 27.02493286]
[103.88954163 41.99572372]
[104.82517242 56.96651459]
[105.76080322 71.93730927]
[118.99388123 78.55392456]
[127.16099548 90.89055634]
[128.08384705 105.65681458]
[121.51628113 118.91431427]
[109.20999146 127.12706757]
[110.14562225 142.09785461]
[111.08124542 157.06864929]
[122.64901733 167.50054932]
[123.38461304 182.69638062]
[113.36811066 193.66020203]
[114.30373383 208.63098145]
[115.23936462 223.60177612]
[116.17499542 238.57257080]
[129.60528564 240.77885437]
[142.26399231 245.76054382]
[153.58477783 253.29176331]
[163.06181335 263.03265381]
[170.27233887 274.54467773]
[174.89556885 287.31042480]
[176.72692871 300.75677490]
[175.68710327 314.28070068]
[171.82548523 327.27633667]
[165.31781006 339.16198730]
[156.45820618 349.40628052]
[145.64585876 357.55197144]
[133.36705017 363.23614502]
[120.17327118 366.20663452]
[120.17327118 381.20663452]
[120.17327118 396.20663452]
[120.17327118 411.20663452]
[120.17327118 426.20663452]
[120.17327118 441.20663452]
[120.17327118 456.20663452]
[120.17327118 471.20663452]
[120.17327118 486.20663452]
[120.17327118 501.20663452]
[134.71315002 505.26794434]
[147.61753845 513.10241699]
[157.92881775 524.12878418]
[164.88183594 537.52868652]
[167.96064758 552.30786133]
[166.93675232 567.36956787]
[161.88615417 581.59606934]
[153.18362427 593.93176270]
[141.47496033 603.46118164]
[127.62902069 609.47717285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 117]
[32 116]
[33 115]
[34 114]
[37 111]
[38 110]
[39 109]
[44 104]
[45 103]
[46 102]
[47 101]
[52 100]
[53 99]
[61 98]
[62 97]
[63 96]
[64 95]
[67 92]
[68 91]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
