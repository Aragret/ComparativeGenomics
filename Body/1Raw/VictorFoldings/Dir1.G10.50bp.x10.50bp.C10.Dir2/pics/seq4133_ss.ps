%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCACCAGGGGGGGGGGCUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACxxxxxxxxxxACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCCCCCCCCCCCUCCCUCACCA\
) } def
/len { sequence length } bind def

/coor [
[83.05908966 365.24737549]
[69.57020569 358.51583862]
[58.08470535 348.75128174]
[49.27033615 336.52139282]
[43.63955688 322.53720093]
[41.51972580 307.61172485]
[43.03409576 292.61270142]
[48.09461975 278.41220093]
[56.40708542 265.83578491]
[67.48821259 255.61462402]
[80.69377136 248.34298706]
[95.25599670 244.44361877]
[94.94801331 229.44677734]
[94.64003754 214.44993591]
[94.33206177 199.45310974]
[94.02408600 184.45626831]
[93.71611023 169.45942688]
[93.40812683 154.46258545]
[93.10015106 139.46574402]
[92.79217529 124.46891022]
[92.48419952 109.47207642]
[84.02709198 121.86067200]
[71.09207153 129.45574951]
[56.15285873 130.80479431]
[42.06647491 125.64981842]
[31.52684402 114.97666931]
[26.54959297 100.82650757]
[28.08658791 85.90546417]
[35.84389114 73.06707001]
[48.33796692 64.76658630]
[63.17942047 62.59142303]
[77.52992249 66.95755768]
[88.64503479 77.03000641]
[94.39932251 90.88381958]
[97.75857544 76.26481628]
[101.11783600 61.64580536]
[104.47709656 47.02679825]
[90.11885834 42.66540909]
[76.09573364 37.32381058]
[62.47454834 31.02746773]
[49.32020950 23.80638123]
[36.69541168 15.69496536]
[24.66031075 6.73187208]
[13.27226353 -3.04018283]
[2.58554006 -13.57463169]
[-7.34893274 -24.82127190]
[-16.48381233 -36.72650528]
[-24.77556610 -49.23360443]
[-32.18468094 -62.28295898]
[-38.67584610 -75.81238556]
[-44.21813202 -89.75741577]
[-48.78512192 -104.05158234]
[-52.35505676 -118.62677765]
[-54.91091919 -133.41352844]
[-56.44053650 -148.34140015]
[-56.93661118 -163.33921814]
[-56.39678192 -178.33552551]
[-54.82361984 -193.25885010]
[-52.22462845 -208.03808594]
[-48.61218643 -222.60281372]
[-44.00351334 -236.88359070]
[-38.42056656 -250.81239319]
[-31.88995552 -264.32281494]
[-24.44280243 -277.35049438]
[-16.11459351 -289.83334351]
[-6.94502020 -301.71188354]
[3.02222276 -312.92950439]
[13.73963547 -323.43273926]
[25.15614319 -333.17150879]
[37.21734238 -342.09945679]
[49.86575317 -350.17401123]
[63.04110336 -357.35668945]
[76.68060303 -363.61325073]
[90.71924591 -368.91390991]
[105.09014893 -373.23339844]
[119.72481537 -376.55111694]
[134.55349731 -378.85128784]
[149.50553894 -380.12289429]
[164.50968933 -380.35992432]
[179.49444580 -379.56121826]
[194.38838196 -377.73059082]
[209.12054443 -374.87680054]
[223.62071228 -371.01339722]
[237.81977844 -366.15881348]
[251.65010071 -360.33618164]
[265.04574585 -353.57324219]
[277.94290161 -345.90225220]
[290.28009033 -337.35974121]
[301.99850464 -327.98641968]
[313.04232788 -317.82696533]
[323.35891724 -306.92977905]
[332.89913940 -295.34680176]
[341.61746216 -283.13323975]
[349.47241211 -270.34729004]
[356.42651367 -257.04986572]
[362.44662476 -243.30436707]
[367.50408936 -229.17628479]
[371.57476807 -214.73294067]
[374.63928223 -200.04316711]
[376.68304443 -185.17697144]
[377.69628906 -170.20520020]
[377.67419434 -155.19920349]
[376.61685181 -140.23046875]
[374.52932739 -125.37036133]
[371.42156982 -110.68968201]
[367.30834961 -96.25838470]
[362.20932007 -82.14525604]
[356.14871216 -68.41754913]
[349.15548706 -55.14067459]
[341.26293945 -42.37791061]
[332.50866699 -30.19007492]
[322.93438721 -18.63525009]
[312.58572388 -7.76850176]
[301.51202393 2.35838604]
[289.76605225 11.69715405]
[277.40377808 20.20329666]
[264.48406982 27.83628082]
[251.06857300 34.55972672]
[237.22117615 40.34160233]
[223.00785828 45.15434265]
[208.49638367 48.97502136]
[193.75587463 51.78542709]
[178.85661316 53.57217026]
[163.86956787 54.32673264]
[148.86618042 54.04552078]
[133.91795349 52.72987366]
[119.09609985 50.38605881]
[115.73684692 65.00506592]
[112.37758636 79.62407684]
[109.01832581 94.24308014]
[107.48103333 109.16410065]
[107.78900909 124.16093445]
[108.09699249 139.15777588]
[108.40496826 154.15461731]
[108.71294403 169.15144348]
[109.02091980 184.14828491]
[109.32890320 199.14512634]
[109.63687897 214.14196777]
[109.94485474 229.13879395]
[110.25283051 244.13563538]
[124.96286774 247.43386841]
[138.45582581 254.15722656]
[149.94725037 263.91482544]
[158.76902771 276.13937378]
[164.40827942 290.12014771]
[166.53715515 305.04434204]
[165.03189087 320.04425049]
[159.97998047 334.24783325]
[151.67514038 346.82928467]
[140.60020447 357.05715942]
[127.39905548 364.33679199]
[112.83920288 368.24499512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[34 130]
[35 129]
[36 128]
[37 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
