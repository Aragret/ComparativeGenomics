%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCUUCGGGGGGGGGGGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACCCCCCCCCCCAACCCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[69.93895721 475.12582397]
[56.09302139 469.10980225]
[44.38435745 459.58038330]
[35.68183517 447.24472046]
[30.63123322 433.01818848]
[29.60734177 417.95651245]
[32.68614197 403.17733765]
[39.63916016 389.77740479]
[49.95044708 378.75106812]
[62.85482788 370.91656494]
[77.39471436 366.85525513]
[77.39471436 351.85525513]
[77.39471436 336.85525513]
[77.39471436 321.85525513]
[77.39471436 306.85525513]
[77.39471436 291.85525513]
[77.39471436 276.85525513]
[77.39471436 261.85525513]
[77.39471436 246.85525513]
[77.39471436 231.85525513]
[77.39471436 216.85525513]
[75.11302948 214.08734131]
[74.09363556 210.05465698]
[74.92607880 205.37925720]
[77.89196777 200.92694092]
[78.82759094 185.95614624]
[65.83431244 193.45112610]
[51.79676056 188.16462708]
[46.97525024 173.96064758]
[54.89391327 161.22114563]
[69.76484680 159.25767517]
[80.71836853 169.50474548]
[83.20348358 154.71205139]
[85.68860626 139.91934204]
[88.17372131 125.12663269]
[90.65884399 110.33392334]
[81.89263153 98.16208649]
[67.07487488 95.83098602]
[52.25711823 93.49987793]
[37.15608215 99.89447021]
[24.23249626 89.79927063]
[26.78103638 73.59936523]
[42.17998505 67.95982361]
[54.58822250 78.68212128]
[69.40598297 81.01322174]
[84.22373962 83.34432983]
[90.61356354 87.38976288]
[95.76622009 92.63055420]
[101.54248810 78.78733826]
[107.31876373 64.94411469]
[101.55158234 50.47423935]
[107.60674286 36.51753235]
[121.43710327 31.10858154]
[127.21337891 17.26536369]
[132.98965454 3.42214561]
[119.80158234 -3.75272965]
[107.42115021 -12.24560642]
[95.97959900 -21.96645546]
[85.59820557 -32.81222916]
[76.38703918 -44.66796112]
[68.44371796 -57.40796661]
[61.85246658 -70.89720154]
[56.68314362 -84.99266052]
[52.99055099 -99.54494476]
[50.81383133 -114.39977264]
[50.17606354 -129.39967346]
[51.08399963 -144.38566589]
[53.52802277 -159.19885254]
[57.48221970 -173.68223572]
[62.90467453 -187.68228149]
[69.73790741 -201.05055237]
[77.90948486 -213.64537048]
[87.33278656 -225.33320618]
[97.90790558 -235.99017334]
[109.52275085 -245.50328064]
[122.05419922 -253.77171326]
[135.36940002 -260.70779419]
[149.32722473 -266.23800659]
[163.77969360 -270.30374146]
[178.57360840 -272.86187744]
[193.55215454 -273.88531494]
[208.55653381 -273.36318970]
[223.42768860 -271.30105591]
[238.00801086 -267.72076416]
[252.14289856 -262.66024780]
[265.68255615 -256.17318726]
[278.48339844 -248.32830811]
[290.40979004 -239.20880127]
[301.33526611 -228.91133118]
[311.14404297 -217.54505920]
[319.73208618 -205.23046875]
[327.00842285 -192.09809875]
[332.89587402 -178.28717041]
[337.33206177 -163.94407654]
[340.26992798 -149.22085571]
[341.67834473 -134.27360535]
[341.54238892 -119.26076508]
[339.86349487 -104.34146881]
[336.65945435 -89.67387390]
[331.96426392 -75.41347504]
[325.82763672 -61.71143341]
[318.31466675 -48.71299744]
[309.50500488 -36.55595779]
[299.49200439 -25.36919022]
[288.38180542 -15.27127457]
[276.29223633 -6.36925840]
[263.35137939 1.24249303]
[249.69647217 7.48329067]
[235.47224426 12.28697872]
[220.82948303 15.60263538]
[205.92341614 17.39511299]
[190.91203308 17.64540863]
[175.95449829 16.35087204]
[161.20933533 13.52522373]
[146.83287048 9.19841766]
[141.05659485 23.04163551]
[135.28031921 36.88485336]
[141.16432190 50.51988983]
[135.50355530 64.64116669]
[121.16197968 70.72039032]
[115.38571167 84.56360626]
[109.60943604 98.40682220]
[105.45154572 112.81903839]
[102.96643066 127.61174774]
[100.48130798 142.40444946]
[97.99619293 157.19715881]
[95.51107788 171.98986816]
[93.79838562 186.89176941]
[92.86275482 201.86256409]
[92.39471436 216.85525513]
[92.39471436 231.85525513]
[92.39471436 246.85525513]
[92.39471436 261.85525513]
[92.39471436 276.85525513]
[92.39471436 291.85525513]
[92.39471436 306.85525513]
[92.39471436 321.85525513]
[92.39471436 336.85525513]
[92.39471436 351.85525513]
[92.39471436 366.85525513]
[106.93460083 370.91656494]
[119.83898163 378.75106812]
[130.15026855 389.77740479]
[137.10328674 403.17733765]
[140.18208313 417.95651245]
[139.15820312 433.01818848]
[134.10758972 447.24472046]
[125.40506744 459.58038330]
[113.69641113 469.10980225]
[99.85047150 475.12582397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 129]
[26 128]
[32 127]
[33 126]
[34 125]
[35 124]
[36 123]
[37 46]
[38 45]
[39 44]
[48 122]
[49 121]
[50 120]
[53 117]
[54 116]
[55 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
