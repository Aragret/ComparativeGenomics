%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUCGAAGGGGGGGGGGGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUxxxxxxxxxxACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAACCCCCCCCCCGGCUUAGAAG\
) } def
/len { sequence length } bind def

/coor [
[91.48336792 434.08859253]
[78.61009979 426.18572998]
[68.48580170 414.97521973]
[61.93122101 401.36587524]
[59.47769928 386.46093750]
[61.32413483 371.46871948]
[67.32084656 357.60449219]
[76.98171234 345.99224854]
[89.52355957 337.57330322]
[103.92967987 333.03015137]
[103.61762238 318.03338623]
[103.30556488 303.03662109]
[102.99350739 288.03988647]
[102.68144989 273.04312134]
[102.36940002 258.04635620]
[102.05734253 243.04962158]
[101.74528503 228.05285645]
[101.43322754 213.05610657]
[101.12117004 198.05935669]
[90.22796631 187.96611023]
[89.69786072 172.76171875]
[100.35844421 161.40435791]
[92.35804749 148.84080505]
[99.80657196 134.88264465]
[99.49452209 119.88589478]
[87.60214233 110.74415588]
[73.02943420 114.29891968]
[58.45673370 117.85368347]
[46.88329697 128.64099121]
[32.68496323 124.14026642]
[18.72991943 133.76799011]
[5.61530924 123.02353668]
[12.30938339 107.44708252]
[29.13020134 109.56756592]
[39.66130066 99.03450775]
[54.90197372 103.28098297]
[69.47467804 99.72621918]
[84.04737854 96.17145538]
[94.59867096 85.50982666]
[98.00164795 70.90093994]
[101.40462494 56.29204559]
[104.80760193 41.68315125]
[90.75215912 46.92189789]
[77.78443909 39.38278961]
[75.38278961 24.57629967]
[85.30263519 13.32477856]
[100.29335785 13.85217571]
[109.39782715 25.77236366]
[114.29937744 11.59580612]
[119.20092773 -2.58075237]
[115.27101898 -20.54003143]
[128.90101624 -31.55016708]
[133.50657654 -45.82562637]
[138.11215210 -60.10108948]
[142.71771240 -74.37654877]
[147.32327271 -88.65200806]
[133.65039062 -94.86086273]
[120.77439117 -102.58786011]
[108.86315918 -111.73227692]
[98.07197571 -122.17488098]
[88.54152679 -133.77955627]
[80.39605713 -146.39498901]
[73.74176788 -159.85671997]
[68.66540527 -173.98924255]
[65.23315430 -188.60832214]
[63.48976135 -203.52336121]
[63.45795059 -218.53990173]
[65.13813782 -233.46220398]
[68.50842285 -248.09568787]
[73.52485657 -262.24960327]
[80.12205505 -275.73937988]
[88.21399689 -288.38922119]
[97.69519043 -300.03417969]
[108.44203949 -310.52239990]
[120.31441498 -319.71719360]
[133.15756226 -327.49868774]
[146.80401611 -333.76541138]
[161.07589722 -338.43566895]
[175.78712463 -341.44857788]
[190.74589539 -342.76489258]
[205.75721741 -342.36737061]
[220.62538147 -340.26129150]
[235.15653992 -336.47402954]
[249.16125488 -331.05499268]
[262.45693970 -324.07485962]
[274.87026978 -315.62457275]
[286.23941040 -305.81436157]
[296.41610718 -294.77206421]
[305.26773071 -282.64166260]
[312.67889404 -269.58132935]
[318.55291748 -255.76129150]
[322.81326294 -241.36172485]
[325.40438843 -226.57038879]
[326.29248047 -211.58009338]
[325.46600342 -196.58625793]
[322.93569946 -181.78439331]
[318.73458862 -167.36744690]
[312.91741943 -153.52337646]
[305.56002808 -140.43267822]
[296.75833130 -128.26600647]
[286.62707520 -117.18196869]
[275.29837036 -107.32509613]
[262.91989136 -98.82386780]
[249.65299988 -91.78912354]
[235.67068481 -86.31258392]
[221.15521240 -82.46563721]
[206.29585266 -80.29843140]
[191.28628540 -79.83923340]
[176.32221985 -81.09402466]
[161.59873962 -84.04644775]
[156.99316406 -69.77098846]
[152.38760376 -55.49552536]
[147.78204346 -41.22006226]
[143.17648315 -26.94460297]
[148.41690063 -15.99721718]
[144.64749146 -4.03851938]
[133.37748718 2.32079840]
[128.47593689 16.49735641]
[123.57437897 30.67391396]
[119.41649628 45.08613205]
[116.01351929 59.69502258]
[112.61054230 74.30391693]
[109.20755768 88.91281128]
[119.37561035 100.54029083]
[114.49127197 119.57383728]
[114.80332947 134.57058716]
[122.82604980 148.20681763]
[115.35520172 161.09230042]
[126.47900391 171.99636841]
[126.58184052 187.20965576]
[116.11792755 197.74729919]
[116.42998505 212.74404907]
[116.74203491 227.74079895]
[117.05409241 242.73756409]
[117.36614990 257.73431396]
[117.67820740 272.73107910]
[117.99026489 287.72781372]
[118.30232239 302.72457886]
[118.61437225 317.72131348]
[118.92642975 332.71807861]
[133.50907898 336.65805054]
[146.39027405 344.54797363]
[156.52583313 355.74829102]
[163.09408569 369.35104370]
[165.56257629 384.25350952]
[163.73120117 399.24758911]
[157.74841309 413.11782837]
[148.09922791 424.73977661]
[135.56584167 433.17132568]
[121.16429901 437.72894287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[22 128]
[24 126]
[25 125]
[26 38]
[27 37]
[28 36]
[30 34]
[39 123]
[40 122]
[41 121]
[42 120]
[48 119]
[49 118]
[50 117]
[52 114]
[53 113]
[54 112]
[55 111]
[56 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
