%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAAAAUUUGGGGGGGGGGCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAxxxxxxxxxxUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUCCCCCCCCCCAUUAAUAAUUU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 369.78857422]
[71.01555634 364.23556519]
[58.81560135 355.36923218]
[49.20452881 343.74691772]
[42.78650284 330.09921265]
[39.96496582 315.28402710]
[40.91728210 300.23263550]
[45.58358765 285.89123535]
[53.67055511 273.16125488]
[64.66983032 262.84298706]
[77.88998413 255.58502197]
[92.50000000 251.84358215]
[92.50000000 236.84358215]
[92.50000000 221.84358215]
[92.50000000 206.84358215]
[92.50000000 191.84358215]
[92.50000000 176.84358215]
[92.50000000 161.84358215]
[92.50000000 146.84358215]
[92.50000000 131.84358215]
[92.50000000 116.84358215]
[79.74674225 108.94709778]
[66.31929016 115.63317108]
[57.41469574 128.71058655]
[42.57289886 127.45747375]
[31.08937454 139.93003845]
[15.92528152 132.34805298]
[19.01312828 115.67767334]
[35.88682556 114.03002167]
[43.83099747 101.43083954]
[59.63321686 102.20572662]
[73.06066895 95.51964569]
[72.67583466 88.02952576]
[71.90617371 73.04928589]
[71.52134705 65.55916595]
[57.47937012 60.28442383]
[43.43739319 55.00968170]
[29.39541817 49.73494339]
[15.35344219 44.46020126]
[1.31146538 39.18545914]
[-12.73051071 33.91071701]
[-24.11218452 44.14380646]
[-38.94856262 47.90418625]
[-53.83035278 44.32775116]
[-65.33782959 34.23634338]
[-70.82666016 19.94889069]
[-69.03555298 4.74854469]
[-60.37608337 -7.87176514]
[-46.83814240 -15.01198387]
[-31.53264618 -15.03134155]
[-17.97668648 -7.92539072]
[-9.28532410 4.67297411]
[-7.45576954 19.86874008]
[6.58620691 25.14348221]
[20.62818336 30.41822433]
[34.67015839 35.69296646]
[48.71213531 40.96770859]
[62.75411224 46.24244690]
[76.79608917 51.51718903]
[98.64698792 69.02185822]
[102.90477753 92.26132202]
[107.42588806 77.09985352]
[121.94915009 73.79466248]
[132.71781921 63.35265350]
[143.48651123 52.91064453]
[147.50228882 44.63602829]
[154.58511353 42.36761856]
[165.56591797 32.14891434]
[176.54672241 21.93020439]
[187.52752686 11.71149826]
[180.55569458 -1.03991115]
[176.85324097 -15.08346367]
[176.63255310 -29.59572029]
[179.90200806 -43.72689438]
[186.46571350 -56.65060043]
[195.93531799 -67.61219788]
[207.75288391 -75.97283173]
[221.22387695 -81.24669647]
[235.55786133 -83.12923431]
[249.91496277 -81.51472473]
[263.45507812 -76.50223541]
[275.38693237 -68.38951874]
[286.57522583 -78.38061523]
[297.76354980 -88.37171936]
[308.95184326 -98.36281586]
[305.93380737 -113.35743713]
[310.79431152 -127.75439453]
[322.13311768 -137.71922302]
[336.83892822 -140.65097046]
[350.94271851 -135.86047363]
[362.13101196 -145.85156250]
[373.31930542 -155.84266663]
[384.50759888 -165.83375549]
[395.69589233 -175.82485962]
[398.03323364 -191.69673157]
[411.97158813 -199.64041138]
[426.81863403 -193.56216431]
[431.18499756 -178.12474060]
[421.72116089 -165.17036438]
[405.68698120 -164.63656616]
[394.49868774 -154.64546204]
[383.31039429 -144.65437317]
[372.12210083 -134.66326904]
[360.93380737 -124.67217255]
[364.10440063 -110.11837769]
[359.53408813 -95.83663177]
[348.35491943 -85.69303131]
[333.50192261 -82.48593140]
[318.94293213 -87.17451477]
[307.75463867 -77.18341827]
[296.56634521 -67.19232178]
[285.37805176 -57.20122528]
[292.47354126 -43.40629959]
[295.77304077 -28.23711586]
[295.04766846 -12.71906376]
[290.34078979 2.09737110]
[281.96545410 15.20771599]
[270.48367310 25.72161293]
[256.66864014 32.92327881]
[241.45263672 36.32024384]
[225.86421204 35.67701340]
[210.95858765 31.03138733]
[197.74623108 22.69230080]
[186.76542664 32.91100693]
[175.78463745 43.12971497]
[164.80383301 53.34842300]
[153.92851257 63.67932510]
[143.15983582 74.12133026]
[132.39115906 84.56334686]
[128.64028931 98.97792816]
[113.34678650 103.02999878]
[107.50000000 116.84358215]
[107.50000000 131.84358215]
[107.50000000 146.84358215]
[107.50000000 161.84358215]
[107.50000000 176.84358215]
[107.50000000 191.84358215]
[107.50000000 206.84358215]
[107.50000000 221.84358215]
[107.50000000 236.84358215]
[107.50000000 251.84358215]
[122.11001587 255.58502197]
[135.33016968 262.84298706]
[146.32945251 273.16125488]
[154.41641235 285.89123535]
[159.08271790 300.23263550]
[160.03503418 315.28402710]
[157.21350098 330.09921265]
[150.79547119 343.74691772]
[141.18440247 355.36923218]
[128.98443604 364.23556519]
[114.96250153 369.78857422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 32]
[23 31]
[25 29]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[61 131]
[63 129]
[64 128]
[65 127]
[67 126]
[68 125]
[69 124]
[70 123]
[82 112]
[83 111]
[84 110]
[85 109]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
