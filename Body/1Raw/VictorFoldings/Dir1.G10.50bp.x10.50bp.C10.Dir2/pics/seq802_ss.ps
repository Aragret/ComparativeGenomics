%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCAAAGACACCCCGGGGGGGGGGCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAxxxxxxxxxxGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCCCCCCCCCCCAACUCCAAAGCCACCCC\
) } def
/len { sequence length } bind def

/coor [
[78.63748932 579.54577637]
[64.32689667 574.93530273]
[50.97041702 568.03204346]
[38.93242645 559.02447510]
[28.54132462 548.15826416]
[20.08059311 535.72979736]
[13.78104687 522.07824707]
[9.81454086 507.57595825]
[8.28928375 492.61856079]
[9.24688721 477.61413574]
[12.66122627 462.97198486]
[18.43915558 449.09161377]
[26.42304802 436.35162354]
[36.39509964 425.09957886]
[48.08325958 415.64248657]
[61.16867447 408.23831177]
[75.29435730 403.08905029]
[90.07495880 400.33517456]
[89.78937531 385.33789062]
[89.50379181 370.34060669]
[89.21820831 355.34335327]
[88.93263245 340.34606934]
[88.64704895 325.34878540]
[88.36146545 310.35150146]
[88.07588196 295.35421753]
[87.79029846 280.35693359]
[87.50472260 265.35964966]
[87.21913910 250.36236572]
[84.90351105 247.64680481]
[83.81224823 243.65888977]
[84.53598022 238.99772644]
[87.37008667 234.50640869]
[87.94114685 219.51728821]
[88.51221466 204.52815247]
[89.08327484 189.53903198]
[81.83611298 176.52641296]
[90.09319305 163.03082275]
[90.66425323 148.04168701]
[91.23531342 133.05256653]
[91.80637360 118.06343842]
[77.38237762 109.01425934]
[73.26763916 89.12266541]
[59.09262466 84.21664429]
[44.91761398 79.31063080]
[30.74259949 74.40460968]
[18.67970657 84.02178955]
[3.33000851 85.56784821]
[-10.40846252 78.54944611]
[-18.15180969 65.20613098]
[-17.42915916 49.79570007]
[-8.47110462 37.23556900]
[5.86386824 31.53363419]
[21.00152397 34.50935745]
[32.11149216 45.21319580]
[35.64862061 60.22959518]
[49.82363129 65.13561249]
[63.99864578 70.04163361]
[78.17366028 74.94765472]
[64.76406097 68.22584534]
[58.27492523 54.70212173]
[61.42184830 40.03594208]
[72.88789368 30.36486053]
[87.87471008 29.73607254]
[100.11054993 38.41271591]
[104.47492218 52.76375198]
[99.14059448 66.78447723]
[106.26658630 53.58522797]
[113.39257050 40.38597107]
[107.81640625 29.82516861]
[108.04969788 18.00509262]
[113.91777039 7.88048744]
[123.85192871 1.92593610]
[135.30703735 1.53135741]
[142.93035889 -11.38703632]
[150.55369568 -24.30542946]
[140.03584290 -34.38193893]
[132.03813171 -46.54658890]
[126.96174622 -60.18305969]
[125.05995178 -74.60134888]
[126.42549133 -89.07271576]
[130.98602295 -102.86648560]
[138.50801086 -115.28693390]
[148.60861206 -125.70841217]
[160.77519226 -133.60684204]
[174.39135742 -138.58607483]
[188.76815796 -140.39773560]
[203.17895508 -138.95364380]
[216.89614868 -134.33012390]
[224.76403809 -147.10102844]
[232.63194275 -159.87194824]
[240.37789917 -172.71717834]
[248.00122070 -185.63557434]
[255.62455750 -198.55397034]
[251.43740845 -213.79350281]
[259.32513428 -227.48872375]
[274.60809326 -231.51451111]
[288.21914673 -223.48243713]
[292.08312988 -208.15777588]
[283.90759277 -194.63238525]
[268.54293823 -190.93063354]
[260.91961670 -178.01225281]
[253.29629517 -165.09385681]
[252.60197449 -157.70150757]
[245.40284729 -152.00404358]
[237.53495789 -139.23313904]
[229.66705322 -126.46221924]
[240.59104919 -115.50351715]
[248.59063721 -102.24819946]
[253.20054626 -87.45917511]
[254.15075684 -71.98876190]
[251.38227844 -56.72959137]
[245.05079651 -42.56309509]
[235.51794434 -30.30860329]
[223.33064270 -20.67594528]
[209.18969727 -14.22433853]
[193.90956116 -11.32992268]
[178.37135315 -12.16383743]
[163.47209167 -16.68210411]
[155.84875488 -3.76370978]
[148.22543335 9.15468407]
[153.87271118 26.53343773]
[144.91064453 42.82218552]
[126.59182739 47.51195908]
[119.46583557 60.71121216]
[112.33985138 73.91046906]
[124.32194519 101.12097931]
[106.79549408 118.63449860]
[106.22443390 133.62362671]
[105.65337372 148.61274719]
[105.08231354 163.60188293]
[112.28862762 177.68661499]
[104.07239532 190.11009216]
[103.50133514 205.09921265]
[102.93027496 220.08834839]
[102.35921478 235.07746887]
[102.21641541 250.07678223]
[102.50199890 265.07406616]
[102.78758240 280.07135010]
[103.07316589 295.06863403]
[103.35874939 310.06591797]
[103.64432526 325.06320190]
[103.92990875 340.06048584]
[104.21549225 355.05776978]
[104.50107574 370.05502319]
[104.78665924 385.05230713]
[105.07223511 400.04959106]
[119.94696045 402.23876953]
[134.25843811 406.84652710]
[147.61625671 413.74716187]
[159.65597534 422.75241089]
[170.04917908 433.61663818]
[178.51229858 446.04345703]
[184.81448364 459.69381714]
[188.78378296 474.19534302]
[190.31192017 489.15243530]
[189.35720825 504.15704346]
[185.94567871 518.79986572]
[180.17042542 532.68133545]
[172.18899536 545.42285156]
[162.21911621 556.67681885]
[150.53277588 566.13616943]
[137.44877625 573.54284668]
[123.32408905 578.69482422]
[108.54402161 581.45159912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 146]
[19 145]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[28 136]
[32 135]
[33 134]
[34 133]
[35 132]
[37 130]
[38 129]
[39 128]
[40 127]
[42 58]
[43 57]
[44 56]
[45 55]
[66 125]
[67 124]
[68 123]
[73 120]
[74 119]
[75 118]
[88 106]
[89 105]
[90 104]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
