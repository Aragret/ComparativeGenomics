%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCUCCCGGGGGGGGGGCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACxxxxxxxxxxCACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGACCCCCCCCCCAUCACCUCCC\
) } def
/len { sequence length } bind def

/coor [
[86.21817780 407.26562500]
[72.37223816 401.24960327]
[60.66357803 391.72018433]
[51.96105194 379.38452148]
[46.91044998 365.15798950]
[45.88655853 350.09631348]
[48.96535873 335.31716919]
[55.91838074 321.91723633]
[66.22966766 310.89089966]
[79.13404846 303.05639648]
[93.67393494 298.99508667]
[93.67393494 283.99508667]
[93.67393494 268.99508667]
[93.67393494 253.99507141]
[93.67393494 238.99507141]
[93.67393494 223.99507141]
[93.67393494 208.99507141]
[93.67393494 193.99507141]
[93.67393494 178.99507141]
[93.67393494 163.99507141]
[93.51789856 148.99589539]
[93.20584106 133.99913025]
[78.53487396 127.22774506]
[68.52600098 114.54266357]
[65.35307312 98.69900513]
[69.70524597 83.13791656]
[80.63724518 71.23916626]
[75.15021515 57.27877426]
[69.66318512 43.31838608]
[63.45777512 29.66214371]
[56.55077744 16.34698868]
[49.64377975 3.03183293]
[42.73677826 -10.28332233]
[35.82978058 -23.59847832]
[28.92278290 -36.91363525]
[14.93574905 -31.45515633]
[0.44774681 -27.51435661]
[-14.37706280 -25.13588905]
[-29.37070465 -24.34670067]
[-44.36328888 -25.15573692]
[-59.18493652 -27.55383110]
[-73.66770935 -31.51380730]
[-87.64749908 -36.99079895]
[-100.96591949 -43.92274475]
[-113.47204590 -52.23110580]
[-125.02418518 -61.82173538]
[-135.49143982 -72.58596802]
[-144.75520325 -84.40183258]
[-152.71052551 -97.13545227]
[-159.26724243 -110.64254761]
[-164.35107422 -124.77006531]
[-167.90441895 -139.35792542]
[-169.88700867 -154.24085999]
[-170.27639771 -169.25019836]
[-169.06814575 -184.21589661]
[-166.27595520 -198.96838379]
[-161.93147278 -213.34049988]
[-156.08390808 -227.16938782]
[-148.79953003 -240.29835510]
[-140.16088867 -252.57865906]
[-130.26583862 -263.87112427]
[-119.22650909 -274.04785156]
[-107.16799164 -282.99346924]
[-94.22690582 -290.60665894]
[-80.54990387 -296.80111694]
[-66.29193115 -301.50671387]
[-51.61456299 -304.67007446]
[-36.68409729 -306.25540161]
[-21.66970253 -306.24468994]
[-6.74151087 -304.63809204]
[7.93133307 -301.45379639]
[22.18257523 -296.72787476]
[35.85073471 -290.51388550]
[48.78094482 -282.88226318]
[60.82669449 -273.91946411]
[71.85149384 -263.72702026]
[81.73043060 -252.42044067]
[90.35156250 -240.12782288]
[97.61720276 -226.98847961]
[103.44503784 -213.15126038]
[107.76902008 -198.77297974]
[110.54016876 -184.01652527]
[111.72707367 -169.04911804]
[111.31629181 -154.04034424]
[109.31246948 -139.16026306]
[105.73832703 -124.57747650]
[100.63434601 -110.45722198]
[94.05837250 -96.95949554]
[86.08490753 -84.23723602]
[76.80429840 -72.43458557]
[66.32170868 -61.68529510]
[54.75590515 -52.11114883]
[42.23793793 -43.82063293]
[49.14493561 -30.50547791]
[56.05193329 -17.19032097]
[62.95893478 -3.87516570]
[69.86592865 9.43999004]
[76.77293396 22.75514603]
[84.05165863 9.63950253]
[98.80725098 6.94275093]
[110.25456238 16.63599777]
[110.02653503 31.63426399]
[98.28984070 40.97503281]
[83.62357330 37.83135223]
[89.11060333 51.79174423]
[94.59763336 65.75213623]
[113.01338959 67.86351776]
[127.70951843 79.16050720]
[134.48539734 96.41407013]
[149.38729858 98.12675476]
[164.28919983 99.83944702]
[173.97737122 87.83348846]
[188.62567139 82.99294281]
[203.55989075 86.86241150]
[214.01455688 98.20715332]
[216.65365601 113.40711212]
[210.63502502 127.61203766]
[197.87922668 136.28916931]
[182.45654297 136.66969299]
[169.28834534 128.63217163]
[162.57652283 114.74134827]
[147.67462158 113.02866364]
[132.77272034 111.31597137]
[129.87312317 117.59823608]
[125.78383636 123.17964172]
[120.66767883 127.83790588]
[114.72841644 131.38751221]
[108.20259094 133.68707275]
[108.51464844 148.68383789]
[111.83950806 157.26271057]
[108.67393494 163.99507141]
[108.67393494 178.99507141]
[108.67393494 193.99507141]
[108.67393494 208.99507141]
[108.67393494 223.99507141]
[108.67393494 238.99507141]
[108.67393494 253.99507141]
[108.67393494 268.99508667]
[108.67393494 283.99508667]
[108.67393494 298.99508667]
[123.21382141 303.05639648]
[136.11819458 310.89089966]
[146.42948914 321.91723633]
[153.38250732 335.31716919]
[156.46130371 350.09631348]
[155.43740845 365.15798950]
[150.38681030 379.38452148]
[141.68428040 391.72018433]
[129.97563171 401.24960327]
[116.12968445 407.26562500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[27 106]
[28 105]
[29 104]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
