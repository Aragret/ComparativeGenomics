%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUAAAAAGGGGGGGGGGUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAxxxxxxxxxxAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUCCCCCCCCCCAAAUUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[220.59138489 191.65611267]
[214.12603760 181.35606384]
[208.29060364 170.68637085]
[203.10617065 159.68548584]
[198.59143066 148.39309692]
[194.76269531 136.84992981]
[191.63377380 125.09762573]
[189.21598816 113.17855835]
[187.51805115 101.13571930]
[172.55781555 102.22702789]
[157.59756470 103.31833649]
[142.63731384 104.40965271]
[127.67706299 105.50096130]
[112.71681213 106.59226990]
[101.04212189 114.28598785]
[88.37449646 108.36798096]
[73.44018555 109.77027893]
[58.53828812 111.48297119]
[45.71180344 120.74536896]
[32.18432617 114.51185608]
[17.28242493 116.22454834]
[2.38052249 117.93723297]
[-12.52137947 119.64992523]
[-27.42328262 121.36261749]
[-29.79788017 136.27113342]
[-36.10773849 149.98565674]
[-45.88462448 161.48849487]
[-58.40303040 169.92602539]
[-72.73400116 174.67216492]
[-87.81408691 175.37471008]
[-102.52424622 171.98150635]
[-115.77288818 164.74438477]
[-126.57687378 154.20034790]
[-134.13447571 141.13186646]
[-137.88487244 126.50869751]
[-137.54974365 111.41597748]
[-133.15399170 96.97367859]
[-125.02377319 84.25353241]
[-113.76243591 74.19944000]
[-100.20561981 67.55749512]
[-85.35935211 64.82056427]
[-70.32530975 66.19175720]
[-56.21912003 71.56931305]
[-44.08756638 80.55418396]
[-34.83087921 92.47962952]
[-29.13597107 106.46071625]
[-14.23406982 104.74802399]
[0.66783285 103.03533173]
[15.56973553 101.32264709]
[30.47163773 99.60995483]
[42.23223495 90.47006226]
[56.82559586 96.58106995]
[71.72750092 94.86837769]
[75.37971497 91.70027924]
[81.07911682 90.83536530]
[87.28318787 93.40773010]
[98.95787811 85.71401215]
[111.62550354 91.63201904]
[126.58575439 90.54071045]
[141.54600525 89.44940186]
[156.50625610 88.35809326]
[171.46649170 87.26677704]
[186.42674255 86.17546844]
[186.72779846 65.83566284]
[189.06790161 45.62934113]
[193.42330933 25.76039886]
[199.74995422 6.42930889]
[207.98384094 -12.16889858]
[218.04177856 -29.84660149]
[229.82215881 -46.42547607]
[243.20597839 -61.73830032]
[258.05807495 -75.63063812]
[274.22851562 -87.96240234]
[291.55401611 -98.60924530]
[309.85968018 -107.46385193]
[328.96069336 -114.43698883]
[348.66430664 -119.45841217]
[368.77163696 -122.47757721]
[389.07977295 -123.46414948]
[409.38372803 -122.40830994]
[429.47866821 -119.32084656]
[449.16180420 -114.23303986]
[468.23455811 -107.19637299]
[486.50451660 -98.28196716]
[494.22860718 -111.14037323]
[501.95269775 -123.99877167]
[501.69586182 -140.39590454]
[515.90478516 -148.58358765]
[529.96258545 -140.13902283]
[529.40777588 -123.74926758]
[514.81109619 -116.27468872]
[507.08700562 -103.41628265]
[499.36291504 -90.55788422]
[509.33950806 -83.61664581]
[518.88153076 -76.08893585]
[527.95446777 -68.00189972]
[536.52575684 -59.38470459]
[544.56427002 -50.26840973]
[552.04113770 -40.68589401]
[558.92938232 -30.67171097]
[565.20404053 -20.26197433]
[570.84252930 -9.49422264]
[575.82452393 1.59270978]
[580.13201904 12.95883846]
[583.74945068 24.56317139]
[586.66375732 36.36385727]
[588.86444092 48.31833267]
[590.34350586 60.38348007]
[591.09564209 72.51578522]
[591.11810303 84.67148590]
[590.41076660 96.80673218]
[588.97625732 108.87775421]
[586.81964111 120.84101105]
[583.94866943 132.65335083]
[580.37377930 144.27215576]
[576.10778809 155.65551758]
[571.16607666 166.76237488]
[565.56646729 177.55265808]
[559.32910156 187.98742676]
[552.47656250 198.02903748]
[545.03344727 207.64128113]
[537.02667236 216.78945923]
[528.48504639 225.44056702]
[519.43939209 233.56340027]
[509.92236328 241.12863159]
[499.96823120 248.10896301]
[489.61288452 254.47921753]
[478.89370728 260.21640015]
[467.84933472 265.29980469]
[456.51962280 269.71105957]
[444.94537354 273.43426514]
[433.16839600 276.45599365]
[421.23114014 278.76528931]
[409.17663574 280.35382080]
[397.04840088 281.21585083]
[384.89016724 281.34826660]
[372.74578857 280.75054932]
[360.65905762 279.42483521]
[348.67361450 277.37594604]
[336.83264160 274.61120605]
[325.17886353 271.14059448]
[313.75436401 266.97659302]
[302.60031128 262.13421631]
[291.75692749 256.63095093]
[281.26339722 250.48658752]
[271.15753174 243.72331238]
[261.47579956 236.36547852]
[252.25314331 228.43962097]
[243.52282715 219.97433472]
[235.31636047 211.00012207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[16 56]
[17 53]
[18 52]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
