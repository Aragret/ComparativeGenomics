%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUAGCAGGGGGGGGGGGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUxxxxxxxxxxGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGACGUAGACCCCCCCCCCCACACGAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 386.32424927]
[71.19830322 380.30819702]
[59.48964310 370.77877808]
[50.78712082 358.44311523]
[45.73651886 344.21661377]
[44.71262741 329.15490723]
[47.79142761 314.37576294]
[54.74444962 300.97583008]
[65.05573273 289.94949341]
[77.96011353 282.11499023]
[92.50000000 278.05368042]
[92.50000000 263.05368042]
[92.50000000 248.05368042]
[92.50000000 233.05368042]
[92.50000000 218.05368042]
[92.50000000 203.05368042]
[92.50000000 188.05368042]
[92.50000000 173.05368042]
[92.50000000 158.05368042]
[92.50000000 143.05368042]
[80.75231934 139.23513794]
[70.54244232 132.28190613]
[62.68606949 122.74950409]
[57.81090164 111.39952850]
[56.30643845 99.13878632]
[58.29287338 86.94685364]
[63.61150360 75.79780579]
[52.73267746 65.47059631]
[41.85385132 55.14339066]
[30.97502518 44.81618881]
[18.19766808 36.95876312]
[4.07286596 31.91000557]
[-10.07761002 38.42167282]
[-24.33024788 33.10029984]
[-30.45092010 19.56985474]
[-44.57572556 14.52109909]
[-58.70052719 9.47234249]
[-72.82533264 4.42358637]
[-86.95013428 -0.62516981]
[-101.07493591 -5.67392635]
[-115.19973755 -10.72268295]
[-129.32453918 -15.77143860]
[-142.72940063 -7.71887541]
[-158.16603088 -10.21777630]
[-168.34571838 -22.08823586]
[-168.46194458 -37.72538757]
[-158.45980835 -49.74584579]
[-143.06202698 -52.47391891]
[-129.53897095 -44.62149048]
[-124.27578735 -29.89624214]
[-110.15098572 -24.84748459]
[-96.02617645 -19.79872894]
[-81.90137482 -14.74997234]
[-67.77657318 -9.70121670]
[-53.65177155 -4.65246010]
[-39.52696609 0.39629626]
[-25.40216446 5.44505262]
[-12.09147453 -1.13986456]
[2.30500555 3.77907920]
[9.12162209 17.78520203]
[23.24642563 22.83395958]
[13.80714035 11.17634773]
[7.96090174 -2.63746786]
[6.16395426 -17.52944565]
[8.55653286 -32.33740234]
[14.95191956 -45.90571213]
[24.85101318 -57.17549133]
[37.48127747 -65.26724243]
[51.85704041 -69.54946899]
[66.85639954 -69.68798828]
[81.30879974 -65.67199707]
[94.08634949 -57.81489182]
[104.19189453 -46.72985840]
[110.83677673 -33.28197479]
[113.50243378 -18.52073288]
[111.98082733 -3.59810877]
[106.39071655 10.32132339]
[97.16834259 22.15127754]
[85.03343201 30.96853638]
[70.93301392 36.08499146]
[55.96748352 37.10135269]
[41.30223083 33.93736267]
[52.18105698 44.26456833]
[63.05988312 54.59177399]
[73.93870544 64.91897583]
[91.77075958 57.07973862]
[111.23771667 57.76751328]
[128.47207642 66.84565735]
[140.04985046 82.51061249]
[154.62255859 78.95584869]
[169.19525146 75.40108490]
[182.58154297 68.63297272]
[194.08334351 59.00444412]
[205.58514404 49.37591934]
[210.70048523 33.79499054]
[226.80490112 30.69984055]
[237.33154297 43.27449417]
[231.45150757 58.58322144]
[215.21366882 60.87772369]
[203.71186829 70.50624847]
[192.21006775 80.13477325]
[194.66084290 87.22305298]
[208.83747864 82.32172394]
[213.73858643 96.49842834]
[199.56239319 101.39961243]
[202.01316833 108.48789215]
[217.00585938 108.95593262]
[231.99856567 109.42397308]
[246.99125671 109.89202118]
[255.64788818 97.12228394]
[269.84313965 91.08084869]
[285.04730225 93.69551849]
[296.40884399 104.13195801]
[300.30227661 119.05993652]
[295.48529053 133.71598816]
[283.49490356 143.42343140]
[268.15722656 145.08464050]
[254.36648560 138.16954041]
[246.52320862 124.88471222]
[231.53051758 124.41667175]
[216.53782654 123.94863129]
[201.54512024 123.48059082]
[177.17802429 110.06939697]
[172.75001526 89.97379303]
[158.17730713 93.52854919]
[143.60461426 97.08331299]
[142.58843994 109.80273438]
[137.94161987 121.68647003]
[130.06025696 131.72143555]
[119.61627197 139.05215454]
[107.50000000 143.05368042]
[107.50000000 158.05368042]
[107.50000000 173.05368042]
[107.50000000 188.05368042]
[107.50000000 203.05368042]
[107.50000000 218.05368042]
[107.50000000 233.05368042]
[107.50000000 248.05368042]
[107.50000000 263.05368042]
[107.50000000 278.05368042]
[122.03988647 282.11499023]
[134.94427490 289.94949341]
[145.25555420 300.97583008]
[152.20857239 314.37576294]
[155.28736877 329.15490723]
[154.26348877 344.21661377]
[149.21287537 358.44311523]
[140.51036072 370.77877808]
[128.80169678 380.30819702]
[114.95575714 386.32424927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 85]
[28 84]
[29 83]
[30 82]
[31 61]
[32 60]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[89 126]
[90 125]
[91 124]
[92 101]
[93 100]
[94 99]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
