%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCUGCGGGGGGGGGGAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCxxxxxxxxxxCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGCCCCCCCCCCACCAAACCUAC\
) } def
/len { sequence length } bind def

/coor [
[77.83006287 399.35873413]
[63.80812073 393.80572510]
[51.60816193 384.93939209]
[41.99709320 373.31707764]
[35.57906723 359.66937256]
[32.75753021 344.85418701]
[33.70984650 329.80282593]
[38.37615204 315.46139526]
[46.46311569 302.73144531]
[57.46239090 292.41317749]
[70.68254852 285.15518188]
[85.29256439 281.41375732]
[85.29256439 266.41375732]
[85.29256439 251.41375732]
[85.29256439 236.41375732]
[85.29256439 221.41375732]
[85.29256439 206.41375732]
[85.29256439 191.41375732]
[85.29256439 176.41375732]
[85.29256439 161.41375732]
[85.29256439 146.41375732]
[72.37986755 138.78077698]
[59.23823166 146.01248169]
[46.09660339 153.24418640]
[35.13482285 166.17770386]
[19.67223358 159.22465515]
[22.07307434 142.44155884]
[38.86489868 140.10255432]
[52.00653076 132.87084961]
[65.14816284 125.63915253]
[61.34012604 111.12988281]
[57.53244400 96.62190247]
[42.53323364 96.77590179]
[27.53402519 96.92989349]
[13.81401539 104.80846405]
[1.00797987 97.20223999]
[-14.76824284 103.41087341]
[-25.10153389 89.96990967]
[-15.04638958 76.31961823]
[0.85398287 82.20302582]
[13.50114918 74.33547211]
[27.38002968 81.93068695]
[42.37923813 81.77668762]
[57.37844849 81.62268829]
[72.37599945 72.26457977]
[87.49720764 70.67886353]
[77.16630554 59.80354691]
[66.83540344 48.92823410]
[56.50450134 38.05291748]
[46.17359924 27.17760468]
[35.84269714 16.30229187]
[25.51179314 5.42697763]
[10.80479336 9.66522598]
[-4.18488121 6.57196617]
[-16.01271248 -3.14199257]
[-21.96075249 -17.24445343]
[-20.66218376 -32.49477386]
[-12.41540813 -45.38854599]
[0.88452411 -52.96286774]
[16.18138695 -53.47722244]
[29.96007347 -46.81341171]
[39.05434418 -34.50273132]
[41.37439728 -19.37408447]
[36.38710785 -4.90392494]
[46.71800995 5.97138882]
[57.04891205 16.84670258]
[67.37981415 27.72201729]
[77.71071625 38.59733200]
[88.04161835 49.47264481]
[98.37252045 60.34795761]
[94.52020264 45.85107422]
[86.64498901 33.08467484]
[84.82209015 18.19585228]
[89.38478851 3.90663362]
[99.49890900 -7.17057371]
[113.31536102 -13.01059341]
[128.30815125 -12.54573059]
[141.73625183 -5.86097479]
[151.14469910 5.82154322]
[154.81338501 20.36598206]
[152.07160950 35.11327362]
[143.42060852 47.36726379]
[130.44526672 54.88658905]
[120.19295502 65.83601379]
[134.43965149 61.14221573]
[148.68634033 56.44841385]
[162.93302917 51.75461578]
[176.97500610 46.47987366]
[190.78858948 40.63308334]
[200.48135376 28.12865067]
[215.21786499 30.29306221]
[229.03144836 24.44627380]
[241.86509705 16.68113899]
[253.45414734 7.15780115]
[265.04318237 -2.36553645]
[268.03018188 -18.12806702]
[282.28292847 -25.49280357]
[296.86788940 -18.81015015]
[300.59680176 -3.20646667]
[290.60910034 9.34843636]
[274.56652832 9.22351170]
[262.97747803 18.74684906]
[251.38842773 28.27018738]
[266.31018066 26.73999977]
[280.71151733 30.93540955]
[292.47683716 40.24009705]
[299.87777710 53.28717041]
[301.82711792 68.15997314]
[298.03845215 82.67362213]
[289.06842041 94.69602966]
[276.23468018 102.46105194]
[261.42260742 104.82797241]
[246.80812073 101.44909668]
[234.53814697 92.82078552]
[226.41519165 80.21057129]
[223.63253784 65.47093964]
[226.59898376 50.76718521]
[234.87823486 38.25985718]
[221.06465149 44.10664368]
[212.35992432 56.19287872]
[196.63537598 54.44666672]
[182.82179260 60.29345703]
[181.65322876 62.90602112]
[179.34730530 65.19772339]
[176.02661133 66.72079468]
[171.97779846 67.08237457]
[167.62683105 66.00130463]
[153.38014221 70.69510651]
[139.13345337 75.38890839]
[124.88675690 80.08271027]
[135.33650208 116.84252167]
[100.29256439 146.41375732]
[100.29256439 161.41375732]
[100.29256439 176.41375732]
[100.29256439 191.41375732]
[100.29256439 206.41375732]
[100.29256439 221.41375732]
[100.29256439 236.41375732]
[100.29256439 251.41375732]
[100.29256439 266.41375732]
[100.29256439 281.41375732]
[114.90257263 285.15518188]
[128.12274170 292.41317749]
[139.12200928 302.73144531]
[147.20896912 315.46139526]
[151.87527466 329.80282593]
[152.82759094 344.85418701]
[150.00605774 359.66937256]
[143.58802795 373.31707764]
[133.97695923 384.93939209]
[121.77700806 393.80572510]
[107.75505829 399.35873413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 30]
[23 29]
[24 28]
[32 44]
[33 43]
[34 42]
[36 40]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[84 130]
[85 129]
[86 128]
[87 127]
[88 122]
[89 121]
[91 119]
[92 118]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
