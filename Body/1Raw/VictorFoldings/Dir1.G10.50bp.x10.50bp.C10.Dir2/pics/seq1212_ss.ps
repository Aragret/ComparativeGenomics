%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCCCCUCGGGGGGGGGGCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAxxxxxxxxxxAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUCCCCCCCCCCAGCACCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[96.91893005 389.66162109]
[82.89698792 384.10861206]
[70.69702911 375.24227905]
[61.08596039 363.61996460]
[54.66793442 349.97225952]
[51.84639740 335.15707397]
[52.79871368 320.10571289]
[57.46501923 305.76428223]
[65.55198669 293.03433228]
[76.55126190 282.71603394]
[89.77142334 275.45806885]
[104.38143158 271.71664429]
[104.38143158 256.71664429]
[104.38143158 241.71664429]
[104.38143158 226.71664429]
[104.38143158 211.71664429]
[104.38143158 196.71664429]
[104.38143158 181.71664429]
[104.38143158 166.71664429]
[104.38143158 151.71664429]
[104.38143158 136.71664429]
[90.79894257 135.01329041]
[79.05046844 128.56903076]
[70.68386078 118.47485352]
[66.71108246 106.28410339]
[67.48870087 93.77548981]
[72.69573212 82.69409180]
[81.40805054 74.50790405]
[75.70339203 60.63502121]
[69.99872589 46.76213837]
[64.29406738 32.88925934]
[49.15360641 27.03473854]
[43.56513596 10.15557957]
[34.40319824 -1.72124386]
[25.24126434 -13.59806728]
[9.81502056 -15.75879860]
[0.69270492 -27.93410301]
[2.84769869 -42.62735367]
[-6.31423664 -54.50417709]
[-17.18955040 -64.83507538]
[-29.52083397 -73.37553406]
[-45.27109528 -74.87213135]
[-51.32866287 -88.47930908]
[-63.65994644 -97.01976776]
[-75.99123383 -105.56022644]
[-88.40954590 -113.97363281]
[-100.91358185 -122.25910950]
[-113.41761780 -130.54458618]
[-125.92165375 -138.83006287]
[-141.35848999 -135.44190979]
[-154.62454224 -144.03187561]
[-157.84930420 -159.50366211]
[-149.11956787 -172.67816162]
[-133.61453247 -175.73915100]
[-120.53307343 -166.87062073]
[-117.63617706 -151.33409119]
[-105.13214111 -143.04861450]
[-92.62810516 -134.76313782]
[-80.12406921 -126.47766876]
[-72.76563263 -125.39804077]
[-67.45077515 -117.89151001]
[-55.11948776 -109.35105133]
[-42.78820419 -100.81059265]
[-27.91995811 -99.92486572]
[-20.98037529 -85.70681763]
[-8.64909172 -77.16635895]
[-14.37286854 -91.03136444]
[-14.80138588 -106.02524567]
[-9.87881374 -120.19451904]
[-0.24648985 -131.69314575]
[12.84063816 -139.02301025]
[27.67751312 -141.22917175]
[42.33111572 -138.02416992]
[54.89229584 -129.82559204]
[63.72452164 -117.70157623]
[67.67708588 -103.23170471]
[66.23503876 -88.30118561]
[59.58623886 -74.85523987]
[48.59693909 -64.64566803]
[34.69887543 -59.00263596]
[19.70275688 -58.66133881]
[5.56258678 -63.66611099]
[14.72452259 -51.78928757]
[29.48350716 -50.14369965]
[38.94420242 -38.22942734]
[37.11808777 -22.76000214]
[46.28002167 -10.88317966]
[55.44195938 0.99364448]
[70.41350555 1.91705811]
[80.96552277 -8.74385071]
[91.51753998 -19.40476036]
[88.87869263 -34.69580460]
[95.76185608 -48.60269928]
[109.52031708 -55.77795029]
[124.86367035 -53.46253586]
[135.89207458 -42.54677582]
[138.36489868 -27.22800255]
[131.33126831 -13.39659691]
[117.49578094 -6.37101889]
[102.17844391 -8.85274410]
[91.62643433 1.80816436]
[81.07441711 12.46907330]
[78.16694641 27.18459511]
[83.87160492 41.05747604]
[89.57627106 54.93035507]
[95.28093719 68.80323792]
[111.86406708 69.30500793]
[126.57804871 78.37463379]
[135.14248657 94.18241882]
[134.67272949 112.84950256]
[149.25648499 116.35866547]
[163.84024048 119.86783600]
[178.42398071 123.37700653]
[193.00773621 126.88616943]
[207.59147644 130.39533997]
[218.11125183 119.20471191]
[232.82156372 114.78858948]
[247.76544189 118.33489227]
[258.92303467 128.88967896]
[263.29302979 143.61376953]
[259.69989014 158.54644775]
[249.11018372 169.67091370]
[234.37246704 173.99472046]
[219.45112610 170.35481262]
[208.35990906 159.73028564]
[204.08232117 144.97908020]
[189.49856567 141.46992493]
[174.91481018 137.96075439]
[160.33106995 134.45158386]
[145.74731445 130.94241333]
[131.16357422 127.43325043]
[119.38143158 136.71664429]
[119.38143158 151.71664429]
[119.38143158 166.71664429]
[119.38143158 181.71664429]
[119.38143158 196.71664429]
[119.38143158 211.71664429]
[119.38143158 226.71664429]
[119.38143158 241.71664429]
[119.38143158 256.71664429]
[119.38143158 271.71664429]
[133.99143982 275.45806885]
[147.21160889 282.71603394]
[158.21087646 293.03433228]
[166.29785156 305.76428223]
[170.96415710 320.10571289]
[171.91647339 335.15707397]
[169.09492493 349.97225952]
[162.67691040 363.61996460]
[153.06582642 375.24227905]
[140.86587524 384.10861206]
[126.84393311 389.66162109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 106]
[29 105]
[30 104]
[31 103]
[33 88]
[34 87]
[35 86]
[38 83]
[39 82]
[40 66]
[41 65]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[49 56]
[89 102]
[90 101]
[91 100]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
