%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUGAUCAGGGGGGGGGGGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUxxxxxxxxxxCUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCCCCCCCCCCCUCUGAUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.32104492]
[71.19830322 351.30502319]
[59.48964310 341.77560425]
[50.78712082 329.43994141]
[45.73651886 315.21340942]
[44.71262741 300.15173340]
[47.79142761 285.37255859]
[54.74444962 271.97265625]
[65.05573273 260.94631958]
[77.96011353 253.11180115]
[92.50000000 249.05049133]
[92.50000000 234.05049133]
[92.50000000 219.05049133]
[92.50000000 204.05049133]
[92.50000000 189.05049133]
[92.50000000 174.05049133]
[92.50000000 159.05049133]
[92.50000000 144.05049133]
[92.50000000 129.05049133]
[92.50000000 114.05049133]
[89.55451965 99.34252930]
[83.77824402 85.49931335]
[78.00197601 71.65608978]
[72.22570038 57.81287384]
[66.44942474 43.96965790]
[58.85951996 31.03160095]
[49.59457016 19.23496246]
[40.32962036 7.43832159]
[42.80476761 22.23270035]
[48.86620331 35.95345306]
[49.71822357 50.92923355]
[45.25210190 65.24893188]
[36.03777313 77.08515167]
[23.25111771 84.92743683]
[8.52388382 87.77500153]
[-6.26452827 85.26445007]
[-19.22691536 77.71617126]
[-28.70909691 66.09342194]
[-33.50101852 51.87943649]
[-32.99116516 36.88810349]
[-27.24459839 23.03252792]
[-16.99466133 12.08087158]
[-3.54631710 5.42983294]
[11.44669151 5.88776970]
[-1.49136484 -1.70213878]
[-14.42942047 -9.29204750]
[-27.36747742 -16.88195610]
[-42.59613800 -12.65543556]
[-56.31170654 -20.50773811]
[-60.37698364 -35.78023148]
[-52.38011169 -49.41201782]
[-37.06549072 -53.31559753]
[-23.51901436 -45.17504883]
[-19.77756882 -29.82001114]
[-6.83951235 -22.23010254]
[6.09854364 -14.64019489]
[19.03660011 -7.05028629]
[31.81395721 -14.90771198]
[30.87832832 -29.87850380]
[29.94269943 -44.84929657]
[29.00707054 -59.82008743]
[14.15405178 -62.36655807]
[0.28889021 -68.27028656]
[-11.84068203 -77.21289062]
[-21.58053207 -88.71211243]
[-28.40540314 -102.14780426]
[-31.94723701 -116.79540253]
[-32.01502991 -131.86497498]
[-28.60512161 -146.54385376]
[-21.90140724 -160.04040527]
[-12.26540947 -171.62678528]
[-0.21678461 -180.67816162]
[13.59469986 -186.70639038]
[28.42420769 -189.38639832]
[43.47200394 -188.57363892]
[57.92657852 -184.31193542]
[71.00841522 -176.83114624]
[82.01202393 -166.53466797]
[90.34399414 -153.97779846]
[95.55500031 -139.83770752]
[97.36400604 -124.87696075]
[95.67346954 -109.90235138]
[90.57455444 -95.72145844]
[82.34223175 -83.09903717]
[71.42046356 -72.71578979]
[58.39825058 -65.13168335]
[43.97786331 -60.75571442]
[44.91349030 -45.78492355]
[45.84912109 -30.81413269]
[46.78474808 -15.84334087]
[52.12626266 -1.82662761]
[61.39120865 9.97001266]
[70.65615845 21.76665306]
[69.71800232 6.79601860]
[74.84383392 -7.30099916]
[85.17853546 -18.17270279]
[98.99805450 -24.00544739]
[113.99697876 -23.82620049]
[127.67316437 -17.66486549]
[137.74510193 -6.54929066]
[142.53257751 7.66619730]
[141.23692322 22.61013603]
[134.07429504 35.78953934]
[122.23956299 45.00579071]
[107.70704651 48.72140884]
[92.90107727 46.31654739]
[80.29264832 38.19338608]
[86.06891632 52.03660202]
[91.84519196 65.87982178]
[97.62145996 79.72303772]
[103.39773560 93.56625366]
[109.38442993 87.51199341]
[117.24250031 83.35427856]
[126.49837494 81.51020813]
[136.59748840 82.29129791]
[150.82426453 87.04511261]
[162.78340149 77.29919434]
[178.11564636 75.58871460]
[191.92854309 82.45946503]
[199.81445312 95.71903229]
[199.25700378 111.13632202]
[190.43408203 123.79173279]
[176.16104126 129.64698792]
[160.99237061 126.83367157]
[149.76832581 116.24951935]
[146.07044983 101.27188873]
[131.84367371 96.51807404]
[125.75775146 100.90117645]
[127.26362610 115.82540131]
[113.58591461 109.66738892]
[107.50000000 114.05049133]
[107.50000000 129.05049133]
[107.50000000 144.05049133]
[107.50000000 159.05049133]
[107.50000000 174.05049133]
[107.50000000 189.05049133]
[107.50000000 204.05049133]
[107.50000000 219.05049133]
[107.50000000 234.05049133]
[107.50000000 249.05049133]
[122.03988647 253.11180115]
[134.94427490 260.94631958]
[145.25555420 271.97265625]
[152.20857239 285.37255859]
[155.28736877 300.15173340]
[154.26348877 315.21340942]
[149.21287537 329.43994141]
[140.51036072 341.77560425]
[128.80169678 351.30502319]
[114.95575714 357.32104492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 111]
[22 110]
[23 109]
[24 108]
[25 107]
[26 93]
[27 92]
[28 91]
[44 57]
[45 56]
[46 55]
[47 54]
[58 90]
[59 89]
[60 88]
[61 87]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
