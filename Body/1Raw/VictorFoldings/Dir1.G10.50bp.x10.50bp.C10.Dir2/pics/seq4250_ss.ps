%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCUAACGGGGGGGGGGCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCxxxxxxxxxxAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUACCCCCCCCCCUACUACUAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 392.16403198]
[71.19830322 386.14797974]
[59.48964310 376.61856079]
[50.78712082 364.28289795]
[45.73651886 350.05639648]
[44.71262741 334.99468994]
[47.79142761 320.21554565]
[54.74444962 306.81561279]
[65.05573273 295.78927612]
[77.96011353 287.95477295]
[92.50000000 283.89346313]
[92.50000000 268.89346313]
[92.50000000 253.89346313]
[92.50000000 238.89346313]
[92.50000000 223.89346313]
[92.50000000 208.89346313]
[92.50000000 193.89346313]
[92.50000000 178.89346313]
[92.50000000 163.89346313]
[92.50000000 148.89346313]
[81.34220123 145.81164551]
[71.20614624 140.22106934]
[62.64691925 132.42788696]
[56.13324356 122.85887909]
[52.02181625 112.03805542]
[37.08750916 113.44035339]
[22.15320206 114.84265900]
[7.21889400 116.24496460]
[-7.71541357 117.64727020]
[-22.64972115 119.04956818]
[-28.97902679 133.04368591]
[-41.46677780 141.98526001]
[-56.75382996 143.46903992]
[-70.72804260 137.09590149]
[-79.63042450 124.58018494]
[-81.06628418 109.28855896]
[-74.64936829 95.33438873]
[-62.10581207 86.47128296]
[-46.80975723 85.08336639]
[-32.87577057 91.54398346]
[-24.05202484 104.11526489]
[-9.11771679 102.71295929]
[5.81659079 101.31065369]
[20.75089836 99.90835571]
[35.68520737 98.50605011]
[50.61951447 97.10374451]
[52.18552017 87.32733917]
[55.66718674 78.05866241]
[60.92501831 69.66905212]
[67.74836731 62.49462891]
[75.86386108 56.82283783]
[84.94635010 52.88091278]
[94.63195801 50.82678604]
[104.53263092 50.74275589]
[114.25170898 52.63219070]
[123.39980316 56.41938400]
[132.41732788 44.43255234]
[141.43486023 32.44572067]
[143.54804993 16.76627350]
[157.38232422 11.24705029]
[166.39985657 -0.73978209]
[152.44874573 4.77081156]
[137.49983215 6.00758266]
[122.83278656 2.86465716]
[109.70321655 -4.38891459]
[99.23506927 -15.13218689]
[92.32447815 -28.44547844]
[89.56302643 -43.18910217]
[91.18711090 -58.10092163]
[97.05770111 -71.90440369]
[106.67224121 -83.41790009]
[119.20767212 -91.65579987]
[133.59089661 -95.91287994]
[148.59063721 -95.82472229]
[162.92283630 -91.39886475]
[175.36058044 -83.01419830]
[184.83911133 -71.38848114]
[190.54704285 -57.51694870]
[191.99574280 -42.58706665]
[189.06118774 -27.87692261]
[181.99255371 -14.64303493]
[194.93060303 -22.23294258]
[207.86866760 -29.82285118]
[220.80671692 -37.41275787]
[233.74476624 -45.00266647]
[246.68283081 -52.59257507]
[248.08920288 -69.41738892]
[259.11929321 -81.97996521]
[275.29675293 -85.48089600]
[290.23175049 -78.73915100]
[303.00909424 -86.59658051]
[315.78643799 -94.45400238]
[313.01437378 -109.37647247]
[315.82391357 -124.29192352]
[323.83517456 -137.18318176]
[335.96463013 -146.30679321]
[350.57192993 -150.42887878]
[365.68151855 -148.99195862]
[379.24993896 -142.19035339]
[389.44223022 -130.94392395]
[394.87991333 -116.77368164]
[394.82760620 -101.59600830]
[389.29238892 -87.46356964]
[379.02282715 -76.28766632]
[365.40783691 -69.57974243]
[350.28869629 -68.24698639]
[335.71017456 -72.46965027]
[323.64389038 -81.67665100]
[310.86651611 -73.81922150]
[298.08917236 -65.96179962]
[298.29519653 -52.57697296]
[291.79412842 -40.75126648]
[280.19778442 -33.63963699]
[266.49304199 -33.19980621]
[254.27273560 -39.65452194]
[241.33468628 -32.06461334]
[228.39662170 -24.47470284]
[215.45857239 -16.88479614]
[202.52050781 -9.29488659]
[189.58245850 -1.70497870]
[178.38668823 8.27774811]
[169.36915588 20.26457977]
[167.90097046 35.08664703]
[153.42169189 41.46324921]
[144.40415955 53.45008087]
[135.38662720 65.43691254]
[146.71261597 83.72879028]
[149.20187378 105.09872437]
[142.38349915 125.50411987]
[127.54734039 141.08485413]
[107.50000000 148.89346313]
[107.50000000 163.89346313]
[107.50000000 178.89346313]
[107.50000000 193.89346313]
[107.50000000 208.89346313]
[107.50000000 223.89346313]
[107.50000000 238.89346313]
[107.50000000 253.89346313]
[107.50000000 268.89346313]
[107.50000000 283.89346313]
[122.03988647 287.95477295]
[134.94427490 295.78927612]
[145.25555420 306.81561279]
[152.20857239 320.21554565]
[155.28736877 334.99468994]
[154.26348877 350.05639648]
[149.21287537 364.28289795]
[140.51036072 376.61856079]
[128.80169678 386.14797974]
[114.95575714 392.16403198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[56 126]
[57 125]
[58 124]
[60 122]
[61 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[90 110]
[91 109]
[92 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
