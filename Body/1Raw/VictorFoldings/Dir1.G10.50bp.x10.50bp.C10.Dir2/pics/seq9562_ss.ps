%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAAUAUUGGGGGGGGGGAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACAxxxxxxxxxxGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCCCCCCCCCCCAUGAAUAUU\
) } def
/len { sequence length } bind def

/coor [
[69.85535431 374.86685181]
[56.63515472 367.59439087]
[45.74834824 357.14736938]
[37.93721771 344.23812866]
[33.73433685 329.74682617]
[33.42626572 314.66146851]
[37.03400803 300.01065063]
[44.31158066 286.79327393]
[54.76278687 275.91049194]
[67.67504883 268.10433960]
[82.16798401 263.90707397]
[81.85592651 248.91030884]
[81.54387665 233.91355896]
[81.23181915 218.91679382]
[80.91976166 203.92004395]
[80.60770416 188.92329407]
[80.29564667 173.92654419]
[79.98358917 158.92977905]
[79.67153931 143.93302917]
[79.35948181 128.93627930]
[69.26083374 117.84496307]
[54.35892868 116.13227081]
[39.45702744 114.41958618]
[24.55512238 112.70689392]
[9.65322113 110.99420166]
[-5.24868155 109.28151703]
[-20.15058327 107.56882477]
[-34.74394608 113.67983246]
[-46.50454330 104.53993988]
[-61.40644455 102.82724762]
[-76.30834961 101.11455536]
[-82.61405182 103.42661285]
[-88.27254486 102.32536316]
[-91.78981018 99.00807953]
[-106.60756683 96.67697906]
[-115.24419403 109.26155090]
[-128.49003601 116.84511566]
[-143.71511841 117.92195892]
[-157.89648438 112.27825928]
[-168.21842957 101.03458405]
[-172.63153076 86.42337799]
[-170.25953674 71.34570312]
[-161.57341003 58.79523468]
[-148.29782104 51.26388931]
[-133.06860352 50.24701309]
[-118.90956879 55.94651031]
[-108.63198090 67.23074341]
[-104.27646637 81.85921478]
[-89.45870209 84.19032288]
[-74.59565735 86.21265411]
[-59.69375610 87.92534637]
[-44.79185486 89.63803864]
[-31.26437569 83.40452576]
[-18.43789482 92.66692352]
[-3.53599167 94.37960815]
[11.36591053 96.09230042]
[26.26781273 97.80499268]
[41.16971588 99.51767731]
[56.07161713 101.23036957]
[70.97351837 102.94306183]
[74.94210815 88.09413147]
[85.52373505 78.03092957]
[99.05419922 75.14102173]
[111.37480927 79.50016022]
[122.46612549 69.40151215]
[133.55743408 59.30286026]
[134.45481873 43.75189590]
[145.84684753 33.66843033]
[160.66679382 34.61978149]
[171.75810242 24.52113152]
[156.99664307 27.18554878]
[141.99972534 26.88150787]
[127.35837555 23.62098694]
[113.64961243 17.53248405]
[101.41369629 8.85594559]
[91.13283539 -2.06668735]
[83.21219635 -14.80495739]
[77.96393585 -28.85685349]
[75.59488678 -43.66859055]
[76.19840240 -58.65644455]
[79.75070190 -73.22974396]
[86.11180115 -86.81417084]
[95.03099823 -98.87434387]
[106.15679169 -108.93499756]
[119.05072021 -116.59963226]
[133.20463562 -121.56618500]
[148.06072998 -123.63893127]
[163.03353882 -122.73617554]
[177.53298950 -118.89350891]
[190.98765564 -112.26235962]
[202.86727905 -103.10406494]
[212.70370483 -91.77954102]
[220.10928345 -78.73509979]
[224.79214478 -64.48480988]
[226.56774902 -49.59027481]
[225.36613464 -34.63848114]
[221.23461914 -20.21867943]
[214.33605957 -6.89914799]
[204.94232178 4.79519176]
[193.42536926 14.40227032]
[202.98802185 2.10619283]
[218.09007263 0.26698786]
[229.75357056 9.45928860]
[244.61662292 7.43695354]
[259.47967529 5.41461945]
[274.34271240 3.39228487]
[289.20574951 1.36995029]
[300.02233887 -10.47831154]
[316.01943970 -9.26512051]
[324.92547607 4.07886744]
[319.90850830 19.31728554]
[304.81707764 24.76052475]
[291.22808838 16.23299789]
[276.36505127 18.25533104]
[261.50198364 20.27766609]
[246.63894653 22.30000114]
[231.77590942 24.32233429]
[222.99244690 36.29674149]
[207.94801331 38.55940628]
[195.44770813 29.26531601]
[181.85675049 35.61244583]
[170.76544189 45.71109772]
[170.32714844 60.55506897]
[159.22283936 70.95453644]
[143.65608215 70.39417267]
[132.56477356 80.49282074]
[121.47345734 90.59147644]
[124.12122345 107.81153870]
[113.81788635 123.50409698]
[94.35623169 128.62422180]
[94.66828918 143.62097168]
[94.98034668 158.61772156]
[95.29240417 173.61448669]
[95.60446167 188.61123657]
[95.91651154 203.60798645]
[96.22856903 218.60473633]
[96.54062653 233.60150146]
[96.85268402 248.59825134]
[97.16474152 263.59500122]
[111.81973267 267.18576050]
[125.04553986 274.44802856]
[135.94041443 284.88662720]
[143.76150513 297.78982544]
[147.97557068 312.27789307]
[148.29530334 327.36300659]
[144.69886780 342.01660156]
[137.43150330 355.23959351]
[126.98870850 366.13043213]
[114.08247375 373.94656372]
[99.59278870 378.15502930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[31 50]
[34 49]
[35 48]
[64 127]
[65 126]
[66 125]
[69 122]
[70 121]
[100 120]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
