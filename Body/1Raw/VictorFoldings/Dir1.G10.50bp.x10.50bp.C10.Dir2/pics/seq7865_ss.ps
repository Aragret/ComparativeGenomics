%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUCCUAGAGGGGGGGGGGAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCxxxxxxxxxxCCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACCCCCCCCCCCUCCUCCUAGA\
) } def
/len { sequence length } bind def

/coor [
[83.28354645 359.83355713]
[70.06334686 352.56109619]
[59.17654419 342.11410522]
[51.36541367 329.20483398]
[47.16253281 314.71353149]
[46.85445786 299.62817383]
[50.46220016 284.97735596]
[57.73977280 271.75997925]
[68.19097900 260.87719727]
[81.10324097 253.07106018]
[95.59617615 248.87377930]
[95.28412628 233.87702942]
[94.97206879 218.88026428]
[94.66001129 203.88351440]
[94.34795380 188.88676453]
[94.03589630 173.89001465]
[93.72383881 158.89324951]
[93.41178894 143.89649963]
[93.09973145 128.89974976]
[92.78767395 113.90299225]
[87.18978882 108.91162872]
[81.15531158 122.64425659]
[66.23005676 121.14871979]
[63.04026031 106.49180603]
[75.99402618 98.92890167]
[70.39614105 93.93753815]
[55.46183395 95.33984375]
[40.52752686 96.74214935]
[36.96812439 99.47932434]
[33.10726166 100.76959229]
[29.44978714 100.70053101]
[26.41711426 99.51863861]
[24.30154419 97.58687592]
[9.30235672 97.74291229]
[-5.69683170 97.89894867]
[-19.52975845 106.70702362]
[-33.94726181 98.89244843]
[-34.11785507 82.49418640]
[-19.86604118 74.38136292]
[-5.85286808 82.89975739]
[9.14632034 82.74372101]
[24.14550781 82.58768463]
[39.12522125 81.80783844]
[54.05953217 80.40554047]
[68.99383545 79.00323486]
[87.44585419 80.73860931]
[98.47428131 91.60108948]
[105.92919159 78.58478546]
[113.38410187 65.56847382]
[120.83901215 52.55216217]
[128.29391479 39.53585434]
[113.09984589 23.40960884]
[116.65707397 3.30951643]
[133.35623169 -5.03818035]
[137.66381836 -19.40636444]
[141.97138977 -33.77454758]
[146.27897644 -48.14273453]
[134.19363403 -58.99115753]
[128.05647278 -73.96437073]
[129.04425049 -90.05817413]
[136.90959167 -104.06723785]
[150.04042053 -113.22347260]
[165.79011536 -115.74295807]
[169.79785156 -130.19764709]
[173.80558777 -144.65232849]
[177.51174927 -159.18727112]
[180.91473389 -173.79615784]
[184.31770325 -188.40505981]
[187.72068787 -203.01394653]
[174.34040833 -209.97233582]
[163.11154175 -220.04026794]
[154.73991394 -232.58485413]
[149.75178528 -246.81753540]
[148.46072388 -261.84365845]
[150.94786072 -276.71862793]
[157.05688477 -290.50741577]
[166.40376282 -302.34323120]
[178.40092468 -311.48208618]
[192.29425049 -317.34951782]
[207.21037292 -319.57662964]
[222.21165466 -318.02349854]
[236.35511780 -312.78768921]
[248.75166321 -304.19839478]
[258.62207031 -292.79547119]
[265.34582520 -279.29580688]
[268.50033569 -264.54791260]
[267.88723755 -249.47891235]
[263.54513550 -235.03602600]
[255.74691772 -222.12715149]
[244.98283386 -211.56376648]
[231.92948914 -204.00988770]
[217.40745544 -199.94035339]
[202.32957458 -199.61097717]
[198.92660522 -185.00207520]
[195.52362061 -170.39318848]
[192.12063599 -155.78428650]
[193.87461853 -151.27883911]
[192.77073669 -145.62086487]
[188.26028442 -140.64459229]
[184.25253296 -126.18990326]
[180.24479675 -111.73521423]
[191.14132690 -103.09424591]
[197.93240356 -90.90855408]
[199.55929565 -77.00978851]
[195.74238586 -63.50163651]
[187.02853394 -52.44142914]
[174.71305847 -45.52679825]
[160.64717102 -43.83514786]
[156.33958435 -29.46696472]
[152.03199768 -15.09877968]
[147.72441101 -0.73059583]
[157.54989624 9.89799309]
[158.28111267 26.28424835]
[172.92460632 29.53507423]
[184.45954895 19.15601158]
[199.89562988 17.57272339]
[213.29737854 25.39401627]
[219.51155090 39.61244583]
[216.14866638 54.76073074]
[204.50181580 65.01405334]
[189.04946899 66.42979431]
[175.73335266 58.46358109]
[169.67378235 44.17857742]
[155.03028870 40.92774963]
[141.31022644 46.99076462]
[133.85531616 60.00707245]
[126.40040588 73.02338409]
[118.94549561 86.03969574]
[111.49058533 99.05599976]
[107.78442383 113.59093475]
[108.09648132 128.58769226]
[108.40853882 143.58444214]
[108.72059631 158.58119202]
[109.03265381 173.57795715]
[109.34471130 188.57470703]
[109.65676117 203.57145691]
[109.96881866 218.56820679]
[110.28087616 233.56497192]
[110.59293365 248.56172180]
[125.24792480 252.15249634]
[138.47373962 259.41473389]
[149.36860657 269.85333252]
[157.18969727 282.75656128]
[161.40376282 297.24462891]
[161.72349548 312.32971191]
[158.12705994 326.98330688]
[150.85969543 340.20632935]
[140.41690063 351.09716797]
[127.51067352 358.91326904]
[113.02098083 363.12176514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 45]
[27 44]
[28 43]
[33 42]
[34 41]
[35 40]
[47 129]
[48 128]
[49 127]
[50 126]
[51 125]
[54 111]
[55 110]
[56 109]
[57 108]
[63 101]
[64 100]
[65 99]
[66 96]
[67 95]
[68 94]
[69 93]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
