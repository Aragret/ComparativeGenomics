%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCCCUCGGGGGGGGGGGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCxxxxxxxxxxCGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUCCCCCCCCCCAUAGCACUCG\
) } def
/len { sequence length } bind def

/coor [
[83.67919159 339.98822021]
[71.58425140 330.95410156]
[62.37611389 318.99111938]
[56.73808289 304.98703003]
[55.08853531 289.98095703]
[57.54987717 275.08651733]
[63.93946457 261.40896606]
[73.78314209 249.96324158]
[86.35044861 241.59870911]
[100.70880890 236.93606567]
[100.08483124 221.94905090]
[99.46085358 206.96203613]
[98.83687592 191.97502136]
[98.21289825 176.98800659]
[97.58892059 162.00099182]
[96.96494293 147.01397705]
[96.34096527 132.02696228]
[95.71698761 117.03994751]
[85.38978577 106.16111755]
[70.45547485 104.75881195]
[55.52116776 103.35651398]
[40.56092072 102.26519775]
[25.58120728 101.48535919]
[10.60149193 100.70551300]
[-1.08298063 111.00652313]
[-16.26343155 110.00225830]
[-26.01186562 98.79941559]
[-40.99158096 98.01956940]
[-55.97129440 97.23972321]
[-61.15687561 111.43836212]
[-70.29852295 123.47669983]
[-82.58335876 132.28431702]
[-96.91904449 137.07803345]
[-112.03083801 137.43159485]
[-126.57501984 133.31356812]
[-139.25833130 125.09013367]
[-148.95298767 113.49249268]
[-154.79692078 99.55191803]
[-156.27052307 84.50798035]
[-153.24275208 69.69839478]
[-145.98281860 56.44000244]
[-135.13630676 45.91173935]
[-121.66764069 39.04977036]
[-106.77446747 36.46426010]
[-91.78108215 38.38510132]
[-78.02066803 44.64150238]
[-66.71681213 54.67714691]
[-58.87462997 67.59967041]
[-55.19144821 82.26000977]
[-40.21173477 83.03985596]
[-25.23201942 83.81970215]
[-14.37299633 73.68968964]
[0.82967299 74.26716614]
[11.38133717 85.72579956]
[26.36105156 86.50563812]
[41.34076691 87.28548431]
[45.46738052 84.76625061]
[51.23131561 84.85753632]
[56.92347336 88.42220306]
[71.85778046 89.82450867]
[86.79209137 91.22681427]
[101.01886749 86.47299957]
[112.11018372 76.37434387]
[123.20149994 66.27569580]
[134.29281616 56.17704773]
[145.38412476 46.07839966]
[150.53355408 28.43007469]
[167.77143860 25.29072189]
[178.65025330 14.96351719]
[189.52908325 4.63631248]
[182.35990906 -8.63162899]
[178.87223816 -23.29183006]
[179.29792786 -38.34356308]
[183.60198975 -52.76097488]
[191.48526001 -65.56299591]
[202.40525818 -75.88010406]
[215.61346436 -83.01338196]
[230.20668030 -86.48186493]
[245.18875122 -86.05496216]
[259.53854370 -81.76777649]
[272.27963257 -73.91830444]
[283.15847778 -84.24550629]
[284.28576660 -97.13671112]
[293.61376953 -105.51568604]
[305.74838257 -105.27359009]
[316.83969116 -115.37223816]
[327.93099976 -125.47088623]
[339.02230835 -135.56953430]
[333.83581543 -149.85829163]
[334.51718140 -165.04394531]
[340.96249390 -178.81080627]
[352.18890381 -189.05950928]
[366.48449707 -194.22721863]
[381.66921997 -193.52587891]
[395.42758179 -187.06245422]
[405.66152954 -175.82255554]
[410.81042480 -161.52020264]
[410.08911133 -146.33639526]
[403.60757446 -132.58654785]
[392.35424805 -122.36740875]
[378.04513550 -117.23733521]
[362.86227417 -117.97861481]
[349.12097168 -124.47821808]
[338.02966309 -114.37957001]
[326.93832397 -104.28092194]
[315.84701538 -94.18227386]
[311.46185303 -77.21847534]
[293.48565674 -73.36668396]
[282.60684204 -63.03947830]
[289.78329468 -49.90753174]
[293.31863403 -35.35424423]
[292.96606445 -20.37024879]
[288.74356079 -5.97709274]
[280.93322754 6.84240007]
[270.06234741 17.21124268]
[256.86779785 24.41827965]
[242.24612427 27.96696281]
[227.19261169 27.60955048]
[212.73356628 23.36440468]
[199.85629272 15.51513767]
[188.97746277 25.84234238]
[178.09863281 36.16954803]
[177.45726013 48.28961182]
[168.42182922 56.98329163]
[155.48277283 57.16971207]
[144.39146423 67.26836395]
[133.30014038 77.36701202]
[122.20883179 87.46566010]
[111.11751556 97.56430817]
[114.33413696 105.86954498]
[110.70400238 116.41596985]
[111.32798004 131.40298462]
[111.95195770 146.38999939]
[112.57593536 161.37701416]
[113.19991302 176.36402893]
[113.82389069 191.35104370]
[114.44786835 206.33805847]
[115.07184601 221.32507324]
[115.69582367 236.31208801]
[130.39207458 239.76506042]
[143.61119080 247.05598450]
[154.37222290 257.64382935]
[161.87664795 270.74291992]
[165.56756592 285.38122559]
[165.17111206 300.47244263]
[160.71667480 314.89675903]
[152.53483582 327.58377075]
[141.23271179 337.59201050]
[127.64901733 344.17877197]
[112.79174042 346.85534668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 61]
[20 60]
[21 59]
[22 56]
[23 55]
[24 54]
[27 51]
[28 50]
[29 49]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
[68 122]
[69 121]
[70 120]
[81 109]
[82 108]
[85 106]
[86 105]
[87 104]
[88 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
