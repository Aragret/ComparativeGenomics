%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCACUGAGGGGGGGGGGUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUxxxxxxxxxxACCCCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCCCCCCCCCCCUCGCACGGA\
) } def
/len { sequence length } bind def

/coor [
[105.33380127 372.08279419]
[91.48786163 366.06677246]
[79.77920532 356.53735352]
[71.07667542 344.20169067]
[66.02607727 329.97515869]
[65.00218201 314.91348267]
[68.08098602 300.13430786]
[75.03400421 286.73440552]
[85.34529114 275.70806885]
[98.24967194 267.87356567]
[112.78955841 263.81222534]
[112.78955841 248.81224060]
[112.78955841 233.81224060]
[112.78955841 218.81224060]
[112.78955841 203.81224060]
[112.78955841 188.81224060]
[112.78955841 173.81224060]
[112.78955841 158.81224060]
[112.78955841 143.81224060]
[112.78955841 128.81224060]
[106.93974304 124.11865997]
[106.89533997 139.11859131]
[95.14034271 148.43632507]
[80.52629089 145.05555725]
[74.05759430 131.52204895]
[80.60520172 118.02653503]
[95.24011993 114.73149872]
[89.39031219 110.03791809]
[74.74681091 113.28874207]
[60.10330963 116.53956604]
[48.38803864 128.01495361]
[32.66730881 123.34690857]
[29.11325836 107.33750916]
[41.38198853 96.45586395]
[56.85248184 101.89606476]
[71.49598694 98.64524078]
[86.13948822 95.39441681]
[71.72888184 91.23092651]
[63.83029556 78.47898102]
[66.52177429 63.72242355]
[78.41370392 54.58010483]
[93.36625671 55.77222443]
[103.65939331 66.68328094]
[103.97805786 81.68181610]
[110.88505554 68.36666107]
[117.79205322 55.05150223]
[124.69905090 41.73634720]
[131.60604858 28.42119217]
[127.06163788 13.52199459]
[134.25599670 0.11692614]
[148.48811340 -4.12365818]
[155.39511108 -17.43881416]
[162.30210876 -30.75396919]
[155.52644348 -44.58858490]
[158.16540527 -59.58489227]
[169.00056458 -70.02823639]
[183.73120117 -72.06449890]
[190.63819885 -85.37965393]
[197.54519653 -98.69480896]
[204.45219421 -112.00996399]
[211.35919189 -125.32511902]
[206.81478882 -140.22431946]
[214.00914001 -153.62937927]
[228.24125671 -157.86996460]
[235.14825439 -171.18511963]
[242.05525208 -184.50027466]
[229.86445618 -193.28675842]
[219.08294678 -203.75466919]
[209.94055176 -215.68087769]
[202.63214111 -228.81118774]
[197.31349182 -242.86572266]
[194.09796143 -257.54489136]
[193.05409241 -272.53582764]
[194.20413208 -287.51898193]
[197.52359009 -302.17501831]
[202.94168091 -316.19152832]
[210.34294128 -329.26971436]
[219.56959534 -341.13085938]
[230.42498779 -351.52212524]
[242.67773438 -360.22201538]
[256.06665039 -367.04510498]
[270.30639648 -371.84591675]
[285.09338379 -374.52218628]
[300.11248779 -375.01684570]
[315.04354858 -373.31933594]
[329.56829834 -369.46585083]
[343.37713623 -363.53851318]
[356.17578125 -355.66369629]
[367.69137573 -346.00921631]
[377.67846680 -334.78088379]
[385.92422485 -322.21801758]
[392.25283813 -308.58840942]
[396.52944946 -294.18255615]
[398.66284180 -279.30752563]
[398.60763550 -264.28039551]
[396.36492920 -249.42143250]
[391.98257446 -235.04740906]
[385.55395508 -221.46467590]
[377.21609497 -208.96275330]
[367.14672852 -197.80813599]
[355.56048584 -188.23855591]
[342.70431519 -180.45800781]
[328.85226440 -174.63233948]
[314.29956055 -170.88571167]
[299.35644531 -169.29798889]
[284.34140015 -169.90301514]
[269.57446289 -172.68791199]
[255.37040710 -177.59327698]
[248.46340942 -164.27812195]
[241.55641174 -150.96296692]
[246.28662109 -136.88601685]
[239.47163391 -123.28416443]
[224.67434692 -118.41812134]
[217.76734924 -105.10296631]
[210.86035156 -91.78781128]
[203.95335388 -78.47265625]
[197.04635620 -65.15749359]
[203.86570740 -51.94256592]
[201.56878662 -37.07017136]
[190.82931519 -26.27585220]
[175.61726379 -23.84697151]
[168.71026611 -10.53181553]
[161.80326843 2.78334022]
[166.53347778 16.86029434]
[159.71847534 30.46214867]
[144.92120361 35.32818985]
[138.01420593 48.64334488]
[131.10720825 61.95849991]
[124.20021057 75.27365875]
[117.29321289 88.58881378]
[127.78955841 128.81224060]
[127.78955841 143.81224060]
[127.78955841 158.81224060]
[127.78955841 173.81224060]
[127.78955841 188.81224060]
[127.78955841 203.81224060]
[127.78955841 218.81224060]
[127.78955841 233.81224060]
[127.78955841 248.81224060]
[127.78955841 263.81222534]
[142.32945251 267.87356567]
[155.23382568 275.70806885]
[165.54510498 286.73440552]
[172.49813843 300.13430786]
[175.57693481 314.91348267]
[174.55303955 329.97515869]
[169.50244141 344.20169067]
[160.79991150 356.53735352]
[149.09124756 366.06677246]
[135.24531555 372.08279419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 37]
[29 36]
[30 35]
[44 130]
[45 129]
[46 128]
[47 127]
[48 126]
[51 123]
[52 122]
[53 121]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[64 110]
[65 109]
[66 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
