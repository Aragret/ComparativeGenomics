%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAGGUGGGGGGGGGGGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUxxxxxxxxxxAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCCCCCCCCCCCUAACAGGU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 414.95172119]
[71.19830322 408.93569946]
[59.48964310 399.40628052]
[50.78712082 387.07061768]
[45.73651886 372.84408569]
[44.71262741 357.78240967]
[47.79142761 343.00323486]
[54.74444962 329.60330200]
[65.05573273 318.57699585]
[77.96011353 310.74246216]
[92.50000000 306.68115234]
[92.50000000 291.68115234]
[92.50000000 276.68115234]
[92.50000000 261.68115234]
[92.50000000 246.68116760]
[92.50000000 231.68116760]
[92.50000000 216.68116760]
[92.50000000 201.68116760]
[92.50000000 186.68116760]
[92.50000000 171.68116760]
[92.50000000 156.68116760]
[92.50000000 141.68116760]
[76.30630493 135.10240173]
[64.14859009 122.54429626]
[58.09778595 106.14601898]
[59.18458939 88.70082092]
[67.22387695 73.18032837]
[80.84622955 62.22828674]
[76.53865051 47.86009979]
[72.23106384 33.49191666]
[67.92347717 19.12373352]
[64.02484894 15.46036243]
[62.15342331 11.09571648]
[62.23136139 6.93691730]
[63.82561111 3.72353005]
[60.42263412 -10.88536263]
[57.01965332 -25.49425507]
[46.35331726 -37.17927933]
[51.00150299 -51.33002853]
[47.59852219 -65.93891907]
[32.59565353 -74.87487030]
[28.74144745 -91.56106567]
[37.93672180 -105.60758972]
[34.23056030 -120.14253235]
[30.52440071 -134.67745972]
[15.61978149 -132.81854248]
[0.59970599 -132.84239197]
[-14.29893780 -134.74859619]
[-28.84117699 -138.50712585]
[-42.79765701 -144.05868530]
[-55.94826889 -151.31573486]
[-68.08560944 -160.16380310]
[-79.01824188 -170.46334839]
[-88.57376099 -182.05192566]
[-96.60145569 -194.74678040]
[-102.97470856 -208.34770203]
[-107.59301758 -222.64016724]
[-110.38353729 -237.39875793]
[-111.30226135 -252.39073181]
[-110.33469391 -267.37963867]
[-107.49610901 -282.12905884]
[-102.83125305 -296.40640259]
[-96.41371918 -309.98648071]
[-88.34471130 -322.65512085]
[-78.75148773 -334.21249390]
[-67.78534698 -344.47637939]
[-55.61924744 -353.28485107]
[-42.44506073 -360.49899292]
[-28.47056770 -366.00506592]
[-13.91615963 -369.71618652]
[0.98861611 -371.57385254]
[16.00868988 -371.54873657]
[30.90717316 -369.64129639]
[45.44909668 -365.88153076]
[59.40510941 -360.32879639]
[72.55510712 -353.07064819]
[84.69170380 -344.22155762]
[95.62347412 -333.92108154]
[105.17801666 -322.33169556]
[113.20463562 -309.63616943]
[119.57675171 -296.03472900]
[124.19385529 -281.74188232]
[126.98313141 -266.98303223]
[127.90059662 -251.99098206]
[126.93177032 -237.00216675]
[124.09193420 -222.25297546]
[119.42588806 -207.97602844]
[113.00720215 -194.39649963]
[104.93712616 -181.72854614]
[95.34293365 -170.17195129]
[84.37593079 -159.90901184]
[72.20909119 -151.10156250]
[59.03429413 -143.88850403]
[45.05933762 -138.38362122]
[48.76549911 -123.84868622]
[52.47166061 -109.31375122]
[64.39404297 -104.32842255]
[71.35494995 -93.20996857]
[70.60984039 -79.91813660]
[62.20741653 -69.34189606]
[65.61039734 -54.73300552]
[76.03332520 -44.09290695]
[71.62854767 -28.89723206]
[75.03152466 -14.28834057]
[78.43450165 0.32055217]
[82.29166412 14.81614876]
[86.59925079 29.18433380]
[90.90682983 43.55251694]
[95.21441650 57.92070007]
[107.91670990 58.39597321]
[119.90582275 62.61915588]
[130.10171509 70.20980072]
[137.58589172 80.48410797]
[141.68412781 92.51650238]
[142.02723694 105.22305298]
[156.34983826 109.67987061]
[170.67243958 114.13668060]
[184.54518127 106.56551361]
[199.68453979 111.10148621]
[207.10861206 125.05350494]
[202.41282654 140.14405823]
[188.38310242 147.42021179]
[173.34303284 142.56515503]
[166.21562195 128.45927429]
[151.89302063 124.00246429]
[137.57041931 119.54564667]
[129.98640442 129.90626526]
[119.64611053 137.51799011]
[107.50000000 141.68116760]
[107.50000000 156.68116760]
[107.50000000 171.68116760]
[107.50000000 186.68116760]
[107.50000000 201.68116760]
[107.50000000 216.68116760]
[107.50000000 231.68116760]
[107.50000000 246.68116760]
[107.50000000 261.68115234]
[107.50000000 276.68115234]
[107.50000000 291.68115234]
[107.50000000 306.68115234]
[122.03988647 310.74246216]
[134.94427490 318.57699585]
[145.25555420 329.60330200]
[152.20857239 343.00323486]
[155.28736877 357.78240967]
[154.26348877 372.84408569]
[149.21287537 387.07061768]
[140.51036072 399.40628052]
[128.80169678 408.93569946]
[114.95575714 414.95172119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[28 109]
[29 108]
[30 107]
[31 106]
[35 105]
[36 104]
[37 103]
[39 101]
[40 100]
[43 96]
[44 95]
[45 94]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
