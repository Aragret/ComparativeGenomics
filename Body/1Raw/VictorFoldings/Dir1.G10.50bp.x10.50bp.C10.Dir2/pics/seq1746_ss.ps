%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAAACCCGGGGGGGGGGCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCCCCCCCCCCCACUAAAACAC\
) } def
/len { sequence length } bind def

/coor [
[93.06809998 598.79241943]
[81.85266113 588.72711182]
[73.26126099 576.34625244]
[67.75721741 562.31762695]
[65.63735962 547.39776611]
[67.01600647 532.39123535]
[71.81880188 518.10736084]
[79.78675079 505.31637573]
[90.49014282 494.70816040]
[103.35176086 486.85479736]
[117.67799377 482.17977905]
[116.43111420 467.23168945]
[115.18424225 452.28359985]
[113.93737030 437.33551025]
[112.69049072 422.38742065]
[111.44361877 407.43933105]
[110.19674683 392.49124146]
[108.94986725 377.54315186]
[107.70299530 362.59509277]
[106.45612335 347.64700317]
[97.68764496 335.60693359]
[104.25102997 321.21136475]
[103.00415039 306.26327515]
[99.28990173 299.81735229]
[101.89013672 290.99176025]
[100.95450592 276.02099609]
[86.88426971 273.12576294]
[74.03747559 266.67105103]
[63.29817200 257.09396362]
[55.40720749 245.04673767]
[50.91114426 231.35226440]
[50.12437057 216.94792175]
[53.10717010 202.82142639]
[59.66110992 189.94306946]
[69.34226227 179.19909668]
[81.49124146 171.33068848]
[95.27813721 166.88290405]
[94.65415955 151.89587402]
[94.03018188 136.90885925]
[93.40621185 121.92184448]
[88.40486145 119.73824310]
[84.06246948 116.43291473]
[80.62580872 112.19370270]
[78.29019165 107.26151276]
[77.18833923 101.91665649]
[77.38287354 96.46287537]
[64.14028931 89.41773987]
[47.77868271 90.52672577]
[38.86336136 76.76267242]
[46.56563950 62.28486633]
[62.96207809 61.98682785]
[71.18542480 76.17515564]
[84.42800903 83.22029114]
[90.52970123 79.15872192]
[97.60232544 77.23387146]
[101.00530243 62.62497711]
[104.40827942 48.01608658]
[107.81125641 33.40719223]
[109.52394867 18.50529099]
[109.52394867 3.50529003]
[109.52394867 -11.49470997]
[101.78665161 -25.29488182]
[109.52394867 -38.02215576]
[109.52394867 -53.02215576]
[109.52394867 -68.02215576]
[106.37828064 -76.66834259]
[109.68323517 -83.33339691]
[109.99528503 -98.33015442]
[95.94844055 -104.07910156]
[84.92958832 -114.51698303]
[78.42894745 -128.23216248]
[77.32567596 -143.36976624]
[81.76898193 -157.88256836]
[91.15794373 -169.80783081]
[104.22277832 -177.53276062]
[119.19657898 -180.01260376]
[134.05426025 -176.91201782]
[146.78645325 -168.65029907]
[155.67120361 -156.34480286]
[159.50695801 -141.65971375]
[157.77493286 -126.58110809]
[150.70939636 -113.14821625]
[139.26588440 -103.17774200]
[124.99204254 -98.01809692]
[124.67998505 -83.02133942]
[124.52394867 -68.02215576]
[124.52394867 -53.02215576]
[124.52394867 -38.02215576]
[132.26124573 -25.29488182]
[124.52394867 -11.49470997]
[124.52394867 3.50529003]
[124.52394867 18.50529099]
[133.53996277 6.51731777]
[147.03880310 -0.02343202]
[162.03463745 0.32979423]
[175.21054077 7.49886608]
[183.65211487 19.89805031]
[185.49217224 34.78476334]
[180.32369995 48.86619949]
[169.28991699 59.02767563]
[154.83139038 63.02156830]
[140.14622498 59.96446228]
[128.48263550 50.53256607]
[122.42015076 36.81016922]
[119.01717377 51.41906357]
[115.61419678 66.02795410]
[112.21121979 80.63684845]
[122.79178619 102.14010620]
[108.39322662 121.29787445]
[109.01720428 136.28488159]
[109.64118195 151.27189636]
[110.26515961 166.25892639]
[125.51262665 169.98931885]
[139.08552551 177.84571838]
[149.89472961 189.18826294]
[157.07550049 203.09779358]
[160.05673218 218.45022583]
[158.60626221 234.00747681]
[152.84906006 248.51725769]
[143.25637817 260.81390381]
[130.60726929 269.91198730]
[115.92530060 275.08535767]
[116.86093140 290.05615234]
[117.95223999 305.01638794]
[119.19911194 319.96447754]
[128.05677795 333.07373047]
[121.40420532 346.40011597]
[122.65108490 361.34820557]
[123.89795685 376.29629517]
[125.14482880 391.24438477]
[126.39170837 406.19247437]
[127.63858032 421.14056396]
[128.88545227 436.08865356]
[130.13232422 451.03671265]
[131.37919617 465.98480225]
[132.62608337 480.93289185]
[147.52885437 483.16983032]
[161.51383972 488.78381348]
[173.82682800 497.47216797]
[183.80380249 508.76626587]
[190.90670776 522.05706787]
[194.75250244 536.62780762]
[195.13377380 551.69268799]
[192.02998352 566.43933105]
[185.60850525 580.07244873]
[176.21562195 591.85675049]
[164.35791016 601.15686035]
[150.67481995 607.47113037]
[135.90428162 610.45904541]
[120.84283447 609.95953369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[22 125]
[23 124]
[25 123]
[26 122]
[37 112]
[38 111]
[39 110]
[40 109]
[46 53]
[47 52]
[55 107]
[56 106]
[57 105]
[58 104]
[59 92]
[60 91]
[61 90]
[63 88]
[64 87]
[65 86]
[67 85]
[68 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
