%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAGGCCUGGGGGGGGGGAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCxxxxxxxxxxCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCCCCCCCCCCCAAAAAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[84.10380554 414.96347046]
[71.54557800 406.61230469]
[61.45935822 395.39987183]
[54.47916412 382.03094482]
[51.04377747 367.34597778]
[51.36915588 352.26800537]
[55.43484116 337.74487305]
[62.98526001 324.68954468]
[73.54579163 313.92263794]
[86.45258331 306.12100220]
[100.89431000 301.77505493]
[100.27033234 286.78805542]
[99.64635468 271.80102539]
[99.02237701 256.81399536]
[98.39839935 241.82699585]
[97.77442169 226.83998108]
[97.15045166 211.85296631]
[96.52647400 196.86595154]
[95.90249634 181.87892151]
[95.27851868 166.89190674]
[94.65454102 151.90489197]
[82.58089447 149.18605042]
[71.48716736 143.70024109]
[61.99742508 135.75607300]
[54.64551926 125.80044556]
[49.84502411 114.39342499]
[34.98197937 116.41575623]
[20.11893082 118.43809509]
[5.25588417 120.46042633]
[-0.48580828 134.70571899]
[-12.59079266 144.15902710]
[-27.80289078 146.27743530]
[-42.03012085 140.49111938]
[-51.44543457 128.35656738]
[-53.51615524 113.13790894]
[-47.68527222 98.92887878]
[-35.52126312 89.55165100]
[-20.29618263 87.52864075]
[-6.10550594 93.40403748]
[3.23354983 105.59738159]
[18.09659576 103.57504272]
[32.95964432 101.55271149]
[47.82268906 99.53038025]
[49.29544830 87.68170166]
[53.42309189 76.47801208]
[59.98950195 66.50593567]
[68.65086365 58.28760910]
[78.95365906 52.25333786]
[90.35844421 48.71908188]
[89.73446655 33.73206711]
[89.11048889 18.74504852]
[88.48651123 3.75803304]
[87.86253357 -11.22898293]
[78.89345551 -20.55687141]
[78.71701813 -33.09432983]
[86.88050079 -42.07569504]
[86.56844330 -57.07244873]
[86.25638580 -72.06919861]
[76.34934235 -87.55565643]
[85.32218170 -102.60517883]
[73.17740631 -93.80151367]
[58.66679764 -97.60179901]
[52.39642715 -111.22833252]
[58.94942856 -124.72122192]
[73.53609467 -128.21826172]
[85.49443817 -119.16397858]
[86.43006897 -134.13476562]
[87.36569977 -149.10556030]
[88.30132294 -164.07635498]
[74.50577545 -170.40464783]
[63.93066788 -181.29185486]
[58.00618362 -195.26557922]
[57.53356934 -210.43598938]
[62.57674026 -224.75138855]
[72.45364380 -236.27577209]
[85.82852173 -243.45053101]
[100.89251709 -245.30534363]
[115.60836029 -241.58937073]
[127.98584747 -232.80517578]
[136.35102844 -220.14073181]
[139.57258606 -205.30880737]
[137.21481323 -190.31529236]
[129.59660339 -177.18794250]
[117.74823761 -167.70213318]
[103.27211761 -163.14071655]
[102.33648682 -148.16993713]
[101.40085602 -133.19914246]
[100.46523285 -118.22834778]
[100.30919647 -103.22915649]
[109.01699066 -94.77448273]
[109.62292480 -82.25043488]
[101.25314331 -72.38125610]
[101.56519318 -57.38450241]
[101.87725067 -42.38774872]
[111.77133179 -27.92721558]
[102.84954834 -11.85296059]
[103.47352600 3.13405585]
[104.09750366 18.12107277]
[104.72148132 33.10808945]
[105.34545898 48.09510422]
[114.80183411 49.96403503]
[123.75306702 53.54051208]
[131.89369202 58.70249176]
[138.94590759 65.27380371]
[144.66903687 73.03020477]
[148.86775208 81.70698547]
[151.39880371 91.00804138]
[152.17578125 100.61595917]
[166.99354553 102.94706726]
[181.81130981 105.27816772]
[190.05682373 92.47460938]
[202.80072021 84.13716125]
[217.83503723 81.71034241]
[232.55496216 85.61460876]
[244.41021729 95.17353058]
[251.34678650 108.73096466]
[252.16285706 123.93799591]
[246.71707153 138.15992737]
[235.95291138 148.93270874]
[221.73536682 154.38990784]
[206.52767944 153.58601379]
[192.96469116 146.66030884]
[183.39627075 134.81272888]
[179.48019409 120.09592438]
[164.66244507 117.76482391]
[149.84468079 115.43372345]
[134.72619629 138.94590759]
[109.64155579 151.28091431]
[110.26553345 166.26792908]
[110.88951111 181.25494385]
[111.51348877 196.24197388]
[112.13746643 211.22898865]
[112.76144409 226.21600342]
[113.38542175 241.20301819]
[114.00939941 256.19003296]
[114.63337708 271.17703247]
[115.25735474 286.16406250]
[115.88132477 301.15109253]
[130.63433838 304.28152466]
[144.14497375 310.98327637]
[155.56394958 320.83505249]
[164.17346191 333.21759033]
[169.43231201 347.35250854]
[171.00991821 362.35122681]
[168.80711365 377.27096558]
[162.96235657 391.17382812]
[153.84307861 403.18588257]
[142.02250671 412.55203247]
[128.24369812 418.68353271]
[113.37280273 421.19494629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[26 43]
[27 42]
[28 41]
[29 40]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[56 94]
[57 93]
[58 92]
[60 89]
[66 88]
[67 87]
[68 86]
[69 85]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
