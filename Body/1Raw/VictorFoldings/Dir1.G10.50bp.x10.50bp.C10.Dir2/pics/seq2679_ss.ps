%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAGUAAAGGGGGGGGGGAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAxxxxxxxxxxCCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCCCCCCCCCCCAAAAAAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[92.65640259 508.94381714]
[79.73724365 501.18545532]
[68.95594788 490.65643311]
[60.89393234 477.92456055]
[55.98597336 463.67645264]
[54.49674988 448.68048096]
[56.50657272 433.74536133]
[61.90705872 419.67657471]
[70.40695953 407.23275757]
[81.54789734 397.08502197]
[94.72904205 389.78063965]
[109.23956299 385.71350098]
[108.62373352 370.72616577]
[108.00791168 355.73880005]
[107.39208221 340.75143433]
[106.77626038 325.76409912]
[106.16043854 310.77673340]
[105.54460907 295.78939819]
[104.92878723 280.80203247]
[104.31295776 265.81466675]
[103.69713593 250.82733154]
[93.51251221 236.56835938]
[102.11074066 220.31718445]
[101.18732452 205.34562683]
[100.26391602 190.37408447]
[99.34049988 175.40252686]
[98.41708374 160.43098450]
[97.49367523 145.45942688]
[93.92078400 138.93664551]
[96.70820618 130.17160034]
[96.09238434 115.18424988]
[89.94095612 112.30155945]
[85.51328278 107.02989197]
[83.68874359 100.29734802]
[84.87936401 93.33197021]
[88.93981934 87.43778992]
[82.95152283 73.68495941]
[76.96322632 59.93213272]
[67.15498352 59.13270569]
[58.37953186 54.80945969]
[51.84681320 47.60614777]
[48.43994522 38.56019592]
[48.59598541 28.95340729]
[52.25032425 20.13037109]
[58.85172272 13.31025887]
[54.01190567 -0.88749409]
[49.17208862 -15.08524704]
[40.63162994 -27.41653061]
[29.04258156 -36.93986893]
[17.45353317 -46.46320724]
[5.86448526 -55.98654175]
[-5.72456312 -65.50988007]
[-21.76712990 -65.38495636]
[-31.75481987 -77.93985748]
[-28.02593231 -93.54354095]
[-13.44095039 -100.22619629]
[0.81177551 -92.86145782]
[3.79877472 -77.09893036]
[15.38782310 -67.57559204]
[26.97687149 -58.05225372]
[38.56591797 -48.52891541]
[50.15496826 -39.00557709]
[45.23067474 -53.17425156]
[43.40716171 -68.06300354]
[44.76656342 -83.00127411]
[49.24764633 -97.31629944]
[56.64860153 -110.36336517]
[66.63610840 -121.55486298]
[78.76036072 -130.38676453]
[92.47531128 -136.46131897]
[107.16327667 -139.50492859]
[122.16276550 -139.38050842]
[136.79823303 -136.09368896]
[150.41052246 -129.79248047]
[162.38661194 -120.76068115]
[172.18710327 -109.40505219]
[179.37062073 -96.23702240]
[183.61364746 -81.84963989]
[184.72506714 -66.89087677]
[182.65484619 -52.03442001]
[177.49621582 -37.94937897]
[169.48149109 -25.27009392]
[158.97164917 -14.56760597]
[146.44001770 -6.32392740]
[132.45098877 -0.91032785]
[117.63458252 1.42937851]
[102.65809631 0.58981824]
[88.19602966 -3.39119744]
[74.89970398 -10.33437443]
[63.36984253 -19.92506218]
[68.20965576 -5.72731066]
[73.04947662 8.47044182]
[92.07241821 15.80330753]
[99.72853088 35.01142502]
[90.71604919 53.94383621]
[96.70434570 67.69666290]
[102.69264221 81.44949341]
[116.18802643 87.99736786]
[130.69665527 84.18950653]
[145.20527649 80.38164520]
[159.71391296 76.57379150]
[174.22253418 72.76593018]
[188.73115540 68.95806885]
[192.70498657 54.12215805]
[203.57571411 43.27214813]
[218.41917419 39.32663727]
[233.24256897 43.34694672]
[244.05844116 54.25163269]
[247.95741272 69.10739136]
[243.89065552 83.91810608]
[232.95211792 94.69975281]
[218.08421326 98.55213165]
[203.28633118 94.43897247]
[192.53901672 83.46669769]
[178.03039551 87.27455902]
[163.52175903 91.08241272]
[149.01313782 94.89027405]
[134.50451660 98.69813538]
[119.99588776 102.50598907]
[111.07973480 114.56842041]
[111.69556427 129.55577087]
[112.46522522 144.53601074]
[113.38863373 159.50756836]
[114.31204987 174.47911072]
[115.23546600 189.45066833]
[116.15887451 204.42221069]
[117.08229065 219.39376831]
[126.23493195 228.53886414]
[126.66349792 241.06832886]
[118.68448639 250.21150208]
[119.30031586 265.19885254]
[119.91613770 280.18621826]
[120.53195953 295.17355347]
[121.14778900 310.16091919]
[121.76361084 325.14825439]
[122.37944031 340.13562012]
[122.99526215 355.12298584]
[123.61109161 370.11032104]
[124.22691345 385.09768677]
[139.02218628 387.96066284]
[152.75816345 394.15902710]
[164.69406128 403.35852051]
[174.18621826 415.06304932]
[180.72271729 428.64135742]
[183.95104980 443.36123657]
[183.69712830 458.42883301]
[179.97463989 473.03155518]
[172.98432922 486.38192749]
[163.10319519 497.75997925]
[150.86408997 506.55206299]
[136.92706299 512.28411865]
[122.04372406 514.64691162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[30 121]
[31 120]
[36 97]
[37 96]
[38 95]
[45 92]
[46 91]
[47 90]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
