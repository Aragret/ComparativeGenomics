%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUUUCGUGGGGGGGGGGGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAxxxxxxxxxxAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCACCCCCCCCCCUCAAUUUCAU\
) } def
/len { sequence length } bind def

/coor [
[114.82628632 416.53610229]
[101.60608673 409.26361084]
[90.71928406 398.81661987]
[82.90814972 385.90737915]
[78.70526886 371.41604614]
[78.39720154 356.33071899]
[82.00494385 341.67990112]
[89.28251648 328.46249390]
[99.73371887 317.57974243]
[112.64598083 309.77359009]
[127.13891602 305.57629395]
[126.82686615 290.57955933]
[126.51480865 275.58279419]
[126.20275116 260.58602905]
[125.89069366 245.58929443]
[125.57863617 230.59252930]
[125.26657867 215.59577942]
[124.95452881 200.59902954]
[124.64247131 185.60227966]
[124.17443085 170.60957336]
[123.55045319 155.62255859]
[122.92647552 140.63554382]
[122.30249786 125.64852905]
[99.48162079 134.30711365]
[76.49559021 125.43608856]
[62.59303665 131.06805420]
[52.94084549 144.32577515]
[36.66399002 142.32675171]
[30.50670433 127.12741852]
[40.80307388 114.36353302]
[56.96107864 117.16548920]
[70.86363220 111.53353882]
[68.84130096 96.67048645]
[53.93939590 94.95780182]
[39.03749466 93.24510956]
[29.95412827 105.63010406]
[15.88875198 111.79943848]
[0.62488222 110.09361267]
[-11.73157597 100.97146606]
[-17.85679817 86.88681793]
[-16.10313034 71.62837219]
[-6.94230080 59.30057144]
[7.16147423 53.21952438]
[22.41435051 55.02101135]
[34.71337891 64.22043610]
[40.75018311 78.34320831]
[55.65208817 80.05589294]
[70.55399323 81.76858521]
[89.39582062 67.25588989]
[113.00492096 68.36516571]
[130.18659973 84.37892914]
[133.89276123 69.84399414]
[127.72275543 68.34538269]
[121.68402100 64.80396271]
[116.42173767 59.23002625]
[112.57464600 51.82923508]
[110.71798706 42.99775314]
[111.30908203 33.30123520]
[110.68510437 18.31421661]
[110.06112671 3.32720113]
[109.43714905 -11.65981483]
[108.81317139 -26.64683151]
[97.46492767 -37.31712341]
[97.04561615 -52.52497482]
[107.28804779 -63.27803421]
[106.66407013 -78.26505280]
[92.20903778 -82.82881927]
[80.18854523 -92.06372833]
[72.05412292 -104.85462189]
[68.78804016 -119.65693665]
[70.78469086 -134.68321228]
[77.80297089 -148.11897278]
[88.99539185 -158.34176636]
[103.01040649 -164.11715698]
[118.15564728 -164.74771118]
[132.60223389 -160.15731812]
[144.60569763 -150.90026855]
[152.71653748 -138.09440613]
[155.95533752 -123.28610229]
[153.93099976 -108.26352692]
[146.88796997 -94.84072876]
[135.67672729 -84.63857269]
[121.65108490 -78.88903046]
[122.27506256 -63.90201187]
[133.37588501 -54.03757095]
[134.22218323 -38.84749222]
[123.80018616 -27.27080917]
[124.42416382 -12.28379250]
[125.04814148 2.70322371]
[125.67211914 17.69023895]
[126.29609680 32.67725754]
[132.68476868 36.60596848]
[140.54240417 23.82874107]
[153.31950378 31.68659210]
[145.46212769 44.46339417]
[151.85081482 48.39210892]
[165.50704956 42.18669891]
[179.16329956 35.98129272]
[192.81953430 29.77588654]
[206.47576904 23.57047844]
[220.13201904 17.36507225]
[232.05088806 5.30783606]
[246.93638611 13.42313480]
[243.25895691 29.97344780]
[226.33741760 31.02131271]
[212.68118286 37.22671890]
[199.02494812 43.43212891]
[185.36869812 49.63753510]
[171.71246338 55.84294128]
[158.05621338 62.04834747]
[148.42768860 73.55015564]
[144.72152710 88.08509064]
[152.44561768 100.94348907]
[167.01831055 104.49825287]
[181.59101868 108.05301666]
[194.08724976 98.65203857]
[209.69990540 99.53450775]
[221.05718994 110.28375244]
[222.79652405 125.82430267]
[214.09664917 138.81838989]
[199.06538391 143.13059998]
[184.80003357 136.72483826]
[178.03625488 122.62571716]
[163.46356201 119.07095337]
[148.89085388 115.51618958]
[137.28950500 125.02455139]
[137.91348267 140.01156616]
[138.53746033 154.99858093]
[139.16143799 169.98559570]
[142.66406250 178.49345398]
[139.63922119 185.29022217]
[139.95127869 200.28697205]
[140.26333618 215.28372192]
[140.57539368 230.28047180]
[140.88745117 245.27723694]
[141.19950867 260.27398682]
[141.51156616 275.27075195]
[141.82362366 290.26748657]
[142.13566589 305.26425171]
[156.79066467 308.85501099]
[170.01647949 316.11727905]
[180.91134644 326.55587769]
[188.73243713 339.45907593]
[192.94650269 353.94714355]
[193.26623535 369.03225708]
[189.66979980 383.68585205]
[182.40243530 396.90884399]
[171.95964050 407.79968262]
[159.05340576 415.61581421]
[144.56372070 419.82427979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[25 32]
[26 31]
[33 48]
[34 47]
[35 46]
[51 112]
[52 111]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[65 84]
[66 83]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
