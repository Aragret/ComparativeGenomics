%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCCAUACCGGGGGGGGGGCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAAxxxxxxxxxxCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCCCCCCCCCCCGGGCCCAUAAC\
) } def
/len { sequence length } bind def

/coor [
[98.73674011 458.49371338]
[85.03459167 452.23284912]
[73.06947327 443.07949829]
[63.44155884 431.49282837]
[56.63378143 418.05398560]
[52.98761368 403.43710327]
[52.68594360 388.37536621]
[55.74390793 373.62420654]
[62.00811768 359.92355347]
[71.16436768 347.96066284]
[82.75337219 338.33557129]
[96.19384003 331.53103638]
[110.81160736 327.88839722]
[110.50759888 312.89147949]
[110.20359802 297.89456177]
[109.89958954 282.89764404]
[109.59558868 267.90072632]
[109.29158020 252.90380859]
[108.98757935 237.90689087]
[108.68357849 222.90997314]
[108.37957001 207.91305542]
[108.07556915 192.91613770]
[98.19010925 178.44665527]
[107.12828064 162.37840271]
[106.52040100 147.39071655]
[105.91251373 132.40304565]
[81.13980103 123.77558136]
[72.27598572 101.36178589]
[82.50238800 81.91082764]
[75.76033783 68.51139832]
[69.01829529 55.11196518]
[62.27624512 41.71253204]
[55.53419495 28.31310081]
[48.79214859 14.91366863]
[42.05009842 1.51423645]
[35.30805206 -11.88519573]
[28.56600189 -25.28462791]
[14.51263046 -19.99928665]
[-0.02292984 -16.23769379]
[-14.87598038 -14.04247284]
[-29.87822342 -13.43849659]
[-44.85967255 -14.43260956]
[-59.65057755 -17.01354599]
[-74.08334351 -21.15206337]
[-87.99443817 -26.80126762]
[-101.22624207 -33.89714813]
[-113.62882233 -42.35930634]
[-125.06164551 -52.09186172]
[-135.39517212 -62.98452759]
[-144.51232910 -74.91388702]
[-152.30979919 -87.74477386]
[-158.69921875 -101.33180237]
[-163.60821533 -115.52101898]
[-166.98114014 -130.15165710]
[-168.77980042 -145.05792236]
[-168.98381042 -160.07093811]
[-167.59085083 -175.02058411]
[-164.61669922 -189.73745728]
[-160.09507751 -204.05482483]
[-154.07719421 -217.81044006]
[-146.63124084 -230.84846497]
[-137.84161377 -243.02116394]
[-127.80786896 -254.19058228]
[-116.64371490 -264.23019409]
[-104.47564697 -273.02624512]
[-91.44154358 -280.47903442]
[-77.68908691 -286.50415039]
[-63.37409592 -291.03329468]
[-48.65878296 -294.01516724]
[-33.70987701 -295.41601562]
[-18.69676208 -295.21987915]
[-3.78954697 -293.42907715]
[10.84285641 -290.06381226]
[25.03465271 -285.16229248]
[38.62503815 -278.77999878]
[51.46002197 -270.98928833]
[63.39417648 -261.87841797]
[74.29227448 -251.55061340]
[84.03083038 -240.12289429]
[92.49951172 -227.72476196]
[99.60234833 -214.49670410]
[105.25886536 -200.58857727]
[109.40496826 -186.15798950]
[111.99368286 -171.36843872]
[112.99566650 -156.38751221]
[112.39958191 -141.38496399]
[110.21216583 -126.53075409]
[106.45821381 -111.99321747]
[101.18025970 -97.93707275]
[94.43811035 -84.52157593]
[86.30815125 -71.89874268]
[76.88250732 -60.21160507]
[66.26797485 -49.59257507]
[54.58482361 -40.16197968]
[41.96543503 -32.02667618]
[48.70748138 -18.62724495]
[55.44953156 -5.22781181]
[62.19157791 8.17162037]
[68.93362427 21.57105255]
[75.67567444 34.97048569]
[82.41772461 48.36991882]
[89.15977478 61.76934814]
[95.90181732 75.16878510]
[107.15282440 73.85078430]
[118.66239166 77.73415375]
[128.00810242 86.72385406]
[132.93565369 99.60255432]
[147.76268005 97.33113861]
[162.58969116 95.05971527]
[177.41671753 92.78829956]
[189.86804199 82.11605835]
[205.24415588 87.81755829]
[207.72743225 104.02759552]
[194.76330566 114.07067108]
[179.68814087 107.61532593]
[164.86111450 109.88674164]
[150.03408813 112.15815735]
[135.20706177 114.42957306]
[150.08673096 112.53342438]
[163.46083069 119.32559967]
[170.70762634 132.45890808]
[169.32283020 147.39485168]
[159.78500366 158.97196960]
[145.39013672 163.18952942]
[131.11270142 158.59007263]
[121.88660431 146.76303101]
[120.90019226 131.79515076]
[121.50807953 146.78283691]
[122.11595917 161.77050781]
[131.07293701 171.10472107]
[131.23907471 183.63856506]
[123.07248688 192.61213684]
[123.37648773 207.60905457]
[123.68049622 222.60597229]
[123.98449707 237.60289001]
[124.28850555 252.59980774]
[124.59250641 267.59674072]
[124.89651489 282.59365845]
[125.20051575 297.59057617]
[125.50451660 312.58749390]
[125.80852509 327.58441162]
[140.56190491 330.63165283]
[154.26708984 336.88589478]
[166.23663330 346.03344727]
[175.87016296 357.61544800]
[182.68444824 371.05096436]
[186.33770752 385.66607666]
[186.64666748 400.72769165]
[183.59585571 415.48034668]
[177.33828735 429.18399048]
[168.18783569 441.15133667]
[156.60350037 450.78204346]
[143.16632080 457.59307861]
[128.55032349 461.24279785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 129]
[25 128]
[26 127]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[36 96]
[37 95]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
