%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCAGGGGGGGGGGUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCxxxxxxxxxxCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[74.14926147 391.24459839]
[60.30332565 385.22857666]
[48.59466171 375.69915771]
[39.89213943 363.36349487]
[34.84153748 349.13696289]
[33.81764603 334.07528687]
[36.89644241 319.29611206]
[43.84946442 305.89617920]
[54.16075134 294.86984253]
[67.06513214 287.03533936]
[81.60501862 282.97402954]
[81.60501862 267.97402954]
[81.60501862 252.97402954]
[81.60501862 237.97402954]
[81.60501862 222.97402954]
[81.60501862 207.97402954]
[81.60501862 192.97402954]
[81.60501862 177.97402954]
[81.60501862 162.97402954]
[81.60501862 147.97402954]
[81.60501862 132.97402954]
[80.45790100 147.93011475]
[70.39575958 159.05456543]
[55.62944794 161.69198608]
[42.33842468 154.73866272]
[36.08476257 141.10446167]
[39.48552322 126.49504852]
[51.11753845 117.02423859]
[66.11421204 116.65579987]
[51.13449478 115.87595367]
[36.15478134 115.09610748]
[19.98858833 123.85019684]
[5.63175774 113.80622101]
[-9.36093807 113.33818054]
[-24.35363388 112.87014008]
[-39.34633255 112.40209961]
[-53.53368759 120.62712097]
[-67.61363983 112.21955872]
[-67.10193634 95.82839966]
[-52.52497864 88.31545258]
[-38.87828827 97.40940094]
[-23.88559341 97.87744141]
[-8.89289665 98.34548187]
[6.09979963 98.81352997]
[15.16559887 90.74391937]
[27.70054245 91.05076599]
[36.93462753 100.11639404]
[51.91434097 100.89624023]
[66.89405823 101.67607880]
[78.70414734 76.03651428]
[105.18846130 69.46860504]
[105.18846130 54.46860504]
[105.18846130 39.46860504]
[105.18846130 24.46860695]
[90.31514740 22.33193970]
[75.89733124 18.10024834]
[62.22852707 11.85968208]
[49.58702850 3.73729181]
[38.23019028 -6.10156155]
[28.38922882 -17.45657158]
[20.26449203 -30.09656334]
[14.02138901 -43.76420593]
[9.78701973 -58.18124008]
[7.64759302 -73.05415344]
[7.64666271 -88.08015442]
[9.78424931 -102.95333862]
[14.01683331 -117.37089539]
[20.25824547 -131.03930664]
[28.38141823 -143.68031311]
[38.22097397 -155.03652954]
[49.57659149 -164.87680054]
[62.21708679 -173.00074768]
[75.88511658 -179.24301147]
[90.30241394 -183.47648621]
[105.17546082 -185.61499023]
[120.20146179 -185.61499023]
[135.07450867 -183.47648621]
[149.49180603 -179.24301147]
[163.15983582 -173.00074768]
[175.80032349 -164.87680054]
[187.15594482 -155.03652954]
[196.99549866 -143.68031311]
[205.11868286 -131.03930664]
[211.36009216 -117.37089539]
[215.59266663 -102.95333862]
[217.73025513 -88.08015442]
[217.72932434 -73.05415344]
[215.58990479 -58.18124008]
[211.35552979 -43.76420593]
[205.11242676 -30.09656334]
[196.98768616 -17.45657158]
[187.14672852 -6.10156155]
[175.78990173 3.73729181]
[163.14839172 11.85968208]
[149.47959900 18.10024834]
[135.06176758 22.33193970]
[120.18846130 24.46860695]
[120.18846130 39.46860504]
[120.18846130 54.46860504]
[120.18846130 69.46860504]
[130.73974609 80.13023376]
[145.73893738 80.28627014]
[160.73812866 80.44230652]
[169.41658020 77.38674927]
[176.04689026 80.76085663]
[191.03958130 81.22889709]
[206.03227234 81.69693756]
[212.61950684 67.96637726]
[224.22615051 58.10709000]
[238.84132385 53.82727051]
[253.93283081 55.86841583]
[266.88598633 63.87688828]
[275.45657349 76.46517181]
[278.15969849 91.45226288]
[274.52700806 106.24156952]
[265.18792725 118.27074432]
[251.76045227 125.45566559]
[236.57101440 126.55150604]
[222.25126648 121.36839294]
[211.28218079 110.80434418]
[205.56423950 96.68963623]
[190.57154846 96.22159576]
[175.57884216 95.75354767]
[160.58209229 95.44149017]
[145.58290100 95.28545380]
[130.58370972 95.12941742]
[130.10729980 109.31007385]
[123.28733063 122.03321838]
[111.33979034 130.56796265]
[96.60501862 132.97402954]
[96.60501862 147.97402954]
[96.60501862 162.97402954]
[96.60501862 177.97402954]
[96.60501862 192.97402954]
[96.60501862 207.97402954]
[96.60501862 222.97402954]
[96.60501862 237.97402954]
[96.60501862 252.97402954]
[96.60501862 267.97402954]
[96.60501862 282.97402954]
[111.14490509 287.03533936]
[124.04928589 294.86984253]
[134.36056519 305.89617920]
[141.31359863 319.29611206]
[144.39239502 334.07528687]
[143.36849976 349.13696289]
[138.31790161 363.36349487]
[129.61537170 375.69915771]
[117.90670776 385.22857666]
[104.06077576 391.24459839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 49]
[30 48]
[31 47]
[33 44]
[34 43]
[35 42]
[36 41]
[51 100]
[52 99]
[53 98]
[54 97]
[101 126]
[102 125]
[103 124]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
