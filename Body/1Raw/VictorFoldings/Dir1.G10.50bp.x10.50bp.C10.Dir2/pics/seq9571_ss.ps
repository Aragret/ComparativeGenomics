%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUCACUUCUAGGGGGGGGGGGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAxxxxxxxxxxUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCCCCCCCCCCCUCUCACUUCAA\
) } def
/len { sequence length } bind def

/coor [
[92.65763855 533.42736816]
[78.38587189 528.61791992]
[65.48188782 520.85253906]
[54.54922867 510.49438477]
[46.09924316 498.02795410]
[40.52714920 484.03631592]
[38.09355927 469.17388916]
[38.91230011 454.13580322]
[42.94507599 439.62545776]
[50.00326920 426.32147217]
[59.75675583 414.84609985]
[71.74934387 405.73611450]
[85.42012024 399.41757202]
[100.12967682 396.18603516]
[100.12967682 381.18603516]
[100.12967682 366.18603516]
[100.12967682 351.18603516]
[100.12967682 336.18603516]
[100.12967682 321.18603516]
[100.12967682 306.18603516]
[100.12967682 291.18603516]
[100.12967682 276.18603516]
[100.12967682 261.18603516]
[99.67951965 246.19277954]
[98.77960205 231.21980286]
[85.67265320 226.58476257]
[75.29645538 217.26712036]
[69.24562836 204.65431213]
[68.46702576 190.64340210]
[73.11172485 177.35589600]
[82.50711060 166.81640625]
[95.25407410 160.64418030]
[94.65393066 145.65618896]
[94.05378723 130.66819763]
[93.45363617 115.68021393]
[83.78630066 104.21101379]
[69.11617279 101.08255005]
[54.44604111 97.95408630]
[45.14195633 110.05354309]
[31.50565147 116.91020966]
[16.24462318 117.16270447]
[2.38895845 110.76087952]
[-7.31028843 98.97583008]
[-10.92732525 84.14748383]
[-7.74398756 69.22002411]
[1.60767150 57.15730286]
[15.27087307 50.35438538]
[30.53277779 50.16199493]
[44.36312485 56.61833191]
[54.01588440 68.44148254]
[57.57450104 83.28395844]
[72.24462891 86.41242218]
[86.91476440 89.54087830]
[99.85482788 81.95439911]
[104.28981018 67.62503052]
[108.72480011 53.29565430]
[113.15978241 38.96628189]
[117.59476471 24.63690948]
[122.02974701 10.30753803]
[108.28378296 4.26219702]
[95.31654358 -3.31069112]
[83.29710388 -12.31239796]
[72.38214874 -22.62556648]
[62.71397400 -34.11574554]
[54.41863251 -46.63313675]
[47.60426712 -60.01454926]
[42.35971832 -74.08552551]
[38.75336075 -88.66263580]
[36.83220673 -103.55581665]
[36.62130737 -118.57091522]
[38.12340546 -133.51219177]
[41.31892395 -148.18482971]
[46.16620255 -162.39755249]
[52.60204697 -175.96507263]
[60.54254913 -188.71052551]
[69.88419342 -200.46771240]
[80.50518036 -211.08337402]
[92.26705933 -220.41911316]
[105.01648712 -228.35321045]
[118.58723450 -234.78224182]
[132.80239868 -239.62237549]
[147.47663879 -242.81053162]
[162.41865540 -244.30513000]
[177.43365479 -244.08668518]
[192.32588196 -242.15806580]
[206.90116882 -238.54438782]
[220.96951294 -233.29277039]
[234.34750366 -226.47167969]
[246.86071777 -218.17005920]
[258.34603882 -208.49612427]
[268.65374756 -197.57598877]
[277.64941406 -185.55201721]
[285.21578979 -172.58099365]
[291.25421143 -158.83198547]
[295.68600464 -144.48426819]
[298.45333862 -129.72486877]
[299.52017212 -114.74623871]
[298.87255859 -99.74362183]
[296.51898193 -84.91262817]
[292.49008179 -70.44660187]
[286.83843994 -56.53414154]
[279.63769531 -43.35662460]
[270.98171997 -31.08584213]
[260.98339844 -19.88177299]
[249.77304077 -9.89048576]
[237.49682617 -1.24223554]
[224.31478882 5.95022964]
[210.39877319 11.59314060]
[195.93022156 15.61293125]
[181.09774780 17.95719528]
[166.09474182 18.59536934]
[151.11677551 17.51913452]
[136.35911560 14.74252129]
[131.92413330 29.07189369]
[127.48915100 43.40126801]
[123.05416870 57.73064041]
[118.61918640 72.06001282]
[114.18420410 86.38938141]
[118.26856232 102.72090912]
[108.44162750 115.08007050]
[109.04177094 130.06805420]
[109.64191437 145.05604553]
[110.24205780 160.04403687]
[125.20220184 166.37423706]
[135.87617493 178.54222107]
[140.17285156 194.08750916]
[137.28387451 209.89578247]
[127.83527374 222.82281494]
[113.75257874 230.31988525]
[114.65249634 245.29286194]
[117.59726715 249.73809814]
[118.42063141 254.40049744]
[117.40315247 258.42202759]
[115.12967682 261.18603516]
[115.12967682 276.18603516]
[115.12967682 291.18603516]
[115.12967682 306.18603516]
[115.12967682 321.18603516]
[115.12967682 336.18603516]
[115.12967682 351.18603516]
[115.12967682 366.18603516]
[115.12967682 381.18603516]
[115.12967682 396.18603516]
[129.83923340 399.41757202]
[143.51000977 405.73611450]
[155.50259399 414.84609985]
[165.25608826 426.32147217]
[172.31427002 439.62545776]
[176.34706116 454.13580322]
[177.16580200 469.17388916]
[174.73220825 484.03631592]
[169.16011047 498.02795410]
[160.71012878 510.49438477]
[149.77746582 520.85253906]
[136.87348938 528.61791992]
[122.60171509 533.42736816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 130]
[25 129]
[32 123]
[33 122]
[34 121]
[35 120]
[36 53]
[37 52]
[38 51]
[54 118]
[55 117]
[56 116]
[57 115]
[58 114]
[59 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
