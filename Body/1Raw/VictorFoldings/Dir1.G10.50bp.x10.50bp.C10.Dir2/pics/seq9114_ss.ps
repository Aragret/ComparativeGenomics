%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCAAAUAGGGGGGGGGGAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUxxxxxxxxxxCUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGACCCCCCCCCCAAACAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.99221039 378.03475952]
[72.14627075 372.01873779]
[60.43760681 362.48931885]
[51.73508453 350.15365601]
[46.68448257 335.92715454]
[45.66059113 320.86544800]
[48.73938751 306.08630371]
[55.69240952 292.68637085]
[66.00369263 281.66003418]
[78.90807343 273.82553101]
[93.44795990 269.76422119]
[93.44795990 254.76422119]
[93.44795990 239.76422119]
[93.44795990 224.76422119]
[93.44795990 209.76422119]
[93.44795990 194.76422119]
[93.44795990 179.76422119]
[93.44795990 164.76422119]
[93.44795990 149.76422119]
[93.44795990 134.76422119]
[87.36204529 130.38111877]
[78.59563446 142.55281067]
[66.42408752 133.78619385]
[75.19020844 121.61490631]
[69.10428619 117.23180389]
[54.87751007 121.98561859]
[40.65073013 126.73943329]
[26.42395210 131.49324036]
[13.31750774 142.24766541]
[-0.64484632 132.63053894]
[4.73126888 116.55155945]
[21.67013741 117.26646423]
[35.89691544 112.51264954]
[50.12369537 107.75883484]
[64.35047150 103.00502014]
[67.81048584 91.56920624]
[74.53841400 82.71466827]
[83.24826813 77.22298431]
[92.53426361 75.33177948]
[101.07875061 76.75249481]
[106.56578064 62.79210663]
[112.05281067 48.83171463]
[117.53984833 34.87132645]
[123.02687836 20.91093636]
[109.52067566 14.36836147]
[96.55493927 6.81108761]
[84.20574951 -1.71653461]
[72.54558563 -11.16446209]
[61.64287186 -21.47724915]
[51.56159210 -32.59437561]
[42.36090469 -44.45059967]
[34.09480286 -56.97634506]
[26.81179810 -70.09810638]
[20.55463219 -83.73887634]
[15.36002159 -97.81860352]
[11.25845337 -112.25466919]
[8.27399635 -126.96234894]
[6.42416477 -141.85533142]
[5.71981478 -156.84620667]
[6.16507959 -171.84703064]
[7.75734568 -186.76974487]
[10.48726940 -201.52677917]
[14.33882999 -216.03155518]
[19.28942490 -230.19891357]
[25.31000328 -243.94575500]
[32.36523056 -257.19137573]
[40.41370392 -269.85806274]
[49.40819168 -281.87145996]
[59.29591370 -293.16110229]
[70.01883698 -303.66070557]
[81.51403809 -313.30865479]
[93.71406555 -322.04833984]
[106.54730988 -329.82849121]
[119.93846130 -336.60342407]
[133.80894470 -342.33337402]
[148.07736206 -346.98474121]
[162.65995789 -350.53021240]
[177.47117615 -352.94900513]
[192.42410278 -354.22689819]
[207.43096924 -354.35638428]
[222.40370178 -353.33673096]
[237.25445557 -351.17388916]
[251.89607239 -347.88061523]
[266.24264526 -343.47616577]
[280.20993042 -337.98641968]
[293.71600342 -331.44357300]
[306.68161011 -323.88604736]
[319.03063965 -315.35821533]
[330.69061279 -305.91006470]
[341.59313965 -295.59707642]
[351.67419434 -284.47973633]
[360.87466431 -272.62335205]
[369.14053345 -260.09744263]
[376.42327881 -246.97554016]
[382.68020630 -233.33465576]
[387.87454224 -219.25482178]
[391.97583008 -204.81867981]
[394.96002197 -190.11094666]
[396.80957031 -175.21794128]
[397.51361084 -160.22703552]
[397.06808472 -145.22622681]
[395.47552490 -130.30354309]
[392.74533081 -115.54655457]
[388.89349365 -101.04186249]
[383.94262695 -86.87458801]
[377.92178345 -73.12786865]
[370.86630249 -59.88238144]
[362.81759644 -47.21585083]
[353.82287598 -35.20261383]
[343.93493652 -23.91317368]
[333.21182251 -13.41377449]
[321.71643066 -3.76603651]
[309.51623535 4.97342491]
[296.68286133 12.75332165]
[283.29156494 19.52799797]
[269.42098999 25.25769615]
[255.15248108 29.90879250]
[240.56980896 33.45399475]
[225.75854492 35.87248993]
[210.80560303 37.15009308]
[195.79873657 37.27930450]
[180.82600403 36.25936508]
[165.97529602 34.09626007]
[151.33374023 30.80268669]
[136.98727417 26.39796829]
[131.50022888 40.35835648]
[126.01320648 54.31874847]
[120.52616882 68.27913666]
[115.03913879 82.23952484]
[128.73245239 106.79168701]
[108.44795990 134.76422119]
[108.44795990 149.76422119]
[108.44795990 164.76422119]
[108.44795990 179.76422119]
[108.44795990 194.76422119]
[108.44795990 209.76422119]
[108.44795990 224.76422119]
[108.44795990 239.76422119]
[108.44795990 254.76422119]
[108.44795990 269.76422119]
[122.98784637 273.82553101]
[135.89222717 281.66003418]
[146.20352173 292.68637085]
[153.15653992 306.08630371]
[156.23533630 320.86544800]
[155.21144104 335.92715454]
[150.16084290 350.15365601]
[141.45831299 362.48931885]
[129.74964905 372.01873779]
[115.90371704 378.03475952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 35]
[26 34]
[27 33]
[28 32]
[40 129]
[41 128]
[42 127]
[43 126]
[44 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
