%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUAACAUGGGGGGGGGGGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCxxxxxxxxxxCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUACCCCCCCCCCAAGCUAACUU\
) } def
/len { sequence length } bind def

/coor [
[45.95353317 428.16433716]
[32.10759354 422.14831543]
[20.39893150 412.61889648]
[11.69640827 400.28323364]
[6.64580631 386.05670166]
[5.62191486 370.99502563]
[8.70071411 356.21585083]
[15.65373516 342.81591797]
[25.96501923 331.78961182]
[38.86940002 323.95507812]
[53.40928650 319.89376831]
[53.40928650 304.89376831]
[53.40928650 289.89376831]
[53.40928650 274.89376831]
[53.40928650 259.89376831]
[53.40928650 244.89378357]
[53.40928650 229.89378357]
[53.40928650 214.89378357]
[53.40928650 199.89378357]
[53.40928650 184.89378357]
[45.67198563 172.16650391]
[53.40928650 158.36633301]
[53.40928650 143.36633301]
[41.05771637 134.85523987]
[27.04100227 140.19676208]
[13.02428913 145.53826904]
[5.17770386 159.53150940]
[-10.67753696 161.97914124]
[-22.37864876 151.00354004]
[-20.94954109 135.02427673]
[-7.48650217 126.29924011]
[7.68277645 131.52156067]
[21.69948959 126.18004608]
[35.71620178 120.83853149]
[36.95876312 113.44217682]
[22.09708214 111.40982819]
[7.23540115 109.37747192]
[-7.62627935 107.34512329]
[-22.59122467 108.37001038]
[-28.91787529 94.76951599]
[-18.49343681 83.98382568]
[-4.68595028 89.84276581]
[10.02399349 92.77833557]
[24.73393631 95.71389771]
[39.44388199 98.64946747]
[40.68643951 91.25311279]
[29.18463707 81.62458801]
[17.68283272 71.99606323]
[6.18102932 62.36753845]
[-5.32077408 52.73900986]
[-16.82257652 43.11048508]
[-32.54101181 44.75559235]
[-44.76611328 34.73948288]
[-46.24494553 19.00453568]
[-36.10014343 6.88601494]
[-20.35044098 5.57362366]
[-8.33985329 15.84598160]
[-7.19405127 31.60868073]
[4.30775213 41.23720551]
[15.80955601 50.86573410]
[27.31135941 60.49425888]
[38.81316376 70.12278748]
[50.31496429 79.75131226]
[66.21421814 63.34328079]
[86.14826202 56.08188629]
[105.62850952 58.12682343]
[110.23407745 43.85136414]
[114.83964539 29.57590103]
[101.73512268 22.16938782]
[90.38999939 12.27630520]
[81.26885223 0.30176777]
[74.74518585 -13.26387310]
[71.08612823 -27.86511421]
[70.44153595 -42.90404510]
[72.83779144 -57.76482391]
[78.17677307 -71.83892059]
[86.23985291 -84.55000305]
[96.69684601 -95.37756348]
[109.11956024 -103.87821960]
[122.99927521 -109.70388031]
[137.76763916 -112.61597443]
[152.81990051 -112.49526978]
[167.53965759 -109.34669495]
[181.32415771 -103.29918671]
[193.60894775 -94.60039520]
[203.89094543 -83.60652161]
[211.74913025 -70.76776123]
[216.86170959 -56.60984802]
[219.01933289 -41.71254730]
[218.13362122 -26.68589211]
[214.24087524 -12.14521027]
[207.50048828 1.31406164]
[198.18846130 13.14077663]
[186.68614197 22.85063934]
[173.46452332 30.04603386]
[159.06503296 34.43231583]
[144.07731628 35.82986832]
[129.11509705 34.18146515]
[124.50953674 48.45692825]
[119.90397644 62.73238754]
[126.19737244 66.85274506]
[131.66033936 72.02383423]
[136.11970520 78.08174896]
[139.43411255 84.83444977]
[141.49848938 92.06788635]
[156.49768066 91.91184998]
[171.49687195 91.75581360]
[186.49604797 91.59977722]
[201.49523926 91.44374084]
[211.28126526 79.24669647]
[226.62791443 76.24427032]
[240.28895569 83.85411835]
[245.81408691 98.48309326]
[240.59449768 113.22385406]
[227.09471130 121.11624908]
[211.68893433 118.43374634]
[201.65127563 106.44292450]
[186.65208435 106.59896088]
[171.65290833 106.75499725]
[156.65371704 106.91103363]
[141.65452576 107.06707001]
[139.34899902 119.41652679]
[133.33721924 130.97717285]
[123.90020752 140.62821960]
[111.65884399 147.35153198]
[97.53601074 150.33444214]
[82.68788147 149.05870056]
[68.40928650 143.36633301]
[68.40928650 158.36633301]
[76.14659119 172.16650391]
[68.40928650 184.89378357]
[68.40928650 199.89378357]
[68.40928650 214.89378357]
[68.40928650 229.89378357]
[68.40928650 244.89378357]
[68.40928650 259.89376831]
[68.40928650 274.89376831]
[68.40928650 289.89376831]
[68.40928650 304.89376831]
[68.40928650 319.89376831]
[82.94917297 323.95507812]
[95.85355377 331.78961182]
[106.16484070 342.81591797]
[113.11785889 356.21585083]
[116.19666290 370.99502563]
[115.17276764 386.05670166]
[110.12216949 400.28323364]
[101.41963959 412.61889648]
[89.71098328 422.14831543]
[75.86504364 428.16433716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 34]
[25 33]
[26 32]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[66 100]
[67 99]
[68 98]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
