%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACACCUAUGGGGGGGGGGUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCxxxxxxxxxxCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCCCCCCCCCCCAACACAUAU\
) } def
/len { sequence length } bind def

/coor [
[88.19171143 451.24987793]
[74.16976929 445.69686890]
[61.96981049 436.83053589]
[52.35873795 425.20825195]
[45.94071198 411.56054688]
[43.11917496 396.74536133]
[44.07149124 381.69396973]
[48.73779678 367.35253906]
[56.82476425 354.62258911]
[67.82403564 344.30432129]
[81.04419708 337.04635620]
[95.65421295 333.30490112]
[95.65421295 318.30490112]
[95.65421295 303.30490112]
[95.65421295 288.30490112]
[95.65421295 273.30490112]
[95.65421295 258.30490112]
[95.65421295 243.30491638]
[95.65421295 228.30491638]
[95.65421295 213.30491638]
[95.65421295 198.30491638]
[81.95999908 186.22412109]
[81.37233734 167.65435791]
[94.72410583 154.28205872]
[94.10827637 139.29470825]
[93.49245453 124.30735016]
[83.53895569 119.95770264]
[76.10355377 111.63252258]
[72.72412872 100.68009186]
[74.25290680 89.01810455]
[80.65888977 78.79821777]
[90.98927307 72.00929260]
[103.50469971 70.09233856]
[92.87336731 58.37545395]
[97.56386566 44.23867798]
[94.20460510 29.61966896]
[90.84534454 15.00066185]
[87.48608398 0.38165474]
[84.12683105 -14.23735237]
[80.61766052 -28.82110214]
[76.95895386 -43.36805725]
[73.30024719 -57.91500854]
[63.89639282 -69.60121918]
[50.46894073 -76.28729248]
[37.04149246 -82.97336578]
[23.34412003 -75.68216705]
[7.98175859 -77.86791229]
[-3.13844967 -88.69013977]
[-5.74055767 -103.98748016]
[1.17599785 -117.87779999]
[14.95166016 -125.01998138]
[30.28940582 -122.66770935]
[41.29156113 -111.72548676]
[43.72756958 -96.40081787]
[57.15501785 -89.71474457]
[70.58246613 -83.02867126]
[77.15328217 -86.64451599]
[77.46095276 -101.64136505]
[90.29491425 -93.87622070]
[96.86573029 -97.49207306]
[98.40302277 -112.41308594]
[92.12078857 -126.93356323]
[101.12171936 -138.80085754]
[102.50574493 -153.73686218]
[103.73635864 -168.68629456]
[104.96696472 -183.63572693]
[106.19757843 -198.58517456]
[107.42819214 -213.53460693]
[93.32759857 -218.95216370]
[81.32532501 -228.12397766]
[72.39433289 -240.30650330]
[67.25862885 -254.51217651]
[66.33452606 -269.58941650]
[69.69695282 -284.31594849]
[77.07331848 -297.49795532]
[87.86566925 -308.06689453]
[101.19910431 -315.16589355]
[115.99274445 -318.21954346]
[131.04734802 -316.98028564]
[145.14248657 -311.54855347]
[157.13554382 -302.36471558]
[166.05429077 -290.17318726]
[171.17572021 -275.96237183]
[172.08467102 -260.88421631]
[168.70745850 -246.16108704]
[161.31785583 -232.98646545]
[150.51489258 -222.42840576]
[137.17433167 -215.34277344]
[122.37762451 -212.30398560]
[121.14701843 -197.35455322]
[119.91640472 -182.40512085]
[118.68579102 -167.45568848]
[117.45517731 -152.50625610]
[120.05690765 -145.53895569]
[116.04273224 -137.26356506]
[122.43492126 -123.81034088]
[113.32403564 -110.87579346]
[111.78674316 -95.95478058]
[87.84720612 -61.57371521]
[91.50590515 -47.02676010]
[95.16461182 -32.47980881]
[99.87522125 -26.72460556]
[98.74583435 -17.59661102]
[102.10509491 -2.97760415]
[105.46435547 11.64140320]
[108.82360840 26.26041031]
[112.18286896 40.87941742]
[122.57392883 51.55065155]
[118.12370300 66.73307800]
[129.61437988 76.37489319]
[144.59461975 77.14455414]
[159.57485962 77.91421509]
[174.55509949 78.68387604]
[187.38166809 69.04755402]
[202.87614441 73.20694733]
[209.15249634 87.97132111]
[201.39605713 102.01471710]
[185.55686951 104.56423950]
[173.78543091 93.66411591]
[158.80519104 92.89445496]
[143.82495117 92.12479401]
[128.84471130 91.35513306]
[127.80794525 106.06973267]
[120.14065552 117.70005035]
[108.47980499 123.69152832]
[109.09563446 138.67887878]
[109.71145630 153.66622925]
[119.91522217 159.90895081]
[125.75341797 170.21142578]
[125.86324310 181.93234253]
[120.33373260 192.13093567]
[110.65421295 198.30491638]
[110.65421295 213.30491638]
[110.65421295 228.30491638]
[110.65421295 243.30491638]
[110.65421295 258.30490112]
[110.65421295 273.30490112]
[110.65421295 288.30490112]
[110.65421295 303.30490112]
[110.65421295 318.30490112]
[110.65421295 333.30490112]
[125.26422119 337.04635620]
[138.48437500 344.30432129]
[149.48365784 354.62258911]
[157.57061768 367.35253906]
[162.23692322 381.69396973]
[163.18923950 396.74536133]
[160.36770630 411.56054688]
[153.94967651 425.20825195]
[144.33860779 436.83053589]
[132.13865662 445.69686890]
[118.11670685 451.24987793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 127]
[25 126]
[26 125]
[33 109]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 101]
[41 100]
[42 99]
[43 56]
[44 55]
[45 54]
[60 98]
[61 97]
[63 95]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
