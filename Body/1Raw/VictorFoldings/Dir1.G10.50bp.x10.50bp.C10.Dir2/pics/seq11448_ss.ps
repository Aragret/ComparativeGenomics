%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUUAUUGGGGGGGGGGCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUxxxxxxxxxxGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCCCCCCCCCCCUUCAUUAUU\
) } def
/len { sequence length } bind def

/coor [
[73.47784424 396.76477051]
[60.91962433 388.41360474]
[50.83340073 377.20117188]
[43.85320663 363.83227539]
[40.41782379 349.14727783]
[40.74319839 334.06930542]
[44.80888367 319.54620361]
[52.35930252 306.49084473]
[62.91983414 295.72393799]
[75.82662964 287.92233276]
[90.26835632 283.57635498]
[89.64437866 268.58935547]
[89.02040100 253.60234070]
[88.39642334 238.61532593]
[87.77244568 223.62829590]
[87.14846802 208.64128113]
[86.52449036 193.65426636]
[85.90051270 178.66725159]
[85.27653503 163.68023682]
[84.65255737 148.69322205]
[84.02857971 133.70620728]
[72.04174805 124.68867493]
[57.46904755 128.24343872]
[42.89634323 131.79820251]
[40.95277786 146.85101318]
[33.69932175 160.18336487]
[22.11694336 169.99218750]
[7.77206421 174.95089722]
[-7.39528847 174.38888550]
[-21.33385468 168.38215637]
[-32.15855789 157.74307251]
[-38.40544510 143.91046143]
[-39.22967529 128.75511169]
[-34.51978302 114.32661438]
[-24.91273499 102.57633209]
[-11.70781136 95.09339142]
[3.30913162 92.88979340]
[18.10717773 96.26355743]
[30.68500900 104.75841522]
[39.34158325 117.22549438]
[53.91428375 113.67073822]
[68.48698425 110.11597443]
[68.97822571 94.08963776]
[76.75984192 80.93009186]
[89.28578186 73.54139709]
[103.07793427 73.14729309]
[108.85420990 59.30407333]
[114.63048553 45.46085739]
[120.40675354 31.61763954]
[114.63957214 17.14776039]
[120.69474030 3.19105411]
[134.52510071 -2.21789813]
[140.30137634 -16.06111526]
[146.07763672 -29.90433311]
[151.85391235 -43.74755096]
[157.63018799 -57.59077072]
[162.82560730 -71.66228485]
[167.43116760 -85.93775177]
[160.48114014 -99.87815094]
[165.35519409 -114.28989410]
[178.68806458 -120.82977295]
[183.29364014 -135.10523987]
[187.89920044 -149.38069153]
[192.50476074 -163.65615845]
[197.11032104 -177.93161011]
[199.74919128 -192.69767761]
[200.37316895 -207.68469238]
[200.99714661 -222.67170715]
[186.97151184 -228.42124939]
[175.76026917 -238.62339783]
[168.71723938 -252.04620361]
[166.69290161 -267.06878662]
[169.93170166 -281.87707520]
[178.04254150 -294.68295288]
[190.04598999 -303.94000244]
[204.49258423 -308.53039551]
[219.63781738 -307.89984131]
[233.65283203 -302.12445068]
[244.84526062 -291.90164185]
[251.86354065 -278.46588135]
[253.86018372 -263.43960571]
[250.59410095 -248.63729858]
[242.45968628 -235.84640503]
[230.43919373 -226.61149597]
[215.98416138 -222.04772949]
[215.36018372 -207.06071472]
[214.73620605 -192.07369995]
[223.75170898 -204.06204224]
[236.80854797 -211.44575500]
[251.72853088 -212.99305725]
[266.02267456 -208.44581604]
[277.30639648 -198.56262207]
[283.69732666 -184.99220276]
[284.12930298 -169.99842834]
[278.53027344 -156.08258057]
[267.83425903 -145.56613159]
[253.82562256 -140.20349121]
[238.84130859 -140.88922119]
[225.38102722 -147.50897217]
[215.69027710 -158.95838928]
[211.38578796 -173.32604980]
[206.78022766 -159.05058289]
[202.17465210 -144.77513123]
[197.56909180 -130.49966431]
[192.96353149 -116.22420502]
[199.96057129 -103.12546539]
[195.49322510 -88.58251190]
[181.70661926 -81.33218384]
[177.10105896 -67.05672455]
[178.31700134 -64.46273041]
[178.54444885 -61.21584320]
[177.52368164 -57.70302582]
[175.14454651 -54.39988327]
[171.47340393 -51.81449509]
[165.69712830 -37.97127914]
[159.92085266 -24.12806129]
[154.14459229 -10.28484344]
[148.36831665 3.55837440]
[154.25230408 17.19341087]
[148.59155273 31.31468773]
[134.24996948 37.39390945]
[128.47369385 51.23712921]
[122.69742584 65.08034515]
[116.92115784 78.92356110]
[127.50682068 92.36933136]
[128.20787048 110.39624023]
[117.67377472 126.17098999]
[99.01559448 133.08222961]
[99.63957214 148.06924438]
[100.26354980 163.05625916]
[100.88752747 178.04327393]
[101.51150513 193.03028870]
[102.13548279 208.01730347]
[102.75946045 223.00431824]
[103.38343811 237.99134827]
[104.00741577 252.97836304]
[104.63139343 267.96536255]
[105.25537109 282.95239258]
[120.00837708 286.08282471]
[133.51901245 292.78457642]
[144.93798828 302.63638306]
[153.54750061 315.01892090]
[158.80635071 329.15380859]
[160.38395691 344.15252686]
[158.18115234 359.07226562]
[152.33641052 372.97512817]
[143.21713257 384.98721313]
[131.39656067 394.35336304]
[117.61774445 400.48486328]
[102.74684143 402.99624634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 42]
[23 41]
[24 40]
[46 124]
[47 123]
[48 122]
[49 121]
[52 118]
[53 117]
[54 116]
[55 115]
[56 114]
[57 109]
[58 108]
[61 105]
[62 104]
[63 103]
[64 102]
[65 101]
[66 87]
[67 86]
[68 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
