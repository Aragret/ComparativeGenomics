%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAACACGGGGGGGGGGCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACxxxxxxxxxxAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCCUACCAC\
) } def
/len { sequence length } bind def

/coor [
[84.41599274 402.13195801]
[74.47959900 390.81460571]
[67.20879364 377.62561035]
[62.94365692 363.18185425]
[61.88367462 348.15884399]
[64.07842255 333.25927734]
[69.42524719 319.18002319]
[77.67406464 306.57958984]
[88.43907166 296.04730225]
[101.21676636 288.07583618]
[115.40951538 283.03796387]
[113.54190063 268.15466309]
[111.67428589 253.27139282]
[109.80667114 238.38812256]
[107.93905640 223.50483704]
[106.07144928 208.62155151]
[104.20383453 193.73828125]
[102.33621979 178.85499573]
[100.46860504 163.97171021]
[98.60099792 149.08843994]
[96.73338318 134.20515442]
[94.86576843 119.32187653]
[83.77445221 109.22322845]
[68.78175354 108.75518799]
[53.78905869 108.28713989]
[39.75418091 115.59007263]
[27.27453232 107.45941162]
[12.28183746 106.99137115]
[6.19014549 109.81958771]
[0.45969385 109.19250488]
[-3.32114577 106.17907715]
[-18.28139496 105.08776855]
[-33.24164200 103.99645233]
[-48.20189285 102.90514374]
[-56.76219940 115.65727234]
[-70.55876923 122.40637207]
[-85.88038635 121.33696747]
[-98.60561371 112.73673248]
[-105.31143188 98.91907501]
[-104.19401550 83.60089111]
[-95.55393219 70.90267944]
[-81.71532440 64.24020386]
[-66.40071106 65.40563202]
[-53.72964859 74.08547974]
[-47.11058044 87.94489288]
[-32.15033340 89.03620911]
[-17.19008446 90.12751770]
[-2.22983503 91.21882629]
[12.74987888 91.99867249]
[27.74257469 92.46671295]
[40.70507431 85.13031006]
[54.25710297 93.29444885]
[69.24980164 93.76248932]
[84.24249268 94.23052979]
[94.79378510 83.56890106]
[94.16980743 68.58188629]
[93.54582977 53.59487152]
[78.63907623 51.60492706]
[64.30440521 47.05650330]
[50.97741318 40.08782578]
[39.06310654 30.91065598]
[28.92354393 19.80388451]
[20.86685371 7.10503054]
[15.13787174 -6.80000019]
[11.91069412 -21.48865128]
[11.28339005 -36.51454926]
[13.27502537 -51.42107391]
[17.82507324 -65.75523376]
[24.79526520 -79.08143616]
[33.97378540 -90.99469757]
[45.08170700 -101.13300323]
[57.78147507 -109.18825531]
[71.68715668 -114.91565704]
[86.37616730 -118.14116669]
[101.40213776 -118.76676941]
[116.30844116 -116.77344513]
[130.64208984 -112.22177124]
[143.96749878 -105.25006866]
[155.87971497 -96.07019806]
[166.01675415 -84.96112061]
[174.07057190 -72.26044464]
[179.79640198 -58.35411453]
[183.02024841 -43.66473007]
[183.64413452 -28.63869095]
[181.64912415 -13.73261833]
[177.09582520 0.60051072]
[170.12260437 13.92512703]
[160.94139099 25.83631134]
[149.83116150 35.97209549]
[137.12957764 44.02446365]
[123.22259521 49.74871445]
[108.53284454 52.97089386]
[109.15682220 67.95790863]
[109.78079987 82.94492340]
[113.44329834 86.42115021]
[116.00253296 90.60822296]
[130.76858521 87.96935272]
[145.53463745 85.33049011]
[160.30070496 82.69162750]
[175.06675720 80.05276489]
[189.83280945 77.41389465]
[192.71151733 62.51163101]
[200.78245544 49.65766907]
[212.95410156 40.59040451]
[227.58035278 36.53610992]
[242.68312073 38.04309082]
[256.21987915 44.90754700]
[266.35989380 56.20111465]
[271.73178101 70.39643097]
[271.60910034 85.57369995]
[266.00839233 99.68031311]
[255.68713379 110.80847168]
[242.04116821 117.45317841]
[226.91601562 118.71580505]
[212.35722351 114.42557526]
[200.33375549 105.16271973]
[192.47167969 92.17995453]
[177.70561218 94.81881714]
[162.93955994 97.45767975]
[148.17350769 100.09654236]
[133.40745544 102.73541260]
[118.64139557 105.37427521]
[109.74904633 117.45426178]
[111.61666107 132.33753967]
[113.48427582 147.22082520]
[115.35189056 162.10409546]
[117.21949768 176.98738098]
[119.08711243 191.87066650]
[120.95472717 206.75393677]
[122.82234192 221.63722229]
[124.68995667 236.52050781]
[126.55756378 251.40377808]
[128.42518616 266.28704834]
[130.29278564 281.17034912]
[145.29023743 282.54531860]
[159.64134216 287.11257935]
[172.67488098 294.65850830]
[183.78123474 304.83016968]
[192.44094849 317.15182495]
[198.24900818 331.04718018]
[200.93373108 345.86630249]
[200.36955261 360.91607666]
[196.58288574 375.49261475]
[189.75080872 388.91412354]
[180.19290161 400.55285645]
[168.35617065 409.86447144]
[154.79426575 416.41342163]
[140.14149475 419.89340210]
[125.08319855 420.14169312]
[110.32366943 417.14660645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 54]
[24 53]
[25 52]
[27 50]
[28 49]
[31 48]
[32 47]
[33 46]
[34 45]
[55 94]
[56 93]
[57 92]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
