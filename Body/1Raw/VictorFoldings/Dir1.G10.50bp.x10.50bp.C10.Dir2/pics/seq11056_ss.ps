%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAAAGACCACGGGGGGGGGGAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUxxxxxxxxxxCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUACCCCCCCCCCUCCAAAGACAAC\
) } def
/len { sequence length } bind def

/coor [
[86.12564850 384.27496338]
[71.96504211 379.11996460]
[59.37529755 370.83773804]
[49.03536224 359.87496948]
[41.50284958 346.82284546]
[37.18398285 332.38525391]
[36.31167603 317.34078979]
[38.93296432 302.50079346]
[44.90649414 288.66555786]
[53.91011047 276.58120728]
[65.45826721 266.89941406]
[78.92818451 260.14233398]
[93.59344482 256.67437744]
[93.59344482 241.67437744]
[93.59344482 226.67437744]
[93.59344482 211.67437744]
[93.59344482 196.67437744]
[93.59344482 181.67437744]
[93.59344482 166.67437744]
[93.59344482 151.67437744]
[93.59344482 136.67437744]
[93.59344482 121.67436981]
[88.51042175 135.78688049]
[74.66280365 141.55259705]
[61.06613922 135.21771240]
[56.57260132 120.90659332]
[64.10772705 107.93655396]
[78.76530457 104.75171661]
[63.89529419 102.78126526]
[58.53089142 116.86387634]
[50.06291580 129.32943726]
[38.94803238 139.50567627]
[25.78565407 146.84384155]
[11.28561020 150.94815063]
[-3.77013087 151.59729004]
[-18.56963158 148.75625610]
[-32.31477356 142.57824707]
[-44.26429367 133.39643860]
[-53.77377701 121.70599365]
[-60.33038712 108.13736725]
[-63.58053207 93.42229462]
[-63.34893417 78.35434723]
[-59.64809036 63.74611664]
[-52.67757416 50.38540268]
[-42.81330109 38.99273682]
[-30.58723831 30.18251038]
[-16.65872192 24.42984581]
[-1.77889860 22.04497719]
[13.24978065 23.15652084]
[27.61683846 27.70452881]
[40.54747772 35.44373322]
[51.34436417 45.95677185]
[59.42523575 58.67668533]
[64.35430145 72.91751099]
[65.86574554 87.91124725]
[80.73575592 89.88169861]
[92.40887451 80.46160126]
[93.62364197 65.51086426]
[94.83840942 50.56013870]
[96.05318451 35.60940552]
[97.26795197 20.65867615]
[98.48271942 5.70794582]
[83.93153381 1.90872538]
[70.26121521 -4.35973597]
[57.88719940 -12.90694618]
[47.18551254 -23.47316551]
[38.48136520 -35.73730087]
[32.03927231 -49.32665253]
[28.05499458 -63.82826233]
[26.64961624 -78.80143738]
[27.86584282 -93.79116821]
[31.66671371 -108.34192657]
[37.93672562 -122.01152802]
[46.48534012 -134.38458252]
[57.05277252 -145.08506775]
[69.31789398 -153.78782654]
[82.90797424 -160.22837830]
[97.41003418 -164.21099854]
[112.38337708 -165.61468506]
[127.37296295 -164.39675903]
[141.92329407 -160.59423828]
[155.59217834 -154.32267761]
[167.96426392 -145.77265930]
[178.66354370 -135.20401001]
[187.36491394 -122.93790436]
[193.80392456 -109.34709167]
[197.78491211 -94.84457397]
[199.18688965 -79.87107849]
[197.96726990 -64.88162994]
[194.16310120 -50.33173752]
[187.88998413 -36.66355515]
[179.33856201 -24.29244614]
[168.76870728 -13.59435463]
[156.50161743 -4.89438200]
[142.91006470 1.54308891]
[128.40710449 5.52243042]
[113.43344879 6.92271471]
[112.21868134 21.87344551]
[111.00391388 36.82417679]
[109.78914642 51.77490616]
[108.57437134 66.72563934]
[107.35960388 81.67636871]
[117.35884857 92.85738373]
[132.35191345 93.31334686]
[147.34498596 93.76931763]
[162.33805847 94.22528076]
[177.33113098 94.68125153]
[169.39537048 81.95239258]
[174.20298767 67.74369812]
[188.23727417 62.44855881]
[201.23245239 69.94026184]
[203.68276978 84.73877716]
[193.79634094 96.01907349]
[208.66635132 97.98952484]
[223.53636169 99.95997620]
[238.40638733 101.93042755]
[253.27639771 103.90087891]
[268.21762085 97.14133453]
[281.38265991 106.91960144]
[279.22839355 123.17663574]
[263.97100830 129.18859863]
[251.30593872 118.77088928]
[236.43592834 116.80043793]
[221.56591797 114.82998657]
[206.69590759 112.85953522]
[191.82588196 110.88908386]
[176.87515259 109.67431641]
[161.88209534 109.21835327]
[146.88902283 108.76238251]
[131.89595032 108.30641937]
[116.90288544 107.85044861]
[114.40130615 115.25158691]
[108.59344482 121.67436981]
[108.59344482 136.67437744]
[108.59344482 151.67437744]
[108.59344482 166.67437744]
[108.59344482 181.67437744]
[108.59344482 196.67437744]
[108.59344482 211.67437744]
[108.59344482 226.67437744]
[108.59344482 241.67437744]
[108.59344482 256.67437744]
[123.25870514 260.14233398]
[136.72862244 266.89941406]
[148.27677917 276.58120728]
[157.28039551 288.66555786]
[163.25392151 302.50079346]
[165.87521362 317.34078979]
[165.00289917 332.38525391]
[160.68403625 346.82284546]
[153.15151978 359.87496948]
[142.81158447 370.83773804]
[130.22184753 379.11996460]
[116.06124115 384.27496338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[28 56]
[29 55]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
