%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAUAAUAGGGGGGGGGGUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAxxxxxxxxxxUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUCCCCCCCCCCAAUCAUAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 366.34448242]
[71.19830322 360.32846069]
[59.48964310 350.79904175]
[50.78712082 338.46337891]
[45.73651886 324.23684692]
[44.71262741 309.17517090]
[47.79142761 294.39599609]
[54.74444962 280.99606323]
[65.05573273 269.96972656]
[77.96011353 262.13522339]
[92.50000000 258.07391357]
[92.50000000 243.07391357]
[92.50000000 228.07391357]
[92.50000000 213.07391357]
[92.50000000 198.07391357]
[92.50000000 183.07391357]
[92.50000000 168.07391357]
[92.50000000 153.07391357]
[92.50000000 138.07391357]
[92.50000000 123.07392120]
[86.21887207 119.96838379]
[81.08716583 115.19738770]
[77.53288269 109.15884399]
[62.57263565 110.25015259]
[47.61238480 111.34146881]
[32.67807770 112.74376678]
[17.77617645 114.45645905]
[2.87427425 116.16915131]
[-1.65060091 130.71031189]
[-11.70358086 142.14961243]
[-25.54292679 148.50511169]
[-40.77088928 148.67568970]
[-54.74912643 142.63179016]
[-65.05583191 131.42056274]
[-69.90530396 116.98440552]
[-68.45733643 101.82447815]
[-60.96280670 88.56733704]
[-48.72018433 79.50984955]
[-33.85057449 76.22128296]
[-18.93023109 79.27140808]
[-6.54419327 88.13176727]
[1.16158450 101.26725006]
[16.06348610 99.55455780]
[30.96538925 97.84186554]
[34.61760330 94.67376709]
[40.31700897 93.80885315]
[46.52107620 96.38121796]
[61.48132324 95.28990936]
[76.44157410 94.19859314]
[87.72345734 79.07292938]
[106.43119812 76.60565186]
[114.68348694 64.07968903]
[122.93577576 51.55373001]
[131.18806458 39.02776718]
[139.44035339 26.50180435]
[147.69264221 13.97584343]
[135.97279358 4.59662628]
[125.16835022 -5.82396221]
[115.37149811 -17.19701576]
[106.66582489 -29.42550278]
[99.12560272 -42.40509033]
[92.81516266 -56.02503967]
[87.78834534 -70.16915131]
[84.08804321 -84.71673584]
[81.74581909 -99.54369354]
[80.78166962 -114.52351379]
[81.20380402 -129.52839661]
[83.00862885 -144.43031311]
[86.18074036 -159.10214233]
[90.69308472 -173.41868591]
[96.50715637 -187.25779724]
[103.57334900 -200.50141907]
[111.83138275 -213.03656006]
[121.21079254 -224.75625610]
[131.63156128 -235.56051636]
[143.00477600 -245.35717773]
[155.23341370 -254.06265259]
[168.21311951 -261.60266113]
[181.83317566 -267.91287231]
[195.97737122 -272.93945312]
[210.52502441 -276.63949585]
[225.35202026 -278.98147583]
[240.33184814 -279.94540405]
[255.33673096 -279.52301025]
[270.23861694 -277.71792603]
[284.91040039 -274.54556274]
[299.22686768 -270.03298950]
[313.06588745 -264.21868896]
[326.30938721 -257.15228271]
[338.84439087 -248.89402771]
[350.56390381 -239.51443481]
[361.36801147 -229.09347534]
[371.16448975 -217.72009277]
[379.86975098 -205.49131775]
[387.40954590 -192.51148987]
[393.71951294 -178.89132690]
[398.74588013 -164.74705505]
[402.44567871 -150.19934082]
[404.78741455 -135.37229919]
[405.75106812 -120.39244843]
[405.32843018 -105.38758087]
[403.52313232 -90.48571777]
[400.35052490 -75.81400299]
[395.83770752 -61.49761200]
[390.02316284 -47.65868378]
[382.95651245 -34.41529846]
[374.69808960 -21.88043976]
[365.31826782 -10.16105747]
[354.89715576 0.64286441]
[343.52359009 10.43914700]
[331.29467773 19.14420891]
[318.31472778 26.68378258]
[304.69445801 32.99354172]
[290.55007935 38.01964951]
[276.00231934 41.71922302]
[261.17523193 44.06070328]
[246.19537354 45.02411270]
[231.19050598 44.60122681]
[216.28868103 42.79565811]
[201.61701965 39.62281036]
[187.30070496 35.10975266]
[173.46186829 29.29498863]
[160.21859741 22.22813225]
[151.96630859 34.75409317]
[143.71401978 47.28005600]
[135.46173096 59.80601883]
[127.20944977 72.33197784]
[118.95716095 84.85794067]
[124.25096130 99.26066589]
[119.84436035 113.95912170]
[107.50000000 123.07392120]
[107.50000000 138.07391357]
[107.50000000 153.07391357]
[107.50000000 168.07391357]
[107.50000000 183.07391357]
[107.50000000 198.07391357]
[107.50000000 213.07391357]
[107.50000000 228.07391357]
[107.50000000 243.07391357]
[107.50000000 258.07391357]
[122.03988647 262.13522339]
[134.94427490 269.96972656]
[145.25555420 280.99606323]
[152.20857239 294.39599609]
[155.28736877 309.17517090]
[154.26348877 324.23684692]
[149.21287537 338.46337891]
[140.51036072 350.79904175]
[128.80169678 360.32846069]
[114.95575714 366.34448242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 49]
[24 48]
[25 47]
[26 44]
[27 43]
[28 42]
[51 128]
[52 127]
[53 126]
[54 125]
[55 124]
[56 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
