%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCGCUACGGGGGGGGGGACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCxxxxxxxxxxCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCCCCCCCCCCCUCAUCGCUAC\
) } def
/len { sequence length } bind def

/coor [
[83.66246796 378.04385376]
[70.44226837 370.77139282]
[59.55546951 360.32440186]
[51.74433899 347.41516113]
[47.54145813 332.92382812]
[47.23338318 317.83850098]
[50.84112549 303.18768311]
[58.11869812 289.97027588]
[68.56990814 279.08752441]
[81.48217010 271.28137207]
[95.97510529 267.08407593]
[95.66304779 252.08732605]
[95.35099030 237.09057617]
[95.03893280 222.09382629]
[94.72688293 207.09706116]
[94.41482544 192.10031128]
[94.10276794 177.10356140]
[93.79071045 162.10681152]
[93.47865295 147.11004639]
[93.16659546 132.11329651]
[92.85454559 117.11654663]
[81.30145264 109.68870544]
[76.99296570 94.87446594]
[62.28500748 97.81995392]
[47.57704544 100.76543427]
[32.86908340 103.71091461]
[18.16112328 106.65639496]
[6.14896774 116.95293427]
[-7.84985256 111.86547089]
[-22.55781364 114.81095886]
[-32.61428833 127.31082916]
[-48.65592575 127.09782410]
[-58.37695694 114.33534241]
[-54.32024002 98.81365967]
[-39.59774017 92.43968964]
[-25.50329590 100.10299683]
[-10.79533482 97.15750885]
[0.16480766 87.07165527]
[15.21564007 91.94843292]
[29.92360115 89.00295258]
[44.63156128 86.05747223]
[59.33952332 83.11199188]
[74.04748535 80.16650391]
[85.64882660 70.65814972]
[91.42510223 56.81492996]
[97.20137024 42.97171402]
[101.95518494 28.74493408]
[105.66134644 14.20999718]
[109.36750793 -0.32493901]
[113.07366943 -14.85987473]
[108.98596954 -30.14389610]
[119.62800598 -40.56485748]
[108.02182007 -50.41665268]
[101.86908722 -64.27417755]
[102.34121704 -79.36712646]
[109.29101562 -92.70359039]
[121.29254150 -101.66310120]
[135.93330383 -104.51151276]
[139.63946533 -119.04644775]
[143.34562683 -133.58137512]
[147.05178833 -148.11631775]
[133.20446777 -153.95663452]
[120.38231659 -161.79563904]
[108.87178040 -171.45820618]
[98.93001556 -182.72846985]
[90.77912140 -195.35466003]
[84.60120392 -209.05468750]
[80.53426361 -223.52250671]
[78.66916656 -238.43489075]
[79.04757690 -253.45867920]
[81.66104126 -268.25827026]
[86.45117950 -282.50299072]
[93.31096649 -295.87463379]
[102.08715820 -308.07446289]
[112.58369446 -318.82995605]
[124.56607819 -327.90078735]
[137.76661682 -335.08435059]
[151.89039612 -340.22015381]
[166.62190247 -343.19342041]
[181.63201904 -343.93780518]
[196.58541870 -342.43658447]
[211.14802551 -338.72338867]
[224.99452209 -332.88110352]
[237.81556702 -325.04025269]
[249.32472229 -315.37606812]
[259.26489258 -304.10437012]
[267.41397095 -291.47702026]
[273.58993530 -277.77609253]
[277.65481567 -263.30770874]
[279.51779175 -248.39506531]
[279.13723755 -233.37132263]
[276.52166748 -218.57211304]
[271.72952271 -204.32807922]
[264.86782837 -190.95739746]
[256.08987427 -178.75881958]
[245.59181213 -168.00483704]
[233.60813904 -158.93569946]
[220.40658569 -151.75401306]
[206.28205872 -146.62023926]
[191.55014038 -143.64904785]
[176.53991699 -142.90682983]
[161.58673096 -144.41015625]
[157.88056946 -129.87521362]
[154.17440796 -115.34028625]
[150.46824646 -100.80535126]
[161.95755005 -91.29421997]
[168.20362854 -77.68187714]
[167.91894531 -62.64592361]
[161.10641479 -49.16966629]
[149.06944275 -39.95020676]
[134.16293335 -36.85869598]
[138.51573181 -22.61430931]
[127.60860443 -11.15371418]
[123.90244293 3.38122225]
[120.19628143 17.91615868]
[116.49011993 32.45109558]
[129.58613586 25.13710213]
[144.35145569 27.78004646]
[154.09725952 39.18264771]
[154.40859985 54.17941666]
[145.14442444 65.97666931]
[130.50151062 69.23013306]
[117.11323547 62.46596146]
[111.04459381 48.74798584]
[105.26831818 62.59120178]
[99.49204254 76.43441772]
[116.97582245 86.16927338]
[119.71258545 104.51235962]
[107.85129547 116.80448914]
[108.16335297 131.80123901]
[108.47541046 146.79798889]
[108.78746796 161.79475403]
[109.09951782 176.79150391]
[109.41157532 191.78825378]
[109.72363281 206.78500366]
[110.03569031 221.78176880]
[110.34774780 236.77851868]
[110.65980530 251.77526855]
[110.97185516 266.77203369]
[125.62684631 270.36279297]
[138.85266113 277.62506104]
[149.74752808 288.06362915]
[157.56861877 300.96685791]
[161.78269958 315.45492554]
[162.10241699 330.54000854]
[158.50599670 345.19363403]
[151.23863220 358.41662598]
[140.79582214 369.30746460]
[127.88959503 377.12356567]
[113.39990234 381.33206177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[29 37]
[30 36]
[44 126]
[45 125]
[46 124]
[47 116]
[48 115]
[49 114]
[50 113]
[52 111]
[58 105]
[59 104]
[60 103]
[61 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
