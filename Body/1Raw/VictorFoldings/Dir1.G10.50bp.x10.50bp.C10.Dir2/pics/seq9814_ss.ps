%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAUCAACAGGGGGGGGGGACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCxxxxxxxxxxAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCCCCCCCCCCCAAAUCACCA\
) } def
/len { sequence length } bind def

/coor [
[-25.13823891 224.04733276]
[-33.59584427 214.88894653]
[-41.38473892 205.15548706]
[-48.46593475 194.89566040]
[-54.80398178 184.16084290]
[-60.36715698 173.00476074]
[-65.12761688 161.48324585]
[-69.06153107 149.65397644]
[-72.14921570 137.57617188]
[-74.37519836 125.31027985]
[-75.72834778 112.91769409]
[-90.72123718 113.37961578]
[-105.71411896 113.84154510]
[-120.70700836 114.30346680]
[-135.69989014 114.76539612]
[-150.69277954 115.22731781]
[-165.43737793 117.98356628]
[-179.58468628 122.96888733]
[-193.73200989 127.95420837]
[-207.87933350 132.93952942]
[-222.02664185 137.92485046]
[-236.17396545 142.91017151]
[-250.32127380 147.89549255]
[-264.46859741 152.88081360]
[-270.75982666 164.18673706]
[-282.69372559 168.02780151]
[-293.67141724 162.85552979]
[-307.91812134 167.54933167]
[-318.43161011 180.13496399]
[-334.53924561 177.05664062]
[-339.67086792 161.48107910]
[-328.54751587 149.43106079]
[-312.61190796 153.30262756]
[-298.36523438 148.60882568]
[-287.43774414 134.91085815]
[-269.45391846 138.73350525]
[-255.30659485 133.74818420]
[-241.15928650 128.76286316]
[-227.01196289 123.77753448]
[-212.86465454 118.79221344]
[-198.71733093 113.80689240]
[-184.57002258 108.82157135]
[-170.42269897 103.83625031]
[-185.01127625 100.34718323]
[-197.41081238 91.90612030]
[-206.00582886 79.61280823]
[-209.67654419 65.06888580]
[-207.94471741 50.16919327]
[-201.03594971 36.85494995]
[-189.85038757 26.86079788]
[-175.84532166 21.48882484]
[-160.84539795 21.43892097]
[-146.80490112 26.71758652]
[-135.55308533 36.63709259]
[-128.55589294 49.90507126]
[-126.72495270 64.79290771]
[-130.29881287 79.36093903]
[-138.81184387 91.71116638]
[-151.15470886 100.23443604]
[-136.16181946 99.77250671]
[-121.16893768 99.31058502]
[-106.17604828 98.84865570]
[-91.18316650 98.38673401]
[-76.19027710 97.92480469]
[-75.03378296 79.73934174]
[-72.00531769 61.77055740]
[-67.13726807 44.21063995]
[-60.48170090 27.24738121]
[-52.10979462 11.06220818]
[-42.11108398 -4.17178202]
[-30.59250450 -18.29166412]
[-17.67725182 -31.14642525]
[-3.50344753 -42.59858322]
[11.77731705 -52.52566528]
[28.00161743 -60.82149506]
[44.99593353 -67.39734650]
[62.57851410 -72.18290710]
[80.56131744 -75.12697601]
[98.75201416 -76.19807434]
[116.95605469 -75.38475800]
[134.97875977 -72.69570923]
[152.62736511 -68.15969086]
[169.71311951 -61.82521820]
[186.05329895 -53.76004028]
[201.47314453 -44.05040741]
[215.80775452 -32.80017090]
[226.13865662 -43.67548370]
[236.46955872 -54.55079651]
[230.60995483 -68.60728455]
[230.98071289 -83.83168793]
[237.51760864 -97.58628082]
[249.08808899 -107.48800659]
[263.68746948 -111.82131195]
[278.78637695 -109.83544922]
[291.76876831 -101.87446594]
[300.38540649 -89.31764984]
[303.14337158 -74.34055328]
[299.56488037 -59.53804779]
[290.26989746 -47.47475433]
[276.86883545 -40.24070740]
[261.68350220 -39.08925629]
[247.34486389 -44.21989441]
[237.01396179 -33.34458160]
[226.68305969 -22.46926689]
[236.48107910 -11.44610691]
[245.32293701 0.35782167]
[253.14669800 12.85982323]
[259.89752197 25.97231102]
[265.52816772 39.60342026]
[269.99914551 53.65765762]
[273.27914429 68.03656006]
[275.34518433 82.63938904]
[276.18276978 97.36384583]
[275.78607178 112.10677338]
[274.15786743 126.76487732]
[288.87338257 129.67234802]
[303.58889771 132.57981873]
[318.92794800 126.77929688]
[331.44781494 137.37104797]
[328.26913452 153.45918274]
[312.66186523 158.49360657]
[300.68142700 147.29534912]
[285.96591187 144.38787842]
[271.25039673 141.48040771]
[267.88891602 153.48489380]
[263.68707275 165.22164917]
[258.66589355 176.63195801]
[252.85050964 187.65867615]
[246.27003479 198.24661255]
[238.95739746 208.34278870]
[230.94921875 217.89665222]
[222.28558350 226.86038208]
[213.00984192 235.18911743]
[203.16842651 242.84115601]
[192.81060791 249.77821350]
[181.98822021 255.96554565]
[170.75543213 261.37219238]
[159.16848755 265.97109985]
[147.28538513 269.73925781]
[135.16558838 272.65774536]
[122.86976624 274.71203613]
[110.45947266 275.89178467]
[97.99682617 276.19110107]
[85.54420471 275.60852051]
[73.16394043 274.14691162]
[60.91800308 271.81359863]
[48.86769104 268.62030029]
[37.07332230 264.58297729]
[25.59393501 259.72180176]
[14.48698521 254.06117249]
[3.80806994 247.62937927]
[-6.38935661 240.45861816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[27 34]
[28 33]
[86 104]
[87 103]
[88 102]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
