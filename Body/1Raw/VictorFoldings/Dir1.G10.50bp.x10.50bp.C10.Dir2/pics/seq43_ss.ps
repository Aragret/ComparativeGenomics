%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACCACUCGGGGGGGGGGACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGxxxxxxxxxxCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUCCCCCCCCCCUUUACCACUC\
) } def
/len { sequence length } bind def

/coor [
[79.09162140 441.20422363]
[65.24568176 435.18820190]
[53.53702164 425.65878296]
[44.83449936 413.32312012]
[39.78389740 399.09658813]
[38.76000595 384.03491211]
[41.83880615 369.25573730]
[48.79182434 355.85583496]
[59.10311127 344.82949829]
[72.00749207 336.99499512]
[86.54737854 332.93365479]
[86.54737854 317.93365479]
[86.54737854 302.93365479]
[86.54737854 287.93365479]
[86.54737854 272.93365479]
[86.54737854 257.93365479]
[86.54737854 242.93367004]
[86.54737854 227.93367004]
[86.54737854 212.93367004]
[86.54737854 197.93367004]
[86.54737854 182.93367004]
[84.26569366 180.16574097]
[83.24629974 176.13305664]
[84.07874298 171.45765686]
[87.04463196 167.00534058]
[84.30514526 160.08863831]
[88.15864563 151.73384094]
[89.40551758 136.78576660]
[90.65238953 121.83767700]
[91.89926910 106.88958740]
[92.05530548 91.89039612]
[91.11967468 76.91960907]
[90.18404388 61.94881439]
[86.50519562 53.51567078]
[89.38797760 46.65745163]
[88.76399994 31.67043304]
[88.14002228 16.68341827]
[73.82534027 13.94074154]
[60.49240494 8.07168674]
[48.81415939 -0.62384486]
[39.37921524 -11.70338631]
[32.66217041 -24.60441780]
[28.99974632 -38.67292786]
[28.57391167 -53.19656754]
[31.40283966 -67.44071960]
[37.34015656 -80.68565369]
[46.08251953 -92.26289368]
[57.18510818 -101.58896637]
[70.08425140 -108.19478607]
[84.12604523 -111.74926758]
[76.10332489 -125.38549042]
[83.57418060 -138.27096558]
[83.26212311 -153.26773071]
[82.95006561 -168.26448059]
[82.63800812 -183.26123047]
[82.32595062 -198.25798035]
[82.01390076 -213.25474548]
[81.70184326 -228.25149536]
[66.84906769 -230.62528992]
[52.65891266 -235.61320496]
[39.58753204 -243.05490112]
[28.05511475 -252.71113586]
[18.43238068 -264.27154541]
[11.02865982 -277.36447144]
[6.08195353 -291.56903076]
[3.75127697 -306.42864990]
[4.11155176 -321.46557617]
[7.15119600 -336.19653320]
[12.77249813 -350.14788818]
[20.79475784 -362.87121582]
[30.96008873 -373.95751953]
[42.94172287 -383.05038452]
[56.35449600 -389.85754395]
[70.76724243 -394.16012573]
[85.71665955 -395.81988525]
[100.72217560 -394.78344727]
[115.30142975 -391.08410645]
[128.98576355 -384.84082031]
[141.33528137 -376.25421143]
[151.95298767 -365.60040283]
[160.49757385 -353.22180176]
[166.69436646 -339.51632690]
[170.34416199 -324.92459106]
[171.32963562 -309.91564941]
[169.61911011 -294.97195435]
[165.26757812 -280.57391357]
[158.41491699 -267.18432617]
[149.28140259 -255.23364258]
[138.16064453 -245.10603333]
[125.41014862 -237.12702942]
[111.43976593 -231.55314636]
[96.69859314 -228.56355286]
[97.01065063 -213.56678772]
[97.32270813 -198.57003784]
[97.63476562 -183.57328796]
[97.94682312 -168.57653809]
[98.25887299 -153.57977295]
[98.57093048 -138.58302307]
[106.57133484 -126.01947784]
[99.12280273 -112.06132507]
[114.23485565 -108.77797699]
[128.13653564 -101.98333740]
[140.02465820 -92.06536865]
[149.21125793 -79.59260559]
[155.16340637 -65.28159332]
[157.53417969 -49.95570374]
[156.18278503 -34.49778748]
[151.18299866 -19.79928398]
[142.81910706 -6.70884037]
[131.56974792 4.01669598]
[118.08055115 11.75603676]
[103.12703705 16.05944061]
[103.75101471 31.04645729]
[104.37499237 46.03347397]
[105.15483856 61.01318741]
[106.09046936 75.98397827]
[107.02609253 90.95477295]
[117.24386597 79.97309113]
[132.10746765 77.95486450]
[144.88356018 85.81436157]
[149.78442383 99.99115753]
[144.58993530 114.06301880]
[131.65324402 121.65526581]
[116.83480835 119.32852173]
[106.84735107 108.13645935]
[105.60047913 123.08454895]
[104.35360718 138.03263855]
[103.10672760 152.98072815]
[102.01541901 167.94096375]
[101.54737854 182.93367004]
[101.54737854 197.93367004]
[101.54737854 212.93367004]
[101.54737854 227.93367004]
[101.54737854 242.93367004]
[101.54737854 257.93365479]
[101.54737854 272.93365479]
[101.54737854 287.93365479]
[101.54737854 302.93365479]
[101.54737854 317.93365479]
[101.54737854 332.93365479]
[116.08726501 336.99499512]
[128.99165344 344.82949829]
[139.30293274 355.85583496]
[146.25595093 369.25573730]
[149.33474731 384.03491211]
[148.31086731 399.09658813]
[143.26025391 413.32312012]
[134.55773926 425.65878296]
[122.84907532 435.18820190]
[109.00313568 441.20422363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 129]
[27 128]
[28 127]
[29 126]
[30 125]
[31 117]
[32 116]
[33 115]
[35 114]
[36 113]
[37 112]
[50 100]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
