%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCGCCAUCGGGGGGGGGGUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAxxxxxxxxxxUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCCCCCCCCCCCUACCUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[74.83934021 381.58645630]
[62.28112030 373.23529053]
[52.19489670 362.02285767]
[45.21470261 348.65396118]
[41.77931976 333.96896362]
[42.10469437 318.89099121]
[46.17037964 304.36788940]
[53.72079849 291.31253052]
[64.28132629 280.54562378]
[77.18812561 272.74401855]
[91.62985229 268.39804077]
[91.00587463 253.41104126]
[90.38189697 238.42402649]
[89.75791931 223.43701172]
[89.13394165 208.44998169]
[88.50996399 193.46296692]
[87.88598633 178.47595215]
[87.26200867 163.48893738]
[86.63803101 148.50192261]
[86.01405334 133.51490784]
[73.66248322 125.00381470]
[59.43570328 129.75762939]
[45.20892334 134.51144409]
[30.98214531 139.26525879]
[20.34545898 150.97727966]
[5.82213926 147.67236328]
[-8.40463924 152.42617798]
[-16.82653046 166.08090210]
[-32.76986694 167.86685181]
[-44.00428009 156.41401672]
[-41.91169739 140.50802612]
[-28.09736252 132.35058594]
[-13.15845490 138.19940186]
[1.06832457 133.44558716]
[10.68741703 122.07359314]
[26.22833061 125.03848267]
[40.45510864 120.28466797]
[54.68188858 115.53085327]
[68.90866852 110.77703857]
[75.47877502 83.22362518]
[99.01641083 73.50261688]
[102.72257233 58.96767807]
[106.42873383 44.43274307]
[92.23127747 39.56666565]
[78.47142792 33.57394028]
[65.23841095 26.49343300]
[52.61805344 18.37106133]
[40.69220734 9.25950623]
[29.53820992 -0.78214282]
[19.22840691 -11.68875885]
[9.82965946 -23.38960838]
[1.40292382 -35.80880356]
[-5.99714899 -48.86580276]
[-12.32256603 -62.47592545]
[-17.53230476 -76.55090332]
[-21.59257507 -90.99945068]
[-24.47704697 -105.72785950]
[-26.16701126 -120.64061737]
[-26.65151024 -135.64100647]
[-25.92739868 -150.63172913]
[-23.99937439 -165.51559448]
[-20.87994194 -180.19602966]
[-16.58933067 -194.57786560]
[-11.15536880 -208.56779480]
[-4.61329794 -222.07511902]
[2.99445415 -235.01220703]
[11.61854744 -247.29518127]
[21.20305061 -258.84436035]
[31.68580246 -269.58486938]
[42.99881744 -279.44702148]
[55.06872940 -288.36685181]
[67.81725311 -296.28652954]
[81.16171265 -303.15469360]
[95.01556396 -308.92681885]
[109.28894806 -313.56542969]
[123.88930511 -317.04043579]
[138.72195435 -319.32937622]
[153.69067383 -320.41729736]
[168.69839478 -320.29724121]
[183.64779663 -318.96994019]
[198.44192505 -316.44400024]
[212.98480225 -312.73580933]
[227.18215942 -307.86941528]
[240.94187927 -301.87637329]
[254.17472839 -294.79559326]
[266.79492188 -286.67294312]
[278.72055054 -277.56112671]
[289.87432861 -267.51922607]
[300.18389893 -256.61236572]
[309.58239746 -244.91133118]
[318.00885010 -232.49194336]
[325.40863037 -219.43478394]
[331.73376465 -205.82452393]
[336.94317627 -191.74942017]
[341.00314331 -177.30079651]
[343.88726807 -162.57231140]
[345.57690430 -147.65951538]
[346.06109619 -132.65911865]
[345.33663940 -117.66841125]
[343.40829468 -102.78459930]
[340.28854370 -88.10422516]
[335.99761963 -73.72248840]
[330.56332397 -59.73266983]
[324.02096558 -46.22549820]
[316.41293335 -33.28857040]
[307.78857422 -21.00578880]
[298.20379639 -9.45681763]
[287.72082520 1.28344572]
[276.40759277 11.14534569]
[264.33746338 20.06492233]
[251.58877563 27.98432732]
[238.24417114 34.85220337]
[224.39019775 40.62400436]
[210.11669922 45.26229858]
[195.51626587 48.73700333]
[180.68357849 51.02558899]
[165.71482849 52.11320877]
[150.70710754 51.99280930]
[135.75773621 50.66516876]
[120.96366882 48.13890457]
[117.25750732 62.67383957]
[113.55134583 77.20877838]
[121.55777740 83.04157257]
[127.08629608 91.65895844]
[129.18463135 102.01962280]
[127.33353424 112.76509857]
[121.54814148 122.39782715]
[112.40705109 129.48951721]
[101.00106812 132.89093018]
[101.62504578 147.87794495]
[102.24902344 162.86495972]
[102.87300110 177.85197449]
[103.49697876 192.83898926]
[104.12095642 207.82601929]
[104.74493408 222.81303406]
[105.36891174 237.80004883]
[105.99288940 252.78706360]
[106.61686707 267.77407837]
[121.36987305 270.90451050]
[134.88050842 277.60626221]
[146.29948425 287.45806885]
[154.90899658 299.84060669]
[160.16784668 313.97549438]
[161.74545288 328.97421265]
[159.54264832 343.89395142]
[153.69790649 357.79681396]
[144.57862854 369.80889893]
[132.75805664 379.17504883]
[118.97924042 385.30654907]
[104.10833740 387.81793213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 39]
[22 38]
[23 37]
[24 36]
[26 34]
[27 33]
[41 122]
[42 121]
[43 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
