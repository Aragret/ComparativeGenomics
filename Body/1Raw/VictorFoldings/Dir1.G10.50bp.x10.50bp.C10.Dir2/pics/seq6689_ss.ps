%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAUCACGGGGGGGGGGAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAxxxxxxxxxxCAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCCCCCCCCCCCUCCAAAUCAC\
) } def
/len { sequence length } bind def

/coor [
[105.07595062 436.46389771]
[92.51772308 428.11273193]
[82.43150330 416.90029907]
[75.45130920 403.53137207]
[72.01592255 388.84637451]
[72.34130096 373.76843262]
[76.40699005 359.24530029]
[83.95740509 346.18997192]
[94.51793671 335.42306519]
[107.42472839 327.62142944]
[121.86646271 323.27548218]
[121.24248505 308.28845215]
[120.61850739 293.30145264]
[119.99452972 278.31442261]
[119.37055206 263.32742310]
[118.74657440 248.34039307]
[118.12259674 233.35337830]
[117.49861908 218.36636353]
[116.87464142 203.37934875]
[116.25066376 188.39233398]
[115.62668610 173.40531921]
[107.36664581 161.01092529]
[114.52318573 146.90083313]
[113.89920807 131.91381836]
[113.27523041 116.92680359]
[100.29729462 120.19786072]
[88.78601074 115.19941711]
[83.13104248 104.93844604]
[68.31328583 102.60734558]
[53.43000412 100.73973083]
[38.49569702 99.33742523]
[23.56138992 97.93511963]
[16.80571365 111.52648926]
[5.59382772 121.75674438]
[-8.55795193 127.24231720]
[-23.73571396 127.24134827]
[-37.88678741 121.75395203]
[-49.09736252 111.52226257]
[-55.85129166 97.93002319]
[-57.23517227 82.81548309]
[-53.06183624 68.22275543]
[-43.89569855 56.12538910]
[-30.97640228 48.15944672]
[-16.05117607 45.40226364]
[-1.13853455 48.22671890]
[11.74470997 56.25083923]
[20.85620499 68.38941956]
[24.96369362 83.00081635]
[39.89800262 84.40312195]
[54.83230972 85.80541992]
[57.80141830 83.79249573]
[61.91173935 83.15456390]
[66.48884583 84.42045593]
[70.64438629 87.78958130]
[85.46215057 90.12068939]
[95.63121796 81.62366486]
[109.81019592 82.34207916]
[120.39799500 93.16843414]
[129.16419983 80.99659729]
[130.95072937 65.27658081]
[144.66720581 59.47074890]
[153.43341064 47.29891205]
[140.49752808 9.97789955]
[142.67436218 -4.86330605]
[144.85121155 -19.70451164]
[147.02804565 -34.54571533]
[149.20487976 -49.38692093]
[135.29249573 -55.20899200]
[123.26558685 -64.30867767]
[113.88016510 -76.11396027]
[107.72621155 -89.88275146]
[105.19057465 -104.74953461]
[106.43263245 -119.77977753]
[111.37431335 -134.02865601]
[119.70498657 -146.60047913]
[130.90097046 -156.70497131]
[144.25848389 -163.70695496]
[158.93785095 -167.16627502]
[174.01632690 -166.86549377]
[188.54605103 -162.82348633]
[201.61369324 -155.29437256]
[212.39778137 -144.75140381]
[220.22045898 -131.85734558]
[224.58995056 -117.42272949]
[225.23159790 -102.35491180]
[222.10507202 -87.60108185]
[215.40690613 -74.08866119]
[205.55815125 -62.66707230]
[193.17790222 -54.05427170]
[179.04440308 -48.79167175]
[164.04608154 -47.21008682]
[161.86924744 -32.36888123]
[159.69241333 -17.52767563]
[157.51557922 -2.68646908]
[155.33872986 12.15473652]
[160.61437988 17.48554993]
[164.57188416 3.01702666]
[179.08071899 -0.79002434]
[189.63221741 9.87140751]
[185.67497253 24.34000397]
[171.16566467 28.14717484]
[176.44131470 33.47798920]
[191.30436707 31.45565414]
[203.93537903 21.92842674]
[217.58961487 27.87916374]
[224.01100159 13.85171509]
[237.00914001 5.54198217]
[252.43638611 5.60157108]
[265.36996460 14.01146698]
[271.68280029 28.08810234]
[269.36050415 43.33967590]
[259.14410400 54.89946365]
[244.29360962 59.07877731]
[229.54777527 54.54402161]
[219.61193848 42.74221039]
[208.04403687 52.12478638]
[193.32670593 46.31870270]
[178.46365356 48.34103394]
[165.60525513 56.06512070]
[156.83903503 68.23695374]
[155.67951965 83.08636475]
[141.33604431 89.76280212]
[132.56982422 101.93463898]
[128.26225281 116.30282593]
[128.88621521 131.28984070]
[129.51019287 146.27685547]
[137.81486511 159.74322510]
[130.61370850 172.78134155]
[131.23768616 187.76835632]
[131.86166382 202.75537109]
[132.48564148 217.74238586]
[133.10960388 232.72940063]
[133.73358154 247.71641541]
[134.35755920 262.70343018]
[134.98153687 277.69046021]
[135.60551453 292.67745972]
[136.22949219 307.66448975]
[136.85346985 322.65148926]
[151.60647583 325.78195190]
[165.11711121 332.48370361]
[176.53610229 342.33547974]
[185.14561462 354.71801758]
[190.40444946 368.85290527]
[191.98205566 383.85165405]
[189.77925110 398.77139282]
[183.93450928 412.67425537]
[174.81523132 424.68630981]
[162.99465942 434.05245972]
[149.21585083 440.18395996]
[134.34495544 442.69537354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[23 126]
[24 125]
[25 124]
[28 55]
[29 54]
[30 50]
[31 49]
[32 48]
[58 123]
[59 122]
[61 120]
[62 119]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[102 118]
[103 117]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
