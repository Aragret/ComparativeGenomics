%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCCUGAGGGGGGGGGGGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCxxxxxxxxxxCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCCCCCCCCCCCAACCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[86.20847321 400.15270996]
[71.71878052 395.94424438]
[58.81254959 388.12811279]
[48.36975098 377.23727417]
[41.10238647 364.01428223]
[37.50595856 349.36065674]
[37.82567978 334.27557373]
[42.03974915 319.78750610]
[49.86084747 306.88430786]
[60.75571442 296.44570923]
[73.98152161 289.18344116]
[88.63652039 285.59268188]
[88.94857025 270.59591675]
[89.26062775 255.59916687]
[89.57268524 240.60241699]
[89.88474274 225.60566711]
[90.19680023 210.60890198]
[90.50885773 195.61215210]
[90.82090759 180.61540222]
[91.13296509 165.61865234]
[91.44502258 150.62188721]
[91.75708008 135.62513733]
[84.44509888 133.09292603]
[77.82968903 129.07875061]
[72.20709991 123.76239014]
[67.82912445 117.38191223]
[64.89179993 110.22304535]
[63.52667999 102.60637665]
[48.66363525 100.58404541]
[33.80058670 98.56171417]
[18.93754005 96.53937531]
[4.07449341 94.51704407]
[-10.78855324 92.49470520]
[-25.67183304 90.62709808]
[-40.57373428 88.91440582]
[-55.47563934 87.20171356]
[-70.37754059 85.48902893]
[-82.59838104 95.51033783]
[-98.31751251 93.87191010]
[-108.20905304 81.54580688]
[-106.40453339 65.84487152]
[-93.97453308 56.08420181]
[-78.29355621 58.05462265]
[-68.66484833 70.58712006]
[-53.76294708 72.29981232]
[-38.86104584 74.01250458]
[-23.95914459 75.72518921]
[-16.90936279 73.34901428]
[-8.76621914 77.63166046]
[6.09682798 79.65399170]
[20.95987511 81.67633057]
[35.82292175 83.69866180]
[50.68597031 85.72100067]
[65.54901886 87.74333191]
[77.20133209 71.41124725]
[95.71685028 63.68539047]
[115.52175903 66.89152527]
[124.53928375 54.90468979]
[133.55680847 42.91785812]
[122.48715210 32.77793503]
[112.44781494 21.61696243]
[103.53255463 9.53914738]
[95.82460785 -3.34274030]
[89.39593506 -16.90842247]
[84.30657196 -31.03123665]
[80.60403442 -45.57931900]
[78.32289124 -60.41683578]
[77.48443604 -75.40525055]
[78.09651184 -90.40460968]
[80.15338898 -105.27487946]
[83.63587189 -119.87719727]
[88.51143646 -134.07524109]
[94.73456573 -147.73643494]
[102.24716187 -160.73321533]
[110.97906494 -172.94425964]
[120.84875488 -184.25552368]
[131.76406860 -194.56141663]
[143.62310791 -203.76568604]
[156.31512451 -211.78242493]
[169.72163391 -218.53675842]
[183.71745300 -223.96563721]
[198.17190552 -228.01835632]
[212.95001221 -230.65708923]
[227.91380310 -231.85719299]
[242.92358398 -231.60745239]
[257.83917236 -229.91021729]
[272.52133179 -226.78132629]
[286.83294678 -222.24998474]
[300.64041138 -216.35852051]
[313.81478882 -209.16192627]
[326.23309326 -200.72740173]
[337.77938843 -191.13371277]
[348.34582520 -180.47039795]
[357.83374023 -168.83706665]
[366.15460205 -156.34230042]
[373.23065186 -143.10278320]
[378.99588013 -129.24212646]
[383.39642334 -114.88975525]
[386.39120483 -100.17966461]
[387.95223999 -85.24919891]
[388.06500244 -70.23777771]
[386.72839355 -55.28555679]
[383.95492554 -40.53213882]
[379.77044678 -26.11528015]
[374.21408081 -12.16959000]
[367.33767700 1.17472160]
[359.20544434 13.79305840]
[349.89334106 25.56760597]
[339.48828125 36.38842392]
[328.08740234 46.15447617]
[315.79718018 54.77458191]
[302.73239136 62.16825485]
[289.01498413 68.26645660]
[274.77304077 73.01226044]
[260.13952637 76.36133575]
[245.25112915 78.28243256]
[230.24679565 78.75759888]
[215.26666260 77.78240204]
[200.45057678 75.36595154]
[185.93688965 71.53079987]
[171.86111450 66.31276703]
[158.35466003 59.76057053]
[145.54365540 51.93538666]
[136.52612305 63.92221832]
[127.50859070 75.90904999]
[134.95036316 89.24971771]
[136.29251099 104.46654510]
[131.30079651 118.90386963]
[120.84639740 130.04203796]
[106.75382996 135.93719482]
[106.44178009 150.93394470]
[106.12972260 165.93069458]
[105.81766510 180.92745972]
[105.50560760 195.92420959]
[105.19355011 210.92095947]
[104.88149261 225.91770935]
[104.56944275 240.91447449]
[104.25738525 255.91122437]
[103.94532776 270.90798950]
[103.63327026 285.90472412]
[118.12620544 290.10202026]
[131.03846741 297.90817261]
[141.48966980 308.79092407]
[148.76725769 322.00833130]
[152.37498474 336.65914917]
[152.06692505 351.74447632]
[147.86404419 366.23580933]
[140.05290222 379.14505005]
[129.16610718 389.59204102]
[115.94590759 396.86453247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[37 44]
[57 125]
[58 124]
[59 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
