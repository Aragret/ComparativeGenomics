%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUACAACGGGGGGGGGGGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCxxxxxxxxxxUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCCCCCCCCCCCAUCCACAAC\
) } def
/len { sequence length } bind def

/coor [
[82.06255341 375.28442383]
[68.21661377 369.26840210]
[56.50794983 359.73898315]
[47.80542374 347.40332031]
[42.75482178 333.17678833]
[41.73093033 318.11511230]
[44.80973053 303.33593750]
[51.76275253 289.93603516]
[62.07403564 278.90969849]
[74.97841644 271.07519531]
[89.51830292 267.01385498]
[89.51830292 252.01387024]
[89.51830292 237.01387024]
[89.51830292 222.01387024]
[89.51830292 207.01387024]
[89.51830292 192.01387024]
[89.51830292 177.01387024]
[89.51830292 162.01387024]
[89.51830292 147.01387024]
[89.51830292 132.01387024]
[76.65990448 124.28978729]
[63.41731644 131.33491516]
[60.34682083 146.66809082]
[48.10647202 156.39988708]
[32.47579575 155.93525696]
[20.83511162 145.49359131]
[18.68079948 130.00511169]
[27.03005791 116.78301239]
[41.94062424 112.07036591]
[56.37218094 118.09233093]
[69.61476898 111.04720306]
[75.40248108 85.16693115]
[96.57495880 75.11812592]
[99.06008148 60.32542038]
[101.54519653 45.53271484]
[104.03031921 30.74000740]
[93.62554932 16.71580696]
[96.49417877 -0.16776648]
[110.38942719 -9.59007740]
[112.56626129 -24.43128204]
[114.74310303 -39.27248764]
[116.91993713 -54.11369324]
[103.34860992 -47.72472000]
[89.79907990 -54.15979767]
[86.17495728 -68.71540833]
[95.12518311 -80.75257111]
[110.10787201 -81.47310638]
[120.17169189 -70.35098267]
[123.87785339 -84.88591766]
[127.58401489 -99.42085266]
[131.29017639 -113.95578766]
[118.63562012 -105.90206909]
[103.65500641 -106.66438293]
[91.88336182 -115.96107483]
[87.67008209 -130.35719299]
[92.57188416 -144.53366089]
[104.77764893 -153.25256348]
[119.77759552 -153.29243469]
[132.02954102 -144.63853455]
[137.00660706 -130.48919678]
[143.06962585 -144.20925903]
[149.13262939 -157.92930603]
[155.19564819 -171.64935303]
[161.25865173 -185.36941528]
[167.32167053 -199.08946228]
[154.92535400 -207.60810852]
[144.30830383 -218.25679016]
[135.83106995 -230.67181396]
[129.78115845 -244.42955017]
[126.36325836 -259.06082153]
[125.69235229 -274.06704712]
[127.78983307 -288.93707275]
[132.58280945 -303.16467285]
[139.90664673 -316.26577759]
[149.51065063 -327.79489136]
[161.06660461 -337.36035156]
[174.18002319 -344.63748169]
[188.40359497 -349.37976074]
[203.25242615 -351.42703247]
[218.22062683 -350.71102905]
[232.79849243 -347.25762939]
[238.86151123 -360.97769165]
[244.92451477 -374.69772339]
[242.62809753 -390.93530273]
[255.70704651 -400.82839966]
[270.70687866 -394.19982910]
[272.19702148 -377.86853027]
[258.64456177 -368.63473511]
[252.58155823 -354.91467285]
[246.51855469 -341.19461060]
[258.88650513 -332.74041748]
[269.49319458 -322.15466309]
[277.97625732 -309.79678345]
[284.04565430 -296.08688354]
[287.49331665 -281.49127197]
[288.20037842 -266.50668335]
[286.14132690 -251.64337158]
[281.38482666 -237.40773010]
[274.09149170 -224.28507996]
[264.50839233 -212.72302246]
[252.96080017 -203.11625671]
[239.84103394 -195.79310608]
[225.59523010 -191.00424194]
[210.70805359 -188.91415405]
[195.68634033 -189.59547424]
[181.04173279 -193.02645874]
[174.97871399 -179.30639648]
[168.91569519 -165.58634949]
[162.85269165 -151.86628723]
[156.78967285 -138.14624023]
[150.72665405 -124.42618561]
[145.82510376 -110.24962616]
[142.11894226 -95.71469116]
[138.41278076 -81.17975616]
[134.70661926 -66.64482117]
[131.76113892 -51.93685532]
[129.58430481 -37.09564972]
[127.40747070 -22.25444603]
[125.23062897 -7.41324043]
[134.31379700 1.77875519]
[136.45634460 14.72031021]
[130.65022278 26.70015907]
[118.82302094 33.22512436]
[116.33790588 48.01783371]
[113.85278320 62.81053925]
[111.36766815 77.60324860]
[121.99844360 85.11808014]
[127.89292145 97.52677155]
[126.91127014 111.95024109]
[118.60820770 124.65393066]
[104.51830292 132.01387024]
[104.51830292 147.01387024]
[104.51830292 162.01387024]
[104.51830292 177.01387024]
[104.51830292 192.01387024]
[104.51830292 207.01387024]
[104.51830292 222.01387024]
[104.51830292 237.01387024]
[104.51830292 252.01387024]
[104.51830292 267.01385498]
[119.05818939 271.07519531]
[131.96257019 278.90969849]
[142.27386475 289.93603516]
[149.22688293 303.33593750]
[152.30567932 318.11511230]
[151.28178406 333.17678833]
[146.23118591 347.40332031]
[137.52865601 359.73898315]
[125.81999969 369.26840210]
[111.97406006 375.28442383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 31]
[22 30]
[33 126]
[34 125]
[35 124]
[36 123]
[39 119]
[40 118]
[41 117]
[42 116]
[48 115]
[49 114]
[50 113]
[51 112]
[60 111]
[61 110]
[62 109]
[63 108]
[64 107]
[65 106]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
