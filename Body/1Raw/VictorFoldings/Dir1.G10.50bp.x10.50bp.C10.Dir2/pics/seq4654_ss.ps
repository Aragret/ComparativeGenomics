%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUUAAUCGGGGGGGGGGCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCxxxxxxxxxxCCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCCCCCCCCCCCUUAUUAAUC\
) } def
/len { sequence length } bind def

/coor [
[102.83325958 378.54293823]
[88.98731995 372.52691650]
[77.27865601 362.99749756]
[68.57613373 350.66183472]
[63.52553177 336.43530273]
[62.50164032 321.37362671]
[65.58044434 306.59448242]
[72.53346252 293.19454956]
[82.84474945 282.16821289]
[95.74913025 274.33370972]
[110.28901672 270.27239990]
[110.28901672 255.27238464]
[110.28901672 240.27238464]
[110.28901672 225.27238464]
[110.28901672 210.27238464]
[110.28901672 195.27238464]
[110.28901672 180.27238464]
[110.28901672 165.27238464]
[110.28901672 150.27238464]
[110.28901672 135.27238464]
[96.15921021 134.92539978]
[83.84017181 129.37835693]
[75.06848145 119.93741608]
[70.87408447 108.41291046]
[55.88138962 108.88095093]
[40.88869476 109.34899139]
[37.28304672 124.00852203]
[29.85500336 137.15107727]
[19.15578270 147.80139160]
[5.97933292 155.16914368]
[-8.69656372 158.70759583]
[-23.78285980 158.15417480]
[-38.16004944 153.54994202]
[-50.76124954 145.23655701]
[-60.65137482 133.83094788]
[-67.09650421 120.17945862]
[-69.61836243 105.29515076]
[-68.02982330 90.28251648]
[-62.44876099 76.25559998]
[-53.28932571 64.25529480]
[-41.23120880 55.17210388]
[-27.16920471 49.68005371]
[-12.14680672 48.18669510]
[2.72122455 50.80284119]
[16.33158112 57.33436203]
[27.67428589 67.29656982]
[35.90763092 79.95021057]
[40.42065430 94.35629272]
[55.41334915 93.88825226]
[70.40604401 93.42021179]
[74.51333618 83.58276367]
[81.77201843 75.77529144]
[91.28456879 70.96318054]
[90.66059113 55.97616196]
[90.03661346 40.98914719]
[89.41263580 26.00213051]
[76.33547974 14.42951584]
[75.65486145 -2.68249297]
[87.30423737 -14.77174282]
[86.36861420 -29.74253464]
[85.43298340 -44.71332550]
[82.80820465 -48.35640335]
[81.63903809 -52.25564575]
[81.82218933 -55.90918350]
[83.09812927 -58.90349960]
[85.09496307 -60.95776367]
[85.40702057 -75.95452118]
[85.71907806 -90.95127106]
[86.03113556 -105.94802856]
[72.23278809 -112.39205933]
[62.25330353 -123.89552307]
[57.82168198 -138.46537781]
[59.70572662 -153.57730103]
[67.57902527 -166.61306763]
[80.07746887 -175.31414795]
[95.03563690 -178.17301941]
[109.86192322 -174.69438171]
[121.98760223 -165.48092651]
[129.31181335 -152.12892151]
[130.56559753 -136.95170593]
[125.53172302 -122.57881165]
[115.08235168 -111.50043488]
[101.02788544 -105.63597107]
[100.71582794 -90.63921356]
[100.40377808 -75.64246368]
[100.09172058 -60.64570618]
[100.40377808 -45.64895248]
[101.33940125 -30.67816162]
[102.27503204 -15.70737076]
[113.06097412 -8.58977318]
[117.83045197 3.63014531]
[114.62403107 16.55093384]
[104.39965057 25.37815285]
[105.02362823 40.36516953]
[105.64760590 55.35218430]
[106.27158356 70.33920288]
[126.93141937 80.02685547]
[136.60606384 103.16241455]
[151.31402588 100.21693420]
[166.02198792 97.27145386]
[180.72994995 94.32596588]
[195.43791199 91.38048553]
[199.18113708 76.58348846]
[208.98042297 64.88149261]
[222.89012146 58.59793472]
[238.14843750 58.98041534]
[251.72584534 65.95300293]
[260.92651367 78.13127136]
[263.92367554 93.09722900]
[260.12222290 107.87936401]
[250.27691650 119.54268646]
[236.34259033 125.77141571]
[221.08589172 125.32884979]
[207.53604126 118.30285645]
[198.38339233 106.08844757]
[183.67543030 109.03392792]
[168.96746826 111.97940826]
[154.25952148 114.92489624]
[139.55155945 117.87037659]
[153.87113953 122.33684540]
[168.86474609 121.89908600]
[182.17697144 128.81175232]
[190.44387817 141.32807922]
[191.57649231 156.28524780]
[185.28860474 169.90371704]
[173.16912842 178.74217224]
[158.28056335 180.56719971]
[144.38516235 174.91763306]
[134.99417114 163.22108459]
[132.48039246 148.43612671]
[125.28901672 135.27238464]
[125.28901672 150.27238464]
[125.28901672 165.27238464]
[125.28901672 180.27238464]
[125.28901672 195.27238464]
[125.28901672 210.27238464]
[125.28901672 225.27238464]
[125.28901672 240.27238464]
[125.28901672 255.27238464]
[125.28901672 270.27239990]
[139.82890320 274.33370972]
[152.73327637 282.16821289]
[163.04457092 293.19454956]
[169.99758911 306.59448242]
[173.07638550 321.37362671]
[172.05249023 336.43530273]
[167.00189209 350.66183472]
[158.29937744 362.99749756]
[146.59071350 372.52691650]
[132.74476624 378.54293823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 50]
[25 49]
[26 48]
[53 96]
[54 95]
[55 94]
[56 93]
[59 89]
[60 88]
[61 87]
[66 86]
[67 85]
[68 84]
[69 83]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
