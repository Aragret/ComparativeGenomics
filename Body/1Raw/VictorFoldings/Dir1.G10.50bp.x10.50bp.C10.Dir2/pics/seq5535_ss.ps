%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAUCGAAGGGGGGGGGGGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUxxxxxxxxxxCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACCCCCCCCCCCAUCAUCGAA\
) } def
/len { sequence length } bind def

/coor [
[70.90087891 405.43441772]
[57.05494308 399.41839600]
[45.34627914 389.88897705]
[36.64375687 377.55331421]
[31.59315491 363.32678223]
[30.56926346 348.26510620]
[33.64806366 333.48596191]
[40.60108566 320.08602905]
[50.91236877 309.05969238]
[63.81674957 301.22518921]
[78.35663605 297.16387939]
[78.35663605 282.16387939]
[78.35663605 267.16387939]
[78.35663605 252.16386414]
[78.35663605 237.16386414]
[78.35663605 222.16386414]
[78.35663605 207.16386414]
[78.35663605 192.16386414]
[78.35663605 177.16386414]
[78.35663605 162.16386414]
[58.99259949 125.13490295]
[69.90930939 95.88217163]
[91.39087677 90.73860931]
[82.37335205 78.75177765]
[73.35581970 66.76494598]
[64.33828735 54.77811432]
[51.57242584 62.67418289]
[38.14141464 69.37666321]
[24.15655708 74.83000946]
[9.73373890 78.98904419]
[-5.00752735 81.81929016]
[-19.94508743 83.29730988]
[-34.95516205 83.41083527]
[-49.91337204 82.15894318]
[-64.69576263 79.55200195]
[-79.17984009 75.61161804]
[-93.24559021 70.37042999]
[-106.77645111 63.87188339]
[-119.66029358 56.16982269]
[-131.79035950 47.32807159]
[-143.06614685 37.41989136]
[-153.39421082 26.52739525]
[-162.68894958 14.74083900]
[-170.87336731 2.15789127]
[-177.87963867 -11.11717796]
[-183.64968872 -24.97436714]
[-188.13572693 -39.29884720]
[-191.30058289 -53.97191620]
[-193.11799622 -68.87199402]
[-193.57293701 -83.87560272]
[-192.66163635 -98.85841370]
[-190.39163208 -113.69628143]
[-186.78173828 -128.26625061]
[-181.86187744 -142.44758606]
[-175.67280579 -156.12275696]
[-168.26580811 -169.17848206]
[-159.70227051 -181.50653076]
[-150.05314636 -193.00479126]
[-139.39840698 -203.57795715]
[-127.82633972 -213.13841248]
[-115.43282318 -221.60693359]
[-102.32056427 -228.91336060]
[-88.59821320 -234.99714661]
[-74.37948608 -239.80787659]
[-59.78220367 -243.30566406]
[-44.92732620 -245.46156311]
[-29.93795013 -246.25769043]
[-14.93828106 -245.68743896]
[-0.05261587 -243.75553894]
[14.59569645 -240.47801208]
[28.88527298 -235.88200378]
[42.69770050 -230.00561523]
[55.91852951 -222.89752197]
[68.43820190 -214.61663818]
[80.15296936 -205.23156738]
[90.96575928 -194.82009888]
[100.78697968 -183.46849060]
[109.53524017 -171.27082825]
[117.13804626 -158.32815552]
[123.53240204 -144.74775696]
[128.66532898 -130.64213562]
[132.49427795 -116.12819672]
[134.98751831 -101.32620239]
[136.12440491 -86.35881805]
[135.89550781 -71.35005951]
[134.30271912 -56.42429733]
[131.35925293 -41.70521927]
[127.08949280 -27.31479454]
[121.52881622 -13.37226486]
[114.72330475 0.00683237]
[106.72934723 12.71163177]
[97.61319733 24.63685608]
[87.45037842 35.68368530]
[76.32512665 45.76058578]
[85.34265137 57.74741745]
[94.36018372 69.73425293]
[103.37771606 81.72108459]
[117.70030975 86.17789459]
[131.92709351 81.42407990]
[146.15386963 76.67026520]
[160.38064575 71.91645050]
[164.92411804 57.07945633]
[177.34104919 47.77357483]
[192.85687256 47.57711029]
[205.50546265 56.56560898]
[210.42314148 71.28281403]
[205.71899414 86.06964874]
[193.20184326 95.24028015]
[177.68478394 95.26841736]
[165.13446045 86.14323425]
[150.90768433 90.89704895]
[136.68090820 95.65086365]
[122.45412445 100.40467834]
[122.45412445 107.90467834]
[122.45412445 130.40467834]
[136.68090820 135.15849304]
[150.90768433 139.91230774]
[164.14212036 131.58261108]
[179.62739563 133.75984192]
[190.05183411 145.41595459]
[190.49334717 161.04730225]
[180.74343872 173.27323914]
[165.40574646 176.32104492]
[151.72224426 168.75164795]
[146.15386963 154.13908386]
[131.92709351 149.38526917]
[117.70030975 144.63145447]
[111.61439514 149.01455688]
[113.12026215 163.93878174]
[99.44255829 157.78076172]
[93.35663605 162.16386414]
[93.35663605 177.16386414]
[93.35663605 192.16386414]
[93.35663605 207.16386414]
[93.35663605 222.16386414]
[93.35663605 237.16386414]
[93.35663605 252.16386414]
[93.35663605 267.16387939]
[93.35663605 282.16387939]
[93.35663605 297.16387939]
[107.89652252 301.22518921]
[120.80090332 309.05969238]
[131.11218262 320.08602905]
[138.06521606 333.48596191]
[141.14401245 348.26510620]
[140.12011719 363.32678223]
[135.06951904 377.55331421]
[126.36698914 389.88897705]
[114.65833282 399.41839600]
[100.81239319 405.43441772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 97]
[24 96]
[25 95]
[26 94]
[98 113]
[99 112]
[100 111]
[101 110]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
