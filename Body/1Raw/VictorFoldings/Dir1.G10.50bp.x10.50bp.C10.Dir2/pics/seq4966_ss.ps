%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAUAAUAGGGGGGGGGGGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAxxxxxxxxxxUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACACCCCCCCCCCAAGCAUAAUA\
) } def
/len { sequence length } bind def

/coor [
[75.08744812 311.40719604]
[63.87201309 301.34185791]
[55.28061295 288.96105957]
[49.77656937 274.93243408]
[47.65670776 260.01254272]
[49.03535461 245.00601196]
[53.83815384 230.72210693]
[61.80609894 217.93115234]
[72.50949097 207.32293701]
[85.37110901 199.46955872]
[99.69734192 194.79454041]
[98.45046234 179.84645081]
[97.20359039 164.89837646]
[95.95671844 149.95028687]
[94.70983887 135.00219727]
[93.46296692 120.05410767]
[81.57058716 110.91237640]
[66.80453491 113.55123901]
[52.03847504 116.19010162]
[37.27241898 118.82896423]
[22.50636482 121.46783447]
[7.74030972 124.10669708]
[-7.02574587 126.74555969]
[-21.79180145 129.38442993]
[-36.55785751 132.02328491]
[-39.13109589 146.96163940]
[-46.66105652 160.11744690]
[-58.23846436 169.90209961]
[-72.46528625 175.13404846]
[-87.62357330 175.18150330]
[-101.88288116 170.03874207]
[-113.52132416 160.32678223]
[-121.13351440 147.21836853]
[-123.80023956 132.29641724]
[-121.19947815 117.36283875]
[-113.64527893 104.22092438]
[-102.04985809 94.45762634]
[-87.81341553 89.25190735]
[-72.65507507 89.23238373]
[-58.40526962 94.40142059]
[-46.78474045 104.13481903]
[-39.19672012 117.25723267]
[-24.43066597 114.61837006]
[-9.66460991 111.97950745]
[5.10144520 109.34063721]
[19.86750031 106.70177460]
[34.63355637 104.06291199]
[49.39961243 101.42404938]
[64.16566467 98.78517914]
[78.93172455 96.14631653]
[81.30863190 89.03292847]
[86.06244659 74.80615234]
[88.43935394 67.69275665]
[78.22587585 56.70709610]
[68.01239014 45.72143173]
[52.18659210 41.42305374]
[48.25836182 25.50133514]
[60.26873398 14.33517838]
[75.86245728 19.41136551]
[78.99805450 35.50794983]
[89.21154022 46.49361420]
[99.42501831 57.47927856]
[114.40473175 58.25912476]
[125.70373535 48.39340210]
[116.96723938 36.18565750]
[109.44975281 23.19169617]
[103.22148132 9.53284836]
[98.34056854 -4.66335535]
[94.85259247 -19.26436615]
[92.79011536 -34.13385391]
[92.17239380 -49.13298798]
[93.00520325 -64.12171173]
[95.28076172 -78.96009064]
[98.97782135 -93.50956726]
[104.06186676 -107.63429260]
[110.48543549 -121.20239258]
[118.18852997 -134.08718872]
[127.09924316 -146.16835022]
[137.13436890 -157.33309937]
[148.20022583 -167.47718811]
[160.19346619 -176.50590515]
[173.00213623 -184.33493042]
[186.50662231 -190.89118958]
[200.58082581 -196.11343384]
[215.09336853 -199.95294189]
[229.90872192 -202.37384033]
[244.88856506 -203.35353088]
[259.89303589 -202.88287354]
[274.78201294 -200.96624756]
[289.41653442 -197.62155151]
[303.65988159 -192.88003540]
[317.37911987 -186.78594971]
[330.44616699 -179.39619446]
[342.73895264 -170.77976990]
[354.14276123 -161.01715088]
[364.55105591 -150.19944763]
[373.86672974 -138.42770386]
[382.00271606 -125.81180573]
[388.88314819 -112.46955872]
[394.44369507 -98.52553558]
[398.63247681 -84.10993195]
[401.41040039 -69.35734558]
[402.75146484 -54.40552521]
[402.64324951 -39.39406967]
[401.08666992 -24.46314430]
[398.09631348 -9.75215244]
[393.70007324 4.60154438]
[387.93899536 18.46392822]
[380.86691284 31.70556831]
[372.54980469 44.20282364]
[363.06536865 55.83901215]
[352.50213623 66.50548553]
[340.95874023 76.10265350]
[328.54296875 84.54090118]
[315.37075806 91.74144745]
[301.56503296 97.63706207]
[287.25479126 102.17269135]
[272.57357788 105.30599213]
[257.65847778 107.00770569]
[242.64880371 107.26194000]
[227.68464661 106.06632996]
[212.90573120 103.43203735]
[198.45007324 99.38365173]
[184.45263672 93.95897675]
[171.04409790 87.20866394]
[158.34967041 79.19573975]
[146.48786926 69.99501801]
[135.56945801 59.69240570]
[124.27045441 69.55812836]
[129.53060913 103.74865723]
[108.41105652 118.80723572]
[109.65792847 133.75532532]
[110.90480042 148.70341492]
[112.15167999 163.65148926]
[113.39855194 178.59957886]
[114.64542389 193.54766846]
[129.54820251 195.78459167]
[143.53318787 201.39859009]
[155.84617615 210.08692932]
[165.82315063 221.38102722]
[172.92605591 234.67182922]
[176.77185059 249.24258423]
[177.15312195 264.30749512]
[174.04933167 279.05410767]
[167.62785339 292.68719482]
[158.23497009 304.47155762]
[146.37725830 313.77160645]
[132.69416809 320.08587646]
[117.92362976 323.07382202]
[102.86218262 322.57427979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[53 62]
[54 61]
[55 60]
[63 129]
[64 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
