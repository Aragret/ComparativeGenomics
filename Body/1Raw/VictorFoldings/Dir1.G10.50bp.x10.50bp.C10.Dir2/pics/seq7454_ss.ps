%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUAUCUUGGGGGGGGGGAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAxxxxxxxxxxCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUCCCCCCCCCCUUUAUAUCUU\
) } def
/len { sequence length } bind def

/coor [
[107.87435913 458.85253906]
[94.02842712 452.83651733]
[82.31976318 443.30709839]
[73.61724091 430.97143555]
[68.56663513 416.74490356]
[67.54274750 401.68322754]
[70.62154388 386.90408325]
[77.57456207 373.50415039]
[87.88584900 362.47781372]
[100.79022980 354.64331055]
[115.33011627 350.58200073]
[115.33011627 335.58200073]
[115.33011627 320.58200073]
[115.33011627 305.58200073]
[115.33011627 290.58200073]
[115.33011627 275.58200073]
[115.33011627 260.58200073]
[115.33011627 245.58198547]
[115.33011627 230.58198547]
[115.33011627 215.58198547]
[115.33011627 200.58198547]
[97.87263489 172.02766418]
[113.10280609 149.54635620]
[109.09506989 135.09167480]
[105.08732605 120.63698578]
[101.07958984 106.18229675]
[99.83290863 113.16161346]
[96.05073547 119.65670013]
[89.91254425 124.97616577]
[81.76427460 128.48620605]
[66.94651031 130.81730652]
[52.12875366 133.14840698]
[37.42170334 141.58280945]
[25.24561501 129.78538513]
[33.21131134 114.81928253]
[49.79765320 118.33065796]
[64.61540985 115.99954987]
[79.43316650 113.66844940]
[81.91828918 98.87574005]
[68.67569733 91.83060455]
[55.43311691 84.78546906]
[42.19052887 77.74033356]
[28.94794464 70.69519806]
[15.63278866 63.78820038]
[2.24650335 57.02008820]
[-11.13978195 50.25197220]
[-24.52606583 43.48385620]
[-41.38936234 41.73298645]
[-44.37514496 25.04402542]
[-29.16493988 17.55496597]
[-17.75795174 30.09757233]
[-4.37166691 36.86568832]
[9.01461792 43.63380051]
[22.40090370 50.40191650]
[29.83732796 50.61458969]
[35.99308014 57.45261383]
[49.23566437 64.49774933]
[62.47824860 71.54288483]
[75.72083282 78.58802032]
[88.96342468 85.63315582]
[103.19020081 80.87934113]
[90.46528625 72.90086365]
[78.81730652 63.41907501]
[68.42285156 52.57772446]
[59.43949127 40.54116058]
[52.00341415 27.49185562]
[46.22734833 13.62763214]
[42.19885635 -0.84133106]
[39.97901535 -15.69568729]
[39.60146713 -30.71024895]
[41.07194519 -45.65740204]
[44.36815262 -60.31054688]
[49.44011688 -74.44754791]
[56.21095657 -87.85408783]
[64.57801819 -100.32693481]
[74.41446686 -111.67699432]
[85.57118225 -121.73220825]
[97.87902832 -130.34014893]
[111.15142059 -137.37030029]
[125.18715668 -142.71611023]
[139.77346802 -146.29653931]
[154.68920898 -148.05728149]
[169.70826721 -147.97166443]
[184.60296631 -146.04098511]
[199.14750671 -142.29450989]
[213.12138367 -136.78903198]
[226.31277466 -129.60801697]
[238.52168274 -120.86032867]
[249.56303406 -110.67857361]
[259.26943970 -99.21710968]
[267.49377441 -86.64968872]
[274.11132812 -73.16682434]
[279.02178955 -58.97291946]
[282.15072632 -44.28314972]
[283.45071411 -29.32020569]
[282.90200806 -14.31092358]
[280.51296997 0.51716030]
[276.31979370 14.93925571]
[270.38604736 28.73672867]
[262.80166626 41.70041275]
[253.68168640 53.63377762]
[243.16430664 64.35591888]
[231.40898132 73.70429993]
[218.59393311 81.53719330]
[204.91343689 87.73584747]
[190.57485962 92.20630646]
[175.79559326 94.88079071]
[160.79968262 95.71875763]
[145.81445312 94.70751190]
[131.06709290 91.86236572]
[116.78115082 87.22647095]
[115.53427887 102.17455292]
[119.54201508 116.62924194]
[123.54975891 131.08393860]
[127.55749512 145.53862000]
[140.58424377 145.86083984]
[153.12599182 154.12922668]
[160.37477112 169.54309082]
[174.39149475 174.88461304]
[189.56076050 169.66229248]
[203.02380371 178.38732910]
[204.45291138 194.36659241]
[192.75180054 205.34219360]
[176.89656067 202.89456177]
[169.04997253 188.90132141]
[155.03326416 183.55981445]
[148.85748291 187.81535339]
[150.05282593 202.76765442]
[136.50590515 196.32644653]
[130.33012390 200.58198547]
[130.33012390 215.58198547]
[130.33012390 230.58198547]
[130.33012390 245.58198547]
[130.33012390 260.58200073]
[130.33012390 275.58200073]
[130.33012390 290.58200073]
[130.33012390 305.58200073]
[130.33012390 320.58200073]
[130.33012390 335.58200073]
[130.33012390 350.58200073]
[144.87001038 354.64331055]
[157.77438354 362.47781372]
[168.08566284 373.50415039]
[175.03869629 386.90408325]
[178.11749268 401.68322754]
[177.09359741 416.74490356]
[172.04299927 430.97143555]
[163.34046936 443.30709839]
[151.63180542 452.83651733]
[137.78587341 458.85253906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 115]
[24 114]
[25 113]
[26 112]
[30 38]
[31 37]
[32 36]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 54]
[45 53]
[46 52]
[47 51]
[61 111]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
