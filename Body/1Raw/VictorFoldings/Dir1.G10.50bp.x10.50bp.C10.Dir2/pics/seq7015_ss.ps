%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGUACUAGGGGGGGGGGCACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGxxxxxxxxxxGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCCCCCCCCCCCAUCGCACUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.57330322]
[71.19830322 361.55728149]
[59.48964310 352.02786255]
[50.78712082 339.69219971]
[45.73651886 325.46566772]
[44.71262741 310.40399170]
[47.79142761 295.62484741]
[54.74444962 282.22491455]
[65.05573273 271.19857788]
[77.96011353 263.36407471]
[92.50000000 259.30276489]
[92.50000000 244.30276489]
[92.50000000 229.30276489]
[92.50000000 214.30276489]
[92.50000000 199.30276489]
[92.50000000 184.30276489]
[92.50000000 169.30276489]
[92.50000000 154.30276489]
[92.50000000 139.30276489]
[92.50000000 124.30275726]
[86.60167694 119.67028809]
[84.47640991 134.51896667]
[70.55447388 140.10284424]
[58.75766754 130.83811951]
[60.88266373 115.98940277]
[74.80503845 110.40533447]
[68.90672302 105.77285767]
[54.33401871 109.32762146]
[39.76131439 112.88238525]
[25.18861198 116.43714905]
[11.23356724 126.06487274]
[-1.88104260 115.32041168]
[4.81303167 99.74396515]
[21.63385010 101.86444092]
[36.20655060 98.30968475]
[50.77925491 94.75492096]
[65.35195923 91.20015717]
[73.60424805 78.67419434]
[71.11912537 63.88148880]
[68.63401031 49.08878326]
[66.14889526 34.29607391]
[63.66377258 19.50336838]
[49.77128983 18.26339912]
[36.59637070 13.71556377]
[24.91389847 6.13241339]
[15.40976238 -4.03512716]
[8.64058018 -16.18457222]
[5.00110054 -29.59757233]
[4.70118904 -43.48239136]
[7.75373077 -57.02063370]
[13.97415257 -69.41549683]
[22.99157715 -79.93864441]
[34.27093506 -87.97302246]
[47.14470291 -93.04903412]
[45.27708817 -107.93231201]
[43.40947723 -122.81559753]
[41.54186249 -137.69888306]
[39.67425156 -152.58215332]
[37.65191650 -167.44520569]
[35.47507858 -182.28640747]
[33.29824066 -197.12760925]
[18.32288933 -199.03587341]
[4.41815567 -204.91471863]
[-7.38413858 -214.32792664]
[-16.20818329 -226.57696533]
[-21.39917755 -240.75286865]
[-22.57191467 -255.80368042]
[-19.63936806 -270.61254883]
[-12.81915283 -284.08056641]
[-2.61737561 -295.20828247]
[10.20892525 -303.16998291]
[24.70795250 -307.37484741]
[39.80378342 -307.51083374]
[54.37620544 -303.56784058]
[67.34384918 -295.83850098]
[77.74443054 -284.89633179]
[84.80615234 -271.55337524]
[88.00498962 -256.79974365]
[87.10356903 -241.73023987]
[82.16878510 -227.46311951]
[73.56683350 -215.05711365]
[61.93602371 -205.43283081]
[48.13944626 -199.30444336]
[50.31628418 -184.46324158]
[52.49312210 -169.62203979]
[56.60220337 -163.42033386]
[54.55752945 -154.44976807]
[56.42514420 -139.56648254]
[58.29275513 -124.68321228]
[60.16036987 -109.79992676]
[62.02798080 -94.91664886]
[77.97612000 -92.57141876]
[92.64282990 -85.84990692]
[104.85221100 -75.28245544]
[113.62294769 -61.70810318]
[118.24724579 -46.20797348]
[118.34791565 -30.01915550]
[113.90913391 -14.43598461]
[105.27831268 -0.70654541]
[93.13894653 10.06727982]
[78.45648193 17.01824951]
[80.94159698 31.81095695]
[83.42671967 46.60366440]
[85.91183472 61.39636993]
[88.39695740 76.18907928]
[98.93209839 74.09979248]
[109.19352722 76.36846161]
[117.49250031 82.43207550]
[122.53977966 91.11935425]
[123.64472198 100.87301636]
[138.05693054 105.03089905]
[152.46914673 109.18878937]
[166.88136292 113.34667969]
[181.29357910 117.50456238]
[195.70579529 121.66245270]
[207.24916077 111.42749023]
[222.49697876 109.08068848]
[236.58374023 115.37090302]
[245.01440430 128.29093933]
[245.09877014 143.71807861]
[236.80993652 156.72955322]
[222.79281616 163.17347717]
[207.52024841 160.99359131]
[195.86563110 150.88549805]
[191.54791260 136.07466125]
[177.13569641 131.91677856]
[162.72348022 127.75889587]
[148.31126404 123.60100555]
[133.89904785 119.44311523]
[119.48683167 115.28523254]
[107.50000000 124.30275726]
[107.50000000 139.30276489]
[107.50000000 154.30276489]
[107.50000000 169.30276489]
[107.50000000 184.30276489]
[107.50000000 199.30276489]
[107.50000000 214.30276489]
[107.50000000 229.30276489]
[107.50000000 244.30276489]
[107.50000000 259.30276489]
[122.03988647 263.36407471]
[134.94427490 271.19857788]
[145.25555420 282.22491455]
[152.20857239 295.62484741]
[155.28736877 310.40399170]
[154.26348877 325.46566772]
[149.21287537 339.69219971]
[140.51036072 352.02786255]
[128.80169678 361.55728149]
[114.95575714 367.57330322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 37]
[28 36]
[29 35]
[30 34]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 85]
[60 84]
[61 83]
[110 130]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
