%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUAAUCGGGGGGGGGGGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACxxxxxxxxxxAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACCCCCCCCCCCUCAUAAUAG\
) } def
/len { sequence length } bind def

/coor [
[83.11769867 348.38613892]
[70.24442291 340.48324585]
[60.12013245 329.27276611]
[53.56554794 315.66342163]
[51.11202621 300.75848389]
[52.95846558 285.76623535]
[58.95517731 271.90203857]
[68.61603546 260.28979492]
[81.15788269 251.87083435]
[95.56401062 247.32766724]
[95.25195312 232.33091736]
[94.93989563 217.33416748]
[94.62783813 202.33740234]
[94.31578064 187.34065247]
[94.00372314 172.34390259]
[93.69167328 157.34715271]
[93.37961578 142.35038757]
[93.06755829 127.35363770]
[92.75550079 112.35688782]
[85.67915344 100.29798889]
[92.24774170 87.95516968]
[91.93569183 72.95841980]
[76.94211578 72.38977051]
[62.00776672 70.94216919]
[47.18410873 68.62059784]
[32.52225113 65.43305206]
[18.07273483 61.39053726]
[3.88536930 56.50698090]
[-9.99093723 50.79921341]
[-23.50835037 44.28691483]
[-36.62027359 36.99253464]
[-49.28150177 28.94121742]
[-61.44839859 20.16071892]
[-73.07901001 10.68130589]
[-84.13325500 0.53565693]
[-94.57302094 -10.24125385]
[-104.36231232 -21.61227608]
[-113.46739960 -33.53821182]
[-121.85688019 -45.97794724]
[-129.50184631 -58.88860321]
[-136.37593079 -72.22566986]
[-142.45545959 -85.94317627]
[-147.71943665 -99.99382782]
[-152.14974976 -114.32920074]
[-155.73112488 -128.89987183]
[-158.45120239 -143.65559387]
[-160.30059814 -158.54553223]
[-161.27296448 -173.51834106]
[-161.36492920 -188.52241516]
[-160.57617188 -203.50601196]
[-158.90942383 -218.41749573]
[-156.37043762 -233.20545959]
[-152.96794128 -247.81893921]
[-148.71368408 -262.20755005]
[-143.62231445 -276.32165527]
[-137.71141052 -290.11267090]
[-131.00132751 -303.53298950]
[-123.51519012 -316.53637695]
[-115.27882385 -329.07803345]
[-106.32061005 -341.11468506]
[-96.67143250 -352.60482788]
[-86.36455536 -363.50891113]
[-75.43550873 -373.78930664]
[-63.92196655 -383.41055298]
[-51.86361694 -392.33953857]
[-39.30203247 -400.54547119]
[-26.28050804 -408.00000000]
[-12.84393883 -414.67752075]
[0.96136010 -420.55496216]
[15.08779716 -425.61206055]
[29.48667526 -429.83139038]
[44.10836029 -433.19839478]
[58.90244293 -435.70150757]
[73.81793213 -437.33206177]
[88.80340576 -438.08447266]
[103.80720520 -437.95608521]
[118.77761078 -436.94741821]
[133.66300964 -435.06188965]
[148.41210938 -432.30603027]
[162.97402954 -428.68930054]
[177.29861450 -424.22421265]
[191.33645630 -418.92614746]
[205.03916931 -412.81338501]
[218.35951233 -405.90695190]
[231.25158691 -398.23068237]
[243.67092896 -389.81103516]
[255.57473755 -380.67703247]
[266.92196655 -370.86016846]
[277.67352295 -360.39428711]
[287.79232788 -349.31546021]
[297.24346924 -337.66189575]
[305.99444580 -325.47372437]
[314.01501465 -312.79299927]
[321.27755737 -299.66342163]
[327.75701904 -286.13024902]
[333.43112183 -272.24011230]
[338.28024292 -258.04095459]
[342.28768921 -243.58166504]
[345.43963623 -228.91212463]
[347.72521973 -214.08287048]
[349.13659668 -199.14505005]
[349.66885376 -184.15014648]
[349.32019043 -169.14985657]
[348.09176636 -154.19587708]
[345.98788452 -139.33976746]
[343.01571655 -124.63272858]
[339.18557739 -110.12547302]
[334.51062012 -95.86800385]
[329.00698853 -81.90947723]
[322.69366455 -68.29800415]
[315.59237671 -55.08050156]
[307.72763062 -42.30254364]
[299.12652588 -30.00817299]
[289.81872559 -18.23977470]
[279.83630371 -7.03791332]
[269.21368408 3.55879354]
[257.98745728 13.51381683]
[246.19635010 22.79284096]
[233.88099670 31.36387634]
[221.08386230 39.19738007]
[207.84904480 46.26634216]
[194.22218323 52.54640198]
[180.25025940 58.01590729]
[165.98141479 62.65600204]
[151.46484375 66.45069122]
[136.75057983 69.38690186]
[121.88938141 71.45449829]
[106.93244171 72.64636230]
[107.24449921 87.64311218]
[114.32084656 99.70201111]
[107.75225830 112.04483032]
[108.06430817 127.04158020]
[108.37636566 142.03833008]
[108.68842316 157.03509521]
[109.00048065 172.03184509]
[109.31253815 187.02859497]
[109.62459564 202.02534485]
[109.93664551 217.02210999]
[110.24870300 232.01885986]
[110.56076050 247.01560974]
[125.14340210 250.95556641]
[138.02461243 258.84552002]
[148.16015625 270.04583740]
[154.72840881 283.64859009]
[157.19689941 298.55105591]
[155.36552429 313.54513550]
[149.38275146 327.41534424]
[139.73356628 339.03729248]
[127.20017242 347.46884155]
[112.79862213 352.02648926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
