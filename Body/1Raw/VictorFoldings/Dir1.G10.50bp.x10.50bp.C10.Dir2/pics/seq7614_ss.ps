%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUACUAACGGGGGGGGGGAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUxxxxxxxxxxCCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCCCCCCCCCCCUAAUACCAAC\
) } def
/len { sequence length } bind def

/coor [
[103.93225098 416.96551514]
[90.44337463 410.23397827]
[78.95787811 400.46942139]
[70.14350891 388.23950195]
[64.51272583 374.25531006]
[62.39289474 359.32983398]
[63.90726471 344.33084106]
[68.96778870 330.13034058]
[77.28025055 317.55392456]
[88.36138153 307.33276367]
[101.56694031 300.06112671]
[116.12916565 296.16174316]
[115.82118225 281.16491699]
[115.51320648 266.16806030]
[115.20523071 251.17123413]
[114.89725494 236.17439270]
[114.58927155 221.17756653]
[114.28129578 206.18072510]
[113.97332001 191.18388367]
[113.66534424 176.18704224]
[113.35736084 161.19021606]
[113.04938507 146.19337463]
[112.74140930 131.19653320]
[85.91063690 127.13861084]
[73.23628235 106.13481903]
[58.25604248 105.36515808]
[43.27580261 104.59549713]
[28.29556274 103.82583618]
[13.31532097 103.05617523]
[-1.66492021 102.28651428]
[-16.64516068 101.51685333]
[-22.53079987 115.48593140]
[-32.84147263 126.59745026]
[-46.33211136 133.50964355]
[-61.37366486 135.38783264]
[-76.14978027 132.00520325]
[-88.87618256 123.77024841]
[-98.01608276 111.67736053]
[-102.46580505 97.18681335]
[-101.68801880 82.04842377]
[-95.77664948 68.09022522]
[-85.44551849 56.99772263]
[-71.94216156 50.11040497]
[-56.89717484 48.25994110]
[-42.12731552 51.66978836]
[-29.41611481 59.92818832]
[-20.29851151 72.03789520]
[-15.87550163 86.53661346]
[-0.89526016 87.30627441]
[14.08498096 88.07593536]
[29.06522179 88.84559631]
[44.04546356 89.61525726]
[59.02570343 90.38491821]
[74.00594330 91.15457916]
[76.07678223 86.52365112]
[78.96418762 82.35270691]
[82.56960297 78.78411865]
[86.76996613 75.93968964]
[91.42190552 73.91650391]
[90.80608368 58.92914963]
[90.19026184 43.94179916]
[75.34590149 41.42412567]
[61.34952164 35.87479019]
[48.81299210 27.53638077]
[38.28434753 16.77341843]
[30.22385979 4.05641317]
[24.98389816 -10.05870152]
[22.79352951 -24.95487595]
[23.74850845 -39.98090744]
[27.80708694 -54.47993088]
[34.79184341 -67.81810760]
[44.39743042 -79.41234589]
[56.20393372 -88.75579834]
[69.69522858 -95.44001007]
[84.28152466 -99.17277527]
[99.32518768 -99.79091644]
[114.16855621 -97.26740265]
[128.16275024 -91.71256256]
[140.69599915 -83.36921692]
[151.22039795 -72.60211945]
[159.27589417 -59.88193893]
[164.51029968 -45.76476669]
[166.69480896 -30.86773109]
[165.73391724 -15.84207439]
[161.66963196 -1.34465027]
[154.67962646 11.99077511]
[145.06948853 23.58123398]
[133.25930786 32.92004013]
[119.76538086 39.59894562]
[105.17761230 43.32597351]
[105.79343414 58.31332397]
[106.40926361 73.30068207]
[123.49612427 80.43098450]
[133.64956665 98.19065857]
[147.34019470 92.06148529]
[161.03082275 85.93231201]
[174.72145081 79.80313110]
[188.41206360 73.67395782]
[188.78584290 58.41542053]
[195.75067139 44.83404160]
[207.92369080 35.62641525]
[222.88793945 32.62072754]
[237.67224121 36.41375351]
[249.34118652 46.25238800]
[255.57786560 60.18316269]
[255.14401245 75.44010925]
[248.12574768 88.99395752]
[235.91656494 98.15357208]
[220.94059753 101.10031128]
[206.17134094 97.24909973]
[194.54124451 87.36458588]
[180.85061646 93.49375916]
[167.15998840 99.62293243]
[153.46936035 105.75210571]
[139.77874756 111.88127899]
[154.73187256 113.06606293]
[169.29756165 109.48262024]
[184.02508545 112.32866669]
[196.20690918 121.08097839]
[203.60351562 134.13050842]
[204.85507202 149.07820129]
[199.73150635 163.17604065]
[189.17472839 173.83224487]
[175.12554932 179.08773804]
[160.16677856 177.97636414]
[147.04847717 170.70242310]
[138.18235779 158.60316467]
[135.19839478 143.90187073]
[127.73824310 130.88854980]
[128.04621887 145.88539124]
[128.35420227 160.88223267]
[128.66218567 175.87907410]
[128.97015381 190.87590027]
[129.27813721 205.87274170]
[129.58610535 220.86958313]
[129.89408875 235.86642456]
[130.20207214 250.86326599]
[130.51004028 265.86010742]
[130.81802368 280.85693359]
[131.12600708 295.85375977]
[145.83602905 299.15200806]
[159.32899475 305.87536621]
[170.82041931 315.63296509]
[179.64219666 327.85751343]
[185.28144836 341.83828735]
[187.41032410 356.76248169]
[185.90505981 371.76239014]
[180.85314941 385.96597290]
[172.54830933 398.54742432]
[161.47337341 408.77529907]
[148.27223206 416.05493164]
[133.71237183 419.96313477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[59 92]
[60 91]
[61 90]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
