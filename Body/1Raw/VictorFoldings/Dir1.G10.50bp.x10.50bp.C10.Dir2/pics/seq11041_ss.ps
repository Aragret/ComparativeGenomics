%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAUUGGCAGGGGGGGGGGGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACxxxxxxxxxxGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCCCCCCCCCCCACCAUUAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 388.50430298]
[71.01555634 382.95129395]
[58.81560135 374.08496094]
[49.20452881 362.46264648]
[42.78650284 348.81494141]
[39.96496582 333.99975586]
[40.91728210 318.94839478]
[45.58358765 304.60696411]
[53.67055511 291.87701416]
[64.66983032 281.55874634]
[77.88998413 274.30075073]
[92.50000000 270.55932617]
[92.50000000 255.55932617]
[92.50000000 240.55932617]
[92.50000000 225.55932617]
[92.50000000 210.55932617]
[92.50000000 195.55932617]
[92.50000000 180.55932617]
[92.50000000 165.55932617]
[92.50000000 150.55932617]
[92.50000000 135.55932617]
[92.50000000 120.55932617]
[82.05799103 109.79064941]
[67.06510162 109.32872009]
[52.07221985 108.86679840]
[38.19488907 126.12902832]
[12.44565296 124.44940186]
[-1.80103886 129.14320374]
[-12.31453514 141.72885132]
[-28.42217255 138.65052795]
[-33.55379486 123.07495117]
[-22.43042755 111.02494049]
[-6.49483967 114.89651489]
[7.75185251 110.20271301]
[6.52124023 95.25327301]
[-8.30124187 92.95240021]
[-23.12372398 90.65152740]
[-37.94620514 88.35065460]
[-52.76868820 86.04977417]
[-66.51530457 94.32081604]
[-81.50192261 88.59535217]
[-86.23208618 73.26547241]
[-77.07721710 60.09095383]
[-61.06015778 59.17815399]
[-50.46781158 71.22729492]
[-35.64533234 73.52816772]
[-20.82284927 75.82904816]
[-6.00036716 78.12992096]
[8.82211494 80.43079376]
[22.64897346 73.78857422]
[36.88261795 75.01277161]
[47.64645386 82.71269989]
[52.53414536 93.87390900]
[67.52703094 94.33583832]
[82.51992035 94.79776001]
[92.51101685 83.60946655]
[90.36243439 68.76414490]
[88.21385193 53.91881943]
[86.06527710 39.07349777]
[73.68836975 29.61569595]
[71.72088623 14.52982044]
[80.81372833 2.78862000]
[78.66514587 -12.05670261]
[76.51657104 -26.90202522]
[61.63455963 -29.69568062]
[48.46722794 -37.17231750]
[38.44286728 -48.52092743]
[32.64884949 -62.51049423]
[31.71365929 -77.62354279]
[35.73874283 -92.22071075]
[44.28749084 -104.71862030]
[56.43259430 -113.76158142]
[70.85665131 -118.36868286]
[85.99504089 -118.04018402]
[100.20566559 -112.81171417]
[111.94705963 -103.25041962]
[119.94561005 -90.39344788]
[123.33369446 -75.63540649]
[121.74379730 -60.57715607]
[115.34837341 -46.85209656]
[104.84115601 -35.94901657]
[91.36189270 -29.05060387]
[93.51047516 -14.20528221]
[95.65904999 0.64004087]
[107.70767212 9.32141495]
[110.09811401 24.34607697]
[100.91059875 36.92491913]
[103.05918121 51.77024078]
[105.20775604 66.61556244]
[107.35633850 81.46088409]
[110.62805176 83.12207794]
[113.54011536 85.35450745]
[115.99396515 88.08263397]
[130.24066162 83.38883209]
[144.48735046 78.69503784]
[158.73403931 74.00123596]
[172.98072815 69.30743408]
[187.22741699 64.61363220]
[201.47412109 59.91983032]
[202.22360229 44.76058578]
[208.40219116 30.89734840]
[219.17430115 20.20500565]
[233.08306885 14.12960911]
[248.24746704 13.49280834]
[262.61663818 18.38072395]
[274.24725342 28.13230515]
[281.56634521 41.42873383]
[283.58413696 56.47177124]
[280.02767944 71.22697449]
[271.37796021 83.69882202]
[258.80480957 92.20059967]
[244.00862122 95.58251190]
[228.99047852 93.38718414]
[215.78143311 85.91151428]
[206.16792297 74.16652679]
[191.92121887 78.86032104]
[177.67453003 83.55412292]
[163.42784119 88.24792480]
[149.18115234 92.94172668]
[134.93446350 97.63552856]
[120.68776703 102.32933044]
[135.19807434 98.52787018]
[149.57618713 102.80220032]
[159.65335083 113.91302490]
[162.50785828 128.63891602]
[157.31205750 142.71029663]
[145.57240295 152.04734802]
[130.69265747 153.94291687]
[116.98699951 147.84742737]
[108.42921448 135.52815247]
[107.50000000 120.55932617]
[107.50000000 135.55932617]
[107.50000000 150.55932617]
[107.50000000 165.55932617]
[107.50000000 180.55932617]
[107.50000000 195.55932617]
[107.50000000 210.55932617]
[107.50000000 225.55932617]
[107.50000000 240.55932617]
[107.50000000 255.55932617]
[107.50000000 270.55932617]
[122.11001587 274.30075073]
[135.33016968 281.55874634]
[146.32945251 291.87701416]
[154.41641235 304.60696411]
[159.08271790 318.94839478]
[160.03503418 333.99975586]
[157.21350098 348.81494141]
[150.79547119 362.46264648]
[141.18440247 374.08496094]
[128.98443604 382.95129395]
[114.96250153 388.50430298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 55]
[24 54]
[25 53]
[27 34]
[28 33]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[56 90]
[57 89]
[58 88]
[59 87]
[62 84]
[63 83]
[64 82]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
