%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACUCAUUGGGGGGGGGGUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUxxxxxxxxxxGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCCCCCCCCCCCACACUCAUU\
) } def
/len { sequence length } bind def

/coor [
[65.81729889 380.26739502]
[51.97136307 374.25137329]
[40.26269913 364.72195435]
[31.56017685 352.38629150]
[26.50957489 338.15975952]
[25.48568344 323.09808350]
[28.56448174 308.31890869]
[35.51750565 294.91897583]
[45.82878876 283.89266968]
[58.73316956 276.05813599]
[73.27305603 271.99682617]
[73.27305603 256.99682617]
[73.27305603 241.99684143]
[73.27305603 226.99684143]
[73.27305603 211.99684143]
[73.27305603 196.99684143]
[73.27305603 181.99684143]
[73.27305603 166.99684143]
[73.27305603 151.99684143]
[73.27305603 136.99684143]
[65.25138855 149.67172241]
[54.95158005 160.57649231]
[42.75464630 169.30775452]
[29.11177826 175.54249573]
[14.52765656 179.05012512]
[-0.45822248 179.70083618]
[-15.29149628 177.47059631]
[-29.42345047 172.44189453]
[-42.33131409 164.80075073]
[-53.53759384 154.82983398]
[-62.62774658 142.89797974]
[-69.26551056 129.44657898]
[-73.20533752 114.97323608]
[-74.30148315 100.01333618]
[-72.51339722 85.12029266]
[-67.90723419 70.84502411]
[-60.65337372 57.71561050]
[-51.02016068 46.21773529]
[-39.36394501 36.77672577]
[-26.11591721 29.74182701]
[-11.76615143 25.37327957]
[3.15452456 23.83268166]
[18.09416199 25.17702675]
[32.50010681 29.35658073]
[45.83945847 36.21673584]
[57.61876297 45.50371552]
[67.40227509 56.87398148]
[74.82807922 69.90691376]
[79.62149048 84.12040710]
[81.60517120 98.98865509]
[80.70678711 113.95516968]
[89.47299194 101.78333282]
[96.92790222 88.76702118]
[102.99091339 75.04696655]
[109.05392456 61.32691193]
[115.11694336 47.60686111]
[121.17995453 33.88680649]
[127.24296570 20.16675186]
[133.30598450 6.44669819]
[139.36898804 -7.27335548]
[127.02946472 1.25518310]
[113.12523651 6.88301039]
[98.32756805 9.33843040]
[83.35085297 8.50290298]
[68.91813660 4.41676283]
[55.72617722 -2.72271991]
[44.41185379 -12.57087135]
[35.52138901 -24.65224838]
[29.48399544 -38.38359451]
[26.59113884 -53.10199738]
[26.98248100 -68.09689331]
[30.63912582 -82.64436340]
[37.38454056 -96.04209900]
[46.89307785 -107.64329529]
[58.70569229 -116.88787079]
[72.25209045 -123.32952881]
[86.87830353 -126.65727997]
[101.87821198 -126.71047211]
[116.52765656 -123.48653412]
[130.11940002 -117.14110565]
[141.99728394 -107.98053741]
[151.58784485 -96.44706726]
[158.42811584 -83.09750366]
[162.18783569 -68.57633209]
[162.68551636 -53.58459091]
[159.89710999 -38.84603882]
[153.95828247 -25.07405090]
[166.22065735 -33.71316910]
[178.48303223 -42.35228348]
[181.46919250 -54.94342041]
[191.91442871 -61.87998962]
[203.88543701 -59.87944794]
[216.32487488 -68.26158905]
[228.76431274 -76.64373779]
[228.32598877 -92.06487274]
[236.31410217 -105.26311493]
[250.17965698 -112.02696228]
[265.49822998 -110.19808197]
[277.38171387 -100.36007690]
[282.03814697 -85.65220642]
[277.98162842 -70.76770782]
[266.50662231 -60.45616531]
[251.27476501 -58.00795746]
[237.14645386 -64.20429230]
[224.70701599 -55.82215118]
[212.26757812 -47.44000626]
[205.46701050 -31.29218102]
[187.12214661 -30.08991623]
[174.85977173 -21.45079994]
[162.59741211 -12.81168365]
[153.08905029 -1.21034217]
[147.02603149 12.50971127]
[140.96302795 26.22976494]
[134.90000916 39.94981766]
[128.83699036 53.66987228]
[122.77397919 67.38992310]
[116.71096802 81.10997772]
[110.64795685 94.83003235]
[123.94464111 87.88754272]
[138.93635559 88.38597870]
[151.74253845 96.19632721]
[159.04835510 109.29690552]
[158.96272278 124.29666138]
[151.50778198 137.31295776]
[138.61325073 144.97656250]
[123.61681366 145.30378723]
[110.40027618 138.20991516]
[102.38468170 125.53117371]
[101.64482880 110.54953766]
[92.87862396 122.72137451]
[88.27305603 136.99684143]
[88.27305603 151.99684143]
[88.27305603 166.99684143]
[88.27305603 181.99684143]
[88.27305603 196.99684143]
[88.27305603 211.99684143]
[88.27305603 226.99684143]
[88.27305603 241.99684143]
[88.27305603 256.99682617]
[88.27305603 271.99682617]
[102.81294250 276.05813599]
[115.71732330 283.89266968]
[126.02861023 294.91897583]
[132.98162842 308.31890869]
[136.06042480 323.09808350]
[135.03654480 338.15975952]
[129.98593140 352.38629150]
[121.28340912 364.72195435]
[109.57475281 374.25137329]
[95.72881317 380.26739502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[51 130]
[52 129]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[87 110]
[88 109]
[89 108]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
