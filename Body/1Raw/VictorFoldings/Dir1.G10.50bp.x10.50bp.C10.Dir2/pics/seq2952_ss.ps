%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUCAAUUGGGGGGGGGGGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAxxxxxxxxxxUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACAAACCCCCCCCCCAUACUCAAAUG\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 391.21438599]
[71.01555634 385.66137695]
[58.81560135 376.79504395]
[49.20452881 365.17272949]
[42.78650284 351.52502441]
[39.96496582 336.70983887]
[40.91728210 321.65847778]
[45.58358765 307.31704712]
[53.67055511 294.58709717]
[64.66983032 284.26882935]
[77.88998413 277.01083374]
[92.50000000 273.26940918]
[92.50000000 258.26940918]
[92.50000000 243.26940918]
[92.50000000 228.26940918]
[92.50000000 213.26940918]
[92.50000000 198.26940918]
[92.50000000 183.26940918]
[92.50000000 168.26940918]
[92.50000000 153.26940918]
[92.50000000 138.26940918]
[85.89917755 136.35882568]
[79.73619843 133.31929016]
[74.20240784 129.24519348]
[69.46963501 124.26302338]
[65.68484497 118.52747345]
[62.96554565 112.21665192]
[61.39617920 105.52648926]
[46.41593552 104.75682831]
[31.43569565 103.98717499]
[16.45545387 103.21751404]
[1.47521293 102.44785309]
[-13.50502777 101.67819214]
[-28.48526955 100.90853119]
[-44.64732742 109.67314911]
[-59.01009750 99.63545227]
[-74.00298309 99.17353058]
[-90.02079773 104.72923279]
[-99.79355621 90.87537384]
[-89.18647766 77.64940643]
[-73.54105377 84.18064117]
[-58.54817200 84.64257050]
[-49.48740005 76.57010651]
[-36.95418930 76.87001801]
[-27.71560860 85.92829132]
[-12.73536777 86.69795227]
[2.24487305 87.46761322]
[17.22511482 88.23727417]
[32.20535660 89.00692749]
[47.18559647 89.77658844]
[62.16583633 90.54624939]
[68.62193298 76.84370422]
[79.81199646 66.63472748]
[94.04779816 61.45952225]
[109.18160248 62.09887314]
[115.45101166 48.47189331]
[121.72041321 34.84491348]
[127.98982239 21.21793556]
[134.25923157 7.59095716]
[140.52862549 -6.03602171]
[127.69048309 -13.82574177]
[115.82399750 -23.02815247]
[105.08388519 -33.52328110]
[95.61016083 -45.17430115]
[87.52632904 -57.82931900]
[80.93778992 -71.32334900]
[75.93042755 -85.48047638]
[72.56953430 -100.11611938]
[70.89891815 -115.03948212]
[70.94036102 -130.05601501]
[72.69332123 -144.96992493]
[76.13494873 -159.58679199]
[81.22037506 -173.71606445]
[87.88330078 -187.17352295]
[96.03684998 -199.78373718]
[105.57474518 -211.38227844]
[116.37261963 -221.81797791]
[128.28971863 -230.95474243]
[141.17066956 -238.67349243]
[154.84753418 -244.87356567]
[169.14202881 -249.47415161]
[183.86776733 -252.41526794]
[198.83279419 -253.65856934]
[213.84199524 -253.18785095]
[228.69970703 -251.00923157]
[243.21221924 -247.15115356]
[257.19033813 -241.66387939]
[270.45181274 -234.61894226]
[282.82376099 -226.10823059]
[294.14489746 -216.24264526]
[304.26763916 -205.15084839]
[313.05996704 -192.97741699]
[320.40731812 -179.88107300]
[326.21386719 -166.03254700]
[330.40393066 -151.61238098]
[332.92285156 -136.80856323]
[333.73782349 -121.81410980]
[332.83819580 -106.82450104]
[330.23574829 -92.03514862]
[325.96432495 -77.63887024]
[320.07968140 -63.82334137]
[312.65853882 -50.76868820]
[303.79757690 -38.64509201]
[293.61239624 -27.61061859]
[282.23574829 -17.80912018]
[269.81591797 -9.36838055]
[256.51489258 -2.39844179]
[242.50601196 3.00982809]
[227.97195435 6.78592157]
[213.10218811 8.88060951]
[198.09056091 9.26658249]
[183.13279724 7.93880987]
[168.42388916 4.91460085]
[154.15560913 0.23338327]
[147.88619995 13.86036205]
[141.61679077 27.48734093]
[135.34739685 41.11431885]
[129.07798767 54.74129868]
[122.80858612 68.36827850]
[136.64556885 86.66210175]
[137.80487061 109.57022858]
[151.36676025 115.97920227]
[164.92866516 122.38818359]
[181.21923828 120.50424957]
[190.77748108 133.82986450]
[183.77070618 148.65676880]
[167.40686035 149.73231506]
[158.51968384 135.95007324]
[144.95779419 129.54110718]
[131.39588928 123.13212585]
[120.86880493 132.94374084]
[107.50000000 138.26940918]
[107.50000000 153.26940918]
[107.50000000 168.26940918]
[107.50000000 183.26940918]
[107.50000000 198.26940918]
[107.50000000 213.26940918]
[107.50000000 228.26940918]
[107.50000000 243.26940918]
[107.50000000 258.26940918]
[107.50000000 273.26940918]
[122.11001587 277.01083374]
[135.33016968 284.26882935]
[146.32945251 294.58709717]
[154.41641235 307.31704712]
[159.08271790 321.65847778]
[160.03503418 336.70983887]
[157.21350098 351.52502441]
[150.79547119 365.17272949]
[141.18440247 376.79504395]
[128.98443604 385.66137695]
[114.96250153 391.21438599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[36 42]
[37 41]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 114]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
