%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCCAACCCCAUGGGGGGGGGGGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUxxxxxxxxxxCAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCCCCCCCCCCCUAGCCAACCCCUU\
) } def
/len { sequence length } bind def

/coor [
[86.65231323 434.12371826]
[72.29006195 429.61700439]
[59.12917328 422.31112671]
[47.70857620 412.50524902]
[38.49593735 400.60095215]
[31.86850929 387.08572388]
[28.09767914 372.51293945]
[27.33786392 357.47940063]
[29.62017250 342.60067749]
[34.85115051 328.48608398]
[42.81658936 315.71359253]
[53.19031143 304.80621338]
[65.54751587 296.21060181]
[79.38218689 290.27877808]
[94.12780762 287.25360107]
[94.12780762 272.25360107]
[94.12780762 257.25360107]
[94.12780762 242.25360107]
[94.12780762 227.25360107]
[94.12780762 212.25360107]
[94.12780762 197.25360107]
[94.12780762 182.25360107]
[94.12780762 167.25360107]
[94.12780762 152.25360107]
[94.12780762 137.25360107]
[94.12780762 122.25359344]
[89.34815216 136.47171021]
[75.62717438 142.53263855]
[61.89797592 136.49037170]
[57.09901047 122.27875519]
[64.35466766 109.15033722]
[78.94068909 105.65234375]
[63.99993896 104.32041168]
[49.05919266 102.98847198]
[34.62649155 109.46981049]
[22.63653374 100.63294220]
[7.69578695 99.30100250]
[-7.24496078 97.96906281]
[-22.18570900 96.63712311]
[-37.12645721 95.30519104]
[-53.43991089 99.92119598]
[-62.39153671 85.52310944]
[-51.03419113 72.93553162]
[-35.79451752 80.36444092]
[-20.85376930 81.69638062]
[-5.91302252 83.02832031]
[9.02772522 84.36025238]
[23.96847343 85.69219208]
[37.33251190 79.11558533]
[50.39112854 88.04772186]
[65.33187866 89.37966156]
[80.27262115 90.71160126]
[83.63125610 84.00566101]
[90.34852600 70.59379578]
[93.70716095 63.88785553]
[83.69225311 52.72087479]
[73.67733765 41.55389404]
[63.66242218 30.38691139]
[47.78560257 28.08338737]
[39.81224823 14.16199398]
[45.85882950 -0.69796497]
[61.28693008 -5.09720230]
[74.26142883 4.33900023]
[74.82940674 20.37199593]
[84.84431458 31.53897858]
[94.85923004 42.70595932]
[104.87414551 53.87294388]
[119.86756134 54.31744385]
[130.52642822 43.76336288]
[141.18528748 33.20928192]
[151.84414673 22.65520287]
[142.49447632 10.90654945]
[134.46989441 -1.78412414]
[127.86447144 -15.26802826]
[122.75566101 -29.38706970]
[119.20336914 -43.97571182]
[117.24923706 -58.86290741]
[116.91616821 -73.87411499]
[118.20808411 -88.83332825]
[121.10983276 -103.56517029]
[125.58738708 -117.89691162]
[131.58825684 -131.66052246]
[139.04206848 -144.69461060]
[147.86145020 -156.84638977]
[157.94299316 -167.97337341]
[169.16848755 -177.94511414]
[181.40634155 -186.64466858]
[194.51304626 -193.97006226]
[208.33494568 -199.83541870]
[222.70999146 -204.17193604]
[237.46963501 -206.92880249]
[252.44082642 -208.07366943]
[267.44802856 -207.59313965]
[282.31530762 -205.49282837]
[296.86834717 -201.79736328]
[310.93649292 -196.55007935]
[324.35485840 -189.81250000]
[336.96606445 -181.66360474]
[348.62228394 -172.19895935]
[359.18685913 -161.52949524]
[368.53591919 -149.78034973]
[376.55981445 -137.08923340]
[383.16452026 -123.60498047]
[388.27255249 -109.48566437]
[391.82406616 -94.89682770]
[393.77740479 -80.00952911]
[394.10964966 -64.99830627]
[392.81692505 -50.03915787]
[389.91439819 -35.30747223]
[385.43606567 -20.97597504]
[379.43444824 -7.21269226]
[371.97994995 5.82100821]
[363.15991211 17.97231293]
[353.07775879 29.09875488]
[341.85171509 39.06987762]
[329.61340332 47.76878357]
[316.50631714 55.09347534]
[302.68408203 60.95807648]
[288.30880737 65.29382324]
[273.54904175 68.04989624]
[258.57778931 69.19396210]
[243.57060242 68.71262360]
[228.70343018 66.61151123]
[214.15060425 62.91526794]
[200.08271790 57.66722488]
[186.66471863 50.92892075]
[174.05393982 42.77935028]
[162.39823914 33.31406784]
[151.73936462 43.86814880]
[141.08050537 54.42222595]
[130.42164612 64.97631073]
[134.75524902 105.71492767]
[109.12780762 122.25359344]
[109.12780762 137.25360107]
[109.12780762 152.25360107]
[109.12780762 167.25360107]
[109.12780762 182.25360107]
[109.12780762 197.25360107]
[109.12780762 212.25360107]
[109.12780762 227.25360107]
[109.12780762 242.25360107]
[109.12780762 257.25360107]
[109.12780762 272.25360107]
[109.12780762 287.25360107]
[123.87342072 290.27877808]
[137.70808411 296.21060181]
[150.06529236 304.80621338]
[160.43902588 315.71359253]
[168.40446472 328.48608398]
[173.63543701 342.60067749]
[175.91773987 357.47940063]
[175.15792847 372.51293945]
[171.38710022 387.08572388]
[164.75967407 400.60095215]
[155.54702759 412.50524902]
[144.12643433 422.31112671]
[130.96554565 429.61700439]
[116.60329437 434.12371826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[55 67]
[56 66]
[57 65]
[58 64]
[68 131]
[69 130]
[70 129]
[71 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
