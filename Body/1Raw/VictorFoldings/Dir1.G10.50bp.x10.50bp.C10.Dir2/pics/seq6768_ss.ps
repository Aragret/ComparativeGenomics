%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACACGGGGGGGGGGCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCxxxxxxxxxxUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUCCCCCCCCCCAACCUCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[103.67043304 381.71075439]
[89.64848328 376.15774536]
[77.44852448 367.29141235]
[67.83745575 355.66909790]
[61.41942978 342.02139282]
[58.59789276 327.20620728]
[59.55020905 312.15481567]
[64.21651459 297.81341553]
[72.30348206 285.08343506]
[83.30275726 274.76516724]
[96.52291870 267.50720215]
[111.13292694 263.76574707]
[111.13292694 248.76576233]
[111.13292694 233.76576233]
[111.13292694 218.76576233]
[111.13292694 203.76576233]
[111.13292694 188.76576233]
[111.13292694 173.76576233]
[111.13292694 158.76576233]
[111.13292694 143.76576233]
[111.13292694 128.76576233]
[105.59036255 123.71304321]
[94.50522614 113.60760498]
[88.96266174 108.55489349]
[74.02664948 109.93891907]
[59.09063721 111.32294464]
[44.15462112 112.70697021]
[29.21861076 114.09099579]
[14.28259754 115.47502136]
[-0.65341502 116.85904694]
[-15.58942795 118.24306488]
[-30.52544022 119.62709045]
[-39.27957916 132.58468628]
[-54.32874680 136.83398438]
[-68.56718445 130.36862183]
[-75.27193451 116.24133301]
[-71.27722931 101.12259674]
[-58.46923447 92.15100861]
[-42.89550018 93.56269073]
[-31.90946579 104.69107819]
[-16.97345352 103.30705261]
[-2.03744030 101.92302704]
[12.89857197 100.53900146]
[27.83458519 99.15498352]
[42.77059937 97.77095795]
[57.70661163 96.38693237]
[72.64262390 95.00290680]
[87.57863617 93.61888123]
[100.33189392 85.72239685]
[108.22837830 72.96913910]
[96.11907959 64.10385895]
[84.73318481 54.32685089]
[74.13918304 43.69692230]
[64.40078735 32.27799606]
[55.57655716 20.13874817]
[47.71956635 7.35219240]
[40.87707138 -6.00477505]
[35.09022141 -19.85182190]
[30.39382172 -34.10566711]
[26.81611633 -48.68058777]
[24.37862396 -63.48892975]
[23.09600067 -78.44162750]
[22.97596359 -93.44875336]
[24.01923370 -108.42005920]
[26.21953583 -123.26549530]
[29.56363678 -137.89578247]
[34.03142548 -152.22293091]
[39.59603119 -166.16078186]
[46.22398758 -179.62548828]
[53.87543488 -192.53608704]
[62.50435257 -204.81494141]
[72.05884552 -216.38818359]
[82.48145294 -227.18621826]
[93.70948792 -237.14410400]
[105.67542267 -246.20196533]
[118.30729675 -254.30529785]
[131.52912903 -261.40539551]
[145.26142883 -267.45953369]
[159.42156982 -272.43130493]
[173.92440796 -276.29083252]
[188.68272400 -279.01486206]
[203.60775757 -280.58706665]
[218.60974121 -280.99792480]
[233.59844971 -280.24502563]
[248.48374939 -278.33288574]
[263.17608643 -275.27294922]
[277.58715820 -271.08367920]
[291.63021851 -265.79028320]
[305.22085571 -259.42453003]
[318.27734375 -252.02474976]
[330.72113037 -243.63543701]
[342.47738647 -234.30703735]
[353.47540283 -224.09567261]
[363.64901733 -213.06274414]
[372.93710327 -201.27461243]
[381.28375244 -188.80216980]
[388.63876343 -175.72042847]
[394.95791626 -162.10806274]
[400.20321655 -148.04693604]
[404.34307861 -133.62162781]
[407.35266113 -118.91887665]
[409.21383667 -104.02711487]
[409.91540527 -89.03591919]
[409.45312500 -74.03543091]
[407.82983398 -59.11587143]
[405.05526733 -44.36697006]
[401.14608765 -29.87743378]
[396.12582397 -15.73439980]
[390.02468872 -2.02292967]
[382.87936401 11.17451382]
[374.73278809 23.77855873]
[365.63403320 35.71340179]
[355.63772583 46.90726471]
[344.80404663 57.29282379]
[333.19815063 66.80761719]
[320.88983154 75.39443207]
[307.95309448 83.00160980]
[294.46575928 89.58341217]
[280.50894165 95.10024261]
[266.16656494 99.51893616]
[251.52491760 102.81290436]
[236.67202759 104.96234894]
[221.69723511 105.95433044]
[206.69061279 105.78289795]
[191.74238586 104.44906616]
[176.94248962 101.96086884]
[162.37991333 98.33325958]
[148.14222717 93.58806610]
[134.31507874 87.75382233]
[120.98162842 80.86562347]
[113.08515167 93.61888123]
[126.13292694 128.76576233]
[126.13292694 143.76576233]
[126.13292694 158.76576233]
[126.13292694 173.76576233]
[126.13292694 188.76576233]
[126.13292694 203.76576233]
[126.13292694 218.76576233]
[126.13292694 233.76576233]
[126.13292694 248.76576233]
[126.13292694 263.76574707]
[140.74293518 267.50720215]
[153.96310425 274.76516724]
[164.96237183 285.08343506]
[173.04934692 297.81341553]
[177.71565247 312.15481567]
[178.66796875 327.20620728]
[175.84642029 342.02139282]
[169.42840576 355.66909790]
[159.81732178 367.29141235]
[147.61737061 376.15774536]
[133.59542847 381.71075439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[49 131]
[50 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
