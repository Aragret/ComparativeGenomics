%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAACAAGGGGGGGGGGGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAxxxxxxxxxxCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCCCCCCCCCCCAACAAACAA\
) } def
/len { sequence length } bind def

/coor [
[90.60723114 540.75177002]
[76.76129150 534.73571777]
[65.05263519 525.20629883]
[56.35010910 512.87066650]
[51.29950714 498.64410400]
[50.27561569 483.58242798]
[53.35441208 468.80328369]
[60.30743408 455.40335083]
[70.61872101 444.37701416]
[83.52310181 436.54251099]
[98.06298828 432.48120117]
[98.06298828 417.48120117]
[98.06298828 402.48120117]
[98.06298828 387.48120117]
[98.06298828 372.48120117]
[98.06298828 357.48120117]
[98.06298828 342.48120117]
[98.06298828 327.48120117]
[98.06298828 312.48120117]
[98.06298828 297.48120117]
[98.06298828 282.48120117]
[98.06298828 267.48120117]
[88.47187805 252.81796265]
[97.72613525 236.93278503]
[97.41407776 221.93603516]
[96.94603729 206.94332886]
[96.32205963 191.95631409]
[95.69808197 176.96929932]
[95.07410431 161.98228455]
[82.31924438 159.61090088]
[70.33411407 154.64433289]
[59.64049149 147.29882812]
[50.70393372 137.89414978]
[43.91348648 126.83973694]
[39.56477737 114.61685944]
[37.84712982 101.75762939]
[38.83531952 88.82188416]
[24.51272202 84.36506653]
[10.19012547 79.90824890]
[-4.13247204 75.45143127]
[-15.88625908 85.44403076]
[-31.17960358 87.47311401]
[-45.13245392 80.89120483]
[-53.29250717 67.79856873]
[-53.05591965 52.37302399]
[-44.49818420 39.53679657]
[-30.35004616 33.38588333]
[-15.12612247 35.88302231]
[-3.68431258 46.23138046]
[0.32434374 61.12883759]
[14.64694118 65.58565521]
[28.96953773 70.04246521]
[43.29213715 74.49928284]
[54.60000229 57.51578522]
[70.79663849 45.10708618]
[90.13796234 38.60937500]
[110.54125214 38.72235107]
[114.84883881 24.35416603]
[119.15642548 9.98598194]
[123.46400452 -4.38220263]
[127.77159119 -18.75038719]
[118.60472870 -29.09291077]
[115.78423309 -42.51147461]
[119.94512177 -55.46282578]
[129.89329529 -64.58122253]
[142.94566345 -67.55304718]
[147.55123901 -81.82850647]
[152.15679932 -96.10396576]
[156.76235962 -110.37942505]
[143.75552368 -117.97128296]
[132.68511963 -128.18206787]
[124.06890869 -140.53419495]
[118.30990601 -154.44993591]
[115.67746735 -169.27842712]
[116.29470825 -184.32612610]
[120.13277435 -198.88920593]
[127.01213837 -212.28654480]
[136.61103821 -223.89149475]
[148.48052979 -233.16130066]
[162.06546021 -239.66238403]
[176.73040771 -243.09066772]
[191.78948975 -243.28582764]
[206.53836060 -240.23872375]
[220.28718567 -234.09187317]
[232.39291382 -225.13276672]
[242.28933716 -213.78045654]
[249.51358032 -200.56590271]
[253.72775269 -186.10717773]
[254.73474121 -171.08053589]
[252.48745728 -156.18879700]
[247.09100342 -142.12847900]
[238.79779053 -129.55722046]
[227.99571228 -119.06298828]
[215.18997192 -111.13661194]
[200.97955322 -106.14883423]
[186.02908325 -104.33293915]
[171.03782654 -105.77386475]
[166.43225098 -91.49840546]
[161.82669067 -77.22293854]
[157.22113037 -62.94747925]
[167.31018066 -50.03561401]
[167.74278259 -33.48934937]
[158.15202332 -19.79632759]
[142.13977051 -14.44280243]
[137.83218384 -0.07461797]
[133.52461243 14.29356575]
[129.21702576 28.66175079]
[124.90943909 43.02993393]
[136.43527222 49.61607742]
[146.30030823 58.49880219]
[154.05491638 69.27322388]
[159.34559631 81.44822693]
[161.93121338 94.46884918]
[161.69389343 107.74159241]
[158.64445496 120.66146088]
[152.92190552 132.63954163]
[144.78709412 143.12986755]
[134.61079407 151.65425110]
[122.85688782 157.82414246]
[110.06111908 161.35830688]
[110.68509674 176.34532166]
[111.30907440 191.33233643]
[111.93305206 206.31935120]
[115.43566895 214.82720947]
[112.41083527 221.62397766]
[112.72289276 236.62072754]
[121.49597168 246.13319397]
[121.41154480 258.67160034]
[113.06298828 267.48120117]
[113.06298828 282.48120117]
[113.06298828 297.48120117]
[113.06298828 312.48120117]
[113.06298828 327.48120117]
[113.06298828 342.48120117]
[113.06298828 357.48120117]
[113.06298828 372.48120117]
[113.06298828 387.48120117]
[113.06298828 402.48120117]
[113.06298828 417.48120117]
[113.06298828 432.48120117]
[127.60287476 436.54251099]
[140.50724792 444.37701416]
[150.81854248 455.40335083]
[157.77156067 468.80328369]
[160.85035706 483.58242798]
[159.82646179 498.64410400]
[154.77586365 512.87066650]
[146.07334900 525.20629883]
[134.36468506 534.73571777]
[120.51874542 540.75177002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 126]
[25 125]
[26 123]
[27 122]
[28 121]
[29 120]
[37 53]
[38 52]
[39 51]
[40 50]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[66 100]
[67 99]
[68 98]
[69 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
