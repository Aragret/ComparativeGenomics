%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCAAACGGGGGGGGGGUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACxxxxxxxxxxACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAACCCCCCCCCCAAACUCAUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.93167114]
[71.19830322 359.91564941]
[59.48964310 350.38623047]
[50.78712082 338.05056763]
[45.73651886 323.82403564]
[44.71262741 308.76235962]
[47.79142761 293.98318481]
[54.74444962 280.58328247]
[65.05573273 269.55694580]
[77.96011353 261.72244263]
[92.50000000 257.66113281]
[92.50000000 242.66111755]
[92.50000000 227.66111755]
[92.50000000 212.66111755]
[92.50000000 197.66111755]
[92.50000000 182.66111755]
[92.50000000 167.66111755]
[92.50000000 152.66111755]
[92.50000000 137.66111755]
[92.50000000 122.66111755]
[92.50000000 107.66111755]
[90.32316589 92.81991577]
[86.01557922 78.45172882]
[81.70799255 64.08354187]
[77.40040588 49.71535873]
[62.75529861 52.98857880]
[47.91399002 55.20868301]
[32.95211411 56.36435699]
[17.94591713 56.44971466]
[2.97186494 55.46432114]
[-11.89373779 53.41319275]
[-26.57513809 50.30678940]
[-40.99752045 46.16093445]
[-55.08739471 40.99675751]
[-68.77295685 34.84057236]
[-81.98447418 27.72375107]
[-94.65461731 19.68255997]
[-106.71881866 10.75797558]
[-118.11561584 0.99547523]
[-128.78691101 -9.55519295]
[-138.67834473 -20.84026527]
[-147.73950195 -32.80223465]
[-155.92420959 -45.38014221]
[-163.19076538 -58.50989914]
[-169.50213623 -72.12458801]
[-174.82615662 -86.15484619]
[-179.13569641 -100.52916718]
[-182.40879822 -115.17430115]
[-184.62879944 -130.01562500]
[-185.78436279 -144.97750854]
[-185.86959839 -159.98370361]
[-184.88409424 -174.95774841]
[-182.83285522 -189.82334900]
[-179.72633362 -204.50471497]
[-175.58036804 -218.92707825]
[-170.41607666 -233.01690674]
[-164.25979614 -246.70242310]
[-157.14286804 -259.91387939]
[-149.10157776 -272.58395386]
[-140.17691040 -284.64810181]
[-130.41432190 -296.04483032]
[-119.86356354 -306.71603394]
[-108.57841492 -316.60739136]
[-96.61637878 -325.66845703]
[-84.03840637 -333.85305786]
[-70.90859985 -341.11950684]
[-57.29385376 -347.43078613]
[-43.26355743 -352.75469971]
[-28.88920403 -357.06411743]
[-14.24404240 -360.33712769]
[0.59729868 -362.55700684]
[15.55919075 -363.71243286]
[30.56538963 -363.79757690]
[45.53942871 -362.81195068]
[60.40499878 -360.76058960]
[75.08634949 -357.65396118]
[89.50867462 -353.50787354]
[103.59846497 -348.34347534]
[117.28393555 -342.18710327]
[130.49534607 -335.07006836]
[143.16535950 -327.02868652]
[155.22943115 -318.10391235]
[166.62606812 -308.34124756]
[177.29721069 -297.79040527]
[187.18846130 -286.50518799]
[196.24943542 -274.54309082]
[204.43395996 -261.96505737]
[211.70031738 -248.83517456]
[218.01147461 -235.22038269]
[223.33528137 -221.19004822]
[227.64459229 -206.81565857]
[230.91748047 -192.17047119]
[233.13723755 -177.32911682]
[234.29257202 -162.36721802]
[234.37759399 -147.36102295]
[233.39184570 -132.38699341]
[231.34037781 -117.52143097]
[228.23364258 -102.84010315]
[224.08744812 -88.41781616]
[218.92294312 -74.32805634]
[212.76644897 -60.64263916]
[205.64932251 -47.43128586]
[197.60784912 -34.76132965]
[188.68298340 -22.69732857]
[178.92022705 -11.30076218]
[168.36930847 -0.62970394]
[157.08399963 9.26146793]
[145.12182617 18.32235146]
[132.54373169 26.50677109]
[119.41381073 33.77302170]
[105.79897308 40.08407593]
[91.76859283 45.40777588]
[96.07617950 59.77595901]
[100.38376617 74.14414215]
[104.69134521 88.51232910]
[109.08034515 74.16880035]
[118.54158783 62.52900696]
[131.68583679 55.30206680]
[146.58306885 53.54914856]
[161.04583740 57.52764130]
[172.95050049 66.65335846]
[180.54905701 79.58634186]
[182.72576904 94.42756653]
[179.16102600 108.99782562]
[170.37823486 121.15770721]
[157.66703796 129.12170410]
[142.89385986 131.72044373]
[128.22793579 128.57232666]
[115.82272339 120.13961029]
[107.50000000 107.66111755]
[107.50000000 122.66111755]
[107.50000000 137.66111755]
[107.50000000 152.66111755]
[107.50000000 167.66111755]
[107.50000000 182.66111755]
[107.50000000 197.66111755]
[107.50000000 212.66111755]
[107.50000000 227.66111755]
[107.50000000 242.66111755]
[107.50000000 257.66113281]
[122.03988647 261.72244263]
[134.94427490 269.55694580]
[145.25555420 280.58328247]
[152.20857239 293.98318481]
[155.28736877 308.76235962]
[154.26348877 323.82403564]
[149.21287537 338.05056763]
[140.51036072 350.38623047]
[128.80169678 359.91564941]
[114.95575714 365.93167114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 115]
[23 114]
[24 113]
[25 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
