%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCAAAGGGGGGGGGGGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAxxxxxxxxxxAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAACCCCCCCCCCAAAUCCCAAA\
) } def
/len { sequence length } bind def

/coor [
[77.15370941 303.93804932]
[65.26943970 294.66293335]
[55.95072937 282.81283569]
[49.73936462 269.07666016]
[46.99645996 254.25303650]
[47.88148880 239.20378113]
[52.34299850 224.80383301]
[60.12159348 211.89039612]
[70.76504517 201.21423340]
[83.65455627 193.39605713]
[98.04074097 188.89038086]
[97.10511780 173.91958618]
[96.16948700 158.94880676]
[95.23385620 143.97801208]
[94.29823303 129.00721741]
[93.36260223 114.03642273]
[79.90663910 107.40792847]
[67.46719360 115.79006958]
[55.02775574 124.17221069]
[42.58831406 132.55435181]
[30.14887428 140.93649292]
[23.44327927 155.90202332]
[7.10452890 157.30818176]
[-2.05947113 143.70843506]
[5.37841654 129.09303284]
[21.76673126 128.49705505]
[34.20617294 120.11491394]
[46.64561081 111.73277283]
[59.08505249 103.35063171]
[71.52449036 94.96849060]
[78.03538513 91.48259735]
[84.62823486 90.25610352]
[90.69200897 91.15326691]
[95.67789459 93.89131165]
[99.98548126 79.52312469]
[104.29306793 65.15494537]
[108.60065460 50.78675842]
[112.90823364 36.41857529]
[115.85372162 21.71061325]
[117.41130066 6.79170036]
[118.96887970 -8.12721157]
[120.21575165 -23.07529831]
[121.15138245 -38.04608917]
[122.08701324 -53.01688004]
[123.02264404 -67.98767090]
[123.95826721 -82.95846558]
[124.58224487 -97.94548035]
[124.89430237 -112.94223785]
[125.05033875 -127.94142151]
[125.05033875 -142.94142151]
[116.47705078 -152.63433838]
[116.82230377 -165.16828918]
[125.35232544 -173.80229187]
[125.66438293 -188.79904175]
[111.11859131 -192.73674011]
[97.94593811 -200.03698730]
[86.91004181 -210.27163696]
[78.64943695 -222.84257507]
[73.64067078 -237.01669312]
[72.17081451 -251.96862793]
[74.32097626 -266.82882690]
[79.96188354 -280.73406982]
[88.76160431 -292.87774658]
[100.20510864 -302.55648804]
[113.62440491 -309.21099854]
[128.23751831 -312.45834351]
[128.54957581 -327.45510864]
[128.86163330 -342.45184326]
[114.81478119 -348.20080566]
[103.79592896 -358.63867188]
[97.29528809 -372.35385132]
[96.19201660 -387.49145508]
[100.63532257 -402.00427246]
[110.02428436 -413.92953491]
[123.08911896 -421.65444946]
[138.06292725 -424.13430786]
[152.92060852 -421.03372192]
[165.65278625 -412.77200317]
[174.53755188 -400.46649170]
[178.37330627 -385.78143311]
[176.64128113 -370.70281982]
[169.57574463 -357.26992798]
[158.13223267 -347.29943848]
[143.85838318 -342.13980103]
[143.54632568 -327.14303589]
[143.23426819 -312.14630127]
[157.69964600 -308.29385376]
[170.83052063 -301.08688354]
[181.86149597 -290.94049072]
[190.14843750 -278.44128418]
[195.20602417 -264.31341553]
[196.73616028 -249.37664795]
[194.64559937 -234.49879456]
[189.05155945 -220.54530334]
[180.27516174 -208.32887268]
[168.82307434 -198.56214905]
[155.35813904 -191.81619263]
[140.66113281 -188.48698425]
[140.34907532 -173.49023438]
[149.63305664 -158.63063049]
[140.05033875 -142.94142151]
[140.05033875 -127.94142151]
[143.21591187 -121.20905304]
[139.89105225 -112.63018036]
[139.57899475 -97.63342285]
[142.22576904 -93.58742523]
[142.31437683 -87.82344818]
[138.92906189 -82.02283478]
[137.99343872 -67.05204773]
[137.05780029 -52.08125305]
[136.12217712 -37.11046219]
[135.18655396 -22.13966942]
[137.66271973 -17.98707199]
[137.51148987 -12.22439766]
[133.88778687 -6.56963062]
[132.33021545 8.34928131]
[130.77262878 23.26819420]
[141.67115784 12.96178341]
[156.38346863 10.03810310]
[170.39454651 15.39439201]
[179.40455627 27.38687325]
[180.64845276 42.33520889]
[173.74450684 55.65194321]
[160.81143188 63.25033951]
[145.81823730 62.79854965]
[133.36613464 54.43522263]
[127.27642059 40.72615814]
[122.96883392 55.09434128]
[118.66125488 69.46252441]
[114.35366821 83.83071136]
[110.04608154 98.19889832]
[108.33338928 113.10079956]
[109.26902008 128.07159424]
[110.20465088 143.04237366]
[111.14027405 158.01316833]
[112.07590485 172.98396301]
[113.01153564 187.95475769]
[127.84677124 190.63417053]
[141.60940552 196.78668213]
[153.49929810 206.05458069]
[162.82518005 217.89903259]
[169.04487610 231.63143921]
[171.79676819 246.45339966]
[170.92086792 261.50320435]
[166.46807861 275.90582275]
[158.69731140 288.82397461]
[148.06033325 299.50659180]
[135.17556763 307.33258057]
[120.79212189 311.84698486]
[105.74621582 312.78729248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[34 131]
[35 130]
[36 129]
[37 128]
[38 127]
[39 117]
[40 116]
[41 115]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[47 105]
[48 104]
[49 102]
[50 101]
[53 99]
[54 98]
[66 86]
[67 85]
[68 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
