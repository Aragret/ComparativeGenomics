%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUACUUUUGGGGGGGGGGAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGAxxxxxxxxxxCGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCACCCCCCCCCCUCUUUCUUUU\
) } def
/len { sequence length } bind def

/coor [
[75.18951416 429.78768921]
[61.34357452 423.77166748]
[49.63491440 414.24224854]
[40.93238831 401.90658569]
[35.88178635 387.68005371]
[34.85789490 372.61837769]
[37.93669510 357.83923340]
[44.88971710 344.43930054]
[55.20100021 333.41296387]
[68.10538483 325.57846069]
[82.64527130 321.51715088]
[82.64527130 306.51715088]
[82.64527130 291.51715088]
[82.64527130 276.51715088]
[82.64527130 261.51715088]
[82.64527130 246.51713562]
[82.64527130 231.51713562]
[82.64527130 216.51713562]
[82.64527130 201.51713562]
[82.64527130 186.51713562]
[71.02443695 196.00166321]
[56.08253479 194.68270874]
[46.30289459 183.30911255]
[47.23794174 168.33828735]
[58.35680389 158.26997375]
[73.34669495 158.82049561]
[83.69761658 169.67874146]
[85.56523132 154.79545593]
[87.43284607 139.91217041]
[89.30045319 125.02889252]
[68.25984955 106.59260559]
[72.66354370 74.16161346]
[106.33282471 57.65812683]
[92.55043793 51.73816681]
[79.24544525 59.50239563]
[64.09688568 57.96146393]
[52.89291763 47.91481781]
[49.79034042 33.37136459]
[36.00795746 27.45140266]
[22.22557640 21.53143883]
[8.44319439 15.61147690]
[-5.33918715 9.69151402]
[-19.12156868 3.77155042]
[-32.90394974 -2.14841270]
[-47.48787689 3.94130230]
[-62.07439423 -2.14220738]
[-68.00957489 -16.78970337]
[-61.77219009 -31.31108665]
[-47.06276321 -37.09107590]
[-32.60813904 -30.70050812]
[-26.98398590 -15.93079376]
[-13.20160484 -10.01083088]
[0.58077610 -4.09086800]
[14.36315727 1.82909524]
[28.14553833 7.74905825]
[41.92792130 13.66902161]
[55.71030045 19.58898544]
[68.39407349 11.82626343]
[83.39417267 13.03507710]
[94.94122314 22.96074867]
[98.47040558 37.95578384]
[112.25278473 43.87574768]
[126.09600067 38.09947586]
[131.58303833 24.13908386]
[137.07006836 10.17869473]
[142.55709839 -3.78169537]
[148.04412842 -17.74208450]
[136.09115601 -8.67972183]
[122.39717102 -2.55805206]
[107.67298126 0.30517423]
[92.68283844 -0.23866105]
[78.20483398 -4.16132975]
[64.99044800 -11.25922203]
[53.72559357 -21.16391754]
[44.99497223 -33.36130524]
[39.25175858 -47.21827316]
[36.79405594 -62.01555634]
[37.74943542 -76.98509979]
[42.06830597 -91.34989929]
[49.52649307 -104.36433411]
[59.73687363 -115.35287476]
[72.16947174 -123.74516296]
[86.17896271 -129.10559082]
[101.03817749 -131.15591431]
[115.97583008 -129.78971863]
[130.21656799 -125.07789612]
[143.02124023 -117.26504517]
[153.72517395 -106.75668335]
[161.77279663 -94.09825897]
[166.74638367 -79.94681549]
[168.38778687 -65.03688812]
[166.61178589 -50.14239883]
[161.50970459 -36.03466415]
[173.20933533 -45.42182922]
[176.38046265 -61.14834976]
[190.71833801 -68.34590912]
[205.22416687 -61.49315262]
[208.77032471 -45.84693146]
[198.63650513 -33.40968323]
[182.59649658 -33.72220230]
[170.89686584 -24.33504295]
[162.00451660 -12.25505352]
[156.51748657 1.70533609]
[151.03045654 15.66572571]
[145.54342651 29.62611580]
[140.05639648 43.58650589]
[148.94874573 55.66649246]
[163.90899658 54.57518387]
[178.86924744 53.48387146]
[192.12582397 43.83011627]
[207.00268555 50.73017883]
[208.19580078 67.08586884]
[194.47776794 76.07185364]
[179.96055603 68.44412231]
[165.00030518 69.53543091]
[150.04005432 70.62673950]
[148.95162964 78.04734802]
[146.77479553 92.88854980]
[145.68638611 100.30915070]
[159.70309448 105.65066528]
[176.65704346 105.64100647]
[181.35963440 121.92971039]
[167.00930786 130.95768738]
[154.36158752 119.66738129]
[140.34486389 114.32586670]
[122.34201050 126.96261597]
[104.18373871 126.89650726]
[102.31612396 141.77978516]
[100.44850922 156.66307068]
[98.58089447 171.54634094]
[97.64527130 186.51713562]
[97.64527130 201.51713562]
[97.64527130 216.51713562]
[97.64527130 231.51713562]
[97.64527130 246.51713562]
[97.64527130 261.51715088]
[97.64527130 276.51715088]
[97.64527130 291.51715088]
[97.64527130 306.51715088]
[97.64527130 321.51715088]
[112.18515778 325.57846069]
[125.08953857 333.41296387]
[135.40081787 344.43930054]
[142.35383606 357.83923340]
[145.43264771 372.61837769]
[144.40875244 387.68005371]
[139.35815430 401.90658569]
[130.65562439 414.24224854]
[118.94696045 423.77166748]
[105.10102081 429.78768921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 130]
[28 129]
[29 128]
[30 127]
[33 62]
[34 61]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[93 101]
[94 100]
[107 116]
[108 115]
[109 114]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
