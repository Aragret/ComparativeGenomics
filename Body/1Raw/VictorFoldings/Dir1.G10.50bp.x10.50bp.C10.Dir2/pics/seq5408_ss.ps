%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCAGCACGGGGGGGGGGCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACxxxxxxxxxxCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCCCCCCCCCCCACUCAAGCAC\
) } def
/len { sequence length } bind def

/coor [
[83.07601166 390.27743530]
[70.51779175 381.92630005]
[60.43156433 370.71383667]
[53.45137024 357.34494019]
[50.01598740 342.65994263]
[50.34136581 327.58197021]
[54.40705109 313.05886841]
[61.95746994 300.00350952]
[72.51799774 289.23663330]
[85.42478943 281.43499756]
[99.86652374 277.08905029]
[99.24254608 262.10202026]
[98.61856842 247.11500549]
[97.99459076 232.12799072]
[97.37061310 217.14097595]
[96.74663544 202.15396118]
[96.12265778 187.16694641]
[95.49868011 172.17991638]
[94.87470245 157.19290161]
[94.25072479 142.20588684]
[80.51541901 137.87799072]
[69.00725555 129.22056580]
[61.04162598 117.22314453]
[46.46892548 120.77790833]
[31.89622116 124.33266449]
[29.21704102 139.32406616]
[20.66656494 151.92601013]
[7.72621584 159.95516968]
[-7.36201286 162.02041626]
[-21.98399353 157.76394653]
[-33.60638046 147.92320251]
[-40.21552658 134.20318604]
[-40.66635132 118.98094177]
[-34.88075638 104.89382935]
[-23.86112022 94.38252258]
[-9.51666927 89.26817322]
[5.66733694 90.43686676]
[19.06017685 97.68611908]
[28.34145927 109.75996399]
[42.91416168 106.20520020]
[57.48686600 102.65043640]
[58.61849594 89.90235138]
[63.48584747 78.06582642]
[71.64951324 68.20941162]
[82.37252808 61.22289658]
[78.66636658 46.68796158]
[74.96020508 32.15302658]
[71.25404358 17.61808968]
[56.31394577 19.22252846]
[41.29758453 18.68435478]
[26.51067162 16.01452446]
[12.25425148 11.26739311]
[-1.18143272 4.53960419]
[-13.52284908 -4.03187275]
[-24.51874161 -14.27253246]
[-33.94524765 -25.97388840]
[-41.61045837 -38.89771652]
[-47.35831451 -52.78090286]
[-51.07180023 -67.34080505]
[-52.67531586 -82.28100586]
[-52.13621140 -97.29733276]
[-49.46546555 -112.08408356]
[-44.71745300 -126.34020996]
[-37.98883057 -139.77546692]
[-29.41659164 -152.11636353]
[-19.17525101 -163.11161804]
[-7.47331190 -172.53739929]
[5.45099020 -180.20181274]
[19.33453369 -185.94880676]
[33.89466476 -189.66139221]
[48.83496475 -191.26397705]
[63.85125732 -190.72395325]
[78.63784027 -188.05229187]
[92.89366913 -183.30339050]
[106.32852173 -176.57394409]
[118.66887665 -168.00094604]
[129.66349792 -157.75891113]
[139.08856201 -146.05639648]
[146.75216675 -133.13162231]
[152.49830627 -119.24771881]
[156.20999146 -104.68735504]
[157.81166077 -89.74696350]
[157.27069092 -74.73069763]
[154.59812927 -59.94428253]
[149.84834290 -45.68874359]
[143.11805725 -32.25431061]
[134.54429626 -19.91448593]
[124.30158997 -8.92049408]
[112.59848785 0.50383961]
[99.67323303 8.16664886]
[85.78897858 13.91192818]
[89.49514008 28.44686508]
[93.20130157 42.98180008]
[96.90746307 57.51673889]
[111.81031799 59.07436371]
[125.25170898 65.69631958]
[135.56832886 76.56317139]
[141.48356628 90.33020782]
[156.46328735 89.55036163]
[171.44299316 88.77051544]
[177.27851868 85.44571686]
[183.04125977 85.59427643]
[187.05950928 88.28299713]
[202.05868530 88.12696075]
[217.05787659 87.97092438]
[222.36572266 73.75153351]
[232.45471191 62.41235352]
[245.96037292 55.48692703]
[261.05618286 53.91185760]
[275.70056152 57.90015793]
[287.91296387 66.91244507]
[296.04180908 79.72988129]
[298.98767090 94.61901855]
[296.35217285 109.56621552]
[288.49176025 122.54998779]
[276.46948242 131.81439209]
[261.91125488 136.10647583]
[246.78593445 134.84580994]
[233.13912964 128.20285034]
[222.81643677 117.07601166]
[217.21391296 102.97011566]
[202.21472168 103.12615204]
[187.21554565 103.28218842]
[172.22283936 103.75022888]
[157.24313354 104.53007507]
[142.26341248 105.30992126]
[136.66429138 121.68228149]
[125.01495361 134.47671509]
[109.23773956 141.58190918]
[109.86171722 156.56892395]
[110.48569489 171.55593872]
[111.10967255 186.54296875]
[111.73365021 201.52998352]
[112.35762787 216.51699829]
[112.98160553 231.50401306]
[113.60558319 246.49102783]
[114.22956085 261.47805786]
[114.85353851 276.46505737]
[129.60653687 279.59548950]
[143.11717224 286.29727173]
[154.53616333 296.14904785]
[163.14567566 308.53158569]
[168.40451050 322.66647339]
[169.98211670 337.66522217]
[167.77931213 352.58493042]
[161.93457031 366.48782349]
[152.81529236 378.49987793]
[140.99472046 387.86602783]
[127.21591187 393.99752808]
[112.34500885 396.50891113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 41]
[24 40]
[25 39]
[45 94]
[46 93]
[47 92]
[48 91]
[98 126]
[99 125]
[100 124]
[103 123]
[104 122]
[105 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
