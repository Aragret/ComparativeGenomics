%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCCCCAGGGGGGGGGGAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCCCCCCCCCCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[83.60747528 381.78622437]
[70.11859131 375.05468750]
[58.63309479 365.29013062]
[49.81872559 353.06024170]
[44.18794250 339.07604980]
[42.06811523 324.15057373]
[43.58248520 309.15155029]
[48.64300537 294.95104980]
[56.95547104 282.37463379]
[68.03660583 272.15347290]
[81.24215698 264.88183594]
[95.80438232 260.98248291]
[95.49640656 245.98562622]
[95.18843079 230.98880005]
[94.88044739 215.99195862]
[94.57247162 200.99511719]
[94.26449585 185.99827576]
[93.95652008 171.00144958]
[93.64853668 156.00460815]
[93.34056091 141.00776672]
[93.03258514 126.01093292]
[82.84072876 120.75266266]
[75.76127625 111.73020935]
[73.07832336 100.58009338]
[75.27849579 89.32476807]
[81.96273804 80.00573730]
[75.41486359 66.51035309]
[68.86699677 53.01497269]
[62.31912231 39.51958847]
[55.77125168 26.02420425]
[49.22338104 12.52882004]
[36.55186462 4.50182343]
[21.55265617 4.34782648]
[6.55344677 4.19382954]
[-8.44576263 4.03983259]
[-23.44497108 3.88583565]
[-37.45698547 12.40613365]
[-51.70990372 4.29524994]
[-51.54154205 -12.10303307]
[-37.12509918 -19.91956902]
[-23.29097557 -11.11337376]
[-8.29176521 -10.95937729]
[6.70744371 -10.80537987]
[21.70665359 -10.65138340]
[36.70586395 -10.49738598]
[46.34767532 -21.98805237]
[43.59143448 -36.73265076]
[28.60068321 -35.80690384]
[13.60979462 -36.73041153]
[-1.15397477 -39.48917007]
[-15.46680832 -44.04135513]
[-29.11172867 -50.31796265]
[-41.88188171 -58.22383499]
[-53.58367538 -67.63912201]
[-64.03971100 -78.42109680]
[-73.09148407 -90.40629578]
[-80.60176086 -103.41304016]
[-86.45670319 -117.24414062]
[-90.56753540 -131.68992615]
[-92.87194824 -146.53138733]
[-93.33500671 -161.54356384]
[-91.94968414 -176.49884033]
[-88.73699188 -191.17053223]
[-83.74562836 -205.33618164]
[-77.05126190 -218.78106689]
[-68.75537109 -231.30137634]
[-58.98373413 -242.70727539]
[-47.88447189 -252.82586670]
[-35.62585449 -261.50378418]
[-22.39371490 -268.60940552]
[-8.38865185 -274.03506470]
[6.17702103 -277.69851685]
[21.08249283 -279.54418945]
[36.10180283 -279.54412842]
[51.00725555 -277.69830322]
[65.57289886 -274.03472900]
[79.57791138 -268.60894775]
[92.80998230 -261.50317383]
[105.06851959 -252.82516479]
[116.16768646 -242.70645142]
[125.93921661 -231.30046082]
[134.23498535 -218.78009033]
[140.92922974 -205.33512878]
[145.92047119 -191.16943359]
[149.13302612 -176.49772644]
[150.51820374 -161.54241943]
[150.05500793 -146.53025818]
[147.75045776 -131.68881226]
[143.63948059 -117.24306488]
[137.78440857 -103.41201782]
[130.27401733 -90.40534973]
[121.22212982 -78.42022705]
[110.76599121 -67.63835907]
[99.06410980 -58.22317505]
[86.29388428 -50.31742477]
[72.64891052 -44.04094696]
[58.33602905 -39.48889160]
[61.09227371 -24.74429512]
[68.98858643 -8.69271946]
[62.71876526 5.98094988]
[69.26663971 19.47633362]
[75.81450653 32.97171783]
[82.36238098 46.46710205]
[88.91024780 59.96248627]
[95.45812225 73.45787048]
[115.78307343 78.18239594]
[126.63041687 96.00822449]
[141.49700928 98.00428009]
[156.36361694 100.00033569]
[163.12327576 86.45095825]
[173.91790771 75.83235931]
[187.57658386 69.29636383]
[202.61772156 67.55195618]
[217.40975952 70.78834534]
[230.34819031 78.65447998]
[240.02951050 90.29710388]
[245.40359497 104.45330048]
[245.88749695 119.58751678]
[241.42872620 134.05810547]
[232.51092529 146.29541016]
[220.10144043 154.97201538]
[205.54637146 159.14675903]
[190.42451477 158.36677551]
[176.37620544 152.71667480]
[164.92527771 142.80935669]
[157.31384277 129.71948242]
[154.36755371 114.86693573]
[139.50096130 112.87088013]
[124.63436127 110.87481689]
[117.93596649 120.08517456]
[108.02941895 125.70294952]
[108.33740234 140.69978333]
[108.64537811 155.69662476]
[108.95335388 170.69346619]
[109.26132965 185.69030762]
[109.56931305 200.68714905]
[109.87728882 215.68397522]
[110.18526459 230.68081665]
[110.49324036 245.67765808]
[110.80122375 260.67449951]
[125.51125336 263.97271729]
[139.00421143 270.69607544]
[150.49563599 280.45367432]
[159.31741333 292.67822266]
[164.95668030 306.65899658]
[167.08555603 321.58319092]
[165.58027649 336.58309937]
[160.52836609 350.78668213]
[152.22352600 363.36813354]
[141.14859009 373.59600830]
[127.94744873 380.87567139]
[113.38758850 384.78384399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[46 98]
[47 97]
[107 129]
[108 128]
[109 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
