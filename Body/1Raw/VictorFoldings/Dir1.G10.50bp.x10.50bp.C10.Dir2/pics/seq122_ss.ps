%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAUUAUUUGGGGGGGGGGAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUxxxxxxxxxxCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUCCCCCCCCCCUCUUAUUAUUU\
) } def
/len { sequence length } bind def

/coor [
[91.90274048 442.47451782]
[77.88079834 436.92150879]
[65.68083954 428.05517578]
[56.06977081 416.43286133]
[49.65174484 402.78515625]
[46.83020782 387.96997070]
[47.78252411 372.91857910]
[52.44882965 358.57717896]
[60.53579712 345.84719849]
[71.53507233 335.52893066]
[84.75523376 328.27096558]
[99.36524200 324.52954102]
[99.36524200 309.52954102]
[99.36524200 294.52954102]
[99.36524200 279.52954102]
[99.36524200 264.52954102]
[99.36524200 249.52952576]
[99.36524200 234.52952576]
[99.36524200 219.52952576]
[99.36524200 204.52952576]
[99.36524200 189.52952576]
[99.36524200 174.52952576]
[98.59558105 159.54928589]
[89.59465790 147.68199158]
[95.87688446 133.16152954]
[94.33959198 118.24050903]
[83.16438293 109.01766205]
[81.67940521 94.60443878]
[90.73938751 83.29678345]
[89.20209503 68.37577057]
[87.66480255 53.45475388]
[82.24617767 39.46767044]
[73.33002472 27.40523911]
[73.58517456 42.40306854]
[67.41588593 56.07566452]
[56.00199127 65.80823517]
[41.52631760 69.73950195]
[26.75723457 67.11763000]
[14.51922798 58.44404221]
[7.15272808 45.37749481]
[6.06652737 30.41687393]
[11.46835327 16.42329407]
[22.32514572 6.07292843]
[36.56061935 1.34521222]
[51.45233917 3.14428735]
[64.15334320 11.12705612]
[58.44867706 -2.74582458]
[52.74401474 -16.61870575]
[47.03934860 -30.49158669]
[39.53934860 -43.48196793]
[30.37741470 -55.35879135]
[21.21547890 -67.23561096]
[12.05354404 -79.11243439]
[2.89160848 -90.98926544]
[-6.27032709 -102.86608887]
[-15.43226242 -114.74291229]
[-24.59419823 -126.61973572]
[-33.75613403 -138.49655151]
[-49.12054825 -144.22950745]
[-51.57066727 -160.44459534]
[-38.58601761 -170.46112061]
[-23.52408981 -163.97494507]
[-21.87930870 -147.65849304]
[-12.71737385 -135.78166199]
[-3.55543876 -123.90484619]
[5.60649681 -112.02802277]
[14.76843166 -100.15119934]
[23.93036652 -88.27437592]
[33.09230423 -76.39755249]
[42.25423813 -64.52072906]
[51.41617203 -52.64390182]
[50.57247543 -67.62015533]
[55.78852463 -81.68403625]
[66.19375610 -92.48825836]
[80.05151367 -98.22956848]
[95.04890442 -97.94972992]
[108.68283081 -91.69544220]
[118.67775726 -80.51057434]
[123.36551666 -66.26189423]
[121.96370697 -51.32753754]
[114.70629883 -38.20008850]
[102.80455780 -29.07053947]
[88.24491882 -25.46263695]
[73.45742035 -27.97854805]
[60.91223145 -36.19625092]
[66.61688995 -22.32336807]
[72.32155609 -8.45048809]
[78.02622223 5.42239237]
[85.39246368 18.48908806]
[94.30860901 30.55151939]
[92.94791412 15.61336327]
[94.88316345 0.73872644]
[100.02088165 -13.35395908]
[108.11293793 -25.98402977]
[118.76847839 -36.54146576]
[131.47285461 -44.51634979]
[145.61245728 -49.52350616]
[160.50436401 -51.32109070]
[175.42929077 -49.82228088]
[189.66639709 -45.09947205]
[202.52803040 -37.38076782]
[213.39299011 -27.03897285]
[221.73649597 -14.57359219]
[227.15559387 -0.58668965]
[229.38851929 14.24618053]
[228.32743835 29.20860291]
[224.02359009 43.57790756]
[216.68486023 56.66006851]
[206.66567993 67.82323456]
[194.44999695 76.52822113]
[180.62779236 82.35459900]
[165.86666870 85.02095795]
[150.87959290 84.39850616]
[136.39041138 80.51731873]
[123.09893799 73.56484985]
[111.64714813 63.87688828]
[102.58582306 51.91746140]
[104.12311554 66.83847809]
[105.66040802 81.75949097]
[116.83561707 90.98233795]
[118.32059479 105.39556122]
[109.26061249 116.70321655]
[110.79790497 131.62423706]
[119.90879059 144.55877686]
[113.51660156 158.01199341]
[125.09066772 148.47045898]
[139.80889893 151.36415100]
[146.90927124 164.57720947]
[141.19995117 178.44818115]
[126.85562897 182.83454895]
[114.36524200 174.52952576]
[114.36524200 189.52952576]
[114.36524200 204.52952576]
[114.36524200 219.52952576]
[114.36524200 234.52952576]
[114.36524200 249.52952576]
[114.36524200 264.52954102]
[114.36524200 279.52954102]
[114.36524200 294.52954102]
[114.36524200 309.52954102]
[114.36524200 324.52954102]
[128.97525024 328.27096558]
[142.19541931 335.52893066]
[153.19468689 345.84719849]
[161.28166199 358.57717896]
[165.94796753 372.91857910]
[166.90028381 387.96997070]
[164.07873535 402.78515625]
[157.66072083 416.43286133]
[148.04963684 428.05517578]
[135.84968567 436.92150879]
[121.82774353 442.47451782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 125]
[25 123]
[26 122]
[29 119]
[30 118]
[31 117]
[32 90]
[33 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
