%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCGACCGGGGGGGGGGUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCxxxxxxxxxxUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCCCCCCCCCCCUAGGCGACC\
) } def
/len { sequence length } bind def

/coor [
[102.68490601 366.83386230]
[89.46470642 359.56140137]
[78.57790375 349.11437988]
[70.76676941 336.20513916]
[66.56388855 321.71383667]
[66.25582123 306.62847900]
[69.86355591 291.97766113]
[77.14112854 278.76028442]
[87.59233856 267.87750244]
[100.50460052 260.07135010]
[114.99753571 255.87406921]
[114.68547821 240.87731934]
[114.37342834 225.88056946]
[114.06137085 210.88381958]
[113.74931335 195.88705444]
[113.43725586 180.89030457]
[113.12519836 165.89355469]
[112.81314087 150.89680481]
[112.50109100 135.90003967]
[112.18903351 120.90328979]
[97.46877289 129.30722046]
[77.68155670 126.48547363]
[63.66484451 131.82699585]
[49.64813232 137.16850281]
[39.50785446 149.31285095]
[24.85962868 146.61494446]
[17.01304245 160.60818481]
[1.15780175 163.05581665]
[-10.54331017 152.08023071]
[-9.11420250 136.10095215]
[4.34883690 127.37592316]
[19.51811600 132.59823608]
[28.65582466 120.83593750]
[44.30662155 123.15178680]
[58.32333374 117.81027222]
[72.34004974 112.46876526]
[73.04119873 105.00160980]
[60.80884171 96.32005310]
[74.44350433 90.06729889]
[75.14465332 82.60015106]
[62.36729813 74.74272156]
[49.58993912 66.88529968]
[36.81258011 59.02787018]
[24.03522491 51.17044449]
[11.25786686 43.31301880]
[-1.68018901 35.72311020]
[-14.77334309 28.40400505]
[-27.86649704 21.08489990]
[-44.64236450 18.63405800]
[-46.93132401 1.83533812]
[-31.42275238 -5.01451731]
[-20.54739189 7.99174547]
[-7.45423794 15.31085110]
[5.63891649 22.62995720]
[10.45400715 22.19358635]
[15.58428955 24.82256126]
[19.11529350 30.53566170]
[31.89265060 38.39308929]
[44.67000580 46.25051498]
[57.44736481 54.10794067]
[70.22472382 61.96536636]
[83.00208282 69.82279205]
[112.36903381 73.31053162]
[123.76266479 95.43318939]
[135.26446533 85.80466461]
[126.80231476 73.40471649]
[119.59632874 60.23503494]
[113.71591187 46.42244720]
[109.21769714 32.09998703]
[106.14501190 17.40558815]
[104.52744293 2.48076725]
[104.38056946 -12.53073597]
[105.70581055 -27.48434830]
[108.49039459 -42.23605728]
[112.70751190 -56.64378738]
[118.31653595 -70.56878662]
[125.26346588 -83.87693787]
[133.48138428 -96.44008636]
[142.89114380 -108.13722992]
[153.40213013 -118.85571289]
[164.91311646 -128.49230957]
[177.31323242 -136.95422363]
[190.48306274 -144.15994263]
[204.29576111 -150.04008484]
[218.61831665 -154.53800964]
[233.31277466 -157.61039734]
[248.23762512 -159.22767639]
[263.24914551 -159.37425232]
[278.20272827 -158.04870605]
[292.95437622 -155.26382446]
[307.36203003 -151.04643250]
[321.28689575 -145.43711853]
[334.59490967 -138.48992920]
[347.15789795 -130.27175903]
[358.85485840 -120.86175537]
[369.57312012 -110.35055542]
[379.20950317 -98.83937836]
[387.67117310 -86.43909454]
[394.87661743 -73.26912689]
[400.75650024 -59.45630264]
[405.25411987 -45.13366318]
[408.32623291 -30.43914032]
[409.94320679 -15.51425552]
[410.08947754 -0.50274628]
[408.76364136 14.45081329]
[405.97845459 29.20240974]
[401.76077271 43.60997391]
[396.15118408 57.53474808]
[389.20373535 70.84262085]
[380.98529053 83.40544128]
[371.57507324 95.10220337]
[361.06365967 105.82027435]
[349.55227661 115.45641327]
[337.15182495 123.91782379]
[323.98171997 131.12301636]
[310.16876221 137.00260925]
[295.84603882 141.49995422]
[281.15145874 144.57176208]
[266.22653198 146.18844604]
[251.21502686 146.33441162]
[236.26150513 145.00827026]
[221.50996399 142.22280884]
[207.10247803 138.00482178]
[193.17782593 132.39495850]
[179.87008667 125.44723511]
[167.30743408 117.22856140]
[155.61085510 107.81809998]
[144.89299011 97.30646515]
[133.39118958 106.93498993]
[127.18578339 120.59123230]
[127.49784088 135.58798218]
[127.80989838 150.58474731]
[128.12194824 165.58149719]
[128.43400574 180.57824707]
[128.74606323 195.57499695]
[129.05812073 210.57176208]
[129.37017822 225.56851196]
[129.68223572 240.56526184]
[129.99429321 255.56201172]
[144.64927673 259.15277100]
[157.87509155 266.41503906]
[168.76995850 276.85363770]
[176.59106445 289.75683594]
[180.80513000 304.24490356]
[181.12484741 319.33001709]
[177.52842712 333.98361206]
[170.26106262 347.20663452]
[159.81825256 358.09747314]
[146.91203308 365.91357422]
[132.42233276 370.12203979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 36]
[23 35]
[24 34]
[26 32]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 54]
[47 53]
[48 52]
[64 129]
[65 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
