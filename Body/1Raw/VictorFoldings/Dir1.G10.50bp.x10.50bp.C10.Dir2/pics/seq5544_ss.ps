%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAAAAAAGGGGGGGGGGCAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCxxxxxxxxxxUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUACCCCCCCCCCUCACGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[8.59822559 307.42733765]
[-4.77326345 301.00485229]
[-17.69604301 293.72149658]
[-30.11477089 285.60852051]
[-41.97626114 276.70065308]
[-53.22970963 267.03604126]
[-63.82693100 256.65606689]
[-73.72253418 245.60516357]
[-82.87413788 233.93069458]
[-91.24256134 221.68264771]
[-98.79194641 208.91346741]
[-112.17823029 215.68157959]
[-121.00263977 228.81324768]
[-135.85182190 227.65097046]
[-149.23811340 234.41908264]
[-162.62438965 241.18719482]
[-176.01068115 247.95530701]
[-188.94873047 255.54522705]
[-201.38818359 263.92736816]
[-213.82762146 272.30950928]
[-226.26705933 280.69165039]
[-232.97265625 295.65716553]
[-249.31140137 297.06332397]
[-258.47540283 283.46359253]
[-251.03752136 268.84820557]
[-234.64920044 268.25219727]
[-222.20976257 259.87005615]
[-209.77032471 251.48793030]
[-197.33088684 243.10577393]
[-211.69018555 238.76870728]
[-218.94606018 225.64041138]
[-214.97894287 211.17451477]
[-202.04118347 203.58410645]
[-187.47824097 207.17866516]
[-179.55830383 219.91735840]
[-182.77879333 234.56903076]
[-169.39251709 227.80091858]
[-156.00622559 221.03280640]
[-142.61994934 214.26467896]
[-134.75300598 201.61712646]
[-118.94635010 202.29530334]
[-105.56005859 195.52719116]
[-110.76087189 183.42802429]
[-115.25024414 171.04725647]
[-119.01303101 158.42666626]
[-122.03651428 145.60885620]
[-124.31050873 132.63706970]
[-125.82732391 119.55513763]
[-126.58184052 106.40718079]
[-126.57151794 93.23760223]
[-125.79638672 80.09085083]
[-124.25906372 67.01129913]
[-121.96474457 54.04310989]
[-118.92115784 41.23004913]
[-115.13859558 28.61536789]
[-110.62982178 16.24165344]
[-105.41004944 4.15066814]
[-99.49690247 -7.61677027]
[-92.91033936 -19.02094078]
[-85.67259216 -30.02334785]
[-77.80809784 -40.58685303]
[-69.34339905 -50.67579651]
[-60.30706787 -60.25612640]
[-50.72961044 -69.29550171]
[-40.64335632 -77.76340485]
[-30.08235168 -85.63125610]
[-19.08224487 -92.87249756]
[-7.68016863 -99.46268463]
[4.08539009 -105.37957764]
[16.17471504 -110.60318756]
[28.54699707 -115.11589813]
[41.16047287 -118.90247345]
[53.97256851 -121.95012665]
[66.94003296 -124.24856567]
[80.01908875 -125.79004669]
[93.16559601 -126.56935883]
[106.33516693 -126.58386230]
[119.48336029 -125.83352661]
[132.56578064 -124.32086945]
[145.53828430 -122.05100250]
[158.35705566 -119.03158569]
[170.97885132 -115.27281952]
[183.36103821 -110.78737640]
[195.46185303 -105.59040833]
[207.24041748 -99.69946289]
[218.65698242 -93.13441467]
[229.67301941 -85.91742706]
[240.25134277 -78.07286072]
[250.35621643 -69.62720490]
[259.95358276 -60.60895538]
[269.01098633 -51.04856110]
[277.49789429 -40.97829056]
[285.38565063 -30.43214035]
[292.64761353 -19.44570732]
[299.25930786 -8.05607605]
[305.19836426 3.69830465]
[318.98074341 -2.22165847]
[332.76312256 -8.14162159]
[346.54550171 -14.06158447]
[349.83990479 -29.22490883]
[361.44033813 -39.53074265]
[376.88613892 -41.01627731]
[390.23809814 -33.11029816]
[396.36212158 -18.85281563]
[392.90341187 -3.72612095]
[381.19189453 6.45326233]
[365.73089600 7.77115345]
[352.46545410 -0.27920333]
[338.68307495 5.64075994]
[324.90069580 11.56072330]
[311.11831665 17.48068619]
[318.20101929 38.61026001]
[323.17465210 60.33320618]
[325.99118042 82.43955231]
[326.62335205 104.71563721]
[325.06506348 126.94613647]
[321.33139038 148.91618347]
[315.45840454 170.41343689]
[307.50289917 191.23008728]
[321.02709961 197.71826172]
[334.55126953 204.20642090]
[348.07546997 210.69458008]
[364.97152710 212.09425354]
[368.30386353 228.71748352]
[353.25274658 236.52136230]
[341.58731079 224.21878052]
[328.06311035 217.73060608]
[314.53890991 211.24244690]
[301.01473999 204.75427246]
[293.73263550 217.67774963]
[285.62081909 230.09724426]
[276.71408081 241.95956421]
[267.05050659 253.21392822]
[256.67153931 263.81213379]
[245.62156677 273.70877075]
[233.94796753 282.86148071]
[221.70069885 291.23107910]
[208.93223572 298.78164673]
[195.69726562 305.48092651]
[182.05242920 311.30020142]
[168.05621338 316.21456909]
[153.76852417 320.20291138]
[139.25056458 323.24822998]
[124.56449890 325.33746338]
[109.77323914 326.46160889]
[94.94012451 326.61593628]
[80.12867737 325.79971313]
[65.40233612 324.01647949]
[50.82416153 321.27386475]
[36.45659256 317.58358765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 42]
[12 41]
[14 39]
[15 38]
[16 37]
[17 36]
[18 29]
[19 28]
[20 27]
[21 26]
[96 111]
[97 110]
[98 109]
[99 108]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
