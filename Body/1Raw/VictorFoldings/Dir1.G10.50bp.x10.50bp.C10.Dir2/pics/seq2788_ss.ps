%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUACUUGGGGGGGGGGUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAxxxxxxxxxxAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUCCCCCCCCCCUCUCUUCCUU\
) } def
/len { sequence length } bind def

/coor [
[86.23834991 421.26342773]
[72.39241028 415.24740601]
[60.68375015 405.71798706]
[51.98122787 393.38232422]
[46.93062592 379.15582275]
[45.90673447 364.09411621]
[48.98553467 349.31497192]
[55.93855667 335.91503906]
[66.24983978 324.88870239]
[79.15422058 317.05419922]
[93.69410706 312.99288940]
[93.69410706 297.99288940]
[93.69410706 282.99288940]
[93.69410706 267.99288940]
[93.69410706 252.99288940]
[93.69410706 237.99288940]
[93.69410706 222.99288940]
[93.69410706 207.99288940]
[93.69410706 192.99288940]
[93.69410706 177.99288940]
[82.07327271 187.47741699]
[67.13137054 186.15844727]
[57.35173416 174.78486633]
[58.28678131 159.81402588]
[69.40563965 149.74571228]
[84.39553070 150.29624939]
[94.74645233 161.15447998]
[96.61406708 146.27119446]
[98.48168182 131.38792419]
[80.77877808 122.85590363]
[72.38329315 106.19506073]
[75.69474792 88.84645844]
[88.15618896 77.77774811]
[85.36386871 63.03994370]
[82.57154083 48.30213547]
[79.77922058 33.56433105]
[63.51184464 29.55995178]
[50.97302246 17.54641342]
[45.93048477 0.29076996]
[50.31356049 -17.77475739]
[37.07097626 -24.81989098]
[23.82838821 -31.86502647]
[10.58580303 -38.91016006]
[-2.65678215 -45.95529556]
[-15.89936733 -53.00043106]
[-29.14195251 -60.04556656]
[-44.18161392 -55.18921661]
[-58.21195602 -62.46417618]
[-62.90902710 -77.55433655]
[-55.48613739 -91.50698090]
[-40.34715652 -96.04425049]
[-26.47377205 -88.47425842]
[-22.09681892 -73.28815460]
[-8.85423279 -66.24301910]
[4.38835287 -59.19788361]
[17.63093758 -52.15274811]
[30.87352371 -45.10761261]
[44.11610794 -38.06247711]
[57.35869598 -31.01734161]
[70.88288879 -37.50550842]
[73.67520905 -52.24331284]
[76.46753693 -66.98111725]
[62.37802505 -72.23409271]
[49.37902069 -79.79278564]
[37.84452820 -89.43973541]
[28.10642433 -100.89736176]
[20.44488716 -113.83602142]
[15.08035564 -127.88343811]
[12.16718006 -142.63543701]
[11.78917694 -157.66757202]
[13.95722198 -172.54733276]
[18.60893631 -186.84661865]
[25.61048317 -200.15400696]
[34.76041031 -212.08659363]
[45.79545593 -222.30108643]
[58.39812469 -230.50357056]
[72.20581055 -236.45805359]
[86.82123566 -239.99320984]
[101.82388306 -241.00733948]
[116.78211212 -239.47123718]
[131.26551819 -235.42912292]
[144.85742188 -228.99728394]
[157.16671753 -220.36079407]
[167.83926392 -209.76811218]
[176.56799316 -197.52403259]
[183.10174561 -183.98085022]
[187.25254822 -169.52819824]
[188.90097046 -154.58193970]
[187.99957275 -139.57209778]
[184.57431030 -124.93052673]
[178.72370911 -111.07850647]
[170.61613464 -98.41457367]
[160.48483276 -87.30310822]
[148.62130737 -78.06379700]
[135.36689758 -70.96248627]
[121.10295868 -66.20348358]
[106.23989105 -63.92372513]
[91.20533752 -64.18879700]
[88.41301727 -49.45098877]
[85.62068939 -34.71318436]
[100.11148834 -28.88358307]
[110.56676483 -17.74354362]
[115.25158691 -3.56096077]
[113.56703949 10.93625641]
[106.11153412 23.08410454]
[94.51702118 30.77200508]
[97.30934906 45.50981140]
[100.10167694 60.24761581]
[102.89399719 74.98542023]
[117.82375336 79.37095642]
[128.35104370 92.43279266]
[129.66156006 110.37779236]
[144.15716553 114.23495483]
[158.65275574 118.09210968]
[173.97846985 114.16362762]
[184.28816223 124.91348267]
[198.78376770 128.77064514]
[214.46716309 123.97869873]
[226.27261353 135.36128235]
[222.05567932 151.20898438]
[206.15437317 155.21902466]
[194.92660522 143.26623535]
[180.43099976 139.40908813]
[166.14210510 143.61346436]
[154.79559326 132.58770752]
[140.30000305 128.73054504]
[125.80440521 124.87339020]
[113.36495972 133.25553894]
[111.49734497 148.13880920]
[109.62973785 163.02209473]
[108.69410706 177.99288940]
[108.69410706 192.99288940]
[108.69410706 207.99288940]
[108.69410706 222.99288940]
[108.69410706 237.99288940]
[108.69410706 252.99288940]
[108.69410706 267.99288940]
[108.69410706 282.99288940]
[108.69410706 297.99288940]
[108.69410706 312.99288940]
[123.23399353 317.05419922]
[136.13838196 324.88870239]
[146.44966125 335.91503906]
[153.40267944 349.31497192]
[156.48147583 364.09411621]
[155.45759583 379.15582275]
[150.40698242 393.38232422]
[141.70446777 405.71798706]
[129.99580383 415.24740601]
[116.14986420 421.26342773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 130]
[28 129]
[29 128]
[33 109]
[34 108]
[35 107]
[36 106]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[60 100]
[61 99]
[62 98]
[112 127]
[113 126]
[114 125]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
