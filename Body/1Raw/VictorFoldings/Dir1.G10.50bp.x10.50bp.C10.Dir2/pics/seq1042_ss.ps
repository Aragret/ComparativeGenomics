%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGCAUCAGGGGGGGGGGAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGxxxxxxxxxxAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUCCCCCCCCCCACAAGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 426.14401245]
[71.19830322 420.12799072]
[59.48964310 410.59857178]
[50.78712082 398.26290894]
[45.73651886 384.03637695]
[44.71262741 368.97470093]
[47.79142761 354.19555664]
[54.74444962 340.79562378]
[65.05573273 329.76928711]
[77.96011353 321.93478394]
[92.50000000 317.87347412]
[92.50000000 302.87347412]
[92.50000000 287.87347412]
[92.50000000 272.87347412]
[92.50000000 257.87347412]
[92.50000000 242.87345886]
[92.50000000 227.87345886]
[92.50000000 212.87345886]
[92.50000000 197.87345886]
[92.50000000 182.87345886]
[92.50000000 167.87345886]
[92.50000000 152.87345886]
[73.60536957 146.42388916]
[58.39992905 133.48562622]
[49.00893021 115.86708069]
[46.74496460 96.03078461]
[51.92446518 76.74927521]
[63.82349014 60.71751785]
[55.31240082 48.36594391]
[46.80131149 36.01436996]
[38.29022217 23.66279793]
[24.08873177 16.68939972]
[23.23838997 1.81908834]
[14.72729969 -10.53248405]
[6.21620989 -22.88405609]
[-7.07063532 -15.88433456]
[-21.09211540 -10.50525856]
[-35.65139008 -6.82234001]
[-50.54407120 -4.88728333]
[-65.56108093 -4.72725344]
[-80.49162292 -6.34449625]
[-95.12607574 -9.71630859]
[-109.25900269 -14.79535580]
[-122.69200134 -21.51033401]
[-135.23648071 -29.76697922]
[-146.71635437 -39.44937897]
[-156.97045898 -50.42160416]
[-165.85484314 -62.52962875]
[-173.24476624 -75.60346985]
[-179.03649902 -89.45959473]
[-183.14874268 -103.90348053]
[-185.52375793 -118.73235321]
[-186.12820435 -133.73805237]
[-184.95359802 -148.70991516]
[-182.01641846 -163.43775940]
[-177.35791016 -177.71482849]
[-171.04347229 -191.34069824]
[-163.16174316 -204.12406921]
[-153.82337952 -215.88549805]
[-143.15946960 -226.45988464]
[-131.31971741 -235.69874573]
[-118.47033691 -243.47239685]
[-104.79170990 -249.67172241]
[-90.47587585 -254.20968628]
[-75.72378540 -257.02258301]
[-60.74255371 -258.07089233]
[-45.74248505 -257.33996582]
[-30.93415833 -254.83999634]
[-16.52545929 -250.60610962]
[-2.71866322 -244.69773865]
[10.29240322 -237.19784546]
[22.32508469 -228.21168518]
[33.21046066 -217.86544800]
[42.79571915 -206.30433655]
[50.94629669 -193.69067383]
[57.54777527 -180.20153809]
[62.50747681 -166.02629089]
[65.75577545 -151.36392212]
[67.24707031 -136.42027283]
[66.96042633 -121.40515137]
[64.89986420 -106.52931213]
[61.09431839 -92.00160980]
[55.59720612 -78.02598572]
[48.48570251 -64.79862976]
[39.85963821 -52.50524139]
[29.84011078 -41.31840134]
[18.56778145 -31.39514732]
[27.07887268 -19.04357529]
[35.58996201 -6.69200182]
[49.18268204 -0.60207105]
[50.64179230 15.15170860]
[59.15288544 27.50328064]
[67.66397095 39.85485458]
[76.17506409 52.20642471]
[82.60327911 49.51032257]
[89.32790375 47.67448425]
[96.23435974 46.73018265]
[103.20497894 46.69351578]
[110.12099457 47.56510162]
[116.86456299 49.33008957]
[123.32078552 51.95841217]
[129.37965393 55.40528107]
[134.93795776 59.61197281]
[139.90097046 64.50681305]
[144.18412781 70.00639343]
[147.71446228 76.01702118]
[150.43182373 82.43627167]
[152.28991699 89.15478516]
[153.25706482 96.05808258]
[153.31680298 103.02854156]
[168.02476501 105.97402954]
[182.73272705 108.91950989]
[197.44068909 111.86499023]
[208.09330750 100.70590973]
[223.09329224 97.09975433]
[237.65417480 102.19723511]
[247.12963867 114.37176514]
[248.49609375 129.73849487]
[241.31752014 143.39395142]
[227.88456726 150.98074341]
[212.48364258 150.07794189]
[200.02912903 140.97361755]
[194.49520874 126.57295227]
[179.78724670 123.62747192]
[165.07928467 120.68198395]
[150.37132263 117.73650360]
[140.76423645 134.49826050]
[125.82191467 146.74485779]
[107.50000000 152.87345886]
[107.50000000 167.87345886]
[107.50000000 182.87345886]
[107.50000000 197.87345886]
[107.50000000 212.87345886]
[107.50000000 227.87345886]
[107.50000000 242.87345886]
[107.50000000 257.87347412]
[107.50000000 272.87347412]
[107.50000000 287.87347412]
[107.50000000 302.87347412]
[107.50000000 317.87347412]
[122.03988647 321.93478394]
[134.94427490 329.76928711]
[145.25555420 340.79562378]
[152.20857239 354.19555664]
[155.28736877 368.97470093]
[154.26348877 384.03637695]
[149.21287537 398.26290894]
[140.51036072 410.59857178]
[128.80169678 420.12799072]
[114.95575714 426.14401245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[28 94]
[29 93]
[30 92]
[31 91]
[33 89]
[34 88]
[35 87]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
