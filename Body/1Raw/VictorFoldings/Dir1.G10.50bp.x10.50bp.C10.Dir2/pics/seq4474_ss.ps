%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCAAACCGGGGGGGGGGUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAxxxxxxxxxxACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCCCCCCCCCCCUCAACCC\
) } def
/len { sequence length } bind def

/coor [
[104.46842957 364.89419556]
[90.62249756 358.87817383]
[78.91383362 349.34875488]
[70.21131134 337.01309204]
[65.16070557 322.78656006]
[64.13681793 307.72488403]
[67.21561432 292.94570923]
[74.16863251 279.54580688]
[84.47991943 268.51947021]
[97.38430023 260.68496704]
[111.92418671 256.62362671]
[111.92418671 241.62364197]
[111.92418671 226.62364197]
[111.92418671 211.62364197]
[111.92418671 196.62364197]
[111.92418671 181.62364197]
[111.92418671 166.62364197]
[111.92418671 151.62364197]
[111.92418671 136.62364197]
[111.92418671 121.62364197]
[102.40981293 127.90246582]
[89.80246735 129.61253357]
[76.40753174 125.35299683]
[62.50497437 130.98495483]
[48.60242081 136.61691284]
[42.67222214 151.26641846]
[28.08777618 157.35490417]
[13.50177765 151.27014160]
[7.56783915 136.62214661]
[13.80646229 122.10129547]
[28.51638222 116.32255554]
[42.97046280 122.71435547]
[56.87302017 117.08239746]
[70.77557373 111.45043945]
[71.70938110 104.00879669]
[56.80863571 102.28606415]
[41.90789413 100.56333160]
[27.06378937 98.40634155]
[28.93169212 83.52310181]
[43.84818268 85.10088348]
[58.71258926 87.11320496]
[73.57699585 89.12551880]
[74.51080322 81.68387604]
[58.81022263 79.73391724]
[53.14738846 65.95779419]
[41.06739807 57.06544113]
[28.98740959 48.17309189]
[16.90742111 39.28074265]
[4.82743359 30.38839340]
[-7.25255489 21.49604225]
[-23.26567841 22.47553444]
[-33.90810394 10.47060394]
[-31.01587296 -5.30959082]
[-16.80765724 -12.75983620]
[-2.18278480 -6.16494131]
[1.63979483 9.41605473]
[13.71978283 18.30840492]
[25.79977226 27.20075417]
[37.87976074 36.09310532]
[49.95974731 44.98545456]
[62.03973770 53.87780380]
[76.87627411 55.19172668]
[83.40315247 69.60388947]
[113.16340637 73.41796875]
[124.41094971 96.27529144]
[136.30332947 87.13356018]
[148.19570923 77.99182892]
[160.08808899 68.85009003]
[171.98046875 59.70835876]
[183.87284851 50.56662369]
[168.88131714 51.07033157]
[155.10775757 45.12985611]
[145.18513489 33.88078308]
[141.01026917 19.47347641]
[143.38121033 4.66203976]
[151.84472656 -7.72217512]
[164.78295898 -15.31180382]
[179.72259521 -16.65601349]
[193.80781555 -11.49784565]
[204.34606934 -0.82333505]
[209.32287598 13.32698059]
[207.78686523 28.24812889]
[200.03268433 41.08671188]
[213.75273132 35.02370071]
[227.40896606 28.81829262]
[241.06521606 22.61288643]
[254.72145081 16.40747833]
[267.07302856 7.89638853]
[277.73464966 -2.65490174]
[288.39627075 -13.20619202]
[299.05789185 -23.75748253]
[298.88946533 -39.56087494]
[310.00460815 -50.79605865]
[325.80889893 -50.79740524]
[336.92593384 -39.56410980]
[336.76019287 -23.76069069]
[325.40997314 -12.76303387]
[309.60919189 -13.09585571]
[298.94757080 -2.54456568]
[288.28594971 8.00672436]
[277.62432861 18.55801392]
[292.26000977 15.27226543]
[307.17935181 16.82577324]
[320.82415771 23.05629349]
[331.76937866 33.31311035]
[338.87188721 46.52501297]
[341.38992310 61.31215286]
[339.06048584 76.13017273]
[332.12686157 89.43148804]
[321.31320190 99.82691956]
[307.74890137 106.23076630]
[292.85055542 107.97422028]
[278.17419434 104.87519836]
[265.25256348 97.25736237]
[255.43519592 85.91630554]
[249.74743652 72.03648376]
[248.78330994 57.06750107]
[252.64347839 42.57270813]
[260.92684937 30.06372070]
[247.27061462 36.26912689]
[233.61437988 42.47453308]
[219.95814514 48.67993927]
[215.13845825 54.34707260]
[205.95263672 54.86909485]
[193.01458740 62.45900345]
[181.12220764 71.60073853]
[169.22982788 80.74246979]
[157.33744812 89.88420868]
[145.44506836 99.02593994]
[133.55268860 108.16767120]
[126.92418671 121.62364197]
[126.92418671 136.62364197]
[126.92418671 151.62364197]
[126.92418671 166.62364197]
[126.92418671 181.62364197]
[126.92418671 196.62364197]
[126.92418671 211.62364197]
[126.92418671 226.62364197]
[126.92418671 241.62364197]
[126.92418671 256.62362671]
[141.46408081 260.68496704]
[154.36845398 268.51947021]
[164.67973328 279.54580688]
[171.63276672 292.94570923]
[174.71156311 307.72488403]
[173.68766785 322.78656006]
[168.63706970 337.01309204]
[159.93453979 349.34875488]
[148.22587585 358.87817383]
[134.37994385 364.89419556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 34]
[24 33]
[25 32]
[43 63]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
[70 125]
[83 124]
[84 122]
[85 121]
[86 120]
[87 119]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
