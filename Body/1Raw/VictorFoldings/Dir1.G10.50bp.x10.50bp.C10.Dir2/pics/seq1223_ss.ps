%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCUCCCGGGGGGGGGGCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAxxxxxxxxxxUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAACCCCCCCCCCACCCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[61.99154282 539.33355713]
[48.14560699 533.31750488]
[36.43694305 523.78808594]
[27.73441887 511.45245361]
[22.68381691 497.22592163]
[21.65992737 482.16424561]
[24.73872566 467.38507080]
[31.69174767 453.98516846]
[42.00303268 442.95883179]
[54.90741348 435.12432861]
[69.44729614 431.06298828]
[69.44729614 416.06298828]
[69.44729614 401.06298828]
[69.44729614 386.06298828]
[69.44729614 371.06298828]
[69.44729614 356.06298828]
[69.44729614 341.06298828]
[69.44729614 326.06298828]
[69.44729614 311.06298828]
[69.44729614 296.06298828]
[57.06653595 284.72393799]
[56.67846298 267.60278320]
[69.00830841 255.23701477]
[68.69625092 240.24026489]
[68.38419342 225.24349976]
[57.49098969 215.15025330]
[56.96088409 199.94586182]
[67.62146759 188.58850098]
[59.62107086 176.02494812]
[67.06960297 162.06680298]
[66.75754547 147.07003784]
[66.44548798 132.07328796]
[56.11828232 121.19446564]
[41.15803528 120.10315704]
[26.19778633 119.01184082]
[11.23753643 117.92053223]
[-3.72271204 116.82922363]
[-18.23993492 124.45695496]
[-31.95795631 115.47097015]
[-30.76485252 99.11528015]
[-15.88798618 92.21521759]
[-2.63140130 101.86897278]
[12.32884693 102.96028137]
[27.28909683 104.05159760]
[42.24934387 105.14290619]
[57.20959473 106.23421478]
[61.81515884 91.95875549]
[49.03779984 84.10132599]
[33.16151428 86.40852356]
[21.55801201 75.32978821]
[23.12850571 59.36379242]
[36.66824722 50.75827408]
[51.79070663 56.11465073]
[56.89522552 71.32397461]
[69.67258453 79.18139648]
[76.87258911 74.48360443]
[84.51841736 71.89122009]
[92.05098724 71.33926392]
[98.96855927 72.62437439]
[104.85899353 75.42835999]
[112.04150391 62.25977707]
[119.22400665 49.09119415]
[126.40651703 35.92261124]
[114.22497559 27.13550377]
[103.24083710 16.89089775]
[93.62734222 5.35036278]
[85.53610992 -7.30408907]
[79.09474182 -20.87287903]
[74.40483856 -35.14200974]
[71.54035950 -49.88643265]
[70.54648590 -64.87360382]
[71.43889618 -79.86716461]
[74.20350647 -94.63063812]
[78.79671478 -108.93119049]
[85.14608765 -122.54326630]
[93.15148926 -135.25219727]
[102.68664551 -146.85754395]
[113.60118866 -157.17625427]
[125.72297668 -166.04562378]
[138.86082458 -173.32572937]
[152.80754089 -178.90177917]
[167.34317017 -182.68583679]
[182.23843384 -184.61819458]
[197.25845337 -184.66839600]
[212.16630554 -182.83564758]
[226.72689819 -179.14884949]
[240.71057129 -173.66615295]
[253.89680481 -166.47401428]
[266.07760620 -157.68588257]
[277.06088257 -147.44035339]
[286.67340088 -135.89900208]
[294.76358032 -123.24387360]
[301.20379639 -109.67454529]
[305.89248657 -95.40502167]
[308.75573730 -80.66035461]
[309.74835205 -65.67309570]
[308.85467529 -50.67961121]
[306.08883667 -35.91637039]
[301.49441528 -21.61620903]
[295.14389038 -8.00466537]
[287.13742065 4.70359039]
[277.60128784 16.30812836]
[266.68588257 26.62593079]
[254.56333923 35.49427032]
[241.42488098 42.77327728]
[227.47769165 48.34815598]
[212.94175720 52.13097763]
[198.04631042 54.06208801]
[183.02630615 54.11102676]
[168.11859131 52.27701950]
[153.55831909 48.58899689]
[139.57510376 43.10511780]
[132.39259338 56.27370071]
[125.21008301 69.44228363]
[118.02757263 82.61087036]
[128.44831848 105.42042542]
[113.60994720 129.92303467]
[81.44223785 131.76123047]
[81.75429535 146.75798035]
[82.06635284 161.75474548]
[90.08907318 175.39096069]
[82.61822510 188.27644348]
[93.74202728 199.18051147]
[93.84486389 214.39379883]
[83.38095093 224.93144226]
[83.69300842 239.92820740]
[84.00506592 254.92495728]
[94.76013184 263.09722900]
[98.76625061 275.79287720]
[94.76828003 288.28649902]
[84.44729614 296.06298828]
[84.44729614 311.06298828]
[84.44729614 326.06298828]
[84.44729614 341.06298828]
[84.44729614 356.06298828]
[84.44729614 371.06298828]
[84.44729614 386.06298828]
[84.44729614 401.06298828]
[84.44729614 416.06298828]
[84.44729614 431.06298828]
[98.98718262 435.12432861]
[111.89157104 442.95883179]
[122.20285034 453.98516846]
[129.15586853 467.38507080]
[132.23466492 482.16424561]
[131.21078491 497.22592163]
[126.16017914 511.45245361]
[117.45765686 523.78808594]
[105.74899292 533.31750488]
[91.90305328 539.33355713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 127]
[24 126]
[25 125]
[28 122]
[30 120]
[31 119]
[32 118]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[47 55]
[48 54]
[60 115]
[61 114]
[62 113]
[63 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
