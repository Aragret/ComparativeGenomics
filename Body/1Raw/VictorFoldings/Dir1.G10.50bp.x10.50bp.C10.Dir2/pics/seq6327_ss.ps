%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUACAACGGGGGGGGGGGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCCCCCAUCAACAAC\
) } def
/len { sequence length } bind def

/coor [
[97.57952881 495.29644775]
[84.35932922 488.02395630]
[73.47252655 477.57696533]
[65.66139221 464.66772461]
[61.45851517 450.17639160]
[61.15044022 435.09106445]
[64.75818634 420.44024658]
[72.03575897 407.22283936]
[82.48696136 396.34008789]
[95.39922333 388.53393555]
[109.89215851 384.33663940]
[109.58010864 369.33990479]
[109.26805115 354.34313965]
[108.95599365 339.34637451]
[108.64393616 324.34963989]
[108.33187866 309.35287476]
[108.01982117 294.35614014]
[107.70777130 279.35937500]
[107.39571381 264.36260986]
[107.08365631 249.36585999]
[106.77159882 234.36911011]
[106.45954132 219.37236023]
[96.65096283 213.39889526]
[90.91036987 203.31359863]
[90.77954865 191.58940125]
[96.40795135 181.16682434]
[106.48592377 174.71646118]
[106.79798126 159.71971130]
[107.11003876 144.72294617]
[107.42209625 129.72619629]
[88.53532410 126.97455597]
[75.75032806 113.96003723]
[73.55344391 96.69779205]
[81.83423615 82.35750580]
[74.65172577 69.18891907]
[67.46921539 56.02033615]
[60.28670883 42.85175705]
[53.10419846 29.68317223]
[45.92168808 16.51459122]
[31.93847275 21.99846649]
[17.37819481 25.68649101]
[2.47048974 27.52049637]
[-12.54952526 27.47155952]
[-27.44496155 25.54045105]
[-41.98089981 21.75762749]
[-55.92808533 16.18274879]
[-69.06655121 8.90373993]
[-81.18908691 0.03540195]
[-92.10449219 -10.28240013]
[-101.64063263 -21.88693810]
[-109.64709473 -34.59519577]
[-115.99761200 -48.20673752]
[-120.59203339 -62.50690079]
[-123.35788727 -77.27014160]
[-124.25154877 -92.26362610]
[-123.25894165 -107.25088501]
[-120.39570618 -121.99555206]
[-115.70700073 -136.26507568]
[-109.26677704 -149.83441162]
[-101.17661285 -162.48953247]
[-91.56408691 -174.03088379]
[-80.58081055 -184.27641296]
[-68.40000916 -193.06454468]
[-55.21378326 -200.25666809]
[-41.23010635 -205.73937988]
[-26.66951752 -209.42617798]
[-11.76165867 -211.25892639]
[3.25835204 -211.20872498]
[18.15362740 -209.27636719]
[32.68924713 -205.49230957]
[46.63596344 -199.91625977]
[59.77381516 -192.63615417]
[71.89559937 -183.76678467]
[82.81014252 -173.44807434]
[92.34530640 -161.84272766]
[100.35070038 -149.13378906]
[106.70007324 -135.52171326]
[111.29328156 -121.22116852]
[114.05789185 -106.45769501]
[114.95030212 -91.46413422]
[113.95642853 -76.47695923]
[111.09194946 -61.73253632]
[106.40204620 -47.46340942]
[99.96068573 -33.89461899]
[91.86944580 -21.24016571]
[82.25595093 -9.69963169]
[71.27181244 0.54497504]
[59.09027100 9.33208179]
[66.27278137 22.50066376]
[73.45529175 35.66924667]
[80.63780212 48.83782959]
[87.82030487 62.00641251]
[95.00281525 75.17499542]
[103.08477783 73.97323608]
[111.40794373 75.42373657]
[119.09745026 79.54965973]
[125.29169464 86.08509064]
[129.23760986 94.48718262]
[130.37924194 103.97943878]
[143.01025391 94.45220947]
[156.66448975 100.40294647]
[171.52752686 98.38061523]
[186.39057922 96.35827637]
[201.25363159 94.33594513]
[216.11666870 92.31361389]
[230.97972107 90.29127502]
[245.84277344 88.26894379]
[260.70581055 86.24660492]
[275.58514404 78.12000275]
[287.51318359 90.16818237]
[279.23785400 104.96532440]
[262.72814941 101.10965729]
[247.86509705 103.13198853]
[233.00205994 105.15431976]
[218.13900757 107.17665863]
[203.27595520 109.19898987]
[188.41291809 111.22132874]
[173.54986572 113.24365997]
[158.68681335 115.26599884]
[147.11891174 124.64857483]
[132.40158081 118.84248352]
[122.41884613 130.03825378]
[122.10679626 145.03500366]
[121.79473877 160.03175354]
[121.48268127 175.02851868]
[135.10227966 188.12452698]
[134.89598083 206.70018005]
[121.45629883 219.06030273]
[121.76835632 234.05705261]
[122.08040619 249.05380249]
[122.39246368 264.05056763]
[122.70452118 279.04730225]
[123.01657867 294.04406738]
[123.32863617 309.04083252]
[123.64069366 324.03756714]
[123.95274353 339.03433228]
[124.26480103 354.03109741]
[124.57685852 369.02783203]
[124.88891602 384.02459717]
[139.54391479 387.61535645]
[152.76971436 394.87762451]
[163.66458130 405.31622314]
[171.48568726 418.21942139]
[175.69975281 432.70748901]
[176.01947021 447.79260254]
[172.42304993 462.44619751]
[165.15568542 475.66918945]
[154.71289062 486.56002808]
[141.80665588 494.37615967]
[127.31696320 498.58462524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[27 125]
[28 124]
[29 123]
[30 122]
[34 93]
[35 92]
[36 91]
[37 90]
[38 89]
[39 88]
[99 121]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
