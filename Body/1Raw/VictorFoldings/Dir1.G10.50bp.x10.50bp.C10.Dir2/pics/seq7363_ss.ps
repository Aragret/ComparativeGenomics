%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAAAUCGGGGGGGGGGUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACxxxxxxxxxxAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGCCCCCCCCCCACCUAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[106.55337524 438.69573975]
[92.70743561 432.67971802]
[80.99877167 423.15029907]
[72.29624939 410.81463623]
[67.24564362 396.58810425]
[66.22175598 381.52642822]
[69.30055237 366.74725342]
[76.25357819 353.34732056]
[86.56485748 342.32101440]
[99.46923828 334.48648071]
[114.00912476 330.42517090]
[114.00912476 315.42517090]
[114.00912476 300.42517090]
[114.00912476 285.42517090]
[114.00912476 270.42517090]
[114.00912476 255.42518616]
[114.00912476 240.42518616]
[114.00912476 225.42518616]
[114.00912476 210.42518616]
[114.00912476 195.42518616]
[114.00912476 180.42518616]
[111.83229065 165.58396912]
[107.52470398 151.21578979]
[103.21712494 136.84761047]
[95.88334656 136.75798035]
[88.71144104 135.22306824]
[81.98339081 132.30322266]
[75.96372986 128.11323547]
[70.88916016 122.81786346]
[66.95919037 116.62532043]
[64.32836151 109.77908325]
[63.10010910 102.54833984]
[48.23706055 100.52600098]
[35.73675537 109.82009125]
[20.69232178 107.55742645]
[11.90886116 95.58302307]
[-2.95418525 93.56068420]
[-14.40667343 104.20843506]
[-30.02657127 104.95193481]
[-42.43864059 95.44012451]
[-45.78228378 80.16419220]
[-38.47873306 66.33696747]
[-23.97650146 60.48723984]
[-9.12310028 65.37707520]
[-0.93185085 78.69763947]
[13.93119621 80.71997833]
[25.59469414 71.52767181]
[40.69674683 73.36688232]
[50.25939560 85.66295624]
[65.12244415 87.68529510]
[73.14162445 74.56923676]
[85.80057526 65.84633636]
[100.91247559 63.02347565]
[104.31546021 48.41458130]
[107.71843719 33.80569077]
[111.12141418 19.19679642]
[106.71662903 4.00112343]
[117.13956451 -6.63897562]
[120.54254150 -21.24786758]
[123.94552612 -35.85676193]
[115.86074829 -49.17119598]
[119.51996613 -63.93821335]
[132.26306152 -71.56375885]
[135.66604614 -86.17264557]
[138.45837402 -100.91045380]
[140.63520813 -115.75166321]
[142.81204224 -130.59286499]
[128.89965820 -136.41493225]
[116.87274933 -145.51461792]
[107.48733521 -157.31990051]
[101.33338165 -171.08869934]
[98.79773712 -185.95547485]
[100.03979492 -200.98571777]
[104.98147583 -215.23460388]
[113.31214905 -227.80642700]
[124.50813293 -237.91091919]
[137.86564636 -244.91290283]
[152.54501343 -248.37222290]
[167.62348938 -248.07142639]
[182.15321350 -244.02943420]
[195.22085571 -236.50030518]
[206.00495911 -225.95735168]
[213.82762146 -213.06329346]
[218.19711304 -198.62867737]
[218.83876038 -183.56085205]
[215.71223450 -168.80702209]
[209.01406860 -155.29460144]
[199.16531372 -143.87301636]
[186.78506470 -135.26020813]
[172.65156555 -129.99761963]
[157.65324402 -128.41603088]
[155.47640991 -113.57482147]
[153.29957581 -98.73361969]
[154.92846680 -96.37692261]
[155.69070435 -93.21259308]
[155.26602173 -89.57920074]
[153.46701050 -85.92754364]
[150.27493286 -82.76966858]
[146.87196350 -68.16078186]
[154.93362427 -55.68899918]
[151.69062805 -40.82502747]
[138.55441284 -32.45378113]
[135.15144348 -17.84489059]
[131.74845886 -3.23599768]
[136.39663696 10.91475010]
[125.73030853 22.59977531]
[122.32732391 37.20866776]
[118.92434692 51.81755829]
[115.52136993 66.42645264]
[130.84776306 79.59139252]
[136.96977234 98.84587860]
[132.06069946 118.44473267]
[117.58530426 132.54002380]
[121.89289093 146.90820312]
[126.20047760 161.27639771]
[130.58947754 146.93286133]
[140.05072021 135.29307556]
[153.19497681 128.06613159]
[168.09219360 126.31320953]
[182.55496216 130.29170227]
[194.45962524 139.41741943]
[202.05818176 152.35040283]
[204.23489380 167.19161987]
[200.67015076 181.76188660]
[191.88735962 193.92176819]
[179.17616272 201.88577271]
[164.40298462 204.48451233]
[149.73706055 201.33639526]
[137.33184814 192.90367126]
[129.00912476 180.42518616]
[129.00912476 195.42518616]
[129.00912476 210.42518616]
[129.00912476 225.42518616]
[129.00912476 240.42518616]
[129.00912476 255.42518616]
[129.00912476 270.42517090]
[129.00912476 285.42517090]
[129.00912476 300.42517090]
[129.00912476 315.42517090]
[129.00912476 330.42517090]
[143.54901123 334.48648071]
[156.45339966 342.32101440]
[166.76467896 353.34732056]
[173.71769714 366.74725342]
[176.79649353 381.52642822]
[175.77261353 396.58810425]
[170.72200012 410.81463623]
[162.01948547 423.15029907]
[150.31082153 432.67971802]
[136.46488953 438.69573975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 115]
[23 114]
[24 113]
[32 50]
[33 49]
[36 46]
[37 45]
[53 109]
[54 108]
[55 107]
[56 106]
[58 104]
[59 103]
[60 102]
[63 99]
[64 98]
[65 93]
[66 92]
[67 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
