%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACCCCCUGGGGGGGGGGCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUxxxxxxxxxxCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUCCCCCCCCCCUCUACACCCU\
) } def
/len { sequence length } bind def

/coor [
[89.55942535 422.52056885]
[75.71348572 416.50454712]
[64.00482178 406.97512817]
[55.30229950 394.63946533]
[50.25169754 380.41296387]
[49.22780609 365.35125732]
[52.30660629 350.57211304]
[59.25962830 337.17218018]
[69.57091522 326.14584351]
[82.47529602 318.31134033]
[97.01518250 314.25003052]
[97.01518250 299.25003052]
[97.01518250 284.25003052]
[97.01518250 269.25003052]
[97.01518250 254.25003052]
[97.01518250 239.25003052]
[97.01518250 224.25003052]
[97.01518250 209.25003052]
[97.01518250 194.25003052]
[97.01518250 179.25003052]
[89.27787781 166.52275085]
[97.01518250 152.72257996]
[97.01518250 137.72257996]
[97.01518250 122.72257996]
[84.57573700 114.34043884]
[70.67318726 119.97239685]
[61.02099228 133.23011780]
[44.74414062 131.23110962]
[38.58685303 116.03176880]
[48.88322449 103.26788330]
[65.04122925 106.06983948]
[78.94378662 100.43788147]
[78.32034302 92.96383667]
[76.45003510 70.54170990]
[61.80653381 67.29088593]
[47.16303253 64.04006195]
[32.01399994 68.60266876]
[21.26605415 58.29098511]
[6.62255192 55.04016113]
[-8.02094936 51.78933334]
[-22.66445160 48.53850937]
[-39.43751526 51.00846100]
[-46.45418930 35.57464981]
[-33.56594086 24.55968285]
[-19.41362572 33.89500809]
[-4.77012348 37.14583206]
[9.87337780 40.39665604]
[24.51688004 43.64748383]
[38.61850739 38.85234833]
[50.41385651 49.39655685]
[65.05735779 52.64738083]
[79.70085907 55.89820862]
[66.63510132 48.53030396]
[60.81335831 34.70614624]
[64.67192841 20.21092606]
[76.59606934 11.11065483]
[91.59571075 11.21364880]
[103.39376068 20.47680664]
[107.05291748 35.02364731]
[101.04103088 48.76748657]
[110.78868103 37.36646652]
[120.53633118 25.96544456]
[130.28398132 14.56442356]
[116.02922058 19.23365402]
[101.03908539 19.77754593]
[86.48342133 16.15365410]
[73.49816132 8.64478874]
[63.09668732 -2.16305065]
[56.09074402 -15.42641163]
[53.02708054 -30.11021042]
[54.14477921 -45.06851196]
[59.35662460 -59.13395309]
[68.25587463 -71.20886230]
[80.14802551 -80.35089111]
[94.10499573 -85.84660339]
[109.03759003 -87.26709747]
[123.78043365 -84.50152588]
[137.18299866 -77.76570129]
[148.19932556 -67.58531189]
[155.96971130 -54.75482941]
[159.88772583 -40.27556610]
[159.64761353 -25.27748680]
[155.26811218 -10.93105984]
[147.08921814 1.64615119]
[160.61340332 -4.84201384]
[174.13760376 -11.33017921]
[174.74783325 -31.26415253]
[195.71664429 -46.14469910]
[205.69937134 -57.34046555]
[215.68208313 -68.53623199]
[216.20390320 -84.57079315]
[229.15118408 -94.04431152]
[244.59188843 -89.68950653]
[250.68122864 -74.84701538]
[242.74797058 -60.90272522]
[226.87785339 -58.55350494]
[216.89512634 -47.35773849]
[206.91239929 -36.16197586]
[210.36590576 -29.50439644]
[220.89500427 -40.18793488]
[234.30931091 -33.47553635]
[232.07066345 -18.64352798]
[217.27290344 -16.18924141]
[220.72639465 -9.53166294]
[235.62829590 -11.24435234]
[250.53021240 -12.95704174]
[265.43209839 -14.66973209]
[280.33401489 -16.38242149]
[293.17755127 -26.57927513]
[308.32855225 -20.30404091]
[310.20098877 -4.01214075]
[296.86865234 5.53671408]
[282.04669189 -1.48051918]
[267.14480591 0.23217054]
[252.24288940 1.94486022]
[237.34098816 3.65754986]
[222.43908691 5.37023973]
[197.37857056 14.08014774]
[180.62576294 2.19401097]
[167.10157776 8.68217564]
[153.57739258 15.17034149]
[141.68501282 24.31207466]
[131.93734741 35.71309662]
[122.18970490 47.11411667]
[112.44204712 58.51513672]
[134.34317017 96.64051056]
[112.01518250 122.72257996]
[112.01518250 137.72257996]
[112.01518250 152.72257996]
[119.75247955 166.52275085]
[112.01518250 179.25003052]
[112.01518250 194.25003052]
[112.01518250 209.25003052]
[112.01518250 224.25003052]
[112.01518250 239.25003052]
[112.01518250 254.25003052]
[112.01518250 269.25003052]
[112.01518250 284.25003052]
[112.01518250 299.25003052]
[112.01518250 314.25003052]
[126.55506897 318.31134033]
[139.45944214 326.14584351]
[149.77073669 337.17218018]
[156.72375488 350.57211304]
[159.80255127 365.35125732]
[158.77865601 380.41296387]
[153.72805786 394.63946533]
[145.02552795 406.97512817]
[133.31687927 416.50454712]
[119.47093201 422.52056885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 32]
[26 31]
[34 52]
[35 51]
[36 50]
[38 48]
[39 47]
[40 46]
[41 45]
[60 125]
[61 124]
[62 123]
[63 122]
[84 121]
[85 120]
[86 119]
[88 98]
[89 97]
[90 96]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
