%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUCUCAGGGGGGGGGGUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACxxxxxxxxxxAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAACCCCCCCCCCACUAACCUCA\
) } def
/len { sequence length } bind def

/coor [
[31.15114212 298.19445801]
[19.21144867 293.63476562]
[7.57153368 288.35656738]
[-3.72541261 282.37942505]
[-14.63747025 275.72552490]
[-25.12414932 268.41958618]
[-35.14653778 260.48870850]
[-44.66744232 251.96231079]
[-53.65153885 242.87202454]
[-62.06548691 233.25160217]
[-69.87806702 223.13673401]
[-77.06029510 212.56492615]
[-89.99835205 220.15484619]
[-102.93640900 227.74475098]
[-110.92453766 241.40126038]
[-125.81731415 241.16748047]
[-138.75537109 248.75738525]
[-151.69342041 256.34729004]
[-164.63148499 263.93719482]
[-177.56953430 271.52709961]
[-190.50758362 279.11700439]
[-192.93759155 294.56463623]
[-204.76251221 304.79721069]
[-220.39898682 304.98318481]
[-232.46395874 295.03479004]
[-235.26069641 279.64932251]
[-227.46868896 266.09136963]
[-212.76707458 260.76254272]
[-198.09750366 266.17895508]
[-185.15943909 258.58905029]
[-172.22138977 250.99914551]
[-159.28332520 243.40924072]
[-146.34527588 235.81932068]
[-133.40722656 228.22941589]
[-126.34450531 215.11578369]
[-110.52631378 214.80668640]
[-97.58825684 207.21678162]
[-84.65019989 199.62687683]
[-96.40698242 173.79370117]
[-104.56957245 146.61010742]
[-108.98860168 118.57357788]
[-109.58319855 90.19715118]
[-106.34248352 62.00011444]
[-99.32576752 34.49846649]
[-88.66144562 8.19547462]
[-74.54467773 -16.42752075]
[-57.23379517 -38.91992950]
[-68.11261749 -49.24713135]
[-78.99144745 -59.57433701]
[-89.87026978 -69.90154266]
[-104.33872986 -64.90933228]
[-119.46817017 -67.22424316]
[-131.78193665 -76.31432343]
[-138.45043945 -90.09074402]
[-137.94128418 -105.38778687]
[-130.37147522 -118.69029236]
[-117.48051453 -126.94145203]
[-102.23063660 -128.24520874]
[-88.12615204 -122.30195618]
[-78.40817261 -110.47743225]
[-75.30981445 -95.48880768]
[-79.54306793 -80.78036499]
[-68.66423798 -70.45316315]
[-57.78541565 -60.12595749]
[-46.90658951 -49.79875183]
[-39.15393829 -57.02672958]
[-31.04615021 -63.85395432]
[-22.60391808 -70.26300812]
[-13.84878635 -76.23752594]
[-4.80309868 -81.76226807]
[4.51005840 -86.82313538]
[14.06691742 -91.40720367]
[23.84308624 -95.50277710]
[33.81361771 -99.09941101]
[43.95306396 -102.18791962]
[54.23554993 -104.76041412]
[64.63482666 -106.81034088]
[75.12436676 -108.33246613]
[85.67739105 -109.32289886]
[96.26696014 -109.77911377]
[106.86606598 -109.69995117]
[117.44764709 -109.08560944]
[127.98469543 -107.93766022]
[138.45033264 -106.25902557]
[148.81782532 -104.05399323]
[159.06074524 -101.32819366]
[169.15292358 -98.08857727]
[179.06861877 -94.34342194]
[188.78251648 -90.10227966]
[198.26983643 -85.37596893]
[207.50636292 -80.17655945]
[216.46852112 -74.51731873]
[225.13343811 -68.41268921]
[233.47900391 -61.87825394]
[241.48390198 -54.93068695]
[249.12773132 -47.58771515]
[256.39096069 -39.86808395]
[263.25506592 -31.79149246]
[269.70251465 -23.37855339]
[275.71688843 -14.65073967]
[281.28277588 -5.63032293]
[286.38604736 3.65967441]
[291.01361084 13.19554329]
[295.15368652 22.95294762]
[298.79571533 32.90698624]
[301.93038940 43.03224945]
[304.54974365 53.30290604]
[306.64703369 63.69273758]
[308.21694946 74.17522430]
[309.25546265 84.72362518]
[309.75991821 95.31101227]
[309.72906494 105.91036987]
[309.16296387 116.49463654]
[308.06301880 127.03681183]
[306.43209839 137.50997925]
[304.27435303 147.88742065]
[301.59524536 158.14265442]
[298.40167236 168.24949646]
[294.70172119 178.18214417]
[290.50488281 187.91528320]
[303.89117432 194.68339539]
[317.27746582 201.45150757]
[333.61245728 200.00238037]
[342.81219482 213.57798767]
[335.41278076 228.21289062]
[319.02609253 228.85197449]
[310.50933838 214.83779907]
[297.12307739 208.06968689]
[283.73678589 201.30155945]
[277.22796631 212.30076599]
[270.06152344 222.88325500]
[262.26400757 233.00978088]
[253.86442566 242.64274597]
[244.89389038 251.74639893]
[235.38571167 260.28698730]
[225.37516785 268.23281860]
[214.89939880 275.55438232]
[203.99726868 282.22451782]
[192.70924377 288.21850586]
[181.07722473 293.51406860]
[169.14433289 298.09158325]
[156.95487976 301.93402100]
[144.55409241 305.02719116]
[131.98797607 307.35955811]
[119.30316925 308.92248535]
[106.54673767 309.71017456]
[93.76600647 309.71969604]
[81.00840759 308.95101929]
[68.32127380 307.40701294]
[55.75169754 305.09338379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 38]
[13 37]
[14 36]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[47 65]
[48 64]
[49 63]
[50 62]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
