%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUAACAAGGGGGGGGGGUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUxxxxxxxxxxUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAACCCCCCCCCCAAUUAUAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 405.79299927]
[71.01555634 400.23999023]
[58.81560135 391.37365723]
[49.20452881 379.75134277]
[42.78650284 366.10363770]
[39.96496582 351.28845215]
[40.91728210 336.23709106]
[45.58358765 321.89566040]
[53.67055511 309.16571045]
[64.66983032 298.84744263]
[77.88998413 291.58944702]
[92.50000000 287.84802246]
[92.50000000 272.84802246]
[92.50000000 257.84802246]
[92.50000000 242.84802246]
[92.50000000 227.84802246]
[92.50000000 212.84802246]
[92.50000000 197.84802246]
[92.50000000 182.84802246]
[92.50000000 167.84802246]
[92.50000000 152.84802246]
[92.50000000 137.84802246]
[92.50000000 122.84802246]
[85.12406158 118.89414215]
[79.54979706 112.65193176]
[76.45232391 104.87741089]
[61.54787827 103.18701172]
[46.64342880 101.49661255]
[31.73898125 99.80621338]
[16.83453369 98.11581421]
[1.93008685 96.42542267]
[-12.97436047 94.73502350]
[-19.45440674 108.42033386]
[-30.02874374 119.25832367]
[-43.55034637 126.07337952]
[-58.55249786 128.12625122]
[-73.40786743 125.19424438]
[-86.50506592 117.59541321]
[-96.42340088 106.15402985]
[-102.08700562 92.11115265]
[-102.88153839 76.99005890]
[-98.72080994 62.43097305]
[-90.05614471 50.01314926]
[-77.82742310 41.08358002]
[-63.36112976 36.61088562]
[-48.22645569 37.08022308]
[-34.06509399 42.44068527]
[-22.41316605 52.11081314]
[-14.53458595 65.04165649]
[-11.28396320 79.83057404]
[3.62048435 81.52097321]
[18.52493095 83.21137238]
[33.42937851 84.90177155]
[48.33382797 86.59216309]
[63.23827362 88.28256226]
[78.14272308 89.97296143]
[85.76512909 80.61828613]
[96.97187042 76.14392090]
[108.94109344 77.67649078]
[118.58290863 66.18582916]
[108.02293396 55.51757050]
[98.49237061 43.92046356]
[90.07250977 31.49344826]
[82.83520508 18.34255219]
[76.84220123 4.57997561]
[72.14462280 -9.67686176]
[68.78255463 -24.30632401]
[66.78468323 -39.18359375]
[66.16804504 -54.18173981]
[66.93790436 -69.17279816]
[69.08769989 -84.02887726]
[72.59908295 -98.62322235]
[77.44210052 -112.83131409]
[83.57542419 -126.53192902]
[90.94673157 -139.60818481]
[99.49313354 -151.94851685]
[109.14170837 -163.44763184]
[119.81014252 -174.00741577]
[131.40740967 -183.53779602]
[143.83456421 -191.95744324]
[156.98558044 -199.19453430]
[170.74826050 -205.18730164]
[185.00517273 -209.88464355]
[199.63468933 -213.24647522]
[214.51199341 -215.24409485]
[229.51014709 -215.86048889]
[244.50119019 -215.09037781]
[259.35723877 -212.94033813]
[273.95150757 -209.42871094]
[288.15954590 -204.58544922]
[301.86004639 -198.45190430]
[314.93618774 -191.08036804]
[327.27636719 -182.53376770]
[338.77532959 -172.88499451]
[349.33493042 -162.21640015]
[358.86511230 -150.61897278]
[367.28454590 -138.19168091]
[374.52142334 -125.04053497]
[380.51397705 -111.27776337]
[385.21105957 -97.02076721]
[388.57266235 -82.39119720]
[390.57003784 -67.51385498]
[391.18615723 -52.51568985]
[390.41580200 -37.52465439]
[388.26553345 -22.66864777]
[384.75366211 -8.07442284]
[379.91015625 6.13350677]
[373.77636719 19.83392143]
[366.40463257 32.90993118]
[357.85781860 45.24997330]
[348.20886230 56.74876785]
[337.54006958 67.30820465]
[325.94250488 76.83819580]
[313.51507568 85.25743103]
[300.36380005 92.49407196]
[286.60092163 98.48639679]
[272.34387207 103.18325806]
[257.71423340 106.54459381]
[242.83685303 108.54172516]
[227.83868408 109.15761566]
[212.84765625 108.38700104]
[197.99168396 106.23646545]
[183.39752197 102.72434998]
[169.18966675 97.88063049]
[155.48936462 91.74662018]
[142.41346741 84.37465668]
[130.07357788 75.82763672]
[120.43176270 87.31830597]
[122.59725952 108.22473145]
[107.50000000 122.84802246]
[107.50000000 137.84802246]
[107.50000000 152.84802246]
[107.50000000 167.84802246]
[107.50000000 182.84802246]
[107.50000000 197.84802246]
[107.50000000 212.84802246]
[107.50000000 227.84802246]
[107.50000000 242.84802246]
[107.50000000 257.84802246]
[107.50000000 272.84802246]
[107.50000000 287.84802246]
[122.11001587 291.58944702]
[135.33016968 298.84744263]
[146.32945251 309.16571045]
[154.41641235 321.89566040]
[159.08271790 336.23709106]
[160.03503418 351.28845215]
[157.21350098 366.10363770]
[150.79547119 379.75134277]
[141.18440247 391.37365723]
[128.98443604 400.23999023]
[114.96250153 405.79299927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[59 128]
[60 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
