%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUACCCACGGGGGGGGGGACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUxxxxxxxxxxAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACCCCCCCCCCCUUAUCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[83.26042938 358.72290039]
[70.04023743 351.45043945]
[59.15343094 341.00341797]
[51.34230042 328.09417725]
[47.13941956 313.60287476]
[46.83134842 298.51751709]
[50.43909073 283.86669922]
[57.71666336 270.64932251]
[68.16786957 259.76654053]
[81.08013153 251.96040344]
[95.57306671 247.76310730]
[95.26100922 232.76635742]
[94.94895935 217.76960754]
[94.63690186 202.77285767]
[94.32484436 187.77609253]
[94.01278687 172.77934265]
[93.70072937 157.78259277]
[93.38867188 142.78584290]
[93.07662201 127.78908539]
[92.76456451 112.79232788]
[80.50219727 104.15321350]
[66.27541351 108.90702820]
[52.04863739 113.66084290]
[37.82185745 118.41465759]
[35.43368912 133.53269958]
[26.28406906 145.80229187]
[12.47550964 152.40399170]
[-2.81888199 151.82073975]
[-16.08456612 144.18659973]
[-24.27318764 131.25581360]
[-25.50305939 115.99980164]
[-19.49156570 101.92427063]
[-7.62010479 92.26367950]
[7.38334846 89.23796082]
[22.07111168 93.54240417]
[33.06804276 104.18788147]
[47.29482269 99.43405914]
[61.52159882 94.68024445]
[75.74838257 89.92642975]
[87.67745209 87.61505127]
[96.71042633 91.96619415]
[102.48669434 78.12297821]
[108.26296997 64.27975464]
[98.75010681 75.87740326]
[83.91599274 78.10209656]
[71.41952515 69.80521393]
[67.71265411 55.27045441]
[74.70923615 42.00215530]
[88.79693604 36.85076523]
[102.70372772 42.47735596]
[91.00410461 33.09019089]
[79.30448151 23.70302963]
[63.16648865 18.50672340]
[63.69227982 1.56093144]
[80.12137604 -2.62488627]
[88.69164276 12.00340652]
[100.39126587 21.39056778]
[112.09088898 30.77773094]
[115.80811310 38.96152878]
[118.90033722 47.37837601]
[128.88305664 36.18260956]
[138.86578369 24.98684311]
[138.91760254 12.04655075]
[147.51681519 2.92118073]
[159.62956238 2.15375614]
[169.84303284 -8.83190823]
[180.05651855 -19.81757355]
[170.31895447 -31.24982643]
[161.97447205 -43.73526001]
[155.13591003 -57.10502625]
[149.89575195 -71.17830658]
[146.32489014 -85.76478577]
[144.47157288 -100.66719818]
[144.36090088 -115.68399811]
[145.99436951 -130.61210632]
[149.34985352 -145.24963379]
[154.38201904 -159.39862061]
[161.02276611 -172.86772156]
[169.18232727 -185.47479248]
[178.75033569 -197.04933167]
[189.59738159 -207.43479919]
[201.57679749 -216.49073792]
[214.52656555 -224.09469604]
[228.27154541 -230.14382935]
[242.62585449 -234.55633545]
[257.39538574 -237.27252197]
[272.38037109 -238.25567627]
[287.37817383 -237.49249268]
[302.18597412 -234.99330139]
[316.60348511 -230.79188538]
[330.43572998 -224.94506836]
[343.49566650 -217.53193665]
[355.60665894 -208.65272522]
[366.60491943 -198.42753601]
[376.34173584 -186.99462891]
[384.68539429 -174.50863647]
[391.52304077 -161.13842773]
[396.76226807 -147.06478882]
[400.33215332 -132.47807312]
[402.18447876 -117.57553864]
[402.29415894 -102.55873108]
[400.65969849 -87.63072968]
[397.30322266 -72.99343109]
[392.27011108 -58.84477615]
[385.62844849 -45.37611008]
[377.46807861 -32.76958847]
[367.89929199 -21.19569397]
[357.05154419 -10.81095123]
[345.07153320 -1.75580382]
[332.12124634 5.84728909]
[318.37585449 11.89550400]
[304.02127075 16.30704689]
[289.25155640 19.02225304]
[274.26651001 20.00440598]
[259.26873779 19.24022293]
[244.46112061 16.74003792]
[230.04389954 12.53766155]
[216.21202087 6.68992853]
[203.15258789 -0.72407866]
[191.04219055 -9.60409355]
[180.82870483 1.38157129]
[170.61521912 12.36723614]
[167.65534973 29.63683701]
[150.06155396 34.96957016]
[140.07882690 46.16533661]
[130.09609985 57.36110306]
[122.10618591 70.05603027]
[116.32991028 83.89924622]
[110.55364227 97.74246979]
[107.76131439 112.48027039]
[108.07337189 127.47702789]
[108.38542938 142.47378540]
[108.69748688 157.47053528]
[109.00954437 172.46728516]
[109.32159424 187.46403503]
[109.63365173 202.46080017]
[109.94570923 217.45755005]
[110.25776672 232.45429993]
[110.56982422 247.45104980]
[125.22481537 251.04182434]
[138.45062256 258.30407715]
[149.34548950 268.74267578]
[157.16659546 281.64587402]
[161.38066101 296.13394165]
[161.70037842 311.21905518]
[158.10395813 325.87265015]
[150.83659363 339.09567261]
[140.39378357 349.98648071]
[127.48755646 357.80261230]
[112.99787140 362.01107788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 39]
[22 38]
[23 37]
[24 36]
[41 129]
[42 128]
[43 127]
[50 58]
[51 57]
[52 56]
[60 126]
[61 125]
[62 124]
[65 122]
[66 121]
[67 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
