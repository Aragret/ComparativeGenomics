%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACAUAGGGGGGGGGGAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCxxxxxxxxxxCUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACCCCCCCCCCCAAAACACAUA\
) } def
/len { sequence length } bind def

/coor [
[83.45751190 368.19393921]
[70.23731232 360.92147827]
[59.35050964 350.47445679]
[51.53937912 337.56521606]
[47.33649826 323.07391357]
[47.02842331 307.98855591]
[50.63616562 293.33773804]
[57.91373825 280.12036133]
[68.36494446 269.23757935]
[81.27720642 261.43142700]
[95.77014160 257.23416138]
[95.45809174 242.23739624]
[95.14603424 227.24064636]
[94.83397675 212.24389648]
[94.52191925 197.24714661]
[94.20986176 182.25038147]
[93.89780426 167.25363159]
[93.58575439 152.25688171]
[93.27369690 137.26013184]
[92.96163940 122.26337433]
[80.61006927 113.75228119]
[66.48526001 118.80104065]
[52.36045837 123.84979248]
[50.80424118 139.03337097]
[42.80691528 152.03358459]
[29.95635796 160.26922607]
[14.80405521 162.10511780]
[0.35850987 157.17674255]
[-10.51210594 146.46261597]
[-15.64942360 132.09004211]
[-14.03342438 116.91271973]
[-5.98496628 103.94409943]
[6.89792347 95.75911713]
[22.05733681 93.98291016]
[36.48336411 98.96813965]
[47.31170273 109.72499084]
[61.43650818 104.67623138]
[75.56130981 99.62747955]
[80.61006927 85.50267792]
[72.88597870 72.64427185]
[65.16189575 59.78586960]
[57.43781281 46.92746735]
[49.71372604 34.06906509]
[40.32656479 22.36944199]
[29.44773865 12.04223728]
[18.56891441 1.71503282]
[7.69008875 -8.61217213]
[-5.72595596 -1.59159708]
[-20.69503403 0.68993545]
[-35.59341431 -2.01505804]
[-48.80503082 -9.41316032]
[-58.89678574 -20.70187950]
[-64.77400208 -34.65670013]
[-65.79916382 -49.76391220]
[-61.86106491 -64.38478851]
[-53.38688660 -76.93338013]
[-41.29584122 -86.04849243]
[-26.89947510 -90.74140167]
[-11.75939846 -90.50304413]
[2.48210549 -85.35928345]
[14.28022575 -75.86807251]
[22.35519028 -63.05894852]
[25.83108711 -48.32134628]
[24.33087921 -33.25389481]
[18.01729393 -19.49099731]
[28.89611816 -9.16379261]
[39.77494431 1.16341245]
[50.65377045 11.49061775]
[47.55297089 -3.18538523]
[50.57873917 -17.87704086]
[59.22630692 -30.13344955]
[72.05306244 -37.90996933]
[86.91921997 -39.90930176]
[101.34477234 -35.79791641]
[112.92321014 -26.26167679]
[119.72298431 -12.89144897]
[120.60975647 2.08231688]
[115.43557739 16.16165924]
[105.06362152 26.99782753]
[91.22415924 32.78310776]
[76.22593689 32.55237961]
[62.57212830 26.34498215]
[70.29621124 39.20338440]
[78.02030182 52.06178665]
[85.74438477 64.92018890]
[93.46846771 77.77858734]
[108.12481689 71.68391418]
[119.42382050 61.81819153]
[130.72282410 51.95246887]
[141.91859436 41.96974182]
[153.00990295 31.87109375]
[164.10122681 21.77244377]
[164.59033203 5.97572470]
[176.16320801 -4.78736401]
[191.95387268 -4.13127327]
[202.59399414 7.55475044]
[201.77099609 23.33759499]
[189.97312927 33.85358047]
[174.19987488 32.86375809]
[163.10855103 42.96240997]
[152.01724243 53.06105804]
[149.17039490 59.93427277]
[140.58854675 63.25147247]
[129.28953552 73.11719513]
[117.99053955 82.98291779]
[121.99827576 97.43760681]
[136.76432800 100.07646942]
[151.53039551 102.71533966]
[158.64729309 89.36599731]
[169.54246521 78.87073517]
[183.14848328 72.25775146]
[198.13237000 70.17493439]
[213.02616882 72.82633209]
[226.37074280 79.95218658]
[236.85870361 90.85437775]
[243.46255493 104.46482849]
[245.53533936 119.45011139]
[242.87396240 134.34213257]
[235.73916626 147.68191528]
[224.82995605 158.16256714]
[211.21508789 164.75730896]
[196.22840881 166.82005310]
[181.33818054 164.14869690]
[168.00317383 157.00495911]
[157.52983093 146.08872986]
[150.94421387 132.46943665]
[148.89152527 117.48139191]
[134.12547302 114.84252930]
[119.35941315 112.20366669]
[107.95838928 121.95131683]
[108.27044678 136.94807434]
[108.58250427 151.94482422]
[108.89456177 166.94157410]
[109.20661926 181.93832397]
[109.51867676 196.93508911]
[109.83072662 211.93183899]
[110.14278412 226.92858887]
[110.45484161 241.92533875]
[110.76689911 256.92208862]
[125.42189026 260.51287842]
[138.64770508 267.77511597]
[149.54257202 278.21371460]
[157.36366272 291.11694336]
[161.57772827 305.60498047]
[161.89746094 320.69009399]
[158.30102539 335.34368896]
[151.03366089 348.56671143]
[140.59086609 359.45755005]
[127.68463898 367.27365112]
[113.19494629 371.48211670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 38]
[22 37]
[23 36]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 68]
[45 67]
[46 66]
[47 65]
[87 105]
[88 104]
[89 103]
[90 101]
[91 100]
[92 99]
[106 129]
[107 128]
[108 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
