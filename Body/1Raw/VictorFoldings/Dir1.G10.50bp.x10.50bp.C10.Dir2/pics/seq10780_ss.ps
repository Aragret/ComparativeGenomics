%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUCCAACUGGGGGGGGGGGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCAGUUxxxxxxxxxxAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGCCCCCCCCCCUAUUUCAACU\
) } def
/len { sequence length } bind def

/coor [
[94.64751434 380.30838013]
[80.15782166 376.09988403]
[67.25159454 368.28378296]
[56.80879211 357.39294434]
[49.54142761 344.16995239]
[45.94500351 329.51632690]
[46.26472473 314.43124390]
[50.47879410 299.94317627]
[58.29989243 287.03994751]
[69.19476318 276.60137939]
[82.42057037 269.33911133]
[97.07556152 265.74835205]
[97.38761902 250.75158691]
[97.69967651 235.75483704]
[98.01172638 220.75807190]
[98.32378387 205.76132202]
[98.63584137 190.76457214]
[98.94789886 175.76782227]
[99.25995636 160.77105713]
[99.57201385 145.77430725]
[99.88406372 130.77755737]
[86.27306366 126.05390930]
[76.86721039 115.98764801]
[73.41337585 103.30300903]
[76.14810944 91.08900452]
[83.86833954 82.05063629]
[77.80532837 68.33058167]
[71.74231720 54.61052704]
[63.75239563 41.91559601]
[54.00474548 30.51457596]
[45.99515152 25.98707581]
[44.17589951 18.77347946]
[34.66754150 7.17213774]
[25.15918159 -4.42920351]
[15.65082359 -16.03054428]
[4.04948187 -25.53890228]
[-9.19310379 -32.58403778]
[-22.43568993 -39.62917328]
[-35.67827606 -46.67430878]
[-48.92086029 -53.71944427]
[-68.96740723 -52.05081558]
[-78.60839081 -68.76850128]
[-92.13258362 -75.25666809]
[-105.65676880 -81.74482727]
[-119.18096161 -88.23299408]
[-134.00558472 -82.75521851]
[-148.32641602 -89.44023895]
[-153.64714050 -104.32195282]
[-146.81109619 -118.57130432]
[-131.87396240 -123.73439789]
[-117.69767761 -116.74806976]
[-112.69279480 -101.75718689]
[-99.16860199 -95.26902008]
[-85.64441681 -88.78085327]
[-72.12022400 -82.29269409]
[-62.74796677 -86.55796814]
[-52.36332703 -84.89111328]
[-44.47262573 -77.60822296]
[-41.87572479 -66.96202850]
[-28.63314056 -59.91689301]
[-15.39055443 -52.87175751]
[-2.14796877 -45.82662201]
[11.09461689 -38.78149033]
[3.48287535 -51.70671082]
[-0.06203631 -66.28181458]
[0.76334530 -81.25908661]
[5.88836288 -95.35639954]
[14.87428856 -107.36694336]
[26.95187759 -116.26255035]
[41.08722305 -121.28171539]
[56.07026672 -121.99475861]
[70.61837769 -118.34065247]
[83.48616028 -110.63220215]
[93.57205963 -99.52929688]
[100.01267242 -85.98239136]
[102.25664520 -71.15119171]
[100.11189270 -56.30531693]
[93.76200104 -42.71565628]
[83.75056458 -31.54555511]
[70.93460846 -23.75123787]
[56.41125870 -19.99993706]
[41.42378235 -20.61278725]
[27.25216484 -25.53890228]
[36.76052475 -13.93756199]
[46.26888275 -2.33622050]
[55.77724075 9.26512051]
[65.40576935 20.76692390]
[75.15341949 32.16794586]
[79.44805908 22.39772987]
[88.17343140 17.34139061]
[97.61625671 18.35426331]
[108.91526031 8.48854065]
[108.42713928 -7.14142275]
[118.14052582 -19.39638519]
[133.46905518 -22.48993111]
[147.17507935 -14.96137810]
[152.78701782 -0.36548284]
[147.65509033 14.40602112]
[134.20243835 22.37848091]
[118.78098297 19.78754425]
[107.48197937 29.65326881]
[102.92676544 45.27810669]
[85.46236420 48.54751205]
[91.52538300 62.26756668]
[97.58839417 75.98761749]
[120.68277740 81.94381714]
[129.92828369 107.18115997]
[144.57179260 110.43199158]
[159.21528625 113.68281555]
[173.85879517 116.93363953]
[188.50228882 120.18446350]
[203.14579773 123.43528748]
[217.78929138 126.68611908]
[228.10960388 115.31127930]
[242.73956299 110.63582611]
[257.74377441 113.91741180]
[269.08621216 124.27332306]
[273.71578979 138.91786194]
[270.38717651 153.91172791]
[259.99575806 165.22163391]
[245.33679199 169.80529785]
[230.35343933 166.42970276]
[219.07615662 156.00289917]
[214.53846741 141.32962036]
[199.89497375 138.07879639]
[185.25146484 134.82797241]
[170.60797119 131.57714844]
[155.96446228 128.32630920]
[141.32096863 125.07549286]
[126.67745972 121.82466125]
[114.88082123 131.08961487]
[114.56876373 146.08636475]
[114.25670624 161.08311462]
[113.94464874 176.07987976]
[113.63259888 191.07662964]
[113.32054138 206.07337952]
[113.00848389 221.07012939]
[112.69642639 236.06689453]
[112.38436890 251.06364441]
[112.07231140 266.06039429]
[126.56525421 270.25769043]
[139.47750854 278.06381226]
[149.92872620 288.94659424]
[157.20629883 302.16397095]
[160.81404114 316.81481934]
[160.50596619 331.90014648]
[156.30308533 346.39144897]
[148.49195862 359.30072021]
[137.60514832 369.74771118]
[124.38494873 377.02017212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 105]
[27 104]
[28 103]
[29 88]
[30 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[42 55]
[43 54]
[44 53]
[45 52]
[91 101]
[92 100]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
