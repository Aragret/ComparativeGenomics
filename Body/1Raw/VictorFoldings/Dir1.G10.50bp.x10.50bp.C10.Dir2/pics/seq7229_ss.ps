%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGAAACAUCGGGGGGGGGGCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUxxxxxxxxxxUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAACCCCCCCCCCACCUGAAACAUC\
) } def
/len { sequence length } bind def

/coor [
[90.19378662 394.51434326]
[76.03318024 389.35934448]
[63.44343948 381.07711792]
[53.10350037 370.11434937]
[45.57099152 357.06222534]
[41.25212479 342.62463379]
[40.37981415 327.58016968]
[43.00110626 312.74017334]
[48.97463226 298.90493774]
[57.97825241 286.82058716]
[69.52640533 277.13879395]
[82.99632263 270.38174438]
[97.66158295 266.91375732]
[97.66158295 251.91375732]
[97.66158295 236.91375732]
[97.66158295 221.91375732]
[97.66158295 206.91375732]
[97.66158295 191.91375732]
[97.66158295 176.91375732]
[97.66158295 161.91375732]
[97.66158295 146.91375732]
[97.66158295 131.91375732]
[76.86983490 118.60861206]
[72.90456390 96.10769653]
[85.68554688 79.42973328]
[81.19510651 65.11764526]
[76.70465851 50.80555725]
[65.57490540 47.70718384]
[57.21380234 39.99892807]
[53.34791946 29.49656105]
[38.56997299 26.92511177]
[23.79203033 24.35366249]
[9.01408482 21.78221512]
[2.16243863 35.25612640]
[-8.35750961 46.11071777]
[-21.61033249 53.38079834]
[-36.41759872 56.41992188]
[-51.46265793 54.95784760]
[-65.40770721 49.12458801]
[-77.01277161 39.43882751]
[-85.24593353 26.76182175]
[-89.37509918 12.22079659]
[-89.03311157 -2.89126635]
[-84.25038147 -17.23061371]
[-75.45217896 -29.52220154]
[-63.42084503 -38.67306900]
[-49.22618866 -43.86952591]
[-34.13039398 -44.64950943]
[-19.47576714 -40.94366455]
[-6.56538677 -33.08150864]
[3.45276403 -21.76214027]
[9.68787861 -7.99207354]
[11.58553410 7.00426960]
[26.36347771 9.57571793]
[41.14142227 12.14716721]
[55.91936874 14.71861553]
[61.08635712 8.20767593]
[68.18452454 3.88261342]
[76.33982086 2.27599907]
[80.83026886 -12.03608990]
[85.32071686 -26.34817886]
[89.81116486 -40.66026688]
[94.30161285 -54.97235489]
[98.79206085 -69.28444672]
[103.28250122 -83.59653473]
[92.00021362 -73.71170044]
[78.93768311 -66.33808136]
[64.64501190 -61.78621674]
[49.72410965 -60.24779129]
[34.80335236 -61.78759766]
[20.51109886 -66.34078979]
[7.44924688 -73.71560669]
[-3.83212757 -83.60148621]
[-12.85792732 -95.58209229]
[-19.24804688 -109.15288544]
[-22.73337555 -123.74234772]
[-23.16713524 -138.73608398]
[-20.53105736 -153.50262451]
[-14.93615913 -167.42013550]
[-6.61805820 -179.90249634]
[4.07294226 -190.42402649]
[16.68660736 -198.54162598]
[30.69173622 -203.91343689]
[45.49852371 -206.31324768]
[60.48340607 -205.63998413]
[75.01531982 -201.92198181]
[88.48227692 -195.31585693]
[100.31714630 -186.09979248]
[110.02151489 -174.66189575]
[117.18669891 -161.48388672]
[121.51094818 -147.12069702]
[122.81215668 -132.17724609]
[121.03553009 -117.28283691]
[116.25759125 -103.06848145]
[127.73739624 -112.72322845]
[139.21719360 -122.37797546]
[150.69700623 -132.03271484]
[158.92727661 -146.85496521]
[175.44863892 -143.04953003]
[176.36547852 -126.12038422]
[160.35174561 -120.55291748]
[148.87194824 -110.89817047]
[137.39213562 -101.24342346]
[125.91233826 -91.58867645]
[117.59458923 -79.10608673]
[113.10414886 -64.79399872]
[108.61370087 -50.48191071]
[104.12325287 -36.16981888]
[99.63280487 -21.85773277]
[95.14235687 -7.54564285]
[90.65190887 6.76644564]
[101.03564453 26.14781570]
[91.01674652 46.31510925]
[95.50719452 60.62719727]
[99.99763489 74.93928528]
[112.08945465 76.08689880]
[122.97658539 83.08733368]
[129.84684753 94.98847961]
[130.55282593 109.51213074]
[144.51063538 115.00571442]
[158.46846008 120.49930573]
[172.42626953 125.99289703]
[186.81614685 119.45784760]
[201.58273315 125.09019470]
[207.96528625 139.54835510]
[202.17712402 154.25457764]
[187.65228271 160.48390198]
[173.00808716 154.54060364]
[166.93267822 139.95071411]
[152.97486877 134.45712280]
[139.01705933 128.96353149]
[125.05924225 123.46994019]
[112.66158295 131.91375732]
[112.66158295 146.91375732]
[112.66158295 161.91375732]
[112.66158295 176.91375732]
[112.66158295 191.91375732]
[112.66158295 206.91375732]
[112.66158295 221.91375732]
[112.66158295 236.91375732]
[112.66158295 251.91375732]
[112.66158295 266.91375732]
[127.32684326 270.38174438]
[140.79676819 277.13879395]
[152.34492493 286.82058716]
[161.34854126 298.90493774]
[167.32206726 312.74017334]
[169.94335938 327.58016968]
[169.07104492 342.62463379]
[164.75218201 357.06222534]
[157.21966553 370.11434937]
[146.87973022 381.07711792]
[134.28997803 389.35934448]
[120.12937927 394.51434326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 115]
[26 114]
[27 113]
[30 56]
[31 55]
[32 54]
[33 53]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[94 104]
[95 103]
[96 102]
[97 101]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
