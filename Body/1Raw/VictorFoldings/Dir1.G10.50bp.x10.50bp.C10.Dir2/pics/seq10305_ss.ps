%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGCCCACGGGGGGGGGGGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGxxxxxxxxxxAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUACCCCCCCCCCAAUAGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[91.89728546 523.77264404]
[78.05134583 517.75659180]
[66.34268188 508.22720337]
[57.64015579 495.89151001]
[52.58955383 481.66500854]
[51.56566238 466.60333252]
[54.64446259 451.82415771]
[61.59748459 438.42422485]
[71.90876770 427.39788818]
[84.81314850 419.56338501]
[99.35303497 415.50207520]
[99.35303497 400.50207520]
[99.35303497 385.50207520]
[99.35303497 370.50207520]
[99.35303497 355.50207520]
[99.35303497 340.50207520]
[99.35303497 325.50207520]
[99.35303497 310.50207520]
[99.35303497 295.50207520]
[99.35303497 280.50207520]
[89.76193237 265.83883667]
[99.01618958 249.95367432]
[98.70413208 234.95690918]
[98.39207458 219.96015930]
[98.08001709 204.96340942]
[97.76795959 189.96665955]
[96.83232880 174.99586487]
[95.27474976 160.07695007]
[92.14481354 156.39198303]
[91.33923340 150.68388367]
[93.97599792 144.50691223]
[93.04036713 129.53611755]
[92.10474396 114.56532288]
[87.71196747 128.90769958]
[76.01940918 138.30364990]
[61.06768799 139.50622559]
[48.02371597 132.09982300]
[41.39512634 118.64389801]
[43.47257233 103.78845215]
[53.53815460 92.66712189]
[68.11347961 89.12312317]
[82.16199493 94.38137817]
[70.86299133 84.51565552]
[59.56398392 74.64993286]
[47.12454224 66.26779175]
[33.73825836 59.49967194]
[20.35197258 52.73155975]
[3.48867607 50.98069000]
[0.50289565 34.29172897]
[15.71310043 26.80266762]
[27.12008858 39.34527588]
[40.50637436 46.11338806]
[53.89265823 52.88150406]
[46.95400238 39.58281708]
[46.35233688 24.59488869]
[52.20267487 10.78280926]
[63.38666534 0.78689331]
[77.76638031 -3.48204017]
[92.59299469 -1.20794284]
[105.03225708 7.17446899]
[112.70626831 20.06281471]
[114.14807892 34.99335861]
[109.08206940 49.11198425]
[98.47665405 59.71977234]
[84.35916138 64.78894043]
[69.42970276 63.35092545]
[80.72871399 73.21665192]
[92.02771759 83.08237457]
[86.84178925 69.00735474]
[76.44086456 58.19898987]
[72.08493805 43.84538651]
[74.72479248 29.07950592]
[83.78421783 17.12430573]
[97.28581238 10.58924866]
[112.28257751 10.90074253]
[125.50116730 17.99079895]
[134.05635071 30.31186867]
[136.08079529 45.17462921]
[131.13262939 59.33498001]
[120.28978729 69.70334625]
[114.52285004 83.55046082]
[126.22247314 74.16329193]
[137.92208862 64.77613068]
[149.62171936 55.38897324]
[161.12351990 45.76044464]
[172.42253113 35.89472198]
[183.72152710 26.02899933]
[195.02053833 16.16327667]
[205.89935303 5.83607149]
[216.33917236 -4.93473673]
[226.77899170 -15.70554543]
[227.96736145 -31.70452309]
[241.29751587 -40.63124847]
[256.54370117 -35.63790131]
[262.01034546 -20.55495262]
[253.50390625 -6.95274591]
[237.54978943 -5.26573277]
[227.10998535 5.50507545]
[216.67016602 16.27588463]
[216.61465454 19.14019203]
[215.38389587 22.15336227]
[212.91589355 24.85351181]
[209.32199097 26.76530075]
[204.88626099 27.46228218]
[193.58724976 37.32800293]
[182.28825378 47.19372940]
[170.98924255 57.05945206]
[169.77946472 61.74047089]
[165.57711792 65.68655396]
[159.00888062 67.08859253]
[147.30924988 76.47575378]
[135.60963440 85.86292267]
[123.91001129 95.25008392]
[117.90705872 108.60442352]
[107.07553101 113.62969971]
[108.01116180 128.60049438]
[108.94679260 143.57127380]
[110.19366455 158.51936340]
[111.75124359 173.43827820]
[114.52529907 176.96900940]
[115.85565948 180.81625366]
[115.82464600 184.47424316]
[114.67436218 187.51904297]
[112.76471710 189.65460205]
[113.07677460 204.65135193]
[113.38882446 219.64810181]
[113.70088196 234.64485168]
[114.01293945 249.64161682]
[122.78601837 259.15408325]
[122.70159912 271.69247437]
[114.35303497 280.50207520]
[114.35303497 295.50207520]
[114.35303497 310.50207520]
[114.35303497 325.50207520]
[114.35303497 340.50207520]
[114.35303497 355.50207520]
[114.35303497 370.50207520]
[114.35303497 385.50207520]
[114.35303497 400.50207520]
[114.35303497 415.50207520]
[128.89292908 419.56338501]
[141.79730225 427.39788818]
[152.10858154 438.42422485]
[159.06161499 451.82415771]
[162.14041138 466.60333252]
[161.11651611 481.66500854]
[156.06591797 495.89151001]
[147.36338806 508.22720337]
[135.65472412 517.75659180]
[121.80879211 523.77264404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[24 126]
[25 125]
[26 124]
[27 119]
[28 118]
[31 117]
[32 116]
[33 115]
[42 68]
[43 67]
[44 66]
[45 53]
[46 52]
[47 51]
[81 113]
[82 112]
[83 111]
[84 110]
[85 107]
[86 106]
[87 105]
[88 104]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
