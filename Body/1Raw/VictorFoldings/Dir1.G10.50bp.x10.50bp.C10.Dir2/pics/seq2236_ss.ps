%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUAAAUGGGGGGGGGGCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACxxxxxxxxxxGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCCUAAAU\
) } def
/len { sequence length } bind def

/coor [
[73.31077576 524.43841553]
[59.46483231 518.42236328]
[47.75617218 508.89294434]
[39.05364609 496.55728149]
[34.00304413 482.33074951]
[32.97915268 467.26907349]
[36.05795288 452.48992920]
[43.01097488 439.08999634]
[53.32225800 428.06365967]
[66.22663879 420.22915649]
[80.76652527 416.16784668]
[80.76652527 401.16784668]
[80.76652527 386.16784668]
[80.76652527 371.16784668]
[80.76652527 356.16784668]
[80.76652527 341.16784668]
[80.76652527 326.16784668]
[80.76652527 311.16784668]
[80.76652527 296.16784668]
[80.76652527 281.16784668]
[66.05924988 275.34710693]
[54.67490005 264.31085205]
[48.36993027 249.72074890]
[48.13278961 233.78993225]
[54.02908707 218.94717407]
[65.18708801 207.46664429]
[79.92649078 201.11947632]
[79.61443329 186.12272644]
[70.08393860 197.70588684]
[55.85012817 202.43861389]
[41.28118134 198.86848450]
[30.84811974 188.09114075]
[27.75271988 173.41400146]
[32.94491577 159.34129333]
[44.83129501 150.19175720]
[59.76407242 148.77326965]
[73.16057587 155.52113342]
[80.90979004 168.36531067]
[83.39490509 153.57260132]
[85.88002777 138.77989197]
[88.36514282 123.98718262]
[69.79713440 103.19131470]
[79.04575348 73.12058258]
[67.95443726 63.02193451]
[56.86312103 52.92328644]
[45.77180481 42.82463455]
[34.68048859 32.72598648]
[23.58917427 22.62733650]
[12.49785900 12.52868652]
[1.40654349 2.43003726]
[-9.68477154 -7.66861200]
[-20.77608681 -17.76726151]
[-36.54935074 -16.77743912]
[-48.34721375 -27.29342461]
[-49.17021561 -43.07627106]
[-38.53008652 -54.76229477]
[-22.73941994 -55.41838455]
[-11.16654396 -44.65529633]
[-10.67743778 -28.85857773]
[0.41387764 -18.75992775]
[11.50519276 -8.66127777]
[22.59650803 1.43737149]
[33.68782425 11.53602123]
[44.77914047 21.63467026]
[55.87045288 31.73332024]
[66.96176910 41.83197021]
[78.05308533 51.93061829]
[89.14440155 62.02927017]
[84.25240326 47.84941101]
[79.36041260 33.66955185]
[71.16066742 21.10913086]
[69.68606567 6.18178844]
[75.26975250 -7.74022675]
[86.65029144 -17.51177979]
[101.25670624 -20.92536736]
[115.78925323 -17.20982742]
[126.96485901 -7.20453596]
[132.25883484 6.83019972]
[130.47521973 21.72377968]
[122.01504517 34.11328888]
[116.82911682 48.18830490]
[111.64318085 62.26332474]
[122.94218445 52.39760208]
[134.24119568 42.53187943]
[145.54019165 32.66615295]
[156.83920288 22.80043221]
[142.37223816 18.83724594]
[136.25546265 5.14107561]
[142.95974731 -8.27728844]
[157.58480835 -11.61010838]
[169.44090271 -2.42136097]
[169.86244202 12.57211876]
[182.12481689 3.93300271]
[194.38719177 -4.70611334]
[206.64955139 -13.34522915]
[218.91192627 -21.98434639]
[225.30473328 -37.08613586]
[241.61068726 -38.83189774]
[251.05563354 -25.42573738]
[243.92340088 -10.65876675]
[227.55104065 -9.72197723]
[215.28866577 -1.08286142]
[203.02630615 7.55625486]
[190.76393127 16.19537163]
[178.50157166 24.83448601]
[166.70492554 34.09943771]
[155.40591431 43.96516037]
[144.10691833 53.83088303]
[132.80790710 63.69660568]
[121.50890350 73.56233215]
[127.45019531 81.40721130]
[130.75979614 90.38842010]
[131.29707336 99.67539215]
[129.17037964 108.45495605]
[124.71487427 116.00248718]
[118.45083618 121.74166107]
[111.02748871 125.28790283]
[103.15785217 126.47230530]
[100.67273712 141.26501465]
[98.18761444 156.05772400]
[95.70249939 170.85041809]
[94.61118317 185.81066895]
[94.92324066 200.80743408]
[108.36766052 205.60832214]
[119.33599091 214.69914246]
[126.51817322 226.96746826]
[129.06544495 240.92300415]
[126.69068146 254.87858582]
[119.70052338 267.15411377]
[108.95600891 276.27893066]
[95.76652527 281.16784668]
[95.76652527 296.16784668]
[95.76652527 311.16784668]
[95.76652527 326.16784668]
[95.76652527 341.16784668]
[95.76652527 356.16784668]
[95.76652527 371.16784668]
[95.76652527 386.16784668]
[95.76652527 401.16784668]
[95.76652527 416.16784668]
[110.30641174 420.22915649]
[123.21079254 428.06365967]
[133.52207947 439.08999634]
[140.47509766 452.48992920]
[143.55389404 467.26907349]
[142.53001404 482.33074951]
[137.47940063 496.55728149]
[128.77688599 508.89294434]
[117.06822205 518.42236328]
[103.22228241 524.43841553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 123]
[28 122]
[38 121]
[39 120]
[40 119]
[41 118]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
