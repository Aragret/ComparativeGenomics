%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAACCUAGGGGGGGGGGUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUxxxxxxxxxxAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCCCCCCCCCCCAACAACUUA\
) } def
/len { sequence length } bind def

/coor [
[84.92317963 438.63092041]
[71.70298004 431.35842896]
[60.81617737 420.91143799]
[53.00504684 408.00219727]
[48.80216599 393.51086426]
[48.49409485 378.42553711]
[52.10183716 363.77471924]
[59.37940979 350.55731201]
[69.83061981 339.67456055]
[82.74288177 331.86840820]
[97.23581696 327.67111206]
[96.92375946 312.67437744]
[96.61170197 297.67761230]
[96.29964447 282.68087769]
[95.98758698 267.68411255]
[95.67553711 252.68736267]
[95.36347961 237.69059753]
[95.05142212 222.69384766]
[94.73936462 207.69709778]
[94.42730713 192.70034790]
[94.11524963 177.70358276]
[93.80319977 162.70683289]
[93.49114227 147.71008301]
[93.17908478 132.71333313]
[92.86702728 117.71657562]
[82.48339081 107.61081696]
[82.18195343 93.12443542]
[92.13621521 82.59548187]
[91.82416534 67.59873199]
[91.51210785 52.60197449]
[76.52353668 51.87855911]
[61.62058258 50.12277985]
[46.87427521 47.34300995]
[32.35488892 43.55249405]
[18.13160706 38.76929855]
[4.27221775 33.01621246]
[-9.15723515 26.32065773]
[-22.09275246 18.71453667]
[-34.47269058 10.23410130]
[-46.23805237 0.91976202]
[-57.33277130 -9.18409252]
[-67.70397186 -20.02931404]
[-77.30223846 -31.56421661]
[-86.08182526 -43.73383331]
[-94.00088501 -56.48017120]
[-101.02169800 -69.74248505]
[-107.11078644 -83.45757294]
[-112.23914337 -97.56007385]
[-116.38233185 -111.98278809]
[-119.52060699 -126.65698242]
[-121.63900757 -141.51272583]
[-122.72743988 -156.47921753]
[-122.78072357 -171.48513794]
[-121.79859161 -186.45898438]
[-119.78574371 -201.32939148]
[-116.75175476 -216.02551270]
[-112.71108246 -230.47727966]
[-107.68299866 -244.61584473]
[-101.69145203 -258.37380981]
[-94.76499939 -271.68566895]
[-86.93664551 -284.48791504]
[-78.24370575 -296.71957397]
[-68.72759247 -308.32232666]
[-58.43366623 -319.24093628]
[-47.41097641 -329.42330933]
[-35.71205139 -338.82095337]
[-23.39264679 -347.38909912]
[-10.51146793 -355.08688354]
[2.87010050 -361.87762451]
[16.68828773 -367.72900391]
[30.87724304 -372.61306763]
[45.36934662 -376.50659180]
[60.09554291 -379.39102173]
[74.98564911 -381.25256348]
[89.96870422 -382.08239746]
[104.97332001 -381.87655640]
[119.92797089 -380.63601685]
[134.76141357 -378.36669922]
[149.40293884 -375.07937622]
[163.78277588 -370.78976440]
[177.83241272 -365.51831055]
[191.48487854 -359.29006958]
[204.67512512 -352.13479614]
[217.34028625 -344.08654785]
[229.42001343 -335.18368530]
[240.85673523 -325.46862793]
[251.59594727 -314.98770142]
[261.58648682 -303.79083252]
[270.78073120 -291.93136597]
[279.13485718 -279.46585083]
[286.60906982 -266.45367432]
[293.16772461 -252.95684814]
[298.77960205 -239.03967285]
[303.41793823 -224.76850891]
[307.06063843 -210.21131897]
[309.69033813 -195.43751526]
[311.29452515 -180.51748657]
[311.86550903 -165.52233887]
[311.40060425 -150.52351379]
[309.90200806 -135.59251404]
[307.37686157 -120.80047607]
[303.83721924 -106.21789551]
[299.29995728 -91.91426849]
[293.78665161 -77.95775604]
[287.32360840 -64.41486359]
[279.94165039 -51.35014343]
[271.67590332 -38.82584381]
[262.56576538 -26.90164948]
[252.65469360 -15.63438988]
[241.98988342 -5.07775736]
[230.62216187 4.71794081]
[218.60571289 13.70602322]
[205.99780273 21.84365654]
[192.85848999 29.09206200]
[179.25042725 35.41669846]
[165.23843384 40.78742218]
[150.88928223 45.17863846]
[136.27137756 48.56942749]
[121.45436859 50.94362640]
[106.50885773 52.28992081]
[106.82091522 67.28667450]
[107.13297272 82.28342438]
[117.51660919 92.38918304]
[117.81804657 106.87556458]
[107.86378479 117.40451813]
[108.17583466 132.40127563]
[108.48789215 147.39802551]
[108.79994965 162.39477539]
[109.11200714 177.39152527]
[109.42406464 192.38829041]
[109.73612213 207.38504028]
[110.04817200 222.38179016]
[110.36022949 237.37854004]
[110.67228699 252.37530518]
[110.98434448 267.37203979]
[111.29640198 282.36880493]
[111.60845947 297.36557007]
[111.92050934 312.36230469]
[112.23256683 327.35906982]
[126.88755798 330.94982910]
[140.11337280 338.21209717]
[151.00823975 348.65069580]
[158.82933044 361.55389404]
[163.04341125 376.04196167]
[163.36312866 391.12707520]
[159.76669312 405.78067017]
[152.49934387 419.00366211]
[142.05653381 429.89450073]
[129.15029907 437.71063232]
[114.66061401 441.91909790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[25 125]
[28 122]
[29 121]
[30 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
