%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUAUUUGGGGGGGGGGAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGxxxxxxxxxxAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCCCCCCCCCCCAUACUCUUU\
) } def
/len { sequence length } bind def

/coor [
[84.98612213 396.71713257]
[71.14018250 390.70111084]
[59.43151855 381.17169189]
[50.72899246 368.83602905]
[45.67839432 354.60949707]
[44.65450287 339.54782104]
[47.73329926 324.76864624]
[54.68632126 311.36871338]
[64.99760437 300.34240723]
[77.90198517 292.50787354]
[92.44187164 288.44656372]
[92.44187164 273.44656372]
[92.44187164 258.44656372]
[92.44187164 243.44657898]
[92.44187164 228.44657898]
[92.44187164 213.44657898]
[92.44187164 198.44657898]
[92.44187164 183.44657898]
[92.44187164 168.44657898]
[92.44187164 153.44657898]
[92.44187164 138.44657898]
[92.44187164 123.44657135]
[92.44187164 108.44657135]
[80.82103729 117.93109894]
[65.87914276 116.61214447]
[56.09949875 105.23854828]
[57.03454590 90.26772308]
[68.15340424 80.19940948]
[83.14330292 80.74993134]
[93.49422455 91.60816956]
[95.36183929 76.72489166]
[97.22944641 61.84160995]
[99.09706116 46.95832825]
[84.37010956 44.07846069]
[69.87402344 40.20030212]
[55.67638016 35.34193039]
[41.84338760 29.52599716]
[28.43953896 22.77962303]
[15.52732849 15.13426208]
[3.16695905 6.62555933]
[-8.58393860 -2.70681190]
[-19.67057419 -12.81933975]
[-30.04125977 -23.66487503]
[-39.64764023 -35.19285202]
[-48.44492340 -47.34951782]
[-56.39209366 -60.07819366]
[-63.45210266 -73.31953430]
[-69.59202576 -87.01179504]
[-74.78323364 -101.09114838]
[-79.00153351 -115.49193573]
[-82.22724152 -130.14701843]
[-84.44533539 -144.98806763]
[-85.64546204 -159.94589233]
[-85.82202911 -174.95074463]
[-84.97421265 -189.93266296]
[-83.10596466 -204.82180786]
[-80.22599792 -219.54873657]
[-76.34774017 -234.04479980]
[-71.48927307 -248.24240112]
[-65.67324829 -262.07534790]
[-58.92678833 -275.47915649]
[-51.28133774 -288.39132690]
[-42.77255249 -300.75164795]
[-33.44010544 -312.50247192]
[-23.32750130 -323.58905029]
[-12.48189640 -333.95965576]
[-0.95385641 -343.56594849]
[11.20286846 -352.36315918]
[23.93159866 -360.31024170]
[37.17298508 -367.37014771]
[50.86529160 -373.50997925]
[64.94467163 -378.70111084]
[79.34548950 -382.91931152]
[94.00059509 -386.14492798]
[108.84166718 -388.36291504]
[123.79949188 -389.56292725]
[138.80435181 -389.73941040]
[153.78625488 -388.89147949]
[168.67538452 -387.02313232]
[183.40229797 -384.14306641]
[197.89833069 -380.26470947]
[212.09591675 -375.40615845]
[225.92883301 -369.59005737]
[239.33258057 -362.84347534]
[252.24468994 -355.19796753]
[264.60494995 -346.68908691]
[276.35571289 -337.35656738]
[287.44223022 -327.24389648]
[297.81277466 -316.39819336]
[307.41897583 -304.87011719]
[316.21609497 -292.71331787]
[324.16311646 -279.98452759]
[331.22293091 -266.74310303]
[337.36267090 -253.05075073]
[342.55371094 -238.97134399]
[346.77178955 -224.57049561]
[349.99731445 -209.91535950]
[352.21520996 -195.07427979]
[353.41513062 -180.11643982]
[353.59149170 -165.11158752]
[352.74349976 -150.12968445]
[350.87503052 -135.24057007]
[347.99487305 -120.51367188]
[344.11642456 -106.01766205]
[339.25775146 -91.82012177]
[333.44155884 -77.98724365]
[326.69491577 -64.58353424]
[319.04928589 -51.67147446]
[310.54034424 -39.31127548]
[301.20773315 -27.56056786]
[291.09497070 -16.47413445]
[280.24923706 -6.10366726]
[268.72106934 3.50248027]
[256.56423950 12.29951954]
[243.83538818 20.24643517]
[230.59390259 27.30617523]
[216.90151978 33.44582367]
[202.82206726 38.63674927]
[188.42118835 42.85475540]
[173.76603699 46.08017731]
[158.92494202 48.29796982]
[143.96710205 49.49779510]
[128.96224976 49.67406082]
[113.98033905 48.82594299]
[112.11273193 63.70922089]
[110.24511719 78.59249878]
[108.37750244 93.47578430]
[107.44187164 108.44657135]
[107.44187164 123.44657135]
[107.44187164 138.44657898]
[107.44187164 153.44657898]
[107.44187164 168.44657898]
[107.44187164 183.44657898]
[107.44187164 198.44657898]
[107.44187164 213.44657898]
[107.44187164 228.44657898]
[107.44187164 243.44657898]
[107.44187164 258.44656372]
[107.44187164 273.44656372]
[107.44187164 288.44656372]
[121.98175812 292.50787354]
[134.88613892 300.34240723]
[145.19743347 311.36871338]
[152.15045166 324.76864624]
[155.22924805 339.54782104]
[154.20535278 354.60949707]
[149.15475464 368.83602905]
[140.45222473 381.17169189]
[128.74356079 390.70111084]
[114.89762878 396.71713257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[30 127]
[31 126]
[32 125]
[33 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
