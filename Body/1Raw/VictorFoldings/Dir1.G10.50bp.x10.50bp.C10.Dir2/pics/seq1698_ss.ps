%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUCCUGGGGGGGGGGCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGxxxxxxxxxxAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUCCCCCCCCCCUUACCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 369.57345581]
[71.19830322 363.55743408]
[59.48964310 354.02801514]
[50.78712082 341.69235229]
[45.73651886 327.46582031]
[44.71262741 312.40414429]
[47.79142761 297.62496948]
[54.74444962 284.22506714]
[65.05573273 273.19873047]
[77.96011353 265.36422729]
[92.50000000 261.30288696]
[92.50000000 246.30290222]
[92.50000000 231.30290222]
[92.50000000 216.30290222]
[92.50000000 201.30290222]
[92.50000000 186.30290222]
[92.50000000 171.30290222]
[92.50000000 156.30290222]
[92.50000000 141.30290222]
[92.50000000 126.30290222]
[77.98545074 125.45288086]
[63.55772400 116.37856293]
[50.17144012 123.14668274]
[36.78515244 129.91479492]
[28.26841736 143.92897034]
[11.88172626 143.28988647]
[4.48230553 128.65498352]
[13.68204403 115.07938385]
[30.01703835 116.52851105]
[43.40332413 109.76039886]
[56.78960800 102.99227905]
[56.24395370 95.51215363]
[42.74220657 88.97741699]
[55.15264130 80.55191040]
[54.60698700 73.07178497]
[40.38020706 68.31797028]
[26.15342903 63.56415176]
[14.83799076 70.94104004]
[1.53471315 70.44027710]
[-8.88429642 62.47042465]
[-12.73320484 50.13418961]
[-26.85800743 45.08543396]
[-40.98281097 40.03667450]
[-56.04016113 45.57343674]
[-69.68180084 37.13037491]
[-71.44303131 21.18429184]
[-59.97278214 9.96765232]
[-44.07005310 12.08490467]
[-35.93405533 25.91187286]
[-21.80925179 30.96063042]
[-7.68444824 36.00938797]
[7.16019678 28.16754723]
[23.41299820 33.56481552]
[30.90724373 49.33737564]
[45.13402176 54.09119034]
[59.36080170 58.84500504]
[73.58758545 54.09119034]
[82.09867096 41.73961639]
[83.55778503 25.98583794]
[97.15050507 19.89590645]
[105.66159058 7.54433393]
[104.10183716 -5.30171728]
[111.49797058 -15.42674732]
[123.42089844 -17.69632721]
[132.18710327 -29.86816406]
[118.36981201 -24.03016663]
[103.47676086 -22.24210167]
[88.67023468 -24.64351273]
[75.10574341 -31.04699135]
[63.84186935 -40.95280457]
[55.75765610 -53.58789444]
[51.48400116 -67.96620941]
[51.35442734 -82.96564484]
[55.37904358 -97.41564941]
[63.24376678 -110.18851471]
[74.33483124 -120.28744507]
[87.78666687 -126.92430115]
[102.54949951 -129.58116150]
[117.47121429 -128.05064392]
[131.38731384 -122.45223236]
[143.21176147 -113.22280121]
[152.02177429 -101.08264160]
[157.12982178 -86.97916412]
[158.13725281 -72.01303864]
[154.96545410 -57.35221481]
[147.86035156 -44.13866043]
[160.79841614 -51.72856903]
[173.73646545 -59.31847763]
[186.67451477 -66.90838623]
[199.36944580 -74.89830017]
[211.80888367 -83.28044891]
[224.24833679 -91.66259003]
[227.53862000 -97.51763153]
[232.55509949 -100.35774231]
[237.38417053 -100.12204742]
[250.16152954 -107.97947693]
[262.93890381 -115.83689880]
[275.71624756 -123.69432831]
[286.04116821 -137.14172363]
[301.82125854 -130.94293213]
[300.23306274 -114.06353760]
[283.57366943 -110.91696930]
[270.79632568 -103.05953979]
[258.01895142 -95.20211792]
[245.24160767 -87.34468842]
[232.63047791 -79.22315216]
[220.19104004 -70.84100342]
[207.75158691 -62.45886230]
[206.73120117 -59.01992798]
[203.95655823 -55.92104721]
[199.61407471 -53.99872971]
[194.26443481 -53.97032928]
[181.32637024 -46.38042450]
[168.38832092 -38.79051590]
[155.45025635 -31.20060539]
[144.35894775 -21.10195732]
[135.59274292 -8.93011951]
[134.80609131 8.57362652]
[118.01316833 16.05542374]
[109.50207520 28.40699577]
[108.65173340 43.27730942]
[94.45024109 50.25070572]
[85.93915558 62.60227966]
[101.66130829 61.65758896]
[115.88312531 66.80070496]
[126.44651794 76.72816467]
[131.95787048 89.45560455]
[131.96345520 102.69874573]
[126.95341492 114.27860260]
[118.20457458 122.47978210]
[107.50000000 126.30290222]
[107.50000000 141.30290222]
[107.50000000 156.30290222]
[107.50000000 171.30290222]
[107.50000000 186.30290222]
[107.50000000 201.30290222]
[107.50000000 216.30290222]
[107.50000000 231.30290222]
[107.50000000 246.30290222]
[107.50000000 261.30288696]
[122.03988647 265.36422729]
[134.94427490 273.19873047]
[145.25555420 284.22506714]
[152.20857239 297.62496948]
[155.28736877 312.40414429]
[154.26348877 327.46582031]
[149.21287537 341.69235229]
[140.51036072 354.02801514]
[128.80169678 363.55743408]
[114.95575714 369.57345581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 31]
[23 30]
[24 29]
[35 56]
[36 55]
[37 54]
[41 51]
[42 50]
[43 49]
[57 123]
[58 122]
[60 120]
[61 119]
[64 117]
[65 116]
[86 115]
[87 114]
[88 113]
[89 112]
[90 108]
[91 107]
[92 106]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
