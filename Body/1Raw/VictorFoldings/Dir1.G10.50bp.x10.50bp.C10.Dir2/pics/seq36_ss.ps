%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUAACCACGGGGGGGGGGUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGxxxxxxxxxxCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCCCCCCCCCCCUAGUAACCAC\
) } def
/len { sequence length } bind def

/coor [
[83.64545441 565.05230713]
[69.62350464 559.49932861]
[57.42354965 550.63299561]
[47.81248093 539.01068115]
[41.39445496 525.36297607]
[38.57291794 510.54779053]
[39.52523422 495.49639893]
[44.19153976 481.15499878]
[52.27850342 468.42501831]
[63.27777863 458.10675049]
[76.49794006 450.84878540]
[91.10794830 447.10733032]
[91.10794830 432.10733032]
[91.10794830 417.10733032]
[91.10794830 402.10733032]
[91.10794830 387.10733032]
[91.10794830 372.10733032]
[91.10794830 357.10733032]
[91.10794830 342.10733032]
[91.10794830 327.10733032]
[91.10794830 312.10733032]
[87.94338989 305.37698364]
[91.26510620 296.80017090]
[91.57308960 281.80331421]
[91.88106537 266.80648804]
[92.18904114 251.80964661]
[92.49701691 236.81280518]
[92.65101624 221.81359863]
[92.65101624 206.81359863]
[92.65101624 191.81359863]
[84.91371918 179.08631897]
[92.65101624 165.28614807]
[92.65101624 150.28614807]
[92.65101624 135.28614807]
[92.65101624 120.28614807]
[92.65101624 105.28614807]
[90.28384399 102.15460205]
[89.33773041 97.98127747]
[90.25155640 93.43809509]
[93.14139557 89.36985016]
[94.06480408 74.39830017]
[87.19173431 60.14798737]
[95.69786072 47.92116928]
[88.82478333 33.67085648]
[97.33091736 21.44404030]
[98.25432587 6.47249079]
[99.17774200 -8.49905872]
[87.23757935 -13.22938538]
[77.13579559 -21.13103485]
[69.69020081 -31.55141640]
[65.49990082 -43.63456726]
[64.89713287 -56.39146042]
[67.92089844 -68.78095245]
[74.31467438 -79.79477692]
[83.54808807 -88.53955841]
[94.86090851 -94.30931854]
[107.32568359 -96.64242554]
[109.16900635 -111.52873230]
[111.01232910 -126.41503906]
[112.85565186 -141.30134583]
[114.69897461 -156.18765259]
[116.54230499 -171.07395935]
[118.38562775 -185.96026611]
[120.22895050 -200.84657288]
[122.07227325 -215.73287964]
[114.49079132 -232.48255920]
[125.53388977 -246.08750916]
[127.07118225 -261.00851440]
[113.02408600 -266.53860474]
[100.99058533 -275.65435791]
[91.86363983 -287.67941284]
[86.32053375 -301.72137451]
[84.77260590 -316.73822021]
[87.33472443 -331.61566162]
[93.81674957 -345.24966431]
[103.73768616 -356.62847900]
[116.36132812 -364.90774536]
[130.75091553 -369.47308350]
[145.83865356 -369.98571777]
[160.50492859 -366.40756226]
[173.66140747 -359.00421143]
[184.33177185 -348.32498169]
[191.72424316 -335.16238403]
[195.29022217 -320.49316406]
[194.76512146 -305.40585327]
[190.18786621 -291.02005005]
[181.89814758 -278.40325928]
[170.51110840 -268.49176025]
[156.87174988 -262.02102661]
[141.99220276 -259.47122192]
[140.45491028 -244.55021667]
[147.85592651 -234.93319702]
[146.65684509 -222.45387268]
[136.95858765 -213.88955688]
[135.11526489 -199.00325012]
[133.27192688 -184.11694336]
[131.42860413 -169.23063660]
[129.58528137 -154.34432983]
[127.74195862 -139.45802307]
[125.89863586 -124.57171631]
[124.05531311 -109.68540955]
[122.21199036 -94.79910278]
[137.51805115 -86.75538635]
[148.61488342 -73.44940186]
[153.80000305 -56.88082123]
[152.26196289 -39.55297470]
[144.20727539 -24.09461212]
[130.83306885 -12.86112499]
[114.14929199 -7.57564545]
[113.22587585 7.39590454]
[112.30246735 22.36745453]
[119.24158478 35.54690170]
[110.66941071 48.84458542]
[117.60853577 62.02403259]
[109.03635406 75.32171631]
[108.11294556 90.29326630]
[107.65101624 105.28614807]
[107.65101624 120.28614807]
[107.65101624 135.28614807]
[107.65101624 150.28614807]
[107.65101624 165.28614807]
[115.38832092 179.08631897]
[107.65101624 191.81359863]
[107.65101624 206.81359863]
[107.65101624 221.81359863]
[110.79593658 230.45681763]
[107.49385834 237.12078857]
[107.18588257 252.11761475]
[106.87789917 267.11447144]
[106.56992340 282.11129761]
[106.26194763 297.10812378]
[106.10794830 312.10733032]
[106.10794830 327.10733032]
[106.10794830 342.10733032]
[106.10794830 357.10733032]
[106.10794830 372.10733032]
[106.10794830 387.10733032]
[106.10794830 402.10733032]
[106.10794830 417.10733032]
[106.10794830 432.10733032]
[106.10794830 447.10733032]
[120.71796417 450.84878540]
[133.93812561 458.10675049]
[144.93739319 468.42501831]
[153.02436829 481.15499878]
[157.69067383 495.49639893]
[158.64299011 510.54779053]
[155.82144165 525.36297607]
[149.40342712 539.01068115]
[139.79235840 550.63299561]
[127.59239197 559.49932861]
[113.57044983 565.05230713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 127]
[28 125]
[29 124]
[30 123]
[32 121]
[33 120]
[34 119]
[35 118]
[36 117]
[40 116]
[41 115]
[43 113]
[45 111]
[46 110]
[47 109]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[67 91]
[68 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
