%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACAAUCCGGGGGGGGGGUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCxxxxxxxxxxCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCCACAAACC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 393.20571899]
[71.01555634 387.65270996]
[58.81560135 378.78637695]
[49.20452881 367.16406250]
[42.78650284 353.51635742]
[39.96496582 338.70117188]
[40.91728210 323.64981079]
[45.58358765 309.30838013]
[53.67055511 296.57843018]
[64.66983032 286.26016235]
[77.88998413 279.00216675]
[92.50000000 275.26074219]
[92.50000000 260.26074219]
[92.50000000 245.26074219]
[92.50000000 230.26074219]
[92.50000000 215.26074219]
[92.50000000 200.26074219]
[92.50000000 185.26074219]
[92.50000000 170.26074219]
[92.50000000 155.26074219]
[92.50000000 140.26074219]
[92.50000000 125.26074219]
[85.91209412 129.83874512]
[77.82514191 132.86207581]
[63.78316498 138.13682556]
[49.74118805 143.41156006]
[43.43846130 157.90470886]
[28.70314789 163.61839294]
[14.27745342 157.16278076]
[8.71988392 142.36788940]
[15.32764721 128.01124573]
[30.18047523 122.61040497]
[44.46644974 129.36958313]
[58.50842285 124.09484863]
[72.55039978 118.82010651]
[71.55237579 111.38681030]
[68.55828857 89.08690643]
[53.62227249 87.70288086]
[38.95848083 95.04489899]
[25.41903687 85.79203796]
[26.93215942 69.46284485]
[41.94128036 62.85540009]
[55.00629807 72.76686859]
[69.94231415 74.15089417]
[88.40757751 69.10605621]
[103.74449921 73.91678619]
[110.01390839 60.28981018]
[110.76937866 51.12329102]
[116.55447388 46.44944763]
[123.10234833 32.95406342]
[129.65022278 19.45868111]
[136.19808960 5.96329594]
[142.74595642 -7.53208780]
[136.88952637 -19.70220947]
[139.09922791 -32.82845688]
[148.34272766 -42.13364029]
[161.06991577 -44.36317062]
[167.89349365 -57.72126770]
[163.25596619 -72.59175110]
[170.36633301 -86.04155731]
[184.57164001 -90.37107849]
[191.39521790 -103.72917938]
[198.21879578 -117.08728027]
[188.29942322 -144.32092285]
[189.83671570 -159.24194336]
[191.37400818 -174.16294861]
[192.91130066 -189.08396912]
[194.44859314 -204.00498962]
[195.98588562 -218.92599487]
[197.52317810 -233.84701538]
[183.77206421 -240.18621826]
[172.82608032 -250.64874268]
[165.87257385 -264.09967041]
[163.66580200 -279.07995605]
[166.44512939 -293.96463013]
[173.90910339 -307.13916016]
[185.24806213 -317.17443848]
[199.23204041 -322.98190308]
[214.34417725 -323.93164062]
[228.94522095 -319.92059326]
[241.45133972 -311.38388062]
[250.50598145 -299.24746704]
[255.12696838 -284.82785034]
[254.81303406 -269.68917847]
[249.59823608 -255.47351074]
[240.04824829 -243.72293091]
[227.19897461 -235.71200562]
[212.44419861 -232.30972290]
[210.90690613 -217.38870239]
[209.36961365 -202.46769714]
[207.83232117 -187.54667664]
[206.29502869 -172.62565613]
[204.75773621 -157.70465088]
[203.22044373 -142.78363037]
[215.55172729 -134.24316406]
[228.97918701 -140.92924500]
[242.40663147 -147.61532593]
[242.15365601 -162.87634277]
[248.55502319 -176.73220825]
[260.33975220 -186.43183899]
[275.16799927 -190.04934692]
[290.09555054 -186.86648560]
[302.15856934 -177.51521301]
[308.96194458 -163.85223389]
[309.15481567 -148.59033203]
[302.69891357 -134.75978088]
[290.87606812 -125.10664368]
[276.03372192 -121.54754639]
[261.11880493 -124.78916931]
[249.09271240 -134.18786621]
[235.66525269 -127.50179291]
[222.23780823 -120.81571960]
[211.57690430 -110.26370239]
[204.75332642 -96.90560150]
[197.92974854 -83.54750824]
[202.74792480 -69.50041199]
[196.01814270 -55.85619736]
[181.25158691 -50.89769363]
[174.42800903 -37.53959274]
[180.29501343 -21.80805206]
[172.84938049 -6.38423729]
[156.24134827 -0.98421735]
[149.69346619 12.51116657]
[143.14559937 26.00655174]
[136.59773254 39.50193405]
[130.04986572 52.99731827]
[123.64088440 66.55921173]
[117.37147522 80.18619537]
[126.09307098 96.32482147]
[122.16857147 114.24463654]
[107.50000000 125.26074219]
[107.50000000 140.26074219]
[107.50000000 155.26074219]
[107.50000000 170.26074219]
[107.50000000 185.26074219]
[107.50000000 200.26074219]
[107.50000000 215.26074219]
[107.50000000 230.26074219]
[107.50000000 245.26074219]
[107.50000000 260.26074219]
[107.50000000 275.26074219]
[122.11001587 279.00216675]
[135.33016968 286.26016235]
[146.32945251 296.57843018]
[154.41641235 309.30838013]
[159.08271790 323.64981079]
[160.03503418 338.70117188]
[157.21350098 353.51635742]
[150.79547119 367.16406250]
[141.18440247 378.78637695]
[128.98443604 387.65270996]
[114.96250153 393.20571899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 35]
[25 34]
[26 33]
[37 44]
[38 43]
[46 128]
[47 127]
[49 126]
[50 125]
[51 124]
[52 123]
[53 122]
[57 119]
[58 118]
[61 115]
[62 114]
[63 113]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[95 112]
[96 111]
[97 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
