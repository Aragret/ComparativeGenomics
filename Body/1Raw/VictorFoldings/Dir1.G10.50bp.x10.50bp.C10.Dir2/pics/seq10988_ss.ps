%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUGCUCCGGGGGGGGGGGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGxxxxxxxxxxACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCCCCCCCCCCCUAUGUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[35.25453186 518.88580322]
[21.40859413 512.86975098]
[9.69993210 503.34036255]
[0.99740821 491.00469971]
[-4.05319357 476.77816772]
[-5.07708502 461.71649170]
[-1.99828601 446.93731689]
[4.95473576 433.53738403]
[15.26601982 422.51107788]
[28.17040062 414.67654419]
[42.71028900 410.61523438]
[42.71028900 395.61523438]
[42.71028900 380.61523438]
[42.71028900 365.61523438]
[42.71028900 350.61523438]
[42.71028900 335.61523438]
[42.71028900 320.61523438]
[42.71028900 305.61523438]
[42.71028900 290.61523438]
[42.71028900 275.61523438]
[42.71028900 260.61523438]
[30.09915924 252.49369812]
[16.44291878 258.69909668]
[13.46466637 273.92767334]
[2.08116913 284.47262573]
[-13.33038521 286.27917480]
[-26.84394073 278.65267944]
[-33.26325989 264.52566528]
[-30.11997986 249.33030701]
[-18.62276077 238.90946960]
[-3.19251561 237.27021790]
[10.23751163 245.04286194]
[23.89375305 238.83746338]
[10.09645653 232.95234680]
[6.90330124 218.29615784]
[17.00192261 207.20481873]
[31.89244843 209.01374817]
[39.04172516 222.20048523]
[43.94327927 208.02392578]
[48.84482956 193.84736633]
[34.32138062 197.59829712]
[22.20661163 188.75338745]
[21.35543823 173.77755737]
[32.38999939 163.61692810]
[47.24492264 165.69808960]
[55.06239319 178.49923706]
[61.40952301 164.90827942]
[67.75665283 151.31733704]
[74.10378265 137.72637939]
[80.45091248 124.13542938]
[70.83835602 110.69038391]
[69.48351288 94.21813965]
[76.77003479 79.38314056]
[90.63459778 70.38623047]
[89.69896698 55.41543961]
[88.76334381 40.44464874]
[87.82771301 25.47385788]
[73.16664124 13.55529308]
[71.82813263 -4.97322083]
[84.19386292 -18.40773582]
[82.63628387 -33.32664871]
[81.07870483 -48.24555969]
[66.19569397 -50.77511597]
[52.54754639 -57.22729874]
[41.14704514 -67.12331390]
[32.84017563 -79.72880554]
[28.24337196 -94.10837555]
[27.69774246 -109.19495392]
[31.24377823 -123.86901855]
[38.61833954 -137.04165649]
[49.27418137 -147.73538208]
[62.42057419 -155.15663147]
[77.08197021 -158.75469971]
[92.17038727 -158.26260376]
[106.56616974 -153.71684265]
[119.20106506 -145.45474243]
[129.13746643 -134.08943176]
[135.63803101 -120.46425629]
[138.22036743 -105.59031677]
[136.69285583 -90.57135010]
[131.16885376 -76.52187347]
[122.05827332 -64.48443604]
[110.03717804 -55.35230255]
[95.99761200 -49.80314255]
[97.55519867 -34.88422775]
[99.11277771 -19.96531677]
[109.38394928 -14.82786179]
[115.94301605 -5.25465441]
[117.04795837 6.41808844]
[112.30541992 17.27245140]
[102.79850769 24.53822899]
[103.73413086 39.50902176]
[104.66976166 54.47981262]
[105.60539246 69.45060730]
[112.61986542 71.61998749]
[118.92911530 75.37532806]
[124.18055725 80.50675201]
[128.08071899 86.72750854]
[142.78868103 83.78202820]
[157.49664307 80.83654785]
[165.35679626 76.05430603]
[172.54107666 77.98612976]
[187.30712891 75.34725952]
[202.07318115 72.70839691]
[216.83923340 70.06953430]
[224.46928406 56.41975403]
[239.10641479 50.91627502]
[253.83943176 56.15766525]
[261.71185303 69.66910553]
[259.00656128 85.07089996]
[247.00091553 95.09080505]
[231.36360168 94.99771118]
[219.47810364 84.83558655]
[204.71205139 87.47445679]
[189.94598389 90.11331940]
[175.17993164 92.75218201]
[160.44212341 95.54450989]
[145.73416138 98.48999023]
[131.02619934 101.43547058]
[125.30087280 118.01532745]
[111.50622559 128.84948730]
[94.04186249 130.48255920]
[87.69473267 144.07351685]
[81.34760284 157.66445923]
[75.00047302 171.25541687]
[68.65334320 184.84635925]
[63.02138519 198.74891663]
[58.11983490 212.92547607]
[53.21828461 227.10203552]
[57.71028900 260.61523438]
[57.71028900 275.61523438]
[57.71028900 290.61523438]
[57.71028900 305.61523438]
[57.71028900 320.61523438]
[57.71028900 335.61523438]
[57.71028900 350.61523438]
[57.71028900 365.61523438]
[57.71028900 380.61523438]
[57.71028900 395.61523438]
[57.71028900 410.61523438]
[72.25017548 414.67654419]
[85.15455627 422.51107788]
[95.46584320 433.53738403]
[102.41886139 446.93731689]
[105.49765778 461.71649170]
[104.47377014 476.77816772]
[99.42316437 491.00469971]
[90.72064209 503.34036255]
[79.01197815 512.86975098]
[65.16604614 518.88580322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 33]
[23 32]
[38 129]
[39 128]
[40 127]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[54 94]
[55 93]
[56 92]
[57 91]
[60 86]
[61 85]
[62 84]
[98 119]
[99 118]
[100 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
