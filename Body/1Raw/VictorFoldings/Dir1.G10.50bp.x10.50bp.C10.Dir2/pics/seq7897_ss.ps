%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUAUUUACCGGGGGGGGGGCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGxxxxxxxxxxUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCCCCCCCCCCCAUAUUUACC\
) } def
/len { sequence length } bind def

/coor [
[62.25338745 343.40209961]
[50.36911392 334.12698364]
[41.05040741 322.27688599]
[34.83904266 308.54071045]
[32.09614182 293.71707153]
[32.98117065 278.66781616]
[37.44267654 264.26788330]
[45.22127533 251.35444641]
[55.86472702 240.67828369]
[68.75423431 232.86009216]
[83.14041901 228.35443115]
[82.20479584 213.38363647]
[81.26916504 198.41284180]
[80.33353424 183.44206238]
[79.39791107 168.47126770]
[78.46228027 153.50047302]
[77.52664948 138.52967834]
[66.02484894 128.90115356]
[51.12294388 130.61384583]
[36.22104263 132.32653809]
[21.31914139 134.03923035]
[6.41723824 135.75190735]
[-6.40924311 145.01431274]
[-19.93671989 138.78079224]
[-34.83862305 140.49348450]
[-49.74052429 142.20617676]
[-52.96902084 156.99993896]
[-60.82825089 169.94255066]
[-72.46569824 179.63009644]
[-86.61902618 185.01173401]
[-101.75298309 185.50372314]
[-116.22595978 181.05265808]
[-128.46801758 172.14140320]
[-137.15124512 159.73655701]
[-141.33374023 145.18370056]
[-140.56182861 130.06143188]
[-134.91923523 116.01010895]
[-125.01802826 104.55389404]
[-111.93222046 96.93548584]
[-97.08124542 93.98126984]
[-82.07604218 96.01168823]
[-68.54425812 102.80651093]
[-57.95372391 113.62866974]
[-51.45321655 127.30427551]
[-36.55131149 125.59158325]
[-21.64941025 123.87889862]
[-9.88881207 114.73900604]
[4.70454884 120.85001373]
[19.60645103 119.13732147]
[34.50835419 117.42462921]
[49.41025543 115.71194458]
[64.31215668 113.99925232]
[63.90815353 92.96495056]
[74.45267487 75.77493286]
[91.81934357 67.36724091]
[91.50728607 52.37049103]
[91.19523621 37.37373734]
[81.28818512 21.88727951]
[90.26102448 6.83775711]
[89.63704681 -8.14925861]
[89.01306915 -23.13627434]
[88.38909149 -38.12329102]
[87.76511383 -53.11030579]
[87.14113617 -68.09732056]
[72.47969055 -71.73305511]
[59.43712616 -79.35330963]
[49.07076263 -90.34035492]
[42.22094345 -103.80351257]
[39.44295883 -118.65139008]
[40.96200180 -133.68034363]
[46.65493774 -147.67201233]
[56.06025696 -159.49220276]
[68.41551971 -168.18266296]
[82.71913910 -173.03890991]
[97.81158447 -173.66728210]
[112.46937561 -170.01681519]
[125.50427246 -162.38346863]
[135.85958862 -151.38601685]
[142.69587708 -137.91598511]
[145.45895386 -123.06531525]
[143.92480469 -108.03791046]
[138.21781921 -94.05194855]
[128.80062866 -82.24122620]
[116.43664551 -73.56317902]
[102.12815094 -68.72129822]
[102.75212860 -53.73428345]
[103.37610626 -38.74726868]
[104.00008392 -23.76025200]
[104.62406158 -8.77323627]
[105.24803925 6.21377993]
[113.95584106 14.66845703]
[114.56176758 27.19250679]
[106.19198608 37.06167984]
[106.50404358 52.05843353]
[106.81610107 67.05519104]
[112.60076904 65.87076569]
[118.86984253 65.73228455]
[125.43241119 66.75390625]
[132.07501221 69.01506805]
[146.09172058 63.67355347]
[160.10844421 58.33204269]
[174.12515259 52.99052811]
[184.05105591 39.93647385]
[200.28280640 42.27367401]
[206.12255859 57.59782028]
[195.56288147 70.14473724]
[179.46665955 67.00724030]
[165.44995117 72.34875488]
[151.43324280 77.69026947]
[137.41651917 83.03177643]
[137.80644226 90.52163696]
[138.58628845 105.50135040]
[138.97621155 112.99121094]
[153.47181702 116.84836578]
[167.96740723 120.70552826]
[182.46299744 124.56268311]
[196.00878906 116.42098236]
[211.32374573 120.32325745]
[219.32177734 133.95436096]
[215.25779724 149.22720337]
[201.54289246 157.08067322]
[186.31387329 152.85545349]
[178.60585022 139.05828857]
[164.11024475 135.20112610]
[149.61465454 131.34396362]
[135.11904907 127.48680115]
[127.45548248 133.54014587]
[118.88389587 137.61851501]
[109.88600159 139.62533569]
[100.94043732 139.57649231]
[92.49744415 137.59405518]
[93.43307495 152.56484985]
[94.36869812 167.53562927]
[95.30432892 182.50642395]
[96.23995972 197.47721863]
[97.17558289 212.44801331]
[98.11121368 227.41880798]
[112.94644928 230.09822083]
[126.70908356 236.25073242]
[138.59896851 245.51861572]
[147.92486572 257.36306763]
[154.14456177 271.09548950]
[156.89643860 285.91744995]
[156.02053833 300.96722412]
[151.56776428 315.36987305]
[143.79699707 328.28802490]
[133.16001892 338.97064209]
[120.27525330 346.79663086]
[105.89179993 351.31103516]
[90.84589386 352.25134277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[24 46]
[25 45]
[26 44]
[55 95]
[56 94]
[57 93]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[99 110]
[100 109]
[101 108]
[102 107]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
