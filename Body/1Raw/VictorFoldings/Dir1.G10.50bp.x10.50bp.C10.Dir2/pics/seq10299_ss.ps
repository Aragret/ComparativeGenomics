%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUUCACCGGGGGGGGGGGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUxxxxxxxxxxCACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCCCCCCCCCCCAAGCCUCACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 413.53717041]
[71.19830322 407.52114868]
[59.48964310 397.99172974]
[50.78712082 385.65603638]
[45.73651886 371.42953491]
[44.71262741 356.36785889]
[47.79142761 341.58868408]
[54.74444962 328.18875122]
[65.05573273 317.16241455]
[77.96011353 309.32791138]
[92.50000000 305.26660156]
[92.50000000 290.26660156]
[92.50000000 275.26660156]
[92.50000000 260.26660156]
[92.50000000 245.26660156]
[92.50000000 230.26660156]
[92.50000000 215.26660156]
[92.50000000 200.26660156]
[92.50000000 185.26660156]
[92.50000000 170.26660156]
[92.50000000 155.26660156]
[92.50000000 140.26660156]
[75.30139160 132.67457581]
[63.30604172 118.19898224]
[59.04103088 99.88939667]
[63.40486145 81.60311890]
[75.47821045 67.19251251]
[68.84970856 53.73654938]
[53.69147491 50.99172592]
[43.17889786 39.97632217]
[41.19186783 25.05936050]
[48.28466797 11.98915768]
[41.65616608 -1.46680760]
[35.02766800 -14.92277336]
[28.39916992 -28.37873840]
[21.77067184 -41.83470535]
[15.14217377 -55.29066849]
[1.01390648 -50.20420837]
[-13.59503555 -46.73162460]
[-28.50092888 -44.91659164]
[-43.51631546 -44.78193283]
[-58.45236588 -46.32934189]
[-73.12123871 -49.53936005]
[-87.33845520 -54.37162018]
[-100.92522430 -60.76534271]
[-113.71067810 -68.64012909]
[-125.53401947 -77.89694214]
[-136.24656677 -88.41936493]
[-145.71357727 -100.07507324]
[-153.81602478 -112.71748352]
[-160.45199585 -126.18759155]
[-165.53804016 -140.31600952]
[-169.01017761 -154.92506409]
[-170.82476807 -169.83100891]
[-170.95898438 -184.84640503]
[-169.41111755 -199.78239441]
[-166.20066833 -214.45117188]
[-161.36798096 -228.66824341]
[-154.97384644 -242.25482178]
[-147.09867859 -255.04003906]
[-137.84152222 -266.86309814]
[-127.31877136 -277.57534790]
[-115.66278076 -287.04202271]
[-103.02013397 -295.14407349]
[-89.54981995 -301.77963257]
[-75.42124939 -306.86526489]
[-60.81209946 -310.33697510]
[-45.90609741 -312.15112305]
[-30.89070320 -312.28488159]
[-15.95474720 -310.73657227]
[-1.28606725 -307.52566528]
[12.93086243 -302.69256592]
[26.51724815 -296.29803467]
[39.30222702 -288.42248535]
[51.12501907 -279.16494751]
[61.83693314 -268.64187622]
[71.30326080 -256.98562622]
[79.40494537 -244.34272766]
[86.04010773 -230.87222290]
[91.12529755 -216.74349976]
[94.59657288 -202.13424683]
[96.41027069 -187.22817993]
[96.54357910 -172.21278381]
[94.99482727 -157.27687073]
[91.78349304 -142.60829163]
[86.94996643 -128.39151001]
[80.55501556 -114.80531311]
[72.67908478 -102.02056885]
[63.42121124 -90.19805145]
[52.89782715 -79.48645782]
[41.24127197 -70.02047729]
[28.59813881 -61.91916656]
[35.22663879 -48.46320343]
[41.85513687 -35.00723648]
[48.48363495 -21.55127144]
[55.11213303 -8.09530640]
[61.74063110 5.36065912]
[76.42572021 7.70293140]
[87.04126740 18.36942482]
[89.36768341 33.41738892]
[82.30567932 47.10805130]
[88.93417358 60.56401443]
[99.54413605 59.04341888]
[110.18531036 60.32748032]
[120.12901306 64.32826996]
[128.69430542 70.77182007]
[135.29463196 79.21688080]
[139.47804260 89.08514404]
[140.95802307 99.70084381]
[155.72407532 102.33970642]
[170.49014282 104.97857666]
[185.25619507 107.61743927]
[195.09439087 95.82314301]
[209.51719666 90.54314423]
[224.64494324 93.19773865]
[236.40834045 103.07286072]
[241.64309692 117.51213837]
[238.94110107 132.63148499]
[229.02915955 144.36387634]
[214.57353210 149.55335999]
[199.46273804 146.80397034]
[187.76147461 136.85530090]
[182.61732483 122.38349152]
[167.85127258 119.74462891]
[153.08522034 117.10576630]
[138.31916809 114.46690369]
[131.25119019 126.47663879]
[120.56585693 135.42167664]
[107.50000000 140.26660156]
[107.50000000 155.26660156]
[107.50000000 170.26660156]
[107.50000000 185.26660156]
[107.50000000 200.26660156]
[107.50000000 215.26660156]
[107.50000000 230.26660156]
[107.50000000 245.26660156]
[107.50000000 260.26660156]
[107.50000000 275.26660156]
[107.50000000 290.26660156]
[107.50000000 305.26660156]
[122.03988647 309.32791138]
[134.94427490 317.16241455]
[145.25555420 328.18875122]
[152.20857239 341.58868408]
[155.28736877 356.36785889]
[154.26348877 371.42953491]
[149.21287537 385.65603638]
[140.51036072 397.99172974]
[128.80169678 407.52114868]
[114.95575714 413.53717041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 102]
[28 101]
[32 97]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
