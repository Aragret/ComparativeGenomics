%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACAGACAGGGGGGGGGGUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAxxxxxxxxxxACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCCCCCCCCCCCACACACACA\
) } def
/len { sequence length } bind def

/coor [
[97.77059174 256.33486938]
[93.21645355 242.04293823]
[89.57187653 227.49243164]
[86.85134125 212.74121094]
[85.06565094 197.84786987]
[84.22190857 182.87162781]
[84.32347107 167.87196350]
[85.36991882 152.90850830]
[87.35711670 138.04072571]
[90.27714539 123.32769012]
[94.11875916 108.82672119]
[79.41079712 111.77220154]
[64.70283508 114.71768951]
[50.02630997 117.81600952]
[35.38280869 121.06683350]
[20.73930931 124.31765747]
[6.09580755 127.56848907]
[-8.54769421 130.81930542]
[-23.19119453 134.07014465]
[-37.83469772 137.32096863]
[-52.47819901 140.57179260]
[-53.12132263 155.64656067]
[-57.64509583 170.04093933]
[-65.74108124 182.77346802]
[-76.85728455 192.97604370]
[-90.23577881 199.95301819]
[-104.96440125 203.22871399]
[-120.03892517 202.57975769]
[-134.43154907 198.05043030]
[-147.16094971 189.94952393]
[-157.35923767 178.82939148]
[-164.33105469 165.44819641]
[-167.60105896 150.71832275]
[-166.94628906 135.64404297]
[-162.41139221 121.25317383]
[-154.30558777 108.52689362]
[-143.18150330 98.33290863]
[-129.79762268 91.36626434]
[-115.06647491 88.10194397]
[-99.99246216 88.76253510]
[-85.60334015 93.30297852]
[-72.88019562 101.41370392]
[-62.69050598 112.54171753]
[-55.72902298 125.92829132]
[-41.08552170 122.67745972]
[-26.44202042 119.42663574]
[-11.79852009 116.17581177]
[2.84498167 112.92498779]
[17.48848343 109.67415619]
[32.13198471 106.42333221]
[46.77548599 103.17250824]
[52.66179657 98.62311554]
[61.75735474 100.00972748]
[76.46531677 97.06423950]
[91.17327881 94.11875916]
[94.13326263 87.22756958]
[100.05322266 73.44519043]
[103.01320648 66.55400085]
[95.02328491 53.85906982]
[79.76168823 48.91304016]
[74.24829102 33.84711838]
[82.71250153 20.21858978]
[98.66129303 18.48209572]
[109.86013031 29.96972466]
[107.71821594 45.86915207]
[115.70812988 58.56408310]
[123.57949829 45.79530334]
[132.23974609 33.54785538]
[141.65447998 21.87041092]
[151.78628540 10.80936909]
[162.59489441 0.40869105]
[174.03733826 -9.29029369]
[186.06817627 -18.24904060]
[198.63957214 -26.43194962]
[211.70156860 -33.80649948]
[225.20228577 -40.34338760]
[239.08804321 -46.01663208]
[253.30366516 -50.80369568]
[267.79266357 -54.68554688]
[282.49746704 -57.64675903]
[297.35964966 -59.67557144]
[312.32009888 -60.76391602]
[327.31939697 -60.90747070]
[342.29797363 -60.10566711]
[357.19622803 -58.36168289]
[371.95501709 -55.68245697]
[386.51568604 -52.07863235]
[400.82031250 -47.56453323]
[414.81210327 -42.15809631]
[428.43545532 -35.88080597]
[441.63623047 -28.75760841]
[454.36193848 -20.81681252]
[466.56204224 -12.08997345]
[478.18801880 -2.61177087]
[489.19372559 7.58012867]
[499.53536987 18.44522285]
[509.17187500 29.94033623]
[518.06494141 42.01978302]
[526.17926025 54.63556671]
[533.48254395 67.73754883]
[539.94580078 81.27365875]
[545.54333496 95.19011688]
[550.25286865 109.43161011]
[554.05578613 123.94154358]
[556.93682861 138.66224670]
[558.88464355 153.53524780]
[559.89154053 168.50141907]
[559.95336914 183.50129700]
[559.07000732 198.47525024]
[557.24487305 213.36381531]
[554.48529053 228.10778809]
[550.80218506 242.64859009]
[546.21026611 256.92843628]
[540.72772217 270.89056396]
[534.37628174 284.47952271]
[527.18127441 297.64129639]
[519.17132568 310.32354736]
[510.37814331 322.47595215]
[500.83676147 334.05014038]
[490.58505249 345.00015259]
[479.66378784 355.28244019]
[468.11636353 364.85620117]
[455.98864746 373.68334961]
[443.32885742 381.72885132]
[430.18728638 388.96066284]
[416.61614990 395.35006714]
[402.66943359 400.87173462]
[388.40249634 405.50363159]
[373.87207031 409.22741699]
[359.13586426 412.02825928]
[344.25250244 413.89505005]
[329.28106689 414.82034302]
[314.28106689 414.80050659]
[299.31213379 413.83557129]
[284.43374634 411.92938232]
[269.70501709 409.08953857]
[255.18450928 405.32730103]
[240.92988586 400.65765381]
[226.99780273 395.09909058]
[213.44364929 388.67376709]
[200.32127380 381.40719604]
[187.68281555 373.32824707]
[175.57852173 364.46902466]
[164.05647278 354.86471558]
[153.16246033 344.55352783]
[142.93978882 333.57641602]
[133.42907715 321.97702026]
[124.66811371 309.80139160]
[116.69171906 297.09796143]
[109.53159332 283.91720581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 55]
[12 54]
[13 53]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
