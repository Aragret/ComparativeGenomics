%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAUAGCCGGGGGGGGGGGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUxxxxxxxxxxGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCCCCCCCCCCCUUCAUAGGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 380.30624390]
[71.19830322 374.29022217]
[59.48964310 364.76080322]
[50.78712082 352.42514038]
[45.73651886 338.19860840]
[44.71262741 323.13693237]
[47.79142761 308.35778809]
[54.74444962 294.95785522]
[65.05573273 283.93151855]
[77.96011353 276.09701538]
[92.50000000 272.03570557]
[92.50000000 257.03570557]
[92.50000000 242.03569031]
[92.50000000 227.03569031]
[92.50000000 212.03569031]
[92.50000000 197.03569031]
[92.50000000 182.03569031]
[92.50000000 167.03569031]
[92.50000000 152.03569031]
[92.50000000 137.03569031]
[92.50000000 122.03569794]
[80.32816315 113.26948547]
[66.10138702 118.02330017]
[51.87460327 122.77711487]
[37.64782715 127.53092957]
[33.94995880 142.50856018]
[22.72591019 153.09271240]
[7.55723190 155.90602112]
[-6.71580696 150.05078125]
[-15.53873062 137.39535522]
[-16.09617615 121.97807312]
[-8.21026516 108.71851349]
[5.60263729 101.84775543]
[20.93488312 103.55824280]
[32.89401245 113.30415344]
[47.12078857 108.55033875]
[61.34756851 103.79652405]
[75.57434845 99.04270935]
[83.16425323 86.10465240]
[80.37193298 71.36684418]
[77.57960510 56.62903976]
[74.78728485 41.89123535]
[71.99495697 27.15342903]
[57.02410126 28.30953217]
[42.01692581 27.81167221]
[27.15560532 25.66589165]
[12.62054443 21.89823723]
[-1.41181421 16.55444527]
[-14.77113152 9.69938660]
[-27.29523659 1.41627359]
[-38.83209991 -8.19434452]
[-49.24167252 -19.01580238]
[-58.39759445 -30.91673851]
[-66.18872070 -43.75268555]
[-72.52046967 -57.36782837]
[-77.31598663 -71.59689331]
[-80.51705933 -86.26714325]
[-82.08481598 -101.20050812]
[-82.00023651 -116.21570587]
[-80.26435089 -131.13046265]
[-76.89822388 -145.76371765]
[-71.94271851 -159.93785095]
[-65.45799255 -173.48080444]
[-57.52276611 -186.22817993]
[-48.23335648 -198.02520752]
[-37.70253754 -208.72871399]
[-26.05814171 -218.20875549]
[-13.44152069 -226.35026550]
[-0.00582801 -233.05439758]
[14.08583927 -238.23976135]
[28.66242027 -241.84344482]
[43.54697037 -243.82167053]
[58.55879974 -244.15043640]
[73.51568604 -242.82575989]
[88.23606110 -239.86370850]
[102.54123688 -235.30024719]
[116.25755310 -229.19078064]
[129.21852112 -221.60943604]
[141.26679993 -212.64828491]
[152.25611877 -202.41609192]
[162.05310059 -191.03704834]
[170.53880310 -178.64932251]
[177.61022949 -165.40325928]
[183.18153381 -151.45967102]
[187.18508911 -136.98780823]
[189.57229614 -122.16335297]
[190.31416321 -107.16625977]
[189.40168762 -92.17858124]
[186.84596252 -77.38224792]
[182.67800903 -62.95687485]
[176.94841003 -49.07757950]
[169.72671509 -35.91283798]
[161.10060120 -23.62246323]
[151.17477417 -12.35564327]
[140.06973267 -2.24914956]
[127.92028046 6.57433367]
[114.87388611 14.00769806]
[101.08893585 19.96071053]
[86.73276520 24.36110497]
[89.52508545 39.09891129]
[92.31741333 53.83671570]
[95.10974121 68.57452393]
[97.90206146 83.31233215]
[103.50502014 82.38227081]
[109.45787811 83.39803314]
[115.06995392 86.47232819]
[119.62110901 91.47032166]
[122.45044708 98.00503540]
[137.09394836 101.25585938]
[151.73745728 104.50668335]
[160.85989380 103.30959320]
[166.65028381 107.98046112]
[181.22297668 111.53522491]
[195.79568481 115.08998108]
[210.36839294 118.64474487]
[222.86460876 109.24376678]
[238.47727966 110.12624359]
[249.83456421 120.87548828]
[251.57389832 136.41603088]
[242.87402344 149.41012573]
[227.84275818 153.72233582]
[213.57740784 147.31657410]
[206.81362915 133.21745300]
[192.24092102 129.66268921]
[177.66822815 126.10792542]
[163.09552002 122.55316162]
[148.48663330 119.15018463]
[133.84312439 115.89936066]
[119.19962311 112.64853668]
[107.50000000 122.03569794]
[107.50000000 137.03569031]
[107.50000000 152.03569031]
[107.50000000 167.03569031]
[107.50000000 182.03569031]
[107.50000000 197.03569031]
[107.50000000 212.03569031]
[107.50000000 227.03569031]
[107.50000000 242.03569031]
[107.50000000 257.03570557]
[107.50000000 272.03570557]
[122.03988647 276.09701538]
[134.94427490 283.93151855]
[145.25555420 294.95785522]
[152.20857239 308.35778809]
[155.28736877 323.13693237]
[154.26348877 338.19860840]
[149.21287537 352.42514038]
[140.51036072 364.76080322]
[128.80169678 374.29022217]
[114.95575714 380.30624390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 38]
[23 37]
[24 36]
[25 35]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[108 129]
[109 128]
[110 127]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
