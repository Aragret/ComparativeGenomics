%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCAAUAGGGGGGGGGGCAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUAxxxxxxxxxxAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACCCCCCCCCCCUCAUCAUUA\
) } def
/len { sequence length } bind def

/coor [
[13.22036076 320.93008423]
[2.53042054 316.42663574]
[-7.92673731 311.40631104]
[-18.12614059 305.88110352]
[-28.04342651 299.86416626]
[-37.65491486 293.36993408]
[-46.93764877 286.41387939]
[-55.86946106 279.01263428]
[-64.42901611 271.18383789]
[-72.59587097 262.94622803]
[-80.35053253 254.31945801]
[-92.05015564 263.70663452]
[-103.74977875 273.09378052]
[-109.67147827 287.76498413]
[-124.44052124 289.69494629]
[-136.14013672 299.08209229]
[-147.83976746 308.46926880]
[-159.53938293 317.85644531]
[-171.23901367 327.24359131]
[-176.67738342 342.71472168]
[-192.84271240 345.47418213]
[-203.10546875 332.68325806]
[-196.90823364 317.50015259]
[-180.62617493 315.54397583]
[-168.92654419 306.15679932]
[-157.22692871 296.76965332]
[-145.52729797 287.38247681]
[-133.82768250 277.99533081]
[-128.74281311 263.99554443]
[-113.13694000 261.39416504]
[-101.43731689 252.00700378]
[-89.73769379 242.61984253]
[-106.00818634 217.90435791]
[-119.07713318 191.35655212]
[-128.74143982 163.38897705]
[-134.85090637 134.43629456]
[-137.31060791 104.94843292]
[-136.08229065 75.38366699]
[-131.18504333 46.20146942]
[-122.69499969 17.85534096]
[-110.74408722 -9.21418858]
[-123.83724213 -16.53329468]
[-136.93038940 -23.85239983]
[-150.02354431 -31.17150497]
[-162.80996704 -22.75924492]
[-178.04228210 -21.26424217]
[-192.22023010 -27.03003883]
[-202.08581543 -38.73169708]
[-205.37200928 -53.68026352]
[-201.32365417 -68.44065857]
[-190.87103271 -79.62106323]
[-176.41609192 -84.65229797]
[-161.28047180 -82.37821960]
[-148.94221497 -73.32138824]
[-142.23657227 -59.56301498]
[-142.70445251 -44.26465988]
[-129.61129761 -36.94555283]
[-116.51813507 -29.62644768]
[-103.42498016 -22.30734253]
[-97.20672607 -32.09964371]
[-90.51749420 -41.57645798]
[-83.37326050 -50.71515274]
[-75.79108429 -59.49390411]
[-67.78907013 -67.89173889]
[-59.38634109 -75.88861084]
[-50.60295486 -83.46541595]
[-41.45989227 -90.60406494]
[-31.97898674 -97.28749847]
[-22.18288422 -103.49976349]
[-12.09497738 -109.22601318]
[-1.73936093 -114.45258331]
[8.85923481 -119.16699219]
[19.67549706 -123.35797119]
[30.68359375 -127.01551819]
[41.85723495 -130.13088989]
[53.16973877 -132.69665527]
[64.59408569 -134.70669556]
[76.10298157 -136.15618896]
[87.66896057 -137.04167175]
[99.26438141 -137.36105347]
[110.86156464 -137.11355591]
[122.43280029 -136.29975891]
[133.95046997 -134.92163086]
[145.38705444 -132.98245239]
[156.71524048 -130.48686218]
[167.90797424 -127.44079590]
[178.93853760 -123.85155487]
[189.78056335 -119.72769165]
[200.40817261 -115.07907104]
[210.79598999 -109.91678619]
[220.91918945 -104.25317383]
[230.75361633 -98.10174561]
[240.27575684 -91.47720337]
[249.46289062 -84.39537048]
[258.29309082 -76.87314606]
[266.74520874 -68.92851257]
[274.79913330 -60.58043671]
[282.43557739 -51.84885025]
[289.63632202 -42.75461197]
[296.38415527 -33.31944275]
[302.66299438 -23.56587219]
[308.45779419 -13.51719570]
[313.75476074 -3.19741130]
[318.54125977 7.36883402]
[322.80578613 18.15630531]
[326.53820801 29.13924026]
[329.72961426 40.29140854]
[332.37234497 51.58617401]
[334.46014404 62.99656296]
[335.98797607 74.49533081]
[336.95220947 86.05500031]
[337.35052490 97.64798737]
[337.18200684 109.24658203]
[336.44705200 120.82309723]
[335.14739990 132.34988403]
[333.28613281 143.79940796]
[330.86773682 155.14431763]
[327.89797974 166.35754395]
[324.38394165 177.41229248]
[320.33401489 188.28215027]
[315.75787354 198.94117737]
[310.66644287 209.36390686]
[305.07189941 219.52543640]
[298.98757935 229.40151978]
[292.42803955 238.96856689]
[285.40893555 248.20370483]
[277.94702148 257.08489990]
[270.06011963 265.59094238]
[261.76708984 273.70153809]
[253.08770752 281.39724731]
[244.04270935 288.65975952]
[234.65371704 295.47171021]
[224.94313049 301.81680298]
[214.93414307 307.67993164]
[204.65068054 313.04705811]
[194.11726379 317.90536499]
[183.35908508 322.24325562]
[172.40182495 326.05041504]
[161.27165222 329.31765747]
[149.99514771 332.03726196]
[138.59924316 334.20269775]
[127.11114502 335.80880737]
[115.55830383 336.85174561]
[103.96830750 337.32901001]
[92.36882782 337.23950195]
[80.78758240 336.58337402]
[69.25221252 335.36224365]
[57.79027939 333.57901001]
[46.42915344 331.23791504]
[35.19596863 328.34457397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[41 59]
[42 58]
[43 57]
[44 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
