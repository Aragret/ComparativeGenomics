%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAAACCCGGGGGGGGGGACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAxxxxxxxxxxAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCCACAAACCC\
) } def
/len { sequence length } bind def

/coor [
[81.25499725 507.91433716]
[67.40905762 501.89831543]
[55.70040131 492.36889648]
[46.99787521 480.03323364]
[41.94727325 465.80670166]
[40.92338181 450.74502563]
[44.00218201 435.96588135]
[50.95520401 422.56594849]
[61.26648712 411.53961182]
[74.17086792 403.70510864]
[88.71075439 399.64379883]
[88.71075439 384.64379883]
[88.71075439 369.64379883]
[88.71075439 354.64379883]
[88.71075439 339.64379883]
[88.71075439 324.64379883]
[88.71075439 309.64379883]
[88.71075439 294.64379883]
[88.71075439 279.64379883]
[88.71075439 264.64379883]
[75.52127838 259.75488281]
[64.77675629 250.63006592]
[57.78660202 238.35453796]
[55.41183472 224.39895630]
[57.95911407 210.44342041]
[65.14128876 198.17509460]
[76.10962677 189.08427429]
[89.55403900 184.28338623]
[89.86609650 169.28662109]
[90.17815399 154.28987122]
[87.15332031 147.49310303]
[90.65592957 138.98526001]
[91.27990723 123.99823761]
[91.90388489 109.01122284]
[82.66703033 120.82987213]
[69.27068329 127.57804871]
[54.27569199 127.96578217]
[40.54850388 121.91894531]
[30.71319771 110.59345245]
[26.64989471 96.15428162]
[29.13533211 81.36163330]
[37.69439697 69.04325104]
[50.69093704 61.55392838]
[65.64053345 60.32532120]
[79.68543243 65.59228516]
[90.14080048 76.34799194]
[95.00783539 90.53491211]
[99.31542206 76.16672516]
[103.62300873 61.79854202]
[107.93058777 47.43035507]
[97.50460052 34.15064240]
[97.02895355 17.43970871]
[106.49316406 3.86051202]
[122.02166748 -1.37120652]
[126.02941132 -15.82589531]
[129.88656616 -30.32149124]
[133.59272766 -44.85642624]
[137.29888916 -59.39136505]
[141.00505066 -73.92630005]
[144.71121216 -88.46123505]
[130.82696533 -94.20651245]
[117.90171051 -101.86932373]
[106.19860077 -111.29365540]
[95.95590210 -122.28765106]
[87.38213348 -134.62747192]
[80.65184784 -148.06190491]
[75.90206909 -162.31744385]
[73.22949219 -177.10386658]
[72.68852997 -192.12013245]
[74.29019928 -207.06051636]
[78.00188446 -221.62088013]
[83.74802399 -235.50477600]
[91.41162872 -248.42956543]
[100.83669281 -260.13208008]
[111.83131409 -270.37411499]
[124.17166901 -278.94711304]
[137.60652161 -285.67654419]
[151.86235046 -290.42544556]
[166.64894104 -293.09710693]
[181.66522217 -293.63714600]
[196.60552979 -292.03454590]
[211.16566467 -288.32196045]
[225.04920959 -282.57498169]
[237.97351074 -274.91055298]
[249.67544556 -265.48477173]
[259.91677856 -254.48951721]
[268.48901367 -242.14863586]
[275.21765137 -228.71336365]
[279.96566772 -214.45724487]
[282.63641357 -199.67050171]
[283.17550659 -184.65417480]
[281.57199097 -169.71397400]
[277.85852051 -155.15406799]
[272.11065674 -141.27087402]
[264.44543457 -128.34704590]
[255.01893616 -116.64569855]
[244.02304077 -106.40503693]
[231.68162537 -97.83355713]
[218.24594116 -91.10577393]
[203.98951721 -86.35864258]
[189.20260620 -83.68881226]
[174.18624878 -83.15063477]
[159.24615479 -84.75507355]
[155.53999329 -70.22013855]
[151.83383179 -55.68520355]
[148.12767029 -41.15026474]
[144.42150879 -26.61532974]
[145.82551575 -19.30955315]
[140.48410034 -11.81815434]
[136.47636414 2.63653374]
[145.74096680 12.29898834]
[149.03181458 25.38645363]
[145.38121033 38.49078751]
[135.64366150 48.14444351]
[122.29877472 51.73794174]
[117.99118805 66.10612488]
[113.68360901 80.47431183]
[109.37602234 94.84249115]
[106.89089966 109.63520050]
[106.26692200 124.62221527]
[105.64294434 139.60923767]
[105.17490387 154.60192871]
[104.86284637 169.59867859]
[104.55079651 184.59544373]
[119.29019165 190.94259644]
[130.44819641 202.42312622]
[136.34449768 217.26588440]
[136.10734558 233.19670105]
[129.80238342 247.78680420]
[118.41802979 258.82305908]
[103.71075439 264.64379883]
[103.71075439 279.64379883]
[103.71075439 294.64379883]
[103.71075439 309.64379883]
[103.71075439 324.64379883]
[103.71075439 339.64379883]
[103.71075439 354.64379883]
[103.71075439 369.64379883]
[103.71075439 384.64379883]
[103.71075439 399.64379883]
[118.25064087 403.70510864]
[131.15502930 411.53961182]
[141.46630859 422.56594849]
[148.41932678 435.96588135]
[151.49812317 450.74502563]
[150.47424316 465.80670166]
[145.42362976 480.03323364]
[136.72111511 492.36889648]
[125.01245117 501.89831543]
[111.16651154 507.91433716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 124]
[29 123]
[30 122]
[32 121]
[33 120]
[34 119]
[47 118]
[48 117]
[49 116]
[50 115]
[54 110]
[55 109]
[56 107]
[57 106]
[58 105]
[59 104]
[60 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
