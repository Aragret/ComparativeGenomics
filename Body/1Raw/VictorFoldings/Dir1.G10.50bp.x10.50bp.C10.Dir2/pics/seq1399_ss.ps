%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAACCUGGGGGGGGGGCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUxxxxxxxxxxCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCCCCCCCCCCCUAUACCU\
) } def
/len { sequence length } bind def

/coor [
[83.57931519 374.04754639]
[70.35911560 366.77508545]
[59.47231293 356.32809448]
[51.66118240 343.41882324]
[47.45830154 328.92752075]
[47.15022659 313.84219360]
[50.75796890 299.19134521]
[58.03554153 285.97396851]
[68.48674774 275.09118652]
[81.39900970 267.28506470]
[95.89194489 263.08776855]
[95.57989502 248.09101868]
[95.26783752 233.09426880]
[94.95578003 218.09750366]
[94.64372253 203.10075378]
[94.33166504 188.10400391]
[94.01960754 173.10725403]
[93.70755768 158.11048889]
[93.39550018 143.11373901]
[93.08344269 128.11698914]
[82.23831940 125.57923126]
[72.45841217 118.76599121]
[65.44130707 108.17819977]
[62.63560486 94.98699951]
[47.86954880 97.62586975]
[33.10349274 100.26473236]
[18.33743858 102.90359497]
[3.57138252 105.54245758]
[-1.57275724 120.01427460]
[-13.27402115 129.96293640]
[-28.38482666 132.71232605]
[-42.84044647 127.52284241]
[-52.75238800 115.79045868]
[-55.45439148 100.67110443]
[-50.21962738 86.23182678]
[-38.45622635 76.35670471]
[-23.32847977 73.70211029]
[-8.90567875 78.98210907]
[0.93251812 90.77640533]
[15.69857407 88.13754272]
[30.46462822 85.49867249]
[45.23068619 82.85980988]
[59.99673843 80.22094727]
[63.39971924 65.61205292]
[51.31972885 56.71970367]
[39.23974228 47.82735443]
[27.15975380 38.93500519]
[14.27128887 40.09316635]
[4.38196898 32.38470840]
[2.48552299 20.39676476]
[-9.40685654 11.25503063]
[-25.72608566 9.63798618]
[-32.23785019 -5.41289186]
[-22.24340630 -18.41455078]
[-6.02418184 -15.99199867]
[-0.26512259 -0.63734889]
[11.62725735 8.50438499]
[29.09793472 9.83680820]
[36.05210114 26.85501671]
[48.13209152 35.74736786]
[60.21207809 44.63971710]
[72.29206848 53.53206635]
[87.22637177 52.12976074]
[97.43985748 41.14409637]
[95.40494537 27.79056740]
[101.36433411 15.88621235]
[112.93049622 9.69765759]
[125.75386810 11.29697418]
[136.19367981 0.52616543]
[146.63349915 -10.24464321]
[132.11254883 -6.48406696]
[117.11726379 -6.10783815]
[102.42599487 -9.13548470]
[88.80130005 -15.40985489]
[76.95037842 -24.60527229]
[67.48836517 -36.24444199]
[60.90638733 -49.72322464]
[57.54609299 -64.34199524]
[57.58189392 -79.34194946]
[61.01194000 -93.94451141]
[67.65818787 -107.39172363]
[77.17565155 -118.98558807]
[89.07033539 -128.12432861]
[102.72482300 -134.33358765]
[117.43038177 -137.29107666]
[132.42369080 -136.84326172]
[146.92652893 -133.01341248]
[160.18609619 -126.00030518]
[171.51417542 -116.16796875]
[180.32273865 -104.02674866]
[186.15460205 -90.20685577]
[188.70703125 -75.42562103]
[187.84754944 -60.45026016]
[183.62078857 -46.05809402]
[176.24610901 -32.99615860]
[166.10481262 -21.94113159]
[177.21949768 -33.20054626]
[191.59277344 -29.29434013]
[206.00498962 -33.45222855]
[220.41720581 -37.61011505]
[234.82942200 -41.76800156]
[249.24163818 -45.92588806]
[254.39836121 -60.56104279]
[267.19165039 -69.34234619]
[282.70223999 -68.89320374]
[294.96594238 -59.38632202]
[299.26718140 -44.47729111]
[293.95196533 -29.89893913]
[281.06417847 -21.25693893]
[265.55938721 -21.87431526]
[253.39952087 -31.51367378]
[238.98730469 -27.35578537]
[224.57508850 -23.19789886]
[210.16287231 -19.04001236]
[195.75065613 -14.88212395]
[185.66682434 -3.92011023]
[170.26271057 -7.52891541]
[157.40429688 0.19516936]
[146.96449280 10.96597767]
[136.52467346 21.73678589]
[137.52287292 38.49570847]
[125.88543701 51.05970764]
[108.42552185 51.35757828]
[98.21204376 62.34324265]
[115.33596039 67.16282654]
[127.70191956 78.96273041]
[132.87384033 94.52168274]
[130.25959778 110.00224304]
[121.10967255 121.89300537]
[108.08019257 127.80493164]
[108.39225006 142.80168152]
[108.70430756 157.79843140]
[109.01636505 172.79519653]
[109.32842255 187.79194641]
[109.64048004 202.78869629]
[109.95252991 217.78544617]
[110.26458740 232.78221130]
[110.57664490 247.77896118]
[110.88870239 262.77572632]
[125.54369354 266.36648560]
[138.76950073 273.62875366]
[149.66436768 284.06732178]
[157.48547363 296.97055054]
[161.69953918 311.45861816]
[162.01925659 326.54370117]
[158.42283630 341.19732666]
[151.15547180 354.42031860]
[140.71266174 365.31115723]
[127.80644226 373.12725830]
[113.31674957 377.33575439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[44 62]
[45 61]
[46 60]
[47 59]
[50 57]
[51 56]
[63 124]
[64 123]
[68 120]
[69 119]
[70 118]
[96 117]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
