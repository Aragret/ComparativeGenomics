%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCGCAUAGGGGGGGGGGAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUxxxxxxxxxxAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCCCCCCCCCCCUCCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[65.69422913 358.62109375]
[55.13072968 347.88052368]
[47.22252655 335.05834961]
[42.36629105 320.79772949]
[40.80561447 305.81402588]
[42.61877441 290.85873413]
[47.71482849 276.68206787]
[55.83816147 263.99511719]
[66.58130646 253.43420410]
[79.40538788 245.52909851]
[93.66716766 240.67633057]
[92.10958862 225.75741577]
[90.55200195 210.83850098]
[88.99442291 195.91958618]
[87.43684387 181.00067139]
[85.87926483 166.08177185]
[84.32167816 151.16285706]
[82.76409912 136.24394226]
[81.20652008 121.32502747]
[87.23324585 90.80470276]
[82.03782654 76.73318481]
[76.84241486 62.66166306]
[71.64699554 48.59014511]
[57.22330093 37.19116211]
[60.78583145 20.03574371]
[55.29879761 6.07535362]
[29.54886818 -1.10009778]
[19.76500702 -29.11128044]
[4.80475760 -30.20259094]
[-10.15549088 -31.29390144]
[-25.11573982 -32.38521194]
[-40.07598877 -33.47652435]
[-46.86817551 -19.87745667]
[-58.35075378 -9.91658974]
[-72.77271271 -5.11288452]
[-87.93480682 -6.19886971]
[-101.52492523 -13.00894070]
[-111.47068024 -24.50461197]
[-116.25540924 -38.93287659]
[-115.14947510 -54.09352875]
[-108.32153320 -67.67467499]
[-96.81278992 -77.60530090]
[-82.37824249 -82.37104797]
[-67.21906281 -81.24517059]
[-53.64690399 -74.39936829]
[-43.73143005 -62.87757492]
[-38.98467636 -48.43677139]
[-24.02442932 -47.34546280]
[-9.06418037 -46.25415039]
[5.89606810 -45.16284180]
[20.85631752 -44.07152939]
[6.10020971 -46.76546860]
[-3.91926455 -57.92835999]
[-5.00911903 -72.88871002]
[3.28673315 -85.38586426]
[17.49661255 -90.18996429]
[31.67391396 -85.29056549]
[39.88566971 -72.73799133]
[38.69488525 -57.78413010]
[41.48720932 -72.52193451]
[44.27953720 -87.25974274]
[30.14845657 -92.38895416]
[17.02322197 -99.71864319]
[5.24380636 -109.05895996]
[-4.88467550 -120.16796875]
[-13.09987164 -132.75791931]
[-19.18898773 -146.50268555]
[-22.99430084 -161.04626465]
[-24.41724586 -176.01194763]
[-23.42096519 -191.01206970]
[-20.03126335 -205.65809631]
[-14.33594131 -219.57064819]
[-6.48252296 -232.38938904]
[3.32556939 -243.78225708]
[14.83428288 -253.45416260]
[27.74551392 -261.15457153]
[41.72483063 -266.68402100]
[56.41013718 -269.89929199]
[71.42104340 -270.71710205]
[86.36873627 -269.11627197]
[100.86602783 -265.13827515]
[114.53741455 -258.88610840]
[127.02876282 -250.52175903]
[138.01652527 -240.26187134]
[147.21609497 -228.37220764]
[154.38916016 -215.16073608]
[159.34994507 -200.96965027]
[161.96994019 -186.16654968]
[162.18128967 -171.13487244]
[159.97851562 -156.26396179]
[155.41867065 -141.93901062]
[148.61987305 -128.53108215]
[139.75822449 -116.38747406]
[129.06326294 -105.82272339]
[116.81201172 -97.11048889]
[103.32180786 -90.47644043]
[88.94208527 -86.09240723]
[74.04531097 -84.07196045]
[59.01734161 -84.46741486]
[56.22501755 -69.72961426]
[53.43269348 -54.99180603]
[66.42778778 -50.88596725]
[76.34789276 -42.19137573]
[81.74950409 -30.63777924]
[82.03686523 -18.32421494]
[77.51051331 -7.34028816]
[69.25918579 0.58832216]
[74.74622345 14.54871178]
[85.73873138 19.69381332]
[90.40388489 31.33234024]
[85.71851349 43.39472961]
[90.91393280 57.46624756]
[96.10935211 71.53776550]
[101.30476379 85.60928345]
[112.18358612 95.93649292]
[126.50618744 100.39331055]
[140.82878113 104.85012054]
[154.70152283 97.27895355]
[169.84089661 101.81493378]
[177.26496887 115.76694489]
[172.56918335 130.85751343]
[158.53945923 138.13365173]
[143.49938965 133.27859497]
[136.37196350 119.17272186]
[122.04936981 114.71590424]
[107.72677612 110.25908661]
[96.12543488 119.76744843]
[97.68301392 134.68635559]
[99.24059296 149.60527039]
[100.79817200 164.52418518]
[102.35575867 179.44309998]
[103.91333771 194.36201477]
[105.47091675 209.28091431]
[107.02849579 224.19982910]
[108.58608246 239.11874390]
[123.54266357 240.92103577]
[137.72303772 246.00679016]
[150.41590881 254.12089539]
[160.98461914 264.85635376]
[168.89903259 277.67468262]
[173.76217651 291.93292236]
[175.33010864 306.91589355]
[173.52420044 321.87203979]
[168.43501282 336.05117798]
[160.31784058 348.74209595]
[149.57980347 359.30819702]
[136.75955200 367.21951294]
[122.50013733 372.07919312]
[107.51678467 373.64352417]
[92.56107330 371.83398438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[20 114]
[21 113]
[22 112]
[23 111]
[25 108]
[26 107]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[59 101]
[60 100]
[61 99]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
