%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAGCCAUGGGGGGGGGGUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGxxxxxxxxxxUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGACCCCCCCCCCUAACAGCUAU\
) } def
/len { sequence length } bind def

/coor [
[107.35586548 434.73187256]
[93.50992584 428.71585083]
[81.80126190 419.18643188]
[73.09873962 406.85076904]
[68.04814148 392.62423706]
[67.02424622 377.56256104]
[70.10304260 362.78341675]
[77.05606842 349.38348389]
[87.36735535 338.35714722]
[100.27173615 330.52264404]
[114.81162262 326.46133423]
[114.81162262 311.46133423]
[114.81162262 296.46133423]
[114.81162262 281.46133423]
[114.81162262 266.46133423]
[114.81162262 251.46133423]
[114.81162262 236.46133423]
[114.81162262 221.46133423]
[114.81162262 206.46133423]
[114.81162262 191.46133423]
[114.81162262 176.46133423]
[114.81162262 161.46133423]
[102.82479095 152.44380188]
[88.41257477 156.60168457]
[74.00035858 160.75956726]
[70.98536682 175.76518250]
[61.33327103 187.64355469]
[47.26204300 193.66511536]
[32.00515366 192.44615173]
[19.06851959 184.26678467]
[11.42488670 171.00656128]
[10.83070755 155.71258545]
[17.42251778 141.89930725]
[29.68556786 132.74092102]
[44.80189896 130.34193420]
[59.29788971 135.25364685]
[69.84246826 146.34735107]
[84.25468445 142.18946838]
[98.66690063 138.03158569]
[70.21366119 122.09515381]
[65.08911133 90.73878479]
[50.96430969 85.69002533]
[36.83950424 80.64126587]
[21.78215218 86.17803192]
[8.14051437 77.73497009]
[6.37928629 61.78888321]
[17.84953308 50.57224274]
[33.75226212 52.68949509]
[41.88825989 66.51646423]
[56.01306534 71.56522369]
[70.13787079 76.61397552]
[81.53888702 66.86632538]
[78.74656677 52.12852097]
[75.95423889 37.39071274]
[60.91344833 37.51044846]
[46.09302139 34.94241333]
[31.96938324 29.76915932]
[18.99654198 22.15698433]
[7.59152603 12.35058975]
[-1.87904286 0.66521001]
[-9.11072445 -12.52351856]
[-13.87104988 -26.79163170]
[-16.00699615 -41.68046951]
[-15.44989777 -56.71141815]
[-12.21766663 -71.40129852]
[-6.41420412 -85.27787781]
[1.77393234 -97.89509583]
[12.08352757 -108.84735870]
[24.18317223 -117.78259277]
[37.68391037 -124.41356659]
[52.15175247 -128.52713013]
[67.12161255 -129.99102783]
[82.11227417 -128.75823975]
[96.64185333 -124.86835480]
[110.24327850 -118.44643402]
[122.47932434 -109.69892120]
[132.95664978 -98.90700531]
[141.33843994 -86.41760254]
[147.35528564 -72.63219452]
[150.81375122 -57.99392700]
[151.60264587 -42.97336197]
[149.69664001 -28.05334473]
[145.15699768 -13.71349430]
[138.12962341 -0.41477561]
[128.84045410 11.41531181]
[117.58806610 21.39647865]
[104.73419952 29.20787239]
[90.69204712 34.59838867]
[93.48436737 49.33619690]
[96.27669525 64.07400513]
[118.91678619 68.47633362]
[134.64894104 85.89622498]
[136.80332947 109.67950439]
[150.04591370 102.63437653]
[163.28851318 95.58924103]
[176.53109741 88.54410553]
[189.77368164 81.49897003]
[203.01626587 74.45383453]
[207.39321899 59.26772690]
[221.26660156 51.69773483]
[236.40557861 56.23500443]
[243.82847595 70.18764496]
[239.13140869 85.27780914]
[225.10105896 92.55277252]
[210.06140137 87.69641876]
[196.81881714 94.74155426]
[183.57623291 101.78668976]
[170.33363342 108.83182526]
[157.09104919 115.87696075]
[143.84846497 122.92209625]
[145.56115723 137.82398987]
[160.05676270 141.68115234]
[174.55235291 145.53831482]
[189.04794312 149.39547729]
[199.83250427 138.45979309]
[214.64428711 134.39697266]
[229.49900818 138.29986572]
[240.40083313 149.11863708]
[244.41720581 163.94308472]
[240.46777344 178.78550720]
[229.61486816 189.65336609]
[214.77790833 193.62326050]
[199.94793701 189.62730408]
[189.11415100 178.74040222]
[185.19079590 163.89106750]
[170.69519043 160.03390503]
[156.19960022 156.17675781]
[141.70399475 152.31959534]
[129.81161499 161.46133423]
[129.81161499 176.46133423]
[129.81161499 191.46133423]
[129.81161499 206.46133423]
[129.81161499 221.46133423]
[129.81161499 236.46133423]
[129.81161499 251.46133423]
[129.81161499 266.46133423]
[129.81161499 281.46133423]
[129.81161499 296.46133423]
[129.81161499 311.46133423]
[129.81161499 326.46133423]
[144.35150146 330.52264404]
[157.25588989 338.35714722]
[167.56716919 349.38348389]
[174.52018738 362.78341675]
[177.59899902 377.56256104]
[176.57510376 392.62423706]
[171.52450562 406.85076904]
[162.82197571 419.18643188]
[151.11331177 428.71585083]
[137.26737976 434.73187256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 39]
[24 38]
[25 37]
[41 51]
[42 50]
[43 49]
[52 90]
[53 89]
[54 88]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[111 128]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
