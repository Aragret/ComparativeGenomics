%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUAAAGGGGGGGGGGGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCxxxxxxxxxxUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACCCCCCCCCCCACUAUUAAAG\
) } def
/len { sequence length } bind def

/coor [
[87.70906067 567.89044189]
[73.86312103 561.87438965]
[62.15445709 552.34497070]
[53.45193481 540.00933838]
[48.40133286 525.78277588]
[47.37744141 510.72113037]
[50.45624161 495.94195557]
[57.40926361 482.54202271]
[67.72054291 471.51571655]
[80.62492371 463.68118286]
[95.16481781 459.61987305]
[95.16481781 444.61987305]
[95.16481781 429.61987305]
[95.16481781 414.61987305]
[95.16481781 399.61987305]
[95.16481781 384.61987305]
[95.16481781 369.61987305]
[95.16481781 354.61987305]
[95.16481781 339.61987305]
[95.16481781 324.61987305]
[95.16481781 309.61987305]
[81.68174744 303.24237061]
[72.26601410 291.59533691]
[68.82682800 276.95523071]
[72.09846497 262.21356201]
[81.48431396 250.30589294]
[95.16481781 243.62716675]
[95.16481781 228.62716675]
[95.16481781 213.62716675]
[95.16481781 198.62716675]
[94.85276031 183.63041687]
[94.22878265 168.64340210]
[85.52098083 160.18872070]
[84.91505432 147.66467285]
[93.28483582 137.79550171]
[92.97277832 122.79874420]
[92.66072083 107.80199432]
[90.32962036 92.98423767]
[86.02203369 78.61605072]
[81.71444702 64.24786377]
[77.40686798 49.87968063]
[72.79385376 44.99832535]
[71.57250214 39.36453629]
[73.23236847 34.82357025]
[69.52621460 20.28863525]
[61.66878510 7.51127720]
[50.36978149 -2.35444617]
[34.88562775 -5.60277176]
[30.38753319 -19.80194092]
[19.08852768 -29.66766357]
[7.78952312 -39.53338623]
[-3.50948167 -49.39910889]
[-14.80848598 -59.26483154]
[-30.71634865 -65.12796021]
[-29.48609161 -82.03720856]
[-12.89709091 -85.53598022]
[-4.94276333 -70.56383514]
[6.35624123 -60.69811630]
[17.65524673 -50.83238983]
[28.95425034 -40.96666718]
[40.25325394 -31.10094452]
[54.92922592 -28.55828285]
[60.23550415 -13.65345097]
[71.53450775 -3.78772783]
[67.20206451 -18.14843369]
[65.79177856 -33.08198929]
[67.35923767 -47.99986649]
[71.84266663 -62.31415939]
[79.06536865 -75.46073914]
[88.74270630 -86.92150116]
[100.49330139 -96.24478149]
[113.85405731 -103.06315613]
[128.29843140 -107.10791016]
[143.25717163 -108.21964264]
[158.14076233 -106.35454559]
[172.36265564 -101.58610535]
[185.36235046 -94.10226440]
[196.62754822 -84.19794464]
[205.71426392 -72.26348877]
[212.26441956 -58.76921082]
[216.01988220 -44.24693298]
[216.83261108 -29.26896667]
[214.67060852 -14.42559242]
[209.61907959 -0.30178446]
[201.87707520 12.54584217]
[191.74974060 23.61096573]
[179.63616943 32.45751190]
[166.01374817 38.73683929]
[151.41935730 42.20148468]
[136.42814636 42.71490479]
[121.63092041 40.25686264]
[107.61082458 34.92423630]
[94.92039490 26.92717934]
[84.06114960 16.58247375]
[87.76731110 31.11740875]
[91.77504730 45.57209778]
[96.08263397 59.94028091]
[100.39022064 74.30846405]
[104.69779968 88.67665100]
[109.30095673 74.40041351]
[119.22824860 63.15546036]
[132.82356262 56.81769943]
[147.81892395 56.44441605]
[161.71275330 62.09787750]
[172.18724060 72.83496094]
[177.49502563 86.86448669]
[176.75062561 101.84600067]
[170.07824707 115.28026581]
[158.59098816 124.92613220]
[144.20516968 129.17446899]
[129.32067871 127.31653595]
[116.42058563 119.66229248]
[107.65747833 107.48993683]
[107.96953583 122.48668671]
[108.28158569 137.48344421]
[118.18863678 152.96989441]
[109.21579742 168.01942444]
[109.83977509 183.00643921]
[113.10369110 188.87622070]
[112.89518738 194.63711548]
[110.16481781 198.62716675]
[110.16481781 213.62716675]
[110.16481781 228.62716675]
[110.16481781 243.62716675]
[123.84531403 250.30589294]
[133.23115540 262.21356201]
[136.50280762 276.95523071]
[133.06361389 291.59533691]
[123.64788055 303.24237061]
[110.16481781 309.61987305]
[110.16481781 324.61987305]
[110.16481781 339.61987305]
[110.16481781 354.61987305]
[110.16481781 369.61987305]
[110.16481781 384.61987305]
[110.16481781 399.61987305]
[110.16481781 414.61987305]
[110.16481781 429.61987305]
[110.16481781 444.61987305]
[110.16481781 459.61987305]
[124.70470428 463.68118286]
[137.60908508 471.51571655]
[147.92036438 482.54202271]
[154.87338257 495.94195557]
[157.95219421 510.72113037]
[156.92829895 525.78277588]
[151.87770081 540.00933838]
[143.17517090 552.34497070]
[131.46650696 561.87438965]
[117.62056732 567.89044189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 124]
[28 123]
[29 122]
[30 121]
[31 118]
[32 117]
[35 115]
[36 114]
[37 113]
[38 99]
[39 98]
[40 97]
[41 96]
[44 95]
[45 94]
[46 64]
[47 63]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
