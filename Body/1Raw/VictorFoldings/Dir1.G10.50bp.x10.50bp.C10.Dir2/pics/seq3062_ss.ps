%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUGUACGGGGGGGGGGGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAxxxxxxxxxxCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCCCCCCCCCCCUCCCUGUUC\
) } def
/len { sequence length } bind def

/coor [
[330.07351685 228.39514160]
[322.42660522 215.67437744]
[315.74096680 202.42288208]
[310.05319214 188.71315002]
[305.39447021 174.62019348]
[301.79028320 160.22116089]
[299.26046753 145.59483337]
[297.81881714 130.82125854]
[297.47332764 115.98129272]
[282.49310303 115.21163177]
[267.51284790 114.44197083]
[252.53260803 113.67230988]
[237.55236816 112.90264893]
[222.57212830 112.13298798]
[207.59188843 111.36332703]
[192.61164856 110.59366608]
[177.63140869 109.82401276]
[162.65116882 109.05435181]
[147.67092896 108.28469086]
[132.69068909 107.51502991]
[119.58316803 114.58909607]
[106.19818115 106.15388489]
[108.24272156 120.16544342]
[99.54984283 134.83285522]
[80.74191284 143.84339905]
[65.87531281 145.83944702]
[51.00871277 147.83551025]
[38.36087799 157.34039307]
[24.71718788 151.36552429]
[19.53100395 165.76559448]
[8.23898506 176.09753418]
[-6.56404161 179.98713684]
[-21.47644997 176.54058838]
[-33.07147980 166.54989624]
[-38.68467331 152.31085205]
[-37.02616501 137.09545898]
[-28.47706604 124.40013123]
[-15.00189495 117.14214325]
[0.30285069 116.98934174]
[13.92025280 123.97682190]
[22.72113228 136.49893188]
[34.30560684 127.13681793]
[49.01265717 132.96890259]
[63.87925339 130.97285461]
[78.74585724 128.97679138]
[80.27505493 121.63434601]
[84.86264801 99.60700226]
[72.02899170 91.84186554]
[59.19533539 84.07672882]
[42.79746246 84.28118134]
[34.65523148 70.04615021]
[43.14467239 56.01541519]
[59.53257751 56.62259674]
[66.96047211 71.24307251]
[79.79412842 79.00820923]
[92.62777710 86.77334595]
[106.96784210 91.17364502]
[121.14684296 84.15463257]
[133.46034241 92.53479004]
[148.44058228 93.30445099]
[163.42082214 94.07411194]
[178.40106201 94.84376526]
[193.38130188 95.61342621]
[208.36154175 96.38308716]
[223.34178162 97.15274811]
[238.32203674 97.92240906]
[253.30227661 98.69207001]
[268.28250122 99.46173096]
[283.26275635 100.23139191]
[298.24298096 101.00105286]
[300.16149902 85.94869232]
[303.21200562 71.08462524]
[307.37701416 56.49384308]
[312.63262939 42.25978851]
[318.94882202 28.46385193]
[326.28936768 15.18491840]
[334.61230469 2.49891233]
[343.86996460 -9.52163506]
[354.00936890 -20.80800056]
[364.97253418 -31.29566193]
[376.69668579 -40.92467117]
[389.11477661 -49.63998032]
[402.15576172 -57.39178848]
[415.74502563 -64.13578796]
[429.80480957 -69.83345795]
[444.25476074 -74.45223236]
[459.01214600 -77.96574402]
[473.99258423 -80.35392761]
[489.11041260 -81.60317993]
[504.27917480 -81.70639038]
[519.41204834 -80.66300201]
[534.42254639 -78.47902679]
[549.22485352 -75.16699219]
[563.73425293 -70.74588776]
[577.86785889 -65.24102783]
[591.54473877 -58.68393707]
[604.68676758 -51.11215210]
[617.21881104 -42.56900787]
[629.06915283 -33.10340500]
[640.17010498 -22.76950455]
[650.45825195 -11.62643719]
[659.87463379 0.26203904]
[668.36553955 12.82790852]
[675.88244629 25.99928093]
[682.38238525 39.70080948]
[687.82812500 53.85411453]
[692.18872070 68.37823486]
[695.43914795 83.19010162]
[697.56085205 98.20498657]
[698.54187012 113.33700562]
[713.54107666 113.49100494]
[728.54028320 113.64500427]
[740.96038818 103.49021149]
[756.61260986 107.00997162]
[763.48980713 121.50422668]
[756.31646729 135.85421753]
[740.59527588 139.05186462]
[728.38629150 128.64421082]
[713.38708496 128.49021912]
[698.38787842 128.33621216]
[697.13659668 143.11721802]
[694.79595947 157.76550293]
[691.37872314 172.20091248]
[686.90356445 186.34440613]
[681.39495850 200.11859131]
[674.88299561 213.44805908]
[667.40332031 226.25984192]
[658.99676514 238.48379517]
[649.70935059 250.05300903]
[639.59191895 260.90414429]
[628.69976807 270.97775269]
[617.09246826 280.21871948]
[604.83361816 288.57641602]
[591.99017334 296.00509644]
[578.63244629 302.46401978]
[564.83355713 307.91784668]
[550.66900635 312.33666992]
[536.21624756 315.69631958]
[521.55450439 317.97830200]
[506.76385498 319.17013550]
[491.92535400 319.26525879]
[477.12017822 318.26309204]
[462.42935181 316.16912842]
[447.93331909 312.99472046]
[433.71136475 308.75729370]
[419.84140015 303.47991943]
[406.39929199 297.19149780]
[393.45864868 289.92642212]
[381.09033203 281.72439575]
[369.36203003 272.63024902]
[358.33795166 262.69378662]
[348.07849121 251.96934509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[22 57]
[25 45]
[26 44]
[27 43]
[29 41]
[47 56]
[48 55]
[49 54]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
