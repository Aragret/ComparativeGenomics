%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCUGAUCGGGGGGGGGGAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGxxxxxxxxxxAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUCCCCCCCCCCUCGUCUGAUC\
) } def
/len { sequence length } bind def

/coor [
[91.27040100 425.99395752]
[78.05020905 418.72149658]
[67.16340637 408.27447510]
[59.35227203 395.36523438]
[55.14939117 380.87393188]
[54.84132004 365.78857422]
[58.44906235 351.13775635]
[65.72663116 337.92037964]
[76.17784119 327.03759766]
[89.09010315 319.23144531]
[103.58303833 315.03417969]
[103.27098083 300.03741455]
[102.95893097 285.04064941]
[102.64687347 270.04391479]
[102.33481598 255.04714966]
[102.02275848 240.05039978]
[101.71070099 225.05364990]
[101.39864349 210.05688477]
[101.08659363 195.06013489]
[100.61854553 180.06744385]
[99.99456787 165.08042908]
[99.37059021 150.09341431]
[98.74661255 135.10639954]
[98.12263489 120.11937714]
[86.13580322 111.10184479]
[71.56310272 114.65660858]
[56.99039841 118.21137238]
[42.41769791 121.76612854]
[35.65391922 135.86524963]
[21.38856697 142.27101135]
[6.35730457 137.95880127]
[-2.34256625 124.96472168]
[-0.60323250 109.42417145]
[10.75404549 98.67492676]
[26.36670876 97.79244995]
[38.86293411 107.19342804]
[53.43563843 103.63866425]
[68.00833893 100.08390808]
[82.58104706 96.52914429]
[83.82360077 89.13278961]
[68.98695374 91.34047699]
[62.30256653 77.91218567]
[73.00805664 67.40540314]
[86.30872345 74.34008026]
[87.55127716 66.94372559]
[74.94015503 58.82218552]
[62.32902527 50.70064545]
[49.71789551 42.57910156]
[34.32660294 46.16847610]
[20.94954681 37.75242233]
[17.52310181 22.32403755]
[26.08011436 9.03671074]
[41.54386139 5.77357483]
[54.73997879 14.47059155]
[57.83943939 29.96797562]
[70.45056915 38.08951569]
[83.06169128 46.21105957]
[95.67282104 54.33259964]
[89.01034546 40.89342880]
[96.10755157 27.67867851]
[110.99082947 25.81102943]
[121.13311768 36.86245346]
[117.99774170 51.53118134]
[128.21122742 40.54551697]
[138.42469788 29.55985260]
[128.59736633 18.20772934]
[120.05503845 5.85961485]
[112.89788055 -7.33971500]
[107.20980072 -21.23550606]
[103.05749512 -35.66483688]
[100.48963928 -50.45853043]
[99.53633881 -65.44313812]
[100.20878601 -80.44297028]
[102.49907684 -95.28217316]
[106.38037109 -109.78675079]
[111.80716705 -123.78664398]
[118.71582031 -137.11772156]
[127.02534485 -149.62368774]
[136.63832092 -161.15789795]
[147.44201660 -171.58512878]
[159.30978394 -180.78314209]
[172.10247803 -188.64405823]
[185.67012024 -195.07574463]
[199.85360718 -200.00279236]
[214.48667908 -203.36741638]
[229.39773560 -205.13017273]
[244.41198730 -205.27040100]
[259.35339355 -203.78645325]
[274.04672241 -200.69573975]
[288.31979370 -196.03446960]
[302.00518799 -189.85733032]
[314.94247437 -182.23670959]
[326.97994995 -173.26197815]
[337.97653198 -163.03834534]
[347.80325317 -151.68569946]
[356.34494019 -139.33712769]
[363.50137329 -126.13740540]
[369.18872070 -112.24131012]
[373.34024048 -97.81175995]
[375.90728760 -83.01792908]
[376.85980225 -68.03327179]
[376.18655396 -53.03347015]
[373.89544678 -38.19439316]
[370.01336670 -23.69002533]
[364.58581543 -9.69041729]
[357.67645264 3.64029026]
[349.36627197 16.14580345]
[339.75265503 27.67949867]
[328.94839478 38.10615158]
[317.08013916 47.30351639]
[304.28701782 55.16375351]
[290.71905518 61.59471130]
[276.53527832 66.52098846]
[261.90203857 69.88482666]
[246.99087524 71.64678192]
[231.97662354 71.78620148]
[217.03530884 70.30145264]
[202.34211731 67.20994568]
[188.06932068 62.54791260]
[174.38426208 56.37002563]
[161.44738770 48.74871063]
[149.41036987 39.77333069]
[139.19688416 50.75899506]
[128.98341370 61.74465942]
[113.10965729 119.49539948]
[113.73363495 134.48242188]
[114.35761261 149.46943665]
[114.98159027 164.45645142]
[115.60556030 179.44346619]
[119.10817719 187.95130920]
[116.08334351 194.74807739]
[116.39540100 209.74482727]
[116.70745850 224.74159241]
[117.01951599 239.73834229]
[117.33156586 254.73509216]
[117.64362335 269.73184204]
[117.95568085 284.72860718]
[118.26773834 299.72534180]
[118.57979584 314.72210693]
[133.23478699 318.31286621]
[146.46060181 325.57513428]
[157.35546875 336.01373291]
[165.17655945 348.91693115]
[169.39062500 363.40499878]
[169.71035767 378.49011230]
[166.11392212 393.14370728]
[158.84655762 406.36669922]
[148.40376282 417.25753784]
[135.49752808 425.07366943]
[121.00784302 429.28213501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 39]
[26 38]
[27 37]
[28 36]
[45 58]
[46 57]
[47 56]
[48 55]
[63 124]
[64 123]
[65 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
