%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUACUAGGGGGGGGGGAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUxxxxxxxxxxCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCCCCCCCCCCCACACUACUA\
) } def
/len { sequence length } bind def

/coor [
[-16.29387856 315.81835938]
[-28.65153122 308.68783569]
[-40.57345963 300.85052490]
[-52.01928711 292.33297729]
[-62.95024872 283.16400146]
[-73.32932281 273.37469482]
[-83.12135315 262.99816895]
[-92.29318237 252.06961060]
[-100.81374359 240.62600708]
[-108.65417480 228.70613098]
[-115.78793335 216.35034180]
[-122.19084167 203.60049438]
[-135.97322083 209.52046204]
[-149.75559998 215.44042969]
[-159.38191223 227.99609375]
[-174.12969971 225.90985107]
[-187.91207886 231.82981873]
[-201.69445801 237.74978638]
[-215.47683716 243.66975403]
[-229.25921631 249.58970642]
[-228.68205261 264.75650024]
[-233.62644958 279.10632324]
[-243.42369080 290.69848633]
[-256.74880981 297.96527100]
[-271.79965210 299.92385864]
[-286.54077148 296.30941772]
[-298.97848511 287.61071777]
[-307.43075562 275.00424194]
[-310.75445557 260.19485474]
[-308.50009155 245.18545532]
[-300.97253418 232.00592041]
[-289.18981934 222.43865967]
[-274.74548340 217.77758789]
[-259.59298706 218.65307617]
[-245.78160095 224.94670105]
[-235.17918396 235.80732727]
[-221.39680481 229.88735962]
[-207.61442566 223.96740723]
[-193.83204651 218.04743958]
[-180.04965210 212.12747192]
[-171.40914917 199.99525452]
[-155.67556763 201.65805054]
[-141.89318848 195.73808289]
[-128.11080933 189.81811523]
[-133.45729065 174.82997131]
[-137.82014465 159.52655029]
[-141.18098450 143.97232056]
[-143.52565002 128.23281860]
[-144.84425354 112.37435913]
[-145.13125610 96.46376801]
[-144.38542175 80.56807709]
[-142.60990906 64.75424957]
[-139.81221008 49.08893585]
[-136.00410461 33.63812256]
[-131.20161438 18.46691322]
[-125.42501068 3.63923264]
[-118.69861603 -10.78244877]
[-111.05075836 -24.73736572]
[-102.51367950 -38.16672134]
[-93.12334442 -51.01393509]
[-82.91931152 -63.22487640]
[-71.94458008 -74.74809265]
[-60.24538422 -85.53504181]
[-47.87102127 -95.54026794]
[-34.87362671 -104.72161102]
[-21.30796814 -113.04039764]
[-7.23119593 -120.46157074]
[7.29737759 -126.95386505]
[22.21653938 -132.48992920]
[37.46342850 -137.04643250]
[52.97380447 -140.60417175]
[68.68231964 -143.14817810]
[84.52278137 -144.66770935]
[100.42845917 -145.15637207]
[116.33232880 -144.61212158]
[132.16738892 -143.03723145]
[147.86691284 -140.43833923]
[163.36476135 -136.82640076]
[178.59562683 -132.21662903]
[193.49534607 -126.62844849]
[208.00114441 -120.08541107]
[222.05187988 -112.61507416]
[235.58839417 -104.24892426]
[248.55360413 -95.02220154]
[260.89291382 -84.97378540]
[272.55435181 -74.14601135]
[283.43316650 -84.47322083]
[288.11483765 -99.58588409]
[302.67233276 -102.73683929]
[313.55114746 -113.06404877]
[324.42999268 -123.39125061]
[335.30880737 -133.71846008]
[346.18762207 -144.04565430]
[353.51223755 -159.33572388]
[370.23245239 -156.53005981]
[372.16503906 -139.68663025]
[356.51483154 -133.16683960]
[345.63601685 -122.83963013]
[334.75717163 -112.51242828]
[323.87835693 -102.18521881]
[312.99954224 -91.85801697]
[309.09600830 -77.48402405]
[293.76037598 -73.59439087]
[282.88153076 -63.26718903]
[292.06942749 -52.35211945]
[300.60681152 -40.92105865]
[308.46475220 -29.01272011]
[315.61666870 -16.66743469]
[322.03829956 -3.92701316]
[327.70794678 9.16539288]
[332.60638428 22.56544304]
[336.71697998 36.22775269]
[340.02587891 50.10604858]
[342.52185059 64.15332794]
[344.19644165 78.32201385]
[345.04394531 92.56411743]
[345.06155396 106.83140564]
[344.24917603 121.07556152]
[342.60952759 135.24833679]
[340.14822388 149.30172729]
[336.87356567 163.18814087]
[332.79666138 176.86054993]
[327.93130493 190.27264404]
[322.29397583 203.37899780]
[315.90377808 216.13522339]
[308.78234863 228.49810791]
[300.95379639 240.42579651]
[292.44464111 251.87788391]
[283.28372192 262.81558228]
[273.50204468 273.20184326]
[263.13272095 283.00149536]
[252.21090698 292.18136597]
[240.77357483 300.71032715]
[228.85946655 308.55950928]
[216.50892639 315.70236206]
[203.76377869 322.11462402]
[190.66722107 327.77465820]
[177.26356506 332.66320801]
[163.59823608 336.76379395]
[149.71751404 340.06250000]
[135.66841125 342.54812622]
[121.49849701 344.21231079]
[107.25576782 345.04934692]
[92.98847198 345.05645752]
[78.74491882 344.23361206]
[64.57334900 342.58355713]
[50.52177048 340.11193848]
[36.63776779 336.82705688]
[22.96836090 332.74011230]
[9.55984783 327.86489868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 44]
[13 43]
[14 42]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[86 104]
[87 103]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
