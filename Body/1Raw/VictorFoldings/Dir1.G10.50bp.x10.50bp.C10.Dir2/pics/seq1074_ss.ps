%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCACAGGGGGGGGGGCCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAxxxxxxxxxxAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCCCCCCCCCCCUAGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[96.55500031 364.44311523]
[82.70906067 358.42709351]
[71.00039673 348.89767456]
[62.29787445 336.56201172]
[57.24727249 322.33547974]
[56.22338104 307.27380371]
[59.30218124 292.49465942]
[66.25520325 279.09472656]
[76.56649017 268.06838989]
[89.47087097 260.23388672]
[104.01075745 256.17257690]
[104.01075745 241.17256165]
[104.01075745 226.17256165]
[104.01075745 211.17256165]
[104.01075745 196.17256165]
[104.01075745 181.17256165]
[104.01075745 166.17256165]
[104.01075745 151.17256165]
[104.01075745 136.17256165]
[104.01075745 121.17256927]
[91.07270050 113.58265686]
[77.97954559 120.90176392]
[64.88639069 128.22087097]
[56.95999527 142.57720947]
[40.56090164 142.62033081]
[32.55909729 128.30589294]
[41.18614578 114.35935211]
[57.56728363 115.12771606]
[70.66043854 107.80860901]
[83.75359344 100.48950195]
[79.89643097 85.99391174]
[64.89724731 86.14994812]
[51.17830658 94.03038025]
[38.37123489 86.42589569]
[23.37204742 86.58193207]
[9.53912258 95.39000702]
[-4.87838316 87.57543182]
[-5.04897451 71.17716980]
[9.20283794 63.06435013]
[23.21601105 71.58274078]
[38.21519852 71.42670441]
[50.86129761 63.55743027]
[64.74121094 71.15075684]
[79.74039459 70.99472046]
[65.74371338 65.60095215]
[57.97740173 52.76800537]
[59.69153976 37.86627197]
[70.16879272 27.13187599]
[85.02459717 25.05699348]
[98.04203796 32.50992966]
[103.77352905 46.37174606]
[99.81982422 60.84254837]
[108.83735657 48.85571671]
[117.72970581 36.77572632]
[126.49591064 24.60388947]
[135.26211548 12.43205357]
[144.02832031 0.26021659]
[152.79454041 -11.91162014]
[161.56074524 -24.08345795]
[170.32695007 -36.25529480]
[176.81510925 -49.77948380]
[180.82284546 -64.23416901]
[184.83059692 -78.68885803]
[188.83833313 -93.14354706]
[192.84606934 -107.59823608]
[194.71368408 -122.48151398]
[194.40162659 -137.47827148]
[194.08956909 -152.47502136]
[193.77751160 -167.47177124]
[180.05178833 -174.24398804]
[171.05482483 -186.62596130]
[168.85408020 -201.77243042]
[173.95527649 -216.20281982]
[185.18617249 -226.60116577]
[199.96601868 -230.57797241]
[214.89848328 -227.21942139]
[226.55221558 -217.29727173]
[232.24926758 -203.09156799]
[230.68051147 -187.86666870]
[222.20640564 -175.12115479]
[208.77427673 -167.78382874]
[209.08633423 -152.78707886]
[209.39839172 -137.79032898]
[209.71043396 -122.79357147]
[217.77221680 -135.44299316]
[229.99946594 -144.13174438]
[244.59678650 -147.58404541]
[259.42077637 -145.29295349]
[272.29476929 -137.59489441]
[281.32843018 -125.62021637]
[285.19528198 -111.12719727]
[283.32754517 -96.24393463]
[275.99945068 -83.15579987]
[264.28704834 -73.78459167]
[249.91012573 -69.50632477]
[234.97967529 -70.94920349]
[221.68803406 -77.90135193]
[211.98689270 -89.34196472]
[207.30076599 -103.59049988]
[203.29301453 -89.13581085]
[199.28527832 -74.68112183]
[195.27754211 -60.22643280]
[191.26980591 -45.77174377]
[202.33699036 -55.89682388]
[216.05538940 -61.96358109]
[230.99224854 -63.33840942]
[245.58758545 -59.87771988]
[258.31704712 -51.94294739]
[267.85119629 -40.36279297]
[273.19430542 -26.34668159]
[273.78829956 -11.35844707]
[269.57116699 3.03654790]
[260.98336792 15.33489895]
[248.92175293 24.25217247]
[234.64607239 28.85705566]
[219.64726257 28.66861725]
[205.49177551 23.70653534]
[193.65800476 14.48904896]
[185.38188171 1.97882640]
[181.52774048 -12.51757240]
[182.49877930 -27.48908615]
[173.73257446 -15.31725025]
[164.96636963 -3.14541292]
[156.20016479 9.02642345]
[147.43395996 21.19826126]
[138.66775513 33.37009811]
[129.90153503 45.54193497]
[128.53578186 52.85496140]
[120.82418823 57.87324524]
[111.80665588 69.86007690]
[119.01075745 121.17256927]
[119.01075745 136.17256165]
[119.01075745 151.17256165]
[119.01075745 166.17256165]
[119.01075745 181.17256165]
[119.01075745 196.17256165]
[119.01075745 211.17256165]
[119.01075745 226.17256165]
[119.01075745 241.17256165]
[119.01075745 256.17257690]
[133.55064392 260.23388672]
[146.45501709 268.06838989]
[156.76631165 279.09472656]
[163.71932983 292.49465942]
[166.79812622 307.27380371]
[165.77423096 322.33547974]
[160.72363281 336.56201172]
[152.02110291 348.89767456]
[140.31245422 358.42709351]
[126.46650696 364.44311523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 30]
[22 29]
[23 28]
[31 44]
[32 43]
[34 41]
[35 40]
[52 130]
[53 129]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 84]
[67 83]
[68 82]
[69 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
