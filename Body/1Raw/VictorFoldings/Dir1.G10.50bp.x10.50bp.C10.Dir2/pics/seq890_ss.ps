%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCACCCCGGGGGGGGGGAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUxxxxxxxxxxAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAACCCCCCCCCCACAUCACCUC\
) } def
/len { sequence length } bind def

/coor [
[89.07191467 374.74581909]
[75.22597504 368.72979736]
[63.51731491 359.20037842]
[54.81479263 346.86471558]
[49.76419067 332.63818359]
[48.74029922 317.57650757]
[51.81909561 302.79733276]
[58.77211761 289.39739990]
[69.08340454 278.37106323]
[81.98778534 270.53656006]
[96.52767181 266.47525024]
[96.52767181 251.47525024]
[96.52767181 236.47525024]
[96.52767181 221.47525024]
[96.52767181 206.47525024]
[96.52767181 191.47525024]
[96.52767181 176.47525024]
[96.52767181 161.47525024]
[96.52767181 146.47525024]
[96.52767181 131.47525024]
[90.35188293 127.21971130]
[86.07402039 141.59677124]
[71.07868958 141.97085571]
[66.08927917 127.82497406]
[78.00031281 118.70861816]
[71.82452393 114.45307159]
[63.97793961 128.44630432]
[48.12269974 130.89393616]
[36.42158890 119.91835022]
[37.85069656 103.93907928]
[51.31373596 95.21405029]
[66.48301697 100.43636322]
[79.85660553 82.86046600]
[97.14699554 80.83412933]
[100.85315704 66.29919434]
[104.55931854 51.76425552]
[108.26548004 37.22932053]
[111.97164154 22.69438362]
[115.67780304 8.15944672]
[107.35459900 1.27717543]
[102.46403503 -8.72102928]
[102.11921692 -20.17625427]
[106.65231323 -31.06067467]
[115.50824738 -39.33651733]
[127.29959869 -43.33622742]
[123.89662170 -57.94511795]
[120.49364471 -72.55401611]
[117.09066772 -87.16290283]
[113.68768311 -101.77179718]
[98.71201324 -100.52800751]
[83.71483612 -101.47804260]
[69.01582336 -104.60165405]
[54.92828751 -109.83225250]
[41.75250626 -117.05835724]
[29.76931572 -126.12593842]
[19.23414421 -136.84172058]
[10.37154579 -148.97729492]
[3.37043023 -162.27400208]
[-1.61997449 -176.44841003]
[-4.49329758 -191.19837952]
[-5.18829441 -206.20953369]
[-3.69015026 -221.16191101]
[-0.03079866 -235.73678589]
[5.71176100 -249.62350464]
[13.41512585 -262.52606201]
[22.91509819 -274.16943359]
[34.00918579 -284.30548096]
[46.46091843 -292.71810913]
[60.00488281 -299.22799683]
[74.35239410 -303.69641113]
[89.19763184 -306.02813721]
[104.22416687 -306.17340088]
[119.11170959 -304.12915039]
[133.54292297 -299.93896484]
[147.21022034 -293.69213867]
[159.82228088 -285.52182007]
[171.11026001 -275.60217285]
[180.83357239 -264.14465332]
[188.78495789 -251.39343262]
[194.79492188 -237.62034607]
[198.73538208 -223.11894226]
[200.52233887 -208.19833374]
[200.11770630 -193.17654419]
[197.53009033 -178.37376404]
[192.81466675 -164.10552979]
[186.07192993 -150.67594910]
[177.44563293 -138.37129211]
[167.11959839 -127.45383453]
[155.31396484 -118.15626526]
[142.28034973 -110.67676544]
[128.29658508 -105.17477417]
[131.69955444 -90.56587982]
[135.10253906 -75.95699310]
[138.50550842 -61.34809875]
[141.90849304 -46.73920441]
[154.43444824 -38.48691559]
[169.20051575 -41.12578201]
[183.96656799 -43.76464462]
[192.00006104 -53.90943909]
[204.39926147 -55.77459717]
[214.39923096 -48.89654160]
[229.21699524 -51.22764587]
[244.03475952 -53.55874634]
[248.39027405 -68.18722534]
[258.66784668 -79.47145081]
[272.82690430 -85.17095184]
[288.05612183 -84.15407562]
[301.33169556 -76.62273407]
[310.01782227 -64.07226562]
[312.38980103 -48.99458694]
[307.97671509 -34.38337708]
[297.65478516 -23.13970566]
[283.47341919 -17.49600983]
[268.24832153 -18.57284927]
[255.00248718 -26.15641594]
[246.36585999 -38.74098969]
[231.54809570 -36.40988541]
[216.73034668 -34.07878113]
[203.73577881 -22.32543182]
[186.60542297 -28.99858856]
[171.83937073 -26.35972404]
[157.07331848 -23.72086143]
[151.97375488 1.85490882]
[130.21273804 11.86560822]
[126.50657654 26.40054512]
[122.80041504 40.93548203]
[119.09426117 55.47041702]
[115.38809967 70.00535583]
[111.68193817 84.54029083]
[126.15925598 103.90042877]
[111.52767181 131.47525024]
[111.52767181 146.47525024]
[111.52767181 161.47525024]
[111.52767181 176.47525024]
[111.52767181 191.47525024]
[111.52767181 206.47525024]
[111.52767181 221.47525024]
[111.52767181 236.47525024]
[111.52767181 251.47525024]
[111.52767181 266.47525024]
[126.06755829 270.53656006]
[138.97193909 278.37106323]
[149.28321838 289.39739990]
[156.23625183 302.79733276]
[159.31504822 317.57650757]
[158.29115295 332.63818359]
[153.24055481 346.86471558]
[144.53802490 359.20037842]
[132.82936096 368.72979736]
[118.98342896 374.74581909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 32]
[34 129]
[35 128]
[36 127]
[37 126]
[38 125]
[39 124]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[96 122]
[97 121]
[98 120]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
