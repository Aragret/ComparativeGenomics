%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCAAUCUGGGGGGGGGGAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUxxxxxxxxxxAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCCCCCCCCCCCGGACUAAUCU\
) } def
/len { sequence length } bind def

/coor [
[11.54236889 376.19177246]
[-1.67782819 368.91931152]
[-12.56463242 358.47229004]
[-20.37576294 345.56304932]
[-24.57864380 331.07171631]
[-24.88671684 315.98638916]
[-21.27897453 301.33557129]
[-14.00140190 288.11816406]
[-3.55019426 277.23541260]
[9.36206722 269.42926025]
[23.85500336 265.23196411]
[23.54294777 250.23522949]
[23.23089218 235.23846436]
[22.91883469 220.24171448]
[22.60677910 205.24496460]
[22.29472351 190.24821472]
[21.98266602 175.25144958]
[21.67061043 160.25469971]
[21.35855484 145.25794983]
[21.04649734 130.26119995]
[15.39699554 125.32833099]
[8.48102379 138.63882446]
[5.45343256 153.33010864]
[-7.46257877 160.95747375]
[-21.78952599 156.51466370]
[-28.12385368 142.91773987]
[-22.30799294 129.09111023]
[-8.15855122 124.10999298]
[4.09799099 115.46260834]
[-1.55151153 110.52974701]
[-16.45341301 112.24243927]
[-31.35531616 113.95513153]
[-42.41603851 125.57579803]
[-58.38445282 124.03007507]
[-67.01096344 110.50369263]
[-61.67804337 95.37294769]
[-46.47665787 90.24484253]
[-33.06800461 99.05323029]
[-18.16610336 97.34053802]
[-3.26420116 95.62784576]
[-0.31871870 80.91988373]
[-13.41187286 73.60077667]
[-26.50502777 66.28167725]
[-39.59818268 58.96257019]
[-52.69133759 51.64346313]
[-65.78449249 44.32435608]
[-81.60568237 44.34440613]
[-88.93968964 31.38054657]
[-105.71555328 28.92970467]
[-108.00451660 12.13098431]
[-92.49594116 5.28112936]
[-81.62058258 18.28739166]
[-66.73589325 17.74382973]
[-58.46538544 31.23120308]
[-45.37223053 38.55030823]
[-32.27907562 45.86941528]
[-19.18592262 53.18851852]
[-6.09276772 60.50762558]
[7.00038671 67.82672882]
[17.87921143 57.49952698]
[11.25071335 44.04356003]
[4.62221479 30.58759499]
[-9.30261135 21.92553711]
[-8.49310207 5.54638147]
[6.21798849 -1.70039999]
[19.69715118 7.64005995]
[18.07818031 23.95909691]
[24.70667839 37.41506195]
[31.33517838 50.87102890]
[38.78612900 51.72737122]
[39.42020798 36.74077988]
[40.05428696 21.75418854]
[40.68836594 6.76759624]
[41.32244492 -8.21899605]
[41.95652390 -23.20558739]
[39.86813736 -38.05949783]
[50.34012222 -48.79902649]
[65.24198151 -47.08594894]
[73.00382996 -34.25030899]
[67.59998322 -20.25836182]
[64.81758881 -5.51867628]
[62.03520203 9.22100830]
[59.25281143 23.96069336]
[56.47042084 38.70037842]
[53.68803024 53.44006348]
[61.13898087 54.29640579]
[70.64733887 42.69506454]
[80.15570068 31.09372520]
[89.66405487 19.49238396]
[99.17241669 7.89104223]
[104.53631592 -8.19202137]
[121.47572327 -7.48997927]
[125.49040985 8.98177242]
[110.77375793 17.39940071]
[101.26539612 29.00074196]
[91.75704193 40.60208130]
[82.24868011 52.20342255]
[72.74032593 63.80476379]
[111.41404724 59.70782852]
[135.79708862 85.98382568]
[150.56314087 83.34495544]
[165.32919312 80.70609283]
[180.09526062 78.06723022]
[194.86131287 75.42836761]
[200.69361877 61.14593887]
[213.33483887 52.30269623]
[228.75122070 51.72048187]
[242.02343750 59.58508301]
[248.91636658 73.38693237]
[247.23051453 88.72190094]
[237.50382996 100.69667053]
[222.84005737 105.49012756]
[207.91835022 101.57270050]
[197.50016785 90.19441986]
[182.73411560 92.83328247]
[167.96806335 95.47215271]
[153.20201111 98.11101532]
[138.43595886 100.74987793]
[103.57279205 141.72499084]
[55.50629425 108.57293701]
[68.89257812 115.34105682]
[82.27886963 122.10916901]
[98.61386108 120.66004181]
[107.81359863 134.23564148]
[100.41417694 148.87054443]
[84.02748871 149.50962830]
[75.51074982 135.49545288]
[62.12446594 128.72734070]
[48.73818207 121.95922089]
[36.04325104 129.94914246]
[36.35530853 144.94589233]
[36.66736603 159.94264221]
[36.97941971 174.93940735]
[37.29147720 189.93615723]
[37.60353470 204.93290710]
[37.91558838 219.92965698]
[38.22764587 234.92642212]
[38.53970337 249.92317200]
[38.85175705 264.91992188]
[53.50674820 268.51068115]
[66.73255920 275.77294922]
[77.62742615 286.21154785]
[85.44852448 299.11474609]
[89.66259766 313.60281372]
[89.98231506 328.68792725]
[86.38588715 343.34152222]
[79.11852264 356.56451416]
[68.67572784 367.45535278]
[55.76949692 375.27148438]
[41.27980423 379.47994995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[30 40]
[31 39]
[32 38]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[48 52]
[60 69]
[61 68]
[62 67]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
