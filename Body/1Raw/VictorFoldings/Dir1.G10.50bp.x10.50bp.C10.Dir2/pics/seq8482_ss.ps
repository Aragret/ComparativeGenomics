%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCACCCAGGGGGGGGGGACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAxxxxxxxxxxUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCCCCCCCCCCCAACCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[74.70414734 389.76971436]
[60.85821152 383.75369263]
[49.14955139 374.22427368]
[40.44702530 361.88861084]
[35.39642334 347.66207886]
[34.37253189 332.60040283]
[37.45133209 317.82125854]
[44.40435410 304.42132568]
[54.71563721 293.39498901]
[67.62001801 285.56048584]
[82.15990448 281.49917603]
[82.15990448 266.49917603]
[82.15990448 251.49916077]
[82.15990448 236.49916077]
[82.15990448 221.49916077]
[82.15990448 206.49916077]
[82.15990448 191.49916077]
[82.15990448 176.49916077]
[82.15990448 161.49916077]
[82.15990448 146.49916077]
[74.42260742 133.77189636]
[82.15990448 119.97171783]
[70.04496765 128.81639099]
[55.41788864 132.14033508]
[40.67032242 129.40002441]
[28.21362305 121.04355621]
[20.08457184 108.43726349]
[17.61233902 93.64239502]
[21.20115852 79.07804108]
[30.26422310 67.12560272]
[43.31964493 59.73940277]
[58.23274994 58.12715149]
[72.56510925 62.55246735]
[83.97326660 72.29177094]
[90.59166718 85.75178528]
[89.96768951 70.76477051]
[89.34371185 55.77775574]
[88.71973419 40.79074097]
[88.09575653 25.80372238]
[87.47177887 10.81670666]
[79.16710663 -2.64965987]
[86.36827850 -15.68777561]
[85.74430084 -30.67479134]
[71.38112640 -42.09231949]
[68.89875793 -59.84166336]
[55.96070099 -67.43157196]
[43.02264404 -75.02148438]
[27.79398537 -70.79496002]
[14.07841492 -78.64726257]
[10.01313782 -93.91976166]
[18.01001167 -107.55154419]
[33.32463074 -111.45512390]
[46.87110901 -103.31457520]
[50.61255264 -87.95953369]
[63.55060959 -80.36962891]
[76.48866272 -72.77971649]
[79.60265350 -75.09515381]
[83.05059814 -76.87555695]
[86.74141693 -78.07389832]
[90.57760620 -78.65852356]
[94.28376770 -93.19345856]
[97.98992920 -107.72839355]
[88.25234222 -119.66513062]
[87.42035675 -134.86911011]
[95.60376740 -147.49827576]
[109.48836517 -152.82331848]
[113.19452667 -167.35824585]
[116.90068817 -181.89318848]
[120.60684967 -196.42811584]
[107.31087494 -203.53309631]
[96.10206604 -213.61405945]
[87.63207245 -226.08494568]
[82.39334869 -240.22067261]
[80.69044495 -255.19944763]
[82.62238312 -270.15039062]
[88.07682800 -284.20431519]
[96.73667908 -296.54409790]
[108.09845734 -306.45236206]
[121.50160217 -313.35302734]
[136.16687012 -316.84487915]
[151.24165344 -316.72497559]
[165.84951782 -313.00021362]
[179.14117432 -305.88717651]
[190.34387207 -295.79940796]
[198.80630493 -283.32339478]
[204.03646851 -269.18447876]
[205.73028564 -254.20469666]
[203.78929138 -239.25491333]
[198.32630920 -225.20429993]
[189.65898132 -212.86976624]
[178.29119873 -202.96839905]
[164.88388062 -196.07586670]
[150.21649170 -192.59289551]
[135.14178467 -192.72195435]
[131.43562317 -178.18702698]
[127.72946167 -163.65208435]
[124.02330017 -149.11715698]
[133.66285706 -137.79385376]
[134.79985046 -122.78815460]
[126.78925323 -109.83886719]
[112.52486420 -104.02223206]
[108.81870270 -89.48729706]
[105.11254120 -74.95236206]
[115.69144440 -61.06515503]
[114.07155609 -43.40367126]
[100.73131561 -31.29876900]
[101.35529327 -16.31175232]
[109.61533356 -3.91735744]
[102.45879364 10.19272995]
[103.08277130 25.17974663]
[103.70674896 40.16676331]
[104.33072662 55.15377808]
[104.95470428 70.14079285]
[105.57868195 85.12780762]
[114.47103119 97.20780182]
[128.59584045 102.25655365]
[142.72064209 107.30531311]
[156.84544373 112.35406494]
[170.97024536 117.40282440]
[186.99769592 113.93114471]
[197.81611633 126.25566864]
[192.29643250 141.69798279]
[176.11682129 144.37236023]
[165.92147827 131.52763367]
[151.79667664 126.47887421]
[137.67187500 121.43011475]
[123.54707336 116.38135529]
[109.42227173 111.33260345]
[97.15990448 119.97171783]
[104.89720917 133.77189636]
[97.15990448 146.49916077]
[97.15990448 161.49916077]
[97.15990448 176.49916077]
[97.15990448 191.49916077]
[97.15990448 206.49916077]
[97.15990448 221.49916077]
[97.15990448 236.49916077]
[97.15990448 251.49916077]
[97.15990448 266.49917603]
[97.15990448 281.49917603]
[111.69979095 285.56048584]
[124.60417175 293.39498901]
[134.91545105 304.42132568]
[141.86848450 317.82125854]
[144.94728088 332.60040283]
[143.92338562 347.66207886]
[138.87278748 361.88861084]
[130.17025757 374.22427368]
[118.46160126 383.75369263]
[104.61566162 389.76971436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[42 107]
[43 106]
[45 56]
[46 55]
[47 54]
[60 103]
[61 102]
[62 101]
[66 97]
[67 96]
[68 95]
[69 94]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
