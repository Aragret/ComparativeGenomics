%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUCGCUGGGGGGGGGGGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCxxxxxxxxxxUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCCCCCCCCCCCAUCGCUG\
) } def
/len { sequence length } bind def

/coor [
[81.40139771 442.46853638]
[69.30646515 433.43444824]
[60.09832764 421.47146606]
[54.46029282 407.46734619]
[52.81074524 392.46130371]
[55.27208710 377.56686401]
[61.66167450 363.88928223]
[71.50535583 352.44357300]
[84.07266235 344.07904053]
[98.43102264 339.41641235]
[97.80704498 324.42938232]
[97.18306732 309.44238281]
[96.55908966 294.45535278]
[95.93511200 279.46835327]
[95.31113434 264.48132324]
[94.68715668 249.49430847]
[94.06317902 234.50729370]
[93.43920135 219.52027893]
[92.81522369 204.53326416]
[92.19124603 189.54624939]
[84.20346832 202.24252319]
[71.80559540 210.68601990]
[57.06587219 213.46818542]
[42.44320679 210.12487793]
[30.37699318 201.21385193]
[22.88014603 188.22164917]
[21.20330620 173.31567383]
[25.62621117 158.98257446]
[35.41101837 147.61341858]
[48.92540359 141.10485840]
[63.91486359 140.54264832]
[77.87882233 146.02059937]
[88.48777771 156.62484741]
[93.97167206 170.58497620]
[97.37464905 155.97608948]
[100.77762604 141.36718750]
[104.18061066 126.75830078]
[88.21617889 123.00012970]
[78.05203247 111.11781311]
[76.93344116 96.28758240]
[84.39746094 84.31521606]
[78.05033112 70.72426605]
[71.70320129 57.13331604]
[65.35607147 43.54236603]
[59.00894165 29.95141411]
[52.66181183 16.36046410]
[38.19748688 20.45673561]
[23.26336670 22.17958260]
[8.24628067 21.48438072]
[-6.46479130 18.38913918]
[-20.48879814 12.97402859]
[-33.46248245 5.37931490]
[-45.04979706 -4.19828033]
[-54.95059967 -15.51067448]
[-62.90843964 -28.26484871]
[-68.71718597 -42.13043976]
[-72.22637939 -56.74829865]
[-73.34512329 -71.73978424]
[-72.04444122 -86.71657562]
[-68.35802460 -101.29074860]
[-62.38135529 -115.08479309]
[-54.26924515 -127.74140167]
[-44.23182297 -138.93275452]
[-32.52907562 -148.36895752]
[-19.46413422 -155.80558777]
[-5.37541389 -161.05001831]
[9.37215519 -163.96641541]
[24.39657402 -164.47924805]
[39.30867767 -162.57519531]
[53.72220230 -158.30360413]
[67.26380157 -151.77511597]
[79.58272552 -143.15882874]
[90.35987091 -132.67793274]
[99.31609344 -120.60390472]
[106.21940613 -107.24948883]
[110.89099121 -92.96059418]
[113.20983887 -78.10733795]
[113.11589813 -63.07446671]
[110.61159515 -48.25135422]
[105.76179504 -34.02196121]
[98.69212341 -20.75486183]
[89.58570099 -8.79370689]
[78.67840576 1.55168200]
[66.25276184 10.01333427]
[72.59989166 23.60428429]
[78.94702148 37.19523621]
[85.29415131 50.78618622]
[91.64128113 64.37713623]
[97.98841095 77.96808624]
[108.46943665 78.22577667]
[118.20469666 83.44983673]
[124.86627197 92.96203613]
[126.61482239 105.01350403]
[141.32278442 102.06802368]
[156.03074646 99.12254333]
[161.14416504 83.43077087]
[173.39044189 72.50720215]
[189.37861633 69.25022125]
[204.74473572 74.45259094]
[215.34289551 86.61115265]
[229.98638916 83.36032867]
[244.62989807 80.10950470]
[248.57498169 65.32116699]
[258.94921875 54.06798553]
[273.36862183 48.93584824]
[288.51977539 51.10408783]
[300.92102051 60.07445526]
[307.72265625 73.78562927]
[307.36172485 89.08688354]
[299.92114258 102.46209717]
[287.11071777 110.83774567]
[271.87417603 112.28916931]
[257.71279907 106.48283386]
[247.88072205 94.75300598]
[233.23721313 98.00382996]
[218.59371948 101.25465393]
[215.34400940 114.55498505]
[206.62823486 125.19992065]
[194.11064148 131.06652832]
[180.22064209 130.95300293]
[167.68147278 124.82435608]
[158.97622681 113.83050537]
[144.26826477 116.77598572]
[129.56030273 119.72146606]
[118.78949738 130.16128540]
[115.38652039 144.77017212]
[111.98354340 159.37905884]
[108.58056641 173.98796082]
[107.17826080 188.92227173]
[107.80223846 203.90928650]
[108.42621613 218.89630127]
[109.05019379 233.88331604]
[109.67417145 248.87033081]
[110.29814911 263.85733032]
[110.92212677 278.84436035]
[111.54610443 293.83139038]
[112.17008209 308.81838989]
[112.79405975 323.80541992]
[113.41803741 338.79241943]
[128.11428833 342.24539185]
[141.33338928 349.53631592]
[152.09443665 360.12417603]
[159.59886169 373.22326660]
[163.28977966 387.86154175]
[162.89331055 402.95278931]
[158.43888855 417.37710571]
[150.25704956 430.06408691]
[138.95492554 440.07232666]
[125.37123108 446.65911865]
[110.51395416 449.33566284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[34 128]
[35 127]
[36 126]
[37 125]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[93 124]
[94 123]
[95 122]
[100 116]
[101 115]
[102 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
