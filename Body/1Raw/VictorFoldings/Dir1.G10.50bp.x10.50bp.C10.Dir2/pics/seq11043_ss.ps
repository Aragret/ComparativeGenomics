%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUAGCAGGGGGGGGGGUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUxxxxxxxxxxUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCCCCCCCCCCCAUCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[82.95706940 344.14389038]
[69.73686981 336.87139893]
[58.85006714 326.42440796]
[51.03893661 313.51516724]
[46.83605576 299.02383423]
[46.52798462 283.93850708]
[50.13572693 269.28768921]
[57.41329956 256.07028198]
[67.86450958 245.18753052]
[80.77677155 237.38137817]
[95.26970673 233.18409729]
[94.95764923 218.18734741]
[94.64559174 203.19058228]
[94.33353424 188.19383240]
[94.02147675 173.19708252]
[93.70942688 158.20033264]
[93.39736938 143.20356750]
[93.08531189 128.20681763]
[92.77325439 113.21006775]
[86.71024323 99.49001312]
[75.83141327 89.16280365]
[64.95259094 78.83560181]
[54.07376480 68.50839233]
[43.19494247 58.18119049]
[25.41340828 59.61244583]
[11.97719193 48.57014084]
[-2.73076987 51.51562119]
[-17.43873215 54.46110535]
[-32.14669418 57.40658951]
[-46.85465622 60.35206985]
[-56.91112900 72.85194397]
[-72.95276642 72.63893890]
[-82.67379761 59.87645340]
[-78.61708069 44.35477448]
[-63.89458084 37.98080444]
[-49.80013657 45.64410782]
[-35.09217453 42.69862747]
[-20.38421440 39.75314331]
[-5.67625237 36.80766296]
[9.03170872 33.86217880]
[10.97358894 27.26670837]
[14.78441238 21.54405785]
[7.60190392 8.37547493]
[0.70021409 2.29118967]
[0.41019571 -5.14262056]
[-6.49680281 -18.45777702]
[-21.01356506 -14.47752476]
[-36.03481674 -13.60300922]
[-50.90382767 -15.87002563]
[-64.97102356 -21.17707825]
[-77.62239075 -29.28991699]
[-88.30622101 -39.85187531]
[-96.55725098 -52.39955521]
[-102.01683044 -66.38314819]
[-104.44860077 -81.19054413]
[-103.74866486 -96.17410278]
[-99.95003510 -110.67900085]
[-93.22111511 -124.07183075]
[-83.85820770 -135.76828003]
[-72.27246094 -145.25859070]
[-79.17945862 -158.57374573]
[-93.97709656 -164.77128601]
[-98.21906281 -180.24336243]
[-88.65127563 -193.12113953]
[-72.61332703 -193.52587891]
[-62.40816116 -181.14710999]
[-65.86430359 -165.48074341]
[-58.95730209 -152.16558838]
[-44.52634048 -156.17097473]
[-29.57211494 -157.08860779]
[-14.74813366 -154.87596130]
[-0.70272386 -149.62733459]
[11.94932938 -141.56988525]
[22.65368843 -131.05375671]
[30.94075775 -118.53686523]
[36.44626999 -104.56500244]
[38.92731857 -89.74799347]
[38.27305603 -74.73310089]
[34.50964355 -60.17673492]
[27.79923820 -46.71578217]
[18.43297386 -34.93971252]
[6.81835270 -25.36477470]
[13.72535133 -12.04961967]
[20.77048683 1.19296634]
[27.95299530 14.36154842]
[44.13650131 17.21809006]
[54.50563812 30.33059311]
[53.52214432 47.30236435]
[64.40097046 57.62957001]
[75.27979279 67.95677185]
[86.15862274 78.28398132]
[97.03744507 88.61118317]
[88.86511993 76.03291321]
[92.71608734 61.53566742]
[106.05312347 54.67102432]
[120.08908081 59.96177673]
[125.57629395 73.92209625]
[118.89967346 87.35401917]
[133.89237976 87.82206726]
[148.88507080 88.29010773]
[163.87776184 88.75814819]
[178.79667664 87.20056915]
[193.36938477 83.64580536]
[207.94207764 80.09104156]
[222.51478577 76.53627777]
[233.98878479 64.81965637]
[249.80322266 69.15964508]
[253.68955994 85.09163666]
[241.64987183 96.22616577]
[226.06954956 91.10898590]
[211.49684143 94.66374969]
[196.92414856 98.21850586]
[182.35144043 101.77326965]
[196.36904907 107.11241913]
[207.08268738 117.61090088]
[212.70504761 131.51733398]
[212.29823303 146.51181030]
[205.93008423 160.09292603]
[194.66294861 169.99504089]
[180.37644958 174.56625366]
[165.45388794 173.04399109]
[152.38468933 165.68218994]
[143.34909058 153.70896912]
[139.85441589 139.12174988]
[142.48367310 124.35397339]
[150.79823303 111.86926270]
[163.40972900 103.75084686]
[148.41702271 103.28279877]
[133.42433167 102.81475830]
[118.43163300 102.34671783]
[107.77001190 112.89801025]
[108.08206177 127.89476013]
[108.39411926 142.89151001]
[108.70617676 157.88827515]
[109.01823425 172.88502502]
[109.33029175 187.88177490]
[109.64234924 202.87852478]
[109.95439911 217.87528992]
[110.26645660 232.87203979]
[124.92144775 236.46279907]
[138.14726257 243.72506714]
[149.04212952 254.16365051]
[156.86322021 267.06686401]
[161.07730103 281.55493164]
[161.39701843 296.64004517]
[157.80058289 311.29364014]
[150.53323364 324.51663208]
[140.09042358 335.40747070]
[127.18419647 343.22360229]
[112.69450378 347.43206787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[42 85]
[43 84]
[45 83]
[46 82]
[60 68]
[61 67]
[98 130]
[99 129]
[100 128]
[101 127]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
