%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACCUCCCGGGGGGGGGGUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACxxxxxxxxxxCUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCCCCCCCCCCCUUACCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.32266235 348.16455078]
[68.76443481 339.81338501]
[58.67821503 328.60092163]
[51.69802094 315.23202515]
[48.26263809 300.54702759]
[48.58801270 285.46908569]
[52.65369797 270.94595337]
[60.20411682 257.89062500]
[70.76464844 247.12371826]
[83.67144012 239.32208252]
[98.11316681 234.97613525]
[97.48918915 219.98912048]
[96.86521912 205.00209045]
[96.24124146 190.01507568]
[95.61726379 175.02806091]
[94.99328613 160.04104614]
[94.36930847 145.05403137]
[93.74533081 130.06701660]
[93.12135315 115.08000183]
[88.81376648 100.71181488]
[81.08968353 87.85341644]
[73.36559296 74.99501038]
[65.50817108 62.21765518]
[57.51825333 49.52272415]
[41.39778137 51.49105072]
[26.08245468 46.26586533]
[14.60919380 34.93667221]
[9.22978306 19.79799843]
[10.96903896 3.88477945]
[19.42999649 -9.63603592]
[11.17770672 -22.16199875]
[0.08639123 -32.26064682]
[-13.15619469 -39.30578232]
[-26.39878082 -46.35091782]
[-39.64136505 -53.39605331]
[-52.88395309 -60.44118881]
[-66.12653351 -67.48632050]
[-79.36912537 -74.53145599]
[-92.75540924 -81.29957581]
[-106.27959442 -87.78773499]
[-122.06873322 -86.78087616]
[-130.19708252 -99.26203156]
[-143.72126770 -105.75019836]
[-157.24545288 -112.23836517]
[-170.76965332 -118.72653198]
[-184.29383850 -125.21469116]
[-200.59515381 -123.42604828]
[-210.07531738 -136.80732727]
[-202.98196411 -151.59300232]
[-186.61210632 -152.57284546]
[-177.80566406 -138.73887634]
[-164.28147888 -132.25071716]
[-150.75729370 -125.76255035]
[-137.23310852 -119.27439117]
[-123.70890808 -112.78622437]
[-108.88711548 -114.25716400]
[-99.79143524 -101.31192780]
[-86.26724243 -94.82376099]
[-81.48874664 -95.55962372]
[-76.20446777 -93.25577545]
[-72.32398987 -87.77404022]
[-59.08140182 -80.72890472]
[-45.83881760 -73.68377686]
[-32.59622955 -66.63864136]
[-19.35364532 -59.59350204]
[-6.11105967 -52.54836655]
[7.13152599 -45.50323486]
[-0.52887142 -58.39967728]
[-4.94556332 -72.73470306]
[-5.87138844 -87.70610046]
[-3.25453734 -102.47607422]
[2.75854945 -116.21807861]
[11.83137608 -128.16311646]
[23.45622253 -137.64271545]
[36.98255539 -144.12641907]
[51.65343094 -147.25137329]
[66.64786530 -146.84271240]
[81.12675476 -142.92330933]
[94.27985382 -135.71247864]
[105.37110901 -125.61376953]
[113.77984619 -113.19229126]
[119.03551483 -99.14316559]
[120.84399414 -84.25258636]
[119.10408020 -69.35383606]
[113.91314697 -55.28066254]
[105.56168365 -42.82060623]
[94.51703644 -32.67094040]
[81.39727020 -25.39964294]
[66.93657684 -21.41362381]
[51.94418335 -20.93593979]
[37.25907516 -23.99332428]
[23.70366859 -30.41428757]
[31.95595741 -17.88832474]
[45.63172913 -20.41303062]
[59.27740097 -17.51381111]
[70.81690979 -9.59786606]
[78.48171234 2.16180229]
[81.08177948 16.00011444]
[78.19026947 29.82481384]
[70.21318054 41.53281021]
[78.20310211 54.22773743]
[84.46829224 58.23935318]
[86.22399902 67.27092743]
[93.94808197 80.12933350]
[101.67217255 92.98773193]
[106.12282562 86.40007019]
[112.99493408 81.48471832]
[121.77375793 78.89118195]
[131.79238892 79.12715912]
[146.69429016 80.83985138]
[161.59619141 82.55254364]
[176.49809265 84.26522827]
[187.72659302 73.38153076]
[203.32763672 72.31324005]
[215.93490601 81.56477356]
[219.59562683 96.76784515]
[212.58131409 110.74401855]
[198.20391846 116.89418030]
[183.25199890 112.31440735]
[174.78540039 99.16712952]
[159.88349915 97.45444489]
[144.98159790 95.74175262]
[130.07969666 94.02906036]
[124.58686066 99.13580322]
[138.92485046 103.54283905]
[142.27734375 118.16340637]
[131.29185486 128.37709045]
[116.95378876 123.97031403]
[113.60119629 109.34928131]
[108.10836792 114.45602417]
[108.73234558 129.44303894]
[109.35632324 144.43005371]
[109.98030090 159.41706848]
[110.60427856 174.40408325]
[111.22825623 189.39109802]
[111.85223389 204.37812805]
[112.47621155 219.36514282]
[113.10018921 234.35215759]
[127.85318756 237.48258972]
[141.36383057 244.18435669]
[152.78280640 254.03613281]
[161.39231873 266.41867065]
[166.65116882 280.55355835]
[168.22877502 295.55230713]
[166.02597046 310.47204590]
[160.18122864 324.37490845]
[151.06193542 336.38696289]
[139.24136353 345.75311279]
[125.46256256 351.88461304]
[110.59165955 354.39602661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 105]
[21 104]
[22 103]
[23 101]
[24 100]
[30 93]
[31 92]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
