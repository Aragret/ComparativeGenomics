%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUAAACGGGGGGGGGGAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUxxxxxxxxxxAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCCCCCCCCCCCUCCAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[82.40628815 374.19174194]
[69.84806824 365.84057617]
[59.76184464 354.62814331]
[52.78165054 341.25921631]
[49.34626770 326.57421875]
[49.67164230 311.49627686]
[53.73732758 296.97314453]
[61.28774643 283.91781616]
[71.84827423 273.15090942]
[84.75507355 265.34927368]
[99.19680023 261.00332642]
[98.57282257 246.01631165]
[97.94884491 231.02929688]
[97.32486725 216.04228210]
[96.70088959 201.05526733]
[96.07691193 186.06825256]
[95.45293427 171.08122253]
[94.82895660 156.09420776]
[94.20497894 141.10719299]
[93.58100128 126.12017822]
[88.85176849 124.47824097]
[84.50871277 121.98834229]
[80.70229340 118.73675537]
[77.56436920 114.83609772]
[63.24177170 119.29291534]
[48.91917419 123.74973297]
[34.59657669 128.20654297]
[27.46916199 142.31240845]
[12.42908764 147.16748047]
[-1.60063612 139.89132690]
[-6.29642296 124.80076599]
[1.12765408 110.84875488]
[16.26702118 106.31277466]
[30.13976097 113.88394928]
[44.46236038 109.42713165]
[58.78495789 104.97031403]
[73.10755157 100.51350403]
[76.66735840 86.61885071]
[86.86229706 76.52941895]
[100.79322052 73.11434937]
[105.39878845 58.83889008]
[110.00434875 44.56343079]
[114.60991669 30.28796768]
[118.91749573 15.91978455]
[122.92523956 1.46509588]
[126.93297577 -12.98959255]
[130.94071960 -27.44428062]
[134.94845581 -41.89896774]
[138.95620728 -56.35365677]
[142.96394348 -70.80834961]
[135.44003296 -84.44757080]
[139.71035767 -99.04959106]
[152.75964355 -106.13843536]
[156.76737976 -120.59312439]
[160.77513123 -135.04782104]
[149.13459778 -135.01585388]
[139.28385925 -140.54782104]
[133.60865784 -149.91821289]
[133.29132080 -160.52575684]
[138.07803345 -169.61157227]
[146.43029785 -174.97669983]
[138.98176575 -188.93484497]
[146.98216248 -201.49839783]
[147.29421997 -216.49514771]
[138.03996277 -232.38032532]
[147.63107300 -247.04356384]
[147.63107300 -262.04354858]
[133.37840271 -267.20468140]
[121.75247192 -276.93164062]
[114.15716553 -290.04983521]
[111.50966644 -304.97518921]
[114.12965393 -319.90542603]
[121.70076752 -333.03759766]
[133.30876160 -342.78594971]
[147.55189514 -347.97332764]
[162.71025085 -347.97332764]
[176.95338440 -342.78594971]
[188.56137085 -333.03759766]
[196.13247681 -319.90542603]
[198.75247192 -304.97518921]
[196.10496521 -290.04983521]
[188.50967407 -276.93164062]
[176.88374329 -267.20468140]
[162.63107300 -262.04354858]
[162.63107300 -247.04356384]
[170.97962952 -238.23397827]
[171.06405640 -225.69555664]
[162.29096985 -216.18309021]
[161.97891235 -201.18634033]
[169.44976807 -188.30085754]
[161.42704773 -174.66464233]
[171.69346619 -168.18920898]
[176.78163147 -155.87051392]
[189.71969604 -163.46041870]
[202.65774536 -171.05032349]
[215.59580994 -178.64022827]
[228.53385925 -186.23014832]
[241.47192383 -193.82005310]
[249.09793091 -208.33818054]
[265.49258423 -208.72245789]
[273.79043579 -194.57759094]
[265.45541382 -180.45458984]
[249.06182861 -180.88198853]
[236.12376404 -173.29208374]
[223.18571472 -165.70217896]
[210.24766541 -158.11227417]
[197.30960083 -150.52236938]
[184.37155151 -142.93244934]
[175.22981262 -131.04006958]
[171.22207642 -116.58538818]
[167.21432495 -102.13069916]
[174.75019836 -89.33435822]
[170.89169312 -74.61815643]
[157.41862488 -66.80060577]
[153.41088867 -52.34591675]
[149.40315247 -37.89122772]
[145.39540100 -23.43654060]
[141.38766479 -8.98185253]
[137.37992859 5.47283602]
[133.37219238 19.92752457]
[134.93722534 24.50203705]
[133.59893799 30.10920143]
[128.88537598 34.89353180]
[124.27980804 49.16899490]
[119.67424774 63.44445419]
[115.06867981 77.71991730]
[126.15666962 93.73133850]
[123.53088379 113.02938080]
[108.56802368 125.49620056]
[109.19199371 140.48321533]
[109.81597137 155.47023010]
[110.43994904 170.45724487]
[111.06392670 185.44427490]
[111.68790436 200.43128967]
[112.31188202 215.41830444]
[112.93585968 230.40531921]
[113.55983734 245.39233398]
[114.18381500 260.37933350]
[128.93682861 263.50979614]
[142.44746399 270.21154785]
[153.86643982 280.06332397]
[162.47595215 292.44586182]
[167.73480225 306.58078003]
[169.31240845 321.57949829]
[167.10960388 336.49923706]
[161.26484680 350.40209961]
[152.14556885 362.41415405]
[140.32499695 371.78030396]
[126.54618835 377.91180420]
[111.67528534 380.42321777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 37]
[25 36]
[26 35]
[27 34]
[40 126]
[41 125]
[42 124]
[43 123]
[44 120]
[45 119]
[46 118]
[47 117]
[48 116]
[49 115]
[50 114]
[53 111]
[54 110]
[55 109]
[61 91]
[63 89]
[64 88]
[66 85]
[67 84]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
