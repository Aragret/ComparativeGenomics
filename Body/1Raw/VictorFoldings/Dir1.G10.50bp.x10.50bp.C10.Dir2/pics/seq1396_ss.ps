%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUAAACCUCAACGGGGGGGGGGAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAxxxxxxxxxxCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACCCCCCCCCCCAGCCCUAGACCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[51.14516449 443.45446777]
[36.91675568 438.58377075]
[23.75038528 431.31619263]
[12.04616547 421.87255859]
[2.15977287 410.53982544]
[-5.60835648 397.66244507]
[-11.02215767 383.63168335]
[-13.91711140 368.87396240]
[-14.20524311 353.83773804]
[-11.87779713 338.97994995]
[-7.00550175 324.75210571]
[0.26357952 311.58654785]
[9.70854759 299.88339233]
[21.04238129 289.99829102]
[33.92065430 282.23162842]
[47.95201874 276.81939697]
[62.71006775 273.92611694]
[62.42098236 258.92892456]
[62.13189697 243.93170166]
[61.84281158 228.93449402]
[61.55372620 213.93727112]
[61.26464081 198.94006348]
[60.97555161 183.94284058]
[60.68646622 168.94563293]
[60.39738083 153.94841003]
[60.10829544 138.95120239]
[48.39371109 129.58271790]
[33.69982147 132.59762573]
[19.00593567 135.61253357]
[4.31204891 138.62745667]
[-0.46101940 153.22586060]
[-11.90452957 163.46995544]
[-26.94023514 166.60414124]
[-41.52360535 161.78533936]
[-51.73178864 150.30978394]
[-54.81883240 135.26432800]
[-49.95434189 120.69612885]
[-38.44683456 110.52396393]
[-23.39177895 107.48410034]
[-8.83890343 112.39422607]
[1.29713893 123.93356323]
[15.99102592 120.91865540]
[30.68491364 117.90373993]
[45.37879944 114.88883209]
[47.96770477 100.11393738]
[35.17432785 92.28262329]
[22.38094902 84.45130920]
[9.58757210 76.61998749]
[-3.20580554 68.78867340]
[-15.93766975 71.04053497]
[-26.44354630 64.21577454]
[-29.36665344 52.44680405]
[-42.00672913 44.37038422]
[-58.40470123 44.17407608]
[-66.19665527 29.74433136]
[-57.36689377 15.92523670]
[-40.99872208 16.93269157]
[-33.93030930 31.73031044]
[-21.29023552 39.80673218]
[-3.76257753 39.62747574]
[4.62550926 55.99530029]
[17.41888618 63.82661438]
[30.21226501 71.65792847]
[43.00564194 79.48924255]
[55.79901886 87.32055664]
[62.32183838 77.83315277]
[70.65823364 70.72741699]
[80.05409241 66.27928162]
[89.73887634 64.54537964]
[88.58361053 49.58993149]
[73.87448120 46.05485916]
[60.97872925 38.14570618]
[51.15974045 26.63732910]
[45.37948608 12.65720558]
[44.20425797 -2.42503619]
[47.74918747 -17.13179207]
[55.66697693 -30.02224350]
[67.18193054 -39.83351517]
[81.16592407 -45.60440063]
[96.24894714 -46.76952362]
[110.95333099 -43.21474075]
[123.83847046 -35.28831482]
[133.64202881 -23.76679039]
[139.40353394 -9.77893257]
[140.55856323 5.30487013]
[136.99392700 20.00686264]
[129.05885315 32.88669205]
[117.53076935 42.68252182]
[103.53905487 48.43466187]
[104.69432831 63.39010620]
[117.73146057 67.62846375]
[128.32255554 76.33243561]
[141.54711914 69.25351715]
[154.77166748 62.17460251]
[167.99623108 55.09568405]
[181.08190918 47.76321411]
[194.02383423 40.17991257]
[206.96575928 32.59661102]
[208.60830688 17.27968407]
[218.83544922 5.99877167]
[233.56988525 2.93926144]
[247.11834717 9.06927109]
[260.06027222 1.48596895]
[273.00219727 -6.09733248]
[285.94412231 -13.68063450]
[298.88607788 -21.26393700]
[306.51950073 -35.77816391]
[322.91433716 -36.15407944]
[331.20498657 -22.00497246]
[322.86273193 -7.88623142]
[306.46936035 -8.32200623]
[293.52743530 -0.73870504]
[280.58551025 6.84459686]
[267.64358521 14.42789841]
[254.70164490 22.01119995]
[253.42642212 36.82712936]
[243.55471802 48.18553925]
[228.71414185 51.59301376]
[214.54907227 45.53853989]
[201.60713196 53.12184143]
[188.66520691 60.70514297]
[186.60563660 65.06242371]
[181.76196289 68.14888000]
[175.07514954 68.32024384]
[161.85058594 75.39916229]
[148.62603760 82.47808075]
[135.40147400 89.55699158]
[137.91244507 99.35986328]
[137.68606567 109.74681854]
[134.59497070 119.94835663]
[128.72911072 129.17068481]
[120.39889526 136.65719604]
[110.12102509 141.74971008]
[98.58732605 143.94448853]
[86.61843872 142.93858337]
[75.10550690 138.66212463]
[75.39459229 153.65933228]
[75.68368530 168.65653992]
[75.97277069 183.65376282]
[76.26185608 198.65097046]
[76.55094147 213.64819336]
[76.84002686 228.64540100]
[77.12911224 243.64260864]
[77.41819763 258.63983154]
[77.70728302 273.63705444]
[92.56587219 275.95944214]
[106.79537964 280.82690430]
[119.96340179 288.09149170]
[131.66975403 297.53247070]
[141.55873108 308.86294556]
[149.32977295 321.73858643]
[154.74674988 335.76809692]
[157.64506531 350.52517700]
[157.93659973 365.56130981]
[155.61251831 380.41964722]
[150.74345398 394.64862061]
[143.47735596 407.81579590]
[134.03504944 419.52108765]
[122.70346069 429.40878296]
[109.82694244 437.17834473]
[95.79681396 442.59375000]
[81.03941345 445.49038696]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 145]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[24 138]
[25 137]
[26 136]
[27 44]
[28 43]
[29 42]
[30 41]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[52 59]
[53 58]
[69 90]
[70 89]
[92 127]
[93 126]
[94 125]
[95 124]
[96 121]
[97 120]
[98 119]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
