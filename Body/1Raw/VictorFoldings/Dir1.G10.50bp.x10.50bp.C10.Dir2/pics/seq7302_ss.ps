%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCCUCCAGGGGGGGGGGUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAxxxxxxxxxxACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCCCCCCCCCCCGAACCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[16.08927917 215.54492188]
[7.45583582 208.75300598]
[-0.62998164 201.31755066]
[-8.12032604 193.28254700]
[-14.97087479 184.69555664]
[-21.14108849 175.60737610]
[-26.59445572 166.07180786]
[-31.29870796 156.14524841]
[-35.22600555 145.88645935]
[-38.35311127 135.35614014]
[-53.06107330 138.30162048]
[-67.76903534 141.24710083]
[-82.47699738 144.19258118]
[-94.48915100 154.48912048]
[-108.48796844 149.40165710]
[-123.19593048 152.34713745]
[-137.90390015 155.29261780]
[-152.61186218 158.23809814]
[-167.31982422 161.18359375]
[-182.02778625 164.12907410]
[-196.73574829 167.07455444]
[-211.44369507 170.02003479]
[-219.26440430 180.32975769]
[-231.62211609 182.45246887]
[-241.76303101 175.78393555]
[-256.52908325 178.42279053]
[-259.75067139 193.27842712]
[-268.41613770 205.76754761]
[-281.20404053 213.98565674]
[-296.16436768 216.67956543]
[-311.01577759 213.43844604]
[-323.49346924 204.75656128]
[-331.69476318 191.95782471]
[-334.36895752 176.99397278]
[-331.10830688 162.14686584]
[-322.41003418 149.68058777]
[-309.60052490 141.49613953]
[-294.63314819 138.84161377]
[-279.79034424 142.12179565]
[-267.33554077 150.83648682]
[-259.16793823 163.65673828]
[-244.40188599 161.01788330]
[-231.65464783 148.99673462]
[-214.38919067 155.31207275]
[-199.68122864 152.36659241]
[-184.97326660 149.42111206]
[-170.26530457 146.47563171]
[-155.55734253 143.53013611]
[-140.84938049 140.58465576]
[-126.14141846 137.63917542]
[-111.43345642 134.69369507]
[-100.47331238 124.60783386]
[-85.42247772 129.48461914]
[-70.71451569 126.53913879]
[-56.00655746 123.59365845]
[-41.29859543 120.64817047]
[-42.64395905 93.34112549]
[-38.76050568 66.27816772]
[-29.79058647 40.45133591]
[-16.06300735 16.80734253]
[1.91902804 -3.78710294]
[23.49636269 -20.57708359]
[47.87804794 -32.94713974]
[74.17033386 -40.44382477]
[101.40944672 -42.79234314]
[102.34507751 -57.76313400]
[103.28070831 -72.73392487]
[104.21633148 -87.70471954]
[105.15196228 -102.67550659]
[106.08759308 -117.64630127]
[92.56925201 -124.65874481]
[83.07693481 -136.56738281]
[79.25523376 -151.30897522]
[81.76628113 -166.32945251]
[90.17502594 -179.02641296]
[103.02460480 -187.20004272]
[118.08874512 -189.43420410]
[132.75750732 -185.34182739]
[144.48941040 -175.63192749]
[151.25186157 -161.98681641]
[151.87321472 -146.77058411]
[146.24580383 -132.61952209]
[135.34463501 -121.98542023]
[121.05838013 -116.71067047]
[120.12275696 -101.73988342]
[119.18712616 -86.76908875]
[118.25149536 -71.79829407]
[117.31587219 -56.82750702]
[116.38024139 -41.85671616]
[124.91780853 -40.60847473]
[133.36439514 -38.84688187]
[141.68917847 -36.57837296]
[149.86175537 -33.81122971]
[157.85229492 -30.55555153]
[165.63162231 -26.82322693]
[173.17132568 -22.62788010]
[180.44389343 -17.98483086]
[187.42276001 -12.91102982]
[194.08245850 -7.42499924]
[200.39866638 -1.54676986]
[206.34834290 4.70219803]
[211.90972900 11.29909039]
[217.06256104 18.21982193]
[221.78799438 25.43912506]
[226.06880188 32.93064499]
[229.88932800 40.66703033]
[233.23565674 48.62003326]
[236.09553528 56.76062012]
[238.45855713 65.05906677]
[240.31607056 73.48508453]
[241.66130066 82.00790405]
[242.48933411 90.59641266]
[242.79716492 99.21925354]
[242.58364868 107.84494019]
[241.84956360 116.44199371]
[240.59761047 124.97901154]
[238.83235168 133.42483521]
[236.56021118 141.74862671]
[233.78950500 149.91999817]
[230.53034973 157.90911865]
[226.79464722 165.68681335]
[239.73269653 173.27673340]
[252.67076111 180.86663818]
[268.49560547 178.22966003]
[280.32708740 189.06459045]
[279.08908081 205.05981445]
[265.73129272 213.94514465]
[250.50067139 208.90452576]
[245.08084106 193.80468750]
[232.14279175 186.21478271]
[219.20474243 178.62487793]
[212.80830383 187.55528259]
[205.74433899 195.96757507]
[198.05462646 203.81199646]
[189.78468323 211.04211426]
[180.98344421 217.61514282]
[171.70298767 223.49218750]
[161.99824524 228.63847351]
[151.92662048 233.02355957]
[141.54772949 236.62147522]
[130.92297363 239.41093445]
[120.11523438 241.37544250]
[109.18846893 242.50337219]
[98.20732880 242.78804016]
[87.23679352 242.22778320]
[76.34178925 240.82588196]
[65.58677673 238.59065247]
[55.03540421 235.53532410]
[44.75010681 231.67797852]
[34.79175186 227.04142761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 56]
[11 55]
[12 54]
[13 53]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[25 42]
[26 41]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
