%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACAUAGGGGGGGGGGCUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGAxxxxxxxxxxAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCCCCCCCCCCCUCCUUCAUA\
) } def
/len { sequence length } bind def

/coor [
[126.66029358 606.26507568]
[112.81436157 600.24908447]
[101.10569763 590.71966553]
[92.40317535 578.38397217]
[87.35256958 564.15747070]
[86.32868195 549.09576416]
[89.40747833 534.31665039]
[96.36049652 520.91668701]
[106.67178345 509.89035034]
[119.57616425 502.05584717]
[134.11605835 497.99453735]
[134.11605835 482.99453735]
[134.11605835 467.99453735]
[134.11605835 452.99453735]
[134.11605835 437.99453735]
[134.11605835 422.99453735]
[134.11605835 407.99453735]
[134.11605835 392.99453735]
[134.11605835 377.99453735]
[134.11605835 362.99453735]
[136.07528687 335.71557617]
[152.81336975 324.53320312]
[148.50578308 310.16500854]
[144.19819641 295.79684448]
[130.66410828 295.70404053]
[117.69255829 291.78280640]
[106.34526825 284.34414673]
[97.55384064 273.98733521]
[92.04325104 261.55169678]
[90.27210236 248.04861450]
[92.39443207 234.57917786]
[98.24641418 222.24446106]
[107.35892487 212.05557251]
[118.99515533 204.85063171]
[115.28899384 190.31568909]
[111.58283234 175.78076172]
[107.87667084 161.24581909]
[104.17050934 146.71087646]
[84.88970947 146.75222778]
[66.34986877 138.81440735]
[51.84457397 123.55310059]
[44.23557663 102.97196960]
[45.40927505 80.17144775]
[31.75303459 73.96603394]
[18.09679413 67.76062775]
[4.44055223 61.55522156]
[-12.48098183 60.50735855]
[-16.15841293 43.95704651]
[-1.27290845 35.84174728]
[10.64595890 47.89898300]
[24.30220032 54.10438919]
[37.95844269 60.30979538]
[51.61468124 66.51520538]
[61.00184631 54.81557846]
[51.98431396 42.82874680]
[37.50503540 36.45214462]
[36.03684616 21.63007736]
[20.41692924 17.96978569]
[13.67025757 3.41430688]
[20.97229958 -10.87064075]
[36.72155380 -13.92686844]
[48.83654022 -3.40989876]
[48.02367783 12.61254883]
[61.85796356 18.13177109]
[63.97114563 33.81121826]
[72.98867798 45.79804993]
[87.31127167 41.34123230]
[87.93524933 26.35421753]
[88.55922699 11.36720181]
[74.75485229 5.00265026]
[64.44054413 -6.16352892]
[59.18917084 -20.42857552]
[59.80152893 -35.61717224]
[66.18423462 -49.41316605]
[77.36396790 -59.71277618]
[91.63591003 -64.94537354]
[106.82369232 -64.31304169]
[120.61128235 -57.91219330]
[130.89616394 -46.71891785]
[136.11000061 -32.44010544]
[135.45767212 -17.25317192]
[129.03869629 -3.47401500]
[117.83190155 6.79614353]
[103.54624176 11.99117947]
[102.92226410 26.97819519]
[102.29829407 41.96520996]
[114.12001801 49.44640350]
[122.69522095 58.96066666]
[131.96017456 47.16402817]
[133.74688721 30.86250496]
[148.86468506 24.50765610]
[161.76167297 34.63680649]
[159.17053223 50.82995605]
[143.75680542 56.42897797]
[134.49185181 68.22561646]
[142.68740845 80.58133698]
[146.61614990 94.87805939]
[145.88536072 109.68673706]
[140.56811523 123.52717590]
[131.19586182 135.01596069]
[118.70544434 143.00471497]
[122.41160583 157.53965759]
[126.11776733 172.07460022]
[129.82392883 186.60952759]
[133.53009033 201.14447021]
[150.05076599 202.56590271]
[165.07337952 209.52488708]
[176.80447388 221.17144775]
[183.85011292 236.09713745]
[185.38148499 252.50532532]
[181.23237610 268.42755127]
[171.91702271 281.95959473]
[158.56639099 291.48925781]
[162.87396240 305.85742188]
[167.18154907 320.22561646]
[177.73284912 330.88723755]
[192.05543518 335.34405518]
[206.37803650 339.80087280]
[222.24720764 335.66549683]
[233.56893921 347.52929688]
[228.69641113 363.18786621]
[212.64205933 366.53298950]
[201.92121887 354.12347412]
[187.59863281 349.66665649]
[173.27603149 345.20983887]
[167.23603821 349.65600586]
[179.42607117 358.39691162]
[174.87989807 372.69137573]
[159.88018799 372.78494263]
[155.15605164 358.54837036]
[149.11605835 362.99453735]
[149.11605835 377.99453735]
[149.11605835 392.99453735]
[149.11605835 407.99453735]
[149.11605835 422.99453735]
[149.11605835 437.99453735]
[149.11605835 452.99453735]
[149.11605835 467.99453735]
[149.11605835 482.99453735]
[149.11605835 497.99453735]
[163.65594482 502.05584717]
[176.56031799 509.89035034]
[186.87159729 520.91668701]
[193.82463074 534.31665039]
[196.90342712 549.09576416]
[195.87953186 564.15747070]
[190.82893372 578.38397217]
[182.12640381 590.71966553]
[170.41773987 600.24908447]
[156.57180786 606.26507568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 115]
[23 114]
[24 113]
[34 105]
[35 104]
[36 103]
[37 102]
[38 101]
[43 53]
[44 52]
[45 51]
[46 50]
[54 66]
[55 65]
[57 63]
[67 86]
[68 85]
[69 84]
[88 95]
[89 94]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
