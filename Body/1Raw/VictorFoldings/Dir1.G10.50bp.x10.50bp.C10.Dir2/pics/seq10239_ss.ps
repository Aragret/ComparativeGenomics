%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUGCCUAGGGGGGGGGGCGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUxxxxxxxxxxUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCCCCCCCCCCCAUGUGCCUA\
) } def
/len { sequence length } bind def

/coor [
[81.04508972 340.76229858]
[67.82489014 333.48980713]
[56.93808746 323.04281616]
[49.12695694 310.13357544]
[44.92407608 295.64224243]
[44.61600494 280.55691528]
[48.22374725 265.90609741]
[55.50131989 252.68870544]
[65.95252991 241.80593872]
[78.86479187 233.99978638]
[93.35772705 229.80250549]
[93.04566956 214.80574036]
[92.73361206 199.80899048]
[92.42155457 184.81224060]
[92.10949707 169.81549072]
[91.79744720 154.81872559]
[91.48538971 139.82197571]
[91.17333221 124.82522583]
[90.86127472 109.82846832]
[84.65586853 96.17222595]
[73.56455231 86.07357788]
[62.47323608 75.97492981]
[51.38192368 65.87628174]
[40.29060745 55.77762985]
[29.19929123 45.67898178]
[18.10797501 35.58033371]
[6.89536476 45.56507492]
[-5.29952669 54.32305908]
[-18.34308434 61.75833511]
[-32.09239578 67.78943634]
[-46.39681625 72.35027313]
[-61.09961700 75.39089203]
[-76.03971100 76.87796783]
[-91.05339813 76.79520416]
[-105.97618866 75.14350891]
[-120.64456940 71.94098663]
[-134.89784241 67.22271729]
[-148.57981873 61.04040527]
[-161.54061890 53.46178055]
[-173.63821411 44.56988144]
[-184.74006653 34.46213150]
[-194.72453308 23.24927902]
[-203.48222351 11.05417538]
[-210.91719055 -1.98956299]
[-216.94795227 -15.73902035]
[-221.50843811 -30.04355049]
[-224.54870605 -44.74642563]
[-226.03541565 -59.68655396]
[-225.95228577 -74.70024109]
[-224.30023193 -89.62299347]
[-221.09735107 -104.29129791]
[-216.37873840 -118.54444885]
[-210.19609070 -132.22628784]
[-202.61715698 -145.18688965]
[-193.72496033 -157.28427124]
[-183.61694336 -168.38587952]
[-172.40383911 -178.37007141]
[-160.20852661 -187.12747192]
[-147.16461182 -194.56211853]
[-133.41500854 -200.59254456]
[-119.11036682 -205.15269470]
[-104.40741730 -208.19259644]
[-89.46724701 -209.67893982]
[-74.45356750 -209.59544373]
[-59.53085709 -207.94303894]
[-44.86262512 -204.73979187]
[-30.60958672 -200.02084351]
[-16.92790222 -193.83786011]
[-3.96747732 -186.25860596]
[8.12968731 -177.36611938]
[19.23104858 -167.25782776]
[29.21497154 -156.04449463]
[37.97206879 -143.84895325]
[45.40639496 -130.80485535]
[51.43649292 -117.05510712]
[55.99629211 -102.75035858]
[59.03583527 -88.04733276]
[60.52182007 -73.10713959]
[60.43796158 -58.09345245]
[58.78518295 -43.17078400]
[55.58159256 -28.50263214]
[50.86228561 -14.24970722]
[44.67897415 -0.56817263]
[37.09940720 12.39206886]
[28.20662498 24.48901749]
[39.29793930 34.58766556]
[50.38925552 44.68631744]
[61.48057175 54.78496552]
[72.57188416 64.88361359]
[83.66320038 74.98226166]
[94.75451660 85.08091736]
[87.73234558 71.82614136]
[88.60176849 56.85135651]
[97.11071777 44.49830627]
[110.79212952 38.34859467]
[125.67926025 40.18524551]
[137.45579529 49.47574615]
[142.70726013 63.52644348]
[139.91108704 78.26351929]
[129.87797546 89.41415405]
[115.51934814 93.74532318]
[130.49905396 94.52516937]
[145.47877502 95.30501556]
[160.45848083 96.08486176]
[165.44894409 81.82750702]
[174.25514221 69.55446625]
[186.16319275 60.26064301]
[200.20774841 54.69945145]
[215.25030518 53.32171631]
[230.07142639 56.23911667]
[243.46961975 63.21515656]
[254.35874939 73.68431854]
[261.85610962 86.79792023]
[265.35388184 101.49288940]
[264.56854248 116.57798004]
[259.56378174 130.83030701]
[250.74525452 143.09449768]
[238.82788086 152.37635803]
[224.77772522 157.92343140]
[209.73379517 159.28605652]
[194.91561890 156.35377502]
[181.52444458 149.36427307]
[170.64582825 138.88417053]
[163.16166687 125.76305389]
[159.67864990 111.06457520]
[144.69892883 110.28472900]
[129.71920776 109.50488281]
[114.73950195 108.72503662]
[111.62169647 109.70938873]
[108.61060333 109.95121765]
[105.85803223 109.51641083]
[106.17008209 124.51316833]
[106.48213959 139.50991821]
[106.79419708 154.50666809]
[107.10625458 169.50343323]
[107.41831207 184.50018311]
[107.73036957 199.49693298]
[108.04241943 214.49368286]
[108.35447693 229.49044800]
[123.00946808 233.08120728]
[136.23527527 240.34347534]
[147.13014221 250.78205872]
[154.95124817 263.68527222]
[159.16531372 278.17333984]
[159.48503113 293.25845337]
[155.88861084 307.91204834]
[148.62124634 321.13504028]
[138.17845154 332.02587891]
[125.27221680 339.84201050]
[110.78252411 344.05047607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[101 128]
[102 127]
[103 126]
[104 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
