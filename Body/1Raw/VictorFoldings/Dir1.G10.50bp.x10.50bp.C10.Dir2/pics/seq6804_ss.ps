%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUUCUAGGGGGGGGGGUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUxxxxxxxxxxAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCCCCCCCCCCCAUACUA\
) } def
/len { sequence length } bind def

/coor [
[98.31432343 536.85858154]
[84.46839142 530.84259033]
[72.75972748 521.31317139]
[64.05720520 508.97750854]
[59.00659943 494.75097656]
[57.98270798 479.68930054]
[61.06150818 464.91012573]
[68.01452637 451.51022339]
[78.32581329 440.48388672]
[91.23019409 432.64938354]
[105.77008057 428.58804321]
[105.77008057 413.58804321]
[105.77008057 398.58804321]
[105.77008057 383.58804321]
[105.77008057 368.58804321]
[105.77008057 353.58804321]
[105.77008057 338.58804321]
[105.77008057 323.58804321]
[105.77008057 308.58804321]
[105.77008057 293.58804321]
[91.41806793 290.87606812]
[77.80995178 285.55862427]
[65.41448212 277.81726074]
[54.65892029 267.91696167]
[45.91434860 256.19729614]
[39.48284531 243.06051636]
[35.58705139 228.95794678]
[34.36247253 214.37434387]
[35.85276031 199.81134033]
[40.00816345 185.77012634]
[46.68717575 172.73423767]
[55.66136551 161.15283203]
[66.62318420 151.42532349]
[79.19651794 143.88751221]
[92.94955444 138.80004883]
[107.40966797 136.33938599]
[107.72171783 121.34263611]
[84.55995178 112.71574402]
[85.15557098 91.10056305]
[76.90328217 78.57460022]
[68.65099335 66.04863739]
[60.39870453 53.52267456]
[49.20293808 43.53994751]
[35.81665421 36.77183533]
[22.36068726 30.14333534]
[8.83649826 23.65517044]
[-7.46481466 25.44381142]
[-16.94498444 12.06254196]
[-9.85162640 -2.72313738]
[6.51822186 -3.70298576]
[15.32466316 10.13098049]
[28.84885406 16.61914635]
[36.28809357 16.67706680]
[42.58477020 23.38554955]
[55.97105408 30.15366364]
[48.06582642 17.40582657]
[43.25117111 3.19952059]
[41.77700424 -11.72786427]
[43.71984100 -26.60151291]
[48.97883606 -40.64939499]
[57.28101349 -53.14234543]
[68.19544983 -63.43190765]
[81.15561676 -70.98399353]
[95.48880768 -75.40661621]
[110.45105743 -76.47019958]
[125.26572418 -74.11955261]
[139.16384888 -68.47667694]
[151.42404175 -59.83446884]
[161.40992737 -48.64152145]
[168.60317993 -35.47880173]
[172.63043213 -21.02953529]
[173.28262329 -6.04372120]
[170.52593994 8.70079136]
[164.50343323 22.43867683]
[155.52772522 34.45685959]
[144.06471252 44.13152695]
[130.70938110 50.96051025]
[116.15493774 54.58934402]
[101.15686798 54.82966995]
[86.49363708 51.66901779]
[72.92466736 45.27038574]
[81.17695618 57.79634857]
[89.42924500 70.32231140]
[97.68153381 82.84827423]
[111.72790527 83.79687500]
[122.31595612 95.86102295]
[135.09332275 88.00360107]
[147.87066650 80.14617157]
[160.64802551 72.28874969]
[156.49114990 57.77589417]
[156.40509033 42.67969894]
[160.39624023 28.12039566]
[168.16842651 15.17838383]
[179.14489746 4.81404543]
[192.51113892 -2.20351529]
[207.27528381 -5.35354948]
[222.34173584 -4.40230370]
[236.59243774 0.57963336]
[248.96994019 9.22256851]
[258.55569458 20.88513947]
[264.63842773 34.70190430]
[266.76672363 49.64757156]
[264.78268433 64.61306763]
[258.83349609 78.48785400]
[249.36065674 90.24234009]
[237.06709290 99.00424957]
[222.86509705 104.12339783]
[207.80851746 105.21990967]
[193.01469421 102.21241760]
[179.58139038 95.32409668]
[168.50546265 85.06610870]
[155.72810364 92.92353058]
[142.95074463 100.78096008]
[130.17338562 108.63838196]
[122.71847534 121.65469360]
[122.40641785 136.65144348]
[137.47561646 139.94203186]
[151.61514282 146.09341431]
[164.28778076 154.86991882]
[175.01242065 165.93618774]
[183.38233948 178.86991882]
[189.08061218 193.17810059]
[191.89212036 208.31570435]
[191.71168518 223.70649719]
[188.54795837 238.76495361]
[182.52305603 252.91854858]
[173.86785889 265.62951660]
[162.91314697 276.41528320]
[150.07695007 284.86682129]
[135.84858704 290.66403198]
[120.77008057 293.58804321]
[120.77008057 308.58804321]
[120.77008057 323.58804321]
[120.77008057 338.58804321]
[120.77008057 353.58804321]
[120.77008057 368.58804321]
[120.77008057 383.58804321]
[120.77008057 398.58804321]
[120.77008057 413.58804321]
[120.77008057 428.58804321]
[135.30996704 432.64938354]
[148.21435547 440.48388672]
[158.52563477 451.51022339]
[165.47865295 464.91012573]
[168.55744934 479.68930054]
[167.53356934 494.75097656]
[162.48295593 508.97750854]
[153.78044128 521.31317139]
[142.07177734 530.84259033]
[128.22583008 536.85858154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 116]
[37 115]
[39 84]
[40 83]
[41 82]
[42 81]
[43 55]
[44 54]
[45 52]
[46 51]
[86 114]
[87 113]
[88 112]
[89 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
