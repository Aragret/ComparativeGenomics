%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUAGGAAGGGGGGGGGGAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAxxxxxxxxxxUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUCCCCCCCCCCACAGUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 418.38430786]
[71.19830322 412.36828613]
[59.48964310 402.83886719]
[50.78712082 390.50320435]
[45.73651886 376.27667236]
[44.71262741 361.21499634]
[47.79142761 346.43585205]
[54.74444962 333.03591919]
[65.05573273 322.00958252]
[77.96011353 314.17507935]
[92.50000000 310.11376953]
[92.50000000 295.11376953]
[92.50000000 280.11376953]
[92.50000000 265.11376953]
[92.50000000 250.11375427]
[92.50000000 235.11375427]
[92.50000000 220.11375427]
[92.50000000 205.11375427]
[92.50000000 190.11375427]
[92.50000000 175.11375427]
[92.50000000 160.11375427]
[92.50000000 145.11375427]
[92.50000000 130.11375427]
[85.19066620 127.27218628]
[78.82702637 122.68907166]
[73.81545258 116.65707397]
[59.58867264 121.41088867]
[51.16678238 135.06559753]
[35.22344589 136.85156250]
[23.98903084 125.39872742]
[26.08161545 109.49272919]
[39.89595032 101.33529663]
[54.83485794 107.18410492]
[69.06163788 102.43029022]
[66.80970001 94.40503693]
[66.75841522 85.45736694]
[55.30988312 91.48936462]
[43.21480560 88.18360138]
[36.84823608 77.85044861]
[22.35264015 73.99328613]
[7.85704279 70.13612366]
[-6.63855362 66.27896881]
[-23.49984550 68.04904938]
[-29.86842155 52.33671188]
[-16.53312683 41.86741257]
[-2.78139424 51.78337097]
[11.71420288 55.64052963]
[26.20979881 59.49768829]
[40.70539474 63.35485077]
[57.34185028 57.85682297]
[70.31317902 70.88466644]
[82.57554626 62.24554825]
[84.13312531 47.32663727]
[85.69070435 32.40772247]
[87.24828339 17.48881149]
[85.01743317 8.56271839]
[88.99661255 2.27687716]
[90.86421967 -12.60640240]
[92.73183441 -27.48968315]
[83.30821228 -39.89263153]
[85.41426086 -54.95978928]
[97.29664612 -63.86733627]
[99.16426086 -78.75061798]
[101.03187561 -93.63389587]
[102.89949036 -108.51717377]
[88.74175262 -113.66560364]
[76.08489990 -121.83577728]
[65.56378174 -132.61788940]
[57.70615005 -145.47111511]
[52.90612411 -159.75073242]
[51.40448380 -174.74047852]
[53.27653885 -189.68850708]
[58.42839813 -203.84498596]
[66.60163879 -216.49986267]
[77.38629913 -227.01835632]
[90.24142456 -234.87287903]
[104.52220917 -239.66944885]
[119.51232910 -241.16746521]
[134.45988464 -239.29177856]
[148.61512756 -234.13648987]
[161.26802063 -225.96018982]
[171.78390503 -215.17297363]
[179.63531494 -202.31594849]
[184.42842102 -188.03399658]
[185.92279053 -173.04351807]
[184.04348755 -158.09642029]
[178.88478088 -143.94242859]
[170.70539856 -131.29151917]
[159.91564941 -120.77824402]
[147.05671692 -112.92995453]
[132.77360535 -108.14031219]
[117.78276825 -106.64955902]
[115.91515350 -91.76628113]
[114.04753876 -76.88300323]
[112.17992401 -61.99972153]
[121.49305725 -50.43247604]
[119.81105042 -35.31211090]
[107.61511230 -25.62207031]
[105.74750519 -10.73878956]
[103.87989044 4.14449024]
[102.16719818 19.04639244]
[100.60961914 33.96530533]
[99.05204010 48.88421631]
[97.49445343 63.80313110]
[121.04918671 73.73535919]
[130.68302917 95.34809113]
[145.61734009 96.75038910]
[160.55165100 98.15269470]
[175.01470947 91.73941803]
[186.96290588 100.63266754]
[201.89721680 102.03496552]
[216.83152771 103.43727112]
[231.76583862 104.83957672]
[246.43859863 97.51551056]
[259.96670532 106.78493500]
[258.43359375 123.11225891]
[243.41641235 129.70133972]
[230.36352539 119.77388000]
[215.42922974 118.37158203]
[200.49491882 116.96927643]
[185.56060791 115.56697083]
[172.16574097 122.08055115]
[159.14933777 113.08700562]
[144.21502686 111.68470001]
[129.28073120 110.28239441]
[124.37531281 119.20761871]
[116.84472656 126.06422424]
[107.50000000 130.11375427]
[107.50000000 145.11375427]
[107.50000000 160.11375427]
[107.50000000 175.11375427]
[107.50000000 190.11375427]
[107.50000000 205.11375427]
[107.50000000 220.11375427]
[107.50000000 235.11375427]
[107.50000000 250.11375427]
[107.50000000 265.11376953]
[107.50000000 280.11376953]
[107.50000000 295.11376953]
[107.50000000 310.11376953]
[122.03988647 314.17507935]
[134.94427490 322.00958252]
[145.25555420 333.03591919]
[152.20857239 346.43585205]
[155.28736877 361.21499634]
[154.26348877 376.27667236]
[149.21287537 390.50320435]
[140.51036072 402.83886719]
[128.80169678 412.36828613]
[114.95575714 418.38430786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 34]
[27 33]
[36 51]
[39 49]
[40 48]
[41 47]
[42 46]
[52 104]
[53 103]
[54 102]
[55 101]
[57 100]
[58 99]
[59 98]
[62 95]
[63 94]
[64 93]
[65 92]
[106 125]
[107 124]
[108 123]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
