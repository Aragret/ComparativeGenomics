%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCACCCUGGGGGGGGGGAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAxxxxxxxxxxCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCCCCCCCCCCCAUCACCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.12719727]
[71.19830322 376.11114502]
[59.48964310 366.58172607]
[50.78712082 354.24606323]
[45.73651886 340.01956177]
[44.71262741 324.95785522]
[47.79142761 310.17871094]
[54.74444962 296.77877808]
[65.05573273 285.75244141]
[77.96011353 277.91793823]
[92.50000000 273.85662842]
[92.50000000 258.85662842]
[92.50000000 243.85662842]
[92.50000000 228.85662842]
[92.50000000 213.85662842]
[92.50000000 198.85662842]
[92.50000000 183.85662842]
[92.50000000 168.85662842]
[92.50000000 153.85662842]
[92.50000000 138.85662842]
[73.67684174 137.59420776]
[55.20946884 126.83411407]
[41.68527603 133.32228088]
[28.16108704 139.81045532]
[21.50484467 154.40750122]
[5.90793657 158.16462708]
[-6.66502523 148.19967651]
[-6.56913948 132.15690613]
[6.12203789 122.34296417]
[21.67292213 126.28625488]
[35.19711304 119.79809570]
[48.72130203 113.30992889]
[46.69896698 98.44688416]
[31.93291283 95.80801392]
[17.16685677 93.16915131]
[2.40080118 90.53028870]
[-12.36525440 87.89142609]
[-27.13130951 85.25255585]
[-42.07743073 90.44139862]
[-53.24502563 80.58573914]
[-69.90082550 83.75128937]
[-77.55344391 68.62271881]
[-65.13455963 57.08115387]
[-50.60615921 65.81967926]
[-36.71620560 60.44209290]
[-24.49244499 70.48650360]
[-9.72638988 73.12536621]
[5.03966570 75.76422882]
[19.80572128 78.40309906]
[34.57177734 81.04196167]
[49.33783340 83.68082428]
[56.24483109 70.36566925]
[45.58320618 59.81438065]
[34.92157745 49.26308823]
[18.93066978 45.62676239]
[14.34352207 29.88223457]
[25.87899971 18.22612953]
[41.67039108 22.64924622]
[45.47286987 38.60146332]
[56.13449478 49.15275192]
[66.79611969 59.70404434]
[76.53339386 55.38747025]
[86.60254669 53.28076935]
[96.52602386 53.33256531]
[105.86192322 55.39263916]
[114.22364807 59.22441101]
[121.29586792 64.52114105]
[126.84632874 70.92489624]
[138.92631531 62.03254318]
[131.36047363 49.06372833]
[125.21601868 35.36417770]
[120.56256866 21.08911133]
[117.45285797 6.40027905]
[115.92211151 -8.53588200]
[115.98767853 -23.55013466]
[117.64882660 -38.47235870]
[120.88671875 -53.13346863]
[125.66467285 -67.36734772]
[131.92854309 -81.01271057]
[139.60737610 -93.91494751]
[148.61415100 -105.92786407]
[158.84680176 -116.91534424]
[170.18940735 -126.75289917]
[182.51342773 -135.32905579]
[195.67924500 -142.54663086]
[209.53765869 -148.32386780]
[223.93165588 -152.59527588]
[238.69813538 -155.31248474]
[253.66978455 -156.44468689]
[268.67697144 -155.97906494]
[283.54962158 -153.92088318]
[298.11923218 -150.29348755]
[312.22076416 -145.13793945]
[325.69436646 -138.51268005]
[338.38739014 -130.49278259]
[350.15606689 -121.16911316]
[360.86697388 -110.64730835]
[370.39880371 -99.04660034]
[378.64349365 -86.49842072]
[385.50769043 -73.14495850]
[390.91360474 -59.13752365]
[394.79995728 -44.63481903]
[397.12271118 -29.80118179]
[397.85559082 -14.80468082]
[396.99023438 0.18475735]
[394.53646851 14.99729252]
[390.52212524 29.46508789]
[384.99267578 43.42420959]
[378.01074219 56.71649551]
[369.65545654 69.19132233]
[360.02151489 80.70735931]
[349.21801758 91.13410187]
[337.36746216 100.35341644]
[324.60403442 108.26084137]
[311.07241821 114.76678467]
[296.92590332 119.79751587]
[282.32479858 123.29603577]
[267.43450928 125.22270966]
[252.42381287 125.55570984]
[237.46275330 124.29125214]
[222.72087097 121.44367218]
[208.36517334 117.04522705]
[194.55834961 111.14576721]
[181.45683289 103.81212616]
[169.20906067 95.12740326]
[157.95384216 85.19001007]
[147.81866455 74.11253357]
[135.73867798 83.00488281]
[139.04206848 106.46559143]
[128.35200500 127.60890198]
[107.50000000 138.85662842]
[107.50000000 153.85662842]
[107.50000000 168.85662842]
[107.50000000 183.85662842]
[107.50000000 198.85662842]
[107.50000000 213.85662842]
[107.50000000 228.85662842]
[107.50000000 243.85662842]
[107.50000000 258.85662842]
[107.50000000 273.85662842]
[122.03988647 277.91793823]
[134.94427490 285.75244141]
[145.25555420 296.77877808]
[152.20857239 310.17871094]
[155.28736877 324.95785522]
[154.26348877 340.01956177]
[149.21287537 354.24606323]
[140.51036072 366.58172607]
[128.80169678 376.11114502]
[114.95575714 382.12719727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 32]
[23 31]
[24 30]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[40 44]
[52 61]
[53 60]
[54 59]
[68 128]
[69 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
