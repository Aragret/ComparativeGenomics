%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGAUCCCGGGGGGGGGGUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUAxxxxxxxxxxCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACCCCCCCCCCCAACAAUCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.47610474]
[71.19830322 384.46008301]
[59.48964310 374.93066406]
[50.78712082 362.59500122]
[45.73651886 348.36846924]
[44.71262741 333.30679321]
[47.79142761 318.52761841]
[54.74444962 305.12771606]
[65.05573273 294.10137939]
[77.96011353 286.26684570]
[92.50000000 282.20553589]
[92.50000000 267.20553589]
[92.50000000 252.20555115]
[92.50000000 237.20555115]
[92.50000000 222.20555115]
[92.50000000 207.20555115]
[92.50000000 192.20555115]
[92.50000000 177.20555115]
[92.50000000 162.20555115]
[92.50000000 147.20555115]
[92.50000000 132.20555115]
[84.89688110 129.41671753]
[78.19963837 124.86345673]
[72.80998993 118.81889343]
[69.05120087 111.64556885]
[67.14872742 103.77374268]
[52.24682617 102.06105042]
[37.34492111 100.34836578]
[22.44301987 98.63567352]
[7.54111767 96.92298889]
[17.73359871 107.92813873]
[20.50407791 122.67006683]
[15.00232983 136.62466431]
[2.91677046 145.50942993]
[-12.04369545 146.59776306]
[-25.28789139 139.55566406]
[-32.75134277 126.54425049]
[-32.14361191 111.55656433]
[-23.65120316 99.19213867]
[-9.87953377 93.24536133]
[-24.20213127 88.78854370]
[-38.52472687 84.33172607]
[-52.84732437 79.87490845]
[-69.76765442 80.94205475]
[-75.47711182 64.97839355]
[-61.71784973 55.07288742]
[-48.39051056 65.55231476]
[-34.06791306 70.00913239]
[-19.74531555 74.46594238]
[-5.42271805 78.92276001]
[9.25380707 82.02108002]
[24.15571022 83.73377228]
[39.05761337 85.44646454]
[53.95951462 87.15914917]
[68.86141968 88.87184143]
[79.57504272 73.99483490]
[96.56695557 67.11138153]
[114.61412048 70.33731842]
[124.12248230 58.73597717]
[133.63084412 47.13463593]
[122.99256134 36.54301071]
[113.42619324 24.97407722]
[105.02107239 12.53585434]
[97.85565948 -0.65552199]
[91.99686432 -14.47688484]
[87.49939728 -28.79918480]
[84.40524292 -43.48869705]
[82.74328613 -58.40826035]
[82.52906036 -73.41857910]
[83.76454926 -88.37949371]
[86.43823242 -103.15132904]
[90.52513123 -117.59614563]
[95.98709869 -131.57907104]
[102.77312469 -144.96957397]
[110.81986237 -157.64259338]
[120.05216980 -169.47982788]
[130.38385010 -180.37074280]
[141.71842957 -190.21365356]
[153.95008850 -198.91664124]
[166.96459961 -206.39846802]
[180.64047241 -212.58926392]
[194.85000610 -217.43124390]
[209.46052551 -220.87916565]
[224.33561707 -222.90086365]
[239.33638000 -223.47746277]
[254.32276917 -222.60356140]
[269.15484619 -220.28732300]
[283.69412231 -216.55038452]
[297.80487061 -211.42762756]
[311.35531616 -204.96688843]
[324.21893311 -197.22850037]
[336.27563477 -188.28468323]
[347.41281128 -178.21897888]
[357.52651978 -167.12536621]
[366.52230835 -155.10740662]
[374.31619263 -142.27732849]
[380.83538818 -128.75491333]
[386.01904297 -114.66643524]
[389.81875610 -100.14342499]
[392.19900513 -85.32148743]
[393.13763428 -70.33901215]
[392.62582397 -55.33589554]
[390.66839600 -40.45221710]
[387.28359985 -25.82694244]
[382.50302124 -11.59663010]
[376.37133789 2.10585165]
[368.94580078 15.15256405]
[360.29571533 27.42168999]
[350.50186157 38.79867554]
[339.65567017 49.17729187]
[327.85839844 58.46063232]
[315.22024536 66.56201935]
[301.85919189 73.40582275]
[287.89996338 78.92812347]
[273.47293091 83.07736969]
[258.71279907 85.81481934]
[243.75735474 87.11491394]
[228.74624634 86.96550751]
[213.81964111 85.36800385]
[199.11691284 82.33731842]
[184.77531433 77.90174866]
[170.92878723 72.10269928]
[157.70658875 64.99432373]
[145.23217773 56.64299393]
[135.72381592 68.24433899]
[126.21546173 79.84568024]
[132.66542053 94.86018372]
[131.13795471 111.12992096]
[122.00609589 124.68154907]
[107.50000000 132.20555115]
[107.50000000 147.20555115]
[107.50000000 162.20555115]
[107.50000000 177.20555115]
[107.50000000 192.20555115]
[107.50000000 207.20555115]
[107.50000000 222.20555115]
[107.50000000 237.20555115]
[107.50000000 252.20555115]
[107.50000000 267.20553589]
[107.50000000 282.20553589]
[122.03988647 286.26684570]
[134.94427490 294.10137939]
[145.25555420 305.12771606]
[152.20857239 318.52761841]
[155.28736877 333.30679321]
[154.26348877 348.36846924]
[149.21287537 362.59500122]
[140.51036072 374.93066406]
[128.80169678 384.46008301]
[114.95575714 390.47610474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[40 50]
[41 49]
[42 48]
[43 47]
[58 126]
[59 125]
[60 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
