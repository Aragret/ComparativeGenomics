%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAGGAAUGGGGGGGGGGCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCxxxxxxxxxxCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUCCCCCCCCCCUAGCAGGAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 377.81765747]
[71.19830322 371.80163574]
[59.48964310 362.27221680]
[50.78712082 349.93655396]
[45.73651886 335.71002197]
[44.71262741 320.64834595]
[47.79142761 305.86920166]
[54.74444962 292.46926880]
[65.05573273 281.44293213]
[77.96011353 273.60842896]
[92.50000000 269.54711914]
[92.50000000 254.54711914]
[92.50000000 239.54711914]
[92.50000000 224.54711914]
[92.50000000 209.54711914]
[92.50000000 194.54711914]
[92.50000000 179.54711914]
[92.50000000 164.54711914]
[92.50000000 149.54711914]
[92.50000000 134.54711914]
[74.87278748 124.86717224]
[65.37673950 107.14022064]
[50.37754822 106.98418427]
[35.37836075 106.82814789]
[20.37917137 106.67211151]
[31.65931511 116.55939484]
[35.94559860 130.93394470]
[31.92262077 145.38439941]
[20.82497787 155.47610474]
[6.05839777 158.11203003]
[-7.84544563 152.48324585]
[-16.61964035 140.31716919]
[-17.57149696 125.34739685]
[-10.40890217 112.16796875]
[2.67081356 104.82330322]
[-12.03714848 101.87782288]
[-26.74510956 98.93233490]
[-36.82654190 110.51940918]
[-51.35606766 115.49821472]
[-66.42531586 112.52947998]
[-77.98072815 102.41178131]
[-82.91397095 87.86672211]
[-79.89801025 72.80685425]
[-69.74413300 61.28320694]
[-55.18368530 56.39558411]
[-40.13334656 59.45873260]
[-28.64158630 69.64867401]
[-23.79962730 84.22437286]
[-9.09166527 87.16986084]
[5.61629581 90.11534119]
[20.53520775 91.67292023]
[35.53439713 91.82895660]
[50.53358459 91.98499298]
[65.53277588 92.14102936]
[70.18503571 81.00471497]
[78.31228638 72.08232880]
[88.96728516 66.41381073]
[100.90817261 64.65982056]
[112.74320221 67.02480316]
[120.99549103 54.49883652]
[129.24778748 41.97287750]
[117.67549896 32.40577316]
[107.20545197 21.64355087]
[97.96041107 9.81238747]
[90.04875946 -2.94899940]
[83.56326294 -16.49099159]
[78.57994843 -30.65481377]
[75.15726471 -45.27440643]
[73.33531952 -60.17835617]
[73.13548279 -75.19192505]
[74.56010437 -90.13909149]
[77.59246826 -104.84459686]
[82.19702911 -119.13603973]
[88.31980133 -132.84585571]
[95.88899994 -145.81329346]
[104.81587219 -157.88632202]
[114.99576569 -168.92340088]
[126.30931091 -178.79512024]
[138.62388611 -187.38574219]
[151.79507446 -194.59452820]
[165.66848755 -200.33699036]
[180.08145142 -204.54576111]
[194.86497498 -207.17153931]
[209.84573364 -208.18350220]
[224.84808350 -207.56980896]
[239.69613647 -205.33764648]
[254.21580505 -201.51318359]
[268.23684692 -196.14126587]
[281.59487915 -189.28486633]
[294.13330078 -181.02436829]
[305.70504761 -171.45664978]
[316.17453003 -160.69386292]
[325.41891479 -148.86219788]
[333.32989502 -136.10038757]
[339.81466675 -122.55805206]
[344.79721069 -108.39395905]
[348.21911621 -93.77418518]
[350.04025269 -78.87013245]
[350.23928833 -63.85655594]
[348.81384277 -48.90946579]
[345.78070068 -34.20412064]
[341.17535400 -19.91292953]
[335.05184937 -6.20344925]
[327.48196411 6.76358414]
[318.55444336 18.83613777]
[308.37396240 29.87266922]
[297.05987549 39.74377823]
[284.74484253 48.33373260]
[271.57327271 55.54181671]
[257.69955444 61.28352356]
[243.28636169 65.49153137]
[228.50268555 68.11650848]
[213.52188110 69.12767029]
[198.51956177 68.51316833]
[183.67163086 66.28020477]
[169.15216064 62.45495987]
[155.13140869 57.08228302]
[141.77374268 50.22516632]
[133.52145386 62.75112534]
[125.26916504 75.27709198]
[134.25578308 91.26535797]
[134.02210999 109.60464478]
[147.26469421 116.64978027]
[164.08792114 118.75109100]
[166.72586060 135.49855042]
[151.36314392 142.66957092]
[140.21955872 129.89236450]
[126.97697449 122.84722900]
[121.39415741 128.14326477]
[114.79765320 132.10580444]
[107.50000000 134.54711914]
[107.50000000 149.54711914]
[107.50000000 164.54711914]
[107.50000000 179.54711914]
[107.50000000 194.54711914]
[107.50000000 209.54711914]
[107.50000000 224.54711914]
[107.50000000 239.54711914]
[107.50000000 254.54711914]
[107.50000000 269.54711914]
[122.03988647 273.60842896]
[134.94427490 281.44293213]
[145.25555420 292.46926880]
[152.20857239 305.86920166]
[155.28736877 320.64834595]
[154.26348877 335.71002197]
[149.21287537 349.93655396]
[140.51036072 362.27221680]
[128.80169678 371.80163574]
[114.95575714 377.81765747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 54]
[23 53]
[24 52]
[25 51]
[35 50]
[36 49]
[37 48]
[59 120]
[60 119]
[61 118]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
