%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAACCUACGGGGGGGGGGCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAxxxxxxxxxxGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUCCCCCCCCCCACAAACUUAC\
) } def
/len { sequence length } bind def

/coor [
[76.36060333 365.85031128]
[62.51466370 359.83428955]
[50.80599976 350.30487061]
[42.10347748 337.96920776]
[37.05287552 323.74267578]
[36.02898407 308.68099976]
[39.10778427 293.90182495]
[46.06080627 280.50192261]
[56.37208939 269.47558594]
[69.27646637 261.64108276]
[83.81635284 257.57974243]
[83.81635284 242.57975769]
[83.81635284 227.57975769]
[83.81635284 212.57975769]
[83.81635284 197.57975769]
[83.81635284 182.57975769]
[83.81635284 167.57975769]
[83.81635284 152.57975769]
[83.81635284 137.57975769]
[83.81635284 122.57975769]
[85.94451141 95.97239685]
[75.73102570 84.98673248]
[63.55456161 88.12522125]
[51.27511597 85.77669525]
[41.23320389 78.45176697]
[35.31591034 67.60348511]
[34.60240555 55.33948898]
[39.16761780 44.01255417]
[29.41996574 32.61153412]
[13.90457535 31.22935486]
[4.18148136 19.52824020]
[5.59479332 4.74520493]
[-4.15285873 -6.65581608]
[-13.90051079 -18.05683708]
[-23.64816284 -29.45785904]
[-33.39581299 -40.85887909]
[-44.27463913 -51.18608475]
[-56.35462952 -60.07843399]
[-68.61699677 -68.71755219]
[-80.87936401 -77.35666656]
[-93.14173126 -85.99578094]
[-105.40409851 -94.63489532]
[-120.77995300 -92.14072418]
[-133.09266663 -101.07669830]
[-135.37573242 -115.75058746]
[-147.72731018 -124.26168060]
[-160.16674805 -132.64382935]
[-172.60618591 -141.02597046]
[-185.04562378 -149.40811157]
[-197.48506165 -157.79025269]
[-213.99914551 -161.62710571]
[-214.88378906 -178.55795288]
[-198.85949707 -184.09495544]
[-189.10292053 -170.22969055]
[-176.66348267 -161.84754944]
[-164.22404480 -153.46540833]
[-151.78460693 -145.08326721]
[-139.34515381 -136.70112610]
[-131.99308777 -135.56420898]
[-126.73661804 -128.01295471]
[-112.15045166 -130.80210876]
[-99.59159851 -122.21549225]
[-96.76498413 -106.89726257]
[-84.50261688 -98.25814819]
[-72.24024963 -89.61903381]
[-59.97787857 -80.97991943]
[-47.71551132 -72.34080505]
[-42.88113785 -72.27481842]
[-38.05157852 -69.12733459]
[-35.13290405 -63.07846451]
[-38.72652817 -77.64163208]
[-34.68948746 -92.08816528]
[-24.06676483 -102.67861938]
[-9.60801792 -106.67169189]
[4.94415092 -103.03379059]
[15.82295799 -92.70656586]
[20.21245575 -78.36318970]
[16.97643661 -63.71641159]
[6.95253468 -52.55749512]
[-7.26459455 -47.77489853]
[-21.99479294 -50.60653305]
[-12.24714184 -39.20550919]
[-2.49948978 -27.80448914]
[7.24816227 -16.40346909]
[16.99581528 -5.00244713]
[31.81888199 -4.10120201]
[41.86679840 7.32219505]
[40.82098770 22.86388206]
[50.56863785 34.26490402]
[68.03477478 32.02840424]
[83.50703430 40.75822067]
[90.75001526 57.15095139]
[86.71669006 74.77325439]
[96.93017578 85.75891876]
[111.10672760 90.66046906]
[125.92449188 88.32936096]
[138.35456848 78.54142761]
[152.12963867 84.20681763]
[166.94740295 81.87570953]
[181.76515198 79.54460907]
[196.58291626 77.21350098]
[199.46636963 62.33192062]
[207.26838684 49.33560562]
[219.04684448 39.79392242]
[233.37944031 34.85907745]
[248.53543091 35.12698364]
[262.68466187 40.56527710]
[274.11853027 50.51726913]
[281.45639038 63.78120422]
[283.81210327 78.75539398]
[280.90121460 93.63163757]
[273.07525635 106.61355591]
[261.27923584 116.13351440]
[246.93757629 121.04193878]
[231.78210449 120.74610138]
[217.64292908 115.28173828]
[206.22740173 105.30869293]
[198.91401672 92.03125763]
[184.09625244 94.36236572]
[169.27850342 96.69346619]
[154.46073914 99.02457428]
[143.09053040 108.64577484]
[128.25559998 103.14711761]
[113.43783569 105.47822571]
[128.39765930 106.57534790]
[138.75988770 117.42080688]
[139.17449951 132.41508484]
[129.42739868 143.81657410]
[114.55106354 145.73869324]
[102.22615814 137.18902588]
[98.81635284 122.57975769]
[98.81635284 137.57975769]
[98.81635284 152.57975769]
[98.81635284 167.57975769]
[98.81635284 182.57975769]
[98.81635284 197.57975769]
[98.81635284 212.57975769]
[98.81635284 227.57975769]
[98.81635284 242.57975769]
[98.81635284 257.57974243]
[113.35624695 261.64108276]
[126.26062775 269.47558594]
[136.57191467 280.50192261]
[143.52493286 293.90182495]
[146.60372925 308.68099976]
[145.57983398 323.74267578]
[140.52923584 337.96920776]
[131.82670593 350.30487061]
[120.11804962 359.83428955]
[106.27210999 365.85031128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 94]
[22 93]
[28 89]
[29 88]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[37 70]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[45 60]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[95 124]
[96 123]
[98 121]
[99 120]
[100 119]
[101 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
