%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUGUCUCGGGGGGGGGGUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACAxxxxxxxxxxCUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCCCCCCCCCCCAGGUGUCUC\
) } def
/len { sequence length } bind def

/coor [
[78.14198303 350.34713745]
[65.58376312 341.99600220]
[55.49753952 330.78353882]
[48.51734543 317.41464233]
[45.08196259 302.72964478]
[45.40733719 287.65167236]
[49.47302246 273.12857056]
[57.02344131 260.07321167]
[67.58396912 249.30633545]
[80.49076843 241.50469971]
[94.93249512 237.15873718]
[94.30851746 222.17172241]
[93.68453979 207.18470764]
[93.06056213 192.19769287]
[92.43658447 177.21067810]
[91.81260681 162.22366333]
[91.18862915 147.23664856]
[90.56465149 132.24963379]
[77.47149658 124.93052673]
[64.37834167 132.24963379]
[51.28519058 139.56874084]
[38.19203568 146.88784790]
[25.09888077 154.20695496]
[17.17248344 168.56327820]
[0.77339357 168.60641479]
[-7.22841263 154.29197693]
[1.39863801 140.34542847]
[17.77977562 141.11380005]
[30.87293053 133.79469299]
[43.96608353 126.47557831]
[57.05923843 119.15647888]
[70.15238953 111.83737183]
[75.51249695 85.41325378]
[97.05039215 75.27892303]
[99.84272003 60.54111862]
[102.63504028 45.80331421]
[97.26924133 59.81074524]
[85.41740417 69.00497437]
[70.51579285 70.72024536]
[56.88495255 64.45925140]
[48.47695160 52.03727341]
[47.72958374 37.05590439]
[54.85953903 23.85879135]
[67.79957581 16.27226448]
[82.79790497 16.49593544]
[95.50431824 24.46314430]
[84.41300201 14.36449432]
[73.32168579 4.26584435]
[62.23037338 -5.83280516]
[51.13905716 -15.93145466]
[40.04774094 -26.03010368]
[28.95642662 -36.12875366]
[13.18316555 -35.13893127]
[1.38530099 -45.65491486]
[0.56229824 -61.43776321]
[11.20242977 -73.12378693]
[26.99309540 -73.77987671]
[38.56597137 -63.01678848]
[39.05507660 -47.22006989]
[50.14639282 -37.12141800]
[61.23770905 -27.02276993]
[72.32902527 -16.92411995]
[83.42034149 -6.82547092]
[94.51165009 3.27317882]
[105.60296631 13.37182808]
[120.59972382 13.05977249]
[131.26135254 2.50848174]
[141.92297363 -8.04280853]
[127.33731842 -4.54158258]
[112.34072113 -4.86109877]
[97.91742706 -8.98038673]
[85.01404572 -16.62909317]
[74.47743225 -27.30522919]
[66.99912262 -40.30810928]
[63.06991959 -54.78434372]
[62.94770432 -69.78384399]
[66.64048767 -84.32218170]
[73.90592194 -97.44519806]
[84.26716614 -108.29161072]
[97.04419708 -116.14956665]
[111.39845276 -120.50334167]
[126.38784790 -121.06718445]
[141.02862549 -117.80410004]
[154.35989380 -110.92824554]
[165.50669861 -100.89088440]
[173.73748779 -88.35078430]
[178.51205444 -74.13095093]
[179.51702881 -59.16465759]
[176.68647766 -44.43414688]
[170.20616150 -30.90619278]
[160.49780273 -19.46538734]
[174.72459412 -24.21920204]
[188.95137024 -28.97301674]
[203.17814636 -33.72683334]
[202.25244141 -48.78689575]
[205.25708008 -63.57319260]
[211.98716736 -77.07757568]
[221.98385620 -88.37928009]
[234.56555176 -96.70775604]
[248.87440491 -101.49514008]
[263.93481445 -102.41502380]
[278.71997070 -99.40468597]
[292.22174072 -92.66938019]
[303.51959229 -82.66832733]
[311.84320068 -70.08341980]
[316.62506104 -55.77272034]
[317.53912354 -40.71194458]
[314.52307129 -25.92797279]
[307.78256226 -12.42879295]
[297.77716064 -1.13480568]
[285.18902588 7.18394709]
[270.87649536 11.96027946]
[255.81535339 12.86853218]
[241.03254700 9.84677982]
[227.53598022 3.10105014]
[216.24584961 -6.90872145]
[207.93196106 -19.50005150]
[193.70518494 -14.74623775]
[179.47840881 -9.99242306]
[165.25161743 -5.23860788]
[152.47425842 2.61881781]
[141.81263733 13.17010784]
[131.15101624 23.72139740]
[117.37284851 48.59563828]
[114.58052063 63.33344269]
[111.78820038 78.07125092]
[121.99348450 85.50763702]
[127.67472839 97.56614685]
[126.83460999 111.57377625]
[119.01199341 124.06218719]
[105.55166626 131.62565613]
[106.17564392 146.61267090]
[106.79962158 161.59968567]
[107.42359924 176.58670044]
[108.04757690 191.57371521]
[108.67155457 206.56072998]
[109.29553223 221.54774475]
[109.91950989 236.53475952]
[124.67251587 239.66520691]
[138.18315125 246.36695862]
[149.60212708 256.21875000]
[158.21163940 268.60128784]
[163.47048950 282.73617554]
[165.04809570 297.73492432]
[162.84529114 312.65466309]
[157.00054932 326.55752563]
[147.88127136 338.56958008]
[136.06069946 347.93572998]
[122.28188324 354.06723022]
[107.41098022 356.57861328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[34 126]
[35 125]
[36 124]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[66 123]
[67 122]
[68 121]
[91 120]
[92 119]
[93 118]
[94 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
