%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCAUGGGGGGGGGGGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUxxxxxxxxxxAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCCCCCCCCCCCUAGCCAUG\
) } def
/len { sequence length } bind def

/coor [
[85.11413574 452.74392700]
[70.62445068 448.53546143]
[57.71821976 440.71936035]
[47.27541733 429.82852173]
[40.00805283 416.60549927]
[36.41162872 401.95190430]
[36.73134995 386.86682129]
[40.94541931 372.37875366]
[48.76651764 359.47552490]
[59.66138458 349.03692627]
[72.88719177 341.77468872]
[87.54218292 338.18389893]
[87.85424042 323.18716431]
[88.16629791 308.19039917]
[88.47835541 293.19363403]
[88.79041290 278.19689941]
[89.10247040 263.20013428]
[89.41452026 248.20338440]
[89.72657776 233.20663452]
[90.03863525 218.20988464]
[90.35069275 203.21311951]
[90.66275024 188.21636963]
[90.97480774 173.21961975]
[69.81150055 167.31434631]
[51.32592392 155.43826294]
[37.15775681 138.64479065]
[28.56372452 118.42350006]
[26.30611610 96.56804657]
[30.58518410 75.01700592]
[17.06099319 68.52883911]
[3.53680372 62.04067230]
[-9.98738670 55.55250931]
[-19.14354324 54.64882278]
[-23.72330093 48.78610611]
[-37.10958481 42.01799011]
[-50.49587250 35.24987411]
[-63.88215637 28.48176003]
[-77.26844025 21.71364594]
[-90.79263306 15.22548008]
[-104.44887543 9.02007294]
[-118.10511017 2.81466627]
[-129.47177124 12.94970608]
[-143.97999573 17.57910538]
[-159.11614990 15.90079308]
[-172.25779724 8.20554638]
[-181.12808228 -4.17338562]
[-184.19017029 -19.09127808]
[-180.91352844 -33.96351624]
[-171.86585999 -46.21339798]
[-158.61471558 -53.71855164]
[-143.45596313 -55.17866898]
[-129.01593018 -50.34077072]
[-117.79643250 -40.04305649]
[-111.74133301 -26.06966782]
[-111.89970398 -10.84157467]
[-98.24346161 -4.63616800]
[-84.58722687 1.56923914]
[-79.82507324 0.73412549]
[-74.49401093 2.92754579]
[-70.50032806 8.32736015]
[-57.11404037 15.09547520]
[-43.72775650 21.86359024]
[-30.34147072 28.63170433]
[-16.95518684 35.39981842]
[-3.49922109 42.02831650]
[10.02496910 48.51648331]
[23.54915810 55.00465012]
[37.07334900 61.49281311]
[41.96342850 54.45526123]
[47.63663483 48.03227234]
[54.01641464 42.31051636]
[61.01667786 37.36720276]
[68.54296875 33.26903152]
[76.49372864 30.07130623]
[84.76168060 27.81717300]
[93.23524475 26.53705025]
[101.80009460 26.24821091]
[110.34065247 26.95454979]
[118.74167633 28.64653969]
[126.88980865 31.30134583]
[134.67509460 34.88314819]
[141.99249268 39.34361649]
[151.74014282 27.94259453]
[161.48780823 16.54157257]
[171.23545837 5.14055204]
[174.32252502 -10.37655258]
[188.47413635 -15.02211094]
[198.22178650 -26.42313194]
[194.47642517 -41.48141479]
[200.32859802 -55.85262680]
[213.52801514 -64.01074982]
[228.99923706 -62.81880951]
[240.79327393 -52.73514175]
[244.37506104 -37.63711548]
[238.36734009 -23.33023071]
[225.08020020 -15.31577969]
[209.62281799 -16.67547989]
[199.87516785 -5.27445936]
[197.48530579 9.42716789]
[182.63647461 14.88820362]
[172.88882446 26.28922462]
[163.14117432 37.69024658]
[153.39352417 49.09126663]
[160.43016052 57.68260956]
[166.09750366 67.23283386]
[170.26710510 77.52555084]
[172.84449768 88.32752991]
[173.77127075 99.39399719]
[188.70556641 100.79629517]
[203.63987732 102.19860077]
[212.46362305 89.62731934]
[226.39761353 83.16670227]
[241.69366455 84.55461884]
[254.23722839 93.41773224]
[260.65414429 107.37189484]
[259.21829224 122.66352844]
[250.31590271 135.17924500]
[236.34169006 141.55238342]
[221.05462646 140.06860352]
[208.56687927 131.12702942]
[202.23757935 117.13291168]
[187.30326843 115.73060608]
[172.36895752 114.32830048]
[167.62474060 129.48663330]
[159.74586487 143.27815247]
[149.09754944 155.06358337]
[136.17338562 164.29660034]
[121.57244873 170.54924011]
[105.97155762 173.53167725]
[105.65950012 188.52842712]
[105.34744263 203.52517700]
[105.03539276 218.52194214]
[104.72333527 233.51869202]
[104.41127777 248.51544189]
[104.09922028 263.51220703]
[103.78716278 278.50894165]
[103.47510529 293.50570679]
[103.16305542 308.50247192]
[102.85099792 323.49920654]
[102.53894043 338.49597168]
[117.03187561 342.69323730]
[129.94413757 350.49938965]
[140.39533997 361.38217163]
[147.67291260 374.59954834]
[151.28065491 389.25036621]
[150.97257996 404.33572388]
[146.76969910 418.82702637]
[138.95857239 431.73626709]
[128.07177734 442.18328857]
[114.85157776 449.45574951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[29 68]
[30 67]
[31 66]
[32 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 57]
[40 56]
[41 55]
[82 103]
[83 102]
[84 101]
[85 100]
[87 98]
[88 97]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
