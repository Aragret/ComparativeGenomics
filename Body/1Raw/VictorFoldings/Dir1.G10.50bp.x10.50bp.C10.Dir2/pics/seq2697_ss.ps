%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACCAAAAGGGGGGGGGGACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACAxxxxxxxxxxUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUCCCCCCCCCCUUAACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[77.39177704 418.00024414]
[63.54584122 411.98422241]
[51.83718109 402.45480347]
[43.13465500 390.11914062]
[38.08405304 375.89260864]
[37.06016159 360.83093262]
[40.13896179 346.05178833]
[47.09198380 332.65185547]
[57.40326691 321.62551880]
[70.30764771 313.79101562]
[84.84753418 309.72970581]
[84.84753418 294.72970581]
[84.84753418 279.72970581]
[84.84753418 264.72970581]
[84.84753418 249.72969055]
[84.84753418 234.72969055]
[84.84753418 219.72969055]
[84.84753418 204.72969055]
[84.84753418 189.72969055]
[84.84753418 174.72969055]
[84.84753418 159.72969055]
[84.84753418 144.72969055]
[74.89014435 116.52529144]
[87.14823151 98.96903229]
[73.02342987 93.92027283]
[58.89862442 88.87151337]
[44.77382278 83.82276154]
[25.01501846 95.10255432]
[1.81550992 82.05034637]
[-13.16420460 81.27050018]
[-28.14391899 80.49065399]
[-43.12363434 79.71080780]
[-49.99507904 93.30136108]
[-61.80432892 102.91705322]
[-76.50537109 106.89189148]
[-91.55114746 104.53723145]
[-104.33489227 96.26101685]
[-112.64174652 83.49716187]
[-115.03249359 68.45706940]
[-111.09292603 53.74654388]
[-101.50559998 41.91425705]
[-87.93156433 35.01023102]
[-72.72261810 34.23063278]
[-58.51379395 39.71052551]
[-47.76686096 50.50048828]
[-42.34378815 64.73109436]
[-27.36407280 65.51094055]
[-12.38435936 66.29078674]
[2.59535503 67.07063293]
[8.51531792 53.28824997]
[-2.36350703 42.96104431]
[-13.24233246 32.63383865]
[-24.12115669 22.30663490]
[-40.13163376 21.28474998]
[-49.19654083 8.04817200]
[-44.36206436 -7.24912739]
[-29.33679390 -12.87236977]
[-15.64683628 -4.50788546]
[-13.79395294 11.42780972]
[-2.91512752 21.75501442]
[7.96369791 32.08221817]
[18.84252357 42.40942383]
[36.25180435 44.56681824]
[47.66706467 55.62022400]
[49.82257843 69.69795990]
[63.94738007 74.74671173]
[78.07218170 79.79547119]
[92.19698334 84.84422302]
[82.22180939 73.64173126]
[68.29418182 68.07206726]
[56.21342850 59.18075562]
[46.75509644 47.53859329]
[40.52637863 33.89296722]
[37.92714310 19.11988449]
[39.12424469 4.16772890]
[44.04084015 -10.00361919]
[52.36129761 -22.48440361]
[63.55146790 -32.47340012]
[76.89298248 -39.32934952]
[91.52935028 -42.61211777]
[106.52098083 -42.11096573]
[120.90544128 -37.85805893]
[133.75930786 -30.12642860]
[144.25740051 -19.41241646]
[151.72576904 -6.40382624]
[155.68498230 8.06422997]
[155.88085938 23.06295013]
[152.30082703 37.62946701]
[145.17472839 50.82865524]
[134.96000671 61.81316757]
[122.31386566 69.87716675]
[114.59844971 82.74076843]
[127.53650665 75.15086365]
[140.47456360 67.56095123]
[153.41261292 59.97104645]
[153.22586060 44.61328888]
[160.75700378 31.22756767]
[173.98019409 23.41457558]
[189.33845520 23.27596664]
[202.70051575 30.84902763]
[210.47201538 44.09664154]
[210.56248474 59.45526886]
[202.94757080 72.79351044]
[189.67567444 80.52345276]
[174.31683350 80.56578064]
[161.00251770 72.90910339]
[148.06446838 80.49900818]
[135.12641907 88.08892059]
[122.18835449 95.67882538]
[124.98068237 110.41663361]
[139.79843140 112.74773407]
[154.61619568 115.07884216]
[169.45114136 109.58018494]
[180.82135010 119.20138550]
[194.58480835 110.95841217]
[209.55970764 116.71442413]
[214.25859070 132.05392456]
[205.07687378 145.20974731]
[189.05798340 146.08987427]
[178.49024963 134.01914978]
[164.71516418 139.68453979]
[152.28509521 129.89659119]
[137.46733093 127.56549072]
[122.64957428 125.23439026]
[116.94906616 130.10821533]
[126.69652557 141.50939941]
[115.29518127 151.25666809]
[105.54804230 139.85586548]
[99.84753418 144.72969055]
[99.84753418 159.72969055]
[99.84753418 174.72969055]
[99.84753418 189.72969055]
[99.84753418 204.72969055]
[99.84753418 219.72969055]
[99.84753418 234.72969055]
[99.84753418 249.72969055]
[99.84753418 264.72970581]
[99.84753418 279.72970581]
[99.84753418 294.72970581]
[99.84753418 309.72970581]
[114.38742065 313.79101562]
[127.29180145 321.62551880]
[137.60308838 332.65185547]
[144.55610657 346.05178833]
[147.63490295 360.83093262]
[146.61102295 375.89260864]
[141.56040955 390.11914062]
[132.85789490 402.45480347]
[121.14923096 411.98422241]
[107.30329132 418.00024414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 68]
[25 67]
[26 66]
[27 65]
[29 49]
[30 48]
[31 47]
[32 46]
[50 62]
[51 61]
[52 60]
[53 59]
[92 109]
[93 108]
[94 107]
[95 106]
[110 124]
[111 123]
[112 122]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
