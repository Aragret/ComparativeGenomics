%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACAACAAUGGGGGGGGGGUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGxxxxxxxxxxCCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACCCCCCCCCCCUUCACAACAAU\
) } def
/len { sequence length } bind def

/coor [
[90.19609070 458.89978027]
[76.03549194 453.74475098]
[63.44574356 445.46255493]
[53.10580444 434.49978638]
[45.57329559 421.44766235]
[41.25442886 407.01007080]
[40.38211823 391.96560669]
[43.00341034 377.12561035]
[48.97693634 363.29037476]
[57.98055649 351.20602417]
[69.52870941 341.52423096]
[82.99862671 334.76715088]
[97.66388702 331.29919434]
[97.66388702 316.29919434]
[97.66388702 301.29919434]
[97.66388702 286.29919434]
[97.66388702 271.29919434]
[97.66388702 256.29919434]
[97.66388702 241.29917908]
[97.66388702 226.29917908]
[97.66388702 211.29917908]
[97.66388702 196.29917908]
[97.66388702 181.29917908]
[97.66388702 166.29917908]
[97.66388702 151.29917908]
[78.91297913 140.41021729]
[68.41403961 124.23160553]
[66.77367401 107.39340210]
[72.39205170 93.92778778]
[82.11723328 86.35051727]
[92.22599030 85.19089508]
[85.48394012 71.79145813]
[78.74189758 58.39202881]
[71.99984741 44.99259567]
[65.25779724 31.59316254]
[51.24209976 36.97264481]
[36.76042175 40.92986298]
[21.95668793 43.42548752]
[6.97803497 44.43471527]
[-8.02667236 43.94751358]
[-22.90830612 41.96872711]
[-37.51896286 38.51802444]
[-51.71342850 33.62969971]
[-65.35063171 27.35233116]
[-78.29502869 19.74831390]
[-90.41798401 10.89322186]
[-101.59899902 0.87506056]
[-111.72694397 -10.20660114]
[-120.70117950 -22.24162483]
[-128.43249512 -35.11040115]
[-134.84405518 -48.68502426]
[-139.87214661 -62.83058929]
[-143.46678162 -77.40650177]
[-145.59225464 -92.26789093]
[-146.22741699 -107.26706696]
[-145.36596680 -122.25494385]
[-143.01647949 -137.08256531]
[-139.20227051 -151.60256958]
[-133.96128845 -165.67065430]
[-127.34560394 -179.14697266]
[-119.42096710 -191.89761353]
[-110.26614380 -203.79583740]
[-99.97210693 -214.72338867]
[-88.64118958 -224.57168579]
[-76.38598633 -233.24281311]
[-63.32830429 -240.65061951]
[-49.59792328 -246.72148132]
[-35.33130264 -251.39503479]
[-20.67023659 -254.62486267]
[-5.76043653 -256.37884521]
[9.24991417 -256.63955688]
[24.21163177 -255.40440369]
[38.97601700 -252.68565369]
[53.39632797 -248.51034546]
[67.32924652 -242.91996765]
[80.63629913 -235.97007751]
[93.18523407 -227.72975159]
[104.85131836 -218.28088379]
[115.51862335 -207.71740723]
[125.08111572 -196.14427185]
[133.44375610 -183.67652893]
[140.52345276 -170.43806458]
[146.24981689 -156.56048584]
[150.56593323 -142.18168640]
[153.42892456 -127.44460297]
[154.81033325 -112.49567413]
[154.69642639 -97.48348999]
[153.08833313 -82.55725098]
[150.00202942 -67.86530304]
[145.46821594 -53.55366135]
[139.53192139 -39.76457214]
[132.25215149 -26.63507462]
[123.70127106 -14.29566383]
[113.96426392 -2.86897516]
[103.13789368 7.53142357]
[91.32975769 16.80216599]
[78.65722656 24.85111427]
[85.39927673 38.25054550]
[92.14132690 51.64997864]
[98.88337708 65.04940796]
[105.62541962 78.44884491]
[119.69170380 83.65842438]
[133.53530884 77.88307953]
[147.37892151 72.10773468]
[156.89356995 58.75096130]
[173.19021606 60.58164215]
[179.50425720 75.71652985]
[169.34036255 88.58615112]
[153.15426636 85.95133972]
[139.31065369 91.72668457]
[125.46704865 97.50202942]
[126.07443237 104.97739410]
[139.62954712 111.40071106]
[127.28919983 119.92812347]
[127.89658356 127.40348816]
[142.49095154 130.86820984]
[157.08532715 134.33291626]
[171.67970276 137.79763794]
[184.11764526 128.31968689]
[199.73545837 129.10574341]
[211.15888977 139.78465271]
[212.99415588 155.31416321]
[204.37467957 168.36172485]
[189.37033081 172.76666260]
[175.06568909 166.44909668]
[168.21499634 152.39201355]
[153.62062073 148.92729187]
[139.02624512 145.46257019]
[124.43186951 141.99786377]
[112.66388702 151.29917908]
[112.66388702 166.29917908]
[112.66388702 181.29917908]
[112.66388702 196.29917908]
[112.66388702 211.29917908]
[112.66388702 226.29917908]
[112.66388702 241.29917908]
[112.66388702 256.29919434]
[112.66388702 271.29919434]
[112.66388702 286.29919434]
[112.66388702 301.29919434]
[112.66388702 316.29919434]
[112.66388702 331.29919434]
[127.32914734 334.76715088]
[140.79907227 341.52423096]
[152.34722900 351.20602417]
[161.35084534 363.29037476]
[167.32437134 377.12561035]
[169.94566345 391.96560669]
[169.07334900 407.01007080]
[164.75448608 421.44766235]
[157.22196960 434.49978638]
[146.88203430 445.46255493]
[134.29228210 453.74475098]
[120.13168335 458.89978027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[102 111]
[103 110]
[104 109]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
