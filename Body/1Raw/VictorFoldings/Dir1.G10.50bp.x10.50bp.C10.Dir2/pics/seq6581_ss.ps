%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCUAGCAGGGGGGGGGGGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAxxxxxxxxxxACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCCCCCCCCCCCACACCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[86.84968567 439.29235840]
[73.00375366 433.27633667]
[61.29508972 423.74691772]
[52.59256363 411.41125488]
[47.54196167 397.18472290]
[46.51807022 382.12304688]
[49.59687042 367.34387207]
[56.54989243 353.94393921]
[66.86117554 342.91760254]
[79.76555634 335.08309937]
[94.30544281 331.02178955]
[94.30544281 316.02178955]
[94.30544281 301.02178955]
[94.30544281 286.02178955]
[94.30544281 271.02178955]
[94.30544281 256.02178955]
[94.30544281 241.02178955]
[94.30544281 226.02178955]
[94.30544281 211.02178955]
[94.30544281 196.02178955]
[94.30544281 181.02178955]
[94.30544281 166.02178955]
[94.30544281 151.02178955]
[93.99338531 136.02503967]
[93.36940765 121.03802490]
[78.86351013 112.69779205]
[73.20125580 95.02551270]
[58.38349533 97.35662079]
[43.56573868 99.68772125]
[28.74798012 102.01882935]
[20.83562088 115.50691986]
[6.08716202 120.70470428]
[-8.53362751 115.15794373]
[-16.12325668 101.48564911]
[-13.09813404 86.14346313]
[-0.88663131 76.37549591]
[14.74535370 76.79388428]
[26.41687584 87.20107269]
[41.23463440 84.86996460]
[56.05239105 82.53886414]
[70.87014771 80.20775604]
[81.74897766 69.88055420]
[84.84729767 55.20402908]
[87.94561768 40.52750397]
[73.57587433 36.19341278]
[59.62546158 30.65628624]
[46.19488907 23.95602036]
[33.38092804 16.14089203]
[21.27590561 7.26720810]
[9.96703815 -2.60109305]
[-0.46419096 -13.39291000]
[-9.94262314 -25.03048515]
[-18.39996529 -37.42996979]
[-25.77528000 -50.50202179]
[-32.01543045 -64.15245819]
[-37.07545090 -78.28292084]
[-40.91888428 -92.79160309]
[-43.51803970 -107.57396698]
[-44.85419083 -122.52349854]
[-44.91770935 -137.53248596]
[-43.70813751 -152.49279785]
[-41.23418808 -167.29663086]
[-37.51368713 -181.83732605]
[-32.57344437 -196.01010132]
[-26.44905472 -209.71286011]
[-19.18464279 -222.84687805]
[-10.83255005 -235.31748962]
[-1.45295537 -247.03488159]
[8.88656044 -257.91458130]
[20.11149979 -267.87826538]
[32.14098358 -276.85406494]
[44.88834000 -284.77737427]
[58.26172256 -291.59109497]
[72.16477203 -297.24609375]
[86.49731445 -301.70162964]
[101.15608978 -304.92565918]
[116.03546906 -306.89489746]
[131.02824402 -307.59515381]
[146.02641296 -307.02142334]
[160.92187500 -305.17779541]
[175.60733032 -302.07760620]
[189.97695923 -297.74313354]
[203.92723083 -292.20565796]
[217.35763550 -285.50503540]
[230.17138672 -277.68957520]
[242.27618408 -268.81558228]
[253.58479309 -258.94699097]
[264.01574707 -248.15490723]
[273.49386597 -236.51708984]
[281.95089722 -224.11738586]
[289.32586670 -211.04513550]
[295.56567383 -197.39454651]
[300.62533569 -183.26394653]
[304.46838379 -168.75515747]
[307.06716919 -153.97273254]
[308.40292358 -139.02316284]
[308.46606445 -124.01417542]
[307.25610352 -109.05390167]
[304.78176880 -94.25012970]
[301.06088257 -79.70953369]
[296.12026978 -65.53688049]
[289.99554443 -51.83427429]
[282.73077393 -38.70045471]
[274.37835693 -26.23004913]
[264.99847412 -14.51290989]
[254.65867615 -3.63345933]
[243.43348694 6.32991409]
[231.40376282 15.30542278]
[218.65620422 23.22839737]
[205.28263855 30.04174995]
[191.37945557 35.69639206]
[177.04678345 40.15158081]
[162.38793945 43.37521362]
[147.50849915 45.34406281]
[132.51570129 46.04394913]
[117.51756287 45.46982193]
[102.62214661 43.62582397]
[99.52382660 58.30234909]
[96.42549896 72.97887421]
[111.29456329 76.34082794]
[121.48404694 86.87268829]
[124.12776184 100.68608093]
[118.99352264 113.14369965]
[108.35643005 120.41404724]
[108.98040771 135.40106201]
[112.24432373 141.27084351]
[112.03582001 147.03173828]
[109.30544281 151.02178955]
[109.30544281 166.02178955]
[109.30544281 181.02178955]
[109.30544281 196.02178955]
[109.30544281 211.02178955]
[109.30544281 226.02178955]
[109.30544281 241.02178955]
[109.30544281 256.02178955]
[109.30544281 271.02178955]
[109.30544281 286.02178955]
[109.30544281 301.02178955]
[109.30544281 316.02178955]
[109.30544281 331.02178955]
[123.84532928 335.08309937]
[136.74971008 342.91760254]
[147.06098938 353.94393921]
[154.01402283 367.34387207]
[157.09281921 382.12304688]
[156.06892395 397.18472290]
[151.01832581 411.41125488]
[142.31579590 423.74691772]
[130.60713196 433.27633667]
[116.76119995 439.29235840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 125]
[25 124]
[27 41]
[28 40]
[29 39]
[30 38]
[42 119]
[43 118]
[44 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
