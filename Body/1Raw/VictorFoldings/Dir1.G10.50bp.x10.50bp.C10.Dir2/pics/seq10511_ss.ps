%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUCCUCCUGGGGGGGGGGAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUxxxxxxxxxxCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCCCCCCCCCCCAUUAUCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[74.31129456 372.18948364]
[60.60913849 365.92861938]
[48.64402390 356.77526855]
[39.01610947 345.18859863]
[32.20833206 331.74975586]
[28.56216240 317.13287354]
[28.26049614 302.07110596]
[31.31845856 287.31997681]
[37.58266830 273.61932373]
[46.73891449 261.65643311]
[58.32792282 252.03132629]
[71.76839447 245.22680664]
[86.38615417 241.58418274]
[86.08215332 226.58726501]
[85.77814484 211.59033203]
[85.47414398 196.59341431]
[85.17013550 181.59649658]
[84.86613464 166.59957886]
[84.56212616 151.60266113]
[84.25812531 136.60574341]
[83.95412445 121.60882568]
[79.17453003 107.39068604]
[70.35775757 95.25542450]
[61.54097748 83.12017059]
[52.72419739 70.98491669]
[43.90741730 58.84966278]
[39.18603516 64.42376709]
[32.04238129 68.53063965]
[22.97689056 70.34171295]
[12.74197197 69.20004272]
[-2.19568038 67.83382416]
[-17.13333321 66.46760559]
[-32.07098389 65.10138702]
[-47.00863647 63.73517227]
[-54.40734100 77.04603577]
[-66.58431244 86.19159698]
[-81.42980957 89.58734131]
[-96.37176514 86.64492798]
[-108.82139587 77.87414551]
[-116.62172699 64.79459381]
[-118.42130280 49.67237473]
[-113.90834045 35.12751389]
[-103.86473083 23.67998886]
[-90.03059387 17.31315613]
[-74.80278015 17.13010597]
[-60.81959152 23.16255569]
[-50.50371170 34.36534500]
[-45.64242172 48.79751968]
[-30.70476723 50.16373825]
[-15.76711559 51.52995682]
[-0.82946360 52.89617157]
[14.10818863 54.26239014]
[19.79887390 49.37709427]
[7.34485054 41.01663589]
[-5.53229189 33.32383347]
[-6.81230354 18.37854767]
[4.56917095 8.60807991]
[19.14820862 12.13676739]
[24.80208206 26.03009415]
[31.18024635 39.60650635]
[36.87093353 34.72121429]
[37.78244400 19.74893570]
[38.69395828 4.77665615]
[39.60547256 -10.19562340]
[36.99214172 -19.01104736]
[40.69021606 -25.46115112]
[41.90498352 -40.41188049]
[43.11975479 -55.36261368]
[44.33452225 -70.31333923]
[45.54928970 -85.26407623]
[31.58057594 -91.07183838]
[20.09155464 -100.91346741]
[12.20780563 -113.82476807]
[8.70169926 -128.54083252]
[9.91672707 -143.61991882]
[15.73385334 -157.58473206]
[25.58317375 -169.06715393]
[38.49975586 -176.94226074]
[53.21816254 -180.43849182]
[68.29643250 -179.21336365]
[82.25735474 -173.38688660]
[93.73316956 -163.52987671]
[101.59960938 -150.60801697]
[105.08599091 -135.88726807]
[103.85076141 -120.80982971]
[98.01492310 -106.85281372]
[88.15022278 -95.38359833]
[75.22309875 -87.52581787]
[60.50002289 -84.04930115]
[59.28525162 -69.09857178]
[58.07048416 -54.14784241]
[56.85571671 -39.19711304]
[55.64094543 -24.24638367]
[54.57775116 -9.28411007]
[53.66623688 5.68816948]
[52.75472641 20.66044807]
[51.84321213 35.63272858]
[56.04267502 50.03288269]
[64.85945129 62.16814041]
[73.67623138 74.30339813]
[82.49301147 86.43865204]
[91.30979156 98.57390594]
[90.27589417 80.68082428]
[115.77114105 69.37155914]
[130.49394226 66.50113678]
[145.21673584 63.63071442]
[159.93952942 60.76028824]
[174.66232300 57.88986588]
[183.28361511 44.64415359]
[198.76298523 41.45598602]
[211.91680908 50.21683884]
[214.94114685 65.72905731]
[206.04170227 78.78952026]
[190.49838257 81.64968109]
[177.53274536 72.61265564]
[162.80995178 75.48308563]
[148.08715820 78.35350800]
[133.36436462 81.22393036]
[118.64156342 84.09435272]
[117.12403870 99.01739502]
[130.96765137 104.79273987]
[140.15245056 105.21766663]
[145.03138733 110.82797241]
[158.75511169 116.88269043]
[174.99128723 114.57646942]
[184.89227295 127.64943695]
[178.27278137 142.65324402]
[161.94238281 144.15327454]
[152.70037842 130.60641479]
[138.97666931 124.55168152]
[125.19230652 118.63634491]
[111.34869385 112.86100006]
[98.95104218 121.30481720]
[99.25504303 136.30174255]
[99.55905151 151.29866028]
[99.86305237 166.29557800]
[100.16705322 181.29249573]
[100.47106171 196.28941345]
[100.77506256 211.28633118]
[101.07907104 226.28324890]
[101.38307190 241.28016663]
[116.13645172 244.32740784]
[129.84162903 250.58166504]
[141.81118774 259.72921753]
[151.44471741 271.31121826]
[158.25900269 284.74673462]
[161.91224670 299.36184692]
[162.22122192 314.42346191]
[159.17041016 329.17608643]
[152.91282654 342.87976074]
[143.76239014 354.84710693]
[132.17803955 364.47781372]
[118.74087524 371.28884888]
[104.12487793 374.93856812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[61 97]
[62 96]
[63 95]
[64 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[120 132]
[121 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
