%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAACACAUGGGGGGGGGGAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAxxxxxxxxxxCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUCCCCCCCCCCUCCUACACAU\
) } def
/len { sequence length } bind def

/coor [
[64.84361267 374.74499512]
[50.99767303 368.72897339]
[39.28900909 359.19955444]
[30.58648682 346.86389160]
[25.53588486 332.63735962]
[24.51199341 317.57568359]
[27.59079170 302.79650879]
[34.54381561 289.39657593]
[44.85509872 278.37023926]
[57.75947952 270.53573608]
[72.29936981 266.47442627]
[72.29936981 251.47442627]
[72.29936981 236.47442627]
[72.29936981 221.47442627]
[72.29936981 206.47442627]
[72.29936981 191.47442627]
[72.29936981 176.47442627]
[72.29936981 161.47442627]
[72.29936981 146.47442627]
[72.29936981 131.47442627]
[72.29936981 116.47442627]
[67.84255219 102.15183258]
[59.33145905 89.80026245]
[50.82036972 77.44868469]
[42.30928040 65.09711456]
[29.26381874 72.51987457]
[15.62855053 78.79370117]
[1.50442433 83.87213898]
[-13.00398636 87.71758270]
[-27.78926468 90.30157471]
[-42.74194336 91.60497284]
[-57.75131607 91.61813354]
[-72.70625305 90.34095764]
[-87.49604034 87.78289795]
[-102.01116943 83.96289825]
[-116.14418030 78.90923309]
[-129.79043579 72.65933228]
[-142.84889221 65.25945282]
[-155.22286987 56.76439285]
[-166.82075500 47.23704529]
[-177.55670166 36.74794769]
[-187.35118103 25.37476158]
[-196.13171387 13.20168686]
[-203.83328247 0.31885341]
[-210.39884949 -13.17835808]
[-215.77981567 -27.19001770]
[-219.93635559 -41.61238480]
[-222.83766174 -56.33868027]
[-224.46229553 -71.25987244]
[-224.79818726 -86.26549530]
[-223.84288025 -101.24443817]
[-221.60343933 -116.08581543]
[-218.09643555 -130.67973328]
[-213.34783936 -144.91813660]
[-207.39280701 -158.69561768]
[-200.27543640 -171.91018677]
[-192.04841614 -184.46397400]
[-182.77265930 -196.26403809]
[-172.51684570 -207.22303772]
[-161.35690308 -217.25982666]
[-149.37544250 -226.30007935]
[-136.66119385 -234.27687073]
[-123.30828094 -241.13114929]
[-109.41556549 -246.81216431]
[-95.08591461 -251.27786255]
[-80.42540741 -254.49516296]
[-65.54259491 -256.44024658]
[-50.54766846 -257.09875488]
[-35.55164337 -256.46575928]
[-20.66555023 -254.54595947]
[-5.99959755 -251.35357666]
[8.33762836 -246.91224670]
[22.23997688 -241.25485229]
[35.60452271 -234.42327881]
[48.33230972 -226.46809387]
[60.32911301 -217.44822693]
[71.50610352 -207.43041992]
[81.78053284 -196.48887634]
[91.07633972 -184.70457458]
[99.32468414 -172.16479492]
[106.46450043 -158.96235657]
[112.44293976 -145.19500732]
[117.21572876 -130.96469116]
[120.74752808 -116.37676239]
[123.01219940 -101.53921509]
[123.99296570 -86.56191254]
[123.68257141 -71.55574799]
[122.08331299 -56.63181305]
[119.20702362 -41.90060806]
[115.07501221 -27.47119522]
[109.71786499 -13.45040989]
[103.17524719 0.05794216]
[95.49559784 12.95384789]
[86.73577118 25.14182854]
[76.96062469 36.53164673]
[66.24253082 47.03897858]
[54.66085434 56.58602524]
[63.17194366 68.93759918]
[71.68302917 81.28916931]
[80.19412231 93.64073944]
[91.60047913 82.35542297]
[106.63694763 82.96537018]
[115.78578186 93.63159943]
[130.74603271 94.72291565]
[145.70628357 95.81422424]
[151.18612671 81.72654724]
[160.57623291 69.88098907]
[173.04165649 61.33084869]
[187.47395325 56.83640671]
[202.58982849 56.79729843]
[217.04519653 61.21700287]
[229.55468750 69.70252991]
[239.00596619 81.49934387]
[244.55862427 95.55847931]
[245.71893311 110.62981415]
[242.38372803 125.37320709]
[234.84954834 138.47769165]
[223.78634644 148.77803040]
[210.17784119 155.35832214]
[195.23410034 157.63343811]
[180.28392029 155.40109253]
[166.65664673 148.85977173]
[155.56401062 138.59114075]
[147.99237061 125.50826263]
[144.61497498 110.77447510]
[129.65472412 109.68315887]
[114.69447327 108.59185028]
[108.36992645 116.25337219]
[98.23178864 119.46166229]
[87.29936981 116.47442627]
[87.29936981 131.47442627]
[87.29936981 146.47442627]
[87.29936981 161.47442627]
[87.29936981 176.47442627]
[87.29936981 191.47442627]
[87.29936981 206.47442627]
[87.29936981 221.47442627]
[87.29936981 236.47442627]
[87.29936981 251.47442627]
[87.29936981 266.47442627]
[101.83925629 270.53573608]
[114.74363708 278.37023926]
[125.05491638 289.39657593]
[132.00793457 302.79650879]
[135.08674622 317.57568359]
[134.06285095 332.63735962]
[129.01225281 346.86389160]
[120.30972290 359.19955444]
[108.60105896 368.72897339]
[94.75511932 374.74499512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 100]
[23 99]
[24 98]
[25 97]
[103 127]
[104 126]
[105 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
