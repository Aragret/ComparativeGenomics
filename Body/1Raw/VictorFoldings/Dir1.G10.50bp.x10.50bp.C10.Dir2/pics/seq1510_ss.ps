%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAGGACCUGGGGGGGGGGGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCxxxxxxxxxxCAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUCCCCCCCCCCUCAAAGGACAU\
) } def
/len { sequence length } bind def

/coor [
[82.17036438 348.62359619]
[68.68148804 341.89205933]
[57.19598389 332.12750244]
[48.38161469 319.89761353]
[42.75083542 305.91342163]
[40.63100433 290.98794556]
[42.14537430 275.98892212]
[47.20589828 261.78842163]
[55.51836395 249.21199036]
[66.59949493 238.99084473]
[79.80504608 231.71920776]
[94.36727142 227.81983948]
[94.05929565 212.82299805]
[93.75131989 197.82615662]
[93.44334412 182.82933044]
[93.13536072 167.83248901]
[92.82738495 152.83564758]
[92.51940918 137.83880615]
[92.21143341 122.84197235]
[91.90345001 107.84513092]
[88.39428711 93.26138306]
[81.84641266 79.76599884]
[75.29854584 66.27061462]
[68.75067139 52.77523422]
[62.20280457 39.27985001]
[55.65493393 25.78446579]
[49.10706329 12.28908062]
[41.47409058 -0.62361711]
[32.80748367 -12.86657047]
[24.14087677 -25.10952377]
[15.47426987 -37.35247803]
[6.80766201 -49.59543228]
[-1.85894549 -61.83838654]
[-17.26034164 -62.15961075]
[-29.37778473 -71.38029480]
[-33.69123077 -85.79757690]
[-28.74726105 -99.82238770]
[-37.41386795 -112.06533813]
[-46.08047485 -124.30828857]
[-54.74708557 -136.55123901]
[-68.67669678 -130.82656860]
[-83.52384186 -128.34652710]
[-98.54337311 -129.23231506]
[-112.98220825 -133.43630981]
[-126.11710358 -140.74458313]
[-137.29087830 -150.78778076]
[-145.94528198 -163.05984497]
[-151.64889526 -176.94342041]
[-154.11866760 -191.74101257]
[-153.23388672 -206.70993042]
[-149.04214478 -221.09965515]
[-141.75674438 -234.18939209]
[-131.74588013 -245.32423401]
[-140.41249084 -257.56719971]
[-149.07910156 -269.81015015]
[-164.12071228 -267.21923828]
[-178.79452515 -271.41949463]
[-190.18704224 -281.57690430]
[-196.03627014 -295.67477417]
[-195.18083191 -310.91387939]
[-187.79060364 -324.26855469]
[-175.33288574 -333.08718872]
[-160.28120422 -335.61883545]
[-145.62403870 -331.36083984]
[-134.27162170 -321.15863037]
[-128.47795105 -307.03784180]
[-129.39338684 -291.80221558]
[-136.83615112 -278.47674561]
[-128.16954041 -266.23379517]
[-119.50293732 -253.99084473]
[-105.67390442 -259.73190308]
[-90.90692139 -262.25271606]
[-75.94203949 -261.42370605]
[-61.52997589 -257.28317261]
[-48.39440918 -250.03576660]
[-37.19567490 -240.04208374]
[-28.49756432 -227.80097961]
[-22.73892975 -213.92446899]
[-20.21154785 -199.10729980]
[-21.04534721 -184.09204102]
[-25.20172119 -169.63189697]
[-32.47530746 -156.45300293]
[-42.50413132 -145.21784973]
[-33.83752441 -132.97489929]
[-25.17091560 -120.73194885]
[-16.50430679 -108.48899078]
[-1.63359845 -108.49070740]
[10.53053570 -99.63080597]
[15.19977188 -85.13764954]
[10.38400841 -70.50498962]
[19.05061531 -58.26203918]
[27.71722221 -46.01908493]
[36.38383102 -33.77613068]
[45.05043793 -21.53317833]
[53.71704483 -9.29022503]
[55.76144791 -24.15025139]
[66.03505707 -35.07970428]
[80.74032593 -38.03860474]
[94.44157410 -31.93322182]
[102.07426453 -19.02035713]
[100.81702423 -4.07313728]
[91.13459778 7.38332558]
[76.60599518 11.11425018]
[62.60244751 5.74121046]
[69.15031433 19.23659515]
[75.69818878 32.73197937]
[82.24605560 46.22736359]
[88.79393005 59.72274780]
[95.34179688 73.21813202]
[101.88967133 86.71351624]
[113.57587433 96.11737061]
[128.15962219 99.62654114]
[145.65698242 93.98092651]
[157.93078613 106.48686218]
[172.58351135 109.69586182]
[183.43470764 98.72977448]
[198.49699402 95.39343262]
[212.96403503 100.75144196]
[222.21945190 113.09407806]
[223.30989075 128.48286438]
[215.88737488 142.00727844]
[202.32040405 149.35173035]
[186.93817139 148.17265320]
[174.64906311 138.84625244]
[169.37451172 124.34857941]
[154.72178650 121.13958740]
[144.33198547 127.40969086]
[132.06727600 124.81191254]
[124.65045929 114.21028900]
[110.06671143 110.70111847]
[108.47259521 109.12965393]
[106.90029144 107.53715515]
[107.20826721 122.53399658]
[107.51624298 137.53083801]
[107.82422638 152.52766418]
[108.13220215 167.52450562]
[108.44017792 182.52134705]
[108.74815369 197.51818848]
[109.05613708 212.51502991]
[109.36411285 227.51185608]
[124.07415009 230.81008911]
[137.56710815 237.53344727]
[149.05851746 247.29104614]
[157.88031006 259.51559448]
[163.51956177 273.49636841]
[165.64843750 288.42056274]
[164.14317322 303.42047119]
[159.09124756 317.62405396]
[150.78640747 330.20550537]
[139.71148682 340.43338013]
[126.51033783 347.71301270]
[111.95047760 351.62121582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[33 90]
[37 86]
[38 85]
[39 84]
[40 83]
[53 70]
[54 69]
[55 68]
[111 130]
[112 129]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
