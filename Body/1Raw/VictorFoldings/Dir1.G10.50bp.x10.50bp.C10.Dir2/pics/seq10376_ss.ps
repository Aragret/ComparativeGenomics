%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCUAACCUCGGGGGGGGGGGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACxxxxxxxxxxACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCCCCCCCCCCCAUCGCUAACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 427.81268311]
[70.75619507 423.00326538]
[57.85220718 415.23785400]
[46.91955185 404.87973022]
[38.46956635 392.41329956]
[32.89747238 378.42166138]
[30.46388245 363.55923462]
[31.28262329 348.52114868]
[35.31539917 334.01077271]
[42.37359238 320.70681763]
[52.12707901 309.23144531]
[64.11966705 300.12145996]
[77.79044342 293.80291748]
[92.50000000 290.57138062]
[92.50000000 275.57138062]
[92.50000000 260.57138062]
[92.50000000 245.57136536]
[92.50000000 230.57136536]
[92.50000000 215.57136536]
[92.50000000 200.57136536]
[92.50000000 185.57136536]
[92.50000000 170.57136536]
[92.50000000 155.57136536]
[92.50000000 140.57136536]
[84.60215759 139.34851074]
[76.90927887 136.56924438]
[69.73106384 132.27006531]
[63.37015533 126.54949188]
[58.10961151 119.56660461]
[54.20075989 111.53703308]
[51.85191727 102.72640991]
[51.21845627 93.44174957]
[52.39463425 84.02068329]
[37.52133560 82.07519531]
[22.64803505 80.12969971]
[7.77473450 78.18420410]
[-0.53214836 90.98883057]
[-13.57657051 98.91384888]
[-28.76855278 100.38572693]
[-43.09171677 95.11222839]
[-53.70218658 84.14041901]
[-58.49324417 69.64874268]
[-56.51362610 54.51454926]
[-48.15638351 41.74273682]
[-35.08085251 33.86915588]
[-19.88319206 32.45711136]
[-5.58090782 37.78697205]
[4.98627281 48.80048370]
[9.72022724 63.31090927]
[24.59352684 65.25640106]
[39.46682739 67.20189667]
[54.34012604 69.14738464]
[60.59616470 55.51426315]
[49.42225266 45.50708008]
[38.24834061 35.49990082]
[22.09616661 32.66452789]
[16.73054123 17.16800690]
[27.67115974 4.95183277]
[43.66324997 8.58295536]
[48.25552368 24.32598686]
[59.42943573 34.33317184]
[70.60334778 44.34035110]
[85.43473816 42.09765244]
[93.15030670 29.23413467]
[100.86586761 16.37061691]
[108.58142853 3.50709987]
[116.29699707 -9.35641766]
[122.55303192 -22.98954010]
[127.27384186 -37.22730637]
[131.99464417 -51.46506882]
[136.71545410 -65.70283508]
[123.62699127 -73.13104248]
[112.23937988 -82.97017670]
[102.99034882 -94.84205627]
[96.23538971 -108.29035950]
[92.23415375 -122.79815674]
[91.14043427 -137.80783081]
[92.99626923 -152.74241638]
[97.73033142 -167.02789307]
[105.16065216 -180.11515808]
[115.00163269 -191.50117493]
[126.87501526 -200.74829102]
[140.32440186 -207.50106812]
[154.83285522 -211.49996948]
[169.84269714 -212.59124756]
[184.77699280 -210.73300171]
[199.06170654 -205.99662781]
[212.14776611 -198.56417847]
[223.53218079 -188.72135925]
[232.77737427 -176.84648132]
[239.52798462 -163.39599609]
[243.52452087 -148.88690186]
[244.61338806 -133.87687683]
[242.75271606 -118.94289398]
[238.01402283 -104.65894318]
[230.57946777 -91.57408905]
[220.73480225 -80.19125366]
[208.85842896 -70.94798279]
[195.40684509 -64.19955444]
[180.89710999 -60.20536423]
[165.88691711 -59.11893463]
[150.95323181 -60.98202515]
[146.23242188 -46.74425888]
[141.51161194 -32.50649643]
[136.79080200 -18.26873016]
[149.06886292 -26.88552284]
[163.92861938 -28.93187141]
[178.07875061 -23.95452499]
[188.38508606 -13.05593109]
[192.56486511 1.34995246]
[189.69229126 16.07232666]
[180.40361023 27.85029221]
[166.75621033 34.07511520]
[151.77287292 33.36804581]
[138.77232361 25.88568878]
[130.63407898 13.28533649]
[129.16050720 -1.64085412]
[121.44494629 11.22266293]
[113.72938538 24.08618164]
[106.01382446 36.94969940]
[98.29825592 49.81321716]
[110.57809448 51.67497635]
[121.84349060 56.44802475]
[131.42799377 63.75062943]
[138.78953552 73.05477905]
[143.54080200 83.72353363]
[145.46900940 95.05426788]
[144.54400635 106.32472992]
[140.91468811 116.83906555]
[134.89402771 125.97077942]
[126.93431091 133.19999695]
[117.59418488 138.14288330]
[107.50000000 140.57136536]
[107.50000000 155.57136536]
[107.50000000 170.57136536]
[107.50000000 185.57136536]
[107.50000000 200.57136536]
[107.50000000 215.57136536]
[107.50000000 230.57136536]
[107.50000000 245.57136536]
[107.50000000 260.57138062]
[107.50000000 275.57138062]
[107.50000000 290.57138062]
[122.20955658 293.80291748]
[135.88034058 300.12145996]
[147.87292480 309.23144531]
[157.62640381 320.70681763]
[164.68460083 334.01077271]
[168.71737671 348.52114868]
[169.53611755 363.55923462]
[167.10252380 378.42166138]
[161.53042603 392.41329956]
[153.08044434 404.87973022]
[142.14779663 415.23785400]
[129.24380493 423.00326538]
[114.97203827 427.81268311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[33 52]
[34 51]
[35 50]
[36 49]
[53 62]
[54 61]
[55 60]
[63 121]
[64 120]
[65 119]
[66 118]
[67 117]
[68 105]
[69 104]
[70 103]
[71 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
