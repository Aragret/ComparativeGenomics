%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAUACCCGGGGGGGGGGAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUxxxxxxxxxxCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCCCCCCCCCCCAACAUACUC\
) } def
/len { sequence length } bind def

/coor [
[81.61907196 370.51007080]
[68.39887238 363.23757935]
[57.51206970 352.79058838]
[49.70093918 339.88134766]
[45.49805832 325.39001465]
[45.18998718 310.30468750]
[48.79772949 295.65386963]
[56.07530212 282.43646240]
[66.52651215 271.55371094]
[79.43877411 263.74755859]
[93.93170929 259.55026245]
[93.61965179 244.55351257]
[93.30759430 229.55676270]
[92.99553680 214.56001282]
[92.68347931 199.56326294]
[92.37142944 184.56649780]
[92.05937195 169.56974792]
[91.74731445 154.57299805]
[91.43525696 139.57624817]
[91.12319946 124.57949066]
[90.81114197 109.58273315]
[84.74813080 95.86267853]
[73.86930847 85.53547668]
[61.01090240 77.81139374]
[46.78412628 73.05757904]
[32.55734634 68.30376434]
[18.33056641 63.54994583]
[27.66968536 75.28795624]
[32.23436737 89.57653809]
[31.43017960 104.55496979]
[25.36184692 118.27266693]
[14.81961632 128.94325256]
[1.17635393 135.17713928]
[-13.79124451 136.16253662]
[-28.13402176 131.77108765]
[-39.98418808 122.57469940]
[-47.79854965 109.77096558]
[-50.55948639 95.02724457]
[-47.90744781 80.26354980]
[-40.18780136 67.40248108]
[-28.40583801 58.11887741]
[-14.09586334 53.62169266]
[0.87687588 54.49615860]
[-11.20311260 45.60380554]
[-23.28310013 36.71145630]
[-35.36309052 27.81910896]
[-48.57806396 35.38774872]
[-63.72964478 36.92057037]
[-78.19272614 32.15200806]
[-89.46148682 21.90823746]
[-95.58355713 7.96405745]
[-95.49824524 -7.26461983]
[-89.22032928 -21.13933372]
[-77.83750153 -31.25620651]
[-63.32189941 -35.86242676]
[-48.18844604 -34.15994263]
[-35.05910110 -26.44371605]
[-26.20859909 -14.05063248]
[-23.17034721 0.87213284]
[-26.47073936 15.73911953]
[-14.39075089 24.63146973]
[-2.31076288 33.52381897]
[9.76922512 42.41616821]
[23.08438110 49.32316589]
[37.31116104 54.07698059]
[51.53794098 58.83079529]
[65.76471710 63.58460999]
[56.06634903 52.14163971]
[49.74541855 38.53848267]
[47.25348282 23.74692345]
[48.76856232 8.82363415]
[54.18241882 -5.16529512]
[63.10830307 -17.22052765]
[74.90856171 -26.48086357]
[88.74021912 -32.28476334]
[103.61516571 -34.21761322]
[118.47077942 -32.14133453]
[132.24578857 -26.20424652]
[143.95614624 -16.83048439]
[152.76530457 -4.68969154]
[158.04393005 9.35082245]
[159.41494751 24.28803444]
[156.78041077 39.05486298]
[150.32853699 52.59639740]
[140.52020264 63.94526291]
[128.05612183 72.29071808]
[113.82669067 77.03658295]
[98.84842682 77.84382629]
[84.19651031 74.65665436]
[95.07533264 84.98385620]
[90.92304993 70.57002258]
[97.50811768 57.09275436]
[111.43065643 51.51038361]
[125.50243378 56.70510864]
[132.45814514 69.99488068]
[128.70655823 84.51815796]
[116.18261719 92.77697754]
[131.16232300 91.99713135]
[146.14204407 91.21728516]
[161.12176514 90.43744659]
[176.10147095 89.65760040]
[191.08119202 88.87775421]
[206.06089783 88.09790802]
[221.04061890 87.31806183]
[236.02032471 86.53821564]
[241.44340515 72.30760956]
[252.19033813 61.51764679]
[266.39916992 56.03775406]
[281.60809326 56.81735611]
[295.18212891 63.72137833]
[304.76947021 75.55366516]
[308.70904541 90.26419830]
[306.31829834 105.30428314]
[298.01144409 118.06813812]
[285.22769165 126.34435272]
[270.18191528 128.69902039]
[255.48086548 124.72417450]
[243.67161560 115.10848236]
[236.80017090 101.51792908]
[221.82046509 102.29777527]
[206.84074402 103.07762146]
[191.86103821 103.85746765]
[176.88131714 104.63731384]
[161.90159607 105.41716003]
[146.92189026 106.19700623]
[131.94216919 106.97684479]
[116.96246338 107.75669098]
[111.12340546 109.75627136]
[105.80789948 109.27067566]
[106.11995697 124.26743317]
[106.43201447 139.26419067]
[106.74406433 154.26094055]
[107.05612183 169.25769043]
[107.36817932 184.25444031]
[107.68023682 199.25120544]
[107.99229431 214.24795532]
[108.30435181 229.24470520]
[108.61640167 244.24145508]
[108.92845917 259.23822021]
[123.58345032 262.82897949]
[136.80926514 270.09124756]
[147.70413208 280.52984619]
[155.52522278 293.43304443]
[159.73930359 307.92111206]
[160.05902100 323.00619507]
[156.46258545 337.65982056]
[149.19523621 350.88281250]
[138.75242615 361.77365112]
[125.84619904 369.58978271]
[111.35650635 373.79824829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 90]
[23 89]
[24 67]
[25 66]
[26 65]
[27 64]
[43 63]
[44 62]
[45 61]
[46 60]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
