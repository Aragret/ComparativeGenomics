%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCCCAUGGGGGGGGGGCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGxxxxxxxxxxUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCCCCCCCCCCCACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[72.78514862 389.71948242]
[58.93921280 383.70346069]
[47.23054886 374.17404175]
[38.52802658 361.83837891]
[33.47742462 347.61184692]
[32.45353317 332.55017090]
[35.53233337 317.77099609]
[42.48535538 304.37109375]
[52.79663849 293.34475708]
[65.70101929 285.51025391]
[80.24090576 281.44891357]
[80.24090576 266.44891357]
[80.24090576 251.44892883]
[80.24090576 236.44892883]
[80.24090576 221.44892883]
[80.24090576 206.44892883]
[80.24090576 191.44892883]
[80.24090576 176.44892883]
[80.24090576 161.44892883]
[80.24090576 146.44892883]
[67.46354675 138.59150696]
[54.07726288 145.35961914]
[40.69097900 152.12773132]
[35.99904251 167.21949768]
[21.97117805 174.49922180]
[6.92986536 169.64799500]
[-0.20115058 155.54394531]
[4.80883551 140.55476379]
[18.98748779 133.57327271]
[33.92286301 138.74143982]
[47.30915070 131.97332764]
[60.69543457 125.20521545]
[58.32574081 117.36610413]
[57.44206619 109.49160767]
[57.98153687 101.85188293]
[43.11849213 99.82955170]
[28.25544357 97.80721283]
[13.39239693 95.78488159]
[-0.19660015 104.31240845]
[-15.28801155 98.86917114]
[-20.30499840 83.63075256]
[-11.39895821 70.28675842]
[4.59815788 69.07357025]
[15.41473103 80.92182922]
[30.27777863 82.94416809]
[45.14082336 84.96649933]
[60.00387192 86.98883820]
[62.46552658 81.02254486]
[65.81105042 75.50313568]
[55.37123489 64.73233032]
[44.93142319 53.96152115]
[34.49161148 43.19071198]
[24.05179787 32.41990280]
[8.46835041 33.71996689]
[-4.27503490 24.65684509]
[-8.16132069 9.50987244]
[-1.35552227 -4.56901646]
[12.92887115 -10.93220043]
[27.94720650 -6.57517862]
[36.60828400 6.44479656]
[34.82260895 21.98009109]
[45.26242065 32.75090027]
[55.70223236 43.52170944]
[66.14204407 54.29251480]
[76.58185577 65.06332397]
[82.63142395 61.69447708]
[89.15174103 59.36385727]
[95.96609497 58.13463974]
[97.21296692 43.18655396]
[98.45984650 28.23846626]
[84.93216705 21.30518341]
[75.09128571 9.71960926]
[70.43786621 -4.75153780]
[71.68151855 -19.90151405]
[78.63259125 -33.42005920]
[90.23109436 -43.24568939]
[104.70835114 -47.88006973]
[119.85668182 -46.61649323]
[133.36607361 -39.64764404]
[143.17643738 -28.03621864]
[147.79176331 -13.55287933]
[146.50827026 1.59377205]
[139.52165222 15.09398174]
[127.89733124 24.88906479]
[113.40792847 29.48534203]
[112.16105652 44.43342972]
[110.91418457 59.38151550]
[122.20539856 62.31272125]
[132.66184998 68.42926788]
[141.37664795 77.47791290]
[154.90083313 70.98974609]
[160.22622681 56.35150909]
[174.03410339 49.96424484]
[187.95660400 55.13140106]
[201.48080444 48.64323425]
[200.61608887 33.46691513]
[205.62965393 19.11655998]
[215.75694275 7.78049946]
[229.45364380 1.18739760]
[244.63108826 0.34265530]
[258.97482300 5.37508965]
[270.29757690 15.51729012]
[276.87265015 29.22264671]
[277.69741821 44.40119171]
[272.64611816 58.73830414]
[262.48904419 70.04768372]
[248.77503967 76.60472870]
[233.59542847 77.40953064]
[219.26496887 72.33937836]
[207.96896362 62.16742325]
[194.44477844 68.65558624]
[189.76217651 82.74845123]
[176.13914490 89.52103424]
[161.38900757 84.51393890]
[147.86480713 91.00210571]
[148.33285522 105.99479675]
[162.23541260 111.62675476]
[176.13796997 117.25871277]
[190.04052734 122.89067078]
[204.49459839 116.49887085]
[219.20452881 122.27761078]
[225.44314575 136.79846191]
[219.50920105 151.44645691]
[204.92320251 157.53121948]
[190.33876038 151.44273376]
[184.40856934 136.79322815]
[170.50601196 131.16127014]
[156.60345459 125.52931213]
[142.70089722 119.89735413]
[123.15402222 140.78675842]
[95.24090576 146.44892883]
[95.24090576 161.44892883]
[95.24090576 176.44892883]
[95.24090576 191.44892883]
[95.24090576 206.44892883]
[95.24090576 221.44892883]
[95.24090576 236.44892883]
[95.24090576 251.44892883]
[95.24090576 266.44891357]
[95.24090576 281.44891357]
[109.78079224 285.51025391]
[122.68517303 293.34475708]
[132.99645996 304.37109375]
[139.94947815 317.77099609]
[143.02827454 332.55017090]
[142.00439453 347.61184692]
[136.95378113 361.83837891]
[128.25126648 374.17404175]
[116.54260254 383.70346069]
[102.69666290 389.71948242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 32]
[22 31]
[23 30]
[35 47]
[36 46]
[37 45]
[38 44]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[68 87]
[69 86]
[70 85]
[90 115]
[91 114]
[94 111]
[95 110]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
