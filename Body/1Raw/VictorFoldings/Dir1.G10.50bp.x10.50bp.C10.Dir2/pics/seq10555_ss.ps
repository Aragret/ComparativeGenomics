%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACUCAUGGGGGGGGGGGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAxxxxxxxxxxUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCCCCCCCCCCCAACUCAUG\
) } def
/len { sequence length } bind def

/coor [
[84.13246155 397.15322876]
[71.25918579 389.25036621]
[61.13489151 378.03985596]
[54.58030701 364.43051147]
[52.12678528 349.52560425]
[53.97322464 334.53335571]
[59.96993637 320.66915894]
[69.63079834 309.05688477]
[82.17264557 300.63793945]
[96.57876587 296.09478760]
[96.26670837 281.09802246]
[95.95465088 266.10128784]
[95.64260101 251.10452271]
[95.33054352 236.10777283]
[95.01848602 221.11100769]
[94.70642853 206.11425781]
[94.39437103 191.11750793]
[94.08231354 176.12075806]
[93.77026367 161.12399292]
[80.25058746 158.18000793]
[67.73252106 152.28540039]
[56.85091019 143.73910522]
[48.15763092 132.97456360]
[42.09355927 120.53769684]
[27.45005798 123.78852081]
[12.80655575 127.03934479]
[-1.83694518 130.29017639]
[-16.48044586 133.54100037]
[-31.12394714 136.79182434]
[-39.39924622 150.25640869]
[-54.79084778 153.84446716]
[-68.16718292 145.42727661]
[-71.59231567 129.99859619]
[-63.03417206 116.71200562]
[-47.57014847 113.45018005]
[-34.37477493 122.14832306]
[-19.73127174 118.89749908]
[-5.08777094 115.64666748]
[9.55573082 112.39584351]
[24.19923210 109.14501953]
[38.84273148 105.89419556]
[38.59473038 97.91540527]
[39.38326645 89.97180939]
[41.19503784 82.19749451]
[43.99945450 74.72369385]
[47.74917984 67.67655945]
[52.38092041 61.17506027]
[57.81648254 55.32893753]
[63.96411896 50.23687744]
[70.72005463 45.98484039]
[77.97024536 42.64459229]
[85.59230804 40.27252579]
[93.45757294 38.90867996]
[101.43328094 38.57607651]
[109.38478851 39.28032684]
[117.17788696 41.00955200]
[124.68100739 43.73455048]
[131.76750183 47.40933228]
[141.03245544 35.61269379]
[150.29740906 23.81605339]
[159.56236267 12.01941395]
[168.82730103 0.22277355]
[178.09225464 -11.57386684]
[187.35720825 -23.37050629]
[196.37474060 -35.35733795]
[205.14094543 -47.52917480]
[213.78005981 -59.79154205]
[222.29115295 -72.14311981]
[230.80223083 -84.49468994]
[239.31332397 -96.84626007]
[225.08714294 -92.09064484]
[210.26043701 -94.36406708]
[198.11270142 -103.16365814]
[191.33094788 -116.54302979]
[191.41519165 -131.54280090]
[198.34683228 -144.84513855]
[210.59265137 -153.50770569]
[225.44396973 -155.61441040]
[239.61582947 -150.69929504]
[249.97354126 -139.84950256]
[254.22605896 -125.46492767]
[251.43197632 -110.72549438]
[253.83773804 -116.99604034]
[258.38894653 -120.53408813]
[263.20111084 -121.00170135]
[274.70291138 -130.63023376]
[286.20471191 -140.25875854]
[297.70651245 -149.88728333]
[309.20831299 -159.51580811]
[310.58618164 -163.78933716]
[313.03326416 -167.04246521]
[316.08413696 -169.06086731]
[319.25198364 -169.80841064]
[322.09011841 -169.41810608]
[334.35247803 -178.05722046]
[336.80459595 -193.67012024]
[349.62750244 -202.90855408]
[365.21359253 -200.29150391]
[374.31594849 -187.37164307]
[371.53424072 -171.81407166]
[358.51885986 -162.84884644]
[342.99157715 -165.79486084]
[330.72921753 -157.15573120]
[318.83685303 -148.01400757]
[307.33505249 -138.38548279]
[295.83322144 -128.75695801]
[284.33142090 -119.12842560]
[272.82962036 -109.49990082]
[261.53060913 -99.63417816]
[251.66490173 -88.33517456]
[243.15380859 -75.98359680]
[234.64271545 -63.63202667]
[226.13162231 -51.28045273]
[224.91830444 -43.94059753]
[217.31277466 -38.76296997]
[208.54656982 -26.59113121]
[208.43029785 -21.75770760]
[205.23275757 -16.96114922]
[199.15383911 -14.10555744]
[189.88890076 -2.30891705]
[180.62394714 9.48772240]
[171.35899353 21.28436279]
[162.09403992 33.08100128]
[152.82910156 44.87764359]
[143.56414795 56.67428207]
[156.24327087 75.26848602]
[161.37594604 97.18103790]
[158.27349854 119.47183228]
[147.35220337 139.14997864]
[130.07742310 153.57519531]
[108.76701355 160.81193542]
[109.07907104 175.80870056]
[109.39112854 190.80545044]
[109.70318604 205.80220032]
[110.01523590 220.79895020]
[110.32729340 235.79571533]
[110.63935089 250.79246521]
[110.95140839 265.78921509]
[111.26346588 280.78598022]
[111.57552338 295.78271484]
[126.15815735 299.72268677]
[139.03936768 307.61260986]
[149.17491150 318.81295776]
[155.74316406 332.41571045]
[158.21166992 347.31814575]
[156.38029480 362.31225586]
[150.39750671 376.18246460]
[140.74832153 387.80441284]
[128.21493530 396.23596191]
[113.81338501 400.79360962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[58 125]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[65 116]
[66 115]
[67 113]
[68 112]
[69 111]
[70 110]
[82 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
