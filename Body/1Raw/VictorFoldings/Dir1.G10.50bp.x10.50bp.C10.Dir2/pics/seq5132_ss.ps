%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCACUGGGGGGGGGGAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAxxxxxxxxxxUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCCCCCCCCCCCUGCCUCACU\
) } def
/len { sequence length } bind def

/coor [
[83.72161102 380.88616943]
[70.50141144 373.61370850]
[59.61461258 363.16668701]
[51.80348206 350.25744629]
[47.60060120 335.76614380]
[47.29252625 320.68078613]
[50.90026855 306.02996826]
[58.17784119 292.81259155]
[68.62905121 281.92980957]
[81.54131317 274.12365723]
[96.03424835 269.92639160]
[95.72219086 254.92962646]
[95.41013336 239.93287659]
[95.09807587 224.93611145]
[94.78602600 209.93936157]
[94.47396851 194.94261169]
[94.16191101 179.94586182]
[93.84985352 164.94909668]
[93.53779602 149.95234680]
[93.22573853 134.95559692]
[92.91368866 119.95883942]
[80.75459290 108.84226227]
[80.24053192 92.37539673]
[91.68254852 80.52203369]
[91.05857086 65.53501892]
[76.05696106 65.21676636]
[61.10494232 63.95718765]
[46.26151657 61.76124191]
[31.58526421 58.63759995]
[17.13410950 54.59859085]
[2.96508408 49.66014862]
[-10.86589432 43.84177399]
[-24.30423927 37.16641998]
[-37.29691696 29.66043663]
[-49.79265213 21.35344315]
[-61.74212646 12.27822685]
[-73.09818268 2.47060251]
[-83.81599426 -8.03072357]
[-93.85327911 -19.18430710]
[-103.17041779 -30.94613075]
[-111.73062897 -43.26977539]
[-119.50014496 -56.10660172]
[-126.44829559 -69.40595245]
[-132.54765320 -83.11533356]
[-137.77415466 -97.18065643]
[-142.10717773 -111.54639435]
[-145.52960205 -126.15585327]
[-148.02795410 -140.95138550]
[-149.59234619 -155.87460327]
[-150.21659851 -170.86659241]
[-149.89826965 -185.86819458]
[-148.63861084 -200.82020569]
[-146.44259644 -215.66362000]
[-143.31887817 -230.33985901]
[-139.27978516 -244.79098511]
[-134.34127808 -258.95999146]
[-128.52282715 -272.79092407]
[-121.84740448 -286.22924805]
[-114.34135437 -299.22189331]
[-106.03429413 -311.71759033]
[-96.95901489 -323.66699219]
[-87.15132904 -335.02301025]
[-76.64994812 -345.74078369]
[-65.49631500 -355.77798462]
[-53.73443985 -365.09506226]
[-41.41075134 -373.65521240]
[-28.57388496 -381.42465210]
[-15.27449894 -388.37274170]
[-1.56508124 -394.47204590]
[12.50026321 -399.69845581]
[26.86602402 -404.03140259]
[41.47550583 -407.45376587]
[56.27104950 -409.95202637]
[71.19426727 -411.51632690]
[86.18625641 -412.14053345]
[101.18786621 -411.82211304]
[116.13986969 -410.56237793]
[130.98327637 -408.36627197]
[145.65948486 -405.24249268]
[160.11061096 -401.20333862]
[174.27958679 -396.26473999]
[188.11050415 -390.44622803]
[201.54876709 -383.77072144]
[214.54136658 -376.26461792]
[227.03701782 -367.95748901]
[238.98640442 -358.88214111]
[250.34234619 -349.07440186]
[261.06005859 -338.57296753]
[271.09722900 -327.41928101]
[280.41424561 -315.65734863]
[288.97433472 -303.33361816]
[296.74371338 -290.49670410]
[303.69171143 -277.19729614]
[309.79092407 -263.48782349]
[315.01730347 -249.42247009]
[319.35015869 -235.05668640]
[322.77243042 -220.44718933]
[325.27062988 -205.65162659]
[326.83486938 -190.72839355]
[327.45895386 -175.73640442]
[327.14047241 -160.73480225]
[325.88067627 -145.78280640]
[323.68447876 -130.93940735]
[320.56060791 -116.26320648]
[316.52139282 -101.81211853]
[311.58273315 -87.64316559]
[305.76412964 -73.81227875]
[299.08856201 -60.37403870]
[291.58236694 -47.38147736]
[283.27517700 -34.88587570]
[274.19979858 -22.93654251]
[264.39196777 -11.58064175]
[253.89048767 -0.86298847]
[242.73674011 9.17411995]
[230.97477722 18.49106979]
[218.65100098 27.05109215]
[205.81405640 34.82040405]
[192.51458740 41.76834488]
[178.80511475 47.86749268]
[164.73971558 53.09377670]
[150.37390137 57.42657089]
[135.76438904 60.84877396]
[120.96881866 63.34688568]
[106.04558563 64.91104126]
[106.66956329 79.89805603]
[116.97756958 87.33772278]
[121.16918945 99.33914185]
[117.73432159 111.57864380]
[107.91043854 119.64678192]
[108.22249603 134.64353943]
[108.53455353 149.64028931]
[108.84661102 164.63703918]
[109.15866089 179.63380432]
[109.47071838 194.63055420]
[109.78277588 209.62730408]
[110.09483337 224.62405396]
[110.40689087 239.62081909]
[110.71894836 254.61756897]
[111.03099823 269.61431885]
[125.68599701 273.20507812]
[138.91180420 280.46734619]
[149.80667114 290.90594482]
[157.62776184 303.80914307]
[161.84184265 318.29721069]
[162.16156006 333.38232422]
[158.56513977 348.03591919]
[151.29777527 361.25891113]
[140.85496521 372.14974976]
[127.94873810 379.96588135]
[113.45904541 384.17434692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 125]
[25 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
