%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAUCCUGGGGGGGGGGUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAAxxxxxxxxxxAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCCCCCCCCCCCAUAAUCAU\
) } def
/len { sequence length } bind def

/coor [
[108.67514801 398.27926636]
[94.82920837 392.26324463]
[83.12054443 382.73382568]
[74.41802216 370.39813232]
[69.36742401 356.17163086]
[68.34352875 341.10995483]
[71.42232513 326.33078003]
[78.37535095 312.93084717]
[88.68663788 301.90451050]
[101.59101868 294.07000732]
[116.13090515 290.00869751]
[116.13090515 275.00869751]
[116.13090515 260.00869751]
[116.13090515 245.00869751]
[116.13090515 230.00869751]
[116.13090515 215.00869751]
[116.13090515 200.00869751]
[116.13090515 185.00869751]
[116.13090515 170.00869751]
[116.13090515 155.00869751]
[116.13090515 140.00869751]
[101.55878448 141.69932556]
[87.75724030 138.41503906]
[76.31655884 130.87080383]
[68.43955231 120.25180054]
[64.81704712 108.03849030]
[65.57481384 95.80489349]
[70.29454803 85.01705933]
[78.10238647 76.85738373]
[70.64747620 63.84107208]
[63.19256210 50.82476425]
[55.73765182 37.80845261]
[48.14774323 24.87039757]
[40.42366028 12.01199532]
[32.69957352 -0.84640747]
[19.04301643 5.39686155]
[4.77329254 10.07179451]
[-9.93013954 13.11959839]
[-24.88236809 14.50194454]
[-39.89535141 14.20144844]
[-54.78028870 12.22188950]
[-69.34998322 8.58816147]
[-83.42121124 3.34596348]
[-96.81700134 -3.43877864]
[-109.36889648 -11.68073940]
[-120.91904449 -21.27626801]
[-131.32218933 -32.10469055]
[-140.44747925 -44.02982712]
[-148.18019104 -56.90170670]
[-154.42304993 -70.55844879]
[-159.09754944 -84.82831573]
[-162.14492798 -99.53183746]
[-163.52682495 -114.48410797]
[-163.22587585 -129.49708557]
[-161.24586487 -144.38195801]
[-157.61170959 -158.95155334]
[-152.36909485 -173.02261353]
[-145.58393860 -186.41821289]
[-137.34161377 -198.96986389]
[-127.74573517 -210.51971436]
[-116.91699982 -220.92253113]
[-104.99159241 -230.04747009]
[-92.11948395 -237.77980042]
[-78.46254730 -244.02224731]
[-64.19255066 -248.69631958]
[-49.48893356 -251.74325562]
[-34.53662109 -253.12471008]
[-19.52365494 -252.82330322]
[-4.63883638 -250.84286499]
[9.93064213 -247.20826721]
[24.00155258 -241.96522522]
[37.39694214 -235.17967224]
[49.94834518 -226.93696594]
[61.49791336 -217.34074402]
[71.90040588 -206.51170349]
[81.02499390 -194.58601379]
[88.75692749 -181.71368408]
[94.99897003 -168.05656433]
[99.67262268 -153.78642273]
[102.71910858 -139.08271790]
[104.10011292 -124.13035583]
[103.79827118 -109.11740112]
[101.81737518 -94.23264313]
[98.18234253 -79.66326904]
[92.93888092 -65.59251404]
[86.15293884 -52.19733047]
[77.90985107 -39.64617538]
[68.31328583 -28.09689140]
[57.48393250 -17.69472504]
[45.55797577 -8.57049274]
[53.28206253 4.28790998]
[61.00614548 17.14631271]
[67.18652344 21.28739738]
[68.75395966 30.35354233]
[76.20886993 43.36985397]
[83.66378021 56.38616180]
[91.11869049 69.40247345]
[117.91450500 67.05659485]
[141.31013489 87.57522583]
[155.32684326 82.23371124]
[169.34355164 76.89219666]
[175.57723999 62.36922455]
[190.28518677 56.58547974]
[204.74143982 62.97235870]
[210.36936951 77.74063873]
[203.83000183 92.12856293]
[189.00305176 97.60002899]
[174.68507385 90.90891266]
[160.66836548 96.25042725]
[146.65164185 101.59193420]
[147.27561951 116.57895660]
[161.68783569 120.73683929]
[176.10005188 124.89472961]
[185.87556458 113.21742249]
[199.55836487 106.53156281]
[214.77784729 105.99551392]
[228.89712524 111.70214844]
[239.46997070 122.66275787]
[244.66455078 136.97834778]
[243.58090210 152.16865540]
[236.40673828 165.60188293]
[224.38505554 174.95062256]
[209.59866333 178.59515381]
[194.60940552 175.90403748]
[182.01426697 167.34355164]
[173.99540710 154.39680481]
[171.94216919 139.30694580]
[157.52995300 135.14906311]
[143.11773682 130.99116516]
[131.13090515 140.00869751]
[131.13090515 155.00869751]
[131.13090515 170.00869751]
[131.13090515 185.00869751]
[131.13090515 200.00869751]
[131.13090515 215.00869751]
[131.13090515 230.00869751]
[131.13090515 245.00869751]
[131.13090515 260.00869751]
[131.13090515 275.00869751]
[131.13090515 290.00869751]
[145.67079163 294.07000732]
[158.57516479 301.90451050]
[168.88645935 312.93084717]
[175.83947754 326.33078003]
[178.91827393 341.10995483]
[177.89437866 356.17163086]
[172.84378052 370.39813232]
[164.14125061 382.73382568]
[152.43260193 392.26324463]
[138.58665466 398.27926636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 97]
[30 96]
[31 95]
[32 94]
[33 92]
[34 91]
[35 90]
[99 110]
[100 109]
[101 108]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
