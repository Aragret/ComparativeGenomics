%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUAGACUAGGGGGGGGGGCGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUxxxxxxxxxxUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUCCCCCCCCCCGCCUAGACCA\
) } def
/len { sequence length } bind def

/coor [
[85.19730377 348.55923462]
[71.35136414 342.54321289]
[59.64270401 333.01379395]
[50.94018173 320.67813110]
[45.88957977 306.45159912]
[44.86568832 291.38992310]
[47.94448853 276.61077881]
[54.89751053 263.21084595]
[65.20879364 252.18450928]
[78.11317444 244.35000610]
[92.65306091 240.28869629]
[92.65306091 225.28869629]
[92.65306091 210.28869629]
[92.65306091 195.28869629]
[92.65306091 180.28869629]
[92.65306091 165.28869629]
[92.65306091 150.28869629]
[92.65306091 135.28869629]
[92.65306091 120.28868866]
[92.65306091 105.28868866]
[90.28324890 102.15493774]
[89.33691406 97.97760010]
[90.25396729 93.43037415]
[93.15031433 89.36036682]
[94.08593750 74.38957214]
[95.02156830 59.41878128]
[95.95719910 44.44799042]
[81.06867218 42.58298492]
[66.32489014 39.79596710]
[51.78289795 36.09772491]
[37.49895477 31.50256157]
[23.52832413 26.02825737]
[9.92505646 19.69599152]
[-3.25822210 12.53026104]
[-15.97050667 4.55879021]
[-28.16261482 -4.18758106]
[-39.78737640 -13.67501450]
[-50.79982376 -23.86680603]
[-61.15734100 -34.72352219]
[-70.81986237 -46.20316315]
[-79.75000763 -58.26131439]
[-87.91322327 -70.85132599]
[-95.27793121 -83.92449188]
[-101.81563568 -97.43022919]
[-107.50104523 -111.31629181]
[-112.31215668 -125.52894592]
[-116.23036957 -140.01322937]
[-119.24051666 -154.71307373]
[-121.33094788 -169.57162476]
[-122.49358368 -184.53140259]
[-122.72393036 -199.53451538]
[-122.02108765 -214.52291870]
[-120.38777161 -229.43864441]
[-117.83031464 -244.22396851]
[-114.35859680 -258.82171631]
[-109.98606110 -273.17535400]
[-104.72961426 -287.22940063]
[-98.60960388 -300.92947388]
[-91.64969635 -314.22256470]
[-83.87682343 -327.05725098]
[-75.32106018 -339.38385010]
[-66.01549530 -351.15472412]
[-55.99614716 -362.32427979]
[-45.30176926 -372.84933472]
[-33.97373581 -382.68917847]
[-22.05587769 -391.80569458]
[-9.59429741 -400.16366577]
[3.36278844 -407.73071289]
[16.76525307 -414.47760010]
[30.56124496 -420.37820435]
[44.69738770 -425.40969849]
[59.11899567 -429.55261230]
[73.77027130 -432.79095459]
[88.59452820 -435.11212158]
[103.53441620 -436.50720215]
[118.53213501 -436.97076416]
[133.52966309 -436.50103760]
[148.46897888 -435.09979248]
[163.29228210 -432.77252197]
[177.94221497 -429.52816772]
[192.36212158 -425.37930298]
[206.49618530 -420.34201050]
[220.28974915 -414.43572998]
[233.68943787 -407.68331909]
[246.64341736 -400.11093140]
[259.10156250 -391.74783325]
[271.01565552 -382.62640381]
[282.33963013 -372.78192139]
[293.02969360 -362.25244141]
[303.04443359 -351.07876587]
[312.34515381 -339.30407715]
[320.89584351 -326.97393799]
[328.66342163 -314.13607788]
[335.61785889 -300.84011841]
[341.73223877 -287.13754272]
[346.98291016 -273.08132935]
[351.34951782 -258.72586060]
[354.81524658 -244.12670898]
[357.36660767 -229.34033203]
[358.99377441 -214.42393494]
[359.69046021 -199.43522644]
[359.45394897 -184.43222046]
[358.28515625 -169.47291565]
[356.18859863 -154.61523438]
[353.17239380 -139.91662598]
[349.24822998 -125.43396759]
[344.43127441 -111.22328949]
[338.74014282 -97.33956909]
[332.19686890 -83.83652496]
[324.82678223 -70.76638794]
[316.65838623 -58.17973709]
[307.72329712 -46.12526321]
[298.05603027 -34.64960098]
[287.69406128 -23.79714584]
[276.67742920 -13.60988903]
[265.04873657 -4.12724018]
[252.85304260 4.61411238]
[240.13748169 12.58034992]
[226.95124817 19.74065399]
[213.34538269 26.06731987]
[199.37249756 31.53587341]
[185.08666992 36.12515640]
[170.54315186 39.81741333]
[155.79821777 42.59836197]
[140.90893555 44.45724106]
[125.93286896 45.38685989]
[110.92798615 45.38361740]
[109.99236298 60.35440826]
[109.05673218 75.32520294]
[108.12110138 90.29598999]
[107.65306091 105.28868866]
[107.65306091 120.28868866]
[107.65306091 135.28869629]
[107.65306091 150.28869629]
[107.65306091 165.28869629]
[107.65306091 180.28869629]
[107.65306091 195.28869629]
[107.65306091 210.28869629]
[107.65306091 225.28869629]
[107.65306091 240.28869629]
[122.19294739 244.35000610]
[135.09733582 252.18450928]
[145.40861511 263.21084595]
[152.36163330 276.61077881]
[155.44042969 291.38992310]
[154.41654968 306.45159912]
[149.36593628 320.67813110]
[140.66342163 333.01379395]
[128.95475769 342.54321289]
[115.10881805 348.55923462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 128]
[27 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
