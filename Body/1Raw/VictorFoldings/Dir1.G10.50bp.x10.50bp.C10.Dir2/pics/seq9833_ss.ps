%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCAACCUUGGGGGGGGGGUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCxxxxxxxxxxGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCCCCCCCCCCCUUCCCCACCCUU\
) } def
/len { sequence length } bind def

/coor [
[84.22579193 418.17245483]
[70.52363586 411.91156006]
[58.55852127 402.75820923]
[48.93061066 391.17153931]
[42.12282944 377.73272705]
[38.47666168 363.11584473]
[38.17499542 348.05407715]
[41.23295975 333.30291748]
[47.49716949 319.60229492]
[56.65341568 307.63940430]
[68.24242401 298.01428223]
[81.68289185 291.20977783]
[96.30065155 287.56713867]
[95.99665070 272.57022095]
[95.69264221 257.57330322]
[95.38864136 242.57638550]
[95.08464050 227.57946777]
[94.78063202 212.58255005]
[94.47663116 197.58561707]
[94.17262268 182.58869934]
[93.86862183 167.59178162]
[93.56461334 152.59486389]
[93.26061249 137.59794617]
[79.39730072 132.16448975]
[68.66478729 121.84329224]
[62.69397736 108.20279694]
[62.39220428 93.31579590]
[67.80532074 79.44452667]
[78.11074829 68.69687653]
[91.74246979 62.70605469]
[91.43846130 47.70913696]
[91.13446045 32.71221924]
[90.83045959 17.71529961]
[75.84315491 16.96057892]
[60.94641495 15.15054607]
[46.21446991 12.29421616]
[31.72070122 8.40581989]
[17.53732109 3.50472975]
[3.73499298 -2.38463712]
[-9.61752224 -9.23294067]
[-22.45370293 -17.00606155]
[-34.70959854 -25.66527367]
[-46.32414627 -35.16743851]
[-57.23949051 -45.46521759]
[-67.40124512 -56.50730133]
[-76.75878143 -68.23868561]
[-85.26549530 -80.60092163]
[-92.87899017 -93.53241730]
[-99.56134033 -106.96875763]
[-105.27925110 -120.84298706]
[-110.00424194 -135.08599854]
[-113.71277618 -149.62683105]
[-116.38636780 -164.39303589]
[-118.01170349 -179.31105042]
[-118.58068848 -194.30654907]
[-118.09047699 -209.30484009]
[-116.54351807 -224.23118591]
[-113.94752502 -239.01123047]
[-110.31542206 -253.57135010]
[-105.66530609 -267.83898926]
[-100.02033997 -281.74304199]
[-93.40866089 -295.21429443]
[-85.86318970 -308.18560791]
[-77.42153168 -320.59234619]
[-68.12574005 -332.37274170]
[-58.02212524 -343.46804810]
[-47.16102219 -353.82299805]
[-35.59654236 -363.38604736]
[-23.38630104 -372.10952759]
[-10.59112644 -379.94995117]
[2.72523355 -386.86828613]
[16.49643707 -392.83007812]
[30.65387917 -397.80560303]
[45.12702179 -401.77008057]
[59.84376526 -404.70373535]
[74.73078918 -406.59197998]
[89.71392059 -407.42541504]
[104.71852112 -407.19989014]
[119.66983795 -405.91647339]
[134.49337769 -403.58163452]
[149.11529541 -400.20693970]
[163.46273804 -395.80923462]
[177.46423340 -390.41046143]
[191.05003357 -384.03744507]
[204.15243530 -376.72198486]
[216.70616150 -368.50048828]
[228.64869690 -359.41397095]
[239.92051697 -349.50765991]
[250.46546936 -338.83093262]
[260.23104858 -327.43695068]
[269.16854858 -315.38250732]
[277.23348999 -302.72763062]
[284.38568115 -289.53540039]
[290.58947754 -275.87149048]
[295.81396484 -261.80404663]
[300.03314209 -247.40309143]
[303.22598267 -232.74038696]
[305.37655640 -217.88899231]
[306.47418213 -202.92289734]
[306.51336670 -187.91664124]
[305.49392700 -172.94502258]
[303.42092896 -158.08259583]
[300.30471802 -143.40342712]
[296.16082764 -128.98062134]
[291.00985718 -114.88607025]
[284.87753296 -101.18996429]
[277.79434204 -87.96054840]
[269.79559326 -75.26373291]
[260.92117310 -63.16276550]
[251.21525574 -51.71793747]
[240.72619629 -40.98627090]
[229.50627136 -31.02122498]
[217.61137390 -21.87244797]
[205.10073853 -13.58551884]
[192.03672791 -6.20172358]
[178.48440552 0.24215280]
[164.51130676 5.71400642]
[150.18702698 10.18657589]
[135.58293152 13.63758087]
[120.77178192 16.04982567]
[105.82737732 17.41129494]
[106.13137817 32.40821457]
[106.43538666 47.40513229]
[106.73938751 62.40205383]
[120.60269928 67.83551788]
[131.33520508 78.15670776]
[137.30601501 91.79720306]
[137.60780334 106.68420410]
[132.19468689 120.55547333]
[121.88925171 131.30313110]
[108.25753021 137.29394531]
[108.56153870 152.29086304]
[108.86553955 167.28778076]
[109.16954041 182.28469849]
[109.47354889 197.28161621]
[109.77754974 212.27853394]
[110.08155823 227.27545166]
[110.38555908 242.27238464]
[110.68956757 257.26928711]
[110.99356842 272.26620483]
[111.29757690 287.26312256]
[126.05094910 290.31036377]
[139.75613403 296.56463623]
[151.72567749 305.71215820]
[161.35920715 317.29418945]
[168.17349243 330.72970581]
[171.82675171 345.34481812]
[172.13571167 360.40643311]
[169.08489990 375.15905762]
[162.82733154 388.86273193]
[153.67687988 400.83007812]
[142.09254456 410.46078491]
[128.65538025 417.27182007]
[114.03937531 420.92153931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[30 124]
[31 123]
[32 122]
[33 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
